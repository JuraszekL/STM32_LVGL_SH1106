
08_OLED_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022a0c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003840  08022c04  08022c04  00032c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026444  08026444  00040020  2**0
                  CONTENTS
  4 .ARM          00000008  08026444  08026444  00036444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802644c  0802644c  00040020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802644c  0802644c  0003644c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026450  08026450  00036450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08026454  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c9e8  20000020  08026474  00040020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ca08  08026474  0004ca08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00069670  00000000  00000000  0004004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c4ef  00000000  00000000  000a96be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fb8  00000000  00000000  000b5bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ed8  00000000  00000000  000b8b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037983  00000000  00000000  000bba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00058326  00000000  00000000  000f33c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104807  00000000  00000000  0014b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024fef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c2d8  00000000  00000000  0024ff40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000020 	.word	0x20000020
 8000214:	00000000 	.word	0x00000000
 8000218:	08022bec 	.word	0x08022bec

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000024 	.word	0x20000024
 8000234:	08022bec 	.word	0x08022bec

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 b974 	b.w	800055c <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468e      	mov	lr, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14d      	bne.n	8000336 <__udivmoddi4+0xaa>
 800029a:	428a      	cmp	r2, r1
 800029c:	4694      	mov	ip, r2
 800029e:	d969      	bls.n	8000374 <__udivmoddi4+0xe8>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b152      	cbz	r2, 80002bc <__udivmoddi4+0x30>
 80002a6:	fa01 f302 	lsl.w	r3, r1, r2
 80002aa:	f1c2 0120 	rsb	r1, r2, #32
 80002ae:	fa20 f101 	lsr.w	r1, r0, r1
 80002b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b6:	ea41 0e03 	orr.w	lr, r1, r3
 80002ba:	4094      	lsls	r4, r2
 80002bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c0:	0c21      	lsrs	r1, r4, #16
 80002c2:	fbbe f6f8 	udiv	r6, lr, r8
 80002c6:	fa1f f78c 	uxth.w	r7, ip
 80002ca:	fb08 e316 	mls	r3, r8, r6, lr
 80002ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002d2:	fb06 f107 	mul.w	r1, r6, r7
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e2:	f080 811f 	bcs.w	8000524 <__udivmoddi4+0x298>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 811c 	bls.w	8000524 <__udivmoddi4+0x298>
 80002ec:	3e02      	subs	r6, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f8:	fb08 3310 	mls	r3, r8, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 f707 	mul.w	r7, r0, r7
 8000304:	42a7      	cmp	r7, r4
 8000306:	d90a      	bls.n	800031e <__udivmoddi4+0x92>
 8000308:	eb1c 0404 	adds.w	r4, ip, r4
 800030c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000310:	f080 810a 	bcs.w	8000528 <__udivmoddi4+0x29c>
 8000314:	42a7      	cmp	r7, r4
 8000316:	f240 8107 	bls.w	8000528 <__udivmoddi4+0x29c>
 800031a:	4464      	add	r4, ip
 800031c:	3802      	subs	r0, #2
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	1be4      	subs	r4, r4, r7
 8000324:	2600      	movs	r6, #0
 8000326:	b11d      	cbz	r5, 8000330 <__udivmoddi4+0xa4>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c5 4300 	strd	r4, r3, [r5]
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0xc2>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80ef 	beq.w	800051e <__udivmoddi4+0x292>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x160>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xd4>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80f9 	bhi.w	8000552 <__udivmoddi4+0x2c6>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0303 	sbc.w	r3, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	469e      	mov	lr, r3
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0e0      	beq.n	8000330 <__udivmoddi4+0xa4>
 800036e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000372:	e7dd      	b.n	8000330 <__udivmoddi4+0xa4>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xec>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	2a00      	cmp	r2, #0
 800037e:	f040 8092 	bne.w	80004a6 <__udivmoddi4+0x21a>
 8000382:	eba1 010c 	sub.w	r1, r1, ip
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2601      	movs	r6, #1
 8000390:	0c20      	lsrs	r0, r4, #16
 8000392:	fbb1 f3f7 	udiv	r3, r1, r7
 8000396:	fb07 1113 	mls	r1, r7, r3, r1
 800039a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039e:	fb0e f003 	mul.w	r0, lr, r3
 80003a2:	4288      	cmp	r0, r1
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x12c>
 80003a6:	eb1c 0101 	adds.w	r1, ip, r1
 80003aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x12a>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2c0>
 80003b6:	4643      	mov	r3, r8
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c0:	fb07 1110 	mls	r1, r7, r0, r1
 80003c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x156>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x154>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2ca>
 80003e0:	4608      	mov	r0, r1
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ea:	e79c      	b.n	8000326 <__udivmoddi4+0x9a>
 80003ec:	f1c6 0720 	rsb	r7, r6, #32
 80003f0:	40b3      	lsls	r3, r6
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa20 f407 	lsr.w	r4, r0, r7
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	431c      	orrs	r4, r3
 8000404:	40f9      	lsrs	r1, r7
 8000406:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040a:	fa00 f306 	lsl.w	r3, r0, r6
 800040e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000412:	0c20      	lsrs	r0, r4, #16
 8000414:	fa1f fe8c 	uxth.w	lr, ip
 8000418:	fb09 1118 	mls	r1, r9, r8, r1
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	fb08 f00e 	mul.w	r0, r8, lr
 8000424:	4288      	cmp	r0, r1
 8000426:	fa02 f206 	lsl.w	r2, r2, r6
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b8>
 800042c:	eb1c 0101 	adds.w	r1, ip, r1
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2bc>
 8000438:	4288      	cmp	r0, r1
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2bc>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4461      	add	r1, ip
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f9 	udiv	r0, r1, r9
 800044c:	fb09 1110 	mls	r1, r9, r0, r1
 8000450:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000454:	fb00 fe0e 	mul.w	lr, r0, lr
 8000458:	458e      	cmp	lr, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1e2>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2b4>
 8000466:	458e      	cmp	lr, r1
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2b4>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000472:	fba0 9402 	umull	r9, r4, r0, r2
 8000476:	eba1 010e 	sub.w	r1, r1, lr
 800047a:	42a1      	cmp	r1, r4
 800047c:	46c8      	mov	r8, r9
 800047e:	46a6      	mov	lr, r4
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x2a4>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x2a0>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x212>
 8000486:	ebb3 0208 	subs.w	r2, r3, r8
 800048a:	eb61 010e 	sbc.w	r1, r1, lr
 800048e:	fa01 f707 	lsl.w	r7, r1, r7
 8000492:	fa22 f306 	lsr.w	r3, r2, r6
 8000496:	40f1      	lsrs	r1, r6
 8000498:	431f      	orrs	r7, r3
 800049a:	e9c5 7100 	strd	r7, r1, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	40d8      	lsrs	r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa21 f303 	lsr.w	r3, r1, r3
 80004b4:	4091      	lsls	r1, r2
 80004b6:	4301      	orrs	r1, r0
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c4:	fb07 3610 	mls	r6, r7, r0, r3
 80004c8:	0c0b      	lsrs	r3, r1, #16
 80004ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ce:	fb00 f60e 	mul.w	r6, r0, lr
 80004d2:	429e      	cmp	r6, r3
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x260>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b8>
 80004e4:	429e      	cmp	r6, r3
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b8>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1b9b      	subs	r3, r3, r6
 80004ee:	b289      	uxth	r1, r1
 80004f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004f4:	fb07 3316 	mls	r3, r7, r6, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb06 f30e 	mul.w	r3, r6, lr
 8000500:	428b      	cmp	r3, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x28a>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2b0>
 800050e:	428b      	cmp	r3, r1
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2b0>
 8000512:	3e02      	subs	r6, #2
 8000514:	4461      	add	r1, ip
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0x104>
 800051e:	462e      	mov	r6, r5
 8000520:	4628      	mov	r0, r5
 8000522:	e705      	b.n	8000330 <__udivmoddi4+0xa4>
 8000524:	4606      	mov	r6, r0
 8000526:	e6e3      	b.n	80002f0 <__udivmoddi4+0x64>
 8000528:	4618      	mov	r0, r3
 800052a:	e6f8      	b.n	800031e <__udivmoddi4+0x92>
 800052c:	454b      	cmp	r3, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f8>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000538:	3801      	subs	r0, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f8>
 800053c:	4646      	mov	r6, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x28a>
 8000540:	4620      	mov	r0, r4
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1e2>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x260>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b8>
 800054c:	3b02      	subs	r3, #2
 800054e:	4461      	add	r1, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x12c>
 8000552:	4630      	mov	r0, r6
 8000554:	e709      	b.n	800036a <__udivmoddi4+0xde>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x156>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <MX_GPIO_Init+0xdc>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <MX_GPIO_Init+0xdc>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_GPIO_Init+0xdc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_GPIO_Init+0xdc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <MX_GPIO_Init+0xdc>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_GPIO_Init+0xdc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0xdc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <MX_GPIO_Init+0xdc>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_GPIO_Init+0xdc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xdc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <MX_GPIO_Init+0xe0>)
 80005f6:	f000 ff53 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_GPIO_Init+0xe4>)
 8000612:	f000 fd99 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000616:	f244 0381 	movw	r3, #16513	; 0x4081
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0xe0>)
 8000630:	f000 fd8a 	bl	8001148 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40020800 	.word	0x40020800

08000648 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_I2C1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_I2C1_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_I2C1_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_I2C1_Init+0x74>)
 8000684:	f000 ff26 	bl	80014d4 <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 f9e1 	bl	8000a54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_I2C1_Init+0x74>)
 8000696:	f001 fb07 	bl	8001ca8 <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 f9d8 	bl	8000a54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2C1_Init+0x74>)
 80006a8:	f001 fb49 	bl	8001d3e <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f9cf 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000003c 	.word	0x2000003c
 80006c0:	40005400 	.word	0x40005400
 80006c4:	20303e5d 	.word	0x20303e5d

080006c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0ae      	sub	sp, #184	; 0xb8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2290      	movs	r2, #144	; 0x90
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f022 fa6f 	bl	8022bcc <memset>
  if(i2cHandle->Instance==I2C1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a22      	ldr	r2, [pc, #136]	; (800077c <HAL_I2C_MspInit+0xb4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d13c      	bne.n	8000772 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006fe:	2300      	movs	r3, #0
 8000700:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f89a 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000712:	f000 f99f 	bl	8000a54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000736:	2312      	movs	r3, #18
 8000738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000748:	2304      	movs	r3, #4
 800074a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <HAL_I2C_MspInit+0xbc>)
 8000756:	f000 fcf7 	bl	8001148 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	37b8      	adds	r7, #184	; 0xb8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40005400 	.word	0x40005400
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <lv_port_disp_init>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_disp_t * lv_port_disp_init(I2C_HandleTypeDef *I2C){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    /*-------------------------
     * Initialize your display
     * -----------------------*/
    disp_init(I2C);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f831 	bl	80007f8 <disp_init>
     */

    /* Example for 1) */
    static lv_disp_draw_buf_t draw_buf_dsc_1;
    static lv_color_t buf_1[MY_DISP_HOR_RES * 10];                          /*A buffer for 10 rows*/
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/
 8000796:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800079a:	2200      	movs	r2, #0
 800079c:	4910      	ldr	r1, [pc, #64]	; (80007e0 <lv_port_disp_init+0x58>)
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <lv_port_disp_init+0x5c>)
 80007a0:	f01d fb36 	bl	801de10 <lv_disp_draw_buf_init>
    /*-----------------------------------
     * Register the display in LVGL
     *----------------------------------*/

    static lv_disp_drv_t disp_drv;                         /*Descriptor of a display driver*/
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <lv_port_disp_init+0x60>)
 80007a6:	f01d faef 	bl	801dd88 <lv_disp_drv_init>

    /*Set up the functions to access to your display*/

    /*Set the resolution of the display*/
    disp_drv.hor_res = MY_DISP_HOR_RES;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <lv_port_disp_init+0x60>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	801a      	strh	r2, [r3, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <lv_port_disp_init+0x60>)
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	805a      	strh	r2, [r3, #2]

    /*Used to copy the buffer's content to the display*/
    disp_drv.flush_cb = disp_flush;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <lv_port_disp_init+0x60>)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <lv_port_disp_init+0x64>)
 80007ba:	615a      	str	r2, [r3, #20]
    disp_drv.set_px_cb = set_px_cb;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <lv_port_disp_init+0x60>)
 80007be:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <lv_port_disp_init+0x68>)
 80007c0:	61da      	str	r2, [r3, #28]
    disp_drv.rounder_cb = rounder_cb;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <lv_port_disp_init+0x60>)
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <lv_port_disp_init+0x6c>)
 80007c6:	619a      	str	r2, [r3, #24]

    /*Set a display buffer*/
    disp_drv.draw_buf = &draw_buf_dsc_1;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <lv_port_disp_init+0x60>)
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <lv_port_disp_init+0x5c>)
 80007cc:	60da      	str	r2, [r3, #12]
     * Note that, in lv_conf.h you can enable GPUs that has built-in support in LVGL.
     * But if you have a different GPU you can use with this callback.*/
    //disp_drv.gpu_fill_cb = gpu_fill;

    /*Finally register the driver*/
    return lv_disp_drv_register(&disp_drv);
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <lv_port_disp_init+0x60>)
 80007d0:	f01d fb3a 	bl	801de48 <lv_disp_drv_register>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000ac 	.word	0x200000ac
 80007e4:	20000090 	.word	0x20000090
 80007e8:	200005ac 	.word	0x200005ac
 80007ec:	08000811 	.word	0x08000811
 80007f0:	08000869 	.word	0x08000869
 80007f4:	080008fd 	.word	0x080008fd

080007f8 <disp_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

/*Initialize your display and the required peripherals.*/
static void disp_init(I2C_HandleTypeDef *i2c){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

	SH1106_HwInit(i2c);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 f9b7 	bl	8000b74 <SH1106_HwInit>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af02      	add	r7, sp, #8
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
    if(disp_flush_enabled) {
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <disp_flush+0x54>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d016      	beq.n	8000854 <disp_flush+0x44>
        /*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/

    	uint8_t *buff = (uint8_t *)color_p;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	617b      	str	r3, [r7, #20]
    	SH1106_Send(area->x1, area->x2, area->y1, area->y2, buff);
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000830:	b2d8      	uxtb	r0, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000848:	b2dc      	uxtb	r4, r3
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	4623      	mov	r3, r4
 8000850:	f000 f9d8 	bl	8000c04 <SH1106_Send>
    }

    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
    lv_disp_flush_ready(disp_drv);
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f01d fc33 	bl	801e0c0 <lv_disp_flush_ready>
}
 800085a:	bf00      	nop
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000

08000868 <set_px_cb>:



static void set_px_cb(struct _lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
        				lv_color_t color, lv_opa_t opa){
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	460b      	mov	r3, r1
 8000878:	80fb      	strh	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	80bb      	strh	r3, [r7, #4]

	uint16_t byte_index = x + ((y / 8) * buf_w);
 800087e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da00      	bge.n	8000888 <set_px_cb+0x20>
 8000886:	3307      	adds	r3, #7
 8000888:	10db      	asrs	r3, r3, #3
 800088a:	b21b      	sxth	r3, r3
 800088c:	b29a      	uxth	r2, r3
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	fb12 f303 	smulbb	r3, r2, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	82fb      	strh	r3, [r7, #22]
	uint8_t  bit_index  = y & 0x7;
 800089c:	8c3b      	ldrh	r3, [r7, #32]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	757b      	strb	r3, [r7, #21]

	// == 0 inverts, so we get blue on black
	if(color.full == 0){
 80008a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10f      	bne.n	80008ce <set_px_cb+0x66>

		BIT_SET( buf[byte_index], bit_index);
 80008ae:	8afb      	ldrh	r3, [r7, #22]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	4413      	add	r3, r2
 80008b4:	7819      	ldrb	r1, [r3, #0]
 80008b6:	7d7b      	ldrb	r3, [r7, #21]
 80008b8:	2201      	movs	r2, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	8afb      	ldrh	r3, [r7, #22]
 80008c2:	68b8      	ldr	r0, [r7, #8]
 80008c4:	4403      	add	r3, r0
 80008c6:	430a      	orrs	r2, r1
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	701a      	strb	r2, [r3, #0]
	}
	else{

		BIT_CLEAR( buf[byte_index], bit_index);
	}
}
 80008cc:	e010      	b.n	80008f0 <set_px_cb+0x88>
		BIT_CLEAR( buf[byte_index], bit_index);
 80008ce:	8afb      	ldrh	r3, [r7, #22]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	2201      	movs	r2, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	68b8      	ldr	r0, [r7, #8]
 80008e8:	4403      	add	r3, r0
 80008ea:	400a      	ands	r2, r1
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <rounder_cb>:


static void rounder_cb(struct _lv_disp_drv_t * disp_drv, lv_area_t * area){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]

	area->y1 = (area->y1 & (~0x7));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800090c:	f023 0307 	bic.w	r3, r3, #7
 8000910:	b21a      	sxth	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	805a      	strh	r2, [r3, #2]
	area->y2 = ((area->y2 & (~0x7)) + 7);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800091c:	b29b      	uxth	r3, r3
 800091e:	f023 0307 	bic.w	r3, r3, #7
 8000922:	b29b      	uxth	r3, r3
 8000924:	3307      	adds	r3, #7
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	80da      	strh	r2, [r3, #6]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 fabf 	bl	8000ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f814 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f7ff fe0a 	bl	8000560 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800094c:	f000 fa00 	bl	8000d50 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000950:	f7ff fe7a 	bl	8000648 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lv_init();
 8000954:	f004 f8d0 	bl	8004af8 <lv_init>
  oled = lv_port_disp_init(&hi2c1);
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <main+0x2c>)
 800095a:	f7ff ff15 	bl	8000788 <lv_port_disp_init>
 800095e:	4603      	mov	r3, r0
 8000960:	4a02      	ldr	r2, [pc, #8]	; (800096c <main+0x30>)
 8000962:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000964:	e7fe      	b.n	8000964 <main+0x28>
 8000966:	bf00      	nop
 8000968:	2000003c 	.word	0x2000003c
 800096c:	200005fc 	.word	0x200005fc

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2234      	movs	r2, #52	; 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f022 f924 	bl	8022bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000994:	f001 fa20 	bl	8001dd8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <SystemClock_Config+0xdc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <SystemClock_Config+0xdc>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <SystemClock_Config+0xdc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <SystemClock_Config+0xe0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <SystemClock_Config+0xe0>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <SystemClock_Config+0xe0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fa4d 	bl	8001e98 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a04:	f000 f826 	bl	8000a54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a08:	f001 f9f6 	bl	8001df8 <HAL_PWREx_EnableOverDrive>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a12:	f000 f81f 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	230f      	movs	r3, #15
 8000a18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2103      	movs	r1, #3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fcde 	bl	80023f4 <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a3e:	f000 f809 	bl	8000a54 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	; 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <sh1106_cmd>:
/*********************************************************************************/
							// Low level I2C functions //
/*********************************************************************************/


static void sh1106_cmd(uint8_t cmd){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]

//	i2c_write_byte(SH1106_ADR, SH1106_CMD, cmd, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_CMD, 1, &cmd, 1, SH1106_TIMEOUT_MS);
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <sh1106_cmd+0x2c>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	2178      	movs	r1, #120	; 0x78
 8000a80:	f000 fdb8 	bl	80015f4 <HAL_I2C_Mem_Write>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000600 	.word	0x20000600

08000a90 <sh1106_multi_cmd>:

static void sh1106_multi_cmd(uint8_t *cmd, uint8_t len){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af04      	add	r7, sp, #16
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_CMD, cmd, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_CMD, 1, cmd, len, SH1106_TIMEOUT_MS);
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <sh1106_multi_cmd+0x30>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	2264      	movs	r2, #100	; 0x64
 8000aa6:	9202      	str	r2, [sp, #8]
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2301      	movs	r3, #1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2178      	movs	r1, #120	; 0x78
 8000ab4:	f000 fd9e 	bl	80015f4 <HAL_I2C_Mem_Write>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000600 	.word	0x20000600

08000ac4 <sh1106_multi_data>:

static void sh1106_multi_data(uint8_t *data, uint8_t len){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af04      	add	r7, sp, #16
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_DATA, data, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_DATA, 1, data, len, SH1106_TIMEOUT_MS);
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <sh1106_multi_data+0x30>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2264      	movs	r2, #100	; 0x64
 8000ada:	9202      	str	r2, [sp, #8]
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	2240      	movs	r2, #64	; 0x40
 8000ae6:	2178      	movs	r1, #120	; 0x78
 8000ae8:	f000 fd84 	bl	80015f4 <HAL_I2C_Mem_Write>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000600 	.word	0x20000600

08000af8 <sh1106_set_col>:

/*********************************************************************************/
								// Basic functions //
/*********************************************************************************/

static void sh1106_set_col(uint8_t col){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]

	if(col > (HORIZONTAL_RES - 1)) return;
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db16      	blt.n	8000b38 <sh1106_set_col+0x40>

	uint8_t buff[2];

	buff[0] = ((col + SH1106_OFFSET) & 0b00001111) | SET_L_COL_ADDR;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	733b      	strb	r3, [r7, #12]
	buff[1] = ((col + SH1106_OFFSET) >> 4) | SET_H_COL_ADDR;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	111b      	asrs	r3, r3, #4
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	737b      	strb	r3, [r7, #13]

	sh1106_multi_cmd(buff, 2);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ffad 	bl	8000a90 <sh1106_multi_cmd>
 8000b36:	e000      	b.n	8000b3a <sh1106_set_col+0x42>
	if(col > (HORIZONTAL_RES - 1)) return;
 8000b38:	bf00      	nop
}
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <sh1106_set_page>:

static void sh1106_set_page(uint8_t page){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]

	if(page > (PAGES - 1)) return;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d80d      	bhi.n	8000b6c <sh1106_set_page+0x2c>

	uint8_t a = (page & 0b00000111) | SET_PAGE_ADDR;
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	73fb      	strb	r3, [r7, #15]

	sh1106_cmd(a);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff7b 	bl	8000a60 <sh1106_cmd>
 8000b6a:	e000      	b.n	8000b6e <sh1106_set_page+0x2e>
	if(page > (PAGES - 1)) return;
 8000b6c:	bf00      	nop
}
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SH1106_HwInit>:

							// oled initialization //

/*********************************************************************************/

void SH1106_HwInit(I2C_HandleTypeDef *i2c){
 8000b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b78:	b087      	sub	sp, #28
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	466b      	mov	r3, sp
 8000b80:	461e      	mov	r6, r3

	sh1106_i2c = i2c;
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <SH1106_HwInit+0x88>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6013      	str	r3, [r2, #0]

	uint8_t a = sizeof(init_commands);
 8000b88:	2317      	movs	r3, #23
 8000b8a:	75fb      	strb	r3, [r7, #23]
	uint8_t tab[a];
 8000b8c:	7df9      	ldrb	r1, [r7, #23]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	3b01      	subs	r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	b2cb      	uxtb	r3, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	4698      	mov	r8, r3
 8000b9a:	4691      	mov	r9, r2
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ba8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bb0:	b2cb      	uxtb	r3, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	461c      	mov	r4, r3
 8000bb6:	4615      	mov	r5, r2
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	00eb      	lsls	r3, r5, #3
 8000bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bc6:	00e2      	lsls	r2, r4, #3
 8000bc8:	460b      	mov	r3, r1
 8000bca:	3307      	adds	r3, #7
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	ebad 0d03 	sub.w	sp, sp, r3
 8000bd4:	466b      	mov	r3, sp
 8000bd6:	3300      	adds	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]

	memcpy(tab, init_commands, a);
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <SH1106_HwInit+0x8c>)
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f021 ffe5 	bl	8022bb0 <memcpy>

	sh1106_multi_cmd(tab, a);
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	4619      	mov	r1, r3
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff ff50 	bl	8000a90 <sh1106_multi_cmd>
 8000bf0:	46b5      	mov	sp, r6
}
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bfc:	20000600 	.word	0x20000600
 8000c00:	08022c38 	.word	0x08022c38

08000c04 <SH1106_Send>:
				// Y1 and Y2 have to be (multiplication of 8) -1 //
				// f.e. 0, 7, 15 etc.

/*********************************************************************************/

void SH1106_Send(uint8_t X1, uint8_t X2, uint8_t Y1, uint8_t Y2, uint8_t *Buff){
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	4603      	mov	r3, r0
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	717b      	strb	r3, [r7, #5]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	713b      	strb	r3, [r7, #4]

	uint8_t xPixels = X2 - X1;
 8000c22:	79ba      	ldrb	r2, [r7, #6]
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	73bb      	strb	r3, [r7, #14]

	uint8_t firstPage = (Y1 / 8);
 8000c2a:	797b      	ldrb	r3, [r7, #5]
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	737b      	strb	r3, [r7, #13]
	uint8_t lastPage = (Y2 / 8);
 8000c30:	793b      	ldrb	r3, [r7, #4]
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	733b      	strb	r3, [r7, #12]
	uint8_t pages = lastPage - firstPage + 1;
 8000c36:	7b3a      	ldrb	r2, [r7, #12]
 8000c38:	7b7b      	ldrb	r3, [r7, #13]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	72fb      	strb	r3, [r7, #11]

	for(uint8_t a = 0; a < pages; a++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e019      	b.n	8000c7c <SH1106_Send+0x78>

		sh1106_set_page(a + firstPage);
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	7b7b      	ldrb	r3, [r7, #13]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff75 	bl	8000b40 <sh1106_set_page>
		sh1106_set_col(X1);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff4d 	bl	8000af8 <sh1106_set_col>
		sh1106_multi_data(&Buff[a * xPixels], xPixels);
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	7bba      	ldrb	r2, [r7, #14]
 8000c62:	fb02 f303 	mul.w	r3, r2, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	7bba      	ldrb	r2, [r7, #14]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff27 	bl	8000ac4 <sh1106_multi_data>
	for(uint8_t a = 0; a < pages; a++){
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	7bfa      	ldrb	r2, [r7, #15]
 8000c7e:	7afb      	ldrb	r3, [r7, #11]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d3e1      	bcc.n	8000c48 <SH1106_Send+0x44>
	}
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f90a 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <SystemInit+0x20>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <SystemInit+0x20>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <MX_USART3_UART_Init+0x5c>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d94:	f002 f97c 	bl	8003090 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d9e:	f7ff fe59 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000604 	.word	0x20000604
 8000dac:	40004800 	.word	0x40004800

08000db0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ae      	sub	sp, #184	; 0xb8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2290      	movs	r2, #144	; 0x90
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f021 fefb 	bl	8022bcc <memset>
  if(uartHandle->Instance==USART3)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <HAL_UART_MspInit+0xb4>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d13c      	bne.n	8000e5a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fd26 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dfa:	f7ff fe2b 	bl	8000a54 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_UART_MspInit+0xb8>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_UART_MspInit+0xb8>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0xb8>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0xb8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_UART_MspInit+0xb8>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_MspInit+0xb8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_UART_MspInit+0xbc>)
 8000e56:	f000 f977 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	37b8      	adds	r7, #184	; 0xb8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40004800 	.word	0x40004800
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020c00 	.word	0x40020c00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ff47 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f021 fe63 	bl	8022b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fd4b 	bl	800093c <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000eb4:	08026454 	.word	0x08026454
  ldr r2, =_sbss
 8000eb8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ebc:	2000ca08 	.word	0x2000ca08

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>

08000ec2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f000 f90a 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f805 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed2:	f7ff fedd 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f917 	bl	800112e <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f18:	f000 f8ed 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000004 	.word	0x20000004
 8000f34:	2000000c 	.word	0x2000000c
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000000c 	.word	0x2000000c
 8000f60:	2000068c 	.word	0x2000068c

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2000068c 	.word	0x2000068c

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <__NVIC_SetPriorityGrouping+0x40>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x40>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	05fa0000 	.word	0x05fa0000

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff47 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5c 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e175      	b.n	8001454 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8164 	bne.w	800144e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d005      	beq.n	800119e <HAL_GPIO_Init+0x56>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d130      	bne.n	8001200 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 0201 	and.w	r2, r3, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b03      	cmp	r3, #3
 800120a:	d017      	beq.n	800123c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	69b9      	ldr	r1, [r7, #24]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80be 	beq.w	800144e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <HAL_GPIO_Init+0x324>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a65      	ldr	r2, [pc, #404]	; (800146c <HAL_GPIO_Init+0x324>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b63      	ldr	r3, [pc, #396]	; (800146c <HAL_GPIO_Init+0x324>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ea:	4a61      	ldr	r2, [pc, #388]	; (8001470 <HAL_GPIO_Init+0x328>)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a58      	ldr	r2, [pc, #352]	; (8001474 <HAL_GPIO_Init+0x32c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d037      	beq.n	8001386 <HAL_GPIO_Init+0x23e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a57      	ldr	r2, [pc, #348]	; (8001478 <HAL_GPIO_Init+0x330>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d031      	beq.n	8001382 <HAL_GPIO_Init+0x23a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a56      	ldr	r2, [pc, #344]	; (800147c <HAL_GPIO_Init+0x334>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x236>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a55      	ldr	r2, [pc, #340]	; (8001480 <HAL_GPIO_Init+0x338>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x232>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a54      	ldr	r2, [pc, #336]	; (8001484 <HAL_GPIO_Init+0x33c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x22e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a53      	ldr	r2, [pc, #332]	; (8001488 <HAL_GPIO_Init+0x340>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x22a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a52      	ldr	r2, [pc, #328]	; (800148c <HAL_GPIO_Init+0x344>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x226>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a51      	ldr	r2, [pc, #324]	; (8001490 <HAL_GPIO_Init+0x348>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x222>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a50      	ldr	r2, [pc, #320]	; (8001494 <HAL_GPIO_Init+0x34c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x21e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <HAL_GPIO_Init+0x350>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x21a>
 800135e:	2309      	movs	r3, #9
 8001360:	e012      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001362:	230a      	movs	r3, #10
 8001364:	e010      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001366:	2308      	movs	r3, #8
 8001368:	e00e      	b.n	8001388 <HAL_GPIO_Init+0x240>
 800136a:	2307      	movs	r3, #7
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x240>
 800136e:	2306      	movs	r3, #6
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x240>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x240>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x240>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001398:	4935      	ldr	r1, [pc, #212]	; (8001470 <HAL_GPIO_Init+0x328>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <HAL_GPIO_Init+0x354>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a34      	ldr	r2, [pc, #208]	; (800149c <HAL_GPIO_Init+0x354>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_GPIO_Init+0x354>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a29      	ldr	r2, [pc, #164]	; (800149c <HAL_GPIO_Init+0x354>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fa:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_GPIO_Init+0x354>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141e:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_GPIO_Init+0x354>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_GPIO_Init+0x354>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_GPIO_Init+0x354>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f ae86 	bls.w	8001168 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40013800 	.word	0x40013800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40021400 	.word	0x40021400
 800148c:	40021800 	.word	0x40021800
 8001490:	40021c00 	.word	0x40021c00
 8001494:	40022000 	.word	0x40022000
 8001498:	40022400 	.word	0x40022400
 800149c:	40013c00 	.word	0x40013c00

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e07f      	b.n	80015e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff f8e4 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001524:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001534:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e006      	b.n	800155c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800155a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d104      	bne.n	800156e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_I2C_Init+0x11c>)
 800157a:	430b      	orrs	r3, r1
 800157c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800158c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69d9      	ldr	r1, [r3, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1a      	ldr	r2, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2220      	movs	r2, #32
 80015d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	02008000 	.word	0x02008000

080015f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	817b      	strh	r3, [r7, #10]
 8001606:	460b      	mov	r3, r1
 8001608:	813b      	strh	r3, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	f040 80f9 	bne.w	800180e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <HAL_I2C_Mem_Write+0x34>
 8001622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0ed      	b.n	8001810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_I2C_Mem_Write+0x4e>
 800163e:	2302      	movs	r3, #2
 8001640:	e0e6      	b.n	8001810 <HAL_I2C_Mem_Write+0x21c>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800164a:	f7ff fc8b 	bl	8000f64 <HAL_GetTick>
 800164e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2319      	movs	r3, #25
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f955 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0d1      	b.n	8001810 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2221      	movs	r2, #33	; 0x21
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2240      	movs	r2, #64	; 0x40
 8001678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a3a      	ldr	r2, [r7, #32]
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800168c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001694:	88f8      	ldrh	r0, [r7, #6]
 8001696:	893a      	ldrh	r2, [r7, #8]
 8001698:	8979      	ldrh	r1, [r7, #10]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4603      	mov	r3, r0
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f8b9 	bl	800181c <I2C_RequestMemoryWrite>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0a9      	b.n	8001810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	d90e      	bls.n	80016e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	22ff      	movs	r2, #255	; 0xff
 80016ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	8979      	ldrh	r1, [r7, #10]
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 fab1 	bl	8001c44 <I2C_TransferConfig>
 80016e2:	e00f      	b.n	8001704 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	8979      	ldrh	r1, [r7, #10]
 80016f6:	2300      	movs	r3, #0
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 faa0 	bl	8001c44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f93f 	bl	800198c <I2C_WaitOnTXISFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e07b      	b.n	8001810 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d034      	beq.n	80017bc <HAL_I2C_Mem_Write+0x1c8>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	2b00      	cmp	r3, #0
 8001758:	d130      	bne.n	80017bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001760:	2200      	movs	r2, #0
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 f8d1 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e04d      	b.n	8001810 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d90e      	bls.n	800179c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	22ff      	movs	r2, #255	; 0xff
 8001782:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	b2da      	uxtb	r2, r3
 800178a:	8979      	ldrh	r1, [r7, #10]
 800178c:	2300      	movs	r3, #0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fa55 	bl	8001c44 <I2C_TransferConfig>
 800179a:	e00f      	b.n	80017bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	8979      	ldrh	r1, [r7, #10]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 fa44 	bl	8001c44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d19e      	bne.n	8001704 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f91e 	bl	8001a0c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e01a      	b.n	8001810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2220      	movs	r2, #32
 80017e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_I2C_Mem_Write+0x224>)
 80017ee:	400b      	ands	r3, r1
 80017f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800180e:	2302      	movs	r3, #2
  }
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	fe00e800 	.word	0xfe00e800

0800181c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	4608      	mov	r0, r1
 8001826:	4611      	mov	r1, r2
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	817b      	strh	r3, [r7, #10]
 800182e:	460b      	mov	r3, r1
 8001830:	813b      	strh	r3, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	8979      	ldrh	r1, [r7, #10]
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <I2C_RequestMemoryWrite+0xa4>)
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f9fd 	bl	8001c44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	69b9      	ldr	r1, [r7, #24]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f89c 	bl	800198c <I2C_WaitOnTXISFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e02c      	b.n	80018b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001864:	893b      	ldrh	r3, [r7, #8]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
 800186e:	e015      	b.n	800189c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001870:	893b      	ldrh	r3, [r7, #8]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b29b      	uxth	r3, r3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	69b9      	ldr	r1, [r7, #24]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f882 	bl	800198c <I2C_WaitOnTXISFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e012      	b.n	80018b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001892:	893b      	ldrh	r3, [r7, #8]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2200      	movs	r2, #0
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f830 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	80002000 	.word	0x80002000

080018c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d103      	bne.n	80018e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d007      	beq.n	8001900 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	619a      	str	r2, [r3, #24]
  }
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800191c:	e022      	b.n	8001964 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001924:	d01e      	beq.n	8001964 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001926:	f7ff fb1d 	bl	8000f64 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d302      	bcc.n	800193c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d113      	bne.n	8001964 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f043 0220 	orr.w	r2, r3, #32
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2220      	movs	r2, #32
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e00f      	b.n	8001984 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4013      	ands	r3, r2
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	429a      	cmp	r2, r3
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	429a      	cmp	r2, r3
 8001980:	d0cd      	beq.n	800191e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001998:	e02c      	b.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f870 	bl	8001a84 <I2C_IsErrorOccurred>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e02a      	b.n	8001a04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019b4:	d01e      	beq.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b6:	f7ff fad5 	bl	8000f64 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d302      	bcc.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d113      	bne.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f043 0220 	orr.w	r2, r3, #32
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e007      	b.n	8001a04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d1cb      	bne.n	800199a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a18:	e028      	b.n	8001a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f830 	bl	8001a84 <I2C_IsErrorOccurred>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e026      	b.n	8001a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a2e:	f7ff fa99 	bl	8000f64 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d302      	bcc.n	8001a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d113      	bne.n	8001a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f043 0220 	orr.w	r2, r3, #32
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e007      	b.n	8001a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d1cf      	bne.n	8001a1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d068      	beq.n	8001b82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ab8:	e049      	b.n	8001b4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ac0:	d045      	beq.n	8001b4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ac2:	f7ff fa4f 	bl	8000f64 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d302      	bcc.n	8001ad8 <I2C_IsErrorOccurred+0x54>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d13a      	bne.n	8001b4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afa:	d121      	bne.n	8001b40 <I2C_IsErrorOccurred+0xbc>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b02:	d01d      	beq.n	8001b40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	d01a      	beq.n	8001b40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b1a:	f7ff fa23 	bl	8000f64 <HAL_GetTick>
 8001b1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b20:	e00e      	b.n	8001b40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b22:	f7ff fa1f 	bl	8000f64 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b19      	cmp	r3, #25
 8001b2e:	d907      	bls.n	8001b40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	f043 0320 	orr.w	r3, r3, #32
 8001b36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001b3e:	e006      	b.n	8001b4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d1e9      	bne.n	8001b22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d003      	beq.n	8001b64 <I2C_IsErrorOccurred+0xe0>
 8001b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0aa      	beq.n	8001aba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2220      	movs	r2, #32
 8001b72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00b      	beq.n	8001bac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f043 0308 	orr.w	r3, r3, #8
 8001bbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01c      	beq.n	8001c32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff fe63 	bl	80018c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <I2C_IsErrorOccurred+0x1bc>)
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	fe00e800 	.word	0xfe00e800

08001c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	817b      	strh	r3, [r7, #10]
 8001c52:	4613      	mov	r3, r2
 8001c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c5c:	7a7b      	ldrb	r3, [r7, #9]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	0d5b      	lsrs	r3, r3, #21
 8001c7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <I2C_TransferConfig+0x60>)
 8001c84:	430b      	orrs	r3, r1
 8001c86:	43db      	mvns	r3, r3
 8001c88:	ea02 0103 	and.w	r1, r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	03ff63ff 	.word	0x03ff63ff

08001ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d138      	bne.n	8001d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e032      	b.n	8001d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	; 0x24
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d139      	bne.n	8001dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e033      	b.n	8001dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2224      	movs	r2, #36	; 0x24
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40007000 	.word	0x40007000

08001df8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e26:	f7ff f89d 	bl	8000f64 <HAL_GetTick>
 8001e2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e2c:	e009      	b.n	8001e42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e2e:	f7ff f899 	bl	8000f64 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e3c:	d901      	bls.n	8001e42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e022      	b.n	8001e88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e5c:	f7ff f882 	bl	8000f64 <HAL_GetTick>
 8001e60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e62:	e009      	b.n	8001e78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e64:	f7ff f87e 	bl	8000f64 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e72:	d901      	bls.n	8001e78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e007      	b.n	8001e88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e84:	d1ee      	bne.n	8001e64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40007000 	.word	0x40007000

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e29b      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8087 	beq.w	8001fca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ebc:	4b96      	ldr	r3, [pc, #600]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec8:	4b93      	ldr	r3, [pc, #588]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d112      	bne.n	8001efa <HAL_RCC_OscConfig+0x62>
 8001ed4:	4b90      	ldr	r3, [pc, #576]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d06c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x130>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d168      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e275      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x7a>
 8001f04:	4b84      	ldr	r3, [pc, #528]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a83      	ldr	r2, [pc, #524]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e02e      	b.n	8001f70 <HAL_RCC_OscConfig+0xd8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x9c>
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7e      	ldr	r2, [pc, #504]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b7c      	ldr	r3, [pc, #496]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7b      	ldr	r2, [pc, #492]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xd8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0xc0>
 8001f3e:	4b76      	ldr	r3, [pc, #472]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a75      	ldr	r2, [pc, #468]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a72      	ldr	r2, [pc, #456]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xd8>
 8001f58:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6e      	ldr	r2, [pc, #440]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6b      	ldr	r2, [pc, #428]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe fff4 	bl	8000f64 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7fe fff0 	bl	8000f64 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e229      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe8>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ffe0 	bl	8000f64 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe ffdc 	bl	8000f64 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e215      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x110>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d069      	beq.n	80020aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd6:	4b50      	ldr	r3, [pc, #320]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x190>
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x17a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1e9      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	493d      	ldr	r1, [pc, #244]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e040      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d023      	beq.n	8002078 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a38      	ldr	r2, [pc, #224]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe ff92 	bl	8000f64 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002044:	f7fe ff8e 	bl	8000f64 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1c7      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4929      	ldr	r1, [pc, #164]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
 8002076:	e018      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a26      	ldr	r2, [pc, #152]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe ff6e 	bl	8000f64 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe ff6a 	bl	8000f64 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1a3      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d038      	beq.n	8002128 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d019      	beq.n	80020f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 80020c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c2:	4a15      	ldr	r2, [pc, #84]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7fe ff4b 	bl	8000f64 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d2:	f7fe ff47 	bl	8000f64 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e180      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x23a>
 80020f0:	e01a      	b.n	8002128 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 80020f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <HAL_RCC_OscConfig+0x280>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7fe ff31 	bl	8000f64 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002106:	f7fe ff2d 	bl	8000f64 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d903      	bls.n	800211c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e166      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
 8002118:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 800211e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ee      	bne.n	8002106 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a4 	beq.w	800227e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002136:	4b8c      	ldr	r3, [pc, #560]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10d      	bne.n	800215e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	4b89      	ldr	r3, [pc, #548]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a88      	ldr	r2, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b86      	ldr	r3, [pc, #536]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800215e:	4b83      	ldr	r3, [pc, #524]	; (800236c <HAL_RCC_OscConfig+0x4d4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d118      	bne.n	800219c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800216a:	4b80      	ldr	r3, [pc, #512]	; (800236c <HAL_RCC_OscConfig+0x4d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7f      	ldr	r2, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x4d4>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002176:	f7fe fef5 	bl	8000f64 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217e:	f7fe fef1 	bl	8000f64 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b64      	cmp	r3, #100	; 0x64
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e12a      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002190:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_RCC_OscConfig+0x4d4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x31a>
 80021a4:	4b70      	ldr	r3, [pc, #448]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a6f      	ldr	r2, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	e02d      	b.n	800220e <HAL_RCC_OscConfig+0x376>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x33c>
 80021ba:	4b6b      	ldr	r3, [pc, #428]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a6a      	ldr	r2, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
 80021c6:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a67      	ldr	r2, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
 80021d2:	e01c      	b.n	800220e <HAL_RCC_OscConfig+0x376>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d10c      	bne.n	80021f6 <HAL_RCC_OscConfig+0x35e>
 80021dc:	4b62      	ldr	r3, [pc, #392]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	4a61      	ldr	r2, [pc, #388]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70
 80021e8:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	4a5e      	ldr	r2, [pc, #376]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6713      	str	r3, [r2, #112]	; 0x70
 80021f4:	e00b      	b.n	800220e <HAL_RCC_OscConfig+0x376>
 80021f6:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	4a5b      	ldr	r2, [pc, #364]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6713      	str	r3, [r2, #112]	; 0x70
 8002202:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d015      	beq.n	8002242 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe fea5 	bl	8000f64 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe fea1 	bl	8000f64 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0d8      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ee      	beq.n	800221e <HAL_RCC_OscConfig+0x386>
 8002240:	e014      	b.n	800226c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7fe fe8f 	bl	8000f64 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe fe8b 	bl	8000f64 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0c2      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ee      	bne.n	800224a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a3c      	ldr	r2, [pc, #240]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80ae 	beq.w	80023e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002288:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b08      	cmp	r3, #8
 8002292:	d06d      	beq.n	8002370 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d14b      	bne.n	8002334 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a31      	ldr	r2, [pc, #196]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80022a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fe5c 	bl	8000f64 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fe58 	bl	8000f64 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e091      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	019b      	lsls	r3, r3, #6
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	3b01      	subs	r3, #1
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	071b      	lsls	r3, r3, #28
 80022fa:	491b      	ldr	r1, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a18      	ldr	r2, [pc, #96]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fe2a 	bl	8000f64 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe fe26 	bl	8000f64 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e05f      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x47c>
 8002332:	e057      	b.n	80023e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fe10 	bl	8000f64 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fe0c 	bl	8000f64 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e045      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_RCC_OscConfig+0x4d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x4b0>
 8002366:	e03d      	b.n	80023e4 <HAL_RCC_OscConfig+0x54c>
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_RCC_OscConfig+0x558>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d030      	beq.n	80023e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d129      	bne.n	80023e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d122      	bne.n	80023e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d119      	bne.n	80023e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d10f      	bne.n	80023e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800

080023f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d0      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 020f 	bic.w	r2, r3, #15
 8002422:	4965      	ldr	r1, [pc, #404]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 800245a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800245e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002476:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d040      	beq.n	8002518 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e073      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4936      	ldr	r1, [pc, #216]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7fe fd3c 	bl	8000f64 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fd38 	bl	8000f64 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e053      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d210      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 020f 	bic.w	r2, r3, #15
 800252e:	4922      	ldr	r1, [pc, #136]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	490a      	ldr	r1, [pc, #40]	; (80025c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1d0>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1d4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fc98 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00
 80025bc:	40023800 	.word	0x40023800
 80025c0:	08022c50 	.word	0x08022c50
 80025c4:	20000004 	.word	0x20000004
 80025c8:	20000008 	.word	0x20000008

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d0:	b094      	sub	sp, #80	; 0x50
 80025d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
 80025d8:	2300      	movs	r3, #0
 80025da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025dc:	2300      	movs	r3, #0
 80025de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e4:	4b79      	ldr	r3, [pc, #484]	; (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d00d      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x40>
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	f200 80e1 	bhi.w	80027b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x34>
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d003      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x3a>
 80025fe:	e0db      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4b73      	ldr	r3, [pc, #460]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002602:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002604:	e0db      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002606:	4b73      	ldr	r3, [pc, #460]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800260a:	e0d8      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002614:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002616:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	2200      	movs	r2, #0
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
 800262c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
 800263a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800263e:	4622      	mov	r2, r4
 8002640:	462b      	mov	r3, r5
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	0159      	lsls	r1, r3, #5
 800264c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002650:	0150      	lsls	r0, r2, #5
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4621      	mov	r1, r4
 8002658:	1a51      	subs	r1, r2, r1
 800265a:	6139      	str	r1, [r7, #16]
 800265c:	4629      	mov	r1, r5
 800265e:	eb63 0301 	sbc.w	r3, r3, r1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002670:	4659      	mov	r1, fp
 8002672:	018b      	lsls	r3, r1, #6
 8002674:	4651      	mov	r1, sl
 8002676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267a:	4651      	mov	r1, sl
 800267c:	018a      	lsls	r2, r1, #6
 800267e:	4651      	mov	r1, sl
 8002680:	ebb2 0801 	subs.w	r8, r2, r1
 8002684:	4659      	mov	r1, fp
 8002686:	eb63 0901 	sbc.w	r9, r3, r1
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800269a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800269e:	4690      	mov	r8, r2
 80026a0:	4699      	mov	r9, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	eb18 0303 	adds.w	r3, r8, r3
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	462b      	mov	r3, r5
 80026ac:	eb49 0303 	adc.w	r3, r9, r3
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026be:	4629      	mov	r1, r5
 80026c0:	024b      	lsls	r3, r1, #9
 80026c2:	4621      	mov	r1, r4
 80026c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026c8:	4621      	mov	r1, r4
 80026ca:	024a      	lsls	r2, r1, #9
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	2200      	movs	r2, #0
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026dc:	f7fd fdbe 	bl	800025c <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4613      	mov	r3, r2
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026e8:	e058      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	099b      	lsrs	r3, r3, #6
 80026f0:	2200      	movs	r2, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	4611      	mov	r1, r2
 80026f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	2300      	movs	r3, #0
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002704:	4642      	mov	r2, r8
 8002706:	464b      	mov	r3, r9
 8002708:	f04f 0000 	mov.w	r0, #0
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	0159      	lsls	r1, r3, #5
 8002712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002716:	0150      	lsls	r0, r2, #5
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4641      	mov	r1, r8
 800271e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002722:	4649      	mov	r1, r9
 8002724:	eb63 0b01 	sbc.w	fp, r3, r1
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002734:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002738:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800273c:	ebb2 040a 	subs.w	r4, r2, sl
 8002740:	eb63 050b 	sbc.w	r5, r3, fp
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	00eb      	lsls	r3, r5, #3
 800274e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002752:	00e2      	lsls	r2, r4, #3
 8002754:	4614      	mov	r4, r2
 8002756:	461d      	mov	r5, r3
 8002758:	4643      	mov	r3, r8
 800275a:	18e3      	adds	r3, r4, r3
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	464b      	mov	r3, r9
 8002760:	eb45 0303 	adc.w	r3, r5, r3
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002772:	4629      	mov	r1, r5
 8002774:	028b      	lsls	r3, r1, #10
 8002776:	4621      	mov	r1, r4
 8002778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800277c:	4621      	mov	r1, r4
 800277e:	028a      	lsls	r2, r1, #10
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002786:	2200      	movs	r2, #0
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	61fa      	str	r2, [r7, #28]
 800278c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002790:	f7fd fd64 	bl	800025c <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4613      	mov	r3, r2
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_GetSysClockFreq+0x200>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	3301      	adds	r3, #1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b6:	e002      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3750      	adds	r7, #80	; 0x50
 80027c4:	46bd      	mov	sp, r7
 80027c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	00f42400 	.word	0x00f42400
 80027d4:	007a1200 	.word	0x007a1200

080027d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_RCC_GetHCLKFreq+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000004 	.word	0x20000004

080027f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f4:	f7ff fff0 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0a9b      	lsrs	r3, r3, #10
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4903      	ldr	r1, [pc, #12]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	08022c60 	.word	0x08022c60

08002818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800281c:	f7ff ffdc 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	0b5b      	lsrs	r3, r3, #13
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4903      	ldr	r1, [pc, #12]	; (800283c <HAL_RCC_GetPCLK2Freq+0x24>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	08022c60 	.word	0x08022c60

08002840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d012      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002868:	4b69      	ldr	r3, [pc, #420]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a68      	ldr	r2, [pc, #416]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002872:	6093      	str	r3, [r2, #8]
 8002874:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	4964      	ldr	r1, [pc, #400]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d017      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800289a:	4b5d      	ldr	r3, [pc, #372]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	4959      	ldr	r1, [pc, #356]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b8:	d101      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028d6:	4b4e      	ldr	r3, [pc, #312]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	494a      	ldr	r1, [pc, #296]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002912:	2301      	movs	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 808b 	beq.w	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a39      	ldr	r2, [pc, #228]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
 8002930:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800293c:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a34      	ldr	r2, [pc, #208]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002948:	f7fe fb0c 	bl	8000f64 <HAL_GetTick>
 800294c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002950:	f7fe fb08 	bl	8000f64 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e38f      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002962:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d035      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	429a      	cmp	r2, r3
 800298a:	d02e      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800298c:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ae:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d114      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fad0 	bl	8000f64 <HAL_GetTick>
 80029c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	e00a      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe facc 	bl	8000f64 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e351      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0ee      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029f6:	d111      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a06:	400b      	ands	r3, r1
 8002a08:	4901      	ldr	r1, [pc, #4]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40007000 	.word	0x40007000
 8002a18:	0ffffcff 	.word	0x0ffffcff
 8002a1c:	4bac      	ldr	r3, [pc, #688]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4aab      	ldr	r2, [pc, #684]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a26:	6093      	str	r3, [r2, #8]
 8002a28:	4ba9      	ldr	r3, [pc, #676]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	49a6      	ldr	r1, [pc, #664]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d010      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a46:	4ba2      	ldr	r3, [pc, #648]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4c:	4aa0      	ldr	r2, [pc, #640]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a56:	4b9e      	ldr	r3, [pc, #632]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	499b      	ldr	r1, [pc, #620]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a74:	4b96      	ldr	r3, [pc, #600]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a82:	4993      	ldr	r1, [pc, #588]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a96:	4b8e      	ldr	r3, [pc, #568]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa4:	498a      	ldr	r1, [pc, #552]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab8:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	4982      	ldr	r1, [pc, #520]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ada:	4b7d      	ldr	r3, [pc, #500]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4979      	ldr	r1, [pc, #484]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afc:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f023 0203 	bic.w	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	4971      	ldr	r1, [pc, #452]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b1e:	4b6c      	ldr	r3, [pc, #432]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f023 020c 	bic.w	r2, r3, #12
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2c:	4968      	ldr	r1, [pc, #416]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b40:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	4960      	ldr	r1, [pc, #384]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b62:	4b5b      	ldr	r3, [pc, #364]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b70:	4957      	ldr	r1, [pc, #348]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b84:	4b52      	ldr	r3, [pc, #328]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	494f      	ldr	r1, [pc, #316]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4946      	ldr	r1, [pc, #280]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bc8:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	493e      	ldr	r1, [pc, #248]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bea:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf8:	4935      	ldr	r1, [pc, #212]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c1a:	492d      	ldr	r1, [pc, #180]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d011      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c3c:	4924      	ldr	r1, [pc, #144]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7c:	4914      	ldr	r1, [pc, #80]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca0:	490b      	ldr	r1, [pc, #44]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc4:	4902      	ldr	r1, [pc, #8]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ccc:	e002      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ce0:	4b8a      	ldr	r3, [pc, #552]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	4986      	ldr	r1, [pc, #536]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d04:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d14:	497d      	ldr	r1, [pc, #500]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d006      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80d6 	beq.w	8002edc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d30:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3c:	f7fe f912 	bl	8000f64 <HAL_GetTick>
 8002d40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d44:	f7fe f90e 	bl	8000f64 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e195      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d021      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11d      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d76:	4b65      	ldr	r3, [pc, #404]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d84:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8a:	0e1b      	lsrs	r3, r3, #24
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	019a      	lsls	r2, r3, #6
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	4958      	ldr	r1, [pc, #352]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d02e      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ddc:	d129      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dde:	4b4b      	ldr	r3, [pc, #300]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dec:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df2:	0f1b      	lsrs	r3, r3, #28
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	019a      	lsls	r2, r3, #6
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	071b      	lsls	r3, r3, #28
 8002e12:	493e      	ldr	r1, [pc, #248]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e1a:	4b3c      	ldr	r3, [pc, #240]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e20:	f023 021f 	bic.w	r2, r3, #31
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	4938      	ldr	r1, [pc, #224]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01d      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e44:	0e1b      	lsrs	r3, r3, #24
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e4c:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e52:	0f1b      	lsrs	r3, r3, #28
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	019a      	lsls	r2, r3, #6
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	061b      	lsls	r3, r3, #24
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	4926      	ldr	r1, [pc, #152]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d011      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	019a      	lsls	r2, r3, #6
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	071b      	lsls	r3, r3, #28
 8002ea2:	491a      	ldr	r1, [pc, #104]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb6:	f7fe f855 	bl	8000f64 <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ebe:	f7fe f851 	bl	8000f64 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0d8      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 80ce 	bne.w	8003080 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef0:	f7fe f838 	bl	8000f64 <HAL_GetTick>
 8002ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ef8:	f7fe f834 	bl	8000f64 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d904      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0bb      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f10:	4b5e      	ldr	r3, [pc, #376]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1c:	d0ec      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02e      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d12a      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f46:	4b51      	ldr	r3, [pc, #324]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f54:	4b4d      	ldr	r3, [pc, #308]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	0f1b      	lsrs	r3, r3, #28
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	019a      	lsls	r2, r3, #6
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	061b      	lsls	r3, r3, #24
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	071b      	lsls	r3, r3, #28
 8002f7a:	4944      	ldr	r1, [pc, #272]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f82:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	493d      	ldr	r1, [pc, #244]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d022      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb0:	d11d      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	0e1b      	lsrs	r3, r3, #24
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fc0:	4b32      	ldr	r3, [pc, #200]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	0f1b      	lsrs	r3, r3, #28
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	019a      	lsls	r2, r3, #6
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	071b      	lsls	r3, r3, #28
 8002fe6:	4929      	ldr	r1, [pc, #164]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d028      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	0e1b      	lsrs	r3, r3, #24
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	0c1b      	lsrs	r3, r3, #16
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	019a      	lsls	r2, r3, #6
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	431a      	orrs	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	4917      	ldr	r1, [pc, #92]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	4911      	ldr	r1, [pc, #68]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003058:	f7fd ff84 	bl	8000f64 <HAL_GetTick>
 800305c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003060:	f7fd ff80 	bl	8000f64 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e007      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800307a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800307e:	d1ef      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e040      	b.n	8003124 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fe7c 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f82c 	bl	800312c <UART_SetConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e022      	b.n	8003124 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa84 	bl	80035f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800310a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fb0b 	bl	8003738 <UART_CheckIdleState>
 8003122:	4603      	mov	r3, r0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4ba6      	ldr	r3, [pc, #664]	; (80033f0 <UART_SetConfig+0x2c4>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6979      	ldr	r1, [r7, #20]
 8003160:	430b      	orrs	r3, r1
 8003162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a94      	ldr	r2, [pc, #592]	; (80033f4 <UART_SetConfig+0x2c8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d120      	bne.n	80031ea <UART_SetConfig+0xbe>
 80031a8:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <UART_SetConfig+0x2cc>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d816      	bhi.n	80031e4 <UART_SetConfig+0xb8>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <UART_SetConfig+0x90>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031d9 	.word	0x080031d9
 80031c4:	080031d3 	.word	0x080031d3
 80031c8:	080031df 	.word	0x080031df
 80031cc:	2301      	movs	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e150      	b.n	8003474 <UART_SetConfig+0x348>
 80031d2:	2302      	movs	r3, #2
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e14d      	b.n	8003474 <UART_SetConfig+0x348>
 80031d8:	2304      	movs	r3, #4
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e14a      	b.n	8003474 <UART_SetConfig+0x348>
 80031de:	2308      	movs	r3, #8
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e147      	b.n	8003474 <UART_SetConfig+0x348>
 80031e4:	2310      	movs	r3, #16
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e144      	b.n	8003474 <UART_SetConfig+0x348>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a83      	ldr	r2, [pc, #524]	; (80033fc <UART_SetConfig+0x2d0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d132      	bne.n	800325a <UART_SetConfig+0x12e>
 80031f4:	4b80      	ldr	r3, [pc, #512]	; (80033f8 <UART_SetConfig+0x2cc>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d828      	bhi.n	8003254 <UART_SetConfig+0x128>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <UART_SetConfig+0xdc>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	0800323d 	.word	0x0800323d
 800320c:	08003255 	.word	0x08003255
 8003210:	08003255 	.word	0x08003255
 8003214:	08003255 	.word	0x08003255
 8003218:	08003249 	.word	0x08003249
 800321c:	08003255 	.word	0x08003255
 8003220:	08003255 	.word	0x08003255
 8003224:	08003255 	.word	0x08003255
 8003228:	08003243 	.word	0x08003243
 800322c:	08003255 	.word	0x08003255
 8003230:	08003255 	.word	0x08003255
 8003234:	08003255 	.word	0x08003255
 8003238:	0800324f 	.word	0x0800324f
 800323c:	2300      	movs	r3, #0
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e118      	b.n	8003474 <UART_SetConfig+0x348>
 8003242:	2302      	movs	r3, #2
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e115      	b.n	8003474 <UART_SetConfig+0x348>
 8003248:	2304      	movs	r3, #4
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e112      	b.n	8003474 <UART_SetConfig+0x348>
 800324e:	2308      	movs	r3, #8
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e10f      	b.n	8003474 <UART_SetConfig+0x348>
 8003254:	2310      	movs	r3, #16
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e10c      	b.n	8003474 <UART_SetConfig+0x348>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a68      	ldr	r2, [pc, #416]	; (8003400 <UART_SetConfig+0x2d4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d120      	bne.n	80032a6 <UART_SetConfig+0x17a>
 8003264:	4b64      	ldr	r3, [pc, #400]	; (80033f8 <UART_SetConfig+0x2cc>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800326e:	2b30      	cmp	r3, #48	; 0x30
 8003270:	d013      	beq.n	800329a <UART_SetConfig+0x16e>
 8003272:	2b30      	cmp	r3, #48	; 0x30
 8003274:	d814      	bhi.n	80032a0 <UART_SetConfig+0x174>
 8003276:	2b20      	cmp	r3, #32
 8003278:	d009      	beq.n	800328e <UART_SetConfig+0x162>
 800327a:	2b20      	cmp	r3, #32
 800327c:	d810      	bhi.n	80032a0 <UART_SetConfig+0x174>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <UART_SetConfig+0x15c>
 8003282:	2b10      	cmp	r3, #16
 8003284:	d006      	beq.n	8003294 <UART_SetConfig+0x168>
 8003286:	e00b      	b.n	80032a0 <UART_SetConfig+0x174>
 8003288:	2300      	movs	r3, #0
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e0f2      	b.n	8003474 <UART_SetConfig+0x348>
 800328e:	2302      	movs	r3, #2
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e0ef      	b.n	8003474 <UART_SetConfig+0x348>
 8003294:	2304      	movs	r3, #4
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e0ec      	b.n	8003474 <UART_SetConfig+0x348>
 800329a:	2308      	movs	r3, #8
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e0e9      	b.n	8003474 <UART_SetConfig+0x348>
 80032a0:	2310      	movs	r3, #16
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e0e6      	b.n	8003474 <UART_SetConfig+0x348>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a56      	ldr	r2, [pc, #344]	; (8003404 <UART_SetConfig+0x2d8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d120      	bne.n	80032f2 <UART_SetConfig+0x1c6>
 80032b0:	4b51      	ldr	r3, [pc, #324]	; (80033f8 <UART_SetConfig+0x2cc>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032ba:	2bc0      	cmp	r3, #192	; 0xc0
 80032bc:	d013      	beq.n	80032e6 <UART_SetConfig+0x1ba>
 80032be:	2bc0      	cmp	r3, #192	; 0xc0
 80032c0:	d814      	bhi.n	80032ec <UART_SetConfig+0x1c0>
 80032c2:	2b80      	cmp	r3, #128	; 0x80
 80032c4:	d009      	beq.n	80032da <UART_SetConfig+0x1ae>
 80032c6:	2b80      	cmp	r3, #128	; 0x80
 80032c8:	d810      	bhi.n	80032ec <UART_SetConfig+0x1c0>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <UART_SetConfig+0x1a8>
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d006      	beq.n	80032e0 <UART_SetConfig+0x1b4>
 80032d2:	e00b      	b.n	80032ec <UART_SetConfig+0x1c0>
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0cc      	b.n	8003474 <UART_SetConfig+0x348>
 80032da:	2302      	movs	r3, #2
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e0c9      	b.n	8003474 <UART_SetConfig+0x348>
 80032e0:	2304      	movs	r3, #4
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e0c6      	b.n	8003474 <UART_SetConfig+0x348>
 80032e6:	2308      	movs	r3, #8
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e0c3      	b.n	8003474 <UART_SetConfig+0x348>
 80032ec:	2310      	movs	r3, #16
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e0c0      	b.n	8003474 <UART_SetConfig+0x348>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a44      	ldr	r2, [pc, #272]	; (8003408 <UART_SetConfig+0x2dc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d125      	bne.n	8003348 <UART_SetConfig+0x21c>
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <UART_SetConfig+0x2cc>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330a:	d017      	beq.n	800333c <UART_SetConfig+0x210>
 800330c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003310:	d817      	bhi.n	8003342 <UART_SetConfig+0x216>
 8003312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003316:	d00b      	beq.n	8003330 <UART_SetConfig+0x204>
 8003318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331c:	d811      	bhi.n	8003342 <UART_SetConfig+0x216>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <UART_SetConfig+0x1fe>
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	d006      	beq.n	8003336 <UART_SetConfig+0x20a>
 8003328:	e00b      	b.n	8003342 <UART_SetConfig+0x216>
 800332a:	2300      	movs	r3, #0
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e0a1      	b.n	8003474 <UART_SetConfig+0x348>
 8003330:	2302      	movs	r3, #2
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e09e      	b.n	8003474 <UART_SetConfig+0x348>
 8003336:	2304      	movs	r3, #4
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e09b      	b.n	8003474 <UART_SetConfig+0x348>
 800333c:	2308      	movs	r3, #8
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e098      	b.n	8003474 <UART_SetConfig+0x348>
 8003342:	2310      	movs	r3, #16
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e095      	b.n	8003474 <UART_SetConfig+0x348>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2f      	ldr	r2, [pc, #188]	; (800340c <UART_SetConfig+0x2e0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d125      	bne.n	800339e <UART_SetConfig+0x272>
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <UART_SetConfig+0x2cc>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800335c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003360:	d017      	beq.n	8003392 <UART_SetConfig+0x266>
 8003362:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003366:	d817      	bhi.n	8003398 <UART_SetConfig+0x26c>
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	d00b      	beq.n	8003386 <UART_SetConfig+0x25a>
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	d811      	bhi.n	8003398 <UART_SetConfig+0x26c>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <UART_SetConfig+0x254>
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337c:	d006      	beq.n	800338c <UART_SetConfig+0x260>
 800337e:	e00b      	b.n	8003398 <UART_SetConfig+0x26c>
 8003380:	2301      	movs	r3, #1
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e076      	b.n	8003474 <UART_SetConfig+0x348>
 8003386:	2302      	movs	r3, #2
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e073      	b.n	8003474 <UART_SetConfig+0x348>
 800338c:	2304      	movs	r3, #4
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e070      	b.n	8003474 <UART_SetConfig+0x348>
 8003392:	2308      	movs	r3, #8
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e06d      	b.n	8003474 <UART_SetConfig+0x348>
 8003398:	2310      	movs	r3, #16
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e06a      	b.n	8003474 <UART_SetConfig+0x348>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <UART_SetConfig+0x2e4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d138      	bne.n	800341a <UART_SetConfig+0x2ee>
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <UART_SetConfig+0x2cc>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033b6:	d017      	beq.n	80033e8 <UART_SetConfig+0x2bc>
 80033b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033bc:	d82a      	bhi.n	8003414 <UART_SetConfig+0x2e8>
 80033be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c2:	d00b      	beq.n	80033dc <UART_SetConfig+0x2b0>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	d824      	bhi.n	8003414 <UART_SetConfig+0x2e8>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <UART_SetConfig+0x2aa>
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d2:	d006      	beq.n	80033e2 <UART_SetConfig+0x2b6>
 80033d4:	e01e      	b.n	8003414 <UART_SetConfig+0x2e8>
 80033d6:	2300      	movs	r3, #0
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e04b      	b.n	8003474 <UART_SetConfig+0x348>
 80033dc:	2302      	movs	r3, #2
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e048      	b.n	8003474 <UART_SetConfig+0x348>
 80033e2:	2304      	movs	r3, #4
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e045      	b.n	8003474 <UART_SetConfig+0x348>
 80033e8:	2308      	movs	r3, #8
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e042      	b.n	8003474 <UART_SetConfig+0x348>
 80033ee:	bf00      	nop
 80033f0:	efff69f3 	.word	0xefff69f3
 80033f4:	40011000 	.word	0x40011000
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40004400 	.word	0x40004400
 8003400:	40004800 	.word	0x40004800
 8003404:	40004c00 	.word	0x40004c00
 8003408:	40005000 	.word	0x40005000
 800340c:	40011400 	.word	0x40011400
 8003410:	40007800 	.word	0x40007800
 8003414:	2310      	movs	r3, #16
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e02c      	b.n	8003474 <UART_SetConfig+0x348>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a72      	ldr	r2, [pc, #456]	; (80035e8 <UART_SetConfig+0x4bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d125      	bne.n	8003470 <UART_SetConfig+0x344>
 8003424:	4b71      	ldr	r3, [pc, #452]	; (80035ec <UART_SetConfig+0x4c0>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800342e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003432:	d017      	beq.n	8003464 <UART_SetConfig+0x338>
 8003434:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003438:	d817      	bhi.n	800346a <UART_SetConfig+0x33e>
 800343a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343e:	d00b      	beq.n	8003458 <UART_SetConfig+0x32c>
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d811      	bhi.n	800346a <UART_SetConfig+0x33e>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <UART_SetConfig+0x326>
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344e:	d006      	beq.n	800345e <UART_SetConfig+0x332>
 8003450:	e00b      	b.n	800346a <UART_SetConfig+0x33e>
 8003452:	2300      	movs	r3, #0
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e00d      	b.n	8003474 <UART_SetConfig+0x348>
 8003458:	2302      	movs	r3, #2
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e00a      	b.n	8003474 <UART_SetConfig+0x348>
 800345e:	2304      	movs	r3, #4
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e007      	b.n	8003474 <UART_SetConfig+0x348>
 8003464:	2308      	movs	r3, #8
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e004      	b.n	8003474 <UART_SetConfig+0x348>
 800346a:	2310      	movs	r3, #16
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e001      	b.n	8003474 <UART_SetConfig+0x348>
 8003470:	2310      	movs	r3, #16
 8003472:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347c:	d15b      	bne.n	8003536 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d828      	bhi.n	80034d6 <UART_SetConfig+0x3aa>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <UART_SetConfig+0x360>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034c1 	.word	0x080034c1
 8003498:	080034d7 	.word	0x080034d7
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034d7 	.word	0x080034d7
 80034a4:	080034d7 	.word	0x080034d7
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	080034cf 	.word	0x080034cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7ff f99e 	bl	80027f0 <HAL_RCC_GetPCLK1Freq>
 80034b4:	61b8      	str	r0, [r7, #24]
        break;
 80034b6:	e013      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b8:	f7ff f9ae 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 80034bc:	61b8      	str	r0, [r7, #24]
        break;
 80034be:	e00f      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <UART_SetConfig+0x4c4>)
 80034c2:	61bb      	str	r3, [r7, #24]
        break;
 80034c4:	e00c      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7ff f881 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 80034ca:	61b8      	str	r0, [r7, #24]
        break;
 80034cc:	e008      	b.n	80034e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	61bb      	str	r3, [r7, #24]
        break;
 80034d4:	e004      	b.n	80034e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	77bb      	strb	r3, [r7, #30]
        break;
 80034de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d074      	beq.n	80035d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	005a      	lsls	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	d916      	bls.n	8003530 <UART_SetConfig+0x404>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d212      	bcs.n	8003530 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f023 030f 	bic.w	r3, r3, #15
 8003512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	b29b      	uxth	r3, r3
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	b29a      	uxth	r2, r3
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	4313      	orrs	r3, r2
 8003524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	89fa      	ldrh	r2, [r7, #14]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	e04f      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	77bb      	strb	r3, [r7, #30]
 8003534:	e04c      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d828      	bhi.n	800358e <UART_SetConfig+0x462>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0x418>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003569 	.word	0x08003569
 8003548:	08003571 	.word	0x08003571
 800354c:	08003579 	.word	0x08003579
 8003550:	0800358f 	.word	0x0800358f
 8003554:	0800357f 	.word	0x0800357f
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800358f 	.word	0x0800358f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7ff f942 	bl	80027f0 <HAL_RCC_GetPCLK1Freq>
 800356c:	61b8      	str	r0, [r7, #24]
        break;
 800356e:	e013      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7ff f952 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 8003574:	61b8      	str	r0, [r7, #24]
        break;
 8003576:	e00f      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <UART_SetConfig+0x4c4>)
 800357a:	61bb      	str	r3, [r7, #24]
        break;
 800357c:	e00c      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7ff f825 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003582:	61b8      	str	r0, [r7, #24]
        break;
 8003584:	e008      	b.n	8003598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e004      	b.n	8003598 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	77bb      	strb	r3, [r7, #30]
        break;
 8003596:	bf00      	nop
    }

    if (pclk != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	085a      	lsrs	r2, r3, #1
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b0f      	cmp	r3, #15
 80035b6:	d909      	bls.n	80035cc <UART_SetConfig+0x4a0>
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d205      	bcs.n	80035cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	e001      	b.n	80035d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40007c00 	.word	0x40007c00
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400

080035f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01a      	beq.n	800370a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f2:	d10a      	bne.n	800370a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	605a      	str	r2, [r3, #4]
  }
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af02      	add	r7, sp, #8
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003748:	f7fd fc0c 	bl	8000f64 <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d10e      	bne.n	800377a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f831 	bl	80037d2 <UART_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e027      	b.n	80037ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b04      	cmp	r3, #4
 8003786:	d10e      	bne.n	80037a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f81b 	bl	80037d2 <UART_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e011      	b.n	80037ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b09c      	sub	sp, #112	; 0x70
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e2:	e0a7      	b.n	8003934 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ea:	f000 80a3 	beq.w	8003934 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ee:	f7fd fbb9 	bl	8000f64 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d302      	bcc.n	8003804 <UART_WaitOnFlagUntilTimeout+0x32>
 80037fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003800:	2b00      	cmp	r3, #0
 8003802:	d13f      	bne.n	8003884 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003814:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003818:	667b      	str	r3, [r7, #100]	; 0x64
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003824:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003828:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e6      	bne.n	8003804 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	663b      	str	r3, [r7, #96]	; 0x60
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003856:	64ba      	str	r2, [r7, #72]	; 0x48
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800385c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e068      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d050      	beq.n	8003934 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a0:	d148      	bne.n	8003934 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
 80038cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e6      	bne.n	80038ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3308      	adds	r3, #8
 80038e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	613b      	str	r3, [r7, #16]
   return(result);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3308      	adds	r3, #8
 80038fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038fe:	623a      	str	r2, [r7, #32]
 8003900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	69f9      	ldr	r1, [r7, #28]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	61bb      	str	r3, [r7, #24]
   return(result);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e5      	bne.n	80038de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e010      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4013      	ands	r3, r2
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	429a      	cmp	r2, r3
 8003950:	f43f af48 	beq.w	80037e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3770      	adds	r7, #112	; 0x70
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <lv_disp_get_scr_act+0x14>
 800396c:	f01a fb36 	bl	801dfdc <lv_disp_get_default>
 8003970:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	e001      	b.n	8003980 <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <lv_disp_get_scr_prev+0x14>
 8003996:	f01a fb21 	bl	801dfdc <lv_disp_get_default>
 800399a:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e001      	b.n	80039aa <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d102      	bne.n	80039c6 <lv_disp_get_layer_top+0x14>
 80039c0:	f01a fb0c 	bl	801dfdc <lv_disp_get_default>
 80039c4:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e001      	b.n	80039d4 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <lv_disp_get_layer_sys+0x14>
 80039ea:	f01a faf7 	bl	801dfdc <lv_disp_get_default>
 80039ee:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e001      	b.n	80039fe <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <lv_disp_get_theme+0x14>
 8003a14:	f01a fae2 	bl	801dfdc <lv_disp_get_default>
 8003a18:	6078      	str	r0, [r7, #4]
    return disp->theme;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <lv_disp_is_invalidation_enabled+0x14>
 8003a34:	f01a fad2 	bl	801dfdc <lv_disp_get_default>
 8003a38:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <lv_disp_is_invalidation_enabled+0x1e>
        LV_LOG_WARN("no display registered");
        return false;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e007      	b.n	8003a54 <lv_disp_is_invalidation_enabled+0x2e>
    }

    return (disp->inv_en_cnt > 0);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bfcc      	ite	gt
 8003a4e:	2301      	movgt	r3, #1
 8003a50:	2300      	movle	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <lv_event_send>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_res_t lv_event_send(lv_obj_t * obj, lv_event_code_t event_code, void * param)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08c      	sub	sp, #48	; 0x30
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	460b      	mov	r3, r1
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <lv_event_send+0x18>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e02f      	b.n	8003ad4 <lv_event_send+0x78>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_event_t e;
    e.target = obj;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	613b      	str	r3, [r7, #16]
    e.current_target = obj;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	617b      	str	r3, [r7, #20]
    e.code = event_code;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	763b      	strb	r3, [r7, #24]
    e.user_data = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
    e.param = param;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	623b      	str	r3, [r7, #32]
    e.deleted = 0;
 8003a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a8c:	f36f 0300 	bfc	r3, #0, #1
 8003a90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_bubbling = 0;
 8003a94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a98:	f36f 0382 	bfc	r3, #2, #1
 8003a9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_processing = 0;
 8003aa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003aa4:	f36f 0341 	bfc	r3, #1, #1
 8003aa8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*Build a simple linked list from the objects used in the events
     *It's important to know if this object was deleted by a nested event
     *called from this `event_cb`.*/
    e.prev = event_head;
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <lv_event_send+0x80>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
    event_head = &e;
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <lv_event_send+0x80>)
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	6013      	str	r3, [r2, #0]

    /*Send the event*/
    lv_res_t res = event_send_core(&e);
 8003aba:	f107 0310 	add.w	r3, r7, #16
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f95d 	bl	8003d7e <event_send_core>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /*Remove this element from the list*/
    event_head = e.prev;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	4a03      	ldr	r2, [pc, #12]	; (8003adc <lv_event_send+0x80>)
 8003ace:	6013      	str	r3, [r2, #0]

    return res;
 8003ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	; 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000690 	.word	0x20000690

08003ae0 <lv_obj_event_base>:


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d104      	bne.n	8003afa <lv_obj_event_base+0x1a>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e006      	b.n	8003b08 <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]

    /*Find a base in which call the ancestor's event handler_cb if set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8003b00:	e002      	b.n	8003b08 <lv_obj_event_base+0x28>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <lv_obj_event_base+0x36>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f5      	beq.n	8003b02 <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <lv_obj_event_base+0x40>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e019      	b.n	8003b54 <lv_obj_event_base+0x74>
    if(base->event_cb == NULL) return LV_RES_OK;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <lv_obj_event_base+0x4c>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e013      	b.n	8003b54 <lv_obj_event_base+0x74>

    /*Call the actual event callback*/
    e->user_data = NULL;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60da      	str	r2, [r3, #12]
    base->event_cb(base, e);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	72fb      	strb	r3, [r7, #11]
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	7e1b      	ldrb	r3, [r3, #24]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <lv_obj_event_base+0x72>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	72fb      	strb	r3, [r7, #11]

    return res;
 8003b52:	7afb      	ldrb	r3, [r7, #11]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <lv_event_get_target>:


lv_obj_t * lv_event_get_target(lv_event_t * e)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
    return e->target;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <lv_event_get_current_target>:

lv_obj_t * lv_event_get_current_target(lv_event_t * e)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    return e->current_target;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <lv_event_get_code>:

lv_event_code_t lv_event_get_code(lv_event_t * e)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    return e->code & ~LV_EVENT_PREPROCESS;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7a1b      	ldrb	r3, [r3, #8]
 8003b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b9c:	b2db      	uxtb	r3, r3
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <lv_event_get_param>:

void * lv_event_get_param(lv_event_t * e)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
    return e->param;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <_lv_event_mark_deleted>:
    last_id ++;
    return last_id;
}

void _lv_event_mark_deleted(lv_obj_t * obj)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
    lv_event_t * e = event_head;
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <_lv_event_mark_deleted+0x48>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]

    while(e) {
 8003bd2:	e011      	b.n	8003bf8 <_lv_event_mark_deleted+0x34>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d004      	beq.n	8003be8 <_lv_event_mark_deleted+0x24>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d104      	bne.n	8003bf2 <_lv_event_mark_deleted+0x2e>
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	7e13      	ldrb	r3, [r2, #24]
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	7613      	strb	r3, [r2, #24]
        e = e->prev;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	60fb      	str	r3, [r7, #12]
    while(e) {
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ea      	bne.n	8003bd4 <_lv_event_mark_deleted+0x10>
    }
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	20000690 	.word	0x20000690

08003c10 <lv_event_get_indev>:
    }
    return NULL;
}

lv_indev_t * lv_event_get_indev(lv_event_t * e)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

    if(e->code == LV_EVENT_PRESSED ||
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7a1b      	ldrb	r3, [r3, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d03b      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESSING ||
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d037      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESS_LOST ||
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESSING ||
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d033      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SHORT_CLICKED ||
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESS_LOST ||
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d02f      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED ||
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SHORT_CLICKED ||
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d02b      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED ||
 8003c44:	2b06      	cmp	r3, #6
 8003c46:	d027      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_CLICKED ||
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	d023      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_RELEASED ||
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_CLICKED ||
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d01f      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_RELEASED ||
 8003c5c:	2b09      	cmp	r3, #9
 8003c5e:	d01b      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_END ||
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8003c64:	2b0a      	cmp	r3, #10
 8003c66:	d017      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL ||
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_END ||
 8003c6c:	2b0b      	cmp	r3, #11
 8003c6e:	d013      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_GESTURE ||
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL ||
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d00f      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_KEY ||
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_GESTURE ||
 8003c7c:	2b0d      	cmp	r3, #13
 8003c7e:	d00b      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_FOCUSED ||
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_KEY ||
 8003c84:	2b0e      	cmp	r3, #14
 8003c86:	d007      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_DEFOCUSED ||
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_FOCUSED ||
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d003      	beq.n	8003c98 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LEAVE) {
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DEFOCUSED ||
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d104      	bne.n	8003ca2 <lv_event_get_indev+0x92>
        return lv_event_get_param(e);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff86 	bl	8003baa <lv_event_get_param>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	e000      	b.n	8003ca4 <lv_event_get_indev+0x94>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8003ca2:	2300      	movs	r3, #0
    }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <lv_event_get_draw_ctx>:
        return NULL;
    }
}

lv_draw_ctx_t * lv_event_get_draw_ctx(lv_event_t * e)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7a1b      	ldrb	r3, [r3, #8]
 8003cb8:	2b15      	cmp	r3, #21
 8003cba:	d013      	beq.n	8003ce4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8003cc0:	2b14      	cmp	r3, #20
 8003cc2:	d00f      	beq.n	8003ce4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8003cc8:	2b16      	cmp	r3, #22
 8003cca:	d00b      	beq.n	8003ce4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST ||
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8003cd0:	2b18      	cmp	r3, #24
 8003cd2:	d007      	beq.n	8003ce4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST ||
 8003cd8:	2b17      	cmp	r3, #23
 8003cda:	d003      	beq.n	8003ce4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_END) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8003ce0:	2b19      	cmp	r3, #25
 8003ce2:	d104      	bne.n	8003cee <lv_event_get_draw_ctx+0x42>
        return lv_event_get_param(e);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff60 	bl	8003baa <lv_event_get_param>
 8003cea:	4603      	mov	r3, r0
 8003cec:	e000      	b.n	8003cf0 <lv_event_get_draw_ctx+0x44>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8003cee:	2300      	movs	r3, #0
    }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <lv_event_set_ext_draw_size>:
        return 0;
    }
}

void lv_event_set_ext_draw_size(lv_event_t * e, lv_coord_t size)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7a1b      	ldrb	r3, [r3, #8]
 8003d08:	2b13      	cmp	r3, #19
 8003d0a:	d10e      	bne.n	8003d2a <lv_event_set_ext_draw_size+0x32>
        lv_coord_t * cur_size = lv_event_get_param(e);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff4c 	bl	8003baa <lv_event_get_param>
 8003d12:	60f8      	str	r0, [r7, #12]
        *cur_size = LV_MAX(*cur_size, size);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d1a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bfb8      	it	lt
 8003d22:	4613      	movlt	r3, r2
 8003d24:	b21a      	sxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	801a      	strh	r2, [r3, #0]
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
    }
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <lv_obj_get_event_dsc>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <lv_obj_get_event_dsc+0x16>
 8003d44:	2300      	movs	r3, #0
 8003d46:	e014      	b.n	8003d72 <lv_obj_get_event_dsc+0x40>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	7e9b      	ldrb	r3, [r3, #26]
 8003d4e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d301      	bcc.n	8003d60 <lv_obj_get_event_dsc+0x2e>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e008      	b.n	8003d72 <lv_obj_get_event_dsc+0x40>

    return &obj->spec_attr->event_dsc[id];
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	68d9      	ldr	r1, [r3, #12]
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8003d86:	f000 fbe9 	bl	800455c <lv_indev_get_act>
 8003d8a:	60b8      	str	r0, [r7, #8]
    if(indev_act) {
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01f      	beq.n	8003dd2 <event_send_core+0x54>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <event_send_core+0x30>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	6810      	ldr	r0, [r2, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	7a12      	ldrb	r2, [r2, #8]
 8003daa:	4611      	mov	r1, r2
 8003dac:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	7e1b      	ldrb	r3, [r3, #24]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <event_send_core+0x42>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0c4      	b.n	8003f4a <event_send_core+0x1cc>
        if(e->deleted) return LV_RES_INV;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	7e1b      	ldrb	r3, [r3, #24]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <event_send_core+0x54>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e0bb      	b.n	8003f4a <event_send_core+0x1cc>
    }

    lv_res_t res = LV_RES_OK;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ffa8 	bl	8003d32 <lv_obj_get_event_dsc>
 8003de2:	6138      	str	r0, [r7, #16]

    uint32_t i = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8003de8:	e038      	b.n	8003e5c <event_send_core+0xde>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d02a      	beq.n	8003e48 <event_send_core+0xca>
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	7a1b      	ldrb	r3, [r3, #8]
 8003df6:	b25b      	sxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	da25      	bge.n	8003e48 <event_send_core+0xca>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	7a1b      	ldrb	r3, [r3, #8]
 8003e00:	2b80      	cmp	r3, #128	; 0x80
 8003e02:	d007      	beq.n	8003e14 <event_send_core+0x96>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	7a1b      	ldrb	r3, [r3, #8]
 8003e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	7a12      	ldrb	r2, [r2, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d119      	bne.n	8003e48 <event_send_core+0xca>
            e->user_data = event_dsc->user_data;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7e1b      	ldrb	r3, [r3, #24]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <event_send_core+0xb8>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e089      	b.n	8003f4a <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7e1b      	ldrb	r3, [r3, #24]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <event_send_core+0xca>
 8003e44:	2300      	movs	r3, #0
 8003e46:	e080      	b.n	8003f4a <event_send_core+0x1cc>
        }

        i++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff6c 	bl	8003d32 <lv_obj_get_event_dsc>
 8003e5a:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <event_send_core+0xea>
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d0c0      	beq.n	8003dea <event_send_core+0x6c>
    }

    res = lv_obj_event_base(NULL, e);
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f7ff fe38 	bl	8003ae0 <lv_obj_event_base>
 8003e70:	4603      	mov	r3, r0
 8003e72:	75fb      	strb	r3, [r7, #23]

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <event_send_core+0x10c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff56 	bl	8003d32 <lv_obj_get_event_dsc>
 8003e86:	4603      	mov	r3, r0
 8003e88:	e000      	b.n	8003e8c <event_send_core+0x10e>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]

    i = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8003e92:	e036      	b.n	8003f02 <event_send_core+0x184>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d028      	beq.n	8003eee <event_send_core+0x170>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	7a1b      	ldrb	r3, [r3, #8]
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db23      	blt.n	8003eee <event_send_core+0x170>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	7a1b      	ldrb	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <event_send_core+0x13c>
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	7a1a      	ldrb	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7a1b      	ldrb	r3, [r3, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d119      	bne.n	8003eee <event_send_core+0x170>
            e->user_data = event_dsc->user_data;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7e1b      	ldrb	r3, [r3, #24]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <event_send_core+0x15e>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e036      	b.n	8003f4a <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	7e1b      	ldrb	r3, [r3, #24]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <event_send_core+0x170>
 8003eea:	2300      	movs	r3, #0
 8003eec:	e02d      	b.n	8003f4a <event_send_core+0x1cc>
        }

        i++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68f9      	ldr	r1, [r7, #12]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ff19 	bl	8003d32 <lv_obj_get_event_dsc>
 8003f00:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <event_send_core+0x190>
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d0c2      	beq.n	8003e94 <event_send_core+0x116>
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d119      	bne.n	8003f48 <event_send_core+0x1ca>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d014      	beq.n	8003f48 <event_send_core+0x1ca>
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f818 	bl	8003f54 <event_is_bubbled>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00e      	beq.n	8003f48 <event_send_core+0x1ca>
        e->current_target = e->current_target->parent;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]
        res = event_send_core(e);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff22 	bl	8003d7e <event_send_core>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) return LV_RES_INV;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d001      	beq.n	8003f48 <event_send_core+0x1ca>
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <event_send_core+0x1cc>
    }

    return res;
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <event_is_bubbled>:

static bool event_is_bubbled(lv_event_t * e)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
    if(e->stop_bubbling) return false;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7e1b      	ldrb	r3, [r3, #24]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <event_is_bubbled+0x1a>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e059      	b.n	8004022 <event_is_bubbled+0xce>

    /*Event codes that always bubble*/
    switch(e->code) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	7a1b      	ldrb	r3, [r3, #8]
 8003f72:	3b23      	subs	r3, #35	; 0x23
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d801      	bhi.n	8003f7c <event_is_bubbled+0x28>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e052      	b.n	8004022 <event_is_bubbled+0xce>
        default:
            break;
 8003f7c:	bf00      	nop
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fead 	bl	8004ce6 <lv_obj_has_flag>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f083 0301 	eor.w	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <event_is_bubbled+0x48>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e042      	b.n	8004022 <event_is_bubbled+0xce>

    switch(e->code) {
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7a1b      	ldrb	r3, [r3, #8]
 8003fa0:	3b11      	subs	r3, #17
 8003fa2:	2b1b      	cmp	r3, #27
 8003fa4:	d83c      	bhi.n	8004020 <event_is_bubbled+0xcc>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <event_is_bubbled+0x58>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	0800401d 	.word	0x0800401d
 8003fb0:	0800401d 	.word	0x0800401d
 8003fb4:	0800401d 	.word	0x0800401d
 8003fb8:	0800401d 	.word	0x0800401d
 8003fbc:	0800401d 	.word	0x0800401d
 8003fc0:	0800401d 	.word	0x0800401d
 8003fc4:	0800401d 	.word	0x0800401d
 8003fc8:	0800401d 	.word	0x0800401d
 8003fcc:	0800401d 	.word	0x0800401d
 8003fd0:	0800401d 	.word	0x0800401d
 8003fd4:	0800401d 	.word	0x0800401d
 8003fd8:	08004021 	.word	0x08004021
 8003fdc:	08004021 	.word	0x08004021
 8003fe0:	0800401d 	.word	0x0800401d
 8003fe4:	08004021 	.word	0x08004021
 8003fe8:	08004021 	.word	0x08004021
 8003fec:	0800401d 	.word	0x0800401d
 8003ff0:	0800401d 	.word	0x0800401d
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004021 	.word	0x08004021
 8004000:	08004021 	.word	0x08004021
 8004004:	08004021 	.word	0x08004021
 8004008:	08004021 	.word	0x08004021
 800400c:	0800401d 	.word	0x0800401d
 8004010:	0800401d 	.word	0x0800401d
 8004014:	08004021 	.word	0x08004021
 8004018:	0800401d 	.word	0x0800401d
        case LV_EVENT_CHILD_DELETED:
        case LV_EVENT_CHILD_CHANGED:
        case LV_EVENT_SIZE_CHANGED:
        case LV_EVENT_STYLE_CHANGED:
        case LV_EVENT_GET_SELF_SIZE:
            return false;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <event_is_bubbled+0xce>
        default:
            return true;
 8004020:	2301      	movs	r3, #1
    }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop

0800402c <_lv_group_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8004030:	2120      	movs	r1, #32
 8004032:	4802      	ldr	r0, [pc, #8]	; (800403c <_lv_group_init+0x10>)
 8004034:	f01b fd15 	bl	801fa62 <_lv_ll_init>
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000828 	.word	0x20000828

08004040 <lv_group_get_default>:
{
    default_group = group;
}

lv_group_t * lv_group_get_default(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
    return default_group;
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <lv_group_get_default+0x14>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000694 	.word	0x20000694

08004058 <lv_group_add_obj>:

void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d053      	beq.n	8004110 <lv_group_add_obj+0xb8>

    LV_LOG_TRACE("begin");

    /*Be sure the object is removed from its current group*/
    lv_group_remove_obj(obj);
 8004068:	6838      	ldr	r0, [r7, #0]
 800406a:	f000 f859 	bl	8004120 <lv_group_remove_obj>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4618      	mov	r0, r3
 8004072:	f01b fdd4 	bl	801fc1e <_lv_ll_get_head>
 8004076:	6178      	str	r0, [r7, #20]
 8004078:	e00a      	b.n	8004090 <lv_group_add_obj+0x38>
        if((*obj_i) == obj) {
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d047      	beq.n	8004114 <lv_group_add_obj+0xbc>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	4618      	mov	r0, r3
 800408a:	f01b fdea 	bl	801fc62 <_lv_ll_get_next>
 800408e:	6178      	str	r0, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f1      	bne.n	800407a <lv_group_add_obj+0x22>
            return;
        }
    }

    /*If the object is already in a group and focused then refocus it*/
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8004096:	6838      	ldr	r0, [r7, #0]
 8004098:	f000 fe5a 	bl	8004d50 <lv_obj_get_group>
 800409c:	6138      	str	r0, [r7, #16]
    if(group_cur) {
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00f      	beq.n	80040c4 <lv_group_add_obj+0x6c>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <lv_group_add_obj+0x6c>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d102      	bne.n	80040c4 <lv_group_add_obj+0x6c>
            lv_group_refocus(group_cur);
 80040be:	6938      	ldr	r0, [r7, #16]
 80040c0:	f000 f908 	bl	80042d4 <lv_group_refocus>

            LV_LOG_INFO("changing object's group");
        }
    }

    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <lv_group_add_obj+0x7a>
 80040cc:	6838      	ldr	r0, [r7, #0]
 80040ce:	f000 fe53 	bl	8004d78 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	609a      	str	r2, [r3, #8]

    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	f01b fd0d 	bl	801fafc <_lv_ll_ins_tail>
 80040e2:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(next);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d100      	bne.n	80040ec <lv_group_add_obj+0x94>
 80040ea:	e7fe      	b.n	80040ea <lv_group_add_obj+0x92>
    if(next == NULL) return;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d012      	beq.n	8004118 <lv_group_add_obj+0xc0>
    *next = obj;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	601a      	str	r2, [r3, #0]

    /*If the head and the tail is equal then there is only one object in the linked list.
     *In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f01b fd8f 	bl	801fc1e <_lv_ll_get_head>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4293      	cmp	r3, r2
 8004106:	d108      	bne.n	800411a <lv_group_add_obj+0xc2>
        lv_group_refocus(group);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8e3 	bl	80042d4 <lv_group_refocus>
 800410e:	e004      	b.n	800411a <lv_group_add_obj+0xc2>
    if(group == NULL) return;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <lv_group_add_obj+0xc2>
            return;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <lv_group_add_obj+0xc2>
    if(next == NULL) return;
 8004118:	bf00      	nop
    }

    LV_LOG_TRACE("finished");
}
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <lv_group_remove_obj>:
    else if(*g1->obj_focus == obj2) lv_group_focus_obj(obj1);

}

void lv_group_remove_obj(lv_obj_t * obj)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
    lv_group_t * g = lv_obj_get_group(obj);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fe11 	bl	8004d50 <lv_obj_get_group>
 800412e:	60b8      	str	r0, [r7, #8]
    if(g == NULL) return;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d06a      	beq.n	800420c <lv_group_remove_obj+0xec>

    LV_LOG_TRACE("begin");

    /*Focus on the next object*/
    if(g->obj_focus && *g->obj_focus == obj) {
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d033      	beq.n	80041a6 <lv_group_remove_obj+0x86>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d12d      	bne.n	80041a6 <lv_group_remove_obj+0x86>
        if(g->frozen) g->frozen = 0;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	7f1b      	ldrb	r3, [r3, #28]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <lv_group_remove_obj+0x42>
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	7f13      	ldrb	r3, [r2, #28]
 800415c:	f36f 0300 	bfc	r3, #0, #1
 8004160:	7713      	strb	r3, [r2, #28]

        /*If this is the only object in the group then focus to nothing.*/
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f01b fd5a 	bl	801fc1e <_lv_ll_get_head>
 800416a:	4602      	mov	r2, r0
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	429a      	cmp	r2, r3
 8004172:	d115      	bne.n	80041a0 <lv_group_remove_obj+0x80>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f01b fd62 	bl	801fc40 <_lv_ll_get_tail>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	429a      	cmp	r2, r3
 8004184:	d10c      	bne.n	80041a0 <lv_group_remove_obj+0x80>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	681c      	ldr	r4, [r3, #0]
 800418c:	68b8      	ldr	r0, [r7, #8]
 800418e:	f000 f9a8 	bl	80044e2 <get_indev>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	210f      	movs	r1, #15
 8004198:	4620      	mov	r0, r4
 800419a:	f7ff fc5f 	bl	8003a5c <lv_event_send>
 800419e:	e002      	b.n	80041a6 <lv_group_remove_obj+0x86>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 80041a0:	68b8      	ldr	r0, [r7, #8]
 80041a2:	f000 f897 	bl	80042d4 <lv_group_refocus>
    }

    /*If the focuses object is still the same then it was the only object in the group but it will
     *be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     *zero objects*/
    if(g->obj_focus && *g->obj_focus == obj) {
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <lv_group_remove_obj+0xa0>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d102      	bne.n	80041c0 <lv_group_remove_obj+0xa0>
        g->obj_focus = NULL;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2200      	movs	r2, #0
 80041be:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group*/
    lv_obj_t ** i;
    _LV_LL_READ(&g->obj_ll, i) {
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f01b fd2b 	bl	801fc1e <_lv_ll_get_head>
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	e01b      	b.n	8004204 <lv_group_remove_obj+0xe4>
        if(*i == obj) {
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d110      	bne.n	80041f8 <lv_group_remove_obj+0xd8>
            _lv_ll_remove(&g->obj_ll, i);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	68f9      	ldr	r1, [r7, #12]
 80041da:	4618      	mov	r0, r3
 80041dc:	f01b fcc2 	bl	801fb64 <_lv_ll_remove>
            lv_mem_free(i);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f01b ff0b 	bl	801fffc <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d010      	beq.n	8004210 <lv_group_remove_obj+0xf0>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
            break;
 80041f6:	e00b      	b.n	8004210 <lv_group_remove_obj+0xf0>
    _LV_LL_READ(&g->obj_ll, i) {
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	68f9      	ldr	r1, [r7, #12]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f01b fd30 	bl	801fc62 <_lv_ll_get_next>
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e0      	bne.n	80041cc <lv_group_remove_obj+0xac>
 800420a:	e002      	b.n	8004212 <lv_group_remove_obj+0xf2>
    if(g == NULL) return;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <lv_group_remove_obj+0xf2>
            break;
 8004210:	bf00      	nop
        }
    }
    LV_LOG_TRACE("finished");
}
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	bd90      	pop	{r4, r7, pc}

08004218 <lv_group_focus_next>:
        }
    }
}

void lv_group_focus_next(lv_group_t * group)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <lv_group_focus_next+0x3c>)
 8004222:	490d      	ldr	r1, [pc, #52]	; (8004258 <lv_group_focus_next+0x40>)
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f886 	bl	8004336 <focus_next_core>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <lv_group_focus_next+0x34>
        if(!focus_changed)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	f083 0301 	eor.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <lv_group_focus_next+0x34>
            group->edge_cb(group, true);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2101      	movs	r1, #1
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
    }
}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	0801fc63 	.word	0x0801fc63
 8004258:	0801fc1f 	.word	0x0801fc1f

0800425c <lv_group_focus_prev>:

void lv_group_focus_prev(lv_group_t * group)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8004264:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <lv_group_focus_prev+0x3c>)
 8004266:	490d      	ldr	r1, [pc, #52]	; (800429c <lv_group_focus_prev+0x40>)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f864 	bl	8004336 <focus_next_core>
 800426e:	4603      	mov	r3, r0
 8004270:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <lv_group_focus_prev+0x34>
        if(!focus_changed)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	f083 0301 	eor.w	r3, r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <lv_group_focus_prev+0x34>
            group->edge_cb(group, false);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2100      	movs	r1, #0
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
    }
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	0801fc8d 	.word	0x0801fc8d
 800429c:	0801fc41 	.word	0x0801fc41

080042a0 <lv_group_get_editing>:
    if(!group) return NULL;
    return group->edge_cb;
}

bool lv_group_get_editing(const lv_group_t * group)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <lv_group_get_editing+0x12>
 80042ae:	2300      	movs	r3, #0
 80042b0:	e00a      	b.n	80042c8 <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7f1b      	ldrb	r3, [r3, #28]
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bf14      	ite	ne
 80042c2:	2301      	movne	r3, #1
 80042c4:	2300      	moveq	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	7f1b      	ldrb	r3, [r3, #28]
 80042e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	7f13      	ldrb	r3, [r2, #28]
 80042ec:	f043 0308 	orr.w	r3, r3, #8
 80042f0:	7713      	strb	r3, [r2, #28]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	7f1b      	ldrb	r3, [r3, #28]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d103      	bne.n	8004308 <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff ff89 	bl	8004218 <lv_group_focus_next>
 8004306:	e009      	b.n	800431c <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7f1b      	ldrb	r3, [r3, #28]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ffa0 	bl	800425c <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	b2d9      	uxtb	r1, r3
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	7f13      	ldrb	r3, [r2, #28]
 8004328:	f361 03c3 	bfi	r3, r1, #3, #1
 800432c:	7713      	strb	r3, [r2, #28]
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <focus_next_core>:

static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8004336:	b590      	push	{r4, r7, lr}
 8004338:	b08b      	sub	sp, #44	; 0x2c
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
    bool focus_changed = false;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]
    if(group->frozen) return focus_changed;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	7f1b      	ldrb	r3, [r3, #28]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <focus_next_core+0x22>
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	e0c0      	b.n	80044da <focus_next_core+0x1a4>

    lv_obj_t ** obj_next     = group->obj_focus;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_obj_t ** obj_sentinel = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	623b      	str	r3, [r7, #32]
    bool can_move            = true;
 8004362:	2301      	movs	r3, #1
 8004364:	77fb      	strb	r3, [r7, #31]
    bool can_begin           = true;
 8004366:	2301      	movs	r3, #1
 8004368:	77bb      	strb	r3, [r7, #30]

    for(;;) {
        if(obj_next == NULL) {
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11d      	bne.n	80043ac <focus_next_core+0x76>
            if(group->wrap || obj_sentinel == NULL) {
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	7f1b      	ldrb	r3, [r3, #28]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <focus_next_core+0x4e>
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d111      	bne.n	80043a8 <focus_next_core+0x72>
                if(!can_begin) return focus_changed;
 8004384:	7fbb      	ldrb	r3, [r7, #30]
 8004386:	f083 0301 	eor.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <focus_next_core+0x5e>
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	e0a2      	b.n	80044da <focus_next_core+0x1a4>
                obj_next  = begin(&group->obj_ll);
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4610      	mov	r0, r2
 800439a:	4798      	blx	r3
 800439c:	6278      	str	r0, [r7, #36]	; 0x24
                can_move  = false;
 800439e:	2300      	movs	r3, #0
 80043a0:	77fb      	strb	r3, [r7, #31]
                can_begin = false;
 80043a2:	2300      	movs	r3, #0
 80043a4:	77bb      	strb	r3, [r7, #30]
 80043a6:	e001      	b.n	80043ac <focus_next_core+0x76>
            }
            else {
                /*Currently focused object is the last/first in the group, keep it that way*/
                return focus_changed;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	e096      	b.n	80044da <focus_next_core+0x1a4>
            }
        }

        if(obj_sentinel == NULL) {
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <focus_next_core+0x8a>
            obj_sentinel = obj_next;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	623b      	str	r3, [r7, #32]
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <focus_next_core+0x8a>
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	e08c      	b.n	80044da <focus_next_core+0x1a4>
        }

        if(can_move) {
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <focus_next_core+0xa8>
            obj_next = move(&group->obj_ll, obj_next);
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043cc:	4610      	mov	r0, r2
 80043ce:	4798      	blx	r3
 80043d0:	6278      	str	r0, [r7, #36]	; 0x24

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return focus_changed;
 80043d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d101      	bne.n	80043de <focus_next_core+0xa8>
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	e07d      	b.n	80044da <focus_next_core+0x1a4>
        }

        can_move = true;
 80043de:	2301      	movs	r3, #1
 80043e0:	77fb      	strb	r3, [r7, #31]

        if(obj_next == NULL) continue;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d028      	beq.n	800443a <focus_next_core+0x104>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fca3 	bl	8004d38 <lv_obj_get_state>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d120      	bne.n	800443e <focus_next_core+0x108>

        /*Hidden objects don't receive focus.
         *If any parent is hidden, the object is also hidden)*/
        lv_obj_t * parent = *obj_next;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
        while(parent) {
 8004402:	e00a      	b.n	800441a <focus_next_core+0xe4>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8004404:	2101      	movs	r1, #1
 8004406:	69b8      	ldr	r0, [r7, #24]
 8004408:	f000 fc6d 	bl	8004ce6 <lv_obj_has_flag>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <focus_next_core+0xec>
            parent = lv_obj_get_parent(parent);
 8004412:	69b8      	ldr	r0, [r7, #24]
 8004414:	f008 f84c 	bl	800c4b0 <lv_obj_get_parent>
 8004418:	61b8      	str	r0, [r7, #24]
        while(parent) {
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f1      	bne.n	8004404 <focus_next_core+0xce>
 8004420:	e000      	b.n	8004424 <focus_next_core+0xee>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8004422:	bf00      	nop
        }

        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <focus_next_core+0x10c>
 800442a:	2101      	movs	r1, #1
 800442c:	69b8      	ldr	r0, [r7, #24]
 800442e:	f000 fc5a 	bl	8004ce6 <lv_obj_has_flag>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <focus_next_core+0x10c>
 8004438:	e002      	b.n	8004440 <focus_next_core+0x10a>
        if(obj_next == NULL) continue;
 800443a:	bf00      	nop
 800443c:	e795      	b.n	800436a <focus_next_core+0x34>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 800443e:	bf00      	nop
    for(;;) {
 8004440:	e793      	b.n	800436a <focus_next_core+0x34>

        /*If we got her a good candidate is found*/
        break;
 8004442:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444a:	429a      	cmp	r2, r3
 800444c:	d101      	bne.n	8004452 <focus_next_core+0x11c>
 800444e:	7dfb      	ldrb	r3, [r7, #23]
 8004450:	e043      	b.n	80044da <focus_next_core+0x1a4>

    if(group->obj_focus) {
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d018      	beq.n	800448c <focus_next_core+0x156>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	681c      	ldr	r4, [r3, #0]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f83e 	bl	80044e2 <get_indev>
 8004466:	4603      	mov	r3, r0
 8004468:	461a      	mov	r2, r3
 800446a:	210f      	movs	r1, #15
 800446c:	4620      	mov	r0, r4
 800446e:	f7ff faf5 	bl	8003a5c <lv_event_send>
 8004472:	4603      	mov	r3, r0
 8004474:	75bb      	strb	r3, [r7, #22]
        if(res != LV_RES_OK) return focus_changed;
 8004476:	7dbb      	ldrb	r3, [r7, #22]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d001      	beq.n	8004480 <focus_next_core+0x14a>
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	e02c      	b.n	80044da <focus_next_core+0x1a4>
        lv_obj_invalidate(*group->obj_focus);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f003 feb5 	bl	80081f6 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	60da      	str	r2, [r3, #12]

    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	681c      	ldr	r4, [r3, #0]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f822 	bl	80044e2 <get_indev>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	210e      	movs	r1, #14
 80044a4:	4620      	mov	r0, r4
 80044a6:	f7ff fad9 	bl	8003a5c <lv_event_send>
 80044aa:	4603      	mov	r3, r0
 80044ac:	757b      	strb	r3, [r7, #21]
    if(res != LV_RES_OK) return focus_changed;
 80044ae:	7d7b      	ldrb	r3, [r7, #21]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d001      	beq.n	80044b8 <focus_next_core+0x182>
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	e010      	b.n	80044da <focus_next_core+0x1a4>

    lv_obj_invalidate(*group->obj_focus);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 fe99 	bl	80081f6 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <focus_next_core+0x19e>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	4798      	blx	r3
    focus_changed = true;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
    return focus_changed;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	372c      	adds	r7, #44	; 0x2c
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd90      	pop	{r4, r7, pc}

080044e2 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
    lv_indev_t * indev_encoder = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
    lv_indev_t * indev_group = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80044f2:	2000      	movs	r0, #0
 80044f4:	f019 fe04 	bl	801e100 <lv_indev_get_next>
 80044f8:	60f8      	str	r0, [r7, #12]
    while(indev) {
 80044fa:	e019      	b.n	8004530 <get_indev+0x4e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f839 	bl	8004574 <lv_indev_get_type>
 8004502:	4603      	mov	r3, r0
 8004504:	72fb      	strb	r3, [r7, #11]
        if(indev->group == g) {
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d10b      	bne.n	8004528 <get_indev+0x46>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8004510:	7afb      	ldrb	r3, [r7, #11]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d101      	bne.n	800451a <get_indev+0x38>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	e01b      	b.n	8004552 <get_indev+0x70>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 800451a:	7afb      	ldrb	r3, [r7, #11]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d101      	bne.n	8004524 <get_indev+0x42>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	617b      	str	r3, [r7, #20]
            indev_group = indev;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	613b      	str	r3, [r7, #16]
        }
        indev = lv_indev_get_next(indev);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f019 fde9 	bl	801e100 <lv_indev_get_next>
 800452e:	60f8      	str	r0, [r7, #12]
    while(indev) {
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e2      	bne.n	80044fc <get_indev+0x1a>
    }

    if(indev_encoder) return indev_encoder;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <get_indev+0x5e>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	e008      	b.n	8004552 <get_indev+0x70>
    if(indev_group) return indev_group;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <get_indev+0x68>
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	e003      	b.n	8004552 <get_indev+0x70>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 800454a:	2000      	movs	r0, #0
 800454c:	f019 fdd8 	bl	801e100 <lv_indev_get_next>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <lv_indev_get_act>:
        }
    }
}

lv_indev_t * lv_indev_get_act(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
    return indev_act;
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <lv_indev_get_act+0x14>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000698 	.word	0x20000698

08004574 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <lv_indev_get_type+0x12>
 8004582:	2300      	movs	r3, #0
 8004584:	e002      	b.n	800458c <lv_indev_get_type+0x18>

    return indev->driver->type;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <lv_indev_get_scroll_dir>:
    else
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <lv_indev_get_scroll_dir+0x12>
 80045a6:	2300      	movs	r3, #0
 80045a8:	e011      	b.n	80045ce <lv_indev_get_scroll_dir+0x36>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d006      	beq.n	80045c2 <lv_indev_get_scroll_dir+0x2a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d001      	beq.n	80045c2 <lv_indev_get_scroll_dir+0x2a>
 80045be:	2300      	movs	r3, #0
 80045c0:	e005      	b.n	80045ce <lv_indev_get_scroll_dir+0x36>
    return indev->proc.types.pointer.scroll_dir;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80045cc:	b2db      	uxtb	r3, r3
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return NULL;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <lv_indev_get_scroll_obj+0x12>
 80045e8:	2300      	movs	r3, #0
 80045ea:	e00d      	b.n	8004608 <lv_indev_get_scroll_obj+0x2e>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d006      	beq.n	8004604 <lv_indev_get_scroll_obj+0x2a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d001      	beq.n	8004604 <lv_indev_get_scroll_obj+0x2a>
 8004600:	2300      	movs	r3, #0
 8004602:	e001      	b.n	8004608 <lv_indev_get_scroll_obj+0x2e>
    return indev->proc.types.pointer.scroll_obj;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	80da      	strh	r2, [r3, #6]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b08c      	sub	sp, #48	; 0x30
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	460b      	mov	r3, r1
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	891b      	ldrh	r3, [r3, #8]
 8004664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004668:	4293      	cmp	r3, r2
 800466a:	d137      	bne.n	80046dc <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 800466c:	2300      	movs	r3, #0
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004670:	e02c      	b.n	80046cc <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004686:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8004688:	8a7a      	ldrh	r2, [r7, #18]
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	429a      	cmp	r2, r3
 800468e:	d11a      	bne.n	80046c6 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b21b      	sxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	da01      	bge.n	800469e <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 800469a:	2302      	movs	r3, #2
 800469c:	e098      	b.n	80047d0 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <lv_style_get_prop_inlined+0x68>
 80046aa:	8a7b      	ldrh	r3, [r7, #18]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f01c fbe1 	bl	8020e74 <lv_style_prop_get_default>
 80046b2:	4602      	mov	r2, r0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e003      	b.n	80046c2 <lv_style_get_prop_inlined+0x70>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	6852      	ldr	r2, [r2, #4]
 80046c0:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e084      	b.n	80047d0 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	3301      	adds	r3, #1
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	7adb      	ldrb	r3, [r3, #11]
 80046d0:	461a      	mov	r2, r3
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d3cc      	bcc.n	8004672 <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 80046d8:	2300      	movs	r3, #0
 80046da:	e079      	b.n	80047d0 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	7adb      	ldrb	r3, [r3, #11]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <lv_style_get_prop_inlined+0x96>
 80046e4:	2300      	movs	r3, #0
 80046e6:	e073      	b.n	80047d0 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	7adb      	ldrb	r3, [r3, #11]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d948      	bls.n	8004782 <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	7adb      	ldrb	r3, [r3, #11]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8004702:	2300      	movs	r3, #0
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
 8004706:	e035      	b.n	8004774 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004716:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 8004718:	8bfa      	ldrh	r2, [r7, #30]
 800471a:	897b      	ldrh	r3, [r7, #10]
 800471c:	429a      	cmp	r2, r3
 800471e:	d126      	bne.n	800476e <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	6a3a      	ldr	r2, [r7, #32]
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b21b      	sxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	da01      	bge.n	8004734 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8004730:	2302      	movs	r3, #2
 8004732:	e04d      	b.n	80047d0 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	4413      	add	r3, r2
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8004746:	8bfb      	ldrh	r3, [r7, #30]
 8004748:	4618      	mov	r0, r3
 800474a:	f01c fb93 	bl	8020e74 <lv_style_prop_get_default>
 800474e:	4602      	mov	r2, r0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e009      	b.n	800476a <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	441a      	add	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 800476a:	2301      	movs	r3, #1
 800476c:	e030      	b.n	80047d0 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	3301      	adds	r3, #1
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	7adb      	ldrb	r3, [r3, #11]
 8004778:	461a      	mov	r2, r3
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	4293      	cmp	r3, r2
 800477e:	d3c3      	bcc.n	8004708 <lv_style_get_prop_inlined+0xb6>
 8004780:	e025      	b.n	80047ce <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	891b      	ldrh	r3, [r3, #8]
 8004786:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	429a      	cmp	r2, r3
 800478e:	d11e      	bne.n	80047ce <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	891b      	ldrh	r3, [r3, #8]
 8004794:	b21b      	sxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	da01      	bge.n	800479e <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 800479a:	2302      	movs	r3, #2
 800479c:	e018      	b.n	80047d0 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	891b      	ldrh	r3, [r3, #8]
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <lv_style_get_prop_inlined+0x170>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	891b      	ldrh	r3, [r3, #8]
 80047ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4618      	mov	r0, r3
 80047b6:	f01c fb5d 	bl	8020e74 <lv_style_prop_get_default>
 80047ba:	4602      	mov	r2, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e003      	b.n	80047ca <lv_style_get_prop_inlined+0x178>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	6852      	ldr	r2, [r2, #4]
 80047c8:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3730      	adds	r7, #48	; 0x30
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <lv_obj_remove_style_all+0x1c>)
 80047e2:	2100      	movs	r1, #0
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f006 fbaf 	bl	800af48 <lv_obj_remove_style>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	000fffff 	.word	0x000fffff

080047f8 <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004802:	2201      	movs	r2, #1
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f006 fd6e 	bl	800b2e8 <lv_obj_get_style_prop>
 800480c:	4603      	mov	r3, r0
 800480e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	b21b      	sxth	r3, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <lv_obj_get_style_height>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004826:	2204      	movs	r2, #4
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f006 fd5c 	bl	800b2e8 <lv_obj_get_style_prop>
 8004830:	4603      	mov	r3, r0
 8004832:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	b21b      	sxth	r3, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <lv_obj_get_style_align>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
    return (lv_coord_t)v.num;
}

static inline lv_align_t lv_obj_get_style_align(const struct _lv_obj_t * obj, uint32_t part)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800484a:	2209      	movs	r2, #9
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f006 fd4a 	bl	800b2e8 <lv_obj_get_style_prop>
 8004854:	4603      	mov	r3, r0
 8004856:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	b2db      	uxtb	r3, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <lv_obj_get_style_transform_width>:

static inline lv_coord_t lv_obj_get_style_transform_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800486e:	2268      	movs	r2, #104	; 0x68
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f006 fd38 	bl	800b2e8 <lv_obj_get_style_prop>
 8004878:	4603      	mov	r3, r0
 800487a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	b21b      	sxth	r3, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <lv_obj_get_style_transform_height>:

static inline lv_coord_t lv_obj_get_style_transform_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004892:	2269      	movs	r2, #105	; 0x69
 8004894:	6839      	ldr	r1, [r7, #0]
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f006 fd26 	bl	800b2e8 <lv_obj_get_style_prop>
 800489c:	4603      	mov	r3, r0
 800489e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	b21b      	sxth	r3, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80048b6:	2210      	movs	r2, #16
 80048b8:	6839      	ldr	r1, [r7, #0]
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f006 fd14 	bl	800b2e8 <lv_obj_get_style_prop>
 80048c0:	4603      	mov	r3, r0
 80048c2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	b21b      	sxth	r3, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80048da:	2212      	movs	r2, #18
 80048dc:	6839      	ldr	r1, [r7, #0]
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f006 fd02 	bl	800b2e8 <lv_obj_get_style_prop>
 80048e4:	4603      	mov	r3, r0
 80048e6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	b21b      	sxth	r3, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 80048fe:	2220      	movs	r2, #32
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f006 fcf0 	bl	800b2e8 <lv_obj_get_style_prop>
 8004908:	4603      	mov	r3, r0
 800490a:	60fb      	str	r3, [r7, #12]
    return v.color;
 800490c:	7b3b      	ldrb	r3, [r7, #12]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <lv_obj_get_style_bg_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8004920:	2221      	movs	r2, #33	; 0x21
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f006 fcdf 	bl	800b2e8 <lv_obj_get_style_prop>
 800492a:	4603      	mov	r3, r0
 800492c:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	b2db      	uxtb	r3, r3
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <lv_obj_get_style_border_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
    return (bool)v.num;
}

static inline lv_color_t lv_obj_get_style_border_color(const struct _lv_obj_t * obj, uint32_t part)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8004944:	2230      	movs	r2, #48	; 0x30
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f006 fccd 	bl	800b2e8 <lv_obj_get_style_prop>
 800494e:	4603      	mov	r3, r0
 8004950:	60fb      	str	r3, [r7, #12]
    return v.color;
 8004952:	7b3b      	ldrb	r3, [r7, #12]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <lv_obj_get_style_border_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004966:	2231      	movs	r2, #49	; 0x31
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f006 fcbc 	bl	800b2e8 <lv_obj_get_style_prop>
 8004970:	4603      	mov	r3, r0
 8004972:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	b2db      	uxtb	r3, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <lv_obj_get_style_border_width>:

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800498a:	2232      	movs	r2, #50	; 0x32
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f006 fcaa 	bl	800b2e8 <lv_obj_get_style_prop>
 8004994:	4603      	mov	r3, r0
 8004996:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	b21b      	sxth	r3, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <lv_obj_get_style_border_post>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 80049ae:	2234      	movs	r2, #52	; 0x34
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f006 fc98 	bl	800b2e8 <lv_obj_get_style_prop>
 80049b8:	4603      	mov	r3, r0
 80049ba:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bf14      	ite	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	2300      	moveq	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <lv_obj_get_style_shadow_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_width(const struct _lv_obj_t * obj, uint32_t part)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80049da:	2240      	movs	r2, #64	; 0x40
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f006 fc82 	bl	800b2e8 <lv_obj_get_style_prop>
 80049e4:	4603      	mov	r3, r0
 80049e6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	b21b      	sxth	r3, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <lv_obj_get_style_shadow_spread>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_spread(const struct _lv_obj_t * obj, uint32_t part)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80049fe:	2243      	movs	r2, #67	; 0x43
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f006 fc70 	bl	800b2e8 <lv_obj_get_style_prop>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	b21b      	sxth	r3, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <lv_obj_get_style_shadow_color>:

static inline lv_color_t lv_obj_get_style_shadow_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8004a22:	2244      	movs	r2, #68	; 0x44
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f006 fc5e 	bl	800b2e8 <lv_obj_get_style_prop>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	60fb      	str	r3, [r7, #12]
    return v.color;
 8004a30:	7b3b      	ldrb	r3, [r7, #12]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <lv_obj_get_style_shadow_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8004a44:	2245      	movs	r2, #69	; 0x45
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f006 fc4d 	bl	800b2e8 <lv_obj_get_style_prop>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	b2db      	uxtb	r3, r3
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <lv_obj_get_style_radius>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
    return (lv_text_align_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_radius(const struct _lv_obj_t * obj, uint32_t part)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004a68:	220b      	movs	r2, #11
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f006 fc3b 	bl	800b2e8 <lv_obj_get_style_prop>
 8004a72:	4603      	mov	r3, r0
 8004a74:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	b21b      	sxth	r3, r3
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <lv_obj_get_style_clip_corner>:

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004a8c:	2217      	movs	r2, #23
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f006 fc29 	bl	800b2e8 <lv_obj_get_style_prop>
 8004a96:	4603      	mov	r3, r0
 8004a98:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <lv_obj_get_style_opa>:

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8004ab8:	2260      	movs	r2, #96	; 0x60
 8004aba:	6839      	ldr	r1, [r7, #0]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f006 fc13 	bl	800b2e8 <lv_obj_get_style_prop>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	b2db      	uxtb	r3, r3
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <lv_obj_get_style_layout>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004adc:	220a      	movs	r2, #10
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f006 fc01 	bl	800b2e8 <lv_obj_get_style_prop>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	b29b      	uxth	r3, r3
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <lv_init>:
{
    return lv_initialized;
}

void lv_init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
    /*Do nothing if already initialized*/
    if(lv_initialized) {
 8004afe:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <lv_init+0x90>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d13b      	bne.n	8004b7e <lv_init+0x86>
    }

    LV_LOG_INFO("begin");

    /*Initialize the misc modules*/
    lv_mem_init();
 8004b06:	f01b fa39 	bl	801ff7c <lv_mem_init>

    _lv_timer_core_init();
 8004b0a:	f01c fc67 	bl	80213dc <_lv_timer_core_init>

    _lv_fs_init();
 8004b0e:	f01a fc89 	bl	801f424 <_lv_fs_init>

    _lv_anim_core_init();
 8004b12:	f019 fb43 	bl	801e19c <_lv_anim_core_init>

    _lv_group_init();
 8004b16:	f7ff fa89 	bl	800402c <_lv_group_init>

    lv_draw_init();
 8004b1a:	f009 fbfe 	bl	800e31a <lv_draw_init>

#if LV_USE_GPU_NXP_PXP && LV_USE_GPU_NXP_PXP_AUTO_INIT
    PXP_COND_STOP(!lv_gpu_nxp_pxp_init(), "PXP init failed.");
#endif

    _lv_obj_style_init();
 8004b1e:	f006 fa09 	bl	800af34 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8004b22:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004b26:	4819      	ldr	r0, [pc, #100]	; (8004b8c <lv_init+0x94>)
 8004b28:	f01a ff9b 	bl	801fa62 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8004b2c:	215c      	movs	r1, #92	; 0x5c
 8004b2e:	4818      	ldr	r0, [pc, #96]	; (8004b90 <lv_init+0x98>)
 8004b30:	f01a ff97 	bl	801fa62 <_lv_ll_init>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8004b34:	f007 fd99 	bl	800c66a <_lv_refr_init>

    _lv_img_decoder_init();
 8004b38:	f00d fdb0 	bl	801269c <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 8004b3c:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <lv_init+0x9c>)
 8004b3e:	617b      	str	r3, [r7, #20]

    uint8_t * txt_u8 = (uint8_t *)txt;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	613b      	str	r3, [r7, #16]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2bc3      	cmp	r3, #195	; 0xc3
 8004b4a:	d103      	bne.n	8004b54 <lv_init+0x5c>
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings have no UTF-8 encoding. Non-ASCII characters won't be displayed.");
    }

    uint32_t endianess_test = 0x11223344;
 8004b54:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <lv_init+0xa0>)
 8004b56:	607b      	str	r3, [r7, #4]
    uint8_t * endianess_test_p = (uint8_t *) &endianess_test;
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
    bool big_endian = endianess_test_p[0] == 0x11 ? true : false;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b11      	cmp	r3, #17
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	72fb      	strb	r3, [r7, #11]

    if(big_endian) {
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d000      	beq.n	8004b72 <lv_init+0x7a>
        LV_ASSERT_MSG(LV_BIG_ENDIAN_SYSTEM == 1,
 8004b70:	e7fe      	b.n	8004b70 <lv_init+0x78>

#if LV_LOG_LEVEL == LV_LOG_LEVEL_TRACE
    LV_LOG_WARN("Log level is set to 'Trace' which makes LVGL much slower");
#endif

    lv_extra_init();
 8004b72:	f018 fcf2 	bl	801d55a <lv_extra_init>

    lv_initialized = true;
 8004b76:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <lv_init+0x90>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	e000      	b.n	8004b80 <lv_init+0x88>
        return;
 8004b7e:	bf00      	nop

    LV_LOG_TRACE("finished");
}
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2000069c 	.word	0x2000069c
 8004b8c:	200007f8 	.word	0x200007f8
 8004b90:	20000804 	.word	0x20000804
 8004b94:	08022c04 	.word	0x08022c04
 8004b98:	11223344 	.word	0x11223344

08004b9c <lv_obj_create>:
#endif
}
#endif

lv_obj_t * lv_obj_create(lv_obj_t * parent)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4806      	ldr	r0, [pc, #24]	; (8004bc0 <lv_obj_create+0x24>)
 8004ba8:	f001 f9b8 	bl	8005f1c <lv_obj_class_create_obj>
 8004bac:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f001 fa69 	bl	8006086 <lv_obj_class_init_obj>
    return obj;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08022c68 	.word	0x08022c68

08004bc4 <lv_obj_clear_flag>:
        lv_obj_invalidate_area(obj, &ver_area);
    }
}

void lv_obj_clear_flag(lv_obj_t * obj, lv_obj_flag_t f)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f002 fcbc 	bl	800754c <lv_obj_is_layout_positioned>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	77fb      	strb	r3, [r7, #31]
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d013      	beq.n	8004c0a <lv_obj_clear_flag+0x46>
        lv_area_t hor_area, ver_area;
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004be2:	f107 020c 	add.w	r2, r7, #12
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f004 fedb 	bl	80099a8 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f003 fac7 	bl	800818c <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8004bfe:	f107 030c 	add.w	r3, r7, #12
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f003 fac1 	bl	800818c <lv_obj_invalidate_area>
    }

    obj->flags &= (~f);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	401a      	ands	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	61da      	str	r2, [r3, #28]

    if(f & LV_OBJ_FLAG_HIDDEN) {
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d012      	beq.n	8004c48 <lv_obj_clear_flag+0x84>
        lv_obj_invalidate(obj);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f003 fae7 	bl	80081f6 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f002 fc8f 	bl	800754c <lv_obj_is_layout_positioned>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <lv_obj_clear_flag+0x84>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f007 fc3b 	bl	800c4b0 <lv_obj_get_parent>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f002 fcad 	bl	800759c <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f002 fcaa 	bl	800759c <lv_obj_mark_layout_as_dirty>
        }
    }

    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f002 fc7f 	bl	800754c <lv_obj_is_layout_positioned>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d104      	bne.n	8004c62 <lv_obj_clear_flag+0x9e>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f003 73c0 	and.w	r3, r3, #25165824	; 0x1800000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d006      	beq.n	8004c70 <lv_obj_clear_flag+0xac>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f007 fc24 	bl	800c4b0 <lv_obj_get_parent>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f002 fc96 	bl	800759c <lv_obj_mark_layout_as_dirty>
    }

}
 8004c70:	bf00      	nop
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <lv_obj_add_state>:

void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state | state;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8c1a      	ldrh	r2, [r3, #32]
 8004c88:	887b      	ldrh	r3, [r7, #2]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8c1b      	ldrh	r3, [r3, #32]
 8004c92:	89fa      	ldrh	r2, [r7, #14]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d004      	beq.n	8004ca2 <lv_obj_add_state+0x2a>
        lv_obj_set_state(obj, new_state);
 8004c98:	89fb      	ldrh	r3, [r7, #14]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 ffd1 	bl	8005c44 <lv_obj_set_state>
    }
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <lv_obj_clear_state>:

void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state & (~state);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8c1b      	ldrh	r3, [r3, #32]
 8004cba:	b21a      	sxth	r2, r3
 8004cbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	b21b      	sxth	r3, r3
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b21b      	sxth	r3, r3
 8004cc8:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8c1b      	ldrh	r3, [r3, #32]
 8004cce:	89fa      	ldrh	r2, [r7, #14]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d004      	beq.n	8004cde <lv_obj_clear_state+0x34>
        lv_obj_set_state(obj, new_state);
 8004cd4:	89fb      	ldrh	r3, [r7, #14]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 ffb3 	bl	8005c44 <lv_obj_set_state>
    }
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <lv_obj_has_flag>:
/*=======================
 * Getter functions
 *======================*/

bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f)  == f ? true : false;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	2300      	movne	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <lv_obj_has_flag_any>:

bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f) ? true : false;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->state;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8c1b      	ldrh	r3, [r3, #32]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <lv_obj_get_group>:

    return obj->state & state ? true : false;
}

void * lv_obj_get_group(const lv_obj_t * obj)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr) return obj->spec_attr->group_p;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <lv_obj_get_group+0x18>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	e000      	b.n	8004d6a <lv_obj_get_group+0x1a>
    else return NULL;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <lv_obj_allocate_spec_attr>:
/*-------------------
 * OTHER FUNCTIONS
 *------------------*/

void lv_obj_allocate_spec_attr(lv_obj_t * obj)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d127      	bne.n	8004dd8 <lv_obj_allocate_spec_attr+0x60>
        static uint32_t x = 0;
        x++;
 8004d88:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <lv_obj_allocate_spec_attr+0x68>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <lv_obj_allocate_spec_attr+0x68>)
 8004d90:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8004d92:	201c      	movs	r0, #28
 8004d94:	f01b f902 	bl	801ff9c <lv_mem_alloc>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d100      	bne.n	8004da8 <lv_obj_allocate_spec_attr+0x30>
 8004da6:	e7fe      	b.n	8004da6 <lv_obj_allocate_spec_attr+0x2e>
        if(obj->spec_attr == NULL) return;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d012      	beq.n	8004dd6 <lv_obj_allocate_spec_attr+0x5e>

        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	211c      	movs	r1, #28
 8004db6:	4618      	mov	r0, r3
 8004db8:	f01b fd24 	bl	8020804 <lv_memset_00>

        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	7e53      	ldrb	r3, [r2, #25]
 8004dc2:	f043 030f 	orr.w	r3, r3, #15
 8004dc6:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	7e13      	ldrb	r3, [r2, #24]
 8004dce:	f043 0303 	orr.w	r3, r3, #3
 8004dd2:	7613      	strb	r3, [r2, #24]
 8004dd4:	e000      	b.n	8004dd8 <lv_obj_allocate_spec_attr+0x60>
        if(obj->spec_attr == NULL) return;
 8004dd6:	bf00      	nop
    }
}
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200006a0 	.word	0x200006a0

08004de4 <lv_obj_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8004de4:	b590      	push	{r4, r7, lr}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_t * parent = obj->parent;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]
    if(parent) {
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d03f      	beq.n	8004e7a <lv_obj_constructor+0x96>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f004 f9ca 	bl	8009194 <lv_obj_get_scroll_left>
 8004e00:	4603      	mov	r3, r0
 8004e02:	817b      	strh	r3, [r7, #10]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f004 f927 	bl	8009058 <lv_obj_get_scroll_top>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	813b      	strh	r3, [r7, #8]

        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004e14:	b29c      	uxth	r4, r3
 8004e16:	2100      	movs	r1, #0
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff fd47 	bl	80048ac <lv_obj_get_style_pad_top>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	4423      	add	r3, r4
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	893b      	ldrh	r3, [r7, #8]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	b21a      	sxth	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	82da      	strh	r2, [r3, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	b21a      	sxth	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	835a      	strh	r2, [r3, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004e4a:	b29c      	uxth	r4, r3
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff fd3e 	bl	80048d0 <lv_obj_get_style_pad_left>
 8004e54:	4603      	mov	r3, r0
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	4423      	add	r3, r4
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	897b      	ldrh	r3, [r7, #10]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	b21a      	sxth	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	829a      	strh	r2, [r3, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	b21a      	sxth	r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	831a      	strh	r2, [r3, #24]
    }

    /*Set attributes*/
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <lv_obj_constructor+0xba>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <lv_obj_constructor+0xcc>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f043 0204 	orr.w	r2, r3, #4
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f043 0210 	orr.w	r2, r3, #16
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <lv_obj_constructor+0x11a>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	61da      	str	r2, [r3, #28]

    LV_TRACE_OBJ_CREATE("finished");
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}

08004f06 <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    _lv_event_mark_deleted(obj);
 8004f10:	6838      	ldr	r0, [r7, #0]
 8004f12:	f7fe fe57 	bl	8003bc4 <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8004f16:	2000      	movs	r0, #0
 8004f18:	f006 f9d6 	bl	800b2c8 <lv_obj_enable_style_refresh>
    lv_obj_remove_style_all(obj);
 8004f1c:	6838      	ldr	r0, [r7, #0]
 8004f1e:	f7ff fc5b 	bl	80047d8 <lv_obj_remove_style_all>
    lv_obj_enable_style_refresh(true);
 8004f22:	2001      	movs	r0, #1
 8004f24:	f006 f9d0 	bl	800b2c8 <lv_obj_enable_style_refresh>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 8004f28:	2100      	movs	r1, #0
 8004f2a:	6838      	ldr	r0, [r7, #0]
 8004f2c:	f019 f9f2 	bl	801e314 <lv_anim_del>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 8004f30:	6838      	ldr	r0, [r7, #0]
 8004f32:	f7ff ff0d 	bl	8004d50 <lv_obj_get_group>
 8004f36:	60f8      	str	r0, [r7, #12]
    if(group) lv_group_remove_obj(obj);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <lv_obj_destructor+0x3e>
 8004f3e:	6838      	ldr	r0, [r7, #0]
 8004f40:	f7ff f8ee 	bl	8004120 <lv_group_remove_obj>

    if(obj->spec_attr) {
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d025      	beq.n	8004f98 <lv_obj_destructor+0x92>
        if(obj->spec_attr->children) {
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <lv_obj_destructor+0x64>
            lv_mem_free(obj->spec_attr->children);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f01b f84d 	bl	801fffc <lv_mem_free>
            obj->spec_attr->children = NULL;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d009      	beq.n	8004f88 <lv_obj_destructor+0x82>
            lv_mem_free(obj->spec_attr->event_dsc);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f01b f83e 	bl	801fffc <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2200      	movs	r2, #0
 8004f86:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f01b f835 	bl	801fffc <lv_mem_free>
        obj->spec_attr = NULL;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	609a      	str	r2, [r3, #8]
    }
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <lv_obj_draw>:

static void lv_obj_draw(lv_event_t * e)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b0b4      	sub	sp, #208	; 0xd0
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
    lv_event_code_t code = lv_event_get_code(e);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fe fdef 	bl	8003b8c <lv_event_get_code>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    lv_obj_t * obj = lv_event_get_target(e);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7fe fdd1 	bl	8003b5c <lv_event_get_target>
 8004fba:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if(code == LV_EVENT_COVER_CHECK) {
 8004fbe:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8004fc2:	2b12      	cmp	r3, #18
 8004fc4:	f040 8089 	bne.w	80050da <lv_obj_draw+0x13a>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fe fdee 	bl	8003baa <lv_event_get_param>
 8004fce:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if(info->res == LV_COVER_RES_MASKED) return;
 8004fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	f000 8227 	beq.w	800542c <lv_obj_draw+0x48c>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8004fde:	2100      	movs	r1, #0
 8004fe0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8004fe4:	f7ff fd4d 	bl	8004a82 <lv_obj_get_style_clip_corner>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d004      	beq.n	8004ff8 <lv_obj_draw+0x58>
            info->res = LV_COVER_RES_MASKED;
 8004fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	701a      	strb	r2, [r3, #0]
            return;
 8004ff6:	e21a      	b.n	800542e <lv_obj_draw+0x48e>
        }

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_PART_MAIN);
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8004ffe:	f7ff fd2e 	bl	8004a5e <lv_obj_get_style_radius>
 8005002:	4603      	mov	r3, r0
 8005004:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 8005008:	2100      	movs	r1, #0
 800500a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800500e:	f7ff fc29 	bl	8004864 <lv_obj_get_style_transform_width>
 8005012:	4603      	mov	r3, r0
 8005014:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8005018:	2100      	movs	r1, #0
 800501a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800501e:	f7ff fc33 	bl	8004888 <lv_obj_get_style_transform_height>
 8005022:	4603      	mov	r3, r0
 8005024:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8005028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800502c:	f103 0214 	add.w	r2, r3, #20
 8005030:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005034:	4611      	mov	r1, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff faec 	bl	8004614 <lv_area_copy>
        coords.x1 -= w;
 800503c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8005040:	b29a      	uxth	r2, r3
 8005042:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	b21b      	sxth	r3, r3
 800504c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.x2 += w;
 8005050:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8005054:	b29a      	uxth	r2, r3
 8005056:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800505a:	4413      	add	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	b21b      	sxth	r3, r3
 8005060:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        coords.y1 -= h;
 8005064:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8005068:	b29a      	uxth	r2, r3
 800506a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	b29b      	uxth	r3, r3
 8005072:	b21b      	sxth	r3, r3
 8005074:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        coords.y2 += h;
 8005078:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800507c:	b29a      	uxth	r2, r3
 800507e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005082:	4413      	add	r3, r2
 8005084:	b29b      	uxth	r3, r3
 8005086:	b21b      	sxth	r3, r3
 8005088:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

        if(_lv_area_is_in(info->area, &coords, r) == false) {
 800508c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 8005096:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800509a:	4618      	mov	r0, r3
 800509c:	f019 fe42 	bl	801ed24 <_lv_area_is_in>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f083 0301 	eor.w	r3, r3, #1
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <lv_obj_draw+0x116>
            info->res = LV_COVER_RES_NOT_COVER;
 80050ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
            return;
 80050b4:	e1bb      	b.n	800542e <lv_obj_draw+0x48e>
        }

        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 80050b6:	2100      	movs	r1, #0
 80050b8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80050bc:	f7ff fc2b 	bl	8004916 <lv_obj_get_style_bg_opa>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2bfc      	cmp	r3, #252	; 0xfc
 80050c4:	d804      	bhi.n	80050d0 <lv_obj_draw+0x130>
            info->res = LV_COVER_RES_NOT_COVER;
 80050c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
            return;
 80050ce:	e1ae      	b.n	800542e <lv_obj_draw+0x48e>
        }

        info->res = LV_COVER_RES_COVER;
 80050d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e1a9      	b.n	800542e <lv_obj_draw+0x48e>

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 80050da:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80050de:	2b15      	cmp	r3, #21
 80050e0:	f040 80e7 	bne.w	80052b2 <lv_obj_draw+0x312>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fe fde1 	bl	8003cac <lv_event_get_draw_ctx>
 80050ea:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 80050ee:	f107 030c 	add.w	r3, r7, #12
 80050f2:	4618      	mov	r0, r3
 80050f4:	f00d f8f6 	bl	80122e4 <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80050f8:	2100      	movs	r1, #0
 80050fa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80050fe:	f7ff fc51 	bl	80049a4 <lv_obj_get_style_border_post>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <lv_obj_draw+0x174>
            draw_dsc.border_post = 1;
 8005108:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }

        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8005114:	f107 030c 	add.w	r3, r7, #12
 8005118:	461a      	mov	r2, r3
 800511a:	2100      	movs	r1, #0
 800511c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005120:	f001 fb20 	bl	8006764 <lv_obj_init_draw_rect_dsc>
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 8005124:	2100      	movs	r1, #0
 8005126:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800512a:	f7ff fb9b 	bl	8004864 <lv_obj_get_style_transform_width>
 800512e:	4603      	mov	r3, r0
 8005130:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8005134:	2100      	movs	r1, #0
 8005136:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800513a:	f7ff fba5 	bl	8004888 <lv_obj_get_style_transform_height>
 800513e:	4603      	mov	r3, r0
 8005140:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8005144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005148:	f103 0214 	add.w	r2, r3, #20
 800514c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005150:	4611      	mov	r1, r2
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fa5e 	bl	8004614 <lv_area_copy>
        coords.x1 -= w;
 8005158:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 800515c:	b29a      	uxth	r2, r3
 800515e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	b29b      	uxth	r3, r3
 8005166:	b21b      	sxth	r3, r3
 8005168:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.x2 += w;
 800516c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8005170:	b29a      	uxth	r2, r3
 8005172:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005176:	4413      	add	r3, r2
 8005178:	b29b      	uxth	r3, r3
 800517a:	b21b      	sxth	r3, r3
 800517c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.y1 -= h;
 8005180:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8005184:	b29a      	uxth	r2, r3
 8005186:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	b29b      	uxth	r3, r3
 800518e:	b21b      	sxth	r3, r3
 8005190:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
        coords.y2 += h;
 8005194:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8005198:	b29a      	uxth	r2, r3
 800519a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800519e:	4413      	add	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	b21b      	sxth	r3, r3
 80051a4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

        lv_obj_draw_part_dsc_t part_dsc;
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80051a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051ac:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 fd3e 	bl	8006c32 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 80051b6:	4b9f      	ldr	r3, [pc, #636]	; (8005434 <lv_obj_draw+0x494>)
 80051b8:	643b      	str	r3, [r7, #64]	; 0x40
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	647b      	str	r3, [r7, #68]	; 0x44
        part_dsc.rect_dsc = &draw_dsc;
 80051be:	f107 030c 	add.w	r3, r7, #12
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
        part_dsc.draw_area = &coords;
 80051c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80051c8:	64bb      	str	r3, [r7, #72]	; 0x48
        part_dsc.part = LV_PART_MAIN;
 80051ca:	2300      	movs	r3, #0
 80051cc:	673b      	str	r3, [r7, #112]	; 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80051ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051d2:	461a      	mov	r2, r3
 80051d4:	211a      	movs	r1, #26
 80051d6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80051da:	f7fe fc3f 	bl	8003a5c <lv_event_send>

#if LV_DRAW_COMPLEX
        /*With clip corner enabled draw the bg img separately to make it clipped*/
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 80051de:	2100      	movs	r1, #0
 80051e0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80051e4:	f7ff fc4d 	bl	8004a82 <lv_obj_get_style_clip_corner>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <lv_obj_draw+0x25a>
 80051ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <lv_obj_draw+0x25a>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <lv_obj_draw+0x25c>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8005200:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
        const void * bg_img_src = draw_dsc.bg_img_src;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if(clip_corner) {
 8005212:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <lv_obj_draw+0x27e>
            draw_dsc.bg_img_src = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
        }
#endif

        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 800521e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005222:	f107 030c 	add.w	r3, r7, #12
 8005226:	4619      	mov	r1, r3
 8005228:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800522c:	f00d f89e 	bl	801236c <lv_draw_rect>


#if LV_DRAW_COMPLEX
        if(clip_corner) {
 8005230:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d033      	beq.n	80052a0 <lv_obj_draw+0x300>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8005238:	2018      	movs	r0, #24
 800523a:	f01a ff39 	bl	80200b0 <lv_mem_buf_get>
 800523e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8005242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005246:	f103 0114 	add.w	r1, r3, #20
 800524a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800524e:	2300      	movs	r3, #0
 8005250:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005254:	f00b f84a 	bl	80102ec <lv_draw_mask_radius_init>
            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 8005258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800525c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005260:	4619      	mov	r1, r3
 8005262:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005266:	f00a fc75 	bl	800fb54 <lv_draw_mask_add>

            if(bg_img_src) {
 800526a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800526e:	2b00      	cmp	r3, #0
 8005270:	d016      	beq.n	80052a0 <lv_obj_draw+0x300>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 800527c:	2300      	movs	r3, #0
 800527e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8005282:	2300      	movs	r3, #0
 8005284:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                draw_dsc.bg_img_src = bg_img_src;
 8005288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800528c:	61bb      	str	r3, [r7, #24]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 800528e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005292:	f107 030c 	add.w	r3, r7, #12
 8005296:	4619      	mov	r1, r3
 8005298:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800529c:	f00d f866 	bl	801236c <lv_draw_rect>
            }

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80052a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052a4:	461a      	mov	r2, r3
 80052a6:	211b      	movs	r1, #27
 80052a8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80052ac:	f7fe fbd6 	bl	8003a5c <lv_event_send>
 80052b0:	e0bd      	b.n	800542e <lv_obj_draw+0x48e>
    }
    else if(code == LV_EVENT_DRAW_POST) {
 80052b2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80052b6:	2b18      	cmp	r3, #24
 80052b8:	f040 80b9 	bne.w	800542e <lv_obj_draw+0x48e>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fe fcf5 	bl	8003cac <lv_event_get_draw_ctx>
 80052c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        draw_scrollbar(obj, draw_ctx);
 80052c6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80052ca:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80052ce:	f000 f8b3 	bl	8005438 <draw_scrollbar>

#if LV_DRAW_COMPLEX
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80052d2:	2100      	movs	r1, #0
 80052d4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80052d8:	f7ff fbd3 	bl	8004a82 <lv_obj_get_style_clip_corner>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d014      	beq.n	800530c <lv_obj_draw+0x36c>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 80052e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052e6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80052ea:	4618      	mov	r0, r3
 80052ec:	f00a fcd0 	bl	800fc90 <lv_draw_mask_remove_custom>
 80052f0:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
            if(param) {
 80052f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <lv_obj_draw+0x36c>
                lv_draw_mask_free_param(param);
 80052fc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005300:	f00a fcee 	bl	800fce0 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 8005304:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005308:	f01a ff7e 	bl	8020208 <lv_mem_buf_release>
            }
        }
#endif

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 800530c:	2100      	movs	r1, #0
 800530e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005312:	f7ff fb47 	bl	80049a4 <lv_obj_get_style_border_post>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8088 	beq.w	800542e <lv_obj_draw+0x48e>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 800531e:	f107 030c 	add.w	r3, r7, #12
 8005322:	4618      	mov	r0, r3
 8005324:	f00c ffde 	bl	80122e4 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8005332:	2300      	movs	r3, #0
 8005334:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8005338:	2300      	movs	r3, #0
 800533a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 800533e:	f107 030c 	add.w	r3, r7, #12
 8005342:	461a      	mov	r2, r3
 8005344:	2100      	movs	r1, #0
 8005346:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800534a:	f001 fa0b 	bl	8006764 <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 800534e:	2100      	movs	r1, #0
 8005350:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005354:	f7ff fa86 	bl	8004864 <lv_obj_get_style_transform_width>
 8005358:	4603      	mov	r3, r0
 800535a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 800535e:	2100      	movs	r1, #0
 8005360:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005364:	f7ff fa90 	bl	8004888 <lv_obj_get_style_transform_height>
 8005368:	4603      	mov	r3, r0
 800536a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 800536e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005372:	f103 0214 	add.w	r2, r3, #20
 8005376:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff f949 	bl	8004614 <lv_area_copy>
            coords.x1 -= w;
 8005382:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8005386:	b29a      	uxth	r2, r3
 8005388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	b29b      	uxth	r3, r3
 8005390:	b21b      	sxth	r3, r3
 8005392:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
            coords.x2 += w;
 8005396:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 800539a:	b29a      	uxth	r2, r3
 800539c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053a0:	4413      	add	r3, r2
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	b21b      	sxth	r3, r3
 80053a6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
            coords.y1 -= h;
 80053aa:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	b21b      	sxth	r3, r3
 80053ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            coords.y2 += h;
 80053be:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80053c8:	4413      	add	r3, r2
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            lv_obj_draw_part_dsc_t part_dsc;
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80053d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80053d6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 fc29 	bl	8006c32 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 80053e0:	4b14      	ldr	r3, [pc, #80]	; (8005434 <lv_obj_draw+0x494>)
 80053e2:	643b      	str	r3, [r7, #64]	; 0x40
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 80053e4:	2301      	movs	r3, #1
 80053e6:	647b      	str	r3, [r7, #68]	; 0x44
            part_dsc.rect_dsc = &draw_dsc;
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	64fb      	str	r3, [r7, #76]	; 0x4c
            part_dsc.draw_area = &coords;
 80053ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80053f2:	64bb      	str	r3, [r7, #72]	; 0x48
            part_dsc.part = LV_PART_MAIN;
 80053f4:	2300      	movs	r3, #0
 80053f6:	673b      	str	r3, [r7, #112]	; 0x70
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80053f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80053fc:	461a      	mov	r2, r3
 80053fe:	211a      	movs	r1, #26
 8005400:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005404:	f7fe fb2a 	bl	8003a5c <lv_event_send>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8005408:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	4619      	mov	r1, r3
 8005412:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005416:	f00c ffa9 	bl	801236c <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 800541a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800541e:	461a      	mov	r2, r3
 8005420:	211b      	movs	r1, #27
 8005422:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005426:	f7fe fb19 	bl	8003a5c <lv_event_send>
 800542a:	e000      	b.n	800542e <lv_obj_draw+0x48e>
        if(info->res == LV_COVER_RES_MASKED) return;
 800542c:	bf00      	nop
        }
    }
}
 800542e:	37d0      	adds	r7, #208	; 0xd0
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	08022c68 	.word	0x08022c68

08005438 <draw_scrollbar>:

static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b0a6      	sub	sp, #152	; 0x98
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005442:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005446:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f004 faab 	bl	80099a8 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8005452:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005456:	4618      	mov	r0, r3
 8005458:	f019 f9f3 	bl	801e842 <lv_area_get_size>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d107      	bne.n	8005472 <draw_scrollbar+0x3a>
 8005462:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005466:	4618      	mov	r0, r3
 8005468:	f019 f9eb 	bl	801e842 <lv_area_get_size>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d062      	beq.n	8005538 <draw_scrollbar+0x100>

    lv_draw_rect_dsc_t draw_dsc;
    lv_res_t sb_res = scrollbar_init_draw_dsc(obj, &draw_dsc);
 8005472:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f865 	bl	8005548 <scrollbar_init_draw_dsc>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(sb_res != LV_RES_OK) return;
 8005484:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005488:	2b01      	cmp	r3, #1
 800548a:	d157      	bne.n	800553c <draw_scrollbar+0x104>

    lv_obj_draw_part_dsc_t part_dsc;
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 800548c:	f107 030c 	add.w	r3, r7, #12
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fbcd 	bl	8006c32 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8005498:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <draw_scrollbar+0x10c>)
 800549a:	613b      	str	r3, [r7, #16]
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 800549c:	2302      	movs	r3, #2
 800549e:	617b      	str	r3, [r7, #20]
    part_dsc.rect_dsc = &draw_dsc;
 80054a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054a4:	61fb      	str	r3, [r7, #28]
    part_dsc.part = LV_PART_SCROLLBAR;
 80054a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054aa:	643b      	str	r3, [r7, #64]	; 0x40

    if(lv_area_get_size(&hor_area) > 0) {
 80054ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80054b0:	4618      	mov	r0, r3
 80054b2:	f019 f9c6 	bl	801e842 <lv_area_get_size>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d018      	beq.n	80054ee <draw_scrollbar+0xb6>
        part_dsc.draw_area = &hor_area;
 80054bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80054c0:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	461a      	mov	r2, r3
 80054c8:	211a      	movs	r1, #26
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fe fac6 	bl	8003a5c <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 80054d0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80054d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054d8:	4619      	mov	r1, r3
 80054da:	6838      	ldr	r0, [r7, #0]
 80054dc:	f00c ff46 	bl	801236c <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	461a      	mov	r2, r3
 80054e6:	211b      	movs	r1, #27
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fe fab7 	bl	8003a5c <lv_event_send>
    }
    if(lv_area_get_size(&ver_area) > 0) {
 80054ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80054f2:	4618      	mov	r0, r3
 80054f4:	f019 f9a5 	bl	801e842 <lv_area_get_size>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01f      	beq.n	800553e <draw_scrollbar+0x106>
        part_dsc.draw_area = &ver_area;
 80054fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005502:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	461a      	mov	r2, r3
 800550a:	211a      	movs	r1, #26
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fe faa5 	bl	8003a5c <lv_event_send>
        part_dsc.draw_area = &ver_area;
 8005512:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005516:	61bb      	str	r3, [r7, #24]
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8005518:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800551c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005520:	4619      	mov	r1, r3
 8005522:	6838      	ldr	r0, [r7, #0]
 8005524:	f00c ff22 	bl	801236c <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8005528:	f107 030c 	add.w	r3, r7, #12
 800552c:	461a      	mov	r2, r3
 800552e:	211b      	movs	r1, #27
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fe fa93 	bl	8003a5c <lv_event_send>
 8005536:	e002      	b.n	800553e <draw_scrollbar+0x106>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <draw_scrollbar+0x106>
    if(sb_res != LV_RES_OK) return;
 800553c:	bf00      	nop
    }
}
 800553e:	3798      	adds	r7, #152	; 0x98
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	08022c68 	.word	0x08022c68

08005548 <scrollbar_init_draw_dsc>:
 * @param obj pointer to an object
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
    lv_draw_rect_dsc_init(dsc);
 8005552:	6838      	ldr	r0, [r7, #0]
 8005554:	f00c fec6 	bl	80122e4 <lv_draw_rect_dsc_init>
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8005558:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff f9da 	bl	8004916 <lv_obj_get_style_bg_opa>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	70da      	strb	r2, [r3, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	78db      	ldrb	r3, [r3, #3]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d906      	bls.n	8005580 <scrollbar_init_draw_dsc+0x38>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8005572:	683c      	ldr	r4, [r7, #0]
 8005574:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff f9bb 	bl	80048f4 <lv_obj_get_style_bg_color>
 800557e:	7120      	strb	r0, [r4, #4]
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8005580:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff f9e9 	bl	800495c <lv_obj_get_style_border_opa>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	771a      	strb	r2, [r3, #28]
    if(dsc->border_opa > LV_OPA_MIN) {
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	7f1b      	ldrb	r3, [r3, #28]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d918      	bls.n	80055cc <scrollbar_init_draw_dsc+0x84>
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 800559a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff f9ee 	bl	8004980 <lv_obj_get_style_border_width>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	835a      	strh	r2, [r3, #26]
        if(dsc->border_width > 0) {
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	dd07      	ble.n	80055c6 <scrollbar_init_draw_dsc+0x7e>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 80055b6:	683c      	ldr	r4, [r7, #0]
 80055b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff f9bc 	bl	800493a <lv_obj_get_style_border_color>
 80055c2:	7620      	strb	r0, [r4, #24]
 80055c4:	e002      	b.n	80055cc <scrollbar_init_draw_dsc+0x84>
        }
        else {
            dsc->border_opa = LV_OPA_TRANSP;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 80055cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff fa32 	bl	8004a3a <lv_obj_get_style_shadow_opa>
 80055d6:	4603      	mov	r3, r0
 80055d8:	461a      	mov	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d923      	bls.n	8005632 <scrollbar_init_draw_dsc+0xea>
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 80055ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff f9ee 	bl	80049d0 <lv_obj_get_style_shadow_width>
 80055f4:	4603      	mov	r3, r0
 80055f6:	461a      	mov	r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	84da      	strh	r2, [r3, #38]	; 0x26
        if(dsc->shadow_width > 0) {
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005602:	2b00      	cmp	r3, #0
 8005604:	dd11      	ble.n	800562a <scrollbar_init_draw_dsc+0xe2>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8005606:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff f9f2 	bl	80049f4 <lv_obj_get_style_shadow_spread>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	859a      	strh	r2, [r3, #44]	; 0x2c
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8005618:	683c      	ldr	r4, [r7, #0]
 800561a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff f9fa 	bl	8004a18 <lv_obj_get_style_shadow_color>
 8005624:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 8005628:	e003      	b.n	8005632 <scrollbar_init_draw_dsc+0xea>
        }
        else {
            dsc->shadow_opa = LV_OPA_TRANSP;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
 8005632:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fa39 	bl	8004aae <lv_obj_get_style_opa>
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
    if(opa < LV_OPA_MAX) {
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2bfc      	cmp	r3, #252	; 0xfc
 8005644:	d81e      	bhi.n	8005684 <scrollbar_init_draw_dsc+0x13c>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	78db      	ldrb	r3, [r3, #3]
 800564a:	461a      	mov	r2, r3
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	121b      	asrs	r3, r3, #8
 8005654:	b2da      	uxtb	r2, r3
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	70da      	strb	r2, [r3, #3]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	78db      	ldrb	r3, [r3, #3]
 800565e:	461a      	mov	r2, r3
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	121b      	asrs	r3, r3, #8
 8005668:	b2da      	uxtb	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	771a      	strb	r2, [r3, #28]
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	78db      	ldrb	r3, [r3, #3]
 8005672:	461a      	mov	r2, r3
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	121b      	asrs	r3, r3, #8
 800567c:	b2da      	uxtb	r2, r3
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	78db      	ldrb	r3, [r3, #3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d108      	bne.n	800569e <scrollbar_init_draw_dsc+0x156>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	7f1b      	ldrb	r3, [r3, #28]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <scrollbar_init_draw_dsc+0x156>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <scrollbar_init_draw_dsc+0x16c>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 800569e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff f9db 	bl	8004a5e <lv_obj_get_style_radius>
 80056a8:	4603      	mov	r3, r0
 80056aa:	461a      	mov	r2, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	801a      	strh	r2, [r3, #0]
        return LV_RES_OK;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <scrollbar_init_draw_dsc+0x16e>
    }
    else {
        return LV_RES_INV;
 80056b4:	2300      	movs	r3, #0
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
    else return LV_RES_INV;
#endif
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd90      	pop	{r4, r7, pc}

080056be <lv_obj_event>:

static void lv_obj_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80056be:	b590      	push	{r4, r7, lr}
 80056c0:	b09b      	sub	sp, #108	; 0x6c
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 80056c8:	6838      	ldr	r0, [r7, #0]
 80056ca:	f7fe fa5f 	bl	8003b8c <lv_event_get_code>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_obj_t * obj = lv_event_get_current_target(e);
 80056d4:	6838      	ldr	r0, [r7, #0]
 80056d6:	f7fe fa4d 	bl	8003b74 <lv_event_get_current_target>
 80056da:	6538      	str	r0, [r7, #80]	; 0x50
    if(code == LV_EVENT_PRESSED) {
 80056dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d104      	bne.n	80056ee <lv_obj_event+0x30>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 80056e4:	2120      	movs	r1, #32
 80056e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80056e8:	f7ff fac6 	bl	8004c78 <lv_obj_add_state>
 80056ec:	e2a7      	b.n	8005c3e <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_RELEASED) {
 80056ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d131      	bne.n	800575a <lv_obj_event+0x9c>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 80056f6:	2120      	movs	r1, #32
 80056f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80056fa:	f7ff fad6 	bl	8004caa <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 80056fe:	6838      	ldr	r0, [r7, #0]
 8005700:	f7fe fa53 	bl	8003baa <lv_event_get_param>
 8005704:	6238      	str	r0, [r7, #32]
        /*Go the checked state if enabled*/
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8005706:	6a38      	ldr	r0, [r7, #32]
 8005708:	f7fe ff67 	bl	80045da <lv_indev_get_scroll_obj>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 8295 	bne.w	8005c3e <lv_obj_event+0x580>
 8005714:	2108      	movs	r1, #8
 8005716:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005718:	f7ff fae5 	bl	8004ce6 <lv_obj_has_flag>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 828d 	beq.w	8005c3e <lv_obj_event+0x580>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8005724:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005726:	f7ff fb07 	bl	8004d38 <lv_obj_get_state>
 800572a:	4603      	mov	r3, r0
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d104      	bne.n	800573e <lv_obj_event+0x80>
 8005734:	2101      	movs	r1, #1
 8005736:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005738:	f7ff fa9e 	bl	8004c78 <lv_obj_add_state>
 800573c:	e003      	b.n	8005746 <lv_obj_event+0x88>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 800573e:	2101      	movs	r1, #1
 8005740:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005742:	f7ff fab2 	bl	8004caa <lv_obj_clear_state>

            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8005746:	2200      	movs	r2, #0
 8005748:	211c      	movs	r1, #28
 800574a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800574c:	f7fe f986 	bl	8003a5c <lv_event_send>
 8005750:	4603      	mov	r3, r0
 8005752:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) return;
 8005754:	7ffb      	ldrb	r3, [r7, #31]
 8005756:	2b01      	cmp	r3, #1
 8005758:	e271      	b.n	8005c3e <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_PRESS_LOST) {
 800575a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800575e:	2b03      	cmp	r3, #3
 8005760:	d104      	bne.n	800576c <lv_obj_event+0xae>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8005762:	2120      	movs	r1, #32
 8005764:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005766:	f7ff faa0 	bl	8004caa <lv_obj_clear_state>
 800576a:	e268      	b.n	8005c3e <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_STYLE_CHANGED) {
 800576c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005770:	2b2a      	cmp	r3, #42	; 0x2a
 8005772:	d119      	bne.n	80057a8 <lv_obj_event+0xea>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005774:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005776:	f006 feac 	bl	800c4d2 <lv_obj_get_child_cnt>
 800577a:	62b8      	str	r0, [r7, #40]	; 0x28
        for(uint32_t i = 0; i < child_cnt; i++) {
 800577c:	2300      	movs	r3, #0
 800577e:	667b      	str	r3, [r7, #100]	; 0x64
 8005780:	e00d      	b.n	800579e <lv_obj_event+0xe0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
            lv_obj_mark_layout_as_dirty(child);
 8005792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005794:	f001 ff02 	bl	800759c <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8005798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579a:	3301      	adds	r3, #1
 800579c:	667b      	str	r3, [r7, #100]	; 0x64
 800579e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d3ed      	bcc.n	8005782 <lv_obj_event+0xc4>
 80057a6:	e24a      	b.n	8005c3e <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_KEY) {
 80057a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057ac:	2b0d      	cmp	r3, #13
 80057ae:	f040 8126 	bne.w	80059fe <lv_obj_event+0x340>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 80057b2:	2108      	movs	r1, #8
 80057b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80057b6:	f7ff fa96 	bl	8004ce6 <lv_obj_has_flag>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d030      	beq.n	8005822 <lv_obj_event+0x164>
            char c = *((char *)lv_event_get_param(e));
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	f7fe f9f2 	bl	8003baa <lv_event_get_param>
 80057c6:	4603      	mov	r3, r0
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80057ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057d2:	2b13      	cmp	r3, #19
 80057d4:	d003      	beq.n	80057de <lv_obj_event+0x120>
 80057d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057da:	2b11      	cmp	r3, #17
 80057dc:	d104      	bne.n	80057e8 <lv_obj_event+0x12a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 80057de:	2101      	movs	r1, #1
 80057e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80057e2:	f7ff fa49 	bl	8004c78 <lv_obj_add_state>
 80057e6:	e00b      	b.n	8005800 <lv_obj_event+0x142>
            }
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80057e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ec:	2b14      	cmp	r3, #20
 80057ee:	d003      	beq.n	80057f8 <lv_obj_event+0x13a>
 80057f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057f4:	2b12      	cmp	r3, #18
 80057f6:	d103      	bne.n	8005800 <lv_obj_event+0x142>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80057f8:	2101      	movs	r1, #1
 80057fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80057fc:	f7ff fa55 	bl	8004caa <lv_obj_clear_state>
            }

            /*With Enter LV_EVENT_RELEASED will send VALUE_CHANGE event*/
            if(c != LV_KEY_ENTER) {
 8005800:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005804:	2b0a      	cmp	r3, #10
 8005806:	f000 821a 	beq.w	8005c3e <lv_obj_event+0x580>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800580a:	2200      	movs	r2, #0
 800580c:	211c      	movs	r1, #28
 800580e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005810:	f7fe f924 	bl	8003a5c <lv_event_send>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if(res != LV_RES_OK) return;
 800581a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800581e:	2b01      	cmp	r3, #1
 8005820:	e20d      	b.n	8005c3e <lv_obj_event+0x580>
            }
        }
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8005822:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8005826:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005828:	f7ff fa5d 	bl	8004ce6 <lv_obj_has_flag>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8205 	beq.w	8005c3e <lv_obj_event+0x580>
 8005834:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005836:	f000 fc6b 	bl	8006110 <lv_obj_is_editable>
 800583a:	4603      	mov	r3, r0
 800583c:	f083 0301 	eor.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 81fb 	beq.w	8005c3e <lv_obj_event+0x580>
            /*scroll by keypad or encoder*/
            lv_anim_enable_t anim_enable = LV_ANIM_OFF;
 8005848:	2300      	movs	r3, #0
 800584a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800584e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005850:	f003 fca0 	bl	8009194 <lv_obj_get_scroll_left>
 8005854:	4603      	mov	r3, r0
 8005856:	867b      	strh	r3, [r7, #50]	; 0x32
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8005858:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800585a:	f003 fd3f 	bl	80092dc <lv_obj_get_scroll_right>
 800585e:	4603      	mov	r3, r0
 8005860:	863b      	strh	r3, [r7, #48]	; 0x30
            char c = *((char *)lv_event_get_param(e));
 8005862:	6838      	ldr	r0, [r7, #0]
 8005864:	f7fe f9a1 	bl	8003baa <lv_event_get_param>
 8005868:	4603      	mov	r3, r0
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(c == LV_KEY_DOWN) {
 8005870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005874:	2b12      	cmp	r3, #18
 8005876:	d118      	bne.n	80058aa <lv_obj_event+0x1ec>
                /*use scroll_to_x/y functions to enforce scroll limits*/
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8005878:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800587a:	f003 fbd5 	bl	8009028 <lv_obj_get_scroll_y>
 800587e:	4603      	mov	r3, r0
 8005880:	b29c      	uxth	r4, r3
 8005882:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005884:	f001 fefb 	bl	800767e <lv_obj_get_height>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	da00      	bge.n	8005890 <lv_obj_event+0x1d2>
 800588e:	3303      	adds	r3, #3
 8005890:	109b      	asrs	r3, r3, #2
 8005892:	b21b      	sxth	r3, r3
 8005894:	b29b      	uxth	r3, r3
 8005896:	4423      	add	r3, r4
 8005898:	b29b      	uxth	r3, r3
 800589a:	b21b      	sxth	r3, r3
 800589c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80058a0:	4619      	mov	r1, r3
 80058a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80058a4:	f003 ffe8 	bl	8009878 <lv_obj_scroll_to_y>
 80058a8:	e1c9      	b.n	8005c3e <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_UP) {
 80058aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058ae:	2b11      	cmp	r3, #17
 80058b0:	d118      	bne.n	80058e4 <lv_obj_event+0x226>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 80058b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80058b4:	f003 fbb8 	bl	8009028 <lv_obj_get_scroll_y>
 80058b8:	4603      	mov	r3, r0
 80058ba:	b29c      	uxth	r4, r3
 80058bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80058be:	f001 fede 	bl	800767e <lv_obj_get_height>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da00      	bge.n	80058ca <lv_obj_event+0x20c>
 80058c8:	3303      	adds	r3, #3
 80058ca:	109b      	asrs	r3, r3, #2
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	1ae3      	subs	r3, r4, r3
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	b21b      	sxth	r3, r3
 80058d6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80058da:	4619      	mov	r1, r3
 80058dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80058de:	f003 ffcb 	bl	8009878 <lv_obj_scroll_to_y>
 80058e2:	e1ac      	b.n	8005c3e <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_RIGHT) {
 80058e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058e8:	2b13      	cmp	r3, #19
 80058ea:	d141      	bne.n	8005970 <lv_obj_event+0x2b2>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 80058ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80058ee:	f003 fb41 	bl	8008f74 <lv_obj_get_scroll_dir>
 80058f2:	4603      	mov	r3, r0
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <lv_obj_event+0x24e>
 80058fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005900:	2b00      	cmp	r3, #0
 8005902:	dc1c      	bgt.n	800593e <lv_obj_event+0x280>
 8005904:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005908:	2b00      	cmp	r3, #0
 800590a:	dc18      	bgt.n	800593e <lv_obj_event+0x280>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 800590c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800590e:	f003 fb8b 	bl	8009028 <lv_obj_get_scroll_y>
 8005912:	4603      	mov	r3, r0
 8005914:	b29c      	uxth	r4, r3
 8005916:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005918:	f001 feb1 	bl	800767e <lv_obj_get_height>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	da00      	bge.n	8005924 <lv_obj_event+0x266>
 8005922:	3303      	adds	r3, #3
 8005924:	109b      	asrs	r3, r3, #2
 8005926:	b21b      	sxth	r3, r3
 8005928:	b29b      	uxth	r3, r3
 800592a:	4423      	add	r3, r4
 800592c:	b29b      	uxth	r3, r3
 800592e:	b21b      	sxth	r3, r3
 8005930:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005934:	4619      	mov	r1, r3
 8005936:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005938:	f003 ff9e 	bl	8009878 <lv_obj_scroll_to_y>
 800593c:	e17f      	b.n	8005c3e <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 800593e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005940:	f003 fb5a 	bl	8008ff8 <lv_obj_get_scroll_x>
 8005944:	4603      	mov	r3, r0
 8005946:	b29c      	uxth	r4, r3
 8005948:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800594a:	f001 fe8a 	bl	8007662 <lv_obj_get_width>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	da00      	bge.n	8005956 <lv_obj_event+0x298>
 8005954:	3303      	adds	r3, #3
 8005956:	109b      	asrs	r3, r3, #2
 8005958:	b21b      	sxth	r3, r3
 800595a:	b29b      	uxth	r3, r3
 800595c:	4423      	add	r3, r4
 800595e:	b29b      	uxth	r3, r3
 8005960:	b21b      	sxth	r3, r3
 8005962:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005966:	4619      	mov	r1, r3
 8005968:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800596a:	f003 ff61 	bl	8009830 <lv_obj_scroll_to_x>
 800596e:	e166      	b.n	8005c3e <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_LEFT) {
 8005970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005974:	2b14      	cmp	r3, #20
 8005976:	f040 8162 	bne.w	8005c3e <lv_obj_event+0x580>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 800597a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800597c:	f003 fafa 	bl	8008f74 <lv_obj_get_scroll_dir>
 8005980:	4603      	mov	r3, r0
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <lv_obj_event+0x2dc>
 800598a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800598e:	2b00      	cmp	r3, #0
 8005990:	dc1c      	bgt.n	80059cc <lv_obj_event+0x30e>
 8005992:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005996:	2b00      	cmp	r3, #0
 8005998:	dc18      	bgt.n	80059cc <lv_obj_event+0x30e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 800599a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800599c:	f003 fb44 	bl	8009028 <lv_obj_get_scroll_y>
 80059a0:	4603      	mov	r3, r0
 80059a2:	b29c      	uxth	r4, r3
 80059a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80059a6:	f001 fe6a 	bl	800767e <lv_obj_get_height>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	da00      	bge.n	80059b2 <lv_obj_event+0x2f4>
 80059b0:	3303      	adds	r3, #3
 80059b2:	109b      	asrs	r3, r3, #2
 80059b4:	b21b      	sxth	r3, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	1ae3      	subs	r3, r4, r3
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	b21b      	sxth	r3, r3
 80059be:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80059c2:	4619      	mov	r1, r3
 80059c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80059c6:	f003 ff57 	bl	8009878 <lv_obj_scroll_to_y>
 80059ca:	e138      	b.n	8005c3e <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 80059cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80059ce:	f003 fb13 	bl	8008ff8 <lv_obj_get_scroll_x>
 80059d2:	4603      	mov	r3, r0
 80059d4:	b29c      	uxth	r4, r3
 80059d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80059d8:	f001 fe43 	bl	8007662 <lv_obj_get_width>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da00      	bge.n	80059e4 <lv_obj_event+0x326>
 80059e2:	3303      	adds	r3, #3
 80059e4:	109b      	asrs	r3, r3, #2
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	1ae3      	subs	r3, r4, r3
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80059f4:	4619      	mov	r1, r3
 80059f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80059f8:	f003 ff1a 	bl	8009830 <lv_obj_scroll_to_x>
 80059fc:	e11f      	b.n	8005c3e <lv_obj_event+0x580>
            }
        }
    }
    else if(code == LV_EVENT_FOCUSED) {
 80059fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a02:	2b0e      	cmp	r3, #14
 8005a04:	d155      	bne.n	8005ab2 <lv_obj_event+0x3f4>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8005a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a0a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a0c:	f7ff f96b 	bl	8004ce6 <lv_obj_has_flag>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <lv_obj_event+0x360>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8005a16:	2101      	movs	r1, #1
 8005a18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a1a:	f003 ff51 	bl	80098c0 <lv_obj_scroll_to_view_recursive>
        }

        bool editing = false;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8005a24:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a26:	f7ff f993 	bl	8004d50 <lv_obj_get_group>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe fc37 	bl	80042a0 <lv_group_get_editing>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_state_t state = LV_STATE_FOCUSED;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        /* Use the indev for then indev handler.
         * But if the obj was focused manually it returns NULL so try to
         * use the indev from the event*/
        lv_indev_t * indev = lv_indev_get_act();
 8005a3e:	f7fe fd8d 	bl	800455c <lv_indev_get_act>
 8005a42:	65f8      	str	r0, [r7, #92]	; 0x5c
        if(indev == NULL) indev = lv_event_get_indev(e);
 8005a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <lv_obj_event+0x394>
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f7fe f8e0 	bl	8003c10 <lv_event_get_indev>
 8005a50:	65f8      	str	r0, [r7, #92]	; 0x5c

        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8005a52:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005a54:	f7fe fd8e 	bl	8004574 <lv_indev_get_type>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8005a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d003      	beq.n	8005a6e <lv_obj_event+0x3b0>
 8005a66:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d105      	bne.n	8005a7a <lv_obj_event+0x3bc>
 8005a6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a72:	f043 0304 	orr.w	r3, r3, #4
 8005a76:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        if(editing) {
 8005a7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <lv_obj_event+0x3de>
            state |= LV_STATE_EDITED;
 8005a82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a86:	f043 0308 	orr.w	r3, r3, #8
 8005a8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_obj_add_state(obj, state);
 8005a8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a92:	4619      	mov	r1, r3
 8005a94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a96:	f7ff f8ef 	bl	8004c78 <lv_obj_add_state>
 8005a9a:	e0d0      	b.n	8005c3e <lv_obj_event+0x580>
        }
        else {
            lv_obj_add_state(obj, state);
 8005a9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005aa4:	f7ff f8e8 	bl	8004c78 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8005aa8:	2108      	movs	r1, #8
 8005aaa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005aac:	f7ff f8fd 	bl	8004caa <lv_obj_clear_state>
 8005ab0:	e0c5      	b.n	8005c3e <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8005ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab6:	2b09      	cmp	r3, #9
 8005ab8:	d104      	bne.n	8005ac4 <lv_obj_event+0x406>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8005aba:	2140      	movs	r1, #64	; 0x40
 8005abc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005abe:	f7ff f8db 	bl	8004c78 <lv_obj_add_state>
 8005ac2:	e0bc      	b.n	8005c3e <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SCROLL_END) {
 8005ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ac8:	2b0a      	cmp	r3, #10
 8005aca:	d11f      	bne.n	8005b0c <lv_obj_event+0x44e>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005ad0:	f7ff f8eb 	bl	8004caa <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8005ad4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005ad6:	f003 fa37 	bl	8008f48 <lv_obj_get_scrollbar_mode>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	f040 80ae 	bne.w	8005c3e <lv_obj_event+0x580>
            lv_area_t hor_area, ver_area;
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005ae2:	f107 020c 	add.w	r2, r7, #12
 8005ae6:	f107 0314 	add.w	r3, r7, #20
 8005aea:	4619      	mov	r1, r3
 8005aec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005aee:	f003 ff5b 	bl	80099a8 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8005af2:	f107 0314 	add.w	r3, r7, #20
 8005af6:	4619      	mov	r1, r3
 8005af8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005afa:	f002 fb47 	bl	800818c <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8005afe:	f107 030c 	add.w	r3, r7, #12
 8005b02:	4619      	mov	r1, r3
 8005b04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b06:	f002 fb41 	bl	800818c <lv_obj_invalidate_area>
 8005b0a:	e098      	b.n	8005c3e <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_DEFOCUSED) {
 8005b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b10:	2b0f      	cmp	r3, #15
 8005b12:	d104      	bne.n	8005b1e <lv_obj_event+0x460>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8005b14:	210e      	movs	r1, #14
 8005b16:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b18:	f7ff f8c7 	bl	8004caa <lv_obj_clear_state>
 8005b1c:	e08f      	b.n	8005c3e <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8005b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b22:	2b29      	cmp	r3, #41	; 0x29
 8005b24:	d132      	bne.n	8005b8c <lv_obj_event+0x4ce>
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8005b26:	2100      	movs	r1, #0
 8005b28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b2a:	f7fe fe89 	bl	8004840 <lv_obj_get_style_align>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8005b34:	2100      	movs	r1, #0
 8005b36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b38:	f7fe ffcb 	bl	8004ad2 <lv_obj_get_style_layout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        if(layout || align) {
 8005b42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <lv_obj_event+0x494>
 8005b4a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <lv_obj_event+0x49a>
            lv_obj_mark_layout_as_dirty(obj);
 8005b52:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b54:	f001 fd22 	bl	800759c <lv_obj_mark_layout_as_dirty>
        }

        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005b58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b5a:	f006 fcba 	bl	800c4d2 <lv_obj_get_child_cnt>
 8005b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        for(i = 0; i < child_cnt; i++) {
 8005b60:	2300      	movs	r3, #0
 8005b62:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b64:	e00d      	b.n	8005b82 <lv_obj_event+0x4c4>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	63bb      	str	r3, [r7, #56]	; 0x38
            lv_obj_mark_layout_as_dirty(child);
 8005b76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b78:	f001 fd10 	bl	800759c <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8005b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b7e:	3301      	adds	r3, #1
 8005b80:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3ed      	bcc.n	8005b66 <lv_obj_event+0x4a8>
 8005b8a:	e058      	b.n	8005c3e <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8005b8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b90:	2b22      	cmp	r3, #34	; 0x22
 8005b92:	d133      	bne.n	8005bfc <lv_obj_event+0x53e>
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8005b94:	2100      	movs	r1, #0
 8005b96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b98:	f7fe fe2e 	bl	80047f8 <lv_obj_get_style_width>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005ba6:	f7fe fe39 	bl	800481c <lv_obj_get_style_height>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005bb4:	f7fe fe44 	bl	8004840 <lv_obj_get_style_align>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005bc2:	f7fe ff86 	bl	8004ad2 <lv_obj_get_style_layout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8005bcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10f      	bne.n	8005bf4 <lv_obj_event+0x536>
 8005bd4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <lv_obj_event+0x536>
 8005bdc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005be0:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d005      	beq.n	8005bf4 <lv_obj_event+0x536>
 8005be8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005bec:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d124      	bne.n	8005c3e <lv_obj_event+0x580>
            lv_obj_mark_layout_as_dirty(obj);
 8005bf4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005bf6:	f001 fcd1 	bl	800759c <lv_obj_mark_layout_as_dirty>
 8005bfa:	e020      	b.n	8005c3e <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8005bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c00:	2b13      	cmp	r3, #19
 8005c02:	d10d      	bne.n	8005c20 <lv_obj_event+0x562>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8005c04:	2100      	movs	r1, #0
 8005c06:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005c08:	f000 ff75 	bl	8006af6 <lv_obj_calculate_ext_draw_size>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_event_set_ext_draw_size(e, d);
 8005c12:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8005c16:	4619      	mov	r1, r3
 8005c18:	6838      	ldr	r0, [r7, #0]
 8005c1a:	f7fe f86d 	bl	8003cf8 <lv_event_set_ext_draw_size>
 8005c1e:	e00e      	b.n	8005c3e <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8005c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c24:	2b15      	cmp	r3, #21
 8005c26:	d007      	beq.n	8005c38 <lv_obj_event+0x57a>
 8005c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c2c:	2b18      	cmp	r3, #24
 8005c2e:	d003      	beq.n	8005c38 <lv_obj_event+0x57a>
 8005c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c34:	2b12      	cmp	r3, #18
 8005c36:	d102      	bne.n	8005c3e <lv_obj_event+0x580>
        lv_obj_draw(e);
 8005c38:	6838      	ldr	r0, [r7, #0]
 8005c3a:	f7ff f9b1 	bl	8004fa0 <lv_obj_draw>
    }
}
 8005c3e:	376c      	adds	r7, #108	; 0x6c
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd90      	pop	{r4, r7, pc}

08005c44 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b094      	sub	sp, #80	; 0x50
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
    if(obj->state == new_state) return;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8c1b      	ldrh	r3, [r3, #32]
 8005c54:	887a      	ldrh	r2, [r7, #2]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	f000 815a 	beq.w	8005f10 <lv_obj_set_state+0x2cc>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8c1b      	ldrh	r3, [r3, #32]
 8005c60:	86fb      	strh	r3, [r7, #54]	; 0x36
    obj->state = new_state;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	887a      	ldrh	r2, [r7, #2]
 8005c66:	841a      	strh	r2, [r3, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8005c68:	887a      	ldrh	r2, [r7, #2]
 8005c6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f005 fcfa 	bl	800b668 <_lv_obj_style_state_compare>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8005c7a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 8148 	beq.w	8005f14 <lv_obj_set_state+0x2d0>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8005c84:	f44f 7020 	mov.w	r0, #640	; 0x280
 8005c88:	f01a fa12 	bl	80200b0 <lv_mem_buf_get>
 8005c8c:	6338      	str	r0, [r7, #48]	; 0x30
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8005c8e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c94:	f01a fdb6 	bl	8020804 <lv_memset_00>
    uint32_t tsi = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca0:	e0e0      	b.n	8005e64 <lv_obj_set_state+0x220>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4413      	add	r3, r2
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f005 fec8 	bl	800ba54 <lv_obj_style_get_selector_state>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f005 fec7 	bl	800ba6c <lv_obj_style_get_selector_part>
 8005cde:	6278      	str	r0, [r7, #36]	; 0x24
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8005ce0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005ce2:	887b      	ldrh	r3, [r7, #2]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f040 80b3 	bne.w	8005e54 <lv_obj_set_state+0x210>
        if(obj_style->is_trans) continue;
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	79db      	ldrb	r3, [r3, #7]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 80ad 	bne.w	8005e58 <lv_obj_set_state+0x214>

        lv_style_value_t v;
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f107 020c 	add.w	r2, r7, #12
 8005d06:	2166      	movs	r1, #102	; 0x66
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe fca2 	bl	8004652 <lv_style_get_prop_inlined>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f040 80a3 	bne.w	8005e5c <lv_obj_set_state+0x218>
        const lv_style_transition_dsc_t * tr = v.ptr;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	623b      	str	r3, [r7, #32]

        /*Add the props to the set if not added yet or added but with smaller weight*/
        uint32_t j;
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1e:	e08c      	b.n	8005e3a <lv_obj_set_state+0x1f6>
            uint32_t t;
            for(t = 0; t < tsi; t++) {
 8005d20:	2300      	movs	r3, #0
 8005d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d24:	e02e      	b.n	8005d84 <lv_obj_set_state+0x140>
                lv_style_selector_t selector = ts[t].selector;
 8005d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	461a      	mov	r2, r3
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	4413      	add	r3, r2
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	61fb      	str	r3, [r7, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8005d3a:	69f8      	ldr	r0, [r7, #28]
 8005d3c:	f005 fe8a 	bl	800ba54 <lv_obj_style_get_selector_state>
 8005d40:	4603      	mov	r3, r0
 8005d42:	837b      	strh	r3, [r7, #26]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8005d44:	69f8      	ldr	r0, [r7, #28]
 8005d46:	f005 fe91 	bl	800ba6c <lv_obj_style_get_selector_part>
 8005d4a:	6178      	str	r0, [r7, #20]
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8005d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	461a      	mov	r2, r3
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	4413      	add	r3, r2
 8005d5c:	891a      	ldrh	r2, [r3, #8]
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	440b      	add	r3, r1
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d107      	bne.n	8005d7e <lv_obj_set_state+0x13a>
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d103      	bne.n	8005d7e <lv_obj_set_state+0x13a>
 8005d76:	8b7a      	ldrh	r2, [r7, #26]
 8005d78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d207      	bcs.n	8005d8e <lv_obj_set_state+0x14a>
            for(t = 0; t < tsi; t++) {
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	3301      	adds	r3, #1
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d3cc      	bcc.n	8005d26 <lv_obj_set_state+0xe2>
 8005d8c:	e000      	b.n	8005d90 <lv_obj_set_state+0x14c>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8005d8e:	bf00      	nop
            }

            /*If not found  add it*/
            if(t == tsi) {
 8005d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d14d      	bne.n	8005e34 <lv_obj_set_state+0x1f0>
                ts[tsi].time = tr->time;
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	68d9      	ldr	r1, [r3, #12]
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	461a      	mov	r2, r3
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	4413      	add	r3, r2
 8005dac:	b28a      	uxth	r2, r1
 8005dae:	801a      	strh	r2, [r3, #0]
                ts[tsi].delay = tr->delay;
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	6919      	ldr	r1, [r3, #16]
 8005db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	4413      	add	r3, r2
 8005dc4:	b28a      	uxth	r2, r1
 8005dc6:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8005dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	4413      	add	r3, r2
 8005dd8:	6a3a      	ldr	r2, [r7, #32]
 8005dda:	6892      	ldr	r2, [r2, #8]
 8005ddc:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	18d1      	adds	r1, r2, r3
 8005de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	461a      	mov	r2, r3
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	4413      	add	r3, r2
 8005df8:	880a      	ldrh	r2, [r1, #0]
 8005dfa:	811a      	strh	r2, [r3, #8]
#if LV_USE_USER_DATA
                ts[tsi].user_data = tr->user_data;
 8005dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	461a      	mov	r2, r3
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	4413      	add	r3, r2
 8005e0c:	6a3a      	ldr	r2, [r7, #32]
 8005e0e:	6852      	ldr	r2, [r2, #4]
 8005e10:	611a      	str	r2, [r3, #16]
#endif
                ts[tsi].selector = obj_style->selector;
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8005e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	461a      	mov	r2, r3
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	4413      	add	r3, r2
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
                tsi++;
 8005e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e30:	3301      	adds	r3, #1
 8005e32:	647b      	str	r3, [r7, #68]	; 0x44
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	3301      	adds	r3, #1
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <lv_obj_set_state+0x21a>
 8005e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e4c:	2b1f      	cmp	r3, #31
 8005e4e:	f67f af67 	bls.w	8005d20 <lv_obj_set_state+0xdc>
 8005e52:	e004      	b.n	8005e5e <lv_obj_set_state+0x21a>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8005e54:	bf00      	nop
 8005e56:	e002      	b.n	8005e5e <lv_obj_set_state+0x21a>
        if(obj_style->is_trans) continue;
 8005e58:	bf00      	nop
 8005e5a:	e000      	b.n	8005e5e <lv_obj_set_state+0x21a>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8005e5c:	bf00      	nop
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e60:	3301      	adds	r3, #1
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005e68:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d203      	bcs.n	8005e7e <lv_obj_set_state+0x23a>
 8005e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e78:	2b1f      	cmp	r3, #31
 8005e7a:	f67f af12 	bls.w	8005ca2 <lv_obj_set_state+0x5e>
            }
        }
    }

    for(i = 0; i < tsi; i++) {
 8005e7e:	2300      	movs	r3, #0
 8005e80:	643b      	str	r3, [r7, #64]	; 0x40
 8005e82:	e01f      	b.n	8005ec4 <lv_obj_set_state+0x280>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8005e84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	4413      	add	r3, r2
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f005 fde8 	bl	800ba6c <lv_obj_style_get_selector_part>
 8005e9c:	6138      	str	r0, [r7, #16]
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8005e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	4413      	add	r3, r2
 8005eae:	8879      	ldrh	r1, [r7, #2]
 8005eb0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	6939      	ldr	r1, [r7, #16]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f005 fa8f 	bl	800b3dc <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d3db      	bcc.n	8005e84 <lv_obj_set_state+0x240>
    }

    lv_mem_buf_release(ts);
 8005ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ece:	f01a f99b 	bl	8020208 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8005ed2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d103      	bne.n	8005ee2 <lv_obj_set_state+0x29e>
        lv_obj_invalidate(obj);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f002 f98b 	bl	80081f6 <lv_obj_invalidate>
 8005ee0:	e019      	b.n	8005f16 <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8005ee2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d107      	bne.n	8005efa <lv_obj_set_state+0x2b6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8005eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eee:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f005 f91e 	bl	800b134 <lv_obj_refresh_style>
 8005ef8:	e00d      	b.n	8005f16 <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 8005efa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d109      	bne.n	8005f16 <lv_obj_set_state+0x2d2>
        lv_obj_invalidate(obj);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f002 f977 	bl	80081f6 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fea2 	bl	8006c52 <lv_obj_refresh_ext_draw_size>
 8005f0e:	e002      	b.n	8005f16 <lv_obj_set_state+0x2d2>
    if(obj->state == new_state) return;
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <lv_obj_set_state+0x2d2>
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8005f14:	bf00      	nop
    }
}
 8005f16:	3748      	adds	r7, #72	; 0x48
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <lv_obj_class_create_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
{
 8005f1c:	b590      	push	{r4, r7, lr}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
    LV_TRACE_OBJ_CREATE("Creating object with %p class on %p parent", (void *)class_p, (void *)parent);
    uint32_t s = get_instance_size(class_p);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f96e 	bl	8006208 <get_instance_size>
 8005f2c:	6178      	str	r0, [r7, #20]
    lv_obj_t * obj = lv_mem_alloc(s);
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f01a f834 	bl	801ff9c <lv_mem_alloc>
 8005f34:	6138      	str	r0, [r7, #16]
    if(obj == NULL) return NULL;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <lv_obj_class_create_obj+0x24>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e09e      	b.n	800607e <lv_obj_class_create_obj+0x162>
    lv_memset_00(obj, s);
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	6938      	ldr	r0, [r7, #16]
 8005f44:	f01a fc5e 	bl	8020804 <lv_memset_00>
    obj->class_p = class_p;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	601a      	str	r2, [r3, #0]
    obj->parent = parent;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	605a      	str	r2, [r3, #4]

    /*Create a screen*/
    if(parent == NULL) {
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d153      	bne.n	8006002 <lv_obj_class_create_obj+0xe6>
        LV_TRACE_OBJ_CREATE("creating a screen");
        lv_disp_t * disp = lv_disp_get_default();
 8005f5a:	f018 f83f 	bl	801dfdc <lv_disp_get_default>
 8005f5e:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d104      	bne.n	8005f70 <lv_obj_class_create_obj+0x54>
            LV_LOG_WARN("No display created yet. No place to assign the new screen");
            lv_mem_free(obj);
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f01a f848 	bl	801fffc <lv_mem_free>
            return NULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e086      	b.n	800607e <lv_obj_class_create_obj+0x162>
        }

        if(disp->screens == NULL) {
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <lv_obj_class_create_obj+0x78>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8005f78:	2004      	movs	r0, #4
 8005f7a:	f01a f80f 	bl	801ff9c <lv_mem_alloc>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	60da      	str	r2, [r3, #12]
            disp->screens[0] = obj;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	601a      	str	r2, [r3, #0]
            disp->screen_cnt = 1;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	625a      	str	r2, [r3, #36]	; 0x24
 8005f92:	e01b      	b.n	8005fcc <lv_obj_class_create_obj+0xb0>
        }
        else {
            disp->screen_cnt++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	f01a f854 	bl	8020058 <lv_mem_realloc>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	60da      	str	r2, [r3, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fbe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005fc2:	440b      	add	r3, r1
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	601a      	str	r2, [r3, #0]
        }

        /*Set coordinates to full screen size*/
        obj->coords.x1 = 0;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	829a      	strh	r2, [r3, #20]
        obj->coords.y1 = 0;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	82da      	strh	r2, [r3, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8005fd8:	2000      	movs	r0, #0
 8005fda:	f018 f80b 	bl	801dff4 <lv_disp_get_hor_res>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	b21a      	sxth	r2, r3
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	831a      	strh	r2, [r3, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8005fec:	2000      	movs	r0, #0
 8005fee:	f018 f827 	bl	801e040 <lv_disp_get_ver_res>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	b21a      	sxth	r2, r3
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	835a      	strh	r2, [r3, #26]
 8006000:	e03c      	b.n	800607c <lv_obj_class_create_obj+0x160>
    }
    /*Create a normal object*/
    else {
        LV_TRACE_OBJ_CREATE("creating normal object");
        LV_ASSERT_OBJ(parent, MY_CLASS);
        if(parent->spec_attr == NULL) {
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <lv_obj_class_create_obj+0xf4>
            lv_obj_allocate_spec_attr(parent);
 800600a:	6838      	ldr	r0, [r7, #0]
 800600c:	f7fe feb4 	bl	8004d78 <lv_obj_allocate_spec_attr>
        }

        if(parent->spec_attr->children == NULL) {
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d110      	bne.n	800603c <lv_obj_class_create_obj+0x120>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689c      	ldr	r4, [r3, #8]
 800601e:	2004      	movs	r0, #4
 8006020:	f019 ffbc 	bl	801ff9c <lv_mem_alloc>
 8006024:	4603      	mov	r3, r0
 8006026:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[0] = obj;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	601a      	str	r2, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2201      	movs	r2, #1
 8006038:	605a      	str	r2, [r3, #4]
 800603a:	e01f      	b.n	800607c <lv_obj_class_create_obj+0x160>
        }
        else {
            parent->spec_attr->child_cnt++;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	3201      	adds	r2, #1
 8006044:	605a      	str	r2, [r3, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	681a      	ldr	r2, [r3, #0]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	0099      	lsls	r1, r3, #2
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689c      	ldr	r4, [r3, #8]
 8006058:	4610      	mov	r0, r2
 800605a:	f019 fffd 	bl	8020058 <lv_mem_realloc>
 800605e:	4603      	mov	r3, r0
 8006060:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	6859      	ldr	r1, [r3, #4]
 800606e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006072:	440b      	add	r3, r1
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	601a      	str	r2, [r3, #0]
        }
    }

    return obj;
 800607c:	693b      	ldr	r3, [r7, #16]
}
 800607e:	4618      	mov	r0, r3
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}

08006086 <lv_obj_class_init_obj>:

void lv_obj_class_init_obj(lv_obj_t * obj)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
    lv_obj_mark_layout_as_dirty(obj);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fa84 	bl	800759c <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8006094:	2000      	movs	r0, #0
 8006096:	f005 f917 	bl	800b2c8 <lv_obj_enable_style_refresh>

    lv_theme_apply(obj);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f008 f90a 	bl	800e2b4 <lv_theme_apply>
    lv_obj_construct(obj);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f889 	bl	80061b8 <lv_obj_construct>

    lv_obj_enable_style_refresh(true);
 80060a6:	2001      	movs	r0, #1
 80060a8:	f005 f90e 	bl	800b2c8 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80060ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b0:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f005 f83d 	bl	800b134 <lv_obj_refresh_style>

    lv_obj_refresh_self_size(obj);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fbce 	bl	800785c <lv_obj_refresh_self_size>

    lv_group_t * def_group = lv_group_get_default();
 80060c0:	f7fd ffbe 	bl	8004040 <lv_group_get_default>
 80060c4:	60f8      	str	r0, [r7, #12]
    if(def_group && lv_obj_is_group_def(obj)) {
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d009      	beq.n	80060e0 <lv_obj_class_init_obj+0x5a>
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f849 	bl	8006164 <lv_obj_is_group_def>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <lv_obj_class_init_obj+0x5a>
        lv_group_add_obj(def_group, obj);
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7fd ffbc 	bl	8004058 <lv_group_add_obj>
    }

    lv_obj_t * parent = lv_obj_get_parent(obj);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f006 f9e5 	bl	800c4b0 <lv_obj_get_parent>
 80060e6:	60b8      	str	r0, [r7, #8]
    if(parent) {
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <lv_obj_class_init_obj+0x82>
        /*Call the ancestor's event handler to the parent to notify it about the new child.
         *Also triggers layout update*/
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	2122      	movs	r1, #34	; 0x22
 80060f2:	68b8      	ldr	r0, [r7, #8]
 80060f4:	f7fd fcb2 	bl	8003a5c <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	2123      	movs	r1, #35	; 0x23
 80060fc:	68b8      	ldr	r0, [r7, #8]
 80060fe:	f7fd fcad 	bl	8003a5c <lv_event_send>

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(obj);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f002 f877 	bl	80081f6 <lv_obj_invalidate>
    }
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <lv_obj_is_editable>:
        _lv_obj_destruct(obj);
    }
}

bool lv_obj_is_editable(lv_obj_t * obj)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]

    /*Find a base in which editable is set*/
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 800611e:	e002      	b.n	8006126 <lv_obj_is_editable+0x16>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <lv_obj_is_editable+0x2a>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	7e1b      	ldrb	r3, [r3, #24]
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0f2      	beq.n	8006120 <lv_obj_is_editable+0x10>

    if(class_p == NULL) return false;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <lv_obj_is_editable+0x34>
 8006140:	2300      	movs	r3, #0
 8006142:	e009      	b.n	8006158 <lv_obj_is_editable+0x48>

    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	7e1b      	ldrb	r3, [r3, #24]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <lv_obj_is_group_def>:

bool lv_obj_is_group_def(lv_obj_t * obj)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]

    /*Find a base in which group_def is set*/
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 8006172:	e002      	b.n	800617a <lv_obj_is_group_def+0x16>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d006      	beq.n	800618e <lv_obj_is_group_def+0x2a>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	7e1b      	ldrb	r3, [r3, #24]
 8006184:	f003 030c 	and.w	r3, r3, #12
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f2      	beq.n	8006174 <lv_obj_is_group_def+0x10>

    if(class_p == NULL) return false;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <lv_obj_is_group_def+0x34>
 8006194:	2300      	movs	r3, #0
 8006196:	e009      	b.n	80061ac <lv_obj_is_group_def+0x48>

    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	7e1b      	ldrb	r3, [r3, #24]
 800619c:	f003 030c 	and.w	r3, r3, #12
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	bf0c      	ite	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	2300      	movne	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * original_class_p = obj->class_p;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60fb      	str	r3, [r7, #12]

    if(obj->class_p->base_class) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <lv_obj_construct+0x28>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	601a      	str	r2, [r3, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ffec 	bl	80061b8 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <lv_obj_construct+0x48>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <get_instance_size>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60fb      	str	r3, [r7, #12]
    while(base && base->instance_size == 0) base = base->base_class;
 8006214:	e002      	b.n	800621c <get_instance_size+0x14>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <get_instance_size+0x26>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <get_instance_size+0x48>)
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0f3      	beq.n	8006216 <get_instance_size+0xe>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <get_instance_size+0x30>
 8006234:	2300      	movs	r3, #0
 8006236:	e004      	b.n	8006242 <get_instance_size+0x3a>

    return base->instance_size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f3c3 130f 	ubfx	r3, r3, #4, #16
 8006240:	b29b      	uxth	r3, r3
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	000ffff0 	.word	0x000ffff0

08006254 <lv_obj_get_style_transform_width>:
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800625e:	2268      	movs	r2, #104	; 0x68
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f005 f840 	bl	800b2e8 <lv_obj_get_style_prop>
 8006268:	4603      	mov	r3, r0
 800626a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	b21b      	sxth	r3, r3
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <lv_obj_get_style_transform_height>:
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8006282:	2269      	movs	r2, #105	; 0x69
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f005 f82e 	bl	800b2e8 <lv_obj_get_style_prop>
 800628c:	4603      	mov	r3, r0
 800628e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	b21b      	sxth	r3, r3
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <lv_obj_get_style_bg_color_filtered>:
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 80062a6:	2220      	movs	r2, #32
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f005 f81c 	bl	800b2e8 <lv_obj_get_style_prop>
 80062b0:	4603      	mov	r3, r0
 80062b2:	461a      	mov	r2, r3
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f005 f9aa 	bl	800b610 <_lv_obj_style_apply_color_filter>
 80062bc:	4603      	mov	r3, r0
 80062be:	60fb      	str	r3, [r7, #12]
    return v.color;
 80062c0:	7b3b      	ldrb	r3, [r7, #12]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <lv_obj_get_style_bg_opa>:
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80062d4:	2221      	movs	r2, #33	; 0x21
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f005 f805 	bl	800b2e8 <lv_obj_get_style_prop>
 80062de:	4603      	mov	r3, r0
 80062e0:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	b2db      	uxtb	r3, r3
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <lv_obj_get_style_bg_grad_color_filtered>:
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 80062f8:	2222      	movs	r2, #34	; 0x22
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f004 fff3 	bl	800b2e8 <lv_obj_get_style_prop>
 8006302:	4603      	mov	r3, r0
 8006304:	461a      	mov	r2, r3
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f005 f981 	bl	800b610 <_lv_obj_style_apply_color_filter>
 800630e:	4603      	mov	r3, r0
 8006310:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006312:	7b3b      	ldrb	r3, [r7, #12]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <lv_obj_get_style_bg_grad_dir>:
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8006326:	2223      	movs	r2, #35	; 0x23
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f004 ffdc 	bl	800b2e8 <lv_obj_get_style_prop>
 8006330:	4603      	mov	r3, r0
 8006332:	60fb      	str	r3, [r7, #12]
    return (lv_grad_dir_t)v.num;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	b2db      	uxtb	r3, r3
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <lv_obj_get_style_bg_main_stop>:
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 800634a:	2224      	movs	r2, #36	; 0x24
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f004 ffca 	bl	800b2e8 <lv_obj_get_style_prop>
 8006354:	4603      	mov	r3, r0
 8006356:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	b21b      	sxth	r3, r3
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <lv_obj_get_style_bg_grad_stop>:
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 800636e:	2225      	movs	r2, #37	; 0x25
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f004 ffb8 	bl	800b2e8 <lv_obj_get_style_prop>
 8006378:	4603      	mov	r3, r0
 800637a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	b21b      	sxth	r3, r3
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <lv_obj_get_style_bg_grad>:
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 8006392:	2226      	movs	r2, #38	; 0x26
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f004 ffa6 	bl	800b2e8 <lv_obj_get_style_prop>
 800639c:	4603      	mov	r3, r0
 800639e:	60fb      	str	r3, [r7, #12]
    return (const lv_grad_dsc_t *)v.ptr;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <lv_obj_get_style_bg_dither_mode>:
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 80063b4:	2227      	movs	r2, #39	; 0x27
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f004 ff95 	bl	800b2e8 <lv_obj_get_style_prop>
 80063be:	4603      	mov	r3, r0
 80063c0:	60fb      	str	r3, [r7, #12]
    return (lv_dither_mode_t)v.num;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	b2db      	uxtb	r3, r3
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <lv_obj_get_style_bg_img_src>:
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 80063d8:	2228      	movs	r2, #40	; 0x28
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f004 ff83 	bl	800b2e8 <lv_obj_get_style_prop>
 80063e2:	4603      	mov	r3, r0
 80063e4:	60fb      	str	r3, [r7, #12]
    return (const void *)v.ptr;
 80063e6:	68fb      	ldr	r3, [r7, #12]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <lv_obj_get_style_bg_img_opa>:
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 80063fa:	2229      	movs	r2, #41	; 0x29
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f004 ff72 	bl	800b2e8 <lv_obj_get_style_prop>
 8006404:	4603      	mov	r3, r0
 8006406:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	b2db      	uxtb	r3, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <lv_obj_get_style_bg_img_recolor_filtered>:
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 800641e:	222a      	movs	r2, #42	; 0x2a
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f004 ff60 	bl	800b2e8 <lv_obj_get_style_prop>
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f005 f8ee 	bl	800b610 <_lv_obj_style_apply_color_filter>
 8006434:	4603      	mov	r3, r0
 8006436:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006438:	7b3b      	ldrb	r3, [r7, #12]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <lv_obj_get_style_bg_img_recolor_opa>:
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 800644c:	222b      	movs	r2, #43	; 0x2b
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f004 ff49 	bl	800b2e8 <lv_obj_get_style_prop>
 8006456:	4603      	mov	r3, r0
 8006458:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	b2db      	uxtb	r3, r3
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <lv_obj_get_style_bg_img_tiled>:
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 8006470:	222c      	movs	r2, #44	; 0x2c
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f004 ff37 	bl	800b2e8 <lv_obj_get_style_prop>
 800647a:	4603      	mov	r3, r0
 800647c:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <lv_obj_get_style_border_color_filtered>:
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 800649c:	2230      	movs	r2, #48	; 0x30
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f004 ff21 	bl	800b2e8 <lv_obj_get_style_prop>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f005 f8af 	bl	800b610 <_lv_obj_style_apply_color_filter>
 80064b2:	4603      	mov	r3, r0
 80064b4:	60fb      	str	r3, [r7, #12]
    return v.color;
 80064b6:	7b3b      	ldrb	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <lv_obj_get_style_border_opa>:
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80064ca:	2231      	movs	r2, #49	; 0x31
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f004 ff0a 	bl	800b2e8 <lv_obj_get_style_prop>
 80064d4:	4603      	mov	r3, r0
 80064d6:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	b2db      	uxtb	r3, r3
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <lv_obj_get_style_border_width>:
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80064ee:	2232      	movs	r2, #50	; 0x32
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f004 fef8 	bl	800b2e8 <lv_obj_get_style_prop>
 80064f8:	4603      	mov	r3, r0
 80064fa:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	b21b      	sxth	r3, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <lv_obj_get_style_border_side>:
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8006512:	2233      	movs	r2, #51	; 0x33
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f004 fee6 	bl	800b2e8 <lv_obj_get_style_prop>
 800651c:	4603      	mov	r3, r0
 800651e:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	b2db      	uxtb	r3, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <lv_obj_get_style_outline_width>:
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8006536:	2235      	movs	r2, #53	; 0x35
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f004 fed4 	bl	800b2e8 <lv_obj_get_style_prop>
 8006540:	4603      	mov	r3, r0
 8006542:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	b21b      	sxth	r3, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <lv_obj_get_style_outline_color_filtered>:
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 800655a:	2236      	movs	r2, #54	; 0x36
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f004 fec2 	bl	800b2e8 <lv_obj_get_style_prop>
 8006564:	4603      	mov	r3, r0
 8006566:	461a      	mov	r2, r3
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f005 f850 	bl	800b610 <_lv_obj_style_apply_color_filter>
 8006570:	4603      	mov	r3, r0
 8006572:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006574:	7b3b      	ldrb	r3, [r7, #12]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <lv_obj_get_style_outline_opa>:
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8006588:	2237      	movs	r2, #55	; 0x37
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f004 feab 	bl	800b2e8 <lv_obj_get_style_prop>
 8006592:	4603      	mov	r3, r0
 8006594:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	b2db      	uxtb	r3, r3
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <lv_obj_get_style_outline_pad>:
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80065ac:	2238      	movs	r2, #56	; 0x38
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f004 fe99 	bl	800b2e8 <lv_obj_get_style_prop>
 80065b6:	4603      	mov	r3, r0
 80065b8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	b21b      	sxth	r3, r3
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <lv_obj_get_style_shadow_width>:
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80065d0:	2240      	movs	r2, #64	; 0x40
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f004 fe87 	bl	800b2e8 <lv_obj_get_style_prop>
 80065da:	4603      	mov	r3, r0
 80065dc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	b21b      	sxth	r3, r3
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <lv_obj_get_style_shadow_ofs_x>:
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80065f4:	2241      	movs	r2, #65	; 0x41
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f004 fe75 	bl	800b2e8 <lv_obj_get_style_prop>
 80065fe:	4603      	mov	r3, r0
 8006600:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	b21b      	sxth	r3, r3
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <lv_obj_get_style_shadow_ofs_y>:
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8006618:	2242      	movs	r2, #66	; 0x42
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f004 fe63 	bl	800b2e8 <lv_obj_get_style_prop>
 8006622:	4603      	mov	r3, r0
 8006624:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	b21b      	sxth	r3, r3
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <lv_obj_get_style_shadow_spread>:
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 800663c:	2243      	movs	r2, #67	; 0x43
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f004 fe51 	bl	800b2e8 <lv_obj_get_style_prop>
 8006646:	4603      	mov	r3, r0
 8006648:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	b21b      	sxth	r3, r3
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <lv_obj_get_style_shadow_color_filtered>:
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 8006660:	2244      	movs	r2, #68	; 0x44
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f004 fe3f 	bl	800b2e8 <lv_obj_get_style_prop>
 800666a:	4603      	mov	r3, r0
 800666c:	461a      	mov	r2, r3
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f004 ffcd 	bl	800b610 <_lv_obj_style_apply_color_filter>
 8006676:	4603      	mov	r3, r0
 8006678:	60fb      	str	r3, [r7, #12]
    return v.color;
 800667a:	7b3b      	ldrb	r3, [r7, #12]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <lv_obj_get_style_shadow_opa>:
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 800668e:	2245      	movs	r2, #69	; 0x45
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f004 fe28 	bl	800b2e8 <lv_obj_get_style_prop>
 8006698:	4603      	mov	r3, r0
 800669a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	b2db      	uxtb	r3, r3
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <lv_obj_get_style_text_color_filtered>:
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 80066b2:	2255      	movs	r2, #85	; 0x55
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f004 fe16 	bl	800b2e8 <lv_obj_get_style_prop>
 80066bc:	4603      	mov	r3, r0
 80066be:	461a      	mov	r2, r3
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f004 ffa4 	bl	800b610 <_lv_obj_style_apply_color_filter>
 80066c8:	4603      	mov	r3, r0
 80066ca:	60fb      	str	r3, [r7, #12]
    return v.color;
 80066cc:	7b3b      	ldrb	r3, [r7, #12]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <lv_obj_get_style_text_font>:
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80066e0:	2257      	movs	r2, #87	; 0x57
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f004 fdff 	bl	800b2e8 <lv_obj_get_style_prop>
 80066ea:	4603      	mov	r3, r0
 80066ec:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 80066ee:	68fb      	ldr	r3, [r7, #12]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <lv_obj_get_style_radius>:
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8006702:	220b      	movs	r2, #11
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f004 fdee 	bl	800b2e8 <lv_obj_get_style_prop>
 800670c:	4603      	mov	r3, r0
 800670e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	b21b      	sxth	r3, r3
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <lv_obj_get_style_opa>:
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8006726:	2260      	movs	r2, #96	; 0x60
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f004 fddc 	bl	800b2e8 <lv_obj_get_style_prop>
 8006730:	4603      	mov	r3, r0
 8006732:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	b2db      	uxtb	r3, r3
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <lv_obj_get_style_blend_mode>:
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800674a:	2267      	movs	r2, #103	; 0x67
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f004 fdca 	bl	800b2e8 <lv_obj_get_style_prop>
 8006754:	4603      	mov	r3, r0
 8006756:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	b2db      	uxtb	r3, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
    lv_opa_t opa = LV_OPA_COVER;
 8006770:	23ff      	movs	r3, #255	; 0xff
 8006772:	75fb      	strb	r3, [r7, #23]
    if(part != LV_PART_MAIN) {
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01a      	beq.n	80067b0 <lv_obj_init_draw_rect_dsc+0x4c>
        opa = lv_obj_get_style_opa(obj, part);
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff ffcd 	bl	800671c <lv_obj_get_style_opa>
 8006782:	4603      	mov	r3, r0
 8006784:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d811      	bhi.n	80067b0 <lv_obj_init_draw_rect_dsc+0x4c>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            return;
 80067ae:	e19f      	b.n	8006af0 <lv_obj_init_draw_rect_dsc+0x38c>
        }
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <lv_obj_init_draw_rect_dsc+0x62>
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f7ff ffc1 	bl	8006740 <lv_obj_get_style_blend_mode>
 80067be:	4603      	mov	r3, r0
 80067c0:	461a      	mov	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	709a      	strb	r2, [r3, #2]

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff ff95 	bl	80066f8 <lv_obj_get_style_radius>
 80067ce:	4603      	mov	r3, r0
 80067d0:	461a      	mov	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	801a      	strh	r2, [r3, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	78db      	ldrb	r3, [r3, #3]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d065      	beq.n	80068aa <lv_obj_init_draw_rect_dsc+0x146>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff fd72 	bl	80062ca <lv_obj_get_style_bg_opa>
 80067e6:	4603      	mov	r3, r0
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	70da      	strb	r2, [r3, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d959      	bls.n	80068aa <lv_obj_init_draw_rect_dsc+0x146>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 80067f6:	687c      	ldr	r4, [r7, #4]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff fd4e 	bl	800629c <lv_obj_get_style_bg_color_filtered>
 8006800:	7120      	strb	r0, [r4, #4]
            const lv_grad_dsc_t * grad = lv_obj_get_style_bg_grad(obj, part);
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fdbf 	bl	8006388 <lv_obj_get_style_bg_grad>
 800680a:	6138      	str	r0, [r7, #16]
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00e      	beq.n	8006830 <lv_obj_init_draw_rect_dsc+0xcc>
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	795b      	ldrb	r3, [r3, #5]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <lv_obj_init_draw_rect_dsc+0xcc>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3305      	adds	r3, #5
 8006824:	2206      	movs	r2, #6
 8006826:	6939      	ldr	r1, [r7, #16]
 8006828:	4618      	mov	r0, r3
 800682a:	f019 fd45 	bl	80202b8 <lv_memcpy>
 800682e:	e03c      	b.n	80068aa <lv_obj_init_draw_rect_dsc+0x146>
            }
            else {
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff fd72 	bl	800631c <lv_obj_get_style_bg_grad_dir>
 8006838:	4603      	mov	r3, r0
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	b2d9      	uxtb	r1, r3
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	7a93      	ldrb	r3, [r2, #10]
 8006844:	f361 0302 	bfi	r3, r1, #0, #3
 8006848:	7293      	strb	r3, [r2, #10]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	7a9b      	ldrb	r3, [r3, #10]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01b      	beq.n	8006890 <lv_obj_init_draw_rect_dsc+0x12c>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 8006858:	687c      	ldr	r4, [r7, #4]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff fd1d 	bl	800629c <lv_obj_get_style_bg_color_filtered>
 8006862:	7160      	strb	r0, [r4, #5]
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8006864:	687c      	ldr	r4, [r7, #4]
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff fd40 	bl	80062ee <lv_obj_get_style_bg_grad_color_filtered>
 800686e:	71e0      	strb	r0, [r4, #7]
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff fd64 	bl	8006340 <lv_obj_get_style_bg_main_stop>
 8006878:	4603      	mov	r3, r0
 800687a:	b2da      	uxtb	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	719a      	strb	r2, [r3, #6]
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff fd6e 	bl	8006364 <lv_obj_get_style_bg_grad_stop>
 8006888:	4603      	mov	r3, r0
 800688a:	b2da      	uxtb	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	721a      	strb	r2, [r3, #8]
                }
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f7ff fd89 	bl	80063aa <lv_obj_get_style_bg_dither_mode>
 8006898:	4603      	mov	r3, r0
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	b2d9      	uxtb	r1, r3
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	7a93      	ldrb	r3, [r2, #10]
 80068a4:	f361 03c5 	bfi	r3, r1, #3, #3
 80068a8:	7293      	strb	r3, [r2, #10]
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff fe19 	bl	80064e4 <lv_obj_get_style_border_width>
 80068b2:	4603      	mov	r3, r0
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	835a      	strh	r2, [r3, #26]
    if(draw_dsc->border_width) {
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d022      	beq.n	800690a <lv_obj_init_draw_rect_dsc+0x1a6>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7f1b      	ldrb	r3, [r3, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01e      	beq.n	800690a <lv_obj_init_draw_rect_dsc+0x1a6>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff fdf6 	bl	80064c0 <lv_obj_get_style_border_opa>
 80068d4:	4603      	mov	r3, r0
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	7f1b      	ldrb	r3, [r3, #28]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d912      	bls.n	800690a <lv_obj_init_draw_rect_dsc+0x1a6>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f7ff fe0e 	bl	8006508 <lv_obj_get_style_border_side>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	b2d9      	uxtb	r1, r3
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7f53      	ldrb	r3, [r2, #29]
 80068f8:	f361 0345 	bfi	r3, r1, #1, #5
 80068fc:	7753      	strb	r3, [r2, #29]
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 80068fe:	687c      	ldr	r4, [r7, #4]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fdc5 	bl	8006492 <lv_obj_get_style_border_color_filtered>
 8006908:	7620      	strb	r0, [r4, #24]
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7ff fe0d 	bl	800652c <lv_obj_get_style_outline_width>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	841a      	strh	r2, [r3, #32]
    if(draw_dsc->outline_width) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d020      	beq.n	8006966 <lv_obj_init_draw_rect_dsc+0x202>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01b      	beq.n	8006966 <lv_obj_init_draw_rect_dsc+0x202>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff fe24 	bl	800657e <lv_obj_get_style_outline_opa>
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006946:	2b02      	cmp	r3, #2
 8006948:	d90d      	bls.n	8006966 <lv_obj_init_draw_rect_dsc+0x202>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff fe28 	bl	80065a2 <lv_obj_get_style_outline_pad>
 8006952:	4603      	mov	r3, r0
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	845a      	strh	r2, [r3, #34]	; 0x22
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 800695a:	687c      	ldr	r4, [r7, #4]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff fdf6 	bl	8006550 <lv_obj_get_style_outline_color_filtered>
 8006964:	77a0      	strb	r0, [r4, #30]
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7d5b      	ldrb	r3, [r3, #21]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d042      	beq.n	80069f4 <lv_obj_init_draw_rect_dsc+0x290>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff fd2c 	bl	80063ce <lv_obj_get_style_bg_img_src>
 8006976:	4602      	mov	r2, r0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
        if(draw_dsc->bg_img_src) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d037      	beq.n	80069f4 <lv_obj_init_draw_rect_dsc+0x290>
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fd32 	bl	80063f0 <lv_obj_get_style_bg_img_opa>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	755a      	strb	r2, [r3, #21]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	7d5b      	ldrb	r3, [r3, #21]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d92b      	bls.n	80069f4 <lv_obj_init_draw_rect_dsc+0x290>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f007 fe32 	bl	800e60a <lv_img_src_get_type>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d10d      	bne.n	80069c8 <lv_obj_init_draw_rect_dsc+0x264>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff fe91 	bl	80066d6 <lv_obj_get_style_text_font>
 80069b4:	4602      	mov	r2, r0
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	611a      	str	r2, [r3, #16]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 80069ba:	687c      	ldr	r4, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff fe72 	bl	80066a8 <lv_obj_get_style_text_color_filtered>
 80069c4:	7520      	strb	r0, [r4, #20]
 80069c6:	e015      	b.n	80069f4 <lv_obj_init_draw_rect_dsc+0x290>
                }
                else {
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 80069c8:	687c      	ldr	r4, [r7, #4]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fd21 	bl	8006414 <lv_obj_get_style_bg_img_recolor_filtered>
 80069d2:	7520      	strb	r0, [r4, #20]
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff fd33 	bl	8006442 <lv_obj_get_style_bg_img_recolor_opa>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	759a      	strb	r2, [r3, #22]
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff fd3d 	bl	8006466 <lv_obj_get_style_bg_img_tiled>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	75da      	strb	r2, [r3, #23]
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d03e      	beq.n	8006a7c <lv_obj_init_draw_rect_dsc+0x318>
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f7ff fde0 	bl	80065c6 <lv_obj_get_style_shadow_width>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	84da      	strh	r2, [r3, #38]	; 0x26
        if(draw_dsc->shadow_width) {
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d031      	beq.n	8006a7c <lv_obj_init_draw_rect_dsc+0x318>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d92c      	bls.n	8006a7c <lv_obj_init_draw_rect_dsc+0x318>
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff fe2d 	bl	8006684 <lv_obj_get_style_shadow_opa>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d91e      	bls.n	8006a7c <lv_obj_init_draw_rect_dsc+0x318>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff fdd2 	bl	80065ea <lv_obj_get_style_shadow_ofs_x>
 8006a46:	4603      	mov	r3, r0
 8006a48:	461a      	mov	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	851a      	strh	r2, [r3, #40]	; 0x28
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff fddc 	bl	800660e <lv_obj_get_style_shadow_ofs_y>
 8006a56:	4603      	mov	r3, r0
 8006a58:	461a      	mov	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff fde6 	bl	8006632 <lv_obj_get_style_shadow_spread>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	859a      	strh	r2, [r3, #44]	; 0x2c
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8006a6e:	687c      	ldr	r4, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff fdef 	bl	8006656 <lv_obj_get_style_shadow_color_filtered>
 8006a78:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d036      	beq.n	8006af0 <lv_obj_init_draw_rect_dsc+0x38c>
        if(opa < LV_OPA_MAX) {
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	2bfc      	cmp	r3, #252	; 0xfc
 8006a86:	d833      	bhi.n	8006af0 <lv_obj_init_draw_rect_dsc+0x38c>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
 8006a94:	121b      	asrs	r3, r3, #8
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	121b      	asrs	r3, r3, #8
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006ab8:	fb02 f303 	mul.w	r3, r2, r3
 8006abc:	121b      	asrs	r3, r3, #8
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006acc:	fb02 f303 	mul.w	r3, r2, r3
 8006ad0:	121b      	asrs	r3, r3, #8
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006ae2:	fb02 f303 	mul.w	r3, r2, r3
 8006ae6:	121b      	asrs	r3, r3, #8
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }
}
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd90      	pop	{r4, r7, pc}

08006af6 <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b088      	sub	sp, #32
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
    lv_coord_t s = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	83fb      	strh	r3, [r7, #30]

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fd5d 	bl	80065c6 <lv_obj_get_style_shadow_width>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	83bb      	strh	r3, [r7, #28]
    if(sh_width) {
 8006b10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d045      	beq.n	8006ba4 <lv_obj_calculate_ext_draw_size+0xae>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fdb2 	bl	8006684 <lv_obj_get_style_shadow_opa>
 8006b20:	4603      	mov	r3, r0
 8006b22:	76fb      	strb	r3, [r7, #27]
        if(sh_opa > LV_OPA_MIN) {
 8006b24:	7efb      	ldrb	r3, [r7, #27]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d93c      	bls.n	8006ba4 <lv_obj_calculate_ext_draw_size+0xae>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8006b2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	da00      	bge.n	8006b34 <lv_obj_calculate_ext_draw_size+0x3e>
 8006b32:	3301      	adds	r3, #1
 8006b34:	105b      	asrs	r3, r3, #1
 8006b36:	b21b      	sxth	r3, r3
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	83bb      	strh	r3, [r7, #28]
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff fd75 	bl	8006632 <lv_obj_get_style_shadow_spread>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	8bbb      	ldrh	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	83bb      	strh	r3, [r7, #28]
            lv_coord_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff fd47 	bl	80065ea <lv_obj_get_style_shadow_ofs_x>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	833b      	strh	r3, [r7, #24]
            lv_coord_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fd53 	bl	800660e <lv_obj_get_style_shadow_ofs_y>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	82fb      	strh	r3, [r7, #22]
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8006b6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bfb8      	it	lt
 8006b74:	425b      	neglt	r3, r3
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfb8      	it	lt
 8006b80:	425b      	neglt	r3, r3
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4293      	cmp	r3, r2
 8006b86:	bf38      	it	cc
 8006b88:	4613      	movcc	r3, r2
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	8bbb      	ldrh	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	83bb      	strh	r3, [r7, #28]
            s = LV_MAX(s, sh_width);
 8006b94:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8006b98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bfb8      	it	lt
 8006ba0:	4613      	movlt	r3, r2
 8006ba2:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fcc0 	bl	800652c <lv_obj_get_style_outline_width>
 8006bac:	4603      	mov	r3, r0
 8006bae:	82bb      	strh	r3, [r7, #20]
    if(outline_width) {
 8006bb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d019      	beq.n	8006bec <lv_obj_calculate_ext_draw_size+0xf6>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fcdf 	bl	800657e <lv_obj_get_style_outline_opa>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	74fb      	strb	r3, [r7, #19]
        if(outline_opa > LV_OPA_MIN) {
 8006bc4:	7cfb      	ldrb	r3, [r7, #19]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d910      	bls.n	8006bec <lv_obj_calculate_ext_draw_size+0xf6>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff fce8 	bl	80065a2 <lv_obj_get_style_outline_pad>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	823b      	strh	r3, [r7, #16]
            s = LV_MAX(s, outline_pad + outline_width);
 8006bd6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006bda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006bde:	441a      	add	r2, r3
 8006be0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006be4:	4293      	cmp	r3, r2
 8006be6:	bfb8      	it	lt
 8006be8:	4613      	movlt	r3, r2
 8006bea:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff fb30 	bl	8006254 <lv_obj_get_style_transform_width>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fb3c 	bl	8006278 <lv_obj_get_style_transform_height>
 8006c00:	4603      	mov	r3, r0
 8006c02:	81bb      	strh	r3, [r7, #12]
    lv_coord_t wh = LV_MAX(w, h);
 8006c04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006c08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bfb8      	it	lt
 8006c10:	4613      	movlt	r3, r2
 8006c12:	817b      	strh	r3, [r7, #10]
    if(wh > 0) s += wh;
 8006c14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	dd04      	ble.n	8006c26 <lv_obj_calculate_ext_draw_size+0x130>
 8006c1c:	8bfa      	ldrh	r2, [r7, #30]
 8006c1e:	897b      	ldrh	r3, [r7, #10]
 8006c20:	4413      	add	r3, r2
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	83fb      	strh	r3, [r7, #30]

    return s;
 8006c26:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8006c3c:	2148      	movs	r1, #72	; 0x48
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f019 fde0 	bl	8020804 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	601a      	str	r2, [r3, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <lv_obj_refresh_ext_draw_size>:
    if(dsc->class_p == class_p && dsc->type == type) return true;
    else return false;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f837 	bl	8006cce <_lv_obj_get_ext_draw_size>
 8006c60:	4603      	mov	r3, r0
 8006c62:	81fb      	strh	r3, [r7, #14]
    lv_coord_t s_new = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	81bb      	strh	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2113      	movs	r1, #19
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fc fef3 	bl	8003a5c <lv_event_send>

    if(s_new != s_old) lv_obj_invalidate(obj);
 8006c76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d002      	beq.n	8006c88 <lv_obj_refresh_ext_draw_size+0x36>
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fab7 	bl	80081f6 <lv_obj_invalidate>

    /*Store the result if the special attrs already allocated*/
    if(obj->spec_attr) {
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <lv_obj_refresh_ext_draw_size+0x4a>
        obj->spec_attr->ext_draw_size = s_new;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006c98:	82da      	strh	r2, [r3, #22]
 8006c9a:	e00b      	b.n	8006cb4 <lv_obj_refresh_ext_draw_size+0x62>
    }
    /*Allocate spec. attrs. only if the result is not zero.
     *Zero is the default value if the spec. attr. are not defined.*/
    else if(s_new != 0) {
 8006c9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <lv_obj_refresh_ext_draw_size+0x62>
        lv_obj_allocate_spec_attr(obj);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7fe f867 	bl	8004d78 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006cb2:	82da      	strh	r2, [r3, #22]
    }

    if(s_new != s_old) lv_obj_invalidate(obj);
 8006cb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006cb8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d002      	beq.n	8006cc6 <lv_obj_refresh_ext_draw_size+0x74>
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fa98 	bl	80081f6 <lv_obj_invalidate>
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <_lv_obj_get_ext_draw_size>:

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <_lv_obj_get_ext_draw_size+0x1a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006ce6:	e000      	b.n	8006cea <_lv_obj_get_ext_draw_size+0x1c>
    else return 0;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d006      	beq.n	8006d14 <_lv_obj_get_layer_type+0x1e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	7e9b      	ldrb	r3, [r3, #26]
 8006d0c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	e000      	b.n	8006d16 <_lv_obj_get_layer_type+0x20>
    else return LV_LAYER_TYPE_NONE;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <lv_area_copy>:
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	80da      	strh	r2, [r3, #6]
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	b21b      	sxth	r3, r3
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3301      	adds	r3, #1
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	b21b      	sxth	r3, r3
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <lv_obj_get_style_width>:
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f004 fa8c 	bl	800b2e8 <lv_obj_get_style_prop>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	b21b      	sxth	r3, r3
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <lv_obj_get_style_min_width>:
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8006dea:	2202      	movs	r2, #2
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f004 fa7a 	bl	800b2e8 <lv_obj_get_style_prop>
 8006df4:	4603      	mov	r3, r0
 8006df6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	b21b      	sxth	r3, r3
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <lv_obj_get_style_max_width>:
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8006e0e:	2203      	movs	r2, #3
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f004 fa68 	bl	800b2e8 <lv_obj_get_style_prop>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	b21b      	sxth	r3, r3
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <lv_obj_get_style_height>:
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8006e32:	2204      	movs	r2, #4
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f004 fa56 	bl	800b2e8 <lv_obj_get_style_prop>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	b21b      	sxth	r3, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <lv_obj_get_style_min_height>:
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8006e56:	2205      	movs	r2, #5
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f004 fa44 	bl	800b2e8 <lv_obj_get_style_prop>
 8006e60:	4603      	mov	r3, r0
 8006e62:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	b21b      	sxth	r3, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <lv_obj_get_style_max_height>:
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8006e7a:	2206      	movs	r2, #6
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f004 fa32 	bl	800b2e8 <lv_obj_get_style_prop>
 8006e84:	4603      	mov	r3, r0
 8006e86:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	b21b      	sxth	r3, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <lv_obj_get_style_x>:
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8006e9e:	2207      	movs	r2, #7
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f004 fa20 	bl	800b2e8 <lv_obj_get_style_prop>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	b21b      	sxth	r3, r3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <lv_obj_get_style_y>:
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f004 fa0e 	bl	800b2e8 <lv_obj_get_style_prop>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	b21b      	sxth	r3, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <lv_obj_get_style_align>:
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8006ee6:	2209      	movs	r2, #9
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f004 f9fc 	bl	800b2e8 <lv_obj_get_style_prop>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	b2db      	uxtb	r3, r3
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <lv_obj_get_style_translate_x>:
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8006f0a:	226a      	movs	r2, #106	; 0x6a
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f004 f9ea 	bl	800b2e8 <lv_obj_get_style_prop>
 8006f14:	4603      	mov	r3, r0
 8006f16:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	b21b      	sxth	r3, r3
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <lv_obj_get_style_translate_y>:
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8006f2e:	226b      	movs	r2, #107	; 0x6b
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f004 f9d8 	bl	800b2e8 <lv_obj_get_style_prop>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	b21b      	sxth	r3, r3
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <lv_obj_get_style_transform_zoom>:
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8006f52:	226c      	movs	r2, #108	; 0x6c
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f004 f9c6 	bl	800b2e8 <lv_obj_get_style_prop>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	b21b      	sxth	r3, r3
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <lv_obj_get_style_transform_angle>:
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8006f76:	226d      	movs	r2, #109	; 0x6d
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f004 f9b4 	bl	800b2e8 <lv_obj_get_style_prop>
 8006f80:	4603      	mov	r3, r0
 8006f82:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	b21b      	sxth	r3, r3
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <lv_obj_get_style_transform_pivot_x>:
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8006f9a:	226e      	movs	r2, #110	; 0x6e
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f004 f9a2 	bl	800b2e8 <lv_obj_get_style_prop>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	b21b      	sxth	r3, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <lv_obj_get_style_transform_pivot_y>:
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8006fbe:	226f      	movs	r2, #111	; 0x6f
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f004 f990 	bl	800b2e8 <lv_obj_get_style_prop>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	b21b      	sxth	r3, r3
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <lv_obj_get_style_pad_top>:
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006fe2:	2210      	movs	r2, #16
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f004 f97e 	bl	800b2e8 <lv_obj_get_style_prop>
 8006fec:	4603      	mov	r3, r0
 8006fee:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	b21b      	sxth	r3, r3
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <lv_obj_get_style_pad_bottom>:
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007006:	2211      	movs	r2, #17
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f004 f96c 	bl	800b2e8 <lv_obj_get_style_prop>
 8007010:	4603      	mov	r3, r0
 8007012:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	b21b      	sxth	r3, r3
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <lv_obj_get_style_pad_left>:
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800702a:	2212      	movs	r2, #18
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f004 f95a 	bl	800b2e8 <lv_obj_get_style_prop>
 8007034:	4603      	mov	r3, r0
 8007036:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	b21b      	sxth	r3, r3
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <lv_obj_get_style_pad_right>:
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800704e:	2213      	movs	r2, #19
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f004 f948 	bl	800b2e8 <lv_obj_get_style_prop>
 8007058:	4603      	mov	r3, r0
 800705a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	b21b      	sxth	r3, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <lv_obj_get_style_border_width>:
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007072:	2232      	movs	r2, #50	; 0x32
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f004 f936 	bl	800b2e8 <lv_obj_get_style_prop>
 800707c:	4603      	mov	r3, r0
 800707e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	b21b      	sxth	r3, r3
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <lv_obj_get_style_layout>:
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8007096:	220a      	movs	r2, #10
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f004 f924 	bl	800b2e8 <lv_obj_get_style_prop>
 80070a0:	4603      	mov	r3, r0
 80070a2:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	b29b      	uxth	r3, r3
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <lv_obj_get_style_base_dir>:

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80070ba:	2216      	movs	r2, #22
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f004 f912 	bl	800b2e8 <lv_obj_get_style_prop>
 80070c4:	4603      	mov	r3, r0
 80070c6:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	b2db      	uxtb	r3, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <lv_obj_refr_size>:
        lv_obj_set_style_y(obj, y, 0);
    }
}

bool lv_obj_refr_size(lv_obj_t * obj)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b090      	sub	sp, #64	; 0x40
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*If the width or height is set by a layout do not modify them*/
    if(obj->w_layout && obj->h_layout) return false;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <lv_obj_refr_size+0x2c>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <lv_obj_refr_size+0x2c>
 80070fc:	2300      	movs	r3, #0
 80070fe:	e221      	b.n	8007544 <lv_obj_refr_size+0x470>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f005 f9d5 	bl	800c4b0 <lv_obj_get_parent>
 8007106:	6378      	str	r0, [r7, #52]	; 0x34
    if(parent == NULL) return false;
 8007108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <lv_obj_refr_size+0x3e>
 800710e:	2300      	movs	r3, #0
 8007110:	e218      	b.n	8007544 <lv_obj_refr_size+0x470>

    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f002 f83e 	bl	8009194 <lv_obj_get_scroll_left>
 8007118:	4603      	mov	r3, r0
 800711a:	867b      	strh	r3, [r7, #50]	; 0x32
    bool w_is_content = false;
 800711c:	2300      	movs	r3, #0
 800711e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool w_is_pct = false;
 8007122:	2300      	movs	r3, #0
 8007124:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    lv_coord_t w;
    if(obj->w_layout) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <lv_obj_refr_size+0x70>
        w = lv_obj_get_width(obj);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fa92 	bl	8007662 <lv_obj_get_width>
 800713e:	4603      	mov	r3, r0
 8007140:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007142:	e0a0      	b.n	8007286 <lv_obj_refr_size+0x1b2>
    }
    else {
        w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8007144:	2100      	movs	r1, #0
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fe38 	bl	8006dbc <lv_obj_get_style_width>
 800714c:	4603      	mov	r3, r0
 800714e:	87bb      	strh	r3, [r7, #60]	; 0x3c
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8007150:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8007154:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8007158:	4293      	cmp	r3, r2
 800715a:	bf0c      	ite	eq
 800715c:	2301      	moveq	r3, #1
 800715e:	2300      	movne	r3, #0
 8007160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8007164:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007166:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800716a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716e:	d108      	bne.n	8007182 <lv_obj_refr_size+0xae>
 8007170:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007172:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007176:	b21b      	sxth	r3, r3
 8007178:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800717c:	dc01      	bgt.n	8007182 <lv_obj_refr_size+0xae>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <lv_obj_refr_size+0xb0>
 8007182:	2300      	movs	r3, #0
 8007184:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8007188:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8007194:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007196:	f000 fa80 	bl	800769a <lv_obj_get_content_width>
 800719a:	4603      	mov	r3, r0
 800719c:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(w_is_content) {
 800719e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <lv_obj_refr_size+0xde>
            w = calc_content_width(obj);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fa16 	bl	80085d8 <calc_content_width>
 80071ac:	4603      	mov	r3, r0
 80071ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80071b0:	e051      	b.n	8007256 <lv_obj_refr_size+0x182>
        }
        else if(w_is_pct) {
 80071b2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d04d      	beq.n	8007256 <lv_obj_refr_size+0x182>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 80071ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071bc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d128      	bne.n	800721c <lv_obj_refr_size+0x148>
 80071ca:	2100      	movs	r1, #0
 80071cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071ce:	f7ff fdf5 	bl	8006dbc <lv_obj_get_style_width>
 80071d2:	4603      	mov	r3, r0
 80071d4:	461a      	mov	r2, r3
 80071d6:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80071da:	429a      	cmp	r2, r3
 80071dc:	d11e      	bne.n	800721c <lv_obj_refr_size+0x148>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ff41 	bl	8007068 <lv_obj_get_style_border_width>
 80071e6:	4603      	mov	r3, r0
 80071e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff ff17 	bl	8007020 <lv_obj_get_style_pad_left>
 80071f2:	4603      	mov	r3, r0
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071f8:	4413      	add	r3, r2
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 80071fe:	2100      	movs	r1, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff1f 	bl	8007044 <lv_obj_get_style_pad_right>
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800720e:	4413      	add	r3, r2
 8007210:	b29a      	uxth	r2, r3
 8007212:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007214:	4413      	add	r3, r2
 8007216:	b29b      	uxth	r3, r3
 8007218:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 800721a:	e01c      	b.n	8007256 <lv_obj_refr_size+0x182>
            }
            else {
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 800721c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800721e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007222:	b21b      	sxth	r3, r3
 8007224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007228:	dd06      	ble.n	8007238 <lv_obj_refr_size+0x164>
 800722a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800722c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007230:	b21b      	sxth	r3, r3
 8007232:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007236:	e003      	b.n	8007240 <lv_obj_refr_size+0x16c>
 8007238:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800723a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800723e:	b21b      	sxth	r3, r3
 8007240:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8007244:	fb02 f303 	mul.w	r3, r2, r3
 8007248:	4a9f      	ldr	r2, [pc, #636]	; (80074c8 <lv_obj_refr_size+0x3f4>)
 800724a:	fb82 1203 	smull	r1, r2, r2, r3
 800724e:	1152      	asrs	r2, r2, #5
 8007250:	17db      	asrs	r3, r3, #31
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }

        lv_coord_t minw = lv_obj_get_style_min_width(obj, LV_PART_MAIN);
 8007256:	2100      	movs	r1, #0
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fdc1 	bl	8006de0 <lv_obj_get_style_min_width>
 800725e:	4603      	mov	r3, r0
 8007260:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_coord_t maxw = lv_obj_get_style_max_width(obj, LV_PART_MAIN);
 8007262:	2100      	movs	r1, #0
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff fdcd 	bl	8006e04 <lv_obj_get_style_max_width>
 800726a:	4603      	mov	r3, r0
 800726c:	853b      	strh	r3, [r7, #40]	; 0x28
        w = lv_clamp_width(w, minw, maxw, parent_w);
 800726e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007272:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8007276:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800727a:	f9b7 003c 	ldrsh.w	r0, [r7, #60]	; 0x3c
 800727e:	f001 f8bb 	bl	80083f8 <lv_clamp_width>
 8007282:	4603      	mov	r3, r0
 8007284:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }

    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fee6 	bl	8009058 <lv_obj_get_scroll_top>
 800728c:	4603      	mov	r3, r0
 800728e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h;
    bool h_is_content = false;
 8007290:	2300      	movs	r3, #0
 8007292:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    bool h_is_pct = false;
 8007296:	2300      	movs	r3, #0
 8007298:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(obj->h_layout) {
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <lv_obj_refr_size+0x1e4>
        h = lv_obj_get_height(obj);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f9e6 	bl	800767e <lv_obj_get_height>
 80072b2:	4603      	mov	r3, r0
 80072b4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80072b6:	e0a0      	b.n	80073fa <lv_obj_refr_size+0x326>
    }
    else {
        h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 80072b8:	2100      	movs	r1, #0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fdb4 	bl	8006e28 <lv_obj_get_style_height>
 80072c0:	4603      	mov	r3, r0
 80072c2:	877b      	strh	r3, [r7, #58]	; 0x3a
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 80072c4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80072c8:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80072cc:	4293      	cmp	r3, r2
 80072ce:	bf0c      	ite	eq
 80072d0:	2301      	moveq	r3, #1
 80072d2:	2300      	movne	r3, #0
 80072d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 80072d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80072da:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80072de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e2:	d108      	bne.n	80072f6 <lv_obj_refr_size+0x222>
 80072e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80072e6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80072ea:	b21b      	sxth	r3, r3
 80072ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80072f0:	dc01      	bgt.n	80072f6 <lv_obj_refr_size+0x222>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <lv_obj_refr_size+0x224>
 80072f6:	2300      	movs	r3, #0
 80072f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80072fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8007308:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800730a:	f000 f9f1 	bl	80076f0 <lv_obj_get_content_height>
 800730e:	4603      	mov	r3, r0
 8007310:	847b      	strh	r3, [r7, #34]	; 0x22

        if(h_is_content) {
 8007312:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <lv_obj_refr_size+0x252>
            h = calc_content_height(obj);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 fad2 	bl	80088c4 <calc_content_height>
 8007320:	4603      	mov	r3, r0
 8007322:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007324:	e051      	b.n	80073ca <lv_obj_refr_size+0x2f6>
        }
        else if(h_is_pct) {
 8007326:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800732a:	2b00      	cmp	r3, #0
 800732c:	d04d      	beq.n	80073ca <lv_obj_refr_size+0x2f6>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d128      	bne.n	8007390 <lv_obj_refr_size+0x2bc>
 800733e:	2100      	movs	r1, #0
 8007340:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007342:	f7ff fd71 	bl	8006e28 <lv_obj_get_style_height>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800734e:	429a      	cmp	r2, r3
 8007350:	d11e      	bne.n	8007390 <lv_obj_refr_size+0x2bc>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 8007352:	2100      	movs	r1, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff fe87 	bl	8007068 <lv_obj_get_style_border_width>
 800735a:	4603      	mov	r3, r0
 800735c:	843b      	strh	r3, [r7, #32]
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 800735e:	2100      	movs	r1, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff fe39 	bl	8006fd8 <lv_obj_get_style_pad_top>
 8007366:	4603      	mov	r3, r0
 8007368:	b29a      	uxth	r2, r3
 800736a:	8c3b      	ldrh	r3, [r7, #32]
 800736c:	4413      	add	r3, r2
 800736e:	b29b      	uxth	r3, r3
 8007370:	877b      	strh	r3, [r7, #58]	; 0x3a
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff fe41 	bl	8006ffc <lv_obj_get_style_pad_bottom>
 800737a:	4603      	mov	r3, r0
 800737c:	461a      	mov	r2, r3
 800737e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007382:	4413      	add	r3, r2
 8007384:	b29a      	uxth	r2, r3
 8007386:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007388:	4413      	add	r3, r2
 800738a:	b29b      	uxth	r3, r3
 800738c:	877b      	strh	r3, [r7, #58]	; 0x3a
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 800738e:	e01c      	b.n	80073ca <lv_obj_refr_size+0x2f6>
            }
            else {
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8007390:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007392:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007396:	b21b      	sxth	r3, r3
 8007398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739c:	dd06      	ble.n	80073ac <lv_obj_refr_size+0x2d8>
 800739e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80073a0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80073a4:	b21b      	sxth	r3, r3
 80073a6:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80073aa:	e003      	b.n	80073b4 <lv_obj_refr_size+0x2e0>
 80073ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80073ae:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80073b2:	b21b      	sxth	r3, r3
 80073b4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	4a42      	ldr	r2, [pc, #264]	; (80074c8 <lv_obj_refr_size+0x3f4>)
 80073be:	fb82 1203 	smull	r1, r2, r2, r3
 80073c2:	1152      	asrs	r2, r2, #5
 80073c4:	17db      	asrs	r3, r3, #31
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
        }

        lv_coord_t minh = lv_obj_get_style_min_height(obj, LV_PART_MAIN);
 80073ca:	2100      	movs	r1, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff fd3d 	bl	8006e4c <lv_obj_get_style_min_height>
 80073d2:	4603      	mov	r3, r0
 80073d4:	83fb      	strh	r3, [r7, #30]
        lv_coord_t maxh = lv_obj_get_style_max_height(obj, LV_PART_MAIN);
 80073d6:	2100      	movs	r1, #0
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff fd49 	bl	8006e70 <lv_obj_get_style_max_height>
 80073de:	4603      	mov	r3, r0
 80073e0:	83bb      	strh	r3, [r7, #28]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 80073e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80073e6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80073ea:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80073ee:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	; 0x3a
 80073f2:	f001 f879 	bl	80084e8 <lv_clamp_height>
 80073f6:	4603      	mov	r3, r0
 80073f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    /*calc_auto_size set the scroll x/y to 0 so revert the original value*/
    if(w_is_content || h_is_content) {
 80073fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d103      	bne.n	800740a <lv_obj_refr_size+0x336>
 8007402:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <lv_obj_refr_size+0x346>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 800740a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800740e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8007412:	2300      	movs	r3, #0
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f002 f9eb 	bl	80097f0 <lv_obj_scroll_to>
    }

    /*Do nothing if the size is not changed*/
    /*It is very important else recursive resizing can occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f921 	bl	8007662 <lv_obj_get_width>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8007428:	4293      	cmp	r3, r2
 800742a:	d10a      	bne.n	8007442 <lv_obj_refr_size+0x36e>
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f926 	bl	800767e <lv_obj_get_height>
 8007432:	4603      	mov	r3, r0
 8007434:	461a      	mov	r2, r3
 8007436:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <lv_obj_refr_size+0x36e>
 800743e:	2300      	movs	r3, #0
 8007440:	e080      	b.n	8007544 <lv_obj_refr_size+0x470>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fed7 	bl	80081f6 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8007448:	f107 0310 	add.w	r3, r7, #16
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8f8 	bl	8007644 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4619      	mov	r1, r3
 800745a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800745c:	f000 f973 	bl	8007746 <lv_obj_get_content_coords>

    /*If the object is already out of the parent and its position is changes
     *surely the scrollbars also changes so invalidate them*/
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8007460:	f107 0108 	add.w	r1, r7, #8
 8007464:	f107 0310 	add.w	r3, r7, #16
 8007468:	2200      	movs	r2, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f017 fc5a 	bl	801ed24 <_lv_area_is_in>
 8007470:	4603      	mov	r3, r0
 8007472:	76fb      	strb	r3, [r7, #27]
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8007474:	7efb      	ldrb	r3, [r7, #27]
 8007476:	f083 0301 	eor.w	r3, r3, #1
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <lv_obj_refr_size+0x3b2>
 8007480:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007482:	f003 f855 	bl	800a530 <lv_obj_scrollbar_invalidate>

    /*Set the length and height
     *Be sure the content is not scrolled in an invalid position on the new size*/
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800748c:	b29a      	uxth	r2, r3
 800748e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007490:	4413      	add	r3, r2
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29b      	uxth	r3, r3
 8007498:	b21a      	sxth	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	835a      	strh	r2, [r3, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800749e:	2100      	movs	r1, #0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff fe05 	bl	80070b0 <lv_obj_get_style_base_dir>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d10f      	bne.n	80074cc <lv_obj_refr_size+0x3f8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3301      	adds	r3, #1
 80074bc:	b29b      	uxth	r3, r3
 80074be:	b21a      	sxth	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	829a      	strh	r2, [r3, #20]
 80074c4:	e00e      	b.n	80074e4 <lv_obj_refr_size+0x410>
 80074c6:	bf00      	nop
 80074c8:	51eb851f 	.word	0x51eb851f
    }
    else {
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80074d6:	4413      	add	r3, r2
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29b      	uxth	r3, r3
 80074de:	b21a      	sxth	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	831a      	strh	r2, [r3, #24]
    }

    /*Call the ancestor's event handler to the object with its new coordinates*/
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 80074e4:	f107 0310 	add.w	r3, r7, #16
 80074e8:	461a      	mov	r2, r3
 80074ea:	2129      	movs	r1, #41	; 0x29
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7fc fab5 	bl	8003a5c <lv_event_send>

    /*Call the ancestor's event handler to the parent too*/
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	2122      	movs	r1, #34	; 0x22
 80074f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80074f8:	f7fc fab0 	bl	8003a5c <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fe7a 	bl	80081f6 <lv_obj_invalidate>

    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8007502:	2100      	movs	r1, #0
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f003 f850 	bl	800a5aa <lv_obj_readjust_scroll>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the scrollbars*/
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3314      	adds	r3, #20
 800750e:	f107 0108 	add.w	r1, r7, #8
 8007512:	2200      	movs	r2, #0
 8007514:	4618      	mov	r0, r3
 8007516:	f017 fc05 	bl	801ed24 <_lv_area_is_in>
 800751a:	4603      	mov	r3, r0
 800751c:	76bb      	strb	r3, [r7, #26]
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800751e:	7efb      	ldrb	r3, [r7, #27]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d108      	bne.n	8007536 <lv_obj_refr_size+0x462>
 8007524:	7efb      	ldrb	r3, [r7, #27]
 8007526:	f083 0301 	eor.w	r3, r3, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <lv_obj_refr_size+0x468>
 8007530:	7ebb      	ldrb	r3, [r7, #26]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <lv_obj_refr_size+0x468>
 8007536:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007538:	f002 fffa 	bl	800a530 <lv_obj_scrollbar_invalidate>

    lv_obj_refresh_ext_draw_size(obj);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fb88 	bl	8006c52 <lv_obj_refresh_ext_draw_size>

    return true;
 8007542:	2301      	movs	r3, #1
}
 8007544:	4618      	mov	r0, r3
 8007546:	3740      	adds	r7, #64	; 0x40
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8007554:	4910      	ldr	r1, [pc, #64]	; (8007598 <lv_obj_is_layout_positioned+0x4c>)
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fd fbda 	bl	8004d10 <lv_obj_has_flag_any>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <lv_obj_is_layout_positioned+0x1a>
 8007562:	2300      	movs	r3, #0
 8007564:	e014      	b.n	8007590 <lv_obj_is_layout_positioned+0x44>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f004 ffa2 	bl	800c4b0 <lv_obj_get_parent>
 800756c:	60f8      	str	r0, [r7, #12]
    if(parent == NULL) return false;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <lv_obj_is_layout_positioned+0x2c>
 8007574:	2300      	movs	r3, #0
 8007576:	e00b      	b.n	8007590 <lv_obj_is_layout_positioned+0x44>

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
 8007578:	2100      	movs	r1, #0
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff fd86 	bl	800708c <lv_obj_get_style_layout>
 8007580:	4603      	mov	r3, r0
 8007582:	60bb      	str	r3, [r7, #8]
    if(layout) return true;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <lv_obj_is_layout_positioned+0x42>
 800758a:	2301      	movs	r3, #1
 800758c:	e000      	b.n	8007590 <lv_obj_is_layout_positioned+0x44>
    else return false;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	00060001 	.word	0x00060001

0800759c <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
    obj->layout_inv = 1;
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f004 ff2e 	bl	800c414 <lv_obj_get_screen>
 80075b8:	60f8      	str	r0, [r7, #12]
    scr->scr_layout_inv = 1;
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80075c0:	f043 0302 	orr.w	r3, r3, #2
 80075c4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f004 ff37 	bl	800c43c <lv_obj_get_disp>
 80075ce:	60b8      	str	r0, [r7, #8]
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <lv_obj_mark_layout_as_dirty+0x46>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4618      	mov	r0, r3
 80075de:	f019 ff52 	bl	8021486 <lv_timer_resume>
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <lv_obj_update_layout>:

void lv_obj_update_layout(const lv_obj_t * obj)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
    static bool mutex = false;
    if(mutex) {
 80075f4:	4b12      	ldr	r3, [pc, #72]	; (8007640 <lv_obj_update_layout+0x54>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d11d      	bne.n	8007638 <lv_obj_update_layout+0x4c>
        LV_LOG_TRACE("Already running, returning");
        return;
    }
    mutex = true;
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <lv_obj_update_layout+0x54>)
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]

    lv_obj_t * scr = lv_obj_get_screen(obj);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f004 ff06 	bl	800c414 <lv_obj_get_screen>
 8007608:	60f8      	str	r0, [r7, #12]

    /*Repeat until there where layout invalidations*/
    while(scr->scr_layout_inv) {
 800760a:	e009      	b.n	8007620 <lv_obj_update_layout+0x34>
        LV_LOG_INFO("Layout update begin");
        scr->scr_layout_inv = 0;
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8007612:	f36f 0341 	bfc	r3, #1, #1
 8007616:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
        layout_update_core(scr);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f001 fa18 	bl	8008a50 <layout_update_core>
    while(scr->scr_layout_inv) {
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1ed      	bne.n	800760c <lv_obj_update_layout+0x20>
        LV_LOG_TRACE("Layout update end");
    }

    mutex = false;
 8007630:	4b03      	ldr	r3, [pc, #12]	; (8007640 <lv_obj_update_layout+0x54>)
 8007632:	2200      	movs	r2, #0
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	e000      	b.n	800763a <lv_obj_update_layout+0x4e>
        return;
 8007638:	bf00      	nop
}
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200006a8 	.word	0x200006a8

08007644 <lv_obj_get_coords>:
    lv_obj_set_pos(obj, x, y);

}

void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3314      	adds	r3, #20
 8007652:	4619      	mov	r1, r3
 8007654:	6838      	ldr	r0, [r7, #0]
 8007656:	f7ff fb64 	bl	8006d22 <lv_area_copy>
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <lv_obj_get_width>:
    return lv_obj_get_style_y(obj, LV_PART_MAIN);
}


lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3314      	adds	r3, #20
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff fb76 	bl	8006d60 <lv_area_get_width>
 8007674:	4603      	mov	r3, r0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <lv_obj_get_height>:

lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3314      	adds	r3, #20
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff fb7f 	bl	8006d8e <lv_area_get_height>
 8007690:	4603      	mov	r3, r0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80076a2:	2100      	movs	r1, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff fcbb 	bl	8007020 <lv_obj_get_style_pad_left>
 80076aa:	4603      	mov	r3, r0
 80076ac:	81fb      	strh	r3, [r7, #14]
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80076ae:	2100      	movs	r1, #0
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff fcc7 	bl	8007044 <lv_obj_get_style_pad_right>
 80076b6:	4603      	mov	r3, r0
 80076b8:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80076ba:	2100      	movs	r1, #0
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff fcd3 	bl	8007068 <lv_obj_get_style_border_width>
 80076c2:	4603      	mov	r3, r0
 80076c4:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff ffcb 	bl	8007662 <lv_obj_get_width>
 80076cc:	4603      	mov	r3, r0
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	89fb      	ldrh	r3, [r7, #14]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	89bb      	ldrh	r3, [r7, #12]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	b29a      	uxth	r2, r3
 80076dc:	897b      	ldrh	r3, [r7, #10]
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	b21b      	sxth	r3, r3
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80076f8:	2100      	movs	r1, #0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fc6c 	bl	8006fd8 <lv_obj_get_style_pad_top>
 8007700:	4603      	mov	r3, r0
 8007702:	81fb      	strh	r3, [r7, #14]
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fc78 	bl	8006ffc <lv_obj_get_style_pad_bottom>
 800770c:	4603      	mov	r3, r0
 800770e:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8007710:	2100      	movs	r1, #0
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fca8 	bl	8007068 <lv_obj_get_style_border_width>
 8007718:	4603      	mov	r3, r0
 800771a:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff ffae 	bl	800767e <lv_obj_get_height>
 8007722:	4603      	mov	r3, r0
 8007724:	b29a      	uxth	r2, r3
 8007726:	89fb      	ldrh	r3, [r7, #14]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	b29a      	uxth	r2, r3
 800772c:	89bb      	ldrh	r3, [r7, #12]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	b29a      	uxth	r2, r3
 8007732:	897b      	ldrh	r3, [r7, #10]
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	b29b      	uxth	r3, r3
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	b29b      	uxth	r3, r3
 800773c:	b21b      	sxth	r3, r3
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8007750:	2100      	movs	r1, #0
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fc88 	bl	8007068 <lv_obj_get_style_border_width>
 8007758:	4603      	mov	r3, r0
 800775a:	81fb      	strh	r3, [r7, #14]

    lv_obj_get_coords(obj, area);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff ff70 	bl	8007644 <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8007764:	89fb      	ldrh	r3, [r7, #14]
 8007766:	425b      	negs	r3, r3
 8007768:	b29b      	uxth	r3, r3
 800776a:	b21b      	sxth	r3, r3
 800776c:	89fa      	ldrh	r2, [r7, #14]
 800776e:	4252      	negs	r2, r2
 8007770:	b292      	uxth	r2, r2
 8007772:	b212      	sxth	r2, r2
 8007774:	4619      	mov	r1, r3
 8007776:	6838      	ldr	r0, [r7, #0]
 8007778:	f017 f884 	bl	801e884 <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800777c:	2100      	movs	r1, #0
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff fc4e 	bl	8007020 <lv_obj_get_style_pad_left>
 8007784:	4603      	mov	r3, r0
 8007786:	4619      	mov	r1, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800778e:	b29a      	uxth	r2, r3
 8007790:	b28b      	uxth	r3, r1
 8007792:	4413      	add	r3, r2
 8007794:	b29b      	uxth	r3, r3
 8007796:	b21a      	sxth	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	801a      	strh	r2, [r3, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800779c:	2100      	movs	r1, #0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff fc50 	bl	8007044 <lv_obj_get_style_pad_right>
 80077a4:	4603      	mov	r3, r0
 80077a6:	4619      	mov	r1, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	b28b      	uxth	r3, r1
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	b21a      	sxth	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	809a      	strh	r2, [r3, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff fc0a 	bl	8006fd8 <lv_obj_get_style_pad_top>
 80077c4:	4603      	mov	r3, r0
 80077c6:	4619      	mov	r1, r3
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	b28b      	uxth	r3, r1
 80077d2:	4413      	add	r3, r2
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	b21a      	sxth	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	805a      	strh	r2, [r3, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff fc0c 	bl	8006ffc <lv_obj_get_style_pad_bottom>
 80077e4:	4603      	mov	r3, r0
 80077e6:	4619      	mov	r1, r3
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	b28b      	uxth	r3, r1
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	b21a      	sxth	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	80da      	strh	r2, [r3, #6]

}
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
    lv_point_t p = {0, LV_COORD_MIN};
 800780c:	2300      	movs	r3, #0
 800780e:	81bb      	strh	r3, [r7, #12]
 8007810:	f24e 0301 	movw	r3, #57345	; 0xe001
 8007814:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8007816:	f107 030c 	add.w	r3, r7, #12
 800781a:	461a      	mov	r2, r3
 800781c:	212c      	movs	r1, #44	; 0x2c
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fc f91c 	bl	8003a5c <lv_event_send>
    return p.x;
 8007824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
    lv_point_t p = {LV_COORD_MIN, 0};
 8007838:	f24e 0301 	movw	r3, #57345	; 0xe001
 800783c:	81bb      	strh	r3, [r7, #12]
 800783e:	2300      	movs	r3, #0
 8007840:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8007842:	f107 030c 	add.w	r3, r7, #12
 8007846:	461a      	mov	r2, r3
 8007848:	212c      	movs	r1, #44	; 0x2c
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7fc f906 	bl	8003a5c <lv_event_send>
    return p.y;
 8007850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8007864:	2100      	movs	r1, #0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff faa8 	bl	8006dbc <lv_obj_get_style_width>
 800786c:	4603      	mov	r3, r0
 800786e:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8007870:	2100      	movs	r1, #0
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fad8 	bl	8006e28 <lv_obj_get_style_height>
 8007878:	4603      	mov	r3, r0
 800787a:	81bb      	strh	r3, [r7, #12]
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 800787c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007880:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8007884:	4293      	cmp	r3, r2
 8007886:	d007      	beq.n	8007898 <lv_obj_refresh_self_size+0x3c>
 8007888:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800788c:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8007890:	4293      	cmp	r3, r2
 8007892:	d001      	beq.n	8007898 <lv_obj_refresh_self_size+0x3c>
 8007894:	2300      	movs	r3, #0
 8007896:	e003      	b.n	80078a0 <lv_obj_refresh_self_size+0x44>

    lv_obj_mark_layout_as_dirty(obj);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fe7f 	bl	800759c <lv_obj_mark_layout_as_dirty>
    return true;
 800789e:	2301      	movs	r3, #1
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <lv_obj_refr_pos>:

void lv_obj_refr_pos(lv_obj_t * obj)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
    if(lv_obj_is_layout_positioned(obj)) return;
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff fe4b 	bl	800754c <lv_obj_is_layout_positioned>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 81ef 	bne.w	8007c9c <lv_obj_refr_pos+0x3f4>


    lv_obj_t * parent = lv_obj_get_parent(obj);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f004 fdf6 	bl	800c4b0 <lv_obj_get_parent>
 80078c4:	6138      	str	r0, [r7, #16]
    lv_coord_t x = lv_obj_get_style_x(obj, LV_PART_MAIN);
 80078c6:	2100      	movs	r1, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff fae3 	bl	8006e94 <lv_obj_get_style_x>
 80078ce:	4603      	mov	r3, r0
 80078d0:	83fb      	strh	r3, [r7, #30]
    lv_coord_t y = lv_obj_get_style_y(obj, LV_PART_MAIN);
 80078d2:	2100      	movs	r1, #0
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff faef 	bl	8006eb8 <lv_obj_get_style_y>
 80078da:	4603      	mov	r3, r0
 80078dc:	83bb      	strh	r3, [r7, #28]

    if(parent == NULL) {
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d108      	bne.n	80078f6 <lv_obj_refr_pos+0x4e>
        lv_obj_move_to(obj, x, y);
 80078e4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80078e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9d8 	bl	8007ca4 <lv_obj_move_to>
        return;
 80078f4:	e1d3      	b.n	8007c9e <lv_obj_refr_pos+0x3f6>
    }

    /*Handle percentage value*/
    lv_coord_t pw = lv_obj_get_content_width(parent);
 80078f6:	6938      	ldr	r0, [r7, #16]
 80078f8:	f7ff fecf 	bl	800769a <lv_obj_get_content_width>
 80078fc:	4603      	mov	r3, r0
 80078fe:	81fb      	strh	r3, [r7, #14]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8007900:	6938      	ldr	r0, [r7, #16]
 8007902:	f7ff fef5 	bl	80076f0 <lv_obj_get_content_height>
 8007906:	4603      	mov	r3, r0
 8007908:	81bb      	strh	r3, [r7, #12]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800790a:	8bfb      	ldrh	r3, [r7, #30]
 800790c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007914:	d123      	bne.n	800795e <lv_obj_refr_pos+0xb6>
 8007916:	8bfb      	ldrh	r3, [r7, #30]
 8007918:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800791c:	b21b      	sxth	r3, r3
 800791e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007922:	dc1c      	bgt.n	800795e <lv_obj_refr_pos+0xb6>
 8007924:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007928:	8bfb      	ldrh	r3, [r7, #30]
 800792a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800792e:	b21b      	sxth	r3, r3
 8007930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007934:	dd06      	ble.n	8007944 <lv_obj_refr_pos+0x9c>
 8007936:	8bfb      	ldrh	r3, [r7, #30]
 8007938:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800793c:	b21b      	sxth	r3, r3
 800793e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007942:	e003      	b.n	800794c <lv_obj_refr_pos+0xa4>
 8007944:	8bfb      	ldrh	r3, [r7, #30]
 8007946:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800794a:	b21b      	sxth	r3, r3
 800794c:	fb02 f303 	mul.w	r3, r2, r3
 8007950:	4aa6      	ldr	r2, [pc, #664]	; (8007bec <lv_obj_refr_pos+0x344>)
 8007952:	fb82 1203 	smull	r1, r2, r2, r3
 8007956:	1152      	asrs	r2, r2, #5
 8007958:	17db      	asrs	r3, r3, #31
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	83fb      	strh	r3, [r7, #30]
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800795e:	8bbb      	ldrh	r3, [r7, #28]
 8007960:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007968:	d123      	bne.n	80079b2 <lv_obj_refr_pos+0x10a>
 800796a:	8bbb      	ldrh	r3, [r7, #28]
 800796c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007970:	b21b      	sxth	r3, r3
 8007972:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007976:	dc1c      	bgt.n	80079b2 <lv_obj_refr_pos+0x10a>
 8007978:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800797c:	8bbb      	ldrh	r3, [r7, #28]
 800797e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007982:	b21b      	sxth	r3, r3
 8007984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007988:	dd06      	ble.n	8007998 <lv_obj_refr_pos+0xf0>
 800798a:	8bbb      	ldrh	r3, [r7, #28]
 800798c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007990:	b21b      	sxth	r3, r3
 8007992:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007996:	e003      	b.n	80079a0 <lv_obj_refr_pos+0xf8>
 8007998:	8bbb      	ldrh	r3, [r7, #28]
 800799a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800799e:	b21b      	sxth	r3, r3
 80079a0:	fb02 f303 	mul.w	r3, r2, r3
 80079a4:	4a91      	ldr	r2, [pc, #580]	; (8007bec <lv_obj_refr_pos+0x344>)
 80079a6:	fb82 1203 	smull	r1, r2, r2, r3
 80079aa:	1152      	asrs	r2, r2, #5
 80079ac:	17db      	asrs	r3, r3, #31
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	83bb      	strh	r3, [r7, #28]

    /*Handle percentage value of translate*/
    lv_coord_t tr_x = lv_obj_get_style_translate_x(obj, LV_PART_MAIN);
 80079b2:	2100      	movs	r1, #0
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff faa3 	bl	8006f00 <lv_obj_get_style_translate_x>
 80079ba:	4603      	mov	r3, r0
 80079bc:	837b      	strh	r3, [r7, #26]
    lv_coord_t tr_y = lv_obj_get_style_translate_y(obj, LV_PART_MAIN);
 80079be:	2100      	movs	r1, #0
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff faaf 	bl	8006f24 <lv_obj_get_style_translate_y>
 80079c6:	4603      	mov	r3, r0
 80079c8:	833b      	strh	r3, [r7, #24]
    lv_coord_t w = lv_obj_get_width(obj);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff fe49 	bl	8007662 <lv_obj_get_width>
 80079d0:	4603      	mov	r3, r0
 80079d2:	817b      	strh	r3, [r7, #10]
    lv_coord_t h = lv_obj_get_height(obj);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff fe52 	bl	800767e <lv_obj_get_height>
 80079da:	4603      	mov	r3, r0
 80079dc:	813b      	strh	r3, [r7, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80079de:	8b7b      	ldrh	r3, [r7, #26]
 80079e0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80079e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e8:	d123      	bne.n	8007a32 <lv_obj_refr_pos+0x18a>
 80079ea:	8b7b      	ldrh	r3, [r7, #26]
 80079ec:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80079f0:	b21b      	sxth	r3, r3
 80079f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80079f6:	dc1c      	bgt.n	8007a32 <lv_obj_refr_pos+0x18a>
 80079f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80079fc:	8b7b      	ldrh	r3, [r7, #26]
 80079fe:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a02:	b21b      	sxth	r3, r3
 8007a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a08:	dd06      	ble.n	8007a18 <lv_obj_refr_pos+0x170>
 8007a0a:	8b7b      	ldrh	r3, [r7, #26]
 8007a0c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a10:	b21b      	sxth	r3, r3
 8007a12:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007a16:	e003      	b.n	8007a20 <lv_obj_refr_pos+0x178>
 8007a18:	8b7b      	ldrh	r3, [r7, #26]
 8007a1a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a1e:	b21b      	sxth	r3, r3
 8007a20:	fb02 f303 	mul.w	r3, r2, r3
 8007a24:	4a71      	ldr	r2, [pc, #452]	; (8007bec <lv_obj_refr_pos+0x344>)
 8007a26:	fb82 1203 	smull	r1, r2, r2, r3
 8007a2a:	1152      	asrs	r2, r2, #5
 8007a2c:	17db      	asrs	r3, r3, #31
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	837b      	strh	r3, [r7, #26]
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8007a32:	8b3b      	ldrh	r3, [r7, #24]
 8007a34:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a3c:	d123      	bne.n	8007a86 <lv_obj_refr_pos+0x1de>
 8007a3e:	8b3b      	ldrh	r3, [r7, #24]
 8007a40:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007a4a:	dc1c      	bgt.n	8007a86 <lv_obj_refr_pos+0x1de>
 8007a4c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007a50:	8b3b      	ldrh	r3, [r7, #24]
 8007a52:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a5c:	dd06      	ble.n	8007a6c <lv_obj_refr_pos+0x1c4>
 8007a5e:	8b3b      	ldrh	r3, [r7, #24]
 8007a60:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a64:	b21b      	sxth	r3, r3
 8007a66:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007a6a:	e003      	b.n	8007a74 <lv_obj_refr_pos+0x1cc>
 8007a6c:	8b3b      	ldrh	r3, [r7, #24]
 8007a6e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	fb02 f303 	mul.w	r3, r2, r3
 8007a78:	4a5c      	ldr	r2, [pc, #368]	; (8007bec <lv_obj_refr_pos+0x344>)
 8007a7a:	fb82 1203 	smull	r1, r2, r2, r3
 8007a7e:	1152      	asrs	r2, r2, #5
 8007a80:	17db      	asrs	r3, r3, #31
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	833b      	strh	r3, [r7, #24]

    /*Use the translation*/
    x += tr_x;
 8007a86:	8bfa      	ldrh	r2, [r7, #30]
 8007a88:	8b7b      	ldrh	r3, [r7, #26]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	83fb      	strh	r3, [r7, #30]
    y += tr_y;
 8007a90:	8bba      	ldrh	r2, [r7, #28]
 8007a92:	8b3b      	ldrh	r3, [r7, #24]
 8007a94:	4413      	add	r3, r2
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	83bb      	strh	r3, [r7, #28]

    lv_align_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fa1d 	bl	8006edc <lv_obj_get_style_align>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

    if(align == LV_ALIGN_DEFAULT) {
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10b      	bne.n	8007ac4 <lv_obj_refr_pos+0x21c>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8007aac:	2100      	movs	r1, #0
 8007aae:	6938      	ldr	r0, [r7, #16]
 8007ab0:	f7ff fafe 	bl	80070b0 <lv_obj_get_style_base_dir>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d102      	bne.n	8007ac0 <lv_obj_refr_pos+0x218>
 8007aba:	2303      	movs	r3, #3
 8007abc:	75fb      	strb	r3, [r7, #23]
 8007abe:	e001      	b.n	8007ac4 <lv_obj_refr_pos+0x21c>
        else align = LV_ALIGN_TOP_LEFT;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
    }

    if(align == LV_ALIGN_TOP_LEFT) {
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d108      	bne.n	8007adc <lv_obj_refr_pos+0x234>
        lv_obj_move_to(obj, x, y);
 8007aca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007ace:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f8e5 	bl	8007ca4 <lv_obj_move_to>
 8007ada:	e0e0      	b.n	8007c9e <lv_obj_refr_pos+0x3f6>
    }
    else {

        switch(align) {
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	3b02      	subs	r3, #2
 8007ae0:	2b07      	cmp	r3, #7
 8007ae2:	f200 80d1 	bhi.w	8007c88 <lv_obj_refr_pos+0x3e0>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <lv_obj_refr_pos+0x244>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b0d 	.word	0x08007b0d
 8007af0:	08007b3b 	.word	0x08007b3b
 8007af4:	08007b7b 	.word	0x08007b7b
 8007af8:	08007b8d 	.word	0x08007b8d
 8007afc:	08007bcb 	.word	0x08007bcb
 8007b00:	08007b4d 	.word	0x08007b4d
 8007b04:	08007bf1 	.word	0x08007bf1
 8007b08:	08007c2f 	.word	0x08007c2f
            case LV_ALIGN_TOP_MID:
                x += pw / 2 - w / 2;
 8007b0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da00      	bge.n	8007b16 <lv_obj_refr_pos+0x26e>
 8007b14:	3301      	adds	r3, #1
 8007b16:	105b      	asrs	r3, r3, #1
 8007b18:	b21b      	sxth	r3, r3
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	da00      	bge.n	8007b26 <lv_obj_refr_pos+0x27e>
 8007b24:	3301      	adds	r3, #1
 8007b26:	105b      	asrs	r3, r3, #1
 8007b28:	b21b      	sxth	r3, r3
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	8bfb      	ldrh	r3, [r7, #30]
 8007b32:	4413      	add	r3, r2
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	83fb      	strh	r3, [r7, #30]
                break;
 8007b38:	e0a7      	b.n	8007c8a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_TOP_RIGHT:
                x += pw - w;
 8007b3a:	89fa      	ldrh	r2, [r7, #14]
 8007b3c:	897b      	ldrh	r3, [r7, #10]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	8bfb      	ldrh	r3, [r7, #30]
 8007b44:	4413      	add	r3, r2
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	83fb      	strh	r3, [r7, #30]
                break;
 8007b4a:	e09e      	b.n	8007c8a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_LEFT_MID:
                y += ph / 2 - h / 2;
 8007b4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	da00      	bge.n	8007b56 <lv_obj_refr_pos+0x2ae>
 8007b54:	3301      	adds	r3, #1
 8007b56:	105b      	asrs	r3, r3, #1
 8007b58:	b21b      	sxth	r3, r3
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da00      	bge.n	8007b66 <lv_obj_refr_pos+0x2be>
 8007b64:	3301      	adds	r3, #1
 8007b66:	105b      	asrs	r3, r3, #1
 8007b68:	b21b      	sxth	r3, r3
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	8bbb      	ldrh	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	83bb      	strh	r3, [r7, #28]
                break;
 8007b78:	e087      	b.n	8007c8a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_LEFT:
                y += ph - h;
 8007b7a:	89ba      	ldrh	r2, [r7, #12]
 8007b7c:	893b      	ldrh	r3, [r7, #8]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	8bbb      	ldrh	r3, [r7, #28]
 8007b84:	4413      	add	r3, r2
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	83bb      	strh	r3, [r7, #28]
                break;
 8007b8a:	e07e      	b.n	8007c8a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_MID:
                x += pw / 2 - w / 2;
 8007b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da00      	bge.n	8007b96 <lv_obj_refr_pos+0x2ee>
 8007b94:	3301      	adds	r3, #1
 8007b96:	105b      	asrs	r3, r3, #1
 8007b98:	b21b      	sxth	r3, r3
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	da00      	bge.n	8007ba6 <lv_obj_refr_pos+0x2fe>
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	105b      	asrs	r3, r3, #1
 8007ba8:	b21b      	sxth	r3, r3
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	8bfb      	ldrh	r3, [r7, #30]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 8007bb8:	89ba      	ldrh	r2, [r7, #12]
 8007bba:	893b      	ldrh	r3, [r7, #8]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	8bbb      	ldrh	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	83bb      	strh	r3, [r7, #28]
                break;
 8007bc8:	e05f      	b.n	8007c8a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_RIGHT:
                x += pw - w;
 8007bca:	89fa      	ldrh	r2, [r7, #14]
 8007bcc:	897b      	ldrh	r3, [r7, #10]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	8bfb      	ldrh	r3, [r7, #30]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 8007bda:	89ba      	ldrh	r2, [r7, #12]
 8007bdc:	893b      	ldrh	r3, [r7, #8]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	8bbb      	ldrh	r3, [r7, #28]
 8007be4:	4413      	add	r3, r2
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	83bb      	strh	r3, [r7, #28]
                break;
 8007bea:	e04e      	b.n	8007c8a <lv_obj_refr_pos+0x3e2>
 8007bec:	51eb851f 	.word	0x51eb851f
            case LV_ALIGN_RIGHT_MID:
                x += pw - w;
 8007bf0:	89fa      	ldrh	r2, [r7, #14]
 8007bf2:	897b      	ldrh	r3, [r7, #10]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	8bfb      	ldrh	r3, [r7, #30]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 8007c00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da00      	bge.n	8007c0a <lv_obj_refr_pos+0x362>
 8007c08:	3301      	adds	r3, #1
 8007c0a:	105b      	asrs	r3, r3, #1
 8007c0c:	b21b      	sxth	r3, r3
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	da00      	bge.n	8007c1a <lv_obj_refr_pos+0x372>
 8007c18:	3301      	adds	r3, #1
 8007c1a:	105b      	asrs	r3, r3, #1
 8007c1c:	b21b      	sxth	r3, r3
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	8bbb      	ldrh	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	83bb      	strh	r3, [r7, #28]
                break;
 8007c2c:	e02d      	b.n	8007c8a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_CENTER:
                x += pw / 2 - w / 2;
 8007c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da00      	bge.n	8007c38 <lv_obj_refr_pos+0x390>
 8007c36:	3301      	adds	r3, #1
 8007c38:	105b      	asrs	r3, r3, #1
 8007c3a:	b21b      	sxth	r3, r3
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da00      	bge.n	8007c48 <lv_obj_refr_pos+0x3a0>
 8007c46:	3301      	adds	r3, #1
 8007c48:	105b      	asrs	r3, r3, #1
 8007c4a:	b21b      	sxth	r3, r3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	8bfb      	ldrh	r3, [r7, #30]
 8007c54:	4413      	add	r3, r2
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 8007c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da00      	bge.n	8007c64 <lv_obj_refr_pos+0x3bc>
 8007c62:	3301      	adds	r3, #1
 8007c64:	105b      	asrs	r3, r3, #1
 8007c66:	b21b      	sxth	r3, r3
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da00      	bge.n	8007c74 <lv_obj_refr_pos+0x3cc>
 8007c72:	3301      	adds	r3, #1
 8007c74:	105b      	asrs	r3, r3, #1
 8007c76:	b21b      	sxth	r3, r3
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	8bbb      	ldrh	r3, [r7, #28]
 8007c80:	4413      	add	r3, r2
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	83bb      	strh	r3, [r7, #28]
                break;
 8007c86:	e000      	b.n	8007c8a <lv_obj_refr_pos+0x3e2>
            default:
                break;
 8007c88:	bf00      	nop
        }
        lv_obj_move_to(obj, x, y);
 8007c8a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007c8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f805 	bl	8007ca4 <lv_obj_move_to>
 8007c9a:	e000      	b.n	8007c9e <lv_obj_refr_pos+0x3f6>
    if(lv_obj_is_layout_positioned(obj)) return;
 8007c9c:	bf00      	nop
    }
}
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <lv_obj_move_to>:

void lv_obj_move_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b08d      	sub	sp, #52	; 0x34
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	807b      	strh	r3, [r7, #2]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * parent = obj->parent;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28

    if(parent) {
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d05a      	beq.n	8007d76 <lv_obj_move_to+0xd2>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc4:	f7ff f9ac 	bl	8007020 <lv_obj_get_style_pad_left>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8007ccc:	2100      	movs	r1, #0
 8007cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd0:	f7ff f982 	bl	8006fd8 <lv_obj_get_style_pad_top>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	84bb      	strh	r3, [r7, #36]	; 0x24

        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 8007cd8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fd f802 	bl	8004ce6 <lv_obj_has_flag>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d016      	beq.n	8007d16 <lv_obj_move_to+0x72>
            x += pad_left + parent->coords.x1;
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cf2:	4413      	add	r3, r2
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	887b      	ldrh	r3, [r7, #2]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1;
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d08:	4413      	add	r3, r2
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	883b      	ldrh	r3, [r7, #0]
 8007d0e:	4413      	add	r3, r2
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	803b      	strh	r3, [r7, #0]
 8007d14:	e01f      	b.n	8007d56 <lv_obj_move_to+0xb2>
        }
        else {
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8007d16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d1c:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8007d20:	189c      	adds	r4, r3, r2
 8007d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d24:	f001 f968 	bl	8008ff8 <lv_obj_get_scroll_x>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	1ae3      	subs	r3, r4, r3
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	887b      	ldrh	r3, [r7, #2]
 8007d30:	4413      	add	r3, r2
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8007d36:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8007d40:	189c      	adds	r4, r3, r2
 8007d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d44:	f001 f970 	bl	8009028 <lv_obj_get_scroll_y>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	1ae3      	subs	r3, r4, r3
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	883b      	ldrh	r3, [r7, #0]
 8007d50:	4413      	add	r3, r2
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	803b      	strh	r3, [r7, #0]
        }

        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8007d56:	2100      	movs	r1, #0
 8007d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d5a:	f7ff f985 	bl	8007068 <lv_obj_get_style_border_width>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	847b      	strh	r3, [r7, #34]	; 0x22
        x += border_width;
 8007d62:	887a      	ldrh	r2, [r7, #2]
 8007d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d66:	4413      	add	r3, r2
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	807b      	strh	r3, [r7, #2]
        y += border_width;
 8007d6c:	883a      	ldrh	r2, [r7, #0]
 8007d6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d70:	4413      	add	r3, r2
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 8007d76:	887a      	ldrh	r2, [r7, #2]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	b21b      	sxth	r3, r3
 8007d86:	83bb      	strh	r3, [r7, #28]
    diff.y = y - obj->coords.y1;
 8007d88:	883a      	ldrh	r2, [r7, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	b21b      	sxth	r3, r3
 8007d98:	83fb      	strh	r3, [r7, #30]

    /*Do nothing if the position is not changed*/
    /*It is very important else recursive positioning can
     *occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 8007d9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d104      	bne.n	8007dac <lv_obj_move_to+0x108>
 8007da2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 808e 	beq.w	8007ec8 <lv_obj_move_to+0x224>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa22 	bl	80081f6 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8007db2:	f107 0314 	add.w	r3, r7, #20
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff fc43 	bl	8007644 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    bool on1 = false;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(parent) {
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01a      	beq.n	8007e00 <lv_obj_move_to+0x15c>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8007dca:	f107 030c 	add.w	r3, r7, #12
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd2:	f7ff fcb8 	bl	8007746 <lv_obj_get_content_coords>

        /*If the object is already out of the parent and its position is changes
         *surely the scrollbars also changes so invalidate them*/
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8007dd6:	f107 010c 	add.w	r1, r7, #12
 8007dda:	f107 0314 	add.w	r3, r7, #20
 8007dde:	2200      	movs	r2, #0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f016 ff9f 	bl	801ed24 <_lv_area_is_in>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8007dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007df0:	f083 0301 	eor.w	r3, r3, #1
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <lv_obj_move_to+0x15c>
 8007dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dfc:	f002 fb98 	bl	800a530 <lv_obj_scrollbar_invalidate>
    }

    obj->coords.x1 += diff.x;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	4413      	add	r3, r2
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	b21a      	sxth	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	829a      	strh	r2, [r3, #20]
    obj->coords.y1 += diff.y;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4413      	add	r3, r2
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	b21a      	sxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	82da      	strh	r2, [r3, #22]
    obj->coords.x2 += diff.x;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	4413      	add	r3, r2
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	b21a      	sxth	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	831a      	strh	r2, [r3, #24]
    obj->coords.y2 += diff.y;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	4413      	add	r3, r2
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	b21a      	sxth	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	835a      	strh	r2, [r3, #26]

    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8007e60:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8007e64:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f830 	bl	8007ed0 <lv_obj_move_children_by>

    /*Call the ancestor's event handler to the parent too*/
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d004      	beq.n	8007e80 <lv_obj_move_to+0x1dc>
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	2122      	movs	r1, #34	; 0x22
 8007e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7c:	f7fb fdee 	bl	8003a5c <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f9b8 	bl	80081f6 <lv_obj_invalidate>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the srollbars*/
    if(parent) {
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01e      	beq.n	8007eca <lv_obj_move_to+0x226>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3314      	adds	r3, #20
 8007e90:	f107 010c 	add.w	r1, r7, #12
 8007e94:	2200      	movs	r2, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f016 ff44 	bl	801ed24 <_lv_area_is_in>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8007ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <lv_obj_move_to+0x21c>
 8007eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007eae:	f083 0301 	eor.w	r3, r3, #1
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d008      	beq.n	8007eca <lv_obj_move_to+0x226>
 8007eb8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d004      	beq.n	8007eca <lv_obj_move_to+0x226>
 8007ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec2:	f002 fb35 	bl	800a530 <lv_obj_scrollbar_invalidate>
 8007ec6:	e000      	b.n	8007eca <lv_obj_move_to+0x226>
    if(diff.x == 0 && diff.y == 0) return;
 8007ec8:	bf00      	nop
    }
}
 8007eca:	3734      	adds	r7, #52	; 0x34
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd90      	pop	{r4, r7, pc}

08007ed0 <lv_obj_move_children_by>:

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	4608      	mov	r0, r1
 8007eda:	4611      	mov	r1, r2
 8007edc:	461a      	mov	r2, r3
 8007ede:	4603      	mov	r3, r0
 8007ee0:	817b      	strh	r3, [r7, #10]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	813b      	strh	r3, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f004 faf1 	bl	800c4d2 <lv_obj_get_child_cnt>
 8007ef0:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	e047      	b.n	8007f88 <lv_obj_move_children_by+0xb8>
        lv_obj_t * child = obj->spec_attr->children[i];
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	617b      	str	r3, [r7, #20]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <lv_obj_move_children_by+0x4e>
 8007f0e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8007f12:	6978      	ldr	r0, [r7, #20]
 8007f14:	f7fc fee7 	bl	8004ce6 <lv_obj_has_flag>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d130      	bne.n	8007f80 <lv_obj_move_children_by+0xb0>
        child->coords.x1 += x_diff;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	897b      	ldrh	r3, [r7, #10]
 8007f28:	4413      	add	r3, r2
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	b21a      	sxth	r2, r3
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	829a      	strh	r2, [r3, #20]
        child->coords.y1 += y_diff;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	893b      	ldrh	r3, [r7, #8]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	b21a      	sxth	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	82da      	strh	r2, [r3, #22]
        child->coords.x2 += x_diff;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	897b      	ldrh	r3, [r7, #10]
 8007f50:	4413      	add	r3, r2
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	b21a      	sxth	r2, r3
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	831a      	strh	r2, [r3, #24]
        child->coords.y2 += y_diff;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	893b      	ldrh	r3, [r7, #8]
 8007f64:	4413      	add	r3, r2
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	b21a      	sxth	r2, r3
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	835a      	strh	r2, [r3, #26]

        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8007f6e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007f72:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007f76:	2300      	movs	r3, #0
 8007f78:	6978      	ldr	r0, [r7, #20]
 8007f7a:	f7ff ffa9 	bl	8007ed0 <lv_obj_move_children_by>
 8007f7e:	e000      	b.n	8007f82 <lv_obj_move_children_by+0xb2>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8007f80:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	3301      	adds	r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d3b3      	bcc.n	8007ef8 <lv_obj_move_children_by+0x28>
    }
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <lv_obj_transform_point>:

void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, bool recursive, bool inv)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b086      	sub	sp, #24
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	460b      	mov	r3, r1
 8007faa:	71fb      	strb	r3, [r7, #7]
 8007fac:	4613      	mov	r3, r2
 8007fae:	71bb      	strb	r3, [r7, #6]
    if(obj) {
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d036      	beq.n	8008024 <lv_obj_transform_point+0x8a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7fe fe9d 	bl	8006cf6 <_lv_obj_get_layer_type>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]
        bool do_tranf = layer_type == LV_LAYER_TYPE_TRANSFORM;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2301      	moveq	r3, #1
 8007fc8:	2300      	movne	r3, #0
 8007fca:	75bb      	strb	r3, [r7, #22]
        if(inv) {
 8007fcc:	79bb      	ldrb	r3, [r7, #6]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d014      	beq.n	8007ffc <lv_obj_transform_point+0x62>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <lv_obj_transform_point+0x4e>
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f004 fa69 	bl	800c4b0 <lv_obj_get_parent>
 8007fde:	79bb      	ldrb	r3, [r7, #6]
 8007fe0:	79fa      	ldrb	r2, [r7, #7]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	f7ff ffd9 	bl	8007f9a <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 8007fe8:	7dbb      	ldrb	r3, [r7, #22]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01a      	beq.n	8008024 <lv_obj_transform_point+0x8a>
 8007fee:	79bb      	ldrb	r3, [r7, #6]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fd8d 	bl	8008b14 <transform_point>
        else {
            if(do_tranf) transform_point(obj, p, inv);
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
        }
    }
}
 8007ffa:	e013      	b.n	8008024 <lv_obj_transform_point+0x8a>
            if(do_tranf) transform_point(obj, p, inv);
 8007ffc:	7dbb      	ldrb	r3, [r7, #22]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <lv_obj_transform_point+0x74>
 8008002:	79bb      	ldrb	r3, [r7, #6]
 8008004:	461a      	mov	r2, r3
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fd83 	bl	8008b14 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <lv_obj_transform_point+0x8a>
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f004 fa4b 	bl	800c4b0 <lv_obj_get_parent>
 800801a:	79bb      	ldrb	r3, [r7, #6]
 800801c:	79fa      	ldrb	r2, [r7, #7]
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	f7ff ffbb 	bl	8007f9a <lv_obj_transform_point>
}
 8008024:	bf00      	nop
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <lv_obj_get_transformed_area>:

void lv_obj_get_transformed_area(const lv_obj_t * obj, lv_area_t * area, bool recursive,
                                 bool inv)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	4611      	mov	r1, r2
 8008038:	461a      	mov	r2, r3
 800803a:	460b      	mov	r3, r1
 800803c:	71fb      	strb	r3, [r7, #7]
 800803e:	4613      	mov	r3, r2
 8008040:	71bb      	strb	r3, [r7, #6]
    lv_point_t p[4] = {
        {area->x1, area->y1},
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 8008048:	823b      	strh	r3, [r7, #16]
        {area->x1, area->y1},
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 8008050:	827b      	strh	r3, [r7, #18]
        {area->x1, area->y2},
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 8008058:	82bb      	strh	r3, [r7, #20]
        {area->x1, area->y2},
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 8008060:	82fb      	strh	r3, [r7, #22]
        {area->x2, area->y1},
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 8008068:	833b      	strh	r3, [r7, #24]
        {area->x2, area->y1},
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 8008070:	837b      	strh	r3, [r7, #26]
        {area->x2, area->y2},
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 8008078:	83bb      	strh	r3, [r7, #28]
        {area->x2, area->y2},
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 8008080:	83fb      	strh	r3, [r7, #30]
    };

    lv_obj_transform_point(obj, &p[0], recursive, inv);
 8008082:	79bb      	ldrb	r3, [r7, #6]
 8008084:	79fa      	ldrb	r2, [r7, #7]
 8008086:	f107 0110 	add.w	r1, r7, #16
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff ff85 	bl	8007f9a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 8008090:	79b8      	ldrb	r0, [r7, #6]
 8008092:	79fa      	ldrb	r2, [r7, #7]
 8008094:	f107 0310 	add.w	r3, r7, #16
 8008098:	1d19      	adds	r1, r3, #4
 800809a:	4603      	mov	r3, r0
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff ff7c 	bl	8007f9a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 80080a2:	79b8      	ldrb	r0, [r7, #6]
 80080a4:	79fa      	ldrb	r2, [r7, #7]
 80080a6:	f107 0310 	add.w	r3, r7, #16
 80080aa:	f103 0108 	add.w	r1, r3, #8
 80080ae:	4603      	mov	r3, r0
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff ff72 	bl	8007f9a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 80080b6:	79b8      	ldrb	r0, [r7, #6]
 80080b8:	79fa      	ldrb	r2, [r7, #7]
 80080ba:	f107 0310 	add.w	r3, r7, #16
 80080be:	f103 010c 	add.w	r1, r3, #12
 80080c2:	4603      	mov	r3, r0
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff ff68 	bl	8007f9a <lv_obj_transform_point>

    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 80080ca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80080ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80080d2:	4293      	cmp	r3, r2
 80080d4:	bfa8      	it	ge
 80080d6:	4613      	movge	r3, r2
 80080d8:	b21a      	sxth	r2, r3
 80080da:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80080de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80080e2:	428b      	cmp	r3, r1
 80080e4:	bfa8      	it	ge
 80080e6:	460b      	movge	r3, r1
 80080e8:	b21b      	sxth	r3, r3
 80080ea:	4293      	cmp	r3, r2
 80080ec:	bfa8      	it	ge
 80080ee:	4613      	movge	r3, r2
 80080f0:	b21a      	sxth	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	801a      	strh	r2, [r3, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 80080f6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80080fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80080fe:	4293      	cmp	r3, r2
 8008100:	bfb8      	it	lt
 8008102:	4613      	movlt	r3, r2
 8008104:	b21a      	sxth	r2, r3
 8008106:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800810a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800810e:	428b      	cmp	r3, r1
 8008110:	bfb8      	it	lt
 8008112:	460b      	movlt	r3, r1
 8008114:	b21b      	sxth	r3, r3
 8008116:	4293      	cmp	r3, r2
 8008118:	bfb8      	it	lt
 800811a:	4613      	movlt	r3, r2
 800811c:	b21a      	sxth	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	809a      	strh	r2, [r3, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8008122:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008126:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800812a:	4293      	cmp	r3, r2
 800812c:	bfa8      	it	ge
 800812e:	4613      	movge	r3, r2
 8008130:	b21a      	sxth	r2, r3
 8008132:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8008136:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800813a:	428b      	cmp	r3, r1
 800813c:	bfa8      	it	ge
 800813e:	460b      	movge	r3, r1
 8008140:	b21b      	sxth	r3, r3
 8008142:	4293      	cmp	r3, r2
 8008144:	bfa8      	it	ge
 8008146:	4613      	movge	r3, r2
 8008148:	b21a      	sxth	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	805a      	strh	r2, [r3, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 800814e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008152:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008156:	4293      	cmp	r3, r2
 8008158:	bfb8      	it	lt
 800815a:	4613      	movlt	r3, r2
 800815c:	b21a      	sxth	r2, r3
 800815e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8008162:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008166:	428b      	cmp	r3, r1
 8008168:	bfb8      	it	lt
 800816a:	460b      	movlt	r3, r1
 800816c:	b21b      	sxth	r3, r3
 800816e:	4293      	cmp	r3, r2
 8008170:	bfb8      	it	lt
 8008172:	4613      	movlt	r3, r2
 8008174:	b21a      	sxth	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	80da      	strh	r2, [r3, #6]
    lv_area_increase(area, 5, 5);
 800817a:	2205      	movs	r2, #5
 800817c:	2105      	movs	r1, #5
 800817e:	68b8      	ldr	r0, [r7, #8]
 8008180:	f016 fb80 	bl	801e884 <lv_area_increase>
}
 8008184:	bf00      	nop
 8008186:	3720      	adds	r7, #32
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <lv_obj_invalidate_area>:


void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f004 f950 	bl	800c43c <lv_obj_get_disp>
 800819c:	6178      	str	r0, [r7, #20]
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800819e:	6978      	ldr	r0, [r7, #20]
 80081a0:	f7fb fc41 	bl	8003a26 <lv_disp_is_invalidation_enabled>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f083 0301 	eor.w	r3, r3, #1
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d11c      	bne.n	80081ea <lv_obj_invalidate_area+0x5e>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 80081b0:	f107 030c 	add.w	r3, r7, #12
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fe fdb3 	bl	8006d22 <lv_area_copy>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 80081bc:	f107 030c 	add.w	r3, r7, #12
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f853 	bl	800826e <lv_obj_area_is_visible>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f083 0301 	eor.w	r3, r3, #1
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10c      	bne.n	80081ee <lv_obj_invalidate_area+0x62>

    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f004 f931 	bl	800c43c <lv_obj_get_disp>
 80081da:	4602      	mov	r2, r0
 80081dc:	f107 030c 	add.w	r3, r7, #12
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f004 fb01 	bl	800c7ea <_lv_inv_area>
 80081e8:	e002      	b.n	80081f0 <lv_obj_invalidate_area+0x64>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 80081ea:	bf00      	nop
 80081ec:	e000      	b.n	80081f0 <lv_obj_invalidate_area+0x64>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 80081ee:	bf00      	nop
}
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <lv_obj_invalidate>:

void lv_obj_invalidate(const lv_obj_t * obj)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7fe fd65 	bl	8006cce <_lv_obj_get_ext_draw_size>
 8008204:	4603      	mov	r3, r0
 8008206:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f103 0214 	add.w	r2, r3, #20
 800820e:	f107 030c 	add.w	r3, r7, #12
 8008212:	4611      	mov	r1, r2
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe fd84 	bl	8006d22 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 800821a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800821e:	b29a      	uxth	r2, r3
 8008220:	8afb      	ldrh	r3, [r7, #22]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	b29b      	uxth	r3, r3
 8008226:	b21b      	sxth	r3, r3
 8008228:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 800822a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800822e:	b29a      	uxth	r2, r3
 8008230:	8afb      	ldrh	r3, [r7, #22]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	b29b      	uxth	r3, r3
 8008236:	b21b      	sxth	r3, r3
 8008238:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 800823a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800823e:	b29a      	uxth	r2, r3
 8008240:	8afb      	ldrh	r3, [r7, #22]
 8008242:	4413      	add	r3, r2
 8008244:	b29b      	uxth	r3, r3
 8008246:	b21b      	sxth	r3, r3
 8008248:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 800824a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800824e:	b29a      	uxth	r2, r3
 8008250:	8afb      	ldrh	r3, [r7, #22]
 8008252:	4413      	add	r3, r2
 8008254:	b29b      	uxth	r3, r3
 8008256:	b21b      	sxth	r3, r3
 8008258:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 800825a:	f107 030c 	add.w	r3, r7, #12
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff ff93 	bl	800818c <lv_obj_invalidate_area>

}
 8008266:	bf00      	nop
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <lv_obj_area_is_visible>:

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b08a      	sub	sp, #40	; 0x28
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8008278:	2101      	movs	r1, #1
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7fc fd33 	bl	8004ce6 <lv_obj_has_flag>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <lv_obj_area_is_visible+0x1c>
 8008286:	2300      	movs	r3, #0
 8008288:	e0b2      	b.n	80083f0 <lv_obj_area_is_visible+0x182>

    /*Invalidate the object only if it belongs to the current or previous or one of the layers'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f004 f8c2 	bl	800c414 <lv_obj_get_screen>
 8008290:	6238      	str	r0, [r7, #32]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8008292:	6a38      	ldr	r0, [r7, #32]
 8008294:	f004 f8d2 	bl	800c43c <lv_obj_get_disp>
 8008298:	61f8      	str	r0, [r7, #28]
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800829a:	69f8      	ldr	r0, [r7, #28]
 800829c:	f7fb fb5f 	bl	800395e <lv_disp_get_scr_act>
 80082a0:	4602      	mov	r2, r0
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d016      	beq.n	80082d6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 80082a8:	69f8      	ldr	r0, [r7, #28]
 80082aa:	f7fb fb6d 	bl	8003988 <lv_disp_get_scr_prev>
 80082ae:	4602      	mov	r2, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00f      	beq.n	80082d6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_top(disp) &&
 80082b6:	69f8      	ldr	r0, [r7, #28]
 80082b8:	f7fb fb7b 	bl	80039b2 <lv_disp_get_layer_top>
 80082bc:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_scr_prev(disp) &&
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d008      	beq.n	80082d6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 80082c4:	69f8      	ldr	r0, [r7, #28]
 80082c6:	f7fb fb89 	bl	80039dc <lv_disp_get_layer_sys>
 80082ca:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_layer_top(disp) &&
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d001      	beq.n	80082d6 <lv_obj_area_is_visible+0x68>
        return false;
 80082d2:	2300      	movs	r3, #0
 80082d4:	e08c      	b.n	80083f0 <lv_obj_area_is_visible+0x182>
    }

    /*Truncate the area to the object*/
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80082d6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7fc fd18 	bl	8004d10 <lv_obj_has_flag_any>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f083 0301 	eor.w	r3, r3, #1
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d03c      	beq.n	8008366 <lv_obj_area_is_visible+0xf8>
        lv_area_t obj_coords;
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fe fcee 	bl	8006cce <_lv_obj_get_ext_draw_size>
 80082f2:	4603      	mov	r3, r0
 80082f4:	837b      	strh	r3, [r7, #26]
        lv_area_copy(&obj_coords, &obj->coords);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f103 0214 	add.w	r2, r3, #20
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	4611      	mov	r1, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fd0d 	bl	8006d22 <lv_area_copy>
        obj_coords.x1 -= ext_size;
 8008308:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800830c:	b29a      	uxth	r2, r3
 800830e:	8b7b      	ldrh	r3, [r7, #26]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	b29b      	uxth	r3, r3
 8008314:	b21b      	sxth	r3, r3
 8008316:	823b      	strh	r3, [r7, #16]
        obj_coords.y1 -= ext_size;
 8008318:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800831c:	b29a      	uxth	r2, r3
 800831e:	8b7b      	ldrh	r3, [r7, #26]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	b29b      	uxth	r3, r3
 8008324:	b21b      	sxth	r3, r3
 8008326:	827b      	strh	r3, [r7, #18]
        obj_coords.x2 += ext_size;
 8008328:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800832c:	b29a      	uxth	r2, r3
 800832e:	8b7b      	ldrh	r3, [r7, #26]
 8008330:	4413      	add	r3, r2
 8008332:	b29b      	uxth	r3, r3
 8008334:	b21b      	sxth	r3, r3
 8008336:	82bb      	strh	r3, [r7, #20]
        obj_coords.y2 += ext_size;
 8008338:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800833c:	b29a      	uxth	r2, r3
 800833e:	8b7b      	ldrh	r3, [r7, #26]
 8008340:	4413      	add	r3, r2
 8008342:	b29b      	uxth	r3, r3
 8008344:	b21b      	sxth	r3, r3
 8008346:	82fb      	strh	r3, [r7, #22]

        /*The area is not on the object*/
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	461a      	mov	r2, r3
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6838      	ldr	r0, [r7, #0]
 8008352:	f016 fb03 	bl	801e95c <_lv_area_intersect>
 8008356:	4603      	mov	r3, r0
 8008358:	f083 0301 	eor.w	r3, r3, #1
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <lv_obj_area_is_visible+0xf8>
 8008362:	2300      	movs	r3, #0
 8008364:	e044      	b.n	80083f0 <lv_obj_area_is_visible+0x182>
    }

    lv_obj_get_transformed_area(obj, area, true, false);
 8008366:	2300      	movs	r3, #0
 8008368:	2201      	movs	r2, #1
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff fe5d 	bl	800802c <lv_obj_get_transformed_area>


    /*Truncate recursively to the parents*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f004 f89c 	bl	800c4b0 <lv_obj_get_parent>
 8008378:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 800837a:	e035      	b.n	80083e8 <lv_obj_area_is_visible+0x17a>
        /*If the parent is hidden then the child is hidden and won't be drawn*/
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 800837c:	2101      	movs	r1, #1
 800837e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008380:	f7fc fcb1 	bl	8004ce6 <lv_obj_has_flag>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <lv_obj_area_is_visible+0x120>
 800838a:	2300      	movs	r3, #0
 800838c:	e030      	b.n	80083f0 <lv_obj_area_is_visible+0x182>

        /*Truncate to the parent and if no common parts break*/
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800838e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008394:	f7fc fcbc 	bl	8004d10 <lv_obj_has_flag_any>
 8008398:	4603      	mov	r3, r0
 800839a:	f083 0301 	eor.w	r3, r3, #1
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01d      	beq.n	80083e0 <lv_obj_area_is_visible+0x172>
            lv_area_t par_area = par->coords;
 80083a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a6:	f107 0308 	add.w	r3, r7, #8
 80083aa:	3214      	adds	r2, #20
 80083ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083b0:	e883 0003 	stmia.w	r3, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 80083b4:	f107 0108 	add.w	r1, r7, #8
 80083b8:	2300      	movs	r3, #0
 80083ba:	2201      	movs	r2, #1
 80083bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083be:	f7ff fe35 	bl	800802c <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 80083c2:	f107 0308 	add.w	r3, r7, #8
 80083c6:	461a      	mov	r2, r3
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6838      	ldr	r0, [r7, #0]
 80083cc:	f016 fac6 	bl	801e95c <_lv_area_intersect>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f083 0301 	eor.w	r3, r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <lv_obj_area_is_visible+0x172>
 80083dc:	2300      	movs	r3, #0
 80083de:	e007      	b.n	80083f0 <lv_obj_area_is_visible+0x182>
        }

        par = lv_obj_get_parent(par);
 80083e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083e2:	f004 f865 	bl	800c4b0 <lv_obj_get_parent>
 80083e6:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1c6      	bne.n	800837c <lv_obj_area_is_visible+0x10e>
    }

    return true;
 80083ee:	2301      	movs	r3, #1
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3728      	adds	r7, #40	; 0x28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <lv_clamp_width>:

    return res;
}

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 80083f8:	b490      	push	{r4, r7}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	4611      	mov	r1, r2
 8008404:	461a      	mov	r2, r3
 8008406:	4623      	mov	r3, r4
 8008408:	80fb      	strh	r3, [r7, #6]
 800840a:	4603      	mov	r3, r0
 800840c:	80bb      	strh	r3, [r7, #4]
 800840e:	460b      	mov	r3, r1
 8008410:	807b      	strh	r3, [r7, #2]
 8008412:	4613      	mov	r3, r2
 8008414:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8008416:	88bb      	ldrh	r3, [r7, #4]
 8008418:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800841c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008420:	d123      	bne.n	800846a <lv_clamp_width+0x72>
 8008422:	88bb      	ldrh	r3, [r7, #4]
 8008424:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008428:	b21b      	sxth	r3, r3
 800842a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800842e:	dc1c      	bgt.n	800846a <lv_clamp_width+0x72>
 8008430:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008434:	88bb      	ldrh	r3, [r7, #4]
 8008436:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800843a:	b21b      	sxth	r3, r3
 800843c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008440:	dd06      	ble.n	8008450 <lv_clamp_width+0x58>
 8008442:	88bb      	ldrh	r3, [r7, #4]
 8008444:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008448:	b21b      	sxth	r3, r3
 800844a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800844e:	e003      	b.n	8008458 <lv_clamp_width+0x60>
 8008450:	88bb      	ldrh	r3, [r7, #4]
 8008452:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008456:	b21b      	sxth	r3, r3
 8008458:	fb02 f303 	mul.w	r3, r2, r3
 800845c:	4a21      	ldr	r2, [pc, #132]	; (80084e4 <lv_clamp_width+0xec>)
 800845e:	fb82 1203 	smull	r1, r2, r2, r3
 8008462:	1152      	asrs	r2, r2, #5
 8008464:	17db      	asrs	r3, r3, #31
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 800846a:	887b      	ldrh	r3, [r7, #2]
 800846c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008474:	d123      	bne.n	80084be <lv_clamp_width+0xc6>
 8008476:	887b      	ldrh	r3, [r7, #2]
 8008478:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800847c:	b21b      	sxth	r3, r3
 800847e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008482:	dc1c      	bgt.n	80084be <lv_clamp_width+0xc6>
 8008484:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008488:	887b      	ldrh	r3, [r7, #2]
 800848a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800848e:	b21b      	sxth	r3, r3
 8008490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008494:	dd06      	ble.n	80084a4 <lv_clamp_width+0xac>
 8008496:	887b      	ldrh	r3, [r7, #2]
 8008498:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800849c:	b21b      	sxth	r3, r3
 800849e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80084a2:	e003      	b.n	80084ac <lv_clamp_width+0xb4>
 80084a4:	887b      	ldrh	r3, [r7, #2]
 80084a6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80084aa:	b21b      	sxth	r3, r3
 80084ac:	fb02 f303 	mul.w	r3, r2, r3
 80084b0:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <lv_clamp_width+0xec>)
 80084b2:	fb82 1203 	smull	r1, r2, r2, r3
 80084b6:	1152      	asrs	r2, r2, #5
 80084b8:	17db      	asrs	r3, r3, #31
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_width, width, max_width);
 80084be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80084c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084c6:	4293      	cmp	r3, r2
 80084c8:	bfa8      	it	ge
 80084ca:	4613      	movge	r3, r2
 80084cc:	b21b      	sxth	r3, r3
 80084ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80084d2:	4293      	cmp	r3, r2
 80084d4:	bfb8      	it	lt
 80084d6:	4613      	movlt	r3, r2
 80084d8:	b21b      	sxth	r3, r3
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc90      	pop	{r4, r7}
 80084e2:	4770      	bx	lr
 80084e4:	51eb851f 	.word	0x51eb851f

080084e8 <lv_clamp_height>:

lv_coord_t lv_clamp_height(lv_coord_t height, lv_coord_t min_height, lv_coord_t max_height, lv_coord_t ref_height)
{
 80084e8:	b490      	push	{r4, r7}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	4611      	mov	r1, r2
 80084f4:	461a      	mov	r2, r3
 80084f6:	4623      	mov	r3, r4
 80084f8:	80fb      	strh	r3, [r7, #6]
 80084fa:	4603      	mov	r3, r0
 80084fc:	80bb      	strh	r3, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	807b      	strh	r3, [r7, #2]
 8008502:	4613      	mov	r3, r2
 8008504:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 8008506:	88bb      	ldrh	r3, [r7, #4]
 8008508:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800850c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008510:	d123      	bne.n	800855a <lv_clamp_height+0x72>
 8008512:	88bb      	ldrh	r3, [r7, #4]
 8008514:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008518:	b21b      	sxth	r3, r3
 800851a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800851e:	dc1c      	bgt.n	800855a <lv_clamp_height+0x72>
 8008520:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008524:	88bb      	ldrh	r3, [r7, #4]
 8008526:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800852a:	b21b      	sxth	r3, r3
 800852c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008530:	dd06      	ble.n	8008540 <lv_clamp_height+0x58>
 8008532:	88bb      	ldrh	r3, [r7, #4]
 8008534:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008538:	b21b      	sxth	r3, r3
 800853a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800853e:	e003      	b.n	8008548 <lv_clamp_height+0x60>
 8008540:	88bb      	ldrh	r3, [r7, #4]
 8008542:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008546:	b21b      	sxth	r3, r3
 8008548:	fb02 f303 	mul.w	r3, r2, r3
 800854c:	4a21      	ldr	r2, [pc, #132]	; (80085d4 <lv_clamp_height+0xec>)
 800854e:	fb82 1203 	smull	r1, r2, r2, r3
 8008552:	1152      	asrs	r2, r2, #5
 8008554:	17db      	asrs	r3, r3, #31
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 800855a:	887b      	ldrh	r3, [r7, #2]
 800855c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008564:	d123      	bne.n	80085ae <lv_clamp_height+0xc6>
 8008566:	887b      	ldrh	r3, [r7, #2]
 8008568:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800856c:	b21b      	sxth	r3, r3
 800856e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008572:	dc1c      	bgt.n	80085ae <lv_clamp_height+0xc6>
 8008574:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008578:	887b      	ldrh	r3, [r7, #2]
 800857a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800857e:	b21b      	sxth	r3, r3
 8008580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008584:	dd06      	ble.n	8008594 <lv_clamp_height+0xac>
 8008586:	887b      	ldrh	r3, [r7, #2]
 8008588:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800858c:	b21b      	sxth	r3, r3
 800858e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008592:	e003      	b.n	800859c <lv_clamp_height+0xb4>
 8008594:	887b      	ldrh	r3, [r7, #2]
 8008596:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800859a:	b21b      	sxth	r3, r3
 800859c:	fb02 f303 	mul.w	r3, r2, r3
 80085a0:	4a0c      	ldr	r2, [pc, #48]	; (80085d4 <lv_clamp_height+0xec>)
 80085a2:	fb82 1203 	smull	r1, r2, r2, r3
 80085a6:	1152      	asrs	r2, r2, #5
 80085a8:	17db      	asrs	r3, r3, #31
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_height, height, max_height);
 80085ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80085b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085b6:	4293      	cmp	r3, r2
 80085b8:	bfa8      	it	ge
 80085ba:	4613      	movge	r3, r2
 80085bc:	b21b      	sxth	r3, r3
 80085be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80085c2:	4293      	cmp	r3, r2
 80085c4:	bfb8      	it	lt
 80085c6:	4613      	movlt	r3, r2
 80085c8:	b21b      	sxth	r3, r3
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc90      	pop	{r4, r7}
 80085d2:	4770      	bx	lr
 80085d4:	51eb851f 	.word	0x51eb851f

080085d8 <calc_content_width>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
 80085d8:	b590      	push	{r4, r7, lr}
 80085da:	b08d      	sub	sp, #52	; 0x34
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 80085e0:	2200      	movs	r2, #0
 80085e2:	2100      	movs	r1, #0
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f923 	bl	8009830 <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80085ea:	2100      	movs	r1, #0
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7fe fd3b 	bl	8007068 <lv_obj_get_style_border_width>
 80085f2:	4603      	mov	r3, r0
 80085f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80085f6:	2100      	movs	r1, #0
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7fe fd23 	bl	8007044 <lv_obj_get_style_pad_right>
 80085fe:	4603      	mov	r3, r0
 8008600:	b29a      	uxth	r2, r3
 8008602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008604:	4413      	add	r3, r2
 8008606:	b29b      	uxth	r3, r3
 8008608:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800860a:	2100      	movs	r1, #0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7fe fd07 	bl	8007020 <lv_obj_get_style_pad_left>
 8008612:	4603      	mov	r3, r0
 8008614:	b29a      	uxth	r2, r3
 8008616:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008618:	4413      	add	r3, r2
 800861a:	b29b      	uxth	r3, r3
 800861c:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff f8f0 	bl	8007804 <lv_obj_get_self_width>
 8008624:	4603      	mov	r3, r0
 8008626:	b29a      	uxth	r2, r3
 8008628:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800862a:	4413      	add	r3, r2
 800862c:	b29a      	uxth	r2, r3
 800862e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008630:	4413      	add	r3, r2
 8008632:	b29b      	uxth	r3, r3
 8008634:	843b      	strh	r3, [r7, #32]

    lv_coord_t child_res = LV_COORD_MIN;
 8008636:	f24e 0301 	movw	r3, #57345	; 0xe001
 800863a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f003 ff48 	bl	800c4d2 <lv_obj_get_child_cnt>
 8008642:	61f8      	str	r0, [r7, #28]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008644:	2100      	movs	r1, #0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fe fd32 	bl	80070b0 <lv_obj_get_style_base_dir>
 800864c:	4603      	mov	r3, r0
 800864e:	2b01      	cmp	r3, #1
 8008650:	f040 8094 	bne.w	800877c <calc_content_width+0x1a4>
        for(i = 0; i < child_cnt; i++) {
 8008654:	2300      	movs	r3, #0
 8008656:	62bb      	str	r3, [r7, #40]	; 0x28
 8008658:	e07f      	b.n	800875a <calc_content_width+0x182>
            lv_obj_t * child = obj->spec_attr->children[i];
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	613b      	str	r3, [r7, #16]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800866a:	4994      	ldr	r1, [pc, #592]	; (80088bc <calc_content_width+0x2e4>)
 800866c:	6938      	ldr	r0, [r7, #16]
 800866e:	f7fc fb4f 	bl	8004d10 <lv_obj_has_flag_any>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d16c      	bne.n	8008752 <calc_content_width+0x17a>

            if(!lv_obj_is_layout_positioned(child)) {
 8008678:	6938      	ldr	r0, [r7, #16]
 800867a:	f7fe ff67 	bl	800754c <lv_obj_is_layout_positioned>
 800867e:	4603      	mov	r3, r0
 8008680:	f083 0301 	eor.w	r3, r3, #1
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d053      	beq.n	8008732 <calc_content_width+0x15a>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 800868a:	2100      	movs	r1, #0
 800868c:	6938      	ldr	r0, [r7, #16]
 800868e:	f7fe fc25 	bl	8006edc <lv_obj_get_style_align>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
                switch(align) {
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b08      	cmp	r3, #8
 800869a:	d825      	bhi.n	80086e8 <calc_content_width+0x110>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <calc_content_width+0xcc>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086c9 	.word	0x080086c9
 80086a8:	080086e9 	.word	0x080086e9
 80086ac:	080086e9 	.word	0x080086e9
 80086b0:	080086c9 	.word	0x080086c9
 80086b4:	080086e9 	.word	0x080086e9
 80086b8:	080086e9 	.word	0x080086e9
 80086bc:	080086c9 	.word	0x080086c9
 80086c0:	080086e9 	.word	0x080086e9
 80086c4:	080086c9 	.word	0x080086c9
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_RIGHT:
                    case LV_ALIGN_BOTTOM_RIGHT:
                    case LV_ALIGN_RIGHT_MID:
                        /*Normal right aligns. Other are ignored due to possible circular dependencies*/
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80086ce:	461a      	mov	r2, r3
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	1c5a      	adds	r2, r3, #1
 80086da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80086de:	4293      	cmp	r3, r2
 80086e0:	bfb8      	it	lt
 80086e2:	4613      	movlt	r3, r2
 80086e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 80086e6:	e035      	b.n	8008754 <calc_content_width+0x17c>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_x(child, 0) == 0) {
 80086e8:	2100      	movs	r1, #0
 80086ea:	6938      	ldr	r0, [r7, #16]
 80086ec:	f7fe fbd2 	bl	8006e94 <lv_obj_get_style_x>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d12e      	bne.n	8008754 <calc_content_width+0x17c>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 80086f6:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	3314      	adds	r3, #20
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fb2e 	bl	8006d60 <lv_area_get_width>
 8008704:	4603      	mov	r3, r0
 8008706:	461a      	mov	r2, r3
 8008708:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800870c:	4413      	add	r3, r2
 800870e:	429c      	cmp	r4, r3
 8008710:	dc0b      	bgt.n	800872a <calc_content_width+0x152>
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3314      	adds	r3, #20
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fb22 	bl	8006d60 <lv_area_get_width>
 800871c:	4603      	mov	r3, r0
 800871e:	b29a      	uxth	r2, r3
 8008720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008722:	4413      	add	r3, r2
 8008724:	b29b      	uxth	r3, r3
 8008726:	b21b      	sxth	r3, r3
 8008728:	e001      	b.n	800872e <calc_content_width+0x156>
 800872a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800872e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008730:	e010      	b.n	8008754 <calc_content_width+0x17c>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8008738:	461a      	mov	r2, r3
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008748:	4293      	cmp	r3, r2
 800874a:	bfb8      	it	lt
 800874c:	4613      	movlt	r3, r2
 800874e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008750:	e000      	b.n	8008754 <calc_content_width+0x17c>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008752:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	3301      	adds	r3, #1
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28
 800875a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	429a      	cmp	r2, r3
 8008760:	f4ff af7b 	bcc.w	800865a <calc_content_width+0x82>
            }
        }
        if(child_res != LV_COORD_MIN) {
 8008764:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008768:	4a55      	ldr	r2, [pc, #340]	; (80088c0 <calc_content_width+0x2e8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	f000 8092 	beq.w	8008894 <calc_content_width+0x2bc>
            child_res += pad_left;
 8008770:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008774:	4413      	add	r3, r2
 8008776:	b29b      	uxth	r3, r3
 8008778:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800877a:	e08b      	b.n	8008894 <calc_content_width+0x2bc>
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 800877c:	2300      	movs	r3, #0
 800877e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008780:	e07a      	b.n	8008878 <calc_content_width+0x2a0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	61bb      	str	r3, [r7, #24]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008792:	494a      	ldr	r1, [pc, #296]	; (80088bc <calc_content_width+0x2e4>)
 8008794:	69b8      	ldr	r0, [r7, #24]
 8008796:	f7fc fabb 	bl	8004d10 <lv_obj_has_flag_any>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d167      	bne.n	8008870 <calc_content_width+0x298>

            if(!lv_obj_is_layout_positioned(child)) {
 80087a0:	69b8      	ldr	r0, [r7, #24]
 80087a2:	f7fe fed3 	bl	800754c <lv_obj_is_layout_positioned>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f083 0301 	eor.w	r3, r3, #1
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d04e      	beq.n	8008850 <calc_content_width+0x278>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 80087b2:	2100      	movs	r1, #0
 80087b4:	69b8      	ldr	r0, [r7, #24]
 80087b6:	f7fe fb91 	bl	8006edc <lv_obj_get_style_align>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75fb      	strb	r3, [r7, #23]
                switch(align) {
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	2b07      	cmp	r3, #7
 80087c2:	bf8c      	ite	hi
 80087c4:	2201      	movhi	r2, #1
 80087c6:	2200      	movls	r2, #0
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	d11b      	bne.n	8008806 <calc_content_width+0x22e>
 80087ce:	2201      	movs	r2, #1
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	f003 0393 	and.w	r3, r3, #147	; 0x93
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bf14      	ite	ne
 80087dc:	2301      	movne	r3, #1
 80087de:	2300      	moveq	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00f      	beq.n	8008806 <calc_content_width+0x22e>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80087ec:	461a      	mov	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bfb8      	it	lt
 8008800:	4613      	movlt	r3, r2
 8008802:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8008804:	e035      	b.n	8008872 <calc_content_width+0x29a>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8008806:	2100      	movs	r1, #0
 8008808:	69b8      	ldr	r0, [r7, #24]
 800880a:	f7fe fb55 	bl	8006eb8 <lv_obj_get_style_y>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d12e      	bne.n	8008872 <calc_content_width+0x29a>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8008814:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	3314      	adds	r3, #20
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fa9f 	bl	8006d60 <lv_area_get_width>
 8008822:	4603      	mov	r3, r0
 8008824:	461a      	mov	r2, r3
 8008826:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800882a:	4413      	add	r3, r2
 800882c:	429c      	cmp	r4, r3
 800882e:	dc0b      	bgt.n	8008848 <calc_content_width+0x270>
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	3314      	adds	r3, #20
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe fa93 	bl	8006d60 <lv_area_get_width>
 800883a:	4603      	mov	r3, r0
 800883c:	b29a      	uxth	r2, r3
 800883e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008840:	4413      	add	r3, r2
 8008842:	b29b      	uxth	r3, r3
 8008844:	b21b      	sxth	r3, r3
 8008846:	e001      	b.n	800884c <calc_content_width+0x274>
 8008848:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800884c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800884e:	e010      	b.n	8008872 <calc_content_width+0x29a>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8008856:	461a      	mov	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008866:	4293      	cmp	r3, r2
 8008868:	bfb8      	it	lt
 800886a:	4613      	movlt	r3, r2
 800886c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800886e:	e000      	b.n	8008872 <calc_content_width+0x29a>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008870:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	3301      	adds	r3, #1
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
 8008878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	429a      	cmp	r2, r3
 800887e:	d380      	bcc.n	8008782 <calc_content_width+0x1aa>
            }
        }

        if(child_res != LV_COORD_MIN) {
 8008880:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008884:	4a0e      	ldr	r2, [pc, #56]	; (80088c0 <calc_content_width+0x2e8>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <calc_content_width+0x2bc>
            child_res += pad_right;
 800888a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800888c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800888e:	4413      	add	r3, r2
 8008890:	b29b      	uxth	r3, r3
 8008892:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 8008894:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008898:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <calc_content_width+0x2e8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d102      	bne.n	80088a4 <calc_content_width+0x2cc>
 800889e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80088a2:	e007      	b.n	80088b4 <calc_content_width+0x2dc>
    else return LV_MAX(child_res, self_w);
 80088a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088a8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80088ac:	4293      	cmp	r3, r2
 80088ae:	bfb8      	it	lt
 80088b0:	4613      	movlt	r3, r2
 80088b2:	b21b      	sxth	r3, r3
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3734      	adds	r7, #52	; 0x34
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd90      	pop	{r4, r7, pc}
 80088bc:	00040001 	.word	0x00040001
 80088c0:	ffffe001 	.word	0xffffe001

080088c4 <calc_content_height>:

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b08b      	sub	sp, #44	; 0x2c
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 ffd1 	bl	8009878 <lv_obj_scroll_to_y>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80088d6:	2100      	movs	r1, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7fe fbc5 	bl	8007068 <lv_obj_get_style_border_width>
 80088de:	4603      	mov	r3, r0
 80088e0:	83fb      	strh	r3, [r7, #30]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80088e2:	2100      	movs	r1, #0
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7fe fb77 	bl	8006fd8 <lv_obj_get_style_pad_top>
 80088ea:	4603      	mov	r3, r0
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	8bfb      	ldrh	r3, [r7, #30]
 80088f0:	4413      	add	r3, r2
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 80088f6:	2100      	movs	r1, #0
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7fe fb7f 	bl	8006ffc <lv_obj_get_style_pad_bottom>
 80088fe:	4603      	mov	r3, r0
 8008900:	b29a      	uxth	r2, r3
 8008902:	8bfb      	ldrh	r3, [r7, #30]
 8008904:	4413      	add	r3, r2
 8008906:	b29b      	uxth	r3, r3
 8008908:	837b      	strh	r3, [r7, #26]

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fe ff90 	bl	8007830 <lv_obj_get_self_height>
 8008910:	4603      	mov	r3, r0
 8008912:	b29a      	uxth	r2, r3
 8008914:	8bbb      	ldrh	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	b29a      	uxth	r2, r3
 800891a:	8b7b      	ldrh	r3, [r7, #26]
 800891c:	4413      	add	r3, r2
 800891e:	b29b      	uxth	r3, r3
 8008920:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = LV_COORD_MIN;
 8008922:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008926:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f003 fdd2 	bl	800c4d2 <lv_obj_get_child_cnt>
 800892e:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 8008930:	2300      	movs	r3, #0
 8008932:	623b      	str	r3, [r7, #32]
 8008934:	e06b      	b.n	8008a0e <calc_content_height+0x14a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	613b      	str	r3, [r7, #16]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008946:	4940      	ldr	r1, [pc, #256]	; (8008a48 <calc_content_height+0x184>)
 8008948:	6938      	ldr	r0, [r7, #16]
 800894a:	f7fc f9e1 	bl	8004d10 <lv_obj_has_flag_any>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d156      	bne.n	8008a02 <calc_content_height+0x13e>


        if(!lv_obj_is_layout_positioned(child)) {
 8008954:	6938      	ldr	r0, [r7, #16]
 8008956:	f7fe fdf9 	bl	800754c <lv_obj_is_layout_positioned>
 800895a:	4603      	mov	r3, r0
 800895c:	f083 0301 	eor.w	r3, r3, #1
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d03d      	beq.n	80089e2 <calc_content_height+0x11e>
            lv_align_t align = lv_obj_get_style_align(child, 0);
 8008966:	2100      	movs	r1, #0
 8008968:	6938      	ldr	r0, [r7, #16]
 800896a:	f7fe fab7 	bl	8006edc <lv_obj_get_style_align>
 800896e:	4603      	mov	r3, r0
 8008970:	73fb      	strb	r3, [r7, #15]
            switch(align) {
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	2b03      	cmp	r3, #3
 8008976:	d80f      	bhi.n	8008998 <calc_content_height+0xd4>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800898e:	4293      	cmp	r3, r2
 8008990:	bfb8      	it	lt
 8008992:	4613      	movlt	r3, r2
 8008994:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 8008996:	e037      	b.n	8008a08 <calc_content_height+0x144>
                default:
                    /* Consider other cases only if y=0 and use the height of the object.
                     * With y!=0 circular dependency could occur. */
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8008998:	2100      	movs	r1, #0
 800899a:	6938      	ldr	r0, [r7, #16]
 800899c:	f7fe fa8c 	bl	8006eb8 <lv_obj_get_style_y>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d12f      	bne.n	8008a06 <calc_content_height+0x142>
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 80089a6:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	3314      	adds	r3, #20
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe f9ed 	bl	8006d8e <lv_area_get_height>
 80089b4:	4603      	mov	r3, r0
 80089b6:	461a      	mov	r2, r3
 80089b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80089bc:	4413      	add	r3, r2
 80089be:	429c      	cmp	r4, r3
 80089c0:	dc0b      	bgt.n	80089da <calc_content_height+0x116>
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	3314      	adds	r3, #20
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe f9e1 	bl	8006d8e <lv_area_get_height>
 80089cc:	4603      	mov	r3, r0
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	8bbb      	ldrh	r3, [r7, #28]
 80089d2:	4413      	add	r3, r2
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	b21b      	sxth	r3, r3
 80089d8:	e001      	b.n	80089de <calc_content_height+0x11a>
 80089da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80089de:	84fb      	strh	r3, [r7, #38]	; 0x26
                    }
                    break;
 80089e0:	e011      	b.n	8008a06 <calc_content_height+0x142>
            }
        }
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80089e8:	461a      	mov	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80089f8:	4293      	cmp	r3, r2
 80089fa:	bfb8      	it	lt
 80089fc:	4613      	movlt	r3, r2
 80089fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008a00:	e002      	b.n	8008a08 <calc_content_height+0x144>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008a02:	bf00      	nop
 8008a04:	e000      	b.n	8008a08 <calc_content_height+0x144>
                    break;
 8008a06:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	623b      	str	r3, [r7, #32]
 8008a0e:	6a3a      	ldr	r2, [r7, #32]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d38f      	bcc.n	8008936 <calc_content_height+0x72>
        }
    }

    if(child_res != LV_COORD_MIN) {
 8008a16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008a1a:	4a0c      	ldr	r2, [pc, #48]	; (8008a4c <calc_content_height+0x188>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d00d      	beq.n	8008a3c <calc_content_height+0x178>
        child_res += pad_bottom;
 8008a20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008a22:	8b7b      	ldrh	r3, [r7, #26]
 8008a24:	4413      	add	r3, r2
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	84fb      	strh	r3, [r7, #38]	; 0x26
        return LV_MAX(child_res, self_h);
 8008a2a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8008a2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008a32:	4293      	cmp	r3, r2
 8008a34:	bfb8      	it	lt
 8008a36:	4613      	movlt	r3, r2
 8008a38:	b21b      	sxth	r3, r3
 8008a3a:	e001      	b.n	8008a40 <calc_content_height+0x17c>
    }
    else {
        return self_h;
 8008a3c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    }

}
 8008a40:	4618      	mov	r0, r3
 8008a42:	372c      	adds	r7, #44	; 0x2c
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd90      	pop	{r4, r7, pc}
 8008a48:	00040001 	.word	0x00040001
 8008a4c:	ffffe001 	.word	0xffffe001

08008a50 <layout_update_core>:

static void layout_update_core(lv_obj_t * obj)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f003 fd3a 	bl	800c4d2 <lv_obj_get_child_cnt>
 8008a5e:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 8008a60:	2300      	movs	r3, #0
 8008a62:	61fb      	str	r3, [r7, #28]
 8008a64:	e00d      	b.n	8008a82 <layout_update_core+0x32>
        lv_obj_t * child = obj->spec_attr->children[i];
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
        layout_update_core(child);
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7ff ffea 	bl	8008a50 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d3ed      	bcc.n	8008a66 <layout_update_core+0x16>
    }

    if(obj->layout_inv == 0) return;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d034      	beq.n	8008b04 <layout_update_core+0xb4>

    obj->layout_inv = 0;
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008aa0:	f36f 0300 	bfc	r3, #0, #1
 8008aa4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    lv_obj_refr_size(obj);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fe fb13 	bl	80070d4 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7fe fefa 	bl	80078a8 <lv_obj_refr_pos>

    if(child_cnt > 0) {
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d025      	beq.n	8008b06 <layout_update_core+0xb6>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8008aba:	2100      	movs	r1, #0
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7fe fae5 	bl	800708c <lv_obj_get_style_layout>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	617b      	str	r3, [r7, #20]
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01c      	beq.n	8008b06 <layout_update_core+0xb6>
 8008acc:	4b0f      	ldr	r3, [pc, #60]	; (8008b0c <layout_update_core+0xbc>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d817      	bhi.n	8008b06 <layout_update_core+0xb6>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8008ad6:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <layout_update_core+0xc0>)
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	6979      	ldr	r1, [r7, #20]
 8008adc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008ae0:	440b      	add	r3, r1
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	613b      	str	r3, [r7, #16]
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8008aea:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <layout_update_core+0xc0>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	6979      	ldr	r1, [r7, #20]
 8008af0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008af4:	440b      	add	r3, r1
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	4413      	add	r3, r2
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6939      	ldr	r1, [r7, #16]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	e000      	b.n	8008b06 <layout_update_core+0xb6>
    if(obj->layout_inv == 0) return;
 8008b04:	bf00      	nop
        }
    }
}
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	200006a4 	.word	0x200006a4
 8008b10:	2000084c 	.word	0x2000084c

08008b14 <transform_point>:

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 8008b14:	b590      	push	{r4, r7, lr}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	71fb      	strb	r3, [r7, #7]
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
 8008b22:	2100      	movs	r1, #0
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7fe fa21 	bl	8006f6c <lv_obj_get_style_transform_angle>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	82fb      	strh	r3, [r7, #22]
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);
 8008b2e:	2100      	movs	r1, #0
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7fe fa09 	bl	8006f48 <lv_obj_get_style_transform_zoom>
 8008b36:	4603      	mov	r3, r0
 8008b38:	82bb      	strh	r3, [r7, #20]

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 8008b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <transform_point+0x3a>
 8008b42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b4a:	f000 80a6 	beq.w	8008c9a <transform_point+0x186>

    lv_point_t pivot = {
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 8008b4e:	2100      	movs	r1, #0
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7fe fa1d 	bl	8006f90 <lv_obj_get_style_transform_pivot_x>
 8008b56:	4603      	mov	r3, r0
    lv_point_t pivot = {
 8008b58:	823b      	strh	r3, [r7, #16]
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7fe fa29 	bl	8006fb4 <lv_obj_get_style_transform_pivot_y>
 8008b62:	4603      	mov	r3, r0
    lv_point_t pivot = {
 8008b64:	827b      	strh	r3, [r7, #18]
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 8008b66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b74:	d12d      	bne.n	8008bd2 <transform_point+0xbe>
 8008b76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b7a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008b7e:	b21b      	sxth	r3, r3
 8008b80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008b84:	dc25      	bgt.n	8008bd2 <transform_point+0xbe>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8008b86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b8a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008b8e:	b21b      	sxth	r3, r3
 8008b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b94:	dd07      	ble.n	8008ba6 <transform_point+0x92>
 8008b96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b9a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008b9e:	b21b      	sxth	r3, r3
 8008ba0:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 8008ba4:	e005      	b.n	8008bb2 <transform_point+0x9e>
 8008ba6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008baa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008bae:	b21b      	sxth	r3, r3
 8008bb0:	461c      	mov	r4, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3314      	adds	r3, #20
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe f8d2 	bl	8006d60 <lv_area_get_width>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	fb04 f303 	mul.w	r3, r4, r3
 8008bc2:	4a38      	ldr	r2, [pc, #224]	; (8008ca4 <transform_point+0x190>)
 8008bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8008bc8:	1152      	asrs	r2, r2, #5
 8008bca:	17db      	asrs	r3, r3, #31
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	b21b      	sxth	r3, r3
 8008bd0:	823b      	strh	r3, [r7, #16]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 8008bd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be0:	d12d      	bne.n	8008c3e <transform_point+0x12a>
 8008be2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008be6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008bea:	b21b      	sxth	r3, r3
 8008bec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008bf0:	dc25      	bgt.n	8008c3e <transform_point+0x12a>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8008bf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bf6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008bfa:	b21b      	sxth	r3, r3
 8008bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c00:	dd07      	ble.n	8008c12 <transform_point+0xfe>
 8008c02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c06:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008c0a:	b21b      	sxth	r3, r3
 8008c0c:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 8008c10:	e005      	b.n	8008c1e <transform_point+0x10a>
 8008c12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c16:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008c1a:	b21b      	sxth	r3, r3
 8008c1c:	461c      	mov	r4, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3314      	adds	r3, #20
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe f8b3 	bl	8006d8e <lv_area_get_height>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	fb04 f303 	mul.w	r3, r4, r3
 8008c2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ca4 <transform_point+0x190>)
 8008c30:	fb82 1203 	smull	r1, r2, r2, r3
 8008c34:	1152      	asrs	r2, r2, #5
 8008c36:	17db      	asrs	r3, r3, #31
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	b21b      	sxth	r3, r3
 8008c3c:	827b      	strh	r3, [r7, #18]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	4413      	add	r3, r2
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	b21b      	sxth	r3, r3
 8008c52:	823b      	strh	r3, [r7, #16]
    pivot.y = obj->coords.y1 + pivot.y;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	4413      	add	r3, r2
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	b21b      	sxth	r3, r3
 8008c68:	827b      	strh	r3, [r7, #18]

    if(inv) {
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00a      	beq.n	8008c86 <transform_point+0x172>
        angle = -angle;
 8008c70:	8afb      	ldrh	r3, [r7, #22]
 8008c72:	425b      	negs	r3, r3
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	82fb      	strh	r3, [r7, #22]
        zoom = (256 * 256) / zoom;
 8008c78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8008c84:	82bb      	strh	r3, [r7, #20]
    }

    lv_point_transform(p, angle, zoom, &pivot);
 8008c86:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8008c8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008c8e:	f107 0310 	add.w	r3, r7, #16
 8008c92:	68b8      	ldr	r0, [r7, #8]
 8008c94:	f016 f96c 	bl	801ef70 <lv_point_transform>
 8008c98:	e000      	b.n	8008c9c <transform_point+0x188>
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 8008c9a:	bf00      	nop
}
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd90      	pop	{r4, r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	51eb851f 	.word	0x51eb851f

08008ca8 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	b21b      	sxth	r3, r3
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	b21b      	sxth	r3, r3
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
    a->var = var;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	601a      	str	r2, [r3, #0]
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
    a->time = duration;
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <lv_anim_set_path_cb>:
 * Set the path (curve) of the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function to set the current value of the animation.
 */
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	61da      	str	r2, [r3, #28]
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	60da      	str	r2, [r3, #12]
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <lv_obj_get_style_width>:
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f002 fa8d 	bl	800b2e8 <lv_obj_get_style_prop>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	b21b      	sxth	r3, r3
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <lv_obj_get_style_pad_top>:
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008de8:	2210      	movs	r2, #16
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f002 fa7b 	bl	800b2e8 <lv_obj_get_style_prop>
 8008df2:	4603      	mov	r3, r0
 8008df4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	b21b      	sxth	r3, r3
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <lv_obj_get_style_pad_bottom>:
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8008e0c:	2211      	movs	r2, #17
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f002 fa69 	bl	800b2e8 <lv_obj_get_style_prop>
 8008e16:	4603      	mov	r3, r0
 8008e18:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	b21b      	sxth	r3, r3
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <lv_obj_get_style_pad_left>:
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008e30:	2212      	movs	r2, #18
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f002 fa57 	bl	800b2e8 <lv_obj_get_style_prop>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	b21b      	sxth	r3, r3
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <lv_obj_get_style_pad_right>:
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008e54:	2213      	movs	r2, #19
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f002 fa45 	bl	800b2e8 <lv_obj_get_style_prop>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	b21b      	sxth	r3, r3
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <lv_obj_get_style_bg_opa>:
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8008e78:	2221      	movs	r2, #33	; 0x21
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f002 fa33 	bl	800b2e8 <lv_obj_get_style_prop>
 8008e82:	4603      	mov	r3, r0
 8008e84:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	b2db      	uxtb	r3, r3
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <lv_obj_get_style_border_opa>:
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8008e9c:	2231      	movs	r2, #49	; 0x31
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f002 fa21 	bl	800b2e8 <lv_obj_get_style_prop>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	b2db      	uxtb	r3, r3
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <lv_obj_get_style_border_width>:
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008ec0:	2232      	movs	r2, #50	; 0x32
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f002 fa0f 	bl	800b2e8 <lv_obj_get_style_prop>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	b21b      	sxth	r3, r3
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <lv_obj_get_style_base_dir>:
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008ee4:	2216      	movs	r2, #22
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f002 f9fd 	bl	800b2e8 <lv_obj_get_style_prop>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	b2db      	uxtb	r3, r3
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <lv_obj_set_scrollbar_mode>:
/*=====================
 * Setter functions
 *====================*/

void lv_obj_set_scrollbar_mode(lv_obj_t * obj, lv_scrollbar_mode_t mode)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7fb ff34 	bl	8004d78 <lv_obj_allocate_spec_attr>

    if(obj->spec_attr->scrollbar_mode == mode) return;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	7e1b      	ldrb	r3, [r3, #24]
 8008f16:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d00d      	beq.n	8008f40 <lv_obj_set_scrollbar_mode+0x42>
    obj->spec_attr->scrollbar_mode = mode;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	b2d9      	uxtb	r1, r3
 8008f30:	7e13      	ldrb	r3, [r2, #24]
 8008f32:	f361 0301 	bfi	r3, r1, #0, #2
 8008f36:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff f95c 	bl	80081f6 <lv_obj_invalidate>
 8008f3e:	e000      	b.n	8008f42 <lv_obj_set_scrollbar_mode+0x44>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 8008f40:	bf00      	nop
}
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <lv_obj_get_scrollbar_mode>:
/*=====================
 * Getter functions
 *====================*/

lv_scrollbar_mode_t lv_obj_get_scrollbar_mode(const lv_obj_t * obj)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <lv_obj_get_scrollbar_mode+0x1e>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	7e1b      	ldrb	r3, [r3, #24]
 8008f5e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	e000      	b.n	8008f68 <lv_obj_get_scrollbar_mode+0x20>
    else return LV_SCROLLBAR_MODE_AUTO;
 8008f66:	2303      	movs	r3, #3
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <lv_obj_get_scroll_dir>:

lv_dir_t lv_obj_get_scroll_dir(const lv_obj_t * obj)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d006      	beq.n	8008f92 <lv_obj_get_scroll_dir+0x1e>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	7e5b      	ldrb	r3, [r3, #25]
 8008f8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	e000      	b.n	8008f94 <lv_obj_get_scroll_dir+0x20>
    else return LV_DIR_ALL;
 8008f92:	230f      	movs	r3, #15
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <lv_obj_get_scroll_snap_x>:

lv_scroll_snap_t lv_obj_get_scroll_snap_x(const lv_obj_t * obj)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d006      	beq.n	8008fbe <lv_obj_get_scroll_snap_x+0x1e>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	7e1b      	ldrb	r3, [r3, #24]
 8008fb6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	e000      	b.n	8008fc0 <lv_obj_get_scroll_snap_x+0x20>
    else return LV_SCROLL_SNAP_NONE;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <lv_obj_get_scroll_snap_y>:

lv_scroll_snap_t lv_obj_get_scroll_snap_y(const lv_obj_t * obj)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <lv_obj_get_scroll_snap_y+0x1e>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	7e1b      	ldrb	r3, [r3, #24]
 8008fe2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	e000      	b.n	8008fec <lv_obj_get_scroll_snap_y+0x20>
    else return LV_SCROLL_SNAP_NONE;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <lv_obj_get_scroll_x>:

lv_coord_t lv_obj_get_scroll_x(const lv_obj_t * obj)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <lv_obj_get_scroll_x+0x14>
 8009008:	2300      	movs	r3, #0
 800900a:	e007      	b.n	800901c <lv_obj_get_scroll_x+0x24>
    return -obj->spec_attr->scroll.x;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009014:	b29b      	uxth	r3, r3
 8009016:	425b      	negs	r3, r3
 8009018:	b29b      	uxth	r3, r3
 800901a:	b21b      	sxth	r3, r3
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <lv_obj_get_scroll_y>:

lv_coord_t lv_obj_get_scroll_y(const lv_obj_t * obj)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <lv_obj_get_scroll_y+0x14>
 8009038:	2300      	movs	r3, #0
 800903a:	e007      	b.n	800904c <lv_obj_get_scroll_y+0x24>
    return -obj->spec_attr->scroll.y;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009044:	b29b      	uxth	r3, r3
 8009046:	425b      	negs	r3, r3
 8009048:	b29b      	uxth	r3, r3
 800904a:	b21b      	sxth	r3, r3
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <lv_obj_get_scroll_top>:

lv_coord_t lv_obj_get_scroll_top(lv_obj_t * obj)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <lv_obj_get_scroll_top+0x14>
 8009068:	2300      	movs	r3, #0
 800906a:	e007      	b.n	800907c <lv_obj_get_scroll_top+0x24>
    return -obj->spec_attr->scroll.y;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009074:	b29b      	uxth	r3, r3
 8009076:	425b      	negs	r3, r3
 8009078:	b29b      	uxth	r3, r3
 800907a:	b21b      	sxth	r3, r3
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <lv_obj_get_scroll_bottom>:

lv_coord_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 8009088:	b5b0      	push	{r4, r5, r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t child_res = LV_COORD_MIN;
 8009090:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009094:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f003 fa1b 	bl	800c4d2 <lv_obj_get_child_cnt>
 800909c:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800909e:	2300      	movs	r3, #0
 80090a0:	61bb      	str	r3, [r7, #24]
 80090a2:	e01c      	b.n	80090de <lv_obj_get_scroll_bottom+0x56>
        lv_obj_t * child = obj->spec_attr->children[i];
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80090b4:	4935      	ldr	r1, [pc, #212]	; (800918c <lv_obj_get_scroll_bottom+0x104>)
 80090b6:	68b8      	ldr	r0, [r7, #8]
 80090b8:	f7fb fe2a 	bl	8004d10 <lv_obj_has_flag_any>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d109      	bne.n	80090d6 <lv_obj_get_scroll_bottom+0x4e>
        child_res = LV_MAX(child_res, child->coords.y2);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80090c8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80090cc:	4293      	cmp	r3, r2
 80090ce:	bfb8      	it	lt
 80090d0:	4613      	movlt	r3, r2
 80090d2:	83fb      	strh	r3, [r7, #30]
 80090d4:	e000      	b.n	80090d8 <lv_obj_get_scroll_bottom+0x50>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80090d6:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	3301      	adds	r3, #1
 80090dc:	61bb      	str	r3, [r7, #24]
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d3de      	bcc.n	80090a4 <lv_obj_get_scroll_bottom+0x1c>
    }

    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80090e6:	2100      	movs	r1, #0
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff fe78 	bl	8008dde <lv_obj_get_style_pad_top>
 80090ee:	4603      	mov	r3, r0
 80090f0:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80090f2:	2100      	movs	r1, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff fe84 	bl	8008e02 <lv_obj_get_style_pad_bottom>
 80090fa:	4603      	mov	r3, r0
 80090fc:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80090fe:	2100      	movs	r1, #0
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff fed8 	bl	8008eb6 <lv_obj_get_style_border_width>
 8009106:	4603      	mov	r3, r0
 8009108:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800910a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800910e:	4a20      	ldr	r2, [pc, #128]	; (8009190 <lv_obj_get_scroll_bottom+0x108>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d00d      	beq.n	8009130 <lv_obj_get_scroll_bottom+0xa8>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8009114:	8a3a      	ldrh	r2, [r7, #16]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800911c:	b29b      	uxth	r3, r3
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	b29a      	uxth	r2, r3
 8009122:	89fb      	ldrh	r3, [r7, #14]
 8009124:	4413      	add	r3, r2
 8009126:	b29a      	uxth	r2, r3
 8009128:	8bfb      	ldrh	r3, [r7, #30]
 800912a:	4413      	add	r3, r2
 800912c:	b29b      	uxth	r3, r3
 800912e:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7fe fb7d 	bl	8007830 <lv_obj_get_self_height>
 8009136:	4603      	mov	r3, r0
 8009138:	81bb      	strh	r3, [r7, #12]
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800913a:	89fb      	ldrh	r3, [r7, #14]
 800913c:	005b      	lsls	r3, r3, #1
 800913e:	b29c      	uxth	r4, r3
 8009140:	8a7d      	ldrh	r5, [r7, #18]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7fe fa9b 	bl	800767e <lv_obj_get_height>
 8009148:	4603      	mov	r3, r0
 800914a:	b29b      	uxth	r3, r3
 800914c:	1aeb      	subs	r3, r5, r3
 800914e:	b29a      	uxth	r2, r3
 8009150:	8a3b      	ldrh	r3, [r7, #16]
 8009152:	4413      	add	r3, r2
 8009154:	b29b      	uxth	r3, r3
 8009156:	4423      	add	r3, r4
 8009158:	b29a      	uxth	r2, r3
 800915a:	89bb      	ldrh	r3, [r7, #12]
 800915c:	4413      	add	r3, r2
 800915e:	b29b      	uxth	r3, r3
 8009160:	81bb      	strh	r3, [r7, #12]
    self_h -= lv_obj_get_scroll_y(obj);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff ff60 	bl	8009028 <lv_obj_get_scroll_y>
 8009168:	4603      	mov	r3, r0
 800916a:	89ba      	ldrh	r2, [r7, #12]
 800916c:	b29b      	uxth	r3, r3
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	b29b      	uxth	r3, r3
 8009172:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_h);
 8009174:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009178:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800917c:	4293      	cmp	r3, r2
 800917e:	bfb8      	it	lt
 8009180:	4613      	movlt	r3, r2
 8009182:	b21b      	sxth	r3, r3
}
 8009184:	4618      	mov	r0, r3
 8009186:	3720      	adds	r7, #32
 8009188:	46bd      	mov	sp, r7
 800918a:	bdb0      	pop	{r4, r5, r7, pc}
 800918c:	00040001 	.word	0x00040001
 8009190:	ffffe001 	.word	0xffffe001

08009194 <lv_obj_get_scroll_left>:

lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 8009194:	b5b0      	push	{r4, r5, r7, lr}
 8009196:	b08a      	sub	sp, #40	; 0x28
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800919c:	2100      	movs	r1, #0
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff fe9b 	bl	8008eda <lv_obj_get_style_base_dir>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d00e      	beq.n	80091c8 <lv_obj_get_scroll_left+0x34>
        if(obj->spec_attr == NULL) return 0;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <lv_obj_get_scroll_left+0x22>
 80091b2:	2300      	movs	r3, #0
 80091b4:	e08b      	b.n	80092ce <lv_obj_get_scroll_left+0x13a>
        return -obj->spec_attr->scroll.x;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	425b      	negs	r3, r3
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	b21b      	sxth	r3, r3
 80091c6:	e082      	b.n	80092ce <lv_obj_get_scroll_left+0x13a>
    }

    /*With RTL base direction scrolling the left is normal so find the left most coordinate*/
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80091c8:	2100      	movs	r1, #0
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff fe3d 	bl	8008e4a <lv_obj_get_style_pad_right>
 80091d0:	4603      	mov	r3, r0
 80091d2:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80091d4:	2100      	movs	r1, #0
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff fe25 	bl	8008e26 <lv_obj_get_style_pad_left>
 80091dc:	4603      	mov	r3, r0
 80091de:	837b      	strh	r3, [r7, #26]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80091e0:	2100      	movs	r1, #0
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7ff fe67 	bl	8008eb6 <lv_obj_get_style_border_width>
 80091e8:	4603      	mov	r3, r0
 80091ea:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint32_t i;
    lv_coord_t x1 = LV_COORD_MAX;
 80091f0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80091f4:	83fb      	strh	r3, [r7, #30]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f003 f96b 	bl	800c4d2 <lv_obj_get_child_cnt>
 80091fc:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 80091fe:	2300      	movs	r3, #0
 8009200:	623b      	str	r3, [r7, #32]
 8009202:	e01c      	b.n	800923e <lv_obj_get_scroll_left+0xaa>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009214:	4930      	ldr	r1, [pc, #192]	; (80092d8 <lv_obj_get_scroll_left+0x144>)
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7fb fd7a 	bl	8004d10 <lv_obj_has_flag_any>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d109      	bne.n	8009236 <lv_obj_get_scroll_left+0xa2>
        x1 = LV_MIN(x1, child->coords.x1);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009228:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800922c:	4293      	cmp	r3, r2
 800922e:	bfa8      	it	ge
 8009230:	4613      	movge	r3, r2
 8009232:	83fb      	strh	r3, [r7, #30]
 8009234:	e000      	b.n	8009238 <lv_obj_get_scroll_left+0xa4>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009236:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	3301      	adds	r3, #1
 800923c:	623b      	str	r3, [r7, #32]
 800923e:	6a3a      	ldr	r2, [r7, #32]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	429a      	cmp	r2, r3
 8009244:	d3de      	bcc.n	8009204 <lv_obj_get_scroll_left+0x70>

    }

    if(x1 != LV_COORD_MAX) {
 8009246:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800924a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800924e:	4293      	cmp	r3, r2
 8009250:	d010      	beq.n	8009274 <lv_obj_get_scroll_left+0xe0>
        child_res = x1;
 8009252:	8bfb      	ldrh	r3, [r7, #30]
 8009254:	84fb      	strh	r3, [r7, #38]	; 0x26
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800925c:	b29a      	uxth	r2, r3
 800925e:	8b7b      	ldrh	r3, [r7, #26]
 8009260:	4413      	add	r3, r2
 8009262:	b29a      	uxth	r2, r3
 8009264:	8b3b      	ldrh	r3, [r7, #24]
 8009266:	4413      	add	r3, r2
 8009268:	b29a      	uxth	r2, r3
 800926a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	b29b      	uxth	r3, r3
 8009270:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009272:	e002      	b.n	800927a <lv_obj_get_scroll_left+0xe6>
    }
    else {
        child_res = LV_COORD_MIN;
 8009274:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009278:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7fe fac2 	bl	8007804 <lv_obj_get_self_width>
 8009280:	4603      	mov	r3, r0
 8009282:	827b      	strh	r3, [r7, #18]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8009284:	8b3b      	ldrh	r3, [r7, #24]
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	b29c      	uxth	r4, r3
 800928a:	8bbd      	ldrh	r5, [r7, #28]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7fe f9e8 	bl	8007662 <lv_obj_get_width>
 8009292:	4603      	mov	r3, r0
 8009294:	b29b      	uxth	r3, r3
 8009296:	1aeb      	subs	r3, r5, r3
 8009298:	b29a      	uxth	r2, r3
 800929a:	8b7b      	ldrh	r3, [r7, #26]
 800929c:	4413      	add	r3, r2
 800929e:	b29b      	uxth	r3, r3
 80092a0:	4423      	add	r3, r4
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	8a7b      	ldrh	r3, [r7, #18]
 80092a6:	4413      	add	r3, r2
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	827b      	strh	r3, [r7, #18]
    self_w += lv_obj_get_scroll_x(obj);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7ff fea3 	bl	8008ff8 <lv_obj_get_scroll_x>
 80092b2:	4603      	mov	r3, r0
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	8a7b      	ldrh	r3, [r7, #18]
 80092b8:	4413      	add	r3, r2
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	827b      	strh	r3, [r7, #18]

    return LV_MAX(child_res, self_w);
 80092be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80092c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80092c6:	4293      	cmp	r3, r2
 80092c8:	bfb8      	it	lt
 80092ca:	4613      	movlt	r3, r2
 80092cc:	b21b      	sxth	r3, r3
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3728      	adds	r7, #40	; 0x28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bdb0      	pop	{r4, r5, r7, pc}
 80092d6:	bf00      	nop
 80092d8:	00040001 	.word	0x00040001

080092dc <lv_obj_get_scroll_right>:

lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 80092dc:	b5b0      	push	{r4, r5, r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80092e4:	2100      	movs	r1, #0
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff fdf7 	bl	8008eda <lv_obj_get_style_base_dir>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d10a      	bne.n	8009308 <lv_obj_get_scroll_right+0x2c>
        if(obj->spec_attr == NULL) return 0;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <lv_obj_get_scroll_right+0x22>
 80092fa:	2300      	movs	r3, #0
 80092fc:	e07e      	b.n	80093fc <lv_obj_get_scroll_right+0x120>
        return obj->spec_attr->scroll.x;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009306:	e079      	b.n	80093fc <lv_obj_get_scroll_right+0x120>
    }

    /*With other base direction (LTR) scrolling to the right is normal so find the right most coordinate*/
    lv_coord_t child_res = LV_COORD_MIN;
 8009308:	f24e 0301 	movw	r3, #57345	; 0xe001
 800930c:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f003 f8df 	bl	800c4d2 <lv_obj_get_child_cnt>
 8009314:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 8009316:	2300      	movs	r3, #0
 8009318:	61bb      	str	r3, [r7, #24]
 800931a:	e01c      	b.n	8009356 <lv_obj_get_scroll_right+0x7a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800932c:	4935      	ldr	r1, [pc, #212]	; (8009404 <lv_obj_get_scroll_right+0x128>)
 800932e:	68b8      	ldr	r0, [r7, #8]
 8009330:	f7fb fcee 	bl	8004d10 <lv_obj_has_flag_any>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <lv_obj_get_scroll_right+0x72>
        child_res = LV_MAX(child_res, child->coords.x2);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009340:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009344:	4293      	cmp	r3, r2
 8009346:	bfb8      	it	lt
 8009348:	4613      	movlt	r3, r2
 800934a:	83fb      	strh	r3, [r7, #30]
 800934c:	e000      	b.n	8009350 <lv_obj_get_scroll_right+0x74>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800934e:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	3301      	adds	r3, #1
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	429a      	cmp	r2, r3
 800935c:	d3de      	bcc.n	800931c <lv_obj_get_scroll_right+0x40>
    }

    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800935e:	2100      	movs	r1, #0
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff fd72 	bl	8008e4a <lv_obj_get_style_pad_right>
 8009366:	4603      	mov	r3, r0
 8009368:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800936a:	2100      	movs	r1, #0
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff fd5a 	bl	8008e26 <lv_obj_get_style_pad_left>
 8009372:	4603      	mov	r3, r0
 8009374:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009376:	2100      	movs	r1, #0
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff fd9c 	bl	8008eb6 <lv_obj_get_style_border_width>
 800937e:	4603      	mov	r3, r0
 8009380:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 8009382:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009386:	4a20      	ldr	r2, [pc, #128]	; (8009408 <lv_obj_get_scroll_right+0x12c>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00d      	beq.n	80093a8 <lv_obj_get_scroll_right+0xcc>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 800938c:	8a7a      	ldrh	r2, [r7, #18]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009394:	b29b      	uxth	r3, r3
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	b29a      	uxth	r2, r3
 800939a:	89fb      	ldrh	r3, [r7, #14]
 800939c:	4413      	add	r3, r2
 800939e:	b29a      	uxth	r2, r3
 80093a0:	8bfb      	ldrh	r3, [r7, #30]
 80093a2:	4413      	add	r3, r2
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7fe fa2b 	bl	8007804 <lv_obj_get_self_width>
 80093ae:	4603      	mov	r3, r0
 80093b0:	81bb      	strh	r3, [r7, #12]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 80093b2:	89fb      	ldrh	r3, [r7, #14]
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	b29c      	uxth	r4, r3
 80093b8:	8a7d      	ldrh	r5, [r7, #18]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7fe f951 	bl	8007662 <lv_obj_get_width>
 80093c0:	4603      	mov	r3, r0
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	1aeb      	subs	r3, r5, r3
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	8a3b      	ldrh	r3, [r7, #16]
 80093ca:	4413      	add	r3, r2
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	4423      	add	r3, r4
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	89bb      	ldrh	r3, [r7, #12]
 80093d4:	4413      	add	r3, r2
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	81bb      	strh	r3, [r7, #12]
    self_w -= lv_obj_get_scroll_x(obj);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff fe0c 	bl	8008ff8 <lv_obj_get_scroll_x>
 80093e0:	4603      	mov	r3, r0
 80093e2:	89ba      	ldrh	r2, [r7, #12]
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_w);
 80093ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80093f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	bfb8      	it	lt
 80093f8:	4613      	movlt	r3, r2
 80093fa:	b21b      	sxth	r3, r3
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3720      	adds	r7, #32
 8009400:	46bd      	mov	sp, r7
 8009402:	bdb0      	pop	{r4, r5, r7, pc}
 8009404:	00040001 	.word	0x00040001
 8009408:	ffffe001 	.word	0xffffe001

0800940c <lv_obj_scroll_by_bounded>:
/*=====================
 * Other functions
 *====================*/

void lv_obj_scroll_by_bounded(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b089      	sub	sp, #36	; 0x24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	4608      	mov	r0, r1
 8009416:	4611      	mov	r1, r2
 8009418:	461a      	mov	r2, r3
 800941a:	4603      	mov	r3, r0
 800941c:	817b      	strh	r3, [r7, #10]
 800941e:	460b      	mov	r3, r1
 8009420:	813b      	strh	r3, [r7, #8]
 8009422:	4613      	mov	r3, r2
 8009424:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 8009426:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d104      	bne.n	8009438 <lv_obj_scroll_by_bounded+0x2c>
 800942e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 80b5 	beq.w	80095a2 <lv_obj_scroll_by_bounded+0x196>

    /*We need to know the final sizes for bound check*/
    lv_obj_update_layout(obj);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7fe f8d7 	bl	80075ec <lv_obj_update_layout>

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff fdda 	bl	8008ff8 <lv_obj_get_scroll_x>
 8009444:	4603      	mov	r3, r0
 8009446:	b29b      	uxth	r3, r3
 8009448:	425b      	negs	r3, r3
 800944a:	b29b      	uxth	r3, r3
 800944c:	82bb      	strh	r3, [r7, #20]
    lv_coord_t x_bounded = x_current + dx;
 800944e:	8aba      	ldrh	r2, [r7, #20]
 8009450:	897b      	ldrh	r3, [r7, #10]
 8009452:	4413      	add	r3, r2
 8009454:	b29b      	uxth	r3, r3
 8009456:	83fb      	strh	r3, [r7, #30]

    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8009458:	2100      	movs	r1, #0
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff fd3d 	bl	8008eda <lv_obj_get_style_base_dir>
 8009460:	4603      	mov	r3, r0
 8009462:	2b01      	cmp	r3, #1
 8009464:	d028      	beq.n	80094b8 <lv_obj_scroll_by_bounded+0xac>
        if(x_bounded > 0) x_bounded = 0;
 8009466:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800946a:	2b00      	cmp	r3, #0
 800946c:	dd01      	ble.n	8009472 <lv_obj_scroll_by_bounded+0x66>
 800946e:	2300      	movs	r3, #0
 8009470:	83fb      	strh	r3, [r7, #30]
        if(x_bounded < 0) {
 8009472:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009476:	2b00      	cmp	r3, #0
 8009478:	da43      	bge.n	8009502 <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff fe8a 	bl	8009194 <lv_obj_get_scroll_left>
 8009480:	4603      	mov	r3, r0
 8009482:	b29c      	uxth	r4, r3
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f7ff ff29 	bl	80092dc <lv_obj_get_scroll_right>
 800948a:	4603      	mov	r3, r0
 800948c:	b29b      	uxth	r3, r3
 800948e:	4423      	add	r3, r4
 8009490:	b29b      	uxth	r3, r3
 8009492:	83bb      	strh	r3, [r7, #28]
            if(scroll_max < 0) scroll_max = 0;
 8009494:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009498:	2b00      	cmp	r3, #0
 800949a:	da01      	bge.n	80094a0 <lv_obj_scroll_by_bounded+0x94>
 800949c:	2300      	movs	r3, #0
 800949e:	83bb      	strh	r3, [r7, #28]

            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 80094a0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80094a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80094a8:	425b      	negs	r3, r3
 80094aa:	429a      	cmp	r2, r3
 80094ac:	da29      	bge.n	8009502 <lv_obj_scroll_by_bounded+0xf6>
 80094ae:	8bbb      	ldrh	r3, [r7, #28]
 80094b0:	425b      	negs	r3, r3
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	83fb      	strh	r3, [r7, #30]
 80094b6:	e024      	b.n	8009502 <lv_obj_scroll_by_bounded+0xf6>
        }
    }
    else {
        if(x_bounded < 0) x_bounded = 0;
 80094b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	da01      	bge.n	80094c4 <lv_obj_scroll_by_bounded+0xb8>
 80094c0:	2300      	movs	r3, #0
 80094c2:	83fb      	strh	r3, [r7, #30]
        if(x_bounded > 0) {
 80094c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dd1a      	ble.n	8009502 <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fe61 	bl	8009194 <lv_obj_get_scroll_left>
 80094d2:	4603      	mov	r3, r0
 80094d4:	b29c      	uxth	r4, r3
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f7ff ff00 	bl	80092dc <lv_obj_get_scroll_right>
 80094dc:	4603      	mov	r3, r0
 80094de:	b29b      	uxth	r3, r3
 80094e0:	4423      	add	r3, r4
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	837b      	strh	r3, [r7, #26]
            if(scroll_max < 0) scroll_max = 0;
 80094e6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	da01      	bge.n	80094f2 <lv_obj_scroll_by_bounded+0xe6>
 80094ee:	2300      	movs	r3, #0
 80094f0:	837b      	strh	r3, [r7, #26]

            if(x_bounded > scroll_max) x_bounded = scroll_max;
 80094f2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80094f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	dd01      	ble.n	8009502 <lv_obj_scroll_by_bounded+0xf6>
 80094fe:	8b7b      	ldrh	r3, [r7, #26]
 8009500:	83fb      	strh	r3, [r7, #30]
        }
    }

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f7ff fd90 	bl	8009028 <lv_obj_get_scroll_y>
 8009508:	4603      	mov	r3, r0
 800950a:	b29b      	uxth	r3, r3
 800950c:	425b      	negs	r3, r3
 800950e:	b29b      	uxth	r3, r3
 8009510:	827b      	strh	r3, [r7, #18]
    lv_coord_t y_bounded = y_current + dy;
 8009512:	8a7a      	ldrh	r2, [r7, #18]
 8009514:	893b      	ldrh	r3, [r7, #8]
 8009516:	4413      	add	r3, r2
 8009518:	b29b      	uxth	r3, r3
 800951a:	833b      	strh	r3, [r7, #24]

    if(y_bounded > 0) y_bounded = 0;
 800951c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	dd01      	ble.n	8009528 <lv_obj_scroll_by_bounded+0x11c>
 8009524:	2300      	movs	r3, #0
 8009526:	833b      	strh	r3, [r7, #24]
    if(y_bounded < 0) {
 8009528:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	da1d      	bge.n	800956c <lv_obj_scroll_by_bounded+0x160>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff fd91 	bl	8009058 <lv_obj_get_scroll_top>
 8009536:	4603      	mov	r3, r0
 8009538:	b29c      	uxth	r4, r3
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f7ff fda4 	bl	8009088 <lv_obj_get_scroll_bottom>
 8009540:	4603      	mov	r3, r0
 8009542:	b29b      	uxth	r3, r3
 8009544:	4423      	add	r3, r4
 8009546:	b29b      	uxth	r3, r3
 8009548:	82fb      	strh	r3, [r7, #22]
        if(scroll_max < 0) scroll_max = 0;
 800954a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800954e:	2b00      	cmp	r3, #0
 8009550:	da01      	bge.n	8009556 <lv_obj_scroll_by_bounded+0x14a>
 8009552:	2300      	movs	r3, #0
 8009554:	82fb      	strh	r3, [r7, #22]
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 8009556:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800955a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800955e:	425b      	negs	r3, r3
 8009560:	429a      	cmp	r2, r3
 8009562:	da03      	bge.n	800956c <lv_obj_scroll_by_bounded+0x160>
 8009564:	8afb      	ldrh	r3, [r7, #22]
 8009566:	425b      	negs	r3, r3
 8009568:	b29b      	uxth	r3, r3
 800956a:	833b      	strh	r3, [r7, #24]
    }

    dx = x_bounded - x_current;
 800956c:	8bfa      	ldrh	r2, [r7, #30]
 800956e:	8abb      	ldrh	r3, [r7, #20]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	b29b      	uxth	r3, r3
 8009574:	817b      	strh	r3, [r7, #10]
    dy = y_bounded - y_current;
 8009576:	8b3a      	ldrh	r2, [r7, #24]
 8009578:	8a7b      	ldrh	r3, [r7, #18]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	b29b      	uxth	r3, r3
 800957e:	813b      	strh	r3, [r7, #8]
    if(dx || dy) {
 8009580:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d103      	bne.n	8009590 <lv_obj_scroll_by_bounded+0x184>
 8009588:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d009      	beq.n	80095a4 <lv_obj_scroll_by_bounded+0x198>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009596:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 f806 	bl	80095ac <lv_obj_scroll_by>
 80095a0:	e000      	b.n	80095a4 <lv_obj_scroll_by_bounded+0x198>
    if(dx == 0 && dy == 0) return;
 80095a2:	bf00      	nop
    }
}
 80095a4:	3724      	adds	r7, #36	; 0x24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd90      	pop	{r4, r7, pc}
	...

080095ac <lv_obj_scroll_by>:


void lv_obj_scroll_by(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b09c      	sub	sp, #112	; 0x70
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	4608      	mov	r0, r1
 80095b6:	4611      	mov	r1, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	817b      	strh	r3, [r7, #10]
 80095be:	460b      	mov	r3, r1
 80095c0:	813b      	strh	r3, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 80095c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <lv_obj_scroll_by+0x2c>
 80095ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 80f7 	beq.w	80097c6 <lv_obj_scroll_by+0x21a>
    if(anim_en == LV_ANIM_ON) {
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	f040 80c4 	bne.w	8009768 <lv_obj_scroll_by+0x1bc>
        lv_disp_t * d = lv_obj_get_disp(obj);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f002 ff2b 	bl	800c43c <lv_obj_get_disp>
 80095e6:	6638      	str	r0, [r7, #96]	; 0x60
        lv_anim_t a;
        lv_anim_init(&a);
 80095e8:	f107 0314 	add.w	r3, r7, #20
 80095ec:	4618      	mov	r0, r3
 80095ee:	f014 fdf3 	bl	801e1d8 <lv_anim_init>
        lv_anim_set_var(&a, obj);
 80095f2:	f107 0314 	add.w	r3, r7, #20
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff fb83 	bl	8008d04 <lv_anim_set_var>
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);
 80095fe:	f107 0314 	add.w	r3, r7, #20
 8009602:	4977      	ldr	r1, [pc, #476]	; (80097e0 <lv_obj_scroll_by+0x234>)
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff fbca 	bl	8008d9e <lv_anim_set_ready_cb>

        if(dx) {
 800960a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d052      	beq.n	80096b8 <lv_obj_scroll_by+0x10c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 8009612:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009614:	f014 fcee 	bl	801dff4 <lv_disp_get_hor_res>
 8009618:	4603      	mov	r3, r0
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	109b      	asrs	r3, r3, #2
 800961e:	4618      	mov	r0, r3
 8009620:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009624:	461a      	mov	r2, r3
 8009626:	2100      	movs	r1, #0
 8009628:	f014 feb4 	bl	801e394 <lv_anim_speed_to_time>
 800962c:	66f8      	str	r0, [r7, #108]	; 0x6c
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800962e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009630:	2bc7      	cmp	r3, #199	; 0xc7
 8009632:	d801      	bhi.n	8009638 <lv_obj_scroll_by+0x8c>
 8009634:	23c8      	movs	r3, #200	; 0xc8
 8009636:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8009638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800963a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800963e:	d902      	bls.n	8009646 <lv_obj_scroll_by+0x9a>
 8009640:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009644:	66fb      	str	r3, [r7, #108]	; 0x6c
            lv_anim_set_time(&a, t);
 8009646:	f107 0314 	add.w	r3, r7, #20
 800964a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff fb75 	bl	8008d3c <lv_anim_set_time>
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f7ff fcd0 	bl	8008ff8 <lv_obj_get_scroll_x>
 8009658:	4603      	mov	r3, r0
 800965a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_anim_set_values(&a, -sx, -sx + dx);
 800965e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8009662:	4259      	negs	r1, r3
 8009664:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009668:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800966c:	1ad2      	subs	r2, r2, r3
 800966e:	f107 0314 	add.w	r3, r7, #20
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff fb70 	bl	8008d58 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, scroll_x_anim);
 8009678:	f107 0314 	add.w	r3, r7, #20
 800967c:	4959      	ldr	r1, [pc, #356]	; (80097e4 <lv_obj_scroll_by+0x238>)
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff fb4e 	bl	8008d20 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 8009684:	f107 0314 	add.w	r3, r7, #20
 8009688:	4957      	ldr	r1, [pc, #348]	; (80097e8 <lv_obj_scroll_by+0x23c>)
 800968a:	4618      	mov	r0, r3
 800968c:	f7ff fb79 	bl	8008d82 <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8009690:	f107 0314 	add.w	r3, r7, #20
 8009694:	461a      	mov	r2, r3
 8009696:	2109      	movs	r1, #9
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f7fa f9df 	bl	8003a5c <lv_event_send>
 800969e:	4603      	mov	r3, r0
 80096a0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            if(res != LV_RES_OK) return;
 80096a4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	f040 808e 	bne.w	80097ca <lv_obj_scroll_by+0x21e>
            lv_anim_start(&a);
 80096ae:	f107 0314 	add.w	r3, r7, #20
 80096b2:	4618      	mov	r0, r3
 80096b4:	f014 fdb6 	bl	801e224 <lv_anim_start>
        }

        if(dy) {
 80096b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 808b 	beq.w	80097d8 <lv_obj_scroll_by+0x22c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 80096c2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80096c4:	f014 fcbc 	bl	801e040 <lv_disp_get_ver_res>
 80096c8:	4603      	mov	r3, r0
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	109b      	asrs	r3, r3, #2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80096d4:	461a      	mov	r2, r3
 80096d6:	2100      	movs	r1, #0
 80096d8:	f014 fe5c 	bl	801e394 <lv_anim_speed_to_time>
 80096dc:	66b8      	str	r0, [r7, #104]	; 0x68
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 80096de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096e0:	2bc7      	cmp	r3, #199	; 0xc7
 80096e2:	d801      	bhi.n	80096e8 <lv_obj_scroll_by+0x13c>
 80096e4:	23c8      	movs	r3, #200	; 0xc8
 80096e6:	66bb      	str	r3, [r7, #104]	; 0x68
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 80096e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096ea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80096ee:	d902      	bls.n	80096f6 <lv_obj_scroll_by+0x14a>
 80096f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80096f4:	66bb      	str	r3, [r7, #104]	; 0x68
            lv_anim_set_time(&a, t);
 80096f6:	f107 0314 	add.w	r3, r7, #20
 80096fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fb1d 	bl	8008d3c <lv_anim_set_time>
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff fc90 	bl	8009028 <lv_obj_get_scroll_y>
 8009708:	4603      	mov	r3, r0
 800970a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_anim_set_values(&a, -sy, -sy + dy);
 800970e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8009712:	4259      	negs	r1, r3
 8009714:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009718:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800971c:	1ad2      	subs	r2, r2, r3
 800971e:	f107 0314 	add.w	r3, r7, #20
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff fb18 	bl	8008d58 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a,  scroll_y_anim);
 8009728:	f107 0314 	add.w	r3, r7, #20
 800972c:	492f      	ldr	r1, [pc, #188]	; (80097ec <lv_obj_scroll_by+0x240>)
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff faf6 	bl	8008d20 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 8009734:	f107 0314 	add.w	r3, r7, #20
 8009738:	492b      	ldr	r1, [pc, #172]	; (80097e8 <lv_obj_scroll_by+0x23c>)
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff fb21 	bl	8008d82 <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8009740:	f107 0314 	add.w	r3, r7, #20
 8009744:	461a      	mov	r2, r3
 8009746:	2109      	movs	r1, #9
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7fa f987 	bl	8003a5c <lv_event_send>
 800974e:	4603      	mov	r3, r0
 8009750:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(res != LV_RES_OK) return;
 8009754:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009758:	2b01      	cmp	r3, #1
 800975a:	d138      	bne.n	80097ce <lv_obj_scroll_by+0x222>
            lv_anim_start(&a);
 800975c:	f107 0314 	add.w	r3, r7, #20
 8009760:	4618      	mov	r0, r3
 8009762:	f014 fd5f 	bl	801e224 <lv_anim_start>
 8009766:	e037      	b.n	80097d8 <lv_obj_scroll_by+0x22c>
        }
    }
    else {
        /*Remove pending animations*/
        lv_anim_del(obj, scroll_y_anim);
 8009768:	4920      	ldr	r1, [pc, #128]	; (80097ec <lv_obj_scroll_by+0x240>)
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f014 fdd2 	bl	801e314 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8009770:	491c      	ldr	r1, [pc, #112]	; (80097e4 <lv_obj_scroll_by+0x238>)
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f014 fdce 	bl	801e314 <lv_anim_del>

        lv_res_t res;
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8009778:	2200      	movs	r2, #0
 800977a:	2109      	movs	r1, #9
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7fa f96d 	bl	8003a5c <lv_event_send>
 8009782:	4603      	mov	r3, r0
 8009784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 8009788:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800978c:	2b01      	cmp	r3, #1
 800978e:	d120      	bne.n	80097d2 <lv_obj_scroll_by+0x226>

        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 8009790:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009794:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009798:	4619      	mov	r1, r3
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f8bb 	bl	8009916 <_lv_obj_scroll_by_raw>
 80097a0:	4603      	mov	r3, r0
 80097a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 80097a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d113      	bne.n	80097d6 <lv_obj_scroll_by+0x22a>

        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 80097ae:	2200      	movs	r2, #0
 80097b0:	210a      	movs	r1, #10
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f7fa f952 	bl	8003a5c <lv_event_send>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 80097be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	e008      	b.n	80097d8 <lv_obj_scroll_by+0x22c>
    if(dx == 0 && dy == 0) return;
 80097c6:	bf00      	nop
 80097c8:	e006      	b.n	80097d8 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 80097ca:	bf00      	nop
 80097cc:	e004      	b.n	80097d8 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 80097ce:	bf00      	nop
 80097d0:	e002      	b.n	80097d8 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 80097d2:	bf00      	nop
 80097d4:	e000      	b.n	80097d8 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 80097d6:	bf00      	nop
    }
}
 80097d8:	3770      	adds	r7, #112	; 0x70
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	0800a6ff 	.word	0x0800a6ff
 80097e4:	0800a69f 	.word	0x0800a69f
 80097e8:	0801e427 	.word	0x0801e427
 80097ec:	0800a6cf 	.word	0x0800a6cf

080097f0 <lv_obj_scroll_to>:

void lv_obj_scroll_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y, lv_anim_enable_t anim_en)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	4608      	mov	r0, r1
 80097fa:	4611      	mov	r1, r2
 80097fc:	461a      	mov	r2, r3
 80097fe:	4603      	mov	r3, r0
 8009800:	817b      	strh	r3, [r7, #10]
 8009802:	460b      	mov	r3, r1
 8009804:	813b      	strh	r3, [r7, #8]
 8009806:	4613      	mov	r3, r2
 8009808:	71fb      	strb	r3, [r7, #7]
    lv_obj_scroll_to_x(obj, x, anim_en);
 800980a:	79fa      	ldrb	r2, [r7, #7]
 800980c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009810:	4619      	mov	r1, r3
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f80c 	bl	8009830 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 8009818:	79fa      	ldrb	r2, [r7, #7]
 800981a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800981e:	4619      	mov	r1, r3
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 f829 	bl	8009878 <lv_obj_scroll_to_y>
}
 8009826:	bf00      	nop
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <lv_obj_scroll_to_x>:

void lv_obj_scroll_to_x(lv_obj_t * obj, lv_coord_t x, lv_anim_enable_t anim_en)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	807b      	strh	r3, [r7, #2]
 800983c:	4613      	mov	r3, r2
 800983e:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_x_anim);
 8009840:	490c      	ldr	r1, [pc, #48]	; (8009874 <lv_obj_scroll_to_x+0x44>)
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f014 fd66 	bl	801e314 <lv_anim_del>

    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff fbd5 	bl	8008ff8 <lv_obj_get_scroll_x>
 800984e:	4603      	mov	r3, r0
 8009850:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -x + scroll_x;
 8009852:	89fa      	ldrh	r2, [r7, #14]
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	b29b      	uxth	r3, r3
 800985a:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 800985c:	787b      	ldrb	r3, [r7, #1]
 800985e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff fdd1 	bl	800940c <lv_obj_scroll_by_bounded>
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	0800a69f 	.word	0x0800a69f

08009878 <lv_obj_scroll_to_y>:

void lv_obj_scroll_to_y(lv_obj_t * obj, lv_coord_t y, lv_anim_enable_t anim_en)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	807b      	strh	r3, [r7, #2]
 8009884:	4613      	mov	r3, r2
 8009886:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_y_anim);
 8009888:	490c      	ldr	r1, [pc, #48]	; (80098bc <lv_obj_scroll_to_y+0x44>)
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f014 fd42 	bl	801e314 <lv_anim_del>

    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff fbc9 	bl	8009028 <lv_obj_get_scroll_y>
 8009896:	4603      	mov	r3, r0
 8009898:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -y + scroll_y;
 800989a:	89fa      	ldrh	r2, [r7, #14]
 800989c:	887b      	ldrh	r3, [r7, #2]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 80098a4:	787b      	ldrb	r3, [r7, #1]
 80098a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80098aa:	2100      	movs	r1, #0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff fdad 	bl	800940c <lv_obj_scroll_by_bounded>
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	0800a6cf 	.word	0x0800a6cf

080098c0 <lv_obj_scroll_to_view_recursive>:
    lv_point_t p = {0, 0};
    scroll_area_into_view(&obj->coords, obj, &p, anim_en);
}

void lv_obj_scroll_to_view_recursive(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	70fb      	strb	r3, [r7, #3]
    /*Be sure the screens layout is correct*/
    lv_obj_update_layout(obj);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7fd fe8d 	bl	80075ec <lv_obj_update_layout>

    lv_point_t p = {0, 0};
 80098d2:	2300      	movs	r3, #0
 80098d4:	81bb      	strh	r3, [r7, #12]
 80098d6:	2300      	movs	r3, #0
 80098d8:	81fb      	strh	r3, [r7, #14]
    lv_obj_t * child = obj;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	617b      	str	r3, [r7, #20]
    lv_obj_t * parent = lv_obj_get_parent(child);
 80098de:	6978      	ldr	r0, [r7, #20]
 80098e0:	f002 fde6 	bl	800c4b0 <lv_obj_get_parent>
 80098e4:	6138      	str	r0, [r7, #16]
    while(parent) {
 80098e6:	e00e      	b.n	8009906 <lv_obj_scroll_to_view_recursive+0x46>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f103 0014 	add.w	r0, r3, #20
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	f107 020c 	add.w	r2, r7, #12
 80098f4:	6979      	ldr	r1, [r7, #20]
 80098f6:	f000 ff11 	bl	800a71c <scroll_area_into_view>
        child = parent;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	617b      	str	r3, [r7, #20]
        parent = lv_obj_get_parent(parent);
 80098fe:	6938      	ldr	r0, [r7, #16]
 8009900:	f002 fdd6 	bl	800c4b0 <lv_obj_get_parent>
 8009904:	6138      	str	r0, [r7, #16]
    while(parent) {
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1ed      	bne.n	80098e8 <lv_obj_scroll_to_view_recursive+0x28>
    }
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <_lv_obj_scroll_by_raw>:

lv_res_t _lv_obj_scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	807b      	strh	r3, [r7, #2]
 8009922:	4613      	mov	r3, r2
 8009924:	803b      	strh	r3, [r7, #0]
    if(x == 0 && y == 0) return LV_RES_OK;
 8009926:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d105      	bne.n	800993a <_lv_obj_scroll_by_raw+0x24>
 800992e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <_lv_obj_scroll_by_raw+0x24>
 8009936:	2301      	movs	r3, #1
 8009938:	e032      	b.n	80099a0 <_lv_obj_scroll_by_raw+0x8a>

    lv_obj_allocate_spec_attr(obj);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fb fa1c 	bl	8004d78 <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009948:	b29a      	uxth	r2, r3
 800994a:	887b      	ldrh	r3, [r7, #2]
 800994c:	4413      	add	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	b212      	sxth	r2, r2
 8009956:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009960:	b29a      	uxth	r2, r3
 8009962:	883b      	ldrh	r3, [r7, #0]
 8009964:	4413      	add	r3, r2
 8009966:	b29a      	uxth	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	b212      	sxth	r2, r2
 800996e:	825a      	strh	r2, [r3, #18]

    lv_obj_move_children_by(obj, x, y, true);
 8009970:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009974:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8009978:	2301      	movs	r3, #1
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7fe faa8 	bl	8007ed0 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8009980:	2200      	movs	r2, #0
 8009982:	210b      	movs	r1, #11
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fa f869 	bl	8003a5c <lv_event_send>
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]
    if(res != LV_RES_OK) return res;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d001      	beq.n	8009998 <_lv_obj_scroll_by_raw+0x82>
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	e003      	b.n	80099a0 <_lv_obj_scroll_by_raw+0x8a>
    lv_obj_invalidate(obj);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7fe fc2c 	bl	80081f6 <lv_obj_invalidate>
    return LV_RES_OK;
 800999e:	2301      	movs	r3, #1
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <lv_obj_get_scrollbar_area>:
    lv_indev_scroll_get_snap_dist(obj, &p);
    lv_obj_scroll_by(obj, p.x, p.y, anim_en);
}

void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
{
 80099a8:	b590      	push	{r4, r7, lr}
 80099aa:	b095      	sub	sp, #84	; 0x54
 80099ac:	af02      	add	r7, sp, #8
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
    lv_area_set(hor_area, 0, 0, -1, -1);
 80099b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099be:	2200      	movs	r2, #0
 80099c0:	2100      	movs	r1, #0
 80099c2:	68b8      	ldr	r0, [r7, #8]
 80099c4:	f014 ff06 	bl	801e7d4 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 80099c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099d2:	2200      	movs	r2, #0
 80099d4:	2100      	movs	r1, #0
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f014 fefc 	bl	801e7d4 <lv_area_set>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 80099dc:	2110      	movs	r1, #16
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f7fb f981 	bl	8004ce6 <lv_obj_has_flag>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f083 0301 	eor.w	r3, r3, #1
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f040 8591 	bne.w	800a514 <lv_obj_get_scrollbar_area+0xb6c>

    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff faa8 	bl	8008f48 <lv_obj_get_scrollbar_mode>
 80099f8:	4603      	mov	r3, r0
 80099fa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 80099fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 8588 	beq.w	800a518 <lv_obj_get_scrollbar_area+0xb70>

    /*If there is no indev scrolling this object but `mode==active` return*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8009a08:	2000      	movs	r0, #0
 8009a0a:	f014 fb79 	bl	801e100 <lv_indev_get_next>
 8009a0e:	6478      	str	r0, [r7, #68]	; 0x44
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8009a10:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d114      	bne.n	8009a42 <lv_obj_get_scrollbar_area+0x9a>
        while(indev) {
 8009a18:	e00a      	b.n	8009a30 <lv_obj_get_scrollbar_area+0x88>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8009a1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009a1c:	f7fa fddd 	bl	80045da <lv_indev_get_scroll_obj>
 8009a20:	4602      	mov	r2, r0
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d007      	beq.n	8009a38 <lv_obj_get_scrollbar_area+0x90>
            indev = lv_indev_get_next(indev);
 8009a28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009a2a:	f014 fb69 	bl	801e100 <lv_indev_get_next>
 8009a2e:	6478      	str	r0, [r7, #68]	; 0x44
        while(indev) {
 8009a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1f1      	bne.n	8009a1a <lv_obj_get_scrollbar_area+0x72>
 8009a36:	e000      	b.n	8009a3a <lv_obj_get_scrollbar_area+0x92>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8009a38:	bf00      	nop
        }
        if(indev == NULL)  return;
 8009a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 856d 	beq.w	800a51c <lv_obj_get_scrollbar_area+0xb74>
    }

    lv_coord_t st = lv_obj_get_scroll_top(obj);
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff fb08 	bl	8009058 <lv_obj_get_scroll_top>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff fb1b 	bl	8009088 <lv_obj_get_scroll_bottom>
 8009a52:	4603      	mov	r3, r0
 8009a54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff fb9c 	bl	8009194 <lv_obj_get_scroll_left>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f7ff fc3b 	bl	80092dc <lv_obj_get_scroll_right>
 8009a66:	4603      	mov	r3, r0
 8009a68:	873b      	strh	r3, [r7, #56]	; 0x38

    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff fa82 	bl	8008f74 <lv_obj_get_scroll_dir>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool ver_draw = false;
 8009a76:	2300      	movs	r3, #0
 8009a78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    if((dir & LV_DIR_VER) &&
 8009a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a80:	f003 030c 	and.w	r3, r3, #12
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01c      	beq.n	8009ac2 <lv_obj_get_scrollbar_area+0x11a>
 8009a88:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d015      	beq.n	8009abc <lv_obj_get_scrollbar_area+0x114>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8009a90:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d107      	bne.n	8009aa8 <lv_obj_get_scrollbar_area+0x100>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8009a98:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dc0d      	bgt.n	8009abc <lv_obj_get_scrollbar_area+0x114>
 8009aa0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dc09      	bgt.n	8009abc <lv_obj_get_scrollbar_area+0x114>
 8009aa8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d108      	bne.n	8009ac2 <lv_obj_get_scrollbar_area+0x11a>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 8009ab0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ab2:	f7fa fd71 	bl	8004598 <lv_indev_get_scroll_dir>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b0c      	cmp	r3, #12
 8009aba:	d102      	bne.n	8009ac2 <lv_obj_get_scrollbar_area+0x11a>
        ver_draw = true;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }


    bool hor_draw = false;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    if((dir & LV_DIR_HOR) &&
 8009ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01c      	beq.n	8009b0e <lv_obj_get_scrollbar_area+0x166>
 8009ad4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d015      	beq.n	8009b08 <lv_obj_get_scrollbar_area+0x160>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8009adc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	d107      	bne.n	8009af4 <lv_obj_get_scrollbar_area+0x14c>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8009ae4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	dc0d      	bgt.n	8009b08 <lv_obj_get_scrollbar_area+0x160>
 8009aec:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dc09      	bgt.n	8009b08 <lv_obj_get_scrollbar_area+0x160>
 8009af4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d108      	bne.n	8009b0e <lv_obj_get_scrollbar_area+0x166>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8009afc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009afe:	f7fa fd4b 	bl	8004598 <lv_indev_get_scroll_dir>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d102      	bne.n	8009b0e <lv_obj_get_scrollbar_area+0x166>
        hor_draw = true;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }

    if(!hor_draw && !ver_draw) return;
 8009b0e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009b12:	f083 0301 	eor.w	r3, r3, #1
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d007      	beq.n	8009b2c <lv_obj_get_scrollbar_area+0x184>
 8009b1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b20:	f083 0301 	eor.w	r3, r3, #1
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f040 84fa 	bne.w	800a520 <lv_obj_get_scrollbar_area+0xb78>

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 8009b2c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f7ff f9d2 	bl	8008eda <lv_obj_get_style_base_dir>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2301      	moveq	r3, #1
 8009b3e:	2300      	movne	r3, #0
 8009b40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    lv_coord_t top_space = lv_obj_get_style_pad_top(obj, LV_PART_SCROLLBAR);
 8009b44:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7ff f948 	bl	8008dde <lv_obj_get_style_pad_top>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_coord_t bottom_space = lv_obj_get_style_pad_bottom(obj, LV_PART_SCROLLBAR);
 8009b52:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff f953 	bl	8008e02 <lv_obj_get_style_pad_bottom>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t left_space = lv_obj_get_style_pad_left(obj, LV_PART_SCROLLBAR);
 8009b60:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff f95e 	bl	8008e26 <lv_obj_get_style_pad_left>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t right_space = lv_obj_get_style_pad_right(obj, LV_PART_SCROLLBAR);
 8009b6e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff f969 	bl	8008e4a <lv_obj_get_style_pad_right>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t tickness = lv_obj_get_style_width(obj, LV_PART_SCROLLBAR);
 8009b7c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f7ff f91a 	bl	8008dba <lv_obj_get_style_width>
 8009b86:	4603      	mov	r3, r0
 8009b88:	85bb      	strh	r3, [r7, #44]	; 0x2c

    lv_coord_t obj_h = lv_obj_get_height(obj);
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7fd fd77 	bl	800767e <lv_obj_get_height>
 8009b90:	4603      	mov	r3, r0
 8009b92:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7fd fd64 	bl	8007662 <lv_obj_get_width>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	853b      	strh	r3, [r7, #40]	; 0x28

    /*Space required for the vertical and horizontal scrollbars*/
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 8009b9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <lv_obj_get_scrollbar_area+0x204>
 8009ba6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8009baa:	e000      	b.n	8009bae <lv_obj_get_scrollbar_area+0x206>
 8009bac:	2300      	movs	r3, #0
 8009bae:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 8009bb0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <lv_obj_get_scrollbar_area+0x216>
 8009bb8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8009bbc:	e000      	b.n	8009bc0 <lv_obj_get_scrollbar_area+0x218>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t rem;

    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8009bc2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7ff f951 	bl	8008e6e <lv_obj_get_style_bg_opa>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d808      	bhi.n	8009be4 <lv_obj_get_scrollbar_area+0x23c>
       lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN) {
 8009bd2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f7ff f95b 	bl	8008e92 <lv_obj_get_style_border_opa>
 8009bdc:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	f240 84a0 	bls.w	800a524 <lv_obj_get_scrollbar_area+0xb7c>
        return;
    }

    /*Draw vertical scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_h = obj_h + st + sb;
 8009be4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009be6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009be8:	4413      	add	r3, r2
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009bee:	4413      	add	r3, r2
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	847b      	strh	r3, [r7, #34]	; 0x22
    if(ver_draw && content_h) {
 8009bf4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 81c3 	beq.w	8009f84 <lv_obj_get_scrollbar_area+0x5dc>
 8009bfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 81be 	beq.w	8009f84 <lv_obj_get_scrollbar_area+0x5dc>
        ver_area->y1 = obj->coords.y1;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	805a      	strh	r2, [r3, #2]
        ver_area->y2 = obj->coords.y2;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	80da      	strh	r2, [r3, #6]
        if(rtl) {
 8009c1c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d016      	beq.n	8009c52 <lv_obj_get_scrollbar_area+0x2aa>
            ver_area->x1 = obj->coords.x1 + left_space;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c2e:	4413      	add	r3, r2
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	b21a      	sxth	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	801a      	strh	r2, [r3, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c42:	4413      	add	r3, r2
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	3b01      	subs	r3, #1
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	b21a      	sxth	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	809a      	strh	r2, [r3, #4]
 8009c50:	e015      	b.n	8009c7e <lv_obj_get_scrollbar_area+0x2d6>
        }
        else {
            ver_area->x2 = obj->coords.x2 - right_space;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	b21a      	sxth	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	809a      	strh	r2, [r3, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	3301      	adds	r3, #1
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	b21a      	sxth	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	801a      	strh	r2, [r3, #0]
        }

        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 8009c7e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8009c82:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8009c86:	1ad2      	subs	r2, r2, r3
 8009c88:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009c8c:	1ad2      	subs	r2, r2, r3
 8009c8e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8009c98:	fb03 f202 	mul.w	r2, r3, r2
 8009c9c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009ca0:	fb92 f3f3 	sdiv	r3, r2, r3
 8009ca4:	843b      	strh	r3, [r7, #32]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8009ca6:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8009caa:	2000      	movs	r0, #0
 8009cac:	f014 f9ee 	bl	801e08c <lv_disp_get_dpi>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	2bef      	cmp	r3, #239	; 0xef
 8009cbe:	dd10      	ble.n	8009ce2 <lv_obj_get_scrollbar_area+0x33a>
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	f014 f9e3 	bl	801e08c <lv_disp_get_dpi>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	3350      	adds	r3, #80	; 0x50
 8009cd4:	4aa7      	ldr	r2, [pc, #668]	; (8009f74 <lv_obj_get_scrollbar_area+0x5cc>)
 8009cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8009cda:	1192      	asrs	r2, r2, #6
 8009cdc:	17db      	asrs	r3, r3, #31
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	e000      	b.n	8009ce4 <lv_obj_get_scrollbar_area+0x33c>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	db1e      	blt.n	8009d26 <lv_obj_get_scrollbar_area+0x37e>
 8009ce8:	2000      	movs	r0, #0
 8009cea:	f014 f9cf 	bl	801e08c <lv_disp_get_dpi>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	2bef      	cmp	r3, #239	; 0xef
 8009cfc:	dd11      	ble.n	8009d22 <lv_obj_get_scrollbar_area+0x37a>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	f014 f9c4 	bl	801e08c <lv_disp_get_dpi>
 8009d04:	4603      	mov	r3, r0
 8009d06:	461a      	mov	r2, r3
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	3350      	adds	r3, #80	; 0x50
 8009d12:	4a98      	ldr	r2, [pc, #608]	; (8009f74 <lv_obj_get_scrollbar_area+0x5cc>)
 8009d14:	fb82 1203 	smull	r1, r2, r2, r3
 8009d18:	1192      	asrs	r2, r2, #6
 8009d1a:	17db      	asrs	r3, r3, #31
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	b21b      	sxth	r3, r3
 8009d20:	e003      	b.n	8009d2a <lv_obj_get_scrollbar_area+0x382>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e001      	b.n	8009d2a <lv_obj_get_scrollbar_area+0x382>
 8009d26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009d2a:	843b      	strh	r3, [r7, #32]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8009d2c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009d2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	8c3b      	ldrh	r3, [r7, #32]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	83fb      	strh	r3, [r7, #30]
              sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8009d48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	83bb      	strh	r3, [r7, #28]
        if(scroll_h <= 0) {
 8009d52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	dc19      	bgt.n	8009d8e <lv_obj_get_scrollbar_area+0x3e6>
            ver_area->y1 = obj->coords.y1 + top_space;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009d64:	4413      	add	r3, r2
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	b21a      	sxth	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	b21a      	sxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	80da      	strh	r2, [r3, #6]
 8009d8c:	e0fa      	b.n	8009f84 <lv_obj_get_scrollbar_area+0x5dc>
        }
        else {
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8009d8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009d92:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8009d96:	fb03 f202 	mul.w	r2, r3, r2
 8009d9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009da2:	837b      	strh	r3, [r7, #26]
            sb_y = rem - sb_y;
 8009da4:	8bfa      	ldrh	r2, [r7, #30]
 8009da6:	8b7b      	ldrh	r3, [r7, #26]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	837b      	strh	r3, [r7, #26]

            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	8b7b      	ldrh	r3, [r7, #26]
 8009db8:	4413      	add	r3, r2
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009dbe:	4413      	add	r3, r2
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	b21a      	sxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	8c3b      	ldrh	r3, [r7, #32]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	b21a      	sxth	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	80da      	strh	r2, [r3, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009de6:	461a      	mov	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009dee:	4619      	mov	r1, r3
 8009df0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8009df4:	440b      	add	r3, r1
 8009df6:	429a      	cmp	r2, r3
 8009df8:	da57      	bge.n	8009eaa <lv_obj_get_scrollbar_area+0x502>
                ver_area->y1 = obj->coords.y1 + top_space;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009e04:	4413      	add	r3, r2
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	b21a      	sxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	805a      	strh	r2, [r3, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009e14:	461c      	mov	r4, r3
 8009e16:	2000      	movs	r0, #0
 8009e18:	f014 f938 	bl	801e08c <lv_disp_get_dpi>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	2bef      	cmp	r3, #239	; 0xef
 8009e2a:	dd10      	ble.n	8009e4e <lv_obj_get_scrollbar_area+0x4a6>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f014 f92d 	bl	801e08c <lv_disp_get_dpi>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461a      	mov	r2, r3
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	3350      	adds	r3, #80	; 0x50
 8009e40:	4a4c      	ldr	r2, [pc, #304]	; (8009f74 <lv_obj_get_scrollbar_area+0x5cc>)
 8009e42:	fb82 1203 	smull	r1, r2, r2, r3
 8009e46:	1192      	asrs	r2, r2, #6
 8009e48:	17db      	asrs	r3, r3, #31
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	e000      	b.n	8009e50 <lv_obj_get_scrollbar_area+0x4a8>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4423      	add	r3, r4
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	dd26      	ble.n	8009eaa <lv_obj_get_scrollbar_area+0x502>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009e62:	b29c      	uxth	r4, r3
 8009e64:	2000      	movs	r0, #0
 8009e66:	f014 f911 	bl	801e08c <lv_disp_get_dpi>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	2bef      	cmp	r3, #239	; 0xef
 8009e78:	dd11      	ble.n	8009e9e <lv_obj_get_scrollbar_area+0x4f6>
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f014 f906 	bl	801e08c <lv_disp_get_dpi>
 8009e80:	4603      	mov	r3, r0
 8009e82:	461a      	mov	r2, r3
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	3350      	adds	r3, #80	; 0x50
 8009e8e:	4a39      	ldr	r2, [pc, #228]	; (8009f74 <lv_obj_get_scrollbar_area+0x5cc>)
 8009e90:	fb82 1203 	smull	r1, r2, r2, r3
 8009e94:	1192      	asrs	r2, r2, #6
 8009e96:	17db      	asrs	r3, r3, #31
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	e000      	b.n	8009ea0 <lv_obj_get_scrollbar_area+0x4f8>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4423      	add	r3, r4
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	b21a      	sxth	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	80da      	strh	r2, [r3, #6]
                }
            }
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009ebe:	1ad2      	subs	r2, r2, r3
 8009ec0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	4299      	cmp	r1, r3
 8009ec8:	dd5c      	ble.n	8009f84 <lv_obj_get_scrollbar_area+0x5dc>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	b21a      	sxth	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	80da      	strh	r2, [r3, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009eea:	461c      	mov	r4, r3
 8009eec:	2000      	movs	r0, #0
 8009eee:	f014 f8cd 	bl	801e08c <lv_disp_get_dpi>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	2bef      	cmp	r3, #239	; 0xef
 8009f00:	dd10      	ble.n	8009f24 <lv_obj_get_scrollbar_area+0x57c>
 8009f02:	2000      	movs	r0, #0
 8009f04:	f014 f8c2 	bl	801e08c <lv_disp_get_dpi>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	3350      	adds	r3, #80	; 0x50
 8009f16:	4a17      	ldr	r2, [pc, #92]	; (8009f74 <lv_obj_get_scrollbar_area+0x5cc>)
 8009f18:	fb82 1203 	smull	r1, r2, r2, r3
 8009f1c:	1192      	asrs	r2, r2, #6
 8009f1e:	17db      	asrs	r3, r3, #31
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	e000      	b.n	8009f26 <lv_obj_get_scrollbar_area+0x57e>
 8009f24:	2301      	movs	r3, #1
 8009f26:	1ae3      	subs	r3, r4, r3
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	da28      	bge.n	8009f84 <lv_obj_get_scrollbar_area+0x5dc>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009f38:	b29c      	uxth	r4, r3
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	f014 f8a6 	bl	801e08c <lv_disp_get_dpi>
 8009f40:	4603      	mov	r3, r0
 8009f42:	461a      	mov	r2, r3
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	2bef      	cmp	r3, #239	; 0xef
 8009f4e:	dd13      	ble.n	8009f78 <lv_obj_get_scrollbar_area+0x5d0>
 8009f50:	2000      	movs	r0, #0
 8009f52:	f014 f89b 	bl	801e08c <lv_disp_get_dpi>
 8009f56:	4603      	mov	r3, r0
 8009f58:	461a      	mov	r2, r3
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	3350      	adds	r3, #80	; 0x50
 8009f64:	4a03      	ldr	r2, [pc, #12]	; (8009f74 <lv_obj_get_scrollbar_area+0x5cc>)
 8009f66:	fb82 1203 	smull	r1, r2, r2, r3
 8009f6a:	1192      	asrs	r2, r2, #6
 8009f6c:	17db      	asrs	r3, r3, #31
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	e002      	b.n	8009f7a <lv_obj_get_scrollbar_area+0x5d2>
 8009f74:	66666667 	.word	0x66666667
 8009f78:	2301      	movs	r3, #1
 8009f7a:	1ae3      	subs	r3, r4, r3
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	b21a      	sxth	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    /*Draw horizontal scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_w = obj_w + sl + sr;
 8009f84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009f88:	4413      	add	r3, r2
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009f8e:	4413      	add	r3, r2
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	833b      	strh	r3, [r7, #24]
    if(hor_draw && content_w) {
 8009f94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 82c4 	beq.w	800a526 <lv_obj_get_scrollbar_area+0xb7e>
 8009f9e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 82bf 	beq.w	800a526 <lv_obj_get_scrollbar_area+0xb7e>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	b21a      	sxth	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	80da      	strh	r2, [r3, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	3301      	adds	r3, #1
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	b21a      	sxth	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	805a      	strh	r2, [r3, #2]
        hor_area->x1 = obj->coords.x1;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	801a      	strh	r2, [r3, #0]
        hor_area->x2 = obj->coords.x2;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	809a      	strh	r2, [r3, #4]

        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 8009fe8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8009fec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8009ff0:	1ad2      	subs	r2, r2, r3
 8009ff2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009ff6:	1ad2      	subs	r2, r2, r3
 8009ff8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800a002:	fb03 f202 	mul.w	r2, r3, r2
 800a006:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a00a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a00e:	82fb      	strh	r3, [r7, #22]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800a010:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800a014:	2000      	movs	r0, #0
 800a016:	f014 f839 	bl	801e08c <lv_disp_get_dpi>
 800a01a:	4603      	mov	r3, r0
 800a01c:	461a      	mov	r2, r3
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	2bef      	cmp	r3, #239	; 0xef
 800a028:	dd10      	ble.n	800a04c <lv_obj_get_scrollbar_area+0x6a4>
 800a02a:	2000      	movs	r0, #0
 800a02c:	f014 f82e 	bl	801e08c <lv_disp_get_dpi>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	3350      	adds	r3, #80	; 0x50
 800a03e:	4aa7      	ldr	r2, [pc, #668]	; (800a2dc <lv_obj_get_scrollbar_area+0x934>)
 800a040:	fb82 1203 	smull	r1, r2, r2, r3
 800a044:	1192      	asrs	r2, r2, #6
 800a046:	17db      	asrs	r3, r3, #31
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	e000      	b.n	800a04e <lv_obj_get_scrollbar_area+0x6a6>
 800a04c:	2301      	movs	r3, #1
 800a04e:	42a3      	cmp	r3, r4
 800a050:	db1e      	blt.n	800a090 <lv_obj_get_scrollbar_area+0x6e8>
 800a052:	2000      	movs	r0, #0
 800a054:	f014 f81a 	bl	801e08c <lv_disp_get_dpi>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	2bef      	cmp	r3, #239	; 0xef
 800a066:	dd11      	ble.n	800a08c <lv_obj_get_scrollbar_area+0x6e4>
 800a068:	2000      	movs	r0, #0
 800a06a:	f014 f80f 	bl	801e08c <lv_disp_get_dpi>
 800a06e:	4603      	mov	r3, r0
 800a070:	461a      	mov	r2, r3
 800a072:	4613      	mov	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	3350      	adds	r3, #80	; 0x50
 800a07c:	4a97      	ldr	r2, [pc, #604]	; (800a2dc <lv_obj_get_scrollbar_area+0x934>)
 800a07e:	fb82 1203 	smull	r1, r2, r2, r3
 800a082:	1192      	asrs	r2, r2, #6
 800a084:	17db      	asrs	r3, r3, #31
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	b21b      	sxth	r3, r3
 800a08a:	e003      	b.n	800a094 <lv_obj_get_scrollbar_area+0x6ec>
 800a08c:	2301      	movs	r3, #1
 800a08e:	e001      	b.n	800a094 <lv_obj_get_scrollbar_area+0x6ec>
 800a090:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a094:	82fb      	strh	r3, [r7, #22]
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800a096:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a098:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	8afb      	ldrh	r3, [r7, #22]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	83fb      	strh	r3, [r7, #30]
              sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800a0b2:	8b3a      	ldrh	r2, [r7, #24]
 800a0b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	82bb      	strh	r3, [r7, #20]
        if(scroll_w <= 0) {
 800a0bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dc37      	bgt.n	800a134 <lv_obj_get_scrollbar_area+0x78c>
            if(rtl) {
 800a0c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d019      	beq.n	800a100 <lv_obj_get_scrollbar_area+0x758>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a0d6:	4413      	add	r3, r2
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0dc:	4413      	add	r3, r2
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	b21a      	sxth	r2, r3
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	b21a      	sxth	r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	809a      	strh	r2, [r3, #4]
 800a0fe:	e212      	b.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
            }
            else {
                hor_area->x1 = obj->coords.x1 + left_space;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a106:	b29a      	uxth	r2, r3
 800a108:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a10a:	4413      	add	r3, r2
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	b21a      	sxth	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	b29a      	uxth	r2, r3
 800a122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	b29b      	uxth	r3, r3
 800a128:	3b01      	subs	r3, #1
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	b21a      	sxth	r2, r3
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	809a      	strh	r2, [r3, #4]
 800a132:	e1f8      	b.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
            }
        }
        else {
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800a134:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a138:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800a13c:	fb03 f202 	mul.w	r2, r3, r2
 800a140:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a144:	fb92 f3f3 	sdiv	r3, r2, r3
 800a148:	827b      	strh	r3, [r7, #18]
            sb_x = rem - sb_x;
 800a14a:	8bfa      	ldrh	r2, [r7, #30]
 800a14c:	8a7b      	ldrh	r3, [r7, #18]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	b29b      	uxth	r3, r3
 800a152:	827b      	strh	r3, [r7, #18]

            if(rtl) {
 800a154:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 80f1 	beq.w	800a340 <lv_obj_get_scrollbar_area+0x998>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a164:	b29a      	uxth	r2, r3
 800a166:	8a7b      	ldrh	r3, [r7, #18]
 800a168:	4413      	add	r3, r2
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a16e:	4413      	add	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a174:	4413      	add	r3, r2
 800a176:	b29b      	uxth	r3, r3
 800a178:	b21a      	sxth	r2, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a184:	b29a      	uxth	r2, r3
 800a186:	8afb      	ldrh	r3, [r7, #22]
 800a188:	4413      	add	r3, r2
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	3b01      	subs	r3, #1
 800a18e:	b29b      	uxth	r3, r3
 800a190:	b21a      	sxth	r2, r3
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a19c:	4619      	mov	r1, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800a1aa:	441a      	add	r2, r3
 800a1ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a1b0:	4413      	add	r3, r2
 800a1b2:	4299      	cmp	r1, r3
 800a1b4:	da5a      	bge.n	800a26c <lv_obj_get_scrollbar_area+0x8c4>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a1c0:	4413      	add	r3, r2
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1c6:	4413      	add	r3, r2
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	b21a      	sxth	r2, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1d6:	461c      	mov	r4, r3
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f013 ff57 	bl	801e08c <lv_disp_get_dpi>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	2bef      	cmp	r3, #239	; 0xef
 800a1ec:	dd10      	ble.n	800a210 <lv_obj_get_scrollbar_area+0x868>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	f013 ff4c 	bl	801e08c <lv_disp_get_dpi>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	3350      	adds	r3, #80	; 0x50
 800a202:	4a36      	ldr	r2, [pc, #216]	; (800a2dc <lv_obj_get_scrollbar_area+0x934>)
 800a204:	fb82 1203 	smull	r1, r2, r2, r3
 800a208:	1192      	asrs	r2, r2, #6
 800a20a:	17db      	asrs	r3, r3, #31
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	e000      	b.n	800a212 <lv_obj_get_scrollbar_area+0x86a>
 800a210:	2301      	movs	r3, #1
 800a212:	4423      	add	r3, r4
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a21a:	4293      	cmp	r3, r2
 800a21c:	dd26      	ble.n	800a26c <lv_obj_get_scrollbar_area+0x8c4>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a224:	b29c      	uxth	r4, r3
 800a226:	2000      	movs	r0, #0
 800a228:	f013 ff30 	bl	801e08c <lv_disp_get_dpi>
 800a22c:	4603      	mov	r3, r0
 800a22e:	461a      	mov	r2, r3
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	2bef      	cmp	r3, #239	; 0xef
 800a23a:	dd11      	ble.n	800a260 <lv_obj_get_scrollbar_area+0x8b8>
 800a23c:	2000      	movs	r0, #0
 800a23e:	f013 ff25 	bl	801e08c <lv_disp_get_dpi>
 800a242:	4603      	mov	r3, r0
 800a244:	461a      	mov	r2, r3
 800a246:	4613      	mov	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	3350      	adds	r3, #80	; 0x50
 800a250:	4a22      	ldr	r2, [pc, #136]	; (800a2dc <lv_obj_get_scrollbar_area+0x934>)
 800a252:	fb82 1203 	smull	r1, r2, r2, r3
 800a256:	1192      	asrs	r2, r2, #6
 800a258:	17db      	asrs	r3, r3, #31
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	e000      	b.n	800a262 <lv_obj_get_scrollbar_area+0x8ba>
 800a260:	2301      	movs	r3, #1
 800a262:	4423      	add	r3, r4
 800a264:	b29b      	uxth	r3, r3
 800a266:	b21a      	sxth	r2, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a272:	461a      	mov	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a27a:	4619      	mov	r1, r3
 800a27c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a280:	1acb      	subs	r3, r1, r3
 800a282:	429a      	cmp	r2, r3
 800a284:	f340 814f 	ble.w	800a526 <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a28e:	b29a      	uxth	r2, r3
 800a290:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	b29b      	uxth	r3, r3
 800a296:	b21a      	sxth	r2, r3
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a2a2:	461c      	mov	r4, r3
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	f013 fef1 	bl	801e08c <lv_disp_get_dpi>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	2bef      	cmp	r3, #239	; 0xef
 800a2b8:	dd12      	ble.n	800a2e0 <lv_obj_get_scrollbar_area+0x938>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	f013 fee6 	bl	801e08c <lv_disp_get_dpi>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	3350      	adds	r3, #80	; 0x50
 800a2ce:	4a03      	ldr	r2, [pc, #12]	; (800a2dc <lv_obj_get_scrollbar_area+0x934>)
 800a2d0:	fb82 1203 	smull	r1, r2, r2, r3
 800a2d4:	1192      	asrs	r2, r2, #6
 800a2d6:	17db      	asrs	r3, r3, #31
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	e002      	b.n	800a2e2 <lv_obj_get_scrollbar_area+0x93a>
 800a2dc:	66666667 	.word	0x66666667
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	1ae3      	subs	r3, r4, r3
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	f280 811b 	bge.w	800a526 <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a2f6:	b29c      	uxth	r4, r3
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	f013 fec7 	bl	801e08c <lv_disp_get_dpi>
 800a2fe:	4603      	mov	r3, r0
 800a300:	461a      	mov	r2, r3
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	2bef      	cmp	r3, #239	; 0xef
 800a30c:	dd11      	ble.n	800a332 <lv_obj_get_scrollbar_area+0x98a>
 800a30e:	2000      	movs	r0, #0
 800a310:	f013 febc 	bl	801e08c <lv_disp_get_dpi>
 800a314:	4603      	mov	r3, r0
 800a316:	461a      	mov	r2, r3
 800a318:	4613      	mov	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	3350      	adds	r3, #80	; 0x50
 800a322:	4a82      	ldr	r2, [pc, #520]	; (800a52c <lv_obj_get_scrollbar_area+0xb84>)
 800a324:	fb82 1203 	smull	r1, r2, r2, r3
 800a328:	1192      	asrs	r2, r2, #6
 800a32a:	17db      	asrs	r3, r3, #31
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	b29b      	uxth	r3, r3
 800a330:	e000      	b.n	800a334 <lv_obj_get_scrollbar_area+0x98c>
 800a332:	2301      	movs	r3, #1
 800a334:	1ae3      	subs	r3, r4, r3
 800a336:	b29b      	uxth	r3, r3
 800a338:	b21a      	sxth	r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	801a      	strh	r2, [r3, #0]
 800a33e:	e0f2      	b.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
                    }
                }
            }
            else {
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a346:	b29a      	uxth	r2, r3
 800a348:	8a7b      	ldrh	r3, [r7, #18]
 800a34a:	4413      	add	r3, r2
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a350:	4413      	add	r3, r2
 800a352:	b29b      	uxth	r3, r3
 800a354:	b21a      	sxth	r2, r3
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a360:	b29a      	uxth	r2, r3
 800a362:	8afb      	ldrh	r3, [r7, #22]
 800a364:	4413      	add	r3, r2
 800a366:	b29b      	uxth	r3, r3
 800a368:	3b01      	subs	r3, #1
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	b21a      	sxth	r2, r3
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a378:	461a      	mov	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a380:	4619      	mov	r1, r3
 800a382:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800a386:	440b      	add	r3, r1
 800a388:	429a      	cmp	r2, r3
 800a38a:	da57      	bge.n	800a43c <lv_obj_get_scrollbar_area+0xa94>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a392:	b29a      	uxth	r2, r3
 800a394:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a396:	4413      	add	r3, r2
 800a398:	b29b      	uxth	r3, r3
 800a39a:	b21a      	sxth	r2, r3
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3a6:	461c      	mov	r4, r3
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	f013 fe6f 	bl	801e08c <lv_disp_get_dpi>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	2bef      	cmp	r3, #239	; 0xef
 800a3bc:	dd10      	ble.n	800a3e0 <lv_obj_get_scrollbar_area+0xa38>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	f013 fe64 	bl	801e08c <lv_disp_get_dpi>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	005b      	lsls	r3, r3, #1
 800a3d0:	3350      	adds	r3, #80	; 0x50
 800a3d2:	4a56      	ldr	r2, [pc, #344]	; (800a52c <lv_obj_get_scrollbar_area+0xb84>)
 800a3d4:	fb82 1203 	smull	r1, r2, r2, r3
 800a3d8:	1192      	asrs	r2, r2, #6
 800a3da:	17db      	asrs	r3, r3, #31
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	e000      	b.n	800a3e2 <lv_obj_get_scrollbar_area+0xa3a>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4423      	add	r3, r4
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	dd26      	ble.n	800a43c <lv_obj_get_scrollbar_area+0xa94>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3f4:	b29c      	uxth	r4, r3
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f013 fe48 	bl	801e08c <lv_disp_get_dpi>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	461a      	mov	r2, r3
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	2bef      	cmp	r3, #239	; 0xef
 800a40a:	dd11      	ble.n	800a430 <lv_obj_get_scrollbar_area+0xa88>
 800a40c:	2000      	movs	r0, #0
 800a40e:	f013 fe3d 	bl	801e08c <lv_disp_get_dpi>
 800a412:	4603      	mov	r3, r0
 800a414:	461a      	mov	r2, r3
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	3350      	adds	r3, #80	; 0x50
 800a420:	4a42      	ldr	r2, [pc, #264]	; (800a52c <lv_obj_get_scrollbar_area+0xb84>)
 800a422:	fb82 1203 	smull	r1, r2, r2, r3
 800a426:	1192      	asrs	r2, r2, #6
 800a428:	17db      	asrs	r3, r3, #31
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	e000      	b.n	800a432 <lv_obj_get_scrollbar_area+0xa8a>
 800a430:	2301      	movs	r3, #1
 800a432:	4423      	add	r3, r4
 800a434:	b29b      	uxth	r3, r3
 800a436:	b21a      	sxth	r2, r3
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a442:	4619      	mov	r1, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a44a:	461a      	mov	r2, r3
 800a44c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a450:	1ad2      	subs	r2, r2, r3
 800a452:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	4299      	cmp	r1, r3
 800a45a:	dd64      	ble.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a462:	b29a      	uxth	r2, r3
 800a464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	b29a      	uxth	r2, r3
 800a46a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	b29b      	uxth	r3, r3
 800a470:	b21a      	sxth	r2, r3
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a47c:	461c      	mov	r4, r3
 800a47e:	2000      	movs	r0, #0
 800a480:	f013 fe04 	bl	801e08c <lv_disp_get_dpi>
 800a484:	4603      	mov	r3, r0
 800a486:	461a      	mov	r2, r3
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	2bef      	cmp	r3, #239	; 0xef
 800a492:	dd10      	ble.n	800a4b6 <lv_obj_get_scrollbar_area+0xb0e>
 800a494:	2000      	movs	r0, #0
 800a496:	f013 fdf9 	bl	801e08c <lv_disp_get_dpi>
 800a49a:	4603      	mov	r3, r0
 800a49c:	461a      	mov	r2, r3
 800a49e:	4613      	mov	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	3350      	adds	r3, #80	; 0x50
 800a4a8:	4a20      	ldr	r2, [pc, #128]	; (800a52c <lv_obj_get_scrollbar_area+0xb84>)
 800a4aa:	fb82 1203 	smull	r1, r2, r2, r3
 800a4ae:	1192      	asrs	r2, r2, #6
 800a4b0:	17db      	asrs	r3, r3, #31
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	e000      	b.n	800a4b8 <lv_obj_get_scrollbar_area+0xb10>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	1ae3      	subs	r3, r4, r3
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	da30      	bge.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a4ca:	b29c      	uxth	r4, r3
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	f013 fddd 	bl	801e08c <lv_disp_get_dpi>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	2bef      	cmp	r3, #239	; 0xef
 800a4e0:	dd11      	ble.n	800a506 <lv_obj_get_scrollbar_area+0xb5e>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	f013 fdd2 	bl	801e08c <lv_disp_get_dpi>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	3350      	adds	r3, #80	; 0x50
 800a4f6:	4a0d      	ldr	r2, [pc, #52]	; (800a52c <lv_obj_get_scrollbar_area+0xb84>)
 800a4f8:	fb82 1203 	smull	r1, r2, r2, r3
 800a4fc:	1192      	asrs	r2, r2, #6
 800a4fe:	17db      	asrs	r3, r3, #31
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	b29b      	uxth	r3, r3
 800a504:	e000      	b.n	800a508 <lv_obj_get_scrollbar_area+0xb60>
 800a506:	2301      	movs	r3, #1
 800a508:	1ae3      	subs	r3, r4, r3
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	b21a      	sxth	r2, r3
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	801a      	strh	r2, [r3, #0]
 800a512:	e008      	b.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800a514:	bf00      	nop
 800a516:	e006      	b.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800a518:	bf00      	nop
 800a51a:	e004      	b.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
        if(indev == NULL)  return;
 800a51c:	bf00      	nop
 800a51e:	e002      	b.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
    if(!hor_draw && !ver_draw) return;
 800a520:	bf00      	nop
 800a522:	e000      	b.n	800a526 <lv_obj_get_scrollbar_area+0xb7e>
        return;
 800a524:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800a526:	374c      	adds	r7, #76	; 0x4c
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd90      	pop	{r4, r7, pc}
 800a52c:	66666667 	.word	0x66666667

0800a530 <lv_obj_scrollbar_invalidate>:

void lv_obj_scrollbar_invalidate(lv_obj_t * obj)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800a538:	f107 0208 	add.w	r2, r7, #8
 800a53c:	f107 0310 	add.w	r3, r7, #16
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff fa30 	bl	80099a8 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800a548:	f107 0310 	add.w	r3, r7, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	f014 f978 	bl	801e842 <lv_area_get_size>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d107      	bne.n	800a568 <lv_obj_scrollbar_invalidate+0x38>
 800a558:	f107 0308 	add.w	r3, r7, #8
 800a55c:	4618      	mov	r0, r3
 800a55e:	f014 f970 	bl	801e842 <lv_area_get_size>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01c      	beq.n	800a5a2 <lv_obj_scrollbar_invalidate+0x72>

    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800a568:	f107 0310 	add.w	r3, r7, #16
 800a56c:	4618      	mov	r0, r3
 800a56e:	f014 f968 	bl	801e842 <lv_area_get_size>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <lv_obj_scrollbar_invalidate+0x54>
 800a578:	f107 0310 	add.w	r3, r7, #16
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7fd fe04 	bl	800818c <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800a584:	f107 0308 	add.w	r3, r7, #8
 800a588:	4618      	mov	r0, r3
 800a58a:	f014 f95a 	bl	801e842 <lv_area_get_size>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d007      	beq.n	800a5a4 <lv_obj_scrollbar_invalidate+0x74>
 800a594:	f107 0308 	add.w	r3, r7, #8
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7fd fdf6 	bl	800818c <lv_obj_invalidate_area>
 800a5a0:	e000      	b.n	800a5a4 <lv_obj_scrollbar_invalidate+0x74>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800a5a2:	bf00      	nop
}
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <lv_obj_readjust_scroll>:

void lv_obj_readjust_scroll(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70fb      	strb	r3, [r7, #3]
    /*Be sure the bottom side is not remains scrolled in*/
    /*With snapping the content can't be scrolled in*/
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7fe fd08 	bl	8008fcc <lv_obj_get_scroll_snap_y>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d121      	bne.n	800a606 <lv_obj_readjust_scroll+0x5c>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7fe fd48 	bl	8009058 <lv_obj_get_scroll_top>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	81fb      	strh	r3, [r7, #14]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fe fd5b 	bl	8009088 <lv_obj_get_scroll_bottom>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	81bb      	strh	r3, [r7, #12]
        if(sb < 0 && st > 0) {
 800a5d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da13      	bge.n	800a606 <lv_obj_readjust_scroll+0x5c>
 800a5de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dd0f      	ble.n	800a606 <lv_obj_readjust_scroll+0x5c>
            sb = LV_MIN(st, -sb);
 800a5e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a5ea:	425a      	negs	r2, r3
 800a5ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	bfa8      	it	ge
 800a5f4:	4613      	movge	r3, r2
 800a5f6:	81bb      	strh	r3, [r7, #12]
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a5fe:	2100      	movs	r1, #0
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7fe ffd3 	bl	80095ac <lv_obj_scroll_by>
        }
    }

    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7fe fcca 	bl	8008fa0 <lv_obj_get_scroll_snap_x>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d141      	bne.n	800a696 <lv_obj_readjust_scroll+0xec>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7fe fdbe 	bl	8009194 <lv_obj_get_scroll_left>
 800a618:	4603      	mov	r3, r0
 800a61a:	817b      	strh	r3, [r7, #10]
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7fe fe5d 	bl	80092dc <lv_obj_get_scroll_right>
 800a622:	4603      	mov	r3, r0
 800a624:	813b      	strh	r3, [r7, #8]
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800a626:	2100      	movs	r1, #0
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7fe fc56 	bl	8008eda <lv_obj_get_style_base_dir>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b01      	cmp	r3, #1
 800a632:	d018      	beq.n	800a666 <lv_obj_readjust_scroll+0xbc>
            /*Be sure the left side is not remains scrolled in*/
            if(sr < 0 && sl > 0) {
 800a634:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	da2c      	bge.n	800a696 <lv_obj_readjust_scroll+0xec>
 800a63c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a640:	2b00      	cmp	r3, #0
 800a642:	dd28      	ble.n	800a696 <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sl, -sr);
 800a644:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a648:	425a      	negs	r2, r3
 800a64a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a64e:	4293      	cmp	r3, r2
 800a650:	bfa8      	it	ge
 800a652:	4613      	movge	r3, r2
 800a654:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800a656:	78fb      	ldrb	r3, [r7, #3]
 800a658:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800a65c:	2200      	movs	r2, #0
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7fe ffa4 	bl	80095ac <lv_obj_scroll_by>
                sr = LV_MIN(sr, -sl);
                lv_obj_scroll_by(obj, sl, 0, anim_en);
            }
        }
    }
}
 800a664:	e017      	b.n	800a696 <lv_obj_readjust_scroll+0xec>
            if(sl < 0 && sr > 0) {
 800a666:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	da13      	bge.n	800a696 <lv_obj_readjust_scroll+0xec>
 800a66e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	dd0f      	ble.n	800a696 <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sr, -sl);
 800a676:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a67a:	425a      	negs	r2, r3
 800a67c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a680:	4293      	cmp	r3, r2
 800a682:	bfa8      	it	ge
 800a684:	4613      	movge	r3, r2
 800a686:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800a68e:	2200      	movs	r2, #0
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7fe ff8b 	bl	80095ac <lv_obj_scroll_by>
}
 800a696:	bf00      	nop
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <scroll_x_anim>:
 *   STATIC FUNCTIONS
 **********************/


static void scroll_x_anim(void * obj, int32_t v)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7fe fca5 	bl	8008ff8 <lv_obj_get_scroll_x>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	4413      	add	r3, r2
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	b21b      	sxth	r3, r3
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff f928 	bl	8009916 <_lv_obj_scroll_by_raw>
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <scroll_y_anim>:

static void scroll_y_anim(void * obj, int32_t v)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7fe fca5 	bl	8009028 <lv_obj_get_scroll_y>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	4413      	add	r3, r2
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	b21b      	sxth	r3, r3
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff f910 	bl	8009916 <_lv_obj_scroll_by_raw>
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <scroll_anim_ready_cb>:

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b082      	sub	sp, #8
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2200      	movs	r2, #0
 800a70c:	210a      	movs	r1, #10
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f9 f9a4 	bl	8003a5c <lv_event_send>
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b092      	sub	sp, #72	; 0x48
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800a72a:	68b8      	ldr	r0, [r7, #8]
 800a72c:	f001 fec0 	bl	800c4b0 <lv_obj_get_parent>
 800a730:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800a732:	2110      	movs	r1, #16
 800a734:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a736:	f7fa fad6 	bl	8004ce6 <lv_obj_has_flag>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f083 0301 	eor.w	r3, r3, #1
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	f040 829f 	bne.w	800ac86 <scroll_area_into_view+0x56a>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800a748:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a74a:	f7fe fc13 	bl	8008f74 <lv_obj_get_scroll_dir>
 800a74e:	4603      	mov	r3, r0
 800a750:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    lv_coord_t snap_goal = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t act = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 800a762:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a764:	f7fe fc32 	bl	8008fcc <lv_obj_get_scroll_snap_y>
 800a768:	4603      	mov	r3, r0
 800a76a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800a76e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <scroll_area_into_view+0x62>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	3314      	adds	r3, #20
 800a77a:	647b      	str	r3, [r7, #68]	; 0x44
 800a77c:	e001      	b.n	800a782 <scroll_area_into_view+0x66>
    else area_tmp = area;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800a782:	2100      	movs	r1, #0
 800a784:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a786:	f7fe fb96 	bl	8008eb6 <lv_obj_get_style_border_width>
 800a78a:	4603      	mov	r3, r0
 800a78c:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800a78e:	2100      	movs	r1, #0
 800a790:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a792:	f7fe fb24 	bl	8008dde <lv_obj_get_style_pad_top>
 800a796:	4603      	mov	r3, r0
 800a798:	b29a      	uxth	r2, r3
 800a79a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a79c:	4413      	add	r3, r2
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a7a6:	f7fe fb2c 	bl	8008e02 <lv_obj_get_style_pad_bottom>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a7b0:	4413      	add	r3, r2
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800a7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a7c0:	4413      	add	r3, r2
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a7ec:	b299      	uxth	r1, r3
 800a7ee:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800a7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	1ac3      	subs	r3, r0, r3
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	440b      	add	r3, r1
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	4413      	add	r3, r2
 800a802:	b29b      	uxth	r3, r3
 800a804:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800a806:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a808:	f7fc ff39 	bl	800767e <lv_obj_get_height>
 800a80c:	4603      	mov	r3, r0
 800a80e:	b29a      	uxth	r2, r3
 800a810:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	b29a      	uxth	r2, r3
 800a816:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	853b      	strh	r3, [r7, #40]	; 0x28
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800a81e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a822:	2b00      	cmp	r3, #0
 800a824:	db07      	blt.n	800a836 <scroll_area_into_view+0x11a>
 800a826:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	db03      	blt.n	800a836 <scroll_area_into_view+0x11a>
 800a82e:	2300      	movs	r3, #0
 800a830:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a834:	e02e      	b.n	800a894 <scroll_area_into_view+0x178>
    else if(top_diff > 0) {
 800a836:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dd12      	ble.n	800a864 <scroll_area_into_view+0x148>
        y_scroll = top_diff;
 800a83e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a840:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800a844:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a846:	f7fe fc07 	bl	8009058 <lv_obj_get_scroll_top>
 800a84a:	4603      	mov	r3, r0
 800a84c:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(st - y_scroll < 0) y_scroll = 0;
 800a84e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a852:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	da1b      	bge.n	800a894 <scroll_area_into_view+0x178>
 800a85c:	2300      	movs	r3, #0
 800a85e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a862:	e017      	b.n	800a894 <scroll_area_into_view+0x178>
    }
    else if(bottom_diff > 0) {
 800a864:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a868:	2b00      	cmp	r3, #0
 800a86a:	dd13      	ble.n	800a894 <scroll_area_into_view+0x178>
        y_scroll = -bottom_diff;
 800a86c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a86e:	425b      	negs	r3, r3
 800a870:	b29b      	uxth	r3, r3
 800a872:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800a876:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a878:	f7fe fc06 	bl	8009088 <lv_obj_get_scroll_bottom>
 800a87c:	4603      	mov	r3, r0
 800a87e:	84fb      	strh	r3, [r7, #38]	; 0x26
        if(sb + y_scroll < 0) y_scroll = 0;
 800a880:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a884:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a888:	4413      	add	r3, r2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	da02      	bge.n	800a894 <scroll_area_into_view+0x178>
 800a88e:	2300      	movs	r3, #0
 800a890:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    switch(snap_y) {
 800a894:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d03e      	beq.n	800a91a <scroll_area_into_view+0x1fe>
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	dc6e      	bgt.n	800a97e <scroll_area_into_view+0x262>
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d002      	beq.n	800a8aa <scroll_area_into_view+0x18e>
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d01c      	beq.n	800a8e2 <scroll_area_into_view+0x1c6>
 800a8a8:	e069      	b.n	800a97e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
 800a8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a8b4:	4413      	add	r3, r2
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y1 + y_scroll;
 800a8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a8c6:	4413      	add	r3, r2
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800a8cc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800a8ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a8d8:	4413      	add	r3, r2
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800a8e0:	e04d      	b.n	800a97e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
 800a8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y2 + y_scroll;
 800a8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a8fe:	4413      	add	r3, r2
 800a900:	b29b      	uxth	r3, r3
 800a902:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800a904:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800a906:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a910:	4413      	add	r3, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800a918:	e031      	b.n	800a97e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800a91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a91c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a920:	b29a      	uxth	r2, r3
 800a922:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a924:	4413      	add	r3, r2
 800a926:	b29a      	uxth	r2, r3
 800a928:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da00      	bge.n	800a932 <scroll_area_into_view+0x216>
 800a930:	3301      	adds	r3, #1
 800a932:	105b      	asrs	r3, r3, #1
 800a934:	b21b      	sxth	r3, r3
 800a936:	b29b      	uxth	r3, r3
 800a938:	4413      	add	r3, r2
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800a93e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a940:	f7fe f9c9 	bl	8008cd6 <lv_area_get_height>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	da00      	bge.n	800a94c <scroll_area_into_view+0x230>
 800a94a:	3301      	adds	r3, #1
 800a94c:	105b      	asrs	r3, r3, #1
 800a94e:	b21b      	sxth	r3, r3
 800a950:	b29a      	uxth	r2, r3
 800a952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a954:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	4413      	add	r3, r2
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a962:	4413      	add	r3, r2
 800a964:	b29b      	uxth	r3, r3
 800a966:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800a968:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800a96a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	b29a      	uxth	r2, r3
 800a970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a974:	4413      	add	r3, r2
 800a976:	b29b      	uxth	r3, r3
 800a978:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800a97c:	bf00      	nop
    }

    lv_coord_t x_scroll = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800a984:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a986:	f7fe fb0b 	bl	8008fa0 <lv_obj_get_scroll_snap_x>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800a990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a994:	2b00      	cmp	r3, #0
 800a996:	d003      	beq.n	800a9a0 <scroll_area_into_view+0x284>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	3314      	adds	r3, #20
 800a99c:	647b      	str	r3, [r7, #68]	; 0x44
 800a99e:	e001      	b.n	800a9a4 <scroll_area_into_view+0x288>
    else area_tmp = area;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a9a8:	f7fe fa3d 	bl	8008e26 <lv_obj_get_style_pad_left>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a9b2:	4413      	add	r3, r2
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	843b      	strh	r3, [r7, #32]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a9bc:	f7fe fa45 	bl	8008e4a <lv_obj_get_style_pad_right>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a9c6:	4413      	add	r3, r2
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	83fb      	strh	r3, [r7, #30]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800a9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	8c3b      	ldrh	r3, [r7, #32]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	83bb      	strh	r3, [r7, #28]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aa02:	b299      	uxth	r1, r3
 800aa04:	8bf8      	ldrh	r0, [r7, #30]
 800aa06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa08:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	1ac3      	subs	r3, r0, r3
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	440b      	add	r3, r1
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	4413      	add	r3, r2
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	837b      	strh	r3, [r7, #26]
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800aa1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	db07      	blt.n	800aa34 <scroll_area_into_view+0x318>
 800aa24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	db03      	blt.n	800aa34 <scroll_area_into_view+0x318>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800aa32:	e02e      	b.n	800aa92 <scroll_area_into_view+0x376>
    else if(left_diff > 0) {
 800aa34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	dd12      	ble.n	800aa62 <scroll_area_into_view+0x346>
        x_scroll = left_diff;
 800aa3c:	8bbb      	ldrh	r3, [r7, #28]
 800aa3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800aa42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa44:	f7fe fba6 	bl	8009194 <lv_obj_get_scroll_left>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	82fb      	strh	r3, [r7, #22]
        if(sl - x_scroll < 0) x_scroll = 0;
 800aa4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800aa50:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da1b      	bge.n	800aa92 <scroll_area_into_view+0x376>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800aa60:	e017      	b.n	800aa92 <scroll_area_into_view+0x376>
    }
    else if(right_diff > 0) {
 800aa62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd13      	ble.n	800aa92 <scroll_area_into_view+0x376>
        x_scroll = -right_diff;
 800aa6a:	8b7b      	ldrh	r3, [r7, #26]
 800aa6c:	425b      	negs	r3, r3
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800aa74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa76:	f7fe fc31 	bl	80092dc <lv_obj_get_scroll_right>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	833b      	strh	r3, [r7, #24]
        if(sr + x_scroll < 0) x_scroll = 0;
 800aa7e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800aa82:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800aa86:	4413      	add	r3, r2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	da02      	bge.n	800aa92 <scroll_area_into_view+0x376>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800aa92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa94:	f7fc fde5 	bl	8007662 <lv_obj_get_width>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	8c3b      	ldrh	r3, [r7, #32]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	8bfb      	ldrh	r3, [r7, #30]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	82bb      	strh	r3, [r7, #20]
    switch(snap_x) {
 800aaaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d03e      	beq.n	800ab30 <scroll_area_into_view+0x414>
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	dc6e      	bgt.n	800ab94 <scroll_area_into_view+0x478>
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d002      	beq.n	800aac0 <scroll_area_into_view+0x3a4>
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d01c      	beq.n	800aaf8 <scroll_area_into_view+0x3dc>
 800aabe:	e069      	b.n	800ab94 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
 800aac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	8c3b      	ldrh	r3, [r7, #32]
 800aaca:	4413      	add	r3, r2
 800aacc:	b29b      	uxth	r3, r3
 800aace:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x1 + x_scroll;
 800aad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aadc:	4413      	add	r3, r2
 800aade:	b29b      	uxth	r3, r3
 800aae0:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800aae2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800aae4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aaee:	4413      	add	r3, r2
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800aaf6:	e04d      	b.n	800ab94 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
 800aaf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	8bfb      	ldrh	r3, [r7, #30]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x2 + x_scroll;
 800ab08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab14:	4413      	add	r3, r2
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800ab1a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ab1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab26:	4413      	add	r3, r2
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800ab2e:	e031      	b.n	800ab94 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800ab30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab32:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	8c3b      	ldrh	r3, [r7, #32]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da00      	bge.n	800ab48 <scroll_area_into_view+0x42c>
 800ab46:	3301      	adds	r3, #1
 800ab48:	105b      	asrs	r3, r3, #1
 800ab4a:	b21b      	sxth	r3, r3
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	4413      	add	r3, r2
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800ab54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ab56:	f7fe f8a7 	bl	8008ca8 <lv_area_get_width>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	da00      	bge.n	800ab62 <scroll_area_into_view+0x446>
 800ab60:	3301      	adds	r3, #1
 800ab62:	105b      	asrs	r3, r3, #1
 800ab64:	b21b      	sxth	r3, r3
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4413      	add	r3, r2
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab78:	4413      	add	r3, r2
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800ab7e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ab80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab8a:	4413      	add	r3, r2
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800ab92:	bf00      	nop
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800ab94:	493f      	ldr	r1, [pc, #252]	; (800ac94 <scroll_area_into_view+0x578>)
 800ab96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab98:	f013 fbbc 	bl	801e314 <lv_anim_del>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	74fb      	strb	r3, [r7, #19]
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800aba0:	493d      	ldr	r1, [pc, #244]	; (800ac98 <scroll_area_into_view+0x57c>)
 800aba2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aba4:	f013 fbb6 	bl	801e314 <lv_anim_del>
 800aba8:	4603      	mov	r3, r0
 800abaa:	74bb      	strb	r3, [r7, #18]
    if(y_del || x_del) {
 800abac:	7cfb      	ldrb	r3, [r7, #19]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <scroll_area_into_view+0x49c>
 800abb2:	7cbb      	ldrb	r3, [r7, #18]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d009      	beq.n	800abcc <scroll_area_into_view+0x4b0>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800abb8:	2200      	movs	r2, #0
 800abba:	210a      	movs	r1, #10
 800abbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800abbe:	f7f8 ff4d 	bl	8003a5c <lv_event_send>
 800abc2:	4603      	mov	r3, r0
 800abc4:	747b      	strb	r3, [r7, #17]
        if(res != LV_RES_OK) return;
 800abc6:	7c7b      	ldrb	r3, [r7, #17]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d15e      	bne.n	800ac8a <scroll_area_into_view+0x56e>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800abcc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d106      	bne.n	800abe6 <scroll_area_into_view+0x4ca>
 800abd8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800abdc:	2b00      	cmp	r3, #0
 800abde:	da02      	bge.n	800abe6 <scroll_area_into_view+0x4ca>
 800abe0:	2300      	movs	r3, #0
 800abe2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800abe6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abea:	f003 0302 	and.w	r3, r3, #2
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <scroll_area_into_view+0x4e4>
 800abf2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dd02      	ble.n	800ac00 <scroll_area_into_view+0x4e4>
 800abfa:	2300      	movs	r3, #0
 800abfc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800ac00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac04:	f003 0304 	and.w	r3, r3, #4
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d106      	bne.n	800ac1a <scroll_area_into_view+0x4fe>
 800ac0c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	da02      	bge.n	800ac1a <scroll_area_into_view+0x4fe>
 800ac14:	2300      	movs	r3, #0
 800ac16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800ac1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac1e:	f003 0308 	and.w	r3, r3, #8
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d106      	bne.n	800ac34 <scroll_area_into_view+0x518>
 800ac26:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dd02      	ble.n	800ac34 <scroll_area_into_view+0x518>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	78fb      	ldrb	r3, [r7, #3]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <scroll_area_into_view+0x52c>
 800ac42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac46:	e000      	b.n	800ac4a <scroll_area_into_view+0x52e>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4413      	add	r3, r2
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	b21a      	sxth	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	801a      	strh	r2, [r3, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	78fb      	ldrb	r3, [r7, #3]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <scroll_area_into_view+0x54c>
 800ac62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac66:	e000      	b.n	800ac6a <scroll_area_into_view+0x54e>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	4413      	add	r3, r2
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	b21a      	sxth	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	805a      	strh	r2, [r3, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800ac7a:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 800ac7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac80:	f7fe fc94 	bl	80095ac <lv_obj_scroll_by>
 800ac84:	e002      	b.n	800ac8c <scroll_area_into_view+0x570>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800ac86:	bf00      	nop
 800ac88:	e000      	b.n	800ac8c <scroll_area_into_view+0x570>
        if(res != LV_RES_OK) return;
 800ac8a:	bf00      	nop
}
 800ac8c:	3748      	adds	r7, #72	; 0x48
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	0800a6cf 	.word	0x0800a6cf
 800ac98:	0800a69f 	.word	0x0800a69f

0800ac9c <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	7138      	strb	r0, [r7, #4]
 800aca4:	7039      	strb	r1, [r7, #0]
 800aca6:	4613      	mov	r3, r2
 800aca8:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800acaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	da01      	bge.n	800acb6 <lv_color_mix+0x1a>
 800acb2:	793b      	ldrb	r3, [r7, #4]
 800acb4:	e000      	b.n	800acb8 <lv_color_mix+0x1c>
 800acb6:	783b      	ldrb	r3, [r7, #0]
 800acb8:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 800acba:	7b3b      	ldrb	r3, [r7, #12]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <lv_anim_set_var>:
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
    a->var = var;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	601a      	str	r2, [r3, #0]
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <lv_anim_set_exec_cb>:
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	605a      	str	r2, [r3, #4]
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <lv_anim_set_time>:
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <lv_anim_set_delay>:
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	425a      	negs	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <lv_anim_set_values>:
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b085      	sub	sp, #20
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ad58:	bf00      	nop
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <lv_anim_set_path_cb>:
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	61da      	str	r2, [r3, #28]
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <lv_anim_set_start_cb>:
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	609a      	str	r2, [r3, #8]
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <lv_anim_set_ready_cb>:
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	60da      	str	r2, [r3, #12]
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <lv_anim_set_early_apply>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
    a->early_apply = en;
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800adca:	78f9      	ldrb	r1, [r7, #3]
 800adcc:	f361 0300 	bfi	r3, r1, #0, #1
 800add0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <lv_style_prop_has_flag>:
 * @param prop Property ID
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	4603      	mov	r3, r0
 800ade8:	460a      	mov	r2, r1
 800adea:	80fb      	strh	r3, [r7, #6]
 800adec:	4613      	mov	r3, r2
 800adee:	717b      	strb	r3, [r7, #5]
    return _lv_style_prop_lookup_flags(prop) & flag;
 800adf0:	88fb      	ldrh	r3, [r7, #6]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f016 f97e 	bl	80210f4 <_lv_style_prop_lookup_flags>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	797b      	ldrb	r3, [r7, #5]
 800adfe:	4013      	ands	r3, r2
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bf14      	ite	ne
 800ae06:	2301      	movne	r3, #1
 800ae08:	2300      	moveq	r3, #0
 800ae0a:	b2db      	uxtb	r3, r3
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <lv_obj_get_style_width>:
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800ae1e:	2201      	movs	r2, #1
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa60 	bl	800b2e8 <lv_obj_get_style_prop>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	b21b      	sxth	r3, r3
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <lv_obj_get_style_height>:
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800ae42:	2204      	movs	r2, #4
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa4e 	bl	800b2e8 <lv_obj_get_style_prop>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	b21b      	sxth	r3, r3
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <lv_obj_get_style_transform_zoom>:
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800ae66:	226c      	movs	r2, #108	; 0x6c
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fa3c 	bl	800b2e8 <lv_obj_get_style_prop>
 800ae70:	4603      	mov	r3, r0
 800ae72:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	b21b      	sxth	r3, r3
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <lv_obj_get_style_transform_angle>:
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800ae8a:	226d      	movs	r2, #109	; 0x6d
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fa2a 	bl	800b2e8 <lv_obj_get_style_prop>
 800ae94:	4603      	mov	r3, r0
 800ae96:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	b21b      	sxth	r3, r3
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <lv_obj_get_style_opa>:
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800aeae:	2260      	movs	r2, #96	; 0x60
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa18 	bl	800b2e8 <lv_obj_get_style_prop>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	b2db      	uxtb	r3, r3
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <lv_obj_get_style_color_filter_dsc>:
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800aed2:	2261      	movs	r2, #97	; 0x61
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa06 	bl	800b2e8 <lv_obj_get_style_prop>
 800aedc:	4603      	mov	r3, r0
 800aede:	60fb      	str	r3, [r7, #12]
    return (const lv_color_filter_dsc_t *)v.ptr;
 800aee0:	68fb      	ldr	r3, [r7, #12]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <lv_obj_get_style_color_filter_opa>:
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800aef4:	2262      	movs	r2, #98	; 0x62
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f9f5 	bl	800b2e8 <lv_obj_get_style_prop>
 800aefe:	4603      	mov	r3, r0
 800af00:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	b2db      	uxtb	r3, r3
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <lv_obj_get_style_blend_mode>:
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800af18:	2267      	movs	r2, #103	; 0x67
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f9e3 	bl	800b2e8 <lv_obj_get_style_prop>
 800af22:	4603      	mov	r3, r0
 800af24:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	b2db      	uxtb	r3, r3
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
	...

0800af34 <_lv_obj_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_obj_style_init(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800af38:	2114      	movs	r1, #20
 800af3a:	4802      	ldr	r0, [pc, #8]	; (800af44 <_lv_obj_style_init+0x10>)
 800af3c:	f014 fd91 	bl	801fa62 <_lv_ll_init>
}
 800af40:	bf00      	nop
 800af42:	bd80      	pop	{r7, pc}
 800af44:	20000840 	.word	0x20000840

0800af48 <lv_obj_remove_style>:

    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
}

void lv_obj_remove_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08c      	sub	sp, #48	; 0x30
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
    lv_state_t state = lv_obj_style_get_selector_state(selector);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fd7d 	bl	800ba54 <lv_obj_style_get_selector_state>
 800af5a:	4603      	mov	r3, r0
 800af5c:	83fb      	strh	r3, [r7, #30]
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fd84 	bl	800ba6c <lv_obj_style_get_selector_part>
 800af64:	61b8      	str	r0, [r7, #24]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800af66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d005      	beq.n	800af7e <lv_obj_remove_style+0x36>
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	7adb      	ldrb	r3, [r3, #11]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <lv_obj_remove_style+0x36>
 800af7a:	2300      	movs	r3, #0
 800af7c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint32_t i = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	62bb      	str	r3, [r7, #40]	; 0x28
    bool deleted = false;
 800af82:	2300      	movs	r3, #0
 800af84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800af88:	e0b9      	b.n	800b0fe <lv_obj_remove_style+0x1b6>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68da      	ldr	r2, [r3, #12]
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	00db      	lsls	r3, r3, #3
 800af92:	4413      	add	r3, r2
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 fd5a 	bl	800ba54 <lv_obj_style_get_selector_state>
 800afa0:	4603      	mov	r3, r0
 800afa2:	82fb      	strh	r3, [r7, #22]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	00db      	lsls	r3, r3, #3
 800afac:	4413      	add	r3, r2
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 fd59 	bl	800ba6c <lv_obj_style_get_selector_part>
 800afba:	6138      	str	r0, [r7, #16]
        if((state != LV_STATE_ANY && state_act != state) ||
 800afbc:	8bfb      	ldrh	r3, [r7, #30]
 800afbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d003      	beq.n	800afce <lv_obj_remove_style+0x86>
 800afc6:	8afa      	ldrh	r2, [r7, #22]
 800afc8:	8bfb      	ldrh	r3, [r7, #30]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d113      	bne.n	800aff6 <lv_obj_remove_style+0xae>
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800afd4:	d003      	beq.n	800afde <lv_obj_remove_style+0x96>
           (part != LV_PART_ANY && part_act != part) ||
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d10b      	bne.n	800aff6 <lv_obj_remove_style+0xae>
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00c      	beq.n	800affe <lv_obj_remove_style+0xb6>
           (style != NULL && style != obj->styles[i].style)) {
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	68da      	ldr	r2, [r3, #12]
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	4413      	add	r3, r2
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d003      	beq.n	800affe <lv_obj_remove_style+0xb6>
            i++;
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	3301      	adds	r3, #1
 800affa:	62bb      	str	r3, [r7, #40]	; 0x28
            continue;
 800affc:	e07f      	b.n	800b0fe <lv_obj_remove_style+0x1b6>
        }

        if(obj->styles[i].is_trans) {
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	4413      	add	r3, r2
 800b008:	79db      	ldrb	r3, [r3, #7]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d006      	beq.n	800b022 <lv_obj_remove_style+0xda>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800b014:	2300      	movs	r3, #0
 800b016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b01a:	69b9      	ldr	r1, [r7, #24]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 ff05 	bl	800be2c <trans_del>
        }

        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	4413      	add	r3, r2
 800b02c:	79db      	ldrb	r3, [r3, #7]
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <lv_obj_remove_style+0x106>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	68da      	ldr	r2, [r3, #12]
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	00db      	lsls	r3, r3, #3
 800b040:	4413      	add	r3, r2
 800b042:	79db      	ldrb	r3, [r3, #7]
 800b044:	f003 0302 	and.w	r3, r3, #2
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d018      	beq.n	800b080 <lv_obj_remove_style+0x138>
            lv_style_reset(obj->styles[i].style);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	68da      	ldr	r2, [r3, #12]
 800b052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b054:	00db      	lsls	r3, r3, #3
 800b056:	4413      	add	r3, r2
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f015 fde6 	bl	8020c2c <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	68da      	ldr	r2, [r3, #12]
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	4413      	add	r3, r2
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f014 ffc5 	bl	801fffc <lv_mem_free>
            obj->styles[i].style = NULL;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	4413      	add	r3, r2
 800b07c:	2200      	movs	r2, #0
 800b07e:	601a      	str	r2, [r3, #0]
        }

        /*Shift the styles after `i` by one*/
        uint32_t j;
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	623b      	str	r3, [r7, #32]
 800b084:	e012      	b.n	800b0ac <lv_obj_remove_style+0x164>
            obj->styles[j] = obj->styles[j + 1];
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	3301      	adds	r3, #1
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	18d1      	adds	r1, r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	00db      	lsls	r3, r3, #3
 800b09a:	4413      	add	r3, r2
 800b09c:	460a      	mov	r2, r1
 800b09e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b0a2:	e883 0003 	stmia.w	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	623b      	str	r3, [r7, #32]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b0b0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	6a3a      	ldr	r2, [r7, #32]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d3e3      	bcc.n	800b086 <lv_obj_remove_style+0x13e>
        }

        obj->style_cnt--;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b0c2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	333f      	adds	r3, #63	; 0x3f
 800b0ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0ce:	b2d9      	uxtb	r1, r3
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800b0d4:	f361 03c8 	bfi	r3, r1, #3, #6
 800b0d8:	8453      	strh	r3, [r2, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	68da      	ldr	r2, [r3, #12]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b0e2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	00db      	lsls	r3, r3, #3
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	f014 ffb3 	bl	8020058 <lv_mem_realloc>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	60da      	str	r2, [r3, #12]

        deleted = true;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b102:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b106:	b2db      	uxtb	r3, r3
 800b108:	461a      	mov	r2, r3
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	4293      	cmp	r3, r2
 800b10e:	f4ff af3c 	bcc.w	800af8a <lv_obj_remove_style+0x42>
        /*The style from the current `i` index is removed, so `i` points to the next style.
         *Therefore it doesn't needs to be incremented*/
    }
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800b112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b116:	2b00      	cmp	r3, #0
 800b118:	d008      	beq.n	800b12c <lv_obj_remove_style+0x1e4>
 800b11a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d005      	beq.n	800b12c <lv_obj_remove_style+0x1e4>
        lv_obj_refresh_style(obj, part, prop);
 800b120:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b122:	461a      	mov	r2, r3
 800b124:	69b9      	ldr	r1, [r7, #24]
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 f804 	bl	800b134 <lv_obj_refresh_style>
    }
}
 800b12c:	bf00      	nop
 800b12e:	3730      	adds	r7, #48	; 0x30
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <lv_obj_refresh_style>:
        d = lv_disp_get_next(d);
    }
}

void lv_obj_refresh_style(lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	4613      	mov	r3, r2
 800b140:	80fb      	strh	r3, [r7, #6]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!style_refr) return;
 800b142:	4b60      	ldr	r3, [pc, #384]	; (800b2c4 <lv_obj_refresh_style+0x190>)
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	f083 0301 	eor.w	r3, r3, #1
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f040 80b4 	bne.w	800b2ba <lv_obj_refresh_style+0x186>

    lv_obj_invalidate(obj);
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7fd f84f 	bl	80081f6 <lv_obj_invalidate>

    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800b158:	68b8      	ldr	r0, [r7, #8]
 800b15a:	f000 fc87 	bl	800ba6c <lv_obj_style_get_selector_part>
 800b15e:	61f8      	str	r0, [r7, #28]

    bool is_layout_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYOUT_REFR);
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	2104      	movs	r1, #4
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff fe3b 	bl	800ade0 <lv_style_prop_has_flag>
 800b16a:	4603      	mov	r3, r0
 800b16c:	76fb      	strb	r3, [r7, #27]
    bool is_ext_draw = lv_style_prop_has_flag(prop, LV_STYLE_PROP_EXT_DRAW);
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	2102      	movs	r1, #2
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff fe34 	bl	800ade0 <lv_style_prop_has_flag>
 800b178:	4603      	mov	r3, r0
 800b17a:	76bb      	strb	r3, [r7, #26]
    bool is_inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800b17c:	88fb      	ldrh	r3, [r7, #6]
 800b17e:	2101      	movs	r1, #1
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff fe2d 	bl	800ade0 <lv_style_prop_has_flag>
 800b186:	4603      	mov	r3, r0
 800b188:	767b      	strb	r3, [r7, #25]
    bool is_layer_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYER_REFR);
 800b18a:	88fb      	ldrh	r3, [r7, #6]
 800b18c:	2110      	movs	r1, #16
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff fe26 	bl	800ade0 <lv_style_prop_has_flag>
 800b194:	4603      	mov	r3, r0
 800b196:	763b      	strb	r3, [r7, #24]

    if(is_layout_refr) {
 800b198:	7efb      	ldrb	r3, [r7, #27]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d022      	beq.n	800b1e4 <lv_obj_refresh_style+0xb0>
        if(part == LV_PART_ANY ||
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800b1a4:	d016      	beq.n	800b1d4 <lv_obj_refresh_style+0xa0>
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d013      	beq.n	800b1d4 <lv_obj_refresh_style+0xa0>
           part == LV_PART_MAIN ||
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7ff fe42 	bl	800ae38 <lv_obj_get_style_height>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	461a      	mov	r2, r3
           part == LV_PART_MAIN ||
 800b1b8:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d009      	beq.n	800b1d4 <lv_obj_refresh_style+0xa0>
           lv_obj_get_style_width(obj, 0) == LV_SIZE_CONTENT) {
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff fe26 	bl	800ae14 <lv_obj_get_style_width>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	461a      	mov	r2, r3
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800b1cc:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d107      	bne.n	800b1e4 <lv_obj_refresh_style+0xb0>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	212a      	movs	r1, #42	; 0x2a
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7f8 fc3f 	bl	8003a5c <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7fc f9dc 	bl	800759c <lv_obj_mark_layout_as_dirty>
        }
    }
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800b1ea:	d002      	beq.n	800b1f2 <lv_obj_refresh_style+0xbe>
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d111      	bne.n	800b216 <lv_obj_refresh_style+0xe2>
 800b1f2:	88fb      	ldrh	r3, [r7, #6]
 800b1f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d002      	beq.n	800b202 <lv_obj_refresh_style+0xce>
 800b1fc:	7efb      	ldrb	r3, [r7, #27]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d009      	beq.n	800b216 <lv_obj_refresh_style+0xe2>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f001 f954 	bl	800c4b0 <lv_obj_get_parent>
 800b208:	6178      	str	r0, [r7, #20]
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <lv_obj_refresh_style+0xe2>
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	f7fc f9c3 	bl	800759c <lv_obj_mark_layout_as_dirty>
    }

    /*Cache the layer type*/
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800b21c:	d002      	beq.n	800b224 <lv_obj_refresh_style+0xf0>
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d126      	bne.n	800b272 <lv_obj_refresh_style+0x13e>
 800b224:	7e3b      	ldrb	r3, [r7, #24]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d023      	beq.n	800b272 <lv_obj_refresh_style+0x13e>
        lv_layer_type_t layer_type = calculate_layer_type(obj);
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f001 f8c4 	bl	800c3b8 <calculate_layer_type>
 800b230:	4603      	mov	r3, r0
 800b232:	74fb      	strb	r3, [r7, #19]
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00a      	beq.n	800b252 <lv_obj_refresh_style+0x11e>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	689a      	ldr	r2, [r3, #8]
 800b240:	7cfb      	ldrb	r3, [r7, #19]
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	b2d9      	uxtb	r1, r3
 800b248:	7e93      	ldrb	r3, [r2, #26]
 800b24a:	f361 1387 	bfi	r3, r1, #6, #2
 800b24e:	7693      	strb	r3, [r2, #26]
 800b250:	e00f      	b.n	800b272 <lv_obj_refresh_style+0x13e>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800b252:	7cfb      	ldrb	r3, [r7, #19]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00c      	beq.n	800b272 <lv_obj_refresh_style+0x13e>
            lv_obj_allocate_spec_attr(obj);
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7f9 fd8d 	bl	8004d78 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	689a      	ldr	r2, [r3, #8]
 800b262:	7cfb      	ldrb	r3, [r7, #19]
 800b264:	f003 0303 	and.w	r3, r3, #3
 800b268:	b2d9      	uxtb	r1, r3
 800b26a:	7e93      	ldrb	r3, [r2, #26]
 800b26c:	f361 1387 	bfi	r3, r1, #6, #2
 800b270:	7693      	strb	r3, [r2, #26]
        }
    }

    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800b272:	88fb      	ldrh	r3, [r7, #6]
 800b274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b278:	4293      	cmp	r3, r2
 800b27a:	d002      	beq.n	800b282 <lv_obj_refresh_style+0x14e>
 800b27c:	7ebb      	ldrb	r3, [r7, #26]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <lv_obj_refresh_style+0x154>
        lv_obj_refresh_ext_draw_size(obj);
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7fb fce5 	bl	8006c52 <lv_obj_refresh_ext_draw_size>
    }
    lv_obj_invalidate(obj);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7fc ffb4 	bl	80081f6 <lv_obj_invalidate>

    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800b28e:	88fb      	ldrh	r3, [r7, #6]
 800b290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b294:	4293      	cmp	r3, r2
 800b296:	d008      	beq.n	800b2aa <lv_obj_refresh_style+0x176>
 800b298:	7e7b      	ldrb	r3, [r7, #25]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00e      	beq.n	800b2bc <lv_obj_refresh_style+0x188>
 800b29e:	7ebb      	ldrb	r3, [r7, #26]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d102      	bne.n	800b2aa <lv_obj_refresh_style+0x176>
 800b2a4:	7efb      	ldrb	r3, [r7, #27]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d008      	beq.n	800b2bc <lv_obj_refresh_style+0x188>
        if(part != LV_PART_SCROLLBAR) {
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2b0:	d004      	beq.n	800b2bc <lv_obj_refresh_style+0x188>
            refresh_children_style(obj);
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 fd8c 	bl	800bdd0 <refresh_children_style>
 800b2b8:	e000      	b.n	800b2bc <lv_obj_refresh_style+0x188>
    if(!style_refr) return;
 800b2ba:	bf00      	nop
        }
    }
}
 800b2bc:	3720      	adds	r7, #32
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	2000000d 	.word	0x2000000d

0800b2c8 <lv_obj_enable_style_refresh>:

void lv_obj_enable_style_refresh(bool en)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	71fb      	strb	r3, [r7, #7]
    style_refr = en;
 800b2d2:	4a04      	ldr	r2, [pc, #16]	; (800b2e4 <lv_obj_enable_style_refresh+0x1c>)
 800b2d4:	79fb      	ldrb	r3, [r7, #7]
 800b2d6:	7013      	strb	r3, [r2, #0]
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	2000000d 	.word	0x2000000d

0800b2e8 <lv_obj_get_style_prop>:

lv_style_value_t lv_obj_get_style_prop(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value_act;
    bool inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800b2f6:	88fb      	ldrh	r3, [r7, #6]
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7ff fd70 	bl	800ade0 <lv_style_prop_has_flag>
 800b300:	4603      	mov	r3, r0
 800b302:	75fb      	strb	r3, [r7, #23]
    lv_style_res_t found = LV_STYLE_RES_NOT_FOUND;
 800b304:	2300      	movs	r3, #0
 800b306:	77fb      	strb	r3, [r7, #31]
    while(obj) {
 800b308:	e01e      	b.n	800b348 <lv_obj_get_style_prop+0x60>
        found = get_prop_core(obj, part, prop, &value_act);
 800b30a:	f107 0310 	add.w	r3, r7, #16
 800b30e:	88fa      	ldrh	r2, [r7, #6]
 800b310:	68b9      	ldr	r1, [r7, #8]
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 fc58 	bl	800bbc8 <get_prop_core>
 800b318:	4603      	mov	r3, r0
 800b31a:	77fb      	strb	r3, [r7, #31]
        if(found == LV_STYLE_RES_FOUND) break;
 800b31c:	7ffb      	ldrb	r3, [r7, #31]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d016      	beq.n	800b350 <lv_obj_get_style_prop+0x68>
        if(!inheritable) break;
 800b322:	7dfb      	ldrb	r3, [r7, #23]
 800b324:	f083 0301 	eor.w	r3, r3, #1
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d112      	bne.n	800b354 <lv_obj_get_style_prop+0x6c>

        /*If not found, check the `MAIN` style first*/
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800b32e:	7ffb      	ldrb	r3, [r7, #31]
 800b330:	2b02      	cmp	r3, #2
 800b332:	d005      	beq.n	800b340 <lv_obj_get_style_prop+0x58>
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <lv_obj_get_style_prop+0x58>
            part = LV_PART_MAIN;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60bb      	str	r3, [r7, #8]
            continue;
 800b33e:	e003      	b.n	800b348 <lv_obj_get_style_prop+0x60>
        }

        /*Check the parent too.*/
        obj = lv_obj_get_parent(obj);
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f001 f8b5 	bl	800c4b0 <lv_obj_get_parent>
 800b346:	60f8      	str	r0, [r7, #12]
    while(obj) {
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1dd      	bne.n	800b30a <lv_obj_get_style_prop+0x22>
 800b34e:	e002      	b.n	800b356 <lv_obj_get_style_prop+0x6e>
        if(found == LV_STYLE_RES_FOUND) break;
 800b350:	bf00      	nop
 800b352:	e000      	b.n	800b356 <lv_obj_get_style_prop+0x6e>
        if(!inheritable) break;
 800b354:	bf00      	nop
    }

    if(found != LV_STYLE_RES_FOUND) {
 800b356:	7ffb      	ldrb	r3, [r7, #31]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d03a      	beq.n	800b3d2 <lv_obj_get_style_prop+0xea>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d131      	bne.n	800b3c6 <lv_obj_get_style_prop+0xde>
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d002      	beq.n	800b36e <lv_obj_get_style_prop+0x86>
 800b368:	88fb      	ldrh	r3, [r7, #6]
 800b36a:	2b04      	cmp	r3, #4
 800b36c:	d12b      	bne.n	800b3c6 <lv_obj_get_style_prop+0xde>
            const lv_obj_class_t * cls = obj->class_p;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800b374:	e010      	b.n	800b398 <lv_obj_get_style_prop+0xb0>
                if(prop == LV_STYLE_WIDTH) {
 800b376:	88fb      	ldrh	r3, [r7, #6]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d105      	bne.n	800b388 <lv_obj_get_style_prop+0xa0>
                    if(cls->width_def != 0) break;
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d005      	beq.n	800b392 <lv_obj_get_style_prop+0xaa>
 800b386:	e00c      	b.n	800b3a2 <lv_obj_get_style_prop+0xba>
                }
                else {
                    if(cls->height_def != 0) break;
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <lv_obj_get_style_prop+0xb8>
                }
                cls = cls->base_class;
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1eb      	bne.n	800b376 <lv_obj_get_style_prop+0x8e>
 800b39e:	e000      	b.n	800b3a2 <lv_obj_get_style_prop+0xba>
                    if(cls->height_def != 0) break;
 800b3a0:	bf00      	nop
            }

            if(cls) {
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00b      	beq.n	800b3c0 <lv_obj_get_style_prop+0xd8>
                value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800b3a8:	88fb      	ldrh	r3, [r7, #6]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d103      	bne.n	800b3b6 <lv_obj_get_style_prop+0xce>
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b3b4:	e002      	b.n	800b3bc <lv_obj_get_style_prop+0xd4>
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b3bc:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800b3be:	e008      	b.n	800b3d2 <lv_obj_get_style_prop+0xea>
            }
            else {
                value_act.num = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800b3c4:	e005      	b.n	800b3d2 <lv_obj_get_style_prop+0xea>
            }
        }
        else {
            value_act = lv_style_prop_get_default(prop);
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f015 fd53 	bl	8020e74 <lv_style_prop_get_default>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	613b      	str	r3, [r7, #16]
        }
    }
    return value_act;
 800b3d2:	693b      	ldr	r3, [r7, #16]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3720      	adds	r7, #32
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <_lv_obj_style_create_transition>:
    return res;
}

void _lv_obj_style_create_transition(lv_obj_t * obj, lv_part_t part, lv_state_t prev_state, lv_state_t new_state,
                                     const _lv_obj_style_transition_dsc_t * tr_dsc)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b09a      	sub	sp, #104	; 0x68
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	80fb      	strh	r3, [r7, #6]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	80bb      	strh	r3, [r7, #4]
    trans_t * tr;

    /*Get the previous and current values*/
    obj->skip_trans = 1;
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800b3f8:	f043 0304 	orr.w	r3, r3, #4
 800b3fc:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    obj->state = prev_state;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	88fa      	ldrh	r2, [r7, #6]
 800b404:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b408:	891b      	ldrh	r3, [r3, #8]
 800b40a:	461a      	mov	r2, r3
 800b40c:	68b9      	ldr	r1, [r7, #8]
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f7ff ff6a 	bl	800b2e8 <lv_obj_get_style_prop>
 800b414:	4603      	mov	r3, r0
 800b416:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	88ba      	ldrh	r2, [r7, #4]
 800b41c:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b41e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b420:	891b      	ldrh	r3, [r3, #8]
 800b422:	461a      	mov	r2, r3
 800b424:	68b9      	ldr	r1, [r7, #8]
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f7ff ff5e 	bl	800b2e8 <lv_obj_get_style_prop>
 800b42c:	4603      	mov	r3, r0
 800b42e:	657b      	str	r3, [r7, #84]	; 0x54
    obj->skip_trans = 0;
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800b436:	f36f 0382 	bfc	r3, #2, #1
 800b43a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800b43e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b442:	429a      	cmp	r2, r3
 800b444:	d10a      	bne.n	800b45c <_lv_obj_style_create_transition+0x80>
 800b446:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d106      	bne.n	800b45c <_lv_obj_style_create_transition+0x80>
 800b44e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800b452:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b456:	429a      	cmp	r2, r3
 800b458:	f000 80cc 	beq.w	800b5f4 <_lv_obj_style_create_transition+0x218>
    obj->state = prev_state;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	88fa      	ldrh	r2, [r7, #6]
 800b460:	841a      	strh	r2, [r3, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b464:	891b      	ldrh	r3, [r3, #8]
 800b466:	461a      	mov	r2, r3
 800b468:	68b9      	ldr	r1, [r7, #8]
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7ff ff3c 	bl	800b2e8 <lv_obj_get_style_prop>
 800b470:	4603      	mov	r3, r0
 800b472:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	88ba      	ldrh	r2, [r7, #4]
 800b478:	841a      	strh	r2, [r3, #32]

    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 fb02 	bl	800ba86 <get_trans_style>
 800b482:	6678      	str	r0, [r7, #100]	; 0x64
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800b484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b486:	6818      	ldr	r0, [r3, #0]
 800b488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b48a:	891b      	ldrh	r3, [r3, #8]
 800b48c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b48e:	4619      	mov	r1, r3
 800b490:	f015 fcca 	bl	8020e28 <lv_style_set_prop>

    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800b494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b496:	891b      	ldrh	r3, [r3, #8]
 800b498:	2b0b      	cmp	r3, #11
 800b49a:	d143      	bne.n	800b524 <_lv_obj_style_create_transition+0x148>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800b49c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b49e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d004      	beq.n	800b4b0 <_lv_obj_style_create_transition+0xd4>
 800b4a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d139      	bne.n	800b524 <_lv_obj_style_create_transition+0x148>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f7fc f8d6 	bl	8007662 <lv_obj_get_width>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	da00      	bge.n	800b4be <_lv_obj_style_create_transition+0xe2>
 800b4bc:	3301      	adds	r3, #1
 800b4be:	105b      	asrs	r3, r3, #1
 800b4c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f7fc f8da 	bl	800767e <lv_obj_get_height>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	da00      	bge.n	800b4d2 <_lv_obj_style_create_transition+0xf6>
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	105b      	asrs	r3, r3, #1
 800b4d4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800b4d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d10d      	bne.n	800b4fe <_lv_obj_style_create_transition+0x122>
 800b4e2:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800b4e6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	da03      	bge.n	800b4f6 <_lv_obj_style_create_transition+0x11a>
 800b4ee:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	e002      	b.n	800b4fc <_lv_obj_style_create_transition+0x120>
 800b4f6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	65bb      	str	r3, [r7, #88]	; 0x58
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800b4fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b500:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b504:	4293      	cmp	r3, r2
 800b506:	d10d      	bne.n	800b524 <_lv_obj_style_create_transition+0x148>
 800b508:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800b50c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800b510:	429a      	cmp	r2, r3
 800b512:	da03      	bge.n	800b51c <_lv_obj_style_create_transition+0x140>
 800b514:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800b518:	3301      	adds	r3, #1
 800b51a:	e002      	b.n	800b522 <_lv_obj_style_create_transition+0x146>
 800b51c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800b520:	3301      	adds	r3, #1
 800b522:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800b524:	4836      	ldr	r0, [pc, #216]	; (800b600 <_lv_obj_style_create_transition+0x224>)
 800b526:	f014 fab5 	bl	801fa94 <_lv_ll_ins_head>
 800b52a:	65f8      	str	r0, [r7, #92]	; 0x5c
    LV_ASSERT_MALLOC(tr);
 800b52c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d100      	bne.n	800b534 <_lv_obj_style_create_transition+0x158>
 800b532:	e7fe      	b.n	800b532 <_lv_obj_style_create_transition+0x156>
    if(tr == NULL) return;
 800b534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d05e      	beq.n	800b5f8 <_lv_obj_style_create_transition+0x21c>
    tr->start_value = v1;
 800b53a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b53c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b53e:	60da      	str	r2, [r3, #12]
    tr->end_value = v2;
 800b540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b542:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b544:	611a      	str	r2, [r3, #16]
    tr->obj = obj;
 800b546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	601a      	str	r2, [r3, #0]
    tr->prop = tr_dsc->prop;
 800b54c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b54e:	891a      	ldrh	r2, [r3, #8]
 800b550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b552:	809a      	strh	r2, [r3, #4]
    tr->selector = part;
 800b554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	609a      	str	r2, [r3, #8]

    lv_anim_t a;
    lv_anim_init(&a);
 800b55a:	f107 0310 	add.w	r3, r7, #16
 800b55e:	4618      	mov	r0, r3
 800b560:	f012 fe3a 	bl	801e1d8 <lv_anim_init>
    lv_anim_set_var(&a, tr);
 800b564:	f107 0310 	add.w	r3, r7, #16
 800b568:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff fbac 	bl	800acc8 <lv_anim_set_var>
    lv_anim_set_exec_cb(&a, trans_anim_cb);
 800b570:	f107 0310 	add.w	r3, r7, #16
 800b574:	4923      	ldr	r1, [pc, #140]	; (800b604 <_lv_obj_style_create_transition+0x228>)
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff fbb4 	bl	800ace4 <lv_anim_set_exec_cb>
    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 800b57c:	f107 0310 	add.w	r3, r7, #16
 800b580:	4921      	ldr	r1, [pc, #132]	; (800b608 <_lv_obj_style_create_transition+0x22c>)
 800b582:	4618      	mov	r0, r3
 800b584:	f7ff fbfc 	bl	800ad80 <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 800b588:	f107 0310 	add.w	r3, r7, #16
 800b58c:	491f      	ldr	r1, [pc, #124]	; (800b60c <_lv_obj_style_create_transition+0x230>)
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fc04 	bl	800ad9c <lv_anim_set_ready_cb>
    lv_anim_set_values(&a, 0x00, 0xFF);
 800b594:	f107 0310 	add.w	r3, r7, #16
 800b598:	22ff      	movs	r2, #255	; 0xff
 800b59a:	2100      	movs	r1, #0
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff fbcc 	bl	800ad3a <lv_anim_set_values>
    lv_anim_set_time(&a, tr_dsc->time);
 800b5a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f107 0310 	add.w	r3, r7, #16
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff fba6 	bl	800ad00 <lv_anim_set_time>
    lv_anim_set_delay(&a, tr_dsc->delay);
 800b5b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5b6:	885b      	ldrh	r3, [r3, #2]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	f107 0310 	add.w	r3, r7, #16
 800b5be:	4611      	mov	r1, r2
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fbab 	bl	800ad1c <lv_anim_set_delay>
    lv_anim_set_path_cb(&a, tr_dsc->path_cb);
 800b5c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5c8:	68da      	ldr	r2, [r3, #12]
 800b5ca:	f107 0310 	add.w	r3, r7, #16
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff fbc7 	bl	800ad64 <lv_anim_set_path_cb>
    lv_anim_set_early_apply(&a, false);
 800b5d6:	f107 0310 	add.w	r3, r7, #16
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff fbeb 	bl	800adb8 <lv_anim_set_early_apply>
#if LV_USE_USER_DATA
    a.user_data = tr_dsc->user_data;
 800b5e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    lv_anim_start(&a);
 800b5e8:	f107 0310 	add.w	r3, r7, #16
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f012 fe19 	bl	801e224 <lv_anim_start>
 800b5f2:	e002      	b.n	800b5fa <_lv_obj_style_create_transition+0x21e>
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800b5f4:	bf00      	nop
 800b5f6:	e000      	b.n	800b5fa <_lv_obj_style_create_transition+0x21e>
    if(tr == NULL) return;
 800b5f8:	bf00      	nop
}
 800b5fa:	3768      	adds	r7, #104	; 0x68
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	20000840 	.word	0x20000840
 800b604:	0800bf31 	.word	0x0800bf31
 800b608:	0800c211 	.word	0x0800c211
 800b60c:	0800c289 	.word	0x0800c289

0800b610 <_lv_obj_style_apply_color_filter>:


lv_style_value_t _lv_obj_style_apply_color_filter(const lv_obj_t * obj, uint32_t part, lv_style_value_t v)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
    if(obj == NULL) return v;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <_lv_obj_style_apply_color_filter+0x16>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	e01c      	b.n	800b660 <_lv_obj_style_apply_color_filter+0x50>
    const lv_color_filter_dsc_t * f = lv_obj_get_style_color_filter_dsc(obj, part);
 800b626:	68b9      	ldr	r1, [r7, #8]
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7ff fc4d 	bl	800aec8 <lv_obj_get_style_color_filter_dsc>
 800b62e:	6178      	str	r0, [r7, #20]
    if(f && f->filter_cb) {
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d013      	beq.n	800b65e <_lv_obj_style_apply_color_filter+0x4e>
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00f      	beq.n	800b65e <_lv_obj_style_apply_color_filter+0x4e>
        lv_opa_t f_opa = lv_obj_get_style_color_filter_opa(obj, part);
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f7ff fc52 	bl	800aeea <lv_obj_get_style_color_filter_opa>
 800b646:	4603      	mov	r3, r0
 800b648:	74fb      	strb	r3, [r7, #19]
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800b64a:	7cfb      	ldrb	r3, [r7, #19]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <_lv_obj_style_apply_color_filter+0x4e>
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	7cfa      	ldrb	r2, [r7, #19]
 800b656:	7939      	ldrb	r1, [r7, #4]
 800b658:	6978      	ldr	r0, [r7, #20]
 800b65a:	4798      	blx	r3
 800b65c:	7138      	strb	r0, [r7, #4]
    }
    return v;
 800b65e:	687b      	ldr	r3, [r7, #4]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3718      	adds	r7, #24
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <_lv_obj_style_state_compare>:

_lv_style_state_cmp_t _lv_obj_style_state_compare(lv_obj_t * obj, lv_state_t state1, lv_state_t state2)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b088      	sub	sp, #32
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	807b      	strh	r3, [r7, #2]
 800b674:	4613      	mov	r3, r2
 800b676:	803b      	strh	r3, [r7, #0]
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800b678:	2300      	movs	r3, #0
 800b67a:	77fb      	strb	r3, [r7, #31]

    /*Are there any new styles for the new state?*/
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800b67c:	2300      	movs	r3, #0
 800b67e:	61bb      	str	r3, [r7, #24]
 800b680:	e1d9      	b.n	800ba36 <_lv_obj_style_state_compare+0x3ce>
        if(obj->styles[i].is_trans) continue;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68da      	ldr	r2, [r3, #12]
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	00db      	lsls	r3, r3, #3
 800b68a:	4413      	add	r3, r2
 800b68c:	79db      	ldrb	r3, [r3, #7]
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	f040 81ca 	bne.w	800ba2e <_lv_obj_style_state_compare+0x3c6>

        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68da      	ldr	r2, [r3, #12]
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	00db      	lsls	r3, r3, #3
 800b6a2:	4413      	add	r3, r2
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 f9d2 	bl	800ba54 <lv_obj_style_get_selector_state>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	82bb      	strh	r3, [r7, #20]
        /*The style is valid for a state but not the other*/
        bool valid1 = state_act & (~state1) ? false : true;
 800b6b4:	8aba      	ldrh	r2, [r7, #20]
 800b6b6:	887b      	ldrh	r3, [r7, #2]
 800b6b8:	43db      	mvns	r3, r3
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bf0c      	ite	eq
 800b6c0:	2301      	moveq	r3, #1
 800b6c2:	2300      	movne	r3, #0
 800b6c4:	74fb      	strb	r3, [r7, #19]
        bool valid2 = state_act & (~state2) ? false : true;
 800b6c6:	8aba      	ldrh	r2, [r7, #20]
 800b6c8:	883b      	ldrh	r3, [r7, #0]
 800b6ca:	43db      	mvns	r3, r3
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bf0c      	ite	eq
 800b6d2:	2301      	moveq	r3, #1
 800b6d4:	2300      	movne	r3, #0
 800b6d6:	74bb      	strb	r3, [r7, #18]
        if(valid1 != valid2) {
 800b6d8:	7cfa      	ldrb	r2, [r7, #19]
 800b6da:	7cbb      	ldrb	r3, [r7, #18]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	f000 81a7 	beq.w	800ba30 <_lv_obj_style_state_compare+0x3c8>
            lv_style_t * style = obj->styles[i].style;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	00db      	lsls	r3, r3, #3
 800b6ea:	4413      	add	r3, r2
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	60fb      	str	r3, [r7, #12]
            lv_style_value_t v;
            /*If there is layout difference on the main part, return immediately. There is no more serious difference*/
            bool layout_diff = false;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	75fb      	strb	r3, [r7, #23]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800b6f4:	f107 0308 	add.w	r3, r7, #8
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	2110      	movs	r1, #16
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f015 fba7 	bl	8020e50 <lv_style_get_prop>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <_lv_obj_style_state_compare+0xa6>
 800b708:	2301      	movs	r3, #1
 800b70a:	75fb      	strb	r3, [r7, #23]
 800b70c:	e0db      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800b70e:	f107 0308 	add.w	r3, r7, #8
 800b712:	461a      	mov	r2, r3
 800b714:	2111      	movs	r1, #17
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f015 fb9a 	bl	8020e50 <lv_style_get_prop>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <_lv_obj_style_state_compare+0xc0>
 800b722:	2301      	movs	r3, #1
 800b724:	75fb      	strb	r3, [r7, #23]
 800b726:	e0ce      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800b728:	f107 0308 	add.w	r3, r7, #8
 800b72c:	461a      	mov	r2, r3
 800b72e:	2112      	movs	r1, #18
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f015 fb8d 	bl	8020e50 <lv_style_get_prop>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <_lv_obj_style_state_compare+0xda>
 800b73c:	2301      	movs	r3, #1
 800b73e:	75fb      	strb	r3, [r7, #23]
 800b740:	e0c1      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800b742:	f107 0308 	add.w	r3, r7, #8
 800b746:	461a      	mov	r2, r3
 800b748:	2113      	movs	r1, #19
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f015 fb80 	bl	8020e50 <lv_style_get_prop>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <_lv_obj_style_state_compare+0xf4>
 800b756:	2301      	movs	r3, #1
 800b758:	75fb      	strb	r3, [r7, #23]
 800b75a:	e0b4      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800b75c:	f107 0308 	add.w	r3, r7, #8
 800b760:	461a      	mov	r2, r3
 800b762:	2115      	movs	r1, #21
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f015 fb73 	bl	8020e50 <lv_style_get_prop>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <_lv_obj_style_state_compare+0x10e>
 800b770:	2301      	movs	r3, #1
 800b772:	75fb      	strb	r3, [r7, #23]
 800b774:	e0a7      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800b776:	f107 0308 	add.w	r3, r7, #8
 800b77a:	461a      	mov	r2, r3
 800b77c:	2114      	movs	r1, #20
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f015 fb66 	bl	8020e50 <lv_style_get_prop>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <_lv_obj_style_state_compare+0x128>
 800b78a:	2301      	movs	r3, #1
 800b78c:	75fb      	strb	r3, [r7, #23]
 800b78e:	e09a      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800b790:	f107 0308 	add.w	r3, r7, #8
 800b794:	461a      	mov	r2, r3
 800b796:	210a      	movs	r1, #10
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f015 fb59 	bl	8020e50 <lv_style_get_prop>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <_lv_obj_style_state_compare+0x142>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	75fb      	strb	r3, [r7, #23]
 800b7a8:	e08d      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	216a      	movs	r1, #106	; 0x6a
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f015 fb4c 	bl	8020e50 <lv_style_get_prop>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <_lv_obj_style_state_compare+0x15c>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	75fb      	strb	r3, [r7, #23]
 800b7c2:	e080      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800b7c4:	f107 0308 	add.w	r3, r7, #8
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	216b      	movs	r1, #107	; 0x6b
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f015 fb3f 	bl	8020e50 <lv_style_get_prop>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <_lv_obj_style_state_compare+0x176>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	75fb      	strb	r3, [r7, #23]
 800b7dc:	e073      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800b7de:	f107 0308 	add.w	r3, r7, #8
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f015 fb32 	bl	8020e50 <lv_style_get_prop>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <_lv_obj_style_state_compare+0x190>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	75fb      	strb	r3, [r7, #23]
 800b7f6:	e066      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800b7f8:	f107 0308 	add.w	r3, r7, #8
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	2104      	movs	r1, #4
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f015 fb25 	bl	8020e50 <lv_style_get_prop>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <_lv_obj_style_state_compare+0x1aa>
 800b80c:	2301      	movs	r3, #1
 800b80e:	75fb      	strb	r3, [r7, #23]
 800b810:	e059      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800b812:	f107 0308 	add.w	r3, r7, #8
 800b816:	461a      	mov	r2, r3
 800b818:	2102      	movs	r1, #2
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f015 fb18 	bl	8020e50 <lv_style_get_prop>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <_lv_obj_style_state_compare+0x1c4>
 800b826:	2301      	movs	r3, #1
 800b828:	75fb      	strb	r3, [r7, #23]
 800b82a:	e04c      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800b82c:	f107 0308 	add.w	r3, r7, #8
 800b830:	461a      	mov	r2, r3
 800b832:	2103      	movs	r1, #3
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f015 fb0b 	bl	8020e50 <lv_style_get_prop>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <_lv_obj_style_state_compare+0x1de>
 800b840:	2301      	movs	r3, #1
 800b842:	75fb      	strb	r3, [r7, #23]
 800b844:	e03f      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800b846:	f107 0308 	add.w	r3, r7, #8
 800b84a:	461a      	mov	r2, r3
 800b84c:	2105      	movs	r1, #5
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f015 fafe 	bl	8020e50 <lv_style_get_prop>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <_lv_obj_style_state_compare+0x1f8>
 800b85a:	2301      	movs	r3, #1
 800b85c:	75fb      	strb	r3, [r7, #23]
 800b85e:	e032      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800b860:	f107 0308 	add.w	r3, r7, #8
 800b864:	461a      	mov	r2, r3
 800b866:	2106      	movs	r1, #6
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f015 faf1 	bl	8020e50 <lv_style_get_prop>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <_lv_obj_style_state_compare+0x212>
 800b874:	2301      	movs	r3, #1
 800b876:	75fb      	strb	r3, [r7, #23]
 800b878:	e025      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800b87a:	f107 0308 	add.w	r3, r7, #8
 800b87e:	461a      	mov	r2, r3
 800b880:	2132      	movs	r1, #50	; 0x32
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f015 fae4 	bl	8020e50 <lv_style_get_prop>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d002      	beq.n	800b894 <_lv_obj_style_state_compare+0x22c>
 800b88e:	2301      	movs	r3, #1
 800b890:	75fb      	strb	r3, [r7, #23]
 800b892:	e018      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800b894:	f107 0308 	add.w	r3, r7, #8
 800b898:	461a      	mov	r2, r3
 800b89a:	216d      	movs	r1, #109	; 0x6d
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f015 fad7 	bl	8020e50 <lv_style_get_prop>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <_lv_obj_style_state_compare+0x246>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	75fb      	strb	r3, [r7, #23]
 800b8ac:	e00b      	b.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800b8ae:	f107 0308 	add.w	r3, r7, #8
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	216c      	movs	r1, #108	; 0x6c
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f015 faca 	bl	8020e50 <lv_style_get_prop>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <_lv_obj_style_state_compare+0x25e>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	75fb      	strb	r3, [r7, #23]

            if(layout_diff) {
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <_lv_obj_style_state_compare+0x268>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e0bd      	b.n	800ba4c <_lv_obj_style_state_compare+0x3e4>
            }

            /*Check for draw pad changes*/
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b8d0:	f107 0308 	add.w	r3, r7, #8
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	2168      	movs	r1, #104	; 0x68
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f015 fab9 	bl	8020e50 <lv_style_get_prop>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d002      	beq.n	800b8ea <_lv_obj_style_state_compare+0x282>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	77fb      	strb	r3, [r7, #31]
 800b8e8:	e0a2      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b8ea:	f107 0308 	add.w	r3, r7, #8
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	2169      	movs	r1, #105	; 0x69
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f015 faac 	bl	8020e50 <lv_style_get_prop>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <_lv_obj_style_state_compare+0x29c>
 800b8fe:	2302      	movs	r3, #2
 800b900:	77fb      	strb	r3, [r7, #31]
 800b902:	e095      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b904:	f107 0308 	add.w	r3, r7, #8
 800b908:	461a      	mov	r2, r3
 800b90a:	216d      	movs	r1, #109	; 0x6d
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f015 fa9f 	bl	8020e50 <lv_style_get_prop>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <_lv_obj_style_state_compare+0x2b6>
 800b918:	2302      	movs	r3, #2
 800b91a:	77fb      	strb	r3, [r7, #31]
 800b91c:	e088      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b91e:	f107 0308 	add.w	r3, r7, #8
 800b922:	461a      	mov	r2, r3
 800b924:	216c      	movs	r1, #108	; 0x6c
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f015 fa92 	bl	8020e50 <lv_style_get_prop>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <_lv_obj_style_state_compare+0x2d0>
 800b932:	2302      	movs	r3, #2
 800b934:	77fb      	strb	r3, [r7, #31]
 800b936:	e07b      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b938:	f107 0308 	add.w	r3, r7, #8
 800b93c:	461a      	mov	r2, r3
 800b93e:	2137      	movs	r1, #55	; 0x37
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f015 fa85 	bl	8020e50 <lv_style_get_prop>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <_lv_obj_style_state_compare+0x2ea>
 800b94c:	2302      	movs	r3, #2
 800b94e:	77fb      	strb	r3, [r7, #31]
 800b950:	e06e      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b952:	f107 0308 	add.w	r3, r7, #8
 800b956:	461a      	mov	r2, r3
 800b958:	2138      	movs	r1, #56	; 0x38
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f015 fa78 	bl	8020e50 <lv_style_get_prop>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <_lv_obj_style_state_compare+0x304>
 800b966:	2302      	movs	r3, #2
 800b968:	77fb      	strb	r3, [r7, #31]
 800b96a:	e061      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b96c:	f107 0308 	add.w	r3, r7, #8
 800b970:	461a      	mov	r2, r3
 800b972:	2135      	movs	r1, #53	; 0x35
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f015 fa6b 	bl	8020e50 <lv_style_get_prop>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <_lv_obj_style_state_compare+0x31e>
 800b980:	2302      	movs	r3, #2
 800b982:	77fb      	strb	r3, [r7, #31]
 800b984:	e054      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b986:	f107 0308 	add.w	r3, r7, #8
 800b98a:	461a      	mov	r2, r3
 800b98c:	2140      	movs	r1, #64	; 0x40
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f015 fa5e 	bl	8020e50 <lv_style_get_prop>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <_lv_obj_style_state_compare+0x338>
 800b99a:	2302      	movs	r3, #2
 800b99c:	77fb      	strb	r3, [r7, #31]
 800b99e:	e047      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b9a0:	f107 0308 	add.w	r3, r7, #8
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	2145      	movs	r1, #69	; 0x45
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f015 fa51 	bl	8020e50 <lv_style_get_prop>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <_lv_obj_style_state_compare+0x352>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	77fb      	strb	r3, [r7, #31]
 800b9b8:	e03a      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b9ba:	f107 0308 	add.w	r3, r7, #8
 800b9be:	461a      	mov	r2, r3
 800b9c0:	2141      	movs	r1, #65	; 0x41
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f015 fa44 	bl	8020e50 <lv_style_get_prop>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d002      	beq.n	800b9d4 <_lv_obj_style_state_compare+0x36c>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	77fb      	strb	r3, [r7, #31]
 800b9d2:	e02d      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b9d4:	f107 0308 	add.w	r3, r7, #8
 800b9d8:	461a      	mov	r2, r3
 800b9da:	2142      	movs	r1, #66	; 0x42
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f015 fa37 	bl	8020e50 <lv_style_get_prop>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <_lv_obj_style_state_compare+0x386>
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	77fb      	strb	r3, [r7, #31]
 800b9ec:	e020      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b9ee:	f107 0308 	add.w	r3, r7, #8
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	2143      	movs	r1, #67	; 0x43
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f015 fa2a 	bl	8020e50 <lv_style_get_prop>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d002      	beq.n	800ba08 <_lv_obj_style_state_compare+0x3a0>
 800ba02:	2302      	movs	r3, #2
 800ba04:	77fb      	strb	r3, [r7, #31]
 800ba06:	e013      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800ba08:	f107 0308 	add.w	r3, r7, #8
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	2149      	movs	r1, #73	; 0x49
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f015 fa1d 	bl	8020e50 <lv_style_get_prop>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <_lv_obj_style_state_compare+0x3ba>
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	77fb      	strb	r3, [r7, #31]
 800ba20:	e006      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800ba22:	7ffb      	ldrb	r3, [r7, #31]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d103      	bne.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	77fb      	strb	r3, [r7, #31]
 800ba2c:	e000      	b.n	800ba30 <_lv_obj_style_state_compare+0x3c8>
        if(obj->styles[i].is_trans) continue;
 800ba2e:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	3301      	adds	r3, #1
 800ba34:	61bb      	str	r3, [r7, #24]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ba3a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	461a      	mov	r2, r3
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	4293      	cmp	r3, r2
 800ba46:	f4ff ae1c 	bcc.w	800b682 <_lv_obj_style_state_compare+0x1a>
        }
    }

    return res;
 800ba4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3720      	adds	r7, #32
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <lv_obj_style_get_selector_state>:
    lv_anim_set_delay(&a, delay);
    lv_anim_start(&a);
}

lv_state_t lv_obj_style_get_selector_state(lv_style_selector_t selector)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
    return selector & 0xFFFF;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	b29b      	uxth	r3, r3
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <lv_obj_style_get_selector_part>:

lv_part_t lv_obj_style_get_selector_part(lv_style_selector_t selector)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
    return selector & 0xFF0000;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <get_trans_style>:
 * @param obj   pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the transition style
 */
static _lv_obj_style_t * get_trans_style(lv_obj_t * obj,  lv_style_selector_t selector)
{
 800ba86:	b590      	push	{r4, r7, lr}
 800ba88:	b085      	sub	sp, #20
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e019      	b.n	800baca <get_trans_style+0x44>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68da      	ldr	r2, [r3, #12]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	4413      	add	r3, r2
 800baa0:	79db      	ldrb	r3, [r3, #7]
 800baa2:	f003 0302 	and.w	r3, r3, #2
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00b      	beq.n	800bac4 <get_trans_style+0x3e>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	68da      	ldr	r2, [r3, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	4413      	add	r3, r2
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800babc:	461a      	mov	r2, r3
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00c      	beq.n	800bade <get_trans_style+0x58>
    for(i = 0; i < obj->style_cnt; i++) {
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3301      	adds	r3, #1
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bace:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	461a      	mov	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	4293      	cmp	r3, r2
 800bada:	d3dc      	bcc.n	800ba96 <get_trans_style+0x10>
 800badc:	e000      	b.n	800bae0 <get_trans_style+0x5a>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800bade:	bf00      	nop
    }

    /*Already have a transition style for it*/
    if(i != obj->style_cnt) return &obj->styles[i];
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bae4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	461a      	mov	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4293      	cmp	r3, r2
 800baf0:	d005      	beq.n	800bafe <get_trans_style+0x78>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68da      	ldr	r2, [r3, #12]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	00db      	lsls	r3, r3, #3
 800bafa:	4413      	add	r3, r2
 800bafc:	e060      	b.n	800bbc0 <get_trans_style+0x13a>

    obj->style_cnt++;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bb02:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	3301      	adds	r3, #1
 800bb0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb0e:	b2d9      	uxtb	r1, r3
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800bb14:	f361 03c8 	bfi	r3, r1, #3, #6
 800bb18:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68da      	ldr	r2, [r3, #12]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bb22:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	f014 fa93 	bl	8020058 <lv_mem_realloc>
 800bb32:	4602      	mov	r2, r0
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	60da      	str	r2, [r3, #12]

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bb3c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	3b01      	subs	r3, #1
 800bb44:	60fb      	str	r3, [r7, #12]
 800bb46:	e014      	b.n	800bb72 <get_trans_style+0xec>
        obj->styles[i] = obj->styles[i - 1];
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68da      	ldr	r2, [r3, #12]
 800bb4c:	68f9      	ldr	r1, [r7, #12]
 800bb4e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800bb52:	440b      	add	r3, r1
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	18d1      	adds	r1, r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68da      	ldr	r2, [r3, #12]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	4413      	add	r3, r2
 800bb62:	460a      	mov	r2, r1
 800bb64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb68:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e7      	bne.n	800bb48 <get_trans_style+0xc2>
    }

    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	2108      	movs	r1, #8
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f014 fe40 	bl	8020804 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68dc      	ldr	r4, [r3, #12]
 800bb88:	200c      	movs	r0, #12
 800bb8a:	f014 fa07 	bl	801ff9c <lv_mem_alloc>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[0].style);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f015 f831 	bl	8020c00 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68da      	ldr	r2, [r3, #12]
 800bba2:	79d3      	ldrb	r3, [r2, #7]
 800bba4:	f043 0302 	orr.w	r3, r3, #2
 800bba8:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68da      	ldr	r2, [r3, #12]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800bbb4:	6853      	ldr	r3, [r2, #4]
 800bbb6:	f361 0317 	bfi	r3, r1, #0, #24
 800bbba:	6053      	str	r3, [r2, #4]
    return &obj->styles[0];
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68db      	ldr	r3, [r3, #12]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd90      	pop	{r4, r7, pc}

0800bbc8 <get_prop_core>:


static lv_style_res_t get_prop_core(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, lv_style_value_t * v)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b090      	sub	sp, #64	; 0x40
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	603b      	str	r3, [r7, #0]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	80fb      	strh	r3, [r7, #6]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800bbd8:	88fb      	ldrh	r3, [r7, #6]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f015 fa72 	bl	80210c4 <_lv_style_get_prop_group>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	4093      	lsls	r3, r2
 800bbe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t weight = -1;
 800bbec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_state_t state = obj->state;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	8c1b      	ldrh	r3, [r3, #32]
 800bbf6:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_state_t state_inv = ~state;
 800bbf8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bbfa:	43db      	mvns	r3, r3
 800bbfc:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_style_value_t value_tmp;
    bool skip_trans = obj->skip_trans;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bc04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bf14      	ite	ne
 800bc0e:	2301      	movne	r3, #1
 800bc10:	2300      	moveq	r3, #0
 800bc12:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    uint32_t i;
    lv_style_res_t found;
    for(i = 0; i < obj->style_cnt; i++) {
 800bc16:	2300      	movs	r3, #0
 800bc18:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc1a:	e04b      	b.n	800bcb4 <get_prop_core+0xec>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	68da      	ldr	r2, [r3, #12]
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	4413      	add	r3, r2
 800bc26:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(obj_style->is_trans == false) break;
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	79db      	ldrb	r3, [r3, #7]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d048      	beq.n	800bcc8 <get_prop_core+0x100>
        if(skip_trans) continue;
 800bc36:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d132      	bne.n	800bca4 <get_prop_core+0xdc>

        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	4413      	add	r3, r2
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff ff0c 	bl	800ba6c <lv_obj_style_get_selector_part>
 800bc54:	62b8      	str	r0, [r7, #40]	; 0x28

        if(part_act != part) continue;
 800bc56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d124      	bne.n	800bca8 <get_prop_core+0xe0>
        if((obj_style->style->has_group & group) == 0) continue;
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	7a9a      	ldrb	r2, [r3, #10]
 800bc64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc68:	4013      	ands	r3, r2
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d01d      	beq.n	800bcac <get_prop_core+0xe4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800bc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f107 0214 	add.w	r2, r7, #20
 800bc78:	88f9      	ldrh	r1, [r7, #6]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f015 f8e8 	bl	8020e50 <lv_style_get_prop>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(found == LV_STYLE_RES_FOUND) {
 800bc86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d104      	bne.n	800bc98 <get_prop_core+0xd0>
            *v = value_tmp;
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	601a      	str	r2, [r3, #0]
            return LV_STYLE_RES_FOUND;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e097      	b.n	800bdc8 <get_prop_core+0x200>
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800bc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d106      	bne.n	800bcae <get_prop_core+0xe6>
            return LV_STYLE_RES_INHERIT;
 800bca0:	2302      	movs	r3, #2
 800bca2:	e091      	b.n	800bdc8 <get_prop_core+0x200>
        if(skip_trans) continue;
 800bca4:	bf00      	nop
 800bca6:	e002      	b.n	800bcae <get_prop_core+0xe6>
        if(part_act != part) continue;
 800bca8:	bf00      	nop
 800bcaa:	e000      	b.n	800bcae <get_prop_core+0xe6>
        if((obj_style->style->has_group & group) == 0) continue;
 800bcac:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bcb8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d3aa      	bcc.n	800bc1c <get_prop_core+0x54>
 800bcc6:	e06d      	b.n	800bda4 <get_prop_core+0x1dc>
        if(obj_style->is_trans == false) break;
 800bcc8:	bf00      	nop
        }
    }

    for(; i < obj->style_cnt; i++) {
 800bcca:	e06b      	b.n	800bda4 <get_prop_core+0x1dc>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	68da      	ldr	r2, [r3, #12]
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	00db      	lsls	r3, r3, #3
 800bcd4:	4413      	add	r3, r2
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	7a9a      	ldrb	r2, [r3, #10]
 800bcda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcde:	4013      	ands	r3, r2
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d054      	beq.n	800bd90 <get_prop_core+0x1c8>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68da      	ldr	r2, [r3, #12]
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	4413      	add	r3, r2
 800bcf0:	623b      	str	r3, [r7, #32]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	68da      	ldr	r2, [r3, #12]
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf8:	00db      	lsls	r3, r3, #3
 800bcfa:	4413      	add	r3, r2
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7ff feb2 	bl	800ba6c <lv_obj_style_get_selector_part>
 800bd08:	61f8      	str	r0, [r7, #28]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	68da      	ldr	r2, [r3, #12]
 800bd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	4413      	add	r3, r2
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fe9a 	bl	800ba54 <lv_obj_style_get_selector_state>
 800bd20:	4603      	mov	r3, r0
 800bd22:	837b      	strh	r3, [r7, #26]
        if(part_act != part) continue;
 800bd24:	69fa      	ldr	r2, [r7, #28]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d133      	bne.n	800bd94 <get_prop_core+0x1cc>

        /*Be sure the style not specifies other state than the requested.
         *E.g. For HOVER+PRESS object state, HOVER style only is OK, but HOVER+FOCUS style is not*/
        if((state_act & state_inv)) continue;
 800bd2c:	8b7a      	ldrh	r2, [r7, #26]
 800bd2e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bd30:	4013      	ands	r3, r2
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d12f      	bne.n	800bd98 <get_prop_core+0x1d0>

        /*Check only better candidates*/
        if(state_act <= weight) continue;
 800bd38:	8b7b      	ldrh	r3, [r7, #26]
 800bd3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	da2d      	bge.n	800bd9c <get_prop_core+0x1d4>

        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800bd40:	6a3b      	ldr	r3, [r7, #32]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f107 0214 	add.w	r2, r7, #20
 800bd48:	88f9      	ldrh	r1, [r7, #6]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f015 f880 	bl	8020e50 <lv_style_get_prop>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(found == LV_STYLE_RES_FOUND) {
 800bd56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d112      	bne.n	800bd84 <get_prop_core+0x1bc>
            if(state_act == state) {
 800bd5e:	8b7a      	ldrh	r2, [r7, #26]
 800bd60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d104      	bne.n	800bd70 <get_prop_core+0x1a8>
                *v = value_tmp;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	697a      	ldr	r2, [r7, #20]
 800bd6a:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e02b      	b.n	800bdc8 <get_prop_core+0x200>
            }
            if(weight < state_act) {
 800bd70:	8b7b      	ldrh	r3, [r7, #26]
 800bd72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd74:	429a      	cmp	r2, r3
 800bd76:	da12      	bge.n	800bd9e <get_prop_core+0x1d6>
                weight = state_act;
 800bd78:	8b7b      	ldrh	r3, [r7, #26]
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
                *v = value_tmp;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	601a      	str	r2, [r3, #0]
 800bd82:	e00c      	b.n	800bd9e <get_prop_core+0x1d6>
            }
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800bd84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d108      	bne.n	800bd9e <get_prop_core+0x1d6>
            return LV_STYLE_RES_INHERIT;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	e01b      	b.n	800bdc8 <get_prop_core+0x200>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800bd90:	bf00      	nop
 800bd92:	e004      	b.n	800bd9e <get_prop_core+0x1d6>
        if(part_act != part) continue;
 800bd94:	bf00      	nop
 800bd96:	e002      	b.n	800bd9e <get_prop_core+0x1d6>
        if((state_act & state_inv)) continue;
 800bd98:	bf00      	nop
 800bd9a:	e000      	b.n	800bd9e <get_prop_core+0x1d6>
        if(state_act <= weight) continue;
 800bd9c:	bf00      	nop
    for(; i < obj->style_cnt; i++) {
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda0:	3301      	adds	r3, #1
 800bda2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bda8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	461a      	mov	r2, r3
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d38a      	bcc.n	800bccc <get_prop_core+0x104>
        }
    }

    if(weight >= 0) {
 800bdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	db04      	blt.n	800bdc6 <get_prop_core+0x1fe>
        *v = value_tmp;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	601a      	str	r2, [r3, #0]
        return LV_STYLE_RES_FOUND;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e000      	b.n	800bdc8 <get_prop_core+0x200>
    }
    else return LV_STYLE_RES_NOT_FOUND;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3740      	adds	r7, #64	; 0x40
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fb7a 	bl	800c4d2 <lv_obj_get_child_cnt>
 800bdde:	6138      	str	r0, [r7, #16]
    for(i = 0; i < child_cnt; i++) {
 800bde0:	2300      	movs	r3, #0
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	e018      	b.n	800be18 <refresh_children_style+0x48>
        lv_obj_t * child = obj->spec_attr->children[i];
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	60fb      	str	r3, [r7, #12]
        lv_obj_invalidate(child);
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f7fc f9fd 	bl	80081f6 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	212a      	movs	r1, #42	; 0x2a
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f7f7 fe2b 	bl	8003a5c <lv_event_send>
        lv_obj_invalidate(child);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7fc f9f5 	bl	80081f6 <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f7ff ffdf 	bl	800bdd0 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	3301      	adds	r3, #1
 800be16:	617b      	str	r3, [r7, #20]
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d3e2      	bcc.n	800bde6 <refresh_children_style+0x16>
    }
}
 800be20:	bf00      	nop
 800be22:	bf00      	nop
 800be24:	3718      	adds	r7, #24
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
	...

0800be2c <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	603b      	str	r3, [r7, #0]
 800be38:	4613      	mov	r3, r2
 800be3a:	80fb      	strh	r3, [r7, #6]
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
 800be3c:	2300      	movs	r3, #0
 800be3e:	76fb      	strb	r3, [r7, #27]
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800be40:	483a      	ldr	r0, [pc, #232]	; (800bf2c <trans_del+0x100>)
 800be42:	f013 fefd 	bl	801fc40 <_lv_ll_get_tail>
 800be46:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 800be48:	e065      	b.n	800bf16 <trans_del+0xea>
        if(tr == tr_limit) break;
 800be4a:	69fa      	ldr	r2, [r7, #28]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d065      	beq.n	800bf1e <trans_del+0xf2>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800be52:	69f9      	ldr	r1, [r7, #28]
 800be54:	4835      	ldr	r0, [pc, #212]	; (800bf2c <trans_del+0x100>)
 800be56:	f013 ff19 	bl	801fc8c <_lv_ll_get_prev>
 800be5a:	6138      	str	r0, [r7, #16]

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	429a      	cmp	r2, r3
 800be64:	d155      	bne.n	800bf12 <trans_del+0xe6>
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d003      	beq.n	800be78 <trans_del+0x4c>
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800be76:	d14c      	bne.n	800bf12 <trans_del+0xe6>
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	889b      	ldrh	r3, [r3, #4]
 800be7c:	88fa      	ldrh	r2, [r7, #6]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d004      	beq.n	800be8c <trans_del+0x60>
 800be82:	88fb      	ldrh	r3, [r7, #6]
 800be84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be88:	4293      	cmp	r3, r2
 800be8a:	d142      	bne.n	800bf12 <trans_del+0xe6>
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
 800be8c:	2300      	movs	r3, #0
 800be8e:	617b      	str	r3, [r7, #20]
 800be90:	e029      	b.n	800bee6 <trans_del+0xba>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	68da      	ldr	r2, [r3, #12]
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	4413      	add	r3, r2
 800be9c:	79db      	ldrb	r3, [r3, #7]
 800be9e:	f003 0302 	and.w	r3, r3, #2
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d01b      	beq.n	800bee0 <trans_del+0xb4>
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800beae:	d00b      	beq.n	800bec8 <trans_del+0x9c>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	4413      	add	r3, r2
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800bec0:	461a      	mov	r2, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d10b      	bne.n	800bee0 <trans_del+0xb4>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	68da      	ldr	r2, [r3, #12]
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	4413      	add	r3, r2
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	889b      	ldrh	r3, [r3, #4]
 800bed8:	4619      	mov	r1, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	f014 fed2 	bl	8020c84 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	3301      	adds	r3, #1
 800bee4:	617b      	str	r3, [r7, #20]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800beea:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	461a      	mov	r2, r3
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d3cc      	bcc.n	800be92 <trans_del+0x66>
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800bef8:	2100      	movs	r1, #0
 800befa:	69f8      	ldr	r0, [r7, #28]
 800befc:	f012 fa0a 	bl	801e314 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800bf00:	69f9      	ldr	r1, [r7, #28]
 800bf02:	480a      	ldr	r0, [pc, #40]	; (800bf2c <trans_del+0x100>)
 800bf04:	f013 fe2e 	bl	801fb64 <_lv_ll_remove>
            lv_mem_free(tr);
 800bf08:	69f8      	ldr	r0, [r7, #28]
 800bf0a:	f014 f877 	bl	801fffc <lv_mem_free>
            removed = true;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	76fb      	strb	r3, [r7, #27]

        }
        tr = tr_prev;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d196      	bne.n	800be4a <trans_del+0x1e>
 800bf1c:	e000      	b.n	800bf20 <trans_del+0xf4>
        if(tr == tr_limit) break;
 800bf1e:	bf00      	nop
    }
    return removed;
 800bf20:	7efb      	ldrb	r3, [r7, #27]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3720      	adds	r7, #32
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20000840 	.word	0x20000840

0800bf30 <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
    trans_t * tr = _tr;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	617b      	str	r3, [r7, #20]
    lv_obj_t * obj = tr->obj;
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	613b      	str	r3, [r7, #16]

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800bf44:	2300      	movs	r3, #0
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	e152      	b.n	800c1f0 <trans_anim_cb+0x2c0>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	4413      	add	r3, r2
 800bf54:	79db      	ldrb	r3, [r3, #7]
 800bf56:	f003 0302 	and.w	r3, r3, #2
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00c      	beq.n	800bf7a <trans_anim_cb+0x4a>
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	68da      	ldr	r2, [r3, #12]
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	4413      	add	r3, r2
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800bf70:	461a      	mov	r2, r3
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d003      	beq.n	800bf82 <trans_anim_cb+0x52>
    for(i = 0; i < obj->style_cnt; i++) {
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	61fb      	str	r3, [r7, #28]
 800bf80:	e136      	b.n	800c1f0 <trans_anim_cb+0x2c0>

        lv_style_value_t value_final;
        switch(tr->prop) {
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	889b      	ldrh	r3, [r3, #4]
 800bf86:	3b20      	subs	r3, #32
 800bf88:	2b47      	cmp	r3, #71	; 0x47
 800bf8a:	f200 80dc 	bhi.w	800c146 <trans_anim_cb+0x216>
 800bf8e:	a201      	add	r2, pc, #4	; (adr r2, 800bf94 <trans_anim_cb+0x64>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800c117 	.word	0x0800c117
 800bf98:	0800c147 	.word	0x0800c147
 800bf9c:	0800c147 	.word	0x0800c147
 800bfa0:	0800c147 	.word	0x0800c147
 800bfa4:	0800c147 	.word	0x0800c147
 800bfa8:	0800c147 	.word	0x0800c147
 800bfac:	0800c147 	.word	0x0800c147
 800bfb0:	0800c147 	.word	0x0800c147
 800bfb4:	0800c147 	.word	0x0800c147
 800bfb8:	0800c147 	.word	0x0800c147
 800bfbc:	0800c147 	.word	0x0800c147
 800bfc0:	0800c147 	.word	0x0800c147
 800bfc4:	0800c147 	.word	0x0800c147
 800bfc8:	0800c147 	.word	0x0800c147
 800bfcc:	0800c147 	.word	0x0800c147
 800bfd0:	0800c147 	.word	0x0800c147
 800bfd4:	0800c117 	.word	0x0800c117
 800bfd8:	0800c147 	.word	0x0800c147
 800bfdc:	0800c147 	.word	0x0800c147
 800bfe0:	0800c0b5 	.word	0x0800c0b5
 800bfe4:	0800c0b5 	.word	0x0800c0b5
 800bfe8:	0800c147 	.word	0x0800c147
 800bfec:	0800c117 	.word	0x0800c117
 800bff0:	0800c147 	.word	0x0800c147
 800bff4:	0800c147 	.word	0x0800c147
 800bff8:	0800c147 	.word	0x0800c147
 800bffc:	0800c147 	.word	0x0800c147
 800c000:	0800c147 	.word	0x0800c147
 800c004:	0800c147 	.word	0x0800c147
 800c008:	0800c147 	.word	0x0800c147
 800c00c:	0800c147 	.word	0x0800c147
 800c010:	0800c147 	.word	0x0800c147
 800c014:	0800c147 	.word	0x0800c147
 800c018:	0800c147 	.word	0x0800c147
 800c01c:	0800c147 	.word	0x0800c147
 800c020:	0800c147 	.word	0x0800c147
 800c024:	0800c117 	.word	0x0800c117
 800c028:	0800c147 	.word	0x0800c147
 800c02c:	0800c147 	.word	0x0800c147
 800c030:	0800c117 	.word	0x0800c117
 800c034:	0800c147 	.word	0x0800c147
 800c038:	0800c147 	.word	0x0800c147
 800c03c:	0800c147 	.word	0x0800c147
 800c040:	0800c147 	.word	0x0800c147
 800c044:	0800c147 	.word	0x0800c147
 800c048:	0800c147 	.word	0x0800c147
 800c04c:	0800c147 	.word	0x0800c147
 800c050:	0800c147 	.word	0x0800c147
 800c054:	0800c147 	.word	0x0800c147
 800c058:	0800c147 	.word	0x0800c147
 800c05c:	0800c147 	.word	0x0800c147
 800c060:	0800c147 	.word	0x0800c147
 800c064:	0800c147 	.word	0x0800c147
 800c068:	0800c117 	.word	0x0800c117
 800c06c:	0800c147 	.word	0x0800c147
 800c070:	0800c0cb 	.word	0x0800c0cb
 800c074:	0800c147 	.word	0x0800c147
 800c078:	0800c147 	.word	0x0800c147
 800c07c:	0800c147 	.word	0x0800c147
 800c080:	0800c147 	.word	0x0800c147
 800c084:	0800c147 	.word	0x0800c147
 800c088:	0800c147 	.word	0x0800c147
 800c08c:	0800c147 	.word	0x0800c147
 800c090:	0800c147 	.word	0x0800c147
 800c094:	0800c147 	.word	0x0800c147
 800c098:	0800c0e1 	.word	0x0800c0e1
 800c09c:	0800c147 	.word	0x0800c147
 800c0a0:	0800c147 	.word	0x0800c147
 800c0a4:	0800c147 	.word	0x0800c147
 800c0a8:	0800c147 	.word	0x0800c147
 800c0ac:	0800c0cb 	.word	0x0800c0cb
 800c0b0:	0800c0b5 	.word	0x0800c0b5

            case LV_STYLE_BORDER_SIDE:
            case LV_STYLE_BORDER_POST:
            case LV_STYLE_BLEND_MODE:
                if(v < 255) value_final.num = tr->start_value.num;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2bfe      	cmp	r3, #254	; 0xfe
 800c0b8:	dc03      	bgt.n	800c0c2 <trans_anim_cb+0x192>
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	60fb      	str	r3, [r7, #12]
                else value_final.num = tr->end_value.num;
                break;
 800c0c0:	e05d      	b.n	800c17e <trans_anim_cb+0x24e>
                else value_final.num = tr->end_value.num;
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	60fb      	str	r3, [r7, #12]
                break;
 800c0c8:	e059      	b.n	800c17e <trans_anim_cb+0x24e>
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2bfe      	cmp	r3, #254	; 0xfe
 800c0ce:	dc03      	bgt.n	800c0d8 <trans_anim_cb+0x1a8>
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	60fb      	str	r3, [r7, #12]
                else value_final.ptr = tr->end_value.ptr;
                break;
 800c0d6:	e052      	b.n	800c17e <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	60fb      	str	r3, [r7, #12]
                break;
 800c0de:	e04e      	b.n	800c17e <trans_anim_cb+0x24e>
            case LV_STYLE_COLOR_FILTER_DSC:
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d103      	bne.n	800c0f0 <trans_anim_cb+0x1c0>
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	60fb      	str	r3, [r7, #12]
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
                else value_final.ptr = tr->end_value.ptr;
                break;
 800c0ee:	e046      	b.n	800c17e <trans_anim_cb+0x24e>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d103      	bne.n	800c100 <trans_anim_cb+0x1d0>
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	60fb      	str	r3, [r7, #12]
                break;
 800c0fe:	e03e      	b.n	800c17e <trans_anim_cb+0x24e>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	2b7f      	cmp	r3, #127	; 0x7f
 800c104:	dc03      	bgt.n	800c10e <trans_anim_cb+0x1de>
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	60fb      	str	r3, [r7, #12]
                break;
 800c10c:	e037      	b.n	800c17e <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	60fb      	str	r3, [r7, #12]
                break;
 800c114:	e033      	b.n	800c17e <trans_anim_cb+0x24e>
            case LV_STYLE_BORDER_COLOR:
            case LV_STYLE_TEXT_COLOR:
            case LV_STYLE_SHADOW_COLOR:
            case LV_STYLE_OUTLINE_COLOR:
            case LV_STYLE_IMG_RECOLOR:
                if(v <= 0) value_final.color = tr->start_value.color;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dc03      	bgt.n	800c124 <trans_anim_cb+0x1f4>
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	7b1b      	ldrb	r3, [r3, #12]
 800c120:	733b      	strb	r3, [r7, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
                break;
 800c122:	e02c      	b.n	800c17e <trans_anim_cb+0x24e>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2bfe      	cmp	r3, #254	; 0xfe
 800c128:	dd03      	ble.n	800c132 <trans_anim_cb+0x202>
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	7c1b      	ldrb	r3, [r3, #16]
 800c12e:	733b      	strb	r3, [r7, #12]
                break;
 800c130:	e025      	b.n	800c17e <trans_anim_cb+0x24e>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	b2da      	uxtb	r2, r3
 800c136:	6979      	ldr	r1, [r7, #20]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	7b09      	ldrb	r1, [r1, #12]
 800c13c:	7c18      	ldrb	r0, [r3, #16]
 800c13e:	f7fe fdad 	bl	800ac9c <lv_color_mix>
 800c142:	7338      	strb	r0, [r7, #12]
                break;
 800c144:	e01b      	b.n	800c17e <trans_anim_cb+0x24e>

            default:
                if(v == 0) value_final.num = tr->start_value.num;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <trans_anim_cb+0x224>
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	60fb      	str	r3, [r7, #12]
                else if(v == 255) value_final.num = tr->end_value.num;
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
                break;
 800c152:	e013      	b.n	800c17c <trans_anim_cb+0x24c>
                else if(v == 255) value_final.num = tr->end_value.num;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2bff      	cmp	r3, #255	; 0xff
 800c158:	d103      	bne.n	800c162 <trans_anim_cb+0x232>
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	60fb      	str	r3, [r7, #12]
                break;
 800c160:	e00c      	b.n	800c17c <trans_anim_cb+0x24c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	68da      	ldr	r2, [r3, #12]
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	6919      	ldr	r1, [r3, #16]
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	1acb      	subs	r3, r1, r3
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	fb01 f303 	mul.w	r3, r1, r3
 800c176:	121b      	asrs	r3, r3, #8
 800c178:	4413      	add	r3, r2
 800c17a:	60fb      	str	r3, [r7, #12]
                break;
 800c17c:	bf00      	nop
        }

        lv_style_value_t old_value;
        bool refr = true;
 800c17e:	2301      	movs	r3, #1
 800c180:	76fb      	strb	r3, [r7, #27]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	4413      	add	r3, r2
 800c18c:	6818      	ldr	r0, [r3, #0]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	889b      	ldrh	r3, [r3, #4]
 800c192:	f107 0208 	add.w	r2, r7, #8
 800c196:	4619      	mov	r1, r3
 800c198:	f014 fe5a 	bl	8020e50 <lv_style_get_prop>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00d      	beq.n	800c1be <trans_anim_cb+0x28e>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d109      	bne.n	800c1be <trans_anim_cb+0x28e>
 800c1aa:	7b3a      	ldrb	r2, [r7, #12]
 800c1ac:	7a3b      	ldrb	r3, [r7, #8]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d105      	bne.n	800c1be <trans_anim_cb+0x28e>
               value_final.num == old_value.num) {
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d101      	bne.n	800c1be <trans_anim_cb+0x28e>
                refr = false;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	76fb      	strb	r3, [r7, #27]
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	4413      	add	r3, r2
 800c1c8:	6818      	ldr	r0, [r3, #0]
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	889b      	ldrh	r3, [r3, #4]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	f014 fe29 	bl	8020e28 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800c1d6:	7efb      	ldrb	r3, [r7, #27]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d014      	beq.n	800c206 <trans_anim_cb+0x2d6>
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	6899      	ldr	r1, [r3, #8]
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	889b      	ldrh	r3, [r3, #4]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	f7fe ffa3 	bl	800b134 <lv_obj_refresh_style>
        break;

    }

}
 800c1ee:	e00b      	b.n	800c208 <trans_anim_cb+0x2d8>
    for(i = 0; i < obj->style_cnt; i++) {
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c1f4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	4293      	cmp	r3, r2
 800c200:	f4ff aea3 	bcc.w	800bf4a <trans_anim_cb+0x1a>
}
 800c204:	e000      	b.n	800c208 <trans_anim_cb+0x2d8>
        break;
 800c206:	bf00      	nop
}
 800c208:	bf00      	nop
 800c20a:	3720      	adds	r7, #32
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 800c210:	b590      	push	{r4, r7, lr}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	617b      	str	r3, [r7, #20]

    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fc22 	bl	800ba6c <lv_obj_style_get_selector_part>
 800c228:	6138      	str	r0, [r7, #16]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	6818      	ldr	r0, [r3, #0]
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	889b      	ldrh	r3, [r3, #4]
 800c232:	697c      	ldr	r4, [r7, #20]
 800c234:	461a      	mov	r2, r3
 800c236:	6939      	ldr	r1, [r7, #16]
 800c238:	f7ff f856 	bl	800b2e8 <lv_obj_get_style_prop>
 800c23c:	60e0      	str	r0, [r4, #12]

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    lv_style_prop_t prop_tmp = tr->prop;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	889b      	ldrh	r3, [r3, #4]
 800c242:	81fb      	strh	r3, [r7, #14]
    tr->prop = LV_STYLE_PROP_INV;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2200      	movs	r2, #0
 800c248:	809a      	strh	r2, [r3, #4]

    /*Delete the related transitions if any*/
    trans_del(tr->obj, part, prop_tmp, tr);
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	6818      	ldr	r0, [r3, #0]
 800c24e:	89fa      	ldrh	r2, [r7, #14]
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	6939      	ldr	r1, [r7, #16]
 800c254:	f7ff fdea 	bl	800be2c <trans_del>

    tr->prop = prop_tmp;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	89fa      	ldrh	r2, [r7, #14]
 800c25c:	809a      	strh	r2, [r3, #4]

    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	4619      	mov	r1, r3
 800c268:	4610      	mov	r0, r2
 800c26a:	f7ff fc0c 	bl	800ba86 <get_trans_style>
 800c26e:	60b8      	str	r0, [r7, #8]
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	6818      	ldr	r0, [r3, #0]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	8899      	ldrh	r1, [r3, #4]
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	f014 fdd4 	bl	8020e28 <lv_style_set_prop>

}
 800c280:	bf00      	nop
 800c282:	371c      	adds	r7, #28
 800c284:	46bd      	mov	sp, r7
 800c286:	bd90      	pop	{r4, r7, pc}

0800c288 <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08a      	sub	sp, #40	; 0x28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	61bb      	str	r3, [r7, #24]
    lv_obj_t * obj = tr->obj;
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	617b      	str	r3, [r7, #20]
    lv_style_prop_t prop = tr->prop;
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	889b      	ldrh	r3, [r3, #4]
 800c2a0:	827b      	strh	r3, [r7, #18]

    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800c2a8:	4842      	ldr	r0, [pc, #264]	; (800c3b4 <trans_anim_ready_cb+0x12c>)
 800c2aa:	f013 fcb8 	bl	801fc1e <_lv_ll_get_head>
 800c2ae:	6238      	str	r0, [r7, #32]
 800c2b0:	e01e      	b.n	800c2f0 <trans_anim_ready_cb+0x68>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800c2b2:	6a3a      	ldr	r2, [r7, #32]
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d015      	beq.n	800c2e6 <trans_anim_ready_cb+0x5e>
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d10f      	bne.n	800c2e6 <trans_anim_ready_cb+0x5e>
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	689a      	ldr	r2, [r3, #8]
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d109      	bne.n	800c2e6 <trans_anim_ready_cb+0x5e>
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	889a      	ldrh	r2, [r3, #4]
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	889b      	ldrh	r3, [r3, #4]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d103      	bne.n	800c2e6 <trans_anim_ready_cb+0x5e>
            running = true;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c2e4:	e007      	b.n	800c2f6 <trans_anim_ready_cb+0x6e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800c2e6:	6a39      	ldr	r1, [r7, #32]
 800c2e8:	4832      	ldr	r0, [pc, #200]	; (800c3b4 <trans_anim_ready_cb+0x12c>)
 800c2ea:	f013 fcba 	bl	801fc62 <_lv_ll_get_next>
 800c2ee:	6238      	str	r0, [r7, #32]
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1dd      	bne.n	800c2b2 <trans_anim_ready_cb+0x2a>
        }
    }

    if(!running) {
 800c2f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2fa:	f083 0301 	eor.w	r3, r3, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b00      	cmp	r3, #0
 800c302:	d053      	beq.n	800c3ac <trans_anim_ready_cb+0x124>
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 800c304:	2300      	movs	r3, #0
 800c306:	61fb      	str	r3, [r7, #28]
 800c308:	e045      	b.n	800c396 <trans_anim_ready_cb+0x10e>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	68da      	ldr	r2, [r3, #12]
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	4413      	add	r3, r2
 800c314:	79db      	ldrb	r3, [r3, #7]
 800c316:	f003 0302 	and.w	r3, r3, #2
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d037      	beq.n	800c390 <trans_anim_ready_cb+0x108>
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	68da      	ldr	r2, [r3, #12]
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	4413      	add	r3, r2
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c330:	461a      	mov	r2, r3
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	429a      	cmp	r2, r3
 800c338:	d12a      	bne.n	800c390 <trans_anim_ready_cb+0x108>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800c33a:	69b9      	ldr	r1, [r7, #24]
 800c33c:	481d      	ldr	r0, [pc, #116]	; (800c3b4 <trans_anim_ready_cb+0x12c>)
 800c33e:	f013 fc11 	bl	801fb64 <_lv_ll_remove>
                lv_mem_free(tr);
 800c342:	69b8      	ldr	r0, [r7, #24]
 800c344:	f013 fe5a 	bl	801fffc <lv_mem_free>

                _lv_obj_style_t * obj_style = &obj->styles[i];
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	68da      	ldr	r2, [r3, #12]
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	4413      	add	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]
                lv_style_remove_prop(obj_style->style, prop);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	8a7a      	ldrh	r2, [r7, #18]
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f014 fc91 	bl	8020c84 <lv_style_remove_prop>

                if(lv_style_is_empty(obj->styles[i].style)) {
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	4413      	add	r3, r2
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4618      	mov	r0, r3
 800c370:	f014 fe8a 	bl	8021088 <lv_style_is_empty>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d017      	beq.n	800c3aa <trans_anim_ready_cb+0x122>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6819      	ldr	r1, [r3, #0]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c386:	461a      	mov	r2, r3
 800c388:	6978      	ldr	r0, [r7, #20]
 800c38a:	f7fe fddd 	bl	800af48 <lv_obj_remove_style>

                }
                break;
 800c38e:	e00c      	b.n	800c3aa <trans_anim_ready_cb+0x122>
        for(i = 0; i < obj->style_cnt; i++) {
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	3301      	adds	r3, #1
 800c394:	61fb      	str	r3, [r7, #28]
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c39a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d3b0      	bcc.n	800c30a <trans_anim_ready_cb+0x82>
            }
        }
    }
}
 800c3a8:	e000      	b.n	800c3ac <trans_anim_ready_cb+0x124>
                break;
 800c3aa:	bf00      	nop
}
 800c3ac:	bf00      	nop
 800c3ae:	3728      	adds	r7, #40	; 0x28
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	20000840 	.word	0x20000840

0800c3b8 <calculate_layer_type>:

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7fe fd5c 	bl	800ae80 <lv_obj_get_style_transform_angle>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <calculate_layer_type+0x1a>
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	e01c      	b.n	800c40c <calculate_layer_type+0x54>
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7fe fd41 	bl	800ae5c <lv_obj_get_style_transform_zoom>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e0:	d001      	beq.n	800c3e6 <calculate_layer_type+0x2e>
 800c3e2:	2302      	movs	r3, #2
 800c3e4:	e012      	b.n	800c40c <calculate_layer_type+0x54>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7fe fd5b 	bl	800aea4 <lv_obj_get_style_opa>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2bff      	cmp	r3, #255	; 0xff
 800c3f2:	d001      	beq.n	800c3f8 <calculate_layer_type+0x40>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e009      	b.n	800c40c <calculate_layer_type+0x54>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7fe fd87 	bl	800af0e <lv_obj_get_style_blend_mode>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <calculate_layer_type+0x52>
 800c406:	2301      	movs	r3, #1
 800c408:	e000      	b.n	800c40c <calculate_layer_type+0x54>
#endif
    return LV_LAYER_TYPE_NONE;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <lv_obj_get_screen>:
    }
    lv_group_swap_obj(obj1, obj2);
}

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_par;

    do {
        act_par = par;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	60bb      	str	r3, [r7, #8]
        par = lv_obj_get_parent(act_par);
 800c424:	68b8      	ldr	r0, [r7, #8]
 800c426:	f000 f843 	bl	800c4b0 <lv_obj_get_parent>
 800c42a:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1f6      	bne.n	800c420 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_par;
 800c432:	68bb      	ldr	r3, [r7, #8]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <lv_obj_get_disp>:

lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <lv_obj_get_disp+0x16>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	617b      	str	r3, [r7, #20]
 800c450:	e003      	b.n	800c45a <lv_obj_get_disp+0x1e>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7ff ffde 	bl	800c414 <lv_obj_get_screen>
 800c458:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800c45a:	4814      	ldr	r0, [pc, #80]	; (800c4ac <lv_obj_get_disp+0x70>)
 800c45c:	f013 fbdf 	bl	801fc1e <_lv_ll_get_head>
 800c460:	6138      	str	r0, [r7, #16]
 800c462:	e01a      	b.n	800c49a <lv_obj_get_disp+0x5e>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	e00d      	b.n	800c486 <lv_obj_get_disp+0x4a>
            if(d->screens[i] == scr) return d;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	68da      	ldr	r2, [r3, #12]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d101      	bne.n	800c480 <lv_obj_get_disp+0x44>
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	e010      	b.n	800c4a2 <lv_obj_get_disp+0x66>
        for(i = 0; i < d->screen_cnt; i++) {
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	3301      	adds	r3, #1
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d3ec      	bcc.n	800c46a <lv_obj_get_disp+0x2e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800c490:	6939      	ldr	r1, [r7, #16]
 800c492:	4806      	ldr	r0, [pc, #24]	; (800c4ac <lv_obj_get_disp+0x70>)
 800c494:	f013 fbe5 	bl	801fc62 <_lv_ll_get_next>
 800c498:	6138      	str	r0, [r7, #16]
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e1      	bne.n	800c464 <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	200007f8 	.word	0x200007f8

0800c4b0 <lv_obj_get_parent>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <lv_obj_get_parent+0x12>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e001      	b.n	800c4c6 <lv_obj_get_parent+0x16>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685b      	ldr	r3, [r3, #4]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <lv_obj_get_child_cnt>:
    if(idu >= obj->spec_attr->child_cnt) return NULL;
    else return obj->spec_attr->children[id];
}

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b083      	sub	sp, #12
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <lv_obj_get_child_cnt+0x14>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e002      	b.n	800c4ec <lv_obj_get_child_cnt+0x1a>
    return obj->spec_attr->child_cnt;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	685b      	ldr	r3, [r3, #4]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <lv_area_copy>:
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	80da      	strh	r2, [r3, #6]
}
 800c52a:	bf00      	nop
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <lv_area_get_width>:
{
 800c536:	b480      	push	{r7}
 800c538:	b083      	sub	sp, #12
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c544:	b29a      	uxth	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	b29b      	uxth	r3, r3
 800c552:	3301      	adds	r3, #1
 800c554:	b29b      	uxth	r3, r3
 800c556:	b21b      	sxth	r3, r3
}
 800c558:	4618      	mov	r0, r3
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <lv_area_get_height>:
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c572:	b29a      	uxth	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	b29b      	uxth	r3, r3
 800c580:	3301      	adds	r3, #1
 800c582:	b29b      	uxth	r3, r3
 800c584:	b21b      	sxth	r3, r3
}
 800c586:	4618      	mov	r0, r3
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <lv_obj_get_style_transform_zoom>:
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800c59c:	226c      	movs	r2, #108	; 0x6c
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7fe fea1 	bl	800b2e8 <lv_obj_get_style_prop>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	b21b      	sxth	r3, r3
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <lv_obj_get_style_transform_angle>:
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b084      	sub	sp, #16
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800c5c0:	226d      	movs	r2, #109	; 0x6d
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7fe fe8f 	bl	800b2e8 <lv_obj_get_style_prop>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	b21b      	sxth	r3, r3
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <lv_obj_get_style_transform_pivot_x>:
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800c5e4:	226e      	movs	r2, #110	; 0x6e
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7fe fe7d 	bl	800b2e8 <lv_obj_get_style_prop>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	b21b      	sxth	r3, r3
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <lv_obj_get_style_transform_pivot_y>:
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800c608:	226f      	movs	r2, #111	; 0x6f
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7fe fe6b 	bl	800b2e8 <lv_obj_get_style_prop>
 800c612:	4603      	mov	r3, r0
 800c614:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	b21b      	sxth	r3, r3
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <lv_obj_get_style_opa>:
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800c62c:	2260      	movs	r2, #96	; 0x60
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7fe fe59 	bl	800b2e8 <lv_obj_get_style_prop>
 800c636:	4603      	mov	r3, r0
 800c638:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	b2db      	uxtb	r3, r3
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <lv_obj_get_style_blend_mode>:
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800c650:	2267      	movs	r2, #103	; 0x67
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7fe fe47 	bl	800b2e8 <lv_obj_get_style_prop>
 800c65a:	4603      	mov	r3, r0
 800c65c:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	b2db      	uxtb	r3, r3
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 800c66a:	b480      	push	{r7}
 800c66c:	af00      	add	r7, sp, #0
    perf_monitor_init(&perf_monitor);
#endif
#if LV_USE_MEM_MONITOR
    mem_monitor_init(&mem_monitor);
#endif
}
 800c66e:	bf00      	nop
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <lv_obj_redraw>:
        }
    }
}

void lv_obj_redraw(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08e      	sub	sp, #56	; 0x38
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_area_t clip_coords_for_obj;

    /*Truncate the clip area to `obj size + ext size` area*/
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800c688:	f107 0310 	add.w	r3, r7, #16
 800c68c:	4619      	mov	r1, r3
 800c68e:	6838      	ldr	r0, [r7, #0]
 800c690:	f7fa ffd8 	bl	8007644 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800c694:	6838      	ldr	r0, [r7, #0]
 800c696:	f7fa fb1a 	bl	8006cce <_lv_obj_get_ext_draw_size>
 800c69a:	4603      	mov	r3, r0
 800c69c:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800c69e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800c6a2:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800c6a6:	f107 0310 	add.w	r3, r7, #16
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f012 f8ea 	bl	801e884 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800c6b0:	f107 0210 	add.w	r2, r7, #16
 800c6b4:	f107 0318 	add.w	r3, r7, #24
 800c6b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f012 f94e 	bl	801e95c <_lv_area_intersect>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    /*If the object is visible on the current clip area OR has overflow visible draw it.
     *With overflow visible drawing should happen to apply the masks which might affect children */
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800c6c6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d107      	bne.n	800c6de <lv_obj_redraw+0x66>
 800c6ce:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6d2:	6838      	ldr	r0, [r7, #0]
 800c6d4:	f7f8 fb07 	bl	8004ce6 <lv_obj_has_flag>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <lv_obj_redraw+0x6a>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e000      	b.n	800c6e4 <lv_obj_redraw+0x6c>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800c6e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6ec:	f003 0301 	and.w	r3, r3, #1
 800c6f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(should_draw) {
 800c6f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d012      	beq.n	800c722 <lv_obj_redraw+0xaa>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f107 0218 	add.w	r2, r7, #24
 800c702:	609a      	str	r2, [r3, #8]

        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	2114      	movs	r1, #20
 800c708:	6838      	ldr	r0, [r7, #0]
 800c70a:	f7f7 f9a7 	bl	8003a5c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	2115      	movs	r1, #21
 800c712:	6838      	ldr	r0, [r7, #0]
 800c714:	f7f7 f9a2 	bl	8003a5c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	2116      	movs	r1, #22
 800c71c:	6838      	ldr	r0, [r7, #0]
 800c71e:	f7f7 f99d 	bl	8003a5c <lv_event_send>
    }

    /*With overflow visible keep the previous clip area to let the children visible out of this object too
     *With not overflow visible limit the clip are to the object's coordinates to clip the children*/
    lv_area_t clip_coords_for_children;
    bool refr_children = true;
 800c722:	2301      	movs	r3, #1
 800c724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800c728:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c72c:	6838      	ldr	r0, [r7, #0]
 800c72e:	f7f8 fada 	bl	8004ce6 <lv_obj_has_flag>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d006      	beq.n	800c746 <lv_obj_redraw+0xce>
        clip_coords_for_children  = *clip_area_ori;
 800c738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c73a:	f107 0308 	add.w	r3, r7, #8
 800c73e:	6810      	ldr	r0, [r2, #0]
 800c740:	6851      	ldr	r1, [r2, #4]
 800c742:	c303      	stmia	r3!, {r0, r1}
 800c744:	e011      	b.n	800c76a <lv_obj_redraw+0xf2>
    }
    else {
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	f103 0214 	add.w	r2, r3, #20
 800c74c:	f107 0308 	add.w	r3, r7, #8
 800c750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c752:	4618      	mov	r0, r3
 800c754:	f012 f902 	bl	801e95c <_lv_area_intersect>
 800c758:	4603      	mov	r3, r0
 800c75a:	f083 0301 	eor.w	r3, r3, #1
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d002      	beq.n	800c76a <lv_obj_redraw+0xf2>
            refr_children = false;
 800c764:	2300      	movs	r3, #0
 800c766:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if(refr_children) {
 800c76a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d01d      	beq.n	800c7ae <lv_obj_redraw+0x136>
        draw_ctx->clip_area = &clip_coords_for_children;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f107 0208 	add.w	r2, r7, #8
 800c778:	609a      	str	r2, [r3, #8]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c77a:	6838      	ldr	r0, [r7, #0]
 800c77c:	f7ff fea9 	bl	800c4d2 <lv_obj_get_child_cnt>
 800c780:	6278      	str	r0, [r7, #36]	; 0x24
        for(i = 0; i < child_cnt; i++) {
 800c782:	2300      	movs	r3, #0
 800c784:	633b      	str	r3, [r7, #48]	; 0x30
 800c786:	e00e      	b.n	800c7a6 <lv_obj_redraw+0x12e>
            lv_obj_t * child = obj->spec_attr->children[i];
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	623b      	str	r3, [r7, #32]
            refr_obj(draw_ctx, child);
 800c798:	6a39      	ldr	r1, [r7, #32]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fef0 	bl	800d580 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	633b      	str	r3, [r7, #48]	; 0x30
 800c7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d3ec      	bcc.n	800c788 <lv_obj_redraw+0x110>
        }
    }

    /*If the object was visible on the clip area call the post draw events too*/
    if(should_draw) {
 800c7ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d012      	beq.n	800c7dc <lv_obj_redraw+0x164>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f107 0218 	add.w	r2, r7, #24
 800c7bc:	609a      	str	r2, [r3, #8]

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	2117      	movs	r1, #23
 800c7c2:	6838      	ldr	r0, [r7, #0]
 800c7c4:	f7f7 f94a 	bl	8003a5c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	2118      	movs	r1, #24
 800c7cc:	6838      	ldr	r0, [r7, #0]
 800c7ce:	f7f7 f945 	bl	8003a5c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	2119      	movs	r1, #25
 800c7d6:	6838      	ldr	r0, [r7, #0]
 800c7d8:	f7f7 f940 	bl	8003a5c <lv_event_send>
    }

    draw_ctx->clip_area = clip_area_ori;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7e0:	609a      	str	r2, [r3, #8]
}
 800c7e2:	bf00      	nop
 800c7e4:	3738      	adds	r7, #56	; 0x38
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b088      	sub	sp, #32
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d102      	bne.n	800c800 <_lv_inv_area+0x16>
 800c7fa:	f011 fbef 	bl	801dfdc <lv_disp_get_default>
 800c7fe:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 80be 	beq.w	800c984 <_lv_inv_area+0x19a>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7f7 f90c 	bl	8003a26 <lv_disp_is_invalidation_enabled>
 800c80e:	4603      	mov	r3, r0
 800c810:	f083 0301 	eor.w	r3, r3, #1
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	f040 80b6 	bne.w	800c988 <_lv_inv_area+0x19e>

    if(disp->rendering_in_progress) {
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c822:	f003 0304 	and.w	r3, r3, #4
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f040 80af 	bne.w	800c98c <_lv_inv_area+0x1a2>
        LV_LOG_ERROR("detected modifying dirty areas in render");
        return;
    }

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d104      	bne.n	800c83e <_lv_inv_area+0x54>
        disp->inv_p = 0;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        return;
 800c83c:	e0ad      	b.n	800c99a <_lv_inv_area+0x1b0>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800c83e:	2300      	movs	r3, #0
 800c840:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f011 fbd4 	bl	801dff4 <lv_disp_get_hor_res>
 800c84c:	4603      	mov	r3, r0
 800c84e:	b29b      	uxth	r3, r3
 800c850:	3b01      	subs	r3, #1
 800c852:	b29b      	uxth	r3, r3
 800c854:	b21b      	sxth	r3, r3
 800c856:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f011 fbf1 	bl	801e040 <lv_disp_get_ver_res>
 800c85e:	4603      	mov	r3, r0
 800c860:	b29b      	uxth	r3, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	b29b      	uxth	r3, r3
 800c866:	b21b      	sxth	r3, r3
 800c868:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800c86a:	f107 0214 	add.w	r2, r7, #20
 800c86e:	f107 030c 	add.w	r3, r7, #12
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	4618      	mov	r0, r3
 800c876:	f012 f871 	bl	801e95c <_lv_area_intersect>
 800c87a:	4603      	mov	r3, r0
 800c87c:	777b      	strb	r3, [r7, #29]
    if(suc == false)  return; /*Out of the screen*/
 800c87e:	7f7b      	ldrb	r3, [r7, #29]
 800c880:	f083 0301 	eor.w	r3, r3, #1
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	f040 8082 	bne.w	800c990 <_lv_inv_area+0x1a6>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->driver->full_refresh) {
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	7c1b      	ldrb	r3, [r3, #16]
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d015      	beq.n	800c8c8 <_lv_inv_area+0xde>
        disp->inv_areas[0] = scr_area;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3330      	adds	r3, #48	; 0x30
 800c8a0:	f107 0214 	add.w	r2, r7, #20
 800c8a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8a8:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d06b      	beq.n	800c994 <_lv_inv_area+0x1aa>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f014 fde0 	bl	8021486 <lv_timer_resume>
        return;
 800c8c6:	e065      	b.n	800c994 <_lv_inv_area+0x1aa>
    }

    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d008      	beq.n	800c8e4 <_lv_inv_area+0xfa>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	6812      	ldr	r2, [r2, #0]
 800c8dc:	f107 010c 	add.w	r1, r7, #12
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	4798      	blx	r3

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	83fb      	strh	r3, [r7, #30]
 800c8e8:	e010      	b.n	800c90c <_lv_inv_area+0x122>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800c8ea:	8bfb      	ldrh	r3, [r7, #30]
 800c8ec:	3306      	adds	r3, #6
 800c8ee:	00db      	lsls	r3, r3, #3
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	18d1      	adds	r1, r2, r3
 800c8f4:	f107 030c 	add.w	r3, r7, #12
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f012 fa12 	bl	801ed24 <_lv_area_is_in>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d148      	bne.n	800c998 <_lv_inv_area+0x1ae>
    for(i = 0; i < disp->inv_p; i++) {
 800c906:	8bfb      	ldrh	r3, [r7, #30]
 800c908:	3301      	adds	r3, #1
 800c90a:	83fb      	strh	r3, [r7, #30]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800c912:	8bfa      	ldrh	r2, [r7, #30]
 800c914:	429a      	cmp	r2, r3
 800c916:	d3e8      	bcc.n	800c8ea <_lv_inv_area+0x100>
    }

    /*Save the area*/
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800c91e:	2b1f      	cmp	r3, #31
 800c920:	d80d      	bhi.n	800c93e <_lv_inv_area+0x154>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800c928:	3306      	adds	r3, #6
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	4413      	add	r3, r2
 800c930:	f107 020c 	add.w	r2, r7, #12
 800c934:	4611      	mov	r1, r2
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff fdde 	bl	800c4f8 <lv_area_copy>
 800c93c:	e010      	b.n	800c960 <_lv_inv_area+0x176>
    }
    else {   /*If no place for the area add the screen*/
        disp->inv_p = 0;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800c94c:	3306      	adds	r3, #6
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	4413      	add	r3, r2
 800c954:	f107 0214 	add.w	r2, r7, #20
 800c958:	4611      	mov	r1, r2
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7ff fdcc 	bl	800c4f8 <lv_area_copy>
    }
    disp->inv_p++;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800c966:	3301      	adds	r3, #1
 800c968:	b29a      	uxth	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d010      	beq.n	800c99a <_lv_inv_area+0x1b0>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	4618      	mov	r0, r3
 800c97e:	f014 fd82 	bl	8021486 <lv_timer_resume>
 800c982:	e00a      	b.n	800c99a <_lv_inv_area+0x1b0>
    if(!disp) return;
 800c984:	bf00      	nop
 800c986:	e008      	b.n	800c99a <_lv_inv_area+0x1b0>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800c988:	bf00      	nop
 800c98a:	e006      	b.n	800c99a <_lv_inv_area+0x1b0>
        return;
 800c98c:	bf00      	nop
 800c98e:	e004      	b.n	800c99a <_lv_inv_area+0x1b0>
    if(suc == false)  return; /*Out of the screen*/
 800c990:	bf00      	nop
 800c992:	e002      	b.n	800c99a <_lv_inv_area+0x1b0>
        return;
 800c994:	bf00      	nop
 800c996:	e000      	b.n	800c99a <_lv_inv_area+0x1b0>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800c998:	bf00      	nop
}
 800c99a:	3720      	adds	r7, #32
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	af00      	add	r7, sp, #0
    return disp_refr;
 800c9a4:	4b03      	ldr	r3, [pc, #12]	; (800c9b4 <_lv_refr_get_disp_refreshing+0x14>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	200006b0 	.word	0x200006b0

0800c9b8 <_lv_disp_refr_timer>:
/**
 * Called periodically to handle the refreshing
 * @param tmr pointer to the timer itself
 */
void _lv_disp_refr_timer(lv_timer_t * tmr)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
    REFR_TRACE("begin");

    uint32_t start = lv_tick_get();
 800c9c0:	f011 fbb6 	bl	801e130 <lv_tick_get>
 800c9c4:	60f8      	str	r0, [r7, #12]
    volatile uint32_t elaps = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	60bb      	str	r3, [r7, #8]

    if(tmr) {
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d007      	beq.n	800c9e0 <_lv_disp_refr_timer+0x28>
        disp_refr = tmr->user_data;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	4a38      	ldr	r2, [pc, #224]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800c9d6:	6013      	str	r3, [r2, #0]
#if LV_USE_PERF_MONITOR == 0 && LV_USE_MEM_MONITOR == 0
        /**
         * Ensure the timer does not run again automatically.
         * This is done before refreshing in case refreshing invalidates something else.
         */
        lv_timer_pause(tmr);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f014 fd45 	bl	8021468 <lv_timer_pause>
 800c9de:	e004      	b.n	800c9ea <_lv_disp_refr_timer+0x32>
#endif
    }
    else {
        disp_refr = lv_disp_get_default();
 800c9e0:	f011 fafc 	bl	801dfdc <lv_disp_get_default>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	4a34      	ldr	r2, [pc, #208]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800c9e8:	6013      	str	r3, [r2, #0]
    }

    /*Refresh the screen's layout if required*/
    lv_obj_update_layout(disp_refr->act_scr);
 800c9ea:	4b33      	ldr	r3, [pc, #204]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fa fdfb 	bl	80075ec <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800c9f6:	4b30      	ldr	r3, [pc, #192]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	695b      	ldr	r3, [r3, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d005      	beq.n	800ca0c <_lv_disp_refr_timer+0x54>
 800ca00:	4b2d      	ldr	r3, [pc, #180]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	695b      	ldr	r3, [r3, #20]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fa fdf0 	bl	80075ec <lv_obj_update_layout>

    lv_obj_update_layout(disp_refr->top_layer);
 800ca0c:	4b2a      	ldr	r3, [pc, #168]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fa fdea 	bl	80075ec <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800ca18:	4b27      	ldr	r3, [pc, #156]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fa fde4 	bl	80075ec <lv_obj_update_layout>

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 800ca24:	4b24      	ldr	r3, [pc, #144]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d105      	bne.n	800ca3a <_lv_disp_refr_timer+0x82>
        disp_refr->inv_p = 0;
 800ca2e:	4b22      	ldr	r3, [pc, #136]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        LV_LOG_WARN("there is no active screen");
        REFR_TRACE("finished");
        return;
 800ca38:	e03a      	b.n	800cab0 <_lv_disp_refr_timer+0xf8>
    }

    lv_refr_join_area();
 800ca3a:	f000 f841 	bl	800cac0 <lv_refr_join_area>

    refr_invalid_areas();
 800ca3e:	f000 f8d7 	bl	800cbf0 <refr_invalid_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800ca42:	4b1d      	ldr	r3, [pc, #116]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d02a      	beq.n	800caa4 <_lv_disp_refr_timer+0xec>

        /*Clean up*/
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800ca4e:	4b1a      	ldr	r3, [pc, #104]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3330      	adds	r3, #48	; 0x30
 800ca54:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f013 fed3 	bl	8020804 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800ca5e:	4b16      	ldr	r3, [pc, #88]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800ca66:	2120      	movs	r1, #32
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f013 fecb 	bl	8020804 <lv_memset_00>
        disp_refr->inv_p = 0;
 800ca6e:	4b12      	ldr	r3, [pc, #72]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150

        elaps = lv_tick_elaps(start);
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f011 fb73 	bl	801e164 <lv_tick_elaps>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	60bb      	str	r3, [r7, #8]

        /*Call monitor cb if present*/
        if(disp_refr->driver->monitor_cb) {
 800ca82:	4b0d      	ldr	r3, [pc, #52]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00a      	beq.n	800caa4 <_lv_disp_refr_timer+0xec>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800ca8e:	4b0a      	ldr	r3, [pc, #40]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca96:	4a08      	ldr	r2, [pc, #32]	; (800cab8 <_lv_disp_refr_timer+0x100>)
 800ca98:	6812      	ldr	r2, [r2, #0]
 800ca9a:	6810      	ldr	r0, [r2, #0]
 800ca9c:	68b9      	ldr	r1, [r7, #8]
 800ca9e:	4a07      	ldr	r2, [pc, #28]	; (800cabc <_lv_disp_refr_timer+0x104>)
 800caa0:	6812      	ldr	r2, [r2, #0]
 800caa2:	4798      	blx	r3
        }
    }

    lv_mem_buf_free_all();
 800caa4:	f013 fbd4 	bl	8020250 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800caa8:	f010 fed6 	bl	801d858 <_lv_font_clean_up_fmt_txt>

#if LV_DRAW_COMPLEX
    _lv_draw_mask_cleanup();
 800caac:	f003 f94e 	bl	800fd4c <_lv_draw_mask_cleanup>
                              mon.frag_pct);
    }
#endif

    REFR_TRACE("finished");
}
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	200006b0 	.word	0x200006b0
 800cabc:	200006ac 	.word	0x200006ac

0800cac0 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800cac0:	b5b0      	push	{r4, r5, r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800cac6:	2300      	movs	r3, #0
 800cac8:	60bb      	str	r3, [r7, #8]
 800caca:	e080      	b.n	800cbce <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800cacc:	4b47      	ldr	r3, [pc, #284]	; (800cbec <lv_refr_join_area+0x12c>)
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d173      	bne.n	800cbc6 <lv_refr_join_area+0x106>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800cade:	2300      	movs	r3, #0
 800cae0:	60fb      	str	r3, [r7, #12]
 800cae2:	e067      	b.n	800cbb4 <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800cae4:	4b41      	ldr	r3, [pc, #260]	; (800cbec <lv_refr_join_area+0x12c>)
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	4413      	add	r3, r2
 800caec:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d158      	bne.n	800cba8 <lv_refr_join_area+0xe8>
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d054      	beq.n	800cba8 <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800cafe:	4b3b      	ldr	r3, [pc, #236]	; (800cbec <lv_refr_join_area+0x12c>)
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	3306      	adds	r3, #6
 800cb06:	00db      	lsls	r3, r3, #3
 800cb08:	18d0      	adds	r0, r2, r3
 800cb0a:	4b38      	ldr	r3, [pc, #224]	; (800cbec <lv_refr_join_area+0x12c>)
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3306      	adds	r3, #6
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	4413      	add	r3, r2
 800cb16:	4619      	mov	r1, r3
 800cb18:	f012 f8d6 	bl	801ecc8 <_lv_area_is_on>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	f083 0301 	eor.w	r3, r3, #1
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d141      	bne.n	800cbac <lv_refr_join_area+0xec>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800cb28:	4b30      	ldr	r3, [pc, #192]	; (800cbec <lv_refr_join_area+0x12c>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	3306      	adds	r3, #6
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	18d1      	adds	r1, r2, r3
 800cb34:	4b2d      	ldr	r3, [pc, #180]	; (800cbec <lv_refr_join_area+0x12c>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3306      	adds	r3, #6
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	441a      	add	r2, r3
 800cb40:	463b      	mov	r3, r7
 800cb42:	4618      	mov	r0, r3
 800cb44:	f011 ff5b 	bl	801e9fe <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800cb48:	463b      	mov	r3, r7
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f011 fe79 	bl	801e842 <lv_area_get_size>
 800cb50:	4604      	mov	r4, r0
 800cb52:	4b26      	ldr	r3, [pc, #152]	; (800cbec <lv_refr_join_area+0x12c>)
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	3306      	adds	r3, #6
 800cb5a:	00db      	lsls	r3, r3, #3
 800cb5c:	4413      	add	r3, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f011 fe6f 	bl	801e842 <lv_area_get_size>
 800cb64:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800cb66:	4b21      	ldr	r3, [pc, #132]	; (800cbec <lv_refr_join_area+0x12c>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3306      	adds	r3, #6
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	4413      	add	r3, r2
 800cb72:	4618      	mov	r0, r3
 800cb74:	f011 fe65 	bl	801e842 <lv_area_get_size>
 800cb78:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800cb7a:	442b      	add	r3, r5
 800cb7c:	429c      	cmp	r4, r3
 800cb7e:	d216      	bcs.n	800cbae <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800cb80:	4b1a      	ldr	r3, [pc, #104]	; (800cbec <lv_refr_join_area+0x12c>)
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	3306      	adds	r3, #6
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	4413      	add	r3, r2
 800cb8c:	463a      	mov	r2, r7
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7ff fcb1 	bl	800c4f8 <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800cb96:	4b15      	ldr	r3, [pc, #84]	; (800cbec <lv_refr_join_area+0x12c>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800cba2:	2201      	movs	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	e002      	b.n	800cbae <lv_refr_join_area+0xee>
                continue;
 800cba8:	bf00      	nop
 800cbaa:	e000      	b.n	800cbae <lv_refr_join_area+0xee>
                continue;
 800cbac:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	60fb      	str	r3, [r7, #12]
 800cbb4:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <lv_refr_join_area+0x12c>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d38f      	bcc.n	800cae4 <lv_refr_join_area+0x24>
 800cbc4:	e000      	b.n	800cbc8 <lv_refr_join_area+0x108>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800cbc6:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60bb      	str	r3, [r7, #8]
 800cbce:	4b07      	ldr	r3, [pc, #28]	; (800cbec <lv_refr_join_area+0x12c>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	f4ff af76 	bcc.w	800cacc <lv_refr_join_area+0xc>
            }
        }
    }
}
 800cbe0:	bf00      	nop
 800cbe2:	bf00      	nop
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bdb0      	pop	{r4, r5, r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200006b0 	.word	0x200006b0

0800cbf0 <refr_invalid_areas>:

/**
 * Refresh the joined areas
 */
static void refr_invalid_areas(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
    px_num = 0;
 800cbf6:	4b4e      	ldr	r3, [pc, #312]	; (800cd30 <refr_invalid_areas+0x140>)
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 800cbfc:	4b4d      	ldr	r3, [pc, #308]	; (800cd34 <refr_invalid_areas+0x144>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f000 808e 	beq.w	800cd26 <refr_invalid_areas+0x136>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800cc0e:	4b49      	ldr	r3, [pc, #292]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800cc16:	3b01      	subs	r3, #1
 800cc18:	607b      	str	r3, [r7, #4]
 800cc1a:	e00e      	b.n	800cc3a <refr_invalid_areas+0x4a>
        if(disp_refr->inv_area_joined[i] == 0) {
 800cc1c:	4b45      	ldr	r3, [pc, #276]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4413      	add	r3, r2
 800cc24:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d102      	bne.n	800cc34 <refr_invalid_areas+0x44>
            last_i = i;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	603b      	str	r3, [r7, #0]
            break;
 800cc32:	e005      	b.n	800cc40 <refr_invalid_areas+0x50>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3b01      	subs	r3, #1
 800cc38:	607b      	str	r3, [r7, #4]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	daed      	bge.n	800cc1c <refr_invalid_areas+0x2c>
        }
    }

    /*Notify the display driven rendering has started*/
    if(disp_refr->driver->render_start_cb) {
 800cc40:	4b3c      	ldr	r3, [pc, #240]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d008      	beq.n	800cc5e <refr_invalid_areas+0x6e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800cc4c:	4b39      	ldr	r3, [pc, #228]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc54:	4a37      	ldr	r2, [pc, #220]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc56:	6812      	ldr	r2, [r2, #0]
 800cc58:	6812      	ldr	r2, [r2, #0]
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	4798      	blx	r3
    }

    disp_refr->driver->draw_buf->last_area = 0;
 800cc5e:	4b35      	ldr	r3, [pc, #212]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68da      	ldr	r2, [r3, #12]
 800cc66:	7e13      	ldrb	r3, [r2, #24]
 800cc68:	f36f 0300 	bfc	r3, #0, #1
 800cc6c:	7613      	strb	r3, [r2, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800cc6e:	4b31      	ldr	r3, [pc, #196]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	68da      	ldr	r2, [r3, #12]
 800cc76:	7e13      	ldrb	r3, [r2, #24]
 800cc78:	f36f 0341 	bfc	r3, #1, #1
 800cc7c:	7613      	strb	r3, [r2, #24]
    disp_refr->rendering_in_progress = true;
 800cc7e:	4b2d      	ldr	r3, [pc, #180]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800cc86:	f043 0304 	orr.w	r3, r3, #4
 800cc8a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    for(i = 0; i < disp_refr->inv_p; i++) {
 800cc8e:	2300      	movs	r3, #0
 800cc90:	607b      	str	r3, [r7, #4]
 800cc92:	e037      	b.n	800cd04 <refr_invalid_areas+0x114>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800cc94:	4b27      	ldr	r3, [pc, #156]	; (800cd34 <refr_invalid_areas+0x144>)
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d12b      	bne.n	800ccfe <refr_invalid_areas+0x10e>

            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d107      	bne.n	800ccbe <refr_invalid_areas+0xce>
 800ccae:	4b21      	ldr	r3, [pc, #132]	; (800cd34 <refr_invalid_areas+0x144>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68da      	ldr	r2, [r3, #12]
 800ccb6:	7e13      	ldrb	r3, [r2, #24]
 800ccb8:	f043 0301 	orr.w	r3, r3, #1
 800ccbc:	7613      	strb	r3, [r2, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 800ccbe:	4b1d      	ldr	r3, [pc, #116]	; (800cd34 <refr_invalid_areas+0x144>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	68da      	ldr	r2, [r3, #12]
 800ccc6:	7e13      	ldrb	r3, [r2, #24]
 800ccc8:	f36f 0341 	bfc	r3, #1, #1
 800cccc:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800ccce:	4b19      	ldr	r3, [pc, #100]	; (800cd34 <refr_invalid_areas+0x144>)
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3306      	adds	r3, #6
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	4413      	add	r3, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 f82c 	bl	800cd38 <refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800cce0:	4b14      	ldr	r3, [pc, #80]	; (800cd34 <refr_invalid_areas+0x144>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3306      	adds	r3, #6
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	4413      	add	r3, r2
 800ccec:	4618      	mov	r0, r3
 800ccee:	f011 fda8 	bl	801e842 <lv_area_get_size>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	4b0e      	ldr	r3, [pc, #56]	; (800cd30 <refr_invalid_areas+0x140>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	4a0d      	ldr	r2, [pc, #52]	; (800cd30 <refr_invalid_areas+0x140>)
 800ccfc:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3301      	adds	r3, #1
 800cd02:	607b      	str	r3, [r7, #4]
 800cd04:	4b0b      	ldr	r3, [pc, #44]	; (800cd34 <refr_invalid_areas+0x144>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	4293      	cmp	r3, r2
 800cd12:	dbbf      	blt.n	800cc94 <refr_invalid_areas+0xa4>
        }
    }

    disp_refr->rendering_in_progress = false;
 800cd14:	4b07      	ldr	r3, [pc, #28]	; (800cd34 <refr_invalid_areas+0x144>)
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800cd1c:	f36f 0382 	bfc	r3, #2, #1
 800cd20:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800cd24:	e000      	b.n	800cd28 <refr_invalid_areas+0x138>
    if(disp_refr->inv_p == 0) return;
 800cd26:	bf00      	nop
}
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	200006ac 	.word	0x200006ac
 800cd34:	200006b0 	.word	0x200006b0

0800cd38 <refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void refr_area(const lv_area_t * area_p)
{
 800cd38:	b590      	push	{r4, r7, lr}
 800cd3a:	b08f      	sub	sp, #60	; 0x3c
 800cd3c:	af02      	add	r7, sp, #8
 800cd3e:	6078      	str	r0, [r7, #4]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800cd40:	4b8e      	ldr	r3, [pc, #568]	; (800cf7c <refr_area+0x244>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd48:	62bb      	str	r3, [r7, #40]	; 0x28
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800cd4a:	4b8c      	ldr	r3, [pc, #560]	; (800cf7c <refr_area+0x244>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd56:	601a      	str	r2, [r3, #0]

    /*With full refresh just redraw directly into the buffer*/
    /*In direct mode draw directly on the absolute coordinates of the buffer*/
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800cd58:	4b88      	ldr	r3, [pc, #544]	; (800cf7c <refr_area+0x244>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	7c1b      	ldrb	r3, [r3, #16]
 800cd60:	f003 0302 	and.w	r3, r3, #2
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d108      	bne.n	800cd7c <refr_area+0x44>
 800cd6a:	4b84      	ldr	r3, [pc, #528]	; (800cf7c <refr_area+0x244>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	7c1b      	ldrb	r3, [r3, #16]
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d04f      	beq.n	800ce1c <refr_area+0xe4>
        lv_area_t disp_area;
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800cd7c:	4b7f      	ldr	r3, [pc, #508]	; (800cf7c <refr_area+0x244>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f011 f937 	bl	801dff4 <lv_disp_get_hor_res>
 800cd86:	4603      	mov	r3, r0
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	b21c      	sxth	r4, r3
 800cd90:	4b7a      	ldr	r3, [pc, #488]	; (800cf7c <refr_area+0x244>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f011 f953 	bl	801e040 <lv_disp_get_ver_res>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	b21b      	sxth	r3, r3
 800cda4:	f107 000c 	add.w	r0, r7, #12
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	4623      	mov	r3, r4
 800cdac:	2200      	movs	r2, #0
 800cdae:	2100      	movs	r1, #0
 800cdb0:	f011 fd10 	bl	801e7d4 <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	f107 020c 	add.w	r2, r7, #12
 800cdba:	605a      	str	r2, [r3, #4]

        if(disp_refr->driver->full_refresh) {
 800cdbc:	4b6f      	ldr	r3, [pc, #444]	; (800cf7c <refr_area+0x244>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	7c1b      	ldrb	r3, [r3, #16]
 800cdc4:	f003 0302 	and.w	r3, r3, #2
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00f      	beq.n	800cdee <refr_area+0xb6>
            disp_refr->driver->draw_buf->last_part = 1;
 800cdce:	4b6b      	ldr	r3, [pc, #428]	; (800cf7c <refr_area+0x244>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68da      	ldr	r2, [r3, #12]
 800cdd6:	7e13      	ldrb	r3, [r2, #24]
 800cdd8:	f043 0302 	orr.w	r3, r3, #2
 800cddc:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde0:	f107 020c 	add.w	r2, r7, #12
 800cde4:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800cde6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cde8:	f000 f8ca 	bl	800cf80 <refr_area_part>
 800cdec:	e0c3      	b.n	800cf76 <refr_area+0x23e>
        }
        else {
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800cdee:	4b63      	ldr	r3, [pc, #396]	; (800cf7c <refr_area+0x244>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	4a61      	ldr	r2, [pc, #388]	; (800cf7c <refr_area+0x244>)
 800cdf8:	6812      	ldr	r2, [r2, #0]
 800cdfa:	6812      	ldr	r2, [r2, #0]
 800cdfc:	68d2      	ldr	r2, [r2, #12]
 800cdfe:	699b      	ldr	r3, [r3, #24]
 800ce00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ce04:	b2d9      	uxtb	r1, r3
 800ce06:	7e13      	ldrb	r3, [r2, #24]
 800ce08:	f361 0341 	bfi	r3, r1, #1, #1
 800ce0c:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = area_p;
 800ce0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800ce14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce16:	f000 f8b3 	bl	800cf80 <refr_area_part>
 800ce1a:	e0ac      	b.n	800cf76 <refr_area+0x23e>
        return;
    }

    /*Normal refresh: draw the area in parts*/
    /*Calculate the max row num*/
    lv_coord_t w = lv_area_get_width(area_p);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7ff fb8a 	bl	800c536 <lv_area_get_width>
 800ce22:	4603      	mov	r3, r0
 800ce24:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h = lv_area_get_height(area_p);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff fb9c 	bl	800c564 <lv_area_get_height>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800ce36:	4b51      	ldr	r3, [pc, #324]	; (800cf7c <refr_area+0x244>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f011 f900 	bl	801e040 <lv_disp_get_ver_res>
 800ce40:	4603      	mov	r3, r0
 800ce42:	429c      	cmp	r4, r3
 800ce44:	db0a      	blt.n	800ce5c <refr_area+0x124>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800ce46:	4b4d      	ldr	r3, [pc, #308]	; (800cf7c <refr_area+0x244>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f011 f8f8 	bl	801e040 <lv_disp_get_ver_res>
 800ce50:	4603      	mov	r3, r0
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	3b01      	subs	r3, #1
 800ce56:	b29b      	uxth	r3, r3
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800ce58:	b21b      	sxth	r3, r3
 800ce5a:	e002      	b.n	800ce62 <refr_area+0x12a>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ce62:	847b      	strh	r3, [r7, #34]	; 0x22

    int32_t max_row = get_max_row(disp_refr, w, h);
 800ce64:	4b45      	ldr	r3, [pc, #276]	; (800cf7c <refr_area+0x244>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ce6c:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 fd59 	bl	800d928 <get_max_row>
 800ce76:	4603      	mov	r3, r0
 800ce78:	61fb      	str	r3, [r7, #28]

    lv_coord_t row;
    lv_coord_t row_last = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_area_t sub_area;
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	885b      	ldrh	r3, [r3, #2]
 800ce82:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce84:	e042      	b.n	800cf0c <refr_area+0x1d4>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce8c:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ce94:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800ce96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce98:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = row + max_row - 1;
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cea0:	4413      	add	r3, r2
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	3b01      	subs	r3, #1
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	b21b      	sxth	r3, r3
 800ceaa:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	f107 0214 	add.w	r2, r7, #20
 800ceb2:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	f107 0214 	add.w	r2, r7, #20
 800ceba:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800cebc:	4b2f      	ldr	r3, [pc, #188]	; (800cf7c <refr_area+0x244>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	689a      	ldr	r2, [r3, #8]
 800cec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec8:	601a      	str	r2, [r3, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800ceca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cece:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ced2:	429a      	cmp	r2, r3
 800ced4:	da01      	bge.n	800ceda <refr_area+0x1a2>
 800ced6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ced8:	837b      	strh	r3, [r7, #26]
        row_last = sub_area.y2;
 800ceda:	8b7b      	ldrh	r3, [r7, #26]
 800cedc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800cede:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800cee2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d107      	bne.n	800cefa <refr_area+0x1c2>
 800ceea:	4b24      	ldr	r3, [pc, #144]	; (800cf7c <refr_area+0x244>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68da      	ldr	r2, [r3, #12]
 800cef2:	7e13      	ldrb	r3, [r2, #24]
 800cef4:	f043 0302 	orr.w	r3, r3, #2
 800cef8:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800cefa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cefc:	f000 f840 	bl	800cf80 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf06:	4413      	add	r3, r2
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cf0c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	4413      	add	r3, r2
 800cf14:	1e5a      	subs	r2, r3, #1
 800cf16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	ddb3      	ble.n	800ce86 <refr_area+0x14e>
    }

    /*If the last y coordinates are not handled yet ...*/
    if(y2 != row_last) {
 800cf1e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800cf22:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d025      	beq.n	800cf76 <refr_area+0x23e>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf30:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cf38:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800cf3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf3c:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = y2;
 800cf3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf40:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800cf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf44:	f107 0214 	add.w	r2, r7, #20
 800cf48:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800cf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4c:	f107 0214 	add.w	r2, r7, #20
 800cf50:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800cf52:	4b0a      	ldr	r3, [pc, #40]	; (800cf7c <refr_area+0x244>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	689a      	ldr	r2, [r3, #8]
 800cf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5e:	601a      	str	r2, [r3, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800cf60:	4b06      	ldr	r3, [pc, #24]	; (800cf7c <refr_area+0x244>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68da      	ldr	r2, [r3, #12]
 800cf68:	7e13      	ldrb	r3, [r2, #24]
 800cf6a:	f043 0302 	orr.w	r3, r3, #2
 800cf6e:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800cf70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf72:	f000 f805 	bl	800cf80 <refr_area_part>
    }
}
 800cf76:	3734      	adds	r7, #52	; 0x34
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd90      	pop	{r4, r7, pc}
 800cf7c:	200006b0 	.word	0x200006b0

0800cf80 <refr_area_part>:

static void refr_area_part(lv_draw_ctx_t * draw_ctx)
{
 800cf80:	b590      	push	{r4, r7, lr}
 800cf82:	b09d      	sub	sp, #116	; 0x74
 800cf84:	af02      	add	r7, sp, #8
 800cf86:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800cf88:	4b89      	ldr	r3, [pc, #548]	; (800d1b0 <refr_area_part+0x230>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f011 f8a9 	bl	801e0e4 <lv_disp_get_draw_buf>
 800cf92:	65f8      	str	r0, [r7, #92]	; 0x5c

    /* Below the `area_p` area will be redrawn into the draw buffer.
     * In single buffered mode wait here until the buffer is freed.
     * In full double buffered mode wait here while the buffers are swapped and a buffer becomes available*/
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800cf94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf96:	68da      	ldr	r2, [r3, #12]
 800cf98:	4b85      	ldr	r3, [pc, #532]	; (800d1b0 <refr_area_part+0x230>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4b82      	ldr	r3, [pc, #520]	; (800d1b0 <refr_area_part+0x230>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cfae:	fb01 f303 	mul.w	r3, r1, r3
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	bf0c      	ite	eq
 800cfb6:	2301      	moveq	r3, #1
 800cfb8:	2300      	movne	r3, #0
 800cfba:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800cfbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <refr_area_part+0x4e>
 800cfc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d01b      	beq.n	800d006 <refr_area_part+0x86>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800cfce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfd0:	681b      	ldr	r3, [r3, #0]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d01b      	beq.n	800d00e <refr_area_part+0x8e>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800cfd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d017      	beq.n	800d00e <refr_area_part+0x8e>
 800cfde:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d013      	beq.n	800d00e <refr_area_part+0x8e>
        while(draw_buf->flushing) {
 800cfe6:	e00e      	b.n	800d006 <refr_area_part+0x86>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800cfe8:	4b71      	ldr	r3, [pc, #452]	; (800d1b0 <refr_area_part+0x230>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d008      	beq.n	800d006 <refr_area_part+0x86>
 800cff4:	4b6e      	ldr	r3, [pc, #440]	; (800d1b0 <refr_area_part+0x230>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffc:	4a6c      	ldr	r2, [pc, #432]	; (800d1b0 <refr_area_part+0x230>)
 800cffe:	6812      	ldr	r2, [r2, #0]
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	4610      	mov	r0, r2
 800d004:	4798      	blx	r3
        while(draw_buf->flushing) {
 800d006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1ec      	bne.n	800cfe8 <refr_area_part+0x68>
            }
        }
#endif
    }

    lv_obj_t * top_act_scr = NULL;
 800d00e:	2300      	movs	r3, #0
 800d010:	667b      	str	r3, [r7, #100]	; 0x64
    lv_obj_t * top_prev_scr = NULL;
 800d012:	2300      	movs	r3, #0
 800d014:	663b      	str	r3, [r7, #96]	; 0x60

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	685c      	ldr	r4, [r3, #4]
 800d01a:	4b65      	ldr	r3, [pc, #404]	; (800d1b0 <refr_area_part+0x230>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7f6 fc9d 	bl	800395e <lv_disp_get_scr_act>
 800d024:	4603      	mov	r3, r0
 800d026:	4619      	mov	r1, r3
 800d028:	4620      	mov	r0, r4
 800d02a:	f000 f8fd 	bl	800d228 <lv_refr_get_top_obj>
 800d02e:	6678      	str	r0, [r7, #100]	; 0x64
    if(disp_refr->prev_scr) {
 800d030:	4b5f      	ldr	r3, [pc, #380]	; (800d1b0 <refr_area_part+0x230>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d009      	beq.n	800d04e <refr_area_part+0xce>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	4b5c      	ldr	r3, [pc, #368]	; (800d1b0 <refr_area_part+0x230>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	4619      	mov	r1, r3
 800d046:	4610      	mov	r0, r2
 800d048:	f000 f8ee 	bl	800d228 <lv_refr_get_top_obj>
 800d04c:	6638      	str	r0, [r7, #96]	; 0x60
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800d04e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d050:	2b00      	cmp	r3, #0
 800d052:	f040 8087 	bne.w	800d164 <refr_area_part+0x1e4>
 800d056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f040 8083 	bne.w	800d164 <refr_area_part+0x1e4>
        lv_area_t a;
        lv_area_set(&a, 0, 0,
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800d05e:	4b54      	ldr	r3, [pc, #336]	; (800d1b0 <refr_area_part+0x230>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4618      	mov	r0, r3
 800d064:	f010 ffc6 	bl	801dff4 <lv_disp_get_hor_res>
 800d068:	4603      	mov	r3, r0
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	3b01      	subs	r3, #1
 800d06e:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800d070:	b21c      	sxth	r4, r3
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800d072:	4b4f      	ldr	r3, [pc, #316]	; (800d1b0 <refr_area_part+0x230>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4618      	mov	r0, r3
 800d078:	f010 ffe2 	bl	801e040 <lv_disp_get_ver_res>
 800d07c:	4603      	mov	r3, r0
 800d07e:	b29b      	uxth	r3, r3
 800d080:	3b01      	subs	r3, #1
 800d082:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800d084:	b21b      	sxth	r3, r3
 800d086:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	4623      	mov	r3, r4
 800d08e:	2200      	movs	r2, #0
 800d090:	2100      	movs	r1, #0
 800d092:	f011 fb9f 	bl	801e7d4 <lv_area_set>
        if(draw_ctx->draw_bg) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d020      	beq.n	800d0e0 <refr_area_part+0x160>
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800d09e:	f107 0308 	add.w	r3, r7, #8
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f005 f91e 	bl	80122e4 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800d0a8:	4b41      	ldr	r3, [pc, #260]	; (800d1b0 <refr_area_part+0x230>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ae:	617b      	str	r3, [r7, #20]
            dsc.bg_img_opa = disp_refr->bg_opa;
 800d0b0:	4b3f      	ldr	r3, [pc, #252]	; (800d1b0 <refr_area_part+0x230>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d0b8:	777b      	strb	r3, [r7, #29]
            dsc.bg_color = disp_refr->bg_color;
 800d0ba:	4b3d      	ldr	r3, [pc, #244]	; (800d1b0 <refr_area_part+0x230>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800d0c2:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800d0c4:	4b3a      	ldr	r3, [pc, #232]	; (800d1b0 <refr_area_part+0x230>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d0cc:	72fb      	strb	r3, [r7, #11]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d0d6:	f107 0108 	add.w	r1, r7, #8
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	4798      	blx	r3
 800d0de:	e041      	b.n	800d164 <refr_area_part+0x1e4>
        }
        else if(disp_refr->bg_img) {
 800d0e0:	4b33      	ldr	r3, [pc, #204]	; (800d1b0 <refr_area_part+0x230>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d025      	beq.n	800d136 <refr_area_part+0x1b6>
            lv_img_header_t header;
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800d0ea:	4b31      	ldr	r3, [pc, #196]	; (800d1b0 <refr_area_part+0x230>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f005 fb00 	bl	80126fc <lv_img_decoder_get_info>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if(res == LV_RES_OK) {
 800d102:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800d106:	2b01      	cmp	r3, #1
 800d108:	d12c      	bne.n	800d164 <refr_area_part+0x1e4>
                lv_draw_img_dsc_t dsc;
                lv_draw_img_dsc_init(&dsc);
 800d10a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d10e:	4618      	mov	r0, r3
 800d110:	f001 f997 	bl	800e442 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800d114:	4b26      	ldr	r3, [pc, #152]	; (800d1b0 <refr_area_part+0x230>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d11c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800d120:	4b23      	ldr	r3, [pc, #140]	; (800d1b0 <refr_area_part+0x230>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d126:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d12a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f001 f9a4 	bl	800e47c <lv_draw_img>
 800d134:	e016      	b.n	800d164 <refr_area_part+0x1e4>
                LV_LOG_WARN("Can't draw the background image");
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800d136:	f107 0308 	add.w	r3, r7, #8
 800d13a:	4618      	mov	r0, r3
 800d13c:	f005 f8d2 	bl	80122e4 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800d140:	4b1b      	ldr	r3, [pc, #108]	; (800d1b0 <refr_area_part+0x230>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800d148:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800d14a:	4b19      	ldr	r3, [pc, #100]	; (800d1b0 <refr_area_part+0x230>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d152:	72fb      	strb	r3, [r7, #11]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	685a      	ldr	r2, [r3, #4]
 800d158:	f107 0308 	add.w	r3, r7, #8
 800d15c:	4619      	mov	r1, r3
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f005 f904 	bl	801236c <lv_draw_rect>
        }
    }

    if(disp_refr->draw_prev_over_act) {
 800d164:	4b12      	ldr	r3, [pc, #72]	; (800d1b0 <refr_area_part+0x230>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d16c:	f003 0301 	and.w	r3, r3, #1
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d01e      	beq.n	800d1b4 <refr_area_part+0x234>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800d176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d103      	bne.n	800d184 <refr_area_part+0x204>
 800d17c:	4b0c      	ldr	r3, [pc, #48]	; (800d1b0 <refr_area_part+0x230>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800d184:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 f8b4 	bl	800d2f4 <refr_obj_and_children>

        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800d18c:	4b08      	ldr	r3, [pc, #32]	; (800d1b0 <refr_area_part+0x230>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	695b      	ldr	r3, [r3, #20]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d029      	beq.n	800d1ea <refr_area_part+0x26a>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800d196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d103      	bne.n	800d1a4 <refr_area_part+0x224>
 800d19c:	4b04      	ldr	r3, [pc, #16]	; (800d1b0 <refr_area_part+0x230>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	695b      	ldr	r3, [r3, #20]
 800d1a2:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800d1a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f8a4 	bl	800d2f4 <refr_obj_and_children>
 800d1ac:	e01d      	b.n	800d1ea <refr_area_part+0x26a>
 800d1ae:	bf00      	nop
 800d1b0:	200006b0 	.word	0x200006b0
        }
    }
    else {
        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800d1b4:	4b1b      	ldr	r3, [pc, #108]	; (800d224 <refr_area_part+0x2a4>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	695b      	ldr	r3, [r3, #20]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00a      	beq.n	800d1d4 <refr_area_part+0x254>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800d1be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d103      	bne.n	800d1cc <refr_area_part+0x24c>
 800d1c4:	4b17      	ldr	r3, [pc, #92]	; (800d224 <refr_area_part+0x2a4>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	695b      	ldr	r3, [r3, #20]
 800d1ca:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800d1cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f890 	bl	800d2f4 <refr_obj_and_children>
        }

        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800d1d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d103      	bne.n	800d1e2 <refr_area_part+0x262>
 800d1da:	4b12      	ldr	r3, [pc, #72]	; (800d224 <refr_area_part+0x2a4>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800d1e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 f885 	bl	800d2f4 <refr_obj_and_children>
    }

    /*Also refresh top and sys layer unconditionally*/
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800d1ea:	4b0e      	ldr	r3, [pc, #56]	; (800d224 <refr_area_part+0x2a4>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7f6 fbdf 	bl	80039b2 <lv_disp_get_layer_top>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f87b 	bl	800d2f4 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800d1fe:	4b09      	ldr	r3, [pc, #36]	; (800d224 <refr_area_part+0x2a4>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4618      	mov	r0, r3
 800d204:	f7f6 fbea 	bl	80039dc <lv_disp_get_layer_sys>
 800d208:	4603      	mov	r3, r0
 800d20a:	4619      	mov	r1, r3
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f871 	bl	800d2f4 <refr_obj_and_children>

    draw_buf_flush(disp_refr);
 800d212:	4b04      	ldr	r3, [pc, #16]	; (800d224 <refr_area_part+0x2a4>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4618      	mov	r0, r3
 800d218:	f000 ff22 	bl	800e060 <draw_buf_flush>
}
 800d21c:	bf00      	nop
 800d21e:	376c      	adds	r7, #108	; 0x6c
 800d220:	46bd      	mov	sp, r7
 800d222:	bd90      	pop	{r4, r7, pc}
 800d224:	200006b0 	.word	0x200006b0

0800d228 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b088      	sub	sp, #32
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800d232:	2300      	movs	r3, #0
 800d234:	61fb      	str	r3, [r7, #28]

    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	3314      	adds	r3, #20
 800d23a:	2200      	movs	r2, #0
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f011 fd70 	bl	801ed24 <_lv_area_is_in>
 800d244:	4603      	mov	r3, r0
 800d246:	f083 0301 	eor.w	r3, r3, #1
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <lv_refr_get_top_obj+0x2c>
 800d250:	2300      	movs	r3, #0
 800d252:	e04a      	b.n	800d2ea <lv_refr_get_top_obj+0xc2>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800d254:	2101      	movs	r1, #1
 800d256:	6838      	ldr	r0, [r7, #0]
 800d258:	f7f7 fd45 	bl	8004ce6 <lv_obj_has_flag>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d001      	beq.n	800d266 <lv_refr_get_top_obj+0x3e>
 800d262:	2300      	movs	r3, #0
 800d264:	e041      	b.n	800d2ea <lv_refr_get_top_obj+0xc2>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800d266:	6838      	ldr	r0, [r7, #0]
 800d268:	f7f9 fd45 	bl	8006cf6 <_lv_obj_get_layer_type>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <lv_refr_get_top_obj+0x4e>
 800d272:	2300      	movs	r3, #0
 800d274:	e039      	b.n	800d2ea <lv_refr_get_top_obj+0xc2>

    /*If this object is fully cover the draw area then check the children too*/
    lv_cover_check_info_t info;
    info.res = LV_COVER_RES_COVER;
 800d276:	2300      	movs	r3, #0
 800d278:	723b      	strb	r3, [r7, #8]
    info.area = area_p;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	60fb      	str	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800d27e:	f107 0308 	add.w	r3, r7, #8
 800d282:	461a      	mov	r2, r3
 800d284:	2112      	movs	r1, #18
 800d286:	6838      	ldr	r0, [r7, #0]
 800d288:	f7f6 fbe8 	bl	8003a5c <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800d28c:	7a3b      	ldrb	r3, [r7, #8]
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d101      	bne.n	800d296 <lv_refr_get_top_obj+0x6e>
 800d292:	2300      	movs	r3, #0
 800d294:	e029      	b.n	800d2ea <lv_refr_get_top_obj+0xc2>

    int32_t i;
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800d296:	6838      	ldr	r0, [r7, #0]
 800d298:	f7ff f91b 	bl	800c4d2 <lv_obj_get_child_cnt>
 800d29c:	4603      	mov	r3, r0
 800d29e:	617b      	str	r3, [r7, #20]
    for(i = child_cnt - 1; i >= 0; i--) {
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	61bb      	str	r3, [r7, #24]
 800d2a6:	e012      	b.n	800d2ce <lv_refr_get_top_obj+0xa6>
        lv_obj_t * child = obj->spec_attr->children[i];
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	613b      	str	r3, [r7, #16]
        found_p = lv_refr_get_top_obj(area_p, child);
 800d2b8:	6939      	ldr	r1, [r7, #16]
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff ffb4 	bl	800d228 <lv_refr_get_top_obj>
 800d2c0:	61f8      	str	r0, [r7, #28]

        /*If a children is ok then break*/
        if(found_p != NULL) {
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d106      	bne.n	800d2d6 <lv_refr_get_top_obj+0xae>
    for(i = child_cnt - 1; i >= 0; i--) {
 800d2c8:	69bb      	ldr	r3, [r7, #24]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	61bb      	str	r3, [r7, #24]
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	dae9      	bge.n	800d2a8 <lv_refr_get_top_obj+0x80>
 800d2d4:	e000      	b.n	800d2d8 <lv_refr_get_top_obj+0xb0>
            break;
 800d2d6:	bf00      	nop
        }
    }

    /*If no better children use this object*/
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d104      	bne.n	800d2e8 <lv_refr_get_top_obj+0xc0>
 800d2de:	7a3b      	ldrb	r3, [r7, #8]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <lv_refr_get_top_obj+0xc0>
        found_p = obj;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	61fb      	str	r3, [r7, #28]
    }

    return found_p;
 800d2e8:	69fb      	ldr	r3, [r7, #28]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3720      	adds	r7, #32
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
	...

0800d2f4 <refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void refr_obj_and_children(lv_draw_ctx_t * draw_ctx, lv_obj_t * top_obj)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b088      	sub	sp, #32
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
    /*Normally always will be a top_obj (at least the screen)
     *but in special cases (e.g. if the screen has alpha) it won't.
     *In this case use the screen directly*/
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d105      	bne.n	800d310 <refr_obj_and_children+0x1c>
 800d304:	4b2c      	ldr	r3, [pc, #176]	; (800d3b8 <refr_obj_and_children+0xc4>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4618      	mov	r0, r3
 800d30a:	f7f6 fb28 	bl	800395e <lv_disp_get_scr_act>
 800d30e:	6038      	str	r0, [r7, #0]
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d04c      	beq.n	800d3b0 <refr_obj_and_children+0xbc>

    /*Refresh the top object and its children*/
    refr_obj(draw_ctx, top_obj);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f931 	bl	800d580 <refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj*/
    lv_obj_t * parent;
    lv_obj_t * border_p = top_obj;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	61bb      	str	r3, [r7, #24]

    parent = lv_obj_get_parent(top_obj);
 800d322:	6838      	ldr	r0, [r7, #0]
 800d324:	f7ff f8c4 	bl	800c4b0 <lv_obj_get_parent>
 800d328:	61f8      	str	r0, [r7, #28]

    /*Do until not reach the screen*/
    while(parent != NULL) {
 800d32a:	e03d      	b.n	800d3a8 <refr_obj_and_children+0xb4>
        bool go = false;
 800d32c:	2300      	movs	r3, #0
 800d32e:	75fb      	strb	r3, [r7, #23]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800d330:	69f8      	ldr	r0, [r7, #28]
 800d332:	f7ff f8ce 	bl	800c4d2 <lv_obj_get_child_cnt>
 800d336:	60f8      	str	r0, [r7, #12]
        for(i = 0; i < child_cnt; i++) {
 800d338:	2300      	movs	r3, #0
 800d33a:	613b      	str	r3, [r7, #16]
 800d33c:	e01b      	b.n	800d376 <refr_obj_and_children+0x82>
            lv_obj_t * child = parent->spec_attr->children[i];
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4413      	add	r3, r2
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	60bb      	str	r3, [r7, #8]
            if(!go) {
 800d34e:	7dfb      	ldrb	r3, [r7, #23]
 800d350:	f083 0301 	eor.w	r3, r3, #1
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d006      	beq.n	800d368 <refr_obj_and_children+0x74>
                if(child == border_p) go = true;
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d106      	bne.n	800d370 <refr_obj_and_children+0x7c>
 800d362:	2301      	movs	r3, #1
 800d364:	75fb      	strb	r3, [r7, #23]
 800d366:	e003      	b.n	800d370 <refr_obj_and_children+0x7c>
            }
            else {
                /*Refresh the objects*/
                refr_obj(draw_ctx, child);
 800d368:	68b9      	ldr	r1, [r7, #8]
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f908 	bl	800d580 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	3301      	adds	r3, #1
 800d374:	613b      	str	r3, [r7, #16]
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d3df      	bcc.n	800d33e <refr_obj_and_children+0x4a>
            }
        }

        /*Call the post draw draw function of the parents of the to object*/
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	2117      	movs	r1, #23
 800d382:	69f8      	ldr	r0, [r7, #28]
 800d384:	f7f6 fb6a 	bl	8003a5c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	2118      	movs	r1, #24
 800d38c:	69f8      	ldr	r0, [r7, #28]
 800d38e:	f7f6 fb65 	bl	8003a5c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	2119      	movs	r1, #25
 800d396:	69f8      	ldr	r0, [r7, #28]
 800d398:	f7f6 fb60 	bl	8003a5c <lv_event_send>

        /*The new border will be the last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = parent;
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	61bb      	str	r3, [r7, #24]
        /*Go a level deeper*/
        parent = lv_obj_get_parent(parent);
 800d3a0:	69f8      	ldr	r0, [r7, #28]
 800d3a2:	f7ff f885 	bl	800c4b0 <lv_obj_get_parent>
 800d3a6:	61f8      	str	r0, [r7, #28]
    while(parent != NULL) {
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1be      	bne.n	800d32c <refr_obj_and_children+0x38>
 800d3ae:	e000      	b.n	800d3b2 <refr_obj_and_children+0xbe>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800d3b0:	bf00      	nop
    }
}
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	200006b0 	.word	0x200006b0

0800d3bc <layer_get_area>:


static lv_res_t layer_get_area(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj, lv_layer_type_t layer_type,
                               lv_area_t * layer_area_out)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b090      	sub	sp, #64	; 0x40
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	603b      	str	r3, [r7, #0]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	71fb      	strb	r3, [r7, #7]
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800d3cc:	68b8      	ldr	r0, [r7, #8]
 800d3ce:	f7f9 fc7e 	bl	8006cce <_lv_obj_get_ext_draw_size>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800d3d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d3da:	4619      	mov	r1, r3
 800d3dc:	68b8      	ldr	r0, [r7, #8]
 800d3de:	f7fa f931 	bl	8007644 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800d3e2:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800d3e6:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800d3ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f011 fa48 	bl	801e884 <lv_area_increase>

    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800d3f4:	79fb      	ldrb	r3, [r7, #7]
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d147      	bne.n	800d48a <layer_get_area+0xce>
        /*Get the transformed area and clip it to the current clip area.
         *This area needs to be updated on the screen.*/
        lv_area_t clip_coords_for_obj;
        lv_area_t tranf_coords = obj_coords_ext;
 800d3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d402:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d406:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800d40a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d40e:	2300      	movs	r3, #0
 800d410:	2200      	movs	r2, #0
 800d412:	68b8      	ldr	r0, [r7, #8]
 800d414:	f7fa fe0a 	bl	800802c <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6899      	ldr	r1, [r3, #8]
 800d41c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d424:	4618      	mov	r0, r3
 800d426:	f011 fa99 	bl	801e95c <_lv_area_intersect>
 800d42a:	4603      	mov	r3, r0
 800d42c:	f083 0301 	eor.w	r3, r3, #1
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d001      	beq.n	800d43a <layer_get_area+0x7e>
            return LV_RES_INV;
 800d436:	2300      	movs	r3, #0
 800d438:	e046      	b.n	800d4c8 <layer_get_area+0x10c>
        }

        /*Transform back (inverse) the transformed area.
         *It will tell which area of the non-transformed widget needs to be redrawn
         *in order to cover transformed area after transformation.*/
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800d43a:	f107 031c 	add.w	r3, r7, #28
 800d43e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d442:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d446:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800d44a:	f107 011c 	add.w	r1, r7, #28
 800d44e:	2301      	movs	r3, #1
 800d450:	2200      	movs	r2, #0
 800d452:	68b8      	ldr	r0, [r7, #8]
 800d454:	f7fa fdea 	bl	800802c <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800d458:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d45c:	f107 011c 	add.w	r1, r7, #28
 800d460:	f107 031c 	add.w	r3, r7, #28
 800d464:	4618      	mov	r0, r3
 800d466:	f011 fa79 	bl	801e95c <_lv_area_intersect>
 800d46a:	4603      	mov	r3, r0
 800d46c:	f083 0301 	eor.w	r3, r3, #1
 800d470:	b2db      	uxtb	r3, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <layer_get_area+0xbe>
            return LV_RES_INV;
 800d476:	2300      	movs	r3, #0
 800d478:	e026      	b.n	800d4c8 <layer_get_area+0x10c>
        }

        *layer_area_out = inverse_clip_coords_for_obj;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	f107 031c 	add.w	r3, r7, #28
 800d482:	cb03      	ldmia	r3!, {r0, r1}
 800d484:	6010      	str	r0, [r2, #0]
 800d486:	6051      	str	r1, [r2, #4]
 800d488:	e01d      	b.n	800d4c6 <layer_get_area+0x10a>
    }
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d118      	bne.n	800d4c2 <layer_get_area+0x106>
        lv_area_t clip_coords_for_obj;
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6899      	ldr	r1, [r3, #8]
 800d494:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d498:	f107 0314 	add.w	r3, r7, #20
 800d49c:	4618      	mov	r0, r3
 800d49e:	f011 fa5d 	bl	801e95c <_lv_area_intersect>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	f083 0301 	eor.w	r3, r3, #1
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d001      	beq.n	800d4b2 <layer_get_area+0xf6>
            return LV_RES_INV;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e00a      	b.n	800d4c8 <layer_get_area+0x10c>
        }
        *layer_area_out = clip_coords_for_obj;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	f107 0314 	add.w	r3, r7, #20
 800d4ba:	cb03      	ldmia	r3!, {r0, r1}
 800d4bc:	6010      	str	r0, [r2, #0]
 800d4be:	6051      	str	r1, [r2, #4]
 800d4c0:	e001      	b.n	800d4c6 <layer_get_area+0x10a>
    }
    else {
        LV_LOG_WARN("Unhandled intermediate layer type");
        return LV_RES_INV;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e000      	b.n	800d4c8 <layer_get_area+0x10c>
    }

    return LV_RES_OK;
 800d4c6:	2301      	movs	r3, #1
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3740      	adds	r7, #64	; 0x40
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <layer_alpha_test>:

static void layer_alpha_test(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b088      	sub	sp, #32
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	70fb      	strb	r3, [r7, #3]
    bool has_alpha;
    /*If globally the layer has alpha maybe this smaller section has not (e.g. not on a rounded corner)
     *If turns out that this section has no alpha renderer can choose faster algorithms*/
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800d4de:	78fb      	ldrb	r3, [r7, #3]
 800d4e0:	f003 0301 	and.w	r3, r3, #1
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d031      	beq.n	800d54c <layer_alpha_test+0x7c>
        /*Test for alpha by assuming there is no alpha. If it fails, fall back to rendering with alpha*/
        has_alpha = true;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	77fb      	strb	r3, [r7, #31]
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f103 0008 	add.w	r0, r3, #8
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3314      	adds	r3, #20
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	f011 fc13 	bl	801ed24 <_lv_area_is_in>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d010      	beq.n	800d526 <layer_alpha_test+0x56>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800d504:	2300      	movs	r3, #0
 800d506:	753b      	strb	r3, [r7, #20]
            info.area = &layer_ctx->area_act;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	3308      	adds	r3, #8
 800d50c:	61bb      	str	r3, [r7, #24]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800d50e:	f107 0314 	add.w	r3, r7, #20
 800d512:	461a      	mov	r2, r3
 800d514:	2112      	movs	r1, #18
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f7f6 faa0 	bl	8003a5c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800d51c:	7d3b      	ldrb	r3, [r7, #20]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <layer_alpha_test+0x56>
 800d522:	2300      	movs	r3, #0
 800d524:	77fb      	strb	r3, [r7, #31]
        }

        if(has_alpha) {
 800d526:	7ffb      	ldrb	r3, [r7, #31]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d011      	beq.n	800d550 <layer_alpha_test+0x80>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800d532:	b29a      	uxth	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	4413      	add	r3, r2
 800d53e:	b29b      	uxth	r3, r3
 800d540:	3b01      	subs	r3, #1
 800d542:	b29b      	uxth	r3, r3
 800d544:	b21a      	sxth	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	81da      	strh	r2, [r3, #14]
 800d54a:	e001      	b.n	800d550 <layer_alpha_test+0x80>
        }
    }
    else {
        has_alpha = false;
 800d54c:	2300      	movs	r3, #0
 800d54e:	77fb      	strb	r3, [r7, #31]
    }

    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	dd04      	ble.n	800d56a <layer_alpha_test+0x9a>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	81da      	strh	r2, [r3, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800d56a:	7ffb      	ldrb	r3, [r7, #31]
 800d56c:	461a      	mov	r2, r3
 800d56e:	6879      	ldr	r1, [r7, #4]
 800d570:	68b8      	ldr	r0, [r7, #8]
 800d572:	f002 f9ef 	bl	800f954 <lv_draw_layer_adjust>
}
 800d576:	bf00      	nop
 800d578:	3720      	adds	r7, #32
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
	...

0800d580 <refr_obj>:


void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800d580:	b590      	push	{r4, r7, lr}
 800d582:	b08f      	sub	sp, #60	; 0x3c
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800d58a:	2101      	movs	r1, #1
 800d58c:	6838      	ldr	r0, [r7, #0]
 800d58e:	f7f7 fbaa 	bl	8004ce6 <lv_obj_has_flag>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	f040 81b8 	bne.w	800d90a <refr_obj+0x38a>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800d59a:	6838      	ldr	r0, [r7, #0]
 800d59c:	f7f9 fbab 	bl	8006cf6 <_lv_obj_get_layer_type>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800d5a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d104      	bne.n	800d5b8 <refr_obj+0x38>
        lv_obj_redraw(draw_ctx, obj);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff f861 	bl	800c678 <lv_obj_redraw>
 800d5b6:	e1af      	b.n	800d918 <refr_obj+0x398>
    }
    else {
        lv_opa_t opa = lv_obj_get_style_opa(obj, 0);
 800d5b8:	2100      	movs	r1, #0
 800d5ba:	6838      	ldr	r0, [r7, #0]
 800d5bc:	f7ff f831 	bl	800c622 <lv_obj_get_style_opa>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(opa < LV_OPA_MIN) return;
 800d5c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	f240 819f 	bls.w	800d90e <refr_obj+0x38e>

        lv_area_t layer_area_full;
        lv_res_t res = layer_get_area(draw_ctx, obj, layer_type, &layer_area_full);
 800d5d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5d4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7ff feee 	bl	800d3bc <layer_get_area>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        if(res != LV_RES_OK) return;
 800d5e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	f040 8191 	bne.w	800d912 <refr_obj+0x392>

        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	f103 0114 	add.w	r1, r3, #20
 800d5fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d600:	2200      	movs	r2, #0
 800d602:	4618      	mov	r0, r3
 800d604:	f011 fb8e 	bl	801ed24 <_lv_area_is_in>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d014      	beq.n	800d638 <refr_obj+0xb8>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800d60e:	2300      	movs	r3, #0
 800d610:	723b      	strb	r3, [r7, #8]
            info.area = &layer_area_full;
 800d612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d616:	60fb      	str	r3, [r7, #12]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800d618:	f107 0308 	add.w	r3, r7, #8
 800d61c:	461a      	mov	r2, r3
 800d61e:	2112      	movs	r1, #18
 800d620:	6838      	ldr	r0, [r7, #0]
 800d622:	f7f6 fa1b 	bl	8003a5c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800d626:	7a3b      	ldrb	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d105      	bne.n	800d638 <refr_obj+0xb8>
 800d62c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d630:	f023 0301 	bic.w	r3, r3, #1
 800d634:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800d638:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d105      	bne.n	800d64c <refr_obj+0xcc>
 800d640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d644:	f043 0302 	orr.w	r3, r3, #2
 800d648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800d64c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f002 f926 	bl	800f8a8 <lv_draw_layer_create>
 800d65c:	6338      	str	r0, [r7, #48]	; 0x30
        if(layer_ctx == NULL) {
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 8158 	beq.w	800d916 <refr_obj+0x396>
            LV_LOG_WARN("Couldn't create a new layer context");
            return;
        }
        lv_point_t pivot = {
            .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 800d666:	2100      	movs	r1, #0
 800d668:	6838      	ldr	r0, [r7, #0]
 800d66a:	f7fe ffb6 	bl	800c5da <lv_obj_get_style_transform_pivot_x>
 800d66e:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800d670:	84bb      	strh	r3, [r7, #36]	; 0x24
            .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800d672:	2100      	movs	r1, #0
 800d674:	6838      	ldr	r0, [r7, #0]
 800d676:	f7fe ffc2 	bl	800c5fe <lv_obj_get_style_transform_pivot_y>
 800d67a:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800d67c:	84fb      	strh	r3, [r7, #38]	; 0x26
        };

        if(LV_COORD_IS_PCT(pivot.x)) {
 800d67e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d682:	b29b      	uxth	r3, r3
 800d684:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d68c:	d12d      	bne.n	800d6ea <refr_obj+0x16a>
 800d68e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d692:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d696:	b21b      	sxth	r3, r3
 800d698:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d69c:	dc25      	bgt.n	800d6ea <refr_obj+0x16a>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800d69e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d6a2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d6a6:	b21b      	sxth	r3, r3
 800d6a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6ac:	dd07      	ble.n	800d6be <refr_obj+0x13e>
 800d6ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d6b2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d6b6:	b21b      	sxth	r3, r3
 800d6b8:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800d6bc:	e005      	b.n	800d6ca <refr_obj+0x14a>
 800d6be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d6c2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d6c6:	b21b      	sxth	r3, r3
 800d6c8:	461c      	mov	r4, r3
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	3314      	adds	r3, #20
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fe ff31 	bl	800c536 <lv_area_get_width>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	fb04 f303 	mul.w	r3, r4, r3
 800d6da:	4a91      	ldr	r2, [pc, #580]	; (800d920 <refr_obj+0x3a0>)
 800d6dc:	fb82 1203 	smull	r1, r2, r2, r3
 800d6e0:	1152      	asrs	r2, r2, #5
 800d6e2:	17db      	asrs	r3, r3, #31
 800d6e4:	1ad3      	subs	r3, r2, r3
 800d6e6:	b21b      	sxth	r3, r3
 800d6e8:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        if(LV_COORD_IS_PCT(pivot.y)) {
 800d6ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d6f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6f8:	d12d      	bne.n	800d756 <refr_obj+0x1d6>
 800d6fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d6fe:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d702:	b21b      	sxth	r3, r3
 800d704:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d708:	dc25      	bgt.n	800d756 <refr_obj+0x1d6>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800d70a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d70e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d712:	b21b      	sxth	r3, r3
 800d714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d718:	dd07      	ble.n	800d72a <refr_obj+0x1aa>
 800d71a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d71e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d722:	b21b      	sxth	r3, r3
 800d724:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800d728:	e005      	b.n	800d736 <refr_obj+0x1b6>
 800d72a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d72e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d732:	b21b      	sxth	r3, r3
 800d734:	461c      	mov	r4, r3
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	3314      	adds	r3, #20
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe ff12 	bl	800c564 <lv_area_get_height>
 800d740:	4603      	mov	r3, r0
 800d742:	fb04 f303 	mul.w	r3, r4, r3
 800d746:	4a76      	ldr	r2, [pc, #472]	; (800d920 <refr_obj+0x3a0>)
 800d748:	fb82 1203 	smull	r1, r2, r2, r3
 800d74c:	1152      	asrs	r2, r2, #5
 800d74e:	17db      	asrs	r3, r3, #31
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	b21b      	sxth	r3, r3
 800d754:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        lv_draw_img_dsc_t draw_dsc;
        lv_draw_img_dsc_init(&draw_dsc);
 800d756:	f107 0310 	add.w	r3, r7, #16
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fe71 	bl	800e442 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800d760:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800d764:	76bb      	strb	r3, [r7, #26]
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800d766:	2100      	movs	r1, #0
 800d768:	6838      	ldr	r0, [r7, #0]
 800d76a:	f7fe ff24 	bl	800c5b6 <lv_obj_get_style_transform_angle>
 800d76e:	4603      	mov	r3, r0
 800d770:	823b      	strh	r3, [r7, #16]
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800d772:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d776:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800d77a:	dd08      	ble.n	800d78e <refr_obj+0x20e>
 800d77c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d780:	b29b      	uxth	r3, r3
 800d782:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800d786:	b29b      	uxth	r3, r3
 800d788:	b21b      	sxth	r3, r3
 800d78a:	823b      	strh	r3, [r7, #16]
 800d78c:	e00b      	b.n	800d7a6 <refr_obj+0x226>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800d78e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	da07      	bge.n	800d7a6 <refr_obj+0x226>
 800d796:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	b21b      	sxth	r3, r3
 800d7a4:	823b      	strh	r3, [r7, #16]

        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	6838      	ldr	r0, [r7, #0]
 800d7aa:	f7fe fef2 	bl	800c592 <lv_obj_get_style_transform_zoom>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	827b      	strh	r3, [r7, #18]
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	6838      	ldr	r0, [r7, #0]
 800d7b8:	f7fe ff45 	bl	800c646 <lv_obj_get_style_blend_mode>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f003 030f 	and.w	r3, r3, #15
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	7efb      	ldrb	r3, [r7, #27]
 800d7c6:	f362 0303 	bfi	r3, r2, #0, #4
 800d7ca:	76fb      	strb	r3, [r7, #27]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800d7cc:	4b55      	ldr	r3, [pc, #340]	; (800d924 <refr_obj+0x3a4>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	7c1b      	ldrb	r3, [r3, #16]
 800d7d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7de:	f362 0300 	bfi	r3, r2, #0, #1
 800d7e2:	f887 3020 	strb.w	r3, [r7, #32]

        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800d7e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d7ea:	f003 0302 	and.w	r3, r3, #2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d07d      	beq.n	800d8ee <refr_obj+0x36e>
            layer_ctx->area_act = layer_ctx->area_full;
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7fc:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800d806:	b29a      	uxth	r2, r3
 800d808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	4413      	add	r3, r2
 800d812:	b29b      	uxth	r3, r3
 800d814:	3b01      	subs	r3, #1
 800d816:	b29b      	uxth	r3, r3
 800d818:	b21a      	sxth	r2, r3
 800d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81c:	81da      	strh	r2, [r3, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800d824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d826:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	dd5f      	ble.n	800d8ee <refr_obj+0x36e>
 800d82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d830:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d836:	81da      	strh	r2, [r3, #14]
        }

        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800d838:	e059      	b.n	800d8ee <refr_obj+0x36e>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800d83a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d83e:	f003 0302 	and.w	r3, r3, #2
 800d842:	2b00      	cmp	r3, #0
 800d844:	d006      	beq.n	800d854 <refr_obj+0x2d4>
                layer_alpha_test(obj, draw_ctx, layer_ctx, flags);
 800d846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d84c:	6879      	ldr	r1, [r7, #4]
 800d84e:	6838      	ldr	r0, [r7, #0]
 800d850:	f7ff fe3e 	bl	800d4d0 <layer_alpha_test>
            }

            lv_obj_redraw(draw_ctx, obj);
 800d854:	6839      	ldr	r1, [r7, #0]
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7fe ff0e 	bl	800c678 <lv_obj_redraw>

            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d862:	b29a      	uxth	r2, r3
 800d864:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d868:	b29b      	uxth	r3, r3
 800d86a:	4413      	add	r3, r2
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d876:	b29b      	uxth	r3, r3
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	b21b      	sxth	r3, r3
 800d87e:	82bb      	strh	r3, [r7, #20]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800d886:	b29a      	uxth	r2, r3
 800d888:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	4413      	add	r3, r2
 800d890:	b29a      	uxth	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	b21b      	sxth	r3, r3
 800d8a2:	82fb      	strh	r3, [r7, #22]

            /*With LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE it should also go the next chunk*/
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800d8a4:	f107 0310 	add.w	r3, r7, #16
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f002 f866 	bl	800f97e <lv_draw_layer_blend>

            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800d8b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8b6:	f003 0302 	and.w	r3, r3, #2
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d01f      	beq.n	800d8fe <refr_obj+0x37e>

            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	b21a      	sxth	r2, r3
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ce:	815a      	strh	r2, [r3, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4413      	add	r3, r2
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	b21a      	sxth	r2, r3
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	81da      	strh	r2, [r3, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d8f4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	dd9e      	ble.n	800d83a <refr_obj+0x2ba>
 800d8fc:	e000      	b.n	800d900 <refr_obj+0x380>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800d8fe:	bf00      	nop
        }

        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800d900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f002 f84f 	bl	800f9a6 <lv_draw_layer_destroy>
 800d908:	e006      	b.n	800d918 <refr_obj+0x398>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800d90a:	bf00      	nop
 800d90c:	e004      	b.n	800d918 <refr_obj+0x398>
        if(opa < LV_OPA_MIN) return;
 800d90e:	bf00      	nop
 800d910:	e002      	b.n	800d918 <refr_obj+0x398>
        if(res != LV_RES_OK) return;
 800d912:	bf00      	nop
 800d914:	e000      	b.n	800d918 <refr_obj+0x398>
            return;
 800d916:	bf00      	nop
    }
}
 800d918:	373c      	adds	r7, #60	; 0x3c
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd90      	pop	{r4, r7, pc}
 800d91e:	bf00      	nop
 800d920:	51eb851f 	.word	0x51eb851f
 800d924:	200006b0 	.word	0x200006b0

0800d928 <get_max_row>:


static uint32_t get_max_row(lv_disp_t * disp, lv_coord_t area_w, lv_coord_t area_h)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	807b      	strh	r3, [r7, #2]
 800d934:	4613      	mov	r3, r2
 800d936:	803b      	strh	r3, [r7, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	68da      	ldr	r2, [r3, #12]
 800d940:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d944:	fbb2 f3f3 	udiv	r3, r2, r3
 800d948:	617b      	str	r3, [r7, #20]

    if(max_row > area_h) max_row = area_h;
 800d94a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d94e:	697a      	ldr	r2, [r7, #20]
 800d950:	429a      	cmp	r2, r3
 800d952:	dd02      	ble.n	800d95a <get_max_row+0x32>
 800d954:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d958:	617b      	str	r3, [r7, #20]

    /*Round down the lines of draw_buf if rounding is added*/
    if(disp_refr->driver->rounder_cb) {
 800d95a:	4b21      	ldr	r3, [pc, #132]	; (800d9e0 <get_max_row+0xb8>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d037      	beq.n	800d9d6 <get_max_row+0xae>
        lv_area_t tmp;
        tmp.x1 = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	813b      	strh	r3, [r7, #8]
        tmp.x2 = 0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	81bb      	strh	r3, [r7, #12]
        tmp.y1 = 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	817b      	strh	r3, [r7, #10]

        lv_coord_t h_tmp = max_row;
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	827b      	strh	r3, [r7, #18]
        do {
            tmp.y2 = h_tmp - 1;
 800d976:	8a7b      	ldrh	r3, [r7, #18]
 800d978:	3b01      	subs	r3, #1
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	b21b      	sxth	r3, r3
 800d97e:	81fb      	strh	r3, [r7, #14]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800d980:	4b17      	ldr	r3, [pc, #92]	; (800d9e0 <get_max_row+0xb8>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	4a15      	ldr	r2, [pc, #84]	; (800d9e0 <get_max_row+0xb8>)
 800d98a:	6812      	ldr	r2, [r2, #0]
 800d98c:	6812      	ldr	r2, [r2, #0]
 800d98e:	f107 0108 	add.w	r1, r7, #8
 800d992:	4610      	mov	r0, r2
 800d994:	4798      	blx	r3

            /*If this height fits into `max_row` then fine*/
            if(lv_area_get_height(&tmp) <= max_row) break;
 800d996:	f107 0308 	add.w	r3, r7, #8
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fe fde2 	bl	800c564 <lv_area_get_height>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	da0a      	bge.n	800d9c0 <get_max_row+0x98>

            /*Decrement the height of the area until it fits into `max_row` after rounding*/
            h_tmp--;
 800d9aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	827b      	strh	r3, [r7, #18]
        } while(h_tmp > 0);
 800d9b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	dcdb      	bgt.n	800d976 <get_max_row+0x4e>
 800d9be:	e000      	b.n	800d9c2 <get_max_row+0x9a>
            if(lv_area_get_height(&tmp) <= max_row) break;
 800d9c0:	bf00      	nop

        if(h_tmp <= 0) {
 800d9c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	dc01      	bgt.n	800d9ce <get_max_row+0xa6>
            LV_LOG_WARN("Can't set draw_buf height using the round function. (Wrong round_cb or to "
                        "small draw_buf)");
            return 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	e004      	b.n	800d9d8 <get_max_row+0xb0>
        }
        else {
            max_row = tmp.y2 + 1;
 800d9ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	617b      	str	r3, [r7, #20]
        }
    }

    return max_row;
 800d9d6:	697b      	ldr	r3, [r7, #20]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3718      	adds	r7, #24
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	200006b0 	.word	0x200006b0

0800d9e4 <draw_buf_rotate_180>:

static void draw_buf_rotate_180(lv_disp_drv_t * drv, lv_area_t * area, lv_color_t * color_p)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b08a      	sub	sp, #40	; 0x28
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
    lv_coord_t area_w = lv_area_get_width(area);
 800d9f0:	68b8      	ldr	r0, [r7, #8]
 800d9f2:	f7fe fda0 	bl	800c536 <lv_area_get_width>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	83fb      	strh	r3, [r7, #30]
    lv_coord_t area_h = lv_area_get_height(area);
 800d9fa:	68b8      	ldr	r0, [r7, #8]
 800d9fc:	f7fe fdb2 	bl	800c564 <lv_area_get_height>
 800da00:	4603      	mov	r3, r0
 800da02:	83bb      	strh	r3, [r7, #28]
    uint32_t total = area_w * area_h;
 800da04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800da08:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800da0c:	fb02 f303 	mul.w	r3, r2, r3
 800da10:	61bb      	str	r3, [r7, #24]
    /*Swap the beginning and end values*/
    lv_color_t tmp;
    uint32_t i = total - 1, j = 0;
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	3b01      	subs	r3, #1
 800da16:	627b      	str	r3, [r7, #36]	; 0x24
 800da18:	2300      	movs	r3, #0
 800da1a:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800da1c:	e017      	b.n	800da4e <draw_buf_rotate_180+0x6a>
        tmp = color_p[i];
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	4413      	add	r3, r2
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	753b      	strb	r3, [r7, #20]
        color_p[i] = color_p[j];
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	6a3b      	ldr	r3, [r7, #32]
 800da2c:	441a      	add	r2, r3
 800da2e:	6879      	ldr	r1, [r7, #4]
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	440b      	add	r3, r1
 800da34:	7812      	ldrb	r2, [r2, #0]
 800da36:	701a      	strb	r2, [r3, #0]
        color_p[j] = tmp;
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	4413      	add	r3, r2
 800da3e:	7d3a      	ldrb	r2, [r7, #20]
 800da40:	701a      	strb	r2, [r3, #0]
        i--;
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	3b01      	subs	r3, #1
 800da46:	627b      	str	r3, [r7, #36]	; 0x24
        j++;
 800da48:	6a3b      	ldr	r3, [r7, #32]
 800da4a:	3301      	adds	r3, #1
 800da4c:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800da4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da50:	6a3b      	ldr	r3, [r7, #32]
 800da52:	429a      	cmp	r2, r3
 800da54:	d8e3      	bhi.n	800da1e <draw_buf_rotate_180+0x3a>
    }
    lv_coord_t tmp_coord;
    tmp_coord = area->y2;
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	88db      	ldrh	r3, [r3, #6]
 800da5a:	82fb      	strh	r3, [r7, #22]
    area->y2 = drv->ver_res - area->y1 - 1;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da62:	b29a      	uxth	r2, r3
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	b29b      	uxth	r3, r3
 800da70:	3b01      	subs	r3, #1
 800da72:	b29b      	uxth	r3, r3
 800da74:	b21a      	sxth	r2, r3
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	80da      	strh	r2, [r3, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da80:	b29a      	uxth	r2, r3
 800da82:	8afb      	ldrh	r3, [r7, #22]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	b29b      	uxth	r3, r3
 800da88:	3b01      	subs	r3, #1
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	b21a      	sxth	r2, r3
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	805a      	strh	r2, [r3, #2]
    tmp_coord = area->x2;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	889b      	ldrh	r3, [r3, #4]
 800da96:	82fb      	strh	r3, [r7, #22]
    area->x2 = drv->hor_res - area->x1 - 1;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	b29b      	uxth	r3, r3
 800daac:	3b01      	subs	r3, #1
 800daae:	b29b      	uxth	r3, r3
 800dab0:	b21a      	sxth	r2, r3
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	809a      	strh	r2, [r3, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	8afb      	ldrh	r3, [r7, #22]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	3b01      	subs	r3, #1
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	b21a      	sxth	r2, r3
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	801a      	strh	r2, [r3, #0]
}
 800dace:	bf00      	nop
 800dad0:	3728      	adds	r7, #40	; 0x28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <draw_buf_rotate_90>:

static LV_ATTRIBUTE_FAST_MEM void draw_buf_rotate_90(bool invert_i, lv_coord_t area_w, lv_coord_t area_h,
                                                     lv_color_t * orig_color_p, lv_color_t * rot_buf)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b08b      	sub	sp, #44	; 0x2c
 800dada:	af00      	add	r7, sp, #0
 800dadc:	607b      	str	r3, [r7, #4]
 800dade:	4603      	mov	r3, r0
 800dae0:	73fb      	strb	r3, [r7, #15]
 800dae2:	460b      	mov	r3, r1
 800dae4:	81bb      	strh	r3, [r7, #12]
 800dae6:	4613      	mov	r3, r2
 800dae8:	817b      	strh	r3, [r7, #10]

    uint32_t invert = (area_w * area_h) - 1;
 800daea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800daee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800daf2:	fb02 f303 	mul.w	r3, r2, r3
 800daf6:	3b01      	subs	r3, #1
 800daf8:	61bb      	str	r3, [r7, #24]
    uint32_t initial_i = ((area_w - 1) * area_h);
 800dafa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dafe:	3b01      	subs	r3, #1
 800db00:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800db04:	fb02 f303 	mul.w	r3, r2, r3
 800db08:	617b      	str	r3, [r7, #20]
    for(lv_coord_t y = 0; y < area_h; y++) {
 800db0a:	2300      	movs	r3, #0
 800db0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800db0e:	e036      	b.n	800db7e <draw_buf_rotate_90+0xa8>
        uint32_t i = initial_i + y;
 800db10:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	4413      	add	r3, r2
 800db18:	623b      	str	r3, [r7, #32]
        if(invert_i)
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <draw_buf_rotate_90+0x52>
            i = invert - i;
 800db20:	69ba      	ldr	r2, [r7, #24]
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	1ad3      	subs	r3, r2, r3
 800db26:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800db28:	2300      	movs	r3, #0
 800db2a:	83fb      	strh	r3, [r7, #30]
 800db2c:	e01b      	b.n	800db66 <draw_buf_rotate_90+0x90>
            rot_buf[i] = *(orig_color_p++);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	607a      	str	r2, [r7, #4]
 800db34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db36:	6a3a      	ldr	r2, [r7, #32]
 800db38:	440a      	add	r2, r1
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	7013      	strb	r3, [r2, #0]
            if(invert_i)
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d005      	beq.n	800db50 <draw_buf_rotate_90+0x7a>
                i += area_h;
 800db44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db48:	6a3a      	ldr	r2, [r7, #32]
 800db4a:	4413      	add	r3, r2
 800db4c:	623b      	str	r3, [r7, #32]
 800db4e:	e004      	b.n	800db5a <draw_buf_rotate_90+0x84>
            else
                i -= area_h;
 800db50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db54:	6a3a      	ldr	r2, [r7, #32]
 800db56:	1ad3      	subs	r3, r2, r3
 800db58:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800db5a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	3301      	adds	r3, #1
 800db62:	b29b      	uxth	r3, r3
 800db64:	83fb      	strh	r3, [r7, #30]
 800db66:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800db6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800db6e:	429a      	cmp	r2, r3
 800db70:	dbdd      	blt.n	800db2e <draw_buf_rotate_90+0x58>
    for(lv_coord_t y = 0; y < area_h; y++) {
 800db72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800db76:	b29b      	uxth	r3, r3
 800db78:	3301      	adds	r3, #1
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800db7e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800db82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800db86:	429a      	cmp	r2, r3
 800db88:	dbc2      	blt.n	800db10 <draw_buf_rotate_90+0x3a>
        }
    }
}
 800db8a:	bf00      	nop
 800db8c:	bf00      	nop
 800db8e:	372c      	adds	r7, #44	; 0x2c
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <draw_buf_rotate4>:

/**
 * Helper function for draw_buf_rotate_90_sqr. Given a list of four numbers, rotate the entire list to the left.
 */
static inline void draw_buf_rotate4(lv_color_t * a, lv_color_t * b, lv_color_t * c, lv_color_t * d)
{
 800db98:	b480      	push	{r7}
 800db9a:	b087      	sub	sp, #28
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
 800dba4:	603b      	str	r3, [r7, #0]
    lv_color_t tmp;
    tmp = *a;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	753b      	strb	r3, [r7, #20]
    *a = *b;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	7812      	ldrb	r2, [r2, #0]
 800dbb2:	701a      	strb	r2, [r3, #0]
    *b = *c;
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	7812      	ldrb	r2, [r2, #0]
 800dbba:	701a      	strb	r2, [r3, #0]
    *c = *d;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	7812      	ldrb	r2, [r2, #0]
 800dbc2:	701a      	strb	r2, [r3, #0]
    *d = tmp;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	7d3a      	ldrb	r2, [r7, #20]
 800dbc8:	701a      	strb	r2, [r3, #0]
}
 800dbca:	bf00      	nop
 800dbcc:	371c      	adds	r7, #28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <draw_buf_rotate_90_sqr>:
/**
 * Rotate a square image 90/270 degrees in place.
 * @note inspired by https://stackoverflow.com/a/43694906
 */
static void draw_buf_rotate_90_sqr(bool is_270, lv_coord_t w, lv_color_t * color_p)
{
 800dbd6:	b590      	push	{r4, r7, lr}
 800dbd8:	b085      	sub	sp, #20
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	4603      	mov	r3, r0
 800dbde:	603a      	str	r2, [r7, #0]
 800dbe0:	71fb      	strb	r3, [r7, #7]
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	80bb      	strh	r3, [r7, #4]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	81fb      	strh	r3, [r7, #14]
 800dbea:	e092      	b.n	800dd12 <draw_buf_rotate_90_sqr+0x13c>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800dbec:	2300      	movs	r3, #0
 800dbee:	81bb      	strh	r3, [r7, #12]
 800dbf0:	e07d      	b.n	800dcee <draw_buf_rotate_90_sqr+0x118>
            lv_coord_t inv_i = (w - 1) - i;
 800dbf2:	88ba      	ldrh	r2, [r7, #4]
 800dbf4:	89fb      	ldrh	r3, [r7, #14]
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	817b      	strh	r3, [r7, #10]
            lv_coord_t inv_j = (w - 1) - j;
 800dc00:	88ba      	ldrh	r2, [r7, #4]
 800dc02:	89bb      	ldrh	r3, [r7, #12]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	813b      	strh	r3, [r7, #8]
            if(is_270) {
 800dc0e:	79fb      	ldrb	r3, [r7, #7]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d033      	beq.n	800dc7c <draw_buf_rotate_90_sqr+0xa6>
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800dc14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dc1c:	fb03 f202 	mul.w	r2, r3, r2
 800dc20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dc24:	4413      	add	r3, r2
 800dc26:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	1898      	adds	r0, r3, r2
                    &color_p[inv_j * w + i],
 800dc2c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dc30:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dc34:	fb03 f202 	mul.w	r2, r3, r2
 800dc38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800dc44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dc4c:	fb03 f202 	mul.w	r2, r3, r2
 800dc50:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dc54:	4413      	add	r3, r2
 800dc56:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	189c      	adds	r4, r3, r2
                    &color_p[j * w + inv_i]
 800dc5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dc60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dc64:	fb03 f202 	mul.w	r2, r3, r2
 800dc68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	4413      	add	r3, r2
 800dc74:	4622      	mov	r2, r4
 800dc76:	f7ff ff8f 	bl	800db98 <draw_buf_rotate4>
 800dc7a:	e032      	b.n	800dce2 <draw_buf_rotate_90_sqr+0x10c>
                );
            }
            else {
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800dc7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc80:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dc84:	fb03 f202 	mul.w	r2, r3, r2
 800dc88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	1898      	adds	r0, r3, r2
                    &color_p[j * w + inv_i],
 800dc94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dc98:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dc9c:	fb03 f202 	mul.w	r2, r3, r2
 800dca0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dca4:	4413      	add	r3, r2
 800dca6:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800dcac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dcb0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dcb4:	fb03 f202 	mul.w	r2, r3, r2
 800dcb8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	189c      	adds	r4, r3, r2
                    &color_p[inv_j * w + i]
 800dcc4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dcc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800dccc:	fb03 f202 	mul.w	r2, r3, r2
 800dcd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	4413      	add	r3, r2
 800dcdc:	4622      	mov	r2, r4
 800dcde:	f7ff ff5b 	bl	800db98 <draw_buf_rotate4>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800dce2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	3301      	adds	r3, #1
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	81bb      	strh	r3, [r7, #12]
 800dcee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dcf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	da00      	bge.n	800dcfe <draw_buf_rotate_90_sqr+0x128>
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	105b      	asrs	r3, r3, #1
 800dd00:	429a      	cmp	r2, r3
 800dd02:	f6ff af76 	blt.w	800dbf2 <draw_buf_rotate_90_sqr+0x1c>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800dd06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	81fb      	strh	r3, [r7, #14]
 800dd12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	da00      	bge.n	800dd1c <draw_buf_rotate_90_sqr+0x146>
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	105b      	asrs	r3, r3, #1
 800dd1e:	b21b      	sxth	r3, r3
 800dd20:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	f6ff af61 	blt.w	800dbec <draw_buf_rotate_90_sqr+0x16>
                );
            }

        }
    }
}
 800dd2a:	bf00      	nop
 800dd2c:	bf00      	nop
 800dd2e:	3714      	adds	r7, #20
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd90      	pop	{r4, r7, pc}

0800dd34 <draw_buf_rotate>:

/**
 * Rotate the draw_buf to the display's native orientation.
 */
static void draw_buf_rotate(lv_area_t * area, lv_color_t * color_p)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b08a      	sub	sp, #40	; 0x28
 800dd38:	af02      	add	r7, sp, #8
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
    lv_disp_drv_t * drv = disp_refr->driver;
 800dd3e:	4b8e      	ldr	r3, [pc, #568]	; (800df78 <draw_buf_rotate+0x244>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	617b      	str	r3, [r7, #20]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800dd46:	4b8c      	ldr	r3, [pc, #560]	; (800df78 <draw_buf_rotate+0x244>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	7c1b      	ldrb	r3, [r3, #16]
 800dd4e:	f003 0302 	and.w	r3, r3, #2
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d007      	beq.n	800dd68 <draw_buf_rotate+0x34>
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	7c1b      	ldrb	r3, [r3, #16]
 800dd5c:	f003 0304 	and.w	r3, r3, #4
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f040 8178 	bne.w	800e058 <draw_buf_rotate+0x324>
        LV_LOG_ERROR("cannot rotate a full refreshed display!");
        return;
    }
    if(drv->rotated == LV_DISP_ROT_180) {
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	7c1b      	ldrb	r3, [r3, #16]
 800dd6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	2b20      	cmp	r3, #32
 800dd74:	d10a      	bne.n	800dd8c <draw_buf_rotate+0x58>
        draw_buf_rotate_180(drv, area, color_p);
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	6879      	ldr	r1, [r7, #4]
 800dd7a:	6978      	ldr	r0, [r7, #20]
 800dd7c:	f7ff fe32 	bl	800d9e4 <draw_buf_rotate_180>
        call_flush_cb(drv, area, color_p);
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	6879      	ldr	r1, [r7, #4]
 800dd84:	6978      	ldr	r0, [r7, #20]
 800dd86:	f000 fa2b 	bl	800e1e0 <call_flush_cb>
 800dd8a:	e166      	b.n	800e05a <draw_buf_rotate+0x326>
    }
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	7c1b      	ldrb	r3, [r3, #16]
 800dd90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b10      	cmp	r3, #16
 800dd98:	d007      	beq.n	800ddaa <draw_buf_rotate+0x76>
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	7c1b      	ldrb	r3, [r3, #16]
 800dd9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	2b30      	cmp	r3, #48	; 0x30
 800dda6:	f040 8158 	bne.w	800e05a <draw_buf_rotate+0x326>
        /*Allocate a temporary buffer to store rotated image*/
        lv_color_t * rot_buf = NULL;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	61fb      	str	r3, [r7, #28]
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800ddae:	4b72      	ldr	r3, [pc, #456]	; (800df78 <draw_buf_rotate+0x244>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f010 f996 	bl	801e0e4 <lv_disp_get_draw_buf>
 800ddb8:	6138      	str	r0, [r7, #16]
        lv_coord_t area_w = lv_area_get_width(area);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7fe fbbb 	bl	800c536 <lv_area_get_width>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	81fb      	strh	r3, [r7, #14]
        lv_coord_t area_h = lv_area_get_height(area);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7fe fbcd 	bl	800c564 <lv_area_get_height>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	81bb      	strh	r3, [r7, #12]
        /*Determine the maximum number of rows that can be rotated at a time*/
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800ddce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ddd2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ddd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddda:	b21b      	sxth	r3, r3
 800dddc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dde0:	4293      	cmp	r3, r2
 800dde2:	bfa8      	it	ge
 800dde4:	4613      	movge	r3, r2
 800dde6:	817b      	strh	r3, [r7, #10]
        lv_coord_t init_y_off;
        init_y_off = area->y1;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	885b      	ldrh	r3, [r3, #2]
 800ddec:	813b      	strh	r3, [r7, #8]
        if(drv->rotated == LV_DISP_ROT_90) {
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	7c1b      	ldrb	r3, [r3, #16]
 800ddf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	2b10      	cmp	r3, #16
 800ddfa:	d11b      	bne.n	800de34 <draw_buf_rotate+0x100>
            area->y2 = drv->ver_res - area->x1 - 1;
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de02:	b29a      	uxth	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	b29b      	uxth	r3, r3
 800de10:	3b01      	subs	r3, #1
 800de12:	b29b      	uxth	r3, r3
 800de14:	b21a      	sxth	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	80da      	strh	r2, [r3, #6]
            area->y1 = area->y2 - area_w + 1;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de20:	b29a      	uxth	r2, r3
 800de22:	89fb      	ldrh	r3, [r7, #14]
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	b29b      	uxth	r3, r3
 800de28:	3301      	adds	r3, #1
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	b21a      	sxth	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	805a      	strh	r2, [r3, #2]
 800de32:	e010      	b.n	800de56 <draw_buf_rotate+0x122>
        }
        else {
            area->y1 = area->x1;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f9b3 2000 	ldrsh.w	r2, [r3]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	805a      	strh	r2, [r3, #2]
            area->y2 = area->y1 + area_w - 1;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de44:	b29a      	uxth	r2, r3
 800de46:	89fb      	ldrh	r3, [r7, #14]
 800de48:	4413      	add	r3, r2
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	3b01      	subs	r3, #1
 800de4e:	b29b      	uxth	r3, r3
 800de50:	b21a      	sxth	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	80da      	strh	r2, [r3, #6]
        }

        /*Rotate the screen in chunks, flushing after each one*/
        lv_coord_t row = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800de5a:	e0ef      	b.n	800e03c <draw_buf_rotate+0x308>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800de5c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800de60:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800de64:	1ad2      	subs	r2, r2, r3
 800de66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de6a:	4293      	cmp	r3, r2
 800de6c:	bfa8      	it	ge
 800de6e:	4613      	movge	r3, r2
 800de70:	833b      	strh	r3, [r7, #24]
            draw_buf->flushing = 1;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	2201      	movs	r2, #1
 800de76:	611a      	str	r2, [r3, #16]
            if((row == 0) && (area_h >= area_w)) {
 800de78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d144      	bne.n	800df0a <draw_buf_rotate+0x1d6>
 800de80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800de84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de88:	429a      	cmp	r2, r3
 800de8a:	db3e      	blt.n	800df0a <draw_buf_rotate+0x1d6>
                /*Rotate the initial area as a square*/
                height = area_w;
 800de8c:	89fb      	ldrh	r3, [r7, #14]
 800de8e:	833b      	strh	r3, [r7, #24]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	7c1b      	ldrb	r3, [r3, #16]
 800de94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	2b30      	cmp	r3, #48	; 0x30
 800de9c:	bf0c      	ite	eq
 800de9e:	2301      	moveq	r3, #1
 800dea0:	2300      	movne	r3, #0
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800dea8:	683a      	ldr	r2, [r7, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff fe93 	bl	800dbd6 <draw_buf_rotate_90_sqr>
                if(drv->rotated == LV_DISP_ROT_90) {
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	7c1b      	ldrb	r3, [r3, #16]
 800deb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b10      	cmp	r3, #16
 800debc:	d10c      	bne.n	800ded8 <draw_buf_rotate+0x1a4>
                    area->x1 = init_y_off;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	893a      	ldrh	r2, [r7, #8]
 800dec2:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800dec4:	893a      	ldrh	r2, [r7, #8]
 800dec6:	89fb      	ldrh	r3, [r7, #14]
 800dec8:	4413      	add	r3, r2
 800deca:	b29b      	uxth	r3, r3
 800decc:	3b01      	subs	r3, #1
 800dece:	b29b      	uxth	r3, r3
 800ded0:	b21a      	sxth	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	809a      	strh	r2, [r3, #4]
                if(drv->rotated == LV_DISP_ROT_90) {
 800ded6:	e06c      	b.n	800dfb2 <draw_buf_rotate+0x27e>
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dede:	b29a      	uxth	r2, r3
 800dee0:	893b      	ldrh	r3, [r7, #8]
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	3b01      	subs	r3, #1
 800dee8:	b29b      	uxth	r3, r3
 800deea:	b21a      	sxth	r2, r3
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - area_w + 1;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800def6:	b29a      	uxth	r2, r3
 800def8:	89fb      	ldrh	r3, [r7, #14]
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	b29b      	uxth	r3, r3
 800defe:	3301      	adds	r3, #1
 800df00:	b29b      	uxth	r3, r3
 800df02:	b21a      	sxth	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	801a      	strh	r2, [r3, #0]
                if(drv->rotated == LV_DISP_ROT_90) {
 800df08:	e053      	b.n	800dfb2 <draw_buf_rotate+0x27e>
                }
            }
            else {
                /*Rotate other areas using a maximum buffer size*/
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <draw_buf_rotate+0x1e6>
 800df10:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800df14:	f012 f8cc 	bl	80200b0 <lv_mem_buf_get>
 800df18:	61f8      	str	r0, [r7, #28]
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	7c1b      	ldrb	r3, [r3, #16]
 800df1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800df22:	b2db      	uxtb	r3, r3
 800df24:	2b30      	cmp	r3, #48	; 0x30
 800df26:	bf0c      	ite	eq
 800df28:	2301      	moveq	r3, #1
 800df2a:	2300      	movne	r3, #0
 800df2c:	b2d8      	uxtb	r0, r3
 800df2e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800df32:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	f7ff fdcb 	bl	800dad6 <draw_buf_rotate_90>

                if(drv->rotated == LV_DISP_ROT_90) {
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	7c1b      	ldrb	r3, [r3, #16]
 800df44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b10      	cmp	r3, #16
 800df4c:	d116      	bne.n	800df7c <draw_buf_rotate+0x248>
                    area->x1 = init_y_off + row;
 800df4e:	893a      	ldrh	r2, [r7, #8]
 800df50:	8b7b      	ldrh	r3, [r7, #26]
 800df52:	4413      	add	r3, r2
 800df54:	b29b      	uxth	r3, r3
 800df56:	b21a      	sxth	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + row + height - 1;
 800df5c:	893a      	ldrh	r2, [r7, #8]
 800df5e:	8b7b      	ldrh	r3, [r7, #26]
 800df60:	4413      	add	r3, r2
 800df62:	b29a      	uxth	r2, r3
 800df64:	8b3b      	ldrh	r3, [r7, #24]
 800df66:	4413      	add	r3, r2
 800df68:	b29b      	uxth	r3, r3
 800df6a:	3b01      	subs	r3, #1
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	b21a      	sxth	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	809a      	strh	r2, [r3, #4]
 800df74:	e01d      	b.n	800dfb2 <draw_buf_rotate+0x27e>
 800df76:	bf00      	nop
 800df78:	200006b0 	.word	0x200006b0
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df82:	b29a      	uxth	r2, r3
 800df84:	893b      	ldrh	r3, [r7, #8]
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	b29a      	uxth	r2, r3
 800df8a:	8b7b      	ldrh	r3, [r7, #26]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	b29b      	uxth	r3, r3
 800df90:	3b01      	subs	r3, #1
 800df92:	b29b      	uxth	r3, r3
 800df94:	b21a      	sxth	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - height + 1;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	8b3b      	ldrh	r3, [r7, #24]
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	b21a      	sxth	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	801a      	strh	r2, [r3, #0]
                }
            }

            /* The original part (chunk of the current area) were split into more parts here.
             * Set the original last_part flag on the last part of rotation. */
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800dfb2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800dfb6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800dfba:	441a      	add	r2, r3
 800dfbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	db11      	blt.n	800dfe8 <draw_buf_rotate+0x2b4>
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00a      	beq.n	800dfe8 <draw_buf_rotate+0x2b4>
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	699b      	ldr	r3, [r3, #24]
 800dfd6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d003      	beq.n	800dfe8 <draw_buf_rotate+0x2b4>
                draw_buf->flushing_last = 1;
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	615a      	str	r2, [r3, #20]
 800dfe6:	e002      	b.n	800dfee <draw_buf_rotate+0x2ba>
            }
            else {
                draw_buf->flushing_last = 0;
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	2200      	movs	r2, #0
 800dfec:	615a      	str	r2, [r3, #20]
            }

            /*Flush the completed area to the display*/
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d101      	bne.n	800dff8 <draw_buf_rotate+0x2c4>
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	e000      	b.n	800dffa <draw_buf_rotate+0x2c6>
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	461a      	mov	r2, r3
 800dffc:	6879      	ldr	r1, [r7, #4]
 800dffe:	6978      	ldr	r0, [r7, #20]
 800e000:	f000 f8ee 	bl	800e1e0 <call_flush_cb>
            /*FIXME: Rotation forces legacy behavior where rendering and flushing are done serially*/
            while(draw_buf->flushing) {
 800e004:	e007      	b.n	800e016 <draw_buf_rotate+0x2e2>
                if(drv->wait_cb) drv->wait_cb(drv);
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d003      	beq.n	800e016 <draw_buf_rotate+0x2e2>
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e012:	6978      	ldr	r0, [r7, #20]
 800e014:	4798      	blx	r3
            while(draw_buf->flushing) {
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1f3      	bne.n	800e006 <draw_buf_rotate+0x2d2>
            }
            color_p += area_w * height;
 800e01e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e022:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e026:	fb02 f303 	mul.w	r3, r2, r3
 800e02a:	461a      	mov	r2, r3
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	4413      	add	r3, r2
 800e030:	603b      	str	r3, [r7, #0]
            row += height;
 800e032:	8b7a      	ldrh	r2, [r7, #26]
 800e034:	8b3b      	ldrh	r3, [r7, #24]
 800e036:	4413      	add	r3, r2
 800e038:	b29b      	uxth	r3, r3
 800e03a:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800e03c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800e040:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e044:	429a      	cmp	r2, r3
 800e046:	f6ff af09 	blt.w	800de5c <draw_buf_rotate+0x128>
        }
        /*Free the allocated buffer at the end if necessary*/
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d004      	beq.n	800e05a <draw_buf_rotate+0x326>
 800e050:	69f8      	ldr	r0, [r7, #28]
 800e052:	f012 f8d9 	bl	8020208 <lv_mem_buf_release>
 800e056:	e000      	b.n	800e05a <draw_buf_rotate+0x326>
        return;
 800e058:	bf00      	nop
    }
}
 800e05a:	3720      	adds	r7, #32
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800e068:	4b5c      	ldr	r3, [pc, #368]	; (800e1dc <draw_buf_flush+0x17c>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f010 f839 	bl	801e0e4 <lv_disp_get_draw_buf>
 800e072:	6178      	str	r0, [r7, #20]

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07a:	613b      	str	r3, [r7, #16]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e080:	2b00      	cmp	r3, #0
 800e082:	d003      	beq.n	800e08c <draw_buf_flush+0x2c>
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e088:	6938      	ldr	r0, [r7, #16]
 800e08a:	4798      	blx	r3

    /* In partial double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	68da      	ldr	r2, [r3, #12]
 800e090:	4b52      	ldr	r3, [pc, #328]	; (800e1dc <draw_buf_flush+0x17c>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e09a:	4619      	mov	r1, r3
 800e09c:	4b4f      	ldr	r3, [pc, #316]	; (800e1dc <draw_buf_flush+0x17c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0a6:	fb01 f303 	mul.w	r3, r1, r3
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	bf0c      	ite	eq
 800e0ae:	2301      	moveq	r3, #1
 800e0b0:	2300      	movne	r3, #0
 800e0b2:	73fb      	strb	r3, [r7, #15]
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01d      	beq.n	800e0f8 <draw_buf_flush+0x98>
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d019      	beq.n	800e0f8 <draw_buf_flush+0x98>
 800e0c4:	7bfb      	ldrb	r3, [r7, #15]
 800e0c6:	f083 0301 	eor.w	r3, r3, #1
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d013      	beq.n	800e0f8 <draw_buf_flush+0x98>
        while(draw_buf->flushing) {
 800e0d0:	e00e      	b.n	800e0f0 <draw_buf_flush+0x90>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800e0d2:	4b42      	ldr	r3, [pc, #264]	; (800e1dc <draw_buf_flush+0x17c>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d008      	beq.n	800e0f0 <draw_buf_flush+0x90>
 800e0de:	4b3f      	ldr	r3, [pc, #252]	; (800e1dc <draw_buf_flush+0x17c>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e6:	4a3d      	ldr	r2, [pc, #244]	; (800e1dc <draw_buf_flush+0x17c>)
 800e0e8:	6812      	ldr	r2, [r2, #0]
 800e0ea:	6812      	ldr	r2, [r2, #0]
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	4798      	blx	r3
        while(draw_buf->flushing) {
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1ec      	bne.n	800e0d2 <draw_buf_flush+0x72>
        }
    }

    draw_buf->flushing = 1;
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	611a      	str	r2, [r3, #16]

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800e0fe:	4b37      	ldr	r3, [pc, #220]	; (800e1dc <draw_buf_flush+0x17c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00d      	beq.n	800e12e <draw_buf_flush+0xce>
 800e112:	4b32      	ldr	r3, [pc, #200]	; (800e1dc <draw_buf_flush+0x17c>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d003      	beq.n	800e12e <draw_buf_flush+0xce>
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2201      	movs	r2, #1
 800e12a:	615a      	str	r2, [r3, #20]
 800e12c:	e002      	b.n	800e134 <draw_buf_flush+0xd4>
    else draw_buf->flushing_last = 0;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	2200      	movs	r2, #0
 800e132:	615a      	str	r2, [r3, #20]

    bool flushing_last = draw_buf->flushing_last;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	695b      	ldr	r3, [r3, #20]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	bf14      	ite	ne
 800e13c:	2301      	movne	r3, #1
 800e13e:	2300      	moveq	r3, #0
 800e140:	73bb      	strb	r3, [r7, #14]

    if(disp->driver->flush_cb) {
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	695b      	ldr	r3, [r3, #20]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d021      	beq.n	800e190 <draw_buf_flush+0x130>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	7c1b      	ldrb	r3, [r3, #16]
 800e152:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e156:	b2db      	uxtb	r3, r3
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d010      	beq.n	800e17e <draw_buf_flush+0x11e>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	7c1b      	ldrb	r3, [r3, #16]
 800e162:	f003 0304 	and.w	r3, r3, #4
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d008      	beq.n	800e17e <draw_buf_flush+0x11e>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4619      	mov	r1, r3
 800e176:	4610      	mov	r0, r2
 800e178:	f7ff fddc 	bl	800dd34 <draw_buf_rotate>
 800e17c:	e008      	b.n	800e190 <draw_buf_flush+0x130>
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6818      	ldr	r0, [r3, #0]
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	6859      	ldr	r1, [r3, #4]
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	461a      	mov	r2, r3
 800e18c:	f000 f828 	bl	800e1e0 <call_flush_cb>
        }
    }

    /*If there are 2 buffers swap them. With direct mode swap only on the last area*/
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d01d      	beq.n	800e1d4 <draw_buf_flush+0x174>
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d019      	beq.n	800e1d4 <draw_buf_flush+0x174>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	7c1b      	ldrb	r3, [r3, #16]
 800e1a6:	f003 0301 	and.w	r3, r3, #1
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <draw_buf_flush+0x156>
 800e1b0:	7bbb      	ldrb	r3, [r7, #14]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00e      	beq.n	800e1d4 <draw_buf_flush+0x174>
        if(draw_buf->buf_act == draw_buf->buf1)
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	689a      	ldr	r2, [r3, #8]
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d104      	bne.n	800e1cc <draw_buf_flush+0x16c>
            draw_buf->buf_act = draw_buf->buf2;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	685a      	ldr	r2, [r3, #4]
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	609a      	str	r2, [r3, #8]
        else
            draw_buf->buf_act = draw_buf->buf1;
    }
}
 800e1ca:	e003      	b.n	800e1d4 <draw_buf_flush+0x174>
            draw_buf->buf_act = draw_buf->buf1;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	609a      	str	r2, [r3, #8]
}
 800e1d4:	bf00      	nop
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	200006b0 	.word	0x200006b0

0800e1e0 <call_flush_cb>:

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	607a      	str	r2, [r7, #4]
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	4413      	add	r3, r2
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800e202:	823b      	strh	r3, [r7, #16]
        .y1 = area->y1 + drv->offset_y,
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e212:	b29b      	uxth	r3, r3
 800e214:	4413      	add	r3, r2
 800e216:	b29b      	uxth	r3, r3
 800e218:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800e21a:	827b      	strh	r3, [r7, #18]
        .x2 = area->x2 + drv->offset_x,
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e222:	b29a      	uxth	r2, r3
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	4413      	add	r3, r2
 800e22e:	b29b      	uxth	r3, r3
 800e230:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800e232:	82bb      	strh	r3, [r7, #20]
        .y2 = area->y2 + drv->offset_y
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e242:	b29b      	uxth	r3, r3
 800e244:	4413      	add	r3, r2
 800e246:	b29b      	uxth	r3, r3
 800e248:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800e24a:	82fb      	strh	r3, [r7, #22]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	695b      	ldr	r3, [r3, #20]
 800e250:	f107 0110 	add.w	r1, r7, #16
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	4798      	blx	r3
}
 800e25a:	bf00      	nop
 800e25c:	3718      	adds	r7, #24
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
	...

0800e264 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800e26c:	4a04      	ldr	r2, [pc, #16]	; (800e280 <lv_obj_remove_style_all+0x1c>)
 800e26e:	2100      	movs	r1, #0
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7fc fe69 	bl	800af48 <lv_obj_remove_style>
}
 800e276:	bf00      	nop
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	000fffff 	.word	0x000fffff

0800e284 <lv_theme_get_from_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_theme_t  * lv_theme_get_from_obj(lv_obj_t * obj)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d004      	beq.n	800e29c <lv_theme_get_from_obj+0x18>
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7fe f8d2 	bl	800c43c <lv_obj_get_disp>
 800e298:	4603      	mov	r3, r0
 800e29a:	e002      	b.n	800e2a2 <lv_theme_get_from_obj+0x1e>
 800e29c:	f00f fe9e 	bl	801dfdc <lv_disp_get_default>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	60fb      	str	r3, [r7, #12]
    return lv_disp_get_theme(disp);
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f7f5 fbae 	bl	8003a06 <lv_disp_get_theme>
 800e2aa:	4603      	mov	r3, r0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff ffe1 	bl	800e284 <lv_theme_get_from_obj>
 800e2c2:	60f8      	str	r0, [r7, #12]
    if(th == NULL) return;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d007      	beq.n	800e2da <lv_theme_apply+0x26>

    lv_obj_remove_style_all(obj);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff ffca 	bl	800e264 <lv_obj_remove_style_all>

    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800e2d0:	6879      	ldr	r1, [r7, #4]
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f000 f805 	bl	800e2e2 <apply_theme>
 800e2d8:	e000      	b.n	800e2dc <lv_theme_apply+0x28>
    if(th == NULL) return;
 800e2da:	bf00      	nop
}
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	6039      	str	r1, [r7, #0]
    if(th->parent) apply_theme(th->parent, obj);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d005      	beq.n	800e300 <apply_theme+0x1e>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	6839      	ldr	r1, [r7, #0]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7ff fff1 	bl	800e2e2 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d004      	beq.n	800e312 <apply_theme+0x30>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	4798      	blx	r3
}
 800e312:	bf00      	nop
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <lv_draw_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_init(void)
{
 800e31a:	b480      	push	{r7}
 800e31c:	af00      	add	r7, sp, #0
    /*Nothing to init now*/
}
 800e31e:	bf00      	nop
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e334:	2b00      	cmp	r3, #0
 800e336:	d003      	beq.n	800e340 <lv_draw_wait_for_finish+0x18>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	4798      	blx	r3
}
 800e340:	bf00      	nop
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	4603      	mov	r3, r0
 800e350:	71fb      	strb	r3, [r7, #7]
 800e352:	460b      	mov	r3, r1
 800e354:	71bb      	strb	r3, [r7, #6]
 800e356:	4613      	mov	r3, r2
 800e358:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800e35a:	797b      	ldrb	r3, [r7, #5]
 800e35c:	09db      	lsrs	r3, r3, #7
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	79bb      	ldrb	r3, [r7, #6]
 800e362:	09db      	lsrs	r3, r3, #7
 800e364:	b2db      	uxtb	r3, r3
 800e366:	4313      	orrs	r3, r2
 800e368:	b2da      	uxtb	r2, r3
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	09db      	lsrs	r3, r3, #7
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	4313      	orrs	r3, r2
 800e372:	b2db      	uxtb	r3, r3
}
 800e374:	4618      	mov	r0, r3
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 800e384:	22ff      	movs	r2, #255	; 0xff
 800e386:	21ff      	movs	r1, #255	; 0xff
 800e388:	20ff      	movs	r0, #255	; 0xff
 800e38a:	f7ff ffdd 	bl	800e348 <lv_color_make>
 800e38e:	4603      	mov	r3, r0
}
 800e390:	4618      	mov	r0, r3
 800e392:	bd80      	pop	{r7, pc}

0800e394 <lv_color_black>:
static inline lv_color_t lv_color_black(void)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 800e398:	2200      	movs	r2, #0
 800e39a:	2100      	movs	r1, #0
 800e39c:	2000      	movs	r0, #0
 800e39e:	f7ff ffd3 	bl	800e348 <lv_color_make>
 800e3a2:	4603      	mov	r3, r0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	80da      	strh	r2, [r3, #6]
}
 800e3da:	bf00      	nop
 800e3dc:	370c      	adds	r7, #12
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr

0800e3e6 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	b083      	sub	sp, #12
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	b29b      	uxth	r3, r3
 800e402:	3301      	adds	r3, #1
 800e404:	b29b      	uxth	r3, r3
 800e406:	b21b      	sxth	r3, r3
}
 800e408:	4618      	mov	r0, r3
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e422:	b29a      	uxth	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	1ad3      	subs	r3, r2, r3
 800e42e:	b29b      	uxth	r3, r3
 800e430:	3301      	adds	r3, #1
 800e432:	b29b      	uxth	r3, r3
 800e434:	b21b      	sxth	r3, r3
}
 800e436:	4618      	mov	r0, r3
 800e438:	370c      	adds	r7, #12
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr

0800e442 <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 800e442:	b590      	push	{r4, r7, lr}
 800e444:	b083      	sub	sp, #12
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800e44a:	2114      	movs	r1, #20
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f012 f9d9 	bl	8020804 <lv_memset_00>
    dsc->recolor = lv_color_black();
 800e452:	687c      	ldr	r4, [r7, #4]
 800e454:	f7ff ff9e 	bl	800e394 <lv_color_black>
 800e458:	7220      	strb	r0, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	22ff      	movs	r2, #255	; 0xff
 800e45e:	729a      	strb	r2, [r3, #10]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e466:	805a      	strh	r2, [r3, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	7c13      	ldrb	r3, [r2, #16]
 800e46c:	f36f 0300 	bfc	r3, #0, #1
 800e470:	7413      	strb	r3, [r2, #16]
}
 800e472:	bf00      	nop
 800e474:	370c      	adds	r7, #12
 800e476:	46bd      	mov	sp, r7
 800e478:	bd90      	pop	{r4, r7, pc}
	...

0800e47c <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc, const lv_area_t * coords, const void * src)
{
 800e47c:	b590      	push	{r4, r7, lr}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d105      	bne.n	800e49c <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(draw_ctx, coords, "No\ndata");
 800e490:	4a16      	ldr	r2, [pc, #88]	; (800e4ec <lv_draw_img+0x70>)
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f000 fab3 	bl	800ea00 <show_error>
        return;
 800e49a:	e023      	b.n	800e4e4 <lv_draw_img+0x68>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	7a9b      	ldrb	r3, [r3, #10]
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	d91e      	bls.n	800e4e2 <lv_draw_img+0x66>

    lv_res_t res;
    if(draw_ctx->draw_img) {
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d009      	beq.n	800e4c0 <lv_draw_img+0x44>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	699c      	ldr	r4, [r3, #24]
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	68b9      	ldr	r1, [r7, #8]
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	47a0      	blx	r4
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	75fb      	strb	r3, [r7, #23]
 800e4be:	e007      	b.n	800e4d0 <lv_draw_img+0x54>
    }
    else {
        res = decode_and_draw(draw_ctx, dsc, coords, src);
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	68b9      	ldr	r1, [r7, #8]
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f000 f8e3 	bl	800e692 <decode_and_draw>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	75fb      	strb	r3, [r7, #23]
    }

    if(res == LV_RES_INV) {
 800e4d0:	7dfb      	ldrb	r3, [r7, #23]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <lv_draw_img+0x68>
        LV_LOG_WARN("Image draw error");
        show_error(draw_ctx, coords, "No\ndata");
 800e4d6:	4a05      	ldr	r2, [pc, #20]	; (800e4ec <lv_draw_img+0x70>)
 800e4d8:	6879      	ldr	r1, [r7, #4]
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f000 fa90 	bl	800ea00 <show_error>
        return;
 800e4e0:	e000      	b.n	800e4e4 <lv_draw_img+0x68>
    if(dsc->opa <= LV_OPA_MIN) return;
 800e4e2:	bf00      	nop
    }
}
 800e4e4:	371c      	adds	r7, #28
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd90      	pop	{r4, r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	08022c08 	.word	0x08022c08

0800e4f0 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e4fe:	79fb      	ldrb	r3, [r7, #7]
 800e500:	2b0e      	cmp	r3, #14
 800e502:	d836      	bhi.n	800e572 <lv_img_cf_get_px_size+0x82>
 800e504:	a201      	add	r2, pc, #4	; (adr r2, 800e50c <lv_img_cf_get_px_size+0x1c>)
 800e506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50a:	bf00      	nop
 800e50c:	0800e549 	.word	0x0800e549
 800e510:	0800e549 	.word	0x0800e549
 800e514:	0800e573 	.word	0x0800e573
 800e518:	0800e573 	.word	0x0800e573
 800e51c:	0800e54f 	.word	0x0800e54f
 800e520:	0800e555 	.word	0x0800e555
 800e524:	0800e54f 	.word	0x0800e54f
 800e528:	0800e55b 	.word	0x0800e55b
 800e52c:	0800e561 	.word	0x0800e561
 800e530:	0800e567 	.word	0x0800e567
 800e534:	0800e56d 	.word	0x0800e56d
 800e538:	0800e55b 	.word	0x0800e55b
 800e53c:	0800e561 	.word	0x0800e561
 800e540:	0800e567 	.word	0x0800e567
 800e544:	0800e56d 	.word	0x0800e56d
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 800e548:	2300      	movs	r3, #0
 800e54a:	73fb      	strb	r3, [r7, #15]
            break;
 800e54c:	e014      	b.n	800e578 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 800e54e:	2308      	movs	r3, #8
 800e550:	73fb      	strb	r3, [r7, #15]
            break;
 800e552:	e011      	b.n	800e578 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 800e554:	2310      	movs	r3, #16
 800e556:	73fb      	strb	r3, [r7, #15]
            break;
 800e558:	e00e      	b.n	800e578 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 800e55a:	2301      	movs	r3, #1
 800e55c:	73fb      	strb	r3, [r7, #15]
            break;
 800e55e:	e00b      	b.n	800e578 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 800e560:	2302      	movs	r3, #2
 800e562:	73fb      	strb	r3, [r7, #15]
            break;
 800e564:	e008      	b.n	800e578 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 800e566:	2304      	movs	r3, #4
 800e568:	73fb      	strb	r3, [r7, #15]
            break;
 800e56a:	e005      	b.n	800e578 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 800e56c:	2308      	movs	r3, #8
 800e56e:	73fb      	strb	r3, [r7, #15]
            break;
 800e570:	e002      	b.n	800e578 <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	73fb      	strb	r3, [r7, #15]
            break;
 800e576:	bf00      	nop
    }

    return px_size;
 800e578:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3714      	adds	r7, #20
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr
 800e586:	bf00      	nop

0800e588 <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	4603      	mov	r3, r0
 800e590:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800e592:	2300      	movs	r3, #0
 800e594:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e596:	79fb      	ldrb	r3, [r7, #7]
 800e598:	2b03      	cmp	r3, #3
 800e59a:	d001      	beq.n	800e5a0 <lv_img_cf_is_chroma_keyed+0x18>
 800e59c:	2b06      	cmp	r3, #6
 800e59e:	d102      	bne.n	800e5a6 <lv_img_cf_is_chroma_keyed+0x1e>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
            is_chroma_keyed = true;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	73fb      	strb	r3, [r7, #15]
            break;
 800e5a4:	e002      	b.n	800e5ac <lv_img_cf_is_chroma_keyed+0x24>

        default:
            is_chroma_keyed = false;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	73fb      	strb	r3, [r7, #15]
            break;
 800e5aa:	bf00      	nop
    }

    return is_chroma_keyed;
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3714      	adds	r7, #20
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b085      	sub	sp, #20
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e5c8:	79fb      	ldrb	r3, [r7, #7]
 800e5ca:	2b0e      	cmp	r3, #14
 800e5cc:	bf8c      	ite	hi
 800e5ce:	2201      	movhi	r2, #1
 800e5d0:	2200      	movls	r2, #0
 800e5d2:	b2d2      	uxtb	r2, r2
 800e5d4:	2a00      	cmp	r2, #0
 800e5d6:	d10e      	bne.n	800e5f6 <lv_img_cf_has_alpha+0x3c>
 800e5d8:	2201      	movs	r2, #1
 800e5da:	409a      	lsls	r2, r3
 800e5dc:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	bf14      	ite	ne
 800e5e6:	2301      	movne	r3, #1
 800e5e8:	2300      	moveq	r3, #0
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d002      	beq.n	800e5f6 <lv_img_cf_has_alpha+0x3c>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	73fb      	strb	r3, [r7, #15]
            break;
 800e5f4:	e002      	b.n	800e5fc <lv_img_cf_has_alpha+0x42>
        default:
            has_alpha = false;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	73fb      	strb	r3, [r7, #15]
            break;
 800e5fa:	bf00      	nop
    }

    return has_alpha;
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3714      	adds	r7, #20
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr

0800e60a <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800e60a:	b480      	push	{r7}
 800e60c:	b085      	sub	sp, #20
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800e612:	2303      	movs	r3, #3
 800e614:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d101      	bne.n	800e620 <lv_img_src_get_type+0x16>
 800e61c:	7bfb      	ldrb	r3, [r7, #15]
 800e61e:	e018      	b.n	800e652 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b1f      	cmp	r3, #31
 800e62a:	d907      	bls.n	800e63c <lv_img_src_get_type+0x32>
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	b25b      	sxtb	r3, r3
 800e632:	2b00      	cmp	r3, #0
 800e634:	db02      	blt.n	800e63c <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800e636:	2301      	movs	r3, #1
 800e638:	73fb      	strb	r3, [r7, #15]
 800e63a:	e009      	b.n	800e650 <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	b25b      	sxtb	r3, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	da02      	bge.n	800e64c <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800e646:	2302      	movs	r3, #2
 800e648:	73fb      	strb	r3, [r7, #15]
 800e64a:	e001      	b.n	800e650 <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800e64c:	2300      	movs	r3, #0
 800e64e:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800e650:	7bfb      	ldrb	r3, [r7, #15]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3714      	adds	r7, #20
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr

0800e65e <lv_draw_img_decoded>:

void lv_draw_img_decoded(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc,
                         const lv_area_t * coords, const uint8_t * map_p, lv_img_cf_t color_format)
{
 800e65e:	b590      	push	{r4, r7, lr}
 800e660:	b087      	sub	sp, #28
 800e662:	af02      	add	r7, sp, #8
 800e664:	60f8      	str	r0, [r7, #12]
 800e666:	60b9      	str	r1, [r7, #8]
 800e668:	607a      	str	r2, [r7, #4]
 800e66a:	603b      	str	r3, [r7, #0]
    if(draw_ctx->draw_img_decoded == NULL) return;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d00a      	beq.n	800e68a <lv_draw_img_decoded+0x2c>

    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	695c      	ldr	r4, [r3, #20]
 800e678:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	68b9      	ldr	r1, [r7, #8]
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	47a0      	blx	r4
 800e688:	e000      	b.n	800e68c <lv_draw_img_decoded+0x2e>
    if(draw_ctx->draw_img_decoded == NULL) return;
 800e68a:	bf00      	nop
}
 800e68c:	3714      	adds	r7, #20
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd90      	pop	{r4, r7, pc}

0800e692 <decode_and_draw>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
 800e692:	b5b0      	push	{r4, r5, r7, lr}
 800e694:	b09e      	sub	sp, #120	; 0x78
 800e696:	af02      	add	r7, sp, #8
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	60b9      	str	r1, [r7, #8]
 800e69c:	607a      	str	r2, [r7, #4]
 800e69e:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	7a9b      	ldrb	r3, [r3, #10]
 800e6a4:	2b02      	cmp	r3, #2
 800e6a6:	d801      	bhi.n	800e6ac <decode_and_draw+0x1a>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e1a5      	b.n	800e9f8 <decode_and_draw+0x366>

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	68da      	ldr	r2, [r3, #12]
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	7a19      	ldrb	r1, [r3, #8]
 800e6b4:	6838      	ldr	r0, [r7, #0]
 800e6b6:	f003 ff6b 	bl	8012590 <_lv_img_cache_open>
 800e6ba:	6638      	str	r0, [r7, #96]	; 0x60

    if(cdsc == NULL) return LV_RES_INV;
 800e6bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d101      	bne.n	800e6c6 <decode_and_draw+0x34>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	e198      	b.n	800e9f8 <decode_and_draw+0x366>

    lv_img_cf_t cf;
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800e6c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6c8:	7d1b      	ldrb	r3, [r3, #20]
 800e6ca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7ff ff59 	bl	800e588 <lv_img_cf_is_chroma_keyed>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d003      	beq.n	800e6e4 <decode_and_draw+0x52>
 800e6dc:	2306      	movs	r3, #6
 800e6de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e6e2:	e027      	b.n	800e734 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 800e6e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
 800e6e8:	f003 031f 	and.w	r3, r3, #31
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	2b0e      	cmp	r3, #14
 800e6f0:	d103      	bne.n	800e6fa <decode_and_draw+0x68>
 800e6f2:	230e      	movs	r3, #14
 800e6f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e6f8:	e01c      	b.n	800e734 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 800e6fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6fc:	7d1b      	ldrb	r3, [r3, #20]
 800e6fe:	f003 031f 	and.w	r3, r3, #31
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b14      	cmp	r3, #20
 800e706:	d103      	bne.n	800e710 <decode_and_draw+0x7e>
 800e708:	2314      	movs	r3, #20
 800e70a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e70e:	e011      	b.n	800e734 <decode_and_draw+0xa2>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800e710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e712:	7d1b      	ldrb	r3, [r3, #20]
 800e714:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7ff ff4d 	bl	800e5ba <lv_img_cf_has_alpha>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <decode_and_draw+0x9c>
 800e726:	2305      	movs	r3, #5
 800e728:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e72c:	e002      	b.n	800e734 <decode_and_draw+0xa2>
    else cf = LV_IMG_CF_TRUE_COLOR;
 800e72e:	2304      	movs	r3, #4
 800e730:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if(cf == LV_IMG_CF_ALPHA_8BIT) {
 800e734:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e738:	2b0e      	cmp	r3, #14
 800e73a:	d10f      	bne.n	800e75c <decode_and_draw+0xca>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d104      	bne.n	800e750 <decode_and_draw+0xbe>
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	885b      	ldrh	r3, [r3, #2]
 800e74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e74e:	d005      	beq.n	800e75c <decode_and_draw+0xca>
            /* resume normal method */
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800e750:	2305      	movs	r3, #5
 800e752:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            cdsc->dec_dsc.img_data = NULL;
 800e756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e758:	2200      	movs	r2, #0
 800e75a:	619a      	str	r2, [r3, #24]
        }
    }

    if(cdsc->dec_dsc.error_msg != NULL) {
 800e75c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e75e:	6a1b      	ldr	r3, [r3, #32]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d007      	beq.n	800e774 <decode_and_draw+0xe2>
        LV_LOG_WARN("Image draw error");

        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 800e764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e766:	6a1b      	ldr	r3, [r3, #32]
 800e768:	461a      	mov	r2, r3
 800e76a:	6879      	ldr	r1, [r7, #4]
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f000 f947 	bl	800ea00 <show_error>
 800e772:	e13d      	b.n	800e9f0 <decode_and_draw+0x35e>
    }
    /*The decoder could open the image and gave the entire uncompressed image.
     *Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800e774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e776:	699b      	ldr	r3, [r3, #24]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f000 8087 	beq.w	800e88c <decode_and_draw+0x1fa>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 800e77e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e782:	6879      	ldr	r1, [r7, #4]
 800e784:	4618      	mov	r0, r3
 800e786:	f7ff fe0f 	bl	800e3a8 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <decode_and_draw+0x10c>
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	885b      	ldrh	r3, [r3, #2]
 800e798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e79c:	d048      	beq.n	800e830 <decode_and_draw+0x19e>
            int32_t w = lv_area_get_width(coords);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7ff fe21 	bl	800e3e6 <lv_area_get_width>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7ff fe33 	bl	800e414 <lv_area_get_height>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800e7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7b4:	b219      	sxth	r1, r3
 800e7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7b8:	b21c      	sxth	r4, r3
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	885b      	ldrh	r3, [r3, #2]
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	3204      	adds	r2, #4
 800e7c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e7cc:	9201      	str	r2, [sp, #4]
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	462b      	mov	r3, r5
 800e7d2:	4622      	mov	r2, r4
 800e7d4:	f003 fe13 	bl	80123fe <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 800e7d8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	4413      	add	r3, r2
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	b21b      	sxth	r3, r3
 800e7ec:	863b      	strh	r3, [r7, #48]	; 0x30
            map_area_rot.y1 += coords->y1;
 800e7ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	4413      	add	r3, r2
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	b21b      	sxth	r3, r3
 800e802:	867b      	strh	r3, [r7, #50]	; 0x32
            map_area_rot.x2 += coords->x1;
 800e804:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e808:	b29a      	uxth	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e810:	b29b      	uxth	r3, r3
 800e812:	4413      	add	r3, r2
 800e814:	b29b      	uxth	r3, r3
 800e816:	b21b      	sxth	r3, r3
 800e818:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y2 += coords->y1;
 800e81a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800e81e:	b29a      	uxth	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e826:	b29b      	uxth	r3, r3
 800e828:	4413      	add	r3, r2
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	b21b      	sxth	r3, r3
 800e82e:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        lv_area_t clip_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6899      	ldr	r1, [r3, #8]
 800e834:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e83c:	4618      	mov	r0, r3
 800e83e:	f010 f88d 	bl	801e95c <_lv_area_intersect>
 800e842:	4603      	mov	r3, r0
 800e844:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800e848:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e84c:	f083 0301 	eor.w	r3, r3, #1
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b00      	cmp	r3, #0
 800e854:	d004      	beq.n	800e860 <decode_and_draw+0x1ce>
            draw_cleanup(cdsc);
 800e856:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e858:	f000 f8fa 	bl	800ea50 <draw_cleanup>
            return LV_RES_OK;
 800e85c:	2301      	movs	r3, #1
 800e85e:	e0cb      	b.n	800e9f8 <decode_and_draw+0x366>
        }

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	63bb      	str	r3, [r7, #56]	; 0x38
        draw_ctx->clip_area = &clip_com;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e86c:	609a      	str	r2, [r3, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 800e86e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e870:	699a      	ldr	r2, [r3, #24]
 800e872:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	4613      	mov	r3, r2
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	68b9      	ldr	r1, [r7, #8]
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f7ff feed 	bl	800e65e <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e888:	609a      	str	r2, [r3, #8]
 800e88a:	e0b1      	b.n	800e9f0 <decode_and_draw+0x35e>
    }
    /*The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6899      	ldr	r1, [r3, #8]
 800e890:	f107 0320 	add.w	r3, r7, #32
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	4618      	mov	r0, r3
 800e898:	f010 f860 	bl	801e95c <_lv_area_intersect>
 800e89c:	4603      	mov	r3, r0
 800e89e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800e8a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8a6:	f083 0301 	eor.w	r3, r3, #1
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d004      	beq.n	800e8ba <decode_and_draw+0x228>
            draw_cleanup(cdsc);
 800e8b0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e8b2:	f000 f8cd 	bl	800ea50 <draw_cleanup>
            return LV_RES_OK;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e09e      	b.n	800e9f8 <decode_and_draw+0x366>
        }

        int32_t width = lv_area_get_width(&mask_com);
 800e8ba:	f107 0320 	add.w	r3, r7, #32
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7ff fd91 	bl	800e3e6 <lv_area_get_width>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	65bb      	str	r3, [r7, #88]	; 0x58

        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800e8c8:	f107 0320 	add.w	r3, r7, #32
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff fd8a 	bl	800e3e6 <lv_area_get_width>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f011 fbea 	bl	80200b0 <lv_mem_buf_get>
 800e8dc:	6578      	str	r0, [r7, #84]	; 0x54
                                        LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800e8e4:	f107 0220 	add.w	r2, r7, #32
 800e8e8:	f107 0318 	add.w	r3, r7, #24
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7ff fd5a 	bl	800e3a8 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800e8f4:	f107 0318 	add.w	r3, r7, #24
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f00f ff89 	bl	801e812 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800e900:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e904:	461a      	mov	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 800e910:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e914:	461a      	mov	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	66bb      	str	r3, [r7, #104]	; 0x68
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800e920:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e924:	667b      	str	r3, [r7, #100]	; 0x64
 800e926:	e057      	b.n	800e9d8 <decode_and_draw+0x346>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 800e928:	f107 0218 	add.w	r2, r7, #24
 800e92c:	f107 0310 	add.w	r3, r7, #16
 800e930:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e932:	4618      	mov	r0, r3
 800e934:	f010 f812 	bl	801e95c <_lv_area_intersect>
 800e938:	4603      	mov	r3, r0
 800e93a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if(union_ok == false) continue;
 800e93e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e942:	f083 0301 	eor.w	r3, r3, #1
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d141      	bne.n	800e9d0 <decode_and_draw+0x33e>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800e94c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e94e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e950:	b219      	sxth	r1, r3
 800e952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e954:	b21a      	sxth	r2, r3
 800e956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e958:	b21c      	sxth	r4, r3
 800e95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e95c:	9300      	str	r3, [sp, #0]
 800e95e:	4623      	mov	r3, r4
 800e960:	f003 ffc0 	bl	80128e4 <lv_img_decoder_read_line>
 800e964:	4603      	mov	r3, r0
 800e966:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 800e96a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d00e      	beq.n	800e990 <decode_and_draw+0x2fe>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800e972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e974:	4618      	mov	r0, r3
 800e976:	f003 ffe1 	bl	801293c <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                lv_mem_buf_release(buf);
 800e97a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e97c:	f011 fc44 	bl	8020208 <lv_mem_buf_release>
                draw_cleanup(cdsc);
 800e980:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e982:	f000 f865 	bl	800ea50 <draw_cleanup>
                draw_ctx->clip_area = clip_area_ori;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e98a:	609a      	str	r2, [r3, #8]
                return LV_RES_INV;
 800e98c:	2300      	movs	r3, #0
            return LV_RES_OK;
 800e98e:	e033      	b.n	800e9f8 <decode_and_draw+0x366>
            }

            draw_ctx->clip_area = &mask_line;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f107 0210 	add.w	r2, r7, #16
 800e996:	609a      	str	r2, [r3, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 800e998:	f107 0218 	add.w	r2, r7, #24
 800e99c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e9a0:	9300      	str	r3, [sp, #0]
 800e9a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9a4:	68b9      	ldr	r1, [r7, #8]
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f7ff fe59 	bl	800e65e <lv_draw_img_decoded>
            line.y1++;
 800e9ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	b21b      	sxth	r3, r3
 800e9b8:	837b      	strh	r3, [r7, #26]
            line.y2++;
 800e9ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	b21b      	sxth	r3, r3
 800e9c6:	83fb      	strh	r3, [r7, #30]
            y++;
 800e9c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9ce:	e000      	b.n	800e9d2 <decode_and_draw+0x340>
            if(union_ok == false) continue;
 800e9d0:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800e9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	667b      	str	r3, [r7, #100]	; 0x64
 800e9d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e9dc:	461a      	mov	r2, r3
 800e9de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	dda1      	ble.n	800e928 <decode_and_draw+0x296>
        }
        draw_ctx->clip_area = clip_area_ori;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9e8:	609a      	str	r2, [r3, #8]
        lv_mem_buf_release(buf);
 800e9ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e9ec:	f011 fc0c 	bl	8020208 <lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 800e9f0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e9f2:	f000 f82d 	bl	800ea50 <draw_cleanup>
    return LV_RES_OK;
 800e9f6:	2301      	movs	r3, #1
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3770      	adds	r7, #112	; 0x70
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bdb0      	pop	{r4, r5, r7, pc}

0800ea00 <show_error>:


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b09a      	sub	sp, #104	; 0x68
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800ea0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ea10:	4618      	mov	r0, r3
 800ea12:	f003 fc67 	bl	80122e4 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800ea16:	f7ff fcb3 	bl	800e380 <lv_color_white>
 800ea1a:	f887 0034 	strb.w	r0, [r7, #52]	; 0x34
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800ea1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ea22:	68ba      	ldr	r2, [r7, #8]
 800ea24:	4619      	mov	r1, r3
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	f003 fca0 	bl	801236c <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800ea2c:	f107 0310 	add.w	r3, r7, #16
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 f899 	bl	800eb68 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800ea36:	f107 0110 	add.w	r1, r7, #16
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	68ba      	ldr	r2, [r7, #8]
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	f000 f8bc 	bl	800ebc0 <lv_draw_label>
}
 800ea48:	bf00      	nop
 800ea4a:	3760      	adds	r7, #96	; 0x60
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <draw_cleanup>:

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f003 ff6e 	bl	801293c <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 800ea60:	bf00      	nop
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	3301      	adds	r3, #1
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	b21b      	sxth	r3, r3
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b083      	sub	sp, #12
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	613b      	str	r3, [r7, #16]

    while(len) {
 800eac4:	e00c      	b.n	800eae0 <lv_memcpy_small+0x30>
        *d8 = *s8;
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	781a      	ldrb	r2, [r3, #0]
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	701a      	strb	r2, [r3, #0]
        d8++;
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	3301      	adds	r3, #1
 800ead2:	617b      	str	r3, [r7, #20]
        s8++;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	3301      	adds	r3, #1
 800ead8:	613b      	str	r3, [r7, #16]
        len--;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	3b01      	subs	r3, #1
 800eade:	607b      	str	r3, [r7, #4]
    while(len) {
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d1ef      	bne.n	800eac6 <lv_memcpy_small+0x16>
    }

    return dst;
 800eae6:	68fb      	ldr	r3, [r7, #12]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	371c      	adds	r7, #28
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <lv_color_make>:
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	4603      	mov	r3, r0
 800eafc:	71fb      	strb	r3, [r7, #7]
 800eafe:	460b      	mov	r3, r1
 800eb00:	71bb      	strb	r3, [r7, #6]
 800eb02:	4613      	mov	r3, r2
 800eb04:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800eb06:	797b      	ldrb	r3, [r7, #5]
 800eb08:	09db      	lsrs	r3, r3, #7
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	79bb      	ldrb	r3, [r7, #6]
 800eb0e:	09db      	lsrs	r3, r3, #7
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	4313      	orrs	r3, r2
 800eb14:	b2da      	uxtb	r2, r3
 800eb16:	79fb      	ldrb	r3, [r7, #7]
 800eb18:	09db      	lsrs	r3, r3, #7
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	b2db      	uxtb	r3, r3
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <lv_color_black>:
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 800eb30:	2200      	movs	r2, #0
 800eb32:	2100      	movs	r1, #0
 800eb34:	2000      	movs	r0, #0
 800eb36:	f7ff ffdd 	bl	800eaf4 <lv_color_make>
 800eb3a:	4603      	mov	r3, r0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b085      	sub	sp, #20
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d102      	bne.n	800eb5a <lv_bidi_calculate_align+0x1a>
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2201      	movs	r2, #1
 800eb58:	701a      	strb	r2, [r3, #0]
}
 800eb5a:	bf00      	nop
 800eb5c:	3714      	adds	r7, #20
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
	...

0800eb68 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 800eb68:	b590      	push	{r4, r7, lr}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800eb70:	2120      	movs	r1, #32
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f011 fe46 	bl	8020804 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	22ff      	movs	r2, #255	; 0xff
 800eb7c:	761a      	strb	r2, [r3, #24]
    dsc->color = lv_color_black();
 800eb7e:	687c      	ldr	r4, [r7, #4]
 800eb80:	f7ff ffd4 	bl	800eb2c <lv_color_black>
 800eb84:	7320      	strb	r0, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a0c      	ldr	r2, [pc, #48]	; (800ebbc <lv_draw_label_dsc_init+0x54>)
 800eb8a:	601a      	str	r2, [r3, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb92:	605a      	str	r2, [r3, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb9a:	609a      	str	r2, [r3, #8]
    dsc->sel_color = lv_color_black();
 800eb9c:	687c      	ldr	r4, [r7, #4]
 800eb9e:	f7ff ffc5 	bl	800eb2c <lv_color_black>
 800eba2:	7360      	strb	r0, [r4, #13]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800eba4:	687c      	ldr	r4, [r7, #4]
 800eba6:	2005      	movs	r0, #5
 800eba8:	f010 fc26 	bl	801f3f8 <lv_palette_main>
 800ebac:	73a0      	strb	r0, [r4, #14]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	765a      	strb	r2, [r3, #25]
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd90      	pop	{r4, r7, pc}
 800ebbc:	080262ec 	.word	0x080262ec

0800ebc0 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 800ebc0:	b5b0      	push	{r4, r5, r7, lr}
 800ebc2:	b0c8      	sub	sp, #288	; 0x120
 800ebc4:	af04      	add	r7, sp, #16
 800ebc6:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800ebca:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800ebce:	6020      	str	r0, [r4, #0]
 800ebd0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800ebd4:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800ebd8:	6001      	str	r1, [r0, #0]
 800ebda:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800ebde:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800ebe2:	600a      	str	r2, [r1, #0]
 800ebe4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ebe8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800ebec:	6013      	str	r3, [r2, #0]
    if(dsc->opa <= LV_OPA_MIN) return;
 800ebee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ebf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	7e1b      	ldrb	r3, [r3, #24]
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	f240 85ea 	bls.w	800f7d4 <lv_draw_label+0xc14>
    if(dsc->font == NULL) {
 800ec00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f000 85e3 	beq.w	800f7d8 <lv_draw_label+0xc18>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 800ec12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	69db      	ldr	r3, [r3, #28]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 85dc 	beq.w	800f7dc <lv_draw_label+0xc1c>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 800ec24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800ec32:	461d      	mov	r5, r3
 800ec34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ec3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const lv_font_t * font = dsc->font;
 800ec40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 800ec50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f000 85c0 	beq.w	800f7e0 <lv_draw_label+0xc20>
 800ec60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f000 85b7 	beq.w	800f7e0 <lv_draw_label+0xc20>
        return;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 800ec72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	689a      	ldr	r2, [r3, #8]
 800ec7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ec86:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800ec8a:	6819      	ldr	r1, [r3, #0]
 800ec8c:	f00f fe66 	bl	801e95c <_lv_area_intersect>
 800ec90:	4603      	mov	r3, r0
 800ec92:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    if(!clip_ok) return;
 800ec96:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800ec9a:	f083 0301 	eor.w	r3, r3, #1
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f040 859f 	bne.w	800f7e4 <lv_draw_label+0xc24>

    lv_text_align_t align = dsc->align;
 800eca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	7e9b      	ldrb	r3, [r3, #26]
 800ecb2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_base_dir_t base_dir = dsc->bidi_dir;
 800ecb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	7e5b      	ldrb	r3, [r3, #25]
 800ecc2:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    lv_bidi_calculate_align(&align, &base_dir, txt);
 800ecc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ecce:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 800ecd2:	f107 008b 	add.w	r0, r7, #139	; 0x8b
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	f7ff ff32 	bl	800eb40 <lv_bidi_calculate_align>

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800ecdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ece0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	7edb      	ldrb	r3, [r3, #27]
 800ece8:	f003 0302 	and.w	r3, r3, #2
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10a      	bne.n	800ed06 <lv_draw_label+0x146>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800ecf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ecf4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ecf8:	6818      	ldr	r0, [r3, #0]
 800ecfa:	f7ff feb5 	bl	800ea68 <lv_area_get_width>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ed04:	e02d      	b.n	800ed62 <lv_draw_label+0x1a2>
    }
    else {
        /*If EXPAND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800ed06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ed0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	681c      	ldr	r4, [r3, #0]
 800ed12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ed16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 800ed20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ed24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ed2e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ed32:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ed36:	6812      	ldr	r2, [r2, #0]
 800ed38:	7ed2      	ldrb	r2, [r2, #27]
 800ed3a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800ed3e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800ed42:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ed46:	9202      	str	r2, [sp, #8]
 800ed48:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800ed4c:	9201      	str	r2, [sp, #4]
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	462b      	mov	r3, r5
 800ed52:	4622      	mov	r2, r4
 800ed54:	6809      	ldr	r1, [r1, #0]
 800ed56:	f013 fa51 	bl	80221fc <lv_txt_get_size>
                        dsc->flag);
        w = p.x;
 800ed5a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800ed5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 800ed62:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800ed66:	f7ff fe96 	bl	800ea96 <lv_font_get_line_height>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int32_t line_height = line_height_font + dsc->line_space;
 800ed70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ed74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ed7e:	461a      	mov	r2, r3
 800ed80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed84:	4413      	add	r3, r2
 800ed86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /*Init variables for the first line*/
    int32_t line_width = 0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    lv_point_t pos;
    pos.x = coords->x1;
 800ed90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ed94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed9e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    pos.y = coords->y1;
 800eda2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eda6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800edb0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t x_ofs = 0;
 800edb4:	2300      	movs	r3, #0
 800edb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int32_t y_ofs = 0;
 800edba:	2300      	movs	r3, #0
 800edbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    x_ofs = dsc->ofs_x;
 800edc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800edc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800edce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y_ofs = dsc->ofs_y;
 800edd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800edd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800ede0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    pos.y += y_ofs;
 800ede4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800ede8:	b29a      	uxth	r2, r3
 800edea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800edee:	b29b      	uxth	r3, r3
 800edf0:	4413      	add	r3, r2
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	b21b      	sxth	r3, r3
 800edf6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    uint32_t line_start     = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    int32_t last_line_start = -1;
 800ee00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800ee08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d02c      	beq.n	800ee6a <lv_draw_label+0x2aa>
 800ee10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d128      	bne.n	800ee6a <lv_draw_label+0x2aa>
 800ee18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ee1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	da1f      	bge.n	800ee6a <lv_draw_label+0x2aa>
        /*If the label changed too much recalculate the hint.*/
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800ee2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ee2e:	689b      	ldr	r3, [r3, #8]
 800ee30:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ee34:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800ee38:	6812      	ldr	r2, [r2, #0]
 800ee3a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ee3e:	1a9b      	subs	r3, r3, r2
 800ee40:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ee44:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ee48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	429a      	cmp	r2, r3
 800ee54:	dd04      	ble.n	800ee60 <lv_draw_label+0x2a0>
            hint->line_start = -1;
 800ee56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ee5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee5e:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800ee60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800ee6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d013      	beq.n	800ee9a <lv_draw_label+0x2da>
 800ee72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	db0f      	blt.n	800ee9a <lv_draw_label+0x2da>
        line_start = last_line_start;
 800ee7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        pos.y += hint->y;
 800ee82:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800ee86:	b29a      	uxth	r2, r3
 800ee88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	4413      	add	r3, r2
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	b21b      	sxth	r3, r3
 800ee96:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ee9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ee9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800eea8:	18d0      	adds	r0, r2, r3
 800eeaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eeae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800eeb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eebc:	b219      	sxth	r1, r3
 800eebe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	7edb      	ldrb	r3, [r3, #27]
 800eeca:	9301      	str	r3, [sp, #4]
 800eecc:	2300      	movs	r3, #0
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	460b      	mov	r3, r1
 800eed2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800eed6:	f013 fb2d 	bl	8022534 <_lv_txt_get_next_line>
 800eeda:	4602      	mov	r2, r0
 800eedc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800eee0:	4413      	add	r3, r2
 800eee2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800eee6:	e06c      	b.n	800efc2 <lv_draw_label+0x402>
        /*Go to next line*/
        line_start = line_end;
 800eee8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800eeec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800eef0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eef4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800eefe:	18d0      	adds	r0, r2, r3
 800ef00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800ef0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef12:	b219      	sxth	r1, r3
 800ef14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	7edb      	ldrb	r3, [r3, #27]
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	2300      	movs	r3, #0
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	460b      	mov	r3, r1
 800ef28:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800ef2c:	f013 fb02 	bl	8022534 <_lv_txt_get_next_line>
 800ef30:	4602      	mov	r2, r0
 800ef32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ef36:	4413      	add	r3, r2
 800ef38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        pos.y += line_height;
 800ef3c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	4413      	add	r3, r2
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	b21b      	sxth	r3, r3
 800ef4e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800ef52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d027      	beq.n	800efaa <lv_draw_label+0x3ea>
 800ef5a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800ef5e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800ef62:	db22      	blt.n	800efaa <lv_draw_label+0x3ea>
 800ef64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	da1d      	bge.n	800efaa <lv_draw_label+0x3ea>
            hint->line_start = line_start;
 800ef6e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800ef72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ef76:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800ef78:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef8c:	1ad2      	subs	r2, r2, r3
 800ef8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ef92:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800ef94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800efa2:	461a      	mov	r2, r3
 800efa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800efa8:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800efaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800efae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800efb8:	4413      	add	r3, r2
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f000 8413 	beq.w	800f7e8 <lv_draw_label+0xc28>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800efc2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800efc6:	461a      	mov	r2, r3
 800efc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efcc:	4413      	add	r3, r2
 800efce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800efd2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800efd6:	6812      	ldr	r2, [r2, #0]
 800efd8:	6892      	ldr	r2, [r2, #8]
 800efda:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800efde:	4293      	cmp	r3, r2
 800efe0:	db82      	blt.n	800eee8 <lv_draw_label+0x328>
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
 800efe2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800efe6:	2b02      	cmp	r3, #2
 800efe8:	d13d      	bne.n	800f066 <lv_draw_label+0x4a6>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800efea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800efee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800eff8:	18d0      	adds	r0, r2, r3
 800effa:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800effe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f002:	1ad1      	subs	r1, r2, r3
 800f004:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	7edb      	ldrb	r3, [r3, #27]
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	4613      	mov	r3, r2
 800f022:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800f026:	f013 fb63 	bl	80226f0 <lv_txt_get_width>
 800f02a:	4603      	mov	r3, r0
 800f02c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800f030:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	f7ff fd15 	bl	800ea68 <lv_area_get_width>
 800f03e:	4603      	mov	r3, r0
 800f040:	461a      	mov	r2, r3
 800f042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f046:	1ad3      	subs	r3, r2, r3
 800f048:	2b00      	cmp	r3, #0
 800f04a:	da00      	bge.n	800f04e <lv_draw_label+0x48e>
 800f04c:	3301      	adds	r3, #1
 800f04e:	105b      	asrs	r3, r3, #1
 800f050:	4619      	mov	r1, r3
 800f052:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f056:	b29a      	uxth	r2, r3
 800f058:	b28b      	uxth	r3, r1
 800f05a:	4413      	add	r3, r2
 800f05c:	b29b      	uxth	r3, r3
 800f05e:	b21b      	sxth	r3, r3
 800f060:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800f064:	e03b      	b.n	800f0de <lv_draw_label+0x51e>

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 800f066:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d137      	bne.n	800f0de <lv_draw_label+0x51e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f06e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f072:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f07c:	18d0      	adds	r0, r2, r3
 800f07e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f086:	1ad1      	subs	r1, r2, r3
 800f088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f09a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	7edb      	ldrb	r3, [r3, #27]
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800f0aa:	f013 fb21 	bl	80226f0 <lv_txt_get_width>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        pos.x += lv_area_get_width(coords) - line_width;
 800f0b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f0b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	f7ff fcd3 	bl	800ea68 <lv_area_get_width>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f0ca:	1ad3      	subs	r3, r2, r3
 800f0cc:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800f0d0:	b292      	uxth	r2, r2
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	4413      	add	r3, r2
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	b21b      	sxth	r3, r3
 800f0da:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    }
    uint32_t sel_start = dsc->sel_start;
 800f0de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f0e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    uint32_t sel_end = dsc->sel_end;
 800f0ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	689b      	ldr	r3, [r3, #8]
 800f0fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    if(sel_start > sel_end) {
 800f0fe:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f106:	429a      	cmp	r2, r3
 800f108:	d90b      	bls.n	800f122 <lv_draw_label+0x562>
        uint32_t tmp = sel_start;
 800f10a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f10e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        sel_start = sel_end;
 800f112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f116:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        sel_end = tmp;
 800f11a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f11e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800f122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	7f1b      	ldrb	r3, [r3, #28]
 800f12e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f132:	b2db      	uxtb	r3, r3
 800f134:	f003 0301 	and.w	r3, r3, #1
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10c      	bne.n	800f156 <lv_draw_label+0x596>
 800f13c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	7f1b      	ldrb	r3, [r3, #28]
 800f148:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	f003 0302 	and.w	r3, r3, #2
 800f152:	2b00      	cmp	r3, #0
 800f154:	d035      	beq.n	800f1c2 <lv_draw_label+0x602>
        lv_draw_line_dsc_init(&line_dsc);
 800f156:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f15a:	4618      	mov	r0, r3
 800f15c:	f000 fc79 	bl	800fa52 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800f160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	7b1b      	ldrb	r3, [r3, #12]
 800f16c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800f170:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f174:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d005      	beq.n	800f188 <lv_draw_label+0x5c8>
 800f17c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f180:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f184:	b21b      	sxth	r3, r3
 800f186:	e000      	b.n	800f18a <lv_draw_label+0x5ca>
 800f188:	2301      	movs	r3, #1
 800f18a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        line_dsc.opa = dsc->opa;
 800f18e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	7e1b      	ldrb	r3, [r3, #24]
 800f19a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        line_dsc.blend_mode = dsc->blend_mode;
 800f19e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	7f1b      	ldrb	r3, [r3, #28]
 800f1aa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	f003 0303 	and.w	r3, r3, #3
 800f1b4:	b2da      	uxtb	r2, r3
 800f1b6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800f1ba:	f362 0301 	bfi	r3, r2, #0, #2
 800f1be:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
    uint32_t i;
    uint32_t par_start = 0;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_color_t recolor  = lv_color_black();
 800f1ce:	f7ff fcad 	bl	800eb2c <lv_color_black>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    lv_color_t color = lv_color_black();
 800f1d8:	f7ff fca8 	bl	800eb2c <lv_color_black>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800f1e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f003 f87c 	bl	80122e4 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800f1ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	7b9b      	ldrb	r3, [r3, #14]
 800f1f8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    int32_t pos_x_start = pos.x;
 800f1fc:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800f204:	e2d9      	b.n	800f7ba <lv_draw_label+0xbfa>
        pos.x += x_ofs;
 800f206:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f210:	b29b      	uxth	r3, r3
 800f212:	4413      	add	r3, r2
 800f214:	b29b      	uxth	r3, r3
 800f216:	b21b      	sxth	r3, r3
 800f218:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800f21c:	2300      	movs	r3, #0
 800f21e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
        i         = 0;
 800f222:	2300      	movs	r3, #0
 800f224:	677b      	str	r3, [r7, #116]	; 0x74
#if LV_USE_BIDI
        char * bidi_txt = lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, base_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 800f226:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f22a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f234:	4413      	add	r3, r2
 800f236:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
#endif

        while(i < line_end - line_start) {
 800f23a:	e154      	b.n	800f4e6 <lv_draw_label+0x926>
            uint32_t logical_char_pos = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d013      	beq.n	800f276 <lv_draw_label+0x6b6>
 800f24e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f256:	4293      	cmp	r3, r2
 800f258:	d00d      	beq.n	800f276 <lv_draw_label+0x6b6>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, base_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800f25a:	4ba1      	ldr	r3, [pc, #644]	; (800f4e0 <lv_draw_label+0x920>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f260:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800f264:	4411      	add	r1, r2
 800f266:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f26a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800f26e:	6810      	ldr	r0, [r2, #0]
 800f270:	4798      	blx	r3
 800f272:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
#endif
            }

            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800f276:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f27a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f27e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f282:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800f286:	f013 fad1 	bl	802282c <_lv_txt_encoded_letter_next_2>
            /*Handle the re-color command*/
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800f28a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f28e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	7edb      	ldrb	r3, [r3, #27]
 800f296:	f003 0301 	and.w	r3, r3, #1
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f000 8088 	beq.w	800f3b0 <lv_draw_label+0x7f0>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800f2a0:	2323      	movs	r3, #35	; 0x23
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d11a      	bne.n	800f2e0 <lv_draw_label+0x720>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800f2aa:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d106      	bne.n	800f2c0 <lv_draw_label+0x700>
                        par_start = i;
 800f2b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                        cmd_state = CMD_STATE_PAR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 800f2be:	e112      	b.n	800f4e6 <lv_draw_label+0x926>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800f2c0:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d103      	bne.n	800f2d0 <lv_draw_label+0x710>
                        cmd_state = CMD_STATE_WAIT;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800f2ce:	e007      	b.n	800f2e0 <lv_draw_label+0x720>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800f2d0:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d103      	bne.n	800f2e0 <lv_draw_label+0x720>
                        cmd_state = CMD_STATE_WAIT;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 800f2de:	e102      	b.n	800f4e6 <lv_draw_label+0x926>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800f2e0:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d163      	bne.n	800f3b0 <lv_draw_label+0x7f0>
                    if(letter == ' ') {
 800f2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ea:	2b20      	cmp	r3, #32
 800f2ec:	f040 80fa 	bne.w	800f4e4 <lv_draw_label+0x924>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800f2f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f2f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f2f6:	1ad3      	subs	r3, r2, r3
 800f2f8:	2b07      	cmp	r3, #7
 800f2fa:	d14d      	bne.n	800f398 <lv_draw_label+0x7d8>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800f2fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f300:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f304:	18d1      	adds	r1, r2, r3
 800f306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f30a:	2206      	movs	r2, #6
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7ff fbcf 	bl	800eab0 <lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800f312:	2300      	movs	r3, #0
 800f314:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800f318:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 fa7d 	bl	800f81c <hex_char_to_num>
 800f322:	4603      	mov	r3, r0
 800f324:	011c      	lsls	r4, r3, #4
 800f326:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800f32a:	4618      	mov	r0, r3
 800f32c:	f000 fa76 	bl	800f81c <hex_char_to_num>
 800f330:	4603      	mov	r3, r0
 800f332:	4423      	add	r3, r4
 800f334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800f338:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800f33c:	4618      	mov	r0, r3
 800f33e:	f000 fa6d 	bl	800f81c <hex_char_to_num>
 800f342:	4603      	mov	r3, r0
 800f344:	011c      	lsls	r4, r3, #4
 800f346:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 fa66 	bl	800f81c <hex_char_to_num>
 800f350:	4603      	mov	r3, r0
 800f352:	4423      	add	r3, r4
 800f354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800f358:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f35c:	4618      	mov	r0, r3
 800f35e:	f000 fa5d 	bl	800f81c <hex_char_to_num>
 800f362:	4603      	mov	r3, r0
 800f364:	011c      	lsls	r4, r3, #4
 800f366:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f36a:	4618      	mov	r0, r3
 800f36c:	f000 fa56 	bl	800f81c <hex_char_to_num>
 800f370:	4603      	mov	r3, r0
 800f372:	4423      	add	r3, r4
 800f374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                            recolor = lv_color_make(r, g, b);
 800f378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f382:	b2d1      	uxtb	r1, r2
 800f384:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f388:	b2d2      	uxtb	r2, r2
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7ff fbb2 	bl	800eaf4 <lv_color_make>
 800f390:	4603      	mov	r3, r0
 800f392:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800f396:	e007      	b.n	800f3a8 <lv_draw_label+0x7e8>
                        }
                        else {
                            recolor.full = dsc->color.full;
 800f398:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	7b1b      	ldrb	r3, [r3, #12]
 800f3a4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                    }
                    continue;
 800f3ae:	e099      	b.n	800f4e4 <lv_draw_label+0x924>
                }
            }

            color = dsc->color;
 800f3b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	7b1b      	ldrb	r3, [r3, #12]
 800f3bc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800f3c0:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800f3c4:	2b02      	cmp	r3, #2
 800f3c6:	d103      	bne.n	800f3d0 <lv_draw_label+0x810>
 800f3c8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800f3cc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800f3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800f3da:	f00e f965 	bl	801d6a8 <lv_font_get_glyph_width>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f3e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f3e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d04c      	beq.n	800f48a <lv_draw_label+0x8ca>
 800f3f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f3f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d046      	beq.n	800f48a <lv_draw_label+0x8ca>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800f3fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f404:	429a      	cmp	r2, r3
 800f406:	d340      	bcc.n	800f48a <lv_draw_label+0x8ca>
 800f408:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f40c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f410:	429a      	cmp	r2, r3
 800f412:	d23a      	bcs.n	800f48a <lv_draw_label+0x8ca>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800f414:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f418:	843b      	strh	r3, [r7, #32]
                    sel_coords.y1 = pos.y;
 800f41a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f41e:	847b      	strh	r3, [r7, #34]	; 0x22
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800f420:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f424:	b29a      	uxth	r2, r3
 800f426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	4413      	add	r3, r2
 800f42e:	b29a      	uxth	r2, r3
 800f430:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f43e:	b29b      	uxth	r3, r3
 800f440:	4413      	add	r3, r2
 800f442:	b29b      	uxth	r3, r3
 800f444:	3b01      	subs	r3, #1
 800f446:	b29b      	uxth	r3, r3
 800f448:	b21b      	sxth	r3, r3
 800f44a:	84bb      	strh	r3, [r7, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
 800f44c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f450:	b29a      	uxth	r2, r3
 800f452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f456:	b29b      	uxth	r3, r3
 800f458:	4413      	add	r3, r2
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	3b01      	subs	r3, #1
 800f45e:	b29b      	uxth	r3, r3
 800f460:	b21b      	sxth	r3, r3
 800f462:	84fb      	strh	r3, [r7, #38]	; 0x26
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800f464:	f107 0220 	add.w	r2, r7, #32
 800f468:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800f46c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f474:	6818      	ldr	r0, [r3, #0]
 800f476:	f002 ff79 	bl	801236c <lv_draw_rect>
                    color = dsc->sel_color;
 800f47a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	7b5b      	ldrb	r3, [r3, #13]
 800f486:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                }
            }

            dsc_mod.color = color;
 800f48a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f48e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 800f492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f494:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800f498:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800f49c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800f4a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f4a4:	6800      	ldr	r0, [r0, #0]
 800f4a6:	f000 f9a7 	bl	800f7f8 <lv_draw_letter>

            if(letter_w > 0) {
 800f4aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	dd19      	ble.n	800f4e6 <lv_draw_label+0x926>
                pos.x += letter_w + dsc->letter_space;
 800f4b2:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f4c6:	b299      	uxth	r1, r3
 800f4c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	440b      	add	r3, r1
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	4413      	add	r3, r2
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	b21b      	sxth	r3, r3
 800f4d8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800f4dc:	e003      	b.n	800f4e6 <lv_draw_label+0x926>
 800f4de:	bf00      	nop
 800f4e0:	2000001c 	.word	0x2000001c
                    continue;
 800f4e4:	bf00      	nop
        while(i < line_end - line_start) {
 800f4e6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f4ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f4ee:	1ad2      	subs	r2, r2, r3
 800f4f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	f63f aea2 	bhi.w	800f23c <lv_draw_label+0x67c>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800f4f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	7f1b      	ldrb	r3, [r3, #28]
 800f504:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	f003 0302 	and.w	r3, r3, #2
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d039      	beq.n	800f586 <lv_draw_label+0x9c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800f512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f516:	b21b      	sxth	r3, r3
 800f518:	83bb      	strh	r3, [r7, #28]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800f51a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f51e:	b29a      	uxth	r2, r3
 800f520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f530:	2b00      	cmp	r3, #0
 800f532:	da00      	bge.n	800f536 <lv_draw_label+0x976>
 800f534:	3301      	adds	r3, #1
 800f536:	105b      	asrs	r3, r3, #1
 800f538:	b21b      	sxth	r3, r3
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	4413      	add	r3, r2
 800f53e:	b29a      	uxth	r2, r3
 800f540:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800f544:	2b00      	cmp	r3, #0
 800f546:	da00      	bge.n	800f54a <lv_draw_label+0x98a>
 800f548:	3301      	adds	r3, #1
 800f54a:	105b      	asrs	r3, r3, #1
 800f54c:	b21b      	sxth	r3, r3
 800f54e:	b29b      	uxth	r3, r3
 800f550:	4413      	add	r3, r2
 800f552:	b29b      	uxth	r3, r3
 800f554:	b21b      	sxth	r3, r3
 800f556:	83fb      	strh	r3, [r7, #30]
            p2.x = pos.x;
 800f558:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f55c:	833b      	strh	r3, [r7, #24]
            p2.y = p1.y;
 800f55e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f562:	837b      	strh	r3, [r7, #26]
            line_dsc.color = color;
 800f564:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f568:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800f56c:	f107 0318 	add.w	r3, r7, #24
 800f570:	f107 021c 	add.w	r2, r7, #28
 800f574:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800f578:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800f57c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f580:	6800      	ldr	r0, [r0, #0]
 800f582:	f000 fa7c 	bl	800fa7e <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800f586:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	7f1b      	ldrb	r3, [r3, #28]
 800f592:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f596:	b2db      	uxtb	r3, r3
 800f598:	f003 0301 	and.w	r3, r3, #1
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d044      	beq.n	800f62a <lv_draw_label+0xa6a>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800f5a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f5a4:	b21b      	sxth	r3, r3
 800f5a6:	82bb      	strh	r3, [r7, #20]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800f5a8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f5ac:	b29a      	uxth	r2, r3
 800f5ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	4413      	add	r3, r2
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	1ad3      	subs	r3, r2, r3
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5de:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	b21b      	sxth	r3, r3
 800f5ea:	82fb      	strh	r3, [r7, #22]
            p2.x = pos.x;
 800f5ec:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800f5f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f5f8:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 800f5fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f5fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f602:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f606:	805a      	strh	r2, [r3, #2]
            line_dsc.color = color;
 800f608:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f60c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800f610:	f107 0310 	add.w	r3, r7, #16
 800f614:	f107 0214 	add.w	r2, r7, #20
 800f618:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800f61c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800f620:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f624:	6800      	ldr	r0, [r0, #0]
 800f626:	f000 fa2a 	bl	800fa7e <lv_draw_line>
#if LV_USE_BIDI
        lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 800f62a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f62e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f636:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f640:	18d0      	adds	r0, r2, r3
 800f642:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f654:	b219      	sxth	r1, r3
 800f656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	7edb      	ldrb	r3, [r3, #27]
 800f662:	9301      	str	r3, [sp, #4]
 800f664:	2300      	movs	r3, #0
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	460b      	mov	r3, r1
 800f66a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800f66e:	f012 ff61 	bl	8022534 <_lv_txt_get_next_line>
 800f672:	4602      	mov	r2, r0
 800f674:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f678:	4413      	add	r3, r2
 800f67a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        pos.x = coords->x1;
 800f67e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f682:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f68c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        /*Align to middle*/
        if(align == LV_TEXT_ALIGN_CENTER) {
 800f690:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f694:	2b02      	cmp	r3, #2
 800f696:	d13d      	bne.n	800f714 <lv_draw_label+0xb54>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f698:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f69c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f6a6:	18d0      	adds	r0, r2, r3
 800f6a8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f6ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f6b0:	1ad1      	subs	r1, r2, r3
 800f6b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f6b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f6c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f6c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	7edb      	ldrb	r3, [r3, #27]
 800f6cc:	9300      	str	r3, [sp, #0]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800f6d4:	f013 f80c 	bl	80226f0 <lv_txt_get_width>
 800f6d8:	4603      	mov	r3, r0
            line_width =
 800f6da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800f6de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f6e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f6e6:	6818      	ldr	r0, [r3, #0]
 800f6e8:	f7ff f9be 	bl	800ea68 <lv_area_get_width>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f6f4:	1ad3      	subs	r3, r2, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	da00      	bge.n	800f6fc <lv_draw_label+0xb3c>
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	105b      	asrs	r3, r3, #1
 800f6fe:	4619      	mov	r1, r3
 800f700:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f704:	b29a      	uxth	r2, r3
 800f706:	b28b      	uxth	r3, r1
 800f708:	4413      	add	r3, r2
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	b21b      	sxth	r3, r3
 800f70e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800f712:	e03b      	b.n	800f78c <lv_draw_label+0xbcc>

        }
        /*Align to the right*/
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 800f714:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f718:	2b03      	cmp	r3, #3
 800f71a:	d137      	bne.n	800f78c <lv_draw_label+0xbcc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f71c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f720:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f72a:	18d0      	adds	r0, r2, r3
 800f72c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f730:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f734:	1ad1      	subs	r1, r2, r3
 800f736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	7edb      	ldrb	r3, [r3, #27]
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	4613      	mov	r3, r2
 800f754:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800f758:	f012 ffca 	bl	80226f0 <lv_txt_get_width>
 800f75c:	4603      	mov	r3, r0
            line_width =
 800f75e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            pos.x += lv_area_get_width(coords) - line_width;
 800f762:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f766:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f76a:	6818      	ldr	r0, [r3, #0]
 800f76c:	f7ff f97c 	bl	800ea68 <lv_area_get_width>
 800f770:	4603      	mov	r3, r0
 800f772:	461a      	mov	r2, r3
 800f774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f778:	1ad3      	subs	r3, r2, r3
 800f77a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800f77e:	b292      	uxth	r2, r2
 800f780:	b29b      	uxth	r3, r3
 800f782:	4413      	add	r3, r2
 800f784:	b29b      	uxth	r3, r3
 800f786:	b21b      	sxth	r3, r3
 800f788:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        /*Go the next line position*/
        pos.y += line_height;
 800f78c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f790:	b29a      	uxth	r2, r3
 800f792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f796:	b29b      	uxth	r3, r3
 800f798:	4413      	add	r3, r2
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	b21b      	sxth	r3, r3
 800f79e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if(pos.y > draw_ctx->clip_area->y2) return;
 800f7a2:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800f7a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	689b      	ldr	r3, [r3, #8]
 800f7b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	dc18      	bgt.n	800f7ec <lv_draw_label+0xc2c>
    while(txt[line_start] != '\0') {
 800f7ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f7c8:	4413      	add	r3, r2
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f47f ad1a 	bne.w	800f206 <lv_draw_label+0x646>
 800f7d2:	e00c      	b.n	800f7ee <lv_draw_label+0xc2e>
    if(dsc->opa <= LV_OPA_MIN) return;
 800f7d4:	bf00      	nop
 800f7d6:	e00a      	b.n	800f7ee <lv_draw_label+0xc2e>
        return;
 800f7d8:	bf00      	nop
 800f7da:	e008      	b.n	800f7ee <lv_draw_label+0xc2e>
        return;
 800f7dc:	bf00      	nop
 800f7de:	e006      	b.n	800f7ee <lv_draw_label+0xc2e>
        return;
 800f7e0:	bf00      	nop
 800f7e2:	e004      	b.n	800f7ee <lv_draw_label+0xc2e>
    if(!clip_ok) return;
 800f7e4:	bf00      	nop
 800f7e6:	e002      	b.n	800f7ee <lv_draw_label+0xc2e>
        if(txt[line_start] == '\0') return;
 800f7e8:	bf00      	nop
 800f7ea:	e000      	b.n	800f7ee <lv_draw_label+0xc2e>
        if(pos.y > draw_ctx->clip_area->y2) return;
 800f7ec:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 800f7ee:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bdb0      	pop	{r4, r5, r7, pc}
 800f7f6:	bf00      	nop

0800f7f8 <lv_draw_letter>:

void lv_draw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                    uint32_t letter)
{
 800f7f8:	b590      	push	{r4, r7, lr}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]
 800f804:	603b      	str	r3, [r7, #0]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	69dc      	ldr	r4, [r3, #28]
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	68b9      	ldr	r1, [r7, #8]
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	47a0      	blx	r4
}
 800f814:	bf00      	nop
 800f816:	3714      	adds	r7, #20
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd90      	pop	{r4, r7, pc}

0800f81c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	4603      	mov	r3, r0
 800f824:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 800f826:	2300      	movs	r3, #0
 800f828:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 800f82a:	79fb      	ldrb	r3, [r7, #7]
 800f82c:	2b2f      	cmp	r3, #47	; 0x2f
 800f82e:	d906      	bls.n	800f83e <hex_char_to_num+0x22>
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	2b39      	cmp	r3, #57	; 0x39
 800f834:	d803      	bhi.n	800f83e <hex_char_to_num+0x22>
        result = hex - '0';
 800f836:	79fb      	ldrb	r3, [r7, #7]
 800f838:	3b30      	subs	r3, #48	; 0x30
 800f83a:	73fb      	strb	r3, [r7, #15]
 800f83c:	e02d      	b.n	800f89a <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800f83e:	79fb      	ldrb	r3, [r7, #7]
 800f840:	2b60      	cmp	r3, #96	; 0x60
 800f842:	d902      	bls.n	800f84a <hex_char_to_num+0x2e>
 800f844:	79fb      	ldrb	r3, [r7, #7]
 800f846:	3b20      	subs	r3, #32
 800f848:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 800f84a:	79fb      	ldrb	r3, [r7, #7]
 800f84c:	3b41      	subs	r3, #65	; 0x41
 800f84e:	2b05      	cmp	r3, #5
 800f850:	d820      	bhi.n	800f894 <hex_char_to_num+0x78>
 800f852:	a201      	add	r2, pc, #4	; (adr r2, 800f858 <hex_char_to_num+0x3c>)
 800f854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f858:	0800f871 	.word	0x0800f871
 800f85c:	0800f877 	.word	0x0800f877
 800f860:	0800f87d 	.word	0x0800f87d
 800f864:	0800f883 	.word	0x0800f883
 800f868:	0800f889 	.word	0x0800f889
 800f86c:	0800f88f 	.word	0x0800f88f
            case 'A':
                result = 10;
 800f870:	230a      	movs	r3, #10
 800f872:	73fb      	strb	r3, [r7, #15]
                break;
 800f874:	e011      	b.n	800f89a <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 800f876:	230b      	movs	r3, #11
 800f878:	73fb      	strb	r3, [r7, #15]
                break;
 800f87a:	e00e      	b.n	800f89a <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 800f87c:	230c      	movs	r3, #12
 800f87e:	73fb      	strb	r3, [r7, #15]
                break;
 800f880:	e00b      	b.n	800f89a <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 800f882:	230d      	movs	r3, #13
 800f884:	73fb      	strb	r3, [r7, #15]
                break;
 800f886:	e008      	b.n	800f89a <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 800f888:	230e      	movs	r3, #14
 800f88a:	73fb      	strb	r3, [r7, #15]
                break;
 800f88c:	e005      	b.n	800f89a <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 800f88e:	230f      	movs	r3, #15
 800f890:	73fb      	strb	r3, [r7, #15]
                break;
 800f892:	e002      	b.n	800f89a <hex_char_to_num+0x7e>
            default:
                result = 0;
 800f894:	2300      	movs	r3, #0
 800f896:	73fb      	strb	r3, [r7, #15]
                break;
 800f898:	bf00      	nop
        }
    }

    return result;
 800f89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3714      	adds	r7, #20
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr

0800f8a8 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b088      	sub	sp, #32
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	60b9      	str	r1, [r7, #8]
 800f8b2:	4613      	mov	r3, r2
 800f8b4:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_init == NULL) return NULL;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d101      	bne.n	800f8c2 <lv_draw_layer_create+0x1a>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e044      	b.n	800f94c <lv_draw_layer_create+0xa4>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f010 fb68 	bl	801ff9c <lv_mem_alloc>
 800f8cc:	61f8      	str	r0, [r7, #28]
    LV_ASSERT_MALLOC(layer_ctx);
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d100      	bne.n	800f8d6 <lv_draw_layer_create+0x2e>
 800f8d4:	e7fe      	b.n	800f8d4 <lv_draw_layer_create+0x2c>
    if(layer_ctx == NULL) {
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d101      	bne.n	800f8e0 <lv_draw_layer_create+0x38>
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	e035      	b.n	800f94c <lv_draw_layer_create+0xa4>
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	69f8      	ldr	r0, [r7, #28]
 800f8e8:	f010 ff8c 	bl	8020804 <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800f8ec:	f7fd f858 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 800f8f0:	61b8      	str	r0, [r7, #24]
    layer_ctx->original.buf = draw_ctx->buf;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	621a      	str	r2, [r3, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	685a      	ldr	r2, [r3, #4]
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	61da      	str	r2, [r3, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	689a      	ldr	r2, [r3, #8]
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	619a      	str	r2, [r3, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	7c1b      	ldrb	r3, [r3, #16]
 800f910:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f914:	b2db      	uxtb	r3, r3
 800f916:	2b00      	cmp	r3, #0
 800f918:	bf14      	ite	ne
 800f91a:	2301      	movne	r3, #1
 800f91c:	2300      	moveq	r3, #0
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	6810      	ldr	r0, [r2, #0]
 800f92c:	6851      	ldr	r1, [r2, #4]
 800f92e:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f934:	79fa      	ldrb	r2, [r7, #7]
 800f936:	69f9      	ldr	r1, [r7, #28]
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	4798      	blx	r3
 800f93c:	6178      	str	r0, [r7, #20]
    if(NULL == init_layer_ctx) {
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d102      	bne.n	800f94a <lv_draw_layer_create+0xa2>
        lv_mem_free(layer_ctx);
 800f944:	69f8      	ldr	r0, [r7, #28]
 800f946:	f010 fb59 	bl	801fffc <lv_mem_free>
    }
    return init_layer_ctx;
 800f94a:	697b      	ldr	r3, [r7, #20]
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3720      	adds	r7, #32
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	4613      	mov	r3, r2
 800f960:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f966:	2b00      	cmp	r3, #0
 800f968:	d005      	beq.n	800f976 <lv_draw_layer_adjust+0x22>
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f96e:	79fa      	ldrb	r2, [r7, #7]
 800f970:	68b9      	ldr	r1, [r7, #8]
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	4798      	blx	r3
}
 800f976:	bf00      	nop
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	60f8      	str	r0, [r7, #12]
 800f986:	60b9      	str	r1, [r7, #8]
 800f988:	607a      	str	r2, [r7, #4]
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d005      	beq.n	800f99e <lv_draw_layer_blend+0x20>
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	68b9      	ldr	r1, [r7, #8]
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	4798      	blx	r3
}
 800f99e:	bf00      	nop
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	6039      	str	r1, [r7, #0]

    lv_draw_wait_for_finish(draw_ctx);
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f7fe fcb9 	bl	800e328 <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	6a1a      	ldr	r2, [r3, #32]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	69da      	ldr	r2, [r3, #28]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	699a      	ldr	r2, [r3, #24]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800f9ce:	f7fc ffe7 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 800f9d2:	60f8      	str	r0, [r7, #12]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 800f9de:	7c13      	ldrb	r3, [r2, #16]
 800f9e0:	f361 1386 	bfi	r3, r1, #6, #1
 800f9e4:	7413      	strb	r3, [r2, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d004      	beq.n	800f9f8 <lv_draw_layer_destroy+0x52>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9f2:	6839      	ldr	r1, [r7, #0]
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 800f9f8:	6838      	ldr	r0, [r7, #0]
 800f9fa:	f010 faff 	bl	801fffc <lv_mem_free>
}
 800f9fe:	bf00      	nop
 800fa00:	3710      	adds	r7, #16
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 800fa06:	b480      	push	{r7}
 800fa08:	b083      	sub	sp, #12
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	71fb      	strb	r3, [r7, #7]
 800fa10:	460b      	mov	r3, r1
 800fa12:	71bb      	strb	r3, [r7, #6]
 800fa14:	4613      	mov	r3, r2
 800fa16:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800fa18:	797b      	ldrb	r3, [r7, #5]
 800fa1a:	09db      	lsrs	r3, r3, #7
 800fa1c:	b2da      	uxtb	r2, r3
 800fa1e:	79bb      	ldrb	r3, [r7, #6]
 800fa20:	09db      	lsrs	r3, r3, #7
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	4313      	orrs	r3, r2
 800fa26:	b2da      	uxtb	r2, r3
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	09db      	lsrs	r3, r3, #7
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	b2db      	uxtb	r3, r3
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 800fa42:	2200      	movs	r2, #0
 800fa44:	2100      	movs	r1, #0
 800fa46:	2000      	movs	r0, #0
 800fa48:	f7ff ffdd 	bl	800fa06 <lv_color_make>
 800fa4c:	4603      	mov	r3, r0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800fa52:	b590      	push	{r4, r7, lr}
 800fa54:	b083      	sub	sp, #12
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800fa5a:	210a      	movs	r1, #10
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f010 fed1 	bl	8020804 <lv_memset_00>
    dsc->width = 1;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2201      	movs	r2, #1
 800fa66:	805a      	strh	r2, [r3, #2]
    dsc->opa = LV_OPA_COVER;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	22ff      	movs	r2, #255	; 0xff
 800fa6c:	721a      	strb	r2, [r3, #8]
    dsc->color = lv_color_black();
 800fa6e:	687c      	ldr	r4, [r7, #4]
 800fa70:	f7ff ffe5 	bl	800fa3e <lv_color_black>
 800fa74:	7020      	strb	r0, [r4, #0]
}
 800fa76:	bf00      	nop
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd90      	pop	{r4, r7, pc}

0800fa7e <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 800fa7e:	b590      	push	{r4, r7, lr}
 800fa80:	b085      	sub	sp, #20
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	60f8      	str	r0, [r7, #12]
 800fa86:	60b9      	str	r1, [r7, #8]
 800fa88:	607a      	str	r2, [r7, #4]
 800fa8a:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00b      	beq.n	800faae <lv_draw_line+0x30>
    if(dsc->opa <= LV_OPA_MIN) return;
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	7a1b      	ldrb	r3, [r3, #8]
 800fa9a:	2b02      	cmp	r3, #2
 800fa9c:	d909      	bls.n	800fab2 <lv_draw_line+0x34>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6a1c      	ldr	r4, [r3, #32]
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	68b9      	ldr	r1, [r7, #8]
 800faa8:	68f8      	ldr	r0, [r7, #12]
 800faaa:	47a0      	blx	r4
 800faac:	e002      	b.n	800fab4 <lv_draw_line+0x36>
    if(dsc->width == 0) return;
 800faae:	bf00      	nop
 800fab0:	e000      	b.n	800fab4 <lv_draw_line+0x36>
    if(dsc->opa <= LV_OPA_MIN) return;
 800fab2:	bf00      	nop
}
 800fab4:	3714      	adds	r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd90      	pop	{r4, r7, pc}

0800faba <lv_area_copy>:
{
 800faba:	b480      	push	{r7}
 800fabc:	b083      	sub	sp, #12
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
 800fac2:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	80da      	strh	r2, [r3, #6]
}
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <lv_area_get_width>:
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	3301      	adds	r3, #1
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	b21b      	sxth	r3, r3
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr

0800fb26 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800fb26:	b480      	push	{r7}
 800fb28:	b083      	sub	sp, #12
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	1ad3      	subs	r3, r2, r3
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	3301      	adds	r3, #1
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	b21b      	sxth	r3, r3
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr

0800fb54 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800fb5e:	2300      	movs	r3, #0
 800fb60:	73fb      	strb	r3, [r7, #15]
 800fb62:	e008      	b.n	800fb76 <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800fb64:	7bfb      	ldrb	r3, [r7, #15]
 800fb66:	4a13      	ldr	r2, [pc, #76]	; (800fbb4 <lv_draw_mask_add+0x60>)
 800fb68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d006      	beq.n	800fb7e <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800fb70:	7bfb      	ldrb	r3, [r7, #15]
 800fb72:	3301      	adds	r3, #1
 800fb74:	73fb      	strb	r3, [r7, #15]
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
 800fb78:	2b0f      	cmp	r3, #15
 800fb7a:	d9f3      	bls.n	800fb64 <lv_draw_mask_add+0x10>
 800fb7c:	e000      	b.n	800fb80 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800fb7e:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 800fb80:	7bfb      	ldrb	r3, [r7, #15]
 800fb82:	2b0f      	cmp	r3, #15
 800fb84:	d902      	bls.n	800fb8c <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 800fb86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb8a:	e00c      	b.n	800fba6 <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	4909      	ldr	r1, [pc, #36]	; (800fbb4 <lv_draw_mask_add+0x60>)
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800fb96:	7bfb      	ldrb	r3, [r7, #15]
 800fb98:	4a06      	ldr	r2, [pc, #24]	; (800fbb4 <lv_draw_mask_add+0x60>)
 800fb9a:	00db      	lsls	r3, r3, #3
 800fb9c:	4413      	add	r3, r2
 800fb9e:	683a      	ldr	r2, [r7, #0]
 800fba0:	605a      	str	r2, [r3, #4]

    return i;
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
 800fba4:	b21b      	sxth	r3, r3
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3714      	adds	r7, #20
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	2000096c 	.word	0x2000096c

0800fbb8 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 800fbb8:	b590      	push	{r4, r7, lr}
 800fbba:	b08b      	sub	sp, #44	; 0x2c
 800fbbc:	af02      	add	r7, sp, #8
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	4608      	mov	r0, r1
 800fbc2:	4611      	mov	r1, r2
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	817b      	strh	r3, [r7, #10]
 800fbca:	460b      	mov	r3, r1
 800fbcc:	813b      	strh	r3, [r7, #8]
 800fbce:	4613      	mov	r3, r2
 800fbd0:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	77fb      	strb	r3, [r7, #31]
    _lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 800fbd6:	4b19      	ldr	r3, [pc, #100]	; (800fc3c <lv_draw_mask_apply+0x84>)
 800fbd8:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 800fbda:	e021      	b.n	800fc20 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	681c      	ldr	r4, [r3, #0]
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fbf2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800fbf6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800fbfa:	9300      	str	r3, [sp, #0]
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	47a0      	blx	r4
 800fc02:	4603      	mov	r3, r0
 800fc04:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800fc06:	7cfb      	ldrb	r3, [r7, #19]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <lv_draw_mask_apply+0x58>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	e011      	b.n	800fc34 <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800fc10:	7cfb      	ldrb	r3, [r7, #19]
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	d101      	bne.n	800fc1a <lv_draw_mask_apply+0x62>
 800fc16:	2301      	movs	r3, #1
 800fc18:	77fb      	strb	r3, [r7, #31]

        m++;
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	3308      	adds	r3, #8
 800fc1e:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1d9      	bne.n	800fbdc <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800fc28:	7ffb      	ldrb	r3, [r7, #31]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d001      	beq.n	800fc32 <lv_draw_mask_apply+0x7a>
 800fc2e:	2302      	movs	r3, #2
 800fc30:	e000      	b.n	800fc34 <lv_draw_mask_apply+0x7c>
 800fc32:	2301      	movs	r3, #1
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3724      	adds	r7, #36	; 0x24
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd90      	pop	{r4, r7, pc}
 800fc3c:	2000096c 	.word	0x2000096c

0800fc40 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b085      	sub	sp, #20
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	4603      	mov	r3, r0
 800fc48:	80fb      	strh	r3, [r7, #6]
    _lv_draw_mask_common_dsc_t * p = NULL;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 800fc4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fc52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc56:	d012      	beq.n	800fc7e <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800fc58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fc5c:	4a0b      	ldr	r2, [pc, #44]	; (800fc8c <lv_draw_mask_remove_id+0x4c>)
 800fc5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fc62:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800fc64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fc68:	4a08      	ldr	r2, [pc, #32]	; (800fc8c <lv_draw_mask_remove_id+0x4c>)
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800fc70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fc74:	4a05      	ldr	r2, [pc, #20]	; (800fc8c <lv_draw_mask_remove_id+0x4c>)
 800fc76:	00db      	lsls	r3, r3, #3
 800fc78:	4413      	add	r3, r2
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	605a      	str	r2, [r3, #4]
    }

    return p;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3714      	adds	r7, #20
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr
 800fc8c:	2000096c 	.word	0x2000096c

0800fc90 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * p = NULL;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	72fb      	strb	r3, [r7, #11]
 800fca0:	e014      	b.n	800fccc <lv_draw_mask_remove_custom+0x3c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800fca2:	7afb      	ldrb	r3, [r7, #11]
 800fca4:	4a0d      	ldr	r2, [pc, #52]	; (800fcdc <lv_draw_mask_remove_custom+0x4c>)
 800fca6:	00db      	lsls	r3, r3, #3
 800fca8:	4413      	add	r3, r2
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d109      	bne.n	800fcc6 <lv_draw_mask_remove_custom+0x36>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800fcb2:	7afb      	ldrb	r3, [r7, #11]
 800fcb4:	4a09      	ldr	r2, [pc, #36]	; (800fcdc <lv_draw_mask_remove_custom+0x4c>)
 800fcb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fcba:	60fb      	str	r3, [r7, #12]
            lv_draw_mask_remove_id(i);
 800fcbc:	7afb      	ldrb	r3, [r7, #11]
 800fcbe:	b21b      	sxth	r3, r3
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7ff ffbd 	bl	800fc40 <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800fcc6:	7afb      	ldrb	r3, [r7, #11]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	72fb      	strb	r3, [r7, #11]
 800fccc:	7afb      	ldrb	r3, [r7, #11]
 800fcce:	2b0f      	cmp	r3, #15
 800fcd0:	d9e7      	bls.n	800fca2 <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3710      	adds	r7, #16
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	2000096c 	.word	0x2000096c

0800fce0 <lv_draw_mask_free_param>:
 * Needs to be called only in special cases when the mask is not added by `lv_draw_mask_add`
 * and not removed by `lv_draw_mask_remove_id` or `lv_draw_mask_remove_custom`
 * @param p pointer to a mask parameter
 */
void lv_draw_mask_free_param(void * p)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * pdsc = p;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	617b      	str	r3, [r7, #20]
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	791b      	ldrb	r3, [r3, #4]
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d11c      	bne.n	800fd2e <lv_draw_mask_free_param+0x4e>
        lv_draw_mask_radius_param_t * radius_p = (lv_draw_mask_radius_param_t *) p;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	60fb      	str	r3, [r7, #12]
        if(radius_p->circle) {
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	695b      	ldr	r3, [r3, #20]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d021      	beq.n	800fd44 <lv_draw_mask_free_param+0x64>
            if(radius_p->circle->life < 0) {
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	da0b      	bge.n	800fd22 <lv_draw_mask_free_param+0x42>
                lv_mem_free(radius_p->circle->cir_opa);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	4618      	mov	r0, r3
 800fd12:	f010 f973 	bl	801fffc <lv_mem_free>
                lv_mem_free(radius_p->circle);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	695b      	ldr	r3, [r3, #20]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f010 f96e 	bl	801fffc <lv_mem_free>
    }
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
        lv_mem_free(poly_p->cfg.points);
    }
}
 800fd20:	e010      	b.n	800fd44 <lv_draw_mask_free_param+0x64>
                radius_p->circle->used_cnt--;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	695b      	ldr	r3, [r3, #20]
 800fd26:	695a      	ldr	r2, [r3, #20]
 800fd28:	3a01      	subs	r2, #1
 800fd2a:	615a      	str	r2, [r3, #20]
}
 800fd2c:	e00a      	b.n	800fd44 <lv_draw_mask_free_param+0x64>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	791b      	ldrb	r3, [r3, #4]
 800fd32:	2b05      	cmp	r3, #5
 800fd34:	d106      	bne.n	800fd44 <lv_draw_mask_free_param+0x64>
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	613b      	str	r3, [r7, #16]
        lv_mem_free(poly_p->cfg.points);
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f010 f95c 	bl	801fffc <lv_mem_free>
}
 800fd44:	bf00      	nop
 800fd46:	3718      	adds	r7, #24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <_lv_draw_mask_cleanup>:

void _lv_draw_mask_cleanup(void)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800fd52:	2300      	movs	r3, #0
 800fd54:	71fb      	strb	r3, [r7, #7]
 800fd56:	e022      	b.n	800fd9e <_lv_draw_mask_cleanup+0x52>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 800fd58:	79fa      	ldrb	r2, [r7, #7]
 800fd5a:	4915      	ldr	r1, [pc, #84]	; (800fdb0 <_lv_draw_mask_cleanup+0x64>)
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	00db      	lsls	r3, r3, #3
 800fd60:	1a9b      	subs	r3, r3, r2
 800fd62:	009b      	lsls	r3, r3, #2
 800fd64:	440b      	add	r3, r1
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00a      	beq.n	800fd82 <_lv_draw_mask_cleanup+0x36>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 800fd6c:	79fa      	ldrb	r2, [r7, #7]
 800fd6e:	4910      	ldr	r1, [pc, #64]	; (800fdb0 <_lv_draw_mask_cleanup+0x64>)
 800fd70:	4613      	mov	r3, r2
 800fd72:	00db      	lsls	r3, r3, #3
 800fd74:	1a9b      	subs	r3, r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	440b      	add	r3, r1
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f010 f93d 	bl	801fffc <lv_mem_free>
        }
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 800fd82:	79fa      	ldrb	r2, [r7, #7]
 800fd84:	4613      	mov	r3, r2
 800fd86:	00db      	lsls	r3, r3, #3
 800fd88:	1a9b      	subs	r3, r3, r2
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	4a08      	ldr	r2, [pc, #32]	; (800fdb0 <_lv_draw_mask_cleanup+0x64>)
 800fd8e:	4413      	add	r3, r2
 800fd90:	211c      	movs	r1, #28
 800fd92:	4618      	mov	r0, r3
 800fd94:	f010 fd36 	bl	8020804 <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800fd98:	79fb      	ldrb	r3, [r7, #7]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	71fb      	strb	r3, [r7, #7]
 800fd9e:	79fb      	ldrb	r3, [r7, #7]
 800fda0:	2b03      	cmp	r3, #3
 800fda2:	d9d9      	bls.n	800fd58 <_lv_draw_mask_cleanup+0xc>
    }
}
 800fda4:	bf00      	nop
 800fda6:	bf00      	nop
 800fda8:	3708      	adds	r7, #8
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	200008fc 	.word	0x200008fc

0800fdb4 <lv_draw_mask_is_any>:
    }
    return cnt;
}

bool lv_draw_mask_is_any(const lv_area_t * a)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b086      	sub	sp, #24
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d107      	bne.n	800fdd2 <lv_draw_mask_is_any+0x1e>
 800fdc2:	4b2a      	ldr	r3, [pc, #168]	; (800fe6c <lv_draw_mask_is_any+0xb8>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	bf14      	ite	ne
 800fdca:	2301      	movne	r3, #1
 800fdcc:	2300      	moveq	r3, #0
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	e048      	b.n	800fe64 <lv_draw_mask_is_any+0xb0>

    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	75fb      	strb	r3, [r7, #23]
 800fdd6:	e041      	b.n	800fe5c <lv_draw_mask_is_any+0xa8>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800fdd8:	7dfb      	ldrb	r3, [r7, #23]
 800fdda:	4a24      	ldr	r2, [pc, #144]	; (800fe6c <lv_draw_mask_is_any+0xb8>)
 800fddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fde0:	613b      	str	r3, [r7, #16]
        if(comm_param == NULL) continue;
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d035      	beq.n	800fe54 <lv_draw_mask_is_any+0xa0>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	791b      	ldrb	r3, [r3, #4]
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d12f      	bne.n	800fe50 <lv_draw_mask_is_any+0x9c>
            lv_draw_mask_radius_param_t * radius_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800fdf0:	7dfb      	ldrb	r3, [r7, #23]
 800fdf2:	4a1e      	ldr	r2, [pc, #120]	; (800fe6c <lv_draw_mask_is_any+0xb8>)
 800fdf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fdf8:	60fb      	str	r3, [r7, #12]
            if(radius_param->cfg.outer) {
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	7c9b      	ldrb	r3, [r3, #18]
 800fdfe:	f003 0301 	and.w	r3, r3, #1
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d011      	beq.n	800fe2c <lv_draw_mask_is_any+0x78>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f103 0108 	add.w	r1, r3, #8
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800fe14:	461a      	mov	r2, r3
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f00f f822 	bl	801ee60 <_lv_area_is_out>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	f083 0301 	eor.w	r3, r3, #1
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d016      	beq.n	800fe56 <lv_draw_mask_is_any+0xa2>
 800fe28:	2301      	movs	r3, #1
 800fe2a:	e01b      	b.n	800fe64 <lv_draw_mask_is_any+0xb0>
            }
            else {
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f103 0108 	add.w	r1, r3, #8
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f00e ff72 	bl	801ed24 <_lv_area_is_in>
 800fe40:	4603      	mov	r3, r0
 800fe42:	f083 0301 	eor.w	r3, r3, #1
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d004      	beq.n	800fe56 <lv_draw_mask_is_any+0xa2>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e009      	b.n	800fe64 <lv_draw_mask_is_any+0xb0>
            }
        }
        else {
            return true;
 800fe50:	2301      	movs	r3, #1
 800fe52:	e007      	b.n	800fe64 <lv_draw_mask_is_any+0xb0>
        if(comm_param == NULL) continue;
 800fe54:	bf00      	nop
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800fe56:	7dfb      	ldrb	r3, [r7, #23]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	75fb      	strb	r3, [r7, #23]
 800fe5c:	7dfb      	ldrb	r3, [r7, #23]
 800fe5e:	2b0f      	cmp	r3, #15
 800fe60:	d9ba      	bls.n	800fdd8 <lv_draw_mask_is_any+0x24>
        }
    }

    return false;
 800fe62:	2300      	movs	r3, #0

}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3718      	adds	r7, #24
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	2000096c 	.word	0x2000096c

0800fe70 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b08a      	sub	sp, #40	; 0x28
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	4608      	mov	r0, r1
 800fe7a:	4611      	mov	r1, r2
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	4603      	mov	r3, r0
 800fe80:	817b      	strh	r3, [r7, #10]
 800fe82:	460b      	mov	r3, r1
 800fe84:	813b      	strh	r3, [r7, #8]
 800fe86:	4613      	mov	r3, r2
 800fe88:	80fb      	strh	r3, [r7, #6]
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800fe8a:	212c      	movs	r1, #44	; 0x2c
 800fe8c:	68f8      	ldr	r0, [r7, #12]
 800fe8e:	f010 fcb9 	bl	8020804 <lv_memset_00>

    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800fe92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800fe96:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d10f      	bne.n	800febe <lv_draw_mask_line_points_init+0x4e>
 800fe9e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800fea2:	2b03      	cmp	r3, #3
 800fea4:	d10b      	bne.n	800febe <lv_draw_mask_line_points_init+0x4e>
        p1y--;
 800fea6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800feaa:	b29b      	uxth	r3, r3
 800feac:	3b01      	subs	r3, #1
 800feae:	b29b      	uxth	r3, r3
 800feb0:	813b      	strh	r3, [r7, #8]
        p2y--;
 800feb2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	3b01      	subs	r3, #1
 800feba:	b29b      	uxth	r3, r3
 800febc:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    if(p1y > p2y) {
 800febe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800fec2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800fec6:	429a      	cmp	r2, r3
 800fec8:	dd0b      	ble.n	800fee2 <lv_draw_mask_line_points_init+0x72>
        lv_coord_t t;
        t = p2x;
 800feca:	88fb      	ldrh	r3, [r7, #6]
 800fecc:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 800fece:	897b      	ldrh	r3, [r7, #10]
 800fed0:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 800fed2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fed4:	817b      	strh	r3, [r7, #10]

        t = p2y;
 800fed6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fed8:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 800feda:	893b      	ldrh	r3, [r7, #8]
 800fedc:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 800fede:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fee0:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	897a      	ldrh	r2, [r7, #10]
 800fee6:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	893a      	ldrh	r2, [r7, #8]
 800feec:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	88fa      	ldrh	r2, [r7, #6]
 800fef2:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fef8:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 800fefa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	b2d9      	uxtb	r1, r3
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	7c13      	ldrb	r3, [r2, #16]
 800ff08:	f361 0301 	bfi	r3, r1, #0, #2
 800ff0c:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	897a      	ldrh	r2, [r7, #10]
 800ff12:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	893a      	ldrh	r2, [r7, #8]
 800ff18:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800ff1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ff1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ff22:	1ad3      	subs	r3, r2, r3
 800ff24:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ff28:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ff2c:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 800ff30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ff34:	1acb      	subs	r3, r1, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	bfb8      	it	lt
 800ff3a:	425b      	neglt	r3, r3
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	bfcc      	ite	gt
 800ff40:	2301      	movgt	r3, #1
 800ff42:	2300      	movle	r3, #0
 800ff44:	b2d9      	uxtb	r1, r3
 800ff46:	68fa      	ldr	r2, [r7, #12]
 800ff48:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800ff4c:	f361 0300 	bfi	r3, r1, #0, #1
 800ff50:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2200      	movs	r2, #0
 800ff58:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4a63      	ldr	r2, [pc, #396]	; (80100f0 <lv_draw_mask_line_points_init+0x280>)
 800ff64:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 800ff6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ff70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 800ff78:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800ff7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff8a:	f003 0301 	and.w	r3, r3, #1
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d024      	beq.n	800ffde <lv_draw_mask_line_points_init+0x16e>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 800ff94:	6a3b      	ldr	r3, [r7, #32]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00c      	beq.n	800ffb4 <lv_draw_mask_line_points_init+0x144>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800ff9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ff9e:	6a3b      	ldr	r3, [r7, #32]
 800ffa0:	fb92 f3f3 	sdiv	r3, r2, r3
 800ffa4:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	69fa      	ldr	r2, [r7, #28]
 800ffaa:	fb02 f303 	mul.w	r3, r2, r3
 800ffae:	129a      	asrs	r2, r3, #10
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00c      	beq.n	800ffd4 <lv_draw_mask_line_points_init+0x164>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ffba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	fb92 f3f3 	sdiv	r3, r2, r3
 800ffc4:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	6a3a      	ldr	r2, [r7, #32]
 800ffca:	fb02 f303 	mul.w	r3, r2, r3
 800ffce:	129a      	asrs	r2, r3, #10
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	69da      	ldr	r2, [r3, #28]
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	621a      	str	r2, [r3, #32]
 800ffdc:	e023      	b.n	8010026 <lv_draw_mask_line_points_init+0x1b6>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d00c      	beq.n	800fffe <lv_draw_mask_line_points_init+0x18e>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800ffe4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	fb92 f3f3 	sdiv	r3, r2, r3
 800ffee:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	6a3a      	ldr	r2, [r7, #32]
 800fff4:	fb02 f303 	mul.w	r3, r2, r3
 800fff8:	129a      	asrs	r2, r3, #10
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00c      	beq.n	801001e <lv_draw_mask_line_points_init+0x1ae>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8010004:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010008:	6a3b      	ldr	r3, [r7, #32]
 801000a:	fb92 f3f3 	sdiv	r3, r2, r3
 801000e:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	69fa      	ldr	r2, [r7, #28]
 8010014:	fb02 f303 	mul.w	r3, r2, r3
 8010018:	129a      	asrs	r2, r3, #10
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	699a      	ldr	r2, [r3, #24]
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	7c1b      	ldrb	r3, [r3, #16]
 801002a:	f003 0303 	and.w	r3, r3, #3
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b00      	cmp	r3, #0
 8010032:	d107      	bne.n	8010044 <lv_draw_mask_line_points_init+0x1d4>
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801003a:	f36f 0341 	bfc	r3, #1, #1
 801003e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8010042:	e043      	b.n	80100cc <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	7c1b      	ldrb	r3, [r3, #16]
 8010048:	f003 0303 	and.w	r3, r3, #3
 801004c:	b2db      	uxtb	r3, r3
 801004e:	2b01      	cmp	r3, #1
 8010050:	d107      	bne.n	8010062 <lv_draw_mask_line_points_init+0x1f2>
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8010058:	f043 0302 	orr.w	r3, r3, #2
 801005c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8010060:	e034      	b.n	80100cc <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	7c1b      	ldrb	r3, [r3, #16]
 8010066:	f003 0303 	and.w	r3, r3, #3
 801006a:	b2db      	uxtb	r3, r3
 801006c:	2b02      	cmp	r3, #2
 801006e:	d113      	bne.n	8010098 <lv_draw_mask_line_points_init+0x228>
        if(param->steep > 0) param->inv = 1;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	6a1b      	ldr	r3, [r3, #32]
 8010074:	2b00      	cmp	r3, #0
 8010076:	dd07      	ble.n	8010088 <lv_draw_mask_line_points_init+0x218>
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801007e:	f043 0302 	orr.w	r3, r3, #2
 8010082:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8010086:	e021      	b.n	80100cc <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 0;
 8010088:	68fa      	ldr	r2, [r7, #12]
 801008a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801008e:	f36f 0341 	bfc	r3, #1, #1
 8010092:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8010096:	e019      	b.n	80100cc <lv_draw_mask_line_points_init+0x25c>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	7c1b      	ldrb	r3, [r3, #16]
 801009c:	f003 0303 	and.w	r3, r3, #3
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	2b03      	cmp	r3, #3
 80100a4:	d112      	bne.n	80100cc <lv_draw_mask_line_points_init+0x25c>
        if(param->steep > 0) param->inv = 0;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	dd07      	ble.n	80100be <lv_draw_mask_line_points_init+0x24e>
 80100ae:	68fa      	ldr	r2, [r7, #12]
 80100b0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80100b4:	f36f 0341 	bfc	r3, #1, #1
 80100b8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80100bc:	e006      	b.n	80100cc <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 1;
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80100c4:	f043 0302 	orr.w	r3, r3, #2
 80100c8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	6a1b      	ldr	r3, [r3, #32]
 80100d0:	109a      	asrs	r2, r3, #2
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	6a1b      	ldr	r3, [r3, #32]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	da04      	bge.n	80100e8 <lv_draw_mask_line_points_init+0x278>
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e2:	425a      	negs	r2, r3
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80100e8:	bf00      	nop
 80100ea:	3728      	adds	r7, #40	; 0x28
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	08010525 	.word	0x08010525

080100f4 <lv_draw_mask_line_angle_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_angle_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t py, int16_t angle,
                                  lv_draw_mask_line_side_t side)
{
 80100f4:	b590      	push	{r4, r7, lr}
 80100f6:	b089      	sub	sp, #36	; 0x24
 80100f8:	af02      	add	r7, sp, #8
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	4608      	mov	r0, r1
 80100fe:	4611      	mov	r1, r2
 8010100:	461a      	mov	r2, r3
 8010102:	4603      	mov	r3, r0
 8010104:	817b      	strh	r3, [r7, #10]
 8010106:	460b      	mov	r3, r1
 8010108:	813b      	strh	r3, [r7, #8]
 801010a:	4613      	mov	r3, r2
 801010c:	80fb      	strh	r3, [r7, #6]
    /*Find an optimal degree.
     *lv_mask_line_points_init will swap the points to keep the smaller y in p1
     *Theoretically a line with `angle` or `angle+180` is the same only the points are swapped
     *Find the degree which keeps the origo in place*/
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 801010e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010112:	2bb4      	cmp	r3, #180	; 0xb4
 8010114:	dd03      	ble.n	801011e <lv_draw_mask_line_angle_init+0x2a>
 8010116:	88fb      	ldrh	r3, [r7, #6]
 8010118:	3bb4      	subs	r3, #180	; 0xb4
 801011a:	b29b      	uxth	r3, r3
 801011c:	80fb      	strh	r3, [r7, #6]

    int32_t p2x;
    int32_t p2y;

    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 801011e:	88fb      	ldrh	r3, [r7, #6]
 8010120:	335a      	adds	r3, #90	; 0x5a
 8010122:	b29b      	uxth	r3, r3
 8010124:	b21b      	sxth	r3, r3
 8010126:	4618      	mov	r0, r3
 8010128:	f00f fe1e 	bl	801fd68 <lv_trigo_sin>
 801012c:	4603      	mov	r3, r0
 801012e:	115b      	asrs	r3, r3, #5
 8010130:	b21b      	sxth	r3, r3
 8010132:	461a      	mov	r2, r3
 8010134:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010138:	4413      	add	r3, r2
 801013a:	617b      	str	r3, [r7, #20]
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 801013c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010140:	4618      	mov	r0, r3
 8010142:	f00f fe11 	bl	801fd68 <lv_trigo_sin>
 8010146:	4603      	mov	r3, r0
 8010148:	115b      	asrs	r3, r3, #5
 801014a:	b21b      	sxth	r3, r3
 801014c:	461a      	mov	r2, r3
 801014e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010152:	4413      	add	r3, r2
 8010154:	613b      	str	r3, [r7, #16]

    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	b21c      	sxth	r4, r3
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	b21b      	sxth	r3, r3
 801015e:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8010162:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010166:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801016a:	9201      	str	r2, [sp, #4]
 801016c:	9300      	str	r3, [sp, #0]
 801016e:	4623      	mov	r3, r4
 8010170:	4602      	mov	r2, r0
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f7ff fe7c 	bl	800fe70 <lv_draw_mask_line_points_init>
}
 8010178:	bf00      	nop
 801017a:	371c      	adds	r7, #28
 801017c:	46bd      	mov	sp, r7
 801017e:	bd90      	pop	{r4, r7, pc}

08010180 <lv_draw_mask_angle_init>:
 * @param start_angle start angle in degrees. 0 deg on the right, 90 deg, on the bottom
 * @param end_angle end angle
 */
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,
                             lv_coord_t start_angle, lv_coord_t end_angle)
{
 8010180:	b590      	push	{r4, r7, lr}
 8010182:	b089      	sub	sp, #36	; 0x24
 8010184:	af02      	add	r7, sp, #8
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	4608      	mov	r0, r1
 801018a:	4611      	mov	r1, r2
 801018c:	461a      	mov	r2, r3
 801018e:	4603      	mov	r3, r0
 8010190:	817b      	strh	r3, [r7, #10]
 8010192:	460b      	mov	r3, r1
 8010194:	813b      	strh	r3, [r7, #8]
 8010196:	4613      	mov	r3, r2
 8010198:	80fb      	strh	r3, [r7, #6]
    lv_draw_mask_line_side_t start_side;
    lv_draw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
 801019a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	da02      	bge.n	80101a8 <lv_draw_mask_angle_init+0x28>
        start_angle = 0;
 80101a2:	2300      	movs	r3, #0
 80101a4:	80fb      	strh	r3, [r7, #6]
 80101a6:	e007      	b.n	80101b8 <lv_draw_mask_angle_init+0x38>
    else if(start_angle > 359)
 80101a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101ac:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80101b0:	db02      	blt.n	80101b8 <lv_draw_mask_angle_init+0x38>
        start_angle = 359;
 80101b2:	f240 1367 	movw	r3, #359	; 0x167
 80101b6:	80fb      	strh	r3, [r7, #6]

    if(end_angle < 0)
 80101b8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80101bc:	2b00      	cmp	r3, #0
 80101be:	da02      	bge.n	80101c6 <lv_draw_mask_angle_init+0x46>
        end_angle = 0;
 80101c0:	2300      	movs	r3, #0
 80101c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80101c4:	e007      	b.n	80101d6 <lv_draw_mask_angle_init+0x56>
    else if(end_angle > 359)
 80101c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80101ca:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80101ce:	db02      	blt.n	80101d6 <lv_draw_mask_angle_init+0x56>
        end_angle = 359;
 80101d0:	f240 1367 	movw	r3, #359	; 0x167
 80101d4:	853b      	strh	r3, [r7, #40]	; 0x28

    if(end_angle < start_angle) {
 80101d6:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80101da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101de:	429a      	cmp	r2, r3
 80101e0:	da0a      	bge.n	80101f8 <lv_draw_mask_angle_init+0x78>
        param->delta_deg = 360 - start_angle + end_angle;
 80101e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80101e4:	88fb      	ldrh	r3, [r7, #6]
 80101e6:	1ad3      	subs	r3, r2, r3
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80101f6:	e00b      	b.n	8010210 <lv_draw_mask_angle_init+0x90>
    }
    else {
        param->delta_deg = LV_ABS(end_angle - start_angle);
 80101f8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80101fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010200:	1ad3      	subs	r3, r2, r3
 8010202:	2b00      	cmp	r3, #0
 8010204:	bfb8      	it	lt
 8010206:	425b      	neglt	r3, r3
 8010208:	b29a      	uxth	r2, r3
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    }

    param->cfg.start_angle = start_angle;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	88fa      	ldrh	r2, [r7, #6]
 8010214:	819a      	strh	r2, [r3, #12]
    param->cfg.end_angle = end_angle;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801021a:	81da      	strh	r2, [r3, #14]
    param->cfg.vertex_p.x = vertex_x;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	897a      	ldrh	r2, [r7, #10]
 8010220:	811a      	strh	r2, [r3, #8]
    param->cfg.vertex_p.y = vertex_y;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	893a      	ldrh	r2, [r7, #8]
 8010226:	815a      	strh	r2, [r3, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	4a2f      	ldr	r2, [pc, #188]	; (80102e8 <lv_draw_mask_angle_init+0x168>)
 801022c:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2201      	movs	r2, #1
 8010232:	711a      	strb	r2, [r3, #4]

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");
 8010234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010238:	2b00      	cmp	r3, #0
 801023a:	db04      	blt.n	8010246 <lv_draw_mask_angle_init+0xc6>
 801023c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010240:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010244:	dd00      	ble.n	8010248 <lv_draw_mask_angle_init+0xc8>
 8010246:	e7fe      	b.n	8010246 <lv_draw_mask_angle_init+0xc6>

    if(start_angle >= 0 && start_angle < 180) {
 8010248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801024c:	2b00      	cmp	r3, #0
 801024e:	db06      	blt.n	801025e <lv_draw_mask_angle_init+0xde>
 8010250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010254:	2bb3      	cmp	r3, #179	; 0xb3
 8010256:	dc02      	bgt.n	801025e <lv_draw_mask_angle_init+0xde>
        start_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8010258:	2300      	movs	r3, #0
 801025a:	75fb      	strb	r3, [r7, #23]
 801025c:	e001      	b.n	8010262 <lv_draw_mask_angle_init+0xe2>
    }
    else
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 801025e:	2301      	movs	r3, #1
 8010260:	75fb      	strb	r3, [r7, #23]

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");
 8010262:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010266:	2b00      	cmp	r3, #0
 8010268:	db04      	blt.n	8010274 <lv_draw_mask_angle_init+0xf4>
 801026a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801026e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010272:	dd00      	ble.n	8010276 <lv_draw_mask_angle_init+0xf6>
 8010274:	e7fe      	b.n	8010274 <lv_draw_mask_angle_init+0xf4>

    if(end_angle >= 0 && end_angle < 180) {
 8010276:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801027a:	2b00      	cmp	r3, #0
 801027c:	db06      	blt.n	801028c <lv_draw_mask_angle_init+0x10c>
 801027e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010282:	2bb3      	cmp	r3, #179	; 0xb3
 8010284:	dc02      	bgt.n	801028c <lv_draw_mask_angle_init+0x10c>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
 8010286:	2301      	movs	r3, #1
 8010288:	75bb      	strb	r3, [r7, #22]
 801028a:	e00d      	b.n	80102a8 <lv_draw_mask_angle_init+0x128>
    }
    else if(end_angle >= 180 && end_angle < 360) {
 801028c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010290:	2bb3      	cmp	r3, #179	; 0xb3
 8010292:	dd07      	ble.n	80102a4 <lv_draw_mask_angle_init+0x124>
 8010294:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010298:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 801029c:	da02      	bge.n	80102a4 <lv_draw_mask_angle_init+0x124>
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 801029e:	2300      	movs	r3, #0
 80102a0:	75bb      	strb	r3, [r7, #22]
 80102a2:	e001      	b.n	80102a8 <lv_draw_mask_angle_init+0x128>
    }
    else
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 80102a4:	2301      	movs	r3, #1
 80102a6:	75bb      	strb	r3, [r7, #22]

    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	f103 0010 	add.w	r0, r3, #16
 80102ae:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80102b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80102b6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80102ba:	7dfb      	ldrb	r3, [r7, #23]
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	4623      	mov	r3, r4
 80102c0:	f7ff ff18 	bl	80100f4 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80102ca:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80102ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80102d2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80102d6:	7dbb      	ldrb	r3, [r7, #22]
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	4623      	mov	r3, r4
 80102dc:	f7ff ff0a 	bl	80100f4 <lv_draw_mask_line_angle_init>
}
 80102e0:	bf00      	nop
 80102e2:	371c      	adds	r7, #28
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd90      	pop	{r4, r7, pc}
 80102e8:	08010ea5 	.word	0x08010ea5

080102ec <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b088      	sub	sp, #32
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	4611      	mov	r1, r2
 80102f8:	461a      	mov	r2, r3
 80102fa:	460b      	mov	r3, r1
 80102fc:	80fb      	strh	r3, [r7, #6]
 80102fe:	4613      	mov	r3, r2
 8010300:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 8010302:	68b8      	ldr	r0, [r7, #8]
 8010304:	f7ff fbf8 	bl	800faf8 <lv_area_get_width>
 8010308:	4603      	mov	r3, r0
 801030a:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 801030c:	68b8      	ldr	r0, [r7, #8]
 801030e:	f7ff fc0a 	bl	800fb26 <lv_area_get_height>
 8010312:	4603      	mov	r3, r0
 8010314:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MIN(w, h);
 8010316:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801031a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801031e:	4293      	cmp	r3, r2
 8010320:	bfa8      	it	ge
 8010322:	4613      	movge	r3, r2
 8010324:	b21b      	sxth	r3, r3
 8010326:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 8010328:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	105b      	asrs	r3, r3, #1
 8010330:	429a      	cmp	r2, r3
 8010332:	dd02      	ble.n	801033a <lv_draw_mask_radius_init+0x4e>
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	105b      	asrs	r3, r3, #1
 8010338:	80fb      	strh	r3, [r7, #6]
    if(radius < 0) radius = 0;
 801033a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801033e:	2b00      	cmp	r3, #0
 8010340:	da01      	bge.n	8010346 <lv_draw_mask_radius_init+0x5a>
 8010342:	2300      	movs	r3, #0
 8010344:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	3308      	adds	r3, #8
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	4618      	mov	r0, r3
 801034e:	f7ff fbb4 	bl	800faba <lv_area_copy>
    param->cfg.radius = radius;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	88fa      	ldrh	r2, [r7, #6]
 8010356:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 8010358:	7979      	ldrb	r1, [r7, #5]
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	7c93      	ldrb	r3, [r2, #18]
 801035e:	f361 0300 	bfi	r3, r1, #0, #1
 8010362:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	4a6d      	ldr	r2, [pc, #436]	; (801051c <lv_draw_mask_radius_init+0x230>)
 8010368:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2202      	movs	r2, #2
 801036e:	711a      	strb	r2, [r3, #4]

    if(radius == 0) {
 8010370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d103      	bne.n	8010380 <lv_draw_mask_radius_init+0x94>
        param->circle = NULL;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2200      	movs	r2, #0
 801037c:	615a      	str	r2, [r3, #20]
        return;
 801037e:	e0c9      	b.n	8010514 <lv_draw_mask_radius_init+0x228>
    }

    uint32_t i;

    /*Try to reuse a circle cache entry*/
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8010380:	2300      	movs	r3, #0
 8010382:	61fb      	str	r3, [r7, #28]
 8010384:	e050      	b.n	8010428 <lv_draw_mask_radius_init+0x13c>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 8010386:	4966      	ldr	r1, [pc, #408]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 8010388:	69fa      	ldr	r2, [r7, #28]
 801038a:	4613      	mov	r3, r2
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	1a9b      	subs	r3, r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	440b      	add	r3, r1
 8010394:	3318      	adds	r3, #24
 8010396:	f9b3 3000 	ldrsh.w	r3, [r3]
 801039a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801039e:	429a      	cmp	r2, r3
 80103a0:	d13f      	bne.n	8010422 <lv_draw_mask_radius_init+0x136>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 80103a2:	495f      	ldr	r1, [pc, #380]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 80103a4:	69fa      	ldr	r2, [r7, #28]
 80103a6:	4613      	mov	r3, r2
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	1a9b      	subs	r3, r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	440b      	add	r3, r1
 80103b0:	3314      	adds	r3, #20
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	1c59      	adds	r1, r3, #1
 80103b6:	485a      	ldr	r0, [pc, #360]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 80103b8:	69fa      	ldr	r2, [r7, #28]
 80103ba:	4613      	mov	r3, r2
 80103bc:	00db      	lsls	r3, r3, #3
 80103be:	1a9b      	subs	r3, r3, r2
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	4403      	add	r3, r0
 80103c4:	3314      	adds	r3, #20
 80103c6:	6019      	str	r1, [r3, #0]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 80103c8:	4955      	ldr	r1, [pc, #340]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 80103ca:	69fa      	ldr	r2, [r7, #28]
 80103cc:	4613      	mov	r3, r2
 80103ce:	00db      	lsls	r3, r3, #3
 80103d0:	1a9b      	subs	r3, r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	440b      	add	r3, r1
 80103d6:	3310      	adds	r3, #16
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80103de:	2a0f      	cmp	r2, #15
 80103e0:	dd04      	ble.n	80103ec <lv_draw_mask_radius_init+0x100>
 80103e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80103e6:	1112      	asrs	r2, r2, #4
 80103e8:	b212      	sxth	r2, r2
 80103ea:	e000      	b.n	80103ee <lv_draw_mask_radius_init+0x102>
 80103ec:	2201      	movs	r2, #1
 80103ee:	4413      	add	r3, r2
 80103f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80103f4:	bfa8      	it	ge
 80103f6:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80103fa:	4619      	mov	r1, r3
 80103fc:	4848      	ldr	r0, [pc, #288]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 80103fe:	69fa      	ldr	r2, [r7, #28]
 8010400:	4613      	mov	r3, r2
 8010402:	00db      	lsls	r3, r3, #3
 8010404:	1a9b      	subs	r3, r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4403      	add	r3, r0
 801040a:	3310      	adds	r3, #16
 801040c:	6019      	str	r1, [r3, #0]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 801040e:	69fa      	ldr	r2, [r7, #28]
 8010410:	4613      	mov	r3, r2
 8010412:	00db      	lsls	r3, r3, #3
 8010414:	1a9b      	subs	r3, r3, r2
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	4a41      	ldr	r2, [pc, #260]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 801041a:	441a      	add	r2, r3
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	615a      	str	r2, [r3, #20]
            return;
 8010420:	e078      	b.n	8010514 <lv_draw_mask_radius_init+0x228>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	3301      	adds	r3, #1
 8010426:	61fb      	str	r3, [r7, #28]
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	2b03      	cmp	r3, #3
 801042c:	d9ab      	bls.n	8010386 <lv_draw_mask_radius_init+0x9a>
        }
    }

    /*If not found find a free entry with lowest life*/
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 801042e:	2300      	movs	r3, #0
 8010430:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8010432:	2300      	movs	r3, #0
 8010434:	61fb      	str	r3, [r7, #28]
 8010436:	e02e      	b.n	8010496 <lv_draw_mask_radius_init+0x1aa>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 8010438:	4939      	ldr	r1, [pc, #228]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 801043a:	69fa      	ldr	r2, [r7, #28]
 801043c:	4613      	mov	r3, r2
 801043e:	00db      	lsls	r3, r3, #3
 8010440:	1a9b      	subs	r3, r3, r2
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	440b      	add	r3, r1
 8010446:	3314      	adds	r3, #20
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d120      	bne.n	8010490 <lv_draw_mask_radius_init+0x1a4>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d108      	bne.n	8010466 <lv_draw_mask_radius_init+0x17a>
 8010454:	69fa      	ldr	r2, [r7, #28]
 8010456:	4613      	mov	r3, r2
 8010458:	00db      	lsls	r3, r3, #3
 801045a:	1a9b      	subs	r3, r3, r2
 801045c:	009b      	lsls	r3, r3, #2
 801045e:	4a30      	ldr	r2, [pc, #192]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 8010460:	4413      	add	r3, r2
 8010462:	61bb      	str	r3, [r7, #24]
 8010464:	e014      	b.n	8010490 <lv_draw_mask_radius_init+0x1a4>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8010466:	492e      	ldr	r1, [pc, #184]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 8010468:	69fa      	ldr	r2, [r7, #28]
 801046a:	4613      	mov	r3, r2
 801046c:	00db      	lsls	r3, r3, #3
 801046e:	1a9b      	subs	r3, r3, r2
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	440b      	add	r3, r1
 8010474:	3310      	adds	r3, #16
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	691b      	ldr	r3, [r3, #16]
 801047c:	429a      	cmp	r2, r3
 801047e:	da07      	bge.n	8010490 <lv_draw_mask_radius_init+0x1a4>
 8010480:	69fa      	ldr	r2, [r7, #28]
 8010482:	4613      	mov	r3, r2
 8010484:	00db      	lsls	r3, r3, #3
 8010486:	1a9b      	subs	r3, r3, r2
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	4a25      	ldr	r2, [pc, #148]	; (8010520 <lv_draw_mask_radius_init+0x234>)
 801048c:	4413      	add	r3, r2
 801048e:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	3301      	adds	r3, #1
 8010494:	61fb      	str	r3, [r7, #28]
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	2b03      	cmp	r3, #3
 801049a:	d9cd      	bls.n	8010438 <lv_draw_mask_radius_init+0x14c>
        }
    }

    if(!entry) {
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d110      	bne.n	80104c4 <lv_draw_mask_radius_init+0x1d8>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 80104a2:	201c      	movs	r0, #28
 80104a4:	f00f fd7a 	bl	801ff9c <lv_mem_alloc>
 80104a8:	61b8      	str	r0, [r7, #24]
        LV_ASSERT_MALLOC(entry);
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d100      	bne.n	80104b2 <lv_draw_mask_radius_init+0x1c6>
 80104b0:	e7fe      	b.n	80104b0 <lv_draw_mask_radius_init+0x1c4>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 80104b2:	211c      	movs	r1, #28
 80104b4:	69b8      	ldr	r0, [r7, #24]
 80104b6:	f010 f9a5 	bl	8020804 <lv_memset_00>
        entry->life = -1;
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104c0:	611a      	str	r2, [r3, #16]
 80104c2:	e01c      	b.n	80104fe <lv_draw_mask_radius_init+0x212>
    }
    else {
        entry->used_cnt++;
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	1c5a      	adds	r2, r3, #1
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	615a      	str	r2, [r3, #20]
        entry->life = 0;
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	2200      	movs	r2, #0
 80104d2:	611a      	str	r2, [r3, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	691b      	ldr	r3, [r3, #16]
 80104d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80104dc:	2a0f      	cmp	r2, #15
 80104de:	dd04      	ble.n	80104ea <lv_draw_mask_radius_init+0x1fe>
 80104e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80104e4:	1112      	asrs	r2, r2, #4
 80104e6:	b212      	sxth	r2, r2
 80104e8:	e000      	b.n	80104ec <lv_draw_mask_radius_init+0x200>
 80104ea:	2201      	movs	r2, #1
 80104ec:	4413      	add	r3, r2
 80104ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80104f2:	bfa8      	it	ge
 80104f4:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80104f8:	461a      	mov	r2, r3
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	611a      	str	r2, [r3, #16]
    }

    param->circle = entry;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	69ba      	ldr	r2, [r7, #24]
 8010502:	615a      	str	r2, [r3, #20]

    circ_calc_aa4(param->circle, radius);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	695b      	ldr	r3, [r3, #20]
 8010508:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801050c:	4611      	mov	r1, r2
 801050e:	4618      	mov	r0, r3
 8010510:	f001 fae6 	bl	8011ae0 <circ_calc_aa4>
}
 8010514:	3720      	adds	r7, #32
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	080114a5 	.word	0x080114a5
 8010520:	200008fc 	.word	0x200008fc

08010524 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b08a      	sub	sp, #40	; 0x28
 8010528:	af02      	add	r7, sp, #8
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	4608      	mov	r0, r1
 801052e:	4611      	mov	r1, r2
 8010530:	461a      	mov	r2, r3
 8010532:	4603      	mov	r3, r0
 8010534:	817b      	strh	r3, [r7, #10]
 8010536:	460b      	mov	r3, r1
 8010538:	813b      	strh	r3, [r7, #8]
 801053a:	4613      	mov	r3, r2
 801053c:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 801053e:	893a      	ldrh	r2, [r7, #8]
 8010540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010542:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010546:	b29b      	uxth	r3, r3
 8010548:	1ad3      	subs	r3, r2, r3
 801054a:	b29b      	uxth	r3, r3
 801054c:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 801054e:	897a      	ldrh	r2, [r7, #10]
 8010550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010552:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010556:	b29b      	uxth	r3, r3
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	b29b      	uxth	r3, r3
 801055c:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 801055e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010560:	6a1b      	ldr	r3, [r3, #32]
 8010562:	2b00      	cmp	r3, #0
 8010564:	f040 80a7 	bne.w	80106b6 <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801056e:	f003 0301 	and.w	r3, r3, #1
 8010572:	b2db      	uxtb	r3, r3
 8010574:	2b00      	cmp	r3, #0
 8010576:	d02c      	beq.n	80105d2 <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8010578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057a:	7c1b      	ldrb	r3, [r3, #16]
 801057c:	f003 0303 	and.w	r3, r3, #3
 8010580:	b2db      	uxtb	r3, r3
 8010582:	2b00      	cmp	r3, #0
 8010584:	d006      	beq.n	8010594 <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8010586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010588:	7c1b      	ldrb	r3, [r3, #16]
 801058a:	f003 0303 	and.w	r3, r3, #3
 801058e:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8010590:	2b01      	cmp	r3, #1
 8010592:	d101      	bne.n	8010598 <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8010594:	2301      	movs	r3, #1
 8010596:	e0b4      	b.n	8010702 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8010598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059a:	7c1b      	ldrb	r3, [r3, #16]
 801059c:	f003 0303 	and.w	r3, r3, #3
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	d106      	bne.n	80105b4 <lv_draw_mask_line+0x90>
 80105a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80105aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105ae:	da01      	bge.n	80105b4 <lv_draw_mask_line+0x90>
 80105b0:	2301      	movs	r3, #1
 80105b2:	e0a6      	b.n	8010702 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80105b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b6:	7c1b      	ldrb	r3, [r3, #16]
 80105b8:	f003 0303 	and.w	r3, r3, #3
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	2b03      	cmp	r3, #3
 80105c0:	d105      	bne.n	80105ce <lv_draw_mask_line+0xaa>
 80105c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	dd01      	ble.n	80105ce <lv_draw_mask_line+0xaa>
 80105ca:	2301      	movs	r3, #1
 80105cc:	e099      	b.n	8010702 <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80105ce:	2300      	movs	r3, #0
 80105d0:	e097      	b.n	8010702 <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	7c1b      	ldrb	r3, [r3, #16]
 80105d6:	f003 0303 	and.w	r3, r3, #3
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b02      	cmp	r3, #2
 80105de:	d006      	beq.n	80105ee <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 80105e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e2:	7c1b      	ldrb	r3, [r3, #16]
 80105e4:	f003 0303 	and.w	r3, r3, #3
 80105e8:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 80105ea:	2b03      	cmp	r3, #3
 80105ec:	d101      	bne.n	80105f2 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 80105ee:	2301      	movs	r3, #1
 80105f0:	e087      	b.n	8010702 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80105f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f4:	7c1b      	ldrb	r3, [r3, #16]
 80105f6:	f003 0303 	and.w	r3, r3, #3
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d105      	bne.n	801060c <lv_draw_mask_line+0xe8>
 8010600:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010604:	2b00      	cmp	r3, #0
 8010606:	dd01      	ble.n	801060c <lv_draw_mask_line+0xe8>
 8010608:	2301      	movs	r3, #1
 801060a:	e07a      	b.n	8010702 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 801060c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060e:	7c1b      	ldrb	r3, [r3, #16]
 8010610:	f003 0303 	and.w	r3, r3, #3
 8010614:	b2db      	uxtb	r3, r3
 8010616:	2b00      	cmp	r3, #0
 8010618:	d125      	bne.n	8010666 <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801061a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801061e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010622:	4413      	add	r3, r2
 8010624:	2b00      	cmp	r3, #0
 8010626:	da01      	bge.n	801062c <lv_draw_mask_line+0x108>
 8010628:	2301      	movs	r3, #1
 801062a:	e06a      	b.n	8010702 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 801062c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010630:	425b      	negs	r3, r3
 8010632:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2b00      	cmp	r3, #0
 8010638:	da01      	bge.n	801063e <lv_draw_mask_line+0x11a>
 801063a:	2300      	movs	r3, #0
 801063c:	e061      	b.n	8010702 <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	2b00      	cmp	r3, #0
 8010642:	db0e      	blt.n	8010662 <lv_draw_mask_line+0x13e>
 8010644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010648:	697a      	ldr	r2, [r7, #20]
 801064a:	429a      	cmp	r2, r3
 801064c:	da09      	bge.n	8010662 <lv_draw_mask_line+0x13e>
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	68fa      	ldr	r2, [r7, #12]
 8010652:	18d0      	adds	r0, r2, r3
 8010654:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	4619      	mov	r1, r3
 801065e:	f010 f8d1 	bl	8020804 <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8010662:	2302      	movs	r3, #2
 8010664:	e04d      	b.n	8010702 <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 8010666:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801066a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801066e:	4413      	add	r3, r2
 8010670:	2b00      	cmp	r3, #0
 8010672:	da01      	bge.n	8010678 <lv_draw_mask_line+0x154>
 8010674:	2300      	movs	r3, #0
 8010676:	e044      	b.n	8010702 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 8010678:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801067c:	425b      	negs	r3, r3
 801067e:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	2b00      	cmp	r3, #0
 8010684:	da01      	bge.n	801068a <lv_draw_mask_line+0x166>
 8010686:	2300      	movs	r3, #0
 8010688:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801068a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801068e:	69fa      	ldr	r2, [r7, #28]
 8010690:	429a      	cmp	r2, r3
 8010692:	db01      	blt.n	8010698 <lv_draw_mask_line+0x174>
 8010694:	2300      	movs	r3, #0
 8010696:	e034      	b.n	8010702 <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	2b00      	cmp	r3, #0
 801069c:	db09      	blt.n	80106b2 <lv_draw_mask_line+0x18e>
 801069e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80106a2:	69fa      	ldr	r2, [r7, #28]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	da04      	bge.n	80106b2 <lv_draw_mask_line+0x18e>
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	4619      	mov	r1, r3
 80106ac:	68f8      	ldr	r0, [r7, #12]
 80106ae:	f010 f8a9 	bl	8020804 <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 80106b2:	2302      	movs	r3, #2
 80106b4:	e025      	b.n	8010702 <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 80106b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106bc:	f003 0301 	and.w	r3, r3, #1
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d00e      	beq.n	80106e4 <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 80106c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80106ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80106ce:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80106d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	4603      	mov	r3, r0
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f000 f816 	bl	801070a <line_mask_flat>
 80106de:	4603      	mov	r3, r0
 80106e0:	76fb      	strb	r3, [r7, #27]
 80106e2:	e00d      	b.n	8010700 <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 80106e4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80106e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80106ec:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80106f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	4603      	mov	r3, r0
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f000 f991 	bl	8010a1e <line_mask_steep>
 80106fc:	4603      	mov	r3, r0
 80106fe:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 8010700:	7efb      	ldrb	r3, [r7, #27]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3720      	adds	r7, #32
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 801070a:	b590      	push	{r4, r7, lr}
 801070c:	b08d      	sub	sp, #52	; 0x34
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	4608      	mov	r0, r1
 8010714:	4611      	mov	r1, r2
 8010716:	461a      	mov	r2, r3
 8010718:	4603      	mov	r3, r0
 801071a:	817b      	strh	r3, [r7, #10]
 801071c:	460b      	mov	r3, r1
 801071e:	813b      	strh	r3, [r7, #8]
 8010720:	4613      	mov	r3, r2
 8010722:	80fb      	strh	r3, [r7, #6]

    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8010724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010726:	69db      	ldr	r3, [r3, #28]
 8010728:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801072c:	fb02 f303 	mul.w	r3, r2, r3
 8010730:	129b      	asrs	r3, r3, #10
 8010732:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 8010734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010736:	69db      	ldr	r3, [r3, #28]
 8010738:	2b00      	cmp	r3, #0
 801073a:	dd10      	ble.n	801075e <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 801073c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010740:	69fa      	ldr	r2, [r7, #28]
 8010742:	429a      	cmp	r2, r3
 8010744:	dd1c      	ble.n	8010780 <line_mask_flat+0x76>
            if(p->inv) {
 8010746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801074c:	f003 0302 	and.w	r3, r3, #2
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d001      	beq.n	801075a <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 8010756:	2301      	movs	r3, #1
 8010758:	e15d      	b.n	8010a16 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 801075a:	2300      	movs	r3, #0
 801075c:	e15b      	b.n	8010a16 <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 801075e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010762:	69fa      	ldr	r2, [r7, #28]
 8010764:	429a      	cmp	r2, r3
 8010766:	da0b      	bge.n	8010780 <line_mask_flat+0x76>
            if(p->inv) {
 8010768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801076a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801076e:	f003 0302 	and.w	r3, r3, #2
 8010772:	b2db      	uxtb	r3, r3
 8010774:	2b00      	cmp	r3, #0
 8010776:	d001      	beq.n	801077c <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 8010778:	2301      	movs	r3, #1
 801077a:	e14c      	b.n	8010a16 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 801077c:	2300      	movs	r3, #0
 801077e:	e14a      	b.n	8010a16 <line_mask_flat+0x30c>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 8010780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010782:	69db      	ldr	r3, [r3, #28]
 8010784:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010788:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801078c:	440a      	add	r2, r1
 801078e:	fb02 f303 	mul.w	r3, r2, r3
 8010792:	129b      	asrs	r3, r3, #10
 8010794:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 8010796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010798:	69db      	ldr	r3, [r3, #28]
 801079a:	2b00      	cmp	r3, #0
 801079c:	dd10      	ble.n	80107c0 <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 801079e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80107a2:	69fa      	ldr	r2, [r7, #28]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	da1c      	bge.n	80107e2 <line_mask_flat+0xd8>
            if(p->inv) {
 80107a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107ae:	f003 0302 	and.w	r3, r3, #2
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 80107b8:	2300      	movs	r3, #0
 80107ba:	e12c      	b.n	8010a16 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 80107bc:	2301      	movs	r3, #1
 80107be:	e12a      	b.n	8010a16 <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 80107c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80107c4:	69fa      	ldr	r2, [r7, #28]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	dd0b      	ble.n	80107e2 <line_mask_flat+0xd8>
            if(p->inv) {
 80107ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107d0:	f003 0302 	and.w	r3, r3, #2
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d001      	beq.n	80107de <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 80107da:	2300      	movs	r3, #0
 80107dc:	e11b      	b.n	8010a16 <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 80107de:	2301      	movs	r3, #1
 80107e0:	e119      	b.n	8010a16 <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 80107e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e4:	69db      	ldr	r3, [r3, #28]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	dd09      	ble.n	80107fe <line_mask_flat+0xf4>
 80107ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80107ee:	021b      	lsls	r3, r3, #8
 80107f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107f2:	6992      	ldr	r2, [r2, #24]
 80107f4:	fb02 f303 	mul.w	r3, r2, r3
 80107f8:	129b      	asrs	r3, r3, #10
 80107fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107fc:	e009      	b.n	8010812 <line_mask_flat+0x108>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 80107fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010802:	3301      	adds	r3, #1
 8010804:	021b      	lsls	r3, r3, #8
 8010806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010808:	6992      	ldr	r2, [r2, #24]
 801080a:	fb02 f303 	mul.w	r3, r2, r3
 801080e:	129b      	asrs	r3, r3, #10
 8010810:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 8010812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010814:	121b      	asrs	r3, r3, #8
 8010816:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 8010818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081a:	b2db      	uxtb	r3, r3
 801081c:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d102      	bne.n	801082a <line_mask_flat+0x120>
 8010824:	23ff      	movs	r3, #255	; 0xff
 8010826:	62bb      	str	r3, [r7, #40]	; 0x28
 8010828:	e00a      	b.n	8010840 <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010832:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010834:	fb02 f303 	mul.w	r3, r2, r3
 8010838:	121b      	asrs	r3, r3, #8
 801083a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801083e:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 8010840:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010844:	69ba      	ldr	r2, [r7, #24]
 8010846:	1ad3      	subs	r3, r2, r3
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d06c      	beq.n	801092a <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 8010850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010852:	2b00      	cmp	r3, #0
 8010854:	db2c      	blt.n	80108b0 <line_mask_flat+0x1a6>
 8010856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801085a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801085c:	429a      	cmp	r2, r3
 801085e:	da27      	bge.n	80108b0 <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010868:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801086c:	fb02 f303 	mul.w	r3, r2, r3
 8010870:	125b      	asrs	r3, r3, #9
 8010872:	b2db      	uxtb	r3, r3
 8010874:	43db      	mvns	r3, r3
 8010876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 801087a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801087c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010880:	f003 0302 	and.w	r3, r3, #2
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b00      	cmp	r3, #0
 8010888:	d004      	beq.n	8010894 <line_mask_flat+0x18a>
 801088a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801088e:	43db      	mvns	r3, r3
 8010890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	68fa      	ldr	r2, [r7, #12]
 8010898:	4413      	add	r3, r2
 801089a:	7818      	ldrb	r0, [r3, #0]
 801089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089e:	68fa      	ldr	r2, [r7, #12]
 80108a0:	18d4      	adds	r4, r2, r3
 80108a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80108a6:	4619      	mov	r1, r3
 80108a8:	f001 fc9a 	bl	80121e0 <mask_mix>
 80108ac:	4603      	mov	r3, r0
 80108ae:	7023      	strb	r3, [r4, #0]
        }
        k++;
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	3301      	adds	r3, #1
 80108b4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 80108b6:	e038      	b.n	801092a <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 80108b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	db28      	blt.n	8010910 <line_mask_flat+0x206>
 80108be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80108c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108c4:	429a      	cmp	r2, r3
 80108c6:	da23      	bge.n	8010910 <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 80108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ca:	b2da      	uxtb	r2, r3
 80108cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d0:	105b      	asrs	r3, r3, #1
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 80108da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108e0:	f003 0302 	and.w	r3, r3, #2
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d004      	beq.n	80108f4 <line_mask_flat+0x1ea>
 80108ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80108ee:	43db      	mvns	r3, r3
 80108f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	4413      	add	r3, r2
 80108fa:	7818      	ldrb	r0, [r3, #0]
 80108fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	18d4      	adds	r4, r2, r3
 8010902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010906:	4619      	mov	r1, r3
 8010908:	f001 fc6a 	bl	80121e0 <mask_mix>
 801090c:	4603      	mov	r3, r0
 801090e:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 8010910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010916:	1ad3      	subs	r3, r2, r3
 8010918:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 801091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091c:	3301      	adds	r3, #1
 801091e:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 8010920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010926:	429a      	cmp	r2, r3
 8010928:	da05      	bge.n	8010936 <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 801092a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801092e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010930:	429a      	cmp	r2, r3
 8010932:	dcc1      	bgt.n	80108b8 <line_mask_flat+0x1ae>
 8010934:	e000      	b.n	8010938 <line_mask_flat+0x22e>
        if(k >= len) break;
 8010936:	bf00      	nop
    }

    if(k < len && k >= 0) {
 8010938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801093c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801093e:	429a      	cmp	r2, r3
 8010940:	da34      	bge.n	80109ac <line_mask_flat+0x2a2>
 8010942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010944:	2b00      	cmp	r3, #0
 8010946:	db31      	blt.n	80109ac <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 8010948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801094a:	699b      	ldr	r3, [r3, #24]
 801094c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801094e:	fb02 f303 	mul.w	r3, r2, r3
 8010952:	129b      	asrs	r3, r3, #10
 8010954:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801095a:	fb02 f303 	mul.w	r3, r2, r3
 801095e:	125b      	asrs	r3, r3, #9
 8010960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 8010964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010966:	69db      	ldr	r3, [r3, #28]
 8010968:	2b00      	cmp	r3, #0
 801096a:	da04      	bge.n	8010976 <line_mask_flat+0x26c>
 801096c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010970:	43db      	mvns	r3, r3
 8010972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 8010976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801097c:	f003 0302 	and.w	r3, r3, #2
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	d004      	beq.n	8010990 <line_mask_flat+0x286>
 8010986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801098a:	43db      	mvns	r3, r3
 801098c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	68fa      	ldr	r2, [r7, #12]
 8010994:	4413      	add	r3, r2
 8010996:	7818      	ldrb	r0, [r3, #0]
 8010998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	18d4      	adds	r4, r2, r3
 801099e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80109a2:	4619      	mov	r1, r3
 80109a4:	f001 fc1c 	bl	80121e0 <mask_mix>
 80109a8:	4603      	mov	r3, r0
 80109aa:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 80109ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109b2:	f003 0302 	and.w	r3, r3, #2
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d014      	beq.n	80109e6 <line_mask_flat+0x2dc>
        k = xei - abs_x;
 80109bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80109c0:	69ba      	ldr	r2, [r7, #24]
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 80109c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109cc:	429a      	cmp	r2, r3
 80109ce:	dd01      	ble.n	80109d4 <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 80109d0:	2300      	movs	r3, #0
 80109d2:	e020      	b.n	8010a16 <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	db1c      	blt.n	8010a14 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[0], k);
 80109da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109dc:	4619      	mov	r1, r3
 80109de:	68f8      	ldr	r0, [r7, #12]
 80109e0:	f00f ff10 	bl	8020804 <lv_memset_00>
 80109e4:	e016      	b.n	8010a14 <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 80109e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e8:	3301      	adds	r3, #1
 80109ea:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	da01      	bge.n	80109f6 <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 80109f2:	2300      	movs	r3, #0
 80109f4:	e00f      	b.n	8010a16 <line_mask_flat+0x30c>
        }
        if(k <= len) {
 80109f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109fc:	429a      	cmp	r2, r3
 80109fe:	dc09      	bgt.n	8010a14 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[k], len - k);
 8010a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a02:	68fa      	ldr	r2, [r7, #12]
 8010a04:	18d0      	adds	r0, r2, r3
 8010a06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0c:	1ad3      	subs	r3, r2, r3
 8010a0e:	4619      	mov	r1, r3
 8010a10:	f00f fef8 	bl	8020804 <lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8010a14:	2302      	movs	r3, #2
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3734      	adds	r7, #52	; 0x34
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd90      	pop	{r4, r7, pc}

08010a1e <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 8010a1e:	b590      	push	{r4, r7, lr}
 8010a20:	b091      	sub	sp, #68	; 0x44
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	60f8      	str	r0, [r7, #12]
 8010a26:	4608      	mov	r0, r1
 8010a28:	4611      	mov	r1, r2
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	817b      	strh	r3, [r7, #10]
 8010a30:	460b      	mov	r3, r1
 8010a32:	813b      	strh	r3, [r7, #8]
 8010a34:	4613      	mov	r3, r2
 8010a36:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /*At the beginning of the mask if the limit line is greater than the mask's y.
     *Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 8010a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a3a:	699b      	ldr	r3, [r3, #24]
 8010a3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010a40:	fb02 f303 	mul.w	r3, r2, r3
 8010a44:	129b      	asrs	r3, r3, #10
 8010a46:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 8010a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a4a:	699b      	ldr	r3, [r3, #24]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	dd02      	ble.n	8010a56 <line_mask_steep+0x38>
 8010a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a52:	3301      	adds	r3, #1
 8010a54:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 8010a56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	da0b      	bge.n	8010a78 <line_mask_steep+0x5a>
        if(p->inv) {
 8010a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a66:	f003 0302 	and.w	r3, r3, #2
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d001      	beq.n	8010a74 <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8010a70:	2301      	movs	r3, #1
 8010a72:	e213      	b.n	8010e9c <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 8010a74:	2300      	movs	r3, #0
 8010a76:	e211      	b.n	8010e9c <line_mask_steep+0x47e>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 8010a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a7a:	699b      	ldr	r3, [r3, #24]
 8010a7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010a80:	fb02 f303 	mul.w	r3, r2, r3
 8010a84:	129b      	asrs	r3, r3, #10
 8010a86:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 8010a88:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8010a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a90:	4413      	add	r3, r2
 8010a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a94:	429a      	cmp	r2, r3
 8010a96:	dd0b      	ble.n	8010ab0 <line_mask_steep+0x92>
        if(p->inv) {
 8010a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a9e:	f003 0302 	and.w	r3, r3, #2
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d001      	beq.n	8010aac <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	e1f7      	b.n	8010e9c <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 8010aac:	2301      	movs	r3, #1
 8010aae:	e1f5      	b.n	8010e9c <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y * 256) * p->xy_steep) >> 10;
 8010ab0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010ab4:	021b      	lsls	r3, r3, #8
 8010ab6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ab8:	6992      	ldr	r2, [r2, #24]
 8010aba:	fb02 f303 	mul.w	r3, r2, r3
 8010abe:	129b      	asrs	r3, r3, #10
 8010ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 8010ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac4:	121b      	asrs	r3, r3, #8
 8010ac6:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 8010ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8010ace:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	021b      	lsls	r3, r3, #8
 8010ad6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ad8:	6992      	ldr	r2, [r2, #24]
 8010ada:	fb02 f303 	mul.w	r3, r2, r3
 8010ade:	129b      	asrs	r3, r3, #10
 8010ae0:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 8010ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae4:	121b      	asrs	r3, r3, #8
 8010ae6:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 8010aee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 8010af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010afa:	6a3b      	ldr	r3, [r7, #32]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d00d      	beq.n	8010b1c <line_mask_steep+0xfe>
 8010b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b02:	699b      	ldr	r3, [r3, #24]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	da09      	bge.n	8010b1c <line_mask_steep+0xfe>
 8010b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d106      	bne.n	8010b1c <line_mask_steep+0xfe>
        xsf = 0xFF;
 8010b0e:	23ff      	movs	r3, #255	; 0xff
 8010b10:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 8010b12:	6a3b      	ldr	r3, [r7, #32]
 8010b14:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 8010b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 8010b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b1e:	6a3b      	ldr	r3, [r7, #32]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d165      	bne.n	8010bf0 <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 8010b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	db25      	blt.n	8010b76 <line_mask_steep+0x158>
 8010b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b30:	429a      	cmp	r2, r3
 8010b32:	da20      	bge.n	8010b76 <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 8010b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	4413      	add	r3, r2
 8010b3a:	105b      	asrs	r3, r3, #1
 8010b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 8010b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b46:	f003 0302 	and.w	r3, r3, #2
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d004      	beq.n	8010b5a <line_mask_steep+0x13c>
 8010b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b54:	43db      	mvns	r3, r3
 8010b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8010b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	4413      	add	r3, r2
 8010b60:	7818      	ldrb	r0, [r3, #0]
 8010b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	18d4      	adds	r4, r2, r3
 8010b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	f001 fb37 	bl	80121e0 <mask_mix>
 8010b72:	4603      	mov	r3, r0
 8010b74:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8010b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b78:	3301      	adds	r3, #1
 8010b7a:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 8010b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b82:	f003 0302 	and.w	r3, r3, #2
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d015      	beq.n	8010bb8 <line_mask_steep+0x19a>
            k = xsi - abs_x;
 8010b8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b92:	1ad3      	subs	r3, r2, r3
 8010b94:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 8010b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	db01      	blt.n	8010ba4 <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	e17b      	b.n	8010e9c <line_mask_steep+0x47e>
            }
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 8010ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f2c0 8177 	blt.w	8010e9a <line_mask_steep+0x47c>
 8010bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bae:	4619      	mov	r1, r3
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f00f fe27 	bl	8020804 <lv_memset_00>
 8010bb6:	e170      	b.n	8010e9a <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 8010bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	dd02      	ble.n	8010bc8 <line_mask_steep+0x1aa>
 8010bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8010bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <line_mask_steep+0x1b4>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e164      	b.n	8010e9c <line_mask_steep+0x47e>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8010bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	f340 8160 	ble.w	8010e9a <line_mask_steep+0x47c>
 8010bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bdc:	68fa      	ldr	r2, [r7, #12]
 8010bde:	18d0      	adds	r0, r2, r3
 8010be0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be6:	1ad3      	subs	r3, r2, r3
 8010be8:	4619      	mov	r1, r3
 8010bea:	f00f fe0b 	bl	8020804 <lv_memset_00>
 8010bee:	e154      	b.n	8010e9a <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 8010bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bf2:	699b      	ldr	r3, [r3, #24]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	f280 80a7 	bge.w	8010d48 <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 8010bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bfc:	69db      	ldr	r3, [r3, #28]
 8010bfe:	425b      	negs	r3, r3
 8010c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c02:	fb02 f303 	mul.w	r3, r2, r3
 8010c06:	129b      	asrs	r3, r3, #10
 8010c08:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8010c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	db26      	blt.n	8010c5e <line_mask_steep+0x240>
 8010c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c16:	429a      	cmp	r2, r3
 8010c18:	da21      	bge.n	8010c5e <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c1e:	fb02 f303 	mul.w	r3, r2, r3
 8010c22:	125b      	asrs	r3, r3, #9
 8010c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8010c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c2e:	f003 0302 	and.w	r3, r3, #2
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d004      	beq.n	8010c42 <line_mask_steep+0x224>
 8010c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c3c:	43db      	mvns	r3, r3
 8010c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8010c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c44:	68fa      	ldr	r2, [r7, #12]
 8010c46:	4413      	add	r3, r2
 8010c48:	7818      	ldrb	r0, [r3, #0]
 8010c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	18d4      	adds	r4, r2, r3
 8010c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c54:	4619      	mov	r1, r3
 8010c56:	f001 fac3 	bl	80121e0 <mask_mix>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	7023      	strb	r3, [r4, #0]
            }
            k--;
 8010c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c60:	3b01      	subs	r3, #1
 8010c62:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 8010c64:	69bb      	ldr	r3, [r7, #24]
 8010c66:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010c6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c6c:	6992      	ldr	r2, [r2, #24]
 8010c6e:	4252      	negs	r2, r2
 8010c70:	fb02 f303 	mul.w	r3, r2, r3
 8010c74:	129b      	asrs	r3, r3, #10
 8010c76:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 8010c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	db2a      	blt.n	8010cd4 <line_mask_steep+0x2b6>
 8010c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c84:	429a      	cmp	r2, r3
 8010c86:	da25      	bge.n	8010cd4 <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8010c88:	69bb      	ldr	r3, [r7, #24]
 8010c8a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010c8e:	693a      	ldr	r2, [r7, #16]
 8010c90:	fb02 f303 	mul.w	r3, r2, r3
 8010c94:	125b      	asrs	r3, r3, #9
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	43db      	mvns	r3, r3
 8010c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8010c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ca4:	f003 0302 	and.w	r3, r3, #2
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d004      	beq.n	8010cb8 <line_mask_steep+0x29a>
 8010cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cb2:	43db      	mvns	r3, r3
 8010cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8010cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cba:	68fa      	ldr	r2, [r7, #12]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	7818      	ldrb	r0, [r3, #0]
 8010cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cc2:	68fa      	ldr	r2, [r7, #12]
 8010cc4:	18d4      	adds	r4, r2, r3
 8010cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cca:	4619      	mov	r1, r3
 8010ccc:	f001 fa88 	bl	80121e0 <mask_mix>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 8010cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cd6:	3302      	adds	r3, #2
 8010cd8:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8010cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ce0:	f003 0302 	and.w	r3, r3, #2
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d018      	beq.n	8010d1c <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 8010cea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cf0:	1ad3      	subs	r3, r2, r3
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 8010cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	dd03      	ble.n	8010d08 <line_mask_steep+0x2ea>
 8010d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d06:	e0c8      	b.n	8010e9a <line_mask_steep+0x47c>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 8010d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	f340 80c5 	ble.w	8010e9a <line_mask_steep+0x47c>
 8010d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d12:	4619      	mov	r1, r3
 8010d14:	68f8      	ldr	r0, [r7, #12]
 8010d16:	f00f fd75 	bl	8020804 <lv_memset_00>
 8010d1a:	e0be      	b.n	8010e9a <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8010d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d22:	429a      	cmp	r2, r3
 8010d24:	dd01      	ble.n	8010d2a <line_mask_steep+0x30c>
 8010d26:	2301      	movs	r3, #1
 8010d28:	e0b8      	b.n	8010e9c <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8010d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f2c0 80b4 	blt.w	8010e9a <line_mask_steep+0x47c>
 8010d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	18d0      	adds	r0, r2, r3
 8010d38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	4619      	mov	r1, r3
 8010d42:	f00f fd5f 	bl	8020804 <lv_memset_00>
 8010d46:	e0a8      	b.n	8010e9a <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 8010d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010d4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d50:	69d2      	ldr	r2, [r2, #28]
 8010d52:	fb02 f303 	mul.w	r3, r2, r3
 8010d56:	129b      	asrs	r3, r3, #10
 8010d58:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8010d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	db2a      	blt.n	8010db6 <line_mask_steep+0x398>
 8010d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d66:	429a      	cmp	r2, r3
 8010d68:	da25      	bge.n	8010db6 <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010d70:	69ba      	ldr	r2, [r7, #24]
 8010d72:	fb02 f303 	mul.w	r3, r2, r3
 8010d76:	125b      	asrs	r3, r3, #9
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	43db      	mvns	r3, r3
 8010d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8010d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d86:	f003 0302 	and.w	r3, r3, #2
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d004      	beq.n	8010d9a <line_mask_steep+0x37c>
 8010d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d94:	43db      	mvns	r3, r3
 8010d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8010d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d9c:	68fa      	ldr	r2, [r7, #12]
 8010d9e:	4413      	add	r3, r2
 8010da0:	7818      	ldrb	r0, [r3, #0]
 8010da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	18d4      	adds	r4, r2, r3
 8010da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010dac:	4619      	mov	r1, r3
 8010dae:	f001 fa17 	bl	80121e0 <mask_mix>
 8010db2:	4603      	mov	r3, r0
 8010db4:	7023      	strb	r3, [r4, #0]
            }

            k++;
 8010db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010db8:	3301      	adds	r3, #1
 8010dba:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8010dbc:	69bb      	ldr	r3, [r7, #24]
 8010dbe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010dc4:	6992      	ldr	r2, [r2, #24]
 8010dc6:	fb02 f303 	mul.w	r3, r2, r3
 8010dca:	129b      	asrs	r3, r3, #10
 8010dcc:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 8010dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	db28      	blt.n	8010e26 <line_mask_steep+0x408>
 8010dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	da23      	bge.n	8010e26 <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010de4:	697a      	ldr	r2, [r7, #20]
 8010de6:	fb02 f303 	mul.w	r3, r2, r3
 8010dea:	125b      	asrs	r3, r3, #9
 8010dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8010df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010df6:	f003 0302 	and.w	r3, r3, #2
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d004      	beq.n	8010e0a <line_mask_steep+0x3ec>
 8010e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e04:	43db      	mvns	r3, r3
 8010e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8010e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e0c:	68fa      	ldr	r2, [r7, #12]
 8010e0e:	4413      	add	r3, r2
 8010e10:	7818      	ldrb	r0, [r3, #0]
 8010e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e14:	68fa      	ldr	r2, [r7, #12]
 8010e16:	18d4      	adds	r4, r2, r3
 8010e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	f001 f9df 	bl	80121e0 <mask_mix>
 8010e22:	4603      	mov	r3, r0
 8010e24:	7023      	strb	r3, [r4, #0]
            }
            k++;
 8010e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e28:	3301      	adds	r3, #1
 8010e2a:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8010e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e32:	f003 0302 	and.w	r3, r3, #2
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d014      	beq.n	8010e66 <line_mask_steep+0x448>
                k = xsi - abs_x;
 8010e3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 8010e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	dd01      	ble.n	8010e54 <line_mask_steep+0x436>
 8010e50:	2300      	movs	r3, #0
 8010e52:	e023      	b.n	8010e9c <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 8010e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	db1f      	blt.n	8010e9a <line_mask_steep+0x47c>
 8010e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	f00f fcd0 	bl	8020804 <lv_memset_00>
 8010e64:	e019      	b.n	8010e9a <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 8010e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	dd02      	ble.n	8010e76 <line_mask_steep+0x458>
 8010e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e74:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8010e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d101      	bne.n	8010e80 <line_mask_steep+0x462>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	e00d      	b.n	8010e9c <line_mask_steep+0x47e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8010e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	dd09      	ble.n	8010e9a <line_mask_steep+0x47c>
 8010e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e88:	68fa      	ldr	r2, [r7, #12]
 8010e8a:	18d0      	adds	r0, r2, r3
 8010e8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e92:	1ad3      	subs	r3, r2, r3
 8010e94:	4619      	mov	r1, r3
 8010e96:	f00f fcb5 	bl	8020804 <lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8010e9a:	2302      	movs	r3, #2
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3744      	adds	r7, #68	; 0x44
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd90      	pop	{r4, r7, pc}

08010ea4 <lv_draw_mask_angle>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_angle(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                   lv_coord_t abs_y, lv_coord_t len,
                                                                   lv_draw_mask_angle_param_t * p)
{
 8010ea4:	b590      	push	{r4, r7, lr}
 8010ea6:	b097      	sub	sp, #92	; 0x5c
 8010ea8:	af02      	add	r7, sp, #8
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	4608      	mov	r0, r1
 8010eae:	4611      	mov	r1, r2
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	817b      	strh	r3, [r7, #10]
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	813b      	strh	r3, [r7, #8]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	80fb      	strh	r3, [r7, #6]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8010ebe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010ec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ec4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8010ec8:	1a9b      	subs	r3, r3, r2
 8010eca:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8010ecc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ed2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8010ed6:	1a9b      	subs	r3, r3, r2
 8010ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8010eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010edc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010ee0:	2bb3      	cmp	r3, #179	; 0xb3
 8010ee2:	f300 810c 	bgt.w	80110fe <lv_draw_mask_angle+0x25a>
 8010ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ee8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010eec:	2bb3      	cmp	r3, #179	; 0xb3
 8010eee:	f300 8106 	bgt.w	80110fe <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8010ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ef4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f000 8100 	beq.w	80110fe <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8010efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f00:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f000 80fa 	beq.w	80110fe <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle > p->cfg.end_angle) {
 8010f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f0c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8010f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8010f16:	429a      	cmp	r2, r3
 8010f18:	f340 80f1 	ble.w	80110fe <lv_draw_mask_angle+0x25a>

        if(abs_y < p->cfg.vertex_p.y) {
 8010f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f1e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010f22:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	da01      	bge.n	8010f2e <lv_draw_mask_angle+0x8a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	e2b6      	b.n	801149c <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8010f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f34:	fb02 f303 	mul.w	r3, r2, r3
 8010f38:	129b      	asrs	r3, r3, #10
 8010f3a:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8010f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3e:	3301      	adds	r3, #1
 8010f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010f42:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010f44:	fb02 f303 	mul.w	r3, r2, r3
 8010f48:	129b      	asrs	r3, r3, #10
 8010f4a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8010f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010f52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010f56:	dd0b      	ble.n	8010f70 <lv_draw_mask_angle+0xcc>
 8010f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f5a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010f5e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010f62:	da05      	bge.n	8010f70 <lv_draw_mask_angle+0xcc>
 8010f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	da02      	bge.n	8010f70 <lv_draw_mask_angle+0xcc>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f6e:	e01f      	b.n	8010fb0 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8010f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f72:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	dd0a      	ble.n	8010f90 <lv_draw_mask_angle+0xec>
 8010f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010f80:	2b5a      	cmp	r3, #90	; 0x5a
 8010f82:	dc05      	bgt.n	8010f90 <lv_draw_mask_angle+0xec>
 8010f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	da02      	bge.n	8010f90 <lv_draw_mask_angle+0xec>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f8e:	e00f      	b.n	8010fb0 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8010f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f92:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010f96:	2b5a      	cmp	r3, #90	; 0x5a
 8010f98:	dd0a      	ble.n	8010fb0 <lv_draw_mask_angle+0x10c>
 8010f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f9c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010fa0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010fa4:	da04      	bge.n	8010fb0 <lv_draw_mask_angle+0x10c>
 8010fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	dd01      	ble.n	8010fb0 <lv_draw_mask_angle+0x10c>
 8010fac:	2300      	movs	r3, #0
 8010fae:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8010fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fb2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010fb6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010fba:	dd0b      	ble.n	8010fd4 <lv_draw_mask_angle+0x130>
 8010fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fbe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010fc2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010fc6:	da05      	bge.n	8010fd4 <lv_draw_mask_angle+0x130>
 8010fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	da02      	bge.n	8010fd4 <lv_draw_mask_angle+0x130>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010fd2:	e01f      	b.n	8011014 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8010fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fd6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	dd0a      	ble.n	8010ff4 <lv_draw_mask_angle+0x150>
 8010fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fe0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010fe4:	2b5a      	cmp	r3, #90	; 0x5a
 8010fe6:	dc05      	bgt.n	8010ff4 <lv_draw_mask_angle+0x150>
 8010fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	da02      	bge.n	8010ff4 <lv_draw_mask_angle+0x150>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ff2:	e00f      	b.n	8011014 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8010ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ff6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010ffa:	2b5a      	cmp	r3, #90	; 0x5a
 8010ffc:	dd0a      	ble.n	8011014 <lv_draw_mask_angle+0x170>
 8010ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011000:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011004:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011008:	da04      	bge.n	8011014 <lv_draw_mask_angle+0x170>
 801100a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801100c:	2b00      	cmp	r3, #0
 801100e:	dd01      	ble.n	8011014 <lv_draw_mask_angle+0x170>
 8011010:	2300      	movs	r3, #0
 8011012:	64fb      	str	r3, [r7, #76]	; 0x4c

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8011014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011018:	1ad3      	subs	r3, r2, r3
 801101a:	105b      	asrs	r3, r3, #1
 801101c:	627b      	str	r3, [r7, #36]	; 0x24

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801101e:	2301      	movs	r3, #1
 8011020:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8011024:	2301      	movs	r3, #1
 8011026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        int32_t tmp = start_angle_last + dist - rel_x;
 801102a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	441a      	add	r2, r3
 8011030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011032:	1ad3      	subs	r3, r2, r3
 8011034:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > len) tmp = len;
 8011036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801103a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801103c:	429a      	cmp	r2, r3
 801103e:	dd02      	ble.n	8011046 <lv_draw_mask_angle+0x1a2>
 8011040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011044:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > 0) {
 8011046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011048:	2b00      	cmp	r3, #0
 801104a:	dd18      	ble.n	801107e <lv_draw_mask_angle+0x1da>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 801104c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801104e:	b218      	sxth	r0, r3
 8011050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011052:	3310      	adds	r3, #16
 8011054:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011058:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801105c:	9300      	str	r3, [sp, #0]
 801105e:	4603      	mov	r3, r0
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	f7ff fa5f 	bl	8010524 <lv_draw_mask_line>
 8011066:	4603      	mov	r3, r0
 8011068:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 801106c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011070:	2b00      	cmp	r3, #0
 8011072:	d104      	bne.n	801107e <lv_draw_mask_angle+0x1da>
                lv_memset_00(&mask_buf[0], tmp);
 8011074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011076:	4619      	mov	r1, r3
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	f00f fbc3 	bl	8020804 <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 801107e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011084:	429a      	cmp	r2, r3
 8011086:	dd02      	ble.n	801108e <lv_draw_mask_angle+0x1ea>
 8011088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801108c:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp < 0) tmp = 0;
 801108e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011090:	2b00      	cmp	r3, #0
 8011092:	da01      	bge.n	8011098 <lv_draw_mask_angle+0x1f4>
 8011094:	2300      	movs	r3, #0
 8011096:	647b      	str	r3, [r7, #68]	; 0x44
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 8011098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801109a:	68fa      	ldr	r2, [r7, #12]
 801109c:	18d0      	adds	r0, r2, r3
 801109e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	897b      	ldrh	r3, [r7, #10]
 80110a4:	4413      	add	r3, r2
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	b219      	sxth	r1, r3
 80110aa:	88fa      	ldrh	r2, [r7, #6]
 80110ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	1ad3      	subs	r3, r2, r3
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	b21c      	sxth	r4, r3
 80110b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80110b8:	333c      	adds	r3, #60	; 0x3c
 80110ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80110be:	9300      	str	r3, [sp, #0]
 80110c0:	4623      	mov	r3, r4
 80110c2:	f7ff fa2f 	bl	8010524 <lv_draw_mask_line>
 80110c6:	4603      	mov	r3, r0
 80110c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 80110cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d109      	bne.n	80110e8 <lv_draw_mask_angle+0x244>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 80110d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110d6:	68fa      	ldr	r2, [r7, #12]
 80110d8:	18d0      	adds	r0, r2, r3
 80110da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80110de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	4619      	mov	r1, r3
 80110e4:	f00f fb8e 	bl	8020804 <lv_memset_00>
        }
        if(res1 == res2) return res1;
 80110e8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80110ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d102      	bne.n	80110fa <lv_draw_mask_angle+0x256>
 80110f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80110f8:	e1d0      	b.n	801149c <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 80110fa:	2302      	movs	r3, #2
 80110fc:	e1ce      	b.n	801149c <lv_draw_mask_angle+0x5f8>
    }
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 80110fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011100:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011104:	2bb4      	cmp	r3, #180	; 0xb4
 8011106:	f340 80fc 	ble.w	8011302 <lv_draw_mask_angle+0x45e>
 801110a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801110c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011110:	2bb4      	cmp	r3, #180	; 0xb4
 8011112:	f340 80f6 	ble.w	8011302 <lv_draw_mask_angle+0x45e>
 8011116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011118:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801111c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801111e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011122:	429a      	cmp	r2, r3
 8011124:	f340 80ed 	ble.w	8011302 <lv_draw_mask_angle+0x45e>

        if(abs_y > p->cfg.vertex_p.y) {
 8011128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801112a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801112e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011132:	429a      	cmp	r2, r3
 8011134:	dd01      	ble.n	801113a <lv_draw_mask_angle+0x296>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8011136:	2301      	movs	r3, #1
 8011138:	e1b0      	b.n	801149c <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801113a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801113c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011140:	fb02 f303 	mul.w	r3, r2, r3
 8011144:	129b      	asrs	r3, r3, #10
 8011146:	61fb      	str	r3, [r7, #28]
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8011148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114a:	3301      	adds	r3, #1
 801114c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801114e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8011150:	fb02 f303 	mul.w	r3, r2, r3
 8011154:	129b      	asrs	r3, r3, #10
 8011156:	643b      	str	r3, [r7, #64]	; 0x40

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8011158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801115a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801115e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011162:	dd0b      	ble.n	801117c <lv_draw_mask_angle+0x2d8>
 8011164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011166:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801116a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 801116e:	da05      	bge.n	801117c <lv_draw_mask_angle+0x2d8>
 8011170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011172:	2b00      	cmp	r3, #0
 8011174:	da02      	bge.n	801117c <lv_draw_mask_angle+0x2d8>
 8011176:	2300      	movs	r3, #0
 8011178:	643b      	str	r3, [r7, #64]	; 0x40
 801117a:	e01f      	b.n	80111bc <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801117c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801117e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	dd0a      	ble.n	801119c <lv_draw_mask_angle+0x2f8>
 8011186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011188:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801118c:	2b5a      	cmp	r3, #90	; 0x5a
 801118e:	dc05      	bgt.n	801119c <lv_draw_mask_angle+0x2f8>
 8011190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011192:	2b00      	cmp	r3, #0
 8011194:	da02      	bge.n	801119c <lv_draw_mask_angle+0x2f8>
 8011196:	2300      	movs	r3, #0
 8011198:	643b      	str	r3, [r7, #64]	; 0x40
 801119a:	e00f      	b.n	80111bc <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 801119c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801119e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80111a2:	2b5a      	cmp	r3, #90	; 0x5a
 80111a4:	dd0a      	ble.n	80111bc <lv_draw_mask_angle+0x318>
 80111a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111a8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80111ac:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80111b0:	da04      	bge.n	80111bc <lv_draw_mask_angle+0x318>
 80111b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	dd01      	ble.n	80111bc <lv_draw_mask_angle+0x318>
 80111b8:	2300      	movs	r3, #0
 80111ba:	643b      	str	r3, [r7, #64]	; 0x40

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 80111bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80111c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80111c6:	dd0b      	ble.n	80111e0 <lv_draw_mask_angle+0x33c>
 80111c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80111ce:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80111d2:	da05      	bge.n	80111e0 <lv_draw_mask_angle+0x33c>
 80111d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	da02      	bge.n	80111e0 <lv_draw_mask_angle+0x33c>
 80111da:	2300      	movs	r3, #0
 80111dc:	643b      	str	r3, [r7, #64]	; 0x40
 80111de:	e01f      	b.n	8011220 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 80111e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	dd0a      	ble.n	8011200 <lv_draw_mask_angle+0x35c>
 80111ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80111f0:	2b5a      	cmp	r3, #90	; 0x5a
 80111f2:	dc05      	bgt.n	8011200 <lv_draw_mask_angle+0x35c>
 80111f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	da02      	bge.n	8011200 <lv_draw_mask_angle+0x35c>
 80111fa:	2300      	movs	r3, #0
 80111fc:	643b      	str	r3, [r7, #64]	; 0x40
 80111fe:	e00f      	b.n	8011220 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8011200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011202:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011206:	2b5a      	cmp	r3, #90	; 0x5a
 8011208:	dd0a      	ble.n	8011220 <lv_draw_mask_angle+0x37c>
 801120a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801120c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011210:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011214:	da04      	bge.n	8011220 <lv_draw_mask_angle+0x37c>
 8011216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011218:	2b00      	cmp	r3, #0
 801121a:	dd01      	ble.n	8011220 <lv_draw_mask_angle+0x37c>
 801121c:	2300      	movs	r3, #0
 801121e:	643b      	str	r3, [r7, #64]	; 0x40

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8011220:	69fa      	ldr	r2, [r7, #28]
 8011222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011224:	1ad3      	subs	r3, r2, r3
 8011226:	105b      	asrs	r3, r3, #1
 8011228:	61bb      	str	r3, [r7, #24]

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801122a:	2301      	movs	r3, #1
 801122c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8011230:	2301      	movs	r3, #1
 8011232:	75fb      	strb	r3, [r7, #23]

        int32_t tmp = start_angle_last + dist - rel_x;
 8011234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	441a      	add	r2, r3
 801123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123c:	1ad3      	subs	r3, r2, r3
 801123e:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > len) tmp = len;
 8011240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011246:	429a      	cmp	r2, r3
 8011248:	dd02      	ble.n	8011250 <lv_draw_mask_angle+0x3ac>
 801124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801124e:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > 0) {
 8011250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011252:	2b00      	cmp	r3, #0
 8011254:	dd18      	ble.n	8011288 <lv_draw_mask_angle+0x3e4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 8011256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011258:	b218      	sxth	r0, r3
 801125a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801125c:	333c      	adds	r3, #60	; 0x3c
 801125e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011262:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011266:	9300      	str	r3, [sp, #0]
 8011268:	4603      	mov	r3, r0
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f7ff f95a 	bl	8010524 <lv_draw_mask_line>
 8011270:	4603      	mov	r3, r0
 8011272:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8011276:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801127a:	2b00      	cmp	r3, #0
 801127c:	d104      	bne.n	8011288 <lv_draw_mask_angle+0x3e4>
                lv_memset_00(&mask_buf[0], tmp);
 801127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011280:	4619      	mov	r1, r3
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f00f fabe 	bl	8020804 <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 8011288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801128c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801128e:	429a      	cmp	r2, r3
 8011290:	dd02      	ble.n	8011298 <lv_draw_mask_angle+0x3f4>
 8011292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011296:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp < 0) tmp = 0;
 8011298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129a:	2b00      	cmp	r3, #0
 801129c:	da01      	bge.n	80112a2 <lv_draw_mask_angle+0x3fe>
 801129e:	2300      	movs	r3, #0
 80112a0:	63bb      	str	r3, [r7, #56]	; 0x38
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 80112a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	18d0      	adds	r0, r2, r3
 80112a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112aa:	b29a      	uxth	r2, r3
 80112ac:	897b      	ldrh	r3, [r7, #10]
 80112ae:	4413      	add	r3, r2
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	b219      	sxth	r1, r3
 80112b4:	88fa      	ldrh	r2, [r7, #6]
 80112b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	b29b      	uxth	r3, r3
 80112be:	b21c      	sxth	r4, r3
 80112c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80112c2:	3310      	adds	r3, #16
 80112c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80112c8:	9300      	str	r3, [sp, #0]
 80112ca:	4623      	mov	r3, r4
 80112cc:	f7ff f92a 	bl	8010524 <lv_draw_mask_line>
 80112d0:	4603      	mov	r3, r0
 80112d2:	75fb      	strb	r3, [r7, #23]
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 80112d4:	7dfb      	ldrb	r3, [r7, #23]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d109      	bne.n	80112ee <lv_draw_mask_angle+0x44a>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 80112da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112dc:	68fa      	ldr	r2, [r7, #12]
 80112de:	18d0      	adds	r0, r2, r3
 80112e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80112e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e6:	1ad3      	subs	r3, r2, r3
 80112e8:	4619      	mov	r1, r3
 80112ea:	f00f fa8b 	bl	8020804 <lv_memset_00>
        }
        if(res1 == res2) return res1;
 80112ee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80112f2:	7dfb      	ldrb	r3, [r7, #23]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d102      	bne.n	80112fe <lv_draw_mask_angle+0x45a>
 80112f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80112fc:	e0ce      	b.n	801149c <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 80112fe:	2302      	movs	r3, #2
 8011300:	e0cc      	b.n	801149c <lv_draw_mask_angle+0x5f8>
    }
    else  {

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8011302:	2301      	movs	r3, #1
 8011304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8011308:	2301      	movs	r3, #1
 801130a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        if(p->cfg.start_angle == 180) {
 801130e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011310:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011314:	2bb4      	cmp	r3, #180	; 0xb4
 8011316:	d10e      	bne.n	8011336 <lv_draw_mask_angle+0x492>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8011318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801131a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801131e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011322:	429a      	cmp	r2, r3
 8011324:	da03      	bge.n	801132e <lv_draw_mask_angle+0x48a>
 8011326:	2301      	movs	r3, #1
 8011328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801132c:	e043      	b.n	80113b6 <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801132e:	2303      	movs	r3, #3
 8011330:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011334:	e03f      	b.n	80113b6 <lv_draw_mask_angle+0x512>
        }
        else if(p->cfg.start_angle == 0) {
 8011336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011338:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d10e      	bne.n	801135e <lv_draw_mask_angle+0x4ba>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8011340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011342:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011346:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801134a:	429a      	cmp	r2, r3
 801134c:	da03      	bge.n	8011356 <lv_draw_mask_angle+0x4b2>
 801134e:	2303      	movs	r3, #3
 8011350:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011354:	e02f      	b.n	80113b6 <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8011356:	2301      	movs	r3, #1
 8011358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801135c:	e02b      	b.n	80113b6 <lv_draw_mask_angle+0x512>
        }
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801135e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011360:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011364:	2bb3      	cmp	r3, #179	; 0xb3
 8011366:	dc06      	bgt.n	8011376 <lv_draw_mask_angle+0x4d2>
 8011368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801136a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801136e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011372:	429a      	cmp	r2, r3
 8011374:	db0b      	blt.n	801138e <lv_draw_mask_angle+0x4ea>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8011376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011378:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801137c:	2bb4      	cmp	r3, #180	; 0xb4
 801137e:	dd0a      	ble.n	8011396 <lv_draw_mask_angle+0x4f2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8011380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011382:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011386:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801138a:	429a      	cmp	r2, r3
 801138c:	db03      	blt.n	8011396 <lv_draw_mask_angle+0x4f2>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 801138e:	2303      	movs	r3, #3
 8011390:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011394:	e00f      	b.n	80113b6 <lv_draw_mask_angle+0x512>
        }
        else  {
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 8011396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011398:	3310      	adds	r3, #16
 801139a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801139e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80113a2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80113a6:	9300      	str	r3, [sp, #0]
 80113a8:	4603      	mov	r3, r0
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f7ff f8ba 	bl	8010524 <lv_draw_mask_line>
 80113b0:	4603      	mov	r3, r0
 80113b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(p->cfg.end_angle == 180) {
 80113b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80113b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80113bc:	2bb4      	cmp	r3, #180	; 0xb4
 80113be:	d10e      	bne.n	80113de <lv_draw_mask_angle+0x53a>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 80113c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80113c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80113c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	da03      	bge.n	80113d6 <lv_draw_mask_angle+0x532>
 80113ce:	2303      	movs	r3, #3
 80113d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80113d4:	e043      	b.n	801145e <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 80113d6:	2301      	movs	r3, #1
 80113d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80113dc:	e03f      	b.n	801145e <lv_draw_mask_angle+0x5ba>
        }
        else if(p->cfg.end_angle == 0) {
 80113de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80113e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10e      	bne.n	8011406 <lv_draw_mask_angle+0x562>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 80113e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80113ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80113ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	da03      	bge.n	80113fe <lv_draw_mask_angle+0x55a>
 80113f6:	2301      	movs	r3, #1
 80113f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80113fc:	e02f      	b.n	801145e <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 80113fe:	2303      	movs	r3, #3
 8011400:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011404:	e02b      	b.n	801145e <lv_draw_mask_angle+0x5ba>
        }
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8011406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011408:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801140c:	2bb3      	cmp	r3, #179	; 0xb3
 801140e:	dc06      	bgt.n	801141e <lv_draw_mask_angle+0x57a>
 8011410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011412:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011416:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801141a:	429a      	cmp	r2, r3
 801141c:	db0b      	blt.n	8011436 <lv_draw_mask_angle+0x592>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801141e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011420:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8011424:	2bb4      	cmp	r3, #180	; 0xb4
 8011426:	dd0a      	ble.n	801143e <lv_draw_mask_angle+0x59a>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8011428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801142a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801142e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011432:	429a      	cmp	r2, r3
 8011434:	db03      	blt.n	801143e <lv_draw_mask_angle+0x59a>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8011436:	2303      	movs	r3, #3
 8011438:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801143c:	e00f      	b.n	801145e <lv_draw_mask_angle+0x5ba>
        }
        else {
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 801143e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011440:	333c      	adds	r3, #60	; 0x3c
 8011442:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011446:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801144a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	4603      	mov	r3, r0
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f7ff f866 	bl	8010524 <lv_draw_mask_line>
 8011458:	4603      	mov	r3, r0
 801145a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        }

        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801145e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011462:	2b00      	cmp	r3, #0
 8011464:	d003      	beq.n	801146e <lv_draw_mask_angle+0x5ca>
 8011466:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801146a:	2b00      	cmp	r3, #0
 801146c:	d101      	bne.n	8011472 <lv_draw_mask_angle+0x5ce>
 801146e:	2300      	movs	r3, #0
 8011470:	e014      	b.n	801149c <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 8011472:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011476:	2b03      	cmp	r3, #3
 8011478:	d105      	bne.n	8011486 <lv_draw_mask_angle+0x5e2>
 801147a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801147e:	2b03      	cmp	r3, #3
 8011480:	d101      	bne.n	8011486 <lv_draw_mask_angle+0x5e2>
 8011482:	2300      	movs	r3, #0
 8011484:	e00a      	b.n	801149c <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 8011486:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801148a:	2b01      	cmp	r3, #1
 801148c:	d105      	bne.n	801149a <lv_draw_mask_angle+0x5f6>
 801148e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011492:	2b01      	cmp	r3, #1
 8011494:	d101      	bne.n	801149a <lv_draw_mask_angle+0x5f6>
 8011496:	2301      	movs	r3, #1
 8011498:	e000      	b.n	801149c <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 801149a:	2302      	movs	r3, #2
    }
}
 801149c:	4618      	mov	r0, r3
 801149e:	3754      	adds	r7, #84	; 0x54
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd90      	pop	{r4, r7, pc}

080114a4 <lv_draw_mask_radius>:


LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 80114a4:	b590      	push	{r4, r7, lr}
 80114a6:	b097      	sub	sp, #92	; 0x5c
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	4608      	mov	r0, r1
 80114ae:	4611      	mov	r1, r2
 80114b0:	461a      	mov	r2, r3
 80114b2:	4603      	mov	r3, r0
 80114b4:	817b      	strh	r3, [r7, #10]
 80114b6:	460b      	mov	r3, r1
 80114b8:	813b      	strh	r3, [r7, #8]
 80114ba:	4613      	mov	r3, r2
 80114bc:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 80114be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114c0:	7c9b      	ldrb	r3, [r3, #18]
 80114c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bf14      	ite	ne
 80114cc:	2301      	movne	r3, #1
 80114ce:	2300      	moveq	r3, #0
 80114d0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t radius = p->cfg.radius;
 80114d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114d6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80114da:	647b      	str	r3, [r7, #68]	; 0x44
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 80114dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114de:	f103 0208 	add.w	r2, r3, #8
 80114e2:	f107 0318 	add.w	r3, r7, #24
 80114e6:	4611      	mov	r1, r2
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fe fae6 	bl	800faba <lv_area_copy>

    if(outer == false) {
 80114ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80114f2:	f083 0301 	eor.w	r3, r3, #1
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00d      	beq.n	8011518 <lv_draw_mask_radius+0x74>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 80114fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011500:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011504:	429a      	cmp	r2, r3
 8011506:	db05      	blt.n	8011514 <lv_draw_mask_radius+0x70>
 8011508:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801150c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011510:	429a      	cmp	r2, r3
 8011512:	dd0f      	ble.n	8011534 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_TRANSP;
 8011514:	2300      	movs	r3, #0
 8011516:	e266      	b.n	80119e6 <lv_draw_mask_radius+0x542>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8011518:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801151c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011520:	429a      	cmp	r2, r3
 8011522:	db05      	blt.n	8011530 <lv_draw_mask_radius+0x8c>
 8011524:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011528:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801152c:	429a      	cmp	r2, r3
 801152e:	dd01      	ble.n	8011534 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8011530:	2301      	movs	r3, #1
 8011532:	e258      	b.n	80119e6 <lv_draw_mask_radius+0x542>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8011534:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011538:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801153c:	4619      	mov	r1, r3
 801153e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011540:	440b      	add	r3, r1
 8011542:	429a      	cmp	r2, r3
 8011544:	db0b      	blt.n	801155e <lv_draw_mask_radius+0xba>
 8011546:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801154e:	441a      	add	r2, r3
 8011550:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011554:	4619      	mov	r1, r3
 8011556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011558:	1acb      	subs	r3, r1, r3
 801155a:	429a      	cmp	r2, r3
 801155c:	dd12      	ble.n	8011584 <lv_draw_mask_radius+0xe0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 801155e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011562:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011566:	4619      	mov	r1, r3
 8011568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801156a:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 801156c:	429a      	cmp	r2, r3
 801156e:	f2c0 8082 	blt.w	8011676 <lv_draw_mask_radius+0x1d2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8011572:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011576:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801157a:	4619      	mov	r1, r3
 801157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157e:	1acb      	subs	r3, r1, r3
 8011580:	429a      	cmp	r2, r3
 8011582:	dc78      	bgt.n	8011676 <lv_draw_mask_radius+0x1d2>
        if(outer == false) {
 8011584:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011588:	f083 0301 	eor.w	r3, r3, #1
 801158c:	b2db      	uxtb	r3, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	d03d      	beq.n	801160e <lv_draw_mask_radius+0x16a>
            /*Remove the edges*/
            int32_t last = rect.x1 - abs_x;
 8011592:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011596:	461a      	mov	r2, r3
 8011598:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	627b      	str	r3, [r7, #36]	; 0x24
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 80115a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115a6:	429a      	cmp	r2, r3
 80115a8:	dd01      	ble.n	80115ae <lv_draw_mask_radius+0x10a>
 80115aa:	2300      	movs	r3, #0
 80115ac:	e21b      	b.n	80119e6 <lv_draw_mask_radius+0x542>
            if(last >= 0) {
 80115ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	db04      	blt.n	80115be <lv_draw_mask_radius+0x11a>
                lv_memset_00(&mask_buf[0], last);
 80115b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b6:	4619      	mov	r1, r3
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f00f f923 	bl	8020804 <lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 80115be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80115c2:	461a      	mov	r2, r3
 80115c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	3301      	adds	r3, #1
 80115cc:	623b      	str	r3, [r7, #32]
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 80115ce:	6a3b      	ldr	r3, [r7, #32]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	dc01      	bgt.n	80115d8 <lv_draw_mask_radius+0x134>
 80115d4:	2300      	movs	r3, #0
 80115d6:	e206      	b.n	80119e6 <lv_draw_mask_radius+0x542>
            else if(first < len) {
 80115d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115dc:	6a3a      	ldr	r2, [r7, #32]
 80115de:	429a      	cmp	r2, r3
 80115e0:	da09      	bge.n	80115f6 <lv_draw_mask_radius+0x152>
                lv_memset_00(&mask_buf[first], len - first);
 80115e2:	6a3b      	ldr	r3, [r7, #32]
 80115e4:	68fa      	ldr	r2, [r7, #12]
 80115e6:	18d0      	adds	r0, r2, r3
 80115e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80115ec:	6a3b      	ldr	r3, [r7, #32]
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	4619      	mov	r1, r3
 80115f2:	f00f f907 	bl	8020804 <lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 80115f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d106      	bne.n	801160a <lv_draw_mask_radius+0x166>
 80115fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011600:	6a3a      	ldr	r2, [r7, #32]
 8011602:	429a      	cmp	r2, r3
 8011604:	d101      	bne.n	801160a <lv_draw_mask_radius+0x166>
 8011606:	2301      	movs	r3, #1
 8011608:	e1ed      	b.n	80119e6 <lv_draw_mask_radius+0x542>
            else return LV_DRAW_MASK_RES_CHANGED;
 801160a:	2302      	movs	r3, #2
 801160c:	e1eb      	b.n	80119e6 <lv_draw_mask_radius+0x542>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 801160e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011612:	461a      	mov	r2, r3
 8011614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	657b      	str	r3, [r7, #84]	; 0x54
            if(first < 0) first = 0;
 801161c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801161e:	2b00      	cmp	r3, #0
 8011620:	da01      	bge.n	8011626 <lv_draw_mask_radius+0x182>
 8011622:	2300      	movs	r3, #0
 8011624:	657b      	str	r3, [r7, #84]	; 0x54
            if(first <= len) {
 8011626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801162a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801162c:	429a      	cmp	r2, r3
 801162e:	dc20      	bgt.n	8011672 <lv_draw_mask_radius+0x1ce>
                int32_t last = rect.x2 - abs_x - first + 1;
 8011630:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011634:	461a      	mov	r2, r3
 8011636:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801163a:	1ad2      	subs	r2, r2, r3
 801163c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801163e:	1ad3      	subs	r3, r2, r3
 8011640:	3301      	adds	r3, #1
 8011642:	653b      	str	r3, [r7, #80]	; 0x50
                if(first + last > len) last = len - first;
 8011644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011648:	441a      	add	r2, r3
 801164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801164e:	429a      	cmp	r2, r3
 8011650:	dd04      	ble.n	801165c <lv_draw_mask_radius+0x1b8>
 8011652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011658:	1ad3      	subs	r3, r2, r3
 801165a:	653b      	str	r3, [r7, #80]	; 0x50
                if(last >= 0) {
 801165c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801165e:	2b00      	cmp	r3, #0
 8011660:	db07      	blt.n	8011672 <lv_draw_mask_radius+0x1ce>
                    lv_memset_00(&mask_buf[first], last);
 8011662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011664:	68fa      	ldr	r2, [r7, #12]
 8011666:	4413      	add	r3, r2
 8011668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801166a:	4611      	mov	r1, r2
 801166c:	4618      	mov	r0, r3
 801166e:	f00f f8c9 	bl	8020804 <lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 8011672:	2302      	movs	r3, #2
 8011674:	e1b7      	b.n	80119e6 <lv_draw_mask_radius+0x542>
    //    if( abs_x == 276 && abs_x + len - 1 == 479 && abs_y == 63 && p->cfg.radius == 5 && p->cfg.outer == 1) {
    //        char x = 0;
    //    }
    //exec: x:276.. 479, y:63: r:5, inv)

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 8011676:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801167a:	461a      	mov	r2, r3
 801167c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011680:	1ad3      	subs	r3, r2, r3
 8011682:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t w = lv_area_get_width(&rect);
 8011684:	f107 0318 	add.w	r3, r7, #24
 8011688:	4618      	mov	r0, r3
 801168a:	f7fe fa35 	bl	800faf8 <lv_area_get_width>
 801168e:	4603      	mov	r3, r0
 8011690:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h = lv_area_get_height(&rect);
 8011692:	f107 0318 	add.w	r3, r7, #24
 8011696:	4618      	mov	r0, r3
 8011698:	f7fe fa45 	bl	800fb26 <lv_area_get_height>
 801169c:	4603      	mov	r3, r0
 801169e:	63bb      	str	r3, [r7, #56]	; 0x38
    abs_x -= rect.x1;
 80116a0:	897a      	ldrh	r2, [r7, #10]
 80116a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	1ad3      	subs	r3, r2, r3
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 80116ae:	893a      	ldrh	r2, [r7, #8]
 80116b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	813b      	strh	r3, [r7, #8]

    lv_coord_t aa_len;
    lv_coord_t x_start;
    lv_coord_t cir_y;
    if(abs_y < radius) {
 80116bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80116c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116c2:	429a      	cmp	r2, r3
 80116c4:	dd09      	ble.n	80116da <lv_draw_mask_radius+0x236>
        cir_y = radius - abs_y - 1;
 80116c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	893b      	ldrh	r3, [r7, #8]
 80116cc:	1ad3      	subs	r3, r2, r3
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	3b01      	subs	r3, #1
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80116d8:	e00a      	b.n	80116f0 <lv_draw_mask_radius+0x24c>
    }
    else {
        cir_y = abs_y - (h - radius);
 80116da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116dc:	b29a      	uxth	r2, r3
 80116de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	893b      	ldrh	r3, [r7, #8]
 80116e8:	4413      	add	r3, r2
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 80116f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116f2:	6958      	ldr	r0, [r3, #20]
 80116f4:	f107 0314 	add.w	r3, r7, #20
 80116f8:	f107 0216 	add.w	r2, r7, #22
 80116fc:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8011700:	f000 fd38 	bl	8012174 <get_next_line>
 8011704:	6378      	str	r0, [r7, #52]	; 0x34
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8011706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011708:	b29a      	uxth	r2, r3
 801170a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170c:	b29b      	uxth	r3, r3
 801170e:	4413      	add	r3, r2
 8011710:	b29a      	uxth	r2, r3
 8011712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011714:	b29b      	uxth	r3, r3
 8011716:	1ad3      	subs	r3, r2, r3
 8011718:	b29a      	uxth	r2, r3
 801171a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801171e:	b29b      	uxth	r3, r3
 8011720:	4413      	add	r3, r2
 8011722:	b29b      	uxth	r3, r3
 8011724:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 8011726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011728:	b29a      	uxth	r2, r3
 801172a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801172c:	b29b      	uxth	r3, r3
 801172e:	4413      	add	r3, r2
 8011730:	b29a      	uxth	r2, r3
 8011732:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011736:	b29b      	uxth	r3, r3
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	b29b      	uxth	r3, r3
 801173c:	3b01      	subs	r3, #1
 801173e:	b29b      	uxth	r3, r3
 8011740:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t i;

    if(outer == false) {
 8011742:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011746:	f083 0301 	eor.w	r3, r3, #1
 801174a:	b2db      	uxtb	r3, r3
 801174c:	2b00      	cmp	r3, #0
 801174e:	f000 809b 	beq.w	8011888 <lv_draw_mask_radius+0x3e4>
        for(i = 0; i < aa_len; i++) {
 8011752:	2300      	movs	r3, #0
 8011754:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8011758:	e062      	b.n	8011820 <lv_draw_mask_radius+0x37c>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 801175a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801175e:	461a      	mov	r2, r3
 8011760:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	3b01      	subs	r3, #1
 8011768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801176a:	4413      	add	r3, r2
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8011772:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011776:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801177a:	4413      	add	r3, r2
 801177c:	2b00      	cmp	r3, #0
 801177e:	db20      	blt.n	80117c2 <lv_draw_mask_radius+0x31e>
 8011780:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011784:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011788:	441a      	add	r2, r3
 801178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801178e:	429a      	cmp	r2, r3
 8011790:	da17      	bge.n	80117c2 <lv_draw_mask_radius+0x31e>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8011792:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011796:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801179a:	4413      	add	r3, r2
 801179c:	461a      	mov	r2, r3
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	4413      	add	r3, r2
 80117a2:	7819      	ldrb	r1, [r3, #0]
 80117a4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80117a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80117ac:	4413      	add	r3, r2
 80117ae:	461a      	mov	r2, r3
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	189c      	adds	r4, r3, r2
 80117b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80117b8:	4618      	mov	r0, r3
 80117ba:	f000 fd11 	bl	80121e0 <mask_mix>
 80117be:	4603      	mov	r3, r0
 80117c0:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 80117c2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80117c6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80117ca:	1ad3      	subs	r3, r2, r3
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	db20      	blt.n	8011812 <lv_draw_mask_radius+0x36e>
 80117d0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80117d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80117d8:	1ad2      	subs	r2, r2, r3
 80117da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117de:	429a      	cmp	r2, r3
 80117e0:	da17      	bge.n	8011812 <lv_draw_mask_radius+0x36e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 80117e2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80117e6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80117ea:	1ad3      	subs	r3, r2, r3
 80117ec:	461a      	mov	r2, r3
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	4413      	add	r3, r2
 80117f2:	7819      	ldrb	r1, [r3, #0]
 80117f4:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80117f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80117fc:	1ad3      	subs	r3, r2, r3
 80117fe:	461a      	mov	r2, r3
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	189c      	adds	r4, r3, r2
 8011804:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8011808:	4618      	mov	r0, r3
 801180a:	f000 fce9 	bl	80121e0 <mask_mix>
 801180e:	4603      	mov	r3, r0
 8011810:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 8011812:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011816:	b29b      	uxth	r3, r3
 8011818:	3301      	adds	r3, #1
 801181a:	b29b      	uxth	r3, r3
 801181c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8011820:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011824:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8011828:	429a      	cmp	r2, r3
 801182a:	db96      	blt.n	801175a <lv_draw_mask_radius+0x2b6>
            }
        }

        /*Clean the right side*/
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 801182c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011830:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8011834:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011838:	440b      	add	r3, r1
 801183a:	4293      	cmp	r3, r2
 801183c:	bfa8      	it	ge
 801183e:	4613      	movge	r3, r2
 8011840:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011844:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 8011846:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	18d0      	adds	r0, r2, r3
 801184e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011852:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011856:	1ad3      	subs	r3, r2, r3
 8011858:	4619      	mov	r1, r3
 801185a:	f00e ffd3 	bl	8020804 <lv_memset_00>

        /*Clean the left side*/
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 801185e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011862:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011866:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801186a:	1a5b      	subs	r3, r3, r1
 801186c:	3301      	adds	r3, #1
 801186e:	4293      	cmp	r3, r2
 8011870:	bfa8      	it	ge
 8011872:	4613      	movge	r3, r2
 8011874:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011878:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_memset_00(&mask_buf[0], cir_x_left);
 801187a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801187e:	4619      	mov	r1, r3
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f00e ffbf 	bl	8020804 <lv_memset_00>
 8011886:	e0ad      	b.n	80119e4 <lv_draw_mask_radius+0x540>
    }
    else {
        for(i = 0; i < aa_len; i++) {
 8011888:	2300      	movs	r3, #0
 801188a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801188e:	e063      	b.n	8011958 <lv_draw_mask_radius+0x4b4>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8011890:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011894:	1e5a      	subs	r2, r3, #1
 8011896:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	461a      	mov	r2, r3
 801189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a0:	4413      	add	r3, r2
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	43db      	mvns	r3, r3
 80118a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 80118aa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80118ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80118b2:	4413      	add	r3, r2
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	db20      	blt.n	80118fa <lv_draw_mask_radius+0x456>
 80118b8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80118bc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80118c0:	441a      	add	r2, r3
 80118c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	da17      	bge.n	80118fa <lv_draw_mask_radius+0x456>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 80118ca:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80118ce:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80118d2:	4413      	add	r3, r2
 80118d4:	461a      	mov	r2, r3
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	4413      	add	r3, r2
 80118da:	7819      	ldrb	r1, [r3, #0]
 80118dc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80118e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80118e4:	4413      	add	r3, r2
 80118e6:	461a      	mov	r2, r3
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	189c      	adds	r4, r3, r2
 80118ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80118f0:	4618      	mov	r0, r3
 80118f2:	f000 fc75 	bl	80121e0 <mask_mix>
 80118f6:	4603      	mov	r3, r0
 80118f8:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 80118fa:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80118fe:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	2b00      	cmp	r3, #0
 8011906:	db20      	blt.n	801194a <lv_draw_mask_radius+0x4a6>
 8011908:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801190c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011910:	1ad2      	subs	r2, r2, r3
 8011912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011916:	429a      	cmp	r2, r3
 8011918:	da17      	bge.n	801194a <lv_draw_mask_radius+0x4a6>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801191a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801191e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011922:	1ad3      	subs	r3, r2, r3
 8011924:	461a      	mov	r2, r3
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	4413      	add	r3, r2
 801192a:	7819      	ldrb	r1, [r3, #0]
 801192c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8011930:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	461a      	mov	r2, r3
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	189c      	adds	r4, r3, r2
 801193c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011940:	4618      	mov	r0, r3
 8011942:	f000 fc4d 	bl	80121e0 <mask_mix>
 8011946:	4603      	mov	r3, r0
 8011948:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 801194a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801194e:	b29b      	uxth	r3, r3
 8011950:	3301      	adds	r3, #1
 8011952:	b29b      	uxth	r3, r3
 8011954:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8011958:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801195c:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8011960:	429a      	cmp	r2, r3
 8011962:	db95      	blt.n	8011890 <lv_draw_mask_radius+0x3ec>
            }
        }

        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 8011964:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011968:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801196c:	3301      	adds	r3, #1
 801196e:	4293      	cmp	r3, r2
 8011970:	bfa8      	it	ge
 8011972:	4613      	movge	r3, r2
 8011974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011978:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 801197a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801197e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011982:	429a      	cmp	r2, r3
 8011984:	da07      	bge.n	8011996 <lv_draw_mask_radius+0x4f2>
 8011986:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801198a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801198e:	1ad3      	subs	r3, r2, r3
 8011990:	0fdb      	lsrs	r3, r3, #31
 8011992:	b2db      	uxtb	r3, r3
 8011994:	e006      	b.n	80119a4 <lv_draw_mask_radius+0x500>
 8011996:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801199a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	0fdb      	lsrs	r3, r3, #31
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <lv_draw_mask_radius+0x508>
 80119a8:	2300      	movs	r3, #0
 80119aa:	e010      	b.n	80119ce <lv_draw_mask_radius+0x52a>
 80119ac:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80119b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	da05      	bge.n	80119c4 <lv_draw_mask_radius+0x520>
 80119b8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80119ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80119bc:	1ad3      	subs	r3, r2, r3
 80119be:	b29b      	uxth	r3, r3
 80119c0:	b21b      	sxth	r3, r3
 80119c2:	e004      	b.n	80119ce <lv_draw_mask_radius+0x52a>
 80119c4:	88fa      	ldrh	r2, [r7, #6]
 80119c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	b21b      	sxth	r3, r3
 80119ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_memset_00(&mask_buf[clr_start], clr_len);
 80119d0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80119d4:	68fa      	ldr	r2, [r7, #12]
 80119d6:	4413      	add	r3, r2
 80119d8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80119dc:	4611      	mov	r1, r2
 80119de:	4618      	mov	r0, r3
 80119e0:	f00e ff10 	bl	8020804 <lv_memset_00>
    }

    return LV_DRAW_MASK_RES_CHANGED;
 80119e4:	2302      	movs	r3, #2
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	375c      	adds	r7, #92	; 0x5c
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd90      	pop	{r4, r7, pc}

080119ee <circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 80119ee:	b480      	push	{r7}
 80119f0:	b085      	sub	sp, #20
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	60f8      	str	r0, [r7, #12]
 80119f6:	60b9      	str	r1, [r7, #8]
 80119f8:	4613      	mov	r3, r2
 80119fa:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	88fa      	ldrh	r2, [r7, #6]
 8011a00:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2200      	movs	r2, #0
 8011a06:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 8011a08:	88fb      	ldrh	r3, [r7, #6]
 8011a0a:	f1c3 0301 	rsb	r3, r3, #1
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	b21a      	sxth	r2, r3
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	801a      	strh	r2, [r3, #0]
}
 8011a16:	bf00      	nop
 8011a18:	3714      	adds	r7, #20
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr

08011a22 <circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
 8011a22:	b480      	push	{r7}
 8011a24:	b083      	sub	sp, #12
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	bfd4      	ite	le
 8011a3a:	2301      	movle	r3, #1
 8011a3c:	2300      	movgt	r3, #0
 8011a3e:	b2db      	uxtb	r3, r3
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	370c      	adds	r7, #12
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]

    if(*tmp <= 0) {
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	dc11      	bgt.n	8011a84 <circ_next+0x38>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	005b      	lsls	r3, r3, #1
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	4413      	add	r3, r2
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	3303      	adds	r3, #3
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	b21a      	sxth	r2, r3
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	801a      	strh	r2, [r3, #0]
 8011a82:	e01e      	b.n	8011ac2 <circ_next+0x76>
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011a92:	4619      	mov	r1, r3
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a9a:	1acb      	subs	r3, r1, r3
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	005b      	lsls	r3, r3, #1
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	4413      	add	r3, r2
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	3305      	adds	r3, #5
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	b21a      	sxth	r2, r3
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	801a      	strh	r2, [r3, #0]
        c->x--;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	b21a      	sxth	r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	801a      	strh	r2, [r3, #0]
    }
    c->y++;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	3301      	adds	r3, #1
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	b21a      	sxth	r2, r3
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	805a      	strh	r2, [r3, #2]
}
 8011ad4:	bf00      	nop
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr

08011ae0 <circ_calc_aa4>:

static void circ_calc_aa4(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t radius)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b096      	sub	sp, #88	; 0x58
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	460b      	mov	r3, r1
 8011aea:	807b      	strh	r3, [r7, #2]
    if(radius == 0) return;
 8011aec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f000 833b 	beq.w	801216c <circ_calc_aa4+0x68c>
    c->radius = radius;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	887a      	ldrh	r2, [r7, #2]
 8011afa:	831a      	strh	r2, [r3, #24]

    /*Allocate buffers*/
    if(c->buf) lv_mem_free(c->buf);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d004      	beq.n	8011b0e <circ_calc_aa4+0x2e>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f00e fa77 	bl	801fffc <lv_mem_free>

    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8011b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b12:	1c5a      	adds	r2, r3, #1
 8011b14:	4613      	mov	r3, r2
 8011b16:	005b      	lsls	r3, r3, #1
 8011b18:	4413      	add	r3, r2
 8011b1a:	005b      	lsls	r3, r3, #1
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f00e fa3d 	bl	801ff9c <lv_mem_alloc>
 8011b22:	4602      	mov	r2, r0
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MALLOC(c->buf);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d100      	bne.n	8011b32 <circ_calc_aa4+0x52>
 8011b30:	e7fe      	b.n	8011b30 <circ_calc_aa4+0x50>
    c->cir_opa = c->buf;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681a      	ldr	r2, [r3, #0]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	605a      	str	r2, [r3, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b42:	005b      	lsls	r3, r3, #1
 8011b44:	3302      	adds	r3, #2
 8011b46:	441a      	add	r2, r3
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	60da      	str	r2, [r3, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	3304      	adds	r3, #4
 8011b58:	441a      	add	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	609a      	str	r2, [r3, #8]

    /*Special case, handle manually*/
    if(radius == 1) {
 8011b5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	d111      	bne.n	8011b8a <circ_calc_aa4+0xaa>
        c->cir_opa[0] = 180;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	22b4      	movs	r2, #180	; 0xb4
 8011b6c:	701a      	strb	r2, [r3, #0]
        c->opa_start_on_y[0] = 0;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	2200      	movs	r2, #0
 8011b74:	801a      	strh	r2, [r3, #0]
        c->opa_start_on_y[1] = 1;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	68db      	ldr	r3, [r3, #12]
 8011b7a:	3302      	adds	r3, #2
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[0] = 0;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	689b      	ldr	r3, [r3, #8]
 8011b84:	2200      	movs	r2, #0
 8011b86:	801a      	strh	r2, [r3, #0]
        return;
 8011b88:	e2f1      	b.n	801216e <circ_calc_aa4+0x68e>
    }

    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 8011b8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	00db      	lsls	r3, r3, #3
 8011b92:	4618      	mov	r0, r3
 8011b94:	f00e fa8c 	bl	80200b0 <lv_mem_buf_get>
 8011b98:	6438      	str	r0, [r7, #64]	; 0x40
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 8011b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ba4:	4413      	add	r3, r2
 8011ba6:	63fb      	str	r3, [r7, #60]	; 0x3c

    uint32_t y_8th_cnt = 0;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	657b      	str	r3, [r7, #84]	; 0x54
    lv_point_t cp;
    lv_coord_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 8011bac:	887b      	ldrh	r3, [r7, #2]
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	b21a      	sxth	r2, r3
 8011bb4:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8011bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7ff ff16 	bl	80119ee <circ_init>
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    lv_coord_t cir_size = 0;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    x_int[0] = cp.x >> 2;
 8011bc8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011bcc:	109b      	asrs	r3, r3, #2
 8011bce:	b21b      	sxth	r3, r3
 8011bd0:	61fb      	str	r3, [r7, #28]
    x_fract[0] = 0;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60fb      	str	r3, [r7, #12]

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 8011bd6:	e1b7      	b.n	8011f48 <circ_calc_aa4+0x468>
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 8011bd8:	2300      	movs	r3, #0
 8011bda:	653b      	str	r3, [r7, #80]	; 0x50
 8011bdc:	e02b      	b.n	8011c36 <circ_calc_aa4+0x156>
            circ_next(&cp, &tmp);
 8011bde:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8011be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011be6:	4611      	mov	r1, r2
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7ff ff2f 	bl	8011a4c <circ_next>
            if(circ_cont(&cp) == false) break;
 8011bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7ff ff15 	bl	8011a22 <circ_cont>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	f083 0301 	eor.w	r3, r3, #1
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d11c      	bne.n	8011c3e <circ_calc_aa4+0x15e>
            x_int[i] = cp.x >> 2;
 8011c04:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011c08:	109b      	asrs	r3, r3, #2
 8011c0a:	b21b      	sxth	r3, r3
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	3358      	adds	r3, #88	; 0x58
 8011c14:	443b      	add	r3, r7
 8011c16:	f843 2c3c 	str.w	r2, [r3, #-60]
            x_fract[i] = cp.x & 0x3;
 8011c1a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	f003 0203 	and.w	r2, r3, #3
 8011c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	3358      	adds	r3, #88	; 0x58
 8011c2a:	443b      	add	r3, r7
 8011c2c:	f843 2c4c 	str.w	r2, [r3, #-76]
        for(i = 0; i < 4; i++) {
 8011c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c32:	3301      	adds	r3, #1
 8011c34:	653b      	str	r3, [r7, #80]	; 0x50
 8011c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	ddd0      	ble.n	8011bde <circ_calc_aa4+0xfe>
 8011c3c:	e000      	b.n	8011c40 <circ_calc_aa4+0x160>
            if(circ_cont(&cp) == false) break;
 8011c3e:	bf00      	nop
        }
        if(i != 4) break;
 8011c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c42:	2b04      	cmp	r3, #4
 8011c44:	f040 818a 	bne.w	8011f5c <circ_calc_aa4+0x47c>

        /*All lines on the same x when downscaled*/
        if(x_int[0] == x_int[3]) {
 8011c48:	69fa      	ldr	r2, [r7, #28]
 8011c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d139      	bne.n	8011cc4 <circ_calc_aa4+0x1e4>
            cir_x[cir_size] = x_int[0];
 8011c50:	69f9      	ldr	r1, [r7, #28]
 8011c52:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011c56:	005b      	lsls	r3, r3, #1
 8011c58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c5a:	4413      	add	r3, r2
 8011c5c:	b20a      	sxth	r2, r1
 8011c5e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8011c60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c68:	4413      	add	r3, r2
 8011c6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c6c:	b212      	sxth	r2, r2
 8011c6e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	4413      	add	r3, r2
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	4413      	add	r3, r2
 8011c82:	b2d9      	uxtb	r1, r3
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	b2da      	uxtb	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6858      	ldr	r0, [r3, #4]
 8011c8c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011c90:	4403      	add	r3, r0
 8011c92:	440a      	add	r2, r1
 8011c94:	b2d2      	uxtb	r2, r2
 8011c96:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	685a      	ldr	r2, [r3, #4]
 8011c9c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011ca0:	4413      	add	r3, r2
 8011ca2:	781a      	ldrb	r2, [r3, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6859      	ldr	r1, [r3, #4]
 8011ca8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011cac:	440b      	add	r3, r1
 8011cae:	0112      	lsls	r2, r2, #4
 8011cb0:	b2d2      	uxtb	r2, r2
 8011cb2:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8011cb4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	3301      	adds	r3, #1
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011cc2:	e13e      	b.n	8011f42 <circ_calc_aa4+0x462>
        }
        /*Second line on new x when downscaled*/
        else if(x_int[0] != x_int[1]) {
 8011cc4:	69fa      	ldr	r2, [r7, #28]
 8011cc6:	6a3b      	ldr	r3, [r7, #32]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d067      	beq.n	8011d9c <circ_calc_aa4+0x2bc>
            cir_x[cir_size] = x_int[0];
 8011ccc:	69f9      	ldr	r1, [r7, #28]
 8011cce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011cd2:	005b      	lsls	r3, r3, #1
 8011cd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cd6:	4413      	add	r3, r2
 8011cd8:	b20a      	sxth	r2, r1
 8011cda:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8011cdc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ce4:	4413      	add	r3, r2
 8011ce6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ce8:	b212      	sxth	r2, r2
 8011cea:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0];
 8011cec:	68f9      	ldr	r1, [r7, #12]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	685a      	ldr	r2, [r3, #4]
 8011cf2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011cf6:	4413      	add	r3, r2
 8011cf8:	b2ca      	uxtb	r2, r1
 8011cfa:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	685a      	ldr	r2, [r3, #4]
 8011d00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d04:	4413      	add	r3, r2
 8011d06:	781a      	ldrb	r2, [r3, #0]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6859      	ldr	r1, [r3, #4]
 8011d0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d10:	440b      	add	r3, r1
 8011d12:	0112      	lsls	r2, r2, #4
 8011d14:	b2d2      	uxtb	r2, r2
 8011d16:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8011d18:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	3301      	adds	r3, #1
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	b299      	uxth	r1, r3
 8011d2e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d36:	4413      	add	r3, r2
 8011d38:	b20a      	sxth	r2, r1
 8011d3a:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8011d3c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011d44:	4413      	add	r3, r2
 8011d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d48:	b212      	sxth	r2, r2
 8011d4a:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	b2da      	uxtb	r2, r3
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	4413      	add	r3, r2
 8011d56:	b2da      	uxtb	r2, r3
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	b2db      	uxtb	r3, r3
 8011d5c:	4413      	add	r3, r2
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6859      	ldr	r1, [r3, #4]
 8011d64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d68:	440b      	add	r3, r1
 8011d6a:	3204      	adds	r2, #4
 8011d6c:	b2d2      	uxtb	r2, r2
 8011d6e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	685a      	ldr	r2, [r3, #4]
 8011d74:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d78:	4413      	add	r3, r2
 8011d7a:	781a      	ldrb	r2, [r3, #0]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6859      	ldr	r1, [r3, #4]
 8011d80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d84:	440b      	add	r3, r1
 8011d86:	0112      	lsls	r2, r2, #4
 8011d88:	b2d2      	uxtb	r2, r2
 8011d8a:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8011d8c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	3301      	adds	r3, #1
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011d9a:	e0d2      	b.n	8011f42 <circ_calc_aa4+0x462>
        }
        /*Third line on new x when downscaled*/
        else if(x_int[0] != x_int[2]) {
 8011d9c:	69fa      	ldr	r2, [r7, #28]
 8011d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d067      	beq.n	8011e74 <circ_calc_aa4+0x394>
            cir_x[cir_size] = x_int[0];
 8011da4:	69f9      	ldr	r1, [r7, #28]
 8011da6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011daa:	005b      	lsls	r3, r3, #1
 8011dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011dae:	4413      	add	r3, r2
 8011db0:	b20a      	sxth	r2, r1
 8011db2:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8011db4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011dbc:	4413      	add	r3, r2
 8011dbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011dc0:	b212      	sxth	r2, r2
 8011dc2:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	b2d9      	uxtb	r1, r3
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	b2da      	uxtb	r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6858      	ldr	r0, [r3, #4]
 8011dd0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011dd4:	4403      	add	r3, r0
 8011dd6:	440a      	add	r2, r1
 8011dd8:	b2d2      	uxtb	r2, r2
 8011dda:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	685a      	ldr	r2, [r3, #4]
 8011de0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011de4:	4413      	add	r3, r2
 8011de6:	781a      	ldrb	r2, [r3, #0]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6859      	ldr	r1, [r3, #4]
 8011dec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011df0:	440b      	add	r3, r1
 8011df2:	0112      	lsls	r2, r2, #4
 8011df4:	b2d2      	uxtb	r2, r2
 8011df6:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8011df8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	3301      	adds	r3, #1
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	b299      	uxth	r1, r3
 8011e0e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011e12:	005b      	lsls	r3, r3, #1
 8011e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e16:	4413      	add	r3, r2
 8011e18:	b20a      	sxth	r2, r1
 8011e1a:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8011e1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011e20:	005b      	lsls	r3, r3, #1
 8011e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e24:	4413      	add	r3, r2
 8011e26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e28:	b212      	sxth	r2, r2
 8011e2a:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	4413      	add	r3, r2
 8011e36:	b2da      	uxtb	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6859      	ldr	r1, [r3, #4]
 8011e3c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011e40:	440b      	add	r3, r1
 8011e42:	3208      	adds	r2, #8
 8011e44:	b2d2      	uxtb	r2, r2
 8011e46:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	685a      	ldr	r2, [r3, #4]
 8011e4c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011e50:	4413      	add	r3, r2
 8011e52:	781a      	ldrb	r2, [r3, #0]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6859      	ldr	r1, [r3, #4]
 8011e58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011e5c:	440b      	add	r3, r1
 8011e5e:	0112      	lsls	r2, r2, #4
 8011e60:	b2d2      	uxtb	r2, r2
 8011e62:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8011e64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011e72:	e066      	b.n	8011f42 <circ_calc_aa4+0x462>
        }
        /*Forth line on new x when downscaled*/
        else {
            cir_x[cir_size] = x_int[0];
 8011e74:	69f9      	ldr	r1, [r7, #28]
 8011e76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011e7a:	005b      	lsls	r3, r3, #1
 8011e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e7e:	4413      	add	r3, r2
 8011e80:	b20a      	sxth	r2, r1
 8011e82:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8011e84:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011e88:	005b      	lsls	r3, r3, #1
 8011e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e8c:	4413      	add	r3, r2
 8011e8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e90:	b212      	sxth	r2, r2
 8011e92:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	b2da      	uxtb	r2, r3
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	4413      	add	r3, r2
 8011e9e:	b2d9      	uxtb	r1, r3
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	b2da      	uxtb	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6858      	ldr	r0, [r3, #4]
 8011ea8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011eac:	4403      	add	r3, r0
 8011eae:	440a      	add	r2, r1
 8011eb0:	b2d2      	uxtb	r2, r2
 8011eb2:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	685a      	ldr	r2, [r3, #4]
 8011eb8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011ebc:	4413      	add	r3, r2
 8011ebe:	781a      	ldrb	r2, [r3, #0]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6859      	ldr	r1, [r3, #4]
 8011ec4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011ec8:	440b      	add	r3, r1
 8011eca:	0112      	lsls	r2, r2, #4
 8011ecc:	b2d2      	uxtb	r2, r2
 8011ece:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8011ed0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8011ede:	69fb      	ldr	r3, [r7, #28]
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	b299      	uxth	r1, r3
 8011ee6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011eea:	005b      	lsls	r3, r3, #1
 8011eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011eee:	4413      	add	r3, r2
 8011ef0:	b20a      	sxth	r2, r1
 8011ef2:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8011ef4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011ef8:	005b      	lsls	r3, r3, #1
 8011efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011efc:	4413      	add	r3, r2
 8011efe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011f00:	b212      	sxth	r2, r2
 8011f02:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	b2da      	uxtb	r2, r3
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6859      	ldr	r1, [r3, #4]
 8011f0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011f10:	440b      	add	r3, r1
 8011f12:	320c      	adds	r2, #12
 8011f14:	b2d2      	uxtb	r2, r2
 8011f16:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	685a      	ldr	r2, [r3, #4]
 8011f1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011f20:	4413      	add	r3, r2
 8011f22:	781a      	ldrb	r2, [r3, #0]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6859      	ldr	r1, [r3, #4]
 8011f28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011f2c:	440b      	add	r3, r1
 8011f2e:	0112      	lsls	r2, r2, #4
 8011f30:	b2d2      	uxtb	r2, r2
 8011f32:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8011f34:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        y_8th_cnt++;
 8011f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f44:	3301      	adds	r3, #1
 8011f46:	657b      	str	r3, [r7, #84]	; 0x54
    while(circ_cont(&cp)) {
 8011f48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7ff fd68 	bl	8011a22 <circ_cont>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f47f ae3f 	bne.w	8011bd8 <circ_calc_aa4+0xf8>
 8011f5a:	e000      	b.n	8011f5e <circ_calc_aa4+0x47e>
        if(i != 4) break;
 8011f5c:	bf00      	nop
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
 8011f5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f62:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011f66:	fb02 f303 	mul.w	r3, r2, r3
 8011f6a:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t mid_int = mid >> 10;
 8011f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6e:	129b      	asrs	r3, r3, #10
 8011f70:	637b      	str	r3, [r7, #52]	; 0x34
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8011f72:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8011f76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011f7a:	4413      	add	r3, r2
 8011f7c:	005b      	lsls	r3, r3, #1
 8011f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f80:	4413      	add	r3, r2
 8011f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f86:	461a      	mov	r2, r3
 8011f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d10d      	bne.n	8011faa <circ_calc_aa4+0x4ca>
 8011f8e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8011f92:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011f96:	4413      	add	r3, r2
 8011f98:	005b      	lsls	r3, r3, #1
 8011f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f9c:	4413      	add	r3, r2
 8011f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d04e      	beq.n	8012048 <circ_calc_aa4+0x568>
        int32_t tmp_val = mid - (mid_int << 10);
 8011faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fac:	029b      	lsls	r3, r3, #10
 8011fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fb0:	1ad3      	subs	r3, r2, r3
 8011fb2:	64bb      	str	r3, [r7, #72]	; 0x48
        if(tmp_val <= 512) {
 8011fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fba:	dc08      	bgt.n	8011fce <circ_calc_aa4+0x4ee>
            tmp_val = tmp_val * tmp_val * 2;
 8011fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fbe:	fb03 f303 	mul.w	r3, r3, r3
 8011fc2:	005b      	lsls	r3, r3, #1
 8011fc4:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8011fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fc8:	141b      	asrs	r3, r3, #16
 8011fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fcc:	e00f      	b.n	8011fee <circ_calc_aa4+0x50e>
        }
        else {
            tmp_val = 1024 - tmp_val;
 8011fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fd0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8011fd4:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val * tmp_val * 2;
 8011fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fd8:	fb03 f303 	mul.w	r3, r3, r3
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8011fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fe2:	141b      	asrs	r3, r3, #16
 8011fe4:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = 15 - tmp_val;
 8011fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fe8:	f1c3 030f 	rsb	r3, r3, #15
 8011fec:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        cir_x[cir_size] = mid_int;
 8011fee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011ff2:	005b      	lsls	r3, r3, #1
 8011ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ff6:	4413      	add	r3, r2
 8011ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ffa:	b212      	sxth	r2, r2
 8011ffc:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = mid_int;
 8011ffe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012002:	005b      	lsls	r3, r3, #1
 8012004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012006:	4413      	add	r3, r2
 8012008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801200a:	b212      	sxth	r2, r2
 801200c:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = tmp_val;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	685a      	ldr	r2, [r3, #4]
 8012012:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012016:	4413      	add	r3, r2
 8012018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801201a:	b2d2      	uxtb	r2, r2
 801201c:	701a      	strb	r2, [r3, #0]
        c->cir_opa[cir_size] *= 16;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	685a      	ldr	r2, [r3, #4]
 8012022:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012026:	4413      	add	r3, r2
 8012028:	781a      	ldrb	r2, [r3, #0]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6859      	ldr	r1, [r3, #4]
 801202e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012032:	440b      	add	r3, r1
 8012034:	0112      	lsls	r2, r2, #4
 8012036:	b2d2      	uxtb	r2, r2
 8012038:	701a      	strb	r2, [r3, #0]
        cir_size++;
 801203a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801203e:	b29b      	uxth	r3, r3
 8012040:	3301      	adds	r3, #1
 8012042:	b29b      	uxth	r3, r3
 8012044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8012048:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801204c:	3b02      	subs	r3, #2
 801204e:	653b      	str	r3, [r7, #80]	; 0x50
 8012050:	e02c      	b.n	80120ac <circ_calc_aa4+0x5cc>
        cir_x[cir_size] = cir_y[i];
 8012052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012054:	005b      	lsls	r3, r3, #1
 8012056:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012058:	441a      	add	r2, r3
 801205a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801205e:	005b      	lsls	r3, r3, #1
 8012060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012062:	440b      	add	r3, r1
 8012064:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012068:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = cir_x[i];
 801206a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801206c:	005b      	lsls	r3, r3, #1
 801206e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012070:	441a      	add	r2, r3
 8012072:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012076:	005b      	lsls	r3, r3, #1
 8012078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801207a:	440b      	add	r3, r1
 801207c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012080:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = c->cir_opa[i];
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	685a      	ldr	r2, [r3, #4]
 8012086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012088:	441a      	add	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6859      	ldr	r1, [r3, #4]
 801208e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012092:	440b      	add	r3, r1
 8012094:	7812      	ldrb	r2, [r2, #0]
 8012096:	701a      	strb	r2, [r3, #0]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8012098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801209a:	3b01      	subs	r3, #1
 801209c:	653b      	str	r3, [r7, #80]	; 0x50
 801209e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	3301      	adds	r3, #1
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80120ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	dacf      	bge.n	8012052 <circ_calc_aa4+0x572>
    }

    lv_coord_t y = 0;
 80120b2:	2300      	movs	r3, #0
 80120b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    i = 0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	653b      	str	r3, [r7, #80]	; 0x50
    c->opa_start_on_y[0] = 0;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	2200      	movs	r2, #0
 80120c2:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 80120c4:	e049      	b.n	801215a <circ_calc_aa4+0x67a>
        c->opa_start_on_y[y] = i;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	68da      	ldr	r2, [r3, #12]
 80120ca:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80120ce:	005b      	lsls	r3, r3, #1
 80120d0:	4413      	add	r3, r2
 80120d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80120d4:	b292      	uxth	r2, r2
 80120d6:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[y] = cir_x[i];
 80120d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120da:	005b      	lsls	r3, r3, #1
 80120dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120de:	4413      	add	r3, r2
 80120e0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	689a      	ldr	r2, [r3, #8]
 80120e8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80120ec:	005b      	lsls	r3, r3, #1
 80120ee:	4413      	add	r3, r2
 80120f0:	b28a      	uxth	r2, r1
 80120f2:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 80120f4:	e01b      	b.n	801212e <circ_calc_aa4+0x64e>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 80120f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120f8:	005b      	lsls	r3, r3, #1
 80120fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120fc:	4413      	add	r3, r2
 80120fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012102:	4619      	mov	r1, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	689a      	ldr	r2, [r3, #8]
 8012108:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801210c:	005b      	lsls	r3, r3, #1
 801210e:	4413      	add	r3, r2
 8012110:	881b      	ldrh	r3, [r3, #0]
 8012112:	4299      	cmp	r1, r3
 8012114:	bfa8      	it	ge
 8012116:	4619      	movge	r1, r3
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	689a      	ldr	r2, [r3, #8]
 801211c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	4413      	add	r3, r2
 8012124:	b28a      	uxth	r2, r1
 8012126:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8012128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801212a:	3301      	adds	r3, #1
 801212c:	653b      	str	r3, [r7, #80]	; 0x50
 801212e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012130:	005b      	lsls	r3, r3, #1
 8012132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012134:	4413      	add	r3, r2
 8012136:	f9b3 3000 	ldrsh.w	r3, [r3]
 801213a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 801213e:	429a      	cmp	r2, r3
 8012140:	d104      	bne.n	801214c <circ_calc_aa4+0x66c>
 8012142:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012146:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012148:	429a      	cmp	r2, r3
 801214a:	dbd4      	blt.n	80120f6 <circ_calc_aa4+0x616>
        }
        y++;
 801214c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012150:	b29b      	uxth	r3, r3
 8012152:	3301      	adds	r3, #1
 8012154:	b29b      	uxth	r3, r3
 8012156:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while(i < cir_size) {
 801215a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801215e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012160:	429a      	cmp	r2, r3
 8012162:	dbb0      	blt.n	80120c6 <circ_calc_aa4+0x5e6>
    }

    lv_mem_buf_release(cir_x);
 8012164:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012166:	f00e f84f 	bl	8020208 <lv_mem_buf_release>
 801216a:	e000      	b.n	801216e <circ_calc_aa4+0x68e>
    if(radius == 0) return;
 801216c:	bf00      	nop
}
 801216e:	3758      	adds	r7, #88	; 0x58
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <get_next_line>:

static lv_opa_t * get_next_line(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t y, lv_coord_t * len,
                                lv_coord_t * x_start)
{
 8012174:	b480      	push	{r7}
 8012176:	b085      	sub	sp, #20
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	607a      	str	r2, [r7, #4]
 801217e:	603b      	str	r3, [r7, #0]
 8012180:	460b      	mov	r3, r1
 8012182:	817b      	strh	r3, [r7, #10]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	68da      	ldr	r2, [r3, #12]
 8012188:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801218c:	3301      	adds	r3, #1
 801218e:	005b      	lsls	r3, r3, #1
 8012190:	4413      	add	r3, r2
 8012192:	881a      	ldrh	r2, [r3, #0]
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	68d9      	ldr	r1, [r3, #12]
 8012198:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801219c:	005b      	lsls	r3, r3, #1
 801219e:	440b      	add	r3, r1
 80121a0:	881b      	ldrh	r3, [r3, #0]
 80121a2:	1ad3      	subs	r3, r2, r3
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	b21a      	sxth	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	801a      	strh	r2, [r3, #0]
    *x_start = c->x_start_on_y[y];
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	689a      	ldr	r2, [r3, #8]
 80121b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80121b4:	005b      	lsls	r3, r3, #1
 80121b6:	4413      	add	r3, r2
 80121b8:	881b      	ldrh	r3, [r3, #0]
 80121ba:	b21a      	sxth	r2, r3
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	801a      	strh	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	68fa      	ldr	r2, [r7, #12]
 80121c6:	68d1      	ldr	r1, [r2, #12]
 80121c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80121cc:	0052      	lsls	r2, r2, #1
 80121ce:	440a      	add	r2, r1
 80121d0:	8812      	ldrh	r2, [r2, #0]
 80121d2:	4413      	add	r3, r2
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3714      	adds	r7, #20
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <mask_mix>:


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	4603      	mov	r3, r0
 80121e8:	460a      	mov	r2, r1
 80121ea:	71fb      	strb	r3, [r7, #7]
 80121ec:	4613      	mov	r3, r2
 80121ee:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 80121f0:	79bb      	ldrb	r3, [r7, #6]
 80121f2:	2bfc      	cmp	r3, #252	; 0xfc
 80121f4:	d901      	bls.n	80121fa <mask_mix+0x1a>
 80121f6:	79fb      	ldrb	r3, [r7, #7]
 80121f8:	e010      	b.n	801221c <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 80121fa:	79bb      	ldrb	r3, [r7, #6]
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	d801      	bhi.n	8012204 <mask_mix+0x24>
 8012200:	2300      	movs	r3, #0
 8012202:	e00b      	b.n	801221c <mask_mix+0x3c>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8012204:	79fb      	ldrb	r3, [r7, #7]
 8012206:	79ba      	ldrb	r2, [r7, #6]
 8012208:	fb02 f303 	mul.w	r3, r2, r3
 801220c:	461a      	mov	r2, r3
 801220e:	4613      	mov	r3, r2
 8012210:	021b      	lsls	r3, r3, #8
 8012212:	4413      	add	r3, r2
 8012214:	01db      	lsls	r3, r3, #7
 8012216:	4413      	add	r3, r2
 8012218:	0ddb      	lsrs	r3, r3, #23
 801221a:	b2db      	uxtb	r3, r3
}
 801221c:	4618      	mov	r0, r3
 801221e:	370c      	adds	r7, #12
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr

08012228 <lv_area_get_width>:
{
 8012228:	b480      	push	{r7}
 801222a:	b083      	sub	sp, #12
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012236:	b29a      	uxth	r2, r3
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801223e:	b29b      	uxth	r3, r3
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	b29b      	uxth	r3, r3
 8012244:	3301      	adds	r3, #1
 8012246:	b29b      	uxth	r3, r3
 8012248:	b21b      	sxth	r3, r3
}
 801224a:	4618      	mov	r0, r3
 801224c:	370c      	adds	r7, #12
 801224e:	46bd      	mov	sp, r7
 8012250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012254:	4770      	bx	lr

08012256 <lv_area_get_height>:
{
 8012256:	b480      	push	{r7}
 8012258:	b083      	sub	sp, #12
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012264:	b29a      	uxth	r2, r3
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801226c:	b29b      	uxth	r3, r3
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	b29b      	uxth	r3, r3
 8012272:	3301      	adds	r3, #1
 8012274:	b29b      	uxth	r3, r3
 8012276:	b21b      	sxth	r3, r3
}
 8012278:	4618      	mov	r0, r3
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <lv_color_make>:
{
 8012284:	b480      	push	{r7}
 8012286:	b083      	sub	sp, #12
 8012288:	af00      	add	r7, sp, #0
 801228a:	4603      	mov	r3, r0
 801228c:	71fb      	strb	r3, [r7, #7]
 801228e:	460b      	mov	r3, r1
 8012290:	71bb      	strb	r3, [r7, #6]
 8012292:	4613      	mov	r3, r2
 8012294:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8012296:	797b      	ldrb	r3, [r7, #5]
 8012298:	09db      	lsrs	r3, r3, #7
 801229a:	b2da      	uxtb	r2, r3
 801229c:	79bb      	ldrb	r3, [r7, #6]
 801229e:	09db      	lsrs	r3, r3, #7
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	4313      	orrs	r3, r2
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	79fb      	ldrb	r3, [r7, #7]
 80122a8:	09db      	lsrs	r3, r3, #7
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	4313      	orrs	r3, r2
 80122ae:	b2db      	uxtb	r3, r3
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr

080122bc <lv_color_white>:
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 80122c0:	22ff      	movs	r2, #255	; 0xff
 80122c2:	21ff      	movs	r1, #255	; 0xff
 80122c4:	20ff      	movs	r0, #255	; 0xff
 80122c6:	f7ff ffdd 	bl	8012284 <lv_color_make>
 80122ca:	4603      	mov	r3, r0
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <lv_color_black>:
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80122d4:	2200      	movs	r2, #0
 80122d6:	2100      	movs	r1, #0
 80122d8:	2000      	movs	r0, #0
 80122da:	f7ff ffd3 	bl	8012284 <lv_color_make>
 80122de:	4603      	mov	r3, r0
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 80122e4:	b590      	push	{r4, r7, lr}
 80122e6:	b083      	sub	sp, #12
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 80122ec:	2130      	movs	r1, #48	; 0x30
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f00e fa88 	bl	8020804 <lv_memset_00>
    dsc->bg_color = lv_color_white();
 80122f4:	687c      	ldr	r4, [r7, #4]
 80122f6:	f7ff ffe1 	bl	80122bc <lv_color_white>
 80122fa:	7120      	strb	r0, [r4, #4]
    dsc->bg_grad.stops[0].color = lv_color_white();
 80122fc:	687c      	ldr	r4, [r7, #4]
 80122fe:	f7ff ffdd 	bl	80122bc <lv_color_white>
 8012302:	7160      	strb	r0, [r4, #5]
    dsc->bg_grad.stops[1].color = lv_color_black();
 8012304:	687c      	ldr	r4, [r7, #4]
 8012306:	f7ff ffe3 	bl	80122d0 <lv_color_black>
 801230a:	71e0      	strb	r0, [r4, #7]
    dsc->bg_grad.stops[1].frac = 0xFF;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	22ff      	movs	r2, #255	; 0xff
 8012310:	721a      	strb	r2, [r3, #8]
    dsc->bg_grad.stops_count = 2;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2202      	movs	r2, #2
 8012316:	725a      	strb	r2, [r3, #9]
    dsc->border_color = lv_color_black();
 8012318:	687c      	ldr	r4, [r7, #4]
 801231a:	f7ff ffd9 	bl	80122d0 <lv_color_black>
 801231e:	7620      	strb	r0, [r4, #24]
    dsc->shadow_color = lv_color_black();
 8012320:	687c      	ldr	r4, [r7, #4]
 8012322:	f7ff ffd5 	bl	80122d0 <lv_color_black>
 8012326:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4a0e      	ldr	r2, [pc, #56]	; (8012368 <lv_draw_rect_dsc_init+0x84>)
 801232e:	611a      	str	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	22ff      	movs	r2, #255	; 0xff
 8012334:	70da      	strb	r2, [r3, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	22ff      	movs	r2, #255	; 0xff
 801233a:	755a      	strb	r2, [r3, #21]
    dsc->outline_opa = LV_OPA_COVER;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	22ff      	movs	r2, #255	; 0xff
 8012340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    dsc->border_opa = LV_OPA_COVER;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	22ff      	movs	r2, #255	; 0xff
 8012348:	771a      	strb	r2, [r3, #28]
    dsc->shadow_opa = LV_OPA_COVER;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	22ff      	movs	r2, #255	; 0xff
 801234e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    dsc->border_side = LV_BORDER_SIDE_FULL;
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	7f53      	ldrb	r3, [r2, #29]
 8012356:	210f      	movs	r1, #15
 8012358:	f361 0345 	bfi	r3, r1, #1, #5
 801235c:	7753      	strb	r3, [r2, #29]
}
 801235e:	bf00      	nop
 8012360:	370c      	adds	r7, #12
 8012362:	46bd      	mov	sp, r7
 8012364:	bd90      	pop	{r4, r7, pc}
 8012366:	bf00      	nop
 8012368:	080262ec 	.word	0x080262ec

0801236c <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7ff ff6c 	bl	8012256 <lv_area_get_height>
 801237e:	4603      	mov	r3, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	dd0c      	ble.n	801239e <lv_draw_rect+0x32>
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7ff ff4f 	bl	8012228 <lv_area_get_width>
 801238a:	4603      	mov	r3, r0
 801238c:	2b00      	cmp	r3, #0
 801238e:	dd06      	ble.n	801239e <lv_draw_rect+0x32>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	68b9      	ldr	r1, [r7, #8]
 8012398:	68f8      	ldr	r0, [r7, #12]
 801239a:	4798      	blx	r3
 801239c:	e000      	b.n	80123a0 <lv_draw_rect+0x34>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 801239e:	bf00      	nop

    LV_ASSERT_MEM_INTEGRITY();
}
 80123a0:	3710      	adds	r7, #16
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}

080123a6 <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 80123a6:	b590      	push	{r4, r7, lr}
 80123a8:	b08b      	sub	sp, #44	; 0x2c
 80123aa:	af06      	add	r7, sp, #24
 80123ac:	60f8      	str	r0, [r7, #12]
 80123ae:	60b9      	str	r1, [r7, #8]
 80123b0:	607a      	str	r2, [r7, #4]
 80123b2:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_NULL(draw_ctx);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d100      	bne.n	80123bc <lv_draw_transform+0x16>
 80123ba:	e7fe      	b.n	80123ba <lv_draw_transform+0x14>
    if(draw_ctx->draw_transform == NULL) {
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d018      	beq.n	80123f6 <lv_draw_transform+0x50>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80123c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80123cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ce:	9305      	str	r3, [sp, #20]
 80123d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d2:	9304      	str	r3, [sp, #16]
 80123d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80123d8:	9303      	str	r3, [sp, #12]
 80123da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123dc:	9302      	str	r3, [sp, #8]
 80123de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80123e2:	9301      	str	r3, [sp, #4]
 80123e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80123e8:	9300      	str	r3, [sp, #0]
 80123ea:	4613      	mov	r3, r2
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	68b9      	ldr	r1, [r7, #8]
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	47a0      	blx	r4
 80123f4:	e000      	b.n	80123f8 <lv_draw_transform+0x52>
        return;
 80123f6:	bf00      	nop

}
 80123f8:	3714      	adds	r7, #20
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd90      	pop	{r4, r7, pc}

080123fe <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 80123fe:	b580      	push	{r7, lr}
 8012400:	b088      	sub	sp, #32
 8012402:	af00      	add	r7, sp, #0
 8012404:	60f8      	str	r0, [r7, #12]
 8012406:	4608      	mov	r0, r1
 8012408:	4611      	mov	r1, r2
 801240a:	461a      	mov	r2, r3
 801240c:	4603      	mov	r3, r0
 801240e:	817b      	strh	r3, [r7, #10]
 8012410:	460b      	mov	r3, r1
 8012412:	813b      	strh	r3, [r7, #8]
 8012414:	4613      	mov	r3, r2
 8012416:	80fb      	strh	r3, [r7, #6]
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 8012418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d116      	bne.n	801244e <_lv_img_buf_get_transformed_area+0x50>
 8012420:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012426:	d112      	bne.n	801244e <_lv_img_buf_get_transformed_area+0x50>
        res->x1 = 0;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2200      	movs	r2, #0
 801242c:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	2200      	movs	r2, #0
 8012432:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 8012434:	897b      	ldrh	r3, [r7, #10]
 8012436:	3b01      	subs	r3, #1
 8012438:	b29b      	uxth	r3, r3
 801243a:	b21a      	sxth	r2, r3
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 8012440:	893b      	ldrh	r3, [r7, #8]
 8012442:	3b01      	subs	r3, #1
 8012444:	b29b      	uxth	r3, r3
 8012446:	b21a      	sxth	r2, r3
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	80da      	strh	r2, [r3, #6]
 801244c:	e09c      	b.n	8012588 <_lv_img_buf_get_transformed_area+0x18a>
        return;
    }

    lv_point_t p[4] = {
 801244e:	2300      	movs	r3, #0
 8012450:	823b      	strh	r3, [r7, #16]
 8012452:	2300      	movs	r3, #0
 8012454:	827b      	strh	r3, [r7, #18]
 8012456:	897b      	ldrh	r3, [r7, #10]
 8012458:	82bb      	strh	r3, [r7, #20]
 801245a:	2300      	movs	r3, #0
 801245c:	82fb      	strh	r3, [r7, #22]
 801245e:	2300      	movs	r3, #0
 8012460:	833b      	strh	r3, [r7, #24]
 8012462:	893b      	ldrh	r3, [r7, #8]
 8012464:	837b      	strh	r3, [r7, #26]
 8012466:	897b      	ldrh	r3, [r7, #10]
 8012468:	83bb      	strh	r3, [r7, #28]
 801246a:	893b      	ldrh	r3, [r7, #8]
 801246c:	83fb      	strh	r3, [r7, #30]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 801246e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012472:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012474:	f107 0010 	add.w	r0, r7, #16
 8012478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247a:	f00c fd79 	bl	801ef70 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 801247e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012482:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012484:	f107 0310 	add.w	r3, r7, #16
 8012488:	1d18      	adds	r0, r3, #4
 801248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248c:	f00c fd70 	bl	801ef70 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 8012490:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012494:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012496:	f107 0310 	add.w	r3, r7, #16
 801249a:	f103 0008 	add.w	r0, r3, #8
 801249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a0:	f00c fd66 	bl	801ef70 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 80124a4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80124a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80124aa:	f107 0310 	add.w	r3, r7, #16
 80124ae:	f103 000c 	add.w	r0, r3, #12
 80124b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b4:	f00c fd5c 	bl	801ef70 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 80124b8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80124bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80124c0:	4293      	cmp	r3, r2
 80124c2:	bfa8      	it	ge
 80124c4:	4613      	movge	r3, r2
 80124c6:	b21a      	sxth	r2, r3
 80124c8:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80124cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80124d0:	428b      	cmp	r3, r1
 80124d2:	bfa8      	it	ge
 80124d4:	460b      	movge	r3, r1
 80124d6:	b21b      	sxth	r3, r3
 80124d8:	4293      	cmp	r3, r2
 80124da:	bfa8      	it	ge
 80124dc:	4613      	movge	r3, r2
 80124de:	b21b      	sxth	r3, r3
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	3b02      	subs	r3, #2
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	b21a      	sxth	r2, r3
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 80124ec:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80124f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80124f4:	4293      	cmp	r3, r2
 80124f6:	bfb8      	it	lt
 80124f8:	4613      	movlt	r3, r2
 80124fa:	b21a      	sxth	r2, r3
 80124fc:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8012500:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012504:	428b      	cmp	r3, r1
 8012506:	bfb8      	it	lt
 8012508:	460b      	movlt	r3, r1
 801250a:	b21b      	sxth	r3, r3
 801250c:	4293      	cmp	r3, r2
 801250e:	bfb8      	it	lt
 8012510:	4613      	movlt	r3, r2
 8012512:	b21b      	sxth	r3, r3
 8012514:	b29b      	uxth	r3, r3
 8012516:	3302      	adds	r3, #2
 8012518:	b29b      	uxth	r3, r3
 801251a:	b21a      	sxth	r2, r3
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 8012520:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012524:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012528:	4293      	cmp	r3, r2
 801252a:	bfa8      	it	ge
 801252c:	4613      	movge	r3, r2
 801252e:	b21a      	sxth	r2, r3
 8012530:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012534:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012538:	428b      	cmp	r3, r1
 801253a:	bfa8      	it	ge
 801253c:	460b      	movge	r3, r1
 801253e:	b21b      	sxth	r3, r3
 8012540:	4293      	cmp	r3, r2
 8012542:	bfa8      	it	ge
 8012544:	4613      	movge	r3, r2
 8012546:	b21b      	sxth	r3, r3
 8012548:	b29b      	uxth	r3, r3
 801254a:	3b02      	subs	r3, #2
 801254c:	b29b      	uxth	r3, r3
 801254e:	b21a      	sxth	r2, r3
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 8012554:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012558:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801255c:	4293      	cmp	r3, r2
 801255e:	bfb8      	it	lt
 8012560:	4613      	movlt	r3, r2
 8012562:	b21a      	sxth	r2, r3
 8012564:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012568:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801256c:	428b      	cmp	r3, r1
 801256e:	bfb8      	it	lt
 8012570:	460b      	movlt	r3, r1
 8012572:	b21b      	sxth	r3, r3
 8012574:	4293      	cmp	r3, r2
 8012576:	bfb8      	it	lt
 8012578:	4613      	movlt	r3, r2
 801257a:	b21b      	sxth	r3, r3
 801257c:	b29b      	uxth	r3, r3
 801257e:	3302      	adds	r3, #2
 8012580:	b29b      	uxth	r3, r3
 8012582:	b21a      	sxth	r2, r3
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 8012588:	3720      	adds	r7, #32
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
	...

08012590 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b088      	sub	sp, #32
 8012594:	af00      	add	r7, sp, #0
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	7239      	strb	r1, [r7, #8]
 801259a:	607a      	str	r2, [r7, #4]
    /*Is the image cached?*/
    _lv_img_cache_entry_t * cached_src = NULL;
 801259c:	2300      	movs	r3, #0
 801259e:	61fb      	str	r3, [r7, #28]
    }
    else {
        LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
 80125a0:	4b19      	ldr	r3, [pc, #100]	; (8012608 <_lv_img_cache_open+0x78>)
 80125a2:	61fb      	str	r3, [r7, #28]
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 80125a4:	f00b fdc4 	bl	801e130 <lv_tick_get>
 80125a8:	61b8      	str	r0, [r7, #24]
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 80125aa:	69f8      	ldr	r0, [r7, #28]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	7a3a      	ldrb	r2, [r7, #8]
 80125b0:	68f9      	ldr	r1, [r7, #12]
 80125b2:	f000 f8e9 	bl	8012788 <lv_img_decoder_open>
 80125b6:	4603      	mov	r3, r0
 80125b8:	75fb      	strb	r3, [r7, #23]
    if(open_res == LV_RES_INV) {
 80125ba:	7dfb      	ldrb	r3, [r7, #23]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d109      	bne.n	80125d4 <_lv_img_cache_open+0x44>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 80125c0:	212c      	movs	r1, #44	; 0x2c
 80125c2:	69f8      	ldr	r0, [r7, #28]
 80125c4:	f00e f91e 	bl	8020804 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80125ce:	629a      	str	r2, [r3, #40]	; 0x28
        return NULL;
 80125d0:	2300      	movs	r3, #0
 80125d2:	e014      	b.n	80125fe <_lv_img_cache_open+0x6e>
    }

    cached_src->life = 0;
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	2200      	movs	r2, #0
 80125d8:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 80125da:	69fb      	ldr	r3, [r7, #28]
 80125dc:	69db      	ldr	r3, [r3, #28]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d105      	bne.n	80125ee <_lv_img_cache_open+0x5e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80125e2:	69b8      	ldr	r0, [r7, #24]
 80125e4:	f00b fdbe 	bl	801e164 <lv_tick_elaps>
 80125e8:	4602      	mov	r2, r0
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	61da      	str	r2, [r3, #28]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	69db      	ldr	r3, [r3, #28]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d102      	bne.n	80125fc <_lv_img_cache_open+0x6c>
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	2201      	movs	r2, #1
 80125fa:	61da      	str	r2, [r3, #28]

    return cached_src;
 80125fc:	69fb      	ldr	r3, [r7, #28]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3720      	adds	r7, #32
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	20000850 	.word	0x20000850

0801260c <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 8012614:	bf00      	nop
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <lv_memcpy_small>:
{
 8012620:	b480      	push	{r7}
 8012622:	b087      	sub	sp, #28
 8012624:	af00      	add	r7, sp, #0
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	613b      	str	r3, [r7, #16]
    while(len) {
 8012634:	e00c      	b.n	8012650 <lv_memcpy_small+0x30>
        *d8 = *s8;
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	781a      	ldrb	r2, [r3, #0]
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	701a      	strb	r2, [r3, #0]
        d8++;
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	3301      	adds	r3, #1
 8012642:	617b      	str	r3, [r7, #20]
        s8++;
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	3301      	adds	r3, #1
 8012648:	613b      	str	r3, [r7, #16]
        len--;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	3b01      	subs	r3, #1
 801264e:	607b      	str	r3, [r7, #4]
    while(len) {
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1ef      	bne.n	8012636 <lv_memcpy_small+0x16>
    return dst;
 8012656:	68fb      	ldr	r3, [r7, #12]
}
 8012658:	4618      	mov	r0, r3
 801265a:	371c      	adds	r7, #28
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <lv_color_make>:
{
 8012664:	b480      	push	{r7}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
 801266a:	4603      	mov	r3, r0
 801266c:	71fb      	strb	r3, [r7, #7]
 801266e:	460b      	mov	r3, r1
 8012670:	71bb      	strb	r3, [r7, #6]
 8012672:	4613      	mov	r3, r2
 8012674:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8012676:	797b      	ldrb	r3, [r7, #5]
 8012678:	09db      	lsrs	r3, r3, #7
 801267a:	b2da      	uxtb	r2, r3
 801267c:	79bb      	ldrb	r3, [r7, #6]
 801267e:	09db      	lsrs	r3, r3, #7
 8012680:	b2db      	uxtb	r3, r3
 8012682:	4313      	orrs	r3, r2
 8012684:	b2da      	uxtb	r2, r3
 8012686:	79fb      	ldrb	r3, [r7, #7]
 8012688:	09db      	lsrs	r3, r3, #7
 801268a:	b2db      	uxtb	r3, r3
 801268c:	4313      	orrs	r3, r2
 801268e:	b2db      	uxtb	r3, r3
}
 8012690:	4618      	mov	r0, r3
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr

0801269c <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 */
void _lv_img_decoder_init(void)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 80126a2:	2114      	movs	r1, #20
 80126a4:	4810      	ldr	r0, [pc, #64]	; (80126e8 <_lv_img_decoder_init+0x4c>)
 80126a6:	f00d f9dc 	bl	801fa62 <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 80126aa:	f000 f96d 	bl	8012988 <lv_img_decoder_create>
 80126ae:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d100      	bne.n	80126b8 <_lv_img_decoder_init+0x1c>
 80126b6:	e7fe      	b.n	80126b6 <_lv_img_decoder_init+0x1a>
    if(decoder == NULL) {
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d010      	beq.n	80126e0 <_lv_img_decoder_init+0x44>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 80126be:	490b      	ldr	r1, [pc, #44]	; (80126ec <_lv_img_decoder_init+0x50>)
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f000 f97d 	bl	80129c0 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 80126c6:	490a      	ldr	r1, [pc, #40]	; (80126f0 <_lv_img_decoder_init+0x54>)
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f000 f987 	bl	80129dc <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 80126ce:	4909      	ldr	r1, [pc, #36]	; (80126f4 <_lv_img_decoder_init+0x58>)
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 f991 	bl	80129f8 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 80126d6:	4908      	ldr	r1, [pc, #32]	; (80126f8 <_lv_img_decoder_init+0x5c>)
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 f99b 	bl	8012a14 <lv_img_decoder_set_close_cb>
 80126de:	e000      	b.n	80126e2 <_lv_img_decoder_init+0x46>
        return;
 80126e0:	bf00      	nop
}
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	20000834 	.word	0x20000834
 80126ec:	08012a31 	.word	0x08012a31
 80126f0:	08012b81 	.word	0x08012b81
 80126f4:	08012e45 	.word	0x08012e45
 80126f8:	08012f69 	.word	0x08012f69

080126fc <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const void * src, lv_img_header_t * header)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b086      	sub	sp, #24
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
    lv_memset_00(header, sizeof(lv_img_header_t));
 8012706:	2104      	movs	r1, #4
 8012708:	6838      	ldr	r0, [r7, #0]
 801270a:	f00e f87b 	bl	8020804 <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d101      	bne.n	8012718 <lv_img_decoder_get_info+0x1c>
 8012714:	2300      	movs	r3, #0
 8012716:	e030      	b.n	801277a <lv_img_decoder_get_info+0x7e>

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7fb ff76 	bl	800e60a <lv_img_src_get_type>
 801271e:	4603      	mov	r3, r0
 8012720:	73fb      	strb	r3, [r7, #15]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8012722:	7bfb      	ldrb	r3, [r7, #15]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d107      	bne.n	8012738 <lv_img_decoder_get_info+0x3c>
        const lv_img_dsc_t * img_dsc = src;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	60bb      	str	r3, [r7, #8]
        if(img_dsc->data == NULL) return LV_RES_INV;
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	689b      	ldr	r3, [r3, #8]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d101      	bne.n	8012738 <lv_img_decoder_get_info+0x3c>
 8012734:	2300      	movs	r3, #0
 8012736:	e020      	b.n	801277a <lv_img_decoder_get_info+0x7e>
    }

    lv_res_t res = LV_RES_INV;
 8012738:	2300      	movs	r3, #0
 801273a:	75fb      	strb	r3, [r7, #23]
    lv_img_decoder_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 801273c:	4811      	ldr	r0, [pc, #68]	; (8012784 <lv_img_decoder_get_info+0x88>)
 801273e:	f00d fa6e 	bl	801fc1e <_lv_ll_get_head>
 8012742:	6138      	str	r0, [r7, #16]
 8012744:	e013      	b.n	801276e <lv_img_decoder_get_info+0x72>
        if(d->info_cb) {
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d00a      	beq.n	8012764 <lv_img_decoder_get_info+0x68>
            res = d->info_cb(d, src, header);
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	6879      	ldr	r1, [r7, #4]
 8012756:	6938      	ldr	r0, [r7, #16]
 8012758:	4798      	blx	r3
 801275a:	4603      	mov	r3, r0
 801275c:	75fb      	strb	r3, [r7, #23]
            if(res == LV_RES_OK) break;
 801275e:	7dfb      	ldrb	r3, [r7, #23]
 8012760:	2b01      	cmp	r3, #1
 8012762:	d008      	beq.n	8012776 <lv_img_decoder_get_info+0x7a>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8012764:	6939      	ldr	r1, [r7, #16]
 8012766:	4807      	ldr	r0, [pc, #28]	; (8012784 <lv_img_decoder_get_info+0x88>)
 8012768:	f00d fa7b 	bl	801fc62 <_lv_ll_get_next>
 801276c:	6138      	str	r0, [r7, #16]
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d1e8      	bne.n	8012746 <lv_img_decoder_get_info+0x4a>
 8012774:	e000      	b.n	8012778 <lv_img_decoder_get_info+0x7c>
            if(res == LV_RES_OK) break;
 8012776:	bf00      	nop
        }
    }

    return res;
 8012778:	7dfb      	ldrb	r3, [r7, #23]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3718      	adds	r7, #24
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	20000834 	.word	0x20000834

08012788 <lv_img_decoder_open>:

lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color, int32_t frame_id)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b08a      	sub	sp, #40	; 0x28
 801278c:	af00      	add	r7, sp, #0
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	713a      	strb	r2, [r7, #4]
 8012794:	603b      	str	r3, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 8012796:	2128      	movs	r1, #40	; 0x28
 8012798:	68f8      	ldr	r0, [r7, #12]
 801279a:	f00e f833 	bl	8020804 <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d101      	bne.n	80127a8 <lv_img_decoder_open+0x20>
 80127a4:	2300      	movs	r3, #0
 80127a6:	e096      	b.n	80128d6 <lv_img_decoder_open+0x14e>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80127a8:	68b8      	ldr	r0, [r7, #8]
 80127aa:	f7fb ff2e 	bl	800e60a <lv_img_src_get_type>
 80127ae:	4603      	mov	r3, r0
 80127b0:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80127b2:	7ffb      	ldrb	r3, [r7, #31]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d107      	bne.n	80127c8 <lv_img_decoder_open+0x40>
        const lv_img_dsc_t * img_dsc = src;
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	61bb      	str	r3, [r7, #24]
        if(img_dsc->data == NULL) return LV_RES_INV;
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d101      	bne.n	80127c8 <lv_img_decoder_open+0x40>
 80127c4:	2300      	movs	r3, #0
 80127c6:	e086      	b.n	80128d6 <lv_img_decoder_open+0x14e>
    }

    dsc->color    = color;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	793a      	ldrb	r2, [r7, #4]
 80127cc:	721a      	strb	r2, [r3, #8]
    dsc->src_type = src_type;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	7ffa      	ldrb	r2, [r7, #31]
 80127d2:	741a      	strb	r2, [r3, #16]
    dsc->frame_id = frame_id;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	683a      	ldr	r2, [r7, #0]
 80127d8:	60da      	str	r2, [r3, #12]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	7c1b      	ldrb	r3, [r3, #16]
 80127de:	2b01      	cmp	r3, #1
 80127e0:	d11d      	bne.n	801281e <lv_img_decoder_open+0x96>
        size_t fnlen = strlen(src);
 80127e2:	68b8      	ldr	r0, [r7, #8]
 80127e4:	f7ed fd32 	bl	800024c <strlen>
 80127e8:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	3301      	adds	r3, #1
 80127ee:	4618      	mov	r0, r3
 80127f0:	f00d fbd4 	bl	801ff9c <lv_mem_alloc>
 80127f4:	4602      	mov	r2, r0
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MALLOC(dsc->src);
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	685b      	ldr	r3, [r3, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d100      	bne.n	8012804 <lv_img_decoder_open+0x7c>
 8012802:	e7fe      	b.n	8012802 <lv_img_decoder_open+0x7a>
        if(dsc->src == NULL) {
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d101      	bne.n	8012810 <lv_img_decoder_open+0x88>
            LV_LOG_WARN("lv_img_decoder_open: out of memory");
            return LV_RES_INV;
 801280c:	2300      	movs	r3, #0
 801280e:	e062      	b.n	80128d6 <lv_img_decoder_open+0x14e>
        }
        strcpy((char *)dsc->src, src);
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	68b9      	ldr	r1, [r7, #8]
 8012816:	4618      	mov	r0, r3
 8012818:	f010 f9e0 	bl	8022bdc <strcpy>
 801281c:	e002      	b.n	8012824 <lv_img_decoder_open+0x9c>
    }
    else {
        dsc->src = src;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	68ba      	ldr	r2, [r7, #8]
 8012822:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 8012824:	2300      	movs	r3, #0
 8012826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    lv_img_decoder_t * decoder;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 801282a:	482d      	ldr	r0, [pc, #180]	; (80128e0 <lv_img_decoder_open+0x158>)
 801282c:	f00d f9f7 	bl	801fc1e <_lv_ll_get_head>
 8012830:	6238      	str	r0, [r7, #32]
 8012832:	e042      	b.n	80128ba <lv_img_decoder_open+0x132>
        /*Info and Open callbacks are required*/
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 8012834:	6a3b      	ldr	r3, [r7, #32]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d036      	beq.n	80128aa <lv_img_decoder_open+0x122>
 801283c:	6a3b      	ldr	r3, [r7, #32]
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d032      	beq.n	80128aa <lv_img_decoder_open+0x122>

        res = decoder->info_cb(decoder, src, &dsc->header);
 8012844:	6a3b      	ldr	r3, [r7, #32]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	3214      	adds	r2, #20
 801284c:	68b9      	ldr	r1, [r7, #8]
 801284e:	6a38      	ldr	r0, [r7, #32]
 8012850:	4798      	blx	r3
 8012852:	4603      	mov	r3, r0
 8012854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(res != LV_RES_OK) continue;
 8012858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801285c:	2b01      	cmp	r3, #1
 801285e:	d126      	bne.n	80128ae <lv_img_decoder_open+0x126>

        dsc->decoder = decoder;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	6a3a      	ldr	r2, [r7, #32]
 8012864:	601a      	str	r2, [r3, #0]
        res = decoder->open_cb(decoder, dsc);
 8012866:	6a3b      	ldr	r3, [r7, #32]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	68f9      	ldr	r1, [r7, #12]
 801286c:	6a38      	ldr	r0, [r7, #32]
 801286e:	4798      	blx	r3
 8012870:	4603      	mov	r3, r0
 8012872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /*Opened successfully. It is a good decoder for this image source*/
        if(res == LV_RES_OK) return res;
 8012876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801287a:	2b01      	cmp	r3, #1
 801287c:	d102      	bne.n	8012884 <lv_img_decoder_open+0xfc>
 801287e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012882:	e028      	b.n	80128d6 <lv_img_decoder_open+0x14e>

        /*Prepare for the next loop*/
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	3314      	adds	r3, #20
 8012888:	2104      	movs	r1, #4
 801288a:	4618      	mov	r0, r3
 801288c:	f00d ffba 	bl	8020804 <lv_memset_00>

        dsc->error_msg = NULL;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	2200      	movs	r2, #0
 8012894:	621a      	str	r2, [r3, #32]
        dsc->img_data  = NULL;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	2200      	movs	r2, #0
 801289a:	619a      	str	r2, [r3, #24]
        dsc->user_data = NULL;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2200      	movs	r2, #0
 80128a0:	625a      	str	r2, [r3, #36]	; 0x24
        dsc->time_to_open = 0;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2200      	movs	r2, #0
 80128a6:	61da      	str	r2, [r3, #28]
 80128a8:	e002      	b.n	80128b0 <lv_img_decoder_open+0x128>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 80128aa:	bf00      	nop
 80128ac:	e000      	b.n	80128b0 <lv_img_decoder_open+0x128>
        if(res != LV_RES_OK) continue;
 80128ae:	bf00      	nop
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 80128b0:	6a39      	ldr	r1, [r7, #32]
 80128b2:	480b      	ldr	r0, [pc, #44]	; (80128e0 <lv_img_decoder_open+0x158>)
 80128b4:	f00d f9d5 	bl	801fc62 <_lv_ll_get_next>
 80128b8:	6238      	str	r0, [r7, #32]
 80128ba:	6a3b      	ldr	r3, [r7, #32]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d1b9      	bne.n	8012834 <lv_img_decoder_open+0xac>
    }

    if(dsc->src_type == LV_IMG_SRC_FILE)
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	7c1b      	ldrb	r3, [r3, #16]
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	d104      	bne.n	80128d2 <lv_img_decoder_open+0x14a>
        lv_mem_free((void *)dsc->src);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	685b      	ldr	r3, [r3, #4]
 80128cc:	4618      	mov	r0, r3
 80128ce:	f00d fb95 	bl	801fffc <lv_mem_free>

    return res;
 80128d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3728      	adds	r7, #40	; 0x28
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	20000834 	.word	0x20000834

080128e4 <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 80128e4:	b590      	push	{r4, r7, lr}
 80128e6:	b089      	sub	sp, #36	; 0x24
 80128e8:	af02      	add	r7, sp, #8
 80128ea:	60f8      	str	r0, [r7, #12]
 80128ec:	4608      	mov	r0, r1
 80128ee:	4611      	mov	r1, r2
 80128f0:	461a      	mov	r2, r3
 80128f2:	4603      	mov	r3, r0
 80128f4:	817b      	strh	r3, [r7, #10]
 80128f6:	460b      	mov	r3, r1
 80128f8:	813b      	strh	r3, [r7, #8]
 80128fa:	4613      	mov	r3, r2
 80128fc:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 80128fe:	2300      	movs	r3, #0
 8012900:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	689b      	ldr	r3, [r3, #8]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d012      	beq.n	8012932 <lv_img_decoder_read_line+0x4e>
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	689c      	ldr	r4, [r3, #8]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	6818      	ldr	r0, [r3, #0]
 8012916:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801291a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012920:	9301      	str	r3, [sp, #4]
 8012922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012926:	9300      	str	r3, [sp, #0]
 8012928:	460b      	mov	r3, r1
 801292a:	68f9      	ldr	r1, [r7, #12]
 801292c:	47a0      	blx	r4
 801292e:	4603      	mov	r3, r0
 8012930:	75fb      	strb	r3, [r7, #23]

    return res;
 8012932:	7dfb      	ldrb	r3, [r7, #23]
}
 8012934:	4618      	mov	r0, r3
 8012936:	371c      	adds	r7, #28
 8012938:	46bd      	mov	sp, r7
 801293a:	bd90      	pop	{r4, r7, pc}

0801293c <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d018      	beq.n	801297e <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d007      	beq.n	8012966 <lv_img_decoder_close+0x2a>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	6812      	ldr	r2, [r2, #0]
 8012960:	6879      	ldr	r1, [r7, #4]
 8012962:	4610      	mov	r0, r2
 8012964:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	7c1b      	ldrb	r3, [r3, #16]
 801296a:	2b01      	cmp	r3, #1
 801296c:	d107      	bne.n	801297e <lv_img_decoder_close+0x42>
            lv_mem_free((void *)dsc->src);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	4618      	mov	r0, r3
 8012974:	f00d fb42 	bl	801fffc <lv_mem_free>
            dsc->src = NULL;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2200      	movs	r2, #0
 801297c:	605a      	str	r2, [r3, #4]
        }
    }
}
 801297e:	bf00      	nop
 8012980:	3708      	adds	r7, #8
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
	...

08012988 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 801298e:	480b      	ldr	r0, [pc, #44]	; (80129bc <lv_img_decoder_create+0x34>)
 8012990:	f00d f880 	bl	801fa94 <_lv_ll_ins_head>
 8012994:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d100      	bne.n	801299e <lv_img_decoder_create+0x16>
 801299c:	e7fe      	b.n	801299c <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d101      	bne.n	80129a8 <lv_img_decoder_create+0x20>
 80129a4:	2300      	movs	r3, #0
 80129a6:	e004      	b.n	80129b2 <lv_img_decoder_create+0x2a>

    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80129a8:	2114      	movs	r1, #20
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f00d ff2a 	bl	8020804 <lv_memset_00>

    return decoder;
 80129b0:	687b      	ldr	r3, [r7, #4]
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3708      	adds	r7, #8
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	20000834 	.word	0x20000834

080129c0 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	683a      	ldr	r2, [r7, #0]
 80129ce:	601a      	str	r2, [r3, #0]
}
 80129d0:	bf00      	nop
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr

080129dc <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	683a      	ldr	r2, [r7, #0]
 80129ea:	605a      	str	r2, [r3, #4]
}
 80129ec:	bf00      	nop
 80129ee:	370c      	adds	r7, #12
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr

080129f8 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 80129f8:	b480      	push	{r7}
 80129fa:	b083      	sub	sp, #12
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	683a      	ldr	r2, [r7, #0]
 8012a06:	609a      	str	r2, [r3, #8]
}
 8012a08:	bf00      	nop
 8012a0a:	370c      	adds	r7, #12
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr

08012a14 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	683a      	ldr	r2, [r7, #0]
 8012a22:	60da      	str	r2, [r3, #12]
}
 8012a24:	bf00      	nop
 8012a26:	370c      	adds	r7, #12
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2e:	4770      	bx	lr

08012a30 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b08a      	sub	sp, #40	; 0x28
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8012a3c:	68b8      	ldr	r0, [r7, #8]
 8012a3e:	f7fb fde4 	bl	800e60a <lv_img_src_get_type>
 8012a42:	4603      	mov	r3, r0
 8012a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8012a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d12f      	bne.n	8012ab0 <lv_img_decoder_built_in_info+0x80>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8012a5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012a62:	2b03      	cmp	r3, #3
 8012a64:	d903      	bls.n	8012a6e <lv_img_decoder_built_in_info+0x3e>
 8012a66:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012a6a:	2b14      	cmp	r3, #20
 8012a6c:	d901      	bls.n	8012a72 <lv_img_decoder_built_in_info+0x42>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	e080      	b.n	8012b74 <lv_img_decoder_built_in_info+0x144>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8012a7a:	b299      	uxth	r1, r3
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	6813      	ldr	r3, [r2, #0]
 8012a80:	f361 2394 	bfi	r3, r1, #10, #11
 8012a84:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	885b      	ldrh	r3, [r3, #2]
 8012a8a:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8012a8e:	b299      	uxth	r1, r3
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	8853      	ldrh	r3, [r2, #2]
 8012a94:	f361 134f 	bfi	r3, r1, #5, #11
 8012a98:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8012aa2:	b2d9      	uxtb	r1, r3
 8012aa4:	687a      	ldr	r2, [r7, #4]
 8012aa6:	7813      	ldrb	r3, [r2, #0]
 8012aa8:	f361 0304 	bfi	r3, r1, #0, #5
 8012aac:	7013      	strb	r3, [r2, #0]
 8012aae:	e060      	b.n	8012b72 <lv_img_decoder_built_in_info+0x142>
    }
    else if(src_type == LV_IMG_SRC_FILE) {
 8012ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d143      	bne.n	8012b40 <lv_img_decoder_built_in_info+0x110>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8012ab8:	68b8      	ldr	r0, [r7, #8]
 8012aba:	f00c ff8d 	bl	801f9d8 <lv_fs_get_ext>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	492e      	ldr	r1, [pc, #184]	; (8012b7c <lv_img_decoder_built_in_info+0x14c>)
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7ed fbb8 	bl	8000238 <strcmp>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d001      	beq.n	8012ad2 <lv_img_decoder_built_in_info+0xa2>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	e050      	b.n	8012b74 <lv_img_decoder_built_in_info+0x144>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8012ad2:	f107 0318 	add.w	r3, r7, #24
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	68b9      	ldr	r1, [r7, #8]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f00c fcac 	bl	801f438 <lv_fs_open>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if(res == LV_FS_RES_OK) {
 8012ae6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d118      	bne.n	8012b20 <lv_img_decoder_built_in_info+0xf0>
            uint32_t rn;
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8012aee:	f107 0314 	add.w	r3, r7, #20
 8012af2:	f107 0018 	add.w	r0, r7, #24
 8012af6:	2204      	movs	r2, #4
 8012af8:	6879      	ldr	r1, [r7, #4]
 8012afa:	f00c fe5b 	bl	801f7b4 <lv_fs_read>
 8012afe:	4603      	mov	r3, r0
 8012b00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            lv_fs_close(&f);
 8012b04:	f107 0318 	add.w	r3, r7, #24
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f00c fd02 	bl	801f512 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8012b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d102      	bne.n	8012b1c <lv_img_decoder_built_in_info+0xec>
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	2b04      	cmp	r3, #4
 8012b1a:	d001      	beq.n	8012b20 <lv_img_decoder_built_in_info+0xf0>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 8012b1c:	2300      	movs	r3, #0
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8012b1e:	e029      	b.n	8012b74 <lv_img_decoder_built_in_info+0x144>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	2b03      	cmp	r3, #3
 8012b2c:	d906      	bls.n	8012b3c <lv_img_decoder_built_in_info+0x10c>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	2b14      	cmp	r3, #20
 8012b3a:	d91a      	bls.n	8012b72 <lv_img_decoder_built_in_info+0x142>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	e019      	b.n	8012b74 <lv_img_decoder_built_in_info+0x144>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8012b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b44:	2b02      	cmp	r3, #2
 8012b46:	d112      	bne.n	8012b6e <lv_img_decoder_built_in_info+0x13e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         *function*/
        header->w = 1;
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	6813      	ldr	r3, [r2, #0]
 8012b4c:	2101      	movs	r1, #1
 8012b4e:	f361 2394 	bfi	r3, r1, #10, #11
 8012b52:	6013      	str	r3, [r2, #0]
        header->h = 1;
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	8853      	ldrh	r3, [r2, #2]
 8012b58:	2101      	movs	r1, #1
 8012b5a:	f361 134f 	bfi	r3, r1, #5, #11
 8012b5e:	8053      	strh	r3, [r2, #2]
        /*Symbols always have transparent parts. Important because of cover check in the draw
         *function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	7813      	ldrb	r3, [r2, #0]
 8012b64:	210b      	movs	r1, #11
 8012b66:	f361 0304 	bfi	r3, r1, #0, #5
 8012b6a:	7013      	strb	r3, [r2, #0]
 8012b6c:	e001      	b.n	8012b72 <lv_img_decoder_built_in_info+0x142>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	e000      	b.n	8012b74 <lv_img_decoder_built_in_info+0x144>
    }
    return LV_RES_OK;
 8012b72:	2301      	movs	r3, #1
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3728      	adds	r7, #40	; 0x28
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	08022c10 	.word	0x08022c10

08012b80 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `color` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8012b80:	b5b0      	push	{r4, r5, r7, lr}
 8012b82:	b08e      	sub	sp, #56	; 0x38
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	7c1b      	ldrb	r3, [r3, #16]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d14a      	bne.n	8012c28 <lv_img_decoder_built_in_open+0xa8>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f00c ff1e 	bl	801f9d8 <lv_fs_get_ext>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	499c      	ldr	r1, [pc, #624]	; (8012e10 <lv_img_decoder_built_in_open+0x290>)
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7ed fb49 	bl	8000238 <strcmp>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d001      	beq.n	8012bb0 <lv_img_decoder_built_in_open+0x30>
 8012bac:	2300      	movs	r3, #0
 8012bae:	e144      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	6859      	ldr	r1, [r3, #4]
 8012bb4:	f107 030c 	add.w	r3, r7, #12
 8012bb8:	2202      	movs	r2, #2
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f00c fc3c 	bl	801f438 <lv_fs_open>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 8012bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d001      	beq.n	8012bd2 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	e133      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d11b      	bne.n	8012c12 <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8012bda:	2014      	movs	r0, #20
 8012bdc:	f00d f9de 	bl	801ff9c <lv_mem_alloc>
 8012be0:	4602      	mov	r2, r0
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d100      	bne.n	8012bf0 <lv_img_decoder_built_in_open+0x70>
 8012bee:	e7fe      	b.n	8012bee <lv_img_decoder_built_in_open+0x6e>
            if(dsc->user_data == NULL) {
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d106      	bne.n	8012c06 <lv_img_decoder_built_in_open+0x86>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_fs_close(&f);
 8012bf8:	f107 030c 	add.w	r3, r7, #12
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f00c fc88 	bl	801f512 <lv_fs_close>
                return LV_RES_INV;
 8012c02:	2300      	movs	r3, #0
 8012c04:	e119      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0a:	2114      	movs	r1, #20
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f00d fdf9 	bl	8020804 <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c16:	62bb      	str	r3, [r7, #40]	; 0x28
        lv_memcpy_small(&user_data->f, &f, sizeof(f));
 8012c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1a:	f107 010c 	add.w	r1, r7, #12
 8012c1e:	220c      	movs	r2, #12
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7ff fcfd 	bl	8012620 <lv_memcpy_small>
 8012c26:	e00a      	b.n	8012c3e <lv_img_decoder_built_in_open+0xbe>
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	7c1b      	ldrb	r3, [r3, #16]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d106      	bne.n	8012c3e <lv_img_decoder_built_in_open+0xbe>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	689b      	ldr	r3, [r3, #8]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d101      	bne.n	8012c3e <lv_img_decoder_built_in_open+0xbe>
            return LV_RES_INV;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	e0fd      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	7d1b      	ldrb	r3, [r3, #20]
 8012c42:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8012c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c50:	2b04      	cmp	r3, #4
 8012c52:	d00f      	beq.n	8012c74 <lv_img_decoder_built_in_open+0xf4>
 8012c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c58:	2b05      	cmp	r3, #5
 8012c5a:	d00b      	beq.n	8012c74 <lv_img_decoder_built_in_open+0xf4>
 8012c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c60:	2b06      	cmp	r3, #6
 8012c62:	d007      	beq.n	8012c74 <lv_img_decoder_built_in_open+0xf4>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 8012c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c68:	2b14      	cmp	r3, #20
 8012c6a:	d003      	beq.n	8012c74 <lv_img_decoder_built_in_open+0xf4>
 8012c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c70:	2b0e      	cmp	r3, #14
 8012c72:	d10c      	bne.n	8012c8e <lv_img_decoder_built_in_open+0x10e>
       cf == LV_IMG_CF_ALPHA_8BIT) {
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	7c1b      	ldrb	r3, [r3, #16]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d106      	bne.n	8012c8a <lv_img_decoder_built_in_open+0x10a>
            /*In case of uncompressed formats the image stored in the ROM/RAM.
             *So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	689a      	ldr	r2, [r3, #8]
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	619a      	str	r2, [r3, #24]
            return LV_RES_OK;
 8012c86:	2301      	movs	r3, #1
 8012c88:	e0d7      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            return LV_RES_OK;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e0d5      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8012c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c92:	2b07      	cmp	r3, #7
 8012c94:	d00c      	beq.n	8012cb0 <lv_img_decoder_built_in_open+0x130>
 8012c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c9a:	2b08      	cmp	r3, #8
 8012c9c:	d008      	beq.n	8012cb0 <lv_img_decoder_built_in_open+0x130>
 8012c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ca2:	2b09      	cmp	r3, #9
 8012ca4:	d004      	beq.n	8012cb0 <lv_img_decoder_built_in_open+0x130>
 8012ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012caa:	2b0a      	cmp	r3, #10
 8012cac:	f040 80b2 	bne.w	8012e14 <lv_img_decoder_built_in_open+0x294>
            cf == LV_IMG_CF_INDEXED_8BIT) {
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8012cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7fb fc1b 	bl	800e4f0 <lv_img_cf_get_px_size>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 8012cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8012cca:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d116      	bne.n	8012d02 <lv_img_decoder_built_in_open+0x182>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8012cd4:	2014      	movs	r0, #20
 8012cd6:	f00d f961 	bl	801ff9c <lv_mem_alloc>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d100      	bne.n	8012cea <lv_img_decoder_built_in_open+0x16a>
 8012ce8:	e7fe      	b.n	8012ce8 <lv_img_decoder_built_in_open+0x168>
            if(dsc->user_data == NULL) {
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d101      	bne.n	8012cf6 <lv_img_decoder_built_in_open+0x176>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	e0a1      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cfa:	2114      	movs	r1, #20
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f00d fd81 	bl	8020804 <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d06:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8012d08:	6a38      	ldr	r0, [r7, #32]
 8012d0a:	f00d f947 	bl	801ff9c <lv_mem_alloc>
 8012d0e:	4602      	mov	r2, r0
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	60da      	str	r2, [r3, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	68db      	ldr	r3, [r3, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d100      	bne.n	8012d1e <lv_img_decoder_built_in_open+0x19e>
 8012d1c:	e7fe      	b.n	8012d1c <lv_img_decoder_built_in_open+0x19c>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8012d1e:	6a38      	ldr	r0, [r7, #32]
 8012d20:	f00d f93c 	bl	801ff9c <lv_mem_alloc>
 8012d24:	4602      	mov	r2, r0
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	611a      	str	r2, [r3, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	691b      	ldr	r3, [r3, #16]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d100      	bne.n	8012d34 <lv_img_decoder_built_in_open+0x1b4>
 8012d32:	e7fe      	b.n	8012d32 <lv_img_decoder_built_in_open+0x1b2>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d003      	beq.n	8012d44 <lv_img_decoder_built_in_open+0x1c4>
 8012d3c:	69fb      	ldr	r3, [r7, #28]
 8012d3e:	691b      	ldr	r3, [r3, #16]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d105      	bne.n	8012d50 <lv_img_decoder_built_in_open+0x1d0>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8012d44:	6839      	ldr	r1, [r7, #0]
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 f90e 	bl	8012f68 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	e074      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	7c1b      	ldrb	r3, [r3, #16]
 8012d54:	2b01      	cmp	r3, #1
 8012d56:	d129      	bne.n	8012dac <lv_img_decoder_built_in_open+0x22c>
            /*Read the palette from file*/
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	2104      	movs	r1, #4
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f00c fd6d 	bl	801f83e <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8012d64:	2300      	movs	r3, #0
 8012d66:	637b      	str	r3, [r7, #52]	; 0x34
 8012d68:	e01b      	b.n	8012da2 <lv_img_decoder_built_in_open+0x222>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8012d6a:	69f8      	ldr	r0, [r7, #28]
 8012d6c:	f107 0108 	add.w	r1, r7, #8
 8012d70:	2300      	movs	r3, #0
 8012d72:	2204      	movs	r2, #4
 8012d74:	f00c fd1e 	bl	801f7b4 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8012d78:	7ab8      	ldrb	r0, [r7, #10]
 8012d7a:	7a79      	ldrb	r1, [r7, #9]
 8012d7c:	7a3d      	ldrb	r5, [r7, #8]
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	68da      	ldr	r2, [r3, #12]
 8012d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d84:	18d4      	adds	r4, r2, r3
 8012d86:	462a      	mov	r2, r5
 8012d88:	f7ff fc6c 	bl	8012664 <lv_color_make>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	691a      	ldr	r2, [r3, #16]
 8012d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d96:	4413      	add	r3, r2
 8012d98:	7afa      	ldrb	r2, [r7, #11]
 8012d9a:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8012d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d9e:	3301      	adds	r3, #1
 8012da0:	637b      	str	r3, [r7, #52]	; 0x34
 8012da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012da4:	6a3b      	ldr	r3, [r7, #32]
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d3df      	bcc.n	8012d6a <lv_img_decoder_built_in_open+0x1ea>
 8012daa:	e02f      	b.n	8012e0c <lv_img_decoder_built_in_open+0x28c>
            }
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	689b      	ldr	r3, [r3, #8]
 8012db2:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8012db4:	2300      	movs	r3, #0
 8012db6:	633b      	str	r3, [r7, #48]	; 0x30
 8012db8:	e024      	b.n	8012e04 <lv_img_decoder_built_in_open+0x284>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8012dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbc:	009b      	lsls	r3, r3, #2
 8012dbe:	69ba      	ldr	r2, [r7, #24]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	7898      	ldrb	r0, [r3, #2]
 8012dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	69ba      	ldr	r2, [r7, #24]
 8012dca:	4413      	add	r3, r2
 8012dcc:	7859      	ldrb	r1, [r3, #1]
 8012dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd0:	009b      	lsls	r3, r3, #2
 8012dd2:	69ba      	ldr	r2, [r7, #24]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	781d      	ldrb	r5, [r3, #0]
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	68da      	ldr	r2, [r3, #12]
 8012ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dde:	18d4      	adds	r4, r2, r3
 8012de0:	462a      	mov	r2, r5
 8012de2:	f7ff fc3f 	bl	8012664 <lv_color_make>
 8012de6:	4603      	mov	r3, r0
 8012de8:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8012dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dec:	009b      	lsls	r3, r3, #2
 8012dee:	69ba      	ldr	r2, [r7, #24]
 8012df0:	441a      	add	r2, r3
 8012df2:	69fb      	ldr	r3, [r7, #28]
 8012df4:	6919      	ldr	r1, [r3, #16]
 8012df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df8:	440b      	add	r3, r1
 8012dfa:	78d2      	ldrb	r2, [r2, #3]
 8012dfc:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e00:	3301      	adds	r3, #1
 8012e02:	633b      	str	r3, [r7, #48]	; 0x30
 8012e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e06:	6a3b      	ldr	r3, [r7, #32]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d3d6      	bcc.n	8012dba <lv_img_decoder_built_in_open+0x23a>
            }
        }

        return LV_RES_OK;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e014      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
 8012e10:	08022c10 	.word	0x08022c10
    }
    /*Alpha indexed images.*/
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 8012e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e18:	2b0b      	cmp	r3, #11
 8012e1a:	d007      	beq.n	8012e2c <lv_img_decoder_built_in_open+0x2ac>
 8012e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e20:	2b0c      	cmp	r3, #12
 8012e22:	d003      	beq.n	8012e2c <lv_img_decoder_built_in_open+0x2ac>
 8012e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e28:	2b0d      	cmp	r3, #13
 8012e2a:	d101      	bne.n	8012e30 <lv_img_decoder_built_in_open+0x2b0>
        return LV_RES_OK; /*Nothing to process*/
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	e004      	b.n	8012e3a <lv_img_decoder_built_in_open+0x2ba>
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8012e30:	6839      	ldr	r1, [r7, #0]
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f000 f898 	bl	8012f68 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format");
        return LV_RES_INV;
 8012e38:	2300      	movs	r3, #0
    }
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3738      	adds	r7, #56	; 0x38
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bdb0      	pop	{r4, r5, r7, pc}
 8012e42:	bf00      	nop

08012e44 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b088      	sub	sp, #32
 8012e48:	af02      	add	r7, sp, #8
 8012e4a:	60f8      	str	r0, [r7, #12]
 8012e4c:	60b9      	str	r1, [r7, #8]
 8012e4e:	4611      	mov	r1, r2
 8012e50:	461a      	mov	r2, r3
 8012e52:	460b      	mov	r3, r1
 8012e54:	80fb      	strh	r3, [r7, #6]
 8012e56:	4613      	mov	r3, r2
 8012e58:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_res_t res = LV_RES_INV;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	7d1b      	ldrb	r3, [r3, #20]
 8012e62:	f003 031f 	and.w	r3, r3, #31
 8012e66:	b2db      	uxtb	r3, r3
 8012e68:	2b04      	cmp	r3, #4
 8012e6a:	d00d      	beq.n	8012e88 <lv_img_decoder_built_in_read_line+0x44>
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	7d1b      	ldrb	r3, [r3, #20]
 8012e70:	f003 031f 	and.w	r3, r3, #31
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	2b05      	cmp	r3, #5
 8012e78:	d006      	beq.n	8012e88 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	7d1b      	ldrb	r3, [r3, #20]
 8012e7e:	f003 031f 	and.w	r3, r3, #31
 8012e82:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8012e84:	2b06      	cmp	r3, #6
 8012e86:	d112      	bne.n	8012eae <lv_img_decoder_built_in_read_line+0x6a>
        /*For TRUE_COLOR images read line required only for files.
         *For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	7c1b      	ldrb	r3, [r3, #16]
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	d166      	bne.n	8012f5e <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8012e90:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8012e94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012e98:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9e:	9300      	str	r3, [sp, #0]
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	68b8      	ldr	r0, [r7, #8]
 8012ea4:	f000 f88f 	bl	8012fc6 <lv_img_decoder_built_in_line_true_color>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8012eac:	e057      	b.n	8012f5e <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	7d1b      	ldrb	r3, [r3, #20]
 8012eb2:	f003 031f 	and.w	r3, r3, #31
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	2b0b      	cmp	r3, #11
 8012eba:	d014      	beq.n	8012ee6 <lv_img_decoder_built_in_read_line+0xa2>
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	7d1b      	ldrb	r3, [r3, #20]
 8012ec0:	f003 031f 	and.w	r3, r3, #31
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	2b0c      	cmp	r3, #12
 8012ec8:	d00d      	beq.n	8012ee6 <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	7d1b      	ldrb	r3, [r3, #20]
 8012ece:	f003 031f 	and.w	r3, r3, #31
 8012ed2:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8012ed4:	2b0d      	cmp	r3, #13
 8012ed6:	d006      	beq.n	8012ee6 <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	7d1b      	ldrb	r3, [r3, #20]
 8012edc:	f003 031f 	and.w	r3, r3, #31
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b0e      	cmp	r3, #14
 8012ee4:	d10e      	bne.n	8012f04 <lv_img_decoder_built_in_read_line+0xc0>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8012ee6:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8012eea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012eee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	68b8      	ldr	r0, [r7, #8]
 8012efa:	f000 f8c3 	bl	8013084 <lv_img_decoder_built_in_line_alpha>
 8012efe:	4603      	mov	r3, r0
 8012f00:	75fb      	strb	r3, [r7, #23]
 8012f02:	e02c      	b.n	8012f5e <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	7d1b      	ldrb	r3, [r3, #20]
 8012f08:	f003 031f 	and.w	r3, r3, #31
 8012f0c:	b2db      	uxtb	r3, r3
 8012f0e:	2b07      	cmp	r3, #7
 8012f10:	d014      	beq.n	8012f3c <lv_img_decoder_built_in_read_line+0xf8>
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	7d1b      	ldrb	r3, [r3, #20]
 8012f16:	f003 031f 	and.w	r3, r3, #31
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	2b08      	cmp	r3, #8
 8012f1e:	d00d      	beq.n	8012f3c <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	7d1b      	ldrb	r3, [r3, #20]
 8012f24:	f003 031f 	and.w	r3, r3, #31
 8012f28:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8012f2a:	2b09      	cmp	r3, #9
 8012f2c:	d006      	beq.n	8012f3c <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	7d1b      	ldrb	r3, [r3, #20]
 8012f32:	f003 031f 	and.w	r3, r3, #31
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	2b0a      	cmp	r3, #10
 8012f3a:	d10e      	bne.n	8012f5a <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8012f3c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8012f40:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012f44:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f4a:	9300      	str	r3, [sp, #0]
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	68b8      	ldr	r0, [r7, #8]
 8012f50:	f000 fa0a 	bl	8013368 <lv_img_decoder_built_in_line_indexed>
 8012f54:	4603      	mov	r3, r0
 8012f56:	75fb      	strb	r3, [r7, #23]
 8012f58:	e001      	b.n	8012f5e <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e000      	b.n	8012f60 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8012f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3718      	adds	r7, #24
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f76:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d01f      	beq.n	8012fbe <lv_img_decoder_built_in_close+0x56>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	7c1b      	ldrb	r3, [r3, #16]
 8012f82:	2b01      	cmp	r3, #1
 8012f84:	d103      	bne.n	8012f8e <lv_img_decoder_built_in_close+0x26>
            lv_fs_close(&user_data->f);
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f00c fac2 	bl	801f512 <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d004      	beq.n	8012fa0 <lv_img_decoder_built_in_close+0x38>
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f00d f82e 	bl	801fffc <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	691b      	ldr	r3, [r3, #16]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d004      	beq.n	8012fb2 <lv_img_decoder_built_in_close+0x4a>
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	691b      	ldr	r3, [r3, #16]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f00d f825 	bl	801fffc <lv_mem_free>

        lv_mem_free(user_data);
 8012fb2:	68f8      	ldr	r0, [r7, #12]
 8012fb4:	f00d f822 	bl	801fffc <lv_mem_free>
        dsc->user_data = NULL;
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8012fbe:	bf00      	nop
 8012fc0:	3710      	adds	r7, #16
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}

08012fc6 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8012fc6:	b580      	push	{r7, lr}
 8012fc8:	b08a      	sub	sp, #40	; 0x28
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	60f8      	str	r0, [r7, #12]
 8012fce:	4608      	mov	r0, r1
 8012fd0:	4611      	mov	r1, r2
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	817b      	strh	r3, [r7, #10]
 8012fd8:	460b      	mov	r3, r1
 8012fda:	813b      	strh	r3, [r7, #8]
 8012fdc:	4613      	mov	r3, r2
 8012fde:	80fb      	strh	r3, [r7, #6]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe4:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	7d1b      	ldrb	r3, [r3, #20]
 8012fea:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7fb fa7d 	bl	800e4f0 <lv_img_cf_get_px_size>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8012ffc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013000:	68fa      	ldr	r2, [r7, #12]
 8013002:	6952      	ldr	r2, [r2, #20]
 8013004:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8013008:	b292      	uxth	r2, r2
 801300a:	fb03 f202 	mul.w	r2, r3, r2
 801300e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013012:	4413      	add	r3, r2
 8013014:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8013018:	fb02 f303 	mul.w	r3, r2, r3
 801301c:	10db      	asrs	r3, r3, #3
 801301e:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	3304      	adds	r3, #4
 8013024:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8013026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013028:	2200      	movs	r2, #0
 801302a:	69f9      	ldr	r1, [r7, #28]
 801302c:	4618      	mov	r0, r3
 801302e:	f00c fc06 	bl	801f83e <lv_fs_seek>
 8013032:	4603      	mov	r3, r0
 8013034:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8013036:	7efb      	ldrb	r3, [r7, #27]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d001      	beq.n	8013040 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 801303c:	2300      	movs	r3, #0
 801303e:	e01d      	b.n	801307c <lv_img_decoder_built_in_line_true_color+0xb6>
    }
    uint32_t btr = len * (px_size >> 3);
 8013040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013044:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8013048:	08d2      	lsrs	r2, r2, #3
 801304a:	b2d2      	uxtb	r2, r2
 801304c:	fb02 f303 	mul.w	r3, r2, r3
 8013050:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8013052:	2300      	movs	r3, #0
 8013054:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8013056:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013058:	f107 0310 	add.w	r3, r7, #16
 801305c:	697a      	ldr	r2, [r7, #20]
 801305e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013060:	f00c fba8 	bl	801f7b4 <lv_fs_read>
 8013064:	4603      	mov	r3, r0
 8013066:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 8013068:	7efb      	ldrb	r3, [r7, #27]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d103      	bne.n	8013076 <lv_img_decoder_built_in_line_true_color+0xb0>
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	697a      	ldr	r2, [r7, #20]
 8013072:	429a      	cmp	r2, r3
 8013074:	d001      	beq.n	801307a <lv_img_decoder_built_in_line_true_color+0xb4>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8013076:	2300      	movs	r3, #0
 8013078:	e000      	b.n	801307c <lv_img_decoder_built_in_line_true_color+0xb6>
    }

    return LV_RES_OK;
 801307a:	2301      	movs	r3, #1
}
 801307c:	4618      	mov	r0, r3
 801307e:	3728      	adds	r7, #40	; 0x28
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8013084:	b590      	push	{r4, r7, lr}
 8013086:	b097      	sub	sp, #92	; 0x5c
 8013088:	af00      	add	r7, sp, #0
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	4608      	mov	r0, r1
 801308e:	4611      	mov	r1, r2
 8013090:	461a      	mov	r2, r3
 8013092:	4603      	mov	r3, r0
 8013094:	817b      	strh	r3, [r7, #10]
 8013096:	460b      	mov	r3, r1
 8013098:	813b      	strh	r3, [r7, #8]
 801309a:	4613      	mov	r3, r2
 801309c:	80fb      	strh	r3, [r7, #6]
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 801309e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80130a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80130a4:	4bae      	ldr	r3, [pc, #696]	; (8013360 <lv_img_decoder_built_in_line_alpha+0x2dc>)
 80130a6:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80130a8:	4bae      	ldr	r3, [pc, #696]	; (8013364 <lv_img_decoder_built_in_line_alpha+0x2e0>)
 80130aa:	f107 0418 	add.w	r4, r7, #24
 80130ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80130b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	7a1b      	ldrb	r3, [r3, #8]
 80130b8:	753b      	strb	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80130ba:	2300      	movs	r3, #0
 80130bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80130c0:	e00e      	b.n	80130e0 <lv_img_decoder_built_in_line_alpha+0x5c>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
 80130c2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80130c6:	005b      	lsls	r3, r3, #1
 80130c8:	461a      	mov	r2, r3
 80130ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130cc:	4413      	add	r3, r2
 80130ce:	7d3a      	ldrb	r2, [r7, #20]
 80130d0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 80130d2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80130d6:	b29b      	uxth	r3, r3
 80130d8:	3301      	adds	r3, #1
 80130da:	b29b      	uxth	r3, r3
 80130dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80130e0:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80130e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	dbea      	blt.n	80130c2 <lv_img_decoder_built_in_line_alpha+0x3e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 80130ec:	2300      	movs	r3, #0
 80130ee:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	7d1b      	ldrb	r3, [r3, #20]
 80130f4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7fb f9f8 	bl	800e4f0 <lv_img_cf_get_px_size>
 8013100:	4603      	mov	r3, r0
 8013102:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8013106:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801310a:	2201      	movs	r2, #1
 801310c:	fa02 f303 	lsl.w	r3, r2, r3
 8013110:	b29b      	uxth	r3, r3
 8013112:	3b01      	subs	r3, #1
 8013114:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 801311c:	2300      	movs	r3, #0
 801311e:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8013120:	2300      	movs	r3, #0
 8013122:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	7d1b      	ldrb	r3, [r3, #20]
 801312a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801312e:	b2db      	uxtb	r3, r3
 8013130:	3b0b      	subs	r3, #11
 8013132:	2b03      	cmp	r3, #3
 8013134:	f200 8094 	bhi.w	8013260 <lv_img_decoder_built_in_line_alpha+0x1dc>
 8013138:	a201      	add	r2, pc, #4	; (adr r2, 8013140 <lv_img_decoder_built_in_line_alpha+0xbc>)
 801313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801313e:	bf00      	nop
 8013140:	08013151 	.word	0x08013151
 8013144:	08013199 	.word	0x08013199
 8013148:	080131e5 	.word	0x080131e5
 801314c:	08013231 	.word	0x08013231
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	695b      	ldr	r3, [r3, #20]
 8013154:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013158:	b29b      	uxth	r3, r3
 801315a:	3307      	adds	r3, #7
 801315c:	10db      	asrs	r3, r3, #3
 801315e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 8013162:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013166:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801316a:	fb02 f303 	mul.w	r3, r2, r3
 801316e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013172:	10d2      	asrs	r2, r2, #3
 8013174:	b212      	sxth	r2, r2
 8013176:	4413      	add	r3, r2
 8013178:	461a      	mov	r2, r3
 801317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801317c:	4413      	add	r3, r2
 801317e:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 7 - (x & 0x7);
 8013180:	897b      	ldrh	r3, [r7, #10]
 8013182:	b25b      	sxtb	r3, r3
 8013184:	43db      	mvns	r3, r3
 8013186:	b25b      	sxtb	r3, r3
 8013188:	f003 0307 	and.w	r3, r3, #7
 801318c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 8013190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013194:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8013196:	e063      	b.n	8013260 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	695b      	ldr	r3, [r3, #20]
 801319c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80131a0:	b29b      	uxth	r3, r3
 80131a2:	3303      	adds	r3, #3
 80131a4:	109b      	asrs	r3, r3, #2
 80131a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 80131aa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80131ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80131b2:	fb02 f303 	mul.w	r3, r2, r3
 80131b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80131ba:	1092      	asrs	r2, r2, #2
 80131bc:	b212      	sxth	r2, r2
 80131be:	4413      	add	r3, r2
 80131c0:	461a      	mov	r2, r3
 80131c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131c4:	4413      	add	r3, r2
 80131c6:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 6 - (x & 0x3) * 2;
 80131c8:	897b      	ldrh	r3, [r7, #10]
 80131ca:	43db      	mvns	r3, r3
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	f003 0303 	and.w	r3, r3, #3
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	b2db      	uxtb	r3, r3
 80131d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 80131dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80131e0:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 80131e2:	e03d      	b.n	8013260 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	695b      	ldr	r3, [r3, #20]
 80131e8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	3301      	adds	r3, #1
 80131f0:	105b      	asrs	r3, r3, #1
 80131f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 80131f6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80131fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80131fe:	fb02 f303 	mul.w	r3, r2, r3
 8013202:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013206:	1052      	asrs	r2, r2, #1
 8013208:	b212      	sxth	r2, r2
 801320a:	4413      	add	r3, r2
 801320c:	461a      	mov	r2, r3
 801320e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013210:	4413      	add	r3, r2
 8013212:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 4 - (x & 0x1) * 4;
 8013214:	897b      	ldrh	r3, [r7, #10]
 8013216:	f003 0301 	and.w	r3, r3, #1
 801321a:	2b00      	cmp	r3, #0
 801321c:	d101      	bne.n	8013222 <lv_img_decoder_built_in_line_alpha+0x19e>
 801321e:	2304      	movs	r3, #4
 8013220:	e000      	b.n	8013224 <lv_img_decoder_built_in_line_alpha+0x1a0>
 8013222:	2300      	movs	r3, #0
 8013224:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 8013228:	f107 0318 	add.w	r3, r7, #24
 801322c:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 801322e:	e017      	b.n	8013260 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	695b      	ldr	r3, [r3, #20]
 8013234:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013238:	b29b      	uxth	r3, r3
 801323a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 801323e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013242:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013246:	fb03 f202 	mul.w	r2, r3, r2
 801324a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801324e:	4413      	add	r3, r2
 8013250:	461a      	mov	r2, r3
 8013252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013254:	4413      	add	r3, r2
 8013256:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 8013258:	2300      	movs	r3, #0
 801325a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 801325e:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013264:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8013266:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801326a:	4618      	mov	r0, r3
 801326c:	f00c ff20 	bl	80200b0 <lv_mem_buf_get>
 8013270:	6378      	str	r0, [r7, #52]	; 0x34
    if(fs_buf == NULL) return LV_RES_INV;
 8013272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013274:	2b00      	cmp	r3, #0
 8013276:	d101      	bne.n	801327c <lv_img_decoder_built_in_line_alpha+0x1f8>
 8013278:	2300      	movs	r3, #0
 801327a:	e06d      	b.n	8013358 <lv_img_decoder_built_in_line_alpha+0x2d4>

    const uint8_t * data_tmp = NULL;
 801327c:	2300      	movs	r3, #0
 801327e:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	7c1b      	ldrb	r3, [r3, #16]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d108      	bne.n	801329a <lv_img_decoder_built_in_line_alpha+0x216>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 801328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013290:	689a      	ldr	r2, [r3, #8]
 8013292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013294:	4413      	add	r3, r2
 8013296:	643b      	str	r3, [r7, #64]	; 0x40
 8013298:	e00f      	b.n	80132ba <lv_img_decoder_built_in_line_alpha+0x236>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801329a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801329c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801329e:	3304      	adds	r3, #4
 80132a0:	2200      	movs	r2, #0
 80132a2:	4619      	mov	r1, r3
 80132a4:	f00c facb 	bl	801f83e <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 80132a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132aa:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80132ae:	2300      	movs	r3, #0
 80132b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80132b2:	f00c fa7f 	bl	801f7b4 <lv_fs_read>
        data_tmp = fs_buf;
 80132b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132b8:	643b      	str	r3, [r7, #64]	; 0x40
    }

    for(i = 0; i < len; i++) {
 80132ba:	2300      	movs	r3, #0
 80132bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80132c0:	e040      	b.n	8013344 <lv_img_decoder_built_in_line_alpha+0x2c0>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80132c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	461a      	mov	r2, r3
 80132c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80132cc:	fa42 f303 	asr.w	r3, r2, r3
 80132d0:	b25a      	sxtb	r2, r3
 80132d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80132d4:	b25b      	sxtb	r3, r3
 80132d6:	4013      	ands	r3, r2
 80132d8:	b25b      	sxtb	r3, r3
 80132da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	7d1b      	ldrb	r3, [r3, #20]
 80132e2:	f003 031f 	and.w	r3, r3, #31
 80132e6:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80132e8:	2b0e      	cmp	r3, #14
 80132ea:	d005      	beq.n	80132f8 <lv_img_decoder_built_in_line_alpha+0x274>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80132ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132f2:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	e001      	b.n	80132fc <lv_img_decoder_built_in_line_alpha+0x278>
 80132f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132fc:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8013300:	0052      	lsls	r2, r2, #1
 8013302:	3201      	adds	r2, #1
 8013304:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013306:	440a      	add	r2, r1
 8013308:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 801330a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801330e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013312:	1ad3      	subs	r3, r2, r3
 8013314:	b2db      	uxtb	r3, r3
 8013316:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 801331a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801331e:	2b00      	cmp	r3, #0
 8013320:	da09      	bge.n	8013336 <lv_img_decoder_built_in_line_alpha+0x2b2>
            pos = 8 - px_size;
 8013322:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013326:	f1c3 0308 	rsb	r3, r3, #8
 801332a:	b2db      	uxtb	r3, r3
 801332c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 8013330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013332:	3301      	adds	r3, #1
 8013334:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 8013336:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801333a:	b29b      	uxth	r3, r3
 801333c:	3301      	adds	r3, #1
 801333e:	b29b      	uxth	r3, r3
 8013340:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013344:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8013348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801334c:	429a      	cmp	r2, r3
 801334e:	dbb8      	blt.n	80132c2 <lv_img_decoder_built_in_line_alpha+0x23e>
        }
    }
    lv_mem_buf_release(fs_buf);
 8013350:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013352:	f00c ff59 	bl	8020208 <lv_mem_buf_release>
    return LV_RES_OK;
 8013356:	2301      	movs	r3, #1
}
 8013358:	4618      	mov	r0, r3
 801335a:	375c      	adds	r7, #92	; 0x5c
 801335c:	46bd      	mov	sp, r7
 801335e:	bd90      	pop	{r4, r7, pc}
 8013360:	ffaa5500 	.word	0xffaa5500
 8013364:	08022c14 	.word	0x08022c14

08013368 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b08e      	sub	sp, #56	; 0x38
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	4608      	mov	r0, r1
 8013372:	4611      	mov	r1, r2
 8013374:	461a      	mov	r2, r3
 8013376:	4603      	mov	r3, r0
 8013378:	817b      	strh	r3, [r7, #10]
 801337a:	460b      	mov	r3, r1
 801337c:	813b      	strh	r3, [r7, #8]
 801337e:	4613      	mov	r3, r2
 8013380:	80fb      	strh	r3, [r7, #6]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	7d1b      	ldrb	r3, [r3, #20]
 8013386:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801338a:	b2db      	uxtb	r3, r3
 801338c:	4618      	mov	r0, r3
 801338e:	f7fb f8af 	bl	800e4f0 <lv_img_cf_get_px_size>
 8013392:	4603      	mov	r3, r0
 8013394:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8013398:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801339c:	2201      	movs	r2, #1
 801339e:	fa02 f303 	lsl.w	r3, r2, r3
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	3b01      	subs	r3, #1
 80133a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 80133a8:	2300      	movs	r3, #0
 80133aa:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 80133ac:	2300      	movs	r3, #0
 80133ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 80133b2:	2300      	movs	r3, #0
 80133b4:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	7d1b      	ldrb	r3, [r3, #20]
 80133ba:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80133be:	b2db      	uxtb	r3, r3
 80133c0:	3b07      	subs	r3, #7
 80133c2:	2b03      	cmp	r3, #3
 80133c4:	f200 8094 	bhi.w	80134f0 <lv_img_decoder_built_in_line_indexed+0x188>
 80133c8:	a201      	add	r2, pc, #4	; (adr r2, 80133d0 <lv_img_decoder_built_in_line_indexed+0x68>)
 80133ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ce:	bf00      	nop
 80133d0:	080133e1 	.word	0x080133e1
 80133d4:	08013427 	.word	0x08013427
 80133d8:	08013471 	.word	0x08013471
 80133dc:	080134bb 	.word	0x080134bb
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	695b      	ldr	r3, [r3, #20]
 80133e4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	3307      	adds	r3, #7
 80133ec:	10db      	asrs	r3, r3, #3
 80133ee:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 80133f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80133f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80133f8:	fb02 f303 	mul.w	r3, r2, r3
 80133fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013400:	10d2      	asrs	r2, r2, #3
 8013402:	b212      	sxth	r2, r2
 8013404:	4413      	add	r3, r2
 8013406:	461a      	mov	r2, r3
 8013408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340a:	4413      	add	r3, r2
 801340c:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 801340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013410:	3308      	adds	r3, #8
 8013412:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 8013414:	897b      	ldrh	r3, [r7, #10]
 8013416:	b25b      	sxtb	r3, r3
 8013418:	43db      	mvns	r3, r3
 801341a:	b25b      	sxtb	r3, r3
 801341c:	f003 0307 	and.w	r3, r3, #7
 8013420:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013424:	e064      	b.n	80134f0 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	695b      	ldr	r3, [r3, #20]
 801342a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801342e:	b29b      	uxth	r3, r3
 8013430:	3303      	adds	r3, #3
 8013432:	109b      	asrs	r3, r3, #2
 8013434:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 8013436:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801343a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801343e:	fb02 f303 	mul.w	r3, r2, r3
 8013442:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013446:	1092      	asrs	r2, r2, #2
 8013448:	b212      	sxth	r2, r2
 801344a:	4413      	add	r3, r2
 801344c:	461a      	mov	r2, r3
 801344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013450:	4413      	add	r3, r2
 8013452:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 8013454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013456:	3310      	adds	r3, #16
 8013458:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - (x & 0x3) * 2;
 801345a:	897b      	ldrh	r3, [r7, #10]
 801345c:	43db      	mvns	r3, r3
 801345e:	b2db      	uxtb	r3, r3
 8013460:	f003 0303 	and.w	r3, r3, #3
 8013464:	b2db      	uxtb	r3, r3
 8013466:	005b      	lsls	r3, r3, #1
 8013468:	b2db      	uxtb	r3, r3
 801346a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801346e:	e03f      	b.n	80134f0 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	695b      	ldr	r3, [r3, #20]
 8013474:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013478:	b29b      	uxth	r3, r3
 801347a:	3301      	adds	r3, #1
 801347c:	105b      	asrs	r3, r3, #1
 801347e:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 8013480:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013484:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013488:	fb02 f303 	mul.w	r3, r2, r3
 801348c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013490:	1052      	asrs	r2, r2, #1
 8013492:	b212      	sxth	r2, r2
 8013494:	4413      	add	r3, r2
 8013496:	461a      	mov	r2, r3
 8013498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349a:	4413      	add	r3, r2
 801349c:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 801349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a0:	3340      	adds	r3, #64	; 0x40
 80134a2:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - (x & 0x1) * 4;
 80134a4:	897b      	ldrh	r3, [r7, #10]
 80134a6:	f003 0301 	and.w	r3, r3, #1
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d101      	bne.n	80134b2 <lv_img_decoder_built_in_line_indexed+0x14a>
 80134ae:	2304      	movs	r3, #4
 80134b0:	e000      	b.n	80134b4 <lv_img_decoder_built_in_line_indexed+0x14c>
 80134b2:	2300      	movs	r3, #0
 80134b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80134b8:	e01a      	b.n	80134f0 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	695b      	ldr	r3, [r3, #20]
 80134be:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 80134c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80134ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80134ce:	fb03 f202 	mul.w	r2, r3, r2
 80134d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80134d6:	4413      	add	r3, r2
 80134d8:	461a      	mov	r2, r3
 80134da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134dc:	4413      	add	r3, r2
 80134de:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 80134e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80134e6:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 80134e8:	2300      	movs	r3, #0
 80134ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80134ee:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f4:	623b      	str	r3, [r7, #32]

    uint8_t * fs_buf = lv_mem_buf_get(w);
 80134f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80134fa:	4618      	mov	r0, r3
 80134fc:	f00c fdd8 	bl	80200b0 <lv_mem_buf_get>
 8013500:	61f8      	str	r0, [r7, #28]
    if(fs_buf == NULL) return LV_RES_INV;
 8013502:	69fb      	ldr	r3, [r7, #28]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d101      	bne.n	801350c <lv_img_decoder_built_in_line_indexed+0x1a4>
 8013508:	2300      	movs	r3, #0
 801350a:	e06e      	b.n	80135ea <lv_img_decoder_built_in_line_indexed+0x282>
    const uint8_t * data_tmp = NULL;
 801350c:	2300      	movs	r3, #0
 801350e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	7c1b      	ldrb	r3, [r3, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d108      	bne.n	801352a <lv_img_decoder_built_in_line_indexed+0x1c2>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	689a      	ldr	r2, [r3, #8]
 8013522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013524:	4413      	add	r3, r2
 8013526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013528:	e00f      	b.n	801354a <lv_img_decoder_built_in_line_indexed+0x1e2>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801352a:	6a38      	ldr	r0, [r7, #32]
 801352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352e:	3304      	adds	r3, #4
 8013530:	2200      	movs	r2, #0
 8013532:	4619      	mov	r1, r3
 8013534:	f00c f983 	bl	801f83e <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8013538:	6a38      	ldr	r0, [r7, #32]
 801353a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801353e:	2300      	movs	r3, #0
 8013540:	69f9      	ldr	r1, [r7, #28]
 8013542:	f00c f937 	bl	801f7b4 <lv_fs_read>
        data_tmp = fs_buf;
 8013546:	69fb      	ldr	r3, [r7, #28]
 8013548:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 801354a:	2300      	movs	r3, #0
 801354c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801354e:	e042      	b.n	80135d6 <lv_img_decoder_built_in_line_indexed+0x26e>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8013550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	461a      	mov	r2, r3
 8013556:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 801355a:	fa42 f303 	asr.w	r3, r2, r3
 801355e:	b25a      	sxtb	r2, r3
 8013560:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013562:	b25b      	sxtb	r3, r3
 8013564:	4013      	ands	r3, r2
 8013566:	b25b      	sxtb	r3, r3
 8013568:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 801356a:	6a3b      	ldr	r3, [r7, #32]
 801356c:	68da      	ldr	r2, [r3, #12]
 801356e:	7dfb      	ldrb	r3, [r7, #23]
 8013570:	4413      	add	r3, r2
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	753b      	strb	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
 8013576:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801357a:	005b      	lsls	r3, r3, #1
 801357c:	461a      	mov	r2, r3
 801357e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013580:	4413      	add	r3, r2
 8013582:	7d3a      	ldrb	r2, [r7, #20]
 8013584:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8013586:	6a3b      	ldr	r3, [r7, #32]
 8013588:	691a      	ldr	r2, [r3, #16]
 801358a:	7dfb      	ldrb	r3, [r7, #23]
 801358c:	441a      	add	r2, r3
 801358e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8013592:	005b      	lsls	r3, r3, #1
 8013594:	3301      	adds	r3, #1
 8013596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013598:	440b      	add	r3, r1
 801359a:	7812      	ldrb	r2, [r2, #0]
 801359c:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 801359e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80135a2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80135a6:	1ad3      	subs	r3, r2, r3
 80135a8:	b2db      	uxtb	r3, r3
 80135aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 80135ae:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	da09      	bge.n	80135ca <lv_img_decoder_built_in_line_indexed+0x262>
            pos = 8 - px_size;
 80135b6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80135ba:	f1c3 0308 	rsb	r3, r3, #8
 80135be:	b2db      	uxtb	r3, r3
 80135c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 80135c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c6:	3301      	adds	r3, #1
 80135c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 80135ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	3301      	adds	r3, #1
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80135d6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80135da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80135de:	429a      	cmp	r2, r3
 80135e0:	dbb6      	blt.n	8013550 <lv_img_decoder_built_in_line_indexed+0x1e8>
        }
    }
    lv_mem_buf_release(fs_buf);
 80135e2:	69f8      	ldr	r0, [r7, #28]
 80135e4:	f00c fe10 	bl	8020208 <lv_mem_buf_release>
    return LV_RES_OK;
 80135e8:	2301      	movs	r3, #1
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3738      	adds	r7, #56	; 0x38
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop

080135f4 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013602:	b29a      	uxth	r2, r3
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f9b3 3000 	ldrsh.w	r3, [r3]
 801360a:	b29b      	uxth	r3, r3
 801360c:	1ad3      	subs	r3, r2, r3
 801360e:	b29b      	uxth	r3, r3
 8013610:	3301      	adds	r3, #1
 8013612:	b29b      	uxth	r3, r3
 8013614:	b21b      	sxth	r3, r3
}
 8013616:	4618      	mov	r0, r3
 8013618:	370c      	adds	r7, #12
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr
	...

08013624 <lv_draw_sw_init_ctx>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init_ctx(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b084      	sub	sp, #16
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(drv);

    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	60fb      	str	r3, [r7, #12]
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 8013632:	2154      	movs	r1, #84	; 0x54
 8013634:	68f8      	ldr	r0, [r7, #12]
 8013636:	f00d f8e5 	bl	8020804 <lv_memset_00>

    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	4a19      	ldr	r2, [pc, #100]	; (80136a4 <lv_draw_sw_init_ctx+0x80>)
 801363e:	611a      	str	r2, [r3, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	4a19      	ldr	r2, [pc, #100]	; (80136a8 <lv_draw_sw_init_ctx+0x84>)
 8013644:	60da      	str	r2, [r3, #12]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	4a18      	ldr	r2, [pc, #96]	; (80136ac <lv_draw_sw_init_ctx+0x88>)
 801364a:	62da      	str	r2, [r3, #44]	; 0x2c
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	4a18      	ldr	r2, [pc, #96]	; (80136b0 <lv_draw_sw_init_ctx+0x8c>)
 8013650:	61da      	str	r2, [r3, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	4a17      	ldr	r2, [pc, #92]	; (80136b4 <lv_draw_sw_init_ctx+0x90>)
 8013656:	615a      	str	r2, [r3, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	4a17      	ldr	r2, [pc, #92]	; (80136b8 <lv_draw_sw_init_ctx+0x94>)
 801365c:	621a      	str	r2, [r3, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	4a16      	ldr	r2, [pc, #88]	; (80136bc <lv_draw_sw_init_ctx+0x98>)
 8013662:	625a      	str	r2, [r3, #36]	; 0x24
#if LV_DRAW_COMPLEX
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	4a16      	ldr	r2, [pc, #88]	; (80136c0 <lv_draw_sw_init_ctx+0x9c>)
 8013668:	629a      	str	r2, [r3, #40]	; 0x28
#endif
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	4a15      	ldr	r2, [pc, #84]	; (80136c4 <lv_draw_sw_init_ctx+0xa0>)
 801366e:	631a      	str	r2, [r3, #48]	; 0x30
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	4a15      	ldr	r2, [pc, #84]	; (80136c8 <lv_draw_sw_init_ctx+0xa4>)
 8013674:	635a      	str	r2, [r3, #52]	; 0x34
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	4a14      	ldr	r2, [pc, #80]	; (80136cc <lv_draw_sw_init_ctx+0xa8>)
 801367a:	639a      	str	r2, [r3, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	4a14      	ldr	r2, [pc, #80]	; (80136d0 <lv_draw_sw_init_ctx+0xac>)
 8013680:	63da      	str	r2, [r3, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	4a13      	ldr	r2, [pc, #76]	; (80136d4 <lv_draw_sw_init_ctx+0xb0>)
 8013686:	641a      	str	r2, [r3, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	4a13      	ldr	r2, [pc, #76]	; (80136d8 <lv_draw_sw_init_ctx+0xb4>)
 801368c:	645a      	str	r2, [r3, #68]	; 0x44
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	4a12      	ldr	r2, [pc, #72]	; (80136dc <lv_draw_sw_init_ctx+0xb8>)
 8013692:	651a      	str	r2, [r3, #80]	; 0x50
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	222c      	movs	r2, #44	; 0x2c
 8013698:	649a      	str	r2, [r3, #72]	; 0x48
}
 801369a:	bf00      	nop
 801369c:	3710      	adds	r7, #16
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	08013845 	.word	0x08013845
 80136a8:	08019897 	.word	0x08019897
 80136ac:	080198dd 	.word	0x080198dd
 80136b0:	08017b79 	.word	0x08017b79
 80136b4:	0801701d 	.word	0x0801701d
 80136b8:	080182e7 	.word	0x080182e7
 80136bc:	08019285 	.word	0x08019285
 80136c0:	0801cae1 	.word	0x0801cae1
 80136c4:	080136e1 	.word	0x080136e1
 80136c8:	080136f5 	.word	0x080136f5
 80136cc:	080177b3 	.word	0x080177b3
 80136d0:	08017997 	.word	0x08017997
 80136d4:	08017a27 	.word	0x08017a27
 80136d8:	08017af1 	.word	0x08017af1
 80136dc:	080153ad 	.word	0x080153ad

080136e0 <lv_draw_sw_wait_for_finish>:
    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
}

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 80136e0:	b480      	push	{r7}
 80136e2:	b083      	sub	sp, #12
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 80136e8:	bf00      	nop
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b088      	sub	sp, #32
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	603b      	str	r3, [r7, #0]
 8013700:	4613      	mov	r3, r2
 8013702:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(draw_ctx);

    lv_color_t * dest_bufc =  dest_buf;
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	61fb      	str	r3, [r7, #28]
    lv_color_t * src_bufc =  src_buf;
 8013708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370a:	61bb      	str	r3, [r7, #24]

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 801370c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013710:	683a      	ldr	r2, [r7, #0]
 8013712:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013716:	fb02 f303 	mul.w	r3, r2, r3
 801371a:	461a      	mov	r2, r3
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	4413      	add	r3, r2
 8013720:	61fb      	str	r3, [r7, #28]
    dest_bufc += dest_area->x1;
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013728:	461a      	mov	r2, r3
 801372a:	69fb      	ldr	r3, [r7, #28]
 801372c:	4413      	add	r3, r2
 801372e:	61fb      	str	r3, [r7, #28]

    src_bufc += src_stride * src_area->y1;
 8013730:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013736:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801373a:	fb02 f303 	mul.w	r3, r2, r3
 801373e:	461a      	mov	r2, r3
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	4413      	add	r3, r2
 8013744:	61bb      	str	r3, [r7, #24]
    src_bufc += src_area->x1;
 8013746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013748:	f9b3 3000 	ldrsh.w	r3, [r3]
 801374c:	461a      	mov	r2, r3
 801374e:	69bb      	ldr	r3, [r7, #24]
 8013750:	4413      	add	r3, r2
 8013752:	61bb      	str	r3, [r7, #24]

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 8013754:	6838      	ldr	r0, [r7, #0]
 8013756:	f7ff ff4d 	bl	80135f4 <lv_area_get_width>
 801375a:	4603      	mov	r3, r0
 801375c:	613b      	str	r3, [r7, #16]
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	885b      	ldrh	r3, [r3, #2]
 8013762:	82fb      	strh	r3, [r7, #22]
 8013764:	e014      	b.n	8013790 <lv_draw_sw_buffer_copy+0x9c>
        lv_memcpy(dest_bufc, src_bufc, line_length);
 8013766:	693a      	ldr	r2, [r7, #16]
 8013768:	69b9      	ldr	r1, [r7, #24]
 801376a:	69f8      	ldr	r0, [r7, #28]
 801376c:	f00c fda4 	bl	80202b8 <lv_memcpy>
        dest_bufc += dest_stride;
 8013770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013774:	69fa      	ldr	r2, [r7, #28]
 8013776:	4413      	add	r3, r2
 8013778:	61fb      	str	r3, [r7, #28]
        src_bufc += src_stride;
 801377a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801377e:	69ba      	ldr	r2, [r7, #24]
 8013780:	4413      	add	r3, r2
 8013782:	61bb      	str	r3, [r7, #24]
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8013784:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013788:	b29b      	uxth	r3, r3
 801378a:	3301      	adds	r3, #1
 801378c:	b29b      	uxth	r3, r3
 801378e:	82fb      	strh	r3, [r7, #22]
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013796:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801379a:	429a      	cmp	r2, r3
 801379c:	dde3      	ble.n	8013766 <lv_draw_sw_buffer_copy+0x72>
    }
}
 801379e:	bf00      	nop
 80137a0:	bf00      	nop
 80137a2:	3720      	adds	r7, #32
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	80da      	strh	r2, [r3, #6]
}
 80137da:	bf00      	nop
 80137dc:	370c      	adds	r7, #12
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr

080137e6 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80137e6:	b480      	push	{r7}
 80137e8:	b083      	sub	sp, #12
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80137f4:	b29a      	uxth	r2, r3
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	1ad3      	subs	r3, r2, r3
 8013800:	b29b      	uxth	r3, r3
 8013802:	3301      	adds	r3, #1
 8013804:	b29b      	uxth	r3, r3
 8013806:	b21b      	sxth	r3, r3
}
 8013808:	4618      	mov	r0, r3
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr

08013814 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013822:	b29a      	uxth	r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801382a:	b29b      	uxth	r3, r3
 801382c:	1ad3      	subs	r3, r2, r3
 801382e:	b29b      	uxth	r3, r3
 8013830:	3301      	adds	r3, #1
 8013832:	b29b      	uxth	r3, r3
 8013834:	b21b      	sxth	r3, r3
}
 8013836:	4618      	mov	r0, r3
 8013838:	370c      	adds	r7, #12
 801383a:	46bd      	mov	sp, r7
 801383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013840:	4770      	bx	lr
	...

08013844 <lv_draw_sw_arc>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                    uint16_t start_angle, uint16_t end_angle)
{
 8013844:	b590      	push	{r4, r7, lr}
 8013846:	b0d5      	sub	sp, #340	; 0x154
 8013848:	af02      	add	r7, sp, #8
 801384a:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 801384e:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8013852:	6020      	str	r0, [r4, #0]
 8013854:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8013858:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 801385c:	6001      	str	r1, [r0, #0]
 801385e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8013862:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 8013866:	600a      	str	r2, [r1, #0]
 8013868:	461a      	mov	r2, r3
 801386a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801386e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8013872:	801a      	strh	r2, [r3, #0]
#if LV_DRAW_COMPLEX
    if(dsc->opa <= LV_OPA_MIN) return;
 8013874:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013878:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	7b1b      	ldrb	r3, [r3, #12]
 8013880:	2b02      	cmp	r3, #2
 8013882:	f240 83e4 	bls.w	801404e <lv_draw_sw_arc+0x80a>
    if(dsc->width == 0) return;
 8013886:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801388a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013894:	2b00      	cmp	r3, #0
 8013896:	f000 83dc 	beq.w	8014052 <lv_draw_sw_arc+0x80e>
    if(start_angle == end_angle) return;
 801389a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 801389e:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80138a2:	429a      	cmp	r2, r3
 80138a4:	f000 83d7 	beq.w	8014056 <lv_draw_sw_arc+0x812>

    lv_coord_t width = dsc->width;
 80138a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80138ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	885b      	ldrh	r3, [r3, #2]
 80138b4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if(width > radius) width = radius;
 80138b8:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 80138bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80138c0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80138c4:	881b      	ldrh	r3, [r3, #0]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	dd06      	ble.n	80138d8 <lv_draw_sw_arc+0x94>
 80138ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80138ce:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80138d2:	881b      	ldrh	r3, [r3, #0]
 80138d4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    lv_draw_rect_dsc_t cir_dsc;
    lv_draw_rect_dsc_init(&cir_dsc);
 80138d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80138dc:	4618      	mov	r0, r3
 80138de:	f7fe fd01 	bl	80122e4 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 80138e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80138e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	7b5b      	ldrb	r3, [r3, #13]
 80138ee:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80138f2:	b2db      	uxtb	r3, r3
 80138f4:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
    if(dsc->img_src) {
 80138f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80138fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	689b      	ldr	r3, [r3, #8]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d013      	beq.n	8013930 <lv_draw_sw_arc+0xec>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 8013908:	2300      	movs	r3, #0
 801390a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_img_src = dsc->img_src;
 801390e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013912:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	689b      	ldr	r3, [r3, #8]
 801391a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        cir_dsc.bg_img_opa = dsc->opa;
 801391e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013922:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	7b1b      	ldrb	r3, [r3, #12]
 801392a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 801392e:	e00f      	b.n	8013950 <lv_draw_sw_arc+0x10c>
    }
    else {
        cir_dsc.bg_opa = dsc->opa;
 8013930:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013934:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	7b1b      	ldrb	r3, [r3, #12]
 801393c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_color = dsc->color;
 8013940:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013944:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    }

    lv_area_t area_out;
    area_out.x1 = center->x - radius;
 8013950:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013954:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801395e:	b29a      	uxth	r2, r3
 8013960:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013964:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8013968:	881b      	ldrh	r3, [r3, #0]
 801396a:	1ad3      	subs	r3, r2, r3
 801396c:	b29b      	uxth	r3, r3
 801396e:	b21b      	sxth	r3, r3
 8013970:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    area_out.y1 = center->y - radius;
 8013974:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013978:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013982:	b29a      	uxth	r2, r3
 8013984:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013988:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 801398c:	881b      	ldrh	r3, [r3, #0]
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	b29b      	uxth	r3, r3
 8013992:	b21b      	sxth	r3, r3
 8013994:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 8013998:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801399c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80139ac:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80139b0:	881b      	ldrh	r3, [r3, #0]
 80139b2:	4413      	add	r3, r2
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	3b01      	subs	r3, #1
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	b21b      	sxth	r3, r3
 80139bc:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
    area_out.y2 = center->y + radius - 1;
 80139c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80139c4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80139d4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80139d8:	881b      	ldrh	r3, [r3, #0]
 80139da:	4413      	add	r3, r2
 80139dc:	b29b      	uxth	r3, r3
 80139de:	3b01      	subs	r3, #1
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	b21b      	sxth	r3, r3
 80139e4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    lv_area_t area_in;
    lv_area_copy(&area_in, &area_out);
 80139e8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80139ec:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80139f0:	4611      	mov	r1, r2
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7ff fed8 	bl	80137a8 <lv_area_copy>
    area_in.x1 += dsc->width;
 80139f8:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
 80139fc:	b29a      	uxth	r2, r3
 80139fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013a02:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	4413      	add	r3, r2
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	b21b      	sxth	r3, r3
 8013a14:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
    area_in.y1 += dsc->width;
 8013a18:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	; 0xf2
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013a22:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	4413      	add	r3, r2
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	b21b      	sxth	r3, r3
 8013a34:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    area_in.x2 -= dsc->width;
 8013a38:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013a42:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a4c:	b29b      	uxth	r3, r3
 8013a4e:	1ad3      	subs	r3, r2, r3
 8013a50:	b29b      	uxth	r3, r3
 8013a52:	b21b      	sxth	r3, r3
 8013a54:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
    area_in.y2 -= dsc->width;
 8013a58:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013a62:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	b21b      	sxth	r3, r3
 8013a74:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

    /*Create inner the mask*/
    int16_t mask_in_id = LV_MASK_ID_INV;
 8013a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a7c:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    lv_draw_mask_radius_param_t mask_in_param;
    bool mask_in_param_valid = false;
 8013a80:	2300      	movs	r3, #0
 8013a82:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 8013a86:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7ff feab 	bl	80137e6 <lv_area_get_width>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	dd1c      	ble.n	8013ad0 <lv_draw_sw_arc+0x28c>
 8013a96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7ff feba 	bl	8013814 <lv_area_get_height>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	dd14      	ble.n	8013ad0 <lv_draw_sw_arc+0x28c>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 8013aa6:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8013aaa:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8013aae:	2301      	movs	r3, #1
 8013ab0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013ab4:	f7fc fc1a 	bl	80102ec <lv_draw_mask_radius_init>
        mask_in_param_valid = true;
 8013ab8:	2301      	movs	r3, #1
 8013aba:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 8013abe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013ac2:	2100      	movs	r1, #0
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7fc f845 	bl	800fb54 <lv_draw_mask_add>
 8013aca:	4603      	mov	r3, r0
 8013acc:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    }

    lv_draw_mask_radius_param_t mask_out_param;
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8013ad0:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8013ad4:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8013ad8:	2300      	movs	r3, #0
 8013ada:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013ade:	f7fc fc05 	bl	80102ec <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8013ae2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013ae6:	2100      	movs	r1, #0
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7fc f833 	bl	800fb54 <lv_draw_mask_add>
 8013aee:	4603      	mov	r3, r0
 8013af0:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

    /*Draw a full ring*/
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 8013af4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8013af8:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8013afc:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d007      	beq.n	8013b14 <lv_draw_sw_arc+0x2d0>
 8013b04:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8013b08:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8013b0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d133      	bne.n	8013b7c <lv_draw_sw_arc+0x338>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8013b14:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013b18:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8013b1c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8013b20:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8013b24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013b28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013b2c:	6818      	ldr	r0, [r3, #0]
 8013b2e:	f7fe fc1d 	bl	801236c <lv_draw_rect>

        lv_draw_mask_remove_id(mask_out_id);
 8013b32:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fc f882 	bl	800fc40 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8013b3c:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8013b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b44:	d004      	beq.n	8013b50 <lv_draw_sw_arc+0x30c>
 8013b46:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7fc f878 	bl	800fc40 <lv_draw_mask_remove_id>

        lv_draw_mask_free_param(&mask_out_param);
 8013b50:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7fc f8c3 	bl	800fce0 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 8013b5a:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	f000 827b 	beq.w	801405a <lv_draw_sw_arc+0x816>
            lv_draw_mask_free_param(&mask_in_param);
 8013b64:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fc f8b9 	bl	800fce0 <lv_draw_mask_free_param>
        }

        return;
 8013b6e:	e274      	b.n	801405a <lv_draw_sw_arc+0x816>
    }

    while(start_angle >= 360) start_angle -= 360;
 8013b70:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8013b74:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8013b78:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 8013b7c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8013b80:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8013b84:	d2f4      	bcs.n	8013b70 <lv_draw_sw_arc+0x32c>
    while(end_angle >= 360) end_angle -= 360;
 8013b86:	e005      	b.n	8013b94 <lv_draw_sw_arc+0x350>
 8013b88:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8013b8c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8013b90:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8013b94:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8013b98:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8013b9c:	d2f4      	bcs.n	8013b88 <lv_draw_sw_arc+0x344>

    lv_draw_mask_angle_param_t mask_angle_param;
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 8013b9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013ba2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013bac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013bb0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013bba:	f9b7 4158 	ldrsh.w	r4, [r7, #344]	; 0x158
 8013bbe:	f9b7 315c 	ldrsh.w	r3, [r7, #348]	; 0x15c
 8013bc2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	4623      	mov	r3, r4
 8013bca:	f7fc fad9 	bl	8010180 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 8013bce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013bd2:	2100      	movs	r1, #0
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7fb ffbd 	bl	800fb54 <lv_draw_mask_add>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

    int32_t angle_gap;
    if(end_angle > start_angle) {
 8013be0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8013be4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d909      	bls.n	8013c00 <lv_draw_sw_arc+0x3bc>
        angle_gap = 360 - (end_angle - start_angle);
 8013bec:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8013bf0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8013bf4:	1ad3      	subs	r3, r2, r3
 8013bf6:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8013bfa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8013bfe:	e006      	b.n	8013c0e <lv_draw_sw_arc+0x3ca>
    }
    else {
        angle_gap = start_angle - end_angle;
 8013c00:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8013c04:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8013c08:	1ad3      	subs	r3, r2, r3
 8013c0a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8013c0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c12:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	689b      	ldr	r3, [r3, #8]
 8013c1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8013c1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013c22:	2b3c      	cmp	r3, #60	; 0x3c
 8013c24:	f340 8080 	ble.w	8013d28 <lv_draw_sw_arc+0x4e4>
 8013c28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c2c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8013c30:	881b      	ldrh	r3, [r3, #0]
 8013c32:	2b0a      	cmp	r3, #10
 8013c34:	d978      	bls.n	8013d28 <lv_draw_sw_arc+0x4e4>
        /*Handle each quarter individually and skip which is empty*/
        quarter_draw_dsc_t q_dsc;
        q_dsc.center = center;
 8013c36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013c3e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8013c42:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8013c46:	6812      	ldr	r2, [r2, #0]
 8013c48:	601a      	str	r2, [r3, #0]
        q_dsc.radius = radius;
 8013c4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c4e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8013c52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013c56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c5a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013c5e:	809a      	strh	r2, [r3, #4]
        q_dsc.start_angle = start_angle;
 8013c60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013c68:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8013c6c:	80da      	strh	r2, [r3, #6]
        q_dsc.end_angle = end_angle;
 8013c6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013c76:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8013c7a:	811a      	strh	r2, [r3, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8013c7c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8013c80:	085b      	lsrs	r3, r3, #1
 8013c82:	4a28      	ldr	r2, [pc, #160]	; (8013d24 <lv_draw_sw_arc+0x4e0>)
 8013c84:	fba2 2303 	umull	r2, r3, r2, r3
 8013c88:	095b      	lsrs	r3, r3, #5
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	f003 0303 	and.w	r3, r3, #3
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013c96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013c9a:	815a      	strh	r2, [r3, #10]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 8013c9c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8013ca0:	085b      	lsrs	r3, r3, #1
 8013ca2:	4a20      	ldr	r2, [pc, #128]	; (8013d24 <lv_draw_sw_arc+0x4e0>)
 8013ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8013ca8:	095b      	lsrs	r3, r3, #5
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	f003 0303 	and.w	r3, r3, #3
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013cb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013cba:	819a      	strh	r2, [r3, #12]
        q_dsc.width = width;
 8013cbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013cc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013cc4:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8013cc8:	81da      	strh	r2, [r3, #14]
        q_dsc.draw_dsc = &cir_dsc;
 8013cca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013cce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013cd2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8013cd6:	611a      	str	r2, [r3, #16]
        q_dsc.draw_area = &area_out;
 8013cd8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013cdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013ce0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8013ce4:	615a      	str	r2, [r3, #20]
        q_dsc.draw_ctx = draw_ctx;
 8013ce6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013cea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013cee:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8013cf2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8013cf6:	6812      	ldr	r2, [r2, #0]
 8013cf8:	619a      	str	r2, [r3, #24]

        draw_quarter_0(&q_dsc);
 8013cfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f000 f9b0 	bl	8014064 <draw_quarter_0>
        draw_quarter_1(&q_dsc);
 8013d04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f000 fb9d 	bl	8014448 <draw_quarter_1>
        draw_quarter_2(&q_dsc);
 8013d0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013d12:	4618      	mov	r0, r3
 8013d14:	f000 fd92 	bl	801483c <draw_quarter_2>
        draw_quarter_3(&q_dsc);
 8013d18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f000 ff90 	bl	8014c42 <draw_quarter_3>
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8013d22:	e00c      	b.n	8013d3e <lv_draw_sw_arc+0x4fa>
 8013d24:	b60b60b7 	.word	0xb60b60b7
    }
    else {
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8013d28:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8013d2c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8013d30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013d34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013d38:	6818      	ldr	r0, [r3, #0]
 8013d3a:	f7fe fb17 	bl	801236c <lv_draw_rect>
    }

    lv_draw_mask_free_param(&mask_angle_param);
 8013d3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7fb ffcc 	bl	800fce0 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 8013d48:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fb ffc7 	bl	800fce0 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 8013d52:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d004      	beq.n	8013d64 <lv_draw_sw_arc+0x520>
        lv_draw_mask_free_param(&mask_in_param);
 8013d5a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7fb ffbe 	bl	800fce0 <lv_draw_mask_free_param>
    }

    lv_draw_mask_remove_id(mask_angle_id);
 8013d64:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	; 0x138
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fb ff69 	bl	800fc40 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8013d6e:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7fb ff64 	bl	800fc40 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8013d78:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8013d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d80:	d004      	beq.n	8013d8c <lv_draw_sw_arc+0x548>
 8013d82:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7fb ff5a 	bl	800fc40 <lv_draw_mask_remove_id>

    if(dsc->rounded) {
 8013d8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013d90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	7b5b      	ldrb	r3, [r3, #13]
 8013d98:	f003 0304 	and.w	r3, r3, #4
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	f000 815c 	beq.w	801405c <lv_draw_sw_arc+0x818>

        lv_draw_mask_radius_param_t mask_end_param;

        lv_area_t round_area;
        get_rounded_area(start_angle, radius, width, &round_area);
 8013da4:	f9b7 0158 	ldrsh.w	r0, [r7, #344]	; 0x158
 8013da8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013dac:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8013db0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013db4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013db8:	b2da      	uxtb	r2, r3
 8013dba:	f107 0318 	add.w	r3, r7, #24
 8013dbe:	f001 f93a 	bl	8015036 <get_rounded_area>
        round_area.x1 += center->x;
 8013dc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013dce:	b29a      	uxth	r2, r3
 8013dd0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013dd4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	4413      	add	r3, r2
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	b21a      	sxth	r2, r3
 8013de6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013dee:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8013df0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013df8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013dfc:	b29a      	uxth	r2, r3
 8013dfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013e02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	4413      	add	r3, r2
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	b21a      	sxth	r2, r3
 8013e14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e1c:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8013e1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013e30:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	4413      	add	r3, r2
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	b21a      	sxth	r2, r3
 8013e42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e4a:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8013e4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013e5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	4413      	add	r3, r2
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	b21a      	sxth	r2, r3
 8013e70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013e78:	80da      	strh	r2, [r3, #6]
        lv_area_t clip_area2;
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8013e7a:	f107 0218 	add.w	r2, r7, #24
 8013e7e:	f107 0310 	add.w	r3, r7, #16
 8013e82:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8013e86:	4618      	mov	r0, r3
 8013e88:	f00a fd68 	bl	801e95c <_lv_area_intersect>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d02e      	beq.n	8013ef0 <lv_draw_sw_arc+0x6ac>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8013e92:	f107 0118 	add.w	r1, r7, #24
 8013e96:	f107 0020 	add.w	r0, r7, #32
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013ea0:	f7fc fa24 	bl	80102ec <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8013ea4:	f107 0320 	add.w	r3, r7, #32
 8013ea8:	2100      	movs	r1, #0
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fb fe52 	bl	800fb54 <lv_draw_mask_add>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132

            draw_ctx->clip_area = &clip_area2;
 8013eb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013eba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f107 0210 	add.w	r2, r7, #16
 8013ec4:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8013ec6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8013eca:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8013ece:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013ed2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013ed6:	6818      	ldr	r0, [r3, #0]
 8013ed8:	f7fe fa48 	bl	801236c <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8013edc:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7fb fead 	bl	800fc40 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8013ee6:	f107 0320 	add.w	r3, r7, #32
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7fb fef8 	bl	800fce0 <lv_draw_mask_free_param>
        }

        get_rounded_area(end_angle, radius, width, &round_area);
 8013ef0:	f9b7 015c 	ldrsh.w	r0, [r7, #348]	; 0x15c
 8013ef4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013ef8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8013efc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013f00:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8013f04:	b2da      	uxtb	r2, r3
 8013f06:	f107 0318 	add.w	r3, r7, #24
 8013f0a:	f001 f894 	bl	8015036 <get_rounded_area>
        round_area.x1 += center->x;
 8013f0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f1a:	b29a      	uxth	r2, r3
 8013f1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f20:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	4413      	add	r3, r2
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	b21a      	sxth	r2, r3
 8013f32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f3a:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8013f3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f48:	b29a      	uxth	r2, r3
 8013f4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	4413      	add	r3, r2
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	b21a      	sxth	r2, r3
 8013f60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f68:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8013f6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013f76:	b29a      	uxth	r2, r3
 8013f78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	4413      	add	r3, r2
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	b21a      	sxth	r2, r3
 8013f8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013f96:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8013f98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013fa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013faa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	4413      	add	r3, r2
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	b21a      	sxth	r2, r3
 8013fbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8013fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013fc4:	80da      	strh	r2, [r3, #6]
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8013fc6:	f107 0218 	add.w	r2, r7, #24
 8013fca:	f107 0310 	add.w	r3, r7, #16
 8013fce:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f00a fcc2 	bl	801e95c <_lv_area_intersect>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d02e      	beq.n	801403c <lv_draw_sw_arc+0x7f8>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8013fde:	f107 0118 	add.w	r1, r7, #24
 8013fe2:	f107 0020 	add.w	r0, r7, #32
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013fec:	f7fc f97e 	bl	80102ec <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8013ff0:	f107 0320 	add.w	r3, r7, #32
 8013ff4:	2100      	movs	r1, #0
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7fb fdac 	bl	800fb54 <lv_draw_mask_add>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

            draw_ctx->clip_area = &clip_area2;
 8014002:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014006:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	f107 0210 	add.w	r2, r7, #16
 8014010:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8014012:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8014016:	f507 7180 	add.w	r1, r7, #256	; 0x100
 801401a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801401e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8014022:	6818      	ldr	r0, [r3, #0]
 8014024:	f7fe f9a2 	bl	801236c <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8014028:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 801402c:	4618      	mov	r0, r3
 801402e:	f7fb fe07 	bl	800fc40 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8014032:	f107 0320 	add.w	r3, r7, #32
 8014036:	4618      	mov	r0, r3
 8014038:	f7fb fe52 	bl	800fce0 <lv_draw_mask_free_param>
        }
        draw_ctx->clip_area = clip_area_ori;
 801403c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014040:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801404a:	609a      	str	r2, [r3, #8]
 801404c:	e006      	b.n	801405c <lv_draw_sw_arc+0x818>
    if(dsc->opa <= LV_OPA_MIN) return;
 801404e:	bf00      	nop
 8014050:	e004      	b.n	801405c <lv_draw_sw_arc+0x818>
    if(dsc->width == 0) return;
 8014052:	bf00      	nop
 8014054:	e002      	b.n	801405c <lv_draw_sw_arc+0x818>
    if(start_angle == end_angle) return;
 8014056:	bf00      	nop
 8014058:	e000      	b.n	801405c <lv_draw_sw_arc+0x818>
        return;
 801405a:	bf00      	nop
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_COMPLEX*/
}
 801405c:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8014060:	46bd      	mov	sp, r7
 8014062:	bd90      	pop	{r4, r7, pc}

08014064 <draw_quarter_0>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_DRAW_COMPLEX
static void draw_quarter_0(quarter_draw_dsc_t * q)
{
 8014064:	b590      	push	{r4, r7, lr}
 8014066:	b087      	sub	sp, #28
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	699b      	ldr	r3, [r3, #24]
 8014070:	689b      	ldr	r3, [r3, #8]
 8014072:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	895b      	ldrh	r3, [r3, #10]
 8014078:	2b00      	cmp	r3, #0
 801407a:	f040 8097 	bne.w	80141ac <draw_quarter_0+0x148>
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	899b      	ldrh	r3, [r3, #12]
 8014082:	2b00      	cmp	r3, #0
 8014084:	f040 8092 	bne.w	80141ac <draw_quarter_0+0x148>
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	88da      	ldrh	r2, [r3, #6]
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	891b      	ldrh	r3, [r3, #8]
 8014090:	429a      	cmp	r2, r3
 8014092:	f080 808b 	bcs.w	80141ac <draw_quarter_0+0x148>
        /*Small arc here*/
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801409e:	b29c      	uxth	r4, r3
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	88db      	ldrh	r3, [r3, #6]
 80140a4:	b21b      	sxth	r3, r3
 80140a6:	4618      	mov	r0, r3
 80140a8:	f00b fe5e 	bl	801fd68 <lv_trigo_sin>
 80140ac:	4603      	mov	r3, r0
 80140ae:	461a      	mov	r2, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140b6:	4619      	mov	r1, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80140be:	1acb      	subs	r3, r1, r3
 80140c0:	fb02 f303 	mul.w	r3, r2, r3
 80140c4:	13db      	asrs	r3, r3, #15
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	4423      	add	r3, r4
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	b21b      	sxth	r3, r3
 80140ce:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140d8:	b29c      	uxth	r4, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	88db      	ldrh	r3, [r3, #6]
 80140de:	335a      	adds	r3, #90	; 0x5a
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	b21b      	sxth	r3, r3
 80140e4:	4618      	mov	r0, r3
 80140e6:	f00b fe3f 	bl	801fd68 <lv_trigo_sin>
 80140ea:	4603      	mov	r3, r0
 80140ec:	461a      	mov	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140f4:	fb02 f303 	mul.w	r3, r2, r3
 80140f8:	13db      	asrs	r3, r3, #15
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	4423      	add	r3, r4
 80140fe:	b29b      	uxth	r3, r3
 8014100:	b21b      	sxth	r3, r3
 8014102:	81bb      	strh	r3, [r7, #12]

        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801410c:	b29c      	uxth	r4, r3
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	891b      	ldrh	r3, [r3, #8]
 8014112:	b21b      	sxth	r3, r3
 8014114:	4618      	mov	r0, r3
 8014116:	f00b fe27 	bl	801fd68 <lv_trigo_sin>
 801411a:	4603      	mov	r3, r0
 801411c:	461a      	mov	r2, r3
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014124:	fb02 f303 	mul.w	r3, r2, r3
 8014128:	13db      	asrs	r3, r3, #15
 801412a:	b29b      	uxth	r3, r3
 801412c:	4423      	add	r3, r4
 801412e:	b29b      	uxth	r3, r3
 8014130:	b21b      	sxth	r3, r3
 8014132:	81fb      	strh	r3, [r7, #14]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	f9b3 3000 	ldrsh.w	r3, [r3]
 801413c:	b29c      	uxth	r4, r3
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	891b      	ldrh	r3, [r3, #8]
 8014142:	335a      	adds	r3, #90	; 0x5a
 8014144:	b29b      	uxth	r3, r3
 8014146:	b21b      	sxth	r3, r3
 8014148:	4618      	mov	r0, r3
 801414a:	f00b fe0d 	bl	801fd68 <lv_trigo_sin>
 801414e:	4603      	mov	r3, r0
 8014150:	461a      	mov	r2, r3
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014158:	4619      	mov	r1, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014160:	1acb      	subs	r3, r1, r3
 8014162:	fb02 f303 	mul.w	r3, r2, r3
 8014166:	13db      	asrs	r3, r3, #15
 8014168:	b29b      	uxth	r3, r3
 801416a:	4423      	add	r3, r4
 801416c:	b29b      	uxth	r3, r3
 801416e:	b21b      	sxth	r3, r3
 8014170:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014172:	f107 0108 	add.w	r1, r7, #8
 8014176:	f107 0308 	add.w	r3, r7, #8
 801417a:	697a      	ldr	r2, [r7, #20]
 801417c:	4618      	mov	r0, r3
 801417e:	f00a fbed 	bl	801e95c <_lv_area_intersect>
 8014182:	4603      	mov	r3, r0
 8014184:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8014186:	7cfb      	ldrb	r3, [r7, #19]
 8014188:	2b00      	cmp	r3, #0
 801418a:	f000 8152 	beq.w	8014432 <draw_quarter_0+0x3ce>
            q->draw_ctx->clip_area = &quarter_area;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	699b      	ldr	r3, [r3, #24]
 8014192:	f107 0208 	add.w	r2, r7, #8
 8014196:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6998      	ldr	r0, [r3, #24]
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6919      	ldr	r1, [r3, #16]
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	695b      	ldr	r3, [r3, #20]
 80141a4:	461a      	mov	r2, r3
 80141a6:	f7fe f8e1 	bl	801236c <lv_draw_rect>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80141aa:	e142      	b.n	8014432 <draw_quarter_0+0x3ce>
        }
    }
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	895b      	ldrh	r3, [r3, #10]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d004      	beq.n	80141be <draw_quarter_0+0x15a>
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	899b      	ldrh	r3, [r3, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	f040 80d2 	bne.w	8014362 <draw_quarter_0+0x2fe>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 0) {
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	895b      	ldrh	r3, [r3, #10]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d163      	bne.n	801428e <draw_quarter_0+0x22a>
            quarter_area.x1 = q->center->x;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141ce:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + q->radius;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80141d8:	b29a      	uxth	r2, r3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	4413      	add	r3, r2
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	b21b      	sxth	r3, r3
 80141e8:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80141f2:	b29c      	uxth	r4, r3
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	88db      	ldrh	r3, [r3, #6]
 80141f8:	b21b      	sxth	r3, r3
 80141fa:	4618      	mov	r0, r3
 80141fc:	f00b fdb4 	bl	801fd68 <lv_trigo_sin>
 8014200:	4603      	mov	r3, r0
 8014202:	461a      	mov	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801420a:	4619      	mov	r1, r3
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014212:	1acb      	subs	r3, r1, r3
 8014214:	fb02 f303 	mul.w	r3, r2, r3
 8014218:	13db      	asrs	r3, r3, #15
 801421a:	b29b      	uxth	r3, r3
 801421c:	4423      	add	r3, r4
 801421e:	b29b      	uxth	r3, r3
 8014220:	b21b      	sxth	r3, r3
 8014222:	817b      	strh	r3, [r7, #10]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	f9b3 3000 	ldrsh.w	r3, [r3]
 801422c:	b29c      	uxth	r4, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	88db      	ldrh	r3, [r3, #6]
 8014232:	335a      	adds	r3, #90	; 0x5a
 8014234:	b29b      	uxth	r3, r3
 8014236:	b21b      	sxth	r3, r3
 8014238:	4618      	mov	r0, r3
 801423a:	f00b fd95 	bl	801fd68 <lv_trigo_sin>
 801423e:	4603      	mov	r3, r0
 8014240:	461a      	mov	r2, r3
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014248:	fb02 f303 	mul.w	r3, r2, r3
 801424c:	13db      	asrs	r3, r3, #15
 801424e:	b29b      	uxth	r3, r3
 8014250:	4423      	add	r3, r4
 8014252:	b29b      	uxth	r3, r3
 8014254:	b21b      	sxth	r3, r3
 8014256:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014258:	f107 0108 	add.w	r1, r7, #8
 801425c:	f107 0308 	add.w	r3, r7, #8
 8014260:	697a      	ldr	r2, [r7, #20]
 8014262:	4618      	mov	r0, r3
 8014264:	f00a fb7a 	bl	801e95c <_lv_area_intersect>
 8014268:	4603      	mov	r3, r0
 801426a:	747b      	strb	r3, [r7, #17]
            if(ok) {
 801426c:	7c7b      	ldrb	r3, [r7, #17]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d00d      	beq.n	801428e <draw_quarter_0+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	699b      	ldr	r3, [r3, #24]
 8014276:	f107 0208 	add.w	r2, r7, #8
 801427a:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6998      	ldr	r0, [r3, #24]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6919      	ldr	r1, [r3, #16]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	695b      	ldr	r3, [r3, #20]
 8014288:	461a      	mov	r2, r3
 801428a:	f7fe f86f 	bl	801236c <lv_draw_rect>
            }
        }
        if(q->end_quarter == 0) {
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	899b      	ldrh	r3, [r3, #12]
 8014292:	2b00      	cmp	r3, #0
 8014294:	f040 80cf 	bne.w	8014436 <draw_quarter_0+0x3d2>
            quarter_area.x2 = q->center->x + q->radius;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142a0:	b29a      	uxth	r2, r3
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142a8:	b29b      	uxth	r3, r3
 80142aa:	4413      	add	r3, r2
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	b21b      	sxth	r3, r3
 80142b0:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80142ba:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80142c4:	b29c      	uxth	r4, r3
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	891b      	ldrh	r3, [r3, #8]
 80142ca:	b21b      	sxth	r3, r3
 80142cc:	4618      	mov	r0, r3
 80142ce:	f00b fd4b 	bl	801fd68 <lv_trigo_sin>
 80142d2:	4603      	mov	r3, r0
 80142d4:	461a      	mov	r2, r3
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80142dc:	fb02 f303 	mul.w	r3, r2, r3
 80142e0:	13db      	asrs	r3, r3, #15
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	4423      	add	r3, r4
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	b21b      	sxth	r3, r3
 80142ea:	81fb      	strh	r3, [r7, #14]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142f4:	b29c      	uxth	r4, r3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	891b      	ldrh	r3, [r3, #8]
 80142fa:	335a      	adds	r3, #90	; 0x5a
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	b21b      	sxth	r3, r3
 8014300:	4618      	mov	r0, r3
 8014302:	f00b fd31 	bl	801fd68 <lv_trigo_sin>
 8014306:	4603      	mov	r3, r0
 8014308:	461a      	mov	r2, r3
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014310:	4619      	mov	r1, r3
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014318:	1acb      	subs	r3, r1, r3
 801431a:	fb02 f303 	mul.w	r3, r2, r3
 801431e:	13db      	asrs	r3, r3, #15
 8014320:	b29b      	uxth	r3, r3
 8014322:	4423      	add	r3, r4
 8014324:	b29b      	uxth	r3, r3
 8014326:	b21b      	sxth	r3, r3
 8014328:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801432a:	f107 0108 	add.w	r1, r7, #8
 801432e:	f107 0308 	add.w	r3, r7, #8
 8014332:	697a      	ldr	r2, [r7, #20]
 8014334:	4618      	mov	r0, r3
 8014336:	f00a fb11 	bl	801e95c <_lv_area_intersect>
 801433a:	4603      	mov	r3, r0
 801433c:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801433e:	7c3b      	ldrb	r3, [r7, #16]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d078      	beq.n	8014436 <draw_quarter_0+0x3d2>
                q->draw_ctx->clip_area = &quarter_area;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	699b      	ldr	r3, [r3, #24]
 8014348:	f107 0208 	add.w	r2, r7, #8
 801434c:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6998      	ldr	r0, [r3, #24]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	6919      	ldr	r1, [r3, #16]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	695b      	ldr	r3, [r3, #20]
 801435a:	461a      	mov	r2, r3
 801435c:	f7fe f806 	bl	801236c <lv_draw_rect>
        if(q->end_quarter == 0) {
 8014360:	e069      	b.n	8014436 <draw_quarter_0+0x3d2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	895a      	ldrh	r2, [r3, #10]
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	899b      	ldrh	r3, [r3, #12]
 801436a:	429a      	cmp	r2, r3
 801436c:	d109      	bne.n	8014382 <draw_quarter_0+0x31e>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	895b      	ldrh	r3, [r3, #10]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d005      	beq.n	8014382 <draw_quarter_0+0x31e>
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	891a      	ldrh	r2, [r3, #8]
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	88db      	ldrh	r3, [r3, #6]
 801437e:	429a      	cmp	r2, r3
 8014380:	d317      	bcc.n	80143b2 <draw_quarter_0+0x34e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8014386:	2b02      	cmp	r3, #2
 8014388:	d103      	bne.n	8014392 <draw_quarter_0+0x32e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	899b      	ldrh	r3, [r3, #12]
 801438e:	2b01      	cmp	r3, #1
 8014390:	d00f      	beq.n	80143b2 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8014396:	2b03      	cmp	r3, #3
 8014398:	d103      	bne.n	80143a2 <draw_quarter_0+0x33e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	899b      	ldrh	r3, [r3, #12]
 801439e:	2b02      	cmp	r3, #2
 80143a0:	d007      	beq.n	80143b2 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 80143a6:	2b03      	cmp	r3, #3
 80143a8:	d146      	bne.n	8014438 <draw_quarter_0+0x3d4>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	899b      	ldrh	r3, [r3, #12]
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d142      	bne.n	8014438 <draw_quarter_0+0x3d4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143ba:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80143c4:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	4413      	add	r3, r2
 80143da:	b29b      	uxth	r3, r3
 80143dc:	b21b      	sxth	r3, r3
 80143de:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80143e8:	b29a      	uxth	r2, r3
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	4413      	add	r3, r2
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	b21b      	sxth	r3, r3
 80143f8:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80143fa:	f107 0108 	add.w	r1, r7, #8
 80143fe:	f107 0308 	add.w	r3, r7, #8
 8014402:	697a      	ldr	r2, [r7, #20]
 8014404:	4618      	mov	r0, r3
 8014406:	f00a faa9 	bl	801e95c <_lv_area_intersect>
 801440a:	4603      	mov	r3, r0
 801440c:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 801440e:	7cbb      	ldrb	r3, [r7, #18]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d011      	beq.n	8014438 <draw_quarter_0+0x3d4>
            q->draw_ctx->clip_area = &quarter_area;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	699b      	ldr	r3, [r3, #24]
 8014418:	f107 0208 	add.w	r2, r7, #8
 801441c:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	6998      	ldr	r0, [r3, #24]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6919      	ldr	r1, [r3, #16]
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	695b      	ldr	r3, [r3, #20]
 801442a:	461a      	mov	r2, r3
 801442c:	f7fd ff9e 	bl	801236c <lv_draw_rect>
 8014430:	e002      	b.n	8014438 <draw_quarter_0+0x3d4>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8014432:	bf00      	nop
 8014434:	e000      	b.n	8014438 <draw_quarter_0+0x3d4>
        if(q->end_quarter == 0) {
 8014436:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	699b      	ldr	r3, [r3, #24]
 801443c:	697a      	ldr	r2, [r7, #20]
 801443e:	609a      	str	r2, [r3, #8]
}
 8014440:	bf00      	nop
 8014442:	371c      	adds	r7, #28
 8014444:	46bd      	mov	sp, r7
 8014446:	bd90      	pop	{r4, r7, pc}

08014448 <draw_quarter_1>:

static void draw_quarter_1(quarter_draw_dsc_t * q)
{
 8014448:	b590      	push	{r4, r7, lr}
 801444a:	b087      	sub	sp, #28
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	699b      	ldr	r3, [r3, #24]
 8014454:	689b      	ldr	r3, [r3, #8]
 8014456:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	895b      	ldrh	r3, [r3, #10]
 801445c:	2b01      	cmp	r3, #1
 801445e:	f040 8097 	bne.w	8014590 <draw_quarter_1+0x148>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	899b      	ldrh	r3, [r3, #12]
 8014466:	2b01      	cmp	r3, #1
 8014468:	f040 8092 	bne.w	8014590 <draw_quarter_1+0x148>
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	88da      	ldrh	r2, [r3, #6]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	891b      	ldrh	r3, [r3, #8]
 8014474:	429a      	cmp	r2, r3
 8014476:	f080 808b 	bcs.w	8014590 <draw_quarter_1+0x148>
        /*Small arc here*/
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014482:	b29c      	uxth	r4, r3
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	88db      	ldrh	r3, [r3, #6]
 8014488:	b21b      	sxth	r3, r3
 801448a:	4618      	mov	r0, r3
 801448c:	f00b fc6c 	bl	801fd68 <lv_trigo_sin>
 8014490:	4603      	mov	r3, r0
 8014492:	461a      	mov	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801449a:	fb02 f303 	mul.w	r3, r2, r3
 801449e:	13db      	asrs	r3, r3, #15
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	4423      	add	r3, r4
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	b21b      	sxth	r3, r3
 80144a8:	81fb      	strh	r3, [r7, #14]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144b2:	b29c      	uxth	r4, r3
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	88db      	ldrh	r3, [r3, #6]
 80144b8:	335a      	adds	r3, #90	; 0x5a
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	b21b      	sxth	r3, r3
 80144be:	4618      	mov	r0, r3
 80144c0:	f00b fc52 	bl	801fd68 <lv_trigo_sin>
 80144c4:	4603      	mov	r3, r0
 80144c6:	461a      	mov	r2, r3
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80144ce:	4619      	mov	r1, r3
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80144d6:	1acb      	subs	r3, r1, r3
 80144d8:	fb02 f303 	mul.w	r3, r2, r3
 80144dc:	13db      	asrs	r3, r3, #15
 80144de:	b29b      	uxth	r3, r3
 80144e0:	4423      	add	r3, r4
 80144e2:	b29b      	uxth	r3, r3
 80144e4:	b21b      	sxth	r3, r3
 80144e6:	81bb      	strh	r3, [r7, #12]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80144f0:	b29c      	uxth	r4, r3
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	891b      	ldrh	r3, [r3, #8]
 80144f6:	b21b      	sxth	r3, r3
 80144f8:	4618      	mov	r0, r3
 80144fa:	f00b fc35 	bl	801fd68 <lv_trigo_sin>
 80144fe:	4603      	mov	r3, r0
 8014500:	461a      	mov	r2, r3
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014508:	4619      	mov	r1, r3
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014510:	1acb      	subs	r3, r1, r3
 8014512:	fb02 f303 	mul.w	r3, r2, r3
 8014516:	13db      	asrs	r3, r3, #15
 8014518:	b29b      	uxth	r3, r3
 801451a:	4423      	add	r3, r4
 801451c:	b29b      	uxth	r3, r3
 801451e:	b21b      	sxth	r3, r3
 8014520:	817b      	strh	r3, [r7, #10]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	f9b3 3000 	ldrsh.w	r3, [r3]
 801452a:	b29c      	uxth	r4, r3
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	891b      	ldrh	r3, [r3, #8]
 8014530:	335a      	adds	r3, #90	; 0x5a
 8014532:	b29b      	uxth	r3, r3
 8014534:	b21b      	sxth	r3, r3
 8014536:	4618      	mov	r0, r3
 8014538:	f00b fc16 	bl	801fd68 <lv_trigo_sin>
 801453c:	4603      	mov	r3, r0
 801453e:	461a      	mov	r2, r3
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014546:	fb02 f303 	mul.w	r3, r2, r3
 801454a:	13db      	asrs	r3, r3, #15
 801454c:	b29b      	uxth	r3, r3
 801454e:	4423      	add	r3, r4
 8014550:	b29b      	uxth	r3, r3
 8014552:	b21b      	sxth	r3, r3
 8014554:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014556:	f107 0108 	add.w	r1, r7, #8
 801455a:	f107 0308 	add.w	r3, r7, #8
 801455e:	697a      	ldr	r2, [r7, #20]
 8014560:	4618      	mov	r0, r3
 8014562:	f00a f9fb 	bl	801e95c <_lv_area_intersect>
 8014566:	4603      	mov	r3, r0
 8014568:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 801456a:	7cfb      	ldrb	r3, [r7, #19]
 801456c:	2b00      	cmp	r3, #0
 801456e:	f000 815a 	beq.w	8014826 <draw_quarter_1+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	699b      	ldr	r3, [r3, #24]
 8014576:	f107 0208 	add.w	r2, r7, #8
 801457a:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6998      	ldr	r0, [r3, #24]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6919      	ldr	r1, [r3, #16]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	695b      	ldr	r3, [r3, #20]
 8014588:	461a      	mov	r2, r3
 801458a:	f7fd feef 	bl	801236c <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801458e:	e14a      	b.n	8014826 <draw_quarter_1+0x3de>
        }
    }
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	895b      	ldrh	r3, [r3, #10]
 8014594:	2b01      	cmp	r3, #1
 8014596:	d004      	beq.n	80145a2 <draw_quarter_1+0x15a>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	899b      	ldrh	r3, [r3, #12]
 801459c:	2b01      	cmp	r3, #1
 801459e:	f040 80d6 	bne.w	801474e <draw_quarter_1+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 1) {
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	895b      	ldrh	r3, [r3, #10]
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d163      	bne.n	8014672 <draw_quarter_1+0x22a>
            quarter_area.x1 = q->center->x - q->radius;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145b2:	b29a      	uxth	r2, r3
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	1ad3      	subs	r3, r2, r3
 80145be:	b29b      	uxth	r3, r3
 80145c0:	b21b      	sxth	r3, r3
 80145c2:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80145cc:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80145d6:	b29c      	uxth	r4, r3
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	88db      	ldrh	r3, [r3, #6]
 80145dc:	b21b      	sxth	r3, r3
 80145de:	4618      	mov	r0, r3
 80145e0:	f00b fbc2 	bl	801fd68 <lv_trigo_sin>
 80145e4:	4603      	mov	r3, r0
 80145e6:	461a      	mov	r2, r3
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80145ee:	fb02 f303 	mul.w	r3, r2, r3
 80145f2:	13db      	asrs	r3, r3, #15
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	4423      	add	r3, r4
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	b21b      	sxth	r3, r3
 80145fc:	81fb      	strh	r3, [r7, #14]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014606:	b29c      	uxth	r4, r3
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	88db      	ldrh	r3, [r3, #6]
 801460c:	335a      	adds	r3, #90	; 0x5a
 801460e:	b29b      	uxth	r3, r3
 8014610:	b21b      	sxth	r3, r3
 8014612:	4618      	mov	r0, r3
 8014614:	f00b fba8 	bl	801fd68 <lv_trigo_sin>
 8014618:	4603      	mov	r3, r0
 801461a:	461a      	mov	r2, r3
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014622:	4619      	mov	r1, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801462a:	1acb      	subs	r3, r1, r3
 801462c:	fb02 f303 	mul.w	r3, r2, r3
 8014630:	13db      	asrs	r3, r3, #15
 8014632:	b29b      	uxth	r3, r3
 8014634:	4423      	add	r3, r4
 8014636:	b29b      	uxth	r3, r3
 8014638:	b21b      	sxth	r3, r3
 801463a:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801463c:	f107 0108 	add.w	r1, r7, #8
 8014640:	f107 0308 	add.w	r3, r7, #8
 8014644:	697a      	ldr	r2, [r7, #20]
 8014646:	4618      	mov	r0, r3
 8014648:	f00a f988 	bl	801e95c <_lv_area_intersect>
 801464c:	4603      	mov	r3, r0
 801464e:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8014650:	7c7b      	ldrb	r3, [r7, #17]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d00d      	beq.n	8014672 <draw_quarter_1+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	699b      	ldr	r3, [r3, #24]
 801465a:	f107 0208 	add.w	r2, r7, #8
 801465e:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6998      	ldr	r0, [r3, #24]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6919      	ldr	r1, [r3, #16]
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	695b      	ldr	r3, [r3, #20]
 801466c:	461a      	mov	r2, r3
 801466e:	f7fd fe7d 	bl	801236c <lv_draw_rect>
            }
        }
        if(q->end_quarter == 1) {
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	899b      	ldrh	r3, [r3, #12]
 8014676:	2b01      	cmp	r3, #1
 8014678:	f040 80d7 	bne.w	801482a <draw_quarter_1+0x3e2>
            quarter_area.x2 = q->center->x - 1;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014684:	b29b      	uxth	r3, r3
 8014686:	3b01      	subs	r3, #1
 8014688:	b29b      	uxth	r3, r3
 801468a:	b21b      	sxth	r3, r3
 801468c:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + q->radius;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014696:	b29a      	uxth	r2, r3
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801469e:	b29b      	uxth	r3, r3
 80146a0:	4413      	add	r3, r2
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	b21b      	sxth	r3, r3
 80146a6:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80146b0:	b29c      	uxth	r4, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	891b      	ldrh	r3, [r3, #8]
 80146b6:	b21b      	sxth	r3, r3
 80146b8:	4618      	mov	r0, r3
 80146ba:	f00b fb55 	bl	801fd68 <lv_trigo_sin>
 80146be:	4603      	mov	r3, r0
 80146c0:	461a      	mov	r2, r3
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80146c8:	4619      	mov	r1, r3
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80146d0:	1acb      	subs	r3, r1, r3
 80146d2:	fb02 f303 	mul.w	r3, r2, r3
 80146d6:	13db      	asrs	r3, r3, #15
 80146d8:	b29b      	uxth	r3, r3
 80146da:	4423      	add	r3, r4
 80146dc:	b29b      	uxth	r3, r3
 80146de:	b21b      	sxth	r3, r3
 80146e0:	817b      	strh	r3, [r7, #10]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146ea:	b29c      	uxth	r4, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	891b      	ldrh	r3, [r3, #8]
 80146f0:	335a      	adds	r3, #90	; 0x5a
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	b21b      	sxth	r3, r3
 80146f6:	4618      	mov	r0, r3
 80146f8:	f00b fb36 	bl	801fd68 <lv_trigo_sin>
 80146fc:	4603      	mov	r3, r0
 80146fe:	461a      	mov	r2, r3
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014706:	fb02 f303 	mul.w	r3, r2, r3
 801470a:	13db      	asrs	r3, r3, #15
 801470c:	b29b      	uxth	r3, r3
 801470e:	4423      	add	r3, r4
 8014710:	b29b      	uxth	r3, r3
 8014712:	b21b      	sxth	r3, r3
 8014714:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014716:	f107 0108 	add.w	r1, r7, #8
 801471a:	f107 0308 	add.w	r3, r7, #8
 801471e:	697a      	ldr	r2, [r7, #20]
 8014720:	4618      	mov	r0, r3
 8014722:	f00a f91b 	bl	801e95c <_lv_area_intersect>
 8014726:	4603      	mov	r3, r0
 8014728:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801472a:	7c3b      	ldrb	r3, [r7, #16]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d07c      	beq.n	801482a <draw_quarter_1+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	699b      	ldr	r3, [r3, #24]
 8014734:	f107 0208 	add.w	r2, r7, #8
 8014738:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6998      	ldr	r0, [r3, #24]
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	6919      	ldr	r1, [r3, #16]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	695b      	ldr	r3, [r3, #20]
 8014746:	461a      	mov	r2, r3
 8014748:	f7fd fe10 	bl	801236c <lv_draw_rect>
        if(q->end_quarter == 1) {
 801474c:	e06d      	b.n	801482a <draw_quarter_1+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	895a      	ldrh	r2, [r3, #10]
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	899b      	ldrh	r3, [r3, #12]
 8014756:	429a      	cmp	r2, r3
 8014758:	d109      	bne.n	801476e <draw_quarter_1+0x326>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	895b      	ldrh	r3, [r3, #10]
 801475e:	2b01      	cmp	r3, #1
 8014760:	d005      	beq.n	801476e <draw_quarter_1+0x326>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	891a      	ldrh	r2, [r3, #8]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	88db      	ldrh	r3, [r3, #6]
 801476a:	429a      	cmp	r2, r3
 801476c:	d317      	bcc.n	801479e <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8014772:	2b00      	cmp	r3, #0
 8014774:	d103      	bne.n	801477e <draw_quarter_1+0x336>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	899b      	ldrh	r3, [r3, #12]
 801477a:	2b02      	cmp	r3, #2
 801477c:	d00f      	beq.n	801479e <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8014782:	2b00      	cmp	r3, #0
 8014784:	d103      	bne.n	801478e <draw_quarter_1+0x346>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	899b      	ldrh	r3, [r3, #12]
 801478a:	2b03      	cmp	r3, #3
 801478c:	d007      	beq.n	801479e <draw_quarter_1+0x356>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8014792:	2b03      	cmp	r3, #3
 8014794:	d14a      	bne.n	801482c <draw_quarter_1+0x3e4>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	899b      	ldrh	r3, [r3, #12]
 801479a:	2b02      	cmp	r3, #2
 801479c:	d146      	bne.n	801482c <draw_quarter_1+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147a6:	b29a      	uxth	r2, r3
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	1ad3      	subs	r3, r2, r3
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	b21b      	sxth	r3, r3
 80147b6:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80147c0:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	3b01      	subs	r3, #1
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	b21b      	sxth	r3, r3
 80147d2:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80147dc:	b29a      	uxth	r2, r3
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	4413      	add	r3, r2
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	b21b      	sxth	r3, r3
 80147ec:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80147ee:	f107 0108 	add.w	r1, r7, #8
 80147f2:	f107 0308 	add.w	r3, r7, #8
 80147f6:	697a      	ldr	r2, [r7, #20]
 80147f8:	4618      	mov	r0, r3
 80147fa:	f00a f8af 	bl	801e95c <_lv_area_intersect>
 80147fe:	4603      	mov	r3, r0
 8014800:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8014802:	7cbb      	ldrb	r3, [r7, #18]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d011      	beq.n	801482c <draw_quarter_1+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	699b      	ldr	r3, [r3, #24]
 801480c:	f107 0208 	add.w	r2, r7, #8
 8014810:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	6998      	ldr	r0, [r3, #24]
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6919      	ldr	r1, [r3, #16]
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	695b      	ldr	r3, [r3, #20]
 801481e:	461a      	mov	r2, r3
 8014820:	f7fd fda4 	bl	801236c <lv_draw_rect>
 8014824:	e002      	b.n	801482c <draw_quarter_1+0x3e4>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8014826:	bf00      	nop
 8014828:	e000      	b.n	801482c <draw_quarter_1+0x3e4>
        if(q->end_quarter == 1) {
 801482a:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	699b      	ldr	r3, [r3, #24]
 8014830:	697a      	ldr	r2, [r7, #20]
 8014832:	609a      	str	r2, [r3, #8]
}
 8014834:	bf00      	nop
 8014836:	371c      	adds	r7, #28
 8014838:	46bd      	mov	sp, r7
 801483a:	bd90      	pop	{r4, r7, pc}

0801483c <draw_quarter_2>:

static void draw_quarter_2(quarter_draw_dsc_t * q)
{
 801483c:	b590      	push	{r4, r7, lr}
 801483e:	b087      	sub	sp, #28
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	699b      	ldr	r3, [r3, #24]
 8014848:	689b      	ldr	r3, [r3, #8]
 801484a:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	895b      	ldrh	r3, [r3, #10]
 8014850:	2b02      	cmp	r3, #2
 8014852:	f040 8097 	bne.w	8014984 <draw_quarter_2+0x148>
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	899b      	ldrh	r3, [r3, #12]
 801485a:	2b02      	cmp	r3, #2
 801485c:	f040 8092 	bne.w	8014984 <draw_quarter_2+0x148>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	88da      	ldrh	r2, [r3, #6]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	891b      	ldrh	r3, [r3, #8]
 8014868:	429a      	cmp	r2, r3
 801486a:	f080 808b 	bcs.w	8014984 <draw_quarter_2+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014876:	b29c      	uxth	r4, r3
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	88db      	ldrh	r3, [r3, #6]
 801487c:	335a      	adds	r3, #90	; 0x5a
 801487e:	b29b      	uxth	r3, r3
 8014880:	b21b      	sxth	r3, r3
 8014882:	4618      	mov	r0, r3
 8014884:	f00b fa70 	bl	801fd68 <lv_trigo_sin>
 8014888:	4603      	mov	r3, r0
 801488a:	461a      	mov	r2, r3
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014892:	fb02 f303 	mul.w	r3, r2, r3
 8014896:	13db      	asrs	r3, r3, #15
 8014898:	b29b      	uxth	r3, r3
 801489a:	4423      	add	r3, r4
 801489c:	b29b      	uxth	r3, r3
 801489e:	b21b      	sxth	r3, r3
 80148a0:	813b      	strh	r3, [r7, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80148aa:	b29c      	uxth	r4, r3
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	88db      	ldrh	r3, [r3, #6]
 80148b0:	b21b      	sxth	r3, r3
 80148b2:	4618      	mov	r0, r3
 80148b4:	f00b fa58 	bl	801fd68 <lv_trigo_sin>
 80148b8:	4603      	mov	r3, r0
 80148ba:	461a      	mov	r2, r3
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80148c2:	4619      	mov	r1, r3
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80148ca:	1acb      	subs	r3, r1, r3
 80148cc:	fb02 f303 	mul.w	r3, r2, r3
 80148d0:	13db      	asrs	r3, r3, #15
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	4423      	add	r3, r4
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	b21b      	sxth	r3, r3
 80148da:	81fb      	strh	r3, [r7, #14]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80148e4:	b29c      	uxth	r4, r3
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	891b      	ldrh	r3, [r3, #8]
 80148ea:	b21b      	sxth	r3, r3
 80148ec:	4618      	mov	r0, r3
 80148ee:	f00b fa3b 	bl	801fd68 <lv_trigo_sin>
 80148f2:	4603      	mov	r3, r0
 80148f4:	461a      	mov	r2, r3
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80148fc:	fb02 f303 	mul.w	r3, r2, r3
 8014900:	13db      	asrs	r3, r3, #15
 8014902:	b29b      	uxth	r3, r3
 8014904:	4423      	add	r3, r4
 8014906:	b29b      	uxth	r3, r3
 8014908:	b21b      	sxth	r3, r3
 801490a:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014914:	b29c      	uxth	r4, r3
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	891b      	ldrh	r3, [r3, #8]
 801491a:	335a      	adds	r3, #90	; 0x5a
 801491c:	b29b      	uxth	r3, r3
 801491e:	b21b      	sxth	r3, r3
 8014920:	4618      	mov	r0, r3
 8014922:	f00b fa21 	bl	801fd68 <lv_trigo_sin>
 8014926:	4603      	mov	r3, r0
 8014928:	461a      	mov	r2, r3
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014930:	4619      	mov	r1, r3
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014938:	1acb      	subs	r3, r1, r3
 801493a:	fb02 f303 	mul.w	r3, r2, r3
 801493e:	13db      	asrs	r3, r3, #15
 8014940:	b29b      	uxth	r3, r3
 8014942:	4423      	add	r3, r4
 8014944:	b29b      	uxth	r3, r3
 8014946:	b21b      	sxth	r3, r3
 8014948:	81bb      	strh	r3, [r7, #12]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801494a:	f107 0108 	add.w	r1, r7, #8
 801494e:	f107 0308 	add.w	r3, r7, #8
 8014952:	697a      	ldr	r2, [r7, #20]
 8014954:	4618      	mov	r0, r3
 8014956:	f00a f801 	bl	801e95c <_lv_area_intersect>
 801495a:	4603      	mov	r3, r0
 801495c:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 801495e:	7cfb      	ldrb	r3, [r7, #19]
 8014960:	2b00      	cmp	r3, #0
 8014962:	f000 8163 	beq.w	8014c2c <draw_quarter_2+0x3f0>
            q->draw_ctx->clip_area = &quarter_area;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	699b      	ldr	r3, [r3, #24]
 801496a:	f107 0208 	add.w	r2, r7, #8
 801496e:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6998      	ldr	r0, [r3, #24]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6919      	ldr	r1, [r3, #16]
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	695b      	ldr	r3, [r3, #20]
 801497c:	461a      	mov	r2, r3
 801497e:	f7fd fcf5 	bl	801236c <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8014982:	e153      	b.n	8014c2c <draw_quarter_2+0x3f0>
        }
    }
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	895b      	ldrh	r3, [r3, #10]
 8014988:	2b02      	cmp	r3, #2
 801498a:	d004      	beq.n	8014996 <draw_quarter_2+0x15a>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	899b      	ldrh	r3, [r3, #12]
 8014990:	2b02      	cmp	r3, #2
 8014992:	f040 80db 	bne.w	8014b4c <draw_quarter_2+0x310>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 2) {
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	895b      	ldrh	r3, [r3, #10]
 801499a:	2b02      	cmp	r3, #2
 801499c:	d167      	bne.n	8014a6e <draw_quarter_2+0x232>
            quarter_area.x2 = q->center->x - 1;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	3b01      	subs	r3, #1
 80149aa:	b29b      	uxth	r3, r3
 80149ac:	b21b      	sxth	r3, r3
 80149ae:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y - q->radius;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	1ad3      	subs	r3, r2, r3
 80149c4:	b29b      	uxth	r3, r3
 80149c6:	b21b      	sxth	r3, r3
 80149c8:	817b      	strh	r3, [r7, #10]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149d2:	b29c      	uxth	r4, r3
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	88db      	ldrh	r3, [r3, #6]
 80149d8:	335a      	adds	r3, #90	; 0x5a
 80149da:	b29b      	uxth	r3, r3
 80149dc:	b21b      	sxth	r3, r3
 80149de:	4618      	mov	r0, r3
 80149e0:	f00b f9c2 	bl	801fd68 <lv_trigo_sin>
 80149e4:	4603      	mov	r3, r0
 80149e6:	461a      	mov	r2, r3
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80149ee:	fb02 f303 	mul.w	r3, r2, r3
 80149f2:	13db      	asrs	r3, r3, #15
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	4423      	add	r3, r4
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	b21b      	sxth	r3, r3
 80149fc:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014a06:	b29c      	uxth	r4, r3
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	88db      	ldrh	r3, [r3, #6]
 8014a0c:	b21b      	sxth	r3, r3
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f00b f9aa 	bl	801fd68 <lv_trigo_sin>
 8014a14:	4603      	mov	r3, r0
 8014a16:	461a      	mov	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a1e:	4619      	mov	r1, r3
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014a26:	1acb      	subs	r3, r1, r3
 8014a28:	fb02 f303 	mul.w	r3, r2, r3
 8014a2c:	13db      	asrs	r3, r3, #15
 8014a2e:	b29b      	uxth	r3, r3
 8014a30:	4423      	add	r3, r4
 8014a32:	b29b      	uxth	r3, r3
 8014a34:	b21b      	sxth	r3, r3
 8014a36:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014a38:	f107 0108 	add.w	r1, r7, #8
 8014a3c:	f107 0308 	add.w	r3, r7, #8
 8014a40:	697a      	ldr	r2, [r7, #20]
 8014a42:	4618      	mov	r0, r3
 8014a44:	f009 ff8a 	bl	801e95c <_lv_area_intersect>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8014a4c:	7c7b      	ldrb	r3, [r7, #17]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d00d      	beq.n	8014a6e <draw_quarter_2+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	699b      	ldr	r3, [r3, #24]
 8014a56:	f107 0208 	add.w	r2, r7, #8
 8014a5a:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	6998      	ldr	r0, [r3, #24]
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6919      	ldr	r1, [r3, #16]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	695b      	ldr	r3, [r3, #20]
 8014a68:	461a      	mov	r2, r3
 8014a6a:	f7fd fc7f 	bl	801236c <lv_draw_rect>
            }
        }
        if(q->end_quarter == 2) {
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	899b      	ldrh	r3, [r3, #12]
 8014a72:	2b02      	cmp	r3, #2
 8014a74:	f040 80dc 	bne.w	8014c30 <draw_quarter_2+0x3f4>
            quarter_area.x1 = q->center->x - q->radius;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a80:	b29a      	uxth	r2, r3
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	b29b      	uxth	r3, r3
 8014a8e:	b21b      	sxth	r3, r3
 8014a90:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y - 1;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	3b01      	subs	r3, #1
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	b21b      	sxth	r3, r3
 8014aa2:	81fb      	strh	r3, [r7, #14]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aac:	b29c      	uxth	r4, r3
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	891b      	ldrh	r3, [r3, #8]
 8014ab2:	335a      	adds	r3, #90	; 0x5a
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	b21b      	sxth	r3, r3
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f00b f955 	bl	801fd68 <lv_trigo_sin>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014ac8:	4619      	mov	r1, r3
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014ad0:	1acb      	subs	r3, r1, r3
 8014ad2:	fb02 f303 	mul.w	r3, r2, r3
 8014ad6:	13db      	asrs	r3, r3, #15
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	4423      	add	r3, r4
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	b21b      	sxth	r3, r3
 8014ae0:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014aea:	b29c      	uxth	r4, r3
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	891b      	ldrh	r3, [r3, #8]
 8014af0:	b21b      	sxth	r3, r3
 8014af2:	4618      	mov	r0, r3
 8014af4:	f00b f938 	bl	801fd68 <lv_trigo_sin>
 8014af8:	4603      	mov	r3, r0
 8014afa:	461a      	mov	r2, r3
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014b02:	fb02 f303 	mul.w	r3, r2, r3
 8014b06:	13db      	asrs	r3, r3, #15
 8014b08:	b29b      	uxth	r3, r3
 8014b0a:	4423      	add	r3, r4
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	b21b      	sxth	r3, r3
 8014b10:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014b12:	f107 0108 	add.w	r1, r7, #8
 8014b16:	f107 0308 	add.w	r3, r7, #8
 8014b1a:	697a      	ldr	r2, [r7, #20]
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f009 ff1d 	bl	801e95c <_lv_area_intersect>
 8014b22:	4603      	mov	r3, r0
 8014b24:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8014b26:	7c3b      	ldrb	r3, [r7, #16]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	f000 8081 	beq.w	8014c30 <draw_quarter_2+0x3f4>
                q->draw_ctx->clip_area = &quarter_area;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	699b      	ldr	r3, [r3, #24]
 8014b32:	f107 0208 	add.w	r2, r7, #8
 8014b36:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6998      	ldr	r0, [r3, #24]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6919      	ldr	r1, [r3, #16]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	695b      	ldr	r3, [r3, #20]
 8014b44:	461a      	mov	r2, r3
 8014b46:	f7fd fc11 	bl	801236c <lv_draw_rect>
        if(q->end_quarter == 2) {
 8014b4a:	e071      	b.n	8014c30 <draw_quarter_2+0x3f4>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	895a      	ldrh	r2, [r3, #10]
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	899b      	ldrh	r3, [r3, #12]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d109      	bne.n	8014b6c <draw_quarter_2+0x330>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	895b      	ldrh	r3, [r3, #10]
 8014b5c:	2b02      	cmp	r3, #2
 8014b5e:	d005      	beq.n	8014b6c <draw_quarter_2+0x330>
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	891a      	ldrh	r2, [r3, #8]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	88db      	ldrh	r3, [r3, #6]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d317      	bcc.n	8014b9c <draw_quarter_2+0x360>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d103      	bne.n	8014b7c <draw_quarter_2+0x340>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	899b      	ldrh	r3, [r3, #12]
 8014b78:	2b03      	cmp	r3, #3
 8014b7a:	d00f      	beq.n	8014b9c <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8014b80:	2b01      	cmp	r3, #1
 8014b82:	d103      	bne.n	8014b8c <draw_quarter_2+0x350>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	899b      	ldrh	r3, [r3, #12]
 8014b88:	2b03      	cmp	r3, #3
 8014b8a:	d007      	beq.n	8014b9c <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d14e      	bne.n	8014c32 <draw_quarter_2+0x3f6>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	899b      	ldrh	r3, [r3, #12]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d14a      	bne.n	8014c32 <draw_quarter_2+0x3f6>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ba4:	b29a      	uxth	r2, r3
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	1ad3      	subs	r3, r2, r3
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	b21b      	sxth	r3, r3
 8014bb4:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014bbe:	b29a      	uxth	r2, r3
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	1ad3      	subs	r3, r2, r3
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	b21b      	sxth	r3, r3
 8014bce:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	3b01      	subs	r3, #1
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	b21b      	sxth	r3, r3
 8014be0:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	3b01      	subs	r3, #1
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	b21b      	sxth	r3, r3
 8014bf2:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014bf4:	f107 0108 	add.w	r1, r7, #8
 8014bf8:	f107 0308 	add.w	r3, r7, #8
 8014bfc:	697a      	ldr	r2, [r7, #20]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f009 feac 	bl	801e95c <_lv_area_intersect>
 8014c04:	4603      	mov	r3, r0
 8014c06:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8014c08:	7cbb      	ldrb	r3, [r7, #18]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d011      	beq.n	8014c32 <draw_quarter_2+0x3f6>
            q->draw_ctx->clip_area = &quarter_area;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	699b      	ldr	r3, [r3, #24]
 8014c12:	f107 0208 	add.w	r2, r7, #8
 8014c16:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	6998      	ldr	r0, [r3, #24]
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6919      	ldr	r1, [r3, #16]
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	695b      	ldr	r3, [r3, #20]
 8014c24:	461a      	mov	r2, r3
 8014c26:	f7fd fba1 	bl	801236c <lv_draw_rect>
 8014c2a:	e002      	b.n	8014c32 <draw_quarter_2+0x3f6>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8014c2c:	bf00      	nop
 8014c2e:	e000      	b.n	8014c32 <draw_quarter_2+0x3f6>
        if(q->end_quarter == 2) {
 8014c30:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	699b      	ldr	r3, [r3, #24]
 8014c36:	697a      	ldr	r2, [r7, #20]
 8014c38:	609a      	str	r2, [r3, #8]
}
 8014c3a:	bf00      	nop
 8014c3c:	371c      	adds	r7, #28
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd90      	pop	{r4, r7, pc}

08014c42 <draw_quarter_3>:

static void draw_quarter_3(quarter_draw_dsc_t * q)
{
 8014c42:	b590      	push	{r4, r7, lr}
 8014c44:	b087      	sub	sp, #28
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	699b      	ldr	r3, [r3, #24]
 8014c4e:	689b      	ldr	r3, [r3, #8]
 8014c50:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	895b      	ldrh	r3, [r3, #10]
 8014c56:	2b03      	cmp	r3, #3
 8014c58:	f040 8097 	bne.w	8014d8a <draw_quarter_3+0x148>
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	899b      	ldrh	r3, [r3, #12]
 8014c60:	2b03      	cmp	r3, #3
 8014c62:	f040 8092 	bne.w	8014d8a <draw_quarter_3+0x148>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	88da      	ldrh	r2, [r3, #6]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	891b      	ldrh	r3, [r3, #8]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	f080 808b 	bcs.w	8014d8a <draw_quarter_3+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c7c:	b29c      	uxth	r4, r3
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	88db      	ldrh	r3, [r3, #6]
 8014c82:	335a      	adds	r3, #90	; 0x5a
 8014c84:	b29b      	uxth	r3, r3
 8014c86:	b21b      	sxth	r3, r3
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f00b f86d 	bl	801fd68 <lv_trigo_sin>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	461a      	mov	r2, r3
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014c98:	4619      	mov	r1, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014ca0:	1acb      	subs	r3, r1, r3
 8014ca2:	fb02 f303 	mul.w	r3, r2, r3
 8014ca6:	13db      	asrs	r3, r3, #15
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	4423      	add	r3, r4
 8014cac:	b29b      	uxth	r3, r3
 8014cae:	b21b      	sxth	r3, r3
 8014cb0:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cba:	b29c      	uxth	r4, r3
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	88db      	ldrh	r3, [r3, #6]
 8014cc0:	b21b      	sxth	r3, r3
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f00b f850 	bl	801fd68 <lv_trigo_sin>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	461a      	mov	r2, r3
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014cd2:	fb02 f303 	mul.w	r3, r2, r3
 8014cd6:	13db      	asrs	r3, r3, #15
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	4423      	add	r3, r4
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	b21b      	sxth	r3, r3
 8014ce0:	817b      	strh	r3, [r7, #10]

        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014cea:	b29c      	uxth	r4, r3
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	891b      	ldrh	r3, [r3, #8]
 8014cf0:	335a      	adds	r3, #90	; 0x5a
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	b21b      	sxth	r3, r3
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f00b f836 	bl	801fd68 <lv_trigo_sin>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	461a      	mov	r2, r3
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d06:	fb02 f303 	mul.w	r3, r2, r3
 8014d0a:	13db      	asrs	r3, r3, #15
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	4423      	add	r3, r4
 8014d10:	b29b      	uxth	r3, r3
 8014d12:	b21b      	sxth	r3, r3
 8014d14:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014d1e:	b29c      	uxth	r4, r3
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	891b      	ldrh	r3, [r3, #8]
 8014d24:	b21b      	sxth	r3, r3
 8014d26:	4618      	mov	r0, r3
 8014d28:	f00b f81e 	bl	801fd68 <lv_trigo_sin>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	461a      	mov	r2, r3
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d36:	4619      	mov	r1, r3
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014d3e:	1acb      	subs	r3, r1, r3
 8014d40:	fb02 f303 	mul.w	r3, r2, r3
 8014d44:	13db      	asrs	r3, r3, #15
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	4423      	add	r3, r4
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	b21b      	sxth	r3, r3
 8014d4e:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014d50:	f107 0108 	add.w	r1, r7, #8
 8014d54:	f107 0308 	add.w	r3, r7, #8
 8014d58:	697a      	ldr	r2, [r7, #20]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f009 fdfe 	bl	801e95c <_lv_area_intersect>
 8014d60:	4603      	mov	r3, r0
 8014d62:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8014d64:	7cfb      	ldrb	r3, [r7, #19]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f000 815a 	beq.w	8015020 <draw_quarter_3+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	699b      	ldr	r3, [r3, #24]
 8014d70:	f107 0208 	add.w	r2, r7, #8
 8014d74:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	6998      	ldr	r0, [r3, #24]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	6919      	ldr	r1, [r3, #16]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	695b      	ldr	r3, [r3, #20]
 8014d82:	461a      	mov	r2, r3
 8014d84:	f7fd faf2 	bl	801236c <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8014d88:	e14a      	b.n	8015020 <draw_quarter_3+0x3de>
        }
    }
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	895b      	ldrh	r3, [r3, #10]
 8014d8e:	2b03      	cmp	r3, #3
 8014d90:	d004      	beq.n	8014d9c <draw_quarter_3+0x15a>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	899b      	ldrh	r3, [r3, #12]
 8014d96:	2b03      	cmp	r3, #3
 8014d98:	f040 80d6 	bne.w	8014f48 <draw_quarter_3+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 3) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	895b      	ldrh	r3, [r3, #10]
 8014da0:	2b03      	cmp	r3, #3
 8014da2:	d167      	bne.n	8014e74 <draw_quarter_3+0x232>
            quarter_area.x2 = q->center->x + q->radius;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	4413      	add	r3, r2
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	b21b      	sxth	r3, r3
 8014dbc:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y - 1;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	3b01      	subs	r3, #1
 8014dca:	b29b      	uxth	r3, r3
 8014dcc:	b21b      	sxth	r3, r3
 8014dce:	81fb      	strh	r3, [r7, #14]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014dd8:	b29c      	uxth	r4, r3
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	88db      	ldrh	r3, [r3, #6]
 8014dde:	335a      	adds	r3, #90	; 0x5a
 8014de0:	b29b      	uxth	r3, r3
 8014de2:	b21b      	sxth	r3, r3
 8014de4:	4618      	mov	r0, r3
 8014de6:	f00a ffbf 	bl	801fd68 <lv_trigo_sin>
 8014dea:	4603      	mov	r3, r0
 8014dec:	461a      	mov	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014df4:	4619      	mov	r1, r3
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014dfc:	1acb      	subs	r3, r1, r3
 8014dfe:	fb02 f303 	mul.w	r3, r2, r3
 8014e02:	13db      	asrs	r3, r3, #15
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	4423      	add	r3, r4
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	b21b      	sxth	r3, r3
 8014e0c:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e16:	b29c      	uxth	r4, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	88db      	ldrh	r3, [r3, #6]
 8014e1c:	b21b      	sxth	r3, r3
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f00a ffa2 	bl	801fd68 <lv_trigo_sin>
 8014e24:	4603      	mov	r3, r0
 8014e26:	461a      	mov	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e2e:	fb02 f303 	mul.w	r3, r2, r3
 8014e32:	13db      	asrs	r3, r3, #15
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	4423      	add	r3, r4
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	b21b      	sxth	r3, r3
 8014e3c:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014e3e:	f107 0108 	add.w	r1, r7, #8
 8014e42:	f107 0308 	add.w	r3, r7, #8
 8014e46:	697a      	ldr	r2, [r7, #20]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f009 fd87 	bl	801e95c <_lv_area_intersect>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8014e52:	7c7b      	ldrb	r3, [r7, #17]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d00d      	beq.n	8014e74 <draw_quarter_3+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	699b      	ldr	r3, [r3, #24]
 8014e5c:	f107 0208 	add.w	r2, r7, #8
 8014e60:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6998      	ldr	r0, [r3, #24]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	6919      	ldr	r1, [r3, #16]
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	695b      	ldr	r3, [r3, #20]
 8014e6e:	461a      	mov	r2, r3
 8014e70:	f7fd fa7c 	bl	801236c <lv_draw_rect>
            }
        }
        if(q->end_quarter == 3) {
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	899b      	ldrh	r3, [r3, #12]
 8014e78:	2b03      	cmp	r3, #3
 8014e7a:	f040 80d3 	bne.w	8015024 <draw_quarter_3+0x3e2>
            quarter_area.x1 = q->center->x;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e86:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y - q->radius;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e90:	b29a      	uxth	r2, r3
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	1ad3      	subs	r3, r2, r3
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	b21b      	sxth	r3, r3
 8014ea0:	817b      	strh	r3, [r7, #10]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eaa:	b29c      	uxth	r4, r3
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	891b      	ldrh	r3, [r3, #8]
 8014eb0:	335a      	adds	r3, #90	; 0x5a
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	b21b      	sxth	r3, r3
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f00a ff56 	bl	801fd68 <lv_trigo_sin>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014ec6:	fb02 f303 	mul.w	r3, r2, r3
 8014eca:	13db      	asrs	r3, r3, #15
 8014ecc:	b29b      	uxth	r3, r3
 8014ece:	4423      	add	r3, r4
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	b21b      	sxth	r3, r3
 8014ed4:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014ede:	b29c      	uxth	r4, r3
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	891b      	ldrh	r3, [r3, #8]
 8014ee4:	b21b      	sxth	r3, r3
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f00a ff3e 	bl	801fd68 <lv_trigo_sin>
 8014eec:	4603      	mov	r3, r0
 8014eee:	461a      	mov	r2, r3
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014efe:	1acb      	subs	r3, r1, r3
 8014f00:	fb02 f303 	mul.w	r3, r2, r3
 8014f04:	13db      	asrs	r3, r3, #15
 8014f06:	b29b      	uxth	r3, r3
 8014f08:	4423      	add	r3, r4
 8014f0a:	b29b      	uxth	r3, r3
 8014f0c:	b21b      	sxth	r3, r3
 8014f0e:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014f10:	f107 0108 	add.w	r1, r7, #8
 8014f14:	f107 0308 	add.w	r3, r7, #8
 8014f18:	697a      	ldr	r2, [r7, #20]
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f009 fd1e 	bl	801e95c <_lv_area_intersect>
 8014f20:	4603      	mov	r3, r0
 8014f22:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8014f24:	7c3b      	ldrb	r3, [r7, #16]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d07c      	beq.n	8015024 <draw_quarter_3+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	699b      	ldr	r3, [r3, #24]
 8014f2e:	f107 0208 	add.w	r2, r7, #8
 8014f32:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6998      	ldr	r0, [r3, #24]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	6919      	ldr	r1, [r3, #16]
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	695b      	ldr	r3, [r3, #20]
 8014f40:	461a      	mov	r2, r3
 8014f42:	f7fd fa13 	bl	801236c <lv_draw_rect>
        if(q->end_quarter == 3) {
 8014f46:	e06d      	b.n	8015024 <draw_quarter_3+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	895a      	ldrh	r2, [r3, #10]
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	899b      	ldrh	r3, [r3, #12]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d109      	bne.n	8014f68 <draw_quarter_3+0x326>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	895b      	ldrh	r3, [r3, #10]
 8014f58:	2b03      	cmp	r3, #3
 8014f5a:	d005      	beq.n	8014f68 <draw_quarter_3+0x326>
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	891a      	ldrh	r2, [r3, #8]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	88db      	ldrh	r3, [r3, #6]
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d317      	bcc.n	8014f98 <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8014f6c:	2b02      	cmp	r3, #2
 8014f6e:	d103      	bne.n	8014f78 <draw_quarter_3+0x336>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	899b      	ldrh	r3, [r3, #12]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d00f      	beq.n	8014f98 <draw_quarter_3+0x356>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d103      	bne.n	8014f88 <draw_quarter_3+0x346>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	899b      	ldrh	r3, [r3, #12]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d007      	beq.n	8014f98 <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8014f8c:	2b02      	cmp	r3, #2
 8014f8e:	d14a      	bne.n	8015026 <draw_quarter_3+0x3e4>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	899b      	ldrh	r3, [r3, #12]
 8014f94:	2b01      	cmp	r3, #1
 8014f96:	d146      	bne.n	8015026 <draw_quarter_3+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fa0:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014faa:	b29a      	uxth	r2, r3
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	1ad3      	subs	r3, r2, r3
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	b21b      	sxth	r3, r3
 8014fba:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fc4:	b29a      	uxth	r2, r3
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014fcc:	b29b      	uxth	r3, r3
 8014fce:	4413      	add	r3, r2
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	b21b      	sxth	r3, r3
 8014fd4:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	3b01      	subs	r3, #1
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	b21b      	sxth	r3, r3
 8014fe6:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014fe8:	f107 0108 	add.w	r1, r7, #8
 8014fec:	f107 0308 	add.w	r3, r7, #8
 8014ff0:	697a      	ldr	r2, [r7, #20]
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f009 fcb2 	bl	801e95c <_lv_area_intersect>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8014ffc:	7cbb      	ldrb	r3, [r7, #18]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d011      	beq.n	8015026 <draw_quarter_3+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	699b      	ldr	r3, [r3, #24]
 8015006:	f107 0208 	add.w	r2, r7, #8
 801500a:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6998      	ldr	r0, [r3, #24]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6919      	ldr	r1, [r3, #16]
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	695b      	ldr	r3, [r3, #20]
 8015018:	461a      	mov	r2, r3
 801501a:	f7fd f9a7 	bl	801236c <lv_draw_rect>
 801501e:	e002      	b.n	8015026 <draw_quarter_3+0x3e4>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8015020:	bf00      	nop
 8015022:	e000      	b.n	8015026 <draw_quarter_3+0x3e4>
        if(q->end_quarter == 3) {
 8015024:	bf00      	nop
        }
    }

    q->draw_ctx->clip_area = clip_area_ori;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	699b      	ldr	r3, [r3, #24]
 801502a:	697a      	ldr	r2, [r7, #20]
 801502c:	609a      	str	r2, [r3, #8]
}
 801502e:	bf00      	nop
 8015030:	371c      	adds	r7, #28
 8015032:	46bd      	mov	sp, r7
 8015034:	bd90      	pop	{r4, r7, pc}

08015036 <get_rounded_area>:

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 8015036:	b590      	push	{r4, r7, lr}
 8015038:	b08b      	sub	sp, #44	; 0x2c
 801503a:	af00      	add	r7, sp, #0
 801503c:	607b      	str	r3, [r7, #4]
 801503e:	4603      	mov	r3, r0
 8015040:	81fb      	strh	r3, [r7, #14]
 8015042:	460b      	mov	r3, r1
 8015044:	81bb      	strh	r3, [r7, #12]
 8015046:	4613      	mov	r3, r2
 8015048:	72fb      	strb	r3, [r7, #11]
    const uint8_t ps = 8;
 801504a:	2308      	movs	r3, #8
 801504c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t pa = 127;
 8015050:	237f      	movs	r3, #127	; 0x7f
 8015052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    int32_t thick_half = thickness / 2;
 8015056:	7afb      	ldrb	r3, [r7, #11]
 8015058:	085b      	lsrs	r3, r3, #1
 801505a:	b2db      	uxtb	r3, r3
 801505c:	623b      	str	r3, [r7, #32]
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 801505e:	7afb      	ldrb	r3, [r7, #11]
 8015060:	f003 0301 	and.w	r3, r3, #1
 8015064:	2b00      	cmp	r3, #0
 8015066:	bf0c      	ite	eq
 8015068:	2301      	moveq	r3, #1
 801506a:	2300      	movne	r3, #0
 801506c:	b2db      	uxtb	r3, r3
 801506e:	77fb      	strb	r3, [r7, #31]

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8015070:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015074:	6a3b      	ldr	r3, [r7, #32]
 8015076:	1ad4      	subs	r4, r2, r3
 8015078:	89fb      	ldrh	r3, [r7, #14]
 801507a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 801507e:	b29b      	uxth	r3, r3
 8015080:	b21b      	sxth	r3, r3
 8015082:	4618      	mov	r0, r3
 8015084:	f00a fe70 	bl	801fd68 <lv_trigo_sin>
 8015088:	4603      	mov	r3, r0
 801508a:	fb03 f204 	mul.w	r2, r3, r4
 801508e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015092:	f1c3 030f 	rsb	r3, r3, #15
 8015096:	fa42 f303 	asr.w	r3, r2, r3
 801509a:	61bb      	str	r3, [r7, #24]
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801509c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80150a0:	6a3b      	ldr	r3, [r7, #32]
 80150a2:	1ad4      	subs	r4, r2, r3
 80150a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80150a8:	4618      	mov	r0, r3
 80150aa:	f00a fe5d 	bl	801fd68 <lv_trigo_sin>
 80150ae:	4603      	mov	r3, r0
 80150b0:	fb03 f204 	mul.w	r2, r3, r4
 80150b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150b8:	f1c3 030f 	rsb	r3, r3, #15
 80150bc:	fa42 f303 	asr.w	r3, r2, r3
 80150c0:	617b      	str	r3, [r7, #20]

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 80150c2:	69bb      	ldr	r3, [r7, #24]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	dd1f      	ble.n	8015108 <get_rounded_area+0xd2>
        cir_x = (cir_x - pa) >> ps;
 80150c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80150cc:	69ba      	ldr	r2, [r7, #24]
 80150ce:	1ad2      	subs	r2, r2, r3
 80150d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150d4:	fa42 f303 	asr.w	r3, r2, r3
 80150d8:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half + thick_corr;
 80150da:	69bb      	ldr	r3, [r7, #24]
 80150dc:	b29a      	uxth	r2, r3
 80150de:	6a3b      	ldr	r3, [r7, #32]
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	1ad3      	subs	r3, r2, r3
 80150e4:	b29a      	uxth	r2, r3
 80150e6:	7ffb      	ldrb	r3, [r7, #31]
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	4413      	add	r3, r2
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	b21a      	sxth	r2, r3
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half;
 80150f4:	69bb      	ldr	r3, [r7, #24]
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	6a3b      	ldr	r3, [r7, #32]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	4413      	add	r3, r2
 80150fe:	b29b      	uxth	r3, r3
 8015100:	b21a      	sxth	r2, r3
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	809a      	strh	r2, [r3, #4]
 8015106:	e01e      	b.n	8015146 <get_rounded_area+0x110>
    }
    else {
        cir_x = (cir_x + pa) >> ps;
 8015108:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801510c:	69bb      	ldr	r3, [r7, #24]
 801510e:	441a      	add	r2, r3
 8015110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015114:	fa42 f303 	asr.w	r3, r2, r3
 8015118:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half;
 801511a:	69bb      	ldr	r3, [r7, #24]
 801511c:	b29a      	uxth	r2, r3
 801511e:	6a3b      	ldr	r3, [r7, #32]
 8015120:	b29b      	uxth	r3, r3
 8015122:	1ad3      	subs	r3, r2, r3
 8015124:	b29b      	uxth	r3, r3
 8015126:	b21a      	sxth	r2, r3
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 801512c:	69bb      	ldr	r3, [r7, #24]
 801512e:	b29a      	uxth	r2, r3
 8015130:	6a3b      	ldr	r3, [r7, #32]
 8015132:	b29b      	uxth	r3, r3
 8015134:	4413      	add	r3, r2
 8015136:	b29a      	uxth	r2, r3
 8015138:	7ffb      	ldrb	r3, [r7, #31]
 801513a:	b29b      	uxth	r3, r3
 801513c:	1ad3      	subs	r3, r2, r3
 801513e:	b29b      	uxth	r3, r3
 8015140:	b21a      	sxth	r2, r3
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	809a      	strh	r2, [r3, #4]
    }

    if(cir_y > 0) {
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	2b00      	cmp	r3, #0
 801514a:	dd1f      	ble.n	801518c <get_rounded_area+0x156>
        cir_y = (cir_y - pa) >> ps;
 801514c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015150:	697a      	ldr	r2, [r7, #20]
 8015152:	1ad2      	subs	r2, r2, r3
 8015154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015158:	fa42 f303 	asr.w	r3, r2, r3
 801515c:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half + thick_corr;
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	b29a      	uxth	r2, r3
 8015162:	6a3b      	ldr	r3, [r7, #32]
 8015164:	b29b      	uxth	r3, r3
 8015166:	1ad3      	subs	r3, r2, r3
 8015168:	b29a      	uxth	r2, r3
 801516a:	7ffb      	ldrb	r3, [r7, #31]
 801516c:	b29b      	uxth	r3, r3
 801516e:	4413      	add	r3, r2
 8015170:	b29b      	uxth	r3, r3
 8015172:	b21a      	sxth	r2, r3
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half;
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	b29a      	uxth	r2, r3
 801517c:	6a3b      	ldr	r3, [r7, #32]
 801517e:	b29b      	uxth	r3, r3
 8015180:	4413      	add	r3, r2
 8015182:	b29b      	uxth	r3, r3
 8015184:	b21a      	sxth	r2, r3
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	80da      	strh	r2, [r3, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 801518a:	e01e      	b.n	80151ca <get_rounded_area+0x194>
        cir_y = (cir_y + pa) >> ps;
 801518c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	441a      	add	r2, r3
 8015194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015198:	fa42 f303 	asr.w	r3, r2, r3
 801519c:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half;
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	6a3b      	ldr	r3, [r7, #32]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	1ad3      	subs	r3, r2, r3
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	b21a      	sxth	r2, r3
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	b29a      	uxth	r2, r3
 80151b4:	6a3b      	ldr	r3, [r7, #32]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	4413      	add	r3, r2
 80151ba:	b29a      	uxth	r2, r3
 80151bc:	7ffb      	ldrb	r3, [r7, #31]
 80151be:	b29b      	uxth	r3, r3
 80151c0:	1ad3      	subs	r3, r2, r3
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	b21a      	sxth	r2, r3
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	80da      	strh	r2, [r3, #6]
}
 80151ca:	bf00      	nop
 80151cc:	372c      	adds	r7, #44	; 0x2c
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd90      	pop	{r4, r7, pc}

080151d2 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 80151d2:	b480      	push	{r7}
 80151d4:	b085      	sub	sp, #20
 80151d6:	af00      	add	r7, sp, #0
 80151d8:	7138      	strb	r0, [r7, #4]
 80151da:	7039      	strb	r1, [r7, #0]
 80151dc:	4613      	mov	r3, r2
 80151de:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 80151e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	da01      	bge.n	80151ec <lv_color_mix+0x1a>
 80151e8:	793b      	ldrb	r3, [r7, #4]
 80151ea:	e000      	b.n	80151ee <lv_color_mix+0x1c>
 80151ec:	783b      	ldrb	r3, [r7, #0]
 80151ee:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 80151f0:	7b3b      	ldrb	r3, [r7, #12]
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3714      	adds	r7, #20
 80151f6:	46bd      	mov	sp, r7
 80151f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fc:	4770      	bx	lr

080151fe <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 80151fe:	b480      	push	{r7}
 8015200:	b083      	sub	sp, #12
 8015202:	af00      	add	r7, sp, #0
 8015204:	7138      	strb	r0, [r7, #4]
 8015206:	460b      	mov	r3, r1
 8015208:	603a      	str	r2, [r7, #0]
 801520a:	71fb      	strb	r3, [r7, #7]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
#else
    (void) mix;
    /*Pre-multiplication can't be used with 1 bpp*/
    out[0] = LV_COLOR_GET_R(c);
 801520c:	793b      	ldrb	r3, [r7, #4]
 801520e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015212:	b2db      	uxtb	r3, r3
 8015214:	b29a      	uxth	r2, r3
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 801521a:	793b      	ldrb	r3, [r7, #4]
 801521c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015220:	b2da      	uxtb	r2, r3
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	3302      	adds	r3, #2
 8015226:	b292      	uxth	r2, r2
 8015228:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 801522a:	793b      	ldrb	r3, [r7, #4]
 801522c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015230:	b2da      	uxtb	r2, r3
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	3304      	adds	r3, #4
 8015236:	b292      	uxth	r2, r2
 8015238:	801a      	strh	r2, [r3, #0]
#endif

}
 801523a:	bf00      	nop
 801523c:	370c      	adds	r7, #12
 801523e:	46bd      	mov	sp, r7
 8015240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015244:	4770      	bx	lr

08015246 <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 8015246:	b480      	push	{r7}
 8015248:	b085      	sub	sp, #20
 801524a:	af00      	add	r7, sp, #0
 801524c:	6078      	str	r0, [r7, #4]
 801524e:	7039      	strb	r1, [r7, #0]
 8015250:	4613      	mov	r3, r2
 8015252:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    /*Restore color1*/
    lv_color_t c1;
    LV_COLOR_SET_R(c1, premult_c1[0]);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	881b      	ldrh	r3, [r3, #0]
 8015258:	f003 0301 	and.w	r3, r3, #1
 801525c:	b2da      	uxtb	r2, r3
 801525e:	7a3b      	ldrb	r3, [r7, #8]
 8015260:	f362 0300 	bfi	r3, r2, #0, #1
 8015264:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	3302      	adds	r3, #2
 801526a:	881b      	ldrh	r3, [r3, #0]
 801526c:	f003 0301 	and.w	r3, r3, #1
 8015270:	b2da      	uxtb	r2, r3
 8015272:	7a3b      	ldrb	r3, [r7, #8]
 8015274:	f362 0300 	bfi	r3, r2, #0, #1
 8015278:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	3304      	adds	r3, #4
 801527e:	881b      	ldrh	r3, [r3, #0]
 8015280:	f003 0301 	and.w	r3, r3, #1
 8015284:	b2da      	uxtb	r2, r3
 8015286:	7a3b      	ldrb	r3, [r7, #8]
 8015288:	f362 0300 	bfi	r3, r2, #0, #1
 801528c:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 801528e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015292:	2b00      	cmp	r3, #0
 8015294:	da01      	bge.n	801529a <lv_color_mix_premult+0x54>
 8015296:	783b      	ldrb	r3, [r7, #0]
 8015298:	e000      	b.n	801529c <lv_color_mix_premult+0x56>
 801529a:	7a3b      	ldrb	r3, [r7, #8]
 801529c:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 801529e:	7b3b      	ldrb	r3, [r7, #12]
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	3714      	adds	r7, #20
 80152a4:	46bd      	mov	sp, r7
 80152a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152aa:	4770      	bx	lr

080152ac <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80152ac:	b480      	push	{r7}
 80152ae:	b083      	sub	sp, #12
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	4603      	mov	r3, r0
 80152b4:	71fb      	strb	r3, [r7, #7]
 80152b6:	460b      	mov	r3, r1
 80152b8:	71bb      	strb	r3, [r7, #6]
 80152ba:	4613      	mov	r3, r2
 80152bc:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80152be:	797b      	ldrb	r3, [r7, #5]
 80152c0:	09db      	lsrs	r3, r3, #7
 80152c2:	b2da      	uxtb	r2, r3
 80152c4:	79bb      	ldrb	r3, [r7, #6]
 80152c6:	09db      	lsrs	r3, r3, #7
 80152c8:	b2db      	uxtb	r3, r3
 80152ca:	4313      	orrs	r3, r2
 80152cc:	b2da      	uxtb	r2, r3
 80152ce:	79fb      	ldrb	r3, [r7, #7]
 80152d0:	09db      	lsrs	r3, r3, #7
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	4313      	orrs	r3, r2
 80152d6:	b2db      	uxtb	r3, r3
}
 80152d8:	4618      	mov	r0, r3
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr

080152e4 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80152e8:	2200      	movs	r2, #0
 80152ea:	2100      	movs	r1, #0
 80152ec:	2000      	movs	r0, #0
 80152ee:	f7ff ffdd 	bl	80152ac <lv_color_make>
 80152f2:	4603      	mov	r3, r0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <lv_area_get_width>:
{
 80152f8:	b480      	push	{r7}
 80152fa:	b083      	sub	sp, #12
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015306:	b29a      	uxth	r2, r3
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801530e:	b29b      	uxth	r3, r3
 8015310:	1ad3      	subs	r3, r2, r3
 8015312:	b29b      	uxth	r3, r3
 8015314:	3301      	adds	r3, #1
 8015316:	b29b      	uxth	r3, r3
 8015318:	b21b      	sxth	r3, r3
}
 801531a:	4618      	mov	r0, r3
 801531c:	370c      	adds	r7, #12
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr

08015326 <lv_area_get_height>:
{
 8015326:	b480      	push	{r7}
 8015328:	b083      	sub	sp, #12
 801532a:	af00      	add	r7, sp, #0
 801532c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015334:	b29a      	uxth	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801533c:	b29b      	uxth	r3, r3
 801533e:	1ad3      	subs	r3, r2, r3
 8015340:	b29b      	uxth	r3, r3
 8015342:	3301      	adds	r3, #1
 8015344:	b29b      	uxth	r3, r3
 8015346:	b21b      	sxth	r3, r3
}
 8015348:	4618      	mov	r0, r3
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b084      	sub	sp, #16
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	6039      	str	r1, [r7, #0]
    /*Do not draw transparent things*/
    if(dsc->opa <= LV_OPA_MIN) return;
 801535e:	683b      	ldr	r3, [r7, #0]
 8015360:	7e1b      	ldrb	r3, [r3, #24]
 8015362:	2b02      	cmp	r3, #2
 8015364:	d91c      	bls.n	80153a0 <lv_draw_sw_blend+0x4c>

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	6819      	ldr	r1, [r3, #0]
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	689a      	ldr	r2, [r3, #8]
 801536e:	f107 0308 	add.w	r3, r7, #8
 8015372:	4618      	mov	r0, r3
 8015374:	f009 faf2 	bl	801e95c <_lv_area_intersect>
 8015378:	4603      	mov	r3, r0
 801537a:	f083 0301 	eor.w	r3, r3, #1
 801537e:	b2db      	uxtb	r3, r3
 8015380:	2b00      	cmp	r3, #0
 8015382:	d10f      	bne.n	80153a4 <lv_draw_sw_blend+0x50>

    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015388:	2b00      	cmp	r3, #0
 801538a:	d003      	beq.n	8015394 <lv_draw_sw_blend+0x40>
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015390:	6878      	ldr	r0, [r7, #4]
 8015392:	4798      	blx	r3

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015398:	6839      	ldr	r1, [r7, #0]
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	4798      	blx	r3
 801539e:	e002      	b.n	80153a6 <lv_draw_sw_blend+0x52>
    if(dsc->opa <= LV_OPA_MIN) return;
 80153a0:	bf00      	nop
 80153a2:	e000      	b.n	80153a6 <lv_draw_sw_blend+0x52>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80153a4:	bf00      	nop
}
 80153a6:	3710      	adds	r7, #16
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <lv_draw_sw_blend_basic>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 80153ac:	b590      	push	{r4, r7, lr}
 80153ae:	b095      	sub	sp, #84	; 0x54
 80153b0:	af06      	add	r7, sp, #24
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	6039      	str	r1, [r7, #0]
    lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	68db      	ldr	r3, [r3, #12]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d101      	bne.n	80153c2 <lv_draw_sw_blend_basic+0x16>
 80153be:	2300      	movs	r3, #0
 80153c0:	637b      	str	r3, [r7, #52]	; 0x34
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	68db      	ldr	r3, [r3, #12]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d004      	beq.n	80153d4 <lv_draw_sw_blend_basic+0x28>
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	7c1b      	ldrb	r3, [r3, #16]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	f000 8191 	beq.w	80156f6 <lv_draw_sw_blend_basic+0x34a>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	7c1b      	ldrb	r3, [r3, #16]
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d102      	bne.n	80153e2 <lv_draw_sw_blend_basic+0x36>
 80153dc:	2300      	movs	r3, #0
 80153de:	637b      	str	r3, [r7, #52]	; 0x34
 80153e0:	e002      	b.n	80153e8 <lv_draw_sw_blend_basic+0x3c>
    else mask = dsc->mask_buf;
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	68db      	ldr	r3, [r3, #12]
 80153e6:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7ff ff83 	bl	80152f8 <lv_area_get_width>
 80153f2:	4603      	mov	r3, r0
 80153f4:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	6819      	ldr	r1, [r3, #0]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	689a      	ldr	r2, [r3, #8]
 80153fe:	f107 030c 	add.w	r3, r7, #12
 8015402:	4618      	mov	r0, r3
 8015404:	f009 faaa 	bl	801e95c <_lv_area_intersect>
 8015408:	4603      	mov	r3, r0
 801540a:	f083 0301 	eor.w	r3, r3, #1
 801540e:	b2db      	uxtb	r3, r3
 8015410:	2b00      	cmp	r3, #0
 8015412:	f040 8172 	bne.w	80156fa <lv_draw_sw_blend_basic+0x34e>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8015416:	f7f7 fac3 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 801541a:	61f8      	str	r0, [r7, #28]
    lv_color_t * dest_buf = draw_ctx->buf;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	633b      	str	r3, [r7, #48]	; 0x30
    if(disp->driver->set_px_cb == NULL) {
 8015422:	69fb      	ldr	r3, [r7, #28]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	69db      	ldr	r3, [r3, #28]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d143      	bne.n	80154b4 <lv_draw_sw_blend_basic+0x108>
        if(disp->driver->screen_transp == 0) {
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	7c1b      	ldrb	r3, [r3, #16]
 8015432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015436:	b2db      	uxtb	r3, r3
 8015438:	2b00      	cmp	r3, #0
 801543a:	d119      	bne.n	8015470 <lv_draw_sw_blend_basic+0xc4>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 801543c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015440:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015444:	4611      	mov	r1, r2
 8015446:	687a      	ldr	r2, [r7, #4]
 8015448:	6852      	ldr	r2, [r2, #4]
 801544a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801544e:	1a8a      	subs	r2, r1, r2
 8015450:	fb03 f202 	mul.w	r2, r3, r2
 8015454:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015458:	4619      	mov	r1, r3
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015462:	1acb      	subs	r3, r1, r3
 8015464:	4413      	add	r3, r2
 8015466:	461a      	mov	r2, r3
 8015468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801546a:	4413      	add	r3, r2
 801546c:	633b      	str	r3, [r7, #48]	; 0x30
 801546e:	e021      	b.n	80154b4 <lv_draw_sw_blend_basic+0x108>
        }
        else {
            /*With LV_COLOR_DEPTH 16 it means ARGB8565 (3 bytes format)*/
            uint8_t * dest_buf8 = (uint8_t *) dest_buf;
 8015470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015472:	61bb      	str	r3, [r7, #24]
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8015474:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015478:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801547c:	4611      	mov	r1, r2
 801547e:	687a      	ldr	r2, [r7, #4]
 8015480:	6852      	ldr	r2, [r2, #4]
 8015482:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015486:	1a8a      	subs	r2, r1, r2
 8015488:	fb02 f303 	mul.w	r3, r2, r3
 801548c:	005b      	lsls	r3, r3, #1
 801548e:	461a      	mov	r2, r3
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	4413      	add	r3, r2
 8015494:	61bb      	str	r3, [r7, #24]
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8015496:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801549a:	461a      	mov	r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154a4:	1ad3      	subs	r3, r2, r3
 80154a6:	005b      	lsls	r3, r3, #1
 80154a8:	461a      	mov	r2, r3
 80154aa:	69bb      	ldr	r3, [r7, #24]
 80154ac:	4413      	add	r3, r2
 80154ae:	61bb      	str	r3, [r7, #24]
            dest_buf = (lv_color_t *)dest_buf8;
 80154b0:	69bb      	ldr	r3, [r7, #24]
 80154b2:	633b      	str	r3, [r7, #48]	; 0x30
        }
    }

    const lv_color_t * src_buf = dsc->src_buf;
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t src_stride;
    if(src_buf) {
 80154ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d020      	beq.n	8015502 <lv_draw_sw_blend_basic+0x156>
        src_stride = lv_area_get_width(dsc->blend_area);
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ff ff17 	bl	80152f8 <lv_area_get_width>
 80154ca:	4603      	mov	r3, r0
 80154cc:	857b      	strh	r3, [r7, #42]	; 0x2a
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 80154ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80154d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80154d6:	4611      	mov	r1, r2
 80154d8:	683a      	ldr	r2, [r7, #0]
 80154da:	6812      	ldr	r2, [r2, #0]
 80154dc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80154e0:	1a8a      	subs	r2, r1, r2
 80154e2:	fb03 f202 	mul.w	r2, r3, r2
 80154e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80154ea:	4619      	mov	r1, r3
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154f4:	1acb      	subs	r3, r1, r3
 80154f6:	4413      	add	r3, r2
 80154f8:	461a      	mov	r2, r3
 80154fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154fc:	4413      	add	r3, r2
 80154fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015500:	e001      	b.n	8015506 <lv_draw_sw_blend_basic+0x15a>
    }
    else {
        src_stride = 0;
 8015502:	2300      	movs	r3, #0
 8015504:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    lv_coord_t mask_stride;
    if(mask) {
 8015506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015508:	2b00      	cmp	r3, #0
 801550a:	d047      	beq.n	801559c <lv_draw_sw_blend_basic+0x1f0>
        /*Round the values in the mask if anti-aliasing is disabled*/
        if(disp->driver->antialiasing == 0) {
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	7c1b      	ldrb	r3, [r3, #16]
 8015512:	f003 0308 	and.w	r3, r3, #8
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b00      	cmp	r3, #0
 801551a:	d11e      	bne.n	801555a <lv_draw_sw_blend_basic+0x1ae>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	695b      	ldr	r3, [r3, #20]
 8015520:	4618      	mov	r0, r3
 8015522:	f009 f98e 	bl	801e842 <lv_area_get_size>
 8015526:	4603      	mov	r3, r0
 8015528:	617b      	str	r3, [r7, #20]
            int32_t i;
            for(i = 0; i < mask_size; i++) {
 801552a:	2300      	movs	r3, #0
 801552c:	627b      	str	r3, [r7, #36]	; 0x24
 801552e:	e010      	b.n	8015552 <lv_draw_sw_blend_basic+0x1a6>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8015530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015534:	4413      	add	r3, r2
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	2b80      	cmp	r3, #128	; 0x80
 801553a:	d901      	bls.n	8015540 <lv_draw_sw_blend_basic+0x194>
 801553c:	21ff      	movs	r1, #255	; 0xff
 801553e:	e000      	b.n	8015542 <lv_draw_sw_blend_basic+0x196>
 8015540:	2100      	movs	r1, #0
 8015542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015546:	4413      	add	r3, r2
 8015548:	460a      	mov	r2, r1
 801554a:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 801554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554e:	3301      	adds	r3, #1
 8015550:	627b      	str	r3, [r7, #36]	; 0x24
 8015552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	429a      	cmp	r2, r3
 8015558:	dbea      	blt.n	8015530 <lv_draw_sw_blend_basic+0x184>
            }
        }

        mask_stride = lv_area_get_width(dsc->mask_area);
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	695b      	ldr	r3, [r3, #20]
 801555e:	4618      	mov	r0, r3
 8015560:	f7ff feca 	bl	80152f8 <lv_area_get_width>
 8015564:	4603      	mov	r3, r0
 8015566:	853b      	strh	r3, [r7, #40]	; 0x28
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 8015568:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801556c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015570:	4611      	mov	r1, r2
 8015572:	683a      	ldr	r2, [r7, #0]
 8015574:	6952      	ldr	r2, [r2, #20]
 8015576:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801557a:	1a8a      	subs	r2, r1, r2
 801557c:	fb03 f202 	mul.w	r2, r3, r2
 8015580:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015584:	4619      	mov	r1, r3
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	695b      	ldr	r3, [r3, #20]
 801558a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801558e:	1acb      	subs	r3, r1, r3
 8015590:	4413      	add	r3, r2
 8015592:	461a      	mov	r2, r3
 8015594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015596:	4413      	add	r3, r2
 8015598:	637b      	str	r3, [r7, #52]	; 0x34
 801559a:	e001      	b.n	80155a0 <lv_draw_sw_blend_basic+0x1f4>

    }
    else {
        mask_stride = 0;
 801559c:	2300      	movs	r3, #0
 801559e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	425b      	negs	r3, r3
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	b219      	sxth	r1, r3
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	685b      	ldr	r3, [r3, #4]
 80155b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	425b      	negs	r3, r3
 80155bc:	b29b      	uxth	r3, r3
 80155be:	b21a      	sxth	r2, r3
 80155c0:	f107 030c 	add.w	r3, r7, #12
 80155c4:	4618      	mov	r0, r3
 80155c6:	f009 f993 	bl	801e8f0 <lv_area_move>


    if(disp->driver->set_px_cb) {
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	69db      	ldr	r3, [r3, #28]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d02c      	beq.n	801562e <lv_draw_sw_blend_basic+0x282>
        if(dsc->src_buf == NULL) {
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	685b      	ldr	r3, [r3, #4]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d113      	bne.n	8015604 <lv_draw_sw_blend_basic+0x258>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	7e1a      	ldrb	r2, [r3, #24]
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 80155e6:	f107 000c 	add.w	r0, r7, #12
 80155ea:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80155ee:	9102      	str	r1, [sp, #8]
 80155f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80155f2:	9101      	str	r1, [sp, #4]
 80155f4:	9200      	str	r2, [sp, #0]
 80155f6:	7a1b      	ldrb	r3, [r3, #8]
 80155f8:	4622      	mov	r2, r4
 80155fa:	4601      	mov	r1, r0
 80155fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155fe:	f000 f880 	bl	8015702 <fill_set_px>
 8015602:	e07b      	b.n	80156fc <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	7e1b      	ldrb	r3, [r3, #24]
 8015608:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 801560c:	f107 010c 	add.w	r1, r7, #12
 8015610:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8015614:	9203      	str	r2, [sp, #12]
 8015616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015618:	9202      	str	r2, [sp, #8]
 801561a:	9301      	str	r3, [sp, #4]
 801561c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015620:	9300      	str	r3, [sp, #0]
 8015622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015624:	4602      	mov	r2, r0
 8015626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015628:	f000 fc02 	bl	8015e30 <map_set_px>
 801562c:	e066      	b.n	80156fc <lv_draw_sw_blend_basic+0x350>
        else {
            map_argb(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
        }
    }
#endif
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	7e5b      	ldrb	r3, [r3, #25]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d12c      	bne.n	8015690 <lv_draw_sw_blend_basic+0x2e4>
        if(dsc->src_buf == NULL) {
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d113      	bne.n	8015666 <lv_draw_sw_blend_basic+0x2ba>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	7e1a      	ldrb	r2, [r3, #24]
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 8015648:	f107 000c 	add.w	r0, r7, #12
 801564c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8015650:	9102      	str	r1, [sp, #8]
 8015652:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015654:	9101      	str	r1, [sp, #4]
 8015656:	9200      	str	r2, [sp, #0]
 8015658:	7a1b      	ldrb	r3, [r3, #8]
 801565a:	4622      	mov	r2, r4
 801565c:	4601      	mov	r1, r0
 801565e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015660:	f000 f8ec 	bl	801583c <fill_normal>
 8015664:	e04a      	b.n	80156fc <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	7e1b      	ldrb	r3, [r3, #24]
 801566a:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 801566e:	f107 010c 	add.w	r1, r7, #12
 8015672:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8015676:	9203      	str	r2, [sp, #12]
 8015678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801567a:	9202      	str	r2, [sp, #8]
 801567c:	9301      	str	r3, [sp, #4]
 801567e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015682:	9300      	str	r3, [sp, #0]
 8015684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015686:	4602      	mov	r2, r0
 8015688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801568a:	f000 fc83 	bl	8015f94 <map_normal>
 801568e:	e035      	b.n	80156fc <lv_draw_sw_blend_basic+0x350>
        }
    }
    else {
#if LV_DRAW_COMPLEX
        if(dsc->src_buf == NULL) {
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d116      	bne.n	80156c6 <lv_draw_sw_blend_basic+0x31a>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	7e1a      	ldrb	r2, [r3, #24]
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	7e59      	ldrb	r1, [r3, #25]
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 80156a6:	f107 000c 	add.w	r0, r7, #12
 80156aa:	9103      	str	r1, [sp, #12]
 80156ac:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80156b0:	9102      	str	r1, [sp, #8]
 80156b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156b4:	9101      	str	r1, [sp, #4]
 80156b6:	9200      	str	r2, [sp, #0]
 80156b8:	7a1b      	ldrb	r3, [r3, #8]
 80156ba:	4622      	mov	r2, r4
 80156bc:	4601      	mov	r1, r0
 80156be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156c0:	f000 fabc 	bl	8015c3c <fill_blended>
 80156c4:	e01a      	b.n	80156fc <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	7e1b      	ldrb	r3, [r3, #24]
 80156ca:	683a      	ldr	r2, [r7, #0]
 80156cc:	7e52      	ldrb	r2, [r2, #25]
 80156ce:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 80156d2:	f107 010c 	add.w	r1, r7, #12
 80156d6:	9204      	str	r2, [sp, #16]
 80156d8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80156dc:	9203      	str	r2, [sp, #12]
 80156de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156e0:	9202      	str	r2, [sp, #8]
 80156e2:	9301      	str	r3, [sp, #4]
 80156e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ec:	4602      	mov	r2, r0
 80156ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156f0:	f000 fe78 	bl	80163e4 <map_blended>
 80156f4:	e002      	b.n	80156fc <lv_draw_sw_blend_basic+0x350>
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80156f6:	bf00      	nop
 80156f8:	e000      	b.n	80156fc <lv_draw_sw_blend_basic+0x350>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80156fa:	bf00      	nop
        }
#endif
    }
}
 80156fc:	373c      	adds	r7, #60	; 0x3c
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd90      	pop	{r4, r7, pc}

08015702 <fill_set_px>:
 *   STATIC FUNCTIONS
 **********************/

static void fill_set_px(lv_color_t * dest_buf, const lv_area_t * blend_area, lv_coord_t dest_stride,
                        lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stide)
{
 8015702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015704:	b08f      	sub	sp, #60	; 0x3c
 8015706:	af04      	add	r7, sp, #16
 8015708:	60f8      	str	r0, [r7, #12]
 801570a:	60b9      	str	r1, [r7, #8]
 801570c:	713b      	strb	r3, [r7, #4]
 801570e:	4613      	mov	r3, r2
 8015710:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8015712:	f7f7 f945 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 8015716:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8015718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801571a:	2b00      	cmp	r3, #0
 801571c:	d134      	bne.n	8015788 <fill_set_px+0x86>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015724:	623b      	str	r3, [r7, #32]
 8015726:	e027      	b.n	8015778 <fill_set_px+0x76>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801572e:	627b      	str	r3, [r7, #36]	; 0x24
 8015730:	e018      	b.n	8015764 <fill_set_px+0x62>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 8015732:	69fb      	ldr	r3, [r7, #28]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	69dc      	ldr	r4, [r3, #28]
 8015738:	69fb      	ldr	r3, [r7, #28]
 801573a:	6818      	ldr	r0, [r3, #0]
 801573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801573e:	b21d      	sxth	r5, r3
 8015740:	6a3b      	ldr	r3, [r7, #32]
 8015742:	b21b      	sxth	r3, r3
 8015744:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015748:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801574c:	9202      	str	r2, [sp, #8]
 801574e:	793a      	ldrb	r2, [r7, #4]
 8015750:	f88d 2004 	strb.w	r2, [sp, #4]
 8015754:	9300      	str	r3, [sp, #0]
 8015756:	462b      	mov	r3, r5
 8015758:	460a      	mov	r2, r1
 801575a:	68f9      	ldr	r1, [r7, #12]
 801575c:	47a0      	blx	r4
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 801575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015760:	3301      	adds	r3, #1
 8015762:	627b      	str	r3, [r7, #36]	; 0x24
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801576a:	461a      	mov	r2, r3
 801576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801576e:	4293      	cmp	r3, r2
 8015770:	dddf      	ble.n	8015732 <fill_set_px+0x30>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8015772:	6a3b      	ldr	r3, [r7, #32]
 8015774:	3301      	adds	r3, #1
 8015776:	623b      	str	r3, [r7, #32]
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801577e:	461a      	mov	r2, r3
 8015780:	6a3b      	ldr	r3, [r7, #32]
 8015782:	4293      	cmp	r3, r2
 8015784:	ddd0      	ble.n	8015728 <fill_set_px+0x26>
                }
            }
            mask += mask_stide;
        }
    }
}
 8015786:	e055      	b.n	8015834 <fill_set_px+0x132>
        int32_t w = lv_area_get_width(blend_area);
 8015788:	68b8      	ldr	r0, [r7, #8]
 801578a:	f7ff fdb5 	bl	80152f8 <lv_area_get_width>
 801578e:	4603      	mov	r3, r0
 8015790:	61bb      	str	r3, [r7, #24]
        int32_t h = lv_area_get_height(blend_area);
 8015792:	68b8      	ldr	r0, [r7, #8]
 8015794:	f7ff fdc7 	bl	8015326 <lv_area_get_height>
 8015798:	4603      	mov	r3, r0
 801579a:	617b      	str	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 801579c:	2300      	movs	r3, #0
 801579e:	623b      	str	r3, [r7, #32]
 80157a0:	e044      	b.n	801582c <fill_set_px+0x12a>
            for(x = 0; x < w; x++) {
 80157a2:	2300      	movs	r3, #0
 80157a4:	627b      	str	r3, [r7, #36]	; 0x24
 80157a6:	e035      	b.n	8015814 <fill_set_px+0x112>
                if(mask[x]) {
 80157a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157ac:	4413      	add	r3, r2
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d02c      	beq.n	801580e <fill_set_px+0x10c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	69dc      	ldr	r4, [r3, #28]
 80157ba:	69fb      	ldr	r3, [r7, #28]
 80157bc:	681d      	ldr	r5, [r3, #0]
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157c4:	b29a      	uxth	r2, r3
 80157c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	4413      	add	r3, r2
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	b21e      	sxth	r6, r3
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80157d6:	b29a      	uxth	r2, r3
 80157d8:	6a3b      	ldr	r3, [r7, #32]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	4413      	add	r3, r2
 80157de:	b29b      	uxth	r3, r3
 80157e0:	b21b      	sxth	r3, r3
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 80157e2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80157e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80157e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80157ea:	4401      	add	r1, r0
 80157ec:	7809      	ldrb	r1, [r1, #0]
 80157ee:	fb01 f202 	mul.w	r2, r1, r2
 80157f2:	0a12      	lsrs	r2, r2, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 80157f4:	b2d2      	uxtb	r2, r2
 80157f6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80157fa:	9202      	str	r2, [sp, #8]
 80157fc:	793a      	ldrb	r2, [r7, #4]
 80157fe:	f88d 2004 	strb.w	r2, [sp, #4]
 8015802:	9300      	str	r3, [sp, #0]
 8015804:	4633      	mov	r3, r6
 8015806:	460a      	mov	r2, r1
 8015808:	68f9      	ldr	r1, [r7, #12]
 801580a:	4628      	mov	r0, r5
 801580c:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 801580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015810:	3301      	adds	r3, #1
 8015812:	627b      	str	r3, [r7, #36]	; 0x24
 8015814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015816:	69bb      	ldr	r3, [r7, #24]
 8015818:	429a      	cmp	r2, r3
 801581a:	dbc5      	blt.n	80157a8 <fill_set_px+0xa6>
            mask += mask_stide;
 801581c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015822:	4413      	add	r3, r2
 8015824:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 8015826:	6a3b      	ldr	r3, [r7, #32]
 8015828:	3301      	adds	r3, #1
 801582a:	623b      	str	r3, [r7, #32]
 801582c:	6a3a      	ldr	r2, [r7, #32]
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	429a      	cmp	r2, r3
 8015832:	dbb6      	blt.n	80157a2 <fill_set_px+0xa0>
}
 8015834:	bf00      	nop
 8015836:	372c      	adds	r7, #44	; 0x2c
 8015838:	46bd      	mov	sp, r7
 801583a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801583c <fill_normal>:

LV_ATTRIBUTE_FAST_MEM static void fill_normal(lv_color_t * dest_buf, const lv_area_t * dest_area,
                                              lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b092      	sub	sp, #72	; 0x48
 8015840:	af00      	add	r7, sp, #0
 8015842:	60f8      	str	r0, [r7, #12]
 8015844:	60b9      	str	r1, [r7, #8]
 8015846:	713b      	strb	r3, [r7, #4]
 8015848:	4613      	mov	r3, r2
 801584a:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 801584c:	68b8      	ldr	r0, [r7, #8]
 801584e:	f7ff fd53 	bl	80152f8 <lv_area_get_width>
 8015852:	4603      	mov	r3, r0
 8015854:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h = lv_area_get_height(dest_area);
 8015856:	68b8      	ldr	r0, [r7, #8]
 8015858:	f7ff fd65 	bl	8015326 <lv_area_get_height>
 801585c:	4603      	mov	r3, r0
 801585e:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t x;
    int32_t y;

    /*No mask*/
    if(mask == NULL) {
 8015860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015862:	2b00      	cmp	r3, #0
 8015864:	d171      	bne.n	801594a <fill_normal+0x10e>
        if(opa >= LV_OPA_MAX) {
 8015866:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801586a:	2bfc      	cmp	r3, #252	; 0xfc
 801586c:	d915      	bls.n	801589a <fill_normal+0x5e>
            for(y = 0; y < h; y++) {
 801586e:	2300      	movs	r3, #0
 8015870:	643b      	str	r3, [r7, #64]	; 0x40
 8015872:	e00d      	b.n	8015890 <fill_normal+0x54>
                lv_color_fill(dest_buf, color, w);
 8015874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015876:	461a      	mov	r2, r3
 8015878:	7939      	ldrb	r1, [r7, #4]
 801587a:	68f8      	ldr	r0, [r7, #12]
 801587c:	f009 fd3a 	bl	801f2f4 <lv_color_fill>
                dest_buf += dest_stride;
 8015880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015884:	68fa      	ldr	r2, [r7, #12]
 8015886:	4413      	add	r3, r2
 8015888:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 801588a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801588c:	3301      	adds	r3, #1
 801588e:	643b      	str	r3, [r7, #64]	; 0x40
 8015890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015894:	429a      	cmp	r2, r3
 8015896:	dbed      	blt.n	8015874 <fill_normal+0x38>
                dest_buf += dest_stride;
                mask += (mask_stride - w);
            }
        }
    }
}
 8015898:	e1cc      	b.n	8015c34 <fill_normal+0x3f8>
            lv_color_t last_dest_color = lv_color_black();
 801589a:	f7ff fd23 	bl	80152e4 <lv_color_black>
 801589e:	4603      	mov	r3, r0
 80158a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 80158a4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80158a8:	461a      	mov	r2, r3
 80158aa:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80158ae:	7938      	ldrb	r0, [r7, #4]
 80158b0:	f7ff fc8f 	bl	80151d2 <lv_color_mix>
 80158b4:	4603      	mov	r3, r0
 80158b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            lv_color_premult(color, opa, color_premult);
 80158ba:	f107 021c 	add.w	r2, r7, #28
 80158be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80158c2:	4619      	mov	r1, r3
 80158c4:	7938      	ldrb	r0, [r7, #4]
 80158c6:	f7ff fc9a 	bl	80151fe <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 80158ca:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80158ce:	43db      	mvns	r3, r3
 80158d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            for(y = 0; y < h; y++) {
 80158d4:	2300      	movs	r3, #0
 80158d6:	643b      	str	r3, [r7, #64]	; 0x40
 80158d8:	e032      	b.n	8015940 <fill_normal+0x104>
                for(x = 0; x < w; x++) {
 80158da:	2300      	movs	r3, #0
 80158dc:	647b      	str	r3, [r7, #68]	; 0x44
 80158de:	e023      	b.n	8015928 <fill_normal+0xec>
                    if(last_dest_color.full != dest_buf[x].full) {
 80158e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80158e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158e6:	68f9      	ldr	r1, [r7, #12]
 80158e8:	440b      	add	r3, r1
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d012      	beq.n	8015916 <fill_normal+0xda>
                        last_dest_color = dest_buf[x];
 80158f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158f2:	68fa      	ldr	r2, [r7, #12]
 80158f4:	4413      	add	r3, r2
 80158f6:	781b      	ldrb	r3, [r3, #0]
 80158f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        last_res_color = lv_color_mix_premult(color_premult, dest_buf[x], opa_inv);
 80158fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158fe:	68fa      	ldr	r2, [r7, #12]
 8015900:	4413      	add	r3, r2
 8015902:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8015906:	f107 001c 	add.w	r0, r7, #28
 801590a:	7819      	ldrb	r1, [r3, #0]
 801590c:	f7ff fc9b 	bl	8015246 <lv_color_mix_premult>
 8015910:	4603      	mov	r3, r0
 8015912:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    dest_buf[x] = last_res_color;
 8015916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015918:	68fa      	ldr	r2, [r7, #12]
 801591a:	4413      	add	r3, r2
 801591c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8015920:	701a      	strb	r2, [r3, #0]
                for(x = 0; x < w; x++) {
 8015922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015924:	3301      	adds	r3, #1
 8015926:	647b      	str	r3, [r7, #68]	; 0x44
 8015928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801592c:	429a      	cmp	r2, r3
 801592e:	dbd7      	blt.n	80158e0 <fill_normal+0xa4>
                dest_buf += dest_stride;
 8015930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015934:	68fa      	ldr	r2, [r7, #12]
 8015936:	4413      	add	r3, r2
 8015938:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 801593a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801593c:	3301      	adds	r3, #1
 801593e:	643b      	str	r3, [r7, #64]	; 0x40
 8015940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015944:	429a      	cmp	r2, r3
 8015946:	dbc8      	blt.n	80158da <fill_normal+0x9e>
}
 8015948:	e174      	b.n	8015c34 <fill_normal+0x3f8>
        if(opa >= LV_OPA_MAX) {
 801594a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801594e:	2bfc      	cmp	r3, #252	; 0xfc
 8015950:	f240 80f7 	bls.w	8015b42 <fill_normal+0x306>
            int32_t x_end4 = w - 4;
 8015954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015956:	3b04      	subs	r3, #4
 8015958:	633b      	str	r3, [r7, #48]	; 0x30
            for(y = 0; y < h; y++) {
 801595a:	2300      	movs	r3, #0
 801595c:	643b      	str	r3, [r7, #64]	; 0x40
 801595e:	e0ea      	b.n	8015b36 <fill_normal+0x2fa>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8015960:	2300      	movs	r3, #0
 8015962:	647b      	str	r3, [r7, #68]	; 0x44
 8015964:	e01a      	b.n	801599c <fill_normal+0x160>
                    FILL_NORMAL_MASK_PX(color)
 8015966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	2bff      	cmp	r3, #255	; 0xff
 801596c:	d103      	bne.n	8015976 <fill_normal+0x13a>
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	793a      	ldrb	r2, [r7, #4]
 8015972:	701a      	strb	r2, [r3, #0]
 8015974:	e009      	b.n	801598a <fill_normal+0x14e>
 8015976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015978:	781a      	ldrb	r2, [r3, #0]
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	7819      	ldrb	r1, [r3, #0]
 801597e:	7938      	ldrb	r0, [r7, #4]
 8015980:	f7ff fc27 	bl	80151d2 <lv_color_mix>
 8015984:	4602      	mov	r2, r0
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	701a      	strb	r2, [r3, #0]
 801598a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801598c:	3301      	adds	r3, #1
 801598e:	657b      	str	r3, [r7, #84]	; 0x54
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	3301      	adds	r3, #1
 8015994:	60fb      	str	r3, [r7, #12]
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8015996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015998:	3301      	adds	r3, #1
 801599a:	647b      	str	r3, [r7, #68]	; 0x44
 801599c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a0:	429a      	cmp	r2, r3
 80159a2:	f280 8090 	bge.w	8015ac6 <fill_normal+0x28a>
 80159a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159a8:	f003 0303 	and.w	r3, r3, #3
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d1da      	bne.n	8015966 <fill_normal+0x12a>
                for(; x <= x_end4; x += 4) {
 80159b0:	e089      	b.n	8015ac6 <fill_normal+0x28a>
                    uint32_t mask32 = *((uint32_t *)mask);
 80159b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if(mask32 == 0xFFFFFFFF) {
 80159b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80159be:	d115      	bne.n	80159ec <fill_normal+0x1b0>
                        dest_buf[0] = color;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	793a      	ldrb	r2, [r7, #4]
 80159c4:	701a      	strb	r2, [r3, #0]
                        dest_buf[1] = color;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	3301      	adds	r3, #1
 80159ca:	793a      	ldrb	r2, [r7, #4]
 80159cc:	701a      	strb	r2, [r3, #0]
                        dest_buf[2] = color;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	3302      	adds	r3, #2
 80159d2:	793a      	ldrb	r2, [r7, #4]
 80159d4:	701a      	strb	r2, [r3, #0]
                        dest_buf[3] = color;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	3303      	adds	r3, #3
 80159da:	793a      	ldrb	r2, [r7, #4]
 80159dc:	701a      	strb	r2, [r3, #0]
                        dest_buf += 4;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	3304      	adds	r3, #4
 80159e2:	60fb      	str	r3, [r7, #12]
                        mask += 4;
 80159e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159e6:	3304      	adds	r3, #4
 80159e8:	657b      	str	r3, [r7, #84]	; 0x54
 80159ea:	e069      	b.n	8015ac0 <fill_normal+0x284>
                    else if(mask32) {
 80159ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d060      	beq.n	8015ab4 <fill_normal+0x278>
                        FILL_NORMAL_MASK_PX(color)
 80159f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	2bff      	cmp	r3, #255	; 0xff
 80159f8:	d103      	bne.n	8015a02 <fill_normal+0x1c6>
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	793a      	ldrb	r2, [r7, #4]
 80159fe:	701a      	strb	r2, [r3, #0]
 8015a00:	e009      	b.n	8015a16 <fill_normal+0x1da>
 8015a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a04:	781a      	ldrb	r2, [r3, #0]
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	7819      	ldrb	r1, [r3, #0]
 8015a0a:	7938      	ldrb	r0, [r7, #4]
 8015a0c:	f7ff fbe1 	bl	80151d2 <lv_color_mix>
 8015a10:	4602      	mov	r2, r0
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	701a      	strb	r2, [r3, #0]
 8015a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a18:	3301      	adds	r3, #1
 8015a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8015a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a24:	781b      	ldrb	r3, [r3, #0]
 8015a26:	2bff      	cmp	r3, #255	; 0xff
 8015a28:	d103      	bne.n	8015a32 <fill_normal+0x1f6>
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	793a      	ldrb	r2, [r7, #4]
 8015a2e:	701a      	strb	r2, [r3, #0]
 8015a30:	e009      	b.n	8015a46 <fill_normal+0x20a>
 8015a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a34:	781a      	ldrb	r2, [r3, #0]
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	7819      	ldrb	r1, [r3, #0]
 8015a3a:	7938      	ldrb	r0, [r7, #4]
 8015a3c:	f7ff fbc9 	bl	80151d2 <lv_color_mix>
 8015a40:	4602      	mov	r2, r0
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	701a      	strb	r2, [r3, #0]
 8015a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a48:	3301      	adds	r3, #1
 8015a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	3301      	adds	r3, #1
 8015a50:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8015a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	2bff      	cmp	r3, #255	; 0xff
 8015a58:	d103      	bne.n	8015a62 <fill_normal+0x226>
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	793a      	ldrb	r2, [r7, #4]
 8015a5e:	701a      	strb	r2, [r3, #0]
 8015a60:	e009      	b.n	8015a76 <fill_normal+0x23a>
 8015a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a64:	781a      	ldrb	r2, [r3, #0]
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	7819      	ldrb	r1, [r3, #0]
 8015a6a:	7938      	ldrb	r0, [r7, #4]
 8015a6c:	f7ff fbb1 	bl	80151d2 <lv_color_mix>
 8015a70:	4602      	mov	r2, r0
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	701a      	strb	r2, [r3, #0]
 8015a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a78:	3301      	adds	r3, #1
 8015a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	3301      	adds	r3, #1
 8015a80:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8015a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	2bff      	cmp	r3, #255	; 0xff
 8015a88:	d103      	bne.n	8015a92 <fill_normal+0x256>
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	793a      	ldrb	r2, [r7, #4]
 8015a8e:	701a      	strb	r2, [r3, #0]
 8015a90:	e009      	b.n	8015aa6 <fill_normal+0x26a>
 8015a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a94:	781a      	ldrb	r2, [r3, #0]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	7819      	ldrb	r1, [r3, #0]
 8015a9a:	7938      	ldrb	r0, [r7, #4]
 8015a9c:	f7ff fb99 	bl	80151d2 <lv_color_mix>
 8015aa0:	4602      	mov	r2, r0
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	701a      	strb	r2, [r3, #0]
 8015aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	3301      	adds	r3, #1
 8015ab0:	60fb      	str	r3, [r7, #12]
 8015ab2:	e005      	b.n	8015ac0 <fill_normal+0x284>
                        mask += 4;
 8015ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ab6:	3304      	adds	r3, #4
 8015ab8:	657b      	str	r3, [r7, #84]	; 0x54
                        dest_buf += 4;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	3304      	adds	r3, #4
 8015abe:	60fb      	str	r3, [r7, #12]
                for(; x <= x_end4; x += 4) {
 8015ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ac2:	3304      	adds	r3, #4
 8015ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8015ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aca:	429a      	cmp	r2, r3
 8015acc:	f77f af71 	ble.w	80159b2 <fill_normal+0x176>
                for(; x < w ; x++) {
 8015ad0:	e01a      	b.n	8015b08 <fill_normal+0x2cc>
                    FILL_NORMAL_MASK_PX(color)
 8015ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	2bff      	cmp	r3, #255	; 0xff
 8015ad8:	d103      	bne.n	8015ae2 <fill_normal+0x2a6>
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	793a      	ldrb	r2, [r7, #4]
 8015ade:	701a      	strb	r2, [r3, #0]
 8015ae0:	e009      	b.n	8015af6 <fill_normal+0x2ba>
 8015ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ae4:	781a      	ldrb	r2, [r3, #0]
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	7819      	ldrb	r1, [r3, #0]
 8015aea:	7938      	ldrb	r0, [r7, #4]
 8015aec:	f7ff fb71 	bl	80151d2 <lv_color_mix>
 8015af0:	4602      	mov	r2, r0
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	701a      	strb	r2, [r3, #0]
 8015af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015af8:	3301      	adds	r3, #1
 8015afa:	657b      	str	r3, [r7, #84]	; 0x54
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	3301      	adds	r3, #1
 8015b00:	60fb      	str	r3, [r7, #12]
                for(; x < w ; x++) {
 8015b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b04:	3301      	adds	r3, #1
 8015b06:	647b      	str	r3, [r7, #68]	; 0x44
 8015b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	dbe0      	blt.n	8015ad2 <fill_normal+0x296>
                dest_buf += (dest_stride - w);
 8015b10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b16:	1ad3      	subs	r3, r2, r3
 8015b18:	461a      	mov	r2, r3
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	4413      	add	r3, r2
 8015b1e:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8015b20:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8015b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b26:	1ad3      	subs	r3, r2, r3
 8015b28:	461a      	mov	r2, r3
 8015b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b2c:	4413      	add	r3, r2
 8015b2e:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 8015b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b32:	3301      	adds	r3, #1
 8015b34:	643b      	str	r3, [r7, #64]	; 0x40
 8015b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	f6ff af10 	blt.w	8015960 <fill_normal+0x124>
}
 8015b40:	e078      	b.n	8015c34 <fill_normal+0x3f8>
            lv_opa_t last_mask = LV_OPA_TRANSP;
 8015b42:	2300      	movs	r3, #0
 8015b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            last_dest_color.full = dest_buf[0].full;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	763b      	strb	r3, [r7, #24]
            last_res_color.full = dest_buf[0].full;
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	753b      	strb	r3, [r7, #20]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8015b54:	2300      	movs	r3, #0
 8015b56:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            for(y = 0; y < h; y++) {
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8015b5e:	e065      	b.n	8015c2c <fill_normal+0x3f0>
                for(x = 0; x < w; x++) {
 8015b60:	2300      	movs	r3, #0
 8015b62:	647b      	str	r3, [r7, #68]	; 0x44
 8015b64:	e04e      	b.n	8015c04 <fill_normal+0x3c8>
                    if(*mask) {
 8015b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d044      	beq.n	8015bf8 <fill_normal+0x3bc>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8015b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d011      	beq.n	8015b9e <fill_normal+0x362>
 8015b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	2bff      	cmp	r3, #255	; 0xff
 8015b80:	d009      	beq.n	8015b96 <fill_normal+0x35a>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 8015b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	461a      	mov	r2, r3
 8015b88:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8015b8c:	fb02 f303 	mul.w	r3, r2, r3
 8015b90:	0a1b      	lsrs	r3, r3, #8
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8015b92:	b2db      	uxtb	r3, r3
 8015b94:	e001      	b.n	8015b9a <fill_normal+0x35e>
 8015b96:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8015b9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 8015b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	d106      	bne.n	8015bb8 <fill_normal+0x37c>
 8015baa:	7e3a      	ldrb	r2, [r7, #24]
 8015bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bae:	68f9      	ldr	r1, [r7, #12]
 8015bb0:	440b      	add	r3, r1
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d01a      	beq.n	8015bee <fill_normal+0x3b2>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 8015bb8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8015bbc:	2bff      	cmp	r3, #255	; 0xff
 8015bbe:	d102      	bne.n	8015bc6 <fill_normal+0x38a>
 8015bc0:	793b      	ldrb	r3, [r7, #4]
 8015bc2:	753b      	strb	r3, [r7, #20]
 8015bc4:	e00a      	b.n	8015bdc <fill_normal+0x3a0>
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 8015bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bc8:	68fa      	ldr	r2, [r7, #12]
 8015bca:	4413      	add	r3, r2
 8015bcc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8015bd0:	7819      	ldrb	r1, [r3, #0]
 8015bd2:	7938      	ldrb	r0, [r7, #4]
 8015bd4:	f7ff fafd 	bl	80151d2 <lv_color_mix>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	753b      	strb	r3, [r7, #20]
                            last_mask = *mask;
 8015bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bde:	781b      	ldrb	r3, [r3, #0]
 8015be0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                            last_dest_color.full = dest_buf[x].full;
 8015be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015be6:	68fa      	ldr	r2, [r7, #12]
 8015be8:	4413      	add	r3, r2
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	763b      	strb	r3, [r7, #24]
                        dest_buf[x] = last_res_color;
 8015bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bf0:	68fa      	ldr	r2, [r7, #12]
 8015bf2:	4413      	add	r3, r2
 8015bf4:	7d3a      	ldrb	r2, [r7, #20]
 8015bf6:	701a      	strb	r2, [r3, #0]
                    mask++;
 8015bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	657b      	str	r3, [r7, #84]	; 0x54
                for(x = 0; x < w; x++) {
 8015bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c00:	3301      	adds	r3, #1
 8015c02:	647b      	str	r3, [r7, #68]	; 0x44
 8015c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	dbac      	blt.n	8015b66 <fill_normal+0x32a>
                dest_buf += dest_stride;
 8015c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c10:	68fa      	ldr	r2, [r7, #12]
 8015c12:	4413      	add	r3, r2
 8015c14:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8015c16:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8015c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c1c:	1ad3      	subs	r3, r2, r3
 8015c1e:	461a      	mov	r2, r3
 8015c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c22:	4413      	add	r3, r2
 8015c24:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 8015c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c28:	3301      	adds	r3, #1
 8015c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8015c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c30:	429a      	cmp	r2, r3
 8015c32:	db95      	blt.n	8015b60 <fill_normal+0x324>
}
 8015c34:	bf00      	nop
 8015c36:	3748      	adds	r7, #72	; 0x48
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <fill_blended>:

#if LV_DRAW_COMPLEX
static void fill_blended(lv_color_t * dest_buf, const lv_area_t * dest_area,
                         lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride,
                         lv_blend_mode_t blend_mode)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b08e      	sub	sp, #56	; 0x38
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	60f8      	str	r0, [r7, #12]
 8015c44:	60b9      	str	r1, [r7, #8]
 8015c46:	713b      	strb	r3, [r7, #4]
 8015c48:	4613      	mov	r3, r2
 8015c4a:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 8015c4c:	68b8      	ldr	r0, [r7, #8]
 8015c4e:	f7ff fb53 	bl	80152f8 <lv_area_get_width>
 8015c52:	4603      	mov	r3, r0
 8015c54:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 8015c56:	68b8      	ldr	r0, [r7, #8]
 8015c58:	f7ff fb65 	bl	8015326 <lv_area_get_height>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 8015c60:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8015c64:	2b03      	cmp	r3, #3
 8015c66:	d00d      	beq.n	8015c84 <fill_blended+0x48>
 8015c68:	2b03      	cmp	r3, #3
 8015c6a:	f300 80d6 	bgt.w	8015e1a <fill_blended+0x1de>
 8015c6e:	2b01      	cmp	r3, #1
 8015c70:	d002      	beq.n	8015c78 <fill_blended+0x3c>
 8015c72:	2b02      	cmp	r3, #2
 8015c74:	d003      	beq.n	8015c7e <fill_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 8015c76:	e0d0      	b.n	8015e1a <fill_blended+0x1de>
            blend_fp = color_blend_true_color_additive;
 8015c78:	4b6a      	ldr	r3, [pc, #424]	; (8015e24 <fill_blended+0x1e8>)
 8015c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8015c7c:	e005      	b.n	8015c8a <fill_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 8015c7e:	4b6a      	ldr	r3, [pc, #424]	; (8015e28 <fill_blended+0x1ec>)
 8015c80:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8015c82:	e002      	b.n	8015c8a <fill_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 8015c84:	4b69      	ldr	r3, [pc, #420]	; (8015e2c <fill_blended+0x1f0>)
 8015c86:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8015c88:	bf00      	nop
    }

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8015c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d141      	bne.n	8015d14 <fill_blended+0xd8>
        lv_color_t last_dest_color = dest_buf[0];
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	781b      	ldrb	r3, [r3, #0]
 8015c94:	773b      	strb	r3, [r7, #28]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 8015c96:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8015c9a:	68f9      	ldr	r1, [r7, #12]
 8015c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9e:	7809      	ldrb	r1, [r1, #0]
 8015ca0:	7938      	ldrb	r0, [r7, #4]
 8015ca2:	4798      	blx	r3
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	763b      	strb	r3, [r7, #24]
        for(y = 0; y < h; y++) {
 8015ca8:	2300      	movs	r3, #0
 8015caa:	633b      	str	r3, [r7, #48]	; 0x30
 8015cac:	e02d      	b.n	8015d0a <fill_blended+0xce>
            for(x = 0; x < w; x++) {
 8015cae:	2300      	movs	r3, #0
 8015cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8015cb2:	e01e      	b.n	8015cf2 <fill_blended+0xb6>
                if(last_dest_color.full != dest_buf[x].full) {
 8015cb4:	7f3a      	ldrb	r2, [r7, #28]
 8015cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cb8:	68f9      	ldr	r1, [r7, #12]
 8015cba:	440b      	add	r3, r1
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d00f      	beq.n	8015ce2 <fill_blended+0xa6>
                    last_dest_color = dest_buf[x];
 8015cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cc4:	68fa      	ldr	r2, [r7, #12]
 8015cc6:	4413      	add	r3, r2
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	773b      	strb	r3, [r7, #28]
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 8015ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cce:	68fa      	ldr	r2, [r7, #12]
 8015cd0:	18d1      	adds	r1, r2, r3
 8015cd2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8015cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cd8:	7809      	ldrb	r1, [r1, #0]
 8015cda:	7938      	ldrb	r0, [r7, #4]
 8015cdc:	4798      	blx	r3
 8015cde:	4603      	mov	r3, r0
 8015ce0:	763b      	strb	r3, [r7, #24]
                }
                dest_buf[x] = last_res_color;
 8015ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ce4:	68fa      	ldr	r2, [r7, #12]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	7e3a      	ldrb	r2, [r7, #24]
 8015cea:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 8015cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cee:	3301      	adds	r3, #1
 8015cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8015cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	dbdc      	blt.n	8015cb4 <fill_blended+0x78>
            }
            dest_buf += dest_stride;
 8015cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cfe:	68fa      	ldr	r2, [r7, #12]
 8015d00:	4413      	add	r3, r2
 8015d02:	60fb      	str	r3, [r7, #12]
        for(y = 0; y < h; y++) {
 8015d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d06:	3301      	adds	r3, #1
 8015d08:	633b      	str	r3, [r7, #48]	; 0x30
 8015d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d0c:	6a3b      	ldr	r3, [r7, #32]
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	dbcd      	blt.n	8015cae <fill_blended+0x72>
 8015d12:	e083      	b.n	8015e1c <fill_blended+0x1e0>
    /*Masked*/
    else {
        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8015d14:	2300      	movs	r3, #0
 8015d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        last_dest_color = dest_buf[0];
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	753b      	strb	r3, [r7, #20]
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 8015d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	2bfc      	cmp	r3, #252	; 0xfc
 8015d26:	d809      	bhi.n	8015d3c <fill_blended+0x100>
 8015d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	461a      	mov	r2, r3
 8015d2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015d32:	fb02 f303 	mul.w	r3, r2, r3
 8015d36:	0a1b      	lsrs	r3, r3, #8
 8015d38:	b2db      	uxtb	r3, r3
 8015d3a:	e001      	b.n	8015d40 <fill_blended+0x104>
 8015d3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015d40:	77fb      	strb	r3, [r7, #31]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8015d42:	7ffa      	ldrb	r2, [r7, #31]
 8015d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d46:	7d39      	ldrb	r1, [r7, #20]
 8015d48:	7938      	ldrb	r0, [r7, #4]
 8015d4a:	4798      	blx	r3
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	743b      	strb	r3, [r7, #16]

        for(y = 0; y < h; y++) {
 8015d50:	2300      	movs	r3, #0
 8015d52:	633b      	str	r3, [r7, #48]	; 0x30
 8015d54:	e05c      	b.n	8015e10 <fill_blended+0x1d4>
            for(x = 0; x < w; x++) {
 8015d56:	2300      	movs	r3, #0
 8015d58:	637b      	str	r3, [r7, #52]	; 0x34
 8015d5a:	e048      	b.n	8015dee <fill_blended+0x1b2>
                if(mask[x] == 0) continue;
 8015d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d60:	4413      	add	r3, r2
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d03e      	beq.n	8015de6 <fill_blended+0x1aa>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 8015d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d6c:	4413      	add	r3, r2
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d106      	bne.n	8015d86 <fill_blended+0x14a>
 8015d78:	7d3a      	ldrb	r2, [r7, #20]
 8015d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d7c:	68f9      	ldr	r1, [r7, #12]
 8015d7e:	440b      	add	r3, r1
 8015d80:	781b      	ldrb	r3, [r3, #0]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d029      	beq.n	8015dda <fill_blended+0x19e>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 8015d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d8a:	4413      	add	r3, r2
 8015d8c:	781b      	ldrb	r3, [r3, #0]
 8015d8e:	2bfc      	cmp	r3, #252	; 0xfc
 8015d90:	d80b      	bhi.n	8015daa <fill_blended+0x16e>
 8015d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d96:	4413      	add	r3, r2
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	461a      	mov	r2, r3
 8015d9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015da0:	fb02 f303 	mul.w	r3, r2, r3
 8015da4:	0a1b      	lsrs	r3, r3, #8
 8015da6:	b2db      	uxtb	r3, r3
 8015da8:	e001      	b.n	8015dae <fill_blended+0x172>
 8015daa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015dae:	77fb      	strb	r3, [r7, #31]

                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8015db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015db2:	68fa      	ldr	r2, [r7, #12]
 8015db4:	18d1      	adds	r1, r2, r3
 8015db6:	7ffa      	ldrb	r2, [r7, #31]
 8015db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dba:	7809      	ldrb	r1, [r1, #0]
 8015dbc:	7938      	ldrb	r0, [r7, #4]
 8015dbe:	4798      	blx	r3
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	743b      	strb	r3, [r7, #16]
                    last_mask = mask[x];
 8015dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015dc8:	4413      	add	r3, r2
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_dest_color.full = dest_buf[x].full;
 8015dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dd2:	68fa      	ldr	r2, [r7, #12]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 8015dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ddc:	68fa      	ldr	r2, [r7, #12]
 8015dde:	4413      	add	r3, r2
 8015de0:	7c3a      	ldrb	r2, [r7, #16]
 8015de2:	701a      	strb	r2, [r3, #0]
 8015de4:	e000      	b.n	8015de8 <fill_blended+0x1ac>
                if(mask[x] == 0) continue;
 8015de6:	bf00      	nop
            for(x = 0; x < w; x++) {
 8015de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dea:	3301      	adds	r3, #1
 8015dec:	637b      	str	r3, [r7, #52]	; 0x34
 8015dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df2:	429a      	cmp	r2, r3
 8015df4:	dbb2      	blt.n	8015d5c <fill_blended+0x120>
            }
            dest_buf += dest_stride;
 8015df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015dfa:	68fa      	ldr	r2, [r7, #12]
 8015dfc:	4413      	add	r3, r2
 8015dfe:	60fb      	str	r3, [r7, #12]
            mask += mask_stride;
 8015e00:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e06:	4413      	add	r3, r2
 8015e08:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 8015e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8015e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e12:	6a3b      	ldr	r3, [r7, #32]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	db9e      	blt.n	8015d56 <fill_blended+0x11a>
 8015e18:	e000      	b.n	8015e1c <fill_blended+0x1e0>
            return;
 8015e1a:	bf00      	nop
        }
    }
}
 8015e1c:	3738      	adds	r7, #56	; 0x38
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
 8015e22:	bf00      	nop
 8015e24:	08016609 	.word	0x08016609
 8015e28:	08016659 	.word	0x08016659
 8015e2c:	0801670f 	.word	0x0801670f

08015e30 <map_set_px>:
#endif

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8015e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e32:	b08f      	sub	sp, #60	; 0x3c
 8015e34:	af04      	add	r7, sp, #16
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	60b9      	str	r1, [r7, #8]
 8015e3a:	603b      	str	r3, [r7, #0]
 8015e3c:	4613      	mov	r3, r2
 8015e3e:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8015e40:	f7f6 fdae 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 8015e44:	61f8      	str	r0, [r7, #28]

    int32_t w = lv_area_get_width(dest_area);
 8015e46:	68b8      	ldr	r0, [r7, #8]
 8015e48:	f7ff fa56 	bl	80152f8 <lv_area_get_width>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	61bb      	str	r3, [r7, #24]
    int32_t h = lv_area_get_height(dest_area);
 8015e50:	68b8      	ldr	r0, [r7, #8]
 8015e52:	f7ff fa68 	bl	8015326 <lv_area_get_height>
 8015e56:	4603      	mov	r3, r0
 8015e58:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8015e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d140      	bne.n	8015ee2 <map_set_px+0xb2>
        for(y = 0; y < h; y++) {
 8015e60:	2300      	movs	r3, #0
 8015e62:	623b      	str	r3, [r7, #32]
 8015e64:	e038      	b.n	8015ed8 <map_set_px+0xa8>
            for(x = 0; x < w; x++) {
 8015e66:	2300      	movs	r3, #0
 8015e68:	627b      	str	r3, [r7, #36]	; 0x24
 8015e6a:	e029      	b.n	8015ec0 <map_set_px+0x90>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	69dc      	ldr	r4, [r3, #28]
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	6818      	ldr	r0, [r3, #0]
 8015e76:	68bb      	ldr	r3, [r7, #8]
 8015e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e7c:	b29a      	uxth	r2, r3
 8015e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	4413      	add	r3, r2
 8015e84:	b29b      	uxth	r3, r3
 8015e86:	b21e      	sxth	r6, r3
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015e8e:	b29a      	uxth	r2, r3
 8015e90:	6a3b      	ldr	r3, [r7, #32]
 8015e92:	b29b      	uxth	r3, r3
 8015e94:	4413      	add	r3, r2
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	b21b      	sxth	r3, r3
 8015e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e9c:	6839      	ldr	r1, [r7, #0]
 8015e9e:	440a      	add	r2, r1
 8015ea0:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8015ea4:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8015ea8:	9102      	str	r1, [sp, #8]
 8015eaa:	7812      	ldrb	r2, [r2, #0]
 8015eac:	f88d 2004 	strb.w	r2, [sp, #4]
 8015eb0:	9300      	str	r3, [sp, #0]
 8015eb2:	4633      	mov	r3, r6
 8015eb4:	462a      	mov	r2, r5
 8015eb6:	68f9      	ldr	r1, [r7, #12]
 8015eb8:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8015eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8015ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	dbd1      	blt.n	8015e6c <map_set_px+0x3c>
                                        opa);
            }
            src_buf += src_stride;
 8015ec8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8015ecc:	683a      	ldr	r2, [r7, #0]
 8015ece:	4413      	add	r3, r2
 8015ed0:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8015ed2:	6a3b      	ldr	r3, [r7, #32]
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	623b      	str	r3, [r7, #32]
 8015ed8:	6a3a      	ldr	r2, [r7, #32]
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	429a      	cmp	r2, r3
 8015ede:	dbc2      	blt.n	8015e66 <map_set_px+0x36>
            }
            mask += mask_stride;
            src_buf += src_stride;
        }
    }
}
 8015ee0:	e054      	b.n	8015f8c <map_set_px+0x15c>
        for(y = 0; y < h; y++) {
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	623b      	str	r3, [r7, #32]
 8015ee6:	e04d      	b.n	8015f84 <map_set_px+0x154>
            for(x = 0; x < w; x++) {
 8015ee8:	2300      	movs	r3, #0
 8015eea:	627b      	str	r3, [r7, #36]	; 0x24
 8015eec:	e039      	b.n	8015f62 <map_set_px+0x132>
                if(mask[x]) {
 8015eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ef2:	4413      	add	r3, r2
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d030      	beq.n	8015f5c <map_set_px+0x12c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8015efa:	69fb      	ldr	r3, [r7, #28]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	69dc      	ldr	r4, [r3, #28]
 8015f00:	69fb      	ldr	r3, [r7, #28]
 8015f02:	681e      	ldr	r6, [r3, #0]
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f0a:	b29a      	uxth	r2, r3
 8015f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	4413      	add	r3, r2
 8015f12:	b29b      	uxth	r3, r3
 8015f14:	fa0f fc83 	sxth.w	ip, r3
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f1e:	b29a      	uxth	r2, r3
 8015f20:	6a3b      	ldr	r3, [r7, #32]
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	4413      	add	r3, r2
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	b21b      	sxth	r3, r3
 8015f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f2c:	6839      	ldr	r1, [r7, #0]
 8015f2e:	440a      	add	r2, r1
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8015f30:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8015f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f36:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8015f38:	4428      	add	r0, r5
 8015f3a:	7800      	ldrb	r0, [r0, #0]
 8015f3c:	fb00 f101 	mul.w	r1, r0, r1
 8015f40:	0a09      	lsrs	r1, r1, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8015f42:	b2c9      	uxtb	r1, r1
 8015f44:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8015f48:	9102      	str	r1, [sp, #8]
 8015f4a:	7812      	ldrb	r2, [r2, #0]
 8015f4c:	f88d 2004 	strb.w	r2, [sp, #4]
 8015f50:	9300      	str	r3, [sp, #0]
 8015f52:	4663      	mov	r3, ip
 8015f54:	4602      	mov	r2, r0
 8015f56:	68f9      	ldr	r1, [r7, #12]
 8015f58:	4630      	mov	r0, r6
 8015f5a:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8015f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5e:	3301      	adds	r3, #1
 8015f60:	627b      	str	r3, [r7, #36]	; 0x24
 8015f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f64:	69bb      	ldr	r3, [r7, #24]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	dbc1      	blt.n	8015eee <map_set_px+0xbe>
            mask += mask_stride;
 8015f6a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015f70:	4413      	add	r3, r2
 8015f72:	64bb      	str	r3, [r7, #72]	; 0x48
            src_buf += src_stride;
 8015f74:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8015f78:	683a      	ldr	r2, [r7, #0]
 8015f7a:	4413      	add	r3, r2
 8015f7c:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8015f7e:	6a3b      	ldr	r3, [r7, #32]
 8015f80:	3301      	adds	r3, #1
 8015f82:	623b      	str	r3, [r7, #32]
 8015f84:	6a3a      	ldr	r2, [r7, #32]
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	dbad      	blt.n	8015ee8 <map_set_px+0xb8>
}
 8015f8c:	bf00      	nop
 8015f8e:	372c      	adds	r7, #44	; 0x2c
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015f94 <map_normal>:

LV_ATTRIBUTE_FAST_MEM static void map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8015f94:	b5b0      	push	{r4, r5, r7, lr}
 8015f96:	b08c      	sub	sp, #48	; 0x30
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	60f8      	str	r0, [r7, #12]
 8015f9c:	60b9      	str	r1, [r7, #8]
 8015f9e:	603b      	str	r3, [r7, #0]
 8015fa0:	4613      	mov	r3, r2
 8015fa2:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 8015fa4:	68b8      	ldr	r0, [r7, #8]
 8015fa6:	f7ff f9a7 	bl	80152f8 <lv_area_get_width>
 8015faa:	4603      	mov	r3, r0
 8015fac:	61fb      	str	r3, [r7, #28]
    int32_t h = lv_area_get_height(dest_area);
 8015fae:	68b8      	ldr	r0, [r7, #8]
 8015fb0:	f7ff f9b9 	bl	8015326 <lv_area_get_height>
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	61bb      	str	r3, [r7, #24]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8015fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d14e      	bne.n	801605c <map_normal+0xc8>
        if(opa >= LV_OPA_MAX) {
 8015fbe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015fc2:	2bfc      	cmp	r3, #252	; 0xfc
 8015fc4:	d91a      	bls.n	8015ffc <map_normal+0x68>
            for(y = 0; y < h; y++) {
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8015fca:	e012      	b.n	8015ff2 <map_normal+0x5e>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	461a      	mov	r2, r3
 8015fd0:	6839      	ldr	r1, [r7, #0]
 8015fd2:	68f8      	ldr	r0, [r7, #12]
 8015fd4:	f00a f970 	bl	80202b8 <lv_memcpy>
                dest_buf += dest_stride;
 8015fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015fdc:	68fa      	ldr	r2, [r7, #12]
 8015fde:	4413      	add	r3, r2
 8015fe0:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8015fe2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8015fe6:	683a      	ldr	r2, [r7, #0]
 8015fe8:	4413      	add	r3, r2
 8015fea:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8015fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fee:	3301      	adds	r3, #1
 8015ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ff4:	69bb      	ldr	r3, [r7, #24]
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	dbe8      	blt.n	8015fcc <map_normal+0x38>
                src_buf += src_stride;
                mask += mask_stride;
            }
        }
    }
}
 8015ffa:	e1ee      	b.n	80163da <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8016000:	e027      	b.n	8016052 <map_normal+0xbe>
                for(x = 0; x < w; x++) {
 8016002:	2300      	movs	r3, #0
 8016004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016006:	e013      	b.n	8016030 <map_normal+0x9c>
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 8016008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801600a:	683a      	ldr	r2, [r7, #0]
 801600c:	4413      	add	r3, r2
 801600e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016010:	68f9      	ldr	r1, [r7, #12]
 8016012:	4411      	add	r1, r2
 8016014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016016:	68f8      	ldr	r0, [r7, #12]
 8016018:	1884      	adds	r4, r0, r2
 801601a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801601e:	7809      	ldrb	r1, [r1, #0]
 8016020:	7818      	ldrb	r0, [r3, #0]
 8016022:	f7ff f8d6 	bl	80151d2 <lv_color_mix>
 8016026:	4603      	mov	r3, r0
 8016028:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 801602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801602c:	3301      	adds	r3, #1
 801602e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016032:	69fb      	ldr	r3, [r7, #28]
 8016034:	429a      	cmp	r2, r3
 8016036:	dbe7      	blt.n	8016008 <map_normal+0x74>
                dest_buf += dest_stride;
 8016038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801603c:	68fa      	ldr	r2, [r7, #12]
 801603e:	4413      	add	r3, r2
 8016040:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8016042:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8016046:	683a      	ldr	r2, [r7, #0]
 8016048:	4413      	add	r3, r2
 801604a:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 801604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604e:	3301      	adds	r3, #1
 8016050:	62bb      	str	r3, [r7, #40]	; 0x28
 8016052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016054:	69bb      	ldr	r3, [r7, #24]
 8016056:	429a      	cmp	r2, r3
 8016058:	dbd3      	blt.n	8016002 <map_normal+0x6e>
}
 801605a:	e1be      	b.n	80163da <map_normal+0x446>
        if(opa > LV_OPA_MAX) {
 801605c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016060:	2bfd      	cmp	r3, #253	; 0xfd
 8016062:	f240 816d 	bls.w	8016340 <map_normal+0x3ac>
            int32_t x_end4 = w - 4;
 8016066:	69fb      	ldr	r3, [r7, #28]
 8016068:	3b04      	subs	r3, #4
 801606a:	613b      	str	r3, [r7, #16]
            for(y = 0; y < h; y++) {
 801606c:	2300      	movs	r3, #0
 801606e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016070:	e160      	b.n	8016334 <map_normal+0x3a0>
                const lv_opa_t * mask_tmp_x = mask;
 8016072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016074:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8016076:	2300      	movs	r3, #0
 8016078:	62fb      	str	r3, [r7, #44]	; 0x2c
 801607a:	e028      	b.n	80160ce <map_normal+0x13a>
                    MAP_NORMAL_MASK_PX(x)
 801607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d01e      	beq.n	80160c2 <map_normal+0x12e>
 8016084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	2bff      	cmp	r3, #255	; 0xff
 801608a:	d108      	bne.n	801609e <map_normal+0x10a>
 801608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801608e:	683a      	ldr	r2, [r7, #0]
 8016090:	441a      	add	r2, r3
 8016092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016094:	68f9      	ldr	r1, [r7, #12]
 8016096:	440b      	add	r3, r1
 8016098:	7812      	ldrb	r2, [r2, #0]
 801609a:	701a      	strb	r2, [r3, #0]
 801609c:	e011      	b.n	80160c2 <map_normal+0x12e>
 801609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a0:	683a      	ldr	r2, [r7, #0]
 80160a2:	4413      	add	r3, r2
 80160a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160a6:	68f9      	ldr	r1, [r7, #12]
 80160a8:	4411      	add	r1, r2
 80160aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160ac:	7815      	ldrb	r5, [r2, #0]
 80160ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	1884      	adds	r4, r0, r2
 80160b4:	462a      	mov	r2, r5
 80160b6:	7809      	ldrb	r1, [r1, #0]
 80160b8:	7818      	ldrb	r0, [r3, #0]
 80160ba:	f7ff f88a 	bl	80151d2 <lv_color_mix>
 80160be:	4603      	mov	r3, r0
 80160c0:	7023      	strb	r3, [r4, #0]
 80160c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c4:	3301      	adds	r3, #1
 80160c6:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80160c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ca:	3301      	adds	r3, #1
 80160cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160d0:	69fb      	ldr	r3, [r7, #28]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	da04      	bge.n	80160e0 <map_normal+0x14c>
 80160d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160d8:	f003 0303 	and.w	r3, r3, #3
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d1cd      	bne.n	801607c <map_normal+0xe8>
                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
 80160e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e2:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 80160e4:	e0df      	b.n	80162a6 <map_normal+0x312>
                    if(*mask32) {
 80160e6:	6a3b      	ldr	r3, [r7, #32]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	f000 80d5 	beq.w	801629a <map_normal+0x306>
                        if((*mask32) == 0xFFFFFFFF) {
 80160f0:	6a3b      	ldr	r3, [r7, #32]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80160f8:	d126      	bne.n	8016148 <map_normal+0x1b4>
                            dest_buf[x] = src_buf[x];
 80160fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160fc:	683a      	ldr	r2, [r7, #0]
 80160fe:	441a      	add	r2, r3
 8016100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016102:	68f9      	ldr	r1, [r7, #12]
 8016104:	440b      	add	r3, r1
 8016106:	7812      	ldrb	r2, [r2, #0]
 8016108:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 801610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610c:	3301      	adds	r3, #1
 801610e:	683a      	ldr	r2, [r7, #0]
 8016110:	441a      	add	r2, r3
 8016112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016114:	3301      	adds	r3, #1
 8016116:	68f9      	ldr	r1, [r7, #12]
 8016118:	440b      	add	r3, r1
 801611a:	7812      	ldrb	r2, [r2, #0]
 801611c:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 2] = src_buf[x + 2];
 801611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016120:	3302      	adds	r3, #2
 8016122:	683a      	ldr	r2, [r7, #0]
 8016124:	441a      	add	r2, r3
 8016126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016128:	3302      	adds	r3, #2
 801612a:	68f9      	ldr	r1, [r7, #12]
 801612c:	440b      	add	r3, r1
 801612e:	7812      	ldrb	r2, [r2, #0]
 8016130:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 3] = src_buf[x + 3];
 8016132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016134:	3303      	adds	r3, #3
 8016136:	683a      	ldr	r2, [r7, #0]
 8016138:	441a      	add	r2, r3
 801613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801613c:	3303      	adds	r3, #3
 801613e:	68f9      	ldr	r1, [r7, #12]
 8016140:	440b      	add	r3, r1
 8016142:	7812      	ldrb	r2, [r2, #0]
 8016144:	701a      	strb	r2, [r3, #0]
 8016146:	e0a8      	b.n	801629a <map_normal+0x306>
                            mask_tmp_x = (const lv_opa_t *)mask32;
 8016148:	6a3b      	ldr	r3, [r7, #32]
 801614a:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x)
 801614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614e:	781b      	ldrb	r3, [r3, #0]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d01e      	beq.n	8016192 <map_normal+0x1fe>
 8016154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	2bff      	cmp	r3, #255	; 0xff
 801615a:	d108      	bne.n	801616e <map_normal+0x1da>
 801615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801615e:	683a      	ldr	r2, [r7, #0]
 8016160:	441a      	add	r2, r3
 8016162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016164:	68f9      	ldr	r1, [r7, #12]
 8016166:	440b      	add	r3, r1
 8016168:	7812      	ldrb	r2, [r2, #0]
 801616a:	701a      	strb	r2, [r3, #0]
 801616c:	e011      	b.n	8016192 <map_normal+0x1fe>
 801616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016170:	683a      	ldr	r2, [r7, #0]
 8016172:	4413      	add	r3, r2
 8016174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016176:	68f9      	ldr	r1, [r7, #12]
 8016178:	4411      	add	r1, r2
 801617a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801617c:	7815      	ldrb	r5, [r2, #0]
 801617e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016180:	68f8      	ldr	r0, [r7, #12]
 8016182:	1884      	adds	r4, r0, r2
 8016184:	462a      	mov	r2, r5
 8016186:	7809      	ldrb	r1, [r1, #0]
 8016188:	7818      	ldrb	r0, [r3, #0]
 801618a:	f7ff f822 	bl	80151d2 <lv_color_mix>
 801618e:	4603      	mov	r3, r0
 8016190:	7023      	strb	r3, [r4, #0]
 8016192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016194:	3301      	adds	r3, #1
 8016196:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 1)
 8016198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d023      	beq.n	80161e8 <map_normal+0x254>
 80161a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	2bff      	cmp	r3, #255	; 0xff
 80161a6:	d10a      	bne.n	80161be <map_normal+0x22a>
 80161a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161aa:	3301      	adds	r3, #1
 80161ac:	683a      	ldr	r2, [r7, #0]
 80161ae:	441a      	add	r2, r3
 80161b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b2:	3301      	adds	r3, #1
 80161b4:	68f9      	ldr	r1, [r7, #12]
 80161b6:	440b      	add	r3, r1
 80161b8:	7812      	ldrb	r2, [r2, #0]
 80161ba:	701a      	strb	r2, [r3, #0]
 80161bc:	e014      	b.n	80161e8 <map_normal+0x254>
 80161be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c0:	3301      	adds	r3, #1
 80161c2:	683a      	ldr	r2, [r7, #0]
 80161c4:	4413      	add	r3, r2
 80161c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161c8:	3201      	adds	r2, #1
 80161ca:	68f9      	ldr	r1, [r7, #12]
 80161cc:	4411      	add	r1, r2
 80161ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161d0:	7815      	ldrb	r5, [r2, #0]
 80161d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161d4:	3201      	adds	r2, #1
 80161d6:	68f8      	ldr	r0, [r7, #12]
 80161d8:	1884      	adds	r4, r0, r2
 80161da:	462a      	mov	r2, r5
 80161dc:	7809      	ldrb	r1, [r1, #0]
 80161de:	7818      	ldrb	r0, [r3, #0]
 80161e0:	f7fe fff7 	bl	80151d2 <lv_color_mix>
 80161e4:	4603      	mov	r3, r0
 80161e6:	7023      	strb	r3, [r4, #0]
 80161e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ea:	3301      	adds	r3, #1
 80161ec:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 2)
 80161ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f0:	781b      	ldrb	r3, [r3, #0]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d023      	beq.n	801623e <map_normal+0x2aa>
 80161f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f8:	781b      	ldrb	r3, [r3, #0]
 80161fa:	2bff      	cmp	r3, #255	; 0xff
 80161fc:	d10a      	bne.n	8016214 <map_normal+0x280>
 80161fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016200:	3302      	adds	r3, #2
 8016202:	683a      	ldr	r2, [r7, #0]
 8016204:	441a      	add	r2, r3
 8016206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016208:	3302      	adds	r3, #2
 801620a:	68f9      	ldr	r1, [r7, #12]
 801620c:	440b      	add	r3, r1
 801620e:	7812      	ldrb	r2, [r2, #0]
 8016210:	701a      	strb	r2, [r3, #0]
 8016212:	e014      	b.n	801623e <map_normal+0x2aa>
 8016214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016216:	3302      	adds	r3, #2
 8016218:	683a      	ldr	r2, [r7, #0]
 801621a:	4413      	add	r3, r2
 801621c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801621e:	3202      	adds	r2, #2
 8016220:	68f9      	ldr	r1, [r7, #12]
 8016222:	4411      	add	r1, r2
 8016224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016226:	7815      	ldrb	r5, [r2, #0]
 8016228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801622a:	3202      	adds	r2, #2
 801622c:	68f8      	ldr	r0, [r7, #12]
 801622e:	1884      	adds	r4, r0, r2
 8016230:	462a      	mov	r2, r5
 8016232:	7809      	ldrb	r1, [r1, #0]
 8016234:	7818      	ldrb	r0, [r3, #0]
 8016236:	f7fe ffcc 	bl	80151d2 <lv_color_mix>
 801623a:	4603      	mov	r3, r0
 801623c:	7023      	strb	r3, [r4, #0]
 801623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016240:	3301      	adds	r3, #1
 8016242:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 3)
 8016244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d023      	beq.n	8016294 <map_normal+0x300>
 801624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	2bff      	cmp	r3, #255	; 0xff
 8016252:	d10a      	bne.n	801626a <map_normal+0x2d6>
 8016254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016256:	3303      	adds	r3, #3
 8016258:	683a      	ldr	r2, [r7, #0]
 801625a:	441a      	add	r2, r3
 801625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625e:	3303      	adds	r3, #3
 8016260:	68f9      	ldr	r1, [r7, #12]
 8016262:	440b      	add	r3, r1
 8016264:	7812      	ldrb	r2, [r2, #0]
 8016266:	701a      	strb	r2, [r3, #0]
 8016268:	e014      	b.n	8016294 <map_normal+0x300>
 801626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626c:	3303      	adds	r3, #3
 801626e:	683a      	ldr	r2, [r7, #0]
 8016270:	4413      	add	r3, r2
 8016272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016274:	3203      	adds	r2, #3
 8016276:	68f9      	ldr	r1, [r7, #12]
 8016278:	4411      	add	r1, r2
 801627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801627c:	7815      	ldrb	r5, [r2, #0]
 801627e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016280:	3203      	adds	r2, #3
 8016282:	68f8      	ldr	r0, [r7, #12]
 8016284:	1884      	adds	r4, r0, r2
 8016286:	462a      	mov	r2, r5
 8016288:	7809      	ldrb	r1, [r1, #0]
 801628a:	7818      	ldrb	r0, [r3, #0]
 801628c:	f7fe ffa1 	bl	80151d2 <lv_color_mix>
 8016290:	4603      	mov	r3, r0
 8016292:	7023      	strb	r3, [r4, #0]
 8016294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016296:	3301      	adds	r3, #1
 8016298:	627b      	str	r3, [r7, #36]	; 0x24
                    mask32++;
 801629a:	6a3b      	ldr	r3, [r7, #32]
 801629c:	3304      	adds	r3, #4
 801629e:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 80162a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a2:	3304      	adds	r3, #4
 80162a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162a8:	693b      	ldr	r3, [r7, #16]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	f6ff af1b 	blt.w	80160e6 <map_normal+0x152>
                mask_tmp_x = (const lv_opa_t *)mask32;
 80162b0:	6a3b      	ldr	r3, [r7, #32]
 80162b2:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 80162b4:	e028      	b.n	8016308 <map_normal+0x374>
                    MAP_NORMAL_MASK_PX(x)
 80162b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d01e      	beq.n	80162fc <map_normal+0x368>
 80162be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c0:	781b      	ldrb	r3, [r3, #0]
 80162c2:	2bff      	cmp	r3, #255	; 0xff
 80162c4:	d108      	bne.n	80162d8 <map_normal+0x344>
 80162c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c8:	683a      	ldr	r2, [r7, #0]
 80162ca:	441a      	add	r2, r3
 80162cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ce:	68f9      	ldr	r1, [r7, #12]
 80162d0:	440b      	add	r3, r1
 80162d2:	7812      	ldrb	r2, [r2, #0]
 80162d4:	701a      	strb	r2, [r3, #0]
 80162d6:	e011      	b.n	80162fc <map_normal+0x368>
 80162d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162da:	683a      	ldr	r2, [r7, #0]
 80162dc:	4413      	add	r3, r2
 80162de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162e0:	68f9      	ldr	r1, [r7, #12]
 80162e2:	4411      	add	r1, r2
 80162e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162e6:	7815      	ldrb	r5, [r2, #0]
 80162e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	1884      	adds	r4, r0, r2
 80162ee:	462a      	mov	r2, r5
 80162f0:	7809      	ldrb	r1, [r1, #0]
 80162f2:	7818      	ldrb	r0, [r3, #0]
 80162f4:	f7fe ff6d 	bl	80151d2 <lv_color_mix>
 80162f8:	4603      	mov	r3, r0
 80162fa:	7023      	strb	r3, [r4, #0]
 80162fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fe:	3301      	adds	r3, #1
 8016300:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 8016302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016304:	3301      	adds	r3, #1
 8016306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	429a      	cmp	r2, r3
 801630e:	dbd2      	blt.n	80162b6 <map_normal+0x322>
                dest_buf += dest_stride;
 8016310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	4413      	add	r3, r2
 8016318:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 801631a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801631e:	683a      	ldr	r2, [r7, #0]
 8016320:	4413      	add	r3, r2
 8016322:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 8016324:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8016328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801632a:	4413      	add	r3, r2
 801632c:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 801632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016330:	3301      	adds	r3, #1
 8016332:	62bb      	str	r3, [r7, #40]	; 0x28
 8016334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	429a      	cmp	r2, r3
 801633a:	f6ff ae9a 	blt.w	8016072 <map_normal+0xde>
}
 801633e:	e04c      	b.n	80163da <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8016340:	2300      	movs	r3, #0
 8016342:	62bb      	str	r3, [r7, #40]	; 0x28
 8016344:	e045      	b.n	80163d2 <map_normal+0x43e>
                for(x = 0; x < w; x++) {
 8016346:	2300      	movs	r3, #0
 8016348:	62fb      	str	r3, [r7, #44]	; 0x2c
 801634a:	e02c      	b.n	80163a6 <map_normal+0x412>
                    if(mask[x]) {
 801634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016350:	4413      	add	r3, r2
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d023      	beq.n	80163a0 <map_normal+0x40c>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8016358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801635a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801635c:	4413      	add	r3, r2
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	2bfc      	cmp	r3, #252	; 0xfc
 8016362:	d80a      	bhi.n	801637a <map_normal+0x3e6>
 8016364:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801636a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801636c:	440a      	add	r2, r1
 801636e:	7812      	ldrb	r2, [r2, #0]
 8016370:	fb02 f303 	mul.w	r3, r2, r3
 8016374:	121b      	asrs	r3, r3, #8
 8016376:	b2db      	uxtb	r3, r3
 8016378:	e001      	b.n	801637e <map_normal+0x3ea>
 801637a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801637e:	75fb      	strb	r3, [r7, #23]
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 8016380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016382:	683a      	ldr	r2, [r7, #0]
 8016384:	4413      	add	r3, r2
 8016386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016388:	68f9      	ldr	r1, [r7, #12]
 801638a:	4411      	add	r1, r2
 801638c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801638e:	68f8      	ldr	r0, [r7, #12]
 8016390:	1884      	adds	r4, r0, r2
 8016392:	7dfa      	ldrb	r2, [r7, #23]
 8016394:	7809      	ldrb	r1, [r1, #0]
 8016396:	7818      	ldrb	r0, [r3, #0]
 8016398:	f7fe ff1b 	bl	80151d2 <lv_color_mix>
 801639c:	4603      	mov	r3, r0
 801639e:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 80163a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a2:	3301      	adds	r3, #1
 80163a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	429a      	cmp	r2, r3
 80163ac:	dbce      	blt.n	801634c <map_normal+0x3b8>
                dest_buf += dest_stride;
 80163ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80163b2:	68fa      	ldr	r2, [r7, #12]
 80163b4:	4413      	add	r3, r2
 80163b6:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 80163b8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80163bc:	683a      	ldr	r2, [r7, #0]
 80163be:	4413      	add	r3, r2
 80163c0:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 80163c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80163c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80163c8:	4413      	add	r3, r2
 80163ca:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 80163cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ce:	3301      	adds	r3, #1
 80163d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80163d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163d4:	69bb      	ldr	r3, [r7, #24]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	dbb5      	blt.n	8016346 <map_normal+0x3b2>
}
 80163da:	bf00      	nop
 80163dc:	3730      	adds	r7, #48	; 0x30
 80163de:	46bd      	mov	sp, r7
 80163e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080163e4 <map_blended>:

#if LV_DRAW_COMPLEX
static void map_blended(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                        const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa,
                        const lv_opa_t * mask, lv_coord_t mask_stride, lv_blend_mode_t blend_mode)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b08e      	sub	sp, #56	; 0x38
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	603b      	str	r3, [r7, #0]
 80163f0:	4613      	mov	r3, r2
 80163f2:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 80163f4:	68b8      	ldr	r0, [r7, #8]
 80163f6:	f7fe ff7f 	bl	80152f8 <lv_area_get_width>
 80163fa:	4603      	mov	r3, r0
 80163fc:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 80163fe:	68b8      	ldr	r0, [r7, #8]
 8016400:	f7fe ff91 	bl	8015326 <lv_area_get_height>
 8016404:	4603      	mov	r3, r0
 8016406:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 8016408:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801640c:	2b03      	cmp	r3, #3
 801640e:	d00d      	beq.n	801642c <map_blended+0x48>
 8016410:	2b03      	cmp	r3, #3
 8016412:	f300 80ef 	bgt.w	80165f4 <map_blended+0x210>
 8016416:	2b01      	cmp	r3, #1
 8016418:	d002      	beq.n	8016420 <map_blended+0x3c>
 801641a:	2b02      	cmp	r3, #2
 801641c:	d003      	beq.n	8016426 <map_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 801641e:	e0e9      	b.n	80165f4 <map_blended+0x210>
            blend_fp = color_blend_true_color_additive;
 8016420:	4b76      	ldr	r3, [pc, #472]	; (80165fc <map_blended+0x218>)
 8016422:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8016424:	e005      	b.n	8016432 <map_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 8016426:	4b76      	ldr	r3, [pc, #472]	; (8016600 <map_blended+0x21c>)
 8016428:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801642a:	e002      	b.n	8016432 <map_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 801642c:	4b75      	ldr	r3, [pc, #468]	; (8016604 <map_blended+0x220>)
 801642e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8016430:	bf00      	nop
    }

    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8016432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016434:	2b00      	cmp	r3, #0
 8016436:	d151      	bne.n	80164dc <map_blended+0xf8>
        last_dest_color = dest_buf[0];
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	763b      	strb	r3, [r7, #24]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8016444:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801644a:	7f39      	ldrb	r1, [r7, #28]
 801644c:	7e38      	ldrb	r0, [r7, #24]
 801644e:	4798      	blx	r3
 8016450:	4603      	mov	r3, r0
 8016452:	753b      	strb	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 8016454:	2300      	movs	r3, #0
 8016456:	633b      	str	r3, [r7, #48]	; 0x30
 8016458:	e03b      	b.n	80164d2 <map_blended+0xee>
            for(x = 0; x < w; x++) {
 801645a:	2300      	movs	r3, #0
 801645c:	637b      	str	r3, [r7, #52]	; 0x34
 801645e:	e027      	b.n	80164b0 <map_blended+0xcc>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 8016460:	7e3a      	ldrb	r2, [r7, #24]
 8016462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016464:	6839      	ldr	r1, [r7, #0]
 8016466:	440b      	add	r3, r1
 8016468:	781b      	ldrb	r3, [r3, #0]
 801646a:	429a      	cmp	r2, r3
 801646c:	d106      	bne.n	801647c <map_blended+0x98>
 801646e:	7f3a      	ldrb	r2, [r7, #28]
 8016470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016472:	68f9      	ldr	r1, [r7, #12]
 8016474:	440b      	add	r3, r1
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	429a      	cmp	r2, r3
 801647a:	d011      	beq.n	80164a0 <map_blended+0xbc>
                    last_dest_color = dest_buf[x];
 801647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801647e:	68fa      	ldr	r2, [r7, #12]
 8016480:	4413      	add	r3, r2
 8016482:	781b      	ldrb	r3, [r3, #0]
 8016484:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 8016486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016488:	683a      	ldr	r2, [r7, #0]
 801648a:	4413      	add	r3, r2
 801648c:	781b      	ldrb	r3, [r3, #0]
 801648e:	763b      	strb	r3, [r7, #24]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8016490:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016496:	7f39      	ldrb	r1, [r7, #28]
 8016498:	7e38      	ldrb	r0, [r7, #24]
 801649a:	4798      	blx	r3
 801649c:	4603      	mov	r3, r0
 801649e:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 80164a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a2:	68fa      	ldr	r2, [r7, #12]
 80164a4:	4413      	add	r3, r2
 80164a6:	7d3a      	ldrb	r2, [r7, #20]
 80164a8:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 80164aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ac:	3301      	adds	r3, #1
 80164ae:	637b      	str	r3, [r7, #52]	; 0x34
 80164b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b4:	429a      	cmp	r2, r3
 80164b6:	dbd3      	blt.n	8016460 <map_blended+0x7c>
            }
            dest_buf += dest_stride;
 80164b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164bc:	68fa      	ldr	r2, [r7, #12]
 80164be:	4413      	add	r3, r2
 80164c0:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 80164c2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80164c6:	683a      	ldr	r2, [r7, #0]
 80164c8:	4413      	add	r3, r2
 80164ca:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 80164cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ce:	3301      	adds	r3, #1
 80164d0:	633b      	str	r3, [r7, #48]	; 0x30
 80164d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164d4:	6a3b      	ldr	r3, [r7, #32]
 80164d6:	429a      	cmp	r2, r3
 80164d8:	dbbf      	blt.n	801645a <map_blended+0x76>
 80164da:	e08c      	b.n	80165f6 <map_blended+0x212>
        }
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	763b      	strb	r3, [r7, #24]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 80164e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	2bfc      	cmp	r3, #252	; 0xfc
 80164ee:	d808      	bhi.n	8016502 <map_blended+0x11e>
 80164f0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80164f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80164f6:	7812      	ldrb	r2, [r2, #0]
 80164f8:	fb02 f303 	mul.w	r3, r2, r3
 80164fc:	121b      	asrs	r3, r3, #8
 80164fe:	b2db      	uxtb	r3, r3
 8016500:	e001      	b.n	8016506 <map_blended+0x122>
 8016502:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 801650a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016510:	7f39      	ldrb	r1, [r7, #28]
 8016512:	7e38      	ldrb	r0, [r7, #24]
 8016514:	4798      	blx	r3
 8016516:	4603      	mov	r3, r0
 8016518:	743b      	strb	r3, [r7, #16]
        for(y = 0; y < h; y++) {
 801651a:	2300      	movs	r3, #0
 801651c:	633b      	str	r3, [r7, #48]	; 0x30
 801651e:	e064      	b.n	80165ea <map_blended+0x206>
            for(x = 0; x < w; x++) {
 8016520:	2300      	movs	r3, #0
 8016522:	637b      	str	r3, [r7, #52]	; 0x34
 8016524:	e04b      	b.n	80165be <map_blended+0x1da>
                if(mask[x] == 0) continue;
 8016526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801652a:	4413      	add	r3, r2
 801652c:	781b      	ldrb	r3, [r3, #0]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d041      	beq.n	80165b6 <map_blended+0x1d2>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8016532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016536:	4413      	add	r3, r2
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2bfc      	cmp	r3, #252	; 0xfc
 801653c:	d80a      	bhi.n	8016554 <map_blended+0x170>
 801653e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016544:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016546:	440a      	add	r2, r1
 8016548:	7812      	ldrb	r2, [r2, #0]
 801654a:	fb02 f303 	mul.w	r3, r2, r3
 801654e:	121b      	asrs	r3, r3, #8
 8016550:	b2db      	uxtb	r3, r3
 8016552:	e001      	b.n	8016558 <map_blended+0x174>
 8016554:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016558:	77fb      	strb	r3, [r7, #31]
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 801655a:	7e3a      	ldrb	r2, [r7, #24]
 801655c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801655e:	6839      	ldr	r1, [r7, #0]
 8016560:	440b      	add	r3, r1
 8016562:	781b      	ldrb	r3, [r3, #0]
 8016564:	429a      	cmp	r2, r3
 8016566:	d10b      	bne.n	8016580 <map_blended+0x19c>
 8016568:	7f3a      	ldrb	r2, [r7, #28]
 801656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801656c:	68f9      	ldr	r1, [r7, #12]
 801656e:	440b      	add	r3, r1
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	429a      	cmp	r2, r3
 8016574:	d104      	bne.n	8016580 <map_blended+0x19c>
 8016576:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801657a:	7ffb      	ldrb	r3, [r7, #31]
 801657c:	429a      	cmp	r2, r3
 801657e:	d014      	beq.n	80165aa <map_blended+0x1c6>
                    last_dest_color = dest_buf[x];
 8016580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016582:	68fa      	ldr	r2, [r7, #12]
 8016584:	4413      	add	r3, r2
 8016586:	781b      	ldrb	r3, [r3, #0]
 8016588:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 801658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801658c:	683a      	ldr	r2, [r7, #0]
 801658e:	4413      	add	r3, r2
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	763b      	strb	r3, [r7, #24]
                    last_opa = opa_tmp;
 8016594:	7ffb      	ldrb	r3, [r7, #31]
 8016596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 801659a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a0:	7f39      	ldrb	r1, [r7, #28]
 80165a2:	7e38      	ldrb	r0, [r7, #24]
 80165a4:	4798      	blx	r3
 80165a6:	4603      	mov	r3, r0
 80165a8:	743b      	strb	r3, [r7, #16]
                }
                dest_buf[x] = last_res_color;
 80165aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ac:	68fa      	ldr	r2, [r7, #12]
 80165ae:	4413      	add	r3, r2
 80165b0:	7c3a      	ldrb	r2, [r7, #16]
 80165b2:	701a      	strb	r2, [r3, #0]
 80165b4:	e000      	b.n	80165b8 <map_blended+0x1d4>
                if(mask[x] == 0) continue;
 80165b6:	bf00      	nop
            for(x = 0; x < w; x++) {
 80165b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ba:	3301      	adds	r3, #1
 80165bc:	637b      	str	r3, [r7, #52]	; 0x34
 80165be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80165c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c2:	429a      	cmp	r2, r3
 80165c4:	dbaf      	blt.n	8016526 <map_blended+0x142>
            }
            dest_buf += dest_stride;
 80165c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80165ca:	68fa      	ldr	r2, [r7, #12]
 80165cc:	4413      	add	r3, r2
 80165ce:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 80165d0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80165d4:	683a      	ldr	r2, [r7, #0]
 80165d6:	4413      	add	r3, r2
 80165d8:	603b      	str	r3, [r7, #0]
            mask += mask_stride;
 80165da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80165de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80165e0:	4413      	add	r3, r2
 80165e2:	64bb      	str	r3, [r7, #72]	; 0x48
        for(y = 0; y < h; y++) {
 80165e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e6:	3301      	adds	r3, #1
 80165e8:	633b      	str	r3, [r7, #48]	; 0x30
 80165ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165ec:	6a3b      	ldr	r3, [r7, #32]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	db96      	blt.n	8016520 <map_blended+0x13c>
 80165f2:	e000      	b.n	80165f6 <map_blended+0x212>
            return;
 80165f4:	bf00      	nop
        }
    }
}
 80165f6:	3738      	adds	r7, #56	; 0x38
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	08016609 	.word	0x08016609
 8016600:	08016659 	.word	0x08016659
 8016604:	0801670f 	.word	0x0801670f

08016608 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b084      	sub	sp, #16
 801660c:	af00      	add	r7, sp, #0
 801660e:	7138      	strb	r0, [r7, #4]
 8016610:	7039      	strb	r1, [r7, #0]
 8016612:	4613      	mov	r3, r2
 8016614:	70fb      	strb	r3, [r7, #3]

    if(opa <= LV_OPA_MIN) return bg;
 8016616:	78fb      	ldrb	r3, [r7, #3]
 8016618:	2b02      	cmp	r3, #2
 801661a:	d801      	bhi.n	8016620 <color_blend_true_color_additive+0x18>
 801661c:	783b      	ldrb	r3, [r7, #0]
 801661e:	e017      	b.n	8016650 <color_blend_true_color_additive+0x48>

    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
 8016620:	783b      	ldrb	r3, [r7, #0]
 8016622:	461a      	mov	r2, r3
 8016624:	793b      	ldrb	r3, [r7, #4]
 8016626:	4413      	add	r3, r2
 8016628:	60fb      	str	r3, [r7, #12]
    fg.full = LV_MIN(tmp, 1);
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	2b00      	cmp	r3, #0
 801662e:	bf14      	ite	ne
 8016630:	2301      	movne	r3, #1
 8016632:	2300      	moveq	r3, #0
 8016634:	b2db      	uxtb	r3, r3
 8016636:	713b      	strb	r3, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 8016638:	78fb      	ldrb	r3, [r7, #3]
 801663a:	2bff      	cmp	r3, #255	; 0xff
 801663c:	d101      	bne.n	8016642 <color_blend_true_color_additive+0x3a>
 801663e:	793b      	ldrb	r3, [r7, #4]
 8016640:	e006      	b.n	8016650 <color_blend_true_color_additive+0x48>

    return lv_color_mix(fg, bg, opa);
 8016642:	78fb      	ldrb	r3, [r7, #3]
 8016644:	461a      	mov	r2, r3
 8016646:	7839      	ldrb	r1, [r7, #0]
 8016648:	7938      	ldrb	r0, [r7, #4]
 801664a:	f7fe fdc2 	bl	80151d2 <lv_color_mix>
 801664e:	4603      	mov	r3, r0
}
 8016650:	4618      	mov	r0, r3
 8016652:	3710      	adds	r7, #16
 8016654:	46bd      	mov	sp, r7
 8016656:	bd80      	pop	{r7, pc}

08016658 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b084      	sub	sp, #16
 801665c:	af00      	add	r7, sp, #0
 801665e:	7138      	strb	r0, [r7, #4]
 8016660:	7039      	strb	r1, [r7, #0]
 8016662:	4613      	mov	r3, r2
 8016664:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 8016666:	78fb      	ldrb	r3, [r7, #3]
 8016668:	2b02      	cmp	r3, #2
 801666a:	d801      	bhi.n	8016670 <color_blend_true_color_subtractive+0x18>
 801666c:	783b      	ldrb	r3, [r7, #0]
 801666e:	e04a      	b.n	8016706 <color_blend_true_color_subtractive+0xae>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 8016670:	783b      	ldrb	r3, [r7, #0]
 8016672:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016676:	b2db      	uxtb	r3, r3
 8016678:	461a      	mov	r2, r3
 801667a:	793b      	ldrb	r3, [r7, #4]
 801667c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016680:	b2db      	uxtb	r3, r3
 8016682:	1ad3      	subs	r3, r2, r3
 8016684:	60fb      	str	r3, [r7, #12]
    fg.ch.red = LV_MAX(tmp, 0);
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801668c:	f003 0301 	and.w	r3, r3, #1
 8016690:	b2da      	uxtb	r2, r3
 8016692:	793b      	ldrb	r3, [r7, #4]
 8016694:	f362 0300 	bfi	r3, r2, #0, #1
 8016698:	713b      	strb	r3, [r7, #4]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 801669a:	783b      	ldrb	r3, [r7, #0]
 801669c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80166a0:	b2db      	uxtb	r3, r3
 80166a2:	461a      	mov	r2, r3
 80166a4:	793b      	ldrb	r3, [r7, #4]
 80166a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80166aa:	b2db      	uxtb	r3, r3
 80166ac:	1ad3      	subs	r3, r2, r3
 80166ae:	60fb      	str	r3, [r7, #12]
    fg.ch.green = LV_MAX(tmp, 0);
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80166b6:	f003 0301 	and.w	r3, r3, #1
 80166ba:	b2da      	uxtb	r2, r3
 80166bc:	793b      	ldrb	r3, [r7, #4]
 80166be:	f362 0300 	bfi	r3, r2, #0, #1
 80166c2:	713b      	strb	r3, [r7, #4]
    tmp = LV_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 80166c4:	783b      	ldrb	r3, [r7, #0]
 80166c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80166ca:	b2db      	uxtb	r3, r3
 80166cc:	461a      	mov	r2, r3
 80166ce:	793b      	ldrb	r3, [r7, #4]
 80166d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	1ad3      	subs	r3, r2, r3
 80166d8:	60fb      	str	r3, [r7, #12]
    fg.ch.blue = LV_MAX(tmp, 0);
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80166e0:	f003 0301 	and.w	r3, r3, #1
 80166e4:	b2da      	uxtb	r2, r3
 80166e6:	793b      	ldrb	r3, [r7, #4]
 80166e8:	f362 0300 	bfi	r3, r2, #0, #1
 80166ec:	713b      	strb	r3, [r7, #4]

    if(opa == LV_OPA_COVER) return fg;
 80166ee:	78fb      	ldrb	r3, [r7, #3]
 80166f0:	2bff      	cmp	r3, #255	; 0xff
 80166f2:	d101      	bne.n	80166f8 <color_blend_true_color_subtractive+0xa0>
 80166f4:	793b      	ldrb	r3, [r7, #4]
 80166f6:	e006      	b.n	8016706 <color_blend_true_color_subtractive+0xae>

    return lv_color_mix(fg, bg, opa);
 80166f8:	78fb      	ldrb	r3, [r7, #3]
 80166fa:	461a      	mov	r2, r3
 80166fc:	7839      	ldrb	r1, [r7, #0]
 80166fe:	7938      	ldrb	r0, [r7, #4]
 8016700:	f7fe fd67 	bl	80151d2 <lv_color_mix>
 8016704:	4603      	mov	r3, r0
}
 8016706:	4618      	mov	r0, r3
 8016708:	3710      	adds	r7, #16
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}

0801670e <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 801670e:	b580      	push	{r7, lr}
 8016710:	b082      	sub	sp, #8
 8016712:	af00      	add	r7, sp, #0
 8016714:	7138      	strb	r0, [r7, #4]
 8016716:	7039      	strb	r1, [r7, #0]
 8016718:	4613      	mov	r3, r2
 801671a:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 801671c:	78fb      	ldrb	r3, [r7, #3]
 801671e:	2b02      	cmp	r3, #2
 8016720:	d801      	bhi.n	8016726 <color_blend_true_color_multiply+0x18>
 8016722:	783b      	ldrb	r3, [r7, #0]
 8016724:	e00b      	b.n	801673e <color_blend_true_color_multiply+0x30>
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 8016726:	78fb      	ldrb	r3, [r7, #3]
 8016728:	2bff      	cmp	r3, #255	; 0xff
 801672a:	d101      	bne.n	8016730 <color_blend_true_color_multiply+0x22>
 801672c:	793b      	ldrb	r3, [r7, #4]
 801672e:	e006      	b.n	801673e <color_blend_true_color_multiply+0x30>

    return lv_color_mix(fg, bg, opa);
 8016730:	78fb      	ldrb	r3, [r7, #3]
 8016732:	461a      	mov	r2, r3
 8016734:	7839      	ldrb	r1, [r7, #0]
 8016736:	7938      	ldrb	r0, [r7, #4]
 8016738:	f7fe fd4b 	bl	80151d2 <lv_color_mix>
 801673c:	4603      	mov	r3, r0
}
 801673e:	4618      	mov	r0, r3
 8016740:	3708      	adds	r7, #8
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <lv_color_to32>:
{
 8016746:	b480      	push	{r7}
 8016748:	b083      	sub	sp, #12
 801674a:	af00      	add	r7, sp, #0
 801674c:	7138      	strb	r0, [r7, #4]
    if(color.full == 0)
 801674e:	793b      	ldrb	r3, [r7, #4]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d102      	bne.n	801675a <lv_color_to32+0x14>
        return 0xFF000000;
 8016754:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8016758:	e001      	b.n	801675e <lv_color_to32+0x18>
        return 0xFFFFFFFF;
 801675a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801675e:	4618      	mov	r0, r3
 8016760:	370c      	adds	r7, #12
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr

0801676a <compute_key>:
    const void * ptr;
    const uint32_t value;
};

static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
{
 801676a:	b480      	push	{r7}
 801676c:	b085      	sub	sp, #20
 801676e:	af00      	add	r7, sp, #0
 8016770:	6078      	str	r0, [r7, #4]
 8016772:	460b      	mov	r3, r1
 8016774:	807b      	strh	r3, [r7, #2]
 8016776:	4613      	mov	r3, r2
 8016778:	803b      	strh	r3, [r7, #0]
    union void_cast v;
    v.ptr = g;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	60fb      	str	r3, [r7, #12]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 801677e:	68fa      	ldr	r2, [r7, #12]
 8016780:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016784:	4053      	eors	r3, r2
 8016786:	f9b7 2000 	ldrsh.w	r2, [r7]
 801678a:	1052      	asrs	r2, r2, #1
 801678c:	b212      	sxth	r2, r2
 801678e:	4053      	eors	r3, r2
}
 8016790:	4618      	mov	r0, r3
 8016792:	3714      	adds	r7, #20
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr

0801679c <get_cache_item_size>:

static size_t get_cache_item_size(lv_grad_t * c)
{
 801679c:	b480      	push	{r7}
 801679e:	b085      	sub	sp, #20
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80167aa:	3303      	adds	r3, #3
 80167ac:	f023 0303 	bic.w	r3, r3, #3
 80167b0:	3310      	adds	r3, #16
 80167b2:	60fb      	str	r3, [r7, #12]
    s += ALIGN(c->size * sizeof(lv_color32_t));
#if LV_DITHER_ERROR_DIFFUSION == 1
    s += ALIGN(c->w * sizeof(lv_scolor24_t));
#endif
#endif
    return s;
 80167b4:	68fb      	ldr	r3, [r7, #12]
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3714      	adds	r7, #20
 80167ba:	46bd      	mov	sp, r7
 80167bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c0:	4770      	bx	lr
	...

080167c4 <next_in_cache>:

static lv_grad_t * next_in_cache(lv_grad_t * item)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
    if(grad_cache_size == 0) return NULL;
 80167cc:	4b0f      	ldr	r3, [pc, #60]	; (801680c <next_in_cache+0x48>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d101      	bne.n	80167d8 <next_in_cache+0x14>
 80167d4:	2300      	movs	r3, #0
 80167d6:	e015      	b.n	8016804 <next_in_cache+0x40>

    if(item == NULL)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d102      	bne.n	80167e4 <next_in_cache+0x20>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 80167de:	4b0c      	ldr	r3, [pc, #48]	; (8016810 <next_in_cache+0x4c>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	e00f      	b.n	8016804 <next_in_cache+0x40>

    size_t s = get_cache_item_size(item);
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f7ff ffd9 	bl	801679c <get_cache_item_size>
 80167ea:	60f8      	str	r0, [r7, #12]
    /*Compute the size for this cache item*/
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 80167ec:	687a      	ldr	r2, [r7, #4]
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	441a      	add	r2, r3
 80167f2:	4b08      	ldr	r3, [pc, #32]	; (8016814 <next_in_cache+0x50>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	429a      	cmp	r2, r3
 80167f8:	d301      	bcc.n	80167fe <next_in_cache+0x3a>
 80167fa:	2300      	movs	r3, #0
 80167fc:	e002      	b.n	8016804 <next_in_cache+0x40>
    else return (lv_grad_t *)((uint8_t *)item + s);
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	4413      	add	r3, r2
}
 8016804:	4618      	mov	r0, r3
 8016806:	3710      	adds	r7, #16
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}
 801680c:	200006b4 	.word	0x200006b4
 8016810:	200009ec 	.word	0x200009ec
 8016814:	200006b8 	.word	0x200006b8

08016818 <iterate_cache>:

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b086      	sub	sp, #24
 801681c:	af00      	add	r7, sp, #0
 801681e:	60f8      	str	r0, [r7, #12]
 8016820:	60b9      	str	r1, [r7, #8]
 8016822:	607a      	str	r2, [r7, #4]
    lv_grad_t * first = next_in_cache(NULL);
 8016824:	2000      	movs	r0, #0
 8016826:	f7ff ffcd 	bl	80167c4 <next_in_cache>
 801682a:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 801682c:	e012      	b.n	8016854 <iterate_cache+0x3c>
        if((*func)(first, ctx) == LV_RES_OK) {
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	68b9      	ldr	r1, [r7, #8]
 8016832:	6978      	ldr	r0, [r7, #20]
 8016834:	4798      	blx	r3
 8016836:	4603      	mov	r3, r0
 8016838:	2b01      	cmp	r3, #1
 801683a:	d107      	bne.n	801684c <iterate_cache+0x34>
            if(out != NULL) *out = first;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d002      	beq.n	8016848 <iterate_cache+0x30>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	697a      	ldr	r2, [r7, #20]
 8016846:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 8016848:	2301      	movs	r3, #1
 801684a:	e00d      	b.n	8016868 <iterate_cache+0x50>
        }
        first = next_in_cache(first);
 801684c:	6978      	ldr	r0, [r7, #20]
 801684e:	f7ff ffb9 	bl	80167c4 <next_in_cache>
 8016852:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 8016854:	697b      	ldr	r3, [r7, #20]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d005      	beq.n	8016866 <iterate_cache+0x4e>
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	685b      	ldr	r3, [r3, #4]
 801685e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8016862:	2b00      	cmp	r3, #0
 8016864:	d1e3      	bne.n	801682e <iterate_cache+0x16>
    }
    return LV_RES_INV;
 8016866:	2300      	movs	r3, #0
}
 8016868:	4618      	mov	r0, r3
 801686a:	3718      	adds	r7, #24
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}

08016870 <find_oldest_item_life>:

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
 8016870:	b480      	push	{r7}
 8016872:	b085      	sub	sp, #20
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
 8016878:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	60fb      	str	r3, [r7, #12]
    if(c->life < *min_life) *min_life = c->life;
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8016886:	461a      	mov	r2, r3
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	429a      	cmp	r2, r3
 801688e:	d206      	bcs.n	801689e <find_oldest_item_life+0x2e>
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	685b      	ldr	r3, [r3, #4]
 8016894:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8016898:	461a      	mov	r2, r3
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	601a      	str	r2, [r3, #0]
    return LV_RES_INV;
 801689e:	2300      	movs	r3, #0
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3714      	adds	r7, #20
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr

080168ac <free_item>:

static void free_item(lv_grad_t * c)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b086      	sub	sp, #24
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
    size_t size = get_cache_item_size(c);
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f7ff ff71 	bl	801679c <get_cache_item_size>
 80168ba:	6178      	str	r0, [r7, #20]
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 80168bc:	4b1d      	ldr	r3, [pc, #116]	; (8016934 <free_item+0x88>)
 80168be:	681a      	ldr	r2, [r3, #0]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	1ad3      	subs	r3, r2, r3
 80168c4:	461a      	mov	r2, r3
 80168c6:	697b      	ldr	r3, [r7, #20]
 80168c8:	1ad3      	subs	r3, r2, r3
 80168ca:	613b      	str	r3, [r7, #16]
    grad_cache_end -= size;
 80168cc:	4b19      	ldr	r3, [pc, #100]	; (8016934 <free_item+0x88>)
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	425b      	negs	r3, r3
 80168d4:	4413      	add	r3, r2
 80168d6:	4a17      	ldr	r2, [pc, #92]	; (8016934 <free_item+0x88>)
 80168d8:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d024      	beq.n	801692a <free_item+0x7e>
        uint8_t * old = (uint8_t *)c;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	60fb      	str	r3, [r7, #12]
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 80168e4:	687a      	ldr	r2, [r7, #4]
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	4413      	add	r3, r2
 80168ea:	693a      	ldr	r2, [r7, #16]
 80168ec:	4619      	mov	r1, r3
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f009 fce2 	bl	80202b8 <lv_memcpy>
        /* Then need to fix all internal pointers too */
        while((uint8_t *)c != grad_cache_end) {
 80168f4:	e00d      	b.n	8016912 <free_item+0x66>
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	689a      	ldr	r2, [r3, #8]
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	425b      	negs	r3, r3
 80168fe:	441a      	add	r2, r3
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	609a      	str	r2, [r3, #8]
            c->hmap = (lv_color32_t *)(((uint8_t *)c->hmap) - size);
#if LV_DITHER_ERROR_DIFFUSION == 1
            c->error_acc = (lv_scolor24_t *)(((uint8_t *)c->error_acc) - size);
#endif
#endif
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f7ff ff49 	bl	801679c <get_cache_item_size>
 801690a:	4602      	mov	r2, r0
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	4413      	add	r3, r2
 8016910:	607b      	str	r3, [r7, #4]
        while((uint8_t *)c != grad_cache_end) {
 8016912:	4b08      	ldr	r3, [pc, #32]	; (8016934 <free_item+0x88>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	429a      	cmp	r2, r3
 801691a:	d1ec      	bne.n	80168f6 <free_item+0x4a>
        }
        lv_memset_00(old + next_items_size, size);
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	4413      	add	r3, r2
 8016922:	6979      	ldr	r1, [r7, #20]
 8016924:	4618      	mov	r0, r3
 8016926:	f009 ff6d 	bl	8020804 <lv_memset_00>
    }
}
 801692a:	bf00      	nop
 801692c:	3718      	adds	r7, #24
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	200006b8 	.word	0x200006b8

08016938 <kill_oldest_item>:

static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b084      	sub	sp, #16
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 8016942:	683b      	ldr	r3, [r7, #0]
 8016944:	60fb      	str	r3, [r7, #12]
    if(c->life == *min_life) {
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801694e:	461a      	mov	r2, r3
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	429a      	cmp	r2, r3
 8016956:	d104      	bne.n	8016962 <kill_oldest_item+0x2a>
        /*Found, let's kill it*/
        free_item(c);
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f7ff ffa7 	bl	80168ac <free_item>
        return LV_RES_OK;
 801695e:	2301      	movs	r3, #1
 8016960:	e000      	b.n	8016964 <kill_oldest_item+0x2c>
    }
    return LV_RES_INV;
 8016962:	2300      	movs	r3, #0
}
 8016964:	4618      	mov	r0, r3
 8016966:	3710      	adds	r7, #16
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}

0801696c <find_item>:

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
 801696c:	b480      	push	{r7}
 801696e:	b085      	sub	sp, #20
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	6039      	str	r1, [r7, #0]
    uint32_t * k = (uint32_t *)ctx;
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	60fb      	str	r3, [r7, #12]
    if(c->key == *k) return LV_RES_OK;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	429a      	cmp	r2, r3
 8016984:	d101      	bne.n	801698a <find_item+0x1e>
 8016986:	2301      	movs	r3, #1
 8016988:	e000      	b.n	801698c <find_item+0x20>
    return LV_RES_INV;
 801698a:	2300      	movs	r3, #0
}
 801698c:	4618      	mov	r0, r3
 801698e:	3714      	adds	r7, #20
 8016990:	46bd      	mov	sp, r7
 8016992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016996:	4770      	bx	lr

08016998 <allocate_item>:

static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b088      	sub	sp, #32
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
 80169a0:	460b      	mov	r3, r1
 80169a2:	807b      	strh	r3, [r7, #2]
 80169a4:	4613      	mov	r3, r2
 80169a6:	803b      	strh	r3, [r7, #0]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	795b      	ldrb	r3, [r3, #5]
 80169ac:	f003 0307 	and.w	r3, r3, #7
 80169b0:	b2db      	uxtb	r3, r3
 80169b2:	2b02      	cmp	r3, #2
 80169b4:	d102      	bne.n	80169bc <allocate_item+0x24>
 80169b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169ba:	e001      	b.n	80169c0 <allocate_item+0x28>
 80169bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80169c0:	82fb      	strh	r3, [r7, #22]
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 80169c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80169c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169ca:	4293      	cmp	r3, r2
 80169cc:	bfb8      	it	lt
 80169ce:	4613      	movlt	r3, r2
 80169d0:	82bb      	strh	r3, [r7, #20]
                                           no dithering is selected where it's used vertically */

    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 80169d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80169d6:	3303      	adds	r3, #3
 80169d8:	f023 0303 	bic.w	r3, r3, #3
 80169dc:	3310      	adds	r3, #16
 80169de:	613b      	str	r3, [r7, #16]
#if LV_DITHER_ERROR_DIFFUSION == 1
    req_size += ALIGN(w * sizeof(lv_scolor24_t));
#endif
#endif

    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 80169e0:	4b49      	ldr	r3, [pc, #292]	; (8016b08 <allocate_item+0x170>)
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	4b49      	ldr	r3, [pc, #292]	; (8016b0c <allocate_item+0x174>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	1ad3      	subs	r3, r2, r3
 80169ea:	61fb      	str	r3, [r7, #28]
    lv_grad_t * item = NULL;
 80169ec:	2300      	movs	r3, #0
 80169ee:	61bb      	str	r3, [r7, #24]
    if(req_size + act_size < grad_cache_size) {
 80169f0:	693a      	ldr	r2, [r7, #16]
 80169f2:	69fb      	ldr	r3, [r7, #28]
 80169f4:	441a      	add	r2, r3
 80169f6:	4b46      	ldr	r3, [pc, #280]	; (8016b10 <allocate_item+0x178>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d208      	bcs.n	8016a10 <allocate_item+0x78>
        item = (lv_grad_t *)grad_cache_end;
 80169fe:	4b42      	ldr	r3, [pc, #264]	; (8016b08 <allocate_item+0x170>)
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	61bb      	str	r3, [r7, #24]
        item->not_cached = 0;
 8016a04:	69ba      	ldr	r2, [r7, #24]
 8016a06:	79d3      	ldrb	r3, [r2, #7]
 8016a08:	f36f 13c7 	bfc	r3, #7, #1
 8016a0c:	71d3      	strb	r3, [r2, #7]
 8016a0e:	e03e      	b.n	8016a8e <allocate_item+0xf6>
    }
    else {
        /*Need to evict items from cache until we find enough space to allocate this one */
        if(req_size <= grad_cache_size) {
 8016a10:	4b3f      	ldr	r3, [pc, #252]	; (8016b10 <allocate_item+0x178>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	693a      	ldr	r2, [r7, #16]
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d827      	bhi.n	8016a6a <allocate_item+0xd2>
            while(act_size + req_size > grad_cache_size) {
 8016a1a:	e016      	b.n	8016a4a <allocate_item+0xb2>
                uint32_t oldest_life = UINT32_MAX;
 8016a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a20:	60bb      	str	r3, [r7, #8]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8016a22:	f107 0308 	add.w	r3, r7, #8
 8016a26:	2200      	movs	r2, #0
 8016a28:	4619      	mov	r1, r3
 8016a2a:	483a      	ldr	r0, [pc, #232]	; (8016b14 <allocate_item+0x17c>)
 8016a2c:	f7ff fef4 	bl	8016818 <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8016a30:	f107 0308 	add.w	r3, r7, #8
 8016a34:	2200      	movs	r2, #0
 8016a36:	4619      	mov	r1, r3
 8016a38:	4837      	ldr	r0, [pc, #220]	; (8016b18 <allocate_item+0x180>)
 8016a3a:	f7ff feed 	bl	8016818 <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8016a3e:	4b32      	ldr	r3, [pc, #200]	; (8016b08 <allocate_item+0x170>)
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	4b32      	ldr	r3, [pc, #200]	; (8016b0c <allocate_item+0x174>)
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	1ad3      	subs	r3, r2, r3
 8016a48:	61fb      	str	r3, [r7, #28]
            while(act_size + req_size > grad_cache_size) {
 8016a4a:	69fa      	ldr	r2, [r7, #28]
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	441a      	add	r2, r3
 8016a50:	4b2f      	ldr	r3, [pc, #188]	; (8016b10 <allocate_item+0x178>)
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	429a      	cmp	r2, r3
 8016a56:	d8e1      	bhi.n	8016a1c <allocate_item+0x84>
            }
            item = (lv_grad_t *)grad_cache_end;
 8016a58:	4b2b      	ldr	r3, [pc, #172]	; (8016b08 <allocate_item+0x170>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	61bb      	str	r3, [r7, #24]
            item->not_cached = 0;
 8016a5e:	69ba      	ldr	r2, [r7, #24]
 8016a60:	79d3      	ldrb	r3, [r2, #7]
 8016a62:	f36f 13c7 	bfc	r3, #7, #1
 8016a66:	71d3      	strb	r3, [r2, #7]
 8016a68:	e011      	b.n	8016a8e <allocate_item+0xf6>
        }
        else {
            /*The cache is too small. Allocate the item manually and free it later.*/
            item = lv_mem_alloc(req_size);
 8016a6a:	6938      	ldr	r0, [r7, #16]
 8016a6c:	f009 fa96 	bl	801ff9c <lv_mem_alloc>
 8016a70:	61b8      	str	r0, [r7, #24]
            LV_ASSERT_MALLOC(item);
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d100      	bne.n	8016a7a <allocate_item+0xe2>
 8016a78:	e7fe      	b.n	8016a78 <allocate_item+0xe0>
            if(item == NULL) return NULL;
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d101      	bne.n	8016a84 <allocate_item+0xec>
 8016a80:	2300      	movs	r3, #0
 8016a82:	e03c      	b.n	8016afe <allocate_item+0x166>
            item->not_cached = 1;
 8016a84:	69ba      	ldr	r2, [r7, #24]
 8016a86:	79d3      	ldrb	r3, [r2, #7]
 8016a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a8c:	71d3      	strb	r3, [r2, #7]
        }
    }

    item->key = compute_key(g, size, w);
 8016a8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016a92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016a96:	4619      	mov	r1, r3
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f7ff fe66 	bl	801676a <compute_key>
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	601a      	str	r2, [r3, #0]
    item->life = 1;
 8016aa4:	69ba      	ldr	r2, [r7, #24]
 8016aa6:	6853      	ldr	r3, [r2, #4]
 8016aa8:	2101      	movs	r1, #1
 8016aaa:	f361 031d 	bfi	r3, r1, #0, #30
 8016aae:	6053      	str	r3, [r2, #4]
    item->filled = 0;
 8016ab0:	69ba      	ldr	r2, [r7, #24]
 8016ab2:	79d3      	ldrb	r3, [r2, #7]
 8016ab4:	f36f 1386 	bfc	r3, #6, #1
 8016ab8:	71d3      	strb	r3, [r2, #7]
    item->alloc_size = map_size;
 8016aba:	69bb      	ldr	r3, [r7, #24]
 8016abc:	8aba      	ldrh	r2, [r7, #20]
 8016abe:	819a      	strh	r2, [r3, #12]
    item->size = size;
 8016ac0:	69bb      	ldr	r3, [r7, #24]
 8016ac2:	8afa      	ldrh	r2, [r7, #22]
 8016ac4:	81da      	strh	r2, [r3, #14]
    if(item->not_cached) {
 8016ac6:	69bb      	ldr	r3, [r7, #24]
 8016ac8:	79db      	ldrb	r3, [r3, #7]
 8016aca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016ace:	b2db      	uxtb	r3, r3
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d007      	beq.n	8016ae4 <allocate_item+0x14c>
        uint8_t * p = (uint8_t *)item;
 8016ad4:	69bb      	ldr	r3, [r7, #24]
 8016ad6:	60fb      	str	r3, [r7, #12]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	f103 0210 	add.w	r2, r3, #16
 8016ade:	69bb      	ldr	r3, [r7, #24]
 8016ae0:	609a      	str	r2, [r3, #8]
 8016ae2:	e00b      	b.n	8016afc <allocate_item+0x164>
        item->w = w;
#endif
#endif
    }
    else {
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8016ae4:	4b08      	ldr	r3, [pc, #32]	; (8016b08 <allocate_item+0x170>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	f103 0210 	add.w	r2, r3, #16
 8016aec:	69bb      	ldr	r3, [r7, #24]
 8016aee:	609a      	str	r2, [r3, #8]
        item->error_acc = (lv_scolor24_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_grad_color_t)) +
                                            ALIGN(map_size * sizeof(lv_color_t)));
        item->w = w;
#endif
#endif
        grad_cache_end += req_size;
 8016af0:	4b05      	ldr	r3, [pc, #20]	; (8016b08 <allocate_item+0x170>)
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	4413      	add	r3, r2
 8016af8:	4a03      	ldr	r2, [pc, #12]	; (8016b08 <allocate_item+0x170>)
 8016afa:	6013      	str	r3, [r2, #0]
    }
    return item;
 8016afc:	69bb      	ldr	r3, [r7, #24]
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3720      	adds	r7, #32
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}
 8016b06:	bf00      	nop
 8016b08:	200006b8 	.word	0x200006b8
 8016b0c:	200009ec 	.word	0x200009ec
 8016b10:	200006b4 	.word	0x200006b4
 8016b14:	08016871 	.word	0x08016871
 8016b18:	08016939 	.word	0x08016939

08016b1c <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b082      	sub	sp, #8
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8016b24:	4b10      	ldr	r3, [pc, #64]	; (8016b68 <lv_gradient_set_cache_size+0x4c>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f009 fa67 	bl	801fffc <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f009 fa34 	bl	801ff9c <lv_mem_alloc>
 8016b34:	4603      	mov	r3, r0
 8016b36:	4a0c      	ldr	r2, [pc, #48]	; (8016b68 <lv_gradient_set_cache_size+0x4c>)
 8016b38:	6013      	str	r3, [r2, #0]
 8016b3a:	4b0b      	ldr	r3, [pc, #44]	; (8016b68 <lv_gradient_set_cache_size+0x4c>)
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	4a0b      	ldr	r2, [pc, #44]	; (8016b6c <lv_gradient_set_cache_size+0x50>)
 8016b40:	6013      	str	r3, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8016b42:	4b09      	ldr	r3, [pc, #36]	; (8016b68 <lv_gradient_set_cache_size+0x4c>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d100      	bne.n	8016b4c <lv_gradient_set_cache_size+0x30>
 8016b4a:	e7fe      	b.n	8016b4a <lv_gradient_set_cache_size+0x2e>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 8016b4c:	4b06      	ldr	r3, [pc, #24]	; (8016b68 <lv_gradient_set_cache_size+0x4c>)
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	6879      	ldr	r1, [r7, #4]
 8016b52:	4618      	mov	r0, r3
 8016b54:	f009 fe56 	bl	8020804 <lv_memset_00>
    grad_cache_size = max_bytes;
 8016b58:	4a05      	ldr	r2, [pc, #20]	; (8016b70 <lv_gradient_set_cache_size+0x54>)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6013      	str	r3, [r2, #0]
}
 8016b5e:	bf00      	nop
 8016b60:	3708      	adds	r7, #8
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	200009ec 	.word	0x200009ec
 8016b6c:	200006b8 	.word	0x200006b8
 8016b70:	200006b4 	.word	0x200006b4

08016b74 <lv_gradient_get>:

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 8016b74:	b590      	push	{r4, r7, lr}
 8016b76:	b087      	sub	sp, #28
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	460b      	mov	r3, r1
 8016b7e:	807b      	strh	r3, [r7, #2]
 8016b80:	4613      	mov	r3, r2
 8016b82:	803b      	strh	r3, [r7, #0]
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	795b      	ldrb	r3, [r3, #5]
 8016b88:	f003 0307 	and.w	r3, r3, #7
 8016b8c:	b2db      	uxtb	r3, r3
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d101      	bne.n	8016b96 <lv_gradient_get+0x22>
 8016b92:	2300      	movs	r3, #0
 8016b94:	e06d      	b.n	8016c72 <lv_gradient_get+0xfe>

    /* Step 0: Check if the cache exist (else create it) */
    static bool inited = false;
    if(!inited) {
 8016b96:	4b39      	ldr	r3, [pc, #228]	; (8016c7c <lv_gradient_get+0x108>)
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	f083 0301 	eor.w	r3, r3, #1
 8016b9e:	b2db      	uxtb	r3, r3
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d005      	beq.n	8016bb0 <lv_gradient_get+0x3c>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 8016ba4:	2000      	movs	r0, #0
 8016ba6:	f7ff ffb9 	bl	8016b1c <lv_gradient_set_cache_size>
        inited = true;
 8016baa:	4b34      	ldr	r3, [pc, #208]	; (8016c7c <lv_gradient_get+0x108>)
 8016bac:	2201      	movs	r2, #1
 8016bae:	701a      	strb	r2, [r3, #0]
    }

    /* Step 1: Search cache for the given key */
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	795b      	ldrb	r3, [r3, #5]
 8016bb4:	f003 0307 	and.w	r3, r3, #7
 8016bb8:	b2db      	uxtb	r3, r3
 8016bba:	2b02      	cmp	r3, #2
 8016bbc:	d102      	bne.n	8016bc4 <lv_gradient_get+0x50>
 8016bbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016bc2:	e001      	b.n	8016bc8 <lv_gradient_get+0x54>
 8016bc4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016bc8:	82bb      	strh	r3, [r7, #20]
    uint32_t key = compute_key(g, size, w);
 8016bca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016bce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f7ff fdc8 	bl	801676a <compute_key>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	613b      	str	r3, [r7, #16]
    lv_grad_t * item = NULL;
 8016bde:	2300      	movs	r3, #0
 8016be0:	60fb      	str	r3, [r7, #12]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8016be2:	f107 020c 	add.w	r2, r7, #12
 8016be6:	f107 0310 	add.w	r3, r7, #16
 8016bea:	4619      	mov	r1, r3
 8016bec:	4824      	ldr	r0, [pc, #144]	; (8016c80 <lv_gradient_get+0x10c>)
 8016bee:	f7ff fe13 	bl	8016818 <iterate_cache>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	2b01      	cmp	r3, #1
 8016bf6:	d10c      	bne.n	8016c12 <lv_gradient_get+0x9e>
        item->life++; /* Don't forget to bump the counter */
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	685a      	ldr	r2, [r3, #4]
 8016bfc:	f3c2 021d 	ubfx	r2, r2, #0, #30
 8016c00:	1c51      	adds	r1, r2, #1
 8016c02:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8016c06:	685a      	ldr	r2, [r3, #4]
 8016c08:	f361 021d 	bfi	r2, r1, #0, #30
 8016c0c:	605a      	str	r2, [r3, #4]
        return item;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	e02f      	b.n	8016c72 <lv_gradient_get+0xfe>
    }

    /* Step 2: Need to allocate an item for it */
    item = allocate_item(g, w, h);
 8016c12:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016c16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f7ff febb 	bl	8016998 <allocate_item>
 8016c22:	4603      	mov	r3, r0
 8016c24:	60fb      	str	r3, [r7, #12]
    if(item == NULL) {
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d101      	bne.n	8016c30 <lv_gradient_get+0xbc>
        LV_LOG_WARN("Faild to allcoate item for teh gradient");
        return item;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	e020      	b.n	8016c72 <lv_gradient_get+0xfe>
    }
#if LV_DITHER_ERROR_DIFFUSION == 1
    lv_memset_00(item->error_acc, w * sizeof(lv_scolor24_t));
#endif
#else
    for(lv_coord_t i = 0; i < item->size; i++) {
 8016c30:	2300      	movs	r3, #0
 8016c32:	82fb      	strh	r3, [r7, #22]
 8016c34:	e015      	b.n	8016c62 <lv_gradient_get+0xee>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	689a      	ldr	r2, [r3, #8]
 8016c40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016c44:	18d4      	adds	r4, r2, r3
 8016c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	f000 f819 	bl	8016c84 <lv_gradient_calculate>
 8016c52:	4603      	mov	r3, r0
 8016c54:	7023      	strb	r3, [r4, #0]
    for(lv_coord_t i = 0; i < item->size; i++) {
 8016c56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016c5a:	b29b      	uxth	r3, r3
 8016c5c:	3301      	adds	r3, #1
 8016c5e:	b29b      	uxth	r3, r3
 8016c60:	82fb      	strh	r3, [r7, #22]
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016c68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	dbe2      	blt.n	8016c36 <lv_gradient_get+0xc2>
    }
#endif

    return item;
 8016c70:	68fb      	ldr	r3, [r7, #12]
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	371c      	adds	r7, #28
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd90      	pop	{r4, r7, pc}
 8016c7a:	bf00      	nop
 8016c7c:	200006bc 	.word	0x200006bc
 8016c80:	0801696d 	.word	0x0801696d

08016c84 <lv_gradient_calculate>:

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b08c      	sub	sp, #48	; 0x30
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	807b      	strh	r3, [r7, #2]
 8016c90:	4613      	mov	r3, r2
 8016c92:	803b      	strh	r3, [r7, #0]
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	785b      	ldrb	r3, [r3, #1]
 8016c98:	461a      	mov	r2, r3
 8016c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016c9e:	fb02 f303 	mul.w	r3, r2, r3
 8016ca2:	121b      	asrs	r3, r3, #8
 8016ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(frac <= min) {
 8016ca6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cac:	429a      	cmp	r2, r3
 8016cae:	db04      	blt.n	8016cba <lv_gradient_calculate+0x36>
        GRAD_CONV(tmp, dsc->stops[0].color);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	763b      	strb	r3, [r7, #24]
        return tmp;
 8016cb6:	7e3b      	ldrb	r3, [r7, #24]
 8016cb8:	e0c6      	b.n	8016e48 <lv_gradient_calculate+0x1c4>
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	791b      	ldrb	r3, [r3, #4]
 8016cbe:	3b01      	subs	r3, #1
 8016cc0:	687a      	ldr	r2, [r7, #4]
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	4413      	add	r3, r2
 8016cc6:	785b      	ldrb	r3, [r3, #1]
 8016cc8:	461a      	mov	r2, r3
 8016cca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016cce:	fb02 f303 	mul.w	r3, r2, r3
 8016cd2:	121b      	asrs	r3, r3, #8
 8016cd4:	623b      	str	r3, [r7, #32]
    if(frac >= max) {
 8016cd6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016cda:	6a3a      	ldr	r2, [r7, #32]
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	dc08      	bgt.n	8016cf2 <lv_gradient_calculate+0x6e>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	791b      	ldrb	r3, [r3, #4]
 8016ce4:	1e5a      	subs	r2, r3, #1
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8016cec:	763b      	strb	r3, [r7, #24]
        return tmp;
 8016cee:	7e3b      	ldrb	r3, [r7, #24]
 8016cf0:	e0aa      	b.n	8016e48 <lv_gradient_calculate+0x1c4>
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016cfc:	e049      	b.n	8016d92 <lv_gradient_calculate+0x10e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 8016cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d02:	687a      	ldr	r2, [r7, #4]
 8016d04:	005b      	lsls	r3, r3, #1
 8016d06:	4413      	add	r3, r2
 8016d08:	785b      	ldrb	r3, [r3, #1]
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016d10:	fb02 f303 	mul.w	r3, r2, r3
 8016d14:	121b      	asrs	r3, r3, #8
 8016d16:	61fb      	str	r3, [r7, #28]
        if(frac <= cur) {
 8016d18:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016d1c:	69fa      	ldr	r2, [r7, #28]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	db32      	blt.n	8016d88 <lv_gradient_calculate+0x104>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 8016d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d26:	1e5a      	subs	r2, r3, #1
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016d2e:	f7ff fd0a 	bl	8016746 <lv_color_to32>
 8016d32:	4603      	mov	r3, r0
 8016d34:	617b      	str	r3, [r7, #20]
            two.full = lv_color_to32(dsc->stops[i].color);
 8016d36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016d40:	f7ff fd01 	bl	8016746 <lv_color_to32>
 8016d44:	4603      	mov	r3, r0
 8016d46:	613b      	str	r3, [r7, #16]
            min = (dsc->stops[i - 1].frac * range) >> 8;
 8016d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d4c:	3b01      	subs	r3, #1
 8016d4e:	687a      	ldr	r2, [r7, #4]
 8016d50:	005b      	lsls	r3, r3, #1
 8016d52:	4413      	add	r3, r2
 8016d54:	785b      	ldrb	r3, [r3, #1]
 8016d56:	461a      	mov	r2, r3
 8016d58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016d5c:	fb02 f303 	mul.w	r3, r2, r3
 8016d60:	121b      	asrs	r3, r3, #8
 8016d62:	62fb      	str	r3, [r7, #44]	; 0x2c
            max = (dsc->stops[i].frac * range) >> 8;
 8016d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d68:	687a      	ldr	r2, [r7, #4]
 8016d6a:	005b      	lsls	r3, r3, #1
 8016d6c:	4413      	add	r3, r2
 8016d6e:	785b      	ldrb	r3, [r3, #1]
 8016d70:	461a      	mov	r2, r3
 8016d72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016d76:	fb02 f303 	mul.w	r3, r2, r3
 8016d7a:	121b      	asrs	r3, r3, #8
 8016d7c:	623b      	str	r3, [r7, #32]
            d = max - min;
 8016d7e:	6a3a      	ldr	r2, [r7, #32]
 8016d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d82:	1ad3      	subs	r3, r2, r3
 8016d84:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8016d86:	e00a      	b.n	8016d9e <lv_gradient_calculate+0x11a>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8016d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d8c:	3301      	adds	r3, #1
 8016d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	791b      	ldrb	r3, [r3, #4]
 8016d96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d3af      	bcc.n	8016cfe <lv_gradient_calculate+0x7a>
        }
    }

    LV_ASSERT(d != 0);
 8016d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d100      	bne.n	8016da6 <lv_gradient_calculate+0x122>
 8016da4:	e7fe      	b.n	8016da4 <lv_gradient_calculate+0x120>

    /*Then interpolate*/
    frac -= min;
 8016da6:	883a      	ldrh	r2, [r7, #0]
 8016da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016daa:	b29b      	uxth	r3, r3
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (frac * 255) / d;
 8016db2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016db6:	4613      	mov	r3, r2
 8016db8:	021b      	lsls	r3, r3, #8
 8016dba:	1a9a      	subs	r2, r3, r2
 8016dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8016dc2:	76fb      	strb	r3, [r7, #27]
    lv_opa_t imix = 255 - mix;
 8016dc4:	7efb      	ldrb	r3, [r7, #27]
 8016dc6:	43db      	mvns	r3, r3
 8016dc8:	76bb      	strb	r3, [r7, #26]

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8016dca:	7c3b      	ldrb	r3, [r7, #16]
 8016dcc:	461a      	mov	r2, r3
 8016dce:	7efb      	ldrb	r3, [r7, #27]
 8016dd0:	fb03 f202 	mul.w	r2, r3, r2
 8016dd4:	7d3b      	ldrb	r3, [r7, #20]
 8016dd6:	4619      	mov	r1, r3
 8016dd8:	7ebb      	ldrb	r3, [r7, #26]
 8016dda:	fb01 f303 	mul.w	r3, r1, r3
 8016dde:	4413      	add	r3, r2
 8016de0:	461a      	mov	r2, r3
 8016de2:	4613      	mov	r3, r2
 8016de4:	021b      	lsls	r3, r3, #8
 8016de6:	4413      	add	r3, r2
 8016de8:	01db      	lsls	r3, r3, #7
 8016dea:	4413      	add	r3, r2
 8016dec:	0f9b      	lsrs	r3, r3, #30
 8016dee:	b2d9      	uxtb	r1, r3
 8016df0:	7c7b      	ldrb	r3, [r7, #17]
 8016df2:	461a      	mov	r2, r3
 8016df4:	7efb      	ldrb	r3, [r7, #27]
 8016df6:	fb03 f202 	mul.w	r2, r3, r2
 8016dfa:	7d7b      	ldrb	r3, [r7, #21]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	7ebb      	ldrb	r3, [r7, #26]
 8016e00:	fb00 f303 	mul.w	r3, r0, r3
 8016e04:	4413      	add	r3, r2
 8016e06:	461a      	mov	r2, r3
 8016e08:	4613      	mov	r3, r2
 8016e0a:	021b      	lsls	r3, r3, #8
 8016e0c:	4413      	add	r3, r2
 8016e0e:	01db      	lsls	r3, r3, #7
 8016e10:	4413      	add	r3, r2
 8016e12:	0f9b      	lsrs	r3, r3, #30
 8016e14:	b2db      	uxtb	r3, r3
 8016e16:	430b      	orrs	r3, r1
 8016e18:	b2d9      	uxtb	r1, r3
 8016e1a:	7cbb      	ldrb	r3, [r7, #18]
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	7efb      	ldrb	r3, [r7, #27]
 8016e20:	fb03 f202 	mul.w	r2, r3, r2
 8016e24:	7dbb      	ldrb	r3, [r7, #22]
 8016e26:	4618      	mov	r0, r3
 8016e28:	7ebb      	ldrb	r3, [r7, #26]
 8016e2a:	fb00 f303 	mul.w	r3, r0, r3
 8016e2e:	4413      	add	r3, r2
 8016e30:	461a      	mov	r2, r3
 8016e32:	4613      	mov	r3, r2
 8016e34:	021b      	lsls	r3, r3, #8
 8016e36:	4413      	add	r3, r2
 8016e38:	01db      	lsls	r3, r3, #7
 8016e3a:	4413      	add	r3, r2
 8016e3c:	0f9b      	lsrs	r3, r3, #30
 8016e3e:	b2db      	uxtb	r3, r3
 8016e40:	430b      	orrs	r3, r1
 8016e42:	b2db      	uxtb	r3, r3
 8016e44:	733b      	strb	r3, [r7, #12]
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
 8016e46:	7b3b      	ldrb	r3, [r7, #12]
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3730      	adds	r7, #48	; 0x30
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b082      	sub	sp, #8
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
    if(grad->not_cached) {
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	79db      	ldrb	r3, [r3, #7]
 8016e5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016e60:	b2db      	uxtb	r3, r3
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d002      	beq.n	8016e6c <lv_gradient_cleanup+0x1c>
        lv_mem_free(grad);
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f009 f8c8 	bl	801fffc <lv_mem_free>
    }
}
 8016e6c:	bf00      	nop
 8016e6e:	3708      	adds	r7, #8
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <lv_color_premult>:
{
 8016e74:	b480      	push	{r7}
 8016e76:	b083      	sub	sp, #12
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	7138      	strb	r0, [r7, #4]
 8016e7c:	460b      	mov	r3, r1
 8016e7e:	603a      	str	r2, [r7, #0]
 8016e80:	71fb      	strb	r3, [r7, #7]
    out[0] = LV_COLOR_GET_R(c);
 8016e82:	793b      	ldrb	r3, [r7, #4]
 8016e84:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	b29a      	uxth	r2, r3
 8016e8c:	683b      	ldr	r3, [r7, #0]
 8016e8e:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 8016e90:	793b      	ldrb	r3, [r7, #4]
 8016e92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016e96:	b2da      	uxtb	r2, r3
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	3302      	adds	r3, #2
 8016e9c:	b292      	uxth	r2, r2
 8016e9e:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 8016ea0:	793b      	ldrb	r3, [r7, #4]
 8016ea2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016ea6:	b2da      	uxtb	r2, r3
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	3304      	adds	r3, #4
 8016eac:	b292      	uxth	r2, r2
 8016eae:	801a      	strh	r2, [r3, #0]
}
 8016eb0:	bf00      	nop
 8016eb2:	370c      	adds	r7, #12
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eba:	4770      	bx	lr

08016ebc <lv_color_mix_premult>:
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b085      	sub	sp, #20
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
 8016ec4:	7039      	strb	r1, [r7, #0]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_R(c1, premult_c1[0]);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	881b      	ldrh	r3, [r3, #0]
 8016ece:	f003 0301 	and.w	r3, r3, #1
 8016ed2:	b2da      	uxtb	r2, r3
 8016ed4:	7a3b      	ldrb	r3, [r7, #8]
 8016ed6:	f362 0300 	bfi	r3, r2, #0, #1
 8016eda:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	3302      	adds	r3, #2
 8016ee0:	881b      	ldrh	r3, [r3, #0]
 8016ee2:	f003 0301 	and.w	r3, r3, #1
 8016ee6:	b2da      	uxtb	r2, r3
 8016ee8:	7a3b      	ldrb	r3, [r7, #8]
 8016eea:	f362 0300 	bfi	r3, r2, #0, #1
 8016eee:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	3304      	adds	r3, #4
 8016ef4:	881b      	ldrh	r3, [r3, #0]
 8016ef6:	f003 0301 	and.w	r3, r3, #1
 8016efa:	b2da      	uxtb	r2, r3
 8016efc:	7a3b      	ldrb	r3, [r7, #8]
 8016efe:	f362 0300 	bfi	r3, r2, #0, #1
 8016f02:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8016f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	da01      	bge.n	8016f10 <lv_color_mix_premult+0x54>
 8016f0c:	783b      	ldrb	r3, [r7, #0]
 8016f0e:	e000      	b.n	8016f12 <lv_color_mix_premult+0x56>
 8016f10:	7a3b      	ldrb	r3, [r7, #8]
 8016f12:	733b      	strb	r3, [r7, #12]
    return ret;
 8016f14:	7b3b      	ldrb	r3, [r7, #12]
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3714      	adds	r7, #20
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f20:	4770      	bx	lr

08016f22 <lv_color_make>:
{
 8016f22:	b480      	push	{r7}
 8016f24:	b083      	sub	sp, #12
 8016f26:	af00      	add	r7, sp, #0
 8016f28:	4603      	mov	r3, r0
 8016f2a:	71fb      	strb	r3, [r7, #7]
 8016f2c:	460b      	mov	r3, r1
 8016f2e:	71bb      	strb	r3, [r7, #6]
 8016f30:	4613      	mov	r3, r2
 8016f32:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8016f34:	797b      	ldrb	r3, [r7, #5]
 8016f36:	09db      	lsrs	r3, r3, #7
 8016f38:	b2da      	uxtb	r2, r3
 8016f3a:	79bb      	ldrb	r3, [r7, #6]
 8016f3c:	09db      	lsrs	r3, r3, #7
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	4313      	orrs	r3, r2
 8016f42:	b2da      	uxtb	r2, r3
 8016f44:	79fb      	ldrb	r3, [r7, #7]
 8016f46:	09db      	lsrs	r3, r3, #7
 8016f48:	b2db      	uxtb	r3, r3
 8016f4a:	4313      	orrs	r3, r2
 8016f4c:	b2db      	uxtb	r3, r3
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	370c      	adds	r7, #12
 8016f52:	46bd      	mov	sp, r7
 8016f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f58:	4770      	bx	lr

08016f5a <lv_color_hex>:
{
 8016f5a:	b580      	push	{r7, lr}
 8016f5c:	b082      	sub	sp, #8
 8016f5e:	af00      	add	r7, sp, #0
 8016f60:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	0c1b      	lsrs	r3, r3, #16
 8016f66:	b2d8      	uxtb	r0, r3
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	0a1b      	lsrs	r3, r3, #8
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	687a      	ldr	r2, [r7, #4]
 8016f70:	b2d2      	uxtb	r2, r2
 8016f72:	4619      	mov	r1, r3
 8016f74:	f7ff ffd5 	bl	8016f22 <lv_color_make>
 8016f78:	4603      	mov	r3, r0
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3708      	adds	r7, #8
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}

08016f82 <lv_area_copy>:
{
 8016f82:	b480      	push	{r7}
 8016f84:	b083      	sub	sp, #12
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	6078      	str	r0, [r7, #4]
 8016f8a:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8016faa:	683b      	ldr	r3, [r7, #0]
 8016fac:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	80da      	strh	r2, [r3, #6]
}
 8016fb4:	bf00      	nop
 8016fb6:	370c      	adds	r7, #12
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbe:	4770      	bx	lr

08016fc0 <lv_area_get_width>:
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b083      	sub	sp, #12
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016fce:	b29a      	uxth	r2, r3
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	1ad3      	subs	r3, r2, r3
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	3301      	adds	r3, #1
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	b21b      	sxth	r3, r3
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	370c      	adds	r7, #12
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fec:	4770      	bx	lr

08016fee <lv_area_get_height>:
{
 8016fee:	b480      	push	{r7}
 8016ff0:	b083      	sub	sp, #12
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016ffc:	b29a      	uxth	r2, r3
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017004:	b29b      	uxth	r3, r3
 8017006:	1ad3      	subs	r3, r2, r3
 8017008:	b29b      	uxth	r3, r3
 801700a:	3301      	adds	r3, #1
 801700c:	b29b      	uxth	r3, r3
 801700e:	b21b      	sxth	r3, r3
}
 8017010:	4618      	mov	r0, r3
 8017012:	370c      	adds	r7, #12
 8017014:	46bd      	mov	sp, r7
 8017016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701a:	4770      	bx	lr

0801701c <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 801701c:	b590      	push	{r4, r7, lr}
 801701e:	b0ad      	sub	sp, #180	; 0xb4
 8017020:	af06      	add	r7, sp, #24
 8017022:	60f8      	str	r0, [r7, #12]
 8017024:	60b9      	str	r1, [r7, #8]
 8017026:	607a      	str	r2, [r7, #4]
 8017028:	603b      	str	r3, [r7, #0]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	689a      	ldr	r2, [r3, #8]
 801702e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017032:	4611      	mov	r1, r2
 8017034:	4618      	mov	r0, r3
 8017036:	f7ff ffa4 	bl	8016f82 <lv_area_copy>

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 801703a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801703e:	4618      	mov	r0, r3
 8017040:	f7f8 feb8 	bl	800fdb4 <lv_draw_mask_is_any>
 8017044:	4603      	mov	r3, r0
 8017046:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d104      	bne.n	801705e <lv_draw_sw_img_decoded+0x42>
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	885b      	ldrh	r3, [r3, #2]
 8017058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801705c:	d001      	beq.n	8017062 <lv_draw_sw_img_decoded+0x46>
 801705e:	2301      	movs	r3, #1
 8017060:	e000      	b.n	8017064 <lv_draw_sw_img_decoded+0x48>
 8017062:	2300      	movs	r3, #0
 8017064:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8017068:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801706c:	f003 0301 	and.w	r3, r3, #1
 8017070:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 8017074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017078:	211c      	movs	r1, #28
 801707a:	4618      	mov	r0, r3
 801707c:	f009 fbc2 	bl	8020804 <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	7a9b      	ldrb	r3, [r3, #10]
 8017084:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	7adb      	ldrb	r3, [r3, #11]
 801708c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017090:	b2db      	uxtb	r3, r3
 8017092:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    blend_dsc.blend_area = &blend_area;
 8017096:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801709a:	633b      	str	r3, [r7, #48]	; 0x30

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 801709c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80170a0:	f083 0301 	eor.w	r3, r3, #1
 80170a4:	b2db      	uxtb	r3, r3
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d019      	beq.n	80170de <lv_draw_sw_img_decoded+0xc2>
 80170aa:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80170ae:	f083 0301 	eor.w	r3, r3, #1
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d012      	beq.n	80170de <lv_draw_sw_img_decoded+0xc2>
 80170b8:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80170bc:	2b04      	cmp	r3, #4
 80170be:	d10e      	bne.n	80170de <lv_draw_sw_img_decoded+0xc2>
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	7a5b      	ldrb	r3, [r3, #9]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d10a      	bne.n	80170de <lv_draw_sw_img_decoded+0xc2>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	637b      	str	r3, [r7, #52]	; 0x34

        blend_dsc.blend_area = coords;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80170d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80170d4:	4619      	mov	r1, r3
 80170d6:	68f8      	ldr	r0, [r7, #12]
 80170d8:	f7fe f93c 	bl	8015354 <lv_draw_sw_blend>
 80170dc:	e1c6      	b.n	801746c <lv_draw_sw_img_decoded+0x450>
    }
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 80170de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80170e2:	f083 0301 	eor.w	r3, r3, #1
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d02f      	beq.n	801714c <lv_draw_sw_img_decoded+0x130>
 80170ec:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80170f0:	f083 0301 	eor.w	r3, r3, #1
 80170f4:	b2db      	uxtb	r3, r3
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d028      	beq.n	801714c <lv_draw_sw_img_decoded+0x130>
 80170fa:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80170fe:	2b0e      	cmp	r3, #14
 8017100:	d124      	bne.n	801714c <lv_draw_sw_img_decoded+0x130>
        lv_area_t clipped_coords;
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	689a      	ldr	r2, [r3, #8]
 8017106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801710a:	6879      	ldr	r1, [r7, #4]
 801710c:	4618      	mov	r0, r3
 801710e:	f007 fc25 	bl	801e95c <_lv_area_intersect>
 8017112:	4603      	mov	r3, r0
 8017114:	f083 0301 	eor.w	r3, r3, #1
 8017118:	b2db      	uxtb	r3, r3
 801711a:	2b00      	cmp	r3, #0
 801711c:	f040 81a6 	bne.w	801746c <lv_draw_sw_img_decoded+0x450>

        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = coords;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.src_buf = NULL;
 8017128:	2300      	movs	r3, #0
 801712a:	637b      	str	r3, [r7, #52]	; 0x34
        blend_dsc.color = draw_dsc->recolor;
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	7a1b      	ldrb	r3, [r3, #8]
 8017130:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8017134:	2302      	movs	r3, #2
 8017136:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        blend_dsc.blend_area = coords;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801713e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017142:	4619      	mov	r1, r3
 8017144:	68f8      	ldr	r0, [r7, #12]
 8017146:	f7fe f905 	bl	8015354 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 801714a:	e18f      	b.n	801746c <lv_draw_sw_img_decoded+0x450>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	689b      	ldr	r3, [r3, #8]
 8017150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017154:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        blend_area.x2 = draw_ctx->clip_area->x2;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	689b      	ldr	r3, [r3, #8]
 801715c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017160:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        blend_area.y1 = draw_ctx->clip_area->y1;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	689b      	ldr	r3, [r3, #8]
 8017168:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801716c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        blend_area.y2 = draw_ctx->clip_area->y2;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	689b      	ldr	r3, [r3, #8]
 8017174:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017178:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_coord_t src_w = lv_area_get_width(coords);
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	f7ff ff1f 	bl	8016fc0 <lv_area_get_width>
 8017182:	4603      	mov	r3, r0
 8017184:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t src_h = lv_area_get_height(coords);
 8017188:	6878      	ldr	r0, [r7, #4]
 801718a:	f7ff ff30 	bl	8016fee <lv_area_get_height>
 801718e:	4603      	mov	r3, r0
 8017190:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
 8017194:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017198:	4618      	mov	r0, r3
 801719a:	f7ff ff28 	bl	8016fee <lv_area_get_height>
 801719e:	4603      	mov	r3, r0
 80171a0:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        lv_coord_t blend_w = lv_area_get_width(&blend_area);
 80171a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7ff ff09 	bl	8016fc0 <lv_area_get_width>
 80171ae:	4603      	mov	r3, r0
 80171b0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        uint32_t max_buf_size = MAX_BUF_SIZE;
 80171b4:	f7f5 fbf4 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 80171b8:	4603      	mov	r3, r0
 80171ba:	4618      	mov	r0, r3
 80171bc:	f006 ff1a 	bl	801dff4 <lv_disp_get_hor_res>
 80171c0:	4603      	mov	r3, r0
 80171c2:	67bb      	str	r3, [r7, #120]	; 0x78
        uint32_t blend_size = lv_area_get_size(&blend_area);
 80171c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80171c8:	4618      	mov	r0, r3
 80171ca:	f007 fb3a 	bl	801e842 <lv_area_get_size>
 80171ce:	6778      	str	r0, [r7, #116]	; 0x74
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
 80171d0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80171d4:	673b      	str	r3, [r7, #112]	; 0x70
        if(blend_size <= max_buf_size) {
 80171d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80171d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80171da:	429a      	cmp	r2, r3
 80171dc:	d804      	bhi.n	80171e8 <lv_draw_sw_img_decoded+0x1cc>
            buf_h = blend_h;
 80171de:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 80171e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80171e6:	e006      	b.n	80171f6 <lv_draw_sw_img_decoded+0x1da>
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 80171e8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80171ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80171ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80171f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 80171f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80171f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80171fc:	fb02 f303 	mul.w	r3, r2, r3
 8017200:	66fb      	str	r3, [r7, #108]	; 0x6c

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 8017202:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017204:	f008 ff54 	bl	80200b0 <lv_mem_buf_get>
 8017208:	66b8      	str	r0, [r7, #104]	; 0x68
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 801720a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801720c:	f008 ff50 	bl	80200b0 <lv_mem_buf_get>
 8017210:	6678      	str	r0, [r7, #100]	; 0x64
        blend_dsc.mask_buf = mask_buf;
 8017212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017214:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = &blend_area;
 8017216:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801721a:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801721c:	2302      	movs	r3, #2
 801721e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        blend_dsc.src_buf = rgb_buf;
 8017222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017224:	637b      	str	r3, [r7, #52]	; 0x34
        lv_coord_t y_last = blend_area.y2;
 8017226:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801722a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 801722e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017232:	b29a      	uxth	r2, r3
 8017234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017238:	b29b      	uxth	r3, r3
 801723a:	4413      	add	r3, r2
 801723c:	b29b      	uxth	r3, r3
 801723e:	3b01      	subs	r3, #1
 8017240:	b29b      	uxth	r3, r3
 8017242:	b21b      	sxth	r3, r3
 8017244:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8017248:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801724c:	2b04      	cmp	r3, #4
 801724e:	d109      	bne.n	8017264 <lv_draw_sw_img_decoded+0x248>
 8017250:	68bb      	ldr	r3, [r7, #8]
 8017252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d104      	bne.n	8017264 <lv_draw_sw_img_decoded+0x248>
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 801725a:	68bb      	ldr	r3, [r7, #8]
 801725c:	885b      	ldrh	r3, [r3, #2]
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 801725e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017262:	d001      	beq.n	8017268 <lv_draw_sw_img_decoded+0x24c>
 8017264:	2302      	movs	r3, #2
 8017266:	e000      	b.n	801726a <lv_draw_sw_img_decoded+0x24e>
 8017268:	2301      	movs	r3, #1
 801726a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 801726e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017272:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        while(blend_area.y1 <= y_last) {
 8017276:	e0ec      	b.n	8017452 <lv_draw_sw_img_decoded+0x436>
            /*Apply transformations if any or separate the channels*/
            lv_area_t transform_area;
            lv_area_copy(&transform_area, &blend_area);
 8017278:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801727c:	f107 0320 	add.w	r3, r7, #32
 8017280:	4611      	mov	r1, r2
 8017282:	4618      	mov	r0, r3
 8017284:	f7ff fe7d 	bl	8016f82 <lv_area_copy>
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801728e:	b29b      	uxth	r3, r3
 8017290:	425b      	negs	r3, r3
 8017292:	b29b      	uxth	r3, r3
 8017294:	b219      	sxth	r1, r3
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801729c:	b29b      	uxth	r3, r3
 801729e:	425b      	negs	r3, r3
 80172a0:	b29b      	uxth	r3, r3
 80172a2:	b21a      	sxth	r2, r3
 80172a4:	f107 0320 	add.w	r3, r7, #32
 80172a8:	4618      	mov	r0, r3
 80172aa:	f007 fb21 	bl	801e8f0 <lv_area_move>
            if(transform) {
 80172ae:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d018      	beq.n	80172e8 <lv_draw_sw_img_decoded+0x2cc>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 80172b6:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80172ba:	f107 0120 	add.w	r1, r7, #32
 80172be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80172c0:	9305      	str	r3, [sp, #20]
 80172c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80172c4:	9304      	str	r3, [sp, #16]
 80172c6:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80172ca:	9303      	str	r3, [sp, #12]
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	9302      	str	r3, [sp, #8]
 80172d0:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80172d4:	9301      	str	r3, [sp, #4]
 80172d6:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 80172da:	9300      	str	r3, [sp, #0]
 80172dc:	4613      	mov	r3, r2
 80172de:	683a      	ldr	r2, [r7, #0]
 80172e0:	68f8      	ldr	r0, [r7, #12]
 80172e2:	f7fb f860 	bl	80123a6 <lv_draw_transform>
 80172e6:	e015      	b.n	8017314 <lv_draw_sw_img_decoded+0x2f8>
                                  draw_dsc, cf, rgb_buf, mask_buf);
            }
            else {
                convert_cb(&transform_area, src_buf, src_w, src_h, src_w, draw_dsc, cf, rgb_buf, mask_buf);
 80172e8:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 80172ec:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80172f0:	f107 0020 	add.w	r0, r7, #32
 80172f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80172f6:	9304      	str	r3, [sp, #16]
 80172f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80172fa:	9303      	str	r3, [sp, #12]
 80172fc:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8017300:	9302      	str	r3, [sp, #8]
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	9301      	str	r3, [sp, #4]
 8017306:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801730a:	9300      	str	r3, [sp, #0]
 801730c:	460b      	mov	r3, r1
 801730e:	6839      	ldr	r1, [r7, #0]
 8017310:	f000 f8af 	bl	8017472 <convert_cb>
            }

            /*Apply recolor*/
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	7a5b      	ldrb	r3, [r3, #9]
 8017318:	2b02      	cmp	r3, #2
 801731a:	d932      	bls.n	8017382 <lv_draw_sw_img_decoded+0x366>
                uint16_t premult_v[3];
                lv_opa_t recolor_opa = draw_dsc->recolor_opa;
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	7a5b      	ldrb	r3, [r3, #9]
 8017320:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                lv_color_t recolor = draw_dsc->recolor;
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	7a1b      	ldrb	r3, [r3, #8]
 8017328:	753b      	strb	r3, [r7, #20]
                lv_color_premult(recolor, recolor_opa, premult_v);
 801732a:	f107 0218 	add.w	r2, r7, #24
 801732e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017332:	4619      	mov	r1, r3
 8017334:	7d38      	ldrb	r0, [r7, #20]
 8017336:	f7ff fd9d 	bl	8016e74 <lv_color_premult>
                recolor_opa = 255 - recolor_opa;
 801733a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801733e:	43db      	mvns	r3, r3
 8017340:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                uint32_t i;
                for(i = 0; i < buf_size; i++) {
 8017344:	2300      	movs	r3, #0
 8017346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801734a:	e015      	b.n	8017378 <lv_draw_sw_img_decoded+0x35c>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 801734c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801734e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017352:	4413      	add	r3, r2
 8017354:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017356:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801735a:	188c      	adds	r4, r1, r2
 801735c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8017360:	f107 0018 	add.w	r0, r7, #24
 8017364:	7819      	ldrb	r1, [r3, #0]
 8017366:	f7ff fda9 	bl	8016ebc <lv_color_mix_premult>
 801736a:	4603      	mov	r3, r0
 801736c:	7023      	strb	r3, [r4, #0]
                for(i = 0; i < buf_size; i++) {
 801736e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017372:	3301      	adds	r3, #1
 8017374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017378:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801737c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801737e:	429a      	cmp	r2, r3
 8017380:	d3e4      	bcc.n	801734c <lv_draw_sw_img_decoded+0x330>
                }
            }
#if LV_DRAW_COMPLEX
            /*Apply the masks if any*/
            if(mask_any) {
 8017382:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8017386:	2b00      	cmp	r3, #0
 8017388:	d03e      	beq.n	8017408 <lv_draw_sw_img_decoded+0x3ec>
                lv_coord_t y;
                lv_opa_t * mask_buf_tmp = mask_buf;
 801738a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801738c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8017390:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017394:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8017398:	e030      	b.n	80173fc <lv_draw_sw_img_decoded+0x3e0>
                    lv_draw_mask_res_t mask_res_line;
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 801739a:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 801739e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80173a2:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 80173a6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80173aa:	f7f8 fc05 	bl	800fbb8 <lv_draw_mask_apply>
 80173ae:	4603      	mov	r3, r0
 80173b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 80173b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d10a      	bne.n	80173d2 <lv_draw_sw_img_decoded+0x3b6>
                        lv_memset_00(mask_buf_tmp, blend_w);
 80173bc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80173c0:	4619      	mov	r1, r3
 80173c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80173c6:	f009 fa1d 	bl	8020804 <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80173ca:	2302      	movs	r3, #2
 80173cc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80173d0:	e006      	b.n	80173e0 <lv_draw_sw_img_decoded+0x3c4>
                    }
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 80173d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173d6:	2b02      	cmp	r3, #2
 80173d8:	d102      	bne.n	80173e0 <lv_draw_sw_img_decoded+0x3c4>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80173da:	2302      	movs	r3, #2
 80173dc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                    }
                    mask_buf_tmp += blend_w;
 80173e0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80173e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80173e8:	4413      	add	r3, r2
 80173ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 80173ee:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	3301      	adds	r3, #1
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80173fc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8017400:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8017404:	429a      	cmp	r2, r3
 8017406:	ddc8      	ble.n	801739a <lv_draw_sw_img_decoded+0x37e>
                }
            }
#endif

            /*Blend*/
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8017408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801740c:	4619      	mov	r1, r3
 801740e:	68f8      	ldr	r0, [r7, #12]
 8017410:	f7fd ffa0 	bl	8015354 <lv_draw_sw_blend>

            /*Go the the next lines*/
            blend_area.y1 = blend_area.y2 + 1;
 8017414:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8017418:	b29b      	uxth	r3, r3
 801741a:	3301      	adds	r3, #1
 801741c:	b29b      	uxth	r3, r3
 801741e:	b21b      	sxth	r3, r3
 8017420:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 8017424:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017428:	b29a      	uxth	r2, r3
 801742a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801742e:	b29b      	uxth	r3, r3
 8017430:	4413      	add	r3, r2
 8017432:	b29b      	uxth	r3, r3
 8017434:	3b01      	subs	r3, #1
 8017436:	b29b      	uxth	r3, r3
 8017438:	b21b      	sxth	r3, r3
 801743a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 801743e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8017442:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8017446:	429a      	cmp	r2, r3
 8017448:	da03      	bge.n	8017452 <lv_draw_sw_img_decoded+0x436>
 801744a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801744e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        while(blend_area.y1 <= y_last) {
 8017452:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017456:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801745a:	429a      	cmp	r2, r3
 801745c:	f6bf af0c 	bge.w	8017278 <lv_draw_sw_img_decoded+0x25c>
        }

        lv_mem_buf_release(mask_buf);
 8017460:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8017462:	f008 fed1 	bl	8020208 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 8017466:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017468:	f008 fece 	bl	8020208 <lv_mem_buf_release>
    }
}
 801746c:	379c      	adds	r7, #156	; 0x9c
 801746e:	46bd      	mov	sp, r7
 8017470:	bd90      	pop	{r4, r7, pc}

08017472 <convert_cb>:
 **********************/

/* Separate the image channels to RGB and Alpha to match LV_COLOR_DEPTH settings*/
static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 8017472:	b590      	push	{r4, r7, lr}
 8017474:	b093      	sub	sp, #76	; 0x4c
 8017476:	af00      	add	r7, sp, #0
 8017478:	60f8      	str	r0, [r7, #12]
 801747a:	60b9      	str	r1, [r7, #8]
 801747c:	4611      	mov	r1, r2
 801747e:	461a      	mov	r2, r3
 8017480:	460b      	mov	r3, r1
 8017482:	80fb      	strh	r3, [r7, #6]
 8017484:	4613      	mov	r3, r2
 8017486:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(draw_dsc);
    LV_UNUSED(src_h);
    LV_UNUSED(src_w);

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
 8017488:	68bb      	ldr	r3, [r7, #8]
 801748a:	647b      	str	r3, [r7, #68]	; 0x44
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801748c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017490:	2b04      	cmp	r3, #4
 8017492:	d003      	beq.n	801749c <convert_cb+0x2a>
 8017494:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017498:	2b06      	cmp	r3, #6
 801749a:	d169      	bne.n	8017570 <convert_cb+0xfe>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 801749c:	68f8      	ldr	r0, [r7, #12]
 801749e:	f007 f9d0 	bl	801e842 <lv_area_get_size>
 80174a2:	6278      	str	r0, [r7, #36]	; 0x24
        lv_memset_ff(abuf, px_cnt);
 80174a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80174a6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80174a8:	f009 fa2d 	bl	8020906 <lv_memset_ff>

        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 80174ac:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80174b0:	68fa      	ldr	r2, [r7, #12]
 80174b2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80174b6:	fb02 f303 	mul.w	r3, r2, r3
 80174ba:	461a      	mov	r2, r3
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174c2:	4413      	add	r3, r2
 80174c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80174c6:	4413      	add	r3, r2
 80174c8:	647b      	str	r3, [r7, #68]	; 0x44
        uint32_t dest_w = lv_area_get_width(dest_area);
 80174ca:	68f8      	ldr	r0, [r7, #12]
 80174cc:	f7ff fd78 	bl	8016fc0 <lv_area_get_width>
 80174d0:	4603      	mov	r3, r0
 80174d2:	623b      	str	r3, [r7, #32]
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 80174d4:	6a3b      	ldr	r3, [r7, #32]
 80174d6:	61fb      	str	r3, [r7, #28]

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80174d8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80174dc:	837b      	strh	r3, [r7, #26]
        lv_color_t * cbuf_tmp = cbuf;
 80174de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80174e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	885b      	ldrh	r3, [r3, #2]
 80174e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80174ea:	e014      	b.n	8017516 <convert_cb+0xa4>
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 80174ec:	69fa      	ldr	r2, [r7, #28]
 80174ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80174f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80174f2:	f008 fee1 	bl	80202b8 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 80174f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80174fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80174fc:	4413      	add	r3, r2
 80174fe:	647b      	str	r3, [r7, #68]	; 0x44
            cbuf_tmp += dest_w;
 8017500:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017502:	6a3b      	ldr	r3, [r7, #32]
 8017504:	4413      	add	r3, r2
 8017506:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8017508:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801750c:	b29b      	uxth	r3, r3
 801750e:	3301      	adds	r3, #1
 8017510:	b29b      	uxth	r3, r3
 8017512:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801751c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017520:	429a      	cmp	r2, r3
 8017522:	dde3      	ble.n	80174ec <convert_cb+0x7a>
        }

        /*Make "holes" for with Chroma keying*/
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8017524:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017528:	2b06      	cmp	r3, #6
 801752a:	f040 810f 	bne.w	801774c <convert_cb+0x2da>
            uint32_t i;
            lv_color_t chk = LV_COLOR_CHROMA_KEY;
 801752e:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8017532:	f7ff fd12 	bl	8016f5a <lv_color_hex>
 8017536:	4603      	mov	r3, r0
 8017538:	743b      	strb	r3, [r7, #16]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
            uint8_t * cbuf_uint = (uint8_t *)cbuf;
 801753a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801753c:	617b      	str	r3, [r7, #20]
            uint8_t chk_v = chk.full;
 801753e:	7c3b      	ldrb	r3, [r7, #16]
 8017540:	74fb      	strb	r3, [r7, #19]
            uint16_t chk_v = chk.full;
#elif LV_COLOR_DEPTH == 32
            uint32_t * cbuf_uint = (uint32_t *)cbuf;
            uint32_t chk_v = chk.full;
#endif
            for(i = 0; i < px_cnt; i++) {
 8017542:	2300      	movs	r3, #0
 8017544:	63bb      	str	r3, [r7, #56]	; 0x38
 8017546:	e00e      	b.n	8017566 <convert_cb+0xf4>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 8017548:	697a      	ldr	r2, [r7, #20]
 801754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801754c:	4413      	add	r3, r2
 801754e:	781b      	ldrb	r3, [r3, #0]
 8017550:	7cfa      	ldrb	r2, [r7, #19]
 8017552:	429a      	cmp	r2, r3
 8017554:	d104      	bne.n	8017560 <convert_cb+0xee>
 8017556:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801755a:	4413      	add	r3, r2
 801755c:	2200      	movs	r2, #0
 801755e:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < px_cnt; i++) {
 8017560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017562:	3301      	adds	r3, #1
 8017564:	63bb      	str	r3, [r7, #56]	; 0x38
 8017566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801756a:	429a      	cmp	r2, r3
 801756c:	d3ec      	bcc.n	8017548 <convert_cb+0xd6>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801756e:	e0ed      	b.n	801774c <convert_cb+0x2da>
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8017570:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017574:	2b05      	cmp	r3, #5
 8017576:	d16a      	bne.n	801764e <convert_cb+0x1dc>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8017578:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801757c:	68fa      	ldr	r2, [r7, #12]
 801757e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017582:	fb02 f303 	mul.w	r3, r2, r3
 8017586:	68fa      	ldr	r2, [r7, #12]
 8017588:	f9b2 2000 	ldrsh.w	r2, [r2]
 801758c:	4413      	add	r3, r2
 801758e:	005b      	lsls	r3, r3, #1
 8017590:	461a      	mov	r2, r3
 8017592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017594:	4413      	add	r3, r2
 8017596:	647b      	str	r3, [r7, #68]	; 0x44

        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 8017598:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 801759c:	68f8      	ldr	r0, [r7, #12]
 801759e:	f7ff fd0f 	bl	8016fc0 <lv_area_get_width>
 80175a2:	4603      	mov	r3, r0
 80175a4:	b29b      	uxth	r3, r3
 80175a6:	1ae3      	subs	r3, r4, r3
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80175ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80175ae:	005b      	lsls	r3, r3, #1
 80175b0:	b29b      	uxth	r3, r3
 80175b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

        lv_coord_t dest_h = lv_area_get_height(dest_area);
 80175b4:	68f8      	ldr	r0, [r7, #12]
 80175b6:	f7ff fd1a 	bl	8016fee <lv_area_get_height>
 80175ba:	4603      	mov	r3, r0
 80175bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 80175be:	68f8      	ldr	r0, [r7, #12]
 80175c0:	f7ff fcfe 	bl	8016fc0 <lv_area_get_width>
 80175c4:	4603      	mov	r3, r0
 80175c6:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(y = 0; y < dest_h; y++) {
 80175c8:	2300      	movs	r3, #0
 80175ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80175ce:	e037      	b.n	8017640 <convert_cb+0x1ce>
            for(x = 0; x < dest_w; x++) {
 80175d0:	2300      	movs	r3, #0
 80175d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80175d6:	e017      	b.n	8017608 <convert_cb+0x196>
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 80175d8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80175dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80175de:	4413      	add	r3, r2
 80175e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80175e2:	7852      	ldrb	r2, [r2, #1]
 80175e4:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                cbuf[x].full = *src_tmp8;
 80175e6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80175ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80175ec:	4413      	add	r3, r2
 80175ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80175f0:	7812      	ldrb	r2, [r2, #0]
 80175f2:	701a      	strb	r2, [r3, #0]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
#elif LV_COLOR_DEPTH == 32
                cbuf[x] = *((lv_color_t *) src_tmp8);
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 80175f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175f6:	3302      	adds	r3, #2
 80175f8:	647b      	str	r3, [r7, #68]	; 0x44
            for(x = 0; x < dest_w; x++) {
 80175fa:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80175fe:	b29b      	uxth	r3, r3
 8017600:	3301      	adds	r3, #1
 8017602:	b29b      	uxth	r3, r3
 8017604:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017608:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 801760c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017610:	429a      	cmp	r2, r3
 8017612:	dbe1      	blt.n	80175d8 <convert_cb+0x166>

            }
            cbuf += dest_w;
 8017614:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017618:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801761a:	4413      	add	r3, r2
 801761c:	667b      	str	r3, [r7, #100]	; 0x64
            abuf += dest_w;
 801761e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017622:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017624:	4413      	add	r3, r2
 8017626:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_new_line_step_byte;
 8017628:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801762c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801762e:	4413      	add	r3, r2
 8017630:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8017632:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8017636:	b29b      	uxth	r3, r3
 8017638:	3301      	adds	r3, #1
 801763a:	b29b      	uxth	r3, r3
 801763c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017640:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017644:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8017648:	429a      	cmp	r2, r3
 801764a:	dbc1      	blt.n	80175d0 <convert_cb+0x15e>
            lv_memcpy(abuf, src_tmp8, dest_w);
            abuf += dest_w;
            src_tmp8 += src_stride;
        }
    }
}
 801764c:	e07f      	b.n	801774e <convert_cb+0x2dc>
    else if(cf == LV_IMG_CF_RGB565A8) {
 801764e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017652:	2b14      	cmp	r3, #20
 8017654:	d17b      	bne.n	801774e <convert_cb+0x2dc>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8017656:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801765a:	68fa      	ldr	r2, [r7, #12]
 801765c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017660:	fb02 f303 	mul.w	r3, r2, r3
 8017664:	461a      	mov	r2, r3
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	f9b3 3000 	ldrsh.w	r3, [r3]
 801766c:	4413      	add	r3, r2
 801766e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017670:	4413      	add	r3, r2
 8017672:	647b      	str	r3, [r7, #68]	; 0x44
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8017674:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8017678:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t dest_h = lv_area_get_height(dest_area);
 801767a:	68f8      	ldr	r0, [r7, #12]
 801767c:	f7ff fcb7 	bl	8016fee <lv_area_get_height>
 8017680:	4603      	mov	r3, r0
 8017682:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 8017684:	68f8      	ldr	r0, [r7, #12]
 8017686:	f7ff fc9b 	bl	8016fc0 <lv_area_get_width>
 801768a:	4603      	mov	r3, r0
 801768c:	867b      	strh	r3, [r7, #50]	; 0x32
        for(y = 0; y < dest_h; y++) {
 801768e:	2300      	movs	r3, #0
 8017690:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017694:	e017      	b.n	80176c6 <convert_cb+0x254>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 8017696:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801769a:	461a      	mov	r2, r3
 801769c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801769e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80176a0:	f008 fe0a 	bl	80202b8 <lv_memcpy>
            cbuf += dest_w;
 80176a4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80176a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80176aa:	4413      	add	r3, r2
 80176ac:	667b      	str	r3, [r7, #100]	; 0x64
            src_tmp8 += src_stride_byte;
 80176ae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80176b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80176b4:	4413      	add	r3, r2
 80176b6:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 80176b8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80176bc:	b29b      	uxth	r3, r3
 80176be:	3301      	adds	r3, #1
 80176c0:	b29b      	uxth	r3, r3
 80176c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80176c6:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80176ca:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80176ce:	429a      	cmp	r2, r3
 80176d0:	dbe1      	blt.n	8017696 <convert_cb+0x224>
        src_tmp8 = (const uint8_t *)src_buf;
 80176d2:	68bb      	ldr	r3, [r7, #8]
 80176d4:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 80176d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80176da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80176de:	fb02 f303 	mul.w	r3, r2, r3
 80176e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80176e4:	4413      	add	r3, r2
 80176e6:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 80176e8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80176ec:	68fa      	ldr	r2, [r7, #12]
 80176ee:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80176f2:	fb02 f303 	mul.w	r3, r2, r3
 80176f6:	68fa      	ldr	r2, [r7, #12]
 80176f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80176fc:	4413      	add	r3, r2
 80176fe:	461a      	mov	r2, r3
 8017700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017702:	4413      	add	r3, r2
 8017704:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8017706:	2300      	movs	r3, #0
 8017708:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801770c:	e017      	b.n	801773e <convert_cb+0x2cc>
            lv_memcpy(abuf, src_tmp8, dest_w);
 801770e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8017712:	461a      	mov	r2, r3
 8017714:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017716:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017718:	f008 fdce 	bl	80202b8 <lv_memcpy>
            abuf += dest_w;
 801771c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8017720:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017722:	4413      	add	r3, r2
 8017724:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_stride;
 8017726:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801772a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801772c:	4413      	add	r3, r2
 801772e:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8017730:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8017734:	b29b      	uxth	r3, r3
 8017736:	3301      	adds	r3, #1
 8017738:	b29b      	uxth	r3, r3
 801773a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801773e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017742:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8017746:	429a      	cmp	r2, r3
 8017748:	dbe1      	blt.n	801770e <convert_cb+0x29c>
}
 801774a:	e000      	b.n	801774e <convert_cb+0x2dc>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801774c:	bf00      	nop
}
 801774e:	bf00      	nop
 8017750:	374c      	adds	r7, #76	; 0x4c
 8017752:	46bd      	mov	sp, r7
 8017754:	bd90      	pop	{r4, r7, pc}

08017756 <lv_area_get_width>:
{
 8017756:	b480      	push	{r7}
 8017758:	b083      	sub	sp, #12
 801775a:	af00      	add	r7, sp, #0
 801775c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017764:	b29a      	uxth	r2, r3
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f9b3 3000 	ldrsh.w	r3, [r3]
 801776c:	b29b      	uxth	r3, r3
 801776e:	1ad3      	subs	r3, r2, r3
 8017770:	b29b      	uxth	r3, r3
 8017772:	3301      	adds	r3, #1
 8017774:	b29b      	uxth	r3, r3
 8017776:	b21b      	sxth	r3, r3
}
 8017778:	4618      	mov	r0, r3
 801777a:	370c      	adds	r7, #12
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr

08017784 <lv_area_get_height>:
{
 8017784:	b480      	push	{r7}
 8017786:	b083      	sub	sp, #12
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017792:	b29a      	uxth	r2, r3
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801779a:	b29b      	uxth	r3, r3
 801779c:	1ad3      	subs	r3, r2, r3
 801779e:	b29b      	uxth	r3, r3
 80177a0:	3301      	adds	r3, #1
 80177a2:	b29b      	uxth	r3, r3
 80177a4:	b21b      	sxth	r3, r3
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	370c      	adds	r7, #12
 80177aa:	46bd      	mov	sp, r7
 80177ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b0:	4770      	bx	lr

080177b2 <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 80177b2:	b580      	push	{r7, lr}
 80177b4:	b08a      	sub	sp, #40	; 0x28
 80177b6:	af00      	add	r7, sp, #0
 80177b8:	60f8      	str	r0, [r7, #12]
 80177ba:	60b9      	str	r1, [r7, #8]
 80177bc:	4613      	mov	r3, r2
 80177be:	71fb      	strb	r3, [r7, #7]
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 80177c0:	79fb      	ldrb	r3, [r7, #7]
 80177c2:	f003 0301 	and.w	r3, r3, #1
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d001      	beq.n	80177ce <lv_draw_sw_layer_create+0x1c>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 80177ca:	2300      	movs	r3, #0
 80177cc:	e0df      	b.n	801798e <lv_draw_sw_layer_create+0x1dc>
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 80177ce:	68bb      	ldr	r3, [r7, #8]
 80177d0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 80177d2:	79fb      	ldrb	r3, [r7, #7]
 80177d4:	f003 0301 	and.w	r3, r3, #1
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d001      	beq.n	80177e0 <lv_draw_sw_layer_create+0x2e>
 80177dc:	2302      	movs	r3, #2
 80177de:	e000      	b.n	80177e2 <lv_draw_sw_layer_create+0x30>
 80177e0:	2301      	movs	r3, #1
 80177e2:	623b      	str	r3, [r7, #32]
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 80177e4:	79fb      	ldrb	r3, [r7, #7]
 80177e6:	f003 0302 	and.w	r3, r3, #2
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d074      	beq.n	80178d8 <lv_draw_sw_layer_create+0x126>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 80177ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80177f2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80177f6:	f361 031e 	bfi	r3, r1, #0, #31
 80177fa:	6293      	str	r3, [r2, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 80177fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fe:	4618      	mov	r0, r3
 8017800:	f007 f81f 	bl	801e842 <lv_area_get_size>
 8017804:	4602      	mov	r2, r0
 8017806:	6a3b      	ldr	r3, [r7, #32]
 8017808:	fb02 f303 	mul.w	r3, r2, r3
 801780c:	61bb      	str	r3, [r7, #24]
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 801780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017812:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8017816:	461a      	mov	r2, r3
 8017818:	69bb      	ldr	r3, [r7, #24]
 801781a:	4293      	cmp	r3, r2
 801781c:	d207      	bcs.n	801782e <lv_draw_sw_layer_create+0x7c>
 801781e:	69bb      	ldr	r3, [r7, #24]
 8017820:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017826:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8017828:	f361 031e 	bfi	r3, r1, #0, #31
 801782c:	6293      	str	r3, [r2, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 801782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017832:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8017836:	4618      	mov	r0, r3
 8017838:	f008 fbb0 	bl	801ff9c <lv_mem_alloc>
 801783c:	4602      	mov	r2, r0
 801783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017840:	615a      	str	r2, [r3, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8017842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017844:	695b      	ldr	r3, [r3, #20]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d116      	bne.n	8017878 <lv_draw_sw_layer_create+0xc6>
            LV_LOG_WARN("Cannot allocate %"LV_PRIu32" bytes for layer buffer. Allocating %"LV_PRIu32" bytes instead. (Reduced performance)",
                        (uint32_t)layer_sw_ctx->buf_size_bytes, (uint32_t)LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE * px_size);
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 801784a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801784c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801784e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8017852:	f361 031e 	bfi	r3, r1, #0, #31
 8017856:	6293      	str	r3, [r2, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8017858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801785c:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8017860:	4618      	mov	r0, r3
 8017862:	f008 fb9b 	bl	801ff9c <lv_mem_alloc>
 8017866:	4602      	mov	r2, r0
 8017868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801786a:	615a      	str	r2, [r3, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 801786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801786e:	695b      	ldr	r3, [r3, #20]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d101      	bne.n	8017878 <lv_draw_sw_layer_create+0xc6>
                return NULL;
 8017874:	2300      	movs	r3, #0
 8017876:	e08a      	b.n	801798e <lv_draw_sw_layer_create+0x1dc>
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8017878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801787a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801787c:	3308      	adds	r3, #8
 801787e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017882:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 8017886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017888:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801788e:	81da      	strh	r2, [r3, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
 8017890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017892:	3308      	adds	r3, #8
 8017894:	4618      	mov	r0, r3
 8017896:	f7ff ff5e 	bl	8017756 <lv_area_get_width>
 801789a:	4603      	mov	r3, r0
 801789c:	82fb      	strh	r3, [r7, #22]
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 801789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178a2:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80178a6:	461a      	mov	r2, r3
 80178a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80178ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	da00      	bge.n	80178b6 <lv_draw_sw_layer_create+0x104>
 80178b4:	3301      	adds	r3, #1
 80178b6:	105b      	asrs	r3, r3, #1
 80178b8:	b21a      	sxth	r2, r3
 80178ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178bc:	821a      	strh	r2, [r3, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 80178be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178c2:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80178c6:	461a      	mov	r2, r3
 80178c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80178cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80178d0:	b21a      	sxth	r2, r3
 80178d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d4:	825a      	strh	r2, [r3, #18]
 80178d6:	e059      	b.n	801798c <lv_draw_sw_layer_create+0x1da>
    }
    else {
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 80178d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178dc:	3308      	adds	r3, #8
 80178de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178e2:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 80178e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e8:	4618      	mov	r0, r3
 80178ea:	f006 ffaa 	bl	801e842 <lv_area_get_size>
 80178ee:	4603      	mov	r3, r0
 80178f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80178f4:	6a3a      	ldr	r2, [r7, #32]
 80178f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80178fa:	fb03 f202 	mul.w	r2, r3, r2
 80178fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8017902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017904:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8017906:	f362 031e 	bfi	r3, r2, #0, #31
 801790a:	628b      	str	r3, [r1, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 801790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017910:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8017914:	4618      	mov	r0, r3
 8017916:	f008 fb41 	bl	801ff9c <lv_mem_alloc>
 801791a:	4602      	mov	r2, r0
 801791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801791e:	615a      	str	r2, [r3, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8017920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017922:	695a      	ldr	r2, [r3, #20]
 8017924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017928:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801792c:	4619      	mov	r1, r3
 801792e:	4610      	mov	r0, r2
 8017930:	f008 ff68 	bl	8020804 <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8017934:	79fb      	ldrb	r3, [r7, #7]
 8017936:	f003 0301 	and.w	r3, r3, #1
 801793a:	b2d9      	uxtb	r1, r3
 801793c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801793e:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8017942:	f361 13c7 	bfi	r3, r1, #7, #1
 8017946:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 801794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794c:	695b      	ldr	r3, [r3, #20]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d101      	bne.n	8017956 <lv_draw_sw_layer_create+0x1a4>
            return NULL;
 8017952:	2300      	movs	r3, #0
 8017954:	e01b      	b.n	801798e <lv_draw_sw_layer_create+0x1dc>
        }

        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 8017956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017958:	695a      	ldr	r2, [r3, #20]
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	601a      	str	r2, [r3, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 801795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017960:	f103 0208 	add.w	r2, r3, #8
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 8017968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796a:	f103 0208 	add.w	r2, r3, #8
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	609a      	str	r2, [r3, #8]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8017972:	f7f5 f815 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 8017976:	61f8      	str	r0, [r7, #28]
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8017978:	69fb      	ldr	r3, [r7, #28]
 801797a:	681a      	ldr	r2, [r3, #0]
 801797c:	79fb      	ldrb	r3, [r7, #7]
 801797e:	f003 0301 	and.w	r3, r3, #1
 8017982:	b2d9      	uxtb	r1, r3
 8017984:	7c13      	ldrb	r3, [r2, #16]
 8017986:	f361 1386 	bfi	r3, r1, #6, #1
 801798a:	7413      	strb	r3, [r2, #16]
    }

    return layer_ctx;
 801798c:	68bb      	ldr	r3, [r7, #8]
}
 801798e:	4618      	mov	r0, r3
 8017990:	3728      	adds	r7, #40	; 0x28
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}

08017996 <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 8017996:	b580      	push	{r7, lr}
 8017998:	b086      	sub	sp, #24
 801799a:	af00      	add	r7, sp, #0
 801799c:	60f8      	str	r0, [r7, #12]
 801799e:	60b9      	str	r1, [r7, #8]
 80179a0:	4613      	mov	r3, r2
 80179a2:	71fb      	strb	r3, [r7, #7]

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	617b      	str	r3, [r7, #20]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80179a8:	f7f4 fffa 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 80179ac:	6138      	str	r0, [r7, #16]
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 80179ae:	79fb      	ldrb	r3, [r7, #7]
 80179b0:	f003 0301 	and.w	r3, r3, #1
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d017      	beq.n	80179e8 <lv_draw_sw_layer_adjust+0x52>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	695a      	ldr	r2, [r3, #20]
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179c0:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80179c4:	4619      	mov	r1, r3
 80179c6:	4610      	mov	r0, r2
 80179c8:	f008 ff1c 	bl	8020804 <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 80179cc:	697a      	ldr	r2, [r7, #20]
 80179ce:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 80179d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179d6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 80179da:	693b      	ldr	r3, [r7, #16]
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	7c13      	ldrb	r3, [r2, #16]
 80179e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179e4:	7413      	strb	r3, [r2, #16]
 80179e6:	e00c      	b.n	8017a02 <lv_draw_sw_layer_adjust+0x6c>
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 80179e8:	697a      	ldr	r2, [r7, #20]
 80179ea:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 80179ee:	f36f 13c7 	bfc	r3, #7, #1
 80179f2:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	681a      	ldr	r2, [r3, #0]
 80179fa:	7c13      	ldrb	r3, [r2, #16]
 80179fc:	f36f 1386 	bfc	r3, #6, #1
 8017a00:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 8017a02:	68bb      	ldr	r3, [r7, #8]
 8017a04:	695a      	ldr	r2, [r3, #20]
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 8017a0a:	68bb      	ldr	r3, [r7, #8]
 8017a0c:	f103 0208 	add.w	r2, r3, #8
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 8017a14:	68bb      	ldr	r3, [r7, #8]
 8017a16:	f103 0208 	add.w	r2, r3, #8
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	609a      	str	r2, [r3, #8]
}
 8017a1e:	bf00      	nop
 8017a20:	3718      	adds	r7, #24
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}

08017a26 <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 8017a26:	b580      	push	{r7, lr}
 8017a28:	b08a      	sub	sp, #40	; 0x28
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	60f8      	str	r0, [r7, #12]
 8017a2e:	60b9      	str	r1, [r7, #8]
 8017a30:	607a      	str	r2, [r7, #4]
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	627b      	str	r3, [r7, #36]	; 0x24

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	61fb      	str	r3, [r7, #28]
    img.header.always_zero = 0;
 8017a3c:	7d3b      	ldrb	r3, [r7, #20]
 8017a3e:	f36f 1347 	bfc	r3, #5, #3
 8017a42:	753b      	strb	r3, [r7, #20]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	685b      	ldr	r3, [r3, #4]
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7ff fe84 	bl	8017756 <lv_area_get_width>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017a54:	b29a      	uxth	r2, r3
 8017a56:	697b      	ldr	r3, [r7, #20]
 8017a58:	f362 2394 	bfi	r3, r2, #10, #11
 8017a5c:	617b      	str	r3, [r7, #20]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	685b      	ldr	r3, [r3, #4]
 8017a62:	4618      	mov	r0, r3
 8017a64:	f7ff fe8e 	bl	8017784 <lv_area_get_height>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017a6e:	b29a      	uxth	r2, r3
 8017a70:	8afb      	ldrh	r3, [r7, #22]
 8017a72:	f362 134f 	bfi	r3, r2, #5, #11
 8017a76:	82fb      	strh	r3, [r7, #22]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8017a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017a7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017a82:	b2db      	uxtb	r3, r3
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d001      	beq.n	8017a8c <lv_draw_sw_layer_blend+0x66>
 8017a88:	2205      	movs	r2, #5
 8017a8a:	e000      	b.n	8017a8e <lv_draw_sw_layer_blend+0x68>
 8017a8c:	2204      	movs	r2, #4
 8017a8e:	7d3b      	ldrb	r3, [r7, #20]
 8017a90:	f362 0304 	bfi	r3, r2, #0, #5
 8017a94:	753b      	strb	r3, [r7, #20]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	6a1a      	ldr	r2, [r3, #32]
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8017a9e:	68bb      	ldr	r3, [r7, #8]
 8017aa0:	69da      	ldr	r2, [r3, #28]
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	699a      	ldr	r2, [r3, #24]
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8017aae:	f7f4 ff77 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 8017ab2:	6238      	str	r0, [r7, #32]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8017ab4:	6a3b      	ldr	r3, [r7, #32]
 8017ab6:	681a      	ldr	r2, [r3, #0]
 8017ab8:	68bb      	ldr	r3, [r7, #8]
 8017aba:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8017abe:	7c13      	ldrb	r3, [r2, #16]
 8017ac0:	f361 1386 	bfi	r3, r1, #6, #1
 8017ac4:	7413      	strb	r3, [r2, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	f103 0208 	add.w	r2, r3, #8
 8017acc:	f107 0314 	add.w	r3, r7, #20
 8017ad0:	6879      	ldr	r1, [r7, #4]
 8017ad2:	68f8      	ldr	r0, [r7, #12]
 8017ad4:	f7f6 fcd2 	bl	800e47c <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 8017ad8:	68f8      	ldr	r0, [r7, #12]
 8017ada:	f7f6 fc25 	bl	800e328 <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 8017ade:	f107 0314 	add.w	r3, r7, #20
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f7fa fd92 	bl	801260c <lv_img_cache_invalidate_src>
}
 8017ae8:	bf00      	nop
 8017aea:	3728      	adds	r7, #40	; 0x28
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}

08017af0 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b082      	sub	sp, #8
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
 8017af8:	6039      	str	r1, [r7, #0]
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	695b      	ldr	r3, [r3, #20]
 8017afe:	4618      	mov	r0, r3
 8017b00:	f008 fa7c 	bl	801fffc <lv_mem_free>
}
 8017b04:	bf00      	nop
 8017b06:	3708      	adds	r7, #8
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}

08017b0c <lv_area_copy>:
{
 8017b0c:	b480      	push	{r7}
 8017b0e:	b083      	sub	sp, #12
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8017b20:	683b      	ldr	r3, [r7, #0]
 8017b22:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8017b2a:	683b      	ldr	r3, [r7, #0]
 8017b2c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8017b34:	683b      	ldr	r3, [r7, #0]
 8017b36:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	80da      	strh	r2, [r3, #6]
}
 8017b3e:	bf00      	nop
 8017b40:	370c      	adds	r7, #12
 8017b42:	46bd      	mov	sp, r7
 8017b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b48:	4770      	bx	lr

08017b4a <lv_area_get_width>:
{
 8017b4a:	b480      	push	{r7}
 8017b4c:	b083      	sub	sp, #12
 8017b4e:	af00      	add	r7, sp, #0
 8017b50:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017b58:	b29a      	uxth	r2, r3
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b60:	b29b      	uxth	r3, r3
 8017b62:	1ad3      	subs	r3, r2, r3
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	3301      	adds	r3, #1
 8017b68:	b29b      	uxth	r3, r3
 8017b6a:	b21b      	sxth	r3, r3
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	370c      	adds	r7, #12
 8017b70:	46bd      	mov	sp, r7
 8017b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b76:	4770      	bx	lr

08017b78 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 8017b78:	b590      	push	{r4, r7, lr}
 8017b7a:	b09d      	sub	sp, #116	; 0x74
 8017b7c:	af02      	add	r7, sp, #8
 8017b7e:	60f8      	str	r0, [r7, #12]
 8017b80:	60b9      	str	r1, [r7, #8]
 8017b82:	607a      	str	r2, [r7, #4]
 8017b84:	603b      	str	r3, [r7, #0]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	6818      	ldr	r0, [r3, #0]
 8017b8a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8017b8e:	2300      	movs	r3, #0
 8017b90:	683a      	ldr	r2, [r7, #0]
 8017b92:	f005 fcfc 	bl	801d58e <lv_font_get_glyph_dsc>
 8017b96:	4603      	mov	r3, r0
 8017b98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(g_ret == false) {
 8017b9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017ba0:	f083 0301 	eor.w	r3, r3, #1
 8017ba4:	b2db      	uxtb	r3, r3
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d05c      	beq.n	8017c64 <lv_draw_sw_letter+0xec>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	2b1f      	cmp	r3, #31
 8017bae:	f240 80cf 	bls.w	8017d50 <lv_draw_sw_letter+0x1d8>
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8017bb8:	4293      	cmp	r3, r2
 8017bba:	f000 80c9 	beq.w	8017d50 <lv_draw_sw_letter+0x1d8>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 8017bbe:	683b      	ldr	r3, [r7, #0]
 8017bc0:	f242 020c 	movw	r2, #8204	; 0x200c
 8017bc4:	4293      	cmp	r3, r2
 8017bc6:	f000 80c3 	beq.w	8017d50 <lv_draw_sw_letter+0x1d8>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017bd0:	b29a      	uxth	r2, r3
 8017bd2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	4413      	add	r3, r2
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017be6:	b29a      	uxth	r2, r3
 8017be8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8017bec:	b29b      	uxth	r3, r3
 8017bee:	4413      	add	r3, r2
 8017bf0:	b29b      	uxth	r3, r3
 8017bf2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 8017bf6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8017bfa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8017bfe:	4413      	add	r3, r2
 8017c00:	b29b      	uxth	r3, r3
 8017c02:	b21c      	sxth	r4, r3
 8017c04:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8017c08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8017c0c:	4413      	add	r3, r2
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	b21b      	sxth	r3, r3
 8017c12:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8017c16:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 8017c1a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017c1e:	9300      	str	r3, [sp, #0]
 8017c20:	4623      	mov	r3, r4
 8017c22:	f006 fdd7 	bl	801e7d4 <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 8017c26:	f107 0310 	add.w	r3, r7, #16
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7fa fb5a 	bl	80122e4 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8017c30:	2302      	movs	r3, #2
 8017c32:	74fb      	strb	r3, [r7, #19]
            glyph_dsc.outline_opa = LV_OPA_MIN;
 8017c34:	2302      	movs	r3, #2
 8017c36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 8017c3a:	2302      	movs	r3, #2
 8017c3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8017c40:	2302      	movs	r3, #2
 8017c42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            glyph_dsc.border_color = dsc->color;
 8017c46:	68bb      	ldr	r3, [r7, #8]
 8017c48:	7b1b      	ldrb	r3, [r3, #12]
 8017c4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            glyph_dsc.border_width = 1;
 8017c4e:	2301      	movs	r3, #1
 8017c50:	857b      	strh	r3, [r7, #42]	; 0x2a
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	68db      	ldr	r3, [r3, #12]
 8017c56:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017c5a:	f107 0110 	add.w	r1, r7, #16
 8017c5e:	68f8      	ldr	r0, [r7, #12]
 8017c60:	4798      	blx	r3
#endif
        }
        return;
 8017c62:	e075      	b.n	8017d50 <lv_draw_sw_letter+0x1d8>
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8017c64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d073      	beq.n	8017d54 <lv_draw_sw_letter+0x1dc>
 8017c6c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d06f      	beq.n	8017d54 <lv_draw_sw_letter+0x1dc>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c7a:	b29a      	uxth	r2, r3
 8017c7c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8017c80:	b29b      	uxth	r3, r3
 8017c82:	4413      	add	r3, r2
 8017c84:	b29b      	uxth	r3, r3
 8017c86:	b21b      	sxth	r3, r3
 8017c88:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017c92:	b29a      	uxth	r2, r3
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8017c9c:	b299      	uxth	r1, r3
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	1acb      	subs	r3, r1, r3
 8017caa:	b29b      	uxth	r3, r3
 8017cac:	4413      	add	r3, r2
 8017cae:	b29a      	uxth	r2, r3
 8017cb0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8017cb4:	1ad3      	subs	r3, r2, r3
 8017cb6:	b29a      	uxth	r2, r3
 8017cb8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8017cbc:	b29b      	uxth	r3, r3
 8017cbe:	1ad3      	subs	r3, r2, r3
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	b21b      	sxth	r3, r3
 8017cc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8017cc8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8017ccc:	461a      	mov	r2, r3
 8017cce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8017cd2:	4413      	add	r3, r2
 8017cd4:	68fa      	ldr	r2, [r7, #12]
 8017cd6:	6892      	ldr	r2, [r2, #8]
 8017cd8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	db3b      	blt.n	8017d58 <lv_draw_sw_letter+0x1e0>
       gpos.x > draw_ctx->clip_area->x2 ||
 8017ce0:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	689b      	ldr	r3, [r3, #8]
 8017ce8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8017cec:	429a      	cmp	r2, r3
 8017cee:	dc33      	bgt.n	8017d58 <lv_draw_sw_letter+0x1e0>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8017cf0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8017cf4:	461a      	mov	r2, r3
 8017cf6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8017cfa:	4413      	add	r3, r2
 8017cfc:	68fa      	ldr	r2, [r7, #12]
 8017cfe:	6892      	ldr	r2, [r2, #8]
 8017d00:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 8017d04:	4293      	cmp	r3, r2
 8017d06:	db27      	blt.n	8017d58 <lv_draw_sw_letter+0x1e0>
       gpos.y > draw_ctx->clip_area->y2)  {
 8017d08:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	689b      	ldr	r3, [r3, #8]
 8017d10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8017d14:	429a      	cmp	r2, r3
 8017d16:	dc1f      	bgt.n	8017d58 <lv_draw_sw_letter+0x1e0>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 8017d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d1a:	6839      	ldr	r1, [r7, #0]
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f005 fc23 	bl	801d568 <lv_font_get_glyph_bitmap>
 8017d22:	6638      	str	r0, [r7, #96]	; 0x60
    if(map_p == NULL) {
 8017d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d018      	beq.n	8017d5c <lv_draw_sw_letter+0x1e4>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 8017d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d2c:	7b1b      	ldrb	r3, [r3, #12]
 8017d2e:	f003 0303 	and.w	r3, r3, #3
 8017d32:	b2db      	uxtb	r3, r3
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d112      	bne.n	8017d5e <lv_draw_sw_letter+0x1e6>
#else
        LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
 8017d38:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8017d3c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	460b      	mov	r3, r1
 8017d46:	68b9      	ldr	r1, [r7, #8]
 8017d48:	68f8      	ldr	r0, [r7, #12]
 8017d4a:	f000 f80b 	bl	8017d64 <draw_letter_normal>
 8017d4e:	e006      	b.n	8017d5e <lv_draw_sw_letter+0x1e6>
        return;
 8017d50:	bf00      	nop
 8017d52:	e004      	b.n	8017d5e <lv_draw_sw_letter+0x1e6>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8017d54:	bf00      	nop
 8017d56:	e002      	b.n	8017d5e <lv_draw_sw_letter+0x1e6>
        return;
 8017d58:	bf00      	nop
 8017d5a:	e000      	b.n	8017d5e <lv_draw_sw_letter+0x1e6>
        return;
 8017d5c:	bf00      	nop
    }
}
 8017d5e:	376c      	adds	r7, #108	; 0x6c
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd90      	pop	{r4, r7, pc}

08017d64 <draw_letter_normal>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                                     const lv_point_t * pos, lv_font_glyph_dsc_t * g, const uint8_t * map_p)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b0aa      	sub	sp, #168	; 0xa8
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	60f8      	str	r0, [r7, #12]
 8017d6c:	60b9      	str	r1, [r7, #8]
 8017d6e:	607a      	str	r2, [r7, #4]
 8017d70:	603b      	str	r3, [r7, #0]

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 8017d72:	683b      	ldr	r3, [r7, #0]
 8017d74:	7b9b      	ldrb	r3, [r3, #14]
 8017d76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    lv_opa_t opa = dsc->opa;
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	7e1b      	ldrb	r3, [r3, #24]
 8017d84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 8017d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017d8c:	2b03      	cmp	r3, #3
 8017d8e:	d102      	bne.n	8017d96 <draw_letter_normal+0x32>
 8017d90:	2304      	movs	r3, #4
 8017d92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 8017d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017d9a:	3b01      	subs	r3, #1
 8017d9c:	2b07      	cmp	r3, #7
 8017d9e:	f200 8287 	bhi.w	80182b0 <draw_letter_normal+0x54c>
 8017da2:	a201      	add	r2, pc, #4	; (adr r2, 8017da8 <draw_letter_normal+0x44>)
 8017da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017da8:	08017dc9 	.word	0x08017dc9
 8017dac:	08017ddd 	.word	0x08017ddd
 8017db0:	080182b1 	.word	0x080182b1
 8017db4:	08017df1 	.word	0x08017df1
 8017db8:	080182b1 	.word	0x080182b1
 8017dbc:	080182b1 	.word	0x080182b1
 8017dc0:	080182b1 	.word	0x080182b1
 8017dc4:	08017e05 	.word	0x08017e05
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8017dc8:	4b6a      	ldr	r3, [pc, #424]	; (8017f74 <draw_letter_normal+0x210>)
 8017dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0x80;
 8017dce:	2380      	movs	r3, #128	; 0x80
 8017dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 2;
 8017dd4:	2302      	movs	r3, #2
 8017dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8017dda:	e01e      	b.n	8017e1a <draw_letter_normal+0xb6>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 8017ddc:	4b66      	ldr	r3, [pc, #408]	; (8017f78 <draw_letter_normal+0x214>)
 8017dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xC0;
 8017de2:	23c0      	movs	r3, #192	; 0xc0
 8017de4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 4;
 8017de8:	2304      	movs	r3, #4
 8017dea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8017dee:	e014      	b.n	8017e1a <draw_letter_normal+0xb6>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8017df0:	4b62      	ldr	r3, [pc, #392]	; (8017f7c <draw_letter_normal+0x218>)
 8017df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xF0;
 8017df6:	23f0      	movs	r3, #240	; 0xf0
 8017df8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 16;
 8017dfc:	2310      	movs	r3, #16
 8017dfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8017e02:	e00a      	b.n	8017e1a <draw_letter_normal+0xb6>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 8017e04:	4b5e      	ldr	r3, [pc, #376]	; (8017f80 <draw_letter_normal+0x21c>)
 8017e06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xFF;
 8017e0a:	23ff      	movs	r3, #255	; 0xff
 8017e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 256;
 8017e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017e14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;       /*No opa table, pixel value will be used directly*/
 8017e18:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 8017e1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017e1e:	2bfc      	cmp	r3, #252	; 0xfc
 8017e20:	d842      	bhi.n	8017ea8 <draw_letter_normal+0x144>
        if(prev_opa != opa || prev_bpp != bpp) {
 8017e22:	4b58      	ldr	r3, [pc, #352]	; (8017f84 <draw_letter_normal+0x220>)
 8017e24:	781b      	ldrb	r3, [r3, #0]
 8017e26:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d105      	bne.n	8017e3a <draw_letter_normal+0xd6>
 8017e2e:	4b56      	ldr	r3, [pc, #344]	; (8017f88 <draw_letter_normal+0x224>)
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d02b      	beq.n	8017e92 <draw_letter_normal+0x12e>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017e40:	e021      	b.n	8017e86 <draw_letter_normal+0x122>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 8017e42:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8017e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017e4a:	4413      	add	r3, r2
 8017e4c:	781b      	ldrb	r3, [r3, #0]
 8017e4e:	2bff      	cmp	r3, #255	; 0xff
 8017e50:	d00d      	beq.n	8017e6e <draw_letter_normal+0x10a>
 8017e52:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8017e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017e5a:	4413      	add	r3, r2
 8017e5c:	781b      	ldrb	r3, [r3, #0]
 8017e5e:	461a      	mov	r2, r3
 8017e60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017e64:	fb02 f303 	mul.w	r3, r2, r3
 8017e68:	121b      	asrs	r3, r3, #8
 8017e6a:	b2db      	uxtb	r3, r3
 8017e6c:	e001      	b.n	8017e72 <draw_letter_normal+0x10e>
 8017e6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017e72:	4946      	ldr	r1, [pc, #280]	; (8017f8c <draw_letter_normal+0x228>)
 8017e74:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017e78:	440a      	add	r2, r1
 8017e7a:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 8017e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017e80:	3301      	adds	r3, #1
 8017e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017e86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d3d7      	bcc.n	8017e42 <draw_letter_normal+0xde>
            }
        }
        bpp_opa_table_p = opa_table;
 8017e92:	4b3e      	ldr	r3, [pc, #248]	; (8017f8c <draw_letter_normal+0x228>)
 8017e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        prev_opa = opa;
 8017e98:	4a3a      	ldr	r2, [pc, #232]	; (8017f84 <draw_letter_normal+0x220>)
 8017e9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017e9e:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 8017ea0:	4a39      	ldr	r2, [pc, #228]	; (8017f88 <draw_letter_normal+0x224>)
 8017ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017ea6:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 8017ea8:	683b      	ldr	r3, [r7, #0]
 8017eaa:	88db      	ldrh	r3, [r3, #6]
 8017eac:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t box_h = g->box_h;
 8017eae:	683b      	ldr	r3, [r7, #0]
 8017eb0:	891b      	ldrh	r3, [r3, #8]
 8017eb2:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8017eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017eb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8017eba:	fb02 f303 	mul.w	r3, r2, r3
 8017ebe:	673b      	str	r3, [r7, #112]	; 0x70

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	689b      	ldr	r3, [r3, #8]
 8017eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	da09      	bge.n	8017ee6 <draw_letter_normal+0x182>
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	689b      	ldr	r3, [r3, #8]
 8017ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017eda:	461a      	mov	r2, r3
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ee2:	1ad3      	subs	r3, r2, r3
 8017ee4:	e000      	b.n	8017ee8 <draw_letter_normal+0x184>
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ef0:	461a      	mov	r2, r3
 8017ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017ef4:	4413      	add	r3, r2
 8017ef6:	68fa      	ldr	r2, [r7, #12]
 8017ef8:	6892      	ldr	r2, [r2, #8]
 8017efa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8017efe:	4293      	cmp	r3, r2
 8017f00:	dd0a      	ble.n	8017f18 <draw_letter_normal+0x1b4>
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	689b      	ldr	r3, [r3, #8]
 8017f06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017f0a:	461a      	mov	r2, r3
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f12:	1ad3      	subs	r3, r2, r3
 8017f14:	3301      	adds	r3, #1
 8017f16:	e000      	b.n	8017f1a <draw_letter_normal+0x1b6>
 8017f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017f1a:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	689b      	ldr	r3, [r3, #8]
 8017f26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	da09      	bge.n	8017f42 <draw_letter_normal+0x1de>
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	689b      	ldr	r3, [r3, #8]
 8017f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f36:	461a      	mov	r2, r3
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f3e:	1ad3      	subs	r3, r2, r3
 8017f40:	e000      	b.n	8017f44 <draw_letter_normal+0x1e0>
 8017f42:	2300      	movs	r3, #0
 8017f44:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017f50:	4413      	add	r3, r2
 8017f52:	68fa      	ldr	r2, [r7, #12]
 8017f54:	6892      	ldr	r2, [r2, #8]
 8017f56:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8017f5a:	4293      	cmp	r3, r2
 8017f5c:	dd18      	ble.n	8017f90 <draw_letter_normal+0x22c>
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	689b      	ldr	r3, [r3, #8]
 8017f62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017f66:	461a      	mov	r2, r3
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f6e:	1ad3      	subs	r3, r2, r3
 8017f70:	3301      	adds	r3, #1
 8017f72:	e00e      	b.n	8017f92 <draw_letter_normal+0x22e>
 8017f74:	08022c84 	.word	0x08022c84
 8017f78:	08022c88 	.word	0x08022c88
 8017f7c:	08022c8c 	.word	0x08022c8c
 8017f80:	08022c9c 	.word	0x08022c9c
 8017f84:	200006bd 	.word	0x200006bd
 8017f88:	200006c0 	.word	0x200006c0
 8017f8c:	200006c4 	.word	0x200006c4
 8017f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017f92:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8017f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017f98:	fb02 f303 	mul.w	r3, r2, r3
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017fa0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8017fa4:	fb02 f303 	mul.w	r3, r2, r3
 8017fa8:	440b      	add	r3, r1
 8017faa:	65fb      	str	r3, [r7, #92]	; 0x5c
    map_p += bit_ofs >> 3;
 8017fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017fae:	08db      	lsrs	r3, r3, #3
 8017fb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017fb4:	4413      	add	r3, r2
 8017fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 8017fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017fbc:	f003 0307 	and.w	r3, r3, #7
 8017fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8017fc4:	f107 0320 	add.w	r3, r7, #32
 8017fc8:	211c      	movs	r1, #28
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f008 fc1a 	bl	8020804 <lv_memset_00>
    blend_dsc.color = dsc->color;
 8017fd0:	68bb      	ldr	r3, [r7, #8]
 8017fd2:	7b1b      	ldrb	r3, [r3, #12]
 8017fd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    blend_dsc.opa = dsc->opa;
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	7e1b      	ldrb	r3, [r3, #24]
 8017fdc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    blend_dsc.blend_mode = dsc->blend_mode;
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	7f1b      	ldrb	r3, [r3, #28]
 8017fe4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8017fe8:	b2db      	uxtb	r3, r3
 8017fea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8017fee:	f7f4 fcd7 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f005 fffd 	bl	801dff4 <lv_disp_get_hor_res>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8018000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018002:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018004:	fb03 f202 	mul.w	r2, r3, r2
 8018008:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801800c:	4293      	cmp	r3, r2
 801800e:	bfa8      	it	ge
 8018010:	4613      	movge	r3, r2
 8018012:	657b      	str	r3, [r7, #84]	; 0x54
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8018014:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018016:	f008 f84b 	bl	80200b0 <lv_mem_buf_get>
 801801a:	6538      	str	r0, [r7, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 801801c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801801e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 8018020:	2300      	movs	r3, #0
 8018022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	f9b3 3000 	ldrsh.w	r3, [r3]
 801802c:	b29a      	uxth	r2, r3
 801802e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018030:	b29b      	uxth	r3, r3
 8018032:	4413      	add	r3, r2
 8018034:	b29b      	uxth	r3, r3
 8018036:	b21b      	sxth	r3, r3
 8018038:	833b      	strh	r3, [r7, #24]
    fill_area.x2 = col_end  + pos->x - 1;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018040:	b29a      	uxth	r2, r3
 8018042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018044:	b29b      	uxth	r3, r3
 8018046:	4413      	add	r3, r2
 8018048:	b29b      	uxth	r3, r3
 801804a:	3b01      	subs	r3, #1
 801804c:	b29b      	uxth	r3, r3
 801804e:	b21b      	sxth	r3, r3
 8018050:	83bb      	strh	r3, [r7, #28]
    fill_area.y1 = row_start + pos->y;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018058:	b29a      	uxth	r2, r3
 801805a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801805c:	b29b      	uxth	r3, r3
 801805e:	4413      	add	r3, r2
 8018060:	b29b      	uxth	r3, r3
 8018062:	b21b      	sxth	r3, r3
 8018064:	837b      	strh	r3, [r7, #26]
    fill_area.y2 = fill_area.y1;
 8018066:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801806a:	83fb      	strh	r3, [r7, #30]
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
 801806c:	f107 0318 	add.w	r3, r7, #24
 8018070:	4618      	mov	r0, r3
 8018072:	f7ff fd6a 	bl	8017b4a <lv_area_get_width>
 8018076:	4603      	mov	r3, r0
 8018078:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
 801807c:	f107 0218 	add.w	r2, r7, #24
 8018080:	f107 0310 	add.w	r3, r7, #16
 8018084:	4611      	mov	r1, r2
 8018086:	4618      	mov	r0, r3
 8018088:	f7ff fd40 	bl	8017b0c <lv_area_copy>
    mask_area.y2 = mask_area.y1 + row_end;
 801808c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018090:	b29a      	uxth	r2, r3
 8018092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018094:	b29b      	uxth	r3, r3
 8018096:	4413      	add	r3, r2
 8018098:	b29b      	uxth	r3, r3
 801809a:	b21b      	sxth	r3, r3
 801809c:	82fb      	strh	r3, [r7, #22]
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 801809e:	f107 0310 	add.w	r3, r7, #16
 80180a2:	4618      	mov	r0, r3
 80180a4:	f7f7 fe86 	bl	800fdb4 <lv_draw_mask_is_any>
 80180a8:	4603      	mov	r3, r0
 80180aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
#endif
    blend_dsc.blend_area = &fill_area;
 80180ae:	f107 0318 	add.w	r3, r7, #24
 80180b2:	623b      	str	r3, [r7, #32]
    blend_dsc.mask_area = &fill_area;
 80180b4:	f107 0318 	add.w	r3, r7, #24
 80180b8:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t col_bit_max = 8 - bpp;
 80180ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80180be:	f1c3 0308 	rsb	r3, r3, #8
 80180c2:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 80180c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80180c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180c8:	441a      	add	r2, r3
 80180ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80180cc:	1ad3      	subs	r3, r2, r3
 80180ce:	461a      	mov	r2, r3
 80180d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80180d4:	fb02 f303 	mul.w	r3, r2, r3
 80180d8:	647b      	str	r3, [r7, #68]	; 0x44

    for(row = row_start ; row < row_end; row++) {
 80180da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80180dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80180e0:	e0c3      	b.n	801826a <draw_letter_normal+0x506>
#if LV_DRAW_COMPLEX
        int32_t mask_p_start = mask_p;
 80180e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80180e6:	643b      	str	r3, [r7, #64]	; 0x40
#endif
        bitmask = bitmask_init >> col_bit;
 80180e8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80180ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80180f0:	fa22 f303 	lsr.w	r3, r2, r3
 80180f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        for(col = col_start; col < col_end; col++) {
 80180f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80180fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80180fe:	e04f      	b.n	80181a0 <draw_letter_normal+0x43c>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 8018100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018104:	781b      	ldrb	r3, [r3, #0]
 8018106:	461a      	mov	r2, r3
 8018108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801810c:	401a      	ands	r2, r3
 801810e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018114:	1acb      	subs	r3, r1, r3
 8018116:	fa22 f303 	lsr.w	r3, r2, r3
 801811a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(letter_px) {
 801811e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018122:	2b00      	cmp	r3, #0
 8018124:	d00b      	beq.n	801813e <draw_letter_normal+0x3da>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8018126:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801812a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801812e:	441a      	add	r2, r3
 8018130:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018134:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018136:	440b      	add	r3, r1
 8018138:	7812      	ldrb	r2, [r2, #0]
 801813a:	701a      	strb	r2, [r3, #0]
 801813c:	e005      	b.n	801814a <draw_letter_normal+0x3e6>
            }
            else {
                mask_buf[mask_p] = 0;
 801813e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018144:	4413      	add	r3, r2
 8018146:	2200      	movs	r2, #0
 8018148:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 801814a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801814e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018150:	429a      	cmp	r2, r3
 8018152:	d20f      	bcs.n	8018174 <draw_letter_normal+0x410>
                col_bit += bpp;
 8018154:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801815c:	4413      	add	r3, r2
 801815e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask >> bpp;
 8018162:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018166:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801816a:	fa22 f303 	lsr.w	r3, r2, r3
 801816e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018172:	e00b      	b.n	801818c <draw_letter_normal+0x428>
            }
            else {
                col_bit = 0;
 8018174:	2300      	movs	r3, #0
 8018176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask_init;
 801817a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801817e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                map_p++;
 8018182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018186:	3301      	adds	r3, #1
 8018188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            }

            /*Next mask byte*/
            mask_p++;
 801818c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018190:	3301      	adds	r3, #1
 8018192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        for(col = col_start; col < col_end; col++) {
 8018196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801819a:	3301      	adds	r3, #1
 801819c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80181a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80181a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80181a6:	429a      	cmp	r2, r3
 80181a8:	dbaa      	blt.n	8018100 <draw_letter_normal+0x39c>
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 80181aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d01a      	beq.n	80181e8 <draw_letter_normal+0x484>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 80181b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80181b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181b6:	18d0      	adds	r0, r2, r3
 80181b8:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 80181bc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80181c0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80181c4:	f7f7 fcf8 	bl	800fbb8 <lv_draw_mask_apply>
 80181c8:	4603      	mov	r3, r0
 80181ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                                    fill_w);
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80181ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d108      	bne.n	80181e8 <draw_letter_normal+0x484>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 80181d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80181d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181da:	4413      	add	r3, r2
 80181dc:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80181e0:	4611      	mov	r1, r2
 80181e2:	4618      	mov	r0, r3
 80181e4:	f008 fb0e 	bl	8020804 <lv_memset_00>
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80181e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80181ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80181ec:	1ad3      	subs	r3, r2, r3
 80181ee:	461a      	mov	r2, r3
 80181f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80181f4:	4413      	add	r3, r2
 80181f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d907      	bls.n	801820c <draw_letter_normal+0x4a8>
            fill_area.y2 ++;
 80181fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018200:	b29b      	uxth	r3, r3
 8018202:	3301      	adds	r3, #1
 8018204:	b29b      	uxth	r3, r3
 8018206:	b21b      	sxth	r3, r3
 8018208:	83fb      	strh	r3, [r7, #30]
 801820a:	e015      	b.n	8018238 <draw_letter_normal+0x4d4>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801820c:	2302      	movs	r3, #2
 801820e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018212:	f107 0320 	add.w	r3, r7, #32
 8018216:	4619      	mov	r1, r3
 8018218:	68f8      	ldr	r0, [r7, #12]
 801821a:	f7fd f89b 	bl	8015354 <lv_draw_sw_blend>

            fill_area.y1 = fill_area.y2 + 1;
 801821e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018222:	b29b      	uxth	r3, r3
 8018224:	3301      	adds	r3, #1
 8018226:	b29b      	uxth	r3, r3
 8018228:	b21b      	sxth	r3, r3
 801822a:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = fill_area.y1;
 801822c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8018230:	83fb      	strh	r3, [r7, #30]
            mask_p = 0;
 8018232:	2300      	movs	r3, #0
 8018234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }

        col_bit += col_bit_row_ofs;
 8018238:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801823c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801823e:	4413      	add	r3, r2
 8018240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        map_p += (col_bit >> 3);
 8018244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018248:	08db      	lsrs	r3, r3, #3
 801824a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801824e:	4413      	add	r3, r2
 8018250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 8018254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018258:	f003 0307 	and.w	r3, r3, #7
 801825c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
 8018260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018264:	3301      	adds	r3, #1
 8018266:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801826a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801826e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018270:	429a      	cmp	r2, r3
 8018272:	f6ff af36 	blt.w	80180e2 <draw_letter_normal+0x37e>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8018276:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801827a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801827e:	429a      	cmp	r2, r3
 8018280:	d012      	beq.n	80182a8 <draw_letter_normal+0x544>
        fill_area.y2--;
 8018282:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018286:	b29b      	uxth	r3, r3
 8018288:	3b01      	subs	r3, #1
 801828a:	b29b      	uxth	r3, r3
 801828c:	b21b      	sxth	r3, r3
 801828e:	83fb      	strh	r3, [r7, #30]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8018290:	2302      	movs	r3, #2
 8018292:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018296:	f107 0320 	add.w	r3, r7, #32
 801829a:	4619      	mov	r1, r3
 801829c:	68f8      	ldr	r0, [r7, #12]
 801829e:	f7fd f859 	bl	8015354 <lv_draw_sw_blend>
        mask_p = 0;
 80182a2:	2300      	movs	r3, #0
 80182a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    lv_mem_buf_release(mask_buf);
 80182a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80182aa:	f007 ffad 	bl	8020208 <lv_mem_buf_release>
 80182ae:	e000      	b.n	80182b2 <draw_letter_normal+0x54e>
            return; /*Invalid bpp. Can't render the letter*/
 80182b0:	bf00      	nop
}
 80182b2:	37a8      	adds	r7, #168	; 0xa8
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <lv_area_get_width>:
{
 80182b8:	b480      	push	{r7}
 80182ba:	b083      	sub	sp, #12
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80182c6:	b29a      	uxth	r2, r3
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80182ce:	b29b      	uxth	r3, r3
 80182d0:	1ad3      	subs	r3, r2, r3
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	3301      	adds	r3, #1
 80182d6:	b29b      	uxth	r3, r3
 80182d8:	b21b      	sxth	r3, r3
}
 80182da:	4618      	mov	r0, r3
 80182dc:	370c      	adds	r7, #12
 80182de:	46bd      	mov	sp, r7
 80182e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e4:	4770      	bx	lr

080182e6 <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 80182e6:	b580      	push	{r7, lr}
 80182e8:	b098      	sub	sp, #96	; 0x60
 80182ea:	af00      	add	r7, sp, #0
 80182ec:	60f8      	str	r0, [r7, #12]
 80182ee:	60b9      	str	r1, [r7, #8]
 80182f0:	607a      	str	r2, [r7, #4]
 80182f2:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	f000 8172 	beq.w	80185e4 <lv_draw_sw_line+0x2fe>
    if(dsc->opa <= LV_OPA_MIN) return;
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	7a1b      	ldrb	r3, [r3, #8]
 8018304:	2b02      	cmp	r3, #2
 8018306:	f240 816f 	bls.w	80185e8 <lv_draw_sw_line+0x302>

    if(point1->x == point2->x && point1->y == point2->y) return;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018316:	429a      	cmp	r2, r3
 8018318:	d108      	bne.n	801832c <lv_draw_sw_line+0x46>
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018320:	683b      	ldr	r3, [r7, #0]
 8018322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018326:	429a      	cmp	r2, r3
 8018328:	f000 8160 	beq.w	80185ec <lv_draw_sw_line+0x306>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 801832c:	683b      	ldr	r3, [r7, #0]
 801832e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018338:	4293      	cmp	r3, r2
 801833a:	bfa8      	it	ge
 801833c:	4613      	movge	r3, r2
 801833e:	b21b      	sxth	r3, r3
 8018340:	b29a      	uxth	r2, r3
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018348:	2b00      	cmp	r3, #0
 801834a:	da00      	bge.n	801834e <lv_draw_sw_line+0x68>
 801834c:	3301      	adds	r3, #1
 801834e:	105b      	asrs	r3, r3, #1
 8018350:	b21b      	sxth	r3, r3
 8018352:	b29b      	uxth	r3, r3
 8018354:	1ad3      	subs	r3, r2, r3
 8018356:	b29b      	uxth	r3, r3
 8018358:	b21b      	sxth	r3, r3
 801835a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f9b3 3000 	ldrsh.w	r3, [r3]
 801836a:	4293      	cmp	r3, r2
 801836c:	bfb8      	it	lt
 801836e:	4613      	movlt	r3, r2
 8018370:	b21b      	sxth	r3, r3
 8018372:	b29a      	uxth	r2, r3
 8018374:	68bb      	ldr	r3, [r7, #8]
 8018376:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801837a:	2b00      	cmp	r3, #0
 801837c:	da00      	bge.n	8018380 <lv_draw_sw_line+0x9a>
 801837e:	3301      	adds	r3, #1
 8018380:	105b      	asrs	r3, r3, #1
 8018382:	b21b      	sxth	r3, r3
 8018384:	b29b      	uxth	r3, r3
 8018386:	4413      	add	r3, r2
 8018388:	b29b      	uxth	r3, r3
 801838a:	b21b      	sxth	r3, r3
 801838c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 8018390:	683b      	ldr	r3, [r7, #0]
 8018392:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801839c:	4293      	cmp	r3, r2
 801839e:	bfa8      	it	ge
 80183a0:	4613      	movge	r3, r2
 80183a2:	b21b      	sxth	r3, r3
 80183a4:	b29a      	uxth	r2, r3
 80183a6:	68bb      	ldr	r3, [r7, #8]
 80183a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	da00      	bge.n	80183b2 <lv_draw_sw_line+0xcc>
 80183b0:	3301      	adds	r3, #1
 80183b2:	105b      	asrs	r3, r3, #1
 80183b4:	b21b      	sxth	r3, r3
 80183b6:	b29b      	uxth	r3, r3
 80183b8:	1ad3      	subs	r3, r2, r3
 80183ba:	b29b      	uxth	r3, r3
 80183bc:	b21b      	sxth	r3, r3
 80183be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80183ce:	4293      	cmp	r3, r2
 80183d0:	bfb8      	it	lt
 80183d2:	4613      	movlt	r3, r2
 80183d4:	b21b      	sxth	r3, r3
 80183d6:	b29a      	uxth	r2, r3
 80183d8:	68bb      	ldr	r3, [r7, #8]
 80183da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	da00      	bge.n	80183e4 <lv_draw_sw_line+0xfe>
 80183e2:	3301      	adds	r3, #1
 80183e4:	105b      	asrs	r3, r3, #1
 80183e6:	b21b      	sxth	r3, r3
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	4413      	add	r3, r2
 80183ec:	b29b      	uxth	r3, r3
 80183ee:	b21b      	sxth	r3, r3
 80183f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	689a      	ldr	r2, [r3, #8]
 80183f8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80183fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018400:	4618      	mov	r0, r3
 8018402:	f006 faab 	bl	801e95c <_lv_area_intersect>
 8018406:	4603      	mov	r3, r0
 8018408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(!is_common) return;
 801840c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018410:	f083 0301 	eor.w	r3, r3, #1
 8018414:	b2db      	uxtb	r3, r3
 8018416:	2b00      	cmp	r3, #0
 8018418:	f040 80ea 	bne.w	80185f0 <lv_draw_sw_line+0x30a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	689b      	ldr	r3, [r3, #8]
 8018420:	65bb      	str	r3, [r7, #88]	; 0x58
    draw_ctx->clip_area = &clip_line;
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018428:	609a      	str	r2, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018430:	683b      	ldr	r3, [r7, #0]
 8018432:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018436:	429a      	cmp	r2, r3
 8018438:	d106      	bne.n	8018448 <lv_draw_sw_line+0x162>
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	687a      	ldr	r2, [r7, #4]
 801843e:	68b9      	ldr	r1, [r7, #8]
 8018440:	68f8      	ldr	r0, [r7, #12]
 8018442:	f000 f8d9 	bl	80185f8 <draw_line_hor>
 8018446:	e014      	b.n	8018472 <lv_draw_sw_line+0x18c>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801844e:	683b      	ldr	r3, [r7, #0]
 8018450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018454:	429a      	cmp	r2, r3
 8018456:	d106      	bne.n	8018466 <lv_draw_sw_line+0x180>
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	687a      	ldr	r2, [r7, #4]
 801845c:	68b9      	ldr	r1, [r7, #8]
 801845e:	68f8      	ldr	r0, [r7, #12]
 8018460:	f000 fa2b 	bl	80188ba <draw_line_ver>
 8018464:	e005      	b.n	8018472 <lv_draw_sw_line+0x18c>
    else draw_line_skew(draw_ctx, dsc, point1, point2);
 8018466:	683b      	ldr	r3, [r7, #0]
 8018468:	687a      	ldr	r2, [r7, #4]
 801846a:	68b9      	ldr	r1, [r7, #8]
 801846c:	68f8      	ldr	r0, [r7, #12]
 801846e:	f000 fb55 	bl	8018b1c <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	7a5b      	ldrb	r3, [r3, #9]
 8018476:	f003 0308 	and.w	r3, r3, #8
 801847a:	b2db      	uxtb	r3, r3
 801847c:	2b00      	cmp	r3, #0
 801847e:	d107      	bne.n	8018490 <lv_draw_sw_line+0x1aa>
 8018480:	68bb      	ldr	r3, [r7, #8]
 8018482:	7a5b      	ldrb	r3, [r3, #9]
 8018484:	f003 0304 	and.w	r3, r3, #4
 8018488:	b2db      	uxtb	r3, r3
 801848a:	2b00      	cmp	r3, #0
 801848c:	f000 80a6 	beq.w	80185dc <lv_draw_sw_line+0x2f6>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 8018490:	f107 0310 	add.w	r3, r7, #16
 8018494:	4618      	mov	r0, r3
 8018496:	f7f9 ff25 	bl	80122e4 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	781b      	ldrb	r3, [r3, #0]
 801849e:	753b      	strb	r3, [r7, #20]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 80184a0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80184a4:	823b      	strh	r3, [r7, #16]
        cir_dsc.bg_opa = dsc->opa;
 80184a6:	68bb      	ldr	r3, [r7, #8]
 80184a8:	7a1b      	ldrb	r3, [r3, #8]
 80184aa:	74fb      	strb	r3, [r7, #19]

        int32_t r = (dsc->width >> 1);
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80184b2:	105b      	asrs	r3, r3, #1
 80184b4:	b21b      	sxth	r3, r3
 80184b6:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80184be:	b29b      	uxth	r3, r3
 80184c0:	f003 0301 	and.w	r3, r3, #1
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	bf0c      	ite	eq
 80184c8:	2301      	moveq	r3, #1
 80184ca:	2300      	movne	r3, #0
 80184cc:	b2db      	uxtb	r3, r3
 80184ce:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t cir_area;

        if(dsc->round_start) {
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	7a5b      	ldrb	r3, [r3, #9]
 80184d4:	f003 0304 	and.w	r3, r3, #4
 80184d8:	b2db      	uxtb	r3, r3
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d03b      	beq.n	8018556 <lv_draw_sw_line+0x270>
            cir_area.x1 = point1->x - r;
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80184e4:	b29a      	uxth	r2, r3
 80184e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80184e8:	b29b      	uxth	r3, r3
 80184ea:	1ad3      	subs	r3, r2, r3
 80184ec:	b29b      	uxth	r3, r3
 80184ee:	b21b      	sxth	r3, r3
 80184f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point1->y - r;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80184fa:	b29a      	uxth	r2, r3
 80184fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80184fe:	b29b      	uxth	r3, r3
 8018500:	1ad3      	subs	r3, r2, r3
 8018502:	b29b      	uxth	r3, r3
 8018504:	b21b      	sxth	r3, r3
 8018506:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point1->x + r - r_corr;
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018510:	b29a      	uxth	r2, r3
 8018512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018514:	b29b      	uxth	r3, r3
 8018516:	4413      	add	r3, r2
 8018518:	b29a      	uxth	r2, r3
 801851a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801851c:	b29b      	uxth	r3, r3
 801851e:	1ad3      	subs	r3, r2, r3
 8018520:	b29b      	uxth	r3, r3
 8018522:	b21b      	sxth	r3, r3
 8018524:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point1->y + r - r_corr ;
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801852e:	b29a      	uxth	r2, r3
 8018530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018532:	b29b      	uxth	r3, r3
 8018534:	4413      	add	r3, r2
 8018536:	b29a      	uxth	r2, r3
 8018538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801853a:	b29b      	uxth	r3, r3
 801853c:	1ad3      	subs	r3, r2, r3
 801853e:	b29b      	uxth	r3, r3
 8018540:	b21b      	sxth	r3, r3
 8018542:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 8018546:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801854a:	f107 0310 	add.w	r3, r7, #16
 801854e:	4619      	mov	r1, r3
 8018550:	68f8      	ldr	r0, [r7, #12]
 8018552:	f7f9 ff0b 	bl	801236c <lv_draw_rect>
        }

        if(dsc->round_end) {
 8018556:	68bb      	ldr	r3, [r7, #8]
 8018558:	7a5b      	ldrb	r3, [r3, #9]
 801855a:	f003 0308 	and.w	r3, r3, #8
 801855e:	b2db      	uxtb	r3, r3
 8018560:	2b00      	cmp	r3, #0
 8018562:	d03b      	beq.n	80185dc <lv_draw_sw_line+0x2f6>
            cir_area.x1 = point2->x - r;
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	f9b3 3000 	ldrsh.w	r3, [r3]
 801856a:	b29a      	uxth	r2, r3
 801856c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801856e:	b29b      	uxth	r3, r3
 8018570:	1ad3      	subs	r3, r2, r3
 8018572:	b29b      	uxth	r3, r3
 8018574:	b21b      	sxth	r3, r3
 8018576:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point2->y - r;
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018580:	b29a      	uxth	r2, r3
 8018582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018584:	b29b      	uxth	r3, r3
 8018586:	1ad3      	subs	r3, r2, r3
 8018588:	b29b      	uxth	r3, r3
 801858a:	b21b      	sxth	r3, r3
 801858c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point2->x + r - r_corr;
 8018590:	683b      	ldr	r3, [r7, #0]
 8018592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018596:	b29a      	uxth	r2, r3
 8018598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801859a:	b29b      	uxth	r3, r3
 801859c:	4413      	add	r3, r2
 801859e:	b29a      	uxth	r2, r3
 80185a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	1ad3      	subs	r3, r2, r3
 80185a6:	b29b      	uxth	r3, r3
 80185a8:	b21b      	sxth	r3, r3
 80185aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point2->y + r - r_corr ;
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80185b4:	b29a      	uxth	r2, r3
 80185b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185b8:	b29b      	uxth	r3, r3
 80185ba:	4413      	add	r3, r2
 80185bc:	b29a      	uxth	r2, r3
 80185be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185c0:	b29b      	uxth	r3, r3
 80185c2:	1ad3      	subs	r3, r2, r3
 80185c4:	b29b      	uxth	r3, r3
 80185c6:	b21b      	sxth	r3, r3
 80185c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 80185cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80185d0:	f107 0310 	add.w	r3, r7, #16
 80185d4:	4619      	mov	r1, r3
 80185d6:	68f8      	ldr	r0, [r7, #12]
 80185d8:	f7f9 fec8 	bl	801236c <lv_draw_rect>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80185e0:	609a      	str	r2, [r3, #8]
 80185e2:	e006      	b.n	80185f2 <lv_draw_sw_line+0x30c>
    if(dsc->width == 0) return;
 80185e4:	bf00      	nop
 80185e6:	e004      	b.n	80185f2 <lv_draw_sw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 80185e8:	bf00      	nop
 80185ea:	e002      	b.n	80185f2 <lv_draw_sw_line+0x30c>
    if(point1->x == point2->x && point1->y == point2->y) return;
 80185ec:	bf00      	nop
 80185ee:	e000      	b.n	80185f2 <lv_draw_sw_line+0x30c>
    if(!is_common) return;
 80185f0:	bf00      	nop
}
 80185f2:	3760      	adds	r7, #96	; 0x60
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}

080185f8 <draw_line_hor>:
 **********************/


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b098      	sub	sp, #96	; 0x60
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	60f8      	str	r0, [r7, #12]
 8018600:	60b9      	str	r1, [r7, #8]
 8018602:	607a      	str	r2, [r7, #4]
 8018604:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 8018606:	68bb      	ldr	r3, [r7, #8]
 8018608:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801860c:	3b01      	subs	r3, #1
 801860e:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 8018610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018612:	105b      	asrs	r3, r3, #1
 8018614:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8018616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018618:	f003 0301 	and.w	r3, r3, #1
 801861c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801861e:	4413      	add	r3, r2
 8018620:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 8018622:	683b      	ldr	r3, [r7, #0]
 8018624:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801862e:	4293      	cmp	r3, r2
 8018630:	bfa8      	it	ge
 8018632:	4613      	movge	r3, r2
 8018634:	b21b      	sxth	r3, r3
 8018636:	85bb      	strh	r3, [r7, #44]	; 0x2c
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 8018638:	683b      	ldr	r3, [r7, #0]
 801863a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018644:	4293      	cmp	r3, r2
 8018646:	bfb8      	it	lt
 8018648:	4613      	movlt	r3, r2
 801864a:	b21b      	sxth	r3, r3
 801864c:	b29b      	uxth	r3, r3
 801864e:	3b01      	subs	r3, #1
 8018650:	b29b      	uxth	r3, r3
 8018652:	b21b      	sxth	r3, r3
 8018654:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.y1 = point1->y - w_half1;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801865c:	b29a      	uxth	r2, r3
 801865e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018660:	b29b      	uxth	r3, r3
 8018662:	1ad3      	subs	r3, r2, r3
 8018664:	b29b      	uxth	r3, r3
 8018666:	b21b      	sxth	r3, r3
 8018668:	85fb      	strh	r3, [r7, #46]	; 0x2e
    blend_area.y2 = point1->y + w_half0;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018670:	b29a      	uxth	r2, r3
 8018672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018674:	b29b      	uxth	r3, r3
 8018676:	4413      	add	r3, r2
 8018678:	b29b      	uxth	r3, r3
 801867a:	b21b      	sxth	r3, r3
 801867c:	867b      	strh	r3, [r7, #50]	; 0x32

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	689a      	ldr	r2, [r3, #8]
 8018682:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8018686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801868a:	4618      	mov	r0, r3
 801868c:	f006 f966 	bl	801e95c <_lv_area_intersect>
 8018690:	4603      	mov	r3, r0
 8018692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 8018696:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801869a:	f083 0301 	eor.w	r3, r3, #1
 801869e:	b2db      	uxtb	r3, r3
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	f040 8106 	bne.w	80188b2 <draw_line_hor+0x2ba>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d006      	beq.n	80186be <draw_line_hor+0xc6>
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d001      	beq.n	80186be <draw_line_hor+0xc6>
 80186ba:	2301      	movs	r3, #1
 80186bc:	e000      	b.n	80186c0 <draw_line_hor+0xc8>
 80186be:	2300      	movs	r3, #0
 80186c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80186c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80186c8:	f003 0301 	and.w	r3, r3, #1
 80186cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 80186d0:	2301      	movs	r3, #1
 80186d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 80186d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80186da:	4618      	mov	r0, r3
 80186dc:	f7f7 fb6a 	bl	800fdb4 <lv_draw_mask_is_any>
 80186e0:	4603      	mov	r3, r0
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d003      	beq.n	80186ee <draw_line_hor+0xf6>
 80186e6:	2300      	movs	r3, #0
 80186e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80186ec:	e006      	b.n	80186fc <draw_line_hor+0x104>
    else if(dashed) simple_mode = false;
 80186ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d002      	beq.n	80186fc <draw_line_hor+0x104>
 80186f6:	2300      	movs	r3, #0
 80186f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 80186fc:	f107 0310 	add.w	r3, r7, #16
 8018700:	211c      	movs	r1, #28
 8018702:	4618      	mov	r0, r3
 8018704:	f008 f87e 	bl	8020804 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8018708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801870c:	613b      	str	r3, [r7, #16]
    blend_dsc.color = dsc->color;
 801870e:	68bb      	ldr	r3, [r7, #8]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = dsc->opa;
 8018714:	68bb      	ldr	r3, [r7, #8]
 8018716:	7a1b      	ldrb	r3, [r3, #8]
 8018718:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801871c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018720:	2b00      	cmp	r3, #0
 8018722:	d006      	beq.n	8018732 <draw_line_hor+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018724:	f107 0310 	add.w	r3, r7, #16
 8018728:	4619      	mov	r1, r3
 801872a:	68f8      	ldr	r0, [r7, #12]
 801872c:	f7fc fe12 	bl	8015354 <lv_draw_sw_blend>
 8018730:	e0c0      	b.n	80188b4 <draw_line_hor+0x2bc>
    }
#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {

        int32_t blend_area_w = lv_area_get_width(&blend_area);
 8018732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018736:	4618      	mov	r0, r3
 8018738:	f7ff fdbe 	bl	80182b8 <lv_area_get_width>
 801873c:	4603      	mov	r3, r0
 801873e:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 8018740:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018742:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 8018744:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8018748:	867b      	strh	r3, [r7, #50]	; 0x32

        lv_coord_t dash_start = 0;
 801874a:	2300      	movs	r3, #0
 801874c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 8018750:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8018754:	2b00      	cmp	r3, #0
 8018756:	d011      	beq.n	801877c <draw_line_hor+0x184>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8018758:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801875c:	461a      	mov	r2, r3
 801875e:	68bb      	ldr	r3, [r7, #8]
 8018760:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018764:	4619      	mov	r1, r3
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801876c:	440b      	add	r3, r1
 801876e:	fb92 f1f3 	sdiv	r1, r2, r3
 8018772:	fb01 f303 	mul.w	r3, r1, r3
 8018776:	1ad3      	subs	r3, r2, r3
 8018778:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 801877c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801877e:	4618      	mov	r0, r3
 8018780:	f007 fc96 	bl	80200b0 <lv_mem_buf_get>
 8018784:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 8018786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018788:	61fb      	str	r3, [r7, #28]
        blend_dsc.mask_area = &blend_area;
 801878a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801878e:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 8018790:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8018794:	65bb      	str	r3, [r7, #88]	; 0x58
 8018796:	e082      	b.n	801889e <draw_line_hor+0x2a6>
            lv_memset_ff(mask_buf, blend_area_w);
 8018798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801879a:	4619      	mov	r1, r3
 801879c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801879e:	f008 f8b2 	bl	8020906 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 80187a2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80187a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80187a8:	b21a      	sxth	r2, r3
 80187aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187ac:	b21b      	sxth	r3, r3
 80187ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80187b0:	f7f7 fa02 	bl	800fbb8 <lv_draw_mask_apply>
 80187b4:	4603      	mov	r3, r0
 80187b6:	f887 3020 	strb.w	r3, [r7, #32]

            if(dashed) {
 80187ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d056      	beq.n	8018870 <draw_line_hor+0x278>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 80187c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d052      	beq.n	8018870 <draw_line_hor+0x278>
                    lv_coord_t dash_cnt = dash_start;
 80187ca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80187ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    lv_coord_t i;
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 80187d2:	2300      	movs	r3, #0
 80187d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80187d8:	e042      	b.n	8018860 <draw_line_hor+0x268>
                        if(dash_cnt <= dsc->dash_width) {
 80187da:	68bb      	ldr	r3, [r7, #8]
 80187dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80187e0:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80187e4:	429a      	cmp	r2, r3
 80187e6:	dc17      	bgt.n	8018818 <draw_line_hor+0x220>
                            int16_t diff = dsc->dash_width - dash_cnt;
 80187e8:	68bb      	ldr	r3, [r7, #8]
 80187ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80187ee:	b29a      	uxth	r2, r3
 80187f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80187f4:	1ad3      	subs	r3, r2, r3
 80187f6:	b29b      	uxth	r3, r3
 80187f8:	86fb      	strh	r3, [r7, #54]	; 0x36
                            i += diff;
 80187fa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80187fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018800:	4413      	add	r3, r2
 8018802:	b29b      	uxth	r3, r3
 8018804:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                            dash_cnt += diff;
 8018808:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 801880c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801880e:	4413      	add	r3, r2
 8018810:	b29b      	uxth	r3, r3
 8018812:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018816:	e015      	b.n	8018844 <draw_line_hor+0x24c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8018818:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018822:	4619      	mov	r1, r3
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801882a:	440b      	add	r3, r1
 801882c:	429a      	cmp	r2, r3
 801882e:	db03      	blt.n	8018838 <draw_line_hor+0x240>
                            dash_cnt = 0;
 8018830:	2300      	movs	r3, #0
 8018832:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018836:	e005      	b.n	8018844 <draw_line_hor+0x24c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 8018838:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801883c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801883e:	4413      	add	r3, r2
 8018840:	2200      	movs	r2, #0
 8018842:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8018844:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8018848:	b29b      	uxth	r3, r3
 801884a:	3301      	adds	r3, #1
 801884c:	b29b      	uxth	r3, r3
 801884e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8018852:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018856:	b29b      	uxth	r3, r3
 8018858:	3301      	adds	r3, #1
 801885a:	b29b      	uxth	r3, r3
 801885c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018860:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8018864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018866:	429a      	cmp	r2, r3
 8018868:	dcb7      	bgt.n	80187da <draw_line_hor+0x1e2>
                        }
                    }

                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801886a:	2302      	movs	r3, #2
 801886c:	f887 3020 	strb.w	r3, [r7, #32]
                }
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018870:	f107 0310 	add.w	r3, r7, #16
 8018874:	4619      	mov	r1, r3
 8018876:	68f8      	ldr	r0, [r7, #12]
 8018878:	f7fc fd6c 	bl	8015354 <lv_draw_sw_blend>

            blend_area.y1++;
 801887c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8018880:	b29b      	uxth	r3, r3
 8018882:	3301      	adds	r3, #1
 8018884:	b29b      	uxth	r3, r3
 8018886:	b21b      	sxth	r3, r3
 8018888:	85fb      	strh	r3, [r7, #46]	; 0x2e
            blend_area.y2++;
 801888a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801888e:	b29b      	uxth	r3, r3
 8018890:	3301      	adds	r3, #1
 8018892:	b29b      	uxth	r3, r3
 8018894:	b21b      	sxth	r3, r3
 8018896:	867b      	strh	r3, [r7, #50]	; 0x32
        for(h = blend_area.y1; h <= y2; h++) {
 8018898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801889a:	3301      	adds	r3, #1
 801889c:	65bb      	str	r3, [r7, #88]	; 0x58
 801889e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80188a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80188a4:	429a      	cmp	r2, r3
 80188a6:	f77f af77 	ble.w	8018798 <draw_line_hor+0x1a0>
        }
        lv_mem_buf_release(mask_buf);
 80188aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80188ac:	f007 fcac 	bl	8020208 <lv_mem_buf_release>
 80188b0:	e000      	b.n	80188b4 <draw_line_hor+0x2bc>
    if(!is_common) return;
 80188b2:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 80188b4:	3760      	adds	r7, #96	; 0x60
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd80      	pop	{r7, pc}

080188ba <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 80188ba:	b580      	push	{r7, lr}
 80188bc:	b098      	sub	sp, #96	; 0x60
 80188be:	af00      	add	r7, sp, #0
 80188c0:	60f8      	str	r0, [r7, #12]
 80188c2:	60b9      	str	r1, [r7, #8]
 80188c4:	607a      	str	r2, [r7, #4]
 80188c6:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 80188c8:	68bb      	ldr	r3, [r7, #8]
 80188ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80188ce:	3b01      	subs	r3, #1
 80188d0:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 80188d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188d4:	105b      	asrs	r3, r3, #1
 80188d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80188d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188da:	f003 0301 	and.w	r3, r3, #1
 80188de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80188e0:	4413      	add	r3, r2
 80188e2:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = point1->x - w_half1;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188ea:	b29a      	uxth	r2, r3
 80188ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80188ee:	b29b      	uxth	r3, r3
 80188f0:	1ad3      	subs	r3, r2, r3
 80188f2:	b29b      	uxth	r3, r3
 80188f4:	b21b      	sxth	r3, r3
 80188f6:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.x2 = point1->x + w_half0;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188fe:	b29a      	uxth	r2, r3
 8018900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018902:	b29b      	uxth	r3, r3
 8018904:	4413      	add	r3, r2
 8018906:	b29b      	uxth	r3, r3
 8018908:	b21b      	sxth	r3, r3
 801890a:	86bb      	strh	r3, [r7, #52]	; 0x34
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018918:	4293      	cmp	r3, r2
 801891a:	bfa8      	it	ge
 801891c:	4613      	movge	r3, r2
 801891e:	b21b      	sxth	r3, r3
 8018920:	867b      	strh	r3, [r7, #50]	; 0x32
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801892e:	4293      	cmp	r3, r2
 8018930:	bfb8      	it	lt
 8018932:	4613      	movlt	r3, r2
 8018934:	b21b      	sxth	r3, r3
 8018936:	b29b      	uxth	r3, r3
 8018938:	3b01      	subs	r3, #1
 801893a:	b29b      	uxth	r3, r3
 801893c:	b21b      	sxth	r3, r3
 801893e:	86fb      	strh	r3, [r7, #54]	; 0x36

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	689a      	ldr	r2, [r3, #8]
 8018944:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8018948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801894c:	4618      	mov	r0, r3
 801894e:	f006 f805 	bl	801e95c <_lv_area_intersect>
 8018952:	4603      	mov	r3, r0
 8018954:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 8018958:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801895c:	f083 0301 	eor.w	r3, r3, #1
 8018960:	b2db      	uxtb	r3, r3
 8018962:	2b00      	cmp	r3, #0
 8018964:	f040 80d6 	bne.w	8018b14 <draw_line_ver+0x25a>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d006      	beq.n	8018980 <draw_line_ver+0xc6>
 8018972:	68bb      	ldr	r3, [r7, #8]
 8018974:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d001      	beq.n	8018980 <draw_line_ver+0xc6>
 801897c:	2301      	movs	r3, #1
 801897e:	e000      	b.n	8018982 <draw_line_ver+0xc8>
 8018980:	2300      	movs	r3, #0
 8018982:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8018986:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801898a:	f003 0301 	and.w	r3, r3, #1
 801898e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 8018992:	2301      	movs	r3, #1
 8018994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8018998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801899c:	4618      	mov	r0, r3
 801899e:	f7f7 fa09 	bl	800fdb4 <lv_draw_mask_is_any>
 80189a2:	4603      	mov	r3, r0
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d003      	beq.n	80189b0 <draw_line_ver+0xf6>
 80189a8:	2300      	movs	r3, #0
 80189aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80189ae:	e006      	b.n	80189be <draw_line_ver+0x104>
    else if(dashed) simple_mode = false;
 80189b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d002      	beq.n	80189be <draw_line_ver+0x104>
 80189b8:	2300      	movs	r3, #0
 80189ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 80189be:	f107 0314 	add.w	r3, r7, #20
 80189c2:	211c      	movs	r1, #28
 80189c4:	4618      	mov	r0, r3
 80189c6:	f007 ff1d 	bl	8020804 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 80189ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80189ce:	617b      	str	r3, [r7, #20]
    blend_dsc.color = dsc->color;
 80189d0:	68bb      	ldr	r3, [r7, #8]
 80189d2:	781b      	ldrb	r3, [r3, #0]
 80189d4:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->opa;
 80189d6:	68bb      	ldr	r3, [r7, #8]
 80189d8:	7a1b      	ldrb	r3, [r3, #8]
 80189da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 80189de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d006      	beq.n	80189f4 <draw_line_ver+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80189e6:	f107 0314 	add.w	r3, r7, #20
 80189ea:	4619      	mov	r1, r3
 80189ec:	68f8      	ldr	r0, [r7, #12]
 80189ee:	f7fc fcb1 	bl	8015354 <lv_draw_sw_blend>
 80189f2:	e090      	b.n	8018b16 <draw_line_ver+0x25c>
    }

#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {
        int32_t draw_area_w = lv_area_get_width(&blend_area);
 80189f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80189f8:	4618      	mov	r0, r3
 80189fa:	f7ff fc5d 	bl	80182b8 <lv_area_get_width>
 80189fe:	4603      	mov	r3, r0
 8018a00:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 8018a02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018a04:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 8018a06:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8018a0a:	86fb      	strh	r3, [r7, #54]	; 0x36

        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 8018a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f007 fb4e 	bl	80200b0 <lv_mem_buf_get>
 8018a14:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 8018a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a18:	623b      	str	r3, [r7, #32]
        blend_dsc.mask_area = &blend_area;
 8018a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018a1e:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_coord_t dash_start = 0;
 8018a20:	2300      	movs	r3, #0
 8018a22:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 8018a26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d011      	beq.n	8018a52 <draw_line_ver+0x198>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 8018a2e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8018a32:	461a      	mov	r2, r3
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018a3a:	4619      	mov	r1, r3
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018a42:	440b      	add	r3, r1
 8018a44:	fb92 f1f3 	sdiv	r1, r2, r3
 8018a48:	fb01 f303 	mul.w	r3, r1, r3
 8018a4c:	1ad3      	subs	r3, r2, r3
 8018a4e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_coord_t dash_cnt = dash_start;
 8018a52:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8018a56:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 8018a5a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8018a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8018a60:	e04f      	b.n	8018b02 <draw_line_ver+0x248>
            lv_memset_ff(mask_buf, draw_area_w);
 8018a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a64:	4619      	mov	r1, r3
 8018a66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018a68:	f007 ff4d 	bl	8020906 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 8018a6c:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8018a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a72:	b21a      	sxth	r2, r3
 8018a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a76:	b21b      	sxth	r3, r3
 8018a78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018a7a:	f7f7 f89d 	bl	800fbb8 <lv_draw_mask_apply>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if(dashed) {
 8018a84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d023      	beq.n	8018ad4 <draw_line_ver+0x21a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8018a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d018      	beq.n	8018ac6 <draw_line_ver+0x20c>
                    if(dash_cnt > dsc->dash_width) {
 8018a94:	68bb      	ldr	r3, [r7, #8]
 8018a96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018a9a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	dd02      	ble.n	8018aa8 <draw_line_ver+0x1ee>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8018aa8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8018aac:	68bb      	ldr	r3, [r7, #8]
 8018aae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018ab2:	4619      	mov	r1, r3
 8018ab4:	68bb      	ldr	r3, [r7, #8]
 8018ab6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018aba:	440b      	add	r3, r1
 8018abc:	429a      	cmp	r2, r3
 8018abe:	db02      	blt.n	8018ac6 <draw_line_ver+0x20c>
                        dash_cnt = 0;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    }
                }
                dash_cnt ++;
 8018ac6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8018aca:	b29b      	uxth	r3, r3
 8018acc:	3301      	adds	r3, #1
 8018ace:	b29b      	uxth	r3, r3
 8018ad0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018ad4:	f107 0314 	add.w	r3, r7, #20
 8018ad8:	4619      	mov	r1, r3
 8018ada:	68f8      	ldr	r0, [r7, #12]
 8018adc:	f7fc fc3a 	bl	8015354 <lv_draw_sw_blend>

            blend_area.y1++;
 8018ae0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8018ae4:	b29b      	uxth	r3, r3
 8018ae6:	3301      	adds	r3, #1
 8018ae8:	b29b      	uxth	r3, r3
 8018aea:	b21b      	sxth	r3, r3
 8018aec:	867b      	strh	r3, [r7, #50]	; 0x32
            blend_area.y2++;
 8018aee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	3301      	adds	r3, #1
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	b21b      	sxth	r3, r3
 8018afa:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(h = blend_area.y1; h <= y2; h++) {
 8018afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018afe:	3301      	adds	r3, #1
 8018b00:	657b      	str	r3, [r7, #84]	; 0x54
 8018b02:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8018b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018b08:	429a      	cmp	r2, r3
 8018b0a:	ddaa      	ble.n	8018a62 <draw_line_ver+0x1a8>
        }
        lv_mem_buf_release(mask_buf);
 8018b0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018b0e:	f007 fb7b 	bl	8020208 <lv_mem_buf_release>
 8018b12:	e000      	b.n	8018b16 <draw_line_ver+0x25c>
    if(!is_common) return;
 8018b14:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 8018b16:	3760      	adds	r7, #96	; 0x60
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bd80      	pop	{r7, pc}

08018b1c <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                 const lv_point_t * point1, const lv_point_t * point2)
{
 8018b1c:	b5b0      	push	{r4, r5, r7, lr}
 8018b1e:	b0ce      	sub	sp, #312	; 0x138
 8018b20:	af02      	add	r7, sp, #8
 8018b22:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8018b26:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8018b2a:	6020      	str	r0, [r4, #0]
 8018b2c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8018b30:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8018b34:	6001      	str	r1, [r0, #0]
 8018b36:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8018b3a:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8018b3e:	600a      	str	r2, [r1, #0]
 8018b40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8018b44:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8018b48:	6013      	str	r3, [r2, #0]
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 8018b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b66:	429a      	cmp	r2, r3
 8018b68:	da24      	bge.n	8018bb4 <draw_line_skew+0x98>
        p1.y = point1->y;
 8018b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b78:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point2->y;
 8018b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b8a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point1->x;
 8018b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b9c:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point2->x;
 8018ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bae:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8018bb2:	e023      	b.n	8018bfc <draw_line_skew+0xe0>
    }
    else {
        p1.y = point2->y;
 8018bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018bc2:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point1->y;
 8018bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018bca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018bd4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point2->x;
 8018bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018be6:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point1->x;
 8018bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bf8:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    }

    int32_t xdiff = p2.x - p1.x;
 8018bfc:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 8018c00:	461a      	mov	r2, r3
 8018c02:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8018c06:	1ad3      	subs	r3, r2, r3
 8018c08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 8018c0c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8018c10:	461a      	mov	r2, r3
 8018c12:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8018c16:	1ad3      	subs	r3, r2, r3
 8018c18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 8018c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018c20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8018c24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8018c28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	bfb8      	it	lt
 8018c30:	425b      	neglt	r3, r3
 8018c32:	429a      	cmp	r2, r3
 8018c34:	bfcc      	ite	gt
 8018c36:	2301      	movgt	r3, #1
 8018c38:	2300      	movle	r3, #0
 8018c3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 8018c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018c42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018c4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 8018c50:	2300      	movs	r3, #0
 8018c52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 8018c56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d00f      	beq.n	8018c7e <draw_line_skew+0x162>
 8018c5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	bfb8      	it	lt
 8018c66:	425b      	neglt	r3, r3
 8018c68:	015a      	lsls	r2, r3, #5
 8018c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	bfb8      	it	lt
 8018c72:	425b      	neglt	r3, r3
 8018c74:	fb92 f3f3 	sdiv	r3, r2, r3
 8018c78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8018c7c:	e00e      	b.n	8018c9c <draw_line_skew+0x180>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 8018c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	bfb8      	it	lt
 8018c86:	425b      	neglt	r3, r3
 8018c88:	015a      	lsls	r2, r3, #5
 8018c8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	bfb8      	it	lt
 8018c92:	425b      	neglt	r3, r3
 8018c94:	fb92 f3f3 	sdiv	r3, r2, r3
 8018c98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8018c9c:	4a7f      	ldr	r2, [pc, #508]	; (8018e9c <draw_line_skew+0x380>)
 8018c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8018ca2:	4413      	add	r3, r2
 8018ca4:	781b      	ldrb	r3, [r3, #0]
 8018ca6:	461a      	mov	r2, r3
 8018ca8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018cac:	fb02 f303 	mul.w	r3, r2, r3
 8018cb0:	333f      	adds	r3, #63	; 0x3f
 8018cb2:	11db      	asrs	r3, r3, #7
 8018cb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 8018cb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018cbc:	105b      	asrs	r3, r3, #1
 8018cbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8018cc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018cc6:	f003 0301 	and.w	r3, r3, #1
 8018cca:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8018cce:	4413      	add	r3, r2
 8018cd0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 8018cd4:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 8018cd8:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8018cdc:	4293      	cmp	r3, r2
 8018cde:	bfa8      	it	ge
 8018ce0:	4613      	movge	r3, r2
 8018ce2:	b21b      	sxth	r3, r3
 8018ce4:	b29a      	uxth	r2, r3
 8018ce6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018cea:	b29b      	uxth	r3, r3
 8018cec:	1ad3      	subs	r3, r2, r3
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	b21b      	sxth	r3, r3
 8018cf2:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 8018cf6:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 8018cfa:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8018cfe:	4293      	cmp	r3, r2
 8018d00:	bfb8      	it	lt
 8018d02:	4613      	movlt	r3, r2
 8018d04:	b21b      	sxth	r3, r3
 8018d06:	b29a      	uxth	r2, r3
 8018d08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018d0c:	b29b      	uxth	r3, r3
 8018d0e:	4413      	add	r3, r2
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	b21b      	sxth	r3, r3
 8018d14:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 8018d18:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 8018d1c:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8018d20:	4293      	cmp	r3, r2
 8018d22:	bfa8      	it	ge
 8018d24:	4613      	movge	r3, r2
 8018d26:	b21b      	sxth	r3, r3
 8018d28:	b29a      	uxth	r2, r3
 8018d2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018d2e:	b29b      	uxth	r3, r3
 8018d30:	1ad3      	subs	r3, r2, r3
 8018d32:	b29b      	uxth	r3, r3
 8018d34:	b21b      	sxth	r3, r3
 8018d36:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 8018d3a:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 8018d3e:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8018d42:	4293      	cmp	r3, r2
 8018d44:	bfb8      	it	lt
 8018d46:	4613      	movlt	r3, r2
 8018d48:	b21b      	sxth	r3, r3
 8018d4a:	b29a      	uxth	r2, r3
 8018d4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018d50:	b29b      	uxth	r3, r3
 8018d52:	4413      	add	r3, r2
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	b21b      	sxth	r3, r3
 8018d58:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8018d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018d60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	689a      	ldr	r2, [r3, #8]
 8018d68:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8018d6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8018d70:	4618      	mov	r0, r3
 8018d72:	f005 fdf3 	bl	801e95c <_lv_area_intersect>
 8018d76:	4603      	mov	r3, r0
 8018d78:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 8018d7c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8018d80:	f083 0301 	eor.w	r3, r3, #1
 8018d84:	b2db      	uxtb	r3, r3
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	f040 8276 	bne.w	8019278 <draw_line_skew+0x75c>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 8018d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	f000 8085 	beq.w	8018ea0 <draw_line_skew+0x384>
        if(xdiff > 0) {
 8018d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	dd3e      	ble.n	8018e1c <draw_line_skew+0x300>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8018d9e:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 8018da2:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8018da6:	b29a      	uxth	r2, r3
 8018da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8018dac:	b29b      	uxth	r3, r3
 8018dae:	1ad3      	subs	r3, r2, r3
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	b21c      	sxth	r4, r3
 8018db4:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 8018db8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8018dbc:	b29a      	uxth	r2, r3
 8018dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8018dc2:	b29b      	uxth	r3, r3
 8018dc4:	1ad3      	subs	r3, r2, r3
 8018dc6:	b29b      	uxth	r3, r3
 8018dc8:	b21b      	sxth	r3, r3
 8018dca:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8018dce:	2200      	movs	r2, #0
 8018dd0:	9201      	str	r2, [sp, #4]
 8018dd2:	9300      	str	r3, [sp, #0]
 8018dd4:	462b      	mov	r3, r5
 8018dd6:	4622      	mov	r2, r4
 8018dd8:	f7f7 f84a 	bl	800fe70 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8018ddc:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 8018de0:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8018de4:	b29a      	uxth	r2, r3
 8018de6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018dea:	b29b      	uxth	r3, r3
 8018dec:	4413      	add	r3, r2
 8018dee:	b29b      	uxth	r3, r3
 8018df0:	b21c      	sxth	r4, r3
 8018df2:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 8018df6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8018dfa:	b29a      	uxth	r2, r3
 8018dfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018e00:	b29b      	uxth	r3, r3
 8018e02:	4413      	add	r3, r2
 8018e04:	b29b      	uxth	r3, r3
 8018e06:	b21b      	sxth	r3, r3
 8018e08:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018e0c:	2201      	movs	r2, #1
 8018e0e:	9201      	str	r2, [sp, #4]
 8018e10:	9300      	str	r3, [sp, #0]
 8018e12:	462b      	mov	r3, r5
 8018e14:	4622      	mov	r2, r4
 8018e16:	f7f7 f82b 	bl	800fe70 <lv_draw_mask_line_points_init>
 8018e1a:	e07f      	b.n	8018f1c <draw_line_skew+0x400>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8018e1c:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 8018e20:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8018e24:	b29a      	uxth	r2, r3
 8018e26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018e2a:	b29b      	uxth	r3, r3
 8018e2c:	4413      	add	r3, r2
 8018e2e:	b29b      	uxth	r3, r3
 8018e30:	b21c      	sxth	r4, r3
 8018e32:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 8018e36:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8018e3a:	b29a      	uxth	r2, r3
 8018e3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	4413      	add	r3, r2
 8018e44:	b29b      	uxth	r3, r3
 8018e46:	b21b      	sxth	r3, r3
 8018e48:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8018e4c:	2200      	movs	r2, #0
 8018e4e:	9201      	str	r2, [sp, #4]
 8018e50:	9300      	str	r3, [sp, #0]
 8018e52:	462b      	mov	r3, r5
 8018e54:	4622      	mov	r2, r4
 8018e56:	f7f7 f80b 	bl	800fe70 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8018e5a:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 8018e5e:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8018e62:	b29a      	uxth	r2, r3
 8018e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8018e68:	b29b      	uxth	r3, r3
 8018e6a:	1ad3      	subs	r3, r2, r3
 8018e6c:	b29b      	uxth	r3, r3
 8018e6e:	b21c      	sxth	r4, r3
 8018e70:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 8018e74:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8018e78:	b29a      	uxth	r2, r3
 8018e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8018e7e:	b29b      	uxth	r3, r3
 8018e80:	1ad3      	subs	r3, r2, r3
 8018e82:	b29b      	uxth	r3, r3
 8018e84:	b21b      	sxth	r3, r3
 8018e86:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018e8a:	2201      	movs	r2, #1
 8018e8c:	9201      	str	r2, [sp, #4]
 8018e8e:	9300      	str	r3, [sp, #0]
 8018e90:	462b      	mov	r3, r5
 8018e92:	4622      	mov	r2, r4
 8018e94:	f7f6 ffec 	bl	800fe70 <lv_draw_mask_line_points_init>
 8018e98:	e040      	b.n	8018f1c <draw_line_skew+0x400>
 8018e9a:	bf00      	nop
 8018e9c:	08022d9c 	.word	0x08022d9c
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 8018ea0:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8018ea4:	b29a      	uxth	r2, r3
 8018ea6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	4413      	add	r3, r2
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	b219      	sxth	r1, r3
 8018eb2:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 8018eb6:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 8018eba:	b29a      	uxth	r2, r3
 8018ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018ec0:	b29b      	uxth	r3, r3
 8018ec2:	4413      	add	r3, r2
 8018ec4:	b29b      	uxth	r3, r3
 8018ec6:	b21a      	sxth	r2, r3
 8018ec8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8018ecc:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8018ed0:	2500      	movs	r5, #0
 8018ed2:	9501      	str	r5, [sp, #4]
 8018ed4:	9300      	str	r3, [sp, #0]
 8018ed6:	4613      	mov	r3, r2
 8018ed8:	4622      	mov	r2, r4
 8018eda:	f7f6 ffc9 	bl	800fe70 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 8018ede:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8018ee2:	b29a      	uxth	r2, r3
 8018ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8018ee8:	b29b      	uxth	r3, r3
 8018eea:	1ad3      	subs	r3, r2, r3
 8018eec:	b29b      	uxth	r3, r3
 8018eee:	b219      	sxth	r1, r3
 8018ef0:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 8018ef4:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 8018ef8:	b29a      	uxth	r2, r3
 8018efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	1ad3      	subs	r3, r2, r3
 8018f02:	b29b      	uxth	r3, r3
 8018f04:	b21a      	sxth	r2, r3
 8018f06:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8018f0a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8018f0e:	2501      	movs	r5, #1
 8018f10:	9501      	str	r5, [sp, #4]
 8018f12:	9300      	str	r3, [sp, #0]
 8018f14:	4613      	mov	r3, r2
 8018f16:	4622      	mov	r2, r4
 8018f18:	f7f6 ffaa 	bl	800fe70 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 8018f1c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018f20:	2100      	movs	r1, #0
 8018f22:	4618      	mov	r0, r3
 8018f24:	f7f6 fe16 	bl	800fb54 <lv_draw_mask_add>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8018f2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018f32:	2100      	movs	r1, #0
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7f6 fe0d 	bl	800fb54 <lv_draw_mask_add>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 8018f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f44:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 8018f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f4c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 8018f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018f54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	7a5b      	ldrb	r3, [r3, #9]
 8018f5c:	f003 0310 	and.w	r3, r3, #16
 8018f60:	b2db      	uxtb	r3, r3
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d14f      	bne.n	8019006 <draw_line_skew+0x4ea>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 8018f66:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 8018f6a:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 8018f6e:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8018f72:	b29a      	uxth	r2, r3
 8018f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018f78:	b29b      	uxth	r3, r3
 8018f7a:	1ad3      	subs	r3, r2, r3
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	b21d      	sxth	r5, r3
 8018f80:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8018f84:	b29a      	uxth	r2, r3
 8018f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	4413      	add	r3, r2
 8018f8e:	b29b      	uxth	r3, r3
 8018f90:	b21b      	sxth	r3, r3
 8018f92:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8018f96:	2203      	movs	r2, #3
 8018f98:	9201      	str	r2, [sp, #4]
 8018f9a:	9300      	str	r3, [sp, #0]
 8018f9c:	462b      	mov	r3, r5
 8018f9e:	4622      	mov	r2, r4
 8018fa0:	f7f6 ff66 	bl	800fe70 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 8018fa4:	f9b7 10e4 	ldrsh.w	r1, [r7, #228]	; 0xe4
 8018fa8:	f9b7 40e6 	ldrsh.w	r4, [r7, #230]	; 0xe6
 8018fac:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 8018fb0:	b29a      	uxth	r2, r3
 8018fb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	1ad3      	subs	r3, r2, r3
 8018fba:	b29b      	uxth	r3, r3
 8018fbc:	b21d      	sxth	r5, r3
 8018fbe:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8018fc2:	b29a      	uxth	r2, r3
 8018fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018fc8:	b29b      	uxth	r3, r3
 8018fca:	4413      	add	r3, r2
 8018fcc:	b29b      	uxth	r3, r3
 8018fce:	b21b      	sxth	r3, r3
 8018fd0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018fd4:	2202      	movs	r2, #2
 8018fd6:	9201      	str	r2, [sp, #4]
 8018fd8:	9300      	str	r3, [sp, #0]
 8018fda:	462b      	mov	r3, r5
 8018fdc:	4622      	mov	r2, r4
 8018fde:	f7f6 ff47 	bl	800fe70 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 8018fe2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018fe6:	2100      	movs	r1, #0
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f7f6 fdb3 	bl	800fb54 <lv_draw_mask_add>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 8018ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018ff8:	2100      	movs	r1, #0
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f7f6 fdaa 	bl	800fb54 <lv_draw_mask_add>
 8019000:	4603      	mov	r3, r0
 8019002:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    /*The real draw area is around the line.
     *It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);
 8019006:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801900a:	4618      	mov	r0, r3
 801900c:	f7ff f954 	bl	80182b8 <lv_area_get_width>
 8019010:	4603      	mov	r3, r0
 8019012:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8019016:	f7f3 fcc3 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 801901a:	4603      	mov	r3, r0
 801901c:	4618      	mov	r0, r3
 801901e:	f004 ffe9 	bl	801dff4 <lv_disp_get_hor_res>
 8019022:	4603      	mov	r3, r0
 8019024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 8019028:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801902c:	4618      	mov	r0, r3
 801902e:	f005 fc08 	bl	801e842 <lv_area_get_size>
 8019032:	4602      	mov	r2, r0
 8019034:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8019038:	4293      	cmp	r3, r2
 801903a:	d906      	bls.n	801904a <draw_line_skew+0x52e>
 801903c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8019040:	4618      	mov	r0, r3
 8019042:	f005 fbfe 	bl	801e842 <lv_area_get_size>
 8019046:	4603      	mov	r3, r0
 8019048:	e001      	b.n	801904e <draw_line_skew+0x532>
 801904a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801904e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8019052:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8019056:	f007 f82b 	bl	80200b0 <lv_mem_buf_get>
 801905a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

    lv_coord_t y2 = blend_area.y2;
 801905e:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8019062:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    blend_area.y2 = blend_area.y1;
 8019066:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801906a:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    uint32_t mask_p = 0;
 801906e:	2300      	movs	r3, #0
 8019070:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    lv_memset_ff(mask_buf, mask_buf_size);
 8019074:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8019078:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801907c:	f007 fc43 	bl	8020906 <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8019080:	f107 0310 	add.w	r3, r7, #16
 8019084:	211c      	movs	r1, #28
 8019086:	4618      	mov	r0, r3
 8019088:	f007 fbbc 	bl	8020804 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801908c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019090:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019094:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8019098:	601a      	str	r2, [r3, #0]
    blend_dsc.color = dsc->color;
 801909a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801909e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80190a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80190a6:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80190aa:	6812      	ldr	r2, [r2, #0]
 80190ac:	7812      	ldrb	r2, [r2, #0]
 80190ae:	721a      	strb	r2, [r3, #8]
    blend_dsc.opa = dsc->opa;
 80190b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80190b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	7a1a      	ldrb	r2, [r3, #8]
 80190bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80190c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80190c4:	761a      	strb	r2, [r3, #24]
    blend_dsc.mask_buf = mask_buf;
 80190c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80190ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80190ce:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80190d2:	60da      	str	r2, [r3, #12]
    blend_dsc.mask_area = &blend_area;
 80190d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80190d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80190dc:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80190e0:	615a      	str	r2, [r3, #20]

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 80190e2:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 80190e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80190ea:	e06a      	b.n	80191c2 <draw_line_skew+0x6a6>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 80190ec:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80190f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80190f4:	18d0      	adds	r0, r2, r3
 80190f6:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 80190fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80190fe:	b21a      	sxth	r2, r3
 8019100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019104:	b21b      	sxth	r3, r3
 8019106:	f7f6 fd57 	bl	800fbb8 <lv_draw_mask_apply>
 801910a:	4603      	mov	r3, r0
 801910c:	461a      	mov	r2, r3
 801910e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019112:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019116:	741a      	strb	r2, [r3, #16]
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8019118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801911c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019120:	7c1b      	ldrb	r3, [r3, #16]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d10a      	bne.n	801913c <draw_line_skew+0x620>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 8019126:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801912a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801912e:	4413      	add	r3, r2
 8019130:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8019134:	4611      	mov	r1, r2
 8019136:	4618      	mov	r0, r3
 8019138:	f007 fb64 	bl	8020804 <lv_memset_00>
        }

        mask_p += draw_area_w;
 801913c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019140:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8019144:	4413      	add	r3, r2
 8019146:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 801914a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801914e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019152:	4413      	add	r3, r2
 8019154:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8019158:	429a      	cmp	r2, r3
 801915a:	d908      	bls.n	801916e <draw_line_skew+0x652>
            blend_area.y2 ++;
 801915c:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 8019160:	b29b      	uxth	r3, r3
 8019162:	3301      	adds	r3, #1
 8019164:	b29b      	uxth	r3, r3
 8019166:	b21b      	sxth	r3, r3
 8019168:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 801916c:	e024      	b.n	80191b8 <draw_line_skew+0x69c>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801916e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019172:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019176:	2202      	movs	r2, #2
 8019178:	741a      	strb	r2, [r3, #16]
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801917a:	f107 0210 	add.w	r2, r7, #16
 801917e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019182:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8019186:	4611      	mov	r1, r2
 8019188:	6818      	ldr	r0, [r3, #0]
 801918a:	f7fc f8e3 	bl	8015354 <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 801918e:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 8019192:	b29b      	uxth	r3, r3
 8019194:	3301      	adds	r3, #1
 8019196:	b29b      	uxth	r3, r3
 8019198:	b21b      	sxth	r3, r3
 801919a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
            blend_area.y2 = blend_area.y1;
 801919e:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 80191a2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
            mask_p = 0;
 80191a6:	2300      	movs	r3, #0
 80191a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            lv_memset_ff(mask_buf, mask_buf_size);
 80191ac:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80191b0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80191b4:	f007 fba7 	bl	8020906 <lv_memset_ff>
    for(h = blend_area.y1; h <= y2; h++) {
 80191b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80191bc:	3301      	adds	r3, #1
 80191be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80191c2:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 80191c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80191ca:	429a      	cmp	r2, r3
 80191cc:	dd8e      	ble.n	80190ec <draw_line_skew+0x5d0>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 80191ce:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
 80191d2:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 80191d6:	429a      	cmp	r2, r3
 80191d8:	d017      	beq.n	801920a <draw_line_skew+0x6ee>
        blend_area.y2--;
 80191da:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 80191de:	b29b      	uxth	r3, r3
 80191e0:	3b01      	subs	r3, #1
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	b21b      	sxth	r3, r3
 80191e6:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80191ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80191ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80191f2:	2202      	movs	r2, #2
 80191f4:	741a      	strb	r2, [r3, #16]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80191f6:	f107 0210 	add.w	r2, r7, #16
 80191fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80191fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8019202:	4611      	mov	r1, r2
 8019204:	6818      	ldr	r0, [r3, #0]
 8019206:	f7fc f8a5 	bl	8015354 <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 801920a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801920e:	f006 fffb 	bl	8020208 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 8019212:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019216:	4618      	mov	r0, r3
 8019218:	f7f6 fd62 	bl	800fce0 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 801921c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019220:	4618      	mov	r0, r3
 8019222:	f7f6 fd5d 	bl	800fce0 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 8019226:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801922a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801922e:	d004      	beq.n	801923a <draw_line_skew+0x71e>
 8019230:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019234:	4618      	mov	r0, r3
 8019236:	f7f6 fd53 	bl	800fce0 <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 801923a:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801923e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019242:	d004      	beq.n	801924e <draw_line_skew+0x732>
 8019244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019248:	4618      	mov	r0, r3
 801924a:	f7f6 fd49 	bl	800fce0 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 801924e:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 8019252:	4618      	mov	r0, r3
 8019254:	f7f6 fcf4 	bl	800fc40 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 8019258:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 801925c:	4618      	mov	r0, r3
 801925e:	f7f6 fcef 	bl	800fc40 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 8019262:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 8019266:	4618      	mov	r0, r3
 8019268:	f7f6 fcea 	bl	800fc40 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 801926c:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 8019270:	4618      	mov	r0, r3
 8019272:	f7f6 fce5 	bl	800fc40 <lv_draw_mask_remove_id>
 8019276:	e000      	b.n	801927a <draw_line_skew+0x75e>
    if(is_common == false) return;
 8019278:	bf00      	nop
    LV_UNUSED(point2);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw skewed line with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801927a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801927e:	46bd      	mov	sp, r7
 8019280:	bdb0      	pop	{r4, r5, r7, pc}
 8019282:	bf00      	nop

08019284 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 8019284:	b590      	push	{r4, r7, lr}
 8019286:	b09b      	sub	sp, #108	; 0x6c
 8019288:	af02      	add	r7, sp, #8
 801928a:	60f8      	str	r0, [r7, #12]
 801928c:	60b9      	str	r1, [r7, #8]
 801928e:	607a      	str	r2, [r7, #4]
 8019290:	807b      	strh	r3, [r7, #2]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 8019292:	887b      	ldrh	r3, [r7, #2]
 8019294:	2b02      	cmp	r3, #2
 8019296:	f240 82a9 	bls.w	80197ec <lv_draw_sw_polygon+0x568>
    if(points == NULL) return;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	2b00      	cmp	r3, #0
 801929e:	f000 82a7 	beq.w	80197f0 <lv_draw_sw_polygon+0x56c>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 80192a2:	887b      	ldrh	r3, [r7, #2]
 80192a4:	009b      	lsls	r3, r3, #2
 80192a6:	4618      	mov	r0, r3
 80192a8:	f006 ff02 	bl	80200b0 <lv_mem_buf_get>
 80192ac:	63b8      	str	r0, [r7, #56]	; 0x38
    if(p == NULL) return;
 80192ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	f000 829f 	beq.w	80197f4 <lv_draw_sw_polygon+0x570>
    uint16_t i;
    uint16_t pcnt = 0;
 80192b6:	2300      	movs	r3, #0
 80192b8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    p[0] = points[0];
 80192bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	6013      	str	r3, [r2, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 80192c4:	2300      	movs	r3, #0
 80192c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80192ca:	e039      	b.n	8019340 <lv_draw_sw_polygon+0xbc>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 80192cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80192d0:	009b      	lsls	r3, r3, #2
 80192d2:	687a      	ldr	r2, [r7, #4]
 80192d4:	4413      	add	r3, r2
 80192d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80192da:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80192de:	3301      	adds	r3, #1
 80192e0:	009b      	lsls	r3, r3, #2
 80192e2:	6879      	ldr	r1, [r7, #4]
 80192e4:	440b      	add	r3, r1
 80192e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80192ea:	429a      	cmp	r2, r3
 80192ec:	d110      	bne.n	8019310 <lv_draw_sw_polygon+0x8c>
 80192ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80192f2:	009b      	lsls	r3, r3, #2
 80192f4:	687a      	ldr	r2, [r7, #4]
 80192f6:	4413      	add	r3, r2
 80192f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80192fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019300:	3301      	adds	r3, #1
 8019302:	009b      	lsls	r3, r3, #2
 8019304:	6879      	ldr	r1, [r7, #4]
 8019306:	440b      	add	r3, r1
 8019308:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801930c:	429a      	cmp	r2, r3
 801930e:	d012      	beq.n	8019336 <lv_draw_sw_polygon+0xb2>
            p[pcnt] = points[i];
 8019310:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019314:	009b      	lsls	r3, r3, #2
 8019316:	687a      	ldr	r2, [r7, #4]
 8019318:	18d1      	adds	r1, r2, r3
 801931a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801931e:	009b      	lsls	r3, r3, #2
 8019320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019322:	4413      	add	r3, r2
 8019324:	461a      	mov	r2, r3
 8019326:	460b      	mov	r3, r1
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	6013      	str	r3, [r2, #0]
            pcnt++;
 801932c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019330:	3301      	adds	r3, #1
 8019332:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    for(i = 0; i < point_cnt - 1; i++) {
 8019336:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801933a:	3301      	adds	r3, #1
 801933c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019340:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8019344:	887b      	ldrh	r3, [r7, #2]
 8019346:	3b01      	subs	r3, #1
 8019348:	429a      	cmp	r2, r3
 801934a:	dbbf      	blt.n	80192cc <lv_draw_sw_polygon+0x48>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019352:	8879      	ldrh	r1, [r7, #2]
 8019354:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8019358:	440b      	add	r3, r1
 801935a:	009b      	lsls	r3, r3, #2
 801935c:	6879      	ldr	r1, [r7, #4]
 801935e:	440b      	add	r3, r1
 8019360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019364:	429a      	cmp	r2, r3
 8019366:	d10d      	bne.n	8019384 <lv_draw_sw_polygon+0x100>
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801936e:	8879      	ldrh	r1, [r7, #2]
 8019370:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8019374:	440b      	add	r3, r1
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	6879      	ldr	r1, [r7, #4]
 801937a:	440b      	add	r3, r1
 801937c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019380:	429a      	cmp	r2, r3
 8019382:	d014      	beq.n	80193ae <lv_draw_sw_polygon+0x12a>
        p[pcnt] = points[point_cnt - 1];
 8019384:	887a      	ldrh	r2, [r7, #2]
 8019386:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801938a:	4413      	add	r3, r2
 801938c:	009b      	lsls	r3, r3, #2
 801938e:	687a      	ldr	r2, [r7, #4]
 8019390:	18d1      	adds	r1, r2, r3
 8019392:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019396:	009b      	lsls	r3, r3, #2
 8019398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801939a:	4413      	add	r3, r2
 801939c:	461a      	mov	r2, r3
 801939e:	460b      	mov	r3, r1
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	6013      	str	r3, [r2, #0]
        pcnt++;
 80193a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80193a8:	3301      	adds	r3, #1
 80193aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    point_cnt = pcnt;
 80193ae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80193b2:	807b      	strh	r3, [r7, #2]
    if(point_cnt < 3) {
 80193b4:	887b      	ldrh	r3, [r7, #2]
 80193b6:	2b02      	cmp	r3, #2
 80193b8:	d803      	bhi.n	80193c2 <lv_draw_sw_polygon+0x13e>
        lv_mem_buf_release(p);
 80193ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80193bc:	f006 ff24 	bl	8020208 <lv_mem_buf_release>
        return;
 80193c0:	e219      	b.n	80197f6 <lv_draw_sw_polygon+0x572>
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 80193c2:	4a9a      	ldr	r2, [pc, #616]	; (801962c <lv_draw_sw_polygon+0x3a8>)
 80193c4:	f107 031c 	add.w	r3, r7, #28
 80193c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80193cc:	e883 0003 	stmia.w	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 80193d0:	2300      	movs	r3, #0
 80193d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80193d6:	e03c      	b.n	8019452 <lv_draw_sw_polygon+0x1ce>
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 80193d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80193dc:	009b      	lsls	r3, r3, #2
 80193de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80193e0:	4413      	add	r3, r2
 80193e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80193e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80193ea:	4293      	cmp	r3, r2
 80193ec:	bfa8      	it	ge
 80193ee:	4613      	movge	r3, r2
 80193f0:	b21b      	sxth	r3, r3
 80193f2:	83bb      	strh	r3, [r7, #28]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 80193f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80193f8:	009b      	lsls	r3, r3, #2
 80193fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80193fc:	4413      	add	r3, r2
 80193fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019402:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019406:	4293      	cmp	r3, r2
 8019408:	bfa8      	it	ge
 801940a:	4613      	movge	r3, r2
 801940c:	b21b      	sxth	r3, r3
 801940e:	83fb      	strh	r3, [r7, #30]
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 8019410:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019414:	009b      	lsls	r3, r3, #2
 8019416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019418:	4413      	add	r3, r2
 801941a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801941e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019422:	4293      	cmp	r3, r2
 8019424:	bfb8      	it	lt
 8019426:	4613      	movlt	r3, r2
 8019428:	b21b      	sxth	r3, r3
 801942a:	843b      	strh	r3, [r7, #32]
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 801942c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019430:	009b      	lsls	r3, r3, #2
 8019432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019434:	4413      	add	r3, r2
 8019436:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801943a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801943e:	4293      	cmp	r3, r2
 8019440:	bfb8      	it	lt
 8019442:	4613      	movlt	r3, r2
 8019444:	b21b      	sxth	r3, r3
 8019446:	847b      	strh	r3, [r7, #34]	; 0x22
    for(i = 0; i < point_cnt; i++) {
 8019448:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801944c:	3301      	adds	r3, #1
 801944e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019452:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8019456:	887b      	ldrh	r3, [r7, #2]
 8019458:	429a      	cmp	r2, r3
 801945a:	d3bd      	bcc.n	80193d8 <lv_draw_sw_polygon+0x154>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	689a      	ldr	r2, [r3, #8]
 8019460:	f107 011c 	add.w	r1, r7, #28
 8019464:	f107 0314 	add.w	r3, r7, #20
 8019468:	4618      	mov	r0, r3
 801946a:	f005 fa77 	bl	801e95c <_lv_area_intersect>
 801946e:	4603      	mov	r3, r0
 8019470:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(!is_common) {
 8019474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019478:	f083 0301 	eor.w	r3, r3, #1
 801947c:	b2db      	uxtb	r3, r3
 801947e:	2b00      	cmp	r3, #0
 8019480:	d003      	beq.n	801948a <lv_draw_sw_polygon+0x206>
        lv_mem_buf_release(p);
 8019482:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019484:	f006 fec0 	bl	8020208 <lv_mem_buf_release>
        return;
 8019488:	e1b5      	b.n	80197f6 <lv_draw_sw_polygon+0x572>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	689b      	ldr	r3, [r3, #8]
 801948e:	633b      	str	r3, [r7, #48]	; 0x30
    draw_ctx->clip_area = &clip_area;
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	f107 0214 	add.w	r2, r7, #20
 8019496:	609a      	str	r2, [r3, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 8019498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801949a:	885b      	ldrh	r3, [r3, #2]
 801949c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    int16_t y_min_i = 0;
 80194a0:	2300      	movs	r3, #0
 80194a2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    for(i = 1; i < point_cnt; i++) {
 80194a6:	2301      	movs	r3, #1
 80194a8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80194ac:	e01b      	b.n	80194e6 <lv_draw_sw_polygon+0x262>
        if(p[i].y < y_min) {
 80194ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80194b2:	009b      	lsls	r3, r3, #2
 80194b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194b6:	4413      	add	r3, r2
 80194b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80194bc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80194c0:	429a      	cmp	r2, r3
 80194c2:	dd0b      	ble.n	80194dc <lv_draw_sw_polygon+0x258>
            y_min = p[i].y;
 80194c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194cc:	4413      	add	r3, r2
 80194ce:	885b      	ldrh	r3, [r3, #2]
 80194d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            y_min_i = i;
 80194d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80194d8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    for(i = 1; i < point_cnt; i++) {
 80194dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80194e0:	3301      	adds	r3, #1
 80194e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80194e6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80194ea:	887b      	ldrh	r3, [r7, #2]
 80194ec:	429a      	cmp	r2, r3
 80194ee:	d3de      	bcc.n	80194ae <lv_draw_sw_polygon+0x22a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 80194f0:	887b      	ldrh	r3, [r7, #2]
 80194f2:	222c      	movs	r2, #44	; 0x2c
 80194f4:	fb02 f303 	mul.w	r3, r2, r3
 80194f8:	4618      	mov	r0, r3
 80194fa:	f006 fdd9 	bl	80200b0 <lv_mem_buf_get>
 80194fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_draw_mask_line_param_t * mp_next = mp;
 8019500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019502:	657b      	str	r3, [r7, #84]	; 0x54

    int32_t i_prev_left = y_min_i;
 8019504:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019508:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t i_prev_right = y_min_i;
 801950a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801950e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t i_next_left;
    int32_t i_next_right;
    uint32_t mask_cnt = 0;
 8019510:	2300      	movs	r3, #0
 8019512:	643b      	str	r3, [r7, #64]	; 0x40

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
 8019514:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019518:	3b01      	subs	r3, #1
 801951a:	64bb      	str	r3, [r7, #72]	; 0x48
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801951c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801951e:	2b00      	cmp	r3, #0
 8019520:	da03      	bge.n	801952a <lv_draw_sw_polygon+0x2a6>
 8019522:	887b      	ldrh	r3, [r7, #2]
 8019524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019526:	4413      	add	r3, r2
 8019528:	64bb      	str	r3, [r7, #72]	; 0x48

    i_next_right = y_min_i + 1;
 801952a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801952e:	3301      	adds	r3, #1
 8019530:	647b      	str	r3, [r7, #68]	; 0x44
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 8019532:	887b      	ldrh	r3, [r7, #2]
 8019534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019536:	429a      	cmp	r2, r3
 8019538:	db01      	blt.n	801953e <lv_draw_sw_polygon+0x2ba>
 801953a:	2300      	movs	r3, #0
 801953c:	647b      	str	r3, [r7, #68]	; 0x44
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 801953e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019540:	009b      	lsls	r3, r3, #2
 8019542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019544:	4413      	add	r3, r2
 8019546:	f9b3 3000 	ldrsh.w	r3, [r3]
 801954a:	b29a      	uxth	r2, r3
 801954c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019550:	009b      	lsls	r3, r3, #2
 8019552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019554:	440b      	add	r3, r1
 8019556:	f9b3 3000 	ldrsh.w	r3, [r3]
 801955a:	b29b      	uxth	r3, r3
 801955c:	1ad3      	subs	r3, r2, r3
 801955e:	b29b      	uxth	r3, r3
 8019560:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 8019562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019564:	009b      	lsls	r3, r3, #2
 8019566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019568:	4413      	add	r3, r2
 801956a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801956e:	b29a      	uxth	r2, r3
 8019570:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019574:	009b      	lsls	r3, r3, #2
 8019576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019578:	440b      	add	r3, r1
 801957a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801957e:	b29b      	uxth	r3, r3
 8019580:	1ad3      	subs	r3, r2, r3
 8019582:	b29b      	uxth	r3, r3
 8019584:	853b      	strh	r3, [r7, #40]	; 0x28
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 8019586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019588:	009b      	lsls	r3, r3, #2
 801958a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801958c:	4413      	add	r3, r2
 801958e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019592:	b29a      	uxth	r2, r3
 8019594:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019598:	009b      	lsls	r3, r3, #2
 801959a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801959c:	440b      	add	r3, r1
 801959e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80195a2:	b29b      	uxth	r3, r3
 80195a4:	1ad3      	subs	r3, r2, r3
 80195a6:	b29b      	uxth	r3, r3
 80195a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 80195aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80195ac:	009b      	lsls	r3, r3, #2
 80195ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195b0:	4413      	add	r3, r2
 80195b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80195b6:	b29a      	uxth	r2, r3
 80195b8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80195c0:	440b      	add	r3, r1
 80195c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80195c6:	b29b      	uxth	r3, r3
 80195c8:	1ad3      	subs	r3, r2, r3
 80195ca:	b29b      	uxth	r3, r3
 80195cc:	84bb      	strh	r3, [r7, #36]	; 0x24

    bool inv = false;
 80195ce:	2300      	movs	r3, #0
 80195d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(dyl * dxr < dyr * dxl) inv = true;
 80195d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80195d8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80195dc:	fb03 f202 	mul.w	r2, r3, r2
 80195e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80195e4:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80195e8:	fb01 f303 	mul.w	r3, r1, r3
 80195ec:	429a      	cmp	r2, r3
 80195ee:	da02      	bge.n	80195f6 <lv_draw_sw_polygon+0x372>
 80195f0:	2301      	movs	r3, #1
 80195f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    do {
        if(!inv) {
 80195f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195fa:	f083 0301 	eor.w	r3, r3, #1
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	2b00      	cmp	r3, #0
 8019602:	d015      	beq.n	8019630 <lv_draw_sw_polygon+0x3ac>
            i_next_left = i_prev_left - 1;
 8019604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019606:	3b01      	subs	r3, #1
 8019608:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801960a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801960c:	2b00      	cmp	r3, #0
 801960e:	da03      	bge.n	8019618 <lv_draw_sw_polygon+0x394>
 8019610:	887b      	ldrh	r3, [r7, #2]
 8019612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019614:	4413      	add	r3, r2
 8019616:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right + 1;
 8019618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801961a:	3301      	adds	r3, #1
 801961c:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 801961e:	887b      	ldrh	r3, [r7, #2]
 8019620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019622:	429a      	cmp	r2, r3
 8019624:	db17      	blt.n	8019656 <lv_draw_sw_polygon+0x3d2>
 8019626:	2300      	movs	r3, #0
 8019628:	647b      	str	r3, [r7, #68]	; 0x44
 801962a:	e014      	b.n	8019656 <lv_draw_sw_polygon+0x3d2>
 801962c:	08022c24 	.word	0x08022c24
        }
        else {
            i_next_left = i_prev_left + 1;
 8019630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019632:	3301      	adds	r3, #1
 8019634:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 8019636:	887b      	ldrh	r3, [r7, #2]
 8019638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801963a:	429a      	cmp	r2, r3
 801963c:	db01      	blt.n	8019642 <lv_draw_sw_polygon+0x3be>
 801963e:	2300      	movs	r3, #0
 8019640:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right - 1;
 8019642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019644:	3b01      	subs	r3, #1
 8019646:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 8019648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801964a:	2b00      	cmp	r3, #0
 801964c:	da03      	bge.n	8019656 <lv_draw_sw_polygon+0x3d2>
 801964e:	887b      	ldrh	r3, [r7, #2]
 8019650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019652:	4413      	add	r3, r2
 8019654:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
 8019656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019658:	009b      	lsls	r3, r3, #2
 801965a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801965c:	4413      	add	r3, r2
 801965e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019664:	009b      	lsls	r3, r3, #2
 8019666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019668:	440b      	add	r3, r1
 801966a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801966e:	429a      	cmp	r2, r3
 8019670:	db47      	blt.n	8019702 <lv_draw_sw_polygon+0x47e>
            if(p[i_next_left].y != p[i_prev_left].y &&
 8019672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019674:	009b      	lsls	r3, r3, #2
 8019676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019678:	4413      	add	r3, r2
 801967a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801967e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019680:	009b      	lsls	r3, r3, #2
 8019682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019684:	440b      	add	r3, r1
 8019686:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801968a:	429a      	cmp	r2, r3
 801968c:	d034      	beq.n	80196f8 <lv_draw_sw_polygon+0x474>
               p[i_next_left].x != p[i_prev_left].x) {
 801968e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019690:	009b      	lsls	r3, r3, #2
 8019692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019694:	4413      	add	r3, r2
 8019696:	f9b3 2000 	ldrsh.w	r2, [r3]
 801969a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801969c:	009b      	lsls	r3, r3, #2
 801969e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80196a0:	440b      	add	r3, r1
 80196a2:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_left].y != p[i_prev_left].y &&
 80196a6:	429a      	cmp	r2, r3
 80196a8:	d026      	beq.n	80196f8 <lv_draw_sw_polygon+0x474>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 80196aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196ac:	009b      	lsls	r3, r3, #2
 80196ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80196b0:	4413      	add	r3, r2
 80196b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80196b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196b8:	009b      	lsls	r3, r3, #2
 80196ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80196bc:	4413      	add	r3, r2
 80196be:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_left].x, p[i_next_left].y,
 80196c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196c4:	009b      	lsls	r3, r3, #2
 80196c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80196c8:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 80196ca:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_left].x, p[i_next_left].y,
 80196ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196d0:	009b      	lsls	r3, r3, #2
 80196d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80196d4:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 80196d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80196da:	2201      	movs	r2, #1
 80196dc:	9201      	str	r2, [sp, #4]
 80196de:	9300      	str	r3, [sp, #0]
 80196e0:	4623      	mov	r3, r4
 80196e2:	4602      	mov	r2, r0
 80196e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80196e6:	f7f6 fbc3 	bl	800fe70 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
 80196ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80196ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80196ee:	f7f6 fa31 	bl	800fb54 <lv_draw_mask_add>
                mp_next++;
 80196f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80196f4:	332c      	adds	r3, #44	; 0x2c
 80196f6:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 80196f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196fa:	3301      	adds	r3, #1
 80196fc:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_left = i_next_left;
 80196fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019700:	653b      	str	r3, [r7, #80]	; 0x50
        }

        if(mask_cnt == point_cnt) break;
 8019702:	887b      	ldrh	r3, [r7, #2]
 8019704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019706:	429a      	cmp	r2, r3
 8019708:	d05b      	beq.n	80197c2 <lv_draw_sw_polygon+0x53e>

        if(p[i_next_right].y >= p[i_prev_right].y) {
 801970a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801970c:	009b      	lsls	r3, r3, #2
 801970e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019710:	4413      	add	r3, r2
 8019712:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019718:	009b      	lsls	r3, r3, #2
 801971a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801971c:	440b      	add	r3, r1
 801971e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019722:	429a      	cmp	r2, r3
 8019724:	db47      	blt.n	80197b6 <lv_draw_sw_polygon+0x532>
            if(p[i_next_right].y != p[i_prev_right].y &&
 8019726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019728:	009b      	lsls	r3, r3, #2
 801972a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801972c:	4413      	add	r3, r2
 801972e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019734:	009b      	lsls	r3, r3, #2
 8019736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019738:	440b      	add	r3, r1
 801973a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801973e:	429a      	cmp	r2, r3
 8019740:	d034      	beq.n	80197ac <lv_draw_sw_polygon+0x528>
               p[i_next_right].x != p[i_prev_right].x) {
 8019742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019744:	009b      	lsls	r3, r3, #2
 8019746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019748:	4413      	add	r3, r2
 801974a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801974e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019750:	009b      	lsls	r3, r3, #2
 8019752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019754:	440b      	add	r3, r1
 8019756:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_right].y != p[i_prev_right].y &&
 801975a:	429a      	cmp	r2, r3
 801975c:	d026      	beq.n	80197ac <lv_draw_sw_polygon+0x528>

                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801975e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019764:	4413      	add	r3, r2
 8019766:	f9b3 1000 	ldrsh.w	r1, [r3]
 801976a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801976c:	009b      	lsls	r3, r3, #2
 801976e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019770:	4413      	add	r3, r2
 8019772:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_right].x, p[i_next_right].y,
 8019776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019778:	009b      	lsls	r3, r3, #2
 801977a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801977c:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801977e:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_right].x, p[i_next_right].y,
 8019782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019784:	009b      	lsls	r3, r3, #2
 8019786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019788:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801978a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801978e:	2200      	movs	r2, #0
 8019790:	9201      	str	r2, [sp, #4]
 8019792:	9300      	str	r3, [sp, #0]
 8019794:	4623      	mov	r3, r4
 8019796:	4602      	mov	r2, r0
 8019798:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801979a:	f7f6 fb69 	bl	800fe70 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
 801979e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80197a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80197a2:	f7f6 f9d7 	bl	800fb54 <lv_draw_mask_add>
                mp_next++;
 80197a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80197a8:	332c      	adds	r3, #44	; 0x2c
 80197aa:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 80197ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197ae:	3301      	adds	r3, #1
 80197b0:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_right = i_next_right;
 80197b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197b4:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

    } while(mask_cnt < point_cnt);
 80197b6:	887b      	ldrh	r3, [r7, #2]
 80197b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80197ba:	429a      	cmp	r2, r3
 80197bc:	f4ff af1b 	bcc.w	80195f6 <lv_draw_sw_polygon+0x372>
 80197c0:	e000      	b.n	80197c4 <lv_draw_sw_polygon+0x540>
        if(mask_cnt == point_cnt) break;
 80197c2:	bf00      	nop

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 80197c4:	f107 031c 	add.w	r3, r7, #28
 80197c8:	461a      	mov	r2, r3
 80197ca:	68b9      	ldr	r1, [r7, #8]
 80197cc:	68f8      	ldr	r0, [r7, #12]
 80197ce:	f7f8 fdcd 	bl	801236c <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 80197d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80197d4:	f7f6 fa5c 	bl	800fc90 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 80197d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80197da:	f006 fd15 	bl	8020208 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 80197de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80197e0:	f006 fd12 	bl	8020208 <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197e8:	609a      	str	r2, [r3, #8]
 80197ea:	e004      	b.n	80197f6 <lv_draw_sw_polygon+0x572>
    if(point_cnt < 3) return;
 80197ec:	bf00      	nop
 80197ee:	e002      	b.n	80197f6 <lv_draw_sw_polygon+0x572>
    if(points == NULL) return;
 80197f0:	bf00      	nop
 80197f2:	e000      	b.n	80197f6 <lv_draw_sw_polygon+0x572>
    if(p == NULL) return;
 80197f4:	bf00      	nop
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 80197f6:	3764      	adds	r7, #100	; 0x64
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bd90      	pop	{r4, r7, pc}

080197fc <lv_area_copy>:
{
 80197fc:	b480      	push	{r7}
 80197fe:	b083      	sub	sp, #12
 8019800:	af00      	add	r7, sp, #0
 8019802:	6078      	str	r0, [r7, #4]
 8019804:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8019806:	683b      	ldr	r3, [r7, #0]
 8019808:	f9b3 2000 	ldrsh.w	r2, [r3]
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8019824:	683b      	ldr	r3, [r7, #0]
 8019826:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	80da      	strh	r2, [r3, #6]
}
 801982e:	bf00      	nop
 8019830:	370c      	adds	r7, #12
 8019832:	46bd      	mov	sp, r7
 8019834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019838:	4770      	bx	lr

0801983a <lv_area_get_width>:
{
 801983a:	b480      	push	{r7}
 801983c:	b083      	sub	sp, #12
 801983e:	af00      	add	r7, sp, #0
 8019840:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019848:	b29a      	uxth	r2, r3
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019850:	b29b      	uxth	r3, r3
 8019852:	1ad3      	subs	r3, r2, r3
 8019854:	b29b      	uxth	r3, r3
 8019856:	3301      	adds	r3, #1
 8019858:	b29b      	uxth	r3, r3
 801985a:	b21b      	sxth	r3, r3
}
 801985c:	4618      	mov	r0, r3
 801985e:	370c      	adds	r7, #12
 8019860:	46bd      	mov	sp, r7
 8019862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019866:	4770      	bx	lr

08019868 <lv_area_get_height>:
{
 8019868:	b480      	push	{r7}
 801986a:	b083      	sub	sp, #12
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019876:	b29a      	uxth	r2, r3
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801987e:	b29b      	uxth	r3, r3
 8019880:	1ad3      	subs	r3, r2, r3
 8019882:	b29b      	uxth	r3, r3
 8019884:	3301      	adds	r3, #1
 8019886:	b29b      	uxth	r3, r3
 8019888:	b21b      	sxth	r3, r3
}
 801988a:	4618      	mov	r0, r3
 801988c:	370c      	adds	r7, #12
 801988e:	46bd      	mov	sp, r7
 8019890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019894:	4770      	bx	lr

08019896 <lv_draw_sw_rect>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8019896:	b580      	push	{r7, lr}
 8019898:	b084      	sub	sp, #16
 801989a:	af00      	add	r7, sp, #0
 801989c:	60f8      	str	r0, [r7, #12]
 801989e:	60b9      	str	r1, [r7, #8]
 80198a0:	607a      	str	r2, [r7, #4]
#if LV_DRAW_COMPLEX
    draw_shadow(draw_ctx, dsc, coords);
 80198a2:	687a      	ldr	r2, [r7, #4]
 80198a4:	68b9      	ldr	r1, [r7, #8]
 80198a6:	68f8      	ldr	r0, [r7, #12]
 80198a8:	f000 fdd1 	bl	801a44e <draw_shadow>
#endif

    draw_bg(draw_ctx, dsc, coords);
 80198ac:	687a      	ldr	r2, [r7, #4]
 80198ae:	68b9      	ldr	r1, [r7, #8]
 80198b0:	68f8      	ldr	r0, [r7, #12]
 80198b2:	f000 f827 	bl	8019904 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 80198b6:	687a      	ldr	r2, [r7, #4]
 80198b8:	68b9      	ldr	r1, [r7, #8]
 80198ba:	68f8      	ldr	r0, [r7, #12]
 80198bc:	f000 fb1b 	bl	8019ef6 <draw_bg_img>

    draw_border(draw_ctx, dsc, coords);
 80198c0:	687a      	ldr	r2, [r7, #4]
 80198c2:	68b9      	ldr	r1, [r7, #8]
 80198c4:	68f8      	ldr	r0, [r7, #12]
 80198c6:	f000 fcd2 	bl	801a26e <draw_border>

    draw_outline(draw_ctx, dsc, coords);
 80198ca:	687a      	ldr	r2, [r7, #4]
 80198cc:	68b9      	ldr	r1, [r7, #8]
 80198ce:	68f8      	ldr	r0, [r7, #12]
 80198d0:	f002 fb61 	bl	801bf96 <draw_outline>

    LV_ASSERT_MEM_INTEGRITY();
}
 80198d4:	bf00      	nop
 80198d6:	3710      	adds	r7, #16
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd80      	pop	{r7, pc}

080198dc <lv_draw_sw_bg>:

void lv_draw_sw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 80198dc:	b580      	push	{r7, lr}
 80198de:	b084      	sub	sp, #16
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	60f8      	str	r0, [r7, #12]
 80198e4:	60b9      	str	r1, [r7, #8]
 80198e6:	607a      	str	r2, [r7, #4]
#if LV_COLOR_SCREEN_TRANSP && LV_COLOR_DEPTH == 32
    lv_memset_00(draw_ctx->buf, lv_area_get_size(draw_ctx->buf_area) * sizeof(lv_color_t));
#endif

    draw_bg(draw_ctx, dsc, coords);
 80198e8:	687a      	ldr	r2, [r7, #4]
 80198ea:	68b9      	ldr	r1, [r7, #8]
 80198ec:	68f8      	ldr	r0, [r7, #12]
 80198ee:	f000 f809 	bl	8019904 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 80198f2:	687a      	ldr	r2, [r7, #4]
 80198f4:	68b9      	ldr	r1, [r7, #8]
 80198f6:	68f8      	ldr	r0, [r7, #12]
 80198f8:	f000 fafd 	bl	8019ef6 <draw_bg_img>
}
 80198fc:	bf00      	nop
 80198fe:	3710      	adds	r7, #16
 8019900:	46bd      	mov	sp, r7
 8019902:	bd80      	pop	{r7, pc}

08019904 <draw_bg>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void draw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b0a6      	sub	sp, #152	; 0x98
 8019908:	af00      	add	r7, sp, #0
 801990a:	60f8      	str	r0, [r7, #12]
 801990c:	60b9      	str	r1, [r7, #8]
 801990e:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	78db      	ldrb	r3, [r3, #3]
 8019914:	2b02      	cmp	r3, #2
 8019916:	f240 82e8 	bls.w	8019eea <draw_bg+0x5e6>

    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 801991a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801991e:	6879      	ldr	r1, [r7, #4]
 8019920:	4618      	mov	r0, r3
 8019922:	f7ff ff6b 	bl	80197fc <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 8019926:	68bb      	ldr	r3, [r7, #8]
 8019928:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801992c:	2b01      	cmp	r3, #1
 801992e:	dd4f      	ble.n	80199d0 <draw_bg+0xcc>
 8019930:	68bb      	ldr	r3, [r7, #8]
 8019932:	7f1b      	ldrb	r3, [r3, #28]
 8019934:	2bfc      	cmp	r3, #252	; 0xfc
 8019936:	d94b      	bls.n	80199d0 <draw_bg+0xcc>
 8019938:	68bb      	ldr	r3, [r7, #8]
 801993a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d046      	beq.n	80199d0 <draw_bg+0xcc>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8019942:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8019946:	b29a      	uxth	r2, r3
 8019948:	68bb      	ldr	r3, [r7, #8]
 801994a:	7f5b      	ldrb	r3, [r3, #29]
 801994c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8019950:	b2db      	uxtb	r3, r3
 8019952:	109b      	asrs	r3, r3, #2
 8019954:	b29b      	uxth	r3, r3
 8019956:	f003 0301 	and.w	r3, r3, #1
 801995a:	b29b      	uxth	r3, r3
 801995c:	4413      	add	r3, r2
 801995e:	b29b      	uxth	r3, r3
 8019960:	b21b      	sxth	r3, r3
 8019962:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8019966:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801996a:	b29a      	uxth	r2, r3
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	7f5b      	ldrb	r3, [r3, #29]
 8019970:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8019974:	b2db      	uxtb	r3, r3
 8019976:	105b      	asrs	r3, r3, #1
 8019978:	b29b      	uxth	r3, r3
 801997a:	f003 0301 	and.w	r3, r3, #1
 801997e:	b29b      	uxth	r3, r3
 8019980:	4413      	add	r3, r2
 8019982:	b29b      	uxth	r3, r3
 8019984:	b21b      	sxth	r3, r3
 8019986:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 801998a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801998e:	b29a      	uxth	r2, r3
 8019990:	68bb      	ldr	r3, [r7, #8]
 8019992:	7f5b      	ldrb	r3, [r3, #29]
 8019994:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8019998:	b2db      	uxtb	r3, r3
 801999a:	10db      	asrs	r3, r3, #3
 801999c:	b29b      	uxth	r3, r3
 801999e:	f003 0301 	and.w	r3, r3, #1
 80199a2:	b29b      	uxth	r3, r3
 80199a4:	1ad3      	subs	r3, r2, r3
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	b21b      	sxth	r3, r3
 80199aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 80199ae:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80199b2:	b29a      	uxth	r2, r3
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	7f5b      	ldrb	r3, [r3, #29]
 80199b8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80199bc:	b2db      	uxtb	r3, r3
 80199be:	b29b      	uxth	r3, r3
 80199c0:	f003 0301 	and.w	r3, r3, #1
 80199c4:	b29b      	uxth	r3, r3
 80199c6:	1ad3      	subs	r3, r2, r3
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	b21b      	sxth	r3, r3
 80199cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    }

    lv_area_t clipped_coords;
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	689a      	ldr	r2, [r3, #8]
 80199d4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80199d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80199dc:	4618      	mov	r0, r3
 80199de:	f004 ffbd 	bl	801e95c <_lv_area_intersect>
 80199e2:	4603      	mov	r3, r0
 80199e4:	f083 0301 	eor.w	r3, r3, #1
 80199e8:	b2db      	uxtb	r3, r3
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	f040 827f 	bne.w	8019eee <draw_bg+0x5ea>

    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	7a9b      	ldrb	r3, [r3, #10]
 80199f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80199f8:	b2db      	uxtb	r3, r3
 80199fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 80199fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d104      	bne.n	8019a10 <draw_bg+0x10c>
 8019a06:	68bb      	ldr	r3, [r7, #8]
 8019a08:	791b      	ldrb	r3, [r3, #4]
 8019a0a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8019a0e:	e003      	b.n	8019a18 <draw_bg+0x114>
 8019a10:	68bb      	ldr	r3, [r7, #8]
 8019a12:	795b      	ldrb	r3, [r3, #5]
 8019a14:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8019a18:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8019a1c:	68bb      	ldr	r3, [r7, #8]
 8019a1e:	79db      	ldrb	r3, [r3, #7]
 8019a20:	429a      	cmp	r2, r3
 8019a22:	d102      	bne.n	8019a2a <draw_bg+0x126>
 8019a24:	2300      	movs	r3, #0
 8019a26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 8019a2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7f6 f9c0 	bl	800fdb4 <lv_draw_mask_is_any>
 8019a34:	4603      	mov	r3, r0
 8019a36:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 8019a3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019a3e:	2200      	movs	r2, #0
 8019a40:	601a      	str	r2, [r3, #0]
 8019a42:	605a      	str	r2, [r3, #4]
 8019a44:	609a      	str	r2, [r3, #8]
 8019a46:	60da      	str	r2, [r3, #12]
 8019a48:	611a      	str	r2, [r3, #16]
 8019a4a:	615a      	str	r2, [r3, #20]
 8019a4c:	619a      	str	r2, [r3, #24]
    blend_dsc.blend_mode = dsc->blend_mode;
 8019a4e:	68bb      	ldr	r3, [r7, #8]
 8019a50:	789b      	ldrb	r3, [r3, #2]
 8019a52:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    blend_dsc.color = bg_color;
 8019a56:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019a5a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    /*Most simple case: just a plain rectangle*/
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 8019a5e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8019a62:	f083 0301 	eor.w	r3, r3, #1
 8019a66:	b2db      	uxtb	r3, r3
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d016      	beq.n	8019a9a <draw_bg+0x196>
 8019a6c:	68bb      	ldr	r3, [r7, #8]
 8019a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d111      	bne.n	8019a9a <draw_bg+0x196>
 8019a76:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d10d      	bne.n	8019a9a <draw_bg+0x196>
        blend_dsc.blend_area = &bg_coords;
 8019a7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019a82:	63bb      	str	r3, [r7, #56]	; 0x38
        blend_dsc.opa = dsc->bg_opa;
 8019a84:	68bb      	ldr	r3, [r7, #8]
 8019a86:	78db      	ldrb	r3, [r3, #3]
 8019a88:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019a8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019a90:	4619      	mov	r1, r3
 8019a92:	68f8      	ldr	r0, [r7, #12]
 8019a94:	f7fb fc5e 	bl	8015354 <lv_draw_sw_blend>
        return;
 8019a98:	e22a      	b.n	8019ef0 <draw_bg+0x5ec>

    /*Complex case: there is gradient, mask, or radius*/
#if LV_DRAW_COMPLEX == 0
    LV_LOG_WARN("Can't draw complex rectangle because LV_DRAW_COMPLEX = 0");
#else
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 8019a9a:	68bb      	ldr	r3, [r7, #8]
 8019a9c:	78db      	ldrb	r3, [r3, #3]
 8019a9e:	2bfc      	cmp	r3, #252	; 0xfc
 8019aa0:	d802      	bhi.n	8019aa8 <draw_bg+0x1a4>
 8019aa2:	68bb      	ldr	r3, [r7, #8]
 8019aa4:	78db      	ldrb	r3, [r3, #3]
 8019aa6:	e000      	b.n	8019aaa <draw_bg+0x1a6>
 8019aa8:	23ff      	movs	r3, #255	; 0xff
 8019aaa:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius. Can't be larger than the half of the shortest side */
    lv_coord_t coords_bg_w = lv_area_get_width(&bg_coords);
 8019aae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7ff fec1 	bl	801983a <lv_area_get_width>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    lv_coord_t coords_bg_h = lv_area_get_height(&bg_coords);
 8019abe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	f7ff fed0 	bl	8019868 <lv_area_get_height>
 8019ac8:	4603      	mov	r3, r0
 8019aca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 8019ace:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8019ad2:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	bfa8      	it	ge
 8019ada:	4613      	movge	r3, r2
 8019adc:	b21b      	sxth	r3, r3
 8019ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 8019ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019ae6:	105b      	asrs	r3, r3, #1
 8019ae8:	68ba      	ldr	r2, [r7, #8]
 8019aea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019aee:	4293      	cmp	r3, r2
 8019af0:	bfa8      	it	ge
 8019af2:	4613      	movge	r3, r2
 8019af4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /*Add a radius mask if there is radius*/
    int32_t clipped_w = lv_area_get_width(&clipped_coords);
 8019af6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019afa:	4618      	mov	r0, r3
 8019afc:	f7ff fe9d 	bl	801983a <lv_area_get_width>
 8019b00:	4603      	mov	r3, r0
 8019b02:	67bb      	str	r3, [r7, #120]	; 0x78
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8019b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b08:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    lv_opa_t * mask_buf = NULL;
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0 || mask_any) {
 8019b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	dc03      	bgt.n	8019b20 <draw_bg+0x21c>
 8019b18:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d017      	beq.n	8019b50 <draw_bg+0x24c>
        mask_buf = lv_mem_buf_get(clipped_w);
 8019b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019b22:	4618      	mov	r0, r3
 8019b24:	f006 fac4 	bl	80200b0 <lv_mem_buf_get>
 8019b28:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 8019b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019b2e:	b21a      	sxth	r2, r3
 8019b30:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019b34:	f107 0020 	add.w	r0, r7, #32
 8019b38:	2300      	movs	r3, #0
 8019b3a:	f7f6 fbd7 	bl	80102ec <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8019b3e:	f107 0320 	add.w	r3, r7, #32
 8019b42:	2100      	movs	r1, #0
 8019b44:	4618      	mov	r0, r3
 8019b46:	f7f6 f805 	bl	800fb54 <lv_draw_mask_add>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    }

    int32_t h;

    lv_area_t blend_area;
    blend_area.x1 = clipped_coords.x1;
 8019b50:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019b54:	833b      	strh	r3, [r7, #24]
    blend_area.x2 = clipped_coords.x2;
 8019b56:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8019b5a:	83bb      	strh	r3, [r7, #28]

    blend_dsc.mask_buf = mask_buf;
 8019b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b60:	647b      	str	r3, [r7, #68]	; 0x44
    blend_dsc.blend_area = &blend_area;
 8019b62:	f107 0318 	add.w	r3, r7, #24
 8019b66:	63bb      	str	r3, [r7, #56]	; 0x38
    blend_dsc.mask_area = &blend_area;
 8019b68:	f107 0318 	add.w	r3, r7, #24
 8019b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    blend_dsc.opa = LV_OPA_COVER;
 8019b6e:	23ff      	movs	r3, #255	; 0xff
 8019b70:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50


    /*Get gradient if appropriate*/
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 8019b74:	68bb      	ldr	r3, [r7, #8]
 8019b76:	3305      	adds	r3, #5
 8019b78:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8019b7c:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 8019b80:	4618      	mov	r0, r3
 8019b82:	f7fc fff7 	bl	8016b74 <lv_gradient_get>
 8019b86:	6778      	str	r0, [r7, #116]	; 0x74
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 8019b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d00d      	beq.n	8019baa <draw_bg+0x2a6>
 8019b8e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019b92:	2b02      	cmp	r3, #2
 8019b94:	d109      	bne.n	8019baa <draw_bg+0x2a6>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 8019b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b98:	689a      	ldr	r2, [r3, #8]
 8019b9a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019b9e:	4619      	mov	r1, r3
 8019ba0:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8019ba4:	1acb      	subs	r3, r1, r3
 8019ba6:	4413      	add	r3, r2
 8019ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
#endif
#endif

    /*There is another mask too. Draw line by line. */
    if(mask_any) {
 8019baa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d04c      	beq.n	8019c4c <draw_bg+0x348>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 8019bb2:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019bba:	e03f      	b.n	8019c3c <draw_bg+0x338>
            blend_area.y1 = h;
 8019bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019bc0:	b21b      	sxth	r3, r3
 8019bc2:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 8019bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019bc8:	b21b      	sxth	r3, r3
 8019bca:	83fb      	strh	r3, [r7, #30]

            /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
             * It saves calculating the final opa in lv_draw_sw_blend*/
            lv_memset(mask_buf, opa, clipped_w);
 8019bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019bce:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8019bd2:	4619      	mov	r1, r3
 8019bd4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019bd8:	f006 fd86 	bl	80206e8 <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 8019bdc:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 8019be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019be4:	b21a      	sxth	r2, r3
 8019be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019be8:	b21b      	sxth	r3, r3
 8019bea:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019bee:	f7f5 ffe3 	bl	800fbb8 <lv_draw_mask_apply>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019bf8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8019bfc:	2b01      	cmp	r3, #1
 8019bfe:	d102      	bne.n	8019c06 <draw_bg+0x302>
 8019c00:	2302      	movs	r3, #2
 8019c02:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 8019c06:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019c0a:	2b01      	cmp	r3, #1
 8019c0c:	d10b      	bne.n	8019c26 <draw_bg+0x322>
 8019c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c10:	689b      	ldr	r3, [r3, #8]
 8019c12:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8019c16:	4611      	mov	r1, r2
 8019c18:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019c1c:	1a52      	subs	r2, r2, r1
 8019c1e:	4413      	add	r3, r2
 8019c20:	781b      	ldrb	r3, [r3, #0]
 8019c22:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019c2a:	4619      	mov	r1, r3
 8019c2c:	68f8      	ldr	r0, [r7, #12]
 8019c2e:	f7fb fb91 	bl	8015354 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 8019c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019c36:	3301      	adds	r3, #1
 8019c38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019c3c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8019c40:	461a      	mov	r2, r3
 8019c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019c46:	4293      	cmp	r3, r2
 8019c48:	ddb8      	ble.n	8019bbc <draw_bg+0x2b8>
        }
        goto bg_clean_up;
 8019c4a:	e130      	b.n	8019eae <draw_bg+0x5aa>
    }


    /* Draw the top of the rectangle line by line and mirror it to the bottom. */
    for(h = 0; h < rout; h++) {
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019c52:	e084      	b.n	8019d5e <draw_bg+0x45a>
        lv_coord_t top_y = bg_coords.y1 + h;
 8019c54:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019c58:	b29a      	uxth	r2, r3
 8019c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019c5e:	b29b      	uxth	r3, r3
 8019c60:	4413      	add	r3, r2
 8019c62:	b29b      	uxth	r3, r3
 8019c64:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t bottom_y = bg_coords.y2 - h;
 8019c68:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8019c6c:	b29a      	uxth	r2, r3
 8019c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019c72:	b29b      	uxth	r3, r3
 8019c74:	1ad3      	subs	r3, r2, r3
 8019c76:	b29b      	uxth	r3, r3
 8019c78:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 8019c7c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019c80:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8019c84:	429a      	cmp	r2, r3
 8019c86:	da05      	bge.n	8019c94 <draw_bg+0x390>
 8019c88:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8019c8c:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 8019c90:	429a      	cmp	r2, r3
 8019c92:	dc5e      	bgt.n	8019d52 <draw_bg+0x44e>

        /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
         * It saves calculating the final opa in lv_draw_sw_blend*/
        lv_memset(mask_buf, opa, clipped_w);
 8019c94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019c96:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8019c9a:	4619      	mov	r1, r3
 8019c9c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019ca0:	f006 fd22 	bl	80206e8 <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 8019ca4:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8019ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019caa:	b21b      	sxth	r3, r3
 8019cac:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8019cb0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019cb4:	f7f5 ff80 	bl	800fbb8 <lv_draw_mask_apply>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019cbe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8019cc2:	2b01      	cmp	r3, #1
 8019cc4:	d102      	bne.n	8019ccc <draw_bg+0x3c8>
 8019cc6:	2302      	movs	r3, #2
 8019cc8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(top_y >= clipped_coords.y1) {
 8019ccc:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019cd0:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	db1a      	blt.n	8019d0e <draw_bg+0x40a>
            blend_area.y1 = top_y;
 8019cd8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8019cdc:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = top_y;
 8019cde:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8019ce2:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  top_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 8019ce4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019ce8:	2b01      	cmp	r3, #1
 8019cea:	d10a      	bne.n	8019d02 <draw_bg+0x3fe>
 8019cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019cee:	689b      	ldr	r3, [r3, #8]
 8019cf0:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8019cf4:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 8019cf8:	1a52      	subs	r2, r2, r1
 8019cfa:	4413      	add	r3, r2
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019d02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019d06:	4619      	mov	r1, r3
 8019d08:	68f8      	ldr	r0, [r7, #12]
 8019d0a:	f7fb fb23 	bl	8015354 <lv_draw_sw_blend>
        }

        if(bottom_y <= clipped_coords.y2) {
 8019d0e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8019d12:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 8019d16:	429a      	cmp	r2, r3
 8019d18:	dc1c      	bgt.n	8019d54 <draw_bg+0x450>
            blend_area.y1 = bottom_y;
 8019d1a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8019d1e:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = bottom_y;
 8019d20:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8019d24:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  bottom_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 8019d26:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019d2a:	2b01      	cmp	r3, #1
 8019d2c:	d10a      	bne.n	8019d44 <draw_bg+0x440>
 8019d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d30:	689b      	ldr	r3, [r3, #8]
 8019d32:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 8019d36:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 8019d3a:	1a52      	subs	r2, r2, r1
 8019d3c:	4413      	add	r3, r2
 8019d3e:	781b      	ldrb	r3, [r3, #0]
 8019d40:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019d44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019d48:	4619      	mov	r1, r3
 8019d4a:	68f8      	ldr	r0, [r7, #12]
 8019d4c:	f7fb fb02 	bl	8015354 <lv_draw_sw_blend>
 8019d50:	e000      	b.n	8019d54 <draw_bg+0x450>
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 8019d52:	bf00      	nop
    for(h = 0; h < rout; h++) {
 8019d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019d58:	3301      	adds	r3, #1
 8019d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019d5e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019d64:	429a      	cmp	r2, r3
 8019d66:	f6ff af75 	blt.w	8019c54 <draw_bg+0x350>

    /* Draw the center of the rectangle.*/

    /*If no other masks and no gradient, the center is a simple rectangle*/
    lv_area_t center_coords;
    center_coords.x1 = bg_coords.x1;
 8019d6a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8019d6e:	823b      	strh	r3, [r7, #16]
    center_coords.x2 = bg_coords.x2;
 8019d70:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8019d74:	82bb      	strh	r3, [r7, #20]
    center_coords.y1 = bg_coords.y1 + rout;
 8019d76:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019d7a:	b29a      	uxth	r2, r3
 8019d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019d7e:	b29b      	uxth	r3, r3
 8019d80:	4413      	add	r3, r2
 8019d82:	b29b      	uxth	r3, r3
 8019d84:	b21b      	sxth	r3, r3
 8019d86:	827b      	strh	r3, [r7, #18]
    center_coords.y2 = bg_coords.y2 - rout;
 8019d88:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8019d8c:	b29a      	uxth	r2, r3
 8019d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	1ad3      	subs	r3, r2, r3
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	b21b      	sxth	r3, r3
 8019d98:	82fb      	strh	r3, [r7, #22]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 8019d9a:	f107 0310 	add.w	r3, r7, #16
 8019d9e:	4618      	mov	r0, r3
 8019da0:	f7f6 f808 	bl	800fdb4 <lv_draw_mask_is_any>
 8019da4:	4603      	mov	r3, r0
 8019da6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 8019daa:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8019dae:	f083 0301 	eor.w	r3, r3, #1
 8019db2:	b2db      	uxtb	r3, r3
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d022      	beq.n	8019dfe <draw_bg+0x4fa>
 8019db8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d11e      	bne.n	8019dfe <draw_bg+0x4fa>
        blend_area.y1 = bg_coords.y1 + rout;
 8019dc0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019dc4:	b29a      	uxth	r2, r3
 8019dc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019dc8:	b29b      	uxth	r3, r3
 8019dca:	4413      	add	r3, r2
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	b21b      	sxth	r3, r3
 8019dd0:	837b      	strh	r3, [r7, #26]
        blend_area.y2 = bg_coords.y2 - rout;
 8019dd2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8019dd6:	b29a      	uxth	r2, r3
 8019dd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	1ad3      	subs	r3, r2, r3
 8019dde:	b29b      	uxth	r3, r3
 8019de0:	b21b      	sxth	r3, r3
 8019de2:	83fb      	strh	r3, [r7, #30]
        blend_dsc.opa = opa;
 8019de4:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8019de8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_buf = NULL;
 8019dec:	2300      	movs	r3, #0
 8019dee:	647b      	str	r3, [r7, #68]	; 0x44
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019df4:	4619      	mov	r1, r3
 8019df6:	68f8      	ldr	r0, [r7, #12]
 8019df8:	f7fb faac 	bl	8015354 <lv_draw_sw_blend>
 8019dfc:	e057      	b.n	8019eae <draw_bg+0x5aa>
    }
    /*With gradient and/or mask draw line by line*/
    else {
        blend_dsc.opa = opa;
 8019dfe:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8019e02:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8019e06:	2301      	movs	r3, #1
 8019e08:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        int32_t h_end = bg_coords.y2 - rout;
 8019e0c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8019e10:	461a      	mov	r2, r3
 8019e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019e14:	1ad3      	subs	r3, r2, r3
 8019e16:	66fb      	str	r3, [r7, #108]	; 0x6c
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8019e18:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8019e1c:	461a      	mov	r2, r3
 8019e1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019e20:	4413      	add	r3, r2
 8019e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019e26:	e03c      	b.n	8019ea2 <draw_bg+0x59e>
            /*If there is no other mask do not apply mask as in the center there is no radius to mask*/
            if(mask_any_center) {
 8019e28:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d015      	beq.n	8019e5c <draw_bg+0x558>
                lv_memset(mask_buf, opa, clipped_w);
 8019e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019e32:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8019e36:	4619      	mov	r1, r3
 8019e38:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019e3c:	f006 fc54 	bl	80206e8 <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 8019e40:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 8019e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019e48:	b21a      	sxth	r2, r3
 8019e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019e4c:	b21b      	sxth	r3, r3
 8019e4e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019e52:	f7f5 feb1 	bl	800fbb8 <lv_draw_mask_apply>
 8019e56:	4603      	mov	r3, r0
 8019e58:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            blend_area.y1 = h;
 8019e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019e60:	b21b      	sxth	r3, r3
 8019e62:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 8019e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019e68:	b21b      	sxth	r3, r3
 8019e6a:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 8019e6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019e70:	2b01      	cmp	r3, #1
 8019e72:	d10b      	bne.n	8019e8c <draw_bg+0x588>
 8019e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019e76:	689b      	ldr	r3, [r3, #8]
 8019e78:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8019e7c:	4611      	mov	r1, r2
 8019e7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019e82:	1a52      	subs	r2, r2, r1
 8019e84:	4413      	add	r3, r2
 8019e86:	781b      	ldrb	r3, [r3, #0]
 8019e88:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019e8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019e90:	4619      	mov	r1, r3
 8019e92:	68f8      	ldr	r0, [r7, #12]
 8019e94:	f7fb fa5e 	bl	8015354 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8019e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019e9c:	3301      	adds	r3, #1
 8019e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019ea2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	ddbd      	ble.n	8019e28 <draw_bg+0x524>
        }
    }


bg_clean_up:
 8019eac:	bf00      	nop
    if(mask_buf) lv_mem_buf_release(mask_buf);
 8019eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d003      	beq.n	8019ebe <draw_bg+0x5ba>
 8019eb6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8019eba:	f006 f9a5 	bl	8020208 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 8019ebe:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8019ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019ec6:	d009      	beq.n	8019edc <draw_bg+0x5d8>
        lv_draw_mask_remove_id(mask_rout_id);
 8019ec8:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7f5 feb7 	bl	800fc40 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 8019ed2:	f107 0320 	add.w	r3, r7, #32
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	f7f5 ff02 	bl	800fce0 <lv_draw_mask_free_param>
    }
    if(grad) {
 8019edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d006      	beq.n	8019ef0 <draw_bg+0x5ec>
        lv_gradient_cleanup(grad);
 8019ee2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019ee4:	f7fc ffb4 	bl	8016e50 <lv_gradient_cleanup>
 8019ee8:	e002      	b.n	8019ef0 <draw_bg+0x5ec>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8019eea:	bf00      	nop
 8019eec:	e000      	b.n	8019ef0 <draw_bg+0x5ec>
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 8019eee:	bf00      	nop
    }

#endif
}
 8019ef0:	3798      	adds	r7, #152	; 0x98
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bd80      	pop	{r7, pc}

08019ef6 <draw_bg_img>:

static void draw_bg_img(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8019ef6:	b590      	push	{r4, r7, lr}
 8019ef8:	b0a3      	sub	sp, #140	; 0x8c
 8019efa:	af04      	add	r7, sp, #16
 8019efc:	60f8      	str	r0, [r7, #12]
 8019efe:	60b9      	str	r1, [r7, #8]
 8019f00:	607a      	str	r2, [r7, #4]
    if(dsc->bg_img_src == NULL) return;
 8019f02:	68bb      	ldr	r3, [r7, #8]
 8019f04:	68db      	ldr	r3, [r3, #12]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	f000 81a9 	beq.w	801a25e <draw_bg_img+0x368>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 8019f0c:	68bb      	ldr	r3, [r7, #8]
 8019f0e:	7d5b      	ldrb	r3, [r3, #21]
 8019f10:	2b02      	cmp	r3, #2
 8019f12:	f240 81a6 	bls.w	801a262 <draw_bg_img+0x36c>

    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	689a      	ldr	r2, [r3, #8]
 8019f1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8019f1e:	6879      	ldr	r1, [r7, #4]
 8019f20:	4618      	mov	r0, r3
 8019f22:	f004 fd1b 	bl	801e95c <_lv_area_intersect>
 8019f26:	4603      	mov	r3, r0
 8019f28:	f083 0301 	eor.w	r3, r3, #1
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	f040 8199 	bne.w	801a266 <draw_bg_img+0x370>
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	689b      	ldr	r3, [r3, #8]
 8019f38:	677b      	str	r3, [r7, #116]	; 0x74
    draw_ctx->clip_area = &clip_area;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8019f40:	609a      	str	r2, [r3, #8]

    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	68db      	ldr	r3, [r3, #12]
 8019f46:	4618      	mov	r0, r3
 8019f48:	f7f4 fb5f 	bl	800e60a <lv_img_src_get_type>
 8019f4c:	4603      	mov	r3, r0
 8019f4e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8019f52:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8019f56:	2b02      	cmp	r3, #2
 8019f58:	d17f      	bne.n	801a05a <draw_bg_img+0x164>
        lv_point_t size;
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8019f5a:	68bb      	ldr	r3, [r7, #8]
 8019f5c:	68d9      	ldr	r1, [r3, #12]
 8019f5e:	68bb      	ldr	r3, [r7, #8]
 8019f60:	691a      	ldr	r2, [r3, #16]
 8019f62:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8019f66:	2300      	movs	r3, #0
 8019f68:	9302      	str	r3, [sp, #8]
 8019f6a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8019f6e:	9301      	str	r3, [sp, #4]
 8019f70:	2300      	movs	r3, #0
 8019f72:	9300      	str	r3, [sp, #0]
 8019f74:	2300      	movs	r3, #0
 8019f76:	f008 f941 	bl	80221fc <lv_txt_get_size>
        lv_area_t a;
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f80:	b29c      	uxth	r4, r3
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f7ff fc59 	bl	801983a <lv_area_get_width>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	da00      	bge.n	8019f90 <draw_bg_img+0x9a>
 8019f8e:	3301      	adds	r3, #1
 8019f90:	105b      	asrs	r3, r3, #1
 8019f92:	b21b      	sxth	r3, r3
 8019f94:	b29b      	uxth	r3, r3
 8019f96:	4423      	add	r3, r4
 8019f98:	b29a      	uxth	r2, r3
 8019f9a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	da00      	bge.n	8019fa4 <draw_bg_img+0xae>
 8019fa2:	3301      	adds	r3, #1
 8019fa4:	105b      	asrs	r3, r3, #1
 8019fa6:	b21b      	sxth	r3, r3
 8019fa8:	b29b      	uxth	r3, r3
 8019faa:	1ad3      	subs	r3, r2, r3
 8019fac:	b29b      	uxth	r3, r3
 8019fae:	b21b      	sxth	r3, r3
 8019fb0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        a.x2 = a.x1 + size.x - 1;
 8019fb4:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8019fb8:	b29a      	uxth	r2, r3
 8019fba:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	4413      	add	r3, r2
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	3b01      	subs	r3, #1
 8019fc6:	b29b      	uxth	r3, r3
 8019fc8:	b21b      	sxth	r3, r3
 8019fca:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019fd4:	b29c      	uxth	r4, r3
 8019fd6:	6878      	ldr	r0, [r7, #4]
 8019fd8:	f7ff fc46 	bl	8019868 <lv_area_get_height>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	da00      	bge.n	8019fe4 <draw_bg_img+0xee>
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	105b      	asrs	r3, r3, #1
 8019fe6:	b21b      	sxth	r3, r3
 8019fe8:	b29b      	uxth	r3, r3
 8019fea:	4423      	add	r3, r4
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	da00      	bge.n	8019ff8 <draw_bg_img+0x102>
 8019ff6:	3301      	adds	r3, #1
 8019ff8:	105b      	asrs	r3, r3, #1
 8019ffa:	b21b      	sxth	r3, r3
 8019ffc:	b29b      	uxth	r3, r3
 8019ffe:	1ad3      	subs	r3, r2, r3
 801a000:	b29b      	uxth	r3, r3
 801a002:	b21b      	sxth	r3, r3
 801a004:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        a.y2 = a.y1 + size.y - 1;
 801a008:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801a00c:	b29a      	uxth	r2, r3
 801a00e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801a012:	b29b      	uxth	r3, r3
 801a014:	4413      	add	r3, r2
 801a016:	b29b      	uxth	r3, r3
 801a018:	3b01      	subs	r3, #1
 801a01a:	b29b      	uxth	r3, r3
 801a01c:	b21b      	sxth	r3, r3
 801a01e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        lv_draw_label_dsc_t label_draw_dsc;
        lv_draw_label_dsc_init(&label_draw_dsc);
 801a022:	f107 0314 	add.w	r3, r7, #20
 801a026:	4618      	mov	r0, r3
 801a028:	f7f4 fd9e 	bl	800eb68 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 801a02c:	68bb      	ldr	r3, [r7, #8]
 801a02e:	691b      	ldr	r3, [r3, #16]
 801a030:	617b      	str	r3, [r7, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 801a032:	68bb      	ldr	r3, [r7, #8]
 801a034:	7d1b      	ldrb	r3, [r3, #20]
 801a036:	f887 3020 	strb.w	r3, [r7, #32]
        label_draw_dsc.opa = dsc->bg_img_opa;
 801a03a:	68bb      	ldr	r3, [r7, #8]
 801a03c:	7d5b      	ldrb	r3, [r3, #21]
 801a03e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 801a042:	68bb      	ldr	r3, [r7, #8]
 801a044:	68db      	ldr	r3, [r3, #12]
 801a046:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801a04a:	f107 0114 	add.w	r1, r7, #20
 801a04e:	2000      	movs	r0, #0
 801a050:	9000      	str	r0, [sp, #0]
 801a052:	68f8      	ldr	r0, [r7, #12]
 801a054:	f7f4 fdb4 	bl	800ebc0 <lv_draw_label>
 801a058:	e0fd      	b.n	801a256 <draw_bg_img+0x360>
    }
    else {
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 801a05a:	68bb      	ldr	r3, [r7, #8]
 801a05c:	68db      	ldr	r3, [r3, #12]
 801a05e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801a062:	4611      	mov	r1, r2
 801a064:	4618      	mov	r0, r3
 801a066:	f7f8 fb49 	bl	80126fc <lv_img_decoder_get_info>
 801a06a:	4603      	mov	r3, r0
 801a06c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if(res == LV_RES_OK) {
 801a070:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801a074:	2b01      	cmp	r3, #1
 801a076:	f040 80ee 	bne.w	801a256 <draw_bg_img+0x360>
            lv_draw_img_dsc_t img_dsc;
            lv_draw_img_dsc_init(&img_dsc);
 801a07a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a07e:	4618      	mov	r0, r3
 801a080:	f7f4 f9df 	bl	800e442 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 801a084:	68bb      	ldr	r3, [r7, #8]
 801a086:	789b      	ldrb	r3, [r3, #2]
 801a088:	f003 030f 	and.w	r3, r3, #15
 801a08c:	b2da      	uxtb	r2, r3
 801a08e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a092:	f362 0303 	bfi	r3, r2, #0, #4
 801a096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            img_dsc.recolor = dsc->bg_img_recolor;
 801a09a:	68bb      	ldr	r3, [r7, #8]
 801a09c:	7d1b      	ldrb	r3, [r3, #20]
 801a09e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 801a0a2:	68bb      	ldr	r3, [r7, #8]
 801a0a4:	7d9b      	ldrb	r3, [r3, #22]
 801a0a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            img_dsc.opa = dsc->bg_img_opa;
 801a0aa:	68bb      	ldr	r3, [r7, #8]
 801a0ac:	7d5b      	ldrb	r3, [r3, #21]
 801a0ae:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

            /*Center align*/
            if(dsc->bg_img_tiled == false) {
 801a0b2:	68bb      	ldr	r3, [r7, #8]
 801a0b4:	7ddb      	ldrb	r3, [r3, #23]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d163      	bne.n	801a182 <draw_bg_img+0x28c>
                lv_area_t area;
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0c0:	b29c      	uxth	r4, r3
 801a0c2:	6878      	ldr	r0, [r7, #4]
 801a0c4:	f7ff fbb9 	bl	801983a <lv_area_get_width>
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	da00      	bge.n	801a0d0 <draw_bg_img+0x1da>
 801a0ce:	3301      	adds	r3, #1
 801a0d0:	105b      	asrs	r3, r3, #1
 801a0d2:	b21b      	sxth	r3, r3
 801a0d4:	b29b      	uxth	r3, r3
 801a0d6:	4423      	add	r3, r4
 801a0d8:	b29a      	uxth	r2, r3
 801a0da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a0dc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801a0e0:	b29b      	uxth	r3, r3
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	da00      	bge.n	801a0e8 <draw_bg_img+0x1f2>
 801a0e6:	3301      	adds	r3, #1
 801a0e8:	105b      	asrs	r3, r3, #1
 801a0ea:	425b      	negs	r3, r3
 801a0ec:	b29b      	uxth	r3, r3
 801a0ee:	4413      	add	r3, r2
 801a0f0:	b29b      	uxth	r3, r3
 801a0f2:	b21b      	sxth	r3, r3
 801a0f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0fc:	b29c      	uxth	r4, r3
 801a0fe:	6878      	ldr	r0, [r7, #4]
 801a100:	f7ff fbb2 	bl	8019868 <lv_area_get_height>
 801a104:	4603      	mov	r3, r0
 801a106:	2b00      	cmp	r3, #0
 801a108:	da00      	bge.n	801a10c <draw_bg_img+0x216>
 801a10a:	3301      	adds	r3, #1
 801a10c:	105b      	asrs	r3, r3, #1
 801a10e:	b21b      	sxth	r3, r3
 801a110:	b29b      	uxth	r3, r3
 801a112:	4423      	add	r3, r4
 801a114:	b29a      	uxth	r2, r3
 801a116:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801a11a:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801a11e:	b29b      	uxth	r3, r3
 801a120:	2b00      	cmp	r3, #0
 801a122:	da00      	bge.n	801a126 <draw_bg_img+0x230>
 801a124:	3301      	adds	r3, #1
 801a126:	105b      	asrs	r3, r3, #1
 801a128:	425b      	negs	r3, r3
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	4413      	add	r3, r2
 801a12e:	b29b      	uxth	r3, r3
 801a130:	b21b      	sxth	r3, r3
 801a132:	87fb      	strh	r3, [r7, #62]	; 0x3e
                area.x2 = area.x1 + header.w - 1;
 801a134:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801a138:	b29b      	uxth	r3, r3
 801a13a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a13c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801a140:	b292      	uxth	r2, r2
 801a142:	4413      	add	r3, r2
 801a144:	b29b      	uxth	r3, r3
 801a146:	3b01      	subs	r3, #1
 801a148:	b29b      	uxth	r3, r3
 801a14a:	b21b      	sxth	r3, r3
 801a14c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                area.y2 = area.y1 + header.h - 1;
 801a150:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801a154:	b29b      	uxth	r3, r3
 801a156:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801a15a:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801a15e:	b292      	uxth	r2, r2
 801a160:	4413      	add	r3, r2
 801a162:	b29b      	uxth	r3, r3
 801a164:	3b01      	subs	r3, #1
 801a166:	b29b      	uxth	r3, r3
 801a168:	b21b      	sxth	r3, r3
 801a16a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801a16e:	68bb      	ldr	r3, [r7, #8]
 801a170:	68db      	ldr	r3, [r3, #12]
 801a172:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801a176:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801a17a:	68f8      	ldr	r0, [r7, #12]
 801a17c:	f7f4 f97e 	bl	800e47c <lv_draw_img>
 801a180:	e069      	b.n	801a256 <draw_bg_img+0x360>
            }
            else {
                lv_area_t area;
                area.y1 = coords->y1;
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a188:	86fb      	strh	r3, [r7, #54]	; 0x36
                area.y2 = area.y1 + header.h - 1;
 801a18a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a18e:	b29b      	uxth	r3, r3
 801a190:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801a194:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801a198:	b292      	uxth	r2, r2
 801a19a:	4413      	add	r3, r2
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	3b01      	subs	r3, #1
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	b21b      	sxth	r3, r3
 801a1a4:	877b      	strh	r3, [r7, #58]	; 0x3a

                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801a1a6:	e04f      	b.n	801a248 <draw_bg_img+0x352>

                    area.x1 = coords->x1;
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a1ae:	86bb      	strh	r3, [r7, #52]	; 0x34
                    area.x2 = area.x1 + header.w - 1;
 801a1b0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801a1b4:	b29b      	uxth	r3, r3
 801a1b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a1b8:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801a1bc:	b292      	uxth	r2, r2
 801a1be:	4413      	add	r3, r2
 801a1c0:	b29b      	uxth	r3, r3
 801a1c2:	3b01      	subs	r3, #1
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	b21b      	sxth	r3, r3
 801a1c8:	873b      	strh	r3, [r7, #56]	; 0x38
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801a1ca:	e01e      	b.n	801a20a <draw_bg_img+0x314>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	68db      	ldr	r3, [r3, #12]
 801a1d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801a1d4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801a1d8:	68f8      	ldr	r0, [r7, #12]
 801a1da:	f7f4 f94f 	bl	800e47c <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801a1de:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801a1e2:	b29b      	uxth	r3, r3
 801a1e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a1e6:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801a1ea:	b292      	uxth	r2, r2
 801a1ec:	4413      	add	r3, r2
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	b21b      	sxth	r3, r3
 801a1f2:	86bb      	strh	r3, [r7, #52]	; 0x34
 801a1f4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801a1f8:	b29b      	uxth	r3, r3
 801a1fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a1fc:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801a200:	b292      	uxth	r2, r2
 801a202:	4413      	add	r3, r2
 801a204:	b29b      	uxth	r3, r3
 801a206:	b21b      	sxth	r3, r3
 801a208:	873b      	strh	r3, [r7, #56]	; 0x38
 801a20a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a214:	429a      	cmp	r2, r3
 801a216:	ddd9      	ble.n	801a1cc <draw_bg_img+0x2d6>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801a218:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a21c:	b29b      	uxth	r3, r3
 801a21e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801a222:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801a226:	b292      	uxth	r2, r2
 801a228:	4413      	add	r3, r2
 801a22a:	b29b      	uxth	r3, r3
 801a22c:	b21b      	sxth	r3, r3
 801a22e:	86fb      	strh	r3, [r7, #54]	; 0x36
 801a230:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801a234:	b29b      	uxth	r3, r3
 801a236:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801a23a:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801a23e:	b292      	uxth	r2, r2
 801a240:	4413      	add	r3, r2
 801a242:	b29b      	uxth	r3, r3
 801a244:	b21b      	sxth	r3, r3
 801a246:	877b      	strh	r3, [r7, #58]	; 0x3a
 801a248:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a252:	429a      	cmp	r2, r3
 801a254:	dda8      	ble.n	801a1a8 <draw_bg_img+0x2b2>
        else {
            LV_LOG_WARN("Couldn't read the background image");
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a25a:	609a      	str	r2, [r3, #8]
 801a25c:	e004      	b.n	801a268 <draw_bg_img+0x372>
    if(dsc->bg_img_src == NULL) return;
 801a25e:	bf00      	nop
 801a260:	e002      	b.n	801a268 <draw_bg_img+0x372>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801a262:	bf00      	nop
 801a264:	e000      	b.n	801a268 <draw_bg_img+0x372>
        return;
 801a266:	bf00      	nop
}
 801a268:	377c      	adds	r7, #124	; 0x7c
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bd90      	pop	{r4, r7, pc}

0801a26e <draw_border>:

static void draw_border(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801a26e:	b580      	push	{r7, lr}
 801a270:	b090      	sub	sp, #64	; 0x40
 801a272:	af04      	add	r7, sp, #16
 801a274:	60f8      	str	r0, [r7, #12]
 801a276:	60b9      	str	r1, [r7, #8]
 801a278:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801a27a:	68bb      	ldr	r3, [r7, #8]
 801a27c:	7f1b      	ldrb	r3, [r3, #28]
 801a27e:	2b02      	cmp	r3, #2
 801a280:	f240 80db 	bls.w	801a43a <draw_border+0x1cc>
    if(dsc->border_width == 0) return;
 801a284:	68bb      	ldr	r3, [r7, #8]
 801a286:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	f000 80d7 	beq.w	801a43e <draw_border+0x1d0>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	7f5b      	ldrb	r3, [r3, #29]
 801a294:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a298:	b2db      	uxtb	r3, r3
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	f000 80d1 	beq.w	801a442 <draw_border+0x1d4>
    if(dsc->border_post) return;
 801a2a0:	68bb      	ldr	r3, [r7, #8]
 801a2a2:	7f5b      	ldrb	r3, [r3, #29]
 801a2a4:	f003 0301 	and.w	r3, r3, #1
 801a2a8:	b2db      	uxtb	r3, r3
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	f040 80cb 	bne.w	801a446 <draw_border+0x1d8>

    int32_t coords_w = lv_area_get_width(coords);
 801a2b0:	6878      	ldr	r0, [r7, #4]
 801a2b2:	f7ff fac2 	bl	801983a <lv_area_get_width>
 801a2b6:	4603      	mov	r3, r0
 801a2b8:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t coords_h = lv_area_get_height(coords);
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f7ff fad4 	bl	8019868 <lv_area_get_height>
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	623b      	str	r3, [r7, #32]
    int32_t rout = dsc->radius;
 801a2c4:	68bb      	ldr	r3, [r7, #8]
 801a2c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t short_side = LV_MIN(coords_w, coords_h);
 801a2cc:	6a3a      	ldr	r2, [r7, #32]
 801a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2d0:	4293      	cmp	r3, r2
 801a2d2:	bfa8      	it	ge
 801a2d4:	4613      	movge	r3, r2
 801a2d6:	61fb      	str	r3, [r7, #28]
    if(rout > short_side >> 1) rout = short_side >> 1;
 801a2d8:	69fb      	ldr	r3, [r7, #28]
 801a2da:	105b      	asrs	r3, r3, #1
 801a2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2de:	429a      	cmp	r2, r3
 801a2e0:	dd02      	ble.n	801a2e8 <draw_border+0x7a>
 801a2e2:	69fb      	ldr	r3, [r7, #28]
 801a2e4:	105b      	asrs	r3, r3, #1
 801a2e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801a2e8:	f107 0314 	add.w	r3, r7, #20
 801a2ec:	6879      	ldr	r1, [r7, #4]
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f7ff fa84 	bl	80197fc <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801a2f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a2f8:	b29a      	uxth	r2, r3
 801a2fa:	68bb      	ldr	r3, [r7, #8]
 801a2fc:	7f5b      	ldrb	r3, [r3, #29]
 801a2fe:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801a302:	b2db      	uxtb	r3, r3
 801a304:	f003 0304 	and.w	r3, r3, #4
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d004      	beq.n	801a316 <draw_border+0xa8>
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a312:	b29b      	uxth	r3, r3
 801a314:	e009      	b.n	801a32a <draw_border+0xbc>
 801a316:	68bb      	ldr	r3, [r7, #8]
 801a318:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a31c:	b299      	uxth	r1, r3
 801a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a320:	b29b      	uxth	r3, r3
 801a322:	440b      	add	r3, r1
 801a324:	b29b      	uxth	r3, r3
 801a326:	425b      	negs	r3, r3
 801a328:	b29b      	uxth	r3, r3
 801a32a:	4413      	add	r3, r2
 801a32c:	b29b      	uxth	r3, r3
 801a32e:	b21b      	sxth	r3, r3
 801a330:	82bb      	strh	r3, [r7, #20]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 801a332:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801a336:	b29a      	uxth	r2, r3
 801a338:	68bb      	ldr	r3, [r7, #8]
 801a33a:	7f5b      	ldrb	r3, [r3, #29]
 801a33c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801a340:	b2db      	uxtb	r3, r3
 801a342:	f003 0308 	and.w	r3, r3, #8
 801a346:	2b00      	cmp	r3, #0
 801a348:	d004      	beq.n	801a354 <draw_border+0xe6>
 801a34a:	68bb      	ldr	r3, [r7, #8]
 801a34c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a350:	b29b      	uxth	r3, r3
 801a352:	e009      	b.n	801a368 <draw_border+0xfa>
 801a354:	68bb      	ldr	r3, [r7, #8]
 801a356:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a35a:	b299      	uxth	r1, r3
 801a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a35e:	b29b      	uxth	r3, r3
 801a360:	440b      	add	r3, r1
 801a362:	b29b      	uxth	r3, r3
 801a364:	425b      	negs	r3, r3
 801a366:	b29b      	uxth	r3, r3
 801a368:	1ad3      	subs	r3, r2, r3
 801a36a:	b29b      	uxth	r3, r3
 801a36c:	b21b      	sxth	r3, r3
 801a36e:	833b      	strh	r3, [r7, #24]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 801a370:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a374:	b29a      	uxth	r2, r3
 801a376:	68bb      	ldr	r3, [r7, #8]
 801a378:	7f5b      	ldrb	r3, [r3, #29]
 801a37a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801a37e:	b2db      	uxtb	r3, r3
 801a380:	f003 0302 	and.w	r3, r3, #2
 801a384:	2b00      	cmp	r3, #0
 801a386:	d004      	beq.n	801a392 <draw_border+0x124>
 801a388:	68bb      	ldr	r3, [r7, #8]
 801a38a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a38e:	b29b      	uxth	r3, r3
 801a390:	e009      	b.n	801a3a6 <draw_border+0x138>
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a398:	b299      	uxth	r1, r3
 801a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39c:	b29b      	uxth	r3, r3
 801a39e:	440b      	add	r3, r1
 801a3a0:	b29b      	uxth	r3, r3
 801a3a2:	425b      	negs	r3, r3
 801a3a4:	b29b      	uxth	r3, r3
 801a3a6:	4413      	add	r3, r2
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	b21b      	sxth	r3, r3
 801a3ac:	82fb      	strh	r3, [r7, #22]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 801a3ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801a3b2:	b29a      	uxth	r2, r3
 801a3b4:	68bb      	ldr	r3, [r7, #8]
 801a3b6:	7f5b      	ldrb	r3, [r3, #29]
 801a3b8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801a3bc:	b2db      	uxtb	r3, r3
 801a3be:	f003 0301 	and.w	r3, r3, #1
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d004      	beq.n	801a3d0 <draw_border+0x162>
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	e009      	b.n	801a3e4 <draw_border+0x176>
 801a3d0:	68bb      	ldr	r3, [r7, #8]
 801a3d2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a3d6:	b299      	uxth	r1, r3
 801a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	440b      	add	r3, r1
 801a3de:	b29b      	uxth	r3, r3
 801a3e0:	425b      	negs	r3, r3
 801a3e2:	b29b      	uxth	r3, r3
 801a3e4:	1ad3      	subs	r3, r2, r3
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	b21b      	sxth	r3, r3
 801a3ea:	837b      	strh	r3, [r7, #26]

    lv_coord_t rin = rout - dsc->border_width;
 801a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ee:	b29a      	uxth	r2, r3
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	1ad3      	subs	r3, r2, r3
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(rin < 0) rin = 0;
 801a3fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801a402:	2b00      	cmp	r3, #0
 801a404:	da01      	bge.n	801a40a <draw_border+0x19c>
 801a406:	2300      	movs	r3, #0
 801a408:	857b      	strh	r3, [r7, #42]	; 0x2a

    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 801a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a40c:	b218      	sxth	r0, r3
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	7f1b      	ldrb	r3, [r3, #28]
 801a412:	68ba      	ldr	r2, [r7, #8]
 801a414:	7892      	ldrb	r2, [r2, #2]
 801a416:	f107 0114 	add.w	r1, r7, #20
 801a41a:	9203      	str	r2, [sp, #12]
 801a41c:	9302      	str	r3, [sp, #8]
 801a41e:	68bb      	ldr	r3, [r7, #8]
 801a420:	7e1b      	ldrb	r3, [r3, #24]
 801a422:	f88d 3004 	strb.w	r3, [sp, #4]
 801a426:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801a42a:	9300      	str	r3, [sp, #0]
 801a42c:	4603      	mov	r3, r0
 801a42e:	460a      	mov	r2, r1
 801a430:	6879      	ldr	r1, [r7, #4]
 801a432:	68f8      	ldr	r0, [r7, #12]
 801a434:	f001 fe78 	bl	801c128 <draw_border_generic>
 801a438:	e006      	b.n	801a448 <draw_border+0x1da>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801a43a:	bf00      	nop
 801a43c:	e004      	b.n	801a448 <draw_border+0x1da>
    if(dsc->border_width == 0) return;
 801a43e:	bf00      	nop
 801a440:	e002      	b.n	801a448 <draw_border+0x1da>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801a442:	bf00      	nop
 801a444:	e000      	b.n	801a448 <draw_border+0x1da>
    if(dsc->border_post) return;
 801a446:	bf00      	nop

}
 801a448:	3730      	adds	r7, #48	; 0x30
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}

0801a44e <draw_shadow>:

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc,
                                              const lv_area_t * coords)
{
 801a44e:	b590      	push	{r4, r7, lr}
 801a450:	b0b3      	sub	sp, #204	; 0xcc
 801a452:	af00      	add	r7, sp, #0
 801a454:	60f8      	str	r0, [r7, #12]
 801a456:	60b9      	str	r1, [r7, #8]
 801a458:	607a      	str	r2, [r7, #4]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801a460:	2b00      	cmp	r3, #0
 801a462:	f001 82ab 	beq.w	801b9bc <draw_shadow+0x156e>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801a466:	68bb      	ldr	r3, [r7, #8]
 801a468:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801a46c:	2b02      	cmp	r3, #2
 801a46e:	f241 82a7 	bls.w	801b9c0 <draw_shadow+0x1572>

    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801a472:	68bb      	ldr	r3, [r7, #8]
 801a474:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801a478:	2b01      	cmp	r3, #1
 801a47a:	d10f      	bne.n	801a49c <draw_shadow+0x4e>
 801a47c:	68bb      	ldr	r3, [r7, #8]
 801a47e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801a482:	2b00      	cmp	r3, #0
 801a484:	dc0a      	bgt.n	801a49c <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801a486:	68bb      	ldr	r3, [r7, #8]
 801a488:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d105      	bne.n	801a49c <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801a490:	68bb      	ldr	r3, [r7, #8]
 801a492:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a496:	2b00      	cmp	r3, #0
 801a498:	f001 8294 	beq.w	801b9c4 <draw_shadow+0x1576>
        return;
    }

    /*Calculate the rectangle which is blurred to get the shadow in `shadow_area`*/
    lv_area_t core_area;
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4a2:	b29a      	uxth	r2, r3
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801a4aa:	b29b      	uxth	r3, r3
 801a4ac:	4413      	add	r3, r2
 801a4ae:	b29a      	uxth	r2, r3
 801a4b0:	68bb      	ldr	r3, [r7, #8]
 801a4b2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801a4b6:	b29b      	uxth	r3, r3
 801a4b8:	1ad3      	subs	r3, r2, r3
 801a4ba:	b29b      	uxth	r3, r3
 801a4bc:	b21b      	sxth	r3, r3
 801a4be:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a4c8:	b29a      	uxth	r2, r3
 801a4ca:	68bb      	ldr	r3, [r7, #8]
 801a4cc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801a4d0:	b29b      	uxth	r3, r3
 801a4d2:	4413      	add	r3, r2
 801a4d4:	b29a      	uxth	r2, r3
 801a4d6:	68bb      	ldr	r3, [r7, #8]
 801a4d8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801a4dc:	b29b      	uxth	r3, r3
 801a4de:	4413      	add	r3, r2
 801a4e0:	b29b      	uxth	r3, r3
 801a4e2:	b21b      	sxth	r3, r3
 801a4e4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a4ee:	b29a      	uxth	r2, r3
 801a4f0:	68bb      	ldr	r3, [r7, #8]
 801a4f2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a4f6:	b29b      	uxth	r3, r3
 801a4f8:	4413      	add	r3, r2
 801a4fa:	b29a      	uxth	r2, r3
 801a4fc:	68bb      	ldr	r3, [r7, #8]
 801a4fe:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801a502:	b29b      	uxth	r3, r3
 801a504:	1ad3      	subs	r3, r2, r3
 801a506:	b29b      	uxth	r3, r3
 801a508:	b21b      	sxth	r3, r3
 801a50a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a514:	b29a      	uxth	r2, r3
 801a516:	68bb      	ldr	r3, [r7, #8]
 801a518:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801a51c:	b29b      	uxth	r3, r3
 801a51e:	4413      	add	r3, r2
 801a520:	b29a      	uxth	r2, r3
 801a522:	68bb      	ldr	r3, [r7, #8]
 801a524:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801a528:	b29b      	uxth	r3, r3
 801a52a:	4413      	add	r3, r2
 801a52c:	b29b      	uxth	r3, r3
 801a52e:	b21b      	sxth	r3, r3
 801a530:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    /*Calculate the bounding box of the shadow*/
    lv_area_t shadow_area;
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 801a534:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801a538:	b29a      	uxth	r2, r3
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801a540:	2b00      	cmp	r3, #0
 801a542:	da00      	bge.n	801a546 <draw_shadow+0xf8>
 801a544:	3301      	adds	r3, #1
 801a546:	105b      	asrs	r3, r3, #1
 801a548:	b21b      	sxth	r3, r3
 801a54a:	b29b      	uxth	r3, r3
 801a54c:	1ad3      	subs	r3, r2, r3
 801a54e:	b29b      	uxth	r3, r3
 801a550:	3b01      	subs	r3, #1
 801a552:	b29b      	uxth	r3, r3
 801a554:	b21b      	sxth	r3, r3
 801a556:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 801a55a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801a55e:	b29a      	uxth	r2, r3
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801a566:	2b00      	cmp	r3, #0
 801a568:	da00      	bge.n	801a56c <draw_shadow+0x11e>
 801a56a:	3301      	adds	r3, #1
 801a56c:	105b      	asrs	r3, r3, #1
 801a56e:	b21b      	sxth	r3, r3
 801a570:	b29b      	uxth	r3, r3
 801a572:	4413      	add	r3, r2
 801a574:	b29b      	uxth	r3, r3
 801a576:	3301      	adds	r3, #1
 801a578:	b29b      	uxth	r3, r3
 801a57a:	b21b      	sxth	r3, r3
 801a57c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 801a580:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801a584:	b29a      	uxth	r2, r3
 801a586:	68bb      	ldr	r3, [r7, #8]
 801a588:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	da00      	bge.n	801a592 <draw_shadow+0x144>
 801a590:	3301      	adds	r3, #1
 801a592:	105b      	asrs	r3, r3, #1
 801a594:	b21b      	sxth	r3, r3
 801a596:	b29b      	uxth	r3, r3
 801a598:	1ad3      	subs	r3, r2, r3
 801a59a:	b29b      	uxth	r3, r3
 801a59c:	3b01      	subs	r3, #1
 801a59e:	b29b      	uxth	r3, r3
 801a5a0:	b21b      	sxth	r3, r3
 801a5a2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 801a5a6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801a5aa:	b29a      	uxth	r2, r3
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	da00      	bge.n	801a5b8 <draw_shadow+0x16a>
 801a5b6:	3301      	adds	r3, #1
 801a5b8:	105b      	asrs	r3, r3, #1
 801a5ba:	b21b      	sxth	r3, r3
 801a5bc:	b29b      	uxth	r3, r3
 801a5be:	4413      	add	r3, r2
 801a5c0:	b29b      	uxth	r3, r3
 801a5c2:	3301      	adds	r3, #1
 801a5c4:	b29b      	uxth	r3, r3
 801a5c6:	b21b      	sxth	r3, r3
 801a5c8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_opa_t opa = dsc->shadow_opa;
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801a5d2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801a5d6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801a5da:	2bfd      	cmp	r3, #253	; 0xfd
 801a5dc:	d902      	bls.n	801a5e4 <draw_shadow+0x196>
 801a5de:	23ff      	movs	r3, #255	; 0xff
 801a5e0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `shadow_area`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	689a      	ldr	r2, [r3, #8]
 801a5e8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801a5ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f004 f9b3 	bl	801e95c <_lv_area_intersect>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	f083 0301 	eor.w	r3, r3, #1
 801a5fc:	b2db      	uxtb	r3, r3
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	f041 81e2 	bne.w	801b9c8 <draw_shadow+0x157a>

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_area;
    lv_area_copy(&bg_area, coords);
 801a604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a608:	6879      	ldr	r1, [r7, #4]
 801a60a:	4618      	mov	r0, r3
 801a60c:	f7ff f8f6 	bl	80197fc <lv_area_copy>
    lv_area_increase(&bg_area, -1, -1);
 801a610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a61c:	4618      	mov	r0, r3
 801a61e:	f004 f931 	bl	801e884 <lv_area_increase>

    /*Get the clamped radius*/
    int32_t r_bg = dsc->radius;
 801a622:	68bb      	ldr	r3, [r7, #8]
 801a624:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    lv_coord_t short_side = LV_MIN(lv_area_get_width(&bg_area), lv_area_get_height(&bg_area));
 801a62c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a630:	4618      	mov	r0, r3
 801a632:	f7ff f902 	bl	801983a <lv_area_get_width>
 801a636:	4603      	mov	r3, r0
 801a638:	461c      	mov	r4, r3
 801a63a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a63e:	4618      	mov	r0, r3
 801a640:	f7ff f912 	bl	8019868 <lv_area_get_height>
 801a644:	4603      	mov	r3, r0
 801a646:	429c      	cmp	r4, r3
 801a648:	da06      	bge.n	801a658 <draw_shadow+0x20a>
 801a64a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a64e:	4618      	mov	r0, r3
 801a650:	f7ff f8f3 	bl	801983a <lv_area_get_width>
 801a654:	4603      	mov	r3, r0
 801a656:	e005      	b.n	801a664 <draw_shadow+0x216>
 801a658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a65c:	4618      	mov	r0, r3
 801a65e:	f7ff f903 	bl	8019868 <lv_area_get_height>
 801a662:	4603      	mov	r3, r0
 801a664:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 801a668:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801a66c:	105b      	asrs	r3, r3, #1
 801a66e:	b21b      	sxth	r3, r3
 801a670:	461a      	mov	r2, r3
 801a672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a676:	4293      	cmp	r3, r2
 801a678:	dd05      	ble.n	801a686 <draw_shadow+0x238>
 801a67a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801a67e:	105b      	asrs	r3, r3, #1
 801a680:	b21b      	sxth	r3, r3
 801a682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /*Get the clamped radius*/
    int32_t r_sh = dsc->radius;
 801a686:	68bb      	ldr	r3, [r7, #8]
 801a688:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a68c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    short_side = LV_MIN(lv_area_get_width(&core_area), lv_area_get_height(&core_area));
 801a690:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801a694:	4618      	mov	r0, r3
 801a696:	f7ff f8d0 	bl	801983a <lv_area_get_width>
 801a69a:	4603      	mov	r3, r0
 801a69c:	461c      	mov	r4, r3
 801a69e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f7ff f8e0 	bl	8019868 <lv_area_get_height>
 801a6a8:	4603      	mov	r3, r0
 801a6aa:	429c      	cmp	r4, r3
 801a6ac:	da06      	bge.n	801a6bc <draw_shadow+0x26e>
 801a6ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	f7ff f8c1 	bl	801983a <lv_area_get_width>
 801a6b8:	4603      	mov	r3, r0
 801a6ba:	e005      	b.n	801a6c8 <draw_shadow+0x27a>
 801a6bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	f7ff f8d1 	bl	8019868 <lv_area_get_height>
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 801a6cc:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801a6d0:	105b      	asrs	r3, r3, #1
 801a6d2:	b21b      	sxth	r3, r3
 801a6d4:	461a      	mov	r2, r3
 801a6d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a6da:	4293      	cmp	r3, r2
 801a6dc:	dd05      	ble.n	801a6ea <draw_shadow+0x29c>
 801a6de:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801a6e2:	105b      	asrs	r3, r3, #1
 801a6e4:	b21b      	sxth	r3, r3
 801a6e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


    /*Get how many pixels are affected by the blur on the corners*/
    int32_t corner_size = dsc->shadow_width  + r_sh;
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801a6f0:	461a      	mov	r2, r3
 801a6f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a6f6:	4413      	add	r3, r2
 801a6f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 801a6fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a700:	fb03 f303 	mul.w	r3, r3, r3
 801a704:	005b      	lsls	r3, r3, #1
 801a706:	4618      	mov	r0, r3
 801a708:	f005 fcd2 	bl	80200b0 <lv_mem_buf_get>
 801a70c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 801a716:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a71a:	b21b      	sxth	r3, r3
 801a71c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801a720:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801a724:	f001 f954 	bl	801b9d0 <shadow_draw_corner_buf>
#endif

    /*Skip a lot of masking if the background will cover the shadow that would be masked out*/
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 801a728:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a72c:	4618      	mov	r0, r3
 801a72e:	f7f5 fb41 	bl	800fdb4 <lv_draw_mask_is_any>
 801a732:	4603      	mov	r3, r0
 801a734:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool simple = true;
 801a738:	2301      	movs	r3, #1
 801a73a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 801a73e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a742:	2b00      	cmp	r3, #0
 801a744:	d107      	bne.n	801a756 <draw_shadow+0x308>
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	78db      	ldrb	r3, [r3, #3]
 801a74a:	2bff      	cmp	r3, #255	; 0xff
 801a74c:	d103      	bne.n	801a756 <draw_shadow+0x308>
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	789b      	ldrb	r3, [r3, #2]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d002      	beq.n	801a75c <draw_shadow+0x30e>
 801a756:	2300      	movs	r3, #0
 801a758:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

    /*Create a radius mask to clip remove shadow on the bg area*/

    lv_draw_mask_radius_param_t mask_rout_param;
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801a75c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a760:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    if(!simple) {
 801a764:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801a768:	f083 0301 	eor.w	r3, r3, #1
 801a76c:	b2db      	uxtb	r3, r3
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d012      	beq.n	801a798 <draw_shadow+0x34a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 801a772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a776:	b21a      	sxth	r2, r3
 801a778:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801a77c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801a780:	2301      	movs	r3, #1
 801a782:	f7f5 fdb3 	bl	80102ec <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801a786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a78a:	2100      	movs	r1, #0
 801a78c:	4618      	mov	r0, r3
 801a78e:	f7f5 f9e1 	bl	800fb54 <lv_draw_mask_add>
 801a792:	4603      	mov	r3, r0
 801a794:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    }
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 801a798:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a79c:	4618      	mov	r0, r3
 801a79e:	f7ff f84c 	bl	801983a <lv_area_get_width>
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	f005 fc83 	bl	80200b0 <lv_mem_buf_get>
 801a7aa:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_opa_t * sh_buf_tmp;
    lv_coord_t y;
    bool simple_sub;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801a7ae:	f107 0314 	add.w	r3, r7, #20
 801a7b2:	211c      	movs	r1, #28
 801a7b4:	4618      	mov	r0, r3
 801a7b6:	f006 f825 	bl	8020804 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801a7ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a7be:	617b      	str	r3, [r7, #20]
    blend_dsc.mask_area = &blend_area;
 801a7c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a7c4:	62bb      	str	r3, [r7, #40]	; 0x28
    blend_dsc.mask_buf = mask_buf;
 801a7c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a7ca:	623b      	str	r3, [r7, #32]
    blend_dsc.color = dsc->shadow_color;
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a7d2:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->shadow_opa;
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801a7da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    blend_dsc.blend_mode = dsc->blend_mode;
 801a7de:	68bb      	ldr	r3, [r7, #8]
 801a7e0:	789b      	ldrb	r3, [r3, #2]
 801a7e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 801a7e6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801a7ea:	b29c      	uxth	r4, r3
 801a7ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f7ff f822 	bl	801983a <lv_area_get_width>
 801a7f6:	4603      	mov	r3, r0
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	da00      	bge.n	801a7fe <draw_shadow+0x3b0>
 801a7fc:	3301      	adds	r3, #1
 801a7fe:	105b      	asrs	r3, r3, #1
 801a800:	b21b      	sxth	r3, r3
 801a802:	b29b      	uxth	r3, r3
 801a804:	4423      	add	r3, r4
 801a806:	b29b      	uxth	r3, r3
 801a808:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 801a80c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801a810:	b29c      	uxth	r4, r3
 801a812:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a816:	4618      	mov	r0, r3
 801a818:	f7ff f826 	bl	8019868 <lv_area_get_height>
 801a81c:	4603      	mov	r3, r0
 801a81e:	2b00      	cmp	r3, #0
 801a820:	da00      	bge.n	801a824 <draw_shadow+0x3d6>
 801a822:	3301      	adds	r3, #1
 801a824:	105b      	asrs	r3, r3, #1
 801a826:	b21b      	sxth	r3, r3
 801a828:	b29b      	uxth	r3, r3
 801a82a:	4423      	add	r3, r4
 801a82c:	b29b      	uxth	r3, r3
 801a82e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    /*Draw the corners if they are on the current clip area and not fully covered by the bg*/

    /*Top right corner*/
    blend_area.x2 = shadow_area.x2;
 801a832:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801a836:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801a838:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801a83c:	b29a      	uxth	r2, r3
 801a83e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a842:	b29b      	uxth	r3, r3
 801a844:	1ad3      	subs	r3, r2, r3
 801a846:	b29b      	uxth	r3, r3
 801a848:	3301      	adds	r3, #1
 801a84a:	b29b      	uxth	r3, r3
 801a84c:	b21b      	sxth	r3, r3
 801a84e:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y1;
 801a850:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801a854:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801a856:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801a85a:	b29a      	uxth	r2, r3
 801a85c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a860:	b29b      	uxth	r3, r3
 801a862:	4413      	add	r3, r2
 801a864:	b29b      	uxth	r3, r3
 801a866:	3b01      	subs	r3, #1
 801a868:	b29b      	uxth	r3, r3
 801a86a:	b21b      	sxth	r3, r3
 801a86c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other top corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801a86e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801a872:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801a876:	4293      	cmp	r3, r2
 801a878:	bfb8      	it	lt
 801a87a:	4613      	movlt	r3, r2
 801a87c:	b21b      	sxth	r3, r3
 801a87e:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801a880:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801a884:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801a888:	4293      	cmp	r3, r2
 801a88a:	bfa8      	it	ge
 801a88c:	4613      	movge	r3, r2
 801a88e:	b21b      	sxth	r3, r3
 801a890:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	689a      	ldr	r2, [r3, #8]
 801a896:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801a89a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f004 f85c 	bl	801e95c <_lv_area_intersect>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	f000 80b3 	beq.w	801aa12 <draw_shadow+0x5c4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801a8ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a8b0:	b21a      	sxth	r2, r3
 801a8b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801a8b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a8ba:	4618      	mov	r0, r3
 801a8bc:	f004 fa32 	bl	801ed24 <_lv_area_is_in>
 801a8c0:	4603      	mov	r3, r0
 801a8c2:	f083 0301 	eor.w	r3, r3, #1
 801a8c6:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	f000 80a2 	beq.w	801aa12 <draw_shadow+0x5c4>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801a8ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	f7fe ffb1 	bl	801983a <lv_area_get_width>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        sh_buf_tmp = sh_buf;
 801a8de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a8e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 801a8e6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a8ea:	461a      	mov	r2, r3
 801a8ec:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801a8f0:	1ad3      	subs	r3, r2, r3
 801a8f2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801a8f6:	fb02 f303 	mul.w	r3, r2, r3
 801a8fa:	461a      	mov	r2, r3
 801a8fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a900:	4413      	add	r3, r2
 801a902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801a906:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801a90a:	461a      	mov	r2, r3
 801a90c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801a910:	4619      	mov	r1, r3
 801a912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a916:	1acb      	subs	r3, r1, r3
 801a918:	3301      	adds	r3, #1
 801a91a:	1ad3      	subs	r3, r2, r3
 801a91c:	461a      	mov	r2, r3
 801a91e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a922:	4413      	add	r3, r2
 801a924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801a928:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d010      	beq.n	801a952 <draw_shadow+0x504>
 801a930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a934:	b21a      	sxth	r2, r3
 801a936:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801a93a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a93e:	4618      	mov	r0, r3
 801a940:	f004 fa8e 	bl	801ee60 <_lv_area_is_out>
 801a944:	4603      	mov	r3, r0
 801a946:	2b00      	cmp	r3, #0
 801a948:	d003      	beq.n	801a952 <draw_shadow+0x504>
 801a94a:	2301      	movs	r3, #1
 801a94c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801a950:	e003      	b.n	801a95a <draw_shadow+0x50c>
        else simple_sub = simple;
 801a952:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801a956:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        if(w > 0) {
 801a95a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801a95e:	2b00      	cmp	r3, #0
 801a960:	dd57      	ble.n	801aa12 <draw_shadow+0x5c4>
            blend_dsc.mask_buf = mask_buf;
 801a962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a966:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801a968:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801a96c:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801a96e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801a972:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801a974:	2302      	movs	r3, #2
 801a976:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801a97a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a97c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801a980:	e041      	b.n	801aa06 <draw_shadow+0x5b8>
                blend_area.y1 = y;
 801a982:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801a986:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801a988:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801a98c:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801a98e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801a992:	f083 0301 	eor.w	r3, r3, #1
 801a996:	b2db      	uxtb	r3, r3
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d01d      	beq.n	801a9d8 <draw_shadow+0x58a>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801a99c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a9a0:	461a      	mov	r2, r3
 801a9a2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801a9a6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a9aa:	f005 fc85 	bl	80202b8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801a9ae:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801a9b2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801a9b6:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801a9ba:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a9be:	f7f5 f8fb 	bl	800fbb8 <lv_draw_mask_apply>
 801a9c2:	4603      	mov	r3, r0
 801a9c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801a9c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a9cc:	2b01      	cmp	r3, #1
 801a9ce:	d106      	bne.n	801a9de <draw_shadow+0x590>
 801a9d0:	2302      	movs	r3, #2
 801a9d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801a9d6:	e002      	b.n	801a9de <draw_shadow+0x590>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801a9d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a9dc:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a9de:	f107 0314 	add.w	r3, r7, #20
 801a9e2:	4619      	mov	r1, r3
 801a9e4:	68f8      	ldr	r0, [r7, #12]
 801a9e6:	f7fa fcb5 	bl	8015354 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801a9ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a9ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801a9f2:	4413      	add	r3, r2
 801a9f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801a9f8:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801a9fc:	b29b      	uxth	r3, r3
 801a9fe:	3301      	adds	r3, #1
 801aa00:	b29b      	uxth	r3, r3
 801aa02:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801aa06:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801aa0a:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	ddb7      	ble.n	801a982 <draw_shadow+0x534>
        }
    }

    /*Bottom right corner.
     *Almost the same as top right just read the lines of `sh_buf` from then end*/
    blend_area.x2 = shadow_area.x2;
 801aa12:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801aa16:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801aa18:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801aa1c:	b29a      	uxth	r2, r3
 801aa1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801aa22:	b29b      	uxth	r3, r3
 801aa24:	1ad3      	subs	r3, r2, r3
 801aa26:	b29b      	uxth	r3, r3
 801aa28:	3301      	adds	r3, #1
 801aa2a:	b29b      	uxth	r3, r3
 801aa2c:	b21b      	sxth	r3, r3
 801aa2e:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801aa30:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801aa34:	b29a      	uxth	r2, r3
 801aa36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801aa3a:	b29b      	uxth	r3, r3
 801aa3c:	1ad3      	subs	r3, r2, r3
 801aa3e:	b29b      	uxth	r3, r3
 801aa40:	3301      	adds	r3, #1
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	b21b      	sxth	r3, r3
 801aa46:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801aa48:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801aa4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801aa4e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801aa52:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801aa56:	4293      	cmp	r3, r2
 801aa58:	bfb8      	it	lt
 801aa5a:	4613      	movlt	r3, r2
 801aa5c:	b21b      	sxth	r3, r3
 801aa5e:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801aa60:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801aa64:	3301      	adds	r3, #1
 801aa66:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801aa6a:	4293      	cmp	r3, r2
 801aa6c:	bfb8      	it	lt
 801aa6e:	4613      	movlt	r3, r2
 801aa70:	b21b      	sxth	r3, r3
 801aa72:	877b      	strh	r3, [r7, #58]	; 0x3a

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	689a      	ldr	r2, [r3, #8]
 801aa78:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801aa7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aa80:	4618      	mov	r0, r3
 801aa82:	f003 ff6b 	bl	801e95c <_lv_area_intersect>
 801aa86:	4603      	mov	r3, r0
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	f000 80b3 	beq.w	801abf4 <draw_shadow+0x7a6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801aa8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801aa92:	b21a      	sxth	r2, r3
 801aa94:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801aa98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	f004 f941 	bl	801ed24 <_lv_area_is_in>
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	f083 0301 	eor.w	r3, r3, #1
 801aaa8:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	f000 80a2 	beq.w	801abf4 <draw_shadow+0x7a6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801aab0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aab4:	4618      	mov	r0, r3
 801aab6:	f7fe fec0 	bl	801983a <lv_area_get_width>
 801aaba:	4603      	mov	r3, r0
 801aabc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        sh_buf_tmp = sh_buf;
 801aac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801aac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801aac8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801aacc:	461a      	mov	r2, r3
 801aace:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801aad2:	1ad3      	subs	r3, r2, r3
 801aad4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801aad8:	fb02 f303 	mul.w	r3, r2, r3
 801aadc:	461a      	mov	r2, r3
 801aade:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801aae2:	4413      	add	r3, r2
 801aae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801aae8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801aaec:	461a      	mov	r2, r3
 801aaee:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801aaf2:	4619      	mov	r1, r3
 801aaf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801aaf8:	1acb      	subs	r3, r1, r3
 801aafa:	3301      	adds	r3, #1
 801aafc:	1ad3      	subs	r3, r2, r3
 801aafe:	461a      	mov	r2, r3
 801ab00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ab04:	4413      	add	r3, r2
 801ab06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801ab0a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d010      	beq.n	801ab34 <draw_shadow+0x6e6>
 801ab12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ab16:	b21a      	sxth	r2, r3
 801ab18:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ab1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ab20:	4618      	mov	r0, r3
 801ab22:	f004 f99d 	bl	801ee60 <_lv_area_is_out>
 801ab26:	4603      	mov	r3, r0
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d003      	beq.n	801ab34 <draw_shadow+0x6e6>
 801ab2c:	2301      	movs	r3, #1
 801ab2e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801ab32:	e003      	b.n	801ab3c <draw_shadow+0x6ee>
        else simple_sub = simple;
 801ab34:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ab38:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801ab3c:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	dd57      	ble.n	801abf4 <draw_shadow+0x7a6>
            blend_dsc.mask_buf = mask_buf;
 801ab44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ab48:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801ab4a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ab4e:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801ab50:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ab54:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801ab56:	2302      	movs	r3, #2
 801ab58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801ab5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ab5e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ab62:	e041      	b.n	801abe8 <draw_shadow+0x79a>
                blend_area.y1 = y;
 801ab64:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ab68:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801ab6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ab6e:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801ab70:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ab74:	f083 0301 	eor.w	r3, r3, #1
 801ab78:	b2db      	uxtb	r3, r3
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d01d      	beq.n	801abba <draw_shadow+0x76c>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801ab7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ab82:	461a      	mov	r2, r3
 801ab84:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801ab88:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ab8c:	f005 fb94 	bl	80202b8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ab90:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ab94:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801ab98:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ab9c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801aba0:	f7f5 f80a 	bl	800fbb8 <lv_draw_mask_apply>
 801aba4:	4603      	mov	r3, r0
 801aba6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801abaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801abae:	2b01      	cmp	r3, #1
 801abb0:	d106      	bne.n	801abc0 <draw_shadow+0x772>
 801abb2:	2302      	movs	r3, #2
 801abb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801abb8:	e002      	b.n	801abc0 <draw_shadow+0x772>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801abba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801abbe:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801abc0:	f107 0314 	add.w	r3, r7, #20
 801abc4:	4619      	mov	r1, r3
 801abc6:	68f8      	ldr	r0, [r7, #12]
 801abc8:	f7fa fbc4 	bl	8015354 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801abcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801abd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801abd4:	4413      	add	r3, r2
 801abd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801abda:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801abde:	b29b      	uxth	r3, r3
 801abe0:	3b01      	subs	r3, #1
 801abe2:	b29b      	uxth	r3, r3
 801abe4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801abe8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801abec:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801abf0:	429a      	cmp	r2, r3
 801abf2:	dab7      	bge.n	801ab64 <draw_shadow+0x716>
            }
        }
    }

    /*Top side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801abf4:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801abf8:	b29a      	uxth	r2, r3
 801abfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801abfe:	b29b      	uxth	r3, r3
 801ac00:	4413      	add	r3, r2
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	b21b      	sxth	r3, r3
 801ac06:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801ac08:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ac0c:	b29a      	uxth	r2, r3
 801ac0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ac12:	b29b      	uxth	r3, r3
 801ac14:	1ad3      	subs	r3, r2, r3
 801ac16:	b29b      	uxth	r3, r3
 801ac18:	b21b      	sxth	r3, r3
 801ac1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801ac1c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801ac20:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801ac22:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801ac26:	b29a      	uxth	r2, r3
 801ac28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	4413      	add	r3, r2
 801ac30:	b29b      	uxth	r3, r3
 801ac32:	3b01      	subs	r3, #1
 801ac34:	b29b      	uxth	r3, r3
 801ac36:	b21b      	sxth	r3, r3
 801ac38:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801ac3a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801ac3e:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801ac42:	4293      	cmp	r3, r2
 801ac44:	bfa8      	it	ge
 801ac46:	4613      	movge	r3, r2
 801ac48:	b21b      	sxth	r3, r3
 801ac4a:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	689a      	ldr	r2, [r3, #8]
 801ac50:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ac54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ac58:	4618      	mov	r0, r3
 801ac5a:	f003 fe7f 	bl	801e95c <_lv_area_intersect>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	f000 80c2 	beq.w	801adea <draw_shadow+0x99c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801ac66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ac6a:	b21a      	sxth	r2, r3
 801ac6c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ac70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ac74:	4618      	mov	r0, r3
 801ac76:	f004 f855 	bl	801ed24 <_lv_area_is_in>
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	f083 0301 	eor.w	r3, r3, #1
 801ac80:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	f000 80b1 	beq.w	801adea <draw_shadow+0x99c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801ac88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	f7fe fdd4 	bl	801983a <lv_area_get_width>
 801ac92:	4603      	mov	r3, r0
 801ac94:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        sh_buf_tmp = sh_buf;
 801ac98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ac9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801aca0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801aca4:	461a      	mov	r2, r3
 801aca6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801acaa:	1ad3      	subs	r3, r2, r3
 801acac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801acb0:	fb02 f303 	mul.w	r3, r2, r3
 801acb4:	461a      	mov	r2, r3
 801acb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801acba:	4413      	add	r3, r2
 801acbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801acc0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d010      	beq.n	801acea <draw_shadow+0x89c>
 801acc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801accc:	b21a      	sxth	r2, r3
 801acce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801acd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801acd6:	4618      	mov	r0, r3
 801acd8:	f004 f8c2 	bl	801ee60 <_lv_area_is_out>
 801acdc:	4603      	mov	r3, r0
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d003      	beq.n	801acea <draw_shadow+0x89c>
 801ace2:	2301      	movs	r3, #1
 801ace4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801ace8:	e003      	b.n	801acf2 <draw_shadow+0x8a4>
        else simple_sub = simple;
 801acea:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801acee:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801acf2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	dd77      	ble.n	801adea <draw_shadow+0x99c>
            if(!simple_sub) {
 801acfa:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801acfe:	f083 0301 	eor.w	r3, r3, #1
 801ad02:	b2db      	uxtb	r3, r3
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d003      	beq.n	801ad10 <draw_shadow+0x8c2>
                blend_dsc.mask_buf = mask_buf;
 801ad08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ad0c:	623b      	str	r3, [r7, #32]
 801ad0e:	e001      	b.n	801ad14 <draw_shadow+0x8c6>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801ad10:	2300      	movs	r3, #0
 801ad12:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801ad14:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ad18:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801ad1a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ad1e:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801ad20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801ad22:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ad26:	e05a      	b.n	801adde <draw_shadow+0x990>
                blend_area.y1 = y;
 801ad28:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ad2c:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801ad2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ad32:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801ad34:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ad38:	f083 0301 	eor.w	r3, r3, #1
 801ad3c:	b2db      	uxtb	r3, r3
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d024      	beq.n	801ad8c <draw_shadow+0x93e>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801ad42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ad46:	781b      	ldrb	r3, [r3, #0]
 801ad48:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801ad4c:	4619      	mov	r1, r3
 801ad4e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ad52:	f005 fcc9 	bl	80206e8 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ad56:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ad5a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ad5e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ad62:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ad66:	f7f4 ff27 	bl	800fbb8 <lv_draw_mask_apply>
 801ad6a:	4603      	mov	r3, r0
 801ad6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ad70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ad74:	2b01      	cmp	r3, #1
 801ad76:	d102      	bne.n	801ad7e <draw_shadow+0x930>
 801ad78:	2302      	movs	r3, #2
 801ad7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ad7e:	f107 0314 	add.w	r3, r7, #20
 801ad82:	4619      	mov	r1, r3
 801ad84:	68f8      	ldr	r0, [r7, #12]
 801ad86:	f7fa fae5 	bl	8015354 <lv_draw_sw_blend>
 801ad8a:	e01a      	b.n	801adc2 <draw_shadow+0x974>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801ad8c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801ad90:	2bff      	cmp	r3, #255	; 0xff
 801ad92:	d103      	bne.n	801ad9c <draw_shadow+0x94e>
 801ad94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ad98:	781b      	ldrb	r3, [r3, #0]
 801ad9a:	e00a      	b.n	801adb2 <draw_shadow+0x964>
 801ad9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ada0:	781b      	ldrb	r3, [r3, #0]
 801ada2:	461a      	mov	r2, r3
 801ada4:	68bb      	ldr	r3, [r7, #8]
 801ada6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801adaa:	fb02 f303 	mul.w	r3, r2, r3
 801adae:	121b      	asrs	r3, r3, #8
 801adb0:	b2db      	uxtb	r3, r3
 801adb2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801adb6:	f107 0314 	add.w	r3, r7, #20
 801adba:	4619      	mov	r1, r3
 801adbc:	68f8      	ldr	r0, [r7, #12]
 801adbe:	f7fa fac9 	bl	8015354 <lv_draw_sw_blend>
                }
                sh_buf_tmp += corner_size;
 801adc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801adc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801adca:	4413      	add	r3, r2
 801adcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801add0:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801add4:	b29b      	uxth	r3, r3
 801add6:	3301      	adds	r3, #1
 801add8:	b29b      	uxth	r3, r3
 801adda:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801adde:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801ade2:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ade6:	429a      	cmp	r2, r3
 801ade8:	dd9e      	ble.n	801ad28 <draw_shadow+0x8da>
            }
        }
    }
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801adea:	68bb      	ldr	r3, [r7, #8]
 801adec:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801adf0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Bottom side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801adf4:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801adf8:	b29a      	uxth	r2, r3
 801adfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801adfe:	b29b      	uxth	r3, r3
 801ae00:	4413      	add	r3, r2
 801ae02:	b29b      	uxth	r3, r3
 801ae04:	b21b      	sxth	r3, r3
 801ae06:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801ae08:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ae0c:	b29a      	uxth	r2, r3
 801ae0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ae12:	b29b      	uxth	r3, r3
 801ae14:	1ad3      	subs	r3, r2, r3
 801ae16:	b29b      	uxth	r3, r3
 801ae18:	b21b      	sxth	r3, r3
 801ae1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801ae1c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801ae20:	b29a      	uxth	r2, r3
 801ae22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ae26:	b29b      	uxth	r3, r3
 801ae28:	1ad3      	subs	r3, r2, r3
 801ae2a:	b29b      	uxth	r3, r3
 801ae2c:	3301      	adds	r3, #1
 801ae2e:	b29b      	uxth	r3, r3
 801ae30:	b21b      	sxth	r3, r3
 801ae32:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801ae34:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801ae38:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801ae3a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801ae3e:	3301      	adds	r3, #1
 801ae40:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801ae44:	4293      	cmp	r3, r2
 801ae46:	bfb8      	it	lt
 801ae48:	4613      	movlt	r3, r2
 801ae4a:	b21b      	sxth	r3, r3
 801ae4c:	877b      	strh	r3, [r7, #58]	; 0x3a


    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	689a      	ldr	r2, [r3, #8]
 801ae52:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ae56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f003 fd7e 	bl	801e95c <_lv_area_intersect>
 801ae60:	4603      	mov	r3, r0
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	f000 80dc 	beq.w	801b020 <draw_shadow+0xbd2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801ae68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ae6c:	b21a      	sxth	r2, r3
 801ae6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ae72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ae76:	4618      	mov	r0, r3
 801ae78:	f003 ff54 	bl	801ed24 <_lv_area_is_in>
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	f083 0301 	eor.w	r3, r3, #1
 801ae82:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	f000 80cb 	beq.w	801b020 <draw_shadow+0xbd2>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801ae8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f7fe fcd3 	bl	801983a <lv_area_get_width>
 801ae94:	4603      	mov	r3, r0
 801ae96:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        sh_buf_tmp = sh_buf;
 801ae9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ae9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801aea2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801aea6:	461a      	mov	r2, r3
 801aea8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801aeac:	1ad3      	subs	r3, r2, r3
 801aeae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801aeb2:	fb02 f303 	mul.w	r3, r2, r3
 801aeb6:	461a      	mov	r2, r3
 801aeb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801aebc:	4413      	add	r3, r2
 801aebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        if(w > 0) {
 801aec2:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	f340 80aa 	ble.w	801b020 <draw_shadow+0xbd2>
            /*Do not mask if out of the bg*/
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801aecc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d010      	beq.n	801aef6 <draw_shadow+0xaa8>
 801aed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801aed8:	b21a      	sxth	r2, r3
 801aeda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801aede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aee2:	4618      	mov	r0, r3
 801aee4:	f003 ffbc 	bl	801ee60 <_lv_area_is_out>
 801aee8:	4603      	mov	r3, r0
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d003      	beq.n	801aef6 <draw_shadow+0xaa8>
 801aeee:	2301      	movs	r3, #1
 801aef0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801aef4:	e003      	b.n	801aefe <draw_shadow+0xab0>
            else simple_sub = simple;
 801aef6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801aefa:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

            if(!simple_sub) {
 801aefe:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801af02:	f083 0301 	eor.w	r3, r3, #1
 801af06:	b2db      	uxtb	r3, r3
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d003      	beq.n	801af14 <draw_shadow+0xac6>
                blend_dsc.mask_buf = mask_buf;
 801af0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801af10:	623b      	str	r3, [r7, #32]
 801af12:	e001      	b.n	801af18 <draw_shadow+0xaca>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801af14:	2300      	movs	r3, #0
 801af16:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801af18:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801af1c:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801af1e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801af22:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801af24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801af26:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801af2a:	e073      	b.n	801b014 <draw_shadow+0xbc6>
                blend_area.y1 = y;
 801af2c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801af30:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801af32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801af36:	87fb      	strh	r3, [r7, #62]	; 0x3e

                /*Do not mask if out of the bg*/
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801af38:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d010      	beq.n	801af62 <draw_shadow+0xb14>
 801af40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801af44:	b21a      	sxth	r2, r3
 801af46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801af4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801af4e:	4618      	mov	r0, r3
 801af50:	f003 ff86 	bl	801ee60 <_lv_area_is_out>
 801af54:	4603      	mov	r3, r0
 801af56:	2b00      	cmp	r3, #0
 801af58:	d003      	beq.n	801af62 <draw_shadow+0xb14>
 801af5a:	2301      	movs	r3, #1
 801af5c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801af60:	e003      	b.n	801af6a <draw_shadow+0xb1c>
                else simple_sub = simple;
 801af62:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801af66:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

                if(!simple_sub) {
 801af6a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801af6e:	f083 0301 	eor.w	r3, r3, #1
 801af72:	b2db      	uxtb	r3, r3
 801af74:	2b00      	cmp	r3, #0
 801af76:	d024      	beq.n	801afc2 <draw_shadow+0xb74>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801af78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801af7c:	781b      	ldrb	r3, [r3, #0]
 801af7e:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801af82:	4619      	mov	r1, r3
 801af84:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801af88:	f005 fbae 	bl	80206e8 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801af8c:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801af90:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801af94:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801af98:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801af9c:	f7f4 fe0c 	bl	800fbb8 <lv_draw_mask_apply>
 801afa0:	4603      	mov	r3, r0
 801afa2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801afa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801afaa:	2b01      	cmp	r3, #1
 801afac:	d102      	bne.n	801afb4 <draw_shadow+0xb66>
 801afae:	2302      	movs	r3, #2
 801afb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801afb4:	f107 0314 	add.w	r3, r7, #20
 801afb8:	4619      	mov	r1, r3
 801afba:	68f8      	ldr	r0, [r7, #12]
 801afbc:	f7fa f9ca 	bl	8015354 <lv_draw_sw_blend>
 801afc0:	e01a      	b.n	801aff8 <draw_shadow+0xbaa>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801afc2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801afc6:	2bff      	cmp	r3, #255	; 0xff
 801afc8:	d103      	bne.n	801afd2 <draw_shadow+0xb84>
 801afca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801afce:	781b      	ldrb	r3, [r3, #0]
 801afd0:	e00a      	b.n	801afe8 <draw_shadow+0xb9a>
 801afd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801afd6:	781b      	ldrb	r3, [r3, #0]
 801afd8:	461a      	mov	r2, r3
 801afda:	68bb      	ldr	r3, [r7, #8]
 801afdc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801afe0:	fb02 f303 	mul.w	r3, r2, r3
 801afe4:	121b      	asrs	r3, r3, #8
 801afe6:	b2db      	uxtb	r3, r3
 801afe8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801afec:	f107 0314 	add.w	r3, r7, #20
 801aff0:	4619      	mov	r1, r3
 801aff2:	68f8      	ldr	r0, [r7, #12]
 801aff4:	f7fa f9ae 	bl	8015354 <lv_draw_sw_blend>

                }
                sh_buf_tmp += corner_size;
 801aff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801affc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b000:	4413      	add	r3, r2
 801b002:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801b006:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b00a:	b29b      	uxth	r3, r3
 801b00c:	3b01      	subs	r3, #1
 801b00e:	b29b      	uxth	r3, r3
 801b010:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b014:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b018:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b01c:	429a      	cmp	r2, r3
 801b01e:	da85      	bge.n	801af2c <draw_shadow+0xade>
            }
        }
    }

    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801b026:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Right side*/
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801b02a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b02e:	b29a      	uxth	r2, r3
 801b030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b034:	b29b      	uxth	r3, r3
 801b036:	1ad3      	subs	r3, r2, r3
 801b038:	b29b      	uxth	r3, r3
 801b03a:	3301      	adds	r3, #1
 801b03c:	b29b      	uxth	r3, r3
 801b03e:	b21b      	sxth	r3, r3
 801b040:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2;
 801b042:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b046:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801b048:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b04c:	b29a      	uxth	r2, r3
 801b04e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b052:	b29b      	uxth	r3, r3
 801b054:	4413      	add	r3, r2
 801b056:	b29b      	uxth	r3, r3
 801b058:	b21b      	sxth	r3, r3
 801b05a:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801b05c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b060:	b29a      	uxth	r2, r3
 801b062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b066:	b29b      	uxth	r3, r3
 801b068:	1ad3      	subs	r3, r2, r3
 801b06a:	b29b      	uxth	r3, r3
 801b06c:	b21b      	sxth	r3, r3
 801b06e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801b070:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801b074:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b078:	429a      	cmp	r2, r3
 801b07a:	db02      	blt.n	801b082 <draw_shadow+0xc34>
 801b07c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801b080:	e004      	b.n	801b08c <draw_shadow+0xc3e>
 801b082:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801b086:	3301      	adds	r3, #1
 801b088:	b29b      	uxth	r3, r3
 801b08a:	b21b      	sxth	r3, r3
 801b08c:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801b08e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b092:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b096:	4293      	cmp	r3, r2
 801b098:	bfb8      	it	lt
 801b09a:	4613      	movlt	r3, r2
 801b09c:	b21b      	sxth	r3, r3
 801b09e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801b0a0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801b0a4:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801b0a8:	4293      	cmp	r3, r2
 801b0aa:	bfb8      	it	lt
 801b0ac:	4613      	movlt	r3, r2
 801b0ae:	b21b      	sxth	r3, r3
 801b0b0:	873b      	strh	r3, [r7, #56]	; 0x38

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	689a      	ldr	r2, [r3, #8]
 801b0b6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b0ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f003 fc4c 	bl	801e95c <_lv_area_intersect>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	f000 80ac 	beq.w	801b224 <draw_shadow+0xdd6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b0cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b0d0:	b21a      	sxth	r2, r3
 801b0d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b0d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0da:	4618      	mov	r0, r3
 801b0dc:	f003 fe22 	bl	801ed24 <_lv_area_is_in>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	f083 0301 	eor.w	r3, r3, #1
 801b0e6:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	f000 809b 	beq.w	801b224 <draw_shadow+0xdd6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b0ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f7fe fba1 	bl	801983a <lv_area_get_width>
 801b0f8:	4603      	mov	r3, r0
 801b0fa:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        sh_buf_tmp = sh_buf;
 801b0fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801b106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b10a:	3b01      	subs	r3, #1
 801b10c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b110:	fb02 f303 	mul.w	r3, r2, r3
 801b114:	461a      	mov	r2, r3
 801b116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b11a:	4413      	add	r3, r2
 801b11c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801b120:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b124:	461a      	mov	r2, r3
 801b126:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b12a:	4619      	mov	r1, r3
 801b12c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b130:	1acb      	subs	r3, r1, r3
 801b132:	3301      	adds	r3, #1
 801b134:	1ad3      	subs	r3, r2, r3
 801b136:	461a      	mov	r2, r3
 801b138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b13c:	4413      	add	r3, r2
 801b13e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b142:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b146:	2b00      	cmp	r3, #0
 801b148:	d010      	beq.n	801b16c <draw_shadow+0xd1e>
 801b14a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b14e:	b21a      	sxth	r2, r3
 801b150:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b158:	4618      	mov	r0, r3
 801b15a:	f003 fe81 	bl	801ee60 <_lv_area_is_out>
 801b15e:	4603      	mov	r3, r0
 801b160:	2b00      	cmp	r3, #0
 801b162:	d003      	beq.n	801b16c <draw_shadow+0xd1e>
 801b164:	2301      	movs	r3, #1
 801b166:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b16a:	e003      	b.n	801b174 <draw_shadow+0xd26>
        else simple_sub = simple;
 801b16c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b170:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801b174:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d002      	beq.n	801b182 <draw_shadow+0xd34>
 801b17c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b180:	e001      	b.n	801b186 <draw_shadow+0xd38>
 801b182:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b186:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801b188:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	dd49      	ble.n	801b224 <draw_shadow+0xdd6>
            blend_area.x1 = clip_area_sub.x1;
 801b190:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b194:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b196:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b19a:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801b19c:	2302      	movs	r3, #2
 801b19e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b1a2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b1a4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b1a8:	e036      	b.n	801b218 <draw_shadow+0xdca>
                blend_area.y1 = y;
 801b1aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b1ae:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b1b0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b1b4:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801b1b6:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b1ba:	f083 0301 	eor.w	r3, r3, #1
 801b1be:	b2db      	uxtb	r3, r3
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d01c      	beq.n	801b1fe <draw_shadow+0xdb0>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801b1c4:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801b1c8:	461a      	mov	r2, r3
 801b1ca:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801b1ce:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b1d2:	f005 f871 	bl	80202b8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b1d6:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b1da:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801b1de:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b1e2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b1e6:	f7f4 fce7 	bl	800fbb8 <lv_draw_mask_apply>
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b1f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b1f4:	2b01      	cmp	r3, #1
 801b1f6:	d102      	bne.n	801b1fe <draw_shadow+0xdb0>
 801b1f8:	2302      	movs	r3, #2
 801b1fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b1fe:	f107 0314 	add.w	r3, r7, #20
 801b202:	4619      	mov	r1, r3
 801b204:	68f8      	ldr	r0, [r7, #12]
 801b206:	f7fa f8a5 	bl	8015354 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b20a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b20e:	b29b      	uxth	r3, r3
 801b210:	3301      	adds	r3, #1
 801b212:	b29b      	uxth	r3, r3
 801b214:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b218:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b21c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b220:	429a      	cmp	r2, r3
 801b222:	ddc2      	ble.n	801b1aa <draw_shadow+0xd5c>
            }
        }
    }

    /*Mirror the shadow corner buffer horizontally*/
    sh_buf_tmp = sh_buf ;
 801b224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801b22c:	2300      	movs	r3, #0
 801b22e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b232:	e047      	b.n	801b2c4 <draw_shadow+0xe76>
        int32_t x;
        lv_opa_t * start = sh_buf_tmp;
 801b234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 801b23c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b240:	3b01      	subs	r3, #1
 801b242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b246:	4413      	add	r3, r2
 801b248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801b24c:	2300      	movs	r3, #0
 801b24e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b252:	e01e      	b.n	801b292 <draw_shadow+0xe44>
            lv_opa_t tmp = *start;
 801b254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b258:	781b      	ldrb	r3, [r3, #0]
 801b25a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
            *start = *end;
 801b25e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b262:	781a      	ldrb	r2, [r3, #0]
 801b264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b268:	701a      	strb	r2, [r3, #0]
            *end = tmp;
 801b26a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b26e:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 801b272:	701a      	strb	r2, [r3, #0]

            start++;
 801b274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b278:	3301      	adds	r3, #1
 801b27a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            end--;
 801b27e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b282:	3b01      	subs	r3, #1
 801b284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801b288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b28c:	3301      	adds	r3, #1
 801b28e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b296:	2b00      	cmp	r3, #0
 801b298:	da00      	bge.n	801b29c <draw_shadow+0xe4e>
 801b29a:	3301      	adds	r3, #1
 801b29c:	105b      	asrs	r3, r3, #1
 801b29e:	461a      	mov	r2, r3
 801b2a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b2a4:	4293      	cmp	r3, r2
 801b2a6:	dbd5      	blt.n	801b254 <draw_shadow+0xe06>
        }
        sh_buf_tmp += corner_size;
 801b2a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b2ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b2b0:	4413      	add	r3, r2
 801b2b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801b2b6:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b2ba:	b29b      	uxth	r3, r3
 801b2bc:	3301      	adds	r3, #1
 801b2be:	b29b      	uxth	r3, r3
 801b2c0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b2c4:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b2c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b2cc:	429a      	cmp	r2, r3
 801b2ce:	dcb1      	bgt.n	801b234 <draw_shadow+0xde6>
    }

    /*Left side*/
    blend_area.x1 = shadow_area.x1;
 801b2d0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b2d4:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801b2d6:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b2da:	b29a      	uxth	r2, r3
 801b2dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b2e0:	b29b      	uxth	r3, r3
 801b2e2:	4413      	add	r3, r2
 801b2e4:	b29b      	uxth	r3, r3
 801b2e6:	3b01      	subs	r3, #1
 801b2e8:	b29b      	uxth	r3, r3
 801b2ea:	b21b      	sxth	r3, r3
 801b2ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801b2ee:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b2f2:	b29a      	uxth	r2, r3
 801b2f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b2f8:	b29b      	uxth	r3, r3
 801b2fa:	4413      	add	r3, r2
 801b2fc:	b29b      	uxth	r3, r3
 801b2fe:	b21b      	sxth	r3, r3
 801b300:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801b302:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b306:	b29a      	uxth	r2, r3
 801b308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b30c:	b29b      	uxth	r3, r3
 801b30e:	1ad3      	subs	r3, r2, r3
 801b310:	b29b      	uxth	r3, r3
 801b312:	b21b      	sxth	r3, r3
 801b314:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801b316:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801b31a:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b31e:	429a      	cmp	r2, r3
 801b320:	db02      	blt.n	801b328 <draw_shadow+0xeda>
 801b322:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801b326:	e004      	b.n	801b332 <draw_shadow+0xee4>
 801b328:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801b32c:	3301      	adds	r3, #1
 801b32e:	b29b      	uxth	r3, r3
 801b330:	b21b      	sxth	r3, r3
 801b332:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801b334:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b338:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b33c:	4293      	cmp	r3, r2
 801b33e:	bfb8      	it	lt
 801b340:	4613      	movlt	r3, r2
 801b342:	b21b      	sxth	r3, r3
 801b344:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801b346:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801b34a:	3b01      	subs	r3, #1
 801b34c:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801b350:	4293      	cmp	r3, r2
 801b352:	bfa8      	it	ge
 801b354:	4613      	movge	r3, r2
 801b356:	b21b      	sxth	r3, r3
 801b358:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	689a      	ldr	r2, [r3, #8]
 801b35e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b366:	4618      	mov	r0, r3
 801b368:	f003 faf8 	bl	801e95c <_lv_area_intersect>
 801b36c:	4603      	mov	r3, r0
 801b36e:	2b00      	cmp	r3, #0
 801b370:	f000 80a7 	beq.w	801b4c2 <draw_shadow+0x1074>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b378:	b21a      	sxth	r2, r3
 801b37a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b37e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b382:	4618      	mov	r0, r3
 801b384:	f003 fcce 	bl	801ed24 <_lv_area_is_in>
 801b388:	4603      	mov	r3, r0
 801b38a:	f083 0301 	eor.w	r3, r3, #1
 801b38e:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b390:	2b00      	cmp	r3, #0
 801b392:	f000 8096 	beq.w	801b4c2 <draw_shadow+0x1074>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b39a:	4618      	mov	r0, r3
 801b39c:	f7fe fa4d 	bl	801983a <lv_area_get_width>
 801b3a0:	4603      	mov	r3, r0
 801b3a2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        sh_buf_tmp = sh_buf;
 801b3a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b3aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801b3ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b3b2:	3b01      	subs	r3, #1
 801b3b4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b3b8:	fb02 f303 	mul.w	r3, r2, r3
 801b3bc:	461a      	mov	r2, r3
 801b3be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b3c2:	4413      	add	r3, r2
 801b3c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801b3c8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b3cc:	461a      	mov	r2, r3
 801b3ce:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801b3d2:	1ad3      	subs	r3, r2, r3
 801b3d4:	461a      	mov	r2, r3
 801b3d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b3da:	4413      	add	r3, r2
 801b3dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b3e0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d010      	beq.n	801b40a <draw_shadow+0xfbc>
 801b3e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b3ec:	b21a      	sxth	r2, r3
 801b3ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b3f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f003 fd32 	bl	801ee60 <_lv_area_is_out>
 801b3fc:	4603      	mov	r3, r0
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d003      	beq.n	801b40a <draw_shadow+0xfbc>
 801b402:	2301      	movs	r3, #1
 801b404:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b408:	e003      	b.n	801b412 <draw_shadow+0xfc4>
        else simple_sub = simple;
 801b40a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b40e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801b412:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b416:	2b00      	cmp	r3, #0
 801b418:	d002      	beq.n	801b420 <draw_shadow+0xfd2>
 801b41a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b41e:	e001      	b.n	801b424 <draw_shadow+0xfd6>
 801b420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b424:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801b426:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	dd49      	ble.n	801b4c2 <draw_shadow+0x1074>
            blend_area.x1 = clip_area_sub.x1;
 801b42e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b432:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b434:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b438:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801b43a:	2302      	movs	r3, #2
 801b43c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b440:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b442:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b446:	e036      	b.n	801b4b6 <draw_shadow+0x1068>
                blend_area.y1 = y;
 801b448:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b44c:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b44e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b452:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801b454:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b458:	f083 0301 	eor.w	r3, r3, #1
 801b45c:	b2db      	uxtb	r3, r3
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d01c      	beq.n	801b49c <draw_shadow+0x104e>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801b462:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801b466:	461a      	mov	r2, r3
 801b468:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801b46c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b470:	f004 ff22 	bl	80202b8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b474:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b478:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801b47c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b480:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b484:	f7f4 fb98 	bl	800fbb8 <lv_draw_mask_apply>
 801b488:	4603      	mov	r3, r0
 801b48a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b48e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b492:	2b01      	cmp	r3, #1
 801b494:	d102      	bne.n	801b49c <draw_shadow+0x104e>
 801b496:	2302      	movs	r3, #2
 801b498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b49c:	f107 0314 	add.w	r3, r7, #20
 801b4a0:	4619      	mov	r1, r3
 801b4a2:	68f8      	ldr	r0, [r7, #12]
 801b4a4:	f7f9 ff56 	bl	8015354 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b4a8:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b4ac:	b29b      	uxth	r3, r3
 801b4ae:	3301      	adds	r3, #1
 801b4b0:	b29b      	uxth	r3, r3
 801b4b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b4b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b4ba:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b4be:	429a      	cmp	r2, r3
 801b4c0:	ddc2      	ble.n	801b448 <draw_shadow+0xffa>
            }
        }
    }

    /*Top left corner*/
    blend_area.x1 = shadow_area.x1;
 801b4c2:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b4c6:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801b4c8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b4cc:	b29a      	uxth	r2, r3
 801b4ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b4d2:	b29b      	uxth	r3, r3
 801b4d4:	4413      	add	r3, r2
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	3b01      	subs	r3, #1
 801b4da:	b29b      	uxth	r3, r3
 801b4dc:	b21b      	sxth	r3, r3
 801b4de:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801b4e0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b4e4:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801b4e6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b4ea:	b29a      	uxth	r2, r3
 801b4ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	4413      	add	r3, r2
 801b4f4:	b29b      	uxth	r3, r3
 801b4f6:	3b01      	subs	r3, #1
 801b4f8:	b29b      	uxth	r3, r3
 801b4fa:	b21b      	sxth	r3, r3
 801b4fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801b4fe:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801b502:	3b01      	subs	r3, #1
 801b504:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801b508:	4293      	cmp	r3, r2
 801b50a:	bfa8      	it	ge
 801b50c:	4613      	movge	r3, r2
 801b50e:	b21b      	sxth	r3, r3
 801b510:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801b512:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b516:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b51a:	4293      	cmp	r3, r2
 801b51c:	bfa8      	it	ge
 801b51e:	4613      	movge	r3, r2
 801b520:	b21b      	sxth	r3, r3
 801b522:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	689a      	ldr	r2, [r3, #8]
 801b528:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b52c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b530:	4618      	mov	r0, r3
 801b532:	f003 fa13 	bl	801e95c <_lv_area_intersect>
 801b536:	4603      	mov	r3, r0
 801b538:	2b00      	cmp	r3, #0
 801b53a:	f000 80ae 	beq.w	801b69a <draw_shadow+0x124c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b53e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b542:	b21a      	sxth	r2, r3
 801b544:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b54c:	4618      	mov	r0, r3
 801b54e:	f003 fbe9 	bl	801ed24 <_lv_area_is_in>
 801b552:	4603      	mov	r3, r0
 801b554:	f083 0301 	eor.w	r3, r3, #1
 801b558:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	f000 809d 	beq.w	801b69a <draw_shadow+0x124c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b564:	4618      	mov	r0, r3
 801b566:	f7fe f968 	bl	801983a <lv_area_get_width>
 801b56a:	4603      	mov	r3, r0
 801b56c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        sh_buf_tmp = sh_buf;
 801b570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801b578:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b57c:	461a      	mov	r2, r3
 801b57e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801b582:	1ad3      	subs	r3, r2, r3
 801b584:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b588:	fb02 f303 	mul.w	r3, r2, r3
 801b58c:	461a      	mov	r2, r3
 801b58e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b592:	4413      	add	r3, r2
 801b594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801b598:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b59c:	461a      	mov	r2, r3
 801b59e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801b5a2:	1ad3      	subs	r3, r2, r3
 801b5a4:	461a      	mov	r2, r3
 801b5a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b5aa:	4413      	add	r3, r2
 801b5ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b5b0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d010      	beq.n	801b5da <draw_shadow+0x118c>
 801b5b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b5bc:	b21a      	sxth	r2, r3
 801b5be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b5c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f003 fc4a 	bl	801ee60 <_lv_area_is_out>
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d003      	beq.n	801b5da <draw_shadow+0x118c>
 801b5d2:	2301      	movs	r3, #1
 801b5d4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b5d8:	e003      	b.n	801b5e2 <draw_shadow+0x1194>
        else simple_sub = simple;
 801b5da:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b5de:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801b5e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b5e6:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801b5e8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	dd54      	ble.n	801b69a <draw_shadow+0x124c>
            blend_area.x1 = clip_area_sub.x1;
 801b5f0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b5f4:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b5f6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b5fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801b5fc:	2302      	movs	r3, #2
 801b5fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b602:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b604:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b608:	e041      	b.n	801b68e <draw_shadow+0x1240>
                blend_area.y1 = y;
 801b60a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b60e:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b610:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b614:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801b616:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b61a:	f083 0301 	eor.w	r3, r3, #1
 801b61e:	b2db      	uxtb	r3, r3
 801b620:	2b00      	cmp	r3, #0
 801b622:	d01d      	beq.n	801b660 <draw_shadow+0x1212>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801b624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b628:	461a      	mov	r2, r3
 801b62a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801b62e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b632:	f004 fe41 	bl	80202b8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b636:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b63a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801b63e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b642:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b646:	f7f4 fab7 	bl	800fbb8 <lv_draw_mask_apply>
 801b64a:	4603      	mov	r3, r0
 801b64c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b654:	2b01      	cmp	r3, #1
 801b656:	d106      	bne.n	801b666 <draw_shadow+0x1218>
 801b658:	2302      	movs	r3, #2
 801b65a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801b65e:	e002      	b.n	801b666 <draw_shadow+0x1218>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801b660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b664:	623b      	str	r3, [r7, #32]
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b666:	f107 0314 	add.w	r3, r7, #20
 801b66a:	4619      	mov	r1, r3
 801b66c:	68f8      	ldr	r0, [r7, #12]
 801b66e:	f7f9 fe71 	bl	8015354 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801b672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b67a:	4413      	add	r3, r2
 801b67c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b680:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b684:	b29b      	uxth	r3, r3
 801b686:	3301      	adds	r3, #1
 801b688:	b29b      	uxth	r3, r3
 801b68a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b68e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b692:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b696:	429a      	cmp	r2, r3
 801b698:	ddb7      	ble.n	801b60a <draw_shadow+0x11bc>
        }
    }

    /*Bottom left corner.
     *Almost the same as bottom right just read the lines of `sh_buf` from then end*/
    blend_area.x1 = shadow_area.x1 ;
 801b69a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b69e:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801b6a0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b6a4:	b29a      	uxth	r2, r3
 801b6a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b6aa:	b29b      	uxth	r3, r3
 801b6ac:	4413      	add	r3, r2
 801b6ae:	b29b      	uxth	r3, r3
 801b6b0:	3b01      	subs	r3, #1
 801b6b2:	b29b      	uxth	r3, r3
 801b6b4:	b21b      	sxth	r3, r3
 801b6b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801b6b8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b6bc:	b29a      	uxth	r2, r3
 801b6be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b6c2:	b29b      	uxth	r3, r3
 801b6c4:	1ad3      	subs	r3, r2, r3
 801b6c6:	b29b      	uxth	r3, r3
 801b6c8:	3301      	adds	r3, #1
 801b6ca:	b29b      	uxth	r3, r3
 801b6cc:	b21b      	sxth	r3, r3
 801b6ce:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801b6d0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b6d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801b6d6:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801b6da:	3301      	adds	r3, #1
 801b6dc:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801b6e0:	4293      	cmp	r3, r2
 801b6e2:	bfb8      	it	lt
 801b6e4:	4613      	movlt	r3, r2
 801b6e6:	b21b      	sxth	r3, r3
 801b6e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801b6ea:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801b6ee:	3b01      	subs	r3, #1
 801b6f0:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801b6f4:	4293      	cmp	r3, r2
 801b6f6:	bfa8      	it	ge
 801b6f8:	4613      	movge	r3, r2
 801b6fa:	b21b      	sxth	r3, r3
 801b6fc:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b6fe:	68fb      	ldr	r3, [r7, #12]
 801b700:	689a      	ldr	r2, [r3, #8]
 801b702:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b706:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b70a:	4618      	mov	r0, r3
 801b70c:	f003 f926 	bl	801e95c <_lv_area_intersect>
 801b710:	4603      	mov	r3, r0
 801b712:	2b00      	cmp	r3, #0
 801b714:	f000 80ae 	beq.w	801b874 <draw_shadow+0x1426>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b71c:	b21a      	sxth	r2, r3
 801b71e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b726:	4618      	mov	r0, r3
 801b728:	f003 fafc 	bl	801ed24 <_lv_area_is_in>
 801b72c:	4603      	mov	r3, r0
 801b72e:	f083 0301 	eor.w	r3, r3, #1
 801b732:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b734:	2b00      	cmp	r3, #0
 801b736:	f000 809d 	beq.w	801b874 <draw_shadow+0x1426>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b73a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b73e:	4618      	mov	r0, r3
 801b740:	f7fe f87b 	bl	801983a <lv_area_get_width>
 801b744:	4603      	mov	r3, r0
 801b746:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        sh_buf_tmp = sh_buf;
 801b74a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b74e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801b752:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b756:	461a      	mov	r2, r3
 801b758:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b75c:	1ad3      	subs	r3, r2, r3
 801b75e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b762:	fb02 f303 	mul.w	r3, r2, r3
 801b766:	461a      	mov	r2, r3
 801b768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b76c:	4413      	add	r3, r2
 801b76e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801b772:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b776:	461a      	mov	r2, r3
 801b778:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801b77c:	1ad3      	subs	r3, r2, r3
 801b77e:	461a      	mov	r2, r3
 801b780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b784:	4413      	add	r3, r2
 801b786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b78a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d010      	beq.n	801b7b4 <draw_shadow+0x1366>
 801b792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b796:	b21a      	sxth	r2, r3
 801b798:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b79c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f003 fb5d 	bl	801ee60 <_lv_area_is_out>
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d003      	beq.n	801b7b4 <draw_shadow+0x1366>
 801b7ac:	2301      	movs	r3, #1
 801b7ae:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b7b2:	e003      	b.n	801b7bc <draw_shadow+0x136e>
        else simple_sub = simple;
 801b7b4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b7b8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801b7bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b7c0:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801b7c2:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	dd54      	ble.n	801b874 <draw_shadow+0x1426>
            blend_area.x1 = clip_area_sub.x1;
 801b7ca:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b7ce:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b7d0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b7d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801b7d6:	2302      	movs	r3, #2
 801b7d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801b7dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b7de:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b7e2:	e041      	b.n	801b868 <draw_shadow+0x141a>
                blend_area.y1 = y;
 801b7e4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b7e8:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b7ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b7ee:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801b7f0:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b7f4:	f083 0301 	eor.w	r3, r3, #1
 801b7f8:	b2db      	uxtb	r3, r3
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d01d      	beq.n	801b83a <draw_shadow+0x13ec>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801b7fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b802:	461a      	mov	r2, r3
 801b804:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801b808:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b80c:	f004 fd54 	bl	80202b8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b810:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b814:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801b818:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b81c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b820:	f7f4 f9ca 	bl	800fbb8 <lv_draw_mask_apply>
 801b824:	4603      	mov	r3, r0
 801b826:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b82a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b82e:	2b01      	cmp	r3, #1
 801b830:	d106      	bne.n	801b840 <draw_shadow+0x13f2>
 801b832:	2302      	movs	r3, #2
 801b834:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801b838:	e002      	b.n	801b840 <draw_shadow+0x13f2>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801b83a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b83e:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b840:	f107 0314 	add.w	r3, r7, #20
 801b844:	4619      	mov	r1, r3
 801b846:	68f8      	ldr	r0, [r7, #12]
 801b848:	f7f9 fd84 	bl	8015354 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801b84c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b850:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b854:	4413      	add	r3, r2
 801b856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801b85a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b85e:	b29b      	uxth	r3, r3
 801b860:	3b01      	subs	r3, #1
 801b862:	b29b      	uxth	r3, r3
 801b864:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b868:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b86c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b870:	429a      	cmp	r2, r3
 801b872:	dab7      	bge.n	801b7e4 <draw_shadow+0x1396>
            }
        }
    }

    /*Draw the center rectangle.*/
    blend_area.x1 = shadow_area.x1 + corner_size ;
 801b874:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b878:	b29a      	uxth	r2, r3
 801b87a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b87e:	b29b      	uxth	r3, r3
 801b880:	4413      	add	r3, r2
 801b882:	b29b      	uxth	r3, r3
 801b884:	b21b      	sxth	r3, r3
 801b886:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801b888:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b88c:	b29a      	uxth	r2, r3
 801b88e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b892:	b29b      	uxth	r3, r3
 801b894:	1ad3      	subs	r3, r2, r3
 801b896:	b29b      	uxth	r3, r3
 801b898:	b21b      	sxth	r3, r3
 801b89a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801b89c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b8a0:	b29a      	uxth	r2, r3
 801b8a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b8a6:	b29b      	uxth	r3, r3
 801b8a8:	4413      	add	r3, r2
 801b8aa:	b29b      	uxth	r3, r3
 801b8ac:	b21b      	sxth	r3, r3
 801b8ae:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801b8b0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b8b4:	b29a      	uxth	r2, r3
 801b8b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b8ba:	b29b      	uxth	r3, r3
 801b8bc:	1ad3      	subs	r3, r2, r3
 801b8be:	b29b      	uxth	r3, r3
 801b8c0:	b21b      	sxth	r3, r3
 801b8c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_dsc.mask_buf = mask_buf;
 801b8c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b8c8:	623b      	str	r3, [r7, #32]

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	689a      	ldr	r2, [r3, #8]
 801b8ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b8d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	f003 f840 	bl	801e95c <_lv_area_intersect>
 801b8dc:	4603      	mov	r3, r0
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d052      	beq.n	801b988 <draw_shadow+0x153a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b8e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b8e6:	b21a      	sxth	r2, r3
 801b8e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b8ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	f003 fa17 	bl	801ed24 <_lv_area_is_in>
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	f083 0301 	eor.w	r3, r3, #1
 801b8fc:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d042      	beq.n	801b988 <draw_shadow+0x153a>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b906:	4618      	mov	r0, r3
 801b908:	f7fd ff97 	bl	801983a <lv_area_get_width>
 801b90c:	4603      	mov	r3, r0
 801b90e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        if(w > 0) {
 801b912:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801b916:	2b00      	cmp	r3, #0
 801b918:	dd36      	ble.n	801b988 <draw_shadow+0x153a>
            blend_area.x1 = clip_area_sub.x1;
 801b91a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b91e:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b920:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b924:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b926:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b928:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b92c:	e026      	b.n	801b97c <draw_shadow+0x152e>
                blend_area.y1 = y;
 801b92e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b932:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b934:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b938:	87fb      	strh	r3, [r7, #62]	; 0x3e

                lv_memset_ff(mask_buf, w);
 801b93a:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801b93e:	4619      	mov	r1, r3
 801b940:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b944:	f004 ffdf 	bl	8020906 <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b948:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b94c:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801b950:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b954:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b958:	f7f4 f92e 	bl	800fbb8 <lv_draw_mask_apply>
 801b95c:	4603      	mov	r3, r0
 801b95e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b962:	f107 0314 	add.w	r3, r7, #20
 801b966:	4619      	mov	r1, r3
 801b968:	68f8      	ldr	r0, [r7, #12]
 801b96a:	f7f9 fcf3 	bl	8015354 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b96e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b972:	b29b      	uxth	r3, r3
 801b974:	3301      	adds	r3, #1
 801b976:	b29b      	uxth	r3, r3
 801b978:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b97c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b980:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b984:	429a      	cmp	r2, r3
 801b986:	ddd2      	ble.n	801b92e <draw_shadow+0x14e0>
            }
        }
    }

    if(!simple) {
 801b988:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b98c:	f083 0301 	eor.w	r3, r3, #1
 801b990:	b2db      	uxtb	r3, r3
 801b992:	2b00      	cmp	r3, #0
 801b994:	d009      	beq.n	801b9aa <draw_shadow+0x155c>
        lv_draw_mask_free_param(&mask_rout_param);
 801b996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b99a:	4618      	mov	r0, r3
 801b99c:	f7f4 f9a0 	bl	800fce0 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 801b9a0:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 801b9a4:	4618      	mov	r0, r3
 801b9a6:	f7f4 f94b 	bl	800fc40 <lv_draw_mask_remove_id>
    }
    lv_mem_buf_release(sh_buf);
 801b9aa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801b9ae:	f004 fc2b 	bl	8020208 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 801b9b2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b9b6:	f004 fc27 	bl	8020208 <lv_mem_buf_release>
 801b9ba:	e006      	b.n	801b9ca <draw_shadow+0x157c>
    if(dsc->shadow_width == 0) return;
 801b9bc:	bf00      	nop
 801b9be:	e004      	b.n	801b9ca <draw_shadow+0x157c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801b9c0:	bf00      	nop
 801b9c2:	e002      	b.n	801b9ca <draw_shadow+0x157c>
        return;
 801b9c4:	bf00      	nop
 801b9c6:	e000      	b.n	801b9ca <draw_shadow+0x157c>
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801b9c8:	bf00      	nop
}
 801b9ca:	37cc      	adds	r7, #204	; 0xcc
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	bd90      	pop	{r4, r7, pc}

0801b9d0 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 801b9d0:	b590      	push	{r4, r7, lr}
 801b9d2:	b09d      	sub	sp, #116	; 0x74
 801b9d4:	af02      	add	r7, sp, #8
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	60b9      	str	r1, [r7, #8]
 801b9da:	4611      	mov	r1, r2
 801b9dc:	461a      	mov	r2, r3
 801b9de:	460b      	mov	r3, r1
 801b9e0:	80fb      	strh	r3, [r7, #6]
 801b9e2:	4613      	mov	r3, r2
 801b9e4:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 801b9e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 801b9ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801b9f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b9f2:	4413      	add	r3, r2
 801b9f4:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 801b9f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b9fa:	68f9      	ldr	r1, [r7, #12]
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	f7fd fefd 	bl	80197fc <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 801ba02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	da00      	bge.n	801ba0c <shadow_draw_corner_buf+0x3c>
 801ba0a:	3301      	adds	r3, #1
 801ba0c:	105b      	asrs	r3, r3, #1
 801ba0e:	b21b      	sxth	r3, r3
 801ba10:	b29a      	uxth	r2, r3
 801ba12:	88bb      	ldrh	r3, [r7, #4]
 801ba14:	4413      	add	r3, r2
 801ba16:	b29a      	uxth	r2, r3
 801ba18:	88fb      	ldrh	r3, [r7, #6]
 801ba1a:	f003 0301 	and.w	r3, r3, #1
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	bf0c      	ite	eq
 801ba22:	2301      	moveq	r3, #1
 801ba24:	2300      	movne	r3, #0
 801ba26:	b2db      	uxtb	r3, r3
 801ba28:	b29b      	uxth	r3, r3
 801ba2a:	1ad3      	subs	r3, r2, r3
 801ba2c:	b29b      	uxth	r3, r3
 801ba2e:	3b01      	subs	r3, #1
 801ba30:	b29b      	uxth	r3, r3
 801ba32:	b21b      	sxth	r3, r3
 801ba34:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y1 = sw / 2 + 1;
 801ba36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	da00      	bge.n	801ba40 <shadow_draw_corner_buf+0x70>
 801ba3e:	3301      	adds	r3, #1
 801ba40:	105b      	asrs	r3, r3, #1
 801ba42:	b21b      	sxth	r3, r3
 801ba44:	b29b      	uxth	r3, r3
 801ba46:	3301      	adds	r3, #1
 801ba48:	b29b      	uxth	r3, r3
 801ba4a:	b21b      	sxth	r3, r3
 801ba4c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 801ba4e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ba52:	b29c      	uxth	r4, r3
 801ba54:	68f8      	ldr	r0, [r7, #12]
 801ba56:	f7fd fef0 	bl	801983a <lv_area_get_width>
 801ba5a:	4603      	mov	r3, r0
 801ba5c:	b29b      	uxth	r3, r3
 801ba5e:	1ae3      	subs	r3, r4, r3
 801ba60:	b29b      	uxth	r3, r3
 801ba62:	b21b      	sxth	r3, r3
 801ba64:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 801ba66:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ba6a:	b29c      	uxth	r4, r3
 801ba6c:	68f8      	ldr	r0, [r7, #12]
 801ba6e:	f7fd fefb 	bl	8019868 <lv_area_get_height>
 801ba72:	4603      	mov	r3, r0
 801ba74:	b29b      	uxth	r3, r3
 801ba76:	4423      	add	r3, r4
 801ba78:	b29b      	uxth	r3, r3
 801ba7a:	b21b      	sxth	r3, r3
 801ba7c:	867b      	strh	r3, [r7, #50]	; 0x32

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 801ba7e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801ba82:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801ba86:	f107 0014 	add.w	r0, r7, #20
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	f7f4 fc2e 	bl	80102ec <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 801ba90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba92:	2b01      	cmp	r3, #1
 801ba94:	d102      	bne.n	801ba9c <shadow_draw_corner_buf+0xcc>
 801ba96:	2301      	movs	r3, #1
 801ba98:	80fb      	strh	r3, [r7, #6]
 801ba9a:	e002      	b.n	801baa2 <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 801ba9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba9e:	105b      	asrs	r3, r3, #1
 801baa0:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 801baa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801baa4:	4618      	mov	r0, r3
 801baa6:	f004 fb03 	bl	80200b0 <lv_mem_buf_get>
 801baaa:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801bab0:	2300      	movs	r3, #0
 801bab2:	667b      	str	r3, [r7, #100]	; 0x64
 801bab4:	e062      	b.n	801bb7c <shadow_draw_corner_buf+0x1ac>
        lv_memset_ff(mask_line, size);
 801bab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bab8:	4619      	mov	r1, r3
 801baba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801babc:	f004 ff23 	bl	8020906 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 801bac0:	697c      	ldr	r4, [r7, #20]
 801bac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bac4:	b21a      	sxth	r2, r3
 801bac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bac8:	b219      	sxth	r1, r3
 801baca:	f107 0314 	add.w	r3, r7, #20
 801bace:	9300      	str	r3, [sp, #0]
 801bad0:	460b      	mov	r3, r1
 801bad2:	2100      	movs	r1, #0
 801bad4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bad6:	47a0      	blx	r4
 801bad8:	4603      	mov	r3, r0
 801bada:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801bade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d106      	bne.n	801baf4 <shadow_draw_corner_buf+0x124>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 801bae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bae8:	005b      	lsls	r3, r3, #1
 801baea:	4619      	mov	r1, r3
 801baec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801baee:	f004 fe89 	bl	8020804 <lv_memset_00>
 801baf2:	e03b      	b.n	801bb6c <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 801baf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801baf6:	781b      	ldrb	r3, [r3, #0]
 801baf8:	019a      	lsls	r2, r3, #6
 801bafa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bafe:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb02:	b29a      	uxth	r2, r3
 801bb04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bb06:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801bb08:	2301      	movs	r3, #1
 801bb0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bb0c:	e02a      	b.n	801bb64 <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 801bb0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bb10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bb12:	4413      	add	r3, r2
 801bb14:	781a      	ldrb	r2, [r3, #0]
 801bb16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bb18:	3b01      	subs	r3, #1
 801bb1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801bb1c:	440b      	add	r3, r1
 801bb1e:	781b      	ldrb	r3, [r3, #0]
 801bb20:	429a      	cmp	r2, r3
 801bb22:	d10d      	bne.n	801bb40 <shadow_draw_corner_buf+0x170>
 801bb24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bb26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bb2a:	4413      	add	r3, r2
 801bb2c:	005b      	lsls	r3, r3, #1
 801bb2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bb30:	441a      	add	r2, r3
 801bb32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bb34:	005b      	lsls	r3, r3, #1
 801bb36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801bb38:	440b      	add	r3, r1
 801bb3a:	8812      	ldrh	r2, [r2, #0]
 801bb3c:	801a      	strh	r2, [r3, #0]
 801bb3e:	e00e      	b.n	801bb5e <shadow_draw_corner_buf+0x18e>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801bb40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bb42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bb44:	4413      	add	r3, r2
 801bb46:	781b      	ldrb	r3, [r3, #0]
 801bb48:	019a      	lsls	r2, r3, #6
 801bb4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bb4e:	fb92 f1f3 	sdiv	r1, r2, r3
 801bb52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bb54:	005b      	lsls	r3, r3, #1
 801bb56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bb58:	4413      	add	r3, r2
 801bb5a:	b28a      	uxth	r2, r1
 801bb5c:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801bb5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bb60:	3301      	adds	r3, #1
 801bb62:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bb64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bb66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bb68:	429a      	cmp	r2, r3
 801bb6a:	dbd0      	blt.n	801bb0e <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 801bb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bb6e:	005b      	lsls	r3, r3, #1
 801bb70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bb72:	4413      	add	r3, r2
 801bb74:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801bb76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bb78:	3301      	adds	r3, #1
 801bb7a:	667b      	str	r3, [r7, #100]	; 0x64
 801bb7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801bb7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bb80:	429a      	cmp	r2, r3
 801bb82:	db98      	blt.n	801bab6 <shadow_draw_corner_buf+0xe6>
    }
    lv_mem_buf_release(mask_line);
 801bb84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bb86:	f004 fb3f 	bl	8020208 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_param);
 801bb8a:	f107 0314 	add.w	r3, r7, #20
 801bb8e:	4618      	mov	r0, r3
 801bb90:	f7f4 f8a6 	bl	800fce0 <lv_draw_mask_free_param>

    if(sw == 1) {
 801bb94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bb98:	2b01      	cmp	r3, #1
 801bb9a:	d11a      	bne.n	801bbd2 <shadow_draw_corner_buf+0x202>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	63bb      	str	r3, [r7, #56]	; 0x38
        for(i = 0; i < size * size; i++) {
 801bba0:	2300      	movs	r3, #0
 801bba2:	65bb      	str	r3, [r7, #88]	; 0x58
 801bba4:	e00e      	b.n	801bbc4 <shadow_draw_corner_buf+0x1f4>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 801bba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bba8:	005b      	lsls	r3, r3, #1
 801bbaa:	68ba      	ldr	r2, [r7, #8]
 801bbac:	4413      	add	r3, r2
 801bbae:	881b      	ldrh	r3, [r3, #0]
 801bbb0:	099b      	lsrs	r3, r3, #6
 801bbb2:	b299      	uxth	r1, r3
 801bbb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bbb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bbb8:	4413      	add	r3, r2
 801bbba:	b2ca      	uxtb	r2, r1
 801bbbc:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 801bbbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bbc0:	3301      	adds	r3, #1
 801bbc2:	65bb      	str	r3, [r7, #88]	; 0x58
 801bbc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bbc6:	fb03 f303 	mul.w	r3, r3, r3
 801bbca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bbcc:	429a      	cmp	r2, r3
 801bbce:	dbea      	blt.n	801bba6 <shadow_draw_corner_buf+0x1d6>
        }
        return;
 801bbd0:	e070      	b.n	801bcb4 <shadow_draw_corner_buf+0x2e4>
    }

    shadow_blur_corner(size, sw, sh_buf);
 801bbd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bbd4:	b21b      	sxth	r3, r3
 801bbd6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801bbda:	68ba      	ldr	r2, [r7, #8]
 801bbdc:	4618      	mov	r0, r3
 801bbde:	f000 f86c 	bl	801bcba <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 801bbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bbe4:	b29b      	uxth	r3, r3
 801bbe6:	f003 0301 	and.w	r3, r3, #1
 801bbea:	b29a      	uxth	r2, r3
 801bbec:	88fb      	ldrh	r3, [r7, #6]
 801bbee:	4413      	add	r3, r2
 801bbf0:	b29b      	uxth	r3, r3
 801bbf2:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 801bbf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bbf8:	2b01      	cmp	r3, #1
 801bbfa:	dd43      	ble.n	801bc84 <shadow_draw_corner_buf+0x2b4>
        uint32_t i;
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 801bbfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc00:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801bc04:	fb92 f3f3 	sdiv	r3, r2, r3
 801bc08:	643b      	str	r3, [r7, #64]	; 0x40
        for(i = 0; i < (uint32_t)size * size; i++) {
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	657b      	str	r3, [r7, #84]	; 0x54
 801bc0e:	e02a      	b.n	801bc66 <shadow_draw_corner_buf+0x296>
            if(sh_buf[i] == 0) continue;
 801bc10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc12:	005b      	lsls	r3, r3, #1
 801bc14:	68ba      	ldr	r2, [r7, #8]
 801bc16:	4413      	add	r3, r2
 801bc18:	881b      	ldrh	r3, [r3, #0]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d01f      	beq.n	801bc5e <shadow_draw_corner_buf+0x28e>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 801bc1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc20:	005b      	lsls	r3, r3, #1
 801bc22:	68ba      	ldr	r2, [r7, #8]
 801bc24:	4413      	add	r3, r2
 801bc26:	881b      	ldrh	r3, [r3, #0]
 801bc28:	2bff      	cmp	r3, #255	; 0xff
 801bc2a:	d107      	bne.n	801bc3c <shadow_draw_corner_buf+0x26c>
 801bc2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc2e:	005b      	lsls	r3, r3, #1
 801bc30:	68ba      	ldr	r2, [r7, #8]
 801bc32:	4413      	add	r3, r2
 801bc34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bc36:	b292      	uxth	r2, r2
 801bc38:	801a      	strh	r2, [r3, #0]
 801bc3a:	e011      	b.n	801bc60 <shadow_draw_corner_buf+0x290>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801bc3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc3e:	005b      	lsls	r3, r3, #1
 801bc40:	68ba      	ldr	r2, [r7, #8]
 801bc42:	4413      	add	r3, r2
 801bc44:	881b      	ldrh	r3, [r3, #0]
 801bc46:	019a      	lsls	r2, r3, #6
 801bc48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc4c:	fb92 f1f3 	sdiv	r1, r2, r3
 801bc50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc52:	005b      	lsls	r3, r3, #1
 801bc54:	68ba      	ldr	r2, [r7, #8]
 801bc56:	4413      	add	r3, r2
 801bc58:	b28a      	uxth	r2, r1
 801bc5a:	801a      	strh	r2, [r3, #0]
 801bc5c:	e000      	b.n	801bc60 <shadow_draw_corner_buf+0x290>
            if(sh_buf[i] == 0) continue;
 801bc5e:	bf00      	nop
        for(i = 0; i < (uint32_t)size * size; i++) {
 801bc60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc62:	3301      	adds	r3, #1
 801bc64:	657b      	str	r3, [r7, #84]	; 0x54
 801bc66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bc68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bc6a:	fb02 f303 	mul.w	r3, r2, r3
 801bc6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bc70:	429a      	cmp	r2, r3
 801bc72:	d3cd      	bcc.n	801bc10 <shadow_draw_corner_buf+0x240>
        }

        shadow_blur_corner(size, sw, sh_buf);
 801bc74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bc76:	b21b      	sxth	r3, r3
 801bc78:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801bc7c:	68ba      	ldr	r2, [r7, #8]
 801bc7e:	4618      	mov	r0, r3
 801bc80:	f000 f81b 	bl	801bcba <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801bc84:	68bb      	ldr	r3, [r7, #8]
 801bc86:	63fb      	str	r3, [r7, #60]	; 0x3c
    for(x = 0; x < size * size; x++) {
 801bc88:	2300      	movs	r3, #0
 801bc8a:	653b      	str	r3, [r7, #80]	; 0x50
 801bc8c:	e00c      	b.n	801bca8 <shadow_draw_corner_buf+0x2d8>
        res_buf[x] = sh_buf[x];
 801bc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc90:	005b      	lsls	r3, r3, #1
 801bc92:	68ba      	ldr	r2, [r7, #8]
 801bc94:	4413      	add	r3, r2
 801bc96:	8819      	ldrh	r1, [r3, #0]
 801bc98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bc9c:	4413      	add	r3, r2
 801bc9e:	b2ca      	uxtb	r2, r1
 801bca0:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 801bca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bca4:	3301      	adds	r3, #1
 801bca6:	653b      	str	r3, [r7, #80]	; 0x50
 801bca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bcaa:	fb03 f303 	mul.w	r3, r3, r3
 801bcae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	dbec      	blt.n	801bc8e <shadow_draw_corner_buf+0x2be>
    }
#endif

}
 801bcb4:	376c      	adds	r7, #108	; 0x6c
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	bd90      	pop	{r4, r7, pc}

0801bcba <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 801bcba:	b580      	push	{r7, lr}
 801bcbc:	b092      	sub	sp, #72	; 0x48
 801bcbe:	af00      	add	r7, sp, #0
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	603a      	str	r2, [r7, #0]
 801bcc4:	80fb      	strh	r3, [r7, #6]
 801bcc6:	460b      	mov	r3, r1
 801bcc8:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 801bcca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801bcce:	105b      	asrs	r3, r3, #1
 801bcd0:	b21b      	sxth	r3, r3
 801bcd2:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t s_right = (sw >> 1);
 801bcd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801bcd8:	105b      	asrs	r3, r3, #1
 801bcda:	b21b      	sxth	r3, r3
 801bcdc:	61bb      	str	r3, [r7, #24]
    if((sw & 1) == 0) s_left--;
 801bcde:	88bb      	ldrh	r3, [r7, #4]
 801bce0:	f003 0301 	and.w	r3, r3, #1
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d102      	bne.n	801bcee <shadow_blur_corner+0x34>
 801bce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bcea:	3b01      	subs	r3, #1
 801bcec:	647b      	str	r3, [r7, #68]	; 0x44

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 801bcee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bcf2:	005b      	lsls	r3, r3, #1
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	f004 f9db 	bl	80200b0 <lv_mem_buf_get>
 801bcfa:	6178      	str	r0, [r7, #20]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 801bcfc:	683b      	ldr	r3, [r7, #0]
 801bcfe:	63bb      	str	r3, [r7, #56]	; 0x38

    for(y = 0; y < size; y++) {
 801bd00:	2300      	movs	r3, #0
 801bd02:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bd04:	e05f      	b.n	801bdc6 <shadow_blur_corner+0x10c>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 801bd06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801bd0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bd0e:	4413      	add	r3, r2
 801bd10:	005b      	lsls	r3, r3, #1
 801bd12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bd14:	4413      	add	r3, r2
 801bd16:	881b      	ldrh	r3, [r3, #0]
 801bd18:	461a      	mov	r2, r3
 801bd1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801bd1e:	fb02 f303 	mul.w	r3, r2, r3
 801bd22:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801bd24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bd28:	3b01      	subs	r3, #1
 801bd2a:	643b      	str	r3, [r7, #64]	; 0x40
 801bd2c:	e037      	b.n	801bd9e <shadow_blur_corner+0xe4>
            sh_ups_blur_buf[x] = v;
 801bd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bd30:	005b      	lsls	r3, r3, #1
 801bd32:	697a      	ldr	r2, [r7, #20]
 801bd34:	4413      	add	r3, r2
 801bd36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bd38:	b292      	uxth	r2, r2
 801bd3a:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	633b      	str	r3, [r7, #48]	; 0x30
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 801bd40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bd42:	69bb      	ldr	r3, [r7, #24]
 801bd44:	441a      	add	r2, r3
 801bd46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	da07      	bge.n	801bd5e <shadow_blur_corner+0xa4>
 801bd4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bd50:	69bb      	ldr	r3, [r7, #24]
 801bd52:	4413      	add	r3, r2
 801bd54:	005b      	lsls	r3, r3, #1
 801bd56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bd58:	4413      	add	r3, r2
 801bd5a:	881b      	ldrh	r3, [r3, #0]
 801bd5c:	633b      	str	r3, [r7, #48]	; 0x30
            v -= right_val;
 801bd5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd62:	1ad3      	subs	r3, r2, r3
 801bd64:	637b      	str	r3, [r7, #52]	; 0x34

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 801bd66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bd68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd6a:	1ad3      	subs	r3, r2, r3
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	dc03      	bgt.n	801bd78 <shadow_blur_corner+0xbe>
 801bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd72:	881b      	ldrh	r3, [r3, #0]
 801bd74:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bd76:	e00b      	b.n	801bd90 <shadow_blur_corner+0xd6>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 801bd78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd7c:	1ad3      	subs	r3, r2, r3
 801bd7e:	461a      	mov	r2, r3
 801bd80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bd84:	4413      	add	r3, r2
 801bd86:	005b      	lsls	r3, r3, #1
 801bd88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bd8a:	4413      	add	r3, r2
 801bd8c:	881b      	ldrh	r3, [r3, #0]
 801bd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
            v += left_val;
 801bd90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd94:	4413      	add	r3, r2
 801bd96:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801bd98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bd9a:	3b01      	subs	r3, #1
 801bd9c:	643b      	str	r3, [r7, #64]	; 0x40
 801bd9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	dac4      	bge.n	801bd2e <shadow_blur_corner+0x74>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 801bda4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bda8:	005b      	lsls	r3, r3, #1
 801bdaa:	461a      	mov	r2, r3
 801bdac:	6979      	ldr	r1, [r7, #20]
 801bdae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801bdb0:	f004 fa82 	bl	80202b8 <lv_memcpy>
        sh_ups_tmp_buf += size;
 801bdb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bdb8:	005b      	lsls	r3, r3, #1
 801bdba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bdbc:	4413      	add	r3, r2
 801bdbe:	63bb      	str	r3, [r7, #56]	; 0x38
    for(y = 0; y < size; y++) {
 801bdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdc2:	3301      	adds	r3, #1
 801bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bdc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bdca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bdcc:	429a      	cmp	r2, r3
 801bdce:	db9a      	blt.n	801bd06 <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
 801bdd0:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801bdd4:	613b      	str	r3, [r7, #16]
    uint32_t max_v_div = max_v / sw;
 801bdd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801bdda:	693a      	ldr	r2, [r7, #16]
 801bddc:	fbb2 f3f3 	udiv	r3, r2, r3
 801bde0:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (uint32_t)size * size; i++) {
 801bde2:	2300      	movs	r3, #0
 801bde4:	62bb      	str	r3, [r7, #40]	; 0x28
 801bde6:	e02c      	b.n	801be42 <shadow_blur_corner+0x188>
        if(sh_ups_buf[i] == 0) continue;
 801bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdea:	005b      	lsls	r3, r3, #1
 801bdec:	683a      	ldr	r2, [r7, #0]
 801bdee:	4413      	add	r3, r2
 801bdf0:	881b      	ldrh	r3, [r3, #0]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d021      	beq.n	801be3a <shadow_blur_corner+0x180>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 801bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdf8:	005b      	lsls	r3, r3, #1
 801bdfa:	683a      	ldr	r2, [r7, #0]
 801bdfc:	4413      	add	r3, r2
 801bdfe:	881b      	ldrh	r3, [r3, #0]
 801be00:	461a      	mov	r2, r3
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	4293      	cmp	r3, r2
 801be06:	d107      	bne.n	801be18 <shadow_blur_corner+0x15e>
 801be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be0a:	005b      	lsls	r3, r3, #1
 801be0c:	683a      	ldr	r2, [r7, #0]
 801be0e:	4413      	add	r3, r2
 801be10:	68fa      	ldr	r2, [r7, #12]
 801be12:	b292      	uxth	r2, r2
 801be14:	801a      	strh	r2, [r3, #0]
 801be16:	e011      	b.n	801be3c <shadow_blur_corner+0x182>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 801be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be1a:	005b      	lsls	r3, r3, #1
 801be1c:	683a      	ldr	r2, [r7, #0]
 801be1e:	4413      	add	r3, r2
 801be20:	881b      	ldrh	r3, [r3, #0]
 801be22:	461a      	mov	r2, r3
 801be24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801be28:	fb92 f1f3 	sdiv	r1, r2, r3
 801be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be2e:	005b      	lsls	r3, r3, #1
 801be30:	683a      	ldr	r2, [r7, #0]
 801be32:	4413      	add	r3, r2
 801be34:	b28a      	uxth	r2, r1
 801be36:	801a      	strh	r2, [r3, #0]
 801be38:	e000      	b.n	801be3c <shadow_blur_corner+0x182>
        if(sh_ups_buf[i] == 0) continue;
 801be3a:	bf00      	nop
    for(i = 0; i < (uint32_t)size * size; i++) {
 801be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be3e:	3301      	adds	r3, #1
 801be40:	62bb      	str	r3, [r7, #40]	; 0x28
 801be42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801be46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801be4a:	fb02 f303 	mul.w	r3, r2, r3
 801be4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801be50:	429a      	cmp	r2, r3
 801be52:	d3c9      	bcc.n	801bde8 <shadow_blur_corner+0x12e>
    }

    for(x = 0; x < size; x++) {
 801be54:	2300      	movs	r3, #0
 801be56:	643b      	str	r3, [r7, #64]	; 0x40
 801be58:	e090      	b.n	801bf7c <shadow_blur_corner+0x2c2>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801be5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be5c:	005b      	lsls	r3, r3, #1
 801be5e:	683a      	ldr	r2, [r7, #0]
 801be60:	4413      	add	r3, r2
 801be62:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t v = sh_ups_tmp_buf[0] * sw;
 801be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be66:	881b      	ldrh	r3, [r3, #0]
 801be68:	461a      	mov	r2, r3
 801be6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801be6e:	fb02 f303 	mul.w	r3, r2, r3
 801be72:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801be74:	2300      	movs	r3, #0
 801be76:	63fb      	str	r3, [r7, #60]	; 0x3c
 801be78:	e05b      	b.n	801bf32 <shadow_blur_corner+0x278>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 801be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	db03      	blt.n	801be88 <shadow_blur_corner+0x1ce>
 801be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be82:	119b      	asrs	r3, r3, #6
 801be84:	b299      	uxth	r1, r3
 801be86:	e000      	b.n	801be8a <shadow_blur_corner+0x1d0>
 801be88:	2100      	movs	r1, #0
 801be8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be8c:	005b      	lsls	r3, r3, #1
 801be8e:	697a      	ldr	r2, [r7, #20]
 801be90:	4413      	add	r3, r2
 801be92:	460a      	mov	r2, r1
 801be94:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 801be96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be98:	69bb      	ldr	r3, [r7, #24]
 801be9a:	1ad3      	subs	r3, r2, r3
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	dc03      	bgt.n	801bea8 <shadow_blur_corner+0x1ee>
 801bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bea2:	881b      	ldrh	r3, [r3, #0]
 801bea4:	623b      	str	r3, [r7, #32]
 801bea6:	e00d      	b.n	801bec4 <shadow_blur_corner+0x20a>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 801bea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801beaa:	69bb      	ldr	r3, [r7, #24]
 801beac:	1ad3      	subs	r3, r2, r3
 801beae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801beb2:	fb03 f202 	mul.w	r2, r3, r2
 801beb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801beb8:	4413      	add	r3, r2
 801beba:	005b      	lsls	r3, r3, #1
 801bebc:	683a      	ldr	r2, [r7, #0]
 801bebe:	4413      	add	r3, r2
 801bec0:	881b      	ldrh	r3, [r3, #0]
 801bec2:	623b      	str	r3, [r7, #32]
            v -= top_val;
 801bec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bec6:	6a3b      	ldr	r3, [r7, #32]
 801bec8:	1ad3      	subs	r3, r2, r3
 801beca:	627b      	str	r3, [r7, #36]	; 0x24

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 801becc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bed0:	4413      	add	r3, r2
 801bed2:	1c5a      	adds	r2, r3, #1
 801bed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bed8:	429a      	cmp	r2, r3
 801beda:	da0f      	bge.n	801befc <shadow_blur_corner+0x242>
 801bedc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bee0:	4413      	add	r3, r2
 801bee2:	3301      	adds	r3, #1
 801bee4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801bee8:	fb03 f202 	mul.w	r2, r3, r2
 801beec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801beee:	4413      	add	r3, r2
 801bef0:	005b      	lsls	r3, r3, #1
 801bef2:	683a      	ldr	r2, [r7, #0]
 801bef4:	4413      	add	r3, r2
 801bef6:	881b      	ldrh	r3, [r3, #0]
 801bef8:	61fb      	str	r3, [r7, #28]
 801befa:	e00d      	b.n	801bf18 <shadow_blur_corner+0x25e>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 801befc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bf00:	3b01      	subs	r3, #1
 801bf02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801bf06:	fb03 f202 	mul.w	r2, r3, r2
 801bf0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf0c:	4413      	add	r3, r2
 801bf0e:	005b      	lsls	r3, r3, #1
 801bf10:	683a      	ldr	r2, [r7, #0]
 801bf12:	4413      	add	r3, r2
 801bf14:	881b      	ldrh	r3, [r3, #0]
 801bf16:	61fb      	str	r3, [r7, #28]
            v += bottom_val;
 801bf18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf1a:	69fb      	ldr	r3, [r7, #28]
 801bf1c:	4413      	add	r3, r2
 801bf1e:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801bf20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf22:	3301      	adds	r3, #1
 801bf24:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bf2a:	005b      	lsls	r3, r3, #1
 801bf2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf2e:	4413      	add	r3, r2
 801bf30:	63bb      	str	r3, [r7, #56]	; 0x38
 801bf32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bf36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf38:	429a      	cmp	r2, r3
 801bf3a:	db9e      	blt.n	801be7a <shadow_blur_corner+0x1c0>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801bf3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf3e:	005b      	lsls	r3, r3, #1
 801bf40:	683a      	ldr	r2, [r7, #0]
 801bf42:	4413      	add	r3, r2
 801bf44:	63bb      	str	r3, [r7, #56]	; 0x38
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801bf46:	2300      	movs	r3, #0
 801bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf4a:	e00f      	b.n	801bf6c <shadow_blur_corner+0x2b2>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 801bf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf4e:	005b      	lsls	r3, r3, #1
 801bf50:	697a      	ldr	r2, [r7, #20]
 801bf52:	4413      	add	r3, r2
 801bf54:	881a      	ldrh	r2, [r3, #0]
 801bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf58:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801bf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf5c:	3301      	adds	r3, #1
 801bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bf64:	005b      	lsls	r3, r3, #1
 801bf66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf68:	4413      	add	r3, r2
 801bf6a:	63bb      	str	r3, [r7, #56]	; 0x38
 801bf6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bf70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf72:	429a      	cmp	r2, r3
 801bf74:	dbea      	blt.n	801bf4c <shadow_blur_corner+0x292>
    for(x = 0; x < size; x++) {
 801bf76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf78:	3301      	adds	r3, #1
 801bf7a:	643b      	str	r3, [r7, #64]	; 0x40
 801bf7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bf80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bf82:	429a      	cmp	r2, r3
 801bf84:	f6ff af69 	blt.w	801be5a <shadow_blur_corner+0x1a0>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 801bf88:	6978      	ldr	r0, [r7, #20]
 801bf8a:	f004 f93d 	bl	8020208 <lv_mem_buf_release>
}
 801bf8e:	bf00      	nop
 801bf90:	3748      	adds	r7, #72	; 0x48
 801bf92:	46bd      	mov	sp, r7
 801bf94:	bd80      	pop	{r7, pc}

0801bf96 <draw_outline>:
#endif

static void draw_outline(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801bf96:	b5b0      	push	{r4, r5, r7, lr}
 801bf98:	b092      	sub	sp, #72	; 0x48
 801bf9a:	af04      	add	r7, sp, #16
 801bf9c:	60f8      	str	r0, [r7, #12]
 801bf9e:	60b9      	str	r1, [r7, #8]
 801bfa0:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801bfa2:	68bb      	ldr	r3, [r7, #8]
 801bfa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bfa8:	2b02      	cmp	r3, #2
 801bfaa:	f240 80b7 	bls.w	801c11c <draw_outline+0x186>
    if(dsc->outline_width == 0) return;
 801bfae:	68bb      	ldr	r3, [r7, #8]
 801bfb0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	f000 80b3 	beq.w	801c120 <draw_outline+0x18a>

    lv_opa_t opa = dsc->outline_opa;
 801bfba:	68bb      	ldr	r3, [r7, #8]
 801bfbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bfc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801bfc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801bfc8:	2bfd      	cmp	r3, #253	; 0xfd
 801bfca:	d902      	bls.n	801bfd2 <draw_outline+0x3c>
 801bfcc:	23ff      	movs	r3, #255	; 0xff
 801bfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801bfd2:	f107 0318 	add.w	r3, r7, #24
 801bfd6:	6879      	ldr	r1, [r7, #4]
 801bfd8:	4618      	mov	r0, r3
 801bfda:	f7fd fc0f 	bl	80197fc <lv_area_copy>

    /*Bring the outline closer to make sure there is no color bleeding with pad=0*/
    lv_coord_t pad = dsc->outline_pad - 1;
 801bfde:	68bb      	ldr	r3, [r7, #8]
 801bfe0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801bfe4:	b29b      	uxth	r3, r3
 801bfe6:	3b01      	subs	r3, #1
 801bfe8:	b29b      	uxth	r3, r3
 801bfea:	863b      	strh	r3, [r7, #48]	; 0x30
    area_inner.x1 -= pad;
 801bfec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801bff0:	b29a      	uxth	r2, r3
 801bff2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801bff4:	1ad3      	subs	r3, r2, r3
 801bff6:	b29b      	uxth	r3, r3
 801bff8:	b21b      	sxth	r3, r3
 801bffa:	833b      	strh	r3, [r7, #24]
    area_inner.y1 -= pad;
 801bffc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c000:	b29a      	uxth	r2, r3
 801c002:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c004:	1ad3      	subs	r3, r2, r3
 801c006:	b29b      	uxth	r3, r3
 801c008:	b21b      	sxth	r3, r3
 801c00a:	837b      	strh	r3, [r7, #26]
    area_inner.x2 += pad;
 801c00c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801c010:	b29a      	uxth	r2, r3
 801c012:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c014:	4413      	add	r3, r2
 801c016:	b29b      	uxth	r3, r3
 801c018:	b21b      	sxth	r3, r3
 801c01a:	83bb      	strh	r3, [r7, #28]
    area_inner.y2 += pad;
 801c01c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c020:	b29a      	uxth	r2, r3
 801c022:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c024:	4413      	add	r3, r2
 801c026:	b29b      	uxth	r3, r3
 801c028:	b21b      	sxth	r3, r3
 801c02a:	83fb      	strh	r3, [r7, #30]

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 801c02c:	f107 0218 	add.w	r2, r7, #24
 801c030:	f107 0310 	add.w	r3, r7, #16
 801c034:	4611      	mov	r1, r2
 801c036:	4618      	mov	r0, r3
 801c038:	f7fd fbe0 	bl	80197fc <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 801c03c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801c040:	b29a      	uxth	r2, r3
 801c042:	68bb      	ldr	r3, [r7, #8]
 801c044:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c048:	b29b      	uxth	r3, r3
 801c04a:	1ad3      	subs	r3, r2, r3
 801c04c:	b29b      	uxth	r3, r3
 801c04e:	b21b      	sxth	r3, r3
 801c050:	823b      	strh	r3, [r7, #16]
    area_outer.x2 += dsc->outline_width;
 801c052:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c056:	b29a      	uxth	r2, r3
 801c058:	68bb      	ldr	r3, [r7, #8]
 801c05a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c05e:	b29b      	uxth	r3, r3
 801c060:	4413      	add	r3, r2
 801c062:	b29b      	uxth	r3, r3
 801c064:	b21b      	sxth	r3, r3
 801c066:	82bb      	strh	r3, [r7, #20]
    area_outer.y1 -= dsc->outline_width;
 801c068:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c06c:	b29a      	uxth	r2, r3
 801c06e:	68bb      	ldr	r3, [r7, #8]
 801c070:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c074:	b29b      	uxth	r3, r3
 801c076:	1ad3      	subs	r3, r2, r3
 801c078:	b29b      	uxth	r3, r3
 801c07a:	b21b      	sxth	r3, r3
 801c07c:	827b      	strh	r3, [r7, #18]
    area_outer.y2 += dsc->outline_width;
 801c07e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c082:	b29a      	uxth	r2, r3
 801c084:	68bb      	ldr	r3, [r7, #8]
 801c086:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c08a:	b29b      	uxth	r3, r3
 801c08c:	4413      	add	r3, r2
 801c08e:	b29b      	uxth	r3, r3
 801c090:	b21b      	sxth	r3, r3
 801c092:	82fb      	strh	r3, [r7, #22]


    int32_t inner_w = lv_area_get_width(&area_inner);
 801c094:	f107 0318 	add.w	r3, r7, #24
 801c098:	4618      	mov	r0, r3
 801c09a:	f7fd fbce 	bl	801983a <lv_area_get_width>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t inner_h = lv_area_get_height(&area_inner);
 801c0a2:	f107 0318 	add.w	r3, r7, #24
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7fd fbde 	bl	8019868 <lv_area_get_height>
 801c0ac:	4603      	mov	r3, r0
 801c0ae:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t rin = dsc->radius;
 801c0b0:	68bb      	ldr	r3, [r7, #8]
 801c0b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0b6:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t short_side = LV_MIN(inner_w, inner_h);
 801c0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0bc:	4293      	cmp	r3, r2
 801c0be:	bfa8      	it	ge
 801c0c0:	4613      	movge	r3, r2
 801c0c2:	627b      	str	r3, [r7, #36]	; 0x24
    if(rin > short_side >> 1) rin = short_side >> 1;
 801c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0c6:	105b      	asrs	r3, r3, #1
 801c0c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c0ca:	429a      	cmp	r2, r3
 801c0cc:	dd02      	ble.n	801c0d4 <draw_outline+0x13e>
 801c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0d0:	105b      	asrs	r3, r3, #1
 801c0d2:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t rout = rin + dsc->outline_width;
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c0da:	b29a      	uxth	r2, r3
 801c0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0de:	b29b      	uxth	r3, r3
 801c0e0:	4413      	add	r3, r2
 801c0e2:	b29b      	uxth	r3, r3
 801c0e4:	847b      	strh	r3, [r7, #34]	; 0x22

    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 801c0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0e8:	b21b      	sxth	r3, r3
 801c0ea:	68ba      	ldr	r2, [r7, #8]
 801c0ec:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801c0f0:	68b9      	ldr	r1, [r7, #8]
 801c0f2:	7889      	ldrb	r1, [r1, #2]
 801c0f4:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 801c0f8:	f107 0418 	add.w	r4, r7, #24
 801c0fc:	f107 0010 	add.w	r0, r7, #16
 801c100:	9103      	str	r1, [sp, #12]
 801c102:	9202      	str	r2, [sp, #8]
 801c104:	68ba      	ldr	r2, [r7, #8]
 801c106:	7f92      	ldrb	r2, [r2, #30]
 801c108:	f88d 2004 	strb.w	r2, [sp, #4]
 801c10c:	9300      	str	r3, [sp, #0]
 801c10e:	462b      	mov	r3, r5
 801c110:	4622      	mov	r2, r4
 801c112:	4601      	mov	r1, r0
 801c114:	68f8      	ldr	r0, [r7, #12]
 801c116:	f000 f807 	bl	801c128 <draw_border_generic>
 801c11a:	e002      	b.n	801c122 <draw_outline+0x18c>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801c11c:	bf00      	nop
 801c11e:	e000      	b.n	801c122 <draw_outline+0x18c>
    if(dsc->outline_width == 0) return;
 801c120:	bf00      	nop
                        dsc->blend_mode);
}
 801c122:	3738      	adds	r7, #56	; 0x38
 801c124:	46bd      	mov	sp, r7
 801c126:	bdb0      	pop	{r4, r5, r7, pc}

0801c128 <draw_border_generic>:

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 801c128:	b580      	push	{r7, lr}
 801c12a:	b0a8      	sub	sp, #160	; 0xa0
 801c12c:	af02      	add	r7, sp, #8
 801c12e:	60f8      	str	r0, [r7, #12]
 801c130:	60b9      	str	r1, [r7, #8]
 801c132:	607a      	str	r2, [r7, #4]
 801c134:	807b      	strh	r3, [r7, #2]
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 801c136:	68b8      	ldr	r0, [r7, #8]
 801c138:	f7f3 fe3c 	bl	800fdb4 <lv_draw_mask_is_any>
 801c13c:	4603      	mov	r3, r0
 801c13e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 801c142:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801c146:	f083 0301 	eor.w	r3, r3, #1
 801c14a:	b2db      	uxtb	r3, r3
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d012      	beq.n	801c176 <draw_border_generic+0x4e>
 801c150:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d10e      	bne.n	801c176 <draw_border_generic+0x4e>
 801c158:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d10a      	bne.n	801c176 <draw_border_generic+0x4e>
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 801c160:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801c164:	9300      	str	r3, [sp, #0]
 801c166:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801c16a:	687a      	ldr	r2, [r7, #4]
 801c16c:	68b9      	ldr	r1, [r7, #8]
 801c16e:	68f8      	ldr	r0, [r7, #12]
 801c170:	f000 fbb0 	bl	801c8d4 <draw_border_simple>
        return;
 801c174:	e3ab      	b.n	801c8ce <draw_border_generic+0x7a6>
    }

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `coords`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	689a      	ldr	r2, [r3, #8]
 801c17a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c17e:	68b9      	ldr	r1, [r7, #8]
 801c180:	4618      	mov	r0, r3
 801c182:	f002 fbeb 	bl	801e95c <_lv_area_intersect>
 801c186:	4603      	mov	r3, r0
 801c188:	f083 0301 	eor.w	r3, r3, #1
 801c18c:	b2db      	uxtb	r3, r3
 801c18e:	2b00      	cmp	r3, #0
 801c190:	f040 839c 	bne.w	801c8cc <draw_border_generic+0x7a4>
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 801c194:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c198:	4618      	mov	r0, r3
 801c19a:	f7fd fb4e 	bl	801983a <lv_area_get_width>
 801c19e:	4603      	mov	r3, r0
 801c1a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801c1a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c1a8:	211c      	movs	r1, #28
 801c1aa:	4618      	mov	r0, r3
 801c1ac:	f004 fb2a 	bl	8020804 <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 801c1b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	f003 ff7b 	bl	80200b0 <lv_mem_buf_get>
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	663b      	str	r3, [r7, #96]	; 0x60


    /*Create mask for the outer area*/
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801c1be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c1c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0) {
 801c1c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	dd10      	ble.n	801c1f0 <draw_border_generic+0xc8>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 801c1ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801c1d2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	68b9      	ldr	r1, [r7, #8]
 801c1da:	f7f4 f887 	bl	80102ec <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801c1de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c1e2:	2100      	movs	r1, #0
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	f7f3 fcb5 	bl	800fb54 <lv_draw_mask_add>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    }

    /*Create mask for the inner mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 801c1f0:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	; 0xa0
 801c1f4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801c1f8:	2301      	movs	r3, #1
 801c1fa:	6879      	ldr	r1, [r7, #4]
 801c1fc:	f7f4 f876 	bl	80102ec <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 801c200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c204:	2100      	movs	r1, #0
 801c206:	4618      	mov	r0, r3
 801c208:	f7f3 fca4 	bl	800fb54 <lv_draw_mask_add>
 801c20c:	4603      	mov	r3, r0
 801c20e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t h;
    lv_area_t blend_area;
    blend_dsc.blend_area = &blend_area;
 801c212:	f107 031c 	add.w	r3, r7, #28
 801c216:	657b      	str	r3, [r7, #84]	; 0x54
    blend_dsc.mask_area = &blend_area;
 801c218:	f107 031c 	add.w	r3, r7, #28
 801c21c:	66bb      	str	r3, [r7, #104]	; 0x68
    blend_dsc.color = color;
 801c21e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801c222:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    blend_dsc.opa = opa;
 801c226:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801c22a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    blend_dsc.blend_mode = blend_mode;
 801c22e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 801c232:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

    /*Calculate the x and y coordinates where the straight parts area*/
    lv_area_t core_area;
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c23c:	461a      	mov	r2, r3
 801c23e:	68bb      	ldr	r3, [r7, #8]
 801c240:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c244:	4619      	mov	r1, r3
 801c246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c24a:	440b      	add	r3, r1
 801c24c:	4293      	cmp	r3, r2
 801c24e:	bfb8      	it	lt
 801c250:	4613      	movlt	r3, r2
 801c252:	b21b      	sxth	r3, r3
 801c254:	82bb      	strh	r3, [r7, #20]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c25c:	461a      	mov	r2, r3
 801c25e:	68bb      	ldr	r3, [r7, #8]
 801c260:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c264:	4619      	mov	r1, r3
 801c266:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c26a:	1acb      	subs	r3, r1, r3
 801c26c:	4293      	cmp	r3, r2
 801c26e:	bfa8      	it	ge
 801c270:	4613      	movge	r3, r2
 801c272:	b21b      	sxth	r3, r3
 801c274:	833b      	strh	r3, [r7, #24]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c27c:	461a      	mov	r2, r3
 801c27e:	68bb      	ldr	r3, [r7, #8]
 801c280:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c284:	4619      	mov	r1, r3
 801c286:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c28a:	440b      	add	r3, r1
 801c28c:	4293      	cmp	r3, r2
 801c28e:	bfb8      	it	lt
 801c290:	4613      	movlt	r3, r2
 801c292:	b21b      	sxth	r3, r3
 801c294:	82fb      	strh	r3, [r7, #22]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c29c:	461a      	mov	r2, r3
 801c29e:	68bb      	ldr	r3, [r7, #8]
 801c2a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c2a4:	4619      	mov	r1, r3
 801c2a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c2aa:	1acb      	subs	r3, r1, r3
 801c2ac:	4293      	cmp	r3, r2
 801c2ae:	bfa8      	it	ge
 801c2b0:	4613      	movge	r3, r2
 801c2b2:	b21b      	sxth	r3, r3
 801c2b4:	837b      	strh	r3, [r7, #26]
    lv_coord_t core_w = lv_area_get_width(&core_area);
 801c2b6:	f107 0314 	add.w	r3, r7, #20
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f7fd fabd 	bl	801983a <lv_area_get_width>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801c2c6:	68bb      	ldr	r3, [r7, #8]
 801c2c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c2d2:	429a      	cmp	r2, r3
 801c2d4:	bfd4      	ite	le
 801c2d6:	2301      	movle	r3, #1
 801c2d8:	2300      	movgt	r3, #0
 801c2da:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c2ea:	429a      	cmp	r2, r3
 801c2ec:	bfac      	ite	ge
 801c2ee:	2301      	movge	r3, #1
 801c2f0:	2300      	movlt	r3, #0
 801c2f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

    /*If there is other masks, need to draw line by line*/
    if(mask_any) {
 801c2f6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d077      	beq.n	801c3ee <draw_border_generic+0x2c6>
        blend_area.x1 = draw_area.x1;
 801c2fe:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c302:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801c304:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801c308:	843b      	strh	r3, [r7, #32]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801c30a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c30e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c312:	e045      	b.n	801c3a0 <draw_border_generic+0x278>
            if(!top_side && h < core_area.y1) continue;
 801c314:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801c318:	f083 0301 	eor.w	r3, r3, #1
 801c31c:	b2db      	uxtb	r3, r3
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d006      	beq.n	801c330 <draw_border_generic+0x208>
 801c322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c326:	461a      	mov	r2, r3
 801c328:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c32c:	4293      	cmp	r3, r2
 801c32e:	db31      	blt.n	801c394 <draw_border_generic+0x26c>
            if(!bottom_side && h > core_area.y2) break;
 801c330:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801c334:	f083 0301 	eor.w	r3, r3, #1
 801c338:	b2db      	uxtb	r3, r3
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d006      	beq.n	801c34c <draw_border_generic+0x224>
 801c33e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c342:	461a      	mov	r2, r3
 801c344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c348:	4293      	cmp	r3, r2
 801c34a:	dc31      	bgt.n	801c3b0 <draw_border_generic+0x288>

            blend_area.y1 = h;
 801c34c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c350:	b21b      	sxth	r3, r3
 801c352:	83fb      	strh	r3, [r7, #30]
            blend_area.y2 = h;
 801c354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c358:	b21b      	sxth	r3, r3
 801c35a:	847b      	strh	r3, [r7, #34]	; 0x22

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801c35c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c35e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801c362:	4611      	mov	r1, r2
 801c364:	4618      	mov	r0, r3
 801c366:	f004 face 	bl	8020906 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 801c36a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801c36c:	f9b7 1070 	ldrsh.w	r1, [r7, #112]	; 0x70
 801c370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c374:	b21a      	sxth	r2, r3
 801c376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c37a:	b21b      	sxth	r3, r3
 801c37c:	f7f3 fc1c 	bl	800fbb8 <lv_draw_mask_apply>
 801c380:	4603      	mov	r3, r0
 801c382:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c386:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c38a:	4619      	mov	r1, r3
 801c38c:	68f8      	ldr	r0, [r7, #12]
 801c38e:	f7f8 ffe1 	bl	8015354 <lv_draw_sw_blend>
 801c392:	e000      	b.n	801c396 <draw_border_generic+0x26e>
            if(!top_side && h < core_area.y1) continue;
 801c394:	bf00      	nop
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801c396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c39a:	3301      	adds	r3, #1
 801c39c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c3a0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801c3a4:	461a      	mov	r2, r3
 801c3a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c3aa:	4293      	cmp	r3, r2
 801c3ac:	ddb2      	ble.n	801c314 <draw_border_generic+0x1ec>
 801c3ae:	e000      	b.n	801c3b2 <draw_border_generic+0x28a>
            if(!bottom_side && h > core_area.y2) break;
 801c3b0:	bf00      	nop
        }

        lv_draw_mask_free_param(&mask_rin_param);
 801c3b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	f7f3 fc92 	bl	800fce0 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 801c3bc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801c3c0:	4618      	mov	r0, r3
 801c3c2:	f7f3 fc3d 	bl	800fc40 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 801c3c6:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c3ce:	d009      	beq.n	801c3e4 <draw_border_generic+0x2bc>
            lv_draw_mask_free_param(&mask_rout_param);
 801c3d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	f7f3 fc83 	bl	800fce0 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 801c3da:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801c3de:	4618      	mov	r0, r3
 801c3e0:	f7f3 fc2e 	bl	800fc40 <lv_draw_mask_remove_id>
        }
        lv_mem_buf_release(blend_dsc.mask_buf);
 801c3e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	f003 ff0e 	bl	8020208 <lv_mem_buf_release>
        return;
 801c3ec:	e26f      	b.n	801c8ce <draw_border_generic+0x7a6>
    }

    /*No masks*/
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801c3ee:	68bb      	ldr	r3, [r7, #8]
 801c3f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c3fa:	429a      	cmp	r2, r3
 801c3fc:	bfd4      	ite	le
 801c3fe:	2301      	movle	r3, #1
 801c400:	2300      	movgt	r3, #0
 801c402:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801c406:	68bb      	ldr	r3, [r7, #8]
 801c408:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c412:	429a      	cmp	r2, r3
 801c414:	bfac      	ite	ge
 801c416:	2301      	movge	r3, #1
 801c418:	2300      	movlt	r3, #0
 801c41a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    bool split_hor = true;
 801c41e:	2301      	movs	r3, #1
 801c420:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    if(left_side && right_side && top_side && bottom_side &&
 801c424:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d012      	beq.n	801c452 <draw_border_generic+0x32a>
 801c42c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801c430:	2b00      	cmp	r3, #0
 801c432:	d00e      	beq.n	801c452 <draw_border_generic+0x32a>
 801c434:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d00a      	beq.n	801c452 <draw_border_generic+0x32a>
 801c43c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801c440:	2b00      	cmp	r3, #0
 801c442:	d006      	beq.n	801c452 <draw_border_generic+0x32a>
 801c444:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801c448:	2b31      	cmp	r3, #49	; 0x31
 801c44a:	dc02      	bgt.n	801c452 <draw_border_generic+0x32a>
       core_w < SPLIT_LIMIT) {
        split_hor = false;
 801c44c:	2300      	movs	r3, #0
 801c44e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801c452:	2301      	movs	r3, #1
 801c454:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    /*Draw the straight lines first if they are long enough*/
    if(top_side && split_hor) {
 801c458:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d01b      	beq.n	801c498 <draw_border_generic+0x370>
 801c460:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801c464:	2b00      	cmp	r3, #0
 801c466:	d017      	beq.n	801c498 <draw_border_generic+0x370>
        blend_area.x1 = core_area.x1;
 801c468:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c46c:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801c46e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801c472:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = outer_area->y1;
 801c474:	68bb      	ldr	r3, [r7, #8]
 801c476:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c47a:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = inner_area->y1 - 1;
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c482:	b29b      	uxth	r3, r3
 801c484:	3b01      	subs	r3, #1
 801c486:	b29b      	uxth	r3, r3
 801c488:	b21b      	sxth	r3, r3
 801c48a:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c48c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c490:	4619      	mov	r1, r3
 801c492:	68f8      	ldr	r0, [r7, #12]
 801c494:	f7f8 ff5e 	bl	8015354 <lv_draw_sw_blend>
    }

    if(bottom_side && split_hor) {
 801c498:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d01b      	beq.n	801c4d8 <draw_border_generic+0x3b0>
 801c4a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d017      	beq.n	801c4d8 <draw_border_generic+0x3b0>
        blend_area.x1 = core_area.x1;
 801c4a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c4ac:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801c4ae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801c4b2:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = inner_area->y2 + 1;
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c4ba:	b29b      	uxth	r3, r3
 801c4bc:	3301      	adds	r3, #1
 801c4be:	b29b      	uxth	r3, r3
 801c4c0:	b21b      	sxth	r3, r3
 801c4c2:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = outer_area->y2;
 801c4c4:	68bb      	ldr	r3, [r7, #8]
 801c4c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c4ca:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c4cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c4d0:	4619      	mov	r1, r3
 801c4d2:	68f8      	ldr	r0, [r7, #12]
 801c4d4:	f7f8 ff3e 	bl	8015354 <lv_draw_sw_blend>
    }

    if(left_side) {
 801c4d8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d017      	beq.n	801c510 <draw_border_generic+0x3e8>
        blend_area.x1 = outer_area->x1;
 801c4e0:	68bb      	ldr	r3, [r7, #8]
 801c4e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c4e6:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = inner_area->x1 - 1;
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c4ee:	b29b      	uxth	r3, r3
 801c4f0:	3b01      	subs	r3, #1
 801c4f2:	b29b      	uxth	r3, r3
 801c4f4:	b21b      	sxth	r3, r3
 801c4f6:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801c4f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c4fc:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801c4fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c502:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c508:	4619      	mov	r1, r3
 801c50a:	68f8      	ldr	r0, [r7, #12]
 801c50c:	f7f8 ff22 	bl	8015354 <lv_draw_sw_blend>
    }

    if(right_side) {
 801c510:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801c514:	2b00      	cmp	r3, #0
 801c516:	d017      	beq.n	801c548 <draw_border_generic+0x420>
        blend_area.x1 = inner_area->x2 + 1;
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c51e:	b29b      	uxth	r3, r3
 801c520:	3301      	adds	r3, #1
 801c522:	b29b      	uxth	r3, r3
 801c524:	b21b      	sxth	r3, r3
 801c526:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = outer_area->x2;
 801c528:	68bb      	ldr	r3, [r7, #8]
 801c52a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c52e:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801c530:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c534:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801c536:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c53a:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c53c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c540:	4619      	mov	r1, r3
 801c542:	68f8      	ldr	r0, [r7, #12]
 801c544:	f7f8 ff06 	bl	8015354 <lv_draw_sw_blend>

    /*Draw the corners*/
    lv_coord_t blend_w;

    /*Left and right corner together if they are close to each other*/
    if(!split_hor) {
 801c548:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801c54c:	f083 0301 	eor.w	r3, r3, #1
 801c550:	b2db      	uxtb	r3, r3
 801c552:	2b00      	cmp	r3, #0
 801c554:	f000 8081 	beq.w	801c65a <draw_border_generic+0x532>
        /*Calculate the top corner and mirror it to the bottom*/
        blend_area.x1 = draw_area.x1;
 801c558:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c55c:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801c55e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801c562:	843b      	strh	r3, [r7, #32]
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c56a:	461a      	mov	r2, r3
 801c56c:	68bb      	ldr	r3, [r7, #8]
 801c56e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c572:	1ad2      	subs	r2, r2, r3
 801c574:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c578:	4293      	cmp	r3, r2
 801c57a:	bfb8      	it	lt
 801c57c:	4613      	movlt	r3, r2
 801c57e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        for(h = 0; h < max_h; h++) {
 801c582:	2300      	movs	r3, #0
 801c584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c588:	e060      	b.n	801c64c <draw_border_generic+0x524>
            lv_coord_t top_y = outer_area->y1 + h;
 801c58a:	68bb      	ldr	r3, [r7, #8]
 801c58c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c590:	b29a      	uxth	r2, r3
 801c592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c596:	b29b      	uxth	r3, r3
 801c598:	4413      	add	r3, r2
 801c59a:	b29b      	uxth	r3, r3
 801c59c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            lv_coord_t bottom_y = outer_area->y2 - h;
 801c5a0:	68bb      	ldr	r3, [r7, #8]
 801c5a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c5a6:	b29a      	uxth	r2, r3
 801c5a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c5ac:	b29b      	uxth	r3, r3
 801c5ae:	1ad3      	subs	r3, r2, r3
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801c5b6:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c5ba:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801c5be:	429a      	cmp	r2, r3
 801c5c0:	da05      	bge.n	801c5ce <draw_border_generic+0x4a6>
 801c5c2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801c5c6:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801c5ca:	429a      	cmp	r2, r3
 801c5cc:	dc38      	bgt.n	801c640 <draw_border_generic+0x518>

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801c5ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c5d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801c5d4:	4611      	mov	r1, r2
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	f004 f995 	bl	8020906 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 801c5dc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801c5de:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801c5e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c5e6:	b21b      	sxth	r3, r3
 801c5e8:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801c5ec:	f7f3 fae4 	bl	800fbb8 <lv_draw_mask_apply>
 801c5f0:	4603      	mov	r3, r0
 801c5f2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if(top_y >= draw_area.y1) {
 801c5f6:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c5fa:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801c5fe:	429a      	cmp	r2, r3
 801c600:	db0b      	blt.n	801c61a <draw_border_generic+0x4f2>
                blend_area.y1 = top_y;
 801c602:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801c606:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = top_y;
 801c608:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801c60c:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c60e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c612:	4619      	mov	r1, r3
 801c614:	68f8      	ldr	r0, [r7, #12]
 801c616:	f7f8 fe9d 	bl	8015354 <lv_draw_sw_blend>
            }

            if(bottom_y <= draw_area.y2) {
 801c61a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801c61e:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801c622:	429a      	cmp	r2, r3
 801c624:	dc0d      	bgt.n	801c642 <draw_border_generic+0x51a>
                blend_area.y1 = bottom_y;
 801c626:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801c62a:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = bottom_y;
 801c62c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801c630:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c636:	4619      	mov	r1, r3
 801c638:	68f8      	ldr	r0, [r7, #12]
 801c63a:	f7f8 fe8b 	bl	8015354 <lv_draw_sw_blend>
 801c63e:	e000      	b.n	801c642 <draw_border_generic+0x51a>
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801c640:	bf00      	nop
        for(h = 0; h < max_h; h++) {
 801c642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c646:	3301      	adds	r3, #1
 801c648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c64c:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801c650:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c654:	429a      	cmp	r2, r3
 801c656:	db98      	blt.n	801c58a <draw_border_generic+0x462>
 801c658:	e11f      	b.n	801c89a <draw_border_generic+0x772>
            }
        }
    }
    else {
        /*Left corners*/
        blend_area.x1 = draw_area.x1;
 801c65a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c65e:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 801c660:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c664:	3b01      	subs	r3, #1
 801c666:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 801c66a:	4293      	cmp	r3, r2
 801c66c:	bfa8      	it	ge
 801c66e:	4613      	movge	r3, r2
 801c670:	b21b      	sxth	r3, r3
 801c672:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801c674:	f107 031c 	add.w	r3, r7, #28
 801c678:	4618      	mov	r0, r3
 801c67a:	f7fd f8de 	bl	801983a <lv_area_get_width>
 801c67e:	4603      	mov	r3, r0
 801c680:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(blend_w > 0) {
 801c684:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801c688:	2b00      	cmp	r3, #0
 801c68a:	dd76      	ble.n	801c77a <draw_border_generic+0x652>
            if(left_side || top_side) {
 801c68c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801c690:	2b00      	cmp	r3, #0
 801c692:	d103      	bne.n	801c69c <draw_border_generic+0x574>
 801c694:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d032      	beq.n	801c702 <draw_border_generic+0x5da>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801c69c:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c6a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c6a4:	e026      	b.n	801c6f4 <draw_border_generic+0x5cc>
                    blend_area.y1 = h;
 801c6a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c6aa:	b21b      	sxth	r3, r3
 801c6ac:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801c6ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c6b2:	b21b      	sxth	r3, r3
 801c6b4:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801c6b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c6b8:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801c6bc:	4611      	mov	r1, r2
 801c6be:	4618      	mov	r0, r3
 801c6c0:	f004 f921 	bl	8020906 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801c6c4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801c6c6:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801c6ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c6ce:	b21a      	sxth	r2, r3
 801c6d0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801c6d4:	f7f3 fa70 	bl	800fbb8 <lv_draw_mask_apply>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c6de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c6e2:	4619      	mov	r1, r3
 801c6e4:	68f8      	ldr	r0, [r7, #12]
 801c6e6:	f7f8 fe35 	bl	8015354 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801c6ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c6ee:	3301      	adds	r3, #1
 801c6f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c6f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c6f8:	461a      	mov	r2, r3
 801c6fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c6fe:	4293      	cmp	r3, r2
 801c700:	dbd1      	blt.n	801c6a6 <draw_border_generic+0x57e>
                }
            }

            if(left_side || bottom_side) {
 801c702:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801c706:	2b00      	cmp	r3, #0
 801c708:	d103      	bne.n	801c712 <draw_border_generic+0x5ea>
 801c70a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d033      	beq.n	801c77a <draw_border_generic+0x652>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801c712:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c716:	3301      	adds	r3, #1
 801c718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c71c:	e026      	b.n	801c76c <draw_border_generic+0x644>
                    blend_area.y1 = h;
 801c71e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c722:	b21b      	sxth	r3, r3
 801c724:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801c726:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c72a:	b21b      	sxth	r3, r3
 801c72c:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801c72e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c730:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801c734:	4611      	mov	r1, r2
 801c736:	4618      	mov	r0, r3
 801c738:	f004 f8e5 	bl	8020906 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801c73c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801c73e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801c742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c746:	b21a      	sxth	r2, r3
 801c748:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801c74c:	f7f3 fa34 	bl	800fbb8 <lv_draw_mask_apply>
 801c750:	4603      	mov	r3, r0
 801c752:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c756:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c75a:	4619      	mov	r1, r3
 801c75c:	68f8      	ldr	r0, [r7, #12]
 801c75e:	f7f8 fdf9 	bl	8015354 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801c762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c766:	3301      	adds	r3, #1
 801c768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c76c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801c770:	461a      	mov	r2, r3
 801c772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c776:	4293      	cmp	r3, r2
 801c778:	ddd1      	ble.n	801c71e <draw_border_generic+0x5f6>
                }
            }
        }

        /*Right corners*/
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 801c77a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801c77e:	3301      	adds	r3, #1
 801c780:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 801c784:	4293      	cmp	r3, r2
 801c786:	bfb8      	it	lt
 801c788:	4613      	movlt	r3, r2
 801c78a:	b21b      	sxth	r3, r3
 801c78c:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801c78e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801c792:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801c794:	f107 031c 	add.w	r3, r7, #28
 801c798:	4618      	mov	r0, r3
 801c79a:	f7fd f84e 	bl	801983a <lv_area_get_width>
 801c79e:	4603      	mov	r3, r0
 801c7a0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if(blend_w > 0) {
 801c7a4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	dd76      	ble.n	801c89a <draw_border_generic+0x772>
            if(right_side || top_side) {
 801c7ac:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d103      	bne.n	801c7bc <draw_border_generic+0x694>
 801c7b4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d032      	beq.n	801c822 <draw_border_generic+0x6fa>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801c7bc:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c7c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c7c4:	e026      	b.n	801c814 <draw_border_generic+0x6ec>
                    blend_area.y1 = h;
 801c7c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7ca:	b21b      	sxth	r3, r3
 801c7cc:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801c7ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7d2:	b21b      	sxth	r3, r3
 801c7d4:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801c7d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c7d8:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801c7dc:	4611      	mov	r1, r2
 801c7de:	4618      	mov	r0, r3
 801c7e0:	f004 f891 	bl	8020906 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801c7e4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801c7e6:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801c7ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c7ee:	b21a      	sxth	r2, r3
 801c7f0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801c7f4:	f7f3 f9e0 	bl	800fbb8 <lv_draw_mask_apply>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c7fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c802:	4619      	mov	r1, r3
 801c804:	68f8      	ldr	r0, [r7, #12]
 801c806:	f7f8 fda5 	bl	8015354 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801c80a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c80e:	3301      	adds	r3, #1
 801c810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c814:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c818:	461a      	mov	r2, r3
 801c81a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c81e:	4293      	cmp	r3, r2
 801c820:	dbd1      	blt.n	801c7c6 <draw_border_generic+0x69e>
                }
            }

            if(right_side || bottom_side) {
 801c822:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801c826:	2b00      	cmp	r3, #0
 801c828:	d103      	bne.n	801c832 <draw_border_generic+0x70a>
 801c82a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d033      	beq.n	801c89a <draw_border_generic+0x772>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801c832:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c836:	3301      	adds	r3, #1
 801c838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c83c:	e026      	b.n	801c88c <draw_border_generic+0x764>
                    blend_area.y1 = h;
 801c83e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c842:	b21b      	sxth	r3, r3
 801c844:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801c846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c84a:	b21b      	sxth	r3, r3
 801c84c:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801c84e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c850:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801c854:	4611      	mov	r1, r2
 801c856:	4618      	mov	r0, r3
 801c858:	f004 f855 	bl	8020906 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801c85c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801c85e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801c862:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c866:	b21a      	sxth	r2, r3
 801c868:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801c86c:	f7f3 f9a4 	bl	800fbb8 <lv_draw_mask_apply>
 801c870:	4603      	mov	r3, r0
 801c872:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c876:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c87a:	4619      	mov	r1, r3
 801c87c:	68f8      	ldr	r0, [r7, #12]
 801c87e:	f7f8 fd69 	bl	8015354 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801c882:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c886:	3301      	adds	r3, #1
 801c888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c88c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801c890:	461a      	mov	r2, r3
 801c892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c896:	4293      	cmp	r3, r2
 801c898:	ddd1      	ble.n	801c83e <draw_border_generic+0x716>
                }
            }
        }
    }

    lv_draw_mask_free_param(&mask_rin_param);
 801c89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c89e:	4618      	mov	r0, r3
 801c8a0:	f7f3 fa1e 	bl	800fce0 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 801c8a4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	f7f3 f9c9 	bl	800fc40 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 801c8ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	f7f3 fa14 	bl	800fce0 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 801c8b8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801c8bc:	4618      	mov	r0, r3
 801c8be:	f7f3 f9bf 	bl	800fc40 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 801c8c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	f003 fc9f 	bl	8020208 <lv_mem_buf_release>
 801c8ca:	e000      	b.n	801c8ce <draw_border_generic+0x7a6>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801c8cc:	bf00      	nop
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
        return;
    }

#endif /*LV_DRAW_COMPLEX*/
}
 801c8ce:	3798      	adds	r7, #152	; 0x98
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	bd80      	pop	{r7, pc}

0801c8d4 <draw_border_simple>:
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b08e      	sub	sp, #56	; 0x38
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	60f8      	str	r0, [r7, #12]
 801c8dc:	60b9      	str	r1, [r7, #8]
 801c8de:	607a      	str	r2, [r7, #4]
 801c8e0:	703b      	strb	r3, [r7, #0]
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 801c8e2:	f107 0310 	add.w	r3, r7, #16
 801c8e6:	211c      	movs	r1, #28
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f003 ff8b 	bl	8020804 <lv_memset_00>
    blend_dsc.blend_area = &a;
 801c8ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c8f2:	613b      	str	r3, [r7, #16]
    blend_dsc.color = color;
 801c8f4:	783b      	ldrb	r3, [r7, #0]
 801c8f6:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = opa;
 801c8f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801c8fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801c900:	68bb      	ldr	r3, [r7, #8]
 801c902:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c90c:	429a      	cmp	r2, r3
 801c90e:	bfd4      	ite	le
 801c910:	2301      	movle	r3, #1
 801c912:	2300      	movgt	r3, #0
 801c914:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801c918:	68bb      	ldr	r3, [r7, #8]
 801c91a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c924:	429a      	cmp	r2, r3
 801c926:	bfac      	ite	ge
 801c928:	2301      	movge	r3, #1
 801c92a:	2300      	movlt	r3, #0
 801c92c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801c930:	68bb      	ldr	r3, [r7, #8]
 801c932:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c93c:	429a      	cmp	r2, r3
 801c93e:	bfd4      	ite	le
 801c940:	2301      	movle	r3, #1
 801c942:	2300      	movgt	r3, #0
 801c944:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801c948:	68bb      	ldr	r3, [r7, #8]
 801c94a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c954:	429a      	cmp	r2, r3
 801c956:	bfac      	ite	ge
 801c958:	2301      	movge	r3, #1
 801c95a:	2300      	movlt	r3, #0
 801c95c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34


    /*Top*/
    a.x1 = outer_area->x1;
 801c960:	68bb      	ldr	r3, [r7, #8]
 801c962:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c966:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801c968:	68bb      	ldr	r3, [r7, #8]
 801c96a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c96e:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = outer_area->y1;
 801c970:	68bb      	ldr	r3, [r7, #8]
 801c972:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c976:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = inner_area->y1 - 1;
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c97e:	b29b      	uxth	r3, r3
 801c980:	3b01      	subs	r3, #1
 801c982:	b29b      	uxth	r3, r3
 801c984:	b21b      	sxth	r3, r3
 801c986:	867b      	strh	r3, [r7, #50]	; 0x32
    if(top_side) {
 801c988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d005      	beq.n	801c99c <draw_border_simple+0xc8>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c990:	f107 0310 	add.w	r3, r7, #16
 801c994:	4619      	mov	r1, r3
 801c996:	68f8      	ldr	r0, [r7, #12]
 801c998:	f7f8 fcdc 	bl	8015354 <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c9a2:	b29b      	uxth	r3, r3
 801c9a4:	3301      	adds	r3, #1
 801c9a6:	b29b      	uxth	r3, r3
 801c9a8:	b21b      	sxth	r3, r3
 801c9aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = outer_area->y2;
 801c9ac:	68bb      	ldr	r3, [r7, #8]
 801c9ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c9b2:	867b      	strh	r3, [r7, #50]	; 0x32
    if(bottom_side) {
 801c9b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d005      	beq.n	801c9c8 <draw_border_simple+0xf4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c9bc:	f107 0310 	add.w	r3, r7, #16
 801c9c0:	4619      	mov	r1, r3
 801c9c2:	68f8      	ldr	r0, [r7, #12]
 801c9c4:	f7f8 fcc6 	bl	8015354 <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
 801c9c8:	68bb      	ldr	r3, [r7, #8]
 801c9ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c9ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = inner_area->x1 - 1;
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c9d6:	b29b      	uxth	r3, r3
 801c9d8:	3b01      	subs	r3, #1
 801c9da:	b29b      	uxth	r3, r3
 801c9dc:	b21b      	sxth	r3, r3
 801c9de:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 801c9e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d003      	beq.n	801c9f0 <draw_border_simple+0x11c>
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c9ee:	e002      	b.n	801c9f6 <draw_border_simple+0x122>
 801c9f0:	68bb      	ldr	r3, [r7, #8]
 801c9f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c9f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 801c9f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d003      	beq.n	801ca08 <draw_border_simple+0x134>
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ca06:	e002      	b.n	801ca0e <draw_border_simple+0x13a>
 801ca08:	68bb      	ldr	r3, [r7, #8]
 801ca0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ca0e:	867b      	strh	r3, [r7, #50]	; 0x32
    if(left_side) {
 801ca10:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d005      	beq.n	801ca24 <draw_border_simple+0x150>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ca18:	f107 0310 	add.w	r3, r7, #16
 801ca1c:	4619      	mov	r1, r3
 801ca1e:	68f8      	ldr	r0, [r7, #12]
 801ca20:	f7f8 fc98 	bl	8015354 <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ca2a:	b29b      	uxth	r3, r3
 801ca2c:	3301      	adds	r3, #1
 801ca2e:	b29b      	uxth	r3, r3
 801ca30:	b21b      	sxth	r3, r3
 801ca32:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801ca34:	68bb      	ldr	r3, [r7, #8]
 801ca36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ca3a:	863b      	strh	r3, [r7, #48]	; 0x30
    if(right_side) {
 801ca3c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d005      	beq.n	801ca50 <draw_border_simple+0x17c>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ca44:	f107 0310 	add.w	r3, r7, #16
 801ca48:	4619      	mov	r1, r3
 801ca4a:	68f8      	ldr	r0, [r7, #12]
 801ca4c:	f7f8 fc82 	bl	8015354 <lv_draw_sw_blend>
    }
}
 801ca50:	bf00      	nop
 801ca52:	3738      	adds	r7, #56	; 0x38
 801ca54:	46bd      	mov	sp, r7
 801ca56:	bd80      	pop	{r7, pc}

0801ca58 <lv_color_mix>:
{
 801ca58:	b480      	push	{r7}
 801ca5a:	b085      	sub	sp, #20
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	7138      	strb	r0, [r7, #4]
 801ca60:	7039      	strb	r1, [r7, #0]
 801ca62:	4613      	mov	r3, r2
 801ca64:	70fb      	strb	r3, [r7, #3]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 801ca66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	da01      	bge.n	801ca72 <lv_color_mix+0x1a>
 801ca6e:	793b      	ldrb	r3, [r7, #4]
 801ca70:	e000      	b.n	801ca74 <lv_color_mix+0x1c>
 801ca72:	783b      	ldrb	r3, [r7, #0]
 801ca74:	733b      	strb	r3, [r7, #12]
    return ret;
 801ca76:	7b3b      	ldrb	r3, [r7, #12]
}
 801ca78:	4618      	mov	r0, r3
 801ca7a:	3714      	adds	r7, #20
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca82:	4770      	bx	lr

0801ca84 <lv_area_get_width>:
{
 801ca84:	b480      	push	{r7}
 801ca86:	b083      	sub	sp, #12
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ca92:	b29a      	uxth	r2, r3
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ca9a:	b29b      	uxth	r3, r3
 801ca9c:	1ad3      	subs	r3, r2, r3
 801ca9e:	b29b      	uxth	r3, r3
 801caa0:	3301      	adds	r3, #1
 801caa2:	b29b      	uxth	r3, r3
 801caa4:	b21b      	sxth	r3, r3
}
 801caa6:	4618      	mov	r0, r3
 801caa8:	370c      	adds	r7, #12
 801caaa:	46bd      	mov	sp, r7
 801caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cab0:	4770      	bx	lr

0801cab2 <lv_area_get_height>:
{
 801cab2:	b480      	push	{r7}
 801cab4:	b083      	sub	sp, #12
 801cab6:	af00      	add	r7, sp, #0
 801cab8:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801cac0:	b29a      	uxth	r2, r3
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cac8:	b29b      	uxth	r3, r3
 801caca:	1ad3      	subs	r3, r2, r3
 801cacc:	b29b      	uxth	r3, r3
 801cace:	3301      	adds	r3, #1
 801cad0:	b29b      	uxth	r3, r3
 801cad2:	b21b      	sxth	r3, r3
}
 801cad4:	4618      	mov	r0, r3
 801cad6:	370c      	adds	r7, #12
 801cad8:	46bd      	mov	sp, r7
 801cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cade:	4770      	bx	lr

0801cae0 <lv_draw_sw_transform>:
 **********************/

void lv_draw_sw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf,
                          lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                          const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801cae0:	b590      	push	{r4, r7, lr}
 801cae2:	b0ab      	sub	sp, #172	; 0xac
 801cae4:	af08      	add	r7, sp, #32
 801cae6:	60f8      	str	r0, [r7, #12]
 801cae8:	60b9      	str	r1, [r7, #8]
 801caea:	607a      	str	r2, [r7, #4]
 801caec:	807b      	strh	r3, [r7, #2]
    LV_UNUSED(draw_ctx);

    point_transform_dsc_t tr_dsc;
    tr_dsc.angle = -draw_dsc->angle;
 801caee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801caf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801caf6:	425b      	negs	r3, r3
 801caf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 801cafa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801cafe:	885b      	ldrh	r3, [r3, #2]
 801cb00:	461a      	mov	r2, r3
 801cb02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801cb06:	fb93 f3f2 	sdiv	r3, r3, r2
 801cb0a:	63bb      	str	r3, [r7, #56]	; 0x38
    tr_dsc.pivot = draw_dsc->pivot;
 801cb0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801cb10:	685b      	ldr	r3, [r3, #4]
 801cb12:	64bb      	str	r3, [r7, #72]	; 0x48

    int32_t angle_low = tr_dsc.angle / 10;
 801cb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb16:	4aaf      	ldr	r2, [pc, #700]	; (801cdd4 <lv_draw_sw_transform+0x2f4>)
 801cb18:	fb82 1203 	smull	r1, r2, r2, r3
 801cb1c:	1092      	asrs	r2, r2, #2
 801cb1e:	17db      	asrs	r3, r3, #31
 801cb20:	1ad3      	subs	r3, r2, r3
 801cb22:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t angle_high = angle_low + 1;
 801cb24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cb26:	3301      	adds	r3, #1
 801cb28:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 801cb2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cb2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cb2e:	f06f 0109 	mvn.w	r1, #9
 801cb32:	fb01 f303 	mul.w	r3, r1, r3
 801cb36:	4413      	add	r3, r2
 801cb38:	673b      	str	r3, [r7, #112]	; 0x70

    int32_t s1 = lv_trigo_sin(angle_low);
 801cb3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cb3c:	b21b      	sxth	r3, r3
 801cb3e:	4618      	mov	r0, r3
 801cb40:	f003 f912 	bl	801fd68 <lv_trigo_sin>
 801cb44:	4603      	mov	r3, r0
 801cb46:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t s2 = lv_trigo_sin(angle_high);
 801cb48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb4a:	b21b      	sxth	r3, r3
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	f003 f90b 	bl	801fd68 <lv_trigo_sin>
 801cb52:	4603      	mov	r3, r0
 801cb54:	66bb      	str	r3, [r7, #104]	; 0x68

    int32_t c1 = lv_trigo_sin(angle_low + 90);
 801cb56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cb58:	b29b      	uxth	r3, r3
 801cb5a:	335a      	adds	r3, #90	; 0x5a
 801cb5c:	b29b      	uxth	r3, r3
 801cb5e:	b21b      	sxth	r3, r3
 801cb60:	4618      	mov	r0, r3
 801cb62:	f003 f901 	bl	801fd68 <lv_trigo_sin>
 801cb66:	4603      	mov	r3, r0
 801cb68:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 801cb6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cb6c:	b29b      	uxth	r3, r3
 801cb6e:	335a      	adds	r3, #90	; 0x5a
 801cb70:	b29b      	uxth	r3, r3
 801cb72:	b21b      	sxth	r3, r3
 801cb74:	4618      	mov	r0, r3
 801cb76:	f003 f8f7 	bl	801fd68 <lv_trigo_sin>
 801cb7a:	4603      	mov	r3, r0
 801cb7c:	663b      	str	r3, [r7, #96]	; 0x60

    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801cb7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cb80:	f1c3 030a 	rsb	r3, r3, #10
 801cb84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cb86:	fb03 f202 	mul.w	r2, r3, r2
 801cb8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cb8c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801cb8e:	fb01 f303 	mul.w	r3, r1, r3
 801cb92:	4413      	add	r3, r2
 801cb94:	4a8f      	ldr	r2, [pc, #572]	; (801cdd4 <lv_draw_sw_transform+0x2f4>)
 801cb96:	fb82 1203 	smull	r1, r2, r2, r3
 801cb9a:	1092      	asrs	r2, r2, #2
 801cb9c:	17db      	asrs	r3, r3, #31
 801cb9e:	1ad3      	subs	r3, r2, r3
 801cba0:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801cba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cba4:	f1c3 030a 	rsb	r3, r3, #10
 801cba8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801cbaa:	fb03 f202 	mul.w	r2, r3, r2
 801cbae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cbb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801cbb2:	fb01 f303 	mul.w	r3, r1, r3
 801cbb6:	4413      	add	r3, r2
 801cbb8:	4a86      	ldr	r2, [pc, #536]	; (801cdd4 <lv_draw_sw_transform+0x2f4>)
 801cbba:	fb82 1203 	smull	r1, r2, r2, r3
 801cbbe:	1092      	asrs	r2, r2, #2
 801cbc0:	17db      	asrs	r3, r3, #31
 801cbc2:	1ad3      	subs	r3, r2, r3
 801cbc4:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 801cbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbc8:	115b      	asrs	r3, r3, #5
 801cbca:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 801cbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cbce:	115b      	asrs	r3, r3, #5
 801cbd0:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 801cbd2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801cbd6:	021b      	lsls	r3, r3, #8
 801cbd8:	643b      	str	r3, [r7, #64]	; 0x40
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 801cbda:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801cbde:	021b      	lsls	r3, r3, #8
 801cbe0:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t dest_w = lv_area_get_width(dest_area);
 801cbe2:	68b8      	ldr	r0, [r7, #8]
 801cbe4:	f7ff ff4e 	bl	801ca84 <lv_area_get_width>
 801cbe8:	4603      	mov	r3, r0
 801cbea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_coord_t dest_h = lv_area_get_height(dest_area);
 801cbee:	68b8      	ldr	r0, [r7, #8]
 801cbf0:	f7ff ff5f 	bl	801cab2 <lv_area_get_height>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_coord_t y;
    for(y = 0; y < dest_h; y++) {
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801cc00:	e0db      	b.n	801cdba <lv_draw_sw_transform+0x2da>
        int32_t xs1_ups, ys1_ups, xs2_ups, ys2_ups;

        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 801cc02:	68bb      	ldr	r3, [r7, #8]
 801cc04:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cc08:	461c      	mov	r4, r3
 801cc0a:	68bb      	ldr	r3, [r7, #8]
 801cc0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cc10:	461a      	mov	r2, r3
 801cc12:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801cc16:	441a      	add	r2, r3
 801cc18:	f107 011c 	add.w	r1, r7, #28
 801cc1c:	f107 0020 	add.w	r0, r7, #32
 801cc20:	f107 0318 	add.w	r3, r7, #24
 801cc24:	9300      	str	r3, [sp, #0]
 801cc26:	460b      	mov	r3, r1
 801cc28:	4621      	mov	r1, r4
 801cc2a:	f000 fbff 	bl	801d42c <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 801cc2e:	68bb      	ldr	r3, [r7, #8]
 801cc30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cc34:	461c      	mov	r4, r3
 801cc36:	68bb      	ldr	r3, [r7, #8]
 801cc38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cc3c:	461a      	mov	r2, r3
 801cc3e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801cc42:	441a      	add	r2, r3
 801cc44:	f107 0114 	add.w	r1, r7, #20
 801cc48:	f107 0020 	add.w	r0, r7, #32
 801cc4c:	f107 0310 	add.w	r3, r7, #16
 801cc50:	9300      	str	r3, [sp, #0]
 801cc52:	460b      	mov	r3, r1
 801cc54:	4621      	mov	r1, r4
 801cc56:	f000 fbe9 	bl	801d42c <transform_point_upscaled>

        int32_t xs_diff = xs2_ups - xs1_ups;
 801cc5a:	697a      	ldr	r2, [r7, #20]
 801cc5c:	69fb      	ldr	r3, [r7, #28]
 801cc5e:	1ad3      	subs	r3, r2, r3
 801cc60:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_diff = ys2_ups - ys1_ups;
 801cc62:	693a      	ldr	r2, [r7, #16]
 801cc64:	69bb      	ldr	r3, [r7, #24]
 801cc66:	1ad3      	subs	r3, r2, r3
 801cc68:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t xs_step_256 = 0;
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ys_step_256 = 0;
 801cc70:	2300      	movs	r3, #0
 801cc72:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(dest_w > 1) {
 801cc74:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801cc78:	2b01      	cmp	r3, #1
 801cc7a:	dd10      	ble.n	801cc9e <lv_draw_sw_transform+0x1be>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 801cc7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cc7e:	021a      	lsls	r2, r3, #8
 801cc80:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801cc84:	3b01      	subs	r3, #1
 801cc86:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 801cc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cc90:	021a      	lsls	r2, r3, #8
 801cc92:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801cc96:	3b01      	subs	r3, #1
 801cc98:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc9c:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        int32_t xs_ups = xs1_ups + 0x80;
 801cc9e:	69fb      	ldr	r3, [r7, #28]
 801cca0:	3380      	adds	r3, #128	; 0x80
 801cca2:	653b      	str	r3, [r7, #80]	; 0x50
        int32_t ys_ups = ys1_ups + 0x80;
 801cca4:	69bb      	ldr	r3, [r7, #24]
 801cca6:	3380      	adds	r3, #128	; 0x80
 801cca8:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(draw_dsc->antialias == 0) {
 801ccaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ccae:	7c1b      	ldrb	r3, [r3, #16]
 801ccb0:	f003 0301 	and.w	r3, r3, #1
 801ccb4:	b2db      	uxtb	r3, r3
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d148      	bne.n	801cd4c <lv_draw_sw_transform+0x26c>
            switch(cf) {
 801ccba:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801ccbe:	2b06      	cmp	r3, #6
 801ccc0:	d023      	beq.n	801cd0a <lv_draw_sw_transform+0x22a>
 801ccc2:	2b06      	cmp	r3, #6
 801ccc4:	dc63      	bgt.n	801cd8e <lv_draw_sw_transform+0x2ae>
 801ccc6:	2b04      	cmp	r3, #4
 801ccc8:	d01f      	beq.n	801cd0a <lv_draw_sw_transform+0x22a>
 801ccca:	2b05      	cmp	r3, #5
 801cccc:	d15f      	bne.n	801cd8e <lv_draw_sw_transform+0x2ae>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    argb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf);
 801ccce:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ccd2:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801ccd6:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801ccda:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801ccde:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801cce2:	9206      	str	r2, [sp, #24]
 801cce4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801cce8:	9205      	str	r2, [sp, #20]
 801ccea:	9304      	str	r3, [sp, #16]
 801ccec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ccee:	9303      	str	r3, [sp, #12]
 801ccf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ccf4:	9302      	str	r3, [sp, #8]
 801ccf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ccf8:	9301      	str	r3, [sp, #4]
 801ccfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ccfc:	9300      	str	r3, [sp, #0]
 801ccfe:	4623      	mov	r3, r4
 801cd00:	4602      	mov	r2, r0
 801cd02:	6878      	ldr	r0, [r7, #4]
 801cd04:	f000 f8ee 	bl	801cee4 <argb_no_aa>
                    break;
 801cd08:	e042      	b.n	801cd90 <lv_draw_sw_transform+0x2b0>
                case LV_IMG_CF_TRUE_COLOR:
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    rgb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801cd0a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801cd0e:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801cd12:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801cd16:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801cd1a:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801cd1e:	9207      	str	r2, [sp, #28]
 801cd20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801cd24:	9206      	str	r2, [sp, #24]
 801cd26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801cd2a:	9205      	str	r2, [sp, #20]
 801cd2c:	9304      	str	r3, [sp, #16]
 801cd2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cd30:	9303      	str	r3, [sp, #12]
 801cd32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801cd36:	9302      	str	r3, [sp, #8]
 801cd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cd3a:	9301      	str	r3, [sp, #4]
 801cd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd3e:	9300      	str	r3, [sp, #0]
 801cd40:	4623      	mov	r3, r4
 801cd42:	4602      	mov	r2, r0
 801cd44:	6878      	ldr	r0, [r7, #4]
 801cd46:	f000 f847 	bl	801cdd8 <rgb_no_aa>
                    break;
 801cd4a:	e021      	b.n	801cd90 <lv_draw_sw_transform+0x2b0>
                default:
                    break;
            }
        }
        else {
            argb_and_rgb_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801cd4c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801cd50:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801cd54:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801cd58:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801cd5c:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801cd60:	9207      	str	r2, [sp, #28]
 801cd62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801cd66:	9206      	str	r2, [sp, #24]
 801cd68:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801cd6c:	9205      	str	r2, [sp, #20]
 801cd6e:	9304      	str	r3, [sp, #16]
 801cd70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cd72:	9303      	str	r3, [sp, #12]
 801cd74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801cd78:	9302      	str	r3, [sp, #8]
 801cd7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cd7c:	9301      	str	r3, [sp, #4]
 801cd7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cd80:	9300      	str	r3, [sp, #0]
 801cd82:	4623      	mov	r3, r4
 801cd84:	4602      	mov	r2, r0
 801cd86:	6878      	ldr	r0, [r7, #4]
 801cd88:	f000 f91d 	bl	801cfc6 <argb_and_rgb_aa>
 801cd8c:	e000      	b.n	801cd90 <lv_draw_sw_transform+0x2b0>
                    break;
 801cd8e:	bf00      	nop
        }

        cbuf += dest_w;
 801cd90:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801cd94:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801cd98:	4413      	add	r3, r2
 801cd9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        abuf += dest_w;
 801cd9e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801cda2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801cda6:	4413      	add	r3, r2
 801cda8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for(y = 0; y < dest_h; y++) {
 801cdac:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801cdb0:	b29b      	uxth	r3, r3
 801cdb2:	3301      	adds	r3, #1
 801cdb4:	b29b      	uxth	r3, r3
 801cdb6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801cdba:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801cdbe:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801cdc2:	429a      	cmp	r2, r3
 801cdc4:	f6ff af1d 	blt.w	801cc02 <lv_draw_sw_transform+0x122>
    }
}
 801cdc8:	bf00      	nop
 801cdca:	bf00      	nop
 801cdcc:	378c      	adds	r7, #140	; 0x8c
 801cdce:	46bd      	mov	sp, r7
 801cdd0:	bd90      	pop	{r4, r7, pc}
 801cdd2:	bf00      	nop
 801cdd4:	66666667 	.word	0x66666667

0801cdd8 <rgb_no_aa>:
 **********************/

static void rgb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                      int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                      int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801cdd8:	b580      	push	{r7, lr}
 801cdda:	b08c      	sub	sp, #48	; 0x30
 801cddc:	af00      	add	r7, sp, #0
 801cdde:	60f8      	str	r0, [r7, #12]
 801cde0:	4608      	mov	r0, r1
 801cde2:	4611      	mov	r1, r2
 801cde4:	461a      	mov	r2, r3
 801cde6:	4603      	mov	r3, r0
 801cde8:	817b      	strh	r3, [r7, #10]
 801cdea:	460b      	mov	r3, r1
 801cdec:	813b      	strh	r3, [r7, #8]
 801cdee:	4613      	mov	r3, r2
 801cdf0:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdf4:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t ys_ups_start = ys_ups;
 801cdf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdf8:	627b      	str	r3, [r7, #36]	; 0x24
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801cdfa:	f7ef fdd1 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 801cdfe:	6238      	str	r0, [r7, #32]
    lv_color_t ck = d->driver->color_chroma_key;
 801ce00:	6a3b      	ldr	r3, [r7, #32]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ce08:	743b      	strb	r3, [r7, #16]

    lv_memset_ff(abuf, x_end);
 801ce0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ce0c:	4619      	mov	r1, r3
 801ce0e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ce10:	f003 fd79 	bl	8020906 <lv_memset_ff>

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801ce14:	2300      	movs	r3, #0
 801ce16:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ce18:	e05a      	b.n	801ced0 <rgb_no_aa+0xf8>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801ce1a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ce1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ce20:	fb02 f303 	mul.w	r3, r2, r3
 801ce24:	121b      	asrs	r3, r3, #8
 801ce26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce28:	4413      	add	r3, r2
 801ce2a:	63bb      	str	r3, [r7, #56]	; 0x38
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801ce2c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ce30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ce32:	fb02 f303 	mul.w	r3, r2, r3
 801ce36:	121b      	asrs	r3, r3, #8
 801ce38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce3a:	4413      	add	r3, r2
 801ce3c:	63fb      	str	r3, [r7, #60]	; 0x3c

        int32_t xs_int = xs_ups >> 8;
 801ce3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce40:	121b      	asrs	r3, r3, #8
 801ce42:	61fb      	str	r3, [r7, #28]
        int32_t ys_int = ys_ups >> 8;
 801ce44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce46:	121b      	asrs	r3, r3, #8
 801ce48:	61bb      	str	r3, [r7, #24]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801ce4a:	69fb      	ldr	r3, [r7, #28]
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	db0c      	blt.n	801ce6a <rgb_no_aa+0x92>
 801ce50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ce54:	69fa      	ldr	r2, [r7, #28]
 801ce56:	429a      	cmp	r2, r3
 801ce58:	da07      	bge.n	801ce6a <rgb_no_aa+0x92>
 801ce5a:	69bb      	ldr	r3, [r7, #24]
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	db04      	blt.n	801ce6a <rgb_no_aa+0x92>
 801ce60:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ce64:	69ba      	ldr	r2, [r7, #24]
 801ce66:	429a      	cmp	r2, r3
 801ce68:	db06      	blt.n	801ce78 <rgb_no_aa+0xa0>
            abuf[x] = 0x00;
 801ce6a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ce6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ce70:	4413      	add	r3, r2
 801ce72:	2200      	movs	r2, #0
 801ce74:	701a      	strb	r2, [r3, #0]
 801ce76:	e013      	b.n	801cea0 <rgb_no_aa+0xc8>
        }
        else {

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            const uint8_t * src_tmp = src;
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	617b      	str	r3, [r7, #20]
            src_tmp += ys_int * src_stride + xs_int;
 801ce7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ce80:	69ba      	ldr	r2, [r7, #24]
 801ce82:	fb03 f202 	mul.w	r2, r3, r2
 801ce86:	69fb      	ldr	r3, [r7, #28]
 801ce88:	4413      	add	r3, r2
 801ce8a:	461a      	mov	r2, r3
 801ce8c:	697b      	ldr	r3, [r7, #20]
 801ce8e:	4413      	add	r3, r2
 801ce90:	617b      	str	r3, [r7, #20]
            cbuf[x].full = src_tmp[0];
 801ce92:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ce96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ce98:	4413      	add	r3, r2
 801ce9a:	697a      	ldr	r2, [r7, #20]
 801ce9c:	7812      	ldrb	r2, [r2, #0]
 801ce9e:	701a      	strb	r2, [r3, #0]
            const uint8_t * src_tmp = src;
            src_tmp += (ys_int * src_stride * sizeof(lv_color_t)) + xs_int * sizeof(lv_color_t);
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
        }
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 801cea0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801cea4:	2b06      	cmp	r3, #6
 801cea6:	d10d      	bne.n	801cec4 <rgb_no_aa+0xec>
 801cea8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ceac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ceae:	4413      	add	r3, r2
 801ceb0:	781a      	ldrb	r2, [r3, #0]
 801ceb2:	7c3b      	ldrb	r3, [r7, #16]
 801ceb4:	429a      	cmp	r2, r3
 801ceb6:	d105      	bne.n	801cec4 <rgb_no_aa+0xec>
            abuf[x] = 0x00;
 801ceb8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801cebc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801cebe:	4413      	add	r3, r2
 801cec0:	2200      	movs	r2, #0
 801cec2:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801cec4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801cec8:	b29b      	uxth	r3, r3
 801ceca:	3301      	adds	r3, #1
 801cecc:	b29b      	uxth	r3, r3
 801cece:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ced0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ced4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ced6:	429a      	cmp	r2, r3
 801ced8:	dc9f      	bgt.n	801ce1a <rgb_no_aa+0x42>
        }
    }
}
 801ceda:	bf00      	nop
 801cedc:	bf00      	nop
 801cede:	3730      	adds	r7, #48	; 0x30
 801cee0:	46bd      	mov	sp, r7
 801cee2:	bd80      	pop	{r7, pc}

0801cee4 <argb_no_aa>:

static void argb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                       int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                       int32_t x_end, lv_color_t * cbuf, uint8_t * abuf)
{
 801cee4:	b480      	push	{r7}
 801cee6:	b08b      	sub	sp, #44	; 0x2c
 801cee8:	af00      	add	r7, sp, #0
 801ceea:	60f8      	str	r0, [r7, #12]
 801ceec:	4608      	mov	r0, r1
 801ceee:	4611      	mov	r1, r2
 801cef0:	461a      	mov	r2, r3
 801cef2:	4603      	mov	r3, r0
 801cef4:	817b      	strh	r3, [r7, #10]
 801cef6:	460b      	mov	r3, r1
 801cef8:	813b      	strh	r3, [r7, #8]
 801cefa:	4613      	mov	r3, r2
 801cefc:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801cefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf00:	623b      	str	r3, [r7, #32]
    int32_t ys_ups_start = ys_ups;
 801cf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf04:	61fb      	str	r3, [r7, #28]

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801cf06:	2300      	movs	r3, #0
 801cf08:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cf0a:	e050      	b.n	801cfae <argb_no_aa+0xca>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801cf0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cf10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cf12:	fb02 f303 	mul.w	r3, r2, r3
 801cf16:	121b      	asrs	r3, r3, #8
 801cf18:	6a3a      	ldr	r2, [r7, #32]
 801cf1a:	4413      	add	r3, r2
 801cf1c:	633b      	str	r3, [r7, #48]	; 0x30
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801cf1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cf22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cf24:	fb02 f303 	mul.w	r3, r2, r3
 801cf28:	121b      	asrs	r3, r3, #8
 801cf2a:	69fa      	ldr	r2, [r7, #28]
 801cf2c:	4413      	add	r3, r2
 801cf2e:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t xs_int = xs_ups >> 8;
 801cf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf32:	121b      	asrs	r3, r3, #8
 801cf34:	61bb      	str	r3, [r7, #24]
        int32_t ys_int = ys_ups >> 8;
 801cf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf38:	121b      	asrs	r3, r3, #8
 801cf3a:	617b      	str	r3, [r7, #20]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801cf3c:	69bb      	ldr	r3, [r7, #24]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	db0c      	blt.n	801cf5c <argb_no_aa+0x78>
 801cf42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801cf46:	69ba      	ldr	r2, [r7, #24]
 801cf48:	429a      	cmp	r2, r3
 801cf4a:	da07      	bge.n	801cf5c <argb_no_aa+0x78>
 801cf4c:	697b      	ldr	r3, [r7, #20]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	db04      	blt.n	801cf5c <argb_no_aa+0x78>
 801cf52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cf56:	697a      	ldr	r2, [r7, #20]
 801cf58:	429a      	cmp	r2, r3
 801cf5a:	db06      	blt.n	801cf6a <argb_no_aa+0x86>
            abuf[x] = 0;
 801cf5c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cf60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cf62:	4413      	add	r3, r2
 801cf64:	2200      	movs	r2, #0
 801cf66:	701a      	strb	r2, [r3, #0]
 801cf68:	e01b      	b.n	801cfa2 <argb_no_aa+0xbe>
        }
        else {
            const uint8_t * src_tmp = src;
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	613b      	str	r3, [r7, #16]
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801cf6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801cf72:	697a      	ldr	r2, [r7, #20]
 801cf74:	fb03 f202 	mul.w	r2, r3, r2
 801cf78:	69bb      	ldr	r3, [r7, #24]
 801cf7a:	4413      	add	r3, r2
 801cf7c:	005b      	lsls	r3, r3, #1
 801cf7e:	461a      	mov	r2, r3
 801cf80:	693b      	ldr	r3, [r7, #16]
 801cf82:	4413      	add	r3, r2
 801cf84:	613b      	str	r3, [r7, #16]

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801cf86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cf8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cf8c:	4413      	add	r3, r2
 801cf8e:	693a      	ldr	r2, [r7, #16]
 801cf90:	7812      	ldrb	r2, [r2, #0]
 801cf92:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 16
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801cf94:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cf98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cf9a:	4413      	add	r3, r2
 801cf9c:	693a      	ldr	r2, [r7, #16]
 801cf9e:	7852      	ldrb	r2, [r2, #1]
 801cfa0:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801cfa2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cfa6:	b29b      	uxth	r3, r3
 801cfa8:	3301      	adds	r3, #1
 801cfaa:	b29b      	uxth	r3, r3
 801cfac:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cfae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801cfb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cfb4:	429a      	cmp	r2, r3
 801cfb6:	dca9      	bgt.n	801cf0c <argb_no_aa+0x28>
        }
    }
}
 801cfb8:	bf00      	nop
 801cfba:	bf00      	nop
 801cfbc:	372c      	adds	r7, #44	; 0x2c
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfc4:	4770      	bx	lr

0801cfc6 <argb_and_rgb_aa>:


static void argb_and_rgb_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                            int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                            int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801cfc6:	b590      	push	{r4, r7, lr}
 801cfc8:	b09b      	sub	sp, #108	; 0x6c
 801cfca:	af00      	add	r7, sp, #0
 801cfcc:	60f8      	str	r0, [r7, #12]
 801cfce:	4608      	mov	r0, r1
 801cfd0:	4611      	mov	r1, r2
 801cfd2:	461a      	mov	r2, r3
 801cfd4:	4603      	mov	r3, r0
 801cfd6:	817b      	strh	r3, [r7, #10]
 801cfd8:	460b      	mov	r3, r1
 801cfda:	813b      	strh	r3, [r7, #8]
 801cfdc:	4613      	mov	r3, r2
 801cfde:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801cfe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cfe2:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t ys_ups_start = ys_ups;
 801cfe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cfe6:	643b      	str	r3, [r7, #64]	; 0x40
    bool has_alpha;
    int32_t px_size;
    lv_color_t ck = {0};
 801cfe8:	2300      	movs	r3, #0
 801cfea:	f887 3020 	strb.w	r3, [r7, #32]
    switch(cf) {
 801cfee:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801cff2:	2b06      	cmp	r3, #6
 801cff4:	d013      	beq.n	801d01e <argb_and_rgb_aa+0x58>
 801cff6:	2b06      	cmp	r3, #6
 801cff8:	f300 8214 	bgt.w	801d424 <argb_and_rgb_aa+0x45e>
 801cffc:	2b04      	cmp	r3, #4
 801cffe:	d002      	beq.n	801d006 <argb_and_rgb_aa+0x40>
 801d000:	2b05      	cmp	r3, #5
 801d002:	d006      	beq.n	801d012 <argb_and_rgb_aa+0x4c>
            has_alpha = true;
            px_size = sizeof(lv_color_t);
            break;
#endif
        default:
            return;
 801d004:	e20e      	b.n	801d424 <argb_and_rgb_aa+0x45e>
            has_alpha = false;
 801d006:	2300      	movs	r3, #0
 801d008:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = sizeof(lv_color_t);
 801d00c:	2301      	movs	r3, #1
 801d00e:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801d010:	e014      	b.n	801d03c <argb_and_rgb_aa+0x76>
            has_alpha = true;
 801d012:	2301      	movs	r3, #1
 801d014:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 801d018:	2302      	movs	r3, #2
 801d01a:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801d01c:	e00e      	b.n	801d03c <argb_and_rgb_aa+0x76>
                has_alpha = true;
 801d01e:	2301      	movs	r3, #1
 801d020:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                px_size = sizeof(lv_color_t);
 801d024:	2301      	movs	r3, #1
 801d026:	663b      	str	r3, [r7, #96]	; 0x60
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801d028:	f7ef fcba 	bl	800c9a0 <_lv_refr_get_disp_refreshing>
 801d02c:	63f8      	str	r0, [r7, #60]	; 0x3c
                ck = d->driver->color_chroma_key;
 801d02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801d036:	f887 3020 	strb.w	r3, [r7, #32]
                break;
 801d03a:	bf00      	nop
    }

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801d03c:	2300      	movs	r3, #0
 801d03e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d042:	e1e7      	b.n	801d414 <argb_and_rgb_aa+0x44e>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801d044:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d048:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801d04c:	fb02 f303 	mul.w	r3, r2, r3
 801d050:	121b      	asrs	r3, r3, #8
 801d052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d054:	4413      	add	r3, r2
 801d056:	67bb      	str	r3, [r7, #120]	; 0x78
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801d058:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d05c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d060:	fb02 f303 	mul.w	r3, r2, r3
 801d064:	121b      	asrs	r3, r3, #8
 801d066:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d068:	4413      	add	r3, r2
 801d06a:	67fb      	str	r3, [r7, #124]	; 0x7c

        int32_t xs_int = xs_ups >> 8;
 801d06c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d06e:	121b      	asrs	r3, r3, #8
 801d070:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t ys_int = ys_ups >> 8;
 801d072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d074:	121b      	asrs	r3, r3, #8
 801d076:	637b      	str	r3, [r7, #52]	; 0x34

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	db0c      	blt.n	801d098 <argb_and_rgb_aa+0xd2>
 801d07e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d084:	429a      	cmp	r2, r3
 801d086:	da07      	bge.n	801d098 <argb_and_rgb_aa+0xd2>
 801d088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	db04      	blt.n	801d098 <argb_and_rgb_aa+0xd2>
 801d08e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d094:	429a      	cmp	r2, r3
 801d096:	db07      	blt.n	801d0a8 <argb_and_rgb_aa+0xe2>
            abuf[x] = 0x00;
 801d098:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d09c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d0a0:	4413      	add	r3, r2
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	701a      	strb	r2, [r3, #0]
            continue;
 801d0a6:	e1ae      	b.n	801d406 <argb_and_rgb_aa+0x440>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 801d0a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d0aa:	b2db      	uxtb	r3, r3
 801d0ac:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_fract = ys_ups & 0xFF;
 801d0ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d0b0:	b2db      	uxtb	r3, r3
 801d0b2:	657b      	str	r3, [r7, #84]	; 0x54

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 801d0b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d0b6:	2b7f      	cmp	r3, #127	; 0x7f
 801d0b8:	dc08      	bgt.n	801d0cc <argb_and_rgb_aa+0x106>
            x_next = -1;
 801d0ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d0be:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (0x7F - xs_fract) * 2;
 801d0c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d0c2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801d0c6:	005b      	lsls	r3, r3, #1
 801d0c8:	65bb      	str	r3, [r7, #88]	; 0x58
 801d0ca:	e005      	b.n	801d0d8 <argb_and_rgb_aa+0x112>
        }
        else {
            x_next = 1;
 801d0cc:	2301      	movs	r3, #1
 801d0ce:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (xs_fract - 0x80) * 2;
 801d0d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d0d2:	3b80      	subs	r3, #128	; 0x80
 801d0d4:	005b      	lsls	r3, r3, #1
 801d0d6:	65bb      	str	r3, [r7, #88]	; 0x58
        }
        if(ys_fract < 0x80) {
 801d0d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d0da:	2b7f      	cmp	r3, #127	; 0x7f
 801d0dc:	dc08      	bgt.n	801d0f0 <argb_and_rgb_aa+0x12a>
            y_next = -1;
 801d0de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (0x7F - ys_fract) * 2;
 801d0e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d0e6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801d0ea:	005b      	lsls	r3, r3, #1
 801d0ec:	657b      	str	r3, [r7, #84]	; 0x54
 801d0ee:	e005      	b.n	801d0fc <argb_and_rgb_aa+0x136>
        }
        else {
            y_next = 1;
 801d0f0:	2301      	movs	r3, #1
 801d0f2:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (ys_fract - 0x80) * 2;
 801d0f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d0f6:	3b80      	subs	r3, #128	; 0x80
 801d0f8:	005b      	lsls	r3, r3, #1
 801d0fa:	657b      	str	r3, [r7, #84]	; 0x54
        }

        const uint8_t * src_tmp = src;
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	633b      	str	r3, [r7, #48]	; 0x30
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 801d100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d106:	fb02 f303 	mul.w	r3, r2, r3
 801d10a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d10c:	fb03 f202 	mul.w	r2, r3, r2
 801d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d112:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d114:	fb01 f303 	mul.w	r3, r1, r3
 801d118:	4413      	add	r3, r2
 801d11a:	461a      	mov	r2, r3
 801d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d11e:	4413      	add	r3, r2
 801d120:	633b      	str	r3, [r7, #48]	; 0x30


        if(xs_int + x_next >= 0 &&
 801d122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d126:	4413      	add	r3, r2
 801d128:	2b00      	cmp	r3, #0
 801d12a:	f2c0 80fe 	blt.w	801d32a <argb_and_rgb_aa+0x364>
           xs_int + x_next <= src_w - 1 &&
 801d12e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801d132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d136:	440b      	add	r3, r1
        if(xs_int + x_next >= 0 &&
 801d138:	429a      	cmp	r2, r3
 801d13a:	f340 80f6 	ble.w	801d32a <argb_and_rgb_aa+0x364>
           ys_int + y_next >= 0 &&
 801d13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d142:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 801d144:	2b00      	cmp	r3, #0
 801d146:	f2c0 80f0 	blt.w	801d32a <argb_and_rgb_aa+0x364>
           ys_int + y_next <= src_h - 1) {
 801d14a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801d14e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d152:	440b      	add	r3, r1
           ys_int + y_next >= 0 &&
 801d154:	429a      	cmp	r2, r3
 801d156:	f340 80e8 	ble.w	801d32a <argb_and_rgb_aa+0x364>

            const uint8_t * px_base = src_tmp;
 801d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d15c:	62fb      	str	r3, [r7, #44]	; 0x2c
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 801d15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d162:	fb02 f303 	mul.w	r3, r2, r3
 801d166:	461a      	mov	r2, r3
 801d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d16a:	4413      	add	r3, r2
 801d16c:	62bb      	str	r3, [r7, #40]	; 0x28
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 801d16e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d174:	fb02 f303 	mul.w	r3, r2, r3
 801d178:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d17a:	fb02 f303 	mul.w	r3, r2, r3
 801d17e:	461a      	mov	r2, r3
 801d180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d182:	4413      	add	r3, r2
 801d184:	627b      	str	r3, [r7, #36]	; 0x24
            lv_color_t c_base;
            lv_color_t c_ver;
            lv_color_t c_hor;

            if(has_alpha) {
 801d186:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	f000 808e 	beq.w	801d2ac <argb_and_rgb_aa+0x2e6>
                lv_opa_t a_base;
                lv_opa_t a_ver;
                lv_opa_t a_hor;
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801d190:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801d194:	2b05      	cmp	r3, #5
 801d196:	d10c      	bne.n	801d1b2 <argb_and_rgb_aa+0x1ec>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d19a:	785b      	ldrb	r3, [r3, #1]
 801d19c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1a2:	785b      	ldrb	r3, [r3, #1]
 801d1a4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1aa:	785b      	ldrb	r3, [r3, #1]
 801d1ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801d1b0:	e030      	b.n	801d214 <argb_and_rgb_aa+0x24e>
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
                }
#endif
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801d1b2:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801d1b6:	2b06      	cmp	r3, #6
 801d1b8:	d123      	bne.n	801d202 <argb_and_rgb_aa+0x23c>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801d1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1bc:	781a      	ldrb	r2, [r3, #0]
 801d1be:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d1c2:	429a      	cmp	r2, r3
 801d1c4:	d00b      	beq.n	801d1de <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1c8:	781a      	ldrb	r2, [r3, #0]
 801d1ca:	f897 3020 	ldrb.w	r3, [r7, #32]
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801d1ce:	429a      	cmp	r2, r3
 801d1d0:	d005      	beq.n	801d1de <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_hor)->full == ck.full) {
 801d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1d4:	781a      	ldrb	r2, [r3, #0]
 801d1d6:	f897 3020 	ldrb.w	r3, [r7, #32]
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801d1da:	429a      	cmp	r2, r3
 801d1dc:	d107      	bne.n	801d1ee <argb_and_rgb_aa+0x228>
                        abuf[x] = 0x00;
 801d1de:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d1e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d1e6:	4413      	add	r3, r2
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	701a      	strb	r2, [r3, #0]
                        continue;
 801d1ec:	e10b      	b.n	801d406 <argb_and_rgb_aa+0x440>
                    }
                    else {
                        a_base = 0xff;
 801d1ee:	23ff      	movs	r3, #255	; 0xff
 801d1f0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                        a_ver = 0xff;
 801d1f4:	23ff      	movs	r3, #255	; 0xff
 801d1f6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                        a_hor = 0xff;
 801d1fa:	23ff      	movs	r3, #255	; 0xff
 801d1fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801d200:	e008      	b.n	801d214 <argb_and_rgb_aa+0x24e>
                    }
                }
                else {
                    a_base = 0xff;
 801d202:	23ff      	movs	r3, #255	; 0xff
 801d204:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = 0xff;
 801d208:	23ff      	movs	r3, #255	; 0xff
 801d20a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = 0xff;
 801d20e:	23ff      	movs	r3, #255	; 0xff
 801d210:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                }

                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 801d214:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801d218:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801d21c:	429a      	cmp	r2, r3
 801d21e:	d00f      	beq.n	801d240 <argb_and_rgb_aa+0x27a>
 801d220:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801d224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d226:	fb03 f202 	mul.w	r2, r3, r2
 801d22a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801d22e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d230:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801d234:	fb01 f303 	mul.w	r3, r1, r3
 801d238:	4413      	add	r3, r2
 801d23a:	121b      	asrs	r3, r3, #8
 801d23c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 801d240:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 801d244:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801d248:	429a      	cmp	r2, r3
 801d24a:	d00f      	beq.n	801d26c <argb_and_rgb_aa+0x2a6>
 801d24c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801d250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d252:	fb03 f202 	mul.w	r2, r3, r2
 801d256:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801d25a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d25c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801d260:	fb01 f303 	mul.w	r3, r1, r3
 801d264:	4413      	add	r3, r2
 801d266:	121b      	asrs	r3, r3, #8
 801d268:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                abuf[x] = (a_ver + a_hor) >> 1;
 801d26c:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801d270:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801d274:	4413      	add	r3, r2
 801d276:	1059      	asrs	r1, r3, #1
 801d278:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d27c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d280:	4413      	add	r3, r2
 801d282:	b2ca      	uxtb	r2, r1
 801d284:	701a      	strb	r2, [r3, #0]

                if(abuf[x] == 0x00) continue;
 801d286:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d28a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d28e:	4413      	add	r3, r2
 801d290:	781b      	ldrb	r3, [r3, #0]
 801d292:	2b00      	cmp	r3, #0
 801d294:	f000 80b6 	beq.w	801d404 <argb_and_rgb_aa+0x43e>

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
                c_base.full = px_base[0];
 801d298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d29a:	781b      	ldrb	r3, [r3, #0]
 801d29c:	773b      	strb	r3, [r7, #28]
                c_ver.full = px_ver[0];
 801d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2a0:	781b      	ldrb	r3, [r3, #0]
 801d2a2:	763b      	strb	r3, [r7, #24]
                c_hor.full = px_hor[0];
 801d2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2a6:	781b      	ldrb	r3, [r3, #0]
 801d2a8:	753b      	strb	r3, [r7, #20]
 801d2aa:	e00f      	b.n	801d2cc <argb_and_rgb_aa+0x306>
                c_hor.full = *((uint32_t *)px_hor);
#endif
            }
            /*No alpha channel -> RGB*/
            else {
                c_base = *((const lv_color_t *) px_base);
 801d2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2ae:	781b      	ldrb	r3, [r3, #0]
 801d2b0:	773b      	strb	r3, [r7, #28]
                c_hor = *((const lv_color_t *) px_hor);
 801d2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2b4:	781b      	ldrb	r3, [r3, #0]
 801d2b6:	753b      	strb	r3, [r7, #20]
                c_ver = *((const lv_color_t *) px_ver);
 801d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2ba:	781b      	ldrb	r3, [r3, #0]
 801d2bc:	763b      	strb	r3, [r7, #24]
                abuf[x] = 0xff;
 801d2be:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d2c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d2c6:	4413      	add	r3, r2
 801d2c8:	22ff      	movs	r2, #255	; 0xff
 801d2ca:	701a      	strb	r2, [r3, #0]
            }

            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 801d2cc:	7f3a      	ldrb	r2, [r7, #28]
 801d2ce:	7e3b      	ldrb	r3, [r7, #24]
 801d2d0:	429a      	cmp	r2, r3
 801d2d2:	d10b      	bne.n	801d2ec <argb_and_rgb_aa+0x326>
 801d2d4:	7f3a      	ldrb	r2, [r7, #28]
 801d2d6:	7d3b      	ldrb	r3, [r7, #20]
 801d2d8:	429a      	cmp	r2, r3
 801d2da:	d107      	bne.n	801d2ec <argb_and_rgb_aa+0x326>
                cbuf[x] = c_base;
 801d2dc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d2e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d2e4:	4413      	add	r3, r2
 801d2e6:	7f3a      	ldrb	r2, [r7, #28]
 801d2e8:	701a      	strb	r2, [r3, #0]
           ys_int + y_next <= src_h - 1) {
 801d2ea:	e08c      	b.n	801d406 <argb_and_rgb_aa+0x440>
            }
            else {
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 801d2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d2ee:	b2db      	uxtb	r3, r3
 801d2f0:	461a      	mov	r2, r3
 801d2f2:	7f39      	ldrb	r1, [r7, #28]
 801d2f4:	7e38      	ldrb	r0, [r7, #24]
 801d2f6:	f7ff fbaf 	bl	801ca58 <lv_color_mix>
 801d2fa:	4603      	mov	r3, r0
 801d2fc:	763b      	strb	r3, [r7, #24]
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 801d2fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d300:	b2db      	uxtb	r3, r3
 801d302:	461a      	mov	r2, r3
 801d304:	7f39      	ldrb	r1, [r7, #28]
 801d306:	7d38      	ldrb	r0, [r7, #20]
 801d308:	f7ff fba6 	bl	801ca58 <lv_color_mix>
 801d30c:	4603      	mov	r3, r0
 801d30e:	753b      	strb	r3, [r7, #20]
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 801d310:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d314:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d318:	18d4      	adds	r4, r2, r3
 801d31a:	227f      	movs	r2, #127	; 0x7f
 801d31c:	7e39      	ldrb	r1, [r7, #24]
 801d31e:	7d38      	ldrb	r0, [r7, #20]
 801d320:	f7ff fb9a 	bl	801ca58 <lv_color_mix>
 801d324:	4603      	mov	r3, r0
 801d326:	7023      	strb	r3, [r4, #0]
           ys_int + y_next <= src_h - 1) {
 801d328:	e06d      	b.n	801d406 <argb_and_rgb_aa+0x440>
            }
        }
        /*Partially out of the image*/
        else {
#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801d32a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d32e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d332:	4413      	add	r3, r2
 801d334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d336:	7812      	ldrb	r2, [r2, #0]
 801d338:	701a      	strb	r2, [r3, #0]
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            lv_opa_t a;
            switch(cf) {
 801d33a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801d33e:	2b05      	cmp	r3, #5
 801d340:	d002      	beq.n	801d348 <argb_and_rgb_aa+0x382>
 801d342:	2b06      	cmp	r3, #6
 801d344:	d005      	beq.n	801d352 <argb_and_rgb_aa+0x38c>
 801d346:	e014      	b.n	801d372 <argb_and_rgb_aa+0x3ac>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801d348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d34a:	785b      	ldrb	r3, [r3, #1]
 801d34c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801d350:	e012      	b.n	801d378 <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 801d352:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d356:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d35a:	4413      	add	r3, r2
 801d35c:	781a      	ldrb	r2, [r3, #0]
 801d35e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d362:	429a      	cmp	r2, r3
 801d364:	d101      	bne.n	801d36a <argb_and_rgb_aa+0x3a4>
 801d366:	2300      	movs	r3, #0
 801d368:	e000      	b.n	801d36c <argb_and_rgb_aa+0x3a6>
 801d36a:	23ff      	movs	r3, #255	; 0xff
 801d36c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801d370:	e002      	b.n	801d378 <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_RGB565A8:
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
                    break;
#endif
                default:
                    a = 0xff;
 801d372:	23ff      	movs	r3, #255	; 0xff
 801d374:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d102      	bne.n	801d384 <argb_and_rgb_aa+0x3be>
 801d37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d380:	2b00      	cmp	r3, #0
 801d382:	db08      	blt.n	801d396 <argb_and_rgb_aa+0x3d0>
 801d384:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d388:	3b01      	subs	r3, #1
 801d38a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d38c:	429a      	cmp	r2, r3
 801d38e:	d112      	bne.n	801d3b6 <argb_and_rgb_aa+0x3f0>
 801d390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d392:	2b00      	cmp	r3, #0
 801d394:	dd0f      	ble.n	801d3b6 <argb_and_rgb_aa+0x3f0>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 801d396:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801d39a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d39c:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801d3a0:	fb02 f303 	mul.w	r3, r2, r3
 801d3a4:	1219      	asrs	r1, r3, #8
 801d3a6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d3aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d3ae:	4413      	add	r3, r2
 801d3b0:	b2ca      	uxtb	r2, r1
 801d3b2:	701a      	strb	r2, [r3, #0]
 801d3b4:	e027      	b.n	801d406 <argb_and_rgb_aa+0x440>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 801d3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d102      	bne.n	801d3c2 <argb_and_rgb_aa+0x3fc>
 801d3bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	db08      	blt.n	801d3d4 <argb_and_rgb_aa+0x40e>
 801d3c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d3c6:	3b01      	subs	r3, #1
 801d3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d3ca:	429a      	cmp	r2, r3
 801d3cc:	d112      	bne.n	801d3f4 <argb_and_rgb_aa+0x42e>
 801d3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	dd0f      	ble.n	801d3f4 <argb_and_rgb_aa+0x42e>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 801d3d4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801d3d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d3da:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801d3de:	fb02 f303 	mul.w	r3, r2, r3
 801d3e2:	1219      	asrs	r1, r3, #8
 801d3e4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d3e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d3ec:	4413      	add	r3, r2
 801d3ee:	b2ca      	uxtb	r2, r1
 801d3f0:	701a      	strb	r2, [r3, #0]
 801d3f2:	e008      	b.n	801d406 <argb_and_rgb_aa+0x440>
            }
            else {
                abuf[x] = 0x00;
 801d3f4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d3f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d3fc:	4413      	add	r3, r2
 801d3fe:	2200      	movs	r2, #0
 801d400:	701a      	strb	r2, [r3, #0]
 801d402:	e000      	b.n	801d406 <argb_and_rgb_aa+0x440>
                if(abuf[x] == 0x00) continue;
 801d404:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 801d406:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d40a:	b29b      	uxth	r3, r3
 801d40c:	3301      	adds	r3, #1
 801d40e:	b29b      	uxth	r3, r3
 801d410:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d414:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d418:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d41c:	429a      	cmp	r2, r3
 801d41e:	f73f ae11 	bgt.w	801d044 <argb_and_rgb_aa+0x7e>
 801d422:	e000      	b.n	801d426 <argb_and_rgb_aa+0x460>
            return;
 801d424:	bf00      	nop
            }
        }
    }
}
 801d426:	376c      	adds	r7, #108	; 0x6c
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd90      	pop	{r4, r7, pc}

0801d42c <transform_point_upscaled>:

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 801d42c:	b480      	push	{r7}
 801d42e:	b085      	sub	sp, #20
 801d430:	af00      	add	r7, sp, #0
 801d432:	60f8      	str	r0, [r7, #12]
 801d434:	60b9      	str	r1, [r7, #8]
 801d436:	607a      	str	r2, [r7, #4]
 801d438:	603b      	str	r3, [r7, #0]
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	69db      	ldr	r3, [r3, #28]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d10d      	bne.n	801d45e <transform_point_upscaled+0x32>
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	699b      	ldr	r3, [r3, #24]
 801d446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d44a:	d108      	bne.n	801d45e <transform_point_upscaled+0x32>
        *xout = xin * 256;
 801d44c:	68bb      	ldr	r3, [r7, #8]
 801d44e:	021a      	lsls	r2, r3, #8
 801d450:	683b      	ldr	r3, [r7, #0]
 801d452:	601a      	str	r2, [r3, #0]
        *yout = yin * 256;
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	021a      	lsls	r2, r3, #8
 801d458:	69bb      	ldr	r3, [r7, #24]
 801d45a:	601a      	str	r2, [r3, #0]
        return;
 801d45c:	e078      	b.n	801d550 <transform_point_upscaled+0x124>
    }

    xin -= t->pivot.x;
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801d464:	461a      	mov	r2, r3
 801d466:	68bb      	ldr	r3, [r7, #8]
 801d468:	1a9b      	subs	r3, r3, r2
 801d46a:	60bb      	str	r3, [r7, #8]
    yin -= t->pivot.y;
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801d472:	461a      	mov	r2, r3
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	1a9b      	subs	r3, r3, r2
 801d478:	607b      	str	r3, [r7, #4]

    if(t->angle == 0) {
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	69db      	ldr	r3, [r3, #28]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d114      	bne.n	801d4ac <transform_point_upscaled+0x80>
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	699b      	ldr	r3, [r3, #24]
 801d486:	68ba      	ldr	r2, [r7, #8]
 801d488:	fb03 f202 	mul.w	r2, r3, r2
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	6a1b      	ldr	r3, [r3, #32]
 801d490:	441a      	add	r2, r3
 801d492:	683b      	ldr	r3, [r7, #0]
 801d494:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	699b      	ldr	r3, [r3, #24]
 801d49a:	687a      	ldr	r2, [r7, #4]
 801d49c:	fb03 f202 	mul.w	r2, r3, r2
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4a4:	441a      	add	r2, r3
 801d4a6:	69bb      	ldr	r3, [r7, #24]
 801d4a8:	601a      	str	r2, [r3, #0]
 801d4aa:	e051      	b.n	801d550 <transform_point_upscaled+0x124>
    }
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	699b      	ldr	r3, [r3, #24]
 801d4b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d4b4:	d122      	bne.n	801d4fc <transform_point_upscaled+0xd0>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	695b      	ldr	r3, [r3, #20]
 801d4ba:	68ba      	ldr	r2, [r7, #8]
 801d4bc:	fb03 f202 	mul.w	r2, r3, r2
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	691b      	ldr	r3, [r3, #16]
 801d4c4:	6879      	ldr	r1, [r7, #4]
 801d4c6:	fb01 f303 	mul.w	r3, r1, r3
 801d4ca:	1ad3      	subs	r3, r2, r3
 801d4cc:	109a      	asrs	r2, r3, #2
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	6a1b      	ldr	r3, [r3, #32]
 801d4d2:	441a      	add	r2, r3
 801d4d4:	683b      	ldr	r3, [r7, #0]
 801d4d6:	601a      	str	r2, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	691b      	ldr	r3, [r3, #16]
 801d4dc:	68ba      	ldr	r2, [r7, #8]
 801d4de:	fb03 f202 	mul.w	r2, r3, r2
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	695b      	ldr	r3, [r3, #20]
 801d4e6:	6879      	ldr	r1, [r7, #4]
 801d4e8:	fb01 f303 	mul.w	r3, r1, r3
 801d4ec:	4413      	add	r3, r2
 801d4ee:	109a      	asrs	r2, r3, #2
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4f4:	441a      	add	r2, r3
 801d4f6:	69bb      	ldr	r3, [r7, #24]
 801d4f8:	601a      	str	r2, [r3, #0]
 801d4fa:	e029      	b.n	801d550 <transform_point_upscaled+0x124>
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	695b      	ldr	r3, [r3, #20]
 801d500:	68ba      	ldr	r2, [r7, #8]
 801d502:	fb03 f202 	mul.w	r2, r3, r2
 801d506:	68fb      	ldr	r3, [r7, #12]
 801d508:	691b      	ldr	r3, [r3, #16]
 801d50a:	6879      	ldr	r1, [r7, #4]
 801d50c:	fb01 f303 	mul.w	r3, r1, r3
 801d510:	1ad3      	subs	r3, r2, r3
 801d512:	68fa      	ldr	r2, [r7, #12]
 801d514:	6992      	ldr	r2, [r2, #24]
 801d516:	fb02 f303 	mul.w	r3, r2, r3
 801d51a:	129a      	asrs	r2, r3, #10
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	6a1b      	ldr	r3, [r3, #32]
 801d520:	441a      	add	r2, r3
 801d522:	683b      	ldr	r3, [r7, #0]
 801d524:	601a      	str	r2, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	691b      	ldr	r3, [r3, #16]
 801d52a:	68ba      	ldr	r2, [r7, #8]
 801d52c:	fb03 f202 	mul.w	r2, r3, r2
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	695b      	ldr	r3, [r3, #20]
 801d534:	6879      	ldr	r1, [r7, #4]
 801d536:	fb01 f303 	mul.w	r3, r1, r3
 801d53a:	4413      	add	r3, r2
 801d53c:	68fa      	ldr	r2, [r7, #12]
 801d53e:	6992      	ldr	r2, [r2, #24]
 801d540:	fb02 f303 	mul.w	r3, r2, r3
 801d544:	129a      	asrs	r2, r3, #10
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d54a:	441a      	add	r2, r3
 801d54c:	69bb      	ldr	r3, [r7, #24]
 801d54e:	601a      	str	r2, [r3, #0]
    }
}
 801d550:	3714      	adds	r7, #20
 801d552:	46bd      	mov	sp, r7
 801d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d558:	4770      	bx	lr

0801d55a <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 801d55a:	b480      	push	{r7}
 801d55c:	af00      	add	r7, sp, #0
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 801d55e:	bf00      	nop
 801d560:	46bd      	mov	sp, r7
 801d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d566:	4770      	bx	lr

0801d568 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 801d568:	b580      	push	{r7, lr}
 801d56a:	b082      	sub	sp, #8
 801d56c:	af00      	add	r7, sp, #0
 801d56e:	6078      	str	r0, [r7, #4]
 801d570:	6039      	str	r1, [r7, #0]
    LV_ASSERT_NULL(font_p);
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	2b00      	cmp	r3, #0
 801d576:	d100      	bne.n	801d57a <lv_font_get_glyph_bitmap+0x12>
 801d578:	e7fe      	b.n	801d578 <lv_font_get_glyph_bitmap+0x10>
    return font_p->get_glyph_bitmap(font_p, letter);
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	685b      	ldr	r3, [r3, #4]
 801d57e:	6839      	ldr	r1, [r7, #0]
 801d580:	6878      	ldr	r0, [r7, #4]
 801d582:	4798      	blx	r3
 801d584:	4603      	mov	r3, r0
}
 801d586:	4618      	mov	r0, r3
 801d588:	3708      	adds	r7, #8
 801d58a:	46bd      	mov	sp, r7
 801d58c:	bd80      	pop	{r7, pc}

0801d58e <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 801d58e:	b590      	push	{r4, r7, lr}
 801d590:	b089      	sub	sp, #36	; 0x24
 801d592:	af00      	add	r7, sp, #0
 801d594:	60f8      	str	r0, [r7, #12]
 801d596:	60b9      	str	r1, [r7, #8]
 801d598:	607a      	str	r2, [r7, #4]
 801d59a:	603b      	str	r3, [r7, #0]

    LV_ASSERT_NULL(font_p);
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d100      	bne.n	801d5a4 <lv_font_get_glyph_dsc+0x16>
 801d5a2:	e7fe      	b.n	801d5a2 <lv_font_get_glyph_dsc+0x14>
    LV_ASSERT_NULL(dsc_out);
 801d5a4:	68bb      	ldr	r3, [r7, #8]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d100      	bne.n	801d5ac <lv_font_get_glyph_dsc+0x1e>
 801d5aa:	e7fe      	b.n	801d5aa <lv_font_get_glyph_dsc+0x1c>

#if LV_USE_FONT_PLACEHOLDER
    const lv_font_t * placeholder_font = NULL;
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	61fb      	str	r3, [r7, #28]
#endif

    const lv_font_t * f = font_p;
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	61bb      	str	r3, [r7, #24]

    dsc_out->resolved_font = NULL;
 801d5b4:	68bb      	ldr	r3, [r7, #8]
 801d5b6:	2200      	movs	r2, #0
 801d5b8:	601a      	str	r2, [r3, #0]

    while(f) {
 801d5ba:	e01f      	b.n	801d5fc <lv_font_get_glyph_dsc+0x6e>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 801d5bc:	69bb      	ldr	r3, [r7, #24]
 801d5be:	681c      	ldr	r4, [r3, #0]
 801d5c0:	683b      	ldr	r3, [r7, #0]
 801d5c2:	687a      	ldr	r2, [r7, #4]
 801d5c4:	68b9      	ldr	r1, [r7, #8]
 801d5c6:	69b8      	ldr	r0, [r7, #24]
 801d5c8:	47a0      	blx	r4
 801d5ca:	4603      	mov	r3, r0
 801d5cc:	75fb      	strb	r3, [r7, #23]
        if(found) {
 801d5ce:	7dfb      	ldrb	r3, [r7, #23]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d010      	beq.n	801d5f6 <lv_font_get_glyph_dsc+0x68>
            if(!dsc_out->is_placeholder) {
 801d5d4:	68bb      	ldr	r3, [r7, #8]
 801d5d6:	7b9b      	ldrb	r3, [r3, #14]
 801d5d8:	f003 0310 	and.w	r3, r3, #16
 801d5dc:	b2db      	uxtb	r3, r3
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d104      	bne.n	801d5ec <lv_font_get_glyph_dsc+0x5e>
                dsc_out->resolved_font = f;
 801d5e2:	68bb      	ldr	r3, [r7, #8]
 801d5e4:	69ba      	ldr	r2, [r7, #24]
 801d5e6:	601a      	str	r2, [r3, #0]
                return true;
 801d5e8:	2301      	movs	r3, #1
 801d5ea:	e059      	b.n	801d6a0 <lv_font_get_glyph_dsc+0x112>
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 801d5ec:	69fb      	ldr	r3, [r7, #28]
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d101      	bne.n	801d5f6 <lv_font_get_glyph_dsc+0x68>
                placeholder_font = f;
 801d5f2:	69bb      	ldr	r3, [r7, #24]
 801d5f4:	61fb      	str	r3, [r7, #28]
            }
#endif
        }
        f = f->fallback;
 801d5f6:	69bb      	ldr	r3, [r7, #24]
 801d5f8:	695b      	ldr	r3, [r3, #20]
 801d5fa:	61bb      	str	r3, [r7, #24]
    while(f) {
 801d5fc:	69bb      	ldr	r3, [r7, #24]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d1dc      	bne.n	801d5bc <lv_font_get_glyph_dsc+0x2e>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 801d602:	69fb      	ldr	r3, [r7, #28]
 801d604:	2b00      	cmp	r3, #0
 801d606:	d00b      	beq.n	801d620 <lv_font_get_glyph_dsc+0x92>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 801d608:	69fb      	ldr	r3, [r7, #28]
 801d60a:	681c      	ldr	r4, [r3, #0]
 801d60c:	683b      	ldr	r3, [r7, #0]
 801d60e:	687a      	ldr	r2, [r7, #4]
 801d610:	68b9      	ldr	r1, [r7, #8]
 801d612:	69f8      	ldr	r0, [r7, #28]
 801d614:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 801d616:	68bb      	ldr	r3, [r7, #8]
 801d618:	69fa      	ldr	r2, [r7, #28]
 801d61a:	601a      	str	r2, [r3, #0]
        return true;
 801d61c:	2301      	movs	r3, #1
 801d61e:	e03f      	b.n	801d6a0 <lv_font_get_glyph_dsc+0x112>
    }
#endif

    if(letter < 0x20 ||
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	2b1f      	cmp	r3, #31
 801d624:	d909      	bls.n	801d63a <lv_font_get_glyph_dsc+0xac>
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801d62c:	4293      	cmp	r3, r2
 801d62e:	d004      	beq.n	801d63a <lv_font_get_glyph_dsc+0xac>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	f242 020c 	movw	r2, #8204	; 0x200c
 801d636:	4293      	cmp	r3, r2
 801d638:	d106      	bne.n	801d648 <lv_font_get_glyph_dsc+0xba>
       letter == 0x200c) { /*ZERO WIDTH NON-JOINER*/
        dsc_out->box_w = 0;
 801d63a:	68bb      	ldr	r3, [r7, #8]
 801d63c:	2200      	movs	r2, #0
 801d63e:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = 0;
 801d640:	68bb      	ldr	r3, [r7, #8]
 801d642:	2200      	movs	r2, #0
 801d644:	809a      	strh	r2, [r3, #4]
 801d646:	e010      	b.n	801d66a <lv_font_get_glyph_dsc+0xdc>
    }
    else {
#if LV_USE_FONT_PLACEHOLDER
        dsc_out->box_w = font_p->line_height / 2;
 801d648:	68fb      	ldr	r3, [r7, #12]
 801d64a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801d64e:	2b00      	cmp	r3, #0
 801d650:	da00      	bge.n	801d654 <lv_font_get_glyph_dsc+0xc6>
 801d652:	3301      	adds	r3, #1
 801d654:	105b      	asrs	r3, r3, #1
 801d656:	b21b      	sxth	r3, r3
 801d658:	b29a      	uxth	r2, r3
 801d65a:	68bb      	ldr	r3, [r7, #8]
 801d65c:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 801d65e:	68bb      	ldr	r3, [r7, #8]
 801d660:	88db      	ldrh	r3, [r3, #6]
 801d662:	3302      	adds	r3, #2
 801d664:	b29a      	uxth	r2, r3
 801d666:	68bb      	ldr	r3, [r7, #8]
 801d668:	809a      	strh	r2, [r3, #4]
        dsc_out->box_w = 0;
        dsc_out->adv_w = 0;
#endif
    }

    dsc_out->resolved_font = NULL;
 801d66a:	68bb      	ldr	r3, [r7, #8]
 801d66c:	2200      	movs	r2, #0
 801d66e:	601a      	str	r2, [r3, #0]
    dsc_out->box_h = font_p->line_height;
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801d676:	b29a      	uxth	r2, r3
 801d678:	68bb      	ldr	r3, [r7, #8]
 801d67a:	811a      	strh	r2, [r3, #8]
    dsc_out->ofs_x = 0;
 801d67c:	68bb      	ldr	r3, [r7, #8]
 801d67e:	2200      	movs	r2, #0
 801d680:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = 0;
 801d682:	68bb      	ldr	r3, [r7, #8]
 801d684:	2200      	movs	r2, #0
 801d686:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = 1;
 801d688:	68ba      	ldr	r2, [r7, #8]
 801d68a:	7b93      	ldrb	r3, [r2, #14]
 801d68c:	2101      	movs	r1, #1
 801d68e:	f361 0303 	bfi	r3, r1, #0, #4
 801d692:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = true;
 801d694:	68ba      	ldr	r2, [r7, #8]
 801d696:	7b93      	ldrb	r3, [r2, #14]
 801d698:	f043 0310 	orr.w	r3, r3, #16
 801d69c:	7393      	strb	r3, [r2, #14]

    return false;
 801d69e:	2300      	movs	r3, #0
}
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	3724      	adds	r7, #36	; 0x24
 801d6a4:	46bd      	mov	sp, r7
 801d6a6:	bd90      	pop	{r4, r7, pc}

0801d6a8 <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 801d6a8:	b580      	push	{r7, lr}
 801d6aa:	b088      	sub	sp, #32
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	60f8      	str	r0, [r7, #12]
 801d6b0:	60b9      	str	r1, [r7, #8]
 801d6b2:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(font);
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d100      	bne.n	801d6bc <lv_font_get_glyph_width+0x14>
 801d6ba:	e7fe      	b.n	801d6ba <lv_font_get_glyph_width+0x12>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 801d6bc:	f107 0110 	add.w	r1, r7, #16
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	68ba      	ldr	r2, [r7, #8]
 801d6c4:	68f8      	ldr	r0, [r7, #12]
 801d6c6:	f7ff ff62 	bl	801d58e <lv_font_get_glyph_dsc>
    return g.adv_w;
 801d6ca:	8abb      	ldrh	r3, [r7, #20]
}
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	3720      	adds	r7, #32
 801d6d0:	46bd      	mov	sp, r7
 801d6d2:	bd80      	pop	{r7, pc}

0801d6d4 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter a unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 801d6d4:	b580      	push	{r7, lr}
 801d6d6:	b086      	sub	sp, #24
 801d6d8:	af00      	add	r7, sp, #0
 801d6da:	6078      	str	r0, [r7, #4]
 801d6dc:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 801d6de:	683b      	ldr	r3, [r7, #0]
 801d6e0:	2b09      	cmp	r3, #9
 801d6e2:	d101      	bne.n	801d6e8 <lv_font_get_bitmap_fmt_txt+0x14>
 801d6e4:	2320      	movs	r3, #32
 801d6e6:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	691b      	ldr	r3, [r3, #16]
 801d6ec:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801d6ee:	6839      	ldr	r1, [r7, #0]
 801d6f0:	6878      	ldr	r0, [r7, #4]
 801d6f2:	f000 f8b9 	bl	801d868 <get_glyph_dsc_id>
 801d6f6:	6138      	str	r0, [r7, #16]
    if(!gid) return NULL;
 801d6f8:	693b      	ldr	r3, [r7, #16]
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d101      	bne.n	801d702 <lv_font_get_bitmap_fmt_txt+0x2e>
 801d6fe:	2300      	movs	r3, #0
 801d700:	e015      	b.n	801d72e <lv_font_get_bitmap_fmt_txt+0x5a>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801d702:	697b      	ldr	r3, [r7, #20]
 801d704:	685a      	ldr	r2, [r3, #4]
 801d706:	693b      	ldr	r3, [r7, #16]
 801d708:	00db      	lsls	r3, r3, #3
 801d70a:	4413      	add	r3, r2
 801d70c:	60fb      	str	r3, [r7, #12]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 801d70e:	697b      	ldr	r3, [r7, #20]
 801d710:	7cdb      	ldrb	r3, [r3, #19]
 801d712:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801d716:	b2db      	uxtb	r3, r3
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d107      	bne.n	801d72c <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801d71c:	697b      	ldr	r3, [r7, #20]
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	68fa      	ldr	r2, [r7, #12]
 801d722:	6812      	ldr	r2, [r2, #0]
 801d724:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d728:	4413      	add	r3, r2
 801d72a:	e000      	b.n	801d72e <lv_font_get_bitmap_fmt_txt+0x5a>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
                   (uint8_t)fdsc->bpp, prefilter);
        return LV_GC_ROOT(_lv_font_decompr_buf);
#else /*!LV_USE_FONT_COMPRESSED*/
        LV_LOG_WARN("Compressed fonts is used but LV_USE_FONT_COMPRESSED is not enabled in lv_conf.h");
        return NULL;
 801d72c:	2300      	movs	r3, #0
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 801d72e:	4618      	mov	r0, r3
 801d730:	3718      	adds	r7, #24
 801d732:	46bd      	mov	sp, r7
 801d734:	bd80      	pop	{r7, pc}

0801d736 <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 801d736:	b580      	push	{r7, lr}
 801d738:	b08c      	sub	sp, #48	; 0x30
 801d73a:	af00      	add	r7, sp, #0
 801d73c:	60f8      	str	r0, [r7, #12]
 801d73e:	60b9      	str	r1, [r7, #8]
 801d740:	607a      	str	r2, [r7, #4]
 801d742:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 801d744:	2300      	movs	r3, #0
 801d746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	2b09      	cmp	r3, #9
 801d74e:	d104      	bne.n	801d75a <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 801d750:	2320      	movs	r3, #32
 801d752:	607b      	str	r3, [r7, #4]
        is_tab = true;
 801d754:	2301      	movs	r3, #1
 801d756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	691b      	ldr	r3, [r3, #16]
 801d75e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801d760:	6879      	ldr	r1, [r7, #4]
 801d762:	68f8      	ldr	r0, [r7, #12]
 801d764:	f000 f880 	bl	801d868 <get_glyph_dsc_id>
 801d768:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 801d76a:	6a3b      	ldr	r3, [r7, #32]
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d101      	bne.n	801d774 <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 801d770:	2300      	movs	r3, #0
 801d772:	e06d      	b.n	801d850 <lv_font_get_glyph_dsc_fmt_txt+0x11a>

    int8_t kvalue = 0;
 801d774:	2300      	movs	r3, #0
 801d776:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 801d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d77c:	68db      	ldr	r3, [r3, #12]
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d00f      	beq.n	801d7a2 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 801d782:	6839      	ldr	r1, [r7, #0]
 801d784:	68f8      	ldr	r0, [r7, #12]
 801d786:	f000 f86f 	bl	801d868 <get_glyph_dsc_id>
 801d78a:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 801d78c:	69fb      	ldr	r3, [r7, #28]
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d007      	beq.n	801d7a2 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 801d792:	69fa      	ldr	r2, [r7, #28]
 801d794:	6a39      	ldr	r1, [r7, #32]
 801d796:	68f8      	ldr	r0, [r7, #12]
 801d798:	f000 f9aa 	bl	801daf0 <get_kern_value>
 801d79c:	4603      	mov	r3, r0
 801d79e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801d7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7a4:	685a      	ldr	r2, [r3, #4]
 801d7a6:	6a3b      	ldr	r3, [r7, #32]
 801d7a8:	00db      	lsls	r3, r3, #3
 801d7aa:	4413      	add	r3, r2
 801d7ac:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801d7ae:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801d7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d7b4:	8a12      	ldrh	r2, [r2, #16]
 801d7b6:	fb02 f303 	mul.w	r3, r2, r3
 801d7ba:	111b      	asrs	r3, r3, #4
 801d7bc:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 801d7be:	69bb      	ldr	r3, [r7, #24]
 801d7c0:	885b      	ldrh	r3, [r3, #2]
 801d7c2:	f3c3 130b 	ubfx	r3, r3, #4, #12
 801d7c6:	b29b      	uxth	r3, r3
 801d7c8:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 801d7ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d002      	beq.n	801d7d8 <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 801d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7d4:	005b      	lsls	r3, r3, #1
 801d7d6:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 801d7d8:	697b      	ldr	r3, [r7, #20]
 801d7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d7dc:	4413      	add	r3, r2
 801d7de:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801d7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7e2:	3308      	adds	r3, #8
 801d7e4:	091b      	lsrs	r3, r3, #4
 801d7e6:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 801d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7ea:	b29a      	uxth	r2, r3
 801d7ec:	68bb      	ldr	r3, [r7, #8]
 801d7ee:	809a      	strh	r2, [r3, #4]
    dsc_out->box_h = gdsc->box_h;
 801d7f0:	69bb      	ldr	r3, [r7, #24]
 801d7f2:	795b      	ldrb	r3, [r3, #5]
 801d7f4:	b29a      	uxth	r2, r3
 801d7f6:	68bb      	ldr	r3, [r7, #8]
 801d7f8:	811a      	strh	r2, [r3, #8]
    dsc_out->box_w = gdsc->box_w;
 801d7fa:	69bb      	ldr	r3, [r7, #24]
 801d7fc:	791b      	ldrb	r3, [r3, #4]
 801d7fe:	b29a      	uxth	r2, r3
 801d800:	68bb      	ldr	r3, [r7, #8]
 801d802:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 801d804:	69bb      	ldr	r3, [r7, #24]
 801d806:	f993 3006 	ldrsb.w	r3, [r3, #6]
 801d80a:	b21a      	sxth	r2, r3
 801d80c:	68bb      	ldr	r3, [r7, #8]
 801d80e:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 801d810:	69bb      	ldr	r3, [r7, #24]
 801d812:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801d816:	b21a      	sxth	r2, r3
 801d818:	68bb      	ldr	r3, [r7, #8]
 801d81a:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d81e:	7cdb      	ldrb	r3, [r3, #19]
 801d820:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801d824:	b2d9      	uxtb	r1, r3
 801d826:	68ba      	ldr	r2, [r7, #8]
 801d828:	7b93      	ldrb	r3, [r2, #14]
 801d82a:	f361 0303 	bfi	r3, r1, #0, #4
 801d82e:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = false;
 801d830:	68ba      	ldr	r2, [r7, #8]
 801d832:	7b93      	ldrb	r3, [r2, #14]
 801d834:	f36f 1304 	bfc	r3, #4, #1
 801d838:	7393      	strb	r3, [r2, #14]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 801d83a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d005      	beq.n	801d84e <lv_font_get_glyph_dsc_fmt_txt+0x118>
 801d842:	68bb      	ldr	r3, [r7, #8]
 801d844:	88db      	ldrh	r3, [r3, #6]
 801d846:	005b      	lsls	r3, r3, #1
 801d848:	b29a      	uxth	r2, r3
 801d84a:	68bb      	ldr	r3, [r7, #8]
 801d84c:	80da      	strh	r2, [r3, #6]

    return true;
 801d84e:	2301      	movs	r3, #1
}
 801d850:	4618      	mov	r0, r3
 801d852:	3730      	adds	r7, #48	; 0x30
 801d854:	46bd      	mov	sp, r7
 801d856:	bd80      	pop	{r7, pc}

0801d858 <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 801d858:	b480      	push	{r7}
 801d85a:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
    }
#endif
}
 801d85c:	bf00      	nop
 801d85e:	46bd      	mov	sp, r7
 801d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d864:	4770      	bx	lr
	...

0801d868 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 801d868:	b590      	push	{r4, r7, lr}
 801d86a:	b091      	sub	sp, #68	; 0x44
 801d86c:	af02      	add	r7, sp, #8
 801d86e:	6078      	str	r0, [r7, #4]
 801d870:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 801d872:	683b      	ldr	r3, [r7, #0]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d101      	bne.n	801d87c <get_glyph_dsc_id+0x14>
 801d878:	2300      	movs	r3, #0
 801d87a:	e133      	b.n	801dae4 <get_glyph_dsc_id+0x27c>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	691b      	ldr	r3, [r3, #16]
 801d880:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d884:	695b      	ldr	r3, [r3, #20]
 801d886:	2b00      	cmp	r3, #0
 801d888:	d009      	beq.n	801d89e <get_glyph_dsc_id+0x36>
 801d88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d88c:	695b      	ldr	r3, [r3, #20]
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	683a      	ldr	r2, [r7, #0]
 801d892:	429a      	cmp	r2, r3
 801d894:	d103      	bne.n	801d89e <get_glyph_dsc_id+0x36>
 801d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d898:	695b      	ldr	r3, [r3, #20]
 801d89a:	685b      	ldr	r3, [r3, #4]
 801d89c:	e122      	b.n	801dae4 <get_glyph_dsc_id+0x27c>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 801d89e:	2300      	movs	r3, #0
 801d8a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 801d8a2:	e108      	b.n	801dab6 <get_glyph_dsc_id+0x24e>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8a6:	6899      	ldr	r1, [r3, #8]
 801d8a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d8aa:	4613      	mov	r3, r2
 801d8ac:	009b      	lsls	r3, r3, #2
 801d8ae:	4413      	add	r3, r2
 801d8b0:	009b      	lsls	r3, r3, #2
 801d8b2:	440b      	add	r3, r1
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	683a      	ldr	r2, [r7, #0]
 801d8b8:	1ad3      	subs	r3, r2, r3
 801d8ba:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8be:	6899      	ldr	r1, [r3, #8]
 801d8c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d8c2:	4613      	mov	r3, r2
 801d8c4:	009b      	lsls	r3, r3, #2
 801d8c6:	4413      	add	r3, r2
 801d8c8:	009b      	lsls	r3, r3, #2
 801d8ca:	440b      	add	r3, r1
 801d8cc:	889b      	ldrh	r3, [r3, #4]
 801d8ce:	461a      	mov	r2, r3
 801d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8d2:	4293      	cmp	r3, r2
 801d8d4:	d903      	bls.n	801d8de <get_glyph_dsc_id+0x76>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801d8d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d8d8:	3301      	adds	r3, #1
 801d8da:	86fb      	strh	r3, [r7, #54]	; 0x36
 801d8dc:	e0eb      	b.n	801dab6 <get_glyph_dsc_id+0x24e>
        uint32_t glyph_id = 0;
 801d8de:	2300      	movs	r3, #0
 801d8e0:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801d8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8e4:	6899      	ldr	r1, [r3, #8]
 801d8e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d8e8:	4613      	mov	r3, r2
 801d8ea:	009b      	lsls	r3, r3, #2
 801d8ec:	4413      	add	r3, r2
 801d8ee:	009b      	lsls	r3, r3, #2
 801d8f0:	440b      	add	r3, r1
 801d8f2:	7c9b      	ldrb	r3, [r3, #18]
 801d8f4:	2b02      	cmp	r3, #2
 801d8f6:	d10d      	bne.n	801d914 <get_glyph_dsc_id+0xac>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8fa:	6899      	ldr	r1, [r3, #8]
 801d8fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d8fe:	4613      	mov	r3, r2
 801d900:	009b      	lsls	r3, r3, #2
 801d902:	4413      	add	r3, r2
 801d904:	009b      	lsls	r3, r3, #2
 801d906:	440b      	add	r3, r1
 801d908:	88db      	ldrh	r3, [r3, #6]
 801d90a:	461a      	mov	r2, r3
 801d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d90e:	4413      	add	r3, r2
 801d910:	633b      	str	r3, [r7, #48]	; 0x30
 801d912:	e0c2      	b.n	801da9a <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d916:	6899      	ldr	r1, [r3, #8]
 801d918:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d91a:	4613      	mov	r3, r2
 801d91c:	009b      	lsls	r3, r3, #2
 801d91e:	4413      	add	r3, r2
 801d920:	009b      	lsls	r3, r3, #2
 801d922:	440b      	add	r3, r1
 801d924:	7c9b      	ldrb	r3, [r3, #18]
 801d926:	2b00      	cmp	r3, #0
 801d928:	d11a      	bne.n	801d960 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801d92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d92c:	6899      	ldr	r1, [r3, #8]
 801d92e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d930:	4613      	mov	r3, r2
 801d932:	009b      	lsls	r3, r3, #2
 801d934:	4413      	add	r3, r2
 801d936:	009b      	lsls	r3, r3, #2
 801d938:	440b      	add	r3, r1
 801d93a:	68db      	ldr	r3, [r3, #12]
 801d93c:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801d93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d940:	6899      	ldr	r1, [r3, #8]
 801d942:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d944:	4613      	mov	r3, r2
 801d946:	009b      	lsls	r3, r3, #2
 801d948:	4413      	add	r3, r2
 801d94a:	009b      	lsls	r3, r3, #2
 801d94c:	440b      	add	r3, r1
 801d94e:	88db      	ldrh	r3, [r3, #6]
 801d950:	4619      	mov	r1, r3
 801d952:	693a      	ldr	r2, [r7, #16]
 801d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d956:	4413      	add	r3, r2
 801d958:	781b      	ldrb	r3, [r3, #0]
 801d95a:	440b      	add	r3, r1
 801d95c:	633b      	str	r3, [r7, #48]	; 0x30
 801d95e:	e09c      	b.n	801da9a <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801d960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d962:	6899      	ldr	r1, [r3, #8]
 801d964:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d966:	4613      	mov	r3, r2
 801d968:	009b      	lsls	r3, r3, #2
 801d96a:	4413      	add	r3, r2
 801d96c:	009b      	lsls	r3, r3, #2
 801d96e:	440b      	add	r3, r1
 801d970:	7c9b      	ldrb	r3, [r3, #18]
 801d972:	2b03      	cmp	r3, #3
 801d974:	d13c      	bne.n	801d9f0 <get_glyph_dsc_id+0x188>
            uint16_t key = rcp;
 801d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d978:	b29b      	uxth	r3, r3
 801d97a:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d97e:	6899      	ldr	r1, [r3, #8]
 801d980:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d982:	4613      	mov	r3, r2
 801d984:	009b      	lsls	r3, r3, #2
 801d986:	4413      	add	r3, r2
 801d988:	009b      	lsls	r3, r3, #2
 801d98a:	440b      	add	r3, r1
 801d98c:	689c      	ldr	r4, [r3, #8]
 801d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d990:	6899      	ldr	r1, [r3, #8]
 801d992:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d994:	4613      	mov	r3, r2
 801d996:	009b      	lsls	r3, r3, #2
 801d998:	4413      	add	r3, r2
 801d99a:	009b      	lsls	r3, r3, #2
 801d99c:	440b      	add	r3, r1
 801d99e:	8a1b      	ldrh	r3, [r3, #16]
 801d9a0:	461a      	mov	r2, r3
 801d9a2:	f107 000e 	add.w	r0, r7, #14
 801d9a6:	4b51      	ldr	r3, [pc, #324]	; (801daec <get_glyph_dsc_id+0x284>)
 801d9a8:	9300      	str	r3, [sp, #0]
 801d9aa:	2302      	movs	r3, #2
 801d9ac:	4621      	mov	r1, r4
 801d9ae:	f005 f89b 	bl	8022ae8 <_lv_utils_bsearch>
 801d9b2:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801d9b4:	69bb      	ldr	r3, [r7, #24]
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d06f      	beq.n	801da9a <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9bc:	6899      	ldr	r1, [r3, #8]
 801d9be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d9c0:	4613      	mov	r3, r2
 801d9c2:	009b      	lsls	r3, r3, #2
 801d9c4:	4413      	add	r3, r2
 801d9c6:	009b      	lsls	r3, r3, #2
 801d9c8:	440b      	add	r3, r1
 801d9ca:	689b      	ldr	r3, [r3, #8]
 801d9cc:	69ba      	ldr	r2, [r7, #24]
 801d9ce:	1ad3      	subs	r3, r2, r3
 801d9d0:	105b      	asrs	r3, r3, #1
 801d9d2:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9d6:	6899      	ldr	r1, [r3, #8]
 801d9d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d9da:	4613      	mov	r3, r2
 801d9dc:	009b      	lsls	r3, r3, #2
 801d9de:	4413      	add	r3, r2
 801d9e0:	009b      	lsls	r3, r3, #2
 801d9e2:	440b      	add	r3, r1
 801d9e4:	88db      	ldrh	r3, [r3, #6]
 801d9e6:	461a      	mov	r2, r3
 801d9e8:	697b      	ldr	r3, [r7, #20]
 801d9ea:	4413      	add	r3, r2
 801d9ec:	633b      	str	r3, [r7, #48]	; 0x30
 801d9ee:	e054      	b.n	801da9a <get_glyph_dsc_id+0x232>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 801d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9f2:	6899      	ldr	r1, [r3, #8]
 801d9f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d9f6:	4613      	mov	r3, r2
 801d9f8:	009b      	lsls	r3, r3, #2
 801d9fa:	4413      	add	r3, r2
 801d9fc:	009b      	lsls	r3, r3, #2
 801d9fe:	440b      	add	r3, r1
 801da00:	7c9b      	ldrb	r3, [r3, #18]
 801da02:	2b01      	cmp	r3, #1
 801da04:	d149      	bne.n	801da9a <get_glyph_dsc_id+0x232>
            uint16_t key = rcp;
 801da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da08:	b29b      	uxth	r3, r3
 801da0a:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da0e:	6899      	ldr	r1, [r3, #8]
 801da10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801da12:	4613      	mov	r3, r2
 801da14:	009b      	lsls	r3, r3, #2
 801da16:	4413      	add	r3, r2
 801da18:	009b      	lsls	r3, r3, #2
 801da1a:	440b      	add	r3, r1
 801da1c:	689c      	ldr	r4, [r3, #8]
 801da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da20:	6899      	ldr	r1, [r3, #8]
 801da22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801da24:	4613      	mov	r3, r2
 801da26:	009b      	lsls	r3, r3, #2
 801da28:	4413      	add	r3, r2
 801da2a:	009b      	lsls	r3, r3, #2
 801da2c:	440b      	add	r3, r1
 801da2e:	8a1b      	ldrh	r3, [r3, #16]
 801da30:	461a      	mov	r2, r3
 801da32:	f107 000c 	add.w	r0, r7, #12
 801da36:	4b2d      	ldr	r3, [pc, #180]	; (801daec <get_glyph_dsc_id+0x284>)
 801da38:	9300      	str	r3, [sp, #0]
 801da3a:	2302      	movs	r3, #2
 801da3c:	4621      	mov	r1, r4
 801da3e:	f005 f853 	bl	8022ae8 <_lv_utils_bsearch>
 801da42:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da46:	2b00      	cmp	r3, #0
 801da48:	d027      	beq.n	801da9a <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801da4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da4c:	6899      	ldr	r1, [r3, #8]
 801da4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801da50:	4613      	mov	r3, r2
 801da52:	009b      	lsls	r3, r3, #2
 801da54:	4413      	add	r3, r2
 801da56:	009b      	lsls	r3, r3, #2
 801da58:	440b      	add	r3, r1
 801da5a:	689b      	ldr	r3, [r3, #8]
 801da5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801da5e:	1ad3      	subs	r3, r2, r3
 801da60:	105b      	asrs	r3, r3, #1
 801da62:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 801da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da66:	6899      	ldr	r1, [r3, #8]
 801da68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801da6a:	4613      	mov	r3, r2
 801da6c:	009b      	lsls	r3, r3, #2
 801da6e:	4413      	add	r3, r2
 801da70:	009b      	lsls	r3, r3, #2
 801da72:	440b      	add	r3, r1
 801da74:	68db      	ldr	r3, [r3, #12]
 801da76:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da7a:	6899      	ldr	r1, [r3, #8]
 801da7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801da7e:	4613      	mov	r3, r2
 801da80:	009b      	lsls	r3, r3, #2
 801da82:	4413      	add	r3, r2
 801da84:	009b      	lsls	r3, r3, #2
 801da86:	440b      	add	r3, r1
 801da88:	88db      	ldrh	r3, [r3, #6]
 801da8a:	4619      	mov	r1, r3
 801da8c:	6a3b      	ldr	r3, [r7, #32]
 801da8e:	005b      	lsls	r3, r3, #1
 801da90:	69fa      	ldr	r2, [r7, #28]
 801da92:	4413      	add	r3, r2
 801da94:	881b      	ldrh	r3, [r3, #0]
 801da96:	440b      	add	r3, r1
 801da98:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        if(fdsc->cache) {
 801da9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da9c:	695b      	ldr	r3, [r3, #20]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d007      	beq.n	801dab2 <get_glyph_dsc_id+0x24a>
            fdsc->cache->last_letter = letter;
 801daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daa4:	695b      	ldr	r3, [r3, #20]
 801daa6:	683a      	ldr	r2, [r7, #0]
 801daa8:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 801daaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daac:	695b      	ldr	r3, [r3, #20]
 801daae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dab0:	605a      	str	r2, [r3, #4]
        }
        return glyph_id;
 801dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dab4:	e016      	b.n	801dae4 <get_glyph_dsc_id+0x27c>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dab8:	8a5b      	ldrh	r3, [r3, #18]
 801daba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dabe:	b29b      	uxth	r3, r3
 801dac0:	461a      	mov	r2, r3
 801dac2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801dac4:	4293      	cmp	r3, r2
 801dac6:	f4ff aeed 	bcc.w	801d8a4 <get_glyph_dsc_id+0x3c>
    }

    if(fdsc->cache) {
 801daca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dacc:	695b      	ldr	r3, [r3, #20]
 801dace:	2b00      	cmp	r3, #0
 801dad0:	d007      	beq.n	801dae2 <get_glyph_dsc_id+0x27a>
        fdsc->cache->last_letter = letter;
 801dad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dad4:	695b      	ldr	r3, [r3, #20]
 801dad6:	683a      	ldr	r2, [r7, #0]
 801dad8:	601a      	str	r2, [r3, #0]
        fdsc->cache->last_glyph_id = 0;
 801dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dadc:	695b      	ldr	r3, [r3, #20]
 801dade:	2200      	movs	r2, #0
 801dae0:	605a      	str	r2, [r3, #4]
    }
    return 0;
 801dae2:	2300      	movs	r3, #0

}
 801dae4:	4618      	mov	r0, r3
 801dae6:	373c      	adds	r7, #60	; 0x3c
 801dae8:	46bd      	mov	sp, r7
 801daea:	bd90      	pop	{r4, r7, pc}
 801daec:	0801dcd1 	.word	0x0801dcd1

0801daf0 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 801daf0:	b580      	push	{r7, lr}
 801daf2:	b094      	sub	sp, #80	; 0x50
 801daf4:	af02      	add	r7, sp, #8
 801daf6:	60f8      	str	r0, [r7, #12]
 801daf8:	60b9      	str	r1, [r7, #8]
 801dafa:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	691b      	ldr	r3, [r3, #16]
 801db00:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 801db02:	2300      	movs	r3, #0
 801db04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 801db08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db0a:	7cdb      	ldrb	r3, [r3, #19]
 801db0c:	f003 0320 	and.w	r3, r3, #32
 801db10:	b2db      	uxtb	r3, r3
 801db12:	2b00      	cmp	r3, #0
 801db14:	d160      	bne.n	801dbd8 <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 801db16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db18:	68db      	ldr	r3, [r3, #12]
 801db1a:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 801db1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db1e:	7adb      	ldrb	r3, [r3, #11]
 801db20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801db24:	b2db      	uxtb	r3, r3
 801db26:	2b00      	cmp	r3, #0
 801db28:	d129      	bne.n	801db7e <get_kern_value+0x8e>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
 801db2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	b29b      	uxth	r3, r3
 801db34:	021b      	lsls	r3, r3, #8
 801db36:	b29a      	uxth	r2, r3
 801db38:	68bb      	ldr	r3, [r7, #8]
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	4413      	add	r3, r2
 801db3e:	b29b      	uxth	r3, r3
 801db40:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801db42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db44:	689b      	ldr	r3, [r3, #8]
 801db46:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801db4a:	461a      	mov	r2, r3
 801db4c:	f107 001a 	add.w	r0, r7, #26
 801db50:	4b39      	ldr	r3, [pc, #228]	; (801dc38 <get_kern_value+0x148>)
 801db52:	9300      	str	r3, [sp, #0]
 801db54:	2302      	movs	r3, #2
 801db56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801db58:	f004 ffc6 	bl	8022ae8 <_lv_utils_bsearch>
 801db5c:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801db5e:	6a3b      	ldr	r3, [r7, #32]
 801db60:	2b00      	cmp	r3, #0
 801db62:	d063      	beq.n	801dc2c <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801db64:	6a3a      	ldr	r2, [r7, #32]
 801db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db68:	1ad3      	subs	r3, r2, r3
 801db6a:	105b      	asrs	r3, r3, #1
 801db6c:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 801db6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db70:	685a      	ldr	r2, [r3, #4]
 801db72:	69fb      	ldr	r3, [r7, #28]
 801db74:	4413      	add	r3, r2
 801db76:	781b      	ldrb	r3, [r3, #0]
 801db78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801db7c:	e056      	b.n	801dc2c <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 801db7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db80:	7adb      	ldrb	r3, [r3, #11]
 801db82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801db86:	b2db      	uxtb	r3, r3
 801db88:	2b40      	cmp	r3, #64	; 0x40
 801db8a:	d14f      	bne.n	801dc2c <get_kern_value+0x13c>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint32_t * g_ids = kdsc->glyph_ids;
 801db8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801db92:	687b      	ldr	r3, [r7, #4]
 801db94:	041a      	lsls	r2, r3, #16
 801db96:	68bb      	ldr	r3, [r7, #8]
 801db98:	4413      	add	r3, r2
 801db9a:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801db9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db9e:	689b      	ldr	r3, [r3, #8]
 801dba0:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801dba4:	461a      	mov	r2, r3
 801dba6:	f107 0014 	add.w	r0, r7, #20
 801dbaa:	4b24      	ldr	r3, [pc, #144]	; (801dc3c <get_kern_value+0x14c>)
 801dbac:	9300      	str	r3, [sp, #0]
 801dbae:	2304      	movs	r3, #4
 801dbb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dbb2:	f004 ff99 	bl	8022ae8 <_lv_utils_bsearch>
 801dbb6:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801dbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d036      	beq.n	801dc2c <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801dbbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbc2:	1ad3      	subs	r3, r2, r3
 801dbc4:	109b      	asrs	r3, r3, #2
 801dbc6:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 801dbc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbca:	685a      	ldr	r2, [r3, #4]
 801dbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbce:	4413      	add	r3, r2
 801dbd0:	781b      	ldrb	r3, [r3, #0]
 801dbd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801dbd6:	e029      	b.n	801dc2c <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 801dbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dbda:	68db      	ldr	r3, [r3, #12]
 801dbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 801dbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dbe0:	685a      	ldr	r2, [r3, #4]
 801dbe2:	68bb      	ldr	r3, [r7, #8]
 801dbe4:	4413      	add	r3, r2
 801dbe6:	781b      	ldrb	r3, [r3, #0]
 801dbe8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801dbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dbee:	689a      	ldr	r2, [r3, #8]
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	4413      	add	r3, r2
 801dbf4:	781b      	ldrb	r3, [r3, #0]
 801dbf6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 801dbfa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d014      	beq.n	801dc2c <get_kern_value+0x13c>
 801dc02:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d010      	beq.n	801dc2c <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 801dc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801dc12:	3a01      	subs	r2, #1
 801dc14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dc16:	7b49      	ldrb	r1, [r1, #13]
 801dc18:	fb02 f101 	mul.w	r1, r2, r1
 801dc1c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801dc20:	3a01      	subs	r2, #1
 801dc22:	440a      	add	r2, r1
 801dc24:	4413      	add	r3, r2
 801dc26:	781b      	ldrb	r3, [r3, #0]
 801dc28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 801dc2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801dc30:	4618      	mov	r0, r3
 801dc32:	3748      	adds	r7, #72	; 0x48
 801dc34:	46bd      	mov	sp, r7
 801dc36:	bd80      	pop	{r7, pc}
 801dc38:	0801dc41 	.word	0x0801dc41
 801dc3c:	0801dc89 	.word	0x0801dc89

0801dc40 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 801dc40:	b480      	push	{r7}
 801dc42:	b085      	sub	sp, #20
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	6078      	str	r0, [r7, #4]
 801dc48:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 801dc4e:	683b      	ldr	r3, [r7, #0]
 801dc50:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	781a      	ldrb	r2, [r3, #0]
 801dc56:	68bb      	ldr	r3, [r7, #8]
 801dc58:	781b      	ldrb	r3, [r3, #0]
 801dc5a:	429a      	cmp	r2, r3
 801dc5c:	d006      	beq.n	801dc6c <kern_pair_8_compare+0x2c>
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	781b      	ldrb	r3, [r3, #0]
 801dc62:	461a      	mov	r2, r3
 801dc64:	68bb      	ldr	r3, [r7, #8]
 801dc66:	781b      	ldrb	r3, [r3, #0]
 801dc68:	1ad3      	subs	r3, r2, r3
 801dc6a:	e007      	b.n	801dc7c <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 801dc6c:	68fb      	ldr	r3, [r7, #12]
 801dc6e:	3301      	adds	r3, #1
 801dc70:	781b      	ldrb	r3, [r3, #0]
 801dc72:	461a      	mov	r2, r3
 801dc74:	68bb      	ldr	r3, [r7, #8]
 801dc76:	3301      	adds	r3, #1
 801dc78:	781b      	ldrb	r3, [r3, #0]
 801dc7a:	1ad3      	subs	r3, r2, r3

}
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	3714      	adds	r7, #20
 801dc80:	46bd      	mov	sp, r7
 801dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc86:	4770      	bx	lr

0801dc88 <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 801dc88:	b480      	push	{r7}
 801dc8a:	b085      	sub	sp, #20
 801dc8c:	af00      	add	r7, sp, #0
 801dc8e:	6078      	str	r0, [r7, #4]
 801dc90:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 801dc96:	683b      	ldr	r3, [r7, #0]
 801dc98:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801dc9a:	68fb      	ldr	r3, [r7, #12]
 801dc9c:	881a      	ldrh	r2, [r3, #0]
 801dc9e:	68bb      	ldr	r3, [r7, #8]
 801dca0:	881b      	ldrh	r3, [r3, #0]
 801dca2:	429a      	cmp	r2, r3
 801dca4:	d006      	beq.n	801dcb4 <kern_pair_16_compare+0x2c>
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	881b      	ldrh	r3, [r3, #0]
 801dcaa:	461a      	mov	r2, r3
 801dcac:	68bb      	ldr	r3, [r7, #8]
 801dcae:	881b      	ldrh	r3, [r3, #0]
 801dcb0:	1ad3      	subs	r3, r2, r3
 801dcb2:	e007      	b.n	801dcc4 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	3302      	adds	r3, #2
 801dcb8:	881b      	ldrh	r3, [r3, #0]
 801dcba:	461a      	mov	r2, r3
 801dcbc:	68bb      	ldr	r3, [r7, #8]
 801dcbe:	3302      	adds	r3, #2
 801dcc0:	881b      	ldrh	r3, [r3, #0]
 801dcc2:	1ad3      	subs	r3, r2, r3
}
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	3714      	adds	r7, #20
 801dcc8:	46bd      	mov	sp, r7
 801dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcce:	4770      	bx	lr

0801dcd0 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 801dcd0:	b480      	push	{r7}
 801dcd2:	b083      	sub	sp, #12
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	6078      	str	r0, [r7, #4]
 801dcd8:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	881b      	ldrh	r3, [r3, #0]
 801dcde:	461a      	mov	r2, r3
 801dce0:	683b      	ldr	r3, [r7, #0]
 801dce2:	881b      	ldrh	r3, [r3, #0]
 801dce4:	1ad3      	subs	r3, r2, r3
}
 801dce6:	4618      	mov	r0, r3
 801dce8:	370c      	adds	r7, #12
 801dcea:	46bd      	mov	sp, r7
 801dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcf0:	4770      	bx	lr

0801dcf2 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801dcf2:	b480      	push	{r7}
 801dcf4:	b083      	sub	sp, #12
 801dcf6:	af00      	add	r7, sp, #0
 801dcf8:	4603      	mov	r3, r0
 801dcfa:	71fb      	strb	r3, [r7, #7]
 801dcfc:	460b      	mov	r3, r1
 801dcfe:	71bb      	strb	r3, [r7, #6]
 801dd00:	4613      	mov	r3, r2
 801dd02:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801dd04:	797b      	ldrb	r3, [r7, #5]
 801dd06:	09db      	lsrs	r3, r3, #7
 801dd08:	b2da      	uxtb	r2, r3
 801dd0a:	79bb      	ldrb	r3, [r7, #6]
 801dd0c:	09db      	lsrs	r3, r3, #7
 801dd0e:	b2db      	uxtb	r3, r3
 801dd10:	4313      	orrs	r3, r2
 801dd12:	b2da      	uxtb	r2, r3
 801dd14:	79fb      	ldrb	r3, [r7, #7]
 801dd16:	09db      	lsrs	r3, r3, #7
 801dd18:	b2db      	uxtb	r3, r3
 801dd1a:	4313      	orrs	r3, r2
 801dd1c:	b2db      	uxtb	r3, r3
}
 801dd1e:	4618      	mov	r0, r3
 801dd20:	370c      	adds	r7, #12
 801dd22:	46bd      	mov	sp, r7
 801dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd28:	4770      	bx	lr

0801dd2a <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 801dd2a:	b580      	push	{r7, lr}
 801dd2c:	b082      	sub	sp, #8
 801dd2e:	af00      	add	r7, sp, #0
 801dd30:	6078      	str	r0, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    lv_color_t r;
    r.full = c | 0xFF000000;
    return r;
#else /*LV_COLOR_DEPTH == 8*/
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	0c1b      	lsrs	r3, r3, #16
 801dd36:	b2d8      	uxtb	r0, r3
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	0a1b      	lsrs	r3, r3, #8
 801dd3c:	b2db      	uxtb	r3, r3
 801dd3e:	687a      	ldr	r2, [r7, #4]
 801dd40:	b2d2      	uxtb	r2, r2
 801dd42:	4619      	mov	r1, r3
 801dd44:	f7ff ffd5 	bl	801dcf2 <lv_color_make>
 801dd48:	4603      	mov	r3, r0
#endif
}
 801dd4a:	4618      	mov	r0, r3
 801dd4c:	3708      	adds	r7, #8
 801dd4e:	46bd      	mov	sp, r7
 801dd50:	bd80      	pop	{r7, pc}

0801dd52 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 801dd52:	b580      	push	{r7, lr}
 801dd54:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 801dd56:	22ff      	movs	r2, #255	; 0xff
 801dd58:	21ff      	movs	r1, #255	; 0xff
 801dd5a:	20ff      	movs	r0, #255	; 0xff
 801dd5c:	f7ff ffc9 	bl	801dcf2 <lv_color_make>
 801dd60:	4603      	mov	r3, r0
}
 801dd62:	4618      	mov	r0, r3
 801dd64:	bd80      	pop	{r7, pc}
	...

0801dd68 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b082      	sub	sp, #8
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 801dd70:	4a04      	ldr	r2, [pc, #16]	; (801dd84 <lv_obj_remove_style_all+0x1c>)
 801dd72:	2100      	movs	r1, #0
 801dd74:	6878      	ldr	r0, [r7, #4]
 801dd76:	f7ed f8e7 	bl	800af48 <lv_obj_remove_style>
}
 801dd7a:	bf00      	nop
 801dd7c:	3708      	adds	r7, #8
 801dd7e:	46bd      	mov	sp, r7
 801dd80:	bd80      	pop	{r7, pc}
 801dd82:	bf00      	nop
 801dd84:	000fffff 	.word	0x000fffff

0801dd88 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801dd88:	b590      	push	{r4, r7, lr}
 801dd8a:	b083      	sub	sp, #12
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 801dd90:	2150      	movs	r1, #80	; 0x50
 801dd92:	6878      	ldr	r0, [r7, #4]
 801dd94:	f002 fd36 	bl	8020804 <lv_memset_00>

    driver->hor_res          = 320;
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801dd9e:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = 240;
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	22f0      	movs	r2, #240	; 0xf0
 801dda4:	805a      	strh	r2, [r3, #2]
    driver->physical_hor_res = -1;
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ddac:	809a      	strh	r2, [r3, #4]
    driver->physical_ver_res = -1;
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ddb4:	80da      	strh	r2, [r3, #6]
    driver->offset_x         = 0;
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	2200      	movs	r2, #0
 801ddba:	811a      	strh	r2, [r3, #8]
    driver->offset_y         = 0;
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	2200      	movs	r2, #0
 801ddc0:	815a      	strh	r2, [r3, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801ddc2:	687a      	ldr	r2, [r7, #4]
 801ddc4:	7c13      	ldrb	r3, [r2, #16]
 801ddc6:	f36f 03c3 	bfc	r3, #3, #1
 801ddca:	7413      	strb	r3, [r2, #16]
    driver->screen_transp    = 0;
 801ddcc:	687a      	ldr	r2, [r7, #4]
 801ddce:	7c13      	ldrb	r3, [r2, #16]
 801ddd0:	f36f 1386 	bfc	r3, #6, #1
 801ddd4:	7413      	strb	r3, [r2, #16]
    driver->dpi              = LV_DPI_DEF;
 801ddd6:	687a      	ldr	r2, [r7, #4]
 801ddd8:	6913      	ldr	r3, [r2, #16]
 801ddda:	2182      	movs	r1, #130	; 0x82
 801dddc:	f361 13d0 	bfi	r3, r1, #7, #10
 801dde0:	6113      	str	r3, [r2, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 801dde2:	687c      	ldr	r4, [r7, #4]
 801dde4:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 801dde8:	f7ff ff9f 	bl	801dd2a <lv_color_hex>
 801ddec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	4a06      	ldr	r2, [pc, #24]	; (801de0c <lv_disp_drv_init+0x84>)
 801ddf4:	641a      	str	r2, [r3, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 801ddf6:	687b      	ldr	r3, [r7, #4]
 801ddf8:	4a04      	ldr	r2, [pc, #16]	; (801de0c <lv_disp_drv_init+0x84>)
 801ddfa:	645a      	str	r2, [r3, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	2254      	movs	r2, #84	; 0x54
 801de00:	649a      	str	r2, [r3, #72]	; 0x48
#endif

}
 801de02:	bf00      	nop
 801de04:	370c      	adds	r7, #12
 801de06:	46bd      	mov	sp, r7
 801de08:	bd90      	pop	{r4, r7, pc}
 801de0a:	bf00      	nop
 801de0c:	08013625 	.word	0x08013625

0801de10 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801de10:	b580      	push	{r7, lr}
 801de12:	b084      	sub	sp, #16
 801de14:	af00      	add	r7, sp, #0
 801de16:	60f8      	str	r0, [r7, #12]
 801de18:	60b9      	str	r1, [r7, #8]
 801de1a:	607a      	str	r2, [r7, #4]
 801de1c:	603b      	str	r3, [r7, #0]
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 801de1e:	211c      	movs	r1, #28
 801de20:	68f8      	ldr	r0, [r7, #12]
 801de22:	f002 fcef 	bl	8020804 <lv_memset_00>

    draw_buf->buf1    = buf1;
 801de26:	68fb      	ldr	r3, [r7, #12]
 801de28:	68ba      	ldr	r2, [r7, #8]
 801de2a:	601a      	str	r2, [r3, #0]
    draw_buf->buf2    = buf2;
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	687a      	ldr	r2, [r7, #4]
 801de30:	605a      	str	r2, [r3, #4]
    draw_buf->buf_act = draw_buf->buf1;
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	681a      	ldr	r2, [r3, #0]
 801de36:	68fb      	ldr	r3, [r7, #12]
 801de38:	609a      	str	r2, [r3, #8]
    draw_buf->size    = size_in_px_cnt;
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	683a      	ldr	r2, [r7, #0]
 801de3e:	60da      	str	r2, [r3, #12]
}
 801de40:	bf00      	nop
 801de42:	3710      	adds	r7, #16
 801de44:	46bd      	mov	sp, r7
 801de46:	bd80      	pop	{r7, pc}

0801de48 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 801de48:	b590      	push	{r4, r7, lr}
 801de4a:	b087      	sub	sp, #28
 801de4c:	af00      	add	r7, sp, #0
 801de4e:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801de50:	485f      	ldr	r0, [pc, #380]	; (801dfd0 <lv_disp_drv_register+0x188>)
 801de52:	f001 fe1f 	bl	801fa94 <_lv_ll_ins_head>
 801de56:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(disp);
 801de58:	697b      	ldr	r3, [r7, #20]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d100      	bne.n	801de60 <lv_disp_drv_register+0x18>
 801de5e:	e7fe      	b.n	801de5e <lv_disp_drv_register+0x16>
    if(!disp) {
 801de60:	697b      	ldr	r3, [r7, #20]
 801de62:	2b00      	cmp	r3, #0
 801de64:	d101      	bne.n	801de6a <lv_disp_drv_register+0x22>
        return NULL;
 801de66:	2300      	movs	r3, #0
 801de68:	e0ae      	b.n	801dfc8 <lv_disp_drv_register+0x180>
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801de6e:	2b00      	cmp	r3, #0
 801de70:	d116      	bne.n	801dea0 <lv_disp_drv_register+0x58>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801de76:	4618      	mov	r0, r3
 801de78:	f002 f890 	bl	801ff9c <lv_mem_alloc>
 801de7c:	6138      	str	r0, [r7, #16]
        LV_ASSERT_MALLOC(draw_ctx);
 801de7e:	693b      	ldr	r3, [r7, #16]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d100      	bne.n	801de86 <lv_disp_drv_register+0x3e>
 801de84:	e7fe      	b.n	801de84 <lv_disp_drv_register+0x3c>
        if(draw_ctx == NULL) return NULL;
 801de86:	693b      	ldr	r3, [r7, #16]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d101      	bne.n	801de90 <lv_disp_drv_register+0x48>
 801de8c:	2300      	movs	r3, #0
 801de8e:	e09b      	b.n	801dfc8 <lv_disp_drv_register+0x180>
        driver->draw_ctx_init(driver, draw_ctx);
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de94:	6939      	ldr	r1, [r7, #16]
 801de96:	6878      	ldr	r0, [r7, #4]
 801de98:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	693a      	ldr	r2, [r7, #16]
 801de9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 801dea0:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801dea4:	6978      	ldr	r0, [r7, #20]
 801dea6:	f002 fcad 	bl	8020804 <lv_memset_00>

    disp->driver = driver;
 801deaa:	697b      	ldr	r3, [r7, #20]
 801deac:	687a      	ldr	r2, [r7, #4]
 801deae:	601a      	str	r2, [r3, #0]

    disp->inv_en_cnt = 1;
 801deb0:	697b      	ldr	r3, [r7, #20]
 801deb2:	2201      	movs	r2, #1
 801deb4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

    lv_disp_t * disp_def_tmp = disp_def;
 801deb8:	4b46      	ldr	r3, [pc, #280]	; (801dfd4 <lv_disp_drv_register+0x18c>)
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	60fb      	str	r3, [r7, #12]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801debe:	4a45      	ldr	r2, [pc, #276]	; (801dfd4 <lv_disp_drv_register+0x18c>)
 801dec0:	697b      	ldr	r3, [r7, #20]
 801dec2:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 801dec4:	697a      	ldr	r2, [r7, #20]
 801dec6:	211e      	movs	r1, #30
 801dec8:	4843      	ldr	r0, [pc, #268]	; (801dfd8 <lv_disp_drv_register+0x190>)
 801deca:	f003 fa95 	bl	80213f8 <lv_timer_create>
 801dece:	4602      	mov	r2, r0
 801ded0:	697b      	ldr	r3, [r7, #20]
 801ded2:	605a      	str	r2, [r3, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 801ded4:	697b      	ldr	r3, [r7, #20]
 801ded6:	685b      	ldr	r3, [r3, #4]
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d100      	bne.n	801dede <lv_disp_drv_register+0x96>
 801dedc:	e7fe      	b.n	801dedc <lv_disp_drv_register+0x94>
    if(disp->refr_timer == NULL) {
 801dede:	697b      	ldr	r3, [r7, #20]
 801dee0:	685b      	ldr	r3, [r3, #4]
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d104      	bne.n	801def0 <lv_disp_drv_register+0xa8>
        lv_mem_free(disp);
 801dee6:	6978      	ldr	r0, [r7, #20]
 801dee8:	f002 f888 	bl	801fffc <lv_mem_free>
        return NULL;
 801deec:	2300      	movs	r3, #0
 801deee:	e06b      	b.n	801dfc8 <lv_disp_drv_register+0x180>
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	7c1b      	ldrb	r3, [r3, #16]
 801def4:	f003 0302 	and.w	r3, r3, #2
 801def8:	b2db      	uxtb	r3, r3
 801defa:	2b00      	cmp	r3, #0
 801defc:	d012      	beq.n	801df24 <lv_disp_drv_register+0xdc>
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	68db      	ldr	r3, [r3, #12]
 801df02:	68da      	ldr	r2, [r3, #12]
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df0a:	4619      	mov	r1, r3
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801df12:	fb01 f303 	mul.w	r3, r1, r3
 801df16:	429a      	cmp	r2, r3
 801df18:	d204      	bcs.n	801df24 <lv_disp_drv_register+0xdc>
        driver->full_refresh = 0;
 801df1a:	687a      	ldr	r2, [r7, #4]
 801df1c:	7c13      	ldrb	r3, [r2, #16]
 801df1e:	f36f 0341 	bfc	r3, #1, #1
 801df22:	7413      	strb	r3, [r2, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 801df24:	697c      	ldr	r4, [r7, #20]
 801df26:	f7ff ff14 	bl	801dd52 <lv_color_white>
 801df2a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801df2e:	697b      	ldr	r3, [r7, #20]
 801df30:	22ff      	movs	r2, #255	; 0xff
 801df32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 801df36:	2000      	movs	r0, #0
 801df38:	f7e6 fe30 	bl	8004b9c <lv_obj_create>
 801df3c:	4602      	mov	r2, r0
 801df3e:	697b      	ldr	r3, [r7, #20]
 801df40:	611a      	str	r2, [r3, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 801df42:	2000      	movs	r0, #0
 801df44:	f7e6 fe2a 	bl	8004b9c <lv_obj_create>
 801df48:	4602      	mov	r2, r0
 801df4a:	697b      	ldr	r3, [r7, #20]
 801df4c:	61da      	str	r2, [r3, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 801df4e:	2000      	movs	r0, #0
 801df50:	f7e6 fe24 	bl	8004b9c <lv_obj_create>
 801df54:	4602      	mov	r2, r0
 801df56:	697b      	ldr	r3, [r7, #20]
 801df58:	621a      	str	r2, [r3, #32]
    lv_obj_remove_style_all(disp->top_layer);
 801df5a:	697b      	ldr	r3, [r7, #20]
 801df5c:	69db      	ldr	r3, [r3, #28]
 801df5e:	4618      	mov	r0, r3
 801df60:	f7ff ff02 	bl	801dd68 <lv_obj_remove_style_all>
    lv_obj_remove_style_all(disp->sys_layer);
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	6a1b      	ldr	r3, [r3, #32]
 801df68:	4618      	mov	r0, r3
 801df6a:	f7ff fefd 	bl	801dd68 <lv_obj_remove_style_all>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 801df6e:	697b      	ldr	r3, [r7, #20]
 801df70:	69db      	ldr	r3, [r3, #28]
 801df72:	2102      	movs	r1, #2
 801df74:	4618      	mov	r0, r3
 801df76:	f7e6 fe25 	bl	8004bc4 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 801df7a:	697b      	ldr	r3, [r7, #20]
 801df7c:	6a1b      	ldr	r3, [r3, #32]
 801df7e:	2102      	movs	r1, #2
 801df80:	4618      	mov	r0, r3
 801df82:	f7e6 fe1f 	bl	8004bc4 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 801df86:	697b      	ldr	r3, [r7, #20]
 801df88:	69db      	ldr	r3, [r3, #28]
 801df8a:	2100      	movs	r1, #0
 801df8c:	4618      	mov	r0, r3
 801df8e:	f7ea ffb6 	bl	8008efe <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 801df92:	697b      	ldr	r3, [r7, #20]
 801df94:	6a1b      	ldr	r3, [r3, #32]
 801df96:	2100      	movs	r1, #0
 801df98:	4618      	mov	r0, r3
 801df9a:	f7ea ffb0 	bl	8008efe <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 801df9e:	697b      	ldr	r3, [r7, #20]
 801dfa0:	691b      	ldr	r3, [r3, #16]
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f7ea f927 	bl	80081f6 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801dfa8:	4a0a      	ldr	r2, [pc, #40]	; (801dfd4 <lv_disp_drv_register+0x18c>)
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	6013      	str	r3, [r2, #0]
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 801dfae:	4b09      	ldr	r3, [pc, #36]	; (801dfd4 <lv_disp_drv_register+0x18c>)
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d102      	bne.n	801dfbc <lv_disp_drv_register+0x174>
 801dfb6:	4a07      	ldr	r2, [pc, #28]	; (801dfd4 <lv_disp_drv_register+0x18c>)
 801dfb8:	697b      	ldr	r3, [r7, #20]
 801dfba:	6013      	str	r3, [r2, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 801dfbc:	697b      	ldr	r3, [r7, #20]
 801dfbe:	685b      	ldr	r3, [r3, #4]
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f003 fa6f 	bl	80214a4 <lv_timer_ready>

    return disp;
 801dfc6:	697b      	ldr	r3, [r7, #20]
}
 801dfc8:	4618      	mov	r0, r3
 801dfca:	371c      	adds	r7, #28
 801dfcc:	46bd      	mov	sp, r7
 801dfce:	bd90      	pop	{r4, r7, pc}
 801dfd0:	200007f8 	.word	0x200007f8
 801dfd4:	200007cc 	.word	0x200007cc
 801dfd8:	0800c9b9 	.word	0x0800c9b9

0801dfdc <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 801dfdc:	b480      	push	{r7}
 801dfde:	af00      	add	r7, sp, #0
    return disp_def;
 801dfe0:	4b03      	ldr	r3, [pc, #12]	; (801dff0 <lv_disp_get_default+0x14>)
 801dfe2:	681b      	ldr	r3, [r3, #0]
}
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	46bd      	mov	sp, r7
 801dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfec:	4770      	bx	lr
 801dfee:	bf00      	nop
 801dff0:	200007cc 	.word	0x200007cc

0801dff4 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801dff4:	b580      	push	{r7, lr}
 801dff6:	b082      	sub	sp, #8
 801dff8:	af00      	add	r7, sp, #0
 801dffa:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d102      	bne.n	801e008 <lv_disp_get_hor_res+0x14>
 801e002:	f7ff ffeb 	bl	801dfdc <lv_disp_get_default>
 801e006:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d101      	bne.n	801e012 <lv_disp_get_hor_res+0x1e>
        return 0;
 801e00e:	2300      	movs	r3, #0
 801e010:	e012      	b.n	801e038 <lv_disp_get_hor_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	7c1b      	ldrb	r3, [r3, #16]
 801e018:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e01c:	b2db      	uxtb	r3, r3
 801e01e:	2b01      	cmp	r3, #1
 801e020:	d001      	beq.n	801e026 <lv_disp_get_hor_res+0x32>
 801e022:	2b03      	cmp	r3, #3
 801e024:	d104      	bne.n	801e030 <lv_disp_get_hor_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	681b      	ldr	r3, [r3, #0]
 801e02a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e02e:	e003      	b.n	801e038 <lv_disp_get_hor_res+0x44>
            default:
                return disp->driver->hor_res;
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	f9b3 3000 	ldrsh.w	r3, [r3]
        }
    }
}
 801e038:	4618      	mov	r0, r3
 801e03a:	3708      	adds	r7, #8
 801e03c:	46bd      	mov	sp, r7
 801e03e:	bd80      	pop	{r7, pc}

0801e040 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801e040:	b580      	push	{r7, lr}
 801e042:	b082      	sub	sp, #8
 801e044:	af00      	add	r7, sp, #0
 801e046:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	d102      	bne.n	801e054 <lv_disp_get_ver_res+0x14>
 801e04e:	f7ff ffc5 	bl	801dfdc <lv_disp_get_default>
 801e052:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	2b00      	cmp	r3, #0
 801e058:	d101      	bne.n	801e05e <lv_disp_get_ver_res+0x1e>
        return 0;
 801e05a:	2300      	movs	r3, #0
 801e05c:	e012      	b.n	801e084 <lv_disp_get_ver_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	7c1b      	ldrb	r3, [r3, #16]
 801e064:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e068:	b2db      	uxtb	r3, r3
 801e06a:	2b01      	cmp	r3, #1
 801e06c:	d001      	beq.n	801e072 <lv_disp_get_ver_res+0x32>
 801e06e:	2b03      	cmp	r3, #3
 801e070:	d104      	bne.n	801e07c <lv_disp_get_ver_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e07a:	e003      	b.n	801e084 <lv_disp_get_ver_res+0x44>
            default:
                return disp->driver->ver_res;
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        }
    }
}
 801e084:	4618      	mov	r0, r3
 801e086:	3708      	adds	r7, #8
 801e088:	46bd      	mov	sp, r7
 801e08a:	bd80      	pop	{r7, pc}

0801e08c <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 801e08c:	b580      	push	{r7, lr}
 801e08e:	b082      	sub	sp, #8
 801e090:	af00      	add	r7, sp, #0
 801e092:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	2b00      	cmp	r3, #0
 801e098:	d102      	bne.n	801e0a0 <lv_disp_get_dpi+0x14>
 801e09a:	f7ff ff9f 	bl	801dfdc <lv_disp_get_default>
 801e09e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d101      	bne.n	801e0aa <lv_disp_get_dpi+0x1e>
 801e0a6:	2382      	movs	r3, #130	; 0x82
 801e0a8:	e006      	b.n	801e0b8 <lv_disp_get_dpi+0x2c>
    return disp->driver->dpi;
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	691b      	ldr	r3, [r3, #16]
 801e0b0:	f3c3 13c9 	ubfx	r3, r3, #7, #10
 801e0b4:	b29b      	uxth	r3, r3
 801e0b6:	b21b      	sxth	r3, r3
}
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	3708      	adds	r7, #8
 801e0bc:	46bd      	mov	sp, r7
 801e0be:	bd80      	pop	{r7, pc}

0801e0c0 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 801e0c0:	b480      	push	{r7}
 801e0c2:	b083      	sub	sp, #12
 801e0c4:	af00      	add	r7, sp, #0
 801e0c6:	6078      	str	r0, [r7, #4]
    disp_drv->draw_buf->flushing = 0;
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	68db      	ldr	r3, [r3, #12]
 801e0cc:	2200      	movs	r2, #0
 801e0ce:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 801e0d0:	687b      	ldr	r3, [r7, #4]
 801e0d2:	68db      	ldr	r3, [r3, #12]
 801e0d4:	2200      	movs	r2, #0
 801e0d6:	615a      	str	r2, [r3, #20]
}
 801e0d8:	bf00      	nop
 801e0da:	370c      	adds	r7, #12
 801e0dc:	46bd      	mov	sp, r7
 801e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0e2:	4770      	bx	lr

0801e0e4 <lv_disp_get_draw_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
 801e0e4:	b480      	push	{r7}
 801e0e6:	b083      	sub	sp, #12
 801e0e8:	af00      	add	r7, sp, #0
 801e0ea:	6078      	str	r0, [r7, #4]
    return disp->driver->draw_buf;
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	68db      	ldr	r3, [r3, #12]
}
 801e0f2:	4618      	mov	r0, r3
 801e0f4:	370c      	adds	r7, #12
 801e0f6:	46bd      	mov	sp, r7
 801e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0fc:	4770      	bx	lr
	...

0801e100 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 801e100:	b580      	push	{r7, lr}
 801e102:	b082      	sub	sp, #8
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d104      	bne.n	801e118 <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801e10e:	4807      	ldr	r0, [pc, #28]	; (801e12c <lv_indev_get_next+0x2c>)
 801e110:	f001 fd85 	bl	801fc1e <_lv_ll_get_head>
 801e114:	4603      	mov	r3, r0
 801e116:	e004      	b.n	801e122 <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801e118:	6879      	ldr	r1, [r7, #4]
 801e11a:	4804      	ldr	r0, [pc, #16]	; (801e12c <lv_indev_get_next+0x2c>)
 801e11c:	f001 fda1 	bl	801fc62 <_lv_ll_get_next>
 801e120:	4603      	mov	r3, r0
}
 801e122:	4618      	mov	r0, r3
 801e124:	3708      	adds	r7, #8
 801e126:	46bd      	mov	sp, r7
 801e128:	bd80      	pop	{r7, pc}
 801e12a:	bf00      	nop
 801e12c:	20000804 	.word	0x20000804

0801e130 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 801e130:	b480      	push	{r7}
 801e132:	b083      	sub	sp, #12
 801e134:	af00      	add	r7, sp, #0
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801e136:	4b09      	ldr	r3, [pc, #36]	; (801e15c <lv_tick_get+0x2c>)
 801e138:	2201      	movs	r2, #1
 801e13a:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 801e13c:	4b08      	ldr	r3, [pc, #32]	; (801e160 <lv_tick_get+0x30>)
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 801e142:	4b06      	ldr	r3, [pc, #24]	; (801e15c <lv_tick_get+0x2c>)
 801e144:	781b      	ldrb	r3, [r3, #0]
 801e146:	b2db      	uxtb	r3, r3
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d0f4      	beq.n	801e136 <lv_tick_get+0x6>

    return result;
 801e14c:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801e14e:	4618      	mov	r0, r3
 801e150:	370c      	adds	r7, #12
 801e152:	46bd      	mov	sp, r7
 801e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e158:	4770      	bx	lr
 801e15a:	bf00      	nop
 801e15c:	200007d4 	.word	0x200007d4
 801e160:	200007d0 	.word	0x200007d0

0801e164 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801e164:	b580      	push	{r7, lr}
 801e166:	b084      	sub	sp, #16
 801e168:	af00      	add	r7, sp, #0
 801e16a:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801e16c:	f7ff ffe0 	bl	801e130 <lv_tick_get>
 801e170:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 801e172:	68fa      	ldr	r2, [r7, #12]
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	429a      	cmp	r2, r3
 801e178:	d304      	bcc.n	801e184 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801e17a:	68fa      	ldr	r2, [r7, #12]
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	1ad3      	subs	r3, r2, r3
 801e180:	607b      	str	r3, [r7, #4]
 801e182:	e006      	b.n	801e192 <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	425b      	negs	r3, r3
 801e188:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801e18a:	687a      	ldr	r2, [r7, #4]
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	4413      	add	r3, r2
 801e190:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 801e192:	687b      	ldr	r3, [r7, #4]
}
 801e194:	4618      	mov	r0, r3
 801e196:	3710      	adds	r7, #16
 801e198:	46bd      	mov	sp, r7
 801e19a:	bd80      	pop	{r7, pc}

0801e19c <_lv_anim_core_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_anim_core_init(void)
{
 801e19c:	b580      	push	{r7, lr}
 801e19e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801e1a0:	2144      	movs	r1, #68	; 0x44
 801e1a2:	4809      	ldr	r0, [pc, #36]	; (801e1c8 <_lv_anim_core_init+0x2c>)
 801e1a4:	f001 fc5d 	bl	801fa62 <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 801e1a8:	2200      	movs	r2, #0
 801e1aa:	211e      	movs	r1, #30
 801e1ac:	4807      	ldr	r0, [pc, #28]	; (801e1cc <_lv_anim_core_init+0x30>)
 801e1ae:	f003 f923 	bl	80213f8 <lv_timer_create>
 801e1b2:	4603      	mov	r3, r0
 801e1b4:	4a06      	ldr	r2, [pc, #24]	; (801e1d0 <_lv_anim_core_init+0x34>)
 801e1b6:	6013      	str	r3, [r2, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 801e1b8:	f000 fac0 	bl	801e73c <anim_mark_list_change>
    anim_list_changed = false;
 801e1bc:	4b05      	ldr	r3, [pc, #20]	; (801e1d4 <_lv_anim_core_init+0x38>)
 801e1be:	2200      	movs	r2, #0
 801e1c0:	701a      	strb	r2, [r3, #0]
}
 801e1c2:	bf00      	nop
 801e1c4:	bd80      	pop	{r7, pc}
 801e1c6:	bf00      	nop
 801e1c8:	2000081c 	.word	0x2000081c
 801e1cc:	0801e491 	.word	0x0801e491
 801e1d0:	200007e0 	.word	0x200007e0
 801e1d4:	200007dc 	.word	0x200007dc

0801e1d8 <lv_anim_init>:

void lv_anim_init(lv_anim_t * a)
{
 801e1d8:	b580      	push	{r7, lr}
 801e1da:	b082      	sub	sp, #8
 801e1dc:	af00      	add	r7, sp, #0
 801e1de:	6078      	str	r0, [r7, #4]
    lv_memset_00(a, sizeof(lv_anim_t));
 801e1e0:	2144      	movs	r1, #68	; 0x44
 801e1e2:	6878      	ldr	r0, [r7, #4]
 801e1e4:	f002 fb0e 	bl	8020804 <lv_memset_00>
    a->time = 500;
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801e1ee:	62da      	str	r2, [r3, #44]	; 0x2c
    a->start_value = 0;
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	2200      	movs	r2, #0
 801e1f4:	621a      	str	r2, [r3, #32]
    a->end_value = 100;
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	2264      	movs	r2, #100	; 0x64
 801e1fa:	629a      	str	r2, [r3, #40]	; 0x28
    a->repeat_cnt = 1;
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	2201      	movs	r2, #1
 801e200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	4a06      	ldr	r2, [pc, #24]	; (801e220 <lv_anim_init+0x48>)
 801e208:	61da      	str	r2, [r3, #28]
    a->early_apply = 1;
 801e20a:	687a      	ldr	r2, [r7, #4]
 801e20c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801e210:	f043 0301 	orr.w	r3, r3, #1
 801e214:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 801e218:	bf00      	nop
 801e21a:	3708      	adds	r7, #8
 801e21c:	46bd      	mov	sp, r7
 801e21e:	bd80      	pop	{r7, pc}
 801e220:	0801e3db 	.word	0x0801e3db

0801e224 <lv_anim_start>:

lv_anim_t * lv_anim_start(const lv_anim_t * a)
{
 801e224:	b580      	push	{r7, lr}
 801e226:	b084      	sub	sp, #16
 801e228:	af00      	add	r7, sp, #0
 801e22a:	6078      	str	r0, [r7, #4]
    TRACE_ANIM("begin");

    /*Do not let two animations for the same 'var' with the same 'exec_cb'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	685b      	ldr	r3, [r3, #4]
 801e230:	2b00      	cmp	r3, #0
 801e232:	d007      	beq.n	801e244 <lv_anim_start+0x20>
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	681a      	ldr	r2, [r3, #0]
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	685b      	ldr	r3, [r3, #4]
 801e23c:	4619      	mov	r1, r3
 801e23e:	4610      	mov	r0, r2
 801e240:	f000 f868 	bl	801e314 <lv_anim_del>

    /*If the list is empty the anim timer was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 801e244:	4830      	ldr	r0, [pc, #192]	; (801e308 <lv_anim_start+0xe4>)
 801e246:	f001 fd35 	bl	801fcb4 <_lv_ll_is_empty>
 801e24a:	4603      	mov	r3, r0
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	d004      	beq.n	801e25a <lv_anim_start+0x36>
        last_timer_run = lv_tick_get();
 801e250:	f7ff ff6e 	bl	801e130 <lv_tick_get>
 801e254:	4603      	mov	r3, r0
 801e256:	4a2d      	ldr	r2, [pc, #180]	; (801e30c <lv_anim_start+0xe8>)
 801e258:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801e25a:	482b      	ldr	r0, [pc, #172]	; (801e308 <lv_anim_start+0xe4>)
 801e25c:	f001 fc1a 	bl	801fa94 <_lv_ll_ins_head>
 801e260:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(new_anim);
 801e262:	68fb      	ldr	r3, [r7, #12]
 801e264:	2b00      	cmp	r3, #0
 801e266:	d100      	bne.n	801e26a <lv_anim_start+0x46>
 801e268:	e7fe      	b.n	801e268 <lv_anim_start+0x44>
    if(new_anim == NULL) return NULL;
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d101      	bne.n	801e274 <lv_anim_start+0x50>
 801e270:	2300      	movs	r3, #0
 801e272:	e045      	b.n	801e300 <lv_anim_start+0xdc>

    /*Initialize the animation descriptor*/
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 801e274:	2244      	movs	r2, #68	; 0x44
 801e276:	6879      	ldr	r1, [r7, #4]
 801e278:	68f8      	ldr	r0, [r7, #12]
 801e27a:	f002 f81d 	bl	80202b8 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	687a      	ldr	r2, [r7, #4]
 801e284:	429a      	cmp	r2, r3
 801e286:	d102      	bne.n	801e28e <lv_anim_start+0x6a>
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	68fa      	ldr	r2, [r7, #12]
 801e28c:	601a      	str	r2, [r3, #0]
    new_anim->run_round = anim_run_round;
 801e28e:	4b20      	ldr	r3, [pc, #128]	; (801e310 <lv_anim_start+0xec>)
 801e290:	7819      	ldrb	r1, [r3, #0]
 801e292:	68fa      	ldr	r2, [r7, #12]
 801e294:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801e298:	f361 0382 	bfi	r3, r1, #2, #1
 801e29c:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

    /*Set the start value*/
    if(new_anim->early_apply) {
 801e2a0:	68fb      	ldr	r3, [r7, #12]
 801e2a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e2a6:	f003 0301 	and.w	r3, r3, #1
 801e2aa:	b2db      	uxtb	r3, r3
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d024      	beq.n	801e2fa <lv_anim_start+0xd6>
        if(new_anim->get_value_cb) {
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	695b      	ldr	r3, [r3, #20]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d010      	beq.n	801e2da <lv_anim_start+0xb6>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	695b      	ldr	r3, [r3, #20]
 801e2bc:	68f8      	ldr	r0, [r7, #12]
 801e2be:	4798      	blx	r3
 801e2c0:	60b8      	str	r0, [r7, #8]
            new_anim->start_value += v_ofs;
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	6a1a      	ldr	r2, [r3, #32]
 801e2c6:	68bb      	ldr	r3, [r7, #8]
 801e2c8:	441a      	add	r2, r3
 801e2ca:	68fb      	ldr	r3, [r7, #12]
 801e2cc:	621a      	str	r2, [r3, #32]
            new_anim->end_value += v_ofs;
 801e2ce:	68fb      	ldr	r3, [r7, #12]
 801e2d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e2d2:	68bb      	ldr	r3, [r7, #8]
 801e2d4:	441a      	add	r2, r3
 801e2d6:	68fb      	ldr	r3, [r7, #12]
 801e2d8:	629a      	str	r2, [r3, #40]	; 0x28
        }

        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	685b      	ldr	r3, [r3, #4]
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d00b      	beq.n	801e2fa <lv_anim_start+0xd6>
 801e2e2:	68fb      	ldr	r3, [r7, #12]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d007      	beq.n	801e2fa <lv_anim_start+0xd6>
 801e2ea:	68fb      	ldr	r3, [r7, #12]
 801e2ec:	685b      	ldr	r3, [r3, #4]
 801e2ee:	68fa      	ldr	r2, [r7, #12]
 801e2f0:	6810      	ldr	r0, [r2, #0]
 801e2f2:	68fa      	ldr	r2, [r7, #12]
 801e2f4:	6a12      	ldr	r2, [r2, #32]
 801e2f6:	4611      	mov	r1, r2
 801e2f8:	4798      	blx	r3
    }

    /*Creating an animation changed the linked list.
     *It's important if it happens in a ready callback. (see `anim_timer`)*/
    anim_mark_list_change();
 801e2fa:	f000 fa1f 	bl	801e73c <anim_mark_list_change>

    TRACE_ANIM("finished");
    return new_anim;
 801e2fe:	68fb      	ldr	r3, [r7, #12]
}
 801e300:	4618      	mov	r0, r3
 801e302:	3710      	adds	r7, #16
 801e304:	46bd      	mov	sp, r7
 801e306:	bd80      	pop	{r7, pc}
 801e308:	2000081c 	.word	0x2000081c
 801e30c:	200007d8 	.word	0x200007d8
 801e310:	200007dd 	.word	0x200007dd

0801e314 <lv_anim_del>:

    return playtime;
}

bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 801e314:	b580      	push	{r7, lr}
 801e316:	b086      	sub	sp, #24
 801e318:	af00      	add	r7, sp, #0
 801e31a:	6078      	str	r0, [r7, #4]
 801e31c:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 801e31e:	2300      	movs	r3, #0
 801e320:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801e322:	481b      	ldr	r0, [pc, #108]	; (801e390 <lv_anim_del+0x7c>)
 801e324:	f001 fc7b 	bl	801fc1e <_lv_ll_get_head>
 801e328:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801e32a:	e029      	b.n	801e380 <lv_anim_del+0x6c>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801e32c:	6979      	ldr	r1, [r7, #20]
 801e32e:	4818      	ldr	r0, [pc, #96]	; (801e390 <lv_anim_del+0x7c>)
 801e330:	f001 fc97 	bl	801fc62 <_lv_ll_get_next>
 801e334:	60f8      	str	r0, [r7, #12]

        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801e336:	697b      	ldr	r3, [r7, #20]
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	687a      	ldr	r2, [r7, #4]
 801e33c:	429a      	cmp	r2, r3
 801e33e:	d002      	beq.n	801e346 <lv_anim_del+0x32>
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	2b00      	cmp	r3, #0
 801e344:	d11a      	bne.n	801e37c <lv_anim_del+0x68>
 801e346:	697b      	ldr	r3, [r7, #20]
 801e348:	685b      	ldr	r3, [r3, #4]
 801e34a:	683a      	ldr	r2, [r7, #0]
 801e34c:	429a      	cmp	r2, r3
 801e34e:	d002      	beq.n	801e356 <lv_anim_del+0x42>
 801e350:	683b      	ldr	r3, [r7, #0]
 801e352:	2b00      	cmp	r3, #0
 801e354:	d112      	bne.n	801e37c <lv_anim_del+0x68>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801e356:	6979      	ldr	r1, [r7, #20]
 801e358:	480d      	ldr	r0, [pc, #52]	; (801e390 <lv_anim_del+0x7c>)
 801e35a:	f001 fc03 	bl	801fb64 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 801e35e:	697b      	ldr	r3, [r7, #20]
 801e360:	691b      	ldr	r3, [r3, #16]
 801e362:	2b00      	cmp	r3, #0
 801e364:	d003      	beq.n	801e36e <lv_anim_del+0x5a>
 801e366:	697b      	ldr	r3, [r7, #20]
 801e368:	691b      	ldr	r3, [r3, #16]
 801e36a:	6978      	ldr	r0, [r7, #20]
 801e36c:	4798      	blx	r3
            lv_mem_free(a);
 801e36e:	6978      	ldr	r0, [r7, #20]
 801e370:	f001 fe44 	bl	801fffc <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 801e374:	f000 f9e2 	bl	801e73c <anim_mark_list_change>
                                       the linked list*/
            del = true;
 801e378:	2301      	movs	r3, #1
 801e37a:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 801e37c:	68fb      	ldr	r3, [r7, #12]
 801e37e:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 801e380:	697b      	ldr	r3, [r7, #20]
 801e382:	2b00      	cmp	r3, #0
 801e384:	d1d2      	bne.n	801e32c <lv_anim_del+0x18>
    }

    return del;
 801e386:	7cfb      	ldrb	r3, [r7, #19]
}
 801e388:	4618      	mov	r0, r3
 801e38a:	3718      	adds	r7, #24
 801e38c:	46bd      	mov	sp, r7
 801e38e:	bd80      	pop	{r7, pc}
 801e390:	2000081c 	.word	0x2000081c

0801e394 <lv_anim_speed_to_time>:

    return cnt;
}

uint32_t lv_anim_speed_to_time(uint32_t speed, int32_t start, int32_t end)
{
 801e394:	b480      	push	{r7}
 801e396:	b087      	sub	sp, #28
 801e398:	af00      	add	r7, sp, #0
 801e39a:	60f8      	str	r0, [r7, #12]
 801e39c:	60b9      	str	r1, [r7, #8]
 801e39e:	607a      	str	r2, [r7, #4]
    uint32_t d    = LV_ABS(start - end);
 801e3a0:	68ba      	ldr	r2, [r7, #8]
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	1ad3      	subs	r3, r2, r3
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	bfb8      	it	lt
 801e3aa:	425b      	neglt	r3, r3
 801e3ac:	613b      	str	r3, [r7, #16]
    uint32_t time = (d * 1000) / speed;
 801e3ae:	693b      	ldr	r3, [r7, #16]
 801e3b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e3b4:	fb03 f202 	mul.w	r2, r3, r2
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 801e3be:	617b      	str	r3, [r7, #20]

    if(time == 0) {
 801e3c0:	697b      	ldr	r3, [r7, #20]
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d102      	bne.n	801e3cc <lv_anim_speed_to_time+0x38>
        time++;
 801e3c6:	697b      	ldr	r3, [r7, #20]
 801e3c8:	3301      	adds	r3, #1
 801e3ca:	617b      	str	r3, [r7, #20]
    }

    return time;
 801e3cc:	697b      	ldr	r3, [r7, #20]
}
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	371c      	adds	r7, #28
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3d8:	4770      	bx	lr

0801e3da <lv_anim_path_linear>:
{
    anim_timer(NULL);
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
 801e3da:	b580      	push	{r7, lr}
 801e3dc:	b086      	sub	sp, #24
 801e3de:	af02      	add	r7, sp, #8
 801e3e0:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e3ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e3ee:	9300      	str	r3, [sp, #0]
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	2100      	movs	r1, #0
 801e3f4:	f001 fd7a 	bl	801feec <lv_map>
 801e3f8:	60f8      	str	r0, [r7, #12]

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	6a1b      	ldr	r3, [r3, #32]
 801e402:	1ad2      	subs	r2, r2, r3
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	fb02 f303 	mul.w	r3, r2, r3
 801e40a:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 801e40c:	68bb      	ldr	r3, [r7, #8]
 801e40e:	129b      	asrs	r3, r3, #10
 801e410:	60bb      	str	r3, [r7, #8]
    new_value += a->start_value;
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	6a1b      	ldr	r3, [r3, #32]
 801e416:	68ba      	ldr	r2, [r7, #8]
 801e418:	4413      	add	r3, r2
 801e41a:	60bb      	str	r3, [r7, #8]

    return new_value;
 801e41c:	68bb      	ldr	r3, [r7, #8]
}
 801e41e:	4618      	mov	r0, r3
 801e420:	3710      	adds	r7, #16
 801e422:	46bd      	mov	sp, r7
 801e424:	bd80      	pop	{r7, pc}

0801e426 <lv_anim_path_ease_out>:

    return new_value;
}

int32_t lv_anim_path_ease_out(const lv_anim_t * a)
{
 801e426:	b580      	push	{r7, lr}
 801e428:	b088      	sub	sp, #32
 801e42a:	af02      	add	r7, sp, #8
 801e42c:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e43a:	9300      	str	r3, [sp, #0]
 801e43c:	2300      	movs	r3, #0
 801e43e:	2100      	movs	r1, #0
 801e440:	f001 fd54 	bl	801feec <lv_map>
 801e444:	4603      	mov	r3, r0
 801e446:	617b      	str	r3, [r7, #20]
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 801e448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e44c:	9300      	str	r3, [sp, #0]
 801e44e:	f240 33b6 	movw	r3, #950	; 0x3b6
 801e452:	f44f 7261 	mov.w	r2, #900	; 0x384
 801e456:	2100      	movs	r1, #0
 801e458:	6978      	ldr	r0, [r7, #20]
 801e45a:	f001 fcf5 	bl	801fe48 <lv_bezier3>
 801e45e:	4603      	mov	r3, r0
 801e460:	613b      	str	r3, [r7, #16]

    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	6a1b      	ldr	r3, [r3, #32]
 801e46a:	1ad2      	subs	r2, r2, r3
 801e46c:	693b      	ldr	r3, [r7, #16]
 801e46e:	fb02 f303 	mul.w	r3, r2, r3
 801e472:	60fb      	str	r3, [r7, #12]
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	129b      	asrs	r3, r3, #10
 801e478:	60fb      	str	r3, [r7, #12]
    new_value += a->start_value;
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	6a1b      	ldr	r3, [r3, #32]
 801e47e:	68fa      	ldr	r2, [r7, #12]
 801e480:	4413      	add	r3, r2
 801e482:	60fb      	str	r3, [r7, #12]

    return new_value;
 801e484:	68fb      	ldr	r3, [r7, #12]
}
 801e486:	4618      	mov	r0, r3
 801e488:	3718      	adds	r7, #24
 801e48a:	46bd      	mov	sp, r7
 801e48c:	bd80      	pop	{r7, pc}
	...

0801e490 <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 801e490:	b580      	push	{r7, lr}
 801e492:	b088      	sub	sp, #32
 801e494:	af00      	add	r7, sp, #0
 801e496:	6078      	str	r0, [r7, #4]
    LV_UNUSED(param);

    uint32_t elaps = lv_tick_elaps(last_timer_run);
 801e498:	4b5d      	ldr	r3, [pc, #372]	; (801e610 <anim_timer+0x180>)
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	4618      	mov	r0, r3
 801e49e:	f7ff fe61 	bl	801e164 <lv_tick_elaps>
 801e4a2:	61b8      	str	r0, [r7, #24]

    /*Flip the run round*/
    anim_run_round = anim_run_round ? false : true;
 801e4a4:	4b5b      	ldr	r3, [pc, #364]	; (801e614 <anim_timer+0x184>)
 801e4a6:	781b      	ldrb	r3, [r3, #0]
 801e4a8:	f083 0301 	eor.w	r3, r3, #1
 801e4ac:	b2da      	uxtb	r2, r3
 801e4ae:	4b59      	ldr	r3, [pc, #356]	; (801e614 <anim_timer+0x184>)
 801e4b0:	701a      	strb	r2, [r3, #0]

    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801e4b2:	4859      	ldr	r0, [pc, #356]	; (801e618 <anim_timer+0x188>)
 801e4b4:	f001 fbb3 	bl	801fc1e <_lv_ll_get_head>
 801e4b8:	61f8      	str	r0, [r7, #28]

    while(a != NULL) {
 801e4ba:	e09c      	b.n	801e5f6 <anim_timer+0x166>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 801e4bc:	4b57      	ldr	r3, [pc, #348]	; (801e61c <anim_timer+0x18c>)
 801e4be:	2200      	movs	r2, #0
 801e4c0:	701a      	strb	r2, [r3, #0]

        if(a->run_round != anim_run_round) {
 801e4c2:	69fb      	ldr	r3, [r7, #28]
 801e4c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e4c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801e4cc:	b2da      	uxtb	r2, r3
 801e4ce:	4b51      	ldr	r3, [pc, #324]	; (801e614 <anim_timer+0x184>)
 801e4d0:	781b      	ldrb	r3, [r3, #0]
 801e4d2:	429a      	cmp	r2, r3
 801e4d4:	f000 8081 	beq.w	801e5da <anim_timer+0x14a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 801e4d8:	4b4e      	ldr	r3, [pc, #312]	; (801e614 <anim_timer+0x184>)
 801e4da:	7819      	ldrb	r1, [r3, #0]
 801e4dc:	69fa      	ldr	r2, [r7, #28]
 801e4de:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801e4e2:	f361 0382 	bfi	r3, r1, #2, #1
 801e4e6:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 801e4ea:	69fb      	ldr	r3, [r7, #28]
 801e4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e4ee:	461a      	mov	r2, r3
 801e4f0:	69bb      	ldr	r3, [r7, #24]
 801e4f2:	4413      	add	r3, r2
 801e4f4:	617b      	str	r3, [r7, #20]
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 801e4f6:	69fb      	ldr	r3, [r7, #28]
 801e4f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e4fc:	f003 0308 	and.w	r3, r3, #8
 801e500:	b2db      	uxtb	r3, r3
 801e502:	2b00      	cmp	r3, #0
 801e504:	d132      	bne.n	801e56c <anim_timer+0xdc>
 801e506:	69fb      	ldr	r3, [r7, #28]
 801e508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	dc2e      	bgt.n	801e56c <anim_timer+0xdc>
 801e50e:	697b      	ldr	r3, [r7, #20]
 801e510:	2b00      	cmp	r3, #0
 801e512:	db2b      	blt.n	801e56c <anim_timer+0xdc>
                if(a->early_apply == 0 && a->get_value_cb) {
 801e514:	69fb      	ldr	r3, [r7, #28]
 801e516:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e51a:	f003 0301 	and.w	r3, r3, #1
 801e51e:	b2db      	uxtb	r3, r3
 801e520:	2b00      	cmp	r3, #0
 801e522:	d114      	bne.n	801e54e <anim_timer+0xbe>
 801e524:	69fb      	ldr	r3, [r7, #28]
 801e526:	695b      	ldr	r3, [r3, #20]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d010      	beq.n	801e54e <anim_timer+0xbe>
                    int32_t v_ofs = a->get_value_cb(a);
 801e52c:	69fb      	ldr	r3, [r7, #28]
 801e52e:	695b      	ldr	r3, [r3, #20]
 801e530:	69f8      	ldr	r0, [r7, #28]
 801e532:	4798      	blx	r3
 801e534:	6138      	str	r0, [r7, #16]
                    a->start_value += v_ofs;
 801e536:	69fb      	ldr	r3, [r7, #28]
 801e538:	6a1a      	ldr	r2, [r3, #32]
 801e53a:	693b      	ldr	r3, [r7, #16]
 801e53c:	441a      	add	r2, r3
 801e53e:	69fb      	ldr	r3, [r7, #28]
 801e540:	621a      	str	r2, [r3, #32]
                    a->end_value += v_ofs;
 801e542:	69fb      	ldr	r3, [r7, #28]
 801e544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e546:	693b      	ldr	r3, [r7, #16]
 801e548:	441a      	add	r2, r3
 801e54a:	69fb      	ldr	r3, [r7, #28]
 801e54c:	629a      	str	r2, [r3, #40]	; 0x28
                }
                if(a->start_cb) a->start_cb(a);
 801e54e:	69fb      	ldr	r3, [r7, #28]
 801e550:	689b      	ldr	r3, [r3, #8]
 801e552:	2b00      	cmp	r3, #0
 801e554:	d003      	beq.n	801e55e <anim_timer+0xce>
 801e556:	69fb      	ldr	r3, [r7, #28]
 801e558:	689b      	ldr	r3, [r3, #8]
 801e55a:	69f8      	ldr	r0, [r7, #28]
 801e55c:	4798      	blx	r3
                a->start_cb_called = 1;
 801e55e:	69fa      	ldr	r2, [r7, #28]
 801e560:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801e564:	f043 0308 	orr.w	r3, r3, #8
 801e568:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
            a->act_time += elaps;
 801e56c:	69fb      	ldr	r3, [r7, #28]
 801e56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e570:	461a      	mov	r2, r3
 801e572:	69bb      	ldr	r3, [r7, #24]
 801e574:	4413      	add	r3, r2
 801e576:	461a      	mov	r2, r3
 801e578:	69fb      	ldr	r3, [r7, #28]
 801e57a:	631a      	str	r2, [r3, #48]	; 0x30
            if(a->act_time >= 0) {
 801e57c:	69fb      	ldr	r3, [r7, #28]
 801e57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e580:	2b00      	cmp	r3, #0
 801e582:	db2a      	blt.n	801e5da <anim_timer+0x14a>
                if(a->act_time > a->time) a->act_time = a->time;
 801e584:	69fb      	ldr	r3, [r7, #28]
 801e586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e588:	69fb      	ldr	r3, [r7, #28]
 801e58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e58c:	429a      	cmp	r2, r3
 801e58e:	dd03      	ble.n	801e598 <anim_timer+0x108>
 801e590:	69fb      	ldr	r3, [r7, #28]
 801e592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e594:	69fb      	ldr	r3, [r7, #28]
 801e596:	631a      	str	r2, [r3, #48]	; 0x30

                int32_t new_value;
                new_value = a->path_cb(a);
 801e598:	69fb      	ldr	r3, [r7, #28]
 801e59a:	69db      	ldr	r3, [r3, #28]
 801e59c:	69f8      	ldr	r0, [r7, #28]
 801e59e:	4798      	blx	r3
 801e5a0:	60f8      	str	r0, [r7, #12]

                if(new_value != a->current_value) {
 801e5a2:	69fb      	ldr	r3, [r7, #28]
 801e5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5a6:	68fa      	ldr	r2, [r7, #12]
 801e5a8:	429a      	cmp	r2, r3
 801e5aa:	d00d      	beq.n	801e5c8 <anim_timer+0x138>
                    a->current_value = new_value;
 801e5ac:	69fb      	ldr	r3, [r7, #28]
 801e5ae:	68fa      	ldr	r2, [r7, #12]
 801e5b0:	625a      	str	r2, [r3, #36]	; 0x24
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801e5b2:	69fb      	ldr	r3, [r7, #28]
 801e5b4:	685b      	ldr	r3, [r3, #4]
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	d006      	beq.n	801e5c8 <anim_timer+0x138>
 801e5ba:	69fb      	ldr	r3, [r7, #28]
 801e5bc:	685b      	ldr	r3, [r3, #4]
 801e5be:	69fa      	ldr	r2, [r7, #28]
 801e5c0:	6812      	ldr	r2, [r2, #0]
 801e5c2:	68f9      	ldr	r1, [r7, #12]
 801e5c4:	4610      	mov	r0, r2
 801e5c6:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 801e5c8:	69fb      	ldr	r3, [r7, #28]
 801e5ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e5cc:	69fb      	ldr	r3, [r7, #28]
 801e5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e5d0:	429a      	cmp	r2, r3
 801e5d2:	db02      	blt.n	801e5da <anim_timer+0x14a>
                    anim_ready_handler(a);
 801e5d4:	69f8      	ldr	r0, [r7, #28]
 801e5d6:	f000 f823 	bl	801e620 <anim_ready_handler>
            }
        }

        /*If the linked list changed due to anim. delete then it's not safe to continue
         *the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 801e5da:	4b10      	ldr	r3, [pc, #64]	; (801e61c <anim_timer+0x18c>)
 801e5dc:	781b      	ldrb	r3, [r3, #0]
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d004      	beq.n	801e5ec <anim_timer+0x15c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801e5e2:	480d      	ldr	r0, [pc, #52]	; (801e618 <anim_timer+0x188>)
 801e5e4:	f001 fb1b 	bl	801fc1e <_lv_ll_get_head>
 801e5e8:	61f8      	str	r0, [r7, #28]
 801e5ea:	e004      	b.n	801e5f6 <anim_timer+0x166>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801e5ec:	69f9      	ldr	r1, [r7, #28]
 801e5ee:	480a      	ldr	r0, [pc, #40]	; (801e618 <anim_timer+0x188>)
 801e5f0:	f001 fb37 	bl	801fc62 <_lv_ll_get_next>
 801e5f4:	61f8      	str	r0, [r7, #28]
    while(a != NULL) {
 801e5f6:	69fb      	ldr	r3, [r7, #28]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	f47f af5f 	bne.w	801e4bc <anim_timer+0x2c>
    }

    last_timer_run = lv_tick_get();
 801e5fe:	f7ff fd97 	bl	801e130 <lv_tick_get>
 801e602:	4603      	mov	r3, r0
 801e604:	4a02      	ldr	r2, [pc, #8]	; (801e610 <anim_timer+0x180>)
 801e606:	6013      	str	r3, [r2, #0]
}
 801e608:	bf00      	nop
 801e60a:	3720      	adds	r7, #32
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd80      	pop	{r7, pc}
 801e610:	200007d8 	.word	0x200007d8
 801e614:	200007dd 	.word	0x200007dd
 801e618:	2000081c 	.word	0x2000081c
 801e61c:	200007dc 	.word	0x200007dc

0801e620 <anim_ready_handler>:
 * Called when an animation is ready to do the necessary thinks
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 */
static void anim_ready_handler(lv_anim_t * a)
{
 801e620:	b580      	push	{r7, lr}
 801e622:	b084      	sub	sp, #16
 801e624:	af00      	add	r7, sp, #0
 801e626:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e62e:	f003 0302 	and.w	r3, r3, #2
 801e632:	b2db      	uxtb	r3, r3
 801e634:	2b00      	cmp	r3, #0
 801e636:	d113      	bne.n	801e660 <anim_ready_handler+0x40>
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d00e      	beq.n	801e660 <anim_ready_handler+0x40>
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801e648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e64c:	4293      	cmp	r3, r2
 801e64e:	d007      	beq.n	801e660 <anim_ready_handler+0x40>
        a->repeat_cnt--;
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801e656:	3b01      	subs	r3, #1
 801e658:	b29a      	uxth	r2, r3
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready*/
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801e666:	2b00      	cmp	r3, #0
 801e668:	d125      	bne.n	801e6b6 <anim_ready_handler+0x96>
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d007      	beq.n	801e682 <anim_ready_handler+0x62>
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e678:	f003 0302 	and.w	r3, r3, #2
 801e67c:	b2db      	uxtb	r3, r3
 801e67e:	2b00      	cmp	r3, #0
 801e680:	d019      	beq.n	801e6b6 <anim_ready_handler+0x96>

        /*Delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801e682:	6879      	ldr	r1, [r7, #4]
 801e684:	482c      	ldr	r0, [pc, #176]	; (801e738 <anim_ready_handler+0x118>)
 801e686:	f001 fa6d 	bl	801fb64 <_lv_ll_remove>
        /*Flag that the list has changed*/
        anim_mark_list_change();
 801e68a:	f000 f857 	bl	801e73c <anim_mark_list_change>

        /*Call the callback function at the end*/
        if(a->ready_cb != NULL) a->ready_cb(a);
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	68db      	ldr	r3, [r3, #12]
 801e692:	2b00      	cmp	r3, #0
 801e694:	d003      	beq.n	801e69e <anim_ready_handler+0x7e>
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	68db      	ldr	r3, [r3, #12]
 801e69a:	6878      	ldr	r0, [r7, #4]
 801e69c:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	691b      	ldr	r3, [r3, #16]
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d003      	beq.n	801e6ae <anim_ready_handler+0x8e>
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	691b      	ldr	r3, [r3, #16]
 801e6aa:	6878      	ldr	r0, [r7, #4]
 801e6ac:	4798      	blx	r3
        lv_mem_free(a);
 801e6ae:	6878      	ldr	r0, [r7, #4]
 801e6b0:	f001 fca4 	bl	801fffc <lv_mem_free>
            tmp = a->time;
            a->time = a->playback_time;
            a->playback_time = tmp;
        }
    }
}
 801e6b4:	e03c      	b.n	801e730 <anim_ready_handler+0x110>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6ba:	425a      	negs	r2, r3
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	631a      	str	r2, [r3, #48]	; 0x30
        if(a->playback_time != 0) {
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d033      	beq.n	801e730 <anim_ready_handler+0x110>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 801e6c8:	687b      	ldr	r3, [r7, #4]
 801e6ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e6ce:	f003 0302 	and.w	r3, r3, #2
 801e6d2:	b2db      	uxtb	r3, r3
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d104      	bne.n	801e6e2 <anim_ready_handler+0xc2>
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e6dc:	425a      	negs	r2, r3
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	631a      	str	r2, [r3, #48]	; 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e6e8:	f003 0302 	and.w	r3, r3, #2
 801e6ec:	b2db      	uxtb	r3, r3
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	bf0c      	ite	eq
 801e6f2:	2301      	moveq	r3, #1
 801e6f4:	2300      	movne	r3, #0
 801e6f6:	b2d9      	uxtb	r1, r3
 801e6f8:	687a      	ldr	r2, [r7, #4]
 801e6fa:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801e6fe:	f361 0341 	bfi	r3, r1, #1, #1
 801e702:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            int32_t tmp    = a->start_value;
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	6a1b      	ldr	r3, [r3, #32]
 801e70a:	60fb      	str	r3, [r7, #12]
            a->start_value = a->end_value;
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	621a      	str	r2, [r3, #32]
            a->end_value   = tmp;
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	68fa      	ldr	r2, [r7, #12]
 801e718:	629a      	str	r2, [r3, #40]	; 0x28
            tmp = a->time;
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e71e:	60fb      	str	r3, [r7, #12]
            a->time = a->playback_time;
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e724:	461a      	mov	r2, r3
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	62da      	str	r2, [r3, #44]	; 0x2c
            a->playback_time = tmp;
 801e72a:	68fa      	ldr	r2, [r7, #12]
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	639a      	str	r2, [r3, #56]	; 0x38
}
 801e730:	bf00      	nop
 801e732:	3710      	adds	r7, #16
 801e734:	46bd      	mov	sp, r7
 801e736:	bd80      	pop	{r7, pc}
 801e738:	2000081c 	.word	0x2000081c

0801e73c <anim_mark_list_change>:

static void anim_mark_list_change(void)
{
 801e73c:	b580      	push	{r7, lr}
 801e73e:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 801e740:	4b0a      	ldr	r3, [pc, #40]	; (801e76c <anim_mark_list_change+0x30>)
 801e742:	2201      	movs	r2, #1
 801e744:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801e746:	480a      	ldr	r0, [pc, #40]	; (801e770 <anim_mark_list_change+0x34>)
 801e748:	f001 fa69 	bl	801fc1e <_lv_ll_get_head>
 801e74c:	4603      	mov	r3, r0
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d105      	bne.n	801e75e <anim_mark_list_change+0x22>
        lv_timer_pause(_lv_anim_tmr);
 801e752:	4b08      	ldr	r3, [pc, #32]	; (801e774 <anim_mark_list_change+0x38>)
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	4618      	mov	r0, r3
 801e758:	f002 fe86 	bl	8021468 <lv_timer_pause>
    else
        lv_timer_resume(_lv_anim_tmr);
}
 801e75c:	e004      	b.n	801e768 <anim_mark_list_change+0x2c>
        lv_timer_resume(_lv_anim_tmr);
 801e75e:	4b05      	ldr	r3, [pc, #20]	; (801e774 <anim_mark_list_change+0x38>)
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	4618      	mov	r0, r3
 801e764:	f002 fe8f 	bl	8021486 <lv_timer_resume>
}
 801e768:	bf00      	nop
 801e76a:	bd80      	pop	{r7, pc}
 801e76c:	200007dc 	.word	0x200007dc
 801e770:	2000081c 	.word	0x2000081c
 801e774:	200007e0 	.word	0x200007e0

0801e778 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801e778:	b480      	push	{r7}
 801e77a:	b083      	sub	sp, #12
 801e77c:	af00      	add	r7, sp, #0
 801e77e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e786:	b29a      	uxth	r2, r3
 801e788:	687b      	ldr	r3, [r7, #4]
 801e78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e78e:	b29b      	uxth	r3, r3
 801e790:	1ad3      	subs	r3, r2, r3
 801e792:	b29b      	uxth	r3, r3
 801e794:	3301      	adds	r3, #1
 801e796:	b29b      	uxth	r3, r3
 801e798:	b21b      	sxth	r3, r3
}
 801e79a:	4618      	mov	r0, r3
 801e79c:	370c      	adds	r7, #12
 801e79e:	46bd      	mov	sp, r7
 801e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7a4:	4770      	bx	lr

0801e7a6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801e7a6:	b480      	push	{r7}
 801e7a8:	b083      	sub	sp, #12
 801e7aa:	af00      	add	r7, sp, #0
 801e7ac:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e7b4:	b29a      	uxth	r2, r3
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e7bc:	b29b      	uxth	r3, r3
 801e7be:	1ad3      	subs	r3, r2, r3
 801e7c0:	b29b      	uxth	r3, r3
 801e7c2:	3301      	adds	r3, #1
 801e7c4:	b29b      	uxth	r3, r3
 801e7c6:	b21b      	sxth	r3, r3
}
 801e7c8:	4618      	mov	r0, r3
 801e7ca:	370c      	adds	r7, #12
 801e7cc:	46bd      	mov	sp, r7
 801e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7d2:	4770      	bx	lr

0801e7d4 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 801e7d4:	b480      	push	{r7}
 801e7d6:	b085      	sub	sp, #20
 801e7d8:	af00      	add	r7, sp, #0
 801e7da:	60f8      	str	r0, [r7, #12]
 801e7dc:	4608      	mov	r0, r1
 801e7de:	4611      	mov	r1, r2
 801e7e0:	461a      	mov	r2, r3
 801e7e2:	4603      	mov	r3, r0
 801e7e4:	817b      	strh	r3, [r7, #10]
 801e7e6:	460b      	mov	r3, r1
 801e7e8:	813b      	strh	r3, [r7, #8]
 801e7ea:	4613      	mov	r3, r2
 801e7ec:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 801e7ee:	68fb      	ldr	r3, [r7, #12]
 801e7f0:	897a      	ldrh	r2, [r7, #10]
 801e7f2:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 801e7f4:	68fb      	ldr	r3, [r7, #12]
 801e7f6:	893a      	ldrh	r2, [r7, #8]
 801e7f8:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	88fa      	ldrh	r2, [r7, #6]
 801e7fe:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	8b3a      	ldrh	r2, [r7, #24]
 801e804:	80da      	strh	r2, [r3, #6]
}
 801e806:	bf00      	nop
 801e808:	3714      	adds	r7, #20
 801e80a:	46bd      	mov	sp, r7
 801e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e810:	4770      	bx	lr

0801e812 <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 801e812:	b480      	push	{r7}
 801e814:	b083      	sub	sp, #12
 801e816:	af00      	add	r7, sp, #0
 801e818:	6078      	str	r0, [r7, #4]
 801e81a:	460b      	mov	r3, r1
 801e81c:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e824:	b29a      	uxth	r2, r3
 801e826:	887b      	ldrh	r3, [r7, #2]
 801e828:	4413      	add	r3, r2
 801e82a:	b29b      	uxth	r3, r3
 801e82c:	3b01      	subs	r3, #1
 801e82e:	b29b      	uxth	r3, r3
 801e830:	b21a      	sxth	r2, r3
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	80da      	strh	r2, [r3, #6]
}
 801e836:	bf00      	nop
 801e838:	370c      	adds	r7, #12
 801e83a:	46bd      	mov	sp, r7
 801e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e840:	4770      	bx	lr

0801e842 <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 801e842:	b480      	push	{r7}
 801e844:	b085      	sub	sp, #20
 801e846:	af00      	add	r7, sp, #0
 801e848:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e850:	461a      	mov	r2, r3
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e858:	1ad3      	subs	r3, r2, r3
 801e85a:	3301      	adds	r3, #1
 801e85c:	461a      	mov	r2, r3
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e864:	4619      	mov	r1, r3
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e86c:	1acb      	subs	r3, r1, r3
 801e86e:	3301      	adds	r3, #1
 801e870:	fb02 f303 	mul.w	r3, r2, r3
 801e874:	60fb      	str	r3, [r7, #12]

    return size;
 801e876:	68fb      	ldr	r3, [r7, #12]
}
 801e878:	4618      	mov	r0, r3
 801e87a:	3714      	adds	r7, #20
 801e87c:	46bd      	mov	sp, r7
 801e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e882:	4770      	bx	lr

0801e884 <lv_area_increase>:

void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra)
{
 801e884:	b480      	push	{r7}
 801e886:	b083      	sub	sp, #12
 801e888:	af00      	add	r7, sp, #0
 801e88a:	6078      	str	r0, [r7, #4]
 801e88c:	460b      	mov	r3, r1
 801e88e:	807b      	strh	r3, [r7, #2]
 801e890:	4613      	mov	r3, r2
 801e892:	803b      	strh	r3, [r7, #0]
    area->x1 -= w_extra;
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e89a:	b29a      	uxth	r2, r3
 801e89c:	887b      	ldrh	r3, [r7, #2]
 801e89e:	1ad3      	subs	r3, r2, r3
 801e8a0:	b29b      	uxth	r3, r3
 801e8a2:	b21a      	sxth	r2, r3
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	801a      	strh	r2, [r3, #0]
    area->x2 += w_extra;
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e8ae:	b29a      	uxth	r2, r3
 801e8b0:	887b      	ldrh	r3, [r7, #2]
 801e8b2:	4413      	add	r3, r2
 801e8b4:	b29b      	uxth	r3, r3
 801e8b6:	b21a      	sxth	r2, r3
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	809a      	strh	r2, [r3, #4]
    area->y1 -= h_extra;
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e8c2:	b29a      	uxth	r2, r3
 801e8c4:	883b      	ldrh	r3, [r7, #0]
 801e8c6:	1ad3      	subs	r3, r2, r3
 801e8c8:	b29b      	uxth	r3, r3
 801e8ca:	b21a      	sxth	r2, r3
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	805a      	strh	r2, [r3, #2]
    area->y2 += h_extra;
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e8d6:	b29a      	uxth	r2, r3
 801e8d8:	883b      	ldrh	r3, [r7, #0]
 801e8da:	4413      	add	r3, r2
 801e8dc:	b29b      	uxth	r3, r3
 801e8de:	b21a      	sxth	r2, r3
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	80da      	strh	r2, [r3, #6]
}
 801e8e4:	bf00      	nop
 801e8e6:	370c      	adds	r7, #12
 801e8e8:	46bd      	mov	sp, r7
 801e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ee:	4770      	bx	lr

0801e8f0 <lv_area_move>:

void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 801e8f0:	b480      	push	{r7}
 801e8f2:	b083      	sub	sp, #12
 801e8f4:	af00      	add	r7, sp, #0
 801e8f6:	6078      	str	r0, [r7, #4]
 801e8f8:	460b      	mov	r3, r1
 801e8fa:	807b      	strh	r3, [r7, #2]
 801e8fc:	4613      	mov	r3, r2
 801e8fe:	803b      	strh	r3, [r7, #0]
    area->x1 += x_ofs;
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e906:	b29a      	uxth	r2, r3
 801e908:	887b      	ldrh	r3, [r7, #2]
 801e90a:	4413      	add	r3, r2
 801e90c:	b29b      	uxth	r3, r3
 801e90e:	b21a      	sxth	r2, r3
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	801a      	strh	r2, [r3, #0]
    area->x2 += x_ofs;
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e91a:	b29a      	uxth	r2, r3
 801e91c:	887b      	ldrh	r3, [r7, #2]
 801e91e:	4413      	add	r3, r2
 801e920:	b29b      	uxth	r3, r3
 801e922:	b21a      	sxth	r2, r3
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	809a      	strh	r2, [r3, #4]
    area->y1 += y_ofs;
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e92e:	b29a      	uxth	r2, r3
 801e930:	883b      	ldrh	r3, [r7, #0]
 801e932:	4413      	add	r3, r2
 801e934:	b29b      	uxth	r3, r3
 801e936:	b21a      	sxth	r2, r3
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	805a      	strh	r2, [r3, #2]
    area->y2 += y_ofs;
 801e93c:	687b      	ldr	r3, [r7, #4]
 801e93e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e942:	b29a      	uxth	r2, r3
 801e944:	883b      	ldrh	r3, [r7, #0]
 801e946:	4413      	add	r3, r2
 801e948:	b29b      	uxth	r3, r3
 801e94a:	b21a      	sxth	r2, r3
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	80da      	strh	r2, [r3, #6]
}
 801e950:	bf00      	nop
 801e952:	370c      	adds	r7, #12
 801e954:	46bd      	mov	sp, r7
 801e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e95a:	4770      	bx	lr

0801e95c <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801e95c:	b480      	push	{r7}
 801e95e:	b087      	sub	sp, #28
 801e960:	af00      	add	r7, sp, #0
 801e962:	60f8      	str	r0, [r7, #12]
 801e964:	60b9      	str	r1, [r7, #8]
 801e966:	607a      	str	r2, [r7, #4]
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e96e:	68bb      	ldr	r3, [r7, #8]
 801e970:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e974:	4293      	cmp	r3, r2
 801e976:	bfb8      	it	lt
 801e978:	4613      	movlt	r3, r2
 801e97a:	b21a      	sxth	r2, r3
 801e97c:	68fb      	ldr	r3, [r7, #12]
 801e97e:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e986:	68bb      	ldr	r3, [r7, #8]
 801e988:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e98c:	4293      	cmp	r3, r2
 801e98e:	bfb8      	it	lt
 801e990:	4613      	movlt	r3, r2
 801e992:	b21a      	sxth	r2, r3
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e99e:	68bb      	ldr	r3, [r7, #8]
 801e9a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e9a4:	4293      	cmp	r3, r2
 801e9a6:	bfa8      	it	ge
 801e9a8:	4613      	movge	r3, r2
 801e9aa:	b21a      	sxth	r2, r3
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e9b6:	68bb      	ldr	r3, [r7, #8]
 801e9b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e9bc:	4293      	cmp	r3, r2
 801e9be:	bfa8      	it	ge
 801e9c0:	4613      	movge	r3, r2
 801e9c2:	b21a      	sxth	r2, r3
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 801e9c8:	2301      	movs	r3, #1
 801e9ca:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e9d2:	68fb      	ldr	r3, [r7, #12]
 801e9d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e9d8:	429a      	cmp	r2, r3
 801e9da:	dc07      	bgt.n	801e9ec <_lv_area_intersect+0x90>
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e9e2:	68fb      	ldr	r3, [r7, #12]
 801e9e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e9e8:	429a      	cmp	r2, r3
 801e9ea:	dd01      	ble.n	801e9f0 <_lv_area_intersect+0x94>
        union_ok = false;
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 801e9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	371c      	adds	r7, #28
 801e9f6:	46bd      	mov	sp, r7
 801e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9fc:	4770      	bx	lr

0801e9fe <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801e9fe:	b480      	push	{r7}
 801ea00:	b085      	sub	sp, #20
 801ea02:	af00      	add	r7, sp, #0
 801ea04:	60f8      	str	r0, [r7, #12]
 801ea06:	60b9      	str	r1, [r7, #8]
 801ea08:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ea10:	68bb      	ldr	r3, [r7, #8]
 801ea12:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ea16:	4293      	cmp	r3, r2
 801ea18:	bfa8      	it	ge
 801ea1a:	4613      	movge	r3, r2
 801ea1c:	b21a      	sxth	r2, r3
 801ea1e:	68fb      	ldr	r3, [r7, #12]
 801ea20:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ea28:	68bb      	ldr	r3, [r7, #8]
 801ea2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ea2e:	4293      	cmp	r3, r2
 801ea30:	bfa8      	it	ge
 801ea32:	4613      	movge	r3, r2
 801ea34:	b21a      	sxth	r2, r3
 801ea36:	68fb      	ldr	r3, [r7, #12]
 801ea38:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ea40:	68bb      	ldr	r3, [r7, #8]
 801ea42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ea46:	4293      	cmp	r3, r2
 801ea48:	bfb8      	it	lt
 801ea4a:	4613      	movlt	r3, r2
 801ea4c:	b21a      	sxth	r2, r3
 801ea4e:	68fb      	ldr	r3, [r7, #12]
 801ea50:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ea58:	68bb      	ldr	r3, [r7, #8]
 801ea5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ea5e:	4293      	cmp	r3, r2
 801ea60:	bfb8      	it	lt
 801ea62:	4613      	movlt	r3, r2
 801ea64:	b21a      	sxth	r2, r3
 801ea66:	68fb      	ldr	r3, [r7, #12]
 801ea68:	80da      	strh	r2, [r3, #6]
}
 801ea6a:	bf00      	nop
 801ea6c:	3714      	adds	r7, #20
 801ea6e:	46bd      	mov	sp, r7
 801ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea74:	4770      	bx	lr

0801ea76 <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 801ea76:	b580      	push	{r7, lr}
 801ea78:	b088      	sub	sp, #32
 801ea7a:	af00      	add	r7, sp, #0
 801ea7c:	60f8      	str	r0, [r7, #12]
 801ea7e:	60b9      	str	r1, [r7, #8]
 801ea80:	4613      	mov	r3, r2
 801ea82:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 801ea84:	2300      	movs	r3, #0
 801ea86:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801ea88:	68bb      	ldr	r3, [r7, #8]
 801ea8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ea94:	429a      	cmp	r2, r3
 801ea96:	db19      	blt.n	801eacc <_lv_area_is_point_on+0x56>
 801ea98:	68bb      	ldr	r3, [r7, #8]
 801ea9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ea9e:	68fb      	ldr	r3, [r7, #12]
 801eaa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eaa4:	429a      	cmp	r2, r3
 801eaa6:	dc11      	bgt.n	801eacc <_lv_area_is_point_on+0x56>
 801eaa8:	68bb      	ldr	r3, [r7, #8]
 801eaaa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801eab4:	429a      	cmp	r2, r3
 801eab6:	db09      	blt.n	801eacc <_lv_area_is_point_on+0x56>
 801eab8:	68bb      	ldr	r3, [r7, #8]
 801eaba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801eabe:	68fb      	ldr	r3, [r7, #12]
 801eac0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801eac4:	429a      	cmp	r2, r3
 801eac6:	dc01      	bgt.n	801eacc <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 801eac8:	2301      	movs	r3, #1
 801eaca:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 801eacc:	7ffb      	ldrb	r3, [r7, #31]
 801eace:	f083 0301 	eor.w	r3, r3, #1
 801ead2:	b2db      	uxtb	r3, r3
 801ead4:	2b00      	cmp	r3, #0
 801ead6:	d001      	beq.n	801eadc <_lv_area_is_point_on+0x66>
        return false;
 801ead8:	2300      	movs	r3, #0
 801eada:	e0f1      	b.n	801ecc0 <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 801eadc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	dc01      	bgt.n	801eae8 <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 801eae4:	2301      	movs	r3, #1
 801eae6:	e0eb      	b.n	801ecc0 <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 801eae8:	68f8      	ldr	r0, [r7, #12]
 801eaea:	f7ff fe45 	bl	801e778 <lv_area_get_width>
 801eaee:	4603      	mov	r3, r0
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	da00      	bge.n	801eaf6 <_lv_area_is_point_on+0x80>
 801eaf4:	3301      	adds	r3, #1
 801eaf6:	105b      	asrs	r3, r3, #1
 801eaf8:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 801eafa:	68f8      	ldr	r0, [r7, #12]
 801eafc:	f7ff fe53 	bl	801e7a6 <lv_area_get_height>
 801eb00:	4603      	mov	r3, r0
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	da00      	bge.n	801eb08 <_lv_area_is_point_on+0x92>
 801eb06:	3301      	adds	r3, #1
 801eb08:	105b      	asrs	r3, r3, #1
 801eb0a:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MIN(w, h);
 801eb0c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801eb10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801eb14:	4293      	cmp	r3, r2
 801eb16:	bfa8      	it	ge
 801eb18:	4613      	movge	r3, r2
 801eb1a:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 801eb1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801eb20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801eb24:	429a      	cmp	r2, r3
 801eb26:	dd01      	ble.n	801eb2c <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 801eb28:	8b3b      	ldrh	r3, [r7, #24]
 801eb2a:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb32:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 801eb34:	68fb      	ldr	r3, [r7, #12]
 801eb36:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb3a:	b29a      	uxth	r2, r3
 801eb3c:	88fb      	ldrh	r3, [r7, #6]
 801eb3e:	4413      	add	r3, r2
 801eb40:	b29b      	uxth	r3, r3
 801eb42:	b21b      	sxth	r3, r3
 801eb44:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 801eb46:	68fb      	ldr	r3, [r7, #12]
 801eb48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801eb4c:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801eb54:	b29a      	uxth	r2, r3
 801eb56:	88fb      	ldrh	r3, [r7, #6]
 801eb58:	4413      	add	r3, r2
 801eb5a:	b29b      	uxth	r3, r3
 801eb5c:	b21b      	sxth	r3, r3
 801eb5e:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801eb60:	f107 0310 	add.w	r3, r7, #16
 801eb64:	2200      	movs	r2, #0
 801eb66:	68b9      	ldr	r1, [r7, #8]
 801eb68:	4618      	mov	r0, r3
 801eb6a:	f7ff ff84 	bl	801ea76 <_lv_area_is_point_on>
 801eb6e:	4603      	mov	r3, r0
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d017      	beq.n	801eba4 <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 801eb74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eb78:	b29a      	uxth	r2, r3
 801eb7a:	88fb      	ldrh	r3, [r7, #6]
 801eb7c:	4413      	add	r3, r2
 801eb7e:	b29b      	uxth	r3, r3
 801eb80:	b21b      	sxth	r3, r3
 801eb82:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 801eb84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801eb88:	b29a      	uxth	r2, r3
 801eb8a:	88fb      	ldrh	r3, [r7, #6]
 801eb8c:	4413      	add	r3, r2
 801eb8e:	b29b      	uxth	r3, r3
 801eb90:	b21b      	sxth	r3, r3
 801eb92:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801eb94:	f107 0310 	add.w	r3, r7, #16
 801eb98:	68b9      	ldr	r1, [r7, #8]
 801eb9a:	4618      	mov	r0, r3
 801eb9c:	f000 fb30 	bl	801f200 <lv_point_within_circle>
 801eba0:	4603      	mov	r3, r0
 801eba2:	e08d      	b.n	801ecc0 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 801eba4:	68fb      	ldr	r3, [r7, #12]
 801eba6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ebaa:	b29a      	uxth	r2, r3
 801ebac:	88fb      	ldrh	r3, [r7, #6]
 801ebae:	1ad3      	subs	r3, r2, r3
 801ebb0:	b29b      	uxth	r3, r3
 801ebb2:	b21b      	sxth	r3, r3
 801ebb4:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ebbc:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801ebbe:	f107 0310 	add.w	r3, r7, #16
 801ebc2:	2200      	movs	r2, #0
 801ebc4:	68b9      	ldr	r1, [r7, #8]
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	f7ff ff55 	bl	801ea76 <_lv_area_is_point_on>
 801ebcc:	4603      	mov	r3, r0
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d017      	beq.n	801ec02 <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 801ebd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ebd6:	b29a      	uxth	r2, r3
 801ebd8:	88fb      	ldrh	r3, [r7, #6]
 801ebda:	4413      	add	r3, r2
 801ebdc:	b29b      	uxth	r3, r3
 801ebde:	b21b      	sxth	r3, r3
 801ebe0:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 801ebe2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ebe6:	b29a      	uxth	r2, r3
 801ebe8:	88fb      	ldrh	r3, [r7, #6]
 801ebea:	1ad3      	subs	r3, r2, r3
 801ebec:	b29b      	uxth	r3, r3
 801ebee:	b21b      	sxth	r3, r3
 801ebf0:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801ebf2:	f107 0310 	add.w	r3, r7, #16
 801ebf6:	68b9      	ldr	r1, [r7, #8]
 801ebf8:	4618      	mov	r0, r3
 801ebfa:	f000 fb01 	bl	801f200 <lv_point_within_circle>
 801ebfe:	4603      	mov	r3, r0
 801ec00:	e05e      	b.n	801ecc0 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ec08:	b29a      	uxth	r2, r3
 801ec0a:	88fb      	ldrh	r3, [r7, #6]
 801ec0c:	1ad3      	subs	r3, r2, r3
 801ec0e:	b29b      	uxth	r3, r3
 801ec10:	b21b      	sxth	r3, r3
 801ec12:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 801ec14:	68fb      	ldr	r3, [r7, #12]
 801ec16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ec1a:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801ec1c:	f107 0310 	add.w	r3, r7, #16
 801ec20:	2200      	movs	r2, #0
 801ec22:	68b9      	ldr	r1, [r7, #8]
 801ec24:	4618      	mov	r0, r3
 801ec26:	f7ff ff26 	bl	801ea76 <_lv_area_is_point_on>
 801ec2a:	4603      	mov	r3, r0
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d017      	beq.n	801ec60 <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 801ec30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801ec34:	b29a      	uxth	r2, r3
 801ec36:	88fb      	ldrh	r3, [r7, #6]
 801ec38:	1ad3      	subs	r3, r2, r3
 801ec3a:	b29b      	uxth	r3, r3
 801ec3c:	b21b      	sxth	r3, r3
 801ec3e:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 801ec40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ec44:	b29a      	uxth	r2, r3
 801ec46:	88fb      	ldrh	r3, [r7, #6]
 801ec48:	1ad3      	subs	r3, r2, r3
 801ec4a:	b29b      	uxth	r3, r3
 801ec4c:	b21b      	sxth	r3, r3
 801ec4e:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801ec50:	f107 0310 	add.w	r3, r7, #16
 801ec54:	68b9      	ldr	r1, [r7, #8]
 801ec56:	4618      	mov	r0, r3
 801ec58:	f000 fad2 	bl	801f200 <lv_point_within_circle>
 801ec5c:	4603      	mov	r3, r0
 801ec5e:	e02f      	b.n	801ecc0 <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ec66:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801ec68:	68fb      	ldr	r3, [r7, #12]
 801ec6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ec6e:	b29a      	uxth	r2, r3
 801ec70:	88fb      	ldrh	r3, [r7, #6]
 801ec72:	4413      	add	r3, r2
 801ec74:	b29b      	uxth	r3, r3
 801ec76:	b21b      	sxth	r3, r3
 801ec78:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801ec7a:	f107 0310 	add.w	r3, r7, #16
 801ec7e:	2200      	movs	r2, #0
 801ec80:	68b9      	ldr	r1, [r7, #8]
 801ec82:	4618      	mov	r0, r3
 801ec84:	f7ff fef7 	bl	801ea76 <_lv_area_is_point_on>
 801ec88:	4603      	mov	r3, r0
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d017      	beq.n	801ecbe <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 801ec8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801ec92:	b29a      	uxth	r2, r3
 801ec94:	88fb      	ldrh	r3, [r7, #6]
 801ec96:	1ad3      	subs	r3, r2, r3
 801ec98:	b29b      	uxth	r3, r3
 801ec9a:	b21b      	sxth	r3, r3
 801ec9c:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 801ec9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801eca2:	b29a      	uxth	r2, r3
 801eca4:	88fb      	ldrh	r3, [r7, #6]
 801eca6:	4413      	add	r3, r2
 801eca8:	b29b      	uxth	r3, r3
 801ecaa:	b21b      	sxth	r3, r3
 801ecac:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801ecae:	f107 0310 	add.w	r3, r7, #16
 801ecb2:	68b9      	ldr	r1, [r7, #8]
 801ecb4:	4618      	mov	r0, r3
 801ecb6:	f000 faa3 	bl	801f200 <lv_point_within_circle>
 801ecba:	4603      	mov	r3, r0
 801ecbc:	e000      	b.n	801ecc0 <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 801ecbe:	2301      	movs	r3, #1
}
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	3720      	adds	r7, #32
 801ecc4:	46bd      	mov	sp, r7
 801ecc6:	bd80      	pop	{r7, pc}

0801ecc8 <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801ecc8:	b480      	push	{r7}
 801ecca:	b083      	sub	sp, #12
 801eccc:	af00      	add	r7, sp, #0
 801ecce:	6078      	str	r0, [r7, #4]
 801ecd0:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ecd8:	683b      	ldr	r3, [r7, #0]
 801ecda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ecde:	429a      	cmp	r2, r3
 801ece0:	dc19      	bgt.n	801ed16 <_lv_area_is_on+0x4e>
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ece8:	683b      	ldr	r3, [r7, #0]
 801ecea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ecee:	429a      	cmp	r2, r3
 801ecf0:	db11      	blt.n	801ed16 <_lv_area_is_on+0x4e>
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ecf8:	683b      	ldr	r3, [r7, #0]
 801ecfa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ecfe:	429a      	cmp	r2, r3
 801ed00:	dc09      	bgt.n	801ed16 <_lv_area_is_on+0x4e>
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ed08:	683b      	ldr	r3, [r7, #0]
 801ed0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ed0e:	429a      	cmp	r2, r3
 801ed10:	db01      	blt.n	801ed16 <_lv_area_is_on+0x4e>
        return true;
 801ed12:	2301      	movs	r3, #1
 801ed14:	e000      	b.n	801ed18 <_lv_area_is_on+0x50>
    }
    else {
        return false;
 801ed16:	2300      	movs	r3, #0
    }
}
 801ed18:	4618      	mov	r0, r3
 801ed1a:	370c      	adds	r7, #12
 801ed1c:	46bd      	mov	sp, r7
 801ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed22:	4770      	bx	lr

0801ed24 <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 801ed24:	b580      	push	{r7, lr}
 801ed26:	b086      	sub	sp, #24
 801ed28:	af00      	add	r7, sp, #0
 801ed2a:	60f8      	str	r0, [r7, #12]
 801ed2c:	60b9      	str	r1, [r7, #8]
 801ed2e:	4613      	mov	r3, r2
 801ed30:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 801ed32:	2300      	movs	r3, #0
 801ed34:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801ed36:	68fb      	ldr	r3, [r7, #12]
 801ed38:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ed3c:	68bb      	ldr	r3, [r7, #8]
 801ed3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ed42:	429a      	cmp	r2, r3
 801ed44:	db19      	blt.n	801ed7a <_lv_area_is_in+0x56>
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ed4c:	68bb      	ldr	r3, [r7, #8]
 801ed4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ed52:	429a      	cmp	r2, r3
 801ed54:	db11      	blt.n	801ed7a <_lv_area_is_in+0x56>
 801ed56:	68fb      	ldr	r3, [r7, #12]
 801ed58:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ed5c:	68bb      	ldr	r3, [r7, #8]
 801ed5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ed62:	429a      	cmp	r2, r3
 801ed64:	dc09      	bgt.n	801ed7a <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ed6c:	68bb      	ldr	r3, [r7, #8]
 801ed6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801ed72:	429a      	cmp	r2, r3
 801ed74:	dc01      	bgt.n	801ed7a <_lv_area_is_in+0x56>
        is_in = true;
 801ed76:	2301      	movs	r3, #1
 801ed78:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 801ed7a:	7dfb      	ldrb	r3, [r7, #23]
 801ed7c:	f083 0301 	eor.w	r3, r3, #1
 801ed80:	b2db      	uxtb	r3, r3
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	d001      	beq.n	801ed8a <_lv_area_is_in+0x66>
 801ed86:	2300      	movs	r3, #0
 801ed88:	e066      	b.n	801ee58 <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 801ed8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d101      	bne.n	801ed96 <_lv_area_is_in+0x72>
 801ed92:	2301      	movs	r3, #1
 801ed94:	e060      	b.n	801ee58 <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 801ed96:	68fb      	ldr	r3, [r7, #12]
 801ed98:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ed9c:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801ed9e:	68fb      	ldr	r3, [r7, #12]
 801eda0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801eda4:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801eda6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801edaa:	f107 0310 	add.w	r3, r7, #16
 801edae:	4619      	mov	r1, r3
 801edb0:	68b8      	ldr	r0, [r7, #8]
 801edb2:	f7ff fe60 	bl	801ea76 <_lv_area_is_point_on>
 801edb6:	4603      	mov	r3, r0
 801edb8:	f083 0301 	eor.w	r3, r3, #1
 801edbc:	b2db      	uxtb	r3, r3
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d001      	beq.n	801edc6 <_lv_area_is_in+0xa2>
 801edc2:	2300      	movs	r3, #0
 801edc4:	e048      	b.n	801ee58 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801edc6:	68fb      	ldr	r3, [r7, #12]
 801edc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801edcc:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801edce:	68fb      	ldr	r3, [r7, #12]
 801edd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801edd4:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801edd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801edda:	f107 0310 	add.w	r3, r7, #16
 801edde:	4619      	mov	r1, r3
 801ede0:	68b8      	ldr	r0, [r7, #8]
 801ede2:	f7ff fe48 	bl	801ea76 <_lv_area_is_point_on>
 801ede6:	4603      	mov	r3, r0
 801ede8:	f083 0301 	eor.w	r3, r3, #1
 801edec:	b2db      	uxtb	r3, r3
 801edee:	2b00      	cmp	r3, #0
 801edf0:	d001      	beq.n	801edf6 <_lv_area_is_in+0xd2>
 801edf2:	2300      	movs	r3, #0
 801edf4:	e030      	b.n	801ee58 <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801edfc:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801edfe:	68fb      	ldr	r3, [r7, #12]
 801ee00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ee04:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801ee06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ee0a:	f107 0310 	add.w	r3, r7, #16
 801ee0e:	4619      	mov	r1, r3
 801ee10:	68b8      	ldr	r0, [r7, #8]
 801ee12:	f7ff fe30 	bl	801ea76 <_lv_area_is_point_on>
 801ee16:	4603      	mov	r3, r0
 801ee18:	f083 0301 	eor.w	r3, r3, #1
 801ee1c:	b2db      	uxtb	r3, r3
 801ee1e:	2b00      	cmp	r3, #0
 801ee20:	d001      	beq.n	801ee26 <_lv_area_is_in+0x102>
 801ee22:	2300      	movs	r3, #0
 801ee24:	e018      	b.n	801ee58 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ee2c:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801ee2e:	68fb      	ldr	r3, [r7, #12]
 801ee30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ee34:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801ee36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ee3a:	f107 0310 	add.w	r3, r7, #16
 801ee3e:	4619      	mov	r1, r3
 801ee40:	68b8      	ldr	r0, [r7, #8]
 801ee42:	f7ff fe18 	bl	801ea76 <_lv_area_is_point_on>
 801ee46:	4603      	mov	r3, r0
 801ee48:	f083 0301 	eor.w	r3, r3, #1
 801ee4c:	b2db      	uxtb	r3, r3
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d001      	beq.n	801ee56 <_lv_area_is_in+0x132>
 801ee52:	2300      	movs	r3, #0
 801ee54:	e000      	b.n	801ee58 <_lv_area_is_in+0x134>

    return true;
 801ee56:	2301      	movs	r3, #1
}
 801ee58:	4618      	mov	r0, r3
 801ee5a:	3718      	adds	r7, #24
 801ee5c:	46bd      	mov	sp, r7
 801ee5e:	bd80      	pop	{r7, pc}

0801ee60 <_lv_area_is_out>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `aout_p` is fully outside `aholder_p`
 */
bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 801ee60:	b580      	push	{r7, lr}
 801ee62:	b086      	sub	sp, #24
 801ee64:	af00      	add	r7, sp, #0
 801ee66:	60f8      	str	r0, [r7, #12]
 801ee68:	60b9      	str	r1, [r7, #8]
 801ee6a:	4613      	mov	r3, r2
 801ee6c:	80fb      	strh	r3, [r7, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 801ee6e:	68fb      	ldr	r3, [r7, #12]
 801ee70:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ee74:	68bb      	ldr	r3, [r7, #8]
 801ee76:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee7a:	429a      	cmp	r2, r3
 801ee7c:	db17      	blt.n	801eeae <_lv_area_is_out+0x4e>
 801ee7e:	68fb      	ldr	r3, [r7, #12]
 801ee80:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ee84:	68bb      	ldr	r3, [r7, #8]
 801ee86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ee8a:	429a      	cmp	r2, r3
 801ee8c:	db0f      	blt.n	801eeae <_lv_area_is_out+0x4e>
 801ee8e:	68fb      	ldr	r3, [r7, #12]
 801ee90:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ee94:	68bb      	ldr	r3, [r7, #8]
 801ee96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ee9a:	429a      	cmp	r2, r3
 801ee9c:	dc07      	bgt.n	801eeae <_lv_area_is_out+0x4e>
       aout_p->y1 > aholder_p->y2) {
 801ee9e:	68fb      	ldr	r3, [r7, #12]
 801eea0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801eea4:	68bb      	ldr	r3, [r7, #8]
 801eea6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 801eeaa:	429a      	cmp	r2, r3
 801eeac:	dd01      	ble.n	801eeb2 <_lv_area_is_out+0x52>
        return true;
 801eeae:	2301      	movs	r3, #1
 801eeb0:	e05a      	b.n	801ef68 <_lv_area_is_out+0x108>
    }

    if(radius == 0) return false;
 801eeb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	d101      	bne.n	801eebe <_lv_area_is_out+0x5e>
 801eeba:	2300      	movs	r3, #0
 801eebc:	e054      	b.n	801ef68 <_lv_area_is_out+0x108>

    /*Check if the corner points are outside the radius or not*/
    lv_point_t p;

    p.x = aout_p->x1;
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eec4:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 801eec6:	68fb      	ldr	r3, [r7, #12]
 801eec8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801eecc:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801eece:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801eed2:	f107 0314 	add.w	r3, r7, #20
 801eed6:	4619      	mov	r1, r3
 801eed8:	68b8      	ldr	r0, [r7, #8]
 801eeda:	f7ff fdcc 	bl	801ea76 <_lv_area_is_point_on>
 801eede:	4603      	mov	r3, r0
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	d001      	beq.n	801eee8 <_lv_area_is_out+0x88>
 801eee4:	2300      	movs	r3, #0
 801eee6:	e03f      	b.n	801ef68 <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 801eee8:	68fb      	ldr	r3, [r7, #12]
 801eeea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eeee:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 801eef0:	68fb      	ldr	r3, [r7, #12]
 801eef2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801eef6:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801eef8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801eefc:	f107 0314 	add.w	r3, r7, #20
 801ef00:	4619      	mov	r1, r3
 801ef02:	68b8      	ldr	r0, [r7, #8]
 801ef04:	f7ff fdb7 	bl	801ea76 <_lv_area_is_point_on>
 801ef08:	4603      	mov	r3, r0
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	d001      	beq.n	801ef12 <_lv_area_is_out+0xb2>
 801ef0e:	2300      	movs	r3, #0
 801ef10:	e02a      	b.n	801ef68 <_lv_area_is_out+0x108>

    p.x = aout_p->x1;
 801ef12:	68fb      	ldr	r3, [r7, #12]
 801ef14:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef18:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 801ef1a:	68fb      	ldr	r3, [r7, #12]
 801ef1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ef20:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801ef22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ef26:	f107 0314 	add.w	r3, r7, #20
 801ef2a:	4619      	mov	r1, r3
 801ef2c:	68b8      	ldr	r0, [r7, #8]
 801ef2e:	f7ff fda2 	bl	801ea76 <_lv_area_is_point_on>
 801ef32:	4603      	mov	r3, r0
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d001      	beq.n	801ef3c <_lv_area_is_out+0xdc>
 801ef38:	2300      	movs	r3, #0
 801ef3a:	e015      	b.n	801ef68 <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ef42:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 801ef44:	68fb      	ldr	r3, [r7, #12]
 801ef46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ef4a:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801ef4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ef50:	f107 0314 	add.w	r3, r7, #20
 801ef54:	4619      	mov	r1, r3
 801ef56:	68b8      	ldr	r0, [r7, #8]
 801ef58:	f7ff fd8d 	bl	801ea76 <_lv_area_is_point_on>
 801ef5c:	4603      	mov	r3, r0
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d001      	beq.n	801ef66 <_lv_area_is_out+0x106>
 801ef62:	2300      	movs	r3, #0
 801ef64:	e000      	b.n	801ef68 <_lv_area_is_out+0x108>

    return true;
 801ef66:	2301      	movs	r3, #1
}
 801ef68:	4618      	mov	r0, r3
 801ef6a:	3718      	adds	r7, #24
 801ef6c:	46bd      	mov	sp, r7
 801ef6e:	bd80      	pop	{r7, pc}

0801ef70 <lv_point_transform>:
    to_align->y2 = to_align->y1 + h - 1;
}

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot)
{
 801ef70:	b580      	push	{r7, lr}
 801ef72:	b08e      	sub	sp, #56	; 0x38
 801ef74:	af00      	add	r7, sp, #0
 801ef76:	60f8      	str	r0, [r7, #12]
 801ef78:	60b9      	str	r1, [r7, #8]
 801ef7a:	607a      	str	r2, [r7, #4]
 801ef7c:	603b      	str	r3, [r7, #0]
    if(angle == 0 && zoom == 256) {
 801ef7e:	68bb      	ldr	r3, [r7, #8]
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	d104      	bne.n	801ef8e <lv_point_transform+0x1e>
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ef8a:	f000 812c 	beq.w	801f1e6 <lv_point_transform+0x276>
        return;
    }

    p->x -= pivot->x;
 801ef8e:	68fb      	ldr	r3, [r7, #12]
 801ef90:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef94:	b29a      	uxth	r2, r3
 801ef96:	683b      	ldr	r3, [r7, #0]
 801ef98:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef9c:	b29b      	uxth	r3, r3
 801ef9e:	1ad3      	subs	r3, r2, r3
 801efa0:	b29b      	uxth	r3, r3
 801efa2:	b21a      	sxth	r2, r3
 801efa4:	68fb      	ldr	r3, [r7, #12]
 801efa6:	801a      	strh	r2, [r3, #0]
    p->y -= pivot->y;
 801efa8:	68fb      	ldr	r3, [r7, #12]
 801efaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801efae:	b29a      	uxth	r2, r3
 801efb0:	683b      	ldr	r3, [r7, #0]
 801efb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801efb6:	b29b      	uxth	r3, r3
 801efb8:	1ad3      	subs	r3, r2, r3
 801efba:	b29b      	uxth	r3, r3
 801efbc:	b21a      	sxth	r2, r3
 801efbe:	68fb      	ldr	r3, [r7, #12]
 801efc0:	805a      	strh	r2, [r3, #2]

    if(angle == 0) {
 801efc2:	68bb      	ldr	r3, [r7, #8]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d124      	bne.n	801f012 <lv_point_transform+0xa2>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 801efc8:	68fb      	ldr	r3, [r7, #12]
 801efca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801efce:	461a      	mov	r2, r3
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	fb02 f303 	mul.w	r3, r2, r3
 801efd6:	121b      	asrs	r3, r3, #8
 801efd8:	b29a      	uxth	r2, r3
 801efda:	683b      	ldr	r3, [r7, #0]
 801efdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801efe0:	b29b      	uxth	r3, r3
 801efe2:	4413      	add	r3, r2
 801efe4:	b29b      	uxth	r3, r3
 801efe6:	b21a      	sxth	r2, r3
 801efe8:	68fb      	ldr	r3, [r7, #12]
 801efea:	801a      	strh	r2, [r3, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 801efec:	68fb      	ldr	r3, [r7, #12]
 801efee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801eff2:	461a      	mov	r2, r3
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	fb02 f303 	mul.w	r3, r2, r3
 801effa:	121b      	asrs	r3, r3, #8
 801effc:	b29a      	uxth	r2, r3
 801effe:	683b      	ldr	r3, [r7, #0]
 801f000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f004:	b29b      	uxth	r3, r3
 801f006:	4413      	add	r3, r2
 801f008:	b29b      	uxth	r3, r3
 801f00a:	b21a      	sxth	r2, r3
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	805a      	strh	r2, [r3, #2]
        return;
 801f010:	e0ea      	b.n	801f1e8 <lv_point_transform+0x278>
    }

    static int32_t angle_prev = INT32_MIN;
    static int32_t sinma;
    static int32_t cosma;
    if(angle_prev != angle) {
 801f012:	4b77      	ldr	r3, [pc, #476]	; (801f1f0 <lv_point_transform+0x280>)
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	68ba      	ldr	r2, [r7, #8]
 801f018:	429a      	cmp	r2, r3
 801f01a:	d078      	beq.n	801f10e <lv_point_transform+0x19e>
        int32_t angle_limited = angle;
 801f01c:	68bb      	ldr	r3, [r7, #8]
 801f01e:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited > 3600) angle_limited -= 3600;
 801f020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f022:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801f026:	dd03      	ble.n	801f030 <lv_point_transform+0xc0>
 801f028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f02a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801f02e:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited < 0) angle_limited += 3600;
 801f030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f032:	2b00      	cmp	r3, #0
 801f034:	da03      	bge.n	801f03e <lv_point_transform+0xce>
 801f036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f038:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 801f03c:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t angle_low = angle_limited / 10;
 801f03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f040:	4a6c      	ldr	r2, [pc, #432]	; (801f1f4 <lv_point_transform+0x284>)
 801f042:	fb82 1203 	smull	r1, r2, r2, r3
 801f046:	1092      	asrs	r2, r2, #2
 801f048:	17db      	asrs	r3, r3, #31
 801f04a:	1ad3      	subs	r3, r2, r3
 801f04c:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t angle_high = angle_low + 1;
 801f04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f050:	3301      	adds	r3, #1
 801f052:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 801f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f056:	f06f 0209 	mvn.w	r2, #9
 801f05a:	fb02 f303 	mul.w	r3, r2, r3
 801f05e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f060:	4413      	add	r3, r2
 801f062:	62bb      	str	r3, [r7, #40]	; 0x28

        int32_t s1 = lv_trigo_sin(angle_low);
 801f064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f066:	b21b      	sxth	r3, r3
 801f068:	4618      	mov	r0, r3
 801f06a:	f000 fe7d 	bl	801fd68 <lv_trigo_sin>
 801f06e:	4603      	mov	r3, r0
 801f070:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t s2 = lv_trigo_sin(angle_high);
 801f072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f074:	b21b      	sxth	r3, r3
 801f076:	4618      	mov	r0, r3
 801f078:	f000 fe76 	bl	801fd68 <lv_trigo_sin>
 801f07c:	4603      	mov	r3, r0
 801f07e:	623b      	str	r3, [r7, #32]

        int32_t c1 = lv_trigo_sin(angle_low + 90);
 801f080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f082:	b29b      	uxth	r3, r3
 801f084:	335a      	adds	r3, #90	; 0x5a
 801f086:	b29b      	uxth	r3, r3
 801f088:	b21b      	sxth	r3, r3
 801f08a:	4618      	mov	r0, r3
 801f08c:	f000 fe6c 	bl	801fd68 <lv_trigo_sin>
 801f090:	4603      	mov	r3, r0
 801f092:	61fb      	str	r3, [r7, #28]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 801f094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f096:	b29b      	uxth	r3, r3
 801f098:	335a      	adds	r3, #90	; 0x5a
 801f09a:	b29b      	uxth	r3, r3
 801f09c:	b21b      	sxth	r3, r3
 801f09e:	4618      	mov	r0, r3
 801f0a0:	f000 fe62 	bl	801fd68 <lv_trigo_sin>
 801f0a4:	4603      	mov	r3, r0
 801f0a6:	61bb      	str	r3, [r7, #24]

        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801f0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0aa:	f1c3 030a 	rsb	r3, r3, #10
 801f0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f0b0:	fb03 f202 	mul.w	r2, r3, r2
 801f0b4:	6a3b      	ldr	r3, [r7, #32]
 801f0b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f0b8:	fb01 f303 	mul.w	r3, r1, r3
 801f0bc:	4413      	add	r3, r2
 801f0be:	4a4d      	ldr	r2, [pc, #308]	; (801f1f4 <lv_point_transform+0x284>)
 801f0c0:	fb82 1203 	smull	r1, r2, r2, r3
 801f0c4:	1092      	asrs	r2, r2, #2
 801f0c6:	17db      	asrs	r3, r3, #31
 801f0c8:	1ad3      	subs	r3, r2, r3
 801f0ca:	4a4b      	ldr	r2, [pc, #300]	; (801f1f8 <lv_point_transform+0x288>)
 801f0cc:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0d0:	f1c3 030a 	rsb	r3, r3, #10
 801f0d4:	69fa      	ldr	r2, [r7, #28]
 801f0d6:	fb03 f202 	mul.w	r2, r3, r2
 801f0da:	69bb      	ldr	r3, [r7, #24]
 801f0dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f0de:	fb01 f303 	mul.w	r3, r1, r3
 801f0e2:	4413      	add	r3, r2
 801f0e4:	4a43      	ldr	r2, [pc, #268]	; (801f1f4 <lv_point_transform+0x284>)
 801f0e6:	fb82 1203 	smull	r1, r2, r2, r3
 801f0ea:	1092      	asrs	r2, r2, #2
 801f0ec:	17db      	asrs	r3, r3, #31
 801f0ee:	1ad3      	subs	r3, r2, r3
 801f0f0:	4a42      	ldr	r2, [pc, #264]	; (801f1fc <lv_point_transform+0x28c>)
 801f0f2:	6013      	str	r3, [r2, #0]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801f0f4:	4b40      	ldr	r3, [pc, #256]	; (801f1f8 <lv_point_transform+0x288>)
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	115b      	asrs	r3, r3, #5
 801f0fa:	4a3f      	ldr	r2, [pc, #252]	; (801f1f8 <lv_point_transform+0x288>)
 801f0fc:	6013      	str	r3, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801f0fe:	4b3f      	ldr	r3, [pc, #252]	; (801f1fc <lv_point_transform+0x28c>)
 801f100:	681b      	ldr	r3, [r3, #0]
 801f102:	115b      	asrs	r3, r3, #5
 801f104:	4a3d      	ldr	r2, [pc, #244]	; (801f1fc <lv_point_transform+0x28c>)
 801f106:	6013      	str	r3, [r2, #0]
        angle_prev = angle;
 801f108:	4a39      	ldr	r2, [pc, #228]	; (801f1f0 <lv_point_transform+0x280>)
 801f10a:	68bb      	ldr	r3, [r7, #8]
 801f10c:	6013      	str	r3, [r2, #0]
    }
    int32_t x = p->x;
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f114:	617b      	str	r3, [r7, #20]
    int32_t y = p->y;
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f11c:	613b      	str	r3, [r7, #16]
    if(zoom == 256) {
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f124:	d12c      	bne.n	801f180 <lv_point_transform+0x210>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801f126:	4b35      	ldr	r3, [pc, #212]	; (801f1fc <lv_point_transform+0x28c>)
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	697a      	ldr	r2, [r7, #20]
 801f12c:	fb03 f202 	mul.w	r2, r3, r2
 801f130:	4b31      	ldr	r3, [pc, #196]	; (801f1f8 <lv_point_transform+0x288>)
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	6939      	ldr	r1, [r7, #16]
 801f136:	fb01 f303 	mul.w	r3, r1, r3
 801f13a:	1ad3      	subs	r3, r2, r3
 801f13c:	129b      	asrs	r3, r3, #10
 801f13e:	b29a      	uxth	r2, r3
 801f140:	683b      	ldr	r3, [r7, #0]
 801f142:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f146:	b29b      	uxth	r3, r3
 801f148:	4413      	add	r3, r2
 801f14a:	b29b      	uxth	r3, r3
 801f14c:	b21a      	sxth	r2, r3
 801f14e:	68fb      	ldr	r3, [r7, #12]
 801f150:	801a      	strh	r2, [r3, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801f152:	4b29      	ldr	r3, [pc, #164]	; (801f1f8 <lv_point_transform+0x288>)
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	697a      	ldr	r2, [r7, #20]
 801f158:	fb03 f202 	mul.w	r2, r3, r2
 801f15c:	4b27      	ldr	r3, [pc, #156]	; (801f1fc <lv_point_transform+0x28c>)
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	6939      	ldr	r1, [r7, #16]
 801f162:	fb01 f303 	mul.w	r3, r1, r3
 801f166:	4413      	add	r3, r2
 801f168:	129b      	asrs	r3, r3, #10
 801f16a:	b29a      	uxth	r2, r3
 801f16c:	683b      	ldr	r3, [r7, #0]
 801f16e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f172:	b29b      	uxth	r3, r3
 801f174:	4413      	add	r3, r2
 801f176:	b29b      	uxth	r3, r3
 801f178:	b21a      	sxth	r2, r3
 801f17a:	68fb      	ldr	r3, [r7, #12]
 801f17c:	805a      	strh	r2, [r3, #2]
 801f17e:	e033      	b.n	801f1e8 <lv_point_transform+0x278>
    }
    else {
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 801f180:	4b1e      	ldr	r3, [pc, #120]	; (801f1fc <lv_point_transform+0x28c>)
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	697a      	ldr	r2, [r7, #20]
 801f186:	fb03 f202 	mul.w	r2, r3, r2
 801f18a:	4b1b      	ldr	r3, [pc, #108]	; (801f1f8 <lv_point_transform+0x288>)
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	6939      	ldr	r1, [r7, #16]
 801f190:	fb01 f303 	mul.w	r3, r1, r3
 801f194:	1ad3      	subs	r3, r2, r3
 801f196:	687a      	ldr	r2, [r7, #4]
 801f198:	fb02 f303 	mul.w	r3, r2, r3
 801f19c:	149b      	asrs	r3, r3, #18
 801f19e:	b29a      	uxth	r2, r3
 801f1a0:	683b      	ldr	r3, [r7, #0]
 801f1a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f1a6:	b29b      	uxth	r3, r3
 801f1a8:	4413      	add	r3, r2
 801f1aa:	b29b      	uxth	r3, r3
 801f1ac:	b21a      	sxth	r2, r3
 801f1ae:	68fb      	ldr	r3, [r7, #12]
 801f1b0:	801a      	strh	r2, [r3, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 801f1b2:	4b11      	ldr	r3, [pc, #68]	; (801f1f8 <lv_point_transform+0x288>)
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	697a      	ldr	r2, [r7, #20]
 801f1b8:	fb03 f202 	mul.w	r2, r3, r2
 801f1bc:	4b0f      	ldr	r3, [pc, #60]	; (801f1fc <lv_point_transform+0x28c>)
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	6939      	ldr	r1, [r7, #16]
 801f1c2:	fb01 f303 	mul.w	r3, r1, r3
 801f1c6:	4413      	add	r3, r2
 801f1c8:	687a      	ldr	r2, [r7, #4]
 801f1ca:	fb02 f303 	mul.w	r3, r2, r3
 801f1ce:	149b      	asrs	r3, r3, #18
 801f1d0:	b29a      	uxth	r2, r3
 801f1d2:	683b      	ldr	r3, [r7, #0]
 801f1d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f1d8:	b29b      	uxth	r3, r3
 801f1da:	4413      	add	r3, r2
 801f1dc:	b29b      	uxth	r3, r3
 801f1de:	b21a      	sxth	r2, r3
 801f1e0:	68fb      	ldr	r3, [r7, #12]
 801f1e2:	805a      	strh	r2, [r3, #2]
 801f1e4:	e000      	b.n	801f1e8 <lv_point_transform+0x278>
        return;
 801f1e6:	bf00      	nop
    }
}
 801f1e8:	3738      	adds	r7, #56	; 0x38
 801f1ea:	46bd      	mov	sp, r7
 801f1ec:	bd80      	pop	{r7, pc}
 801f1ee:	bf00      	nop
 801f1f0:	20000010 	.word	0x20000010
 801f1f4:	66666667 	.word	0x66666667
 801f1f8:	200007e4 	.word	0x200007e4
 801f1fc:	200007e8 	.word	0x200007e8

0801f200 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 801f200:	b480      	push	{r7}
 801f202:	b089      	sub	sp, #36	; 0x24
 801f204:	af00      	add	r7, sp, #0
 801f206:	6078      	str	r0, [r7, #4]
 801f208:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f210:	461a      	mov	r2, r3
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f218:	1ad3      	subs	r3, r2, r3
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	da00      	bge.n	801f220 <lv_point_within_circle+0x20>
 801f21e:	3301      	adds	r3, #1
 801f220:	105b      	asrs	r3, r3, #1
 801f222:	83fb      	strh	r3, [r7, #30]

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f22a:	b29a      	uxth	r2, r3
 801f22c:	8bfb      	ldrh	r3, [r7, #30]
 801f22e:	4413      	add	r3, r2
 801f230:	b29b      	uxth	r3, r3
 801f232:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f23a:	b29a      	uxth	r2, r3
 801f23c:	8bfb      	ldrh	r3, [r7, #30]
 801f23e:	4413      	add	r3, r2
 801f240:	b29b      	uxth	r3, r3
 801f242:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 801f244:	683b      	ldr	r3, [r7, #0]
 801f246:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f24a:	b29a      	uxth	r2, r3
 801f24c:	8bbb      	ldrh	r3, [r7, #28]
 801f24e:	1ad3      	subs	r3, r2, r3
 801f250:	b29b      	uxth	r3, r3
 801f252:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 801f254:	683b      	ldr	r3, [r7, #0]
 801f256:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f25a:	b29a      	uxth	r2, r3
 801f25c:	8b7b      	ldrh	r3, [r7, #26]
 801f25e:	1ad3      	subs	r3, r2, r3
 801f260:	b29b      	uxth	r3, r3
 801f262:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 801f264:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801f268:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801f26c:	fb02 f303 	mul.w	r3, r2, r3
 801f270:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 801f272:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801f276:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801f27a:	fb03 f202 	mul.w	r2, r3, r2
 801f27e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801f282:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801f286:	fb01 f303 	mul.w	r3, r1, r3
 801f28a:	4413      	add	r3, r2
 801f28c:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 801f28e:	68fa      	ldr	r2, [r7, #12]
 801f290:	693b      	ldr	r3, [r7, #16]
 801f292:	429a      	cmp	r2, r3
 801f294:	d801      	bhi.n	801f29a <lv_point_within_circle+0x9a>
        return true;
 801f296:	2301      	movs	r3, #1
 801f298:	e000      	b.n	801f29c <lv_point_within_circle+0x9c>
    else
        return false;
 801f29a:	2300      	movs	r3, #0
}
 801f29c:	4618      	mov	r0, r3
 801f29e:	3724      	adds	r7, #36	; 0x24
 801f2a0:	46bd      	mov	sp, r7
 801f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2a6:	4770      	bx	lr

0801f2a8 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801f2a8:	b480      	push	{r7}
 801f2aa:	b083      	sub	sp, #12
 801f2ac:	af00      	add	r7, sp, #0
 801f2ae:	4603      	mov	r3, r0
 801f2b0:	71fb      	strb	r3, [r7, #7]
 801f2b2:	460b      	mov	r3, r1
 801f2b4:	71bb      	strb	r3, [r7, #6]
 801f2b6:	4613      	mov	r3, r2
 801f2b8:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801f2ba:	797b      	ldrb	r3, [r7, #5]
 801f2bc:	09db      	lsrs	r3, r3, #7
 801f2be:	b2da      	uxtb	r2, r3
 801f2c0:	79bb      	ldrb	r3, [r7, #6]
 801f2c2:	09db      	lsrs	r3, r3, #7
 801f2c4:	b2db      	uxtb	r3, r3
 801f2c6:	4313      	orrs	r3, r2
 801f2c8:	b2da      	uxtb	r2, r3
 801f2ca:	79fb      	ldrb	r3, [r7, #7]
 801f2cc:	09db      	lsrs	r3, r3, #7
 801f2ce:	b2db      	uxtb	r3, r3
 801f2d0:	4313      	orrs	r3, r2
 801f2d2:	b2db      	uxtb	r3, r3
}
 801f2d4:	4618      	mov	r0, r3
 801f2d6:	370c      	adds	r7, #12
 801f2d8:	46bd      	mov	sp, r7
 801f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2de:	4770      	bx	lr

0801f2e0 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 801f2e0:	b580      	push	{r7, lr}
 801f2e2:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801f2e4:	2200      	movs	r2, #0
 801f2e6:	2100      	movs	r1, #0
 801f2e8:	2000      	movs	r0, #0
 801f2ea:	f7ff ffdd 	bl	801f2a8 <lv_color_make>
 801f2ee:	4603      	mov	r3, r0
}
 801f2f0:	4618      	mov	r0, r3
 801f2f2:	bd80      	pop	{r7, pc}

0801f2f4 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 801f2f4:	b480      	push	{r7}
 801f2f6:	b085      	sub	sp, #20
 801f2f8:	af00      	add	r7, sp, #0
 801f2fa:	60f8      	str	r0, [r7, #12]
 801f2fc:	7239      	strb	r1, [r7, #8]
 801f2fe:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num--;
    }
#else
    while(px_num > 16) {
 801f300:	e062      	b.n	801f3c8 <lv_color_fill+0xd4>
        *buf = color;
 801f302:	68fb      	ldr	r3, [r7, #12]
 801f304:	7a3a      	ldrb	r2, [r7, #8]
 801f306:	701a      	strb	r2, [r3, #0]
        buf++;
 801f308:	68fb      	ldr	r3, [r7, #12]
 801f30a:	3301      	adds	r3, #1
 801f30c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	7a3a      	ldrb	r2, [r7, #8]
 801f312:	701a      	strb	r2, [r3, #0]
        buf++;
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	3301      	adds	r3, #1
 801f318:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f31a:	68fb      	ldr	r3, [r7, #12]
 801f31c:	7a3a      	ldrb	r2, [r7, #8]
 801f31e:	701a      	strb	r2, [r3, #0]
        buf++;
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	3301      	adds	r3, #1
 801f324:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f326:	68fb      	ldr	r3, [r7, #12]
 801f328:	7a3a      	ldrb	r2, [r7, #8]
 801f32a:	701a      	strb	r2, [r3, #0]
        buf++;
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	3301      	adds	r3, #1
 801f330:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801f332:	68fb      	ldr	r3, [r7, #12]
 801f334:	7a3a      	ldrb	r2, [r7, #8]
 801f336:	701a      	strb	r2, [r3, #0]
        buf++;
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	3301      	adds	r3, #1
 801f33c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f33e:	68fb      	ldr	r3, [r7, #12]
 801f340:	7a3a      	ldrb	r2, [r7, #8]
 801f342:	701a      	strb	r2, [r3, #0]
        buf++;
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	3301      	adds	r3, #1
 801f348:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f34a:	68fb      	ldr	r3, [r7, #12]
 801f34c:	7a3a      	ldrb	r2, [r7, #8]
 801f34e:	701a      	strb	r2, [r3, #0]
        buf++;
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	3301      	adds	r3, #1
 801f354:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f356:	68fb      	ldr	r3, [r7, #12]
 801f358:	7a3a      	ldrb	r2, [r7, #8]
 801f35a:	701a      	strb	r2, [r3, #0]
        buf++;
 801f35c:	68fb      	ldr	r3, [r7, #12]
 801f35e:	3301      	adds	r3, #1
 801f360:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801f362:	68fb      	ldr	r3, [r7, #12]
 801f364:	7a3a      	ldrb	r2, [r7, #8]
 801f366:	701a      	strb	r2, [r3, #0]
        buf++;
 801f368:	68fb      	ldr	r3, [r7, #12]
 801f36a:	3301      	adds	r3, #1
 801f36c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f36e:	68fb      	ldr	r3, [r7, #12]
 801f370:	7a3a      	ldrb	r2, [r7, #8]
 801f372:	701a      	strb	r2, [r3, #0]
        buf++;
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	3301      	adds	r3, #1
 801f378:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	7a3a      	ldrb	r2, [r7, #8]
 801f37e:	701a      	strb	r2, [r3, #0]
        buf++;
 801f380:	68fb      	ldr	r3, [r7, #12]
 801f382:	3301      	adds	r3, #1
 801f384:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	7a3a      	ldrb	r2, [r7, #8]
 801f38a:	701a      	strb	r2, [r3, #0]
        buf++;
 801f38c:	68fb      	ldr	r3, [r7, #12]
 801f38e:	3301      	adds	r3, #1
 801f390:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801f392:	68fb      	ldr	r3, [r7, #12]
 801f394:	7a3a      	ldrb	r2, [r7, #8]
 801f396:	701a      	strb	r2, [r3, #0]
        buf++;
 801f398:	68fb      	ldr	r3, [r7, #12]
 801f39a:	3301      	adds	r3, #1
 801f39c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f39e:	68fb      	ldr	r3, [r7, #12]
 801f3a0:	7a3a      	ldrb	r2, [r7, #8]
 801f3a2:	701a      	strb	r2, [r3, #0]
        buf++;
 801f3a4:	68fb      	ldr	r3, [r7, #12]
 801f3a6:	3301      	adds	r3, #1
 801f3a8:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f3aa:	68fb      	ldr	r3, [r7, #12]
 801f3ac:	7a3a      	ldrb	r2, [r7, #8]
 801f3ae:	701a      	strb	r2, [r3, #0]
        buf++;
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	3301      	adds	r3, #1
 801f3b4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801f3b6:	68fb      	ldr	r3, [r7, #12]
 801f3b8:	7a3a      	ldrb	r2, [r7, #8]
 801f3ba:	701a      	strb	r2, [r3, #0]
        buf++;
 801f3bc:	68fb      	ldr	r3, [r7, #12]
 801f3be:	3301      	adds	r3, #1
 801f3c0:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 801f3c2:	687b      	ldr	r3, [r7, #4]
 801f3c4:	3b10      	subs	r3, #16
 801f3c6:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	2b10      	cmp	r3, #16
 801f3cc:	d899      	bhi.n	801f302 <lv_color_fill+0xe>
    }
    while(px_num) {
 801f3ce:	e008      	b.n	801f3e2 <lv_color_fill+0xee>
        *buf = color;
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	7a3a      	ldrb	r2, [r7, #8]
 801f3d4:	701a      	strb	r2, [r3, #0]
        buf++;
 801f3d6:	68fb      	ldr	r3, [r7, #12]
 801f3d8:	3301      	adds	r3, #1
 801f3da:	60fb      	str	r3, [r7, #12]
        px_num--;
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	3b01      	subs	r3, #1
 801f3e0:	607b      	str	r3, [r7, #4]
    while(px_num) {
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d1f3      	bne.n	801f3d0 <lv_color_fill+0xdc>
    }
#endif
}
 801f3e8:	bf00      	nop
 801f3ea:	bf00      	nop
 801f3ec:	3714      	adds	r7, #20
 801f3ee:	46bd      	mov	sp, r7
 801f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3f4:	4770      	bx	lr
	...

0801f3f8 <lv_palette_main>:
    color32.full = lv_color_to32(color);
    return lv_color_rgb_to_hsv(color32.ch.red, color32.ch.green, color32.ch.blue);
}

lv_color_t lv_palette_main(lv_palette_t p)
{
 801f3f8:	b580      	push	{r7, lr}
 801f3fa:	b082      	sub	sp, #8
 801f3fc:	af00      	add	r7, sp, #0
 801f3fe:	4603      	mov	r3, r0
 801f400:	71fb      	strb	r3, [r7, #7]
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 801f402:	79fb      	ldrb	r3, [r7, #7]
 801f404:	2b12      	cmp	r3, #18
 801f406:	d903      	bls.n	801f410 <lv_palette_main+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
 801f408:	f7ff ff6a 	bl	801f2e0 <lv_color_black>
 801f40c:	4603      	mov	r3, r0
 801f40e:	e002      	b.n	801f416 <lv_palette_main+0x1e>
    }

    return colors[p];
 801f410:	79fb      	ldrb	r3, [r7, #7]
 801f412:	4a03      	ldr	r2, [pc, #12]	; (801f420 <lv_palette_main+0x28>)
 801f414:	5cd3      	ldrb	r3, [r2, r3]

}
 801f416:	4618      	mov	r0, r3
 801f418:	3708      	adds	r7, #8
 801f41a:	46bd      	mov	sp, r7
 801f41c:	bd80      	pop	{r7, pc}
 801f41e:	bf00      	nop
 801f420:	08026308 	.word	0x08026308

0801f424 <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 801f424:	b580      	push	{r7, lr}
 801f426:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 801f428:	2104      	movs	r1, #4
 801f42a:	4802      	ldr	r0, [pc, #8]	; (801f434 <_lv_fs_init+0x10>)
 801f42c:	f000 fb19 	bl	801fa62 <_lv_ll_init>
}
 801f430:	bf00      	nop
 801f432:	bd80      	pop	{r7, pc}
 801f434:	20000810 	.word	0x20000810

0801f438 <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 801f438:	b580      	push	{r7, lr}
 801f43a:	b088      	sub	sp, #32
 801f43c:	af00      	add	r7, sp, #0
 801f43e:	60f8      	str	r0, [r7, #12]
 801f440:	60b9      	str	r1, [r7, #8]
 801f442:	4613      	mov	r3, r2
 801f444:	71fb      	strb	r3, [r7, #7]
    if(path == NULL) {
 801f446:	68bb      	ldr	r3, [r7, #8]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d101      	bne.n	801f450 <lv_fs_open+0x18>
        LV_LOG_WARN("Can't open file: path is NULL");
        return LV_FS_RES_INV_PARAM;
 801f44c:	230b      	movs	r3, #11
 801f44e:	e05c      	b.n	801f50a <lv_fs_open+0xd2>
    }

    char letter = path[0];
 801f450:	68bb      	ldr	r3, [r7, #8]
 801f452:	781b      	ldrb	r3, [r3, #0]
 801f454:	77fb      	strb	r3, [r7, #31]
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 801f456:	7ffb      	ldrb	r3, [r7, #31]
 801f458:	4618      	mov	r0, r3
 801f45a:	f000 fa9b 	bl	801f994 <lv_fs_get_drv>
 801f45e:	61b8      	str	r0, [r7, #24]

    if(drv == NULL) {
 801f460:	69bb      	ldr	r3, [r7, #24]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d101      	bne.n	801f46a <lv_fs_open+0x32>
        LV_LOG_WARN("Can't open file (%s): unknown driver letter", path);
        return LV_FS_RES_NOT_EX;
 801f466:	2303      	movs	r3, #3
 801f468:	e04f      	b.n	801f50a <lv_fs_open+0xd2>
    }

    if(drv->ready_cb) {
 801f46a:	69bb      	ldr	r3, [r7, #24]
 801f46c:	685b      	ldr	r3, [r3, #4]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d00b      	beq.n	801f48a <lv_fs_open+0x52>
        if(drv->ready_cb(drv) == false) {
 801f472:	69bb      	ldr	r3, [r7, #24]
 801f474:	685b      	ldr	r3, [r3, #4]
 801f476:	69b8      	ldr	r0, [r7, #24]
 801f478:	4798      	blx	r3
 801f47a:	4603      	mov	r3, r0
 801f47c:	f083 0301 	eor.w	r3, r3, #1
 801f480:	b2db      	uxtb	r3, r3
 801f482:	2b00      	cmp	r3, #0
 801f484:	d001      	beq.n	801f48a <lv_fs_open+0x52>
            LV_LOG_WARN("Can't open file (%s): driver not ready", path);
            return LV_FS_RES_HW_ERR;
 801f486:	2301      	movs	r3, #1
 801f488:	e03f      	b.n	801f50a <lv_fs_open+0xd2>
        }
    }

    if(drv->open_cb == NULL) {
 801f48a:	69bb      	ldr	r3, [r7, #24]
 801f48c:	689b      	ldr	r3, [r3, #8]
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d101      	bne.n	801f496 <lv_fs_open+0x5e>
        LV_LOG_WARN("Can't open file (%s): open function not exists", path);
        return LV_FS_RES_NOT_IMP;
 801f492:	2309      	movs	r3, #9
 801f494:	e039      	b.n	801f50a <lv_fs_open+0xd2>
    }

    const char * real_path = lv_fs_get_real_path(path);
 801f496:	68b8      	ldr	r0, [r7, #8]
 801f498:	f000 face 	bl	801fa38 <lv_fs_get_real_path>
 801f49c:	6178      	str	r0, [r7, #20]
    void * file_d = drv->open_cb(drv, real_path, mode);
 801f49e:	69bb      	ldr	r3, [r7, #24]
 801f4a0:	689b      	ldr	r3, [r3, #8]
 801f4a2:	79fa      	ldrb	r2, [r7, #7]
 801f4a4:	6979      	ldr	r1, [r7, #20]
 801f4a6:	69b8      	ldr	r0, [r7, #24]
 801f4a8:	4798      	blx	r3
 801f4aa:	6138      	str	r0, [r7, #16]

    if(file_d == NULL || file_d == (void *)(-1)) {
 801f4ac:	693b      	ldr	r3, [r7, #16]
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d003      	beq.n	801f4ba <lv_fs_open+0x82>
 801f4b2:	693b      	ldr	r3, [r7, #16]
 801f4b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f4b8:	d101      	bne.n	801f4be <lv_fs_open+0x86>
        return LV_FS_RES_UNKNOWN;
 801f4ba:	230c      	movs	r3, #12
 801f4bc:	e025      	b.n	801f50a <lv_fs_open+0xd2>
    }

    file_p->drv = drv;
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	69ba      	ldr	r2, [r7, #24]
 801f4c2:	605a      	str	r2, [r3, #4]
    file_p->file_d = file_d;
 801f4c4:	68fb      	ldr	r3, [r7, #12]
 801f4c6:	693a      	ldr	r2, [r7, #16]
 801f4c8:	601a      	str	r2, [r3, #0]

    if(drv->cache_size) {
 801f4ca:	69bb      	ldr	r3, [r7, #24]
 801f4cc:	885b      	ldrh	r3, [r3, #2]
 801f4ce:	2b00      	cmp	r3, #0
 801f4d0:	d01a      	beq.n	801f508 <lv_fs_open+0xd0>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 801f4d2:	2010      	movs	r0, #16
 801f4d4:	f000 fd62 	bl	801ff9c <lv_mem_alloc>
 801f4d8:	4602      	mov	r2, r0
 801f4da:	68fb      	ldr	r3, [r7, #12]
 801f4dc:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 801f4de:	68fb      	ldr	r3, [r7, #12]
 801f4e0:	689b      	ldr	r3, [r3, #8]
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	d100      	bne.n	801f4e8 <lv_fs_open+0xb0>
 801f4e6:	e7fe      	b.n	801f4e6 <lv_fs_open+0xae>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 801f4e8:	68fb      	ldr	r3, [r7, #12]
 801f4ea:	689b      	ldr	r3, [r3, #8]
 801f4ec:	2110      	movs	r1, #16
 801f4ee:	4618      	mov	r0, r3
 801f4f0:	f001 f988 	bl	8020804 <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 801f4f4:	68fb      	ldr	r3, [r7, #12]
 801f4f6:	689b      	ldr	r3, [r3, #8]
 801f4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f4fc:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 801f4fe:	68fb      	ldr	r3, [r7, #12]
 801f500:	689b      	ldr	r3, [r3, #8]
 801f502:	f06f 0201 	mvn.w	r2, #1
 801f506:	605a      	str	r2, [r3, #4]
    }

    return LV_FS_RES_OK;
 801f508:	2300      	movs	r3, #0
}
 801f50a:	4618      	mov	r0, r3
 801f50c:	3720      	adds	r7, #32
 801f50e:	46bd      	mov	sp, r7
 801f510:	bd80      	pop	{r7, pc}

0801f512 <lv_fs_close>:

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 801f512:	b580      	push	{r7, lr}
 801f514:	b084      	sub	sp, #16
 801f516:	af00      	add	r7, sp, #0
 801f518:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	685b      	ldr	r3, [r3, #4]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d101      	bne.n	801f526 <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 801f522:	230b      	movs	r3, #11
 801f524:	e034      	b.n	801f590 <lv_fs_close+0x7e>
    }

    if(file_p->drv->close_cb == NULL) {
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	685b      	ldr	r3, [r3, #4]
 801f52a:	68db      	ldr	r3, [r3, #12]
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d101      	bne.n	801f534 <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 801f530:	2309      	movs	r3, #9
 801f532:	e02d      	b.n	801f590 <lv_fs_close+0x7e>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	685b      	ldr	r3, [r3, #4]
 801f538:	68db      	ldr	r3, [r3, #12]
 801f53a:	687a      	ldr	r2, [r7, #4]
 801f53c:	6850      	ldr	r0, [r2, #4]
 801f53e:	687a      	ldr	r2, [r7, #4]
 801f540:	6812      	ldr	r2, [r2, #0]
 801f542:	4611      	mov	r1, r2
 801f544:	4798      	blx	r3
 801f546:	4603      	mov	r3, r0
 801f548:	73fb      	strb	r3, [r7, #15]

    if(file_p->drv->cache_size && file_p->cache) {
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	685b      	ldr	r3, [r3, #4]
 801f54e:	885b      	ldrh	r3, [r3, #2]
 801f550:	2b00      	cmp	r3, #0
 801f552:	d013      	beq.n	801f57c <lv_fs_close+0x6a>
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	689b      	ldr	r3, [r3, #8]
 801f558:	2b00      	cmp	r3, #0
 801f55a:	d00f      	beq.n	801f57c <lv_fs_close+0x6a>
        if(file_p->cache->buffer) {
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	689b      	ldr	r3, [r3, #8]
 801f560:	68db      	ldr	r3, [r3, #12]
 801f562:	2b00      	cmp	r3, #0
 801f564:	d005      	beq.n	801f572 <lv_fs_close+0x60>
            lv_mem_free(file_p->cache->buffer);
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	689b      	ldr	r3, [r3, #8]
 801f56a:	68db      	ldr	r3, [r3, #12]
 801f56c:	4618      	mov	r0, r3
 801f56e:	f000 fd45 	bl	801fffc <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	689b      	ldr	r3, [r3, #8]
 801f576:	4618      	mov	r0, r3
 801f578:	f000 fd40 	bl	801fffc <lv_mem_free>
    }

    file_p->file_d = NULL;
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	2200      	movs	r2, #0
 801f580:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	2200      	movs	r2, #0
 801f586:	605a      	str	r2, [r3, #4]
    file_p->cache  = NULL;
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	2200      	movs	r2, #0
 801f58c:	609a      	str	r2, [r3, #8]

    return res;
 801f58e:	7bfb      	ldrb	r3, [r7, #15]
}
 801f590:	4618      	mov	r0, r3
 801f592:	3710      	adds	r7, #16
 801f594:	46bd      	mov	sp, r7
 801f596:	bd80      	pop	{r7, pc}

0801f598 <lv_fs_read_cached>:

static lv_fs_res_t lv_fs_read_cached(lv_fs_file_t * file_p, char * buf, uint32_t btr, uint32_t * br)
{
 801f598:	b5b0      	push	{r4, r5, r7, lr}
 801f59a:	b090      	sub	sp, #64	; 0x40
 801f59c:	af02      	add	r7, sp, #8
 801f59e:	60f8      	str	r0, [r7, #12]
 801f5a0:	60b9      	str	r1, [r7, #8]
 801f5a2:	607a      	str	r2, [r7, #4]
 801f5a4:	603b      	str	r3, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 801f5a6:	2300      	movs	r3, #0
 801f5a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t file_position = file_p->cache->file_position;
 801f5ac:	68fb      	ldr	r3, [r7, #12]
 801f5ae:	689b      	ldr	r3, [r3, #8]
 801f5b0:	689b      	ldr	r3, [r3, #8]
 801f5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t start = file_p->cache->start;
 801f5b4:	68fb      	ldr	r3, [r7, #12]
 801f5b6:	689b      	ldr	r3, [r3, #8]
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t end = file_p->cache->end;
 801f5bc:	68fb      	ldr	r3, [r7, #12]
 801f5be:	689b      	ldr	r3, [r3, #8]
 801f5c0:	685b      	ldr	r3, [r3, #4]
 801f5c2:	627b      	str	r3, [r7, #36]	; 0x24
    char * buffer = file_p->cache->buffer;
 801f5c4:	68fb      	ldr	r3, [r7, #12]
 801f5c6:	689b      	ldr	r3, [r3, #8]
 801f5c8:	68db      	ldr	r3, [r3, #12]
 801f5ca:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t buffer_size = file_p->drv->cache_size;
 801f5cc:	68fb      	ldr	r3, [r7, #12]
 801f5ce:	685b      	ldr	r3, [r3, #4]
 801f5d0:	885b      	ldrh	r3, [r3, #2]
 801f5d2:	847b      	strh	r3, [r7, #34]	; 0x22

    if(start <= file_position && file_position < end) {
 801f5d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5d8:	429a      	cmp	r2, r3
 801f5da:	f200 8082 	bhi.w	801f6e2 <lv_fs_read_cached+0x14a>
 801f5de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5e2:	429a      	cmp	r2, r3
 801f5e4:	d27d      	bcs.n	801f6e2 <lv_fs_read_cached+0x14a>
        /* Data can be read from cache buffer */
        uint16_t buffer_offset = file_position - start;
 801f5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5e8:	b29a      	uxth	r2, r3
 801f5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5ec:	b29b      	uxth	r3, r3
 801f5ee:	1ad3      	subs	r3, r2, r3
 801f5f0:	843b      	strh	r3, [r7, #32]
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 801f5f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5f6:	1ad2      	subs	r2, r2, r3
 801f5f8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 801f5fa:	8c3b      	ldrh	r3, [r7, #32]
 801f5fc:	1acb      	subs	r3, r1, r3
 801f5fe:	4293      	cmp	r3, r2
 801f600:	bf28      	it	cs
 801f602:	4613      	movcs	r3, r2
 801f604:	61fb      	str	r3, [r7, #28]

        if(btr <= buffer_remaining_length) {
 801f606:	687a      	ldr	r2, [r7, #4]
 801f608:	69fb      	ldr	r3, [r7, #28]
 801f60a:	429a      	cmp	r2, r3
 801f60c:	d80b      	bhi.n	801f626 <lv_fs_read_cached+0x8e>
            /*Data is in cache buffer, and buffer end not reached, no need to read from FS*/
            lv_memcpy(buf, buffer + buffer_offset, btr);
 801f60e:	8c3b      	ldrh	r3, [r7, #32]
 801f610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f612:	4413      	add	r3, r2
 801f614:	687a      	ldr	r2, [r7, #4]
 801f616:	4619      	mov	r1, r3
 801f618:	68b8      	ldr	r0, [r7, #8]
 801f61a:	f000 fe4d 	bl	80202b8 <lv_memcpy>
            *br = btr;
 801f61e:	683b      	ldr	r3, [r7, #0]
 801f620:	687a      	ldr	r2, [r7, #4]
 801f622:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 801f624:	e0b3      	b.n	801f78e <lv_fs_read_cached+0x1f6>
        }
        else {
            /*First part of data is in cache buffer, but we need to read rest of data from FS*/
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 801f626:	8c3b      	ldrh	r3, [r7, #32]
 801f628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f62a:	4413      	add	r3, r2
 801f62c:	69fa      	ldr	r2, [r7, #28]
 801f62e:	4619      	mov	r1, r3
 801f630:	68b8      	ldr	r0, [r7, #8]
 801f632:	f000 fe41 	bl	80202b8 <lv_memcpy>

            uint32_t bytes_read_to_buffer = 0;
 801f636:	2300      	movs	r3, #0
 801f638:	617b      	str	r3, [r7, #20]
            if(btr > buffer_size) {
 801f63a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f63c:	687a      	ldr	r2, [r7, #4]
 801f63e:	429a      	cmp	r2, r3
 801f640:	d916      	bls.n	801f670 <lv_fs_read_cached+0xd8>
                /*If remaining data chuck is bigger than buffer size, then do not use cache, instead read it directly from FS*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 801f642:	68fb      	ldr	r3, [r7, #12]
 801f644:	685b      	ldr	r3, [r3, #4]
 801f646:	691c      	ldr	r4, [r3, #16]
 801f648:	68fb      	ldr	r3, [r7, #12]
 801f64a:	6858      	ldr	r0, [r3, #4]
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	6819      	ldr	r1, [r3, #0]
 801f650:	68ba      	ldr	r2, [r7, #8]
 801f652:	69fb      	ldr	r3, [r7, #28]
 801f654:	18d5      	adds	r5, r2, r3
 801f656:	687a      	ldr	r2, [r7, #4]
 801f658:	69fb      	ldr	r3, [r7, #28]
 801f65a:	1ad2      	subs	r2, r2, r3
 801f65c:	f107 0314 	add.w	r3, r7, #20
 801f660:	9300      	str	r3, [sp, #0]
 801f662:	4613      	mov	r3, r2
 801f664:	462a      	mov	r2, r5
 801f666:	47a0      	blx	r4
 801f668:	4603      	mov	r3, r0
 801f66a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801f66e:	e02e      	b.n	801f6ce <lv_fs_read_cached+0x136>
                                           btr - buffer_remaining_length, &bytes_read_to_buffer);
            }
            else {
                /*If remaining data chunk is smaller than buffer size, then read into cache buffer*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 801f670:	68fb      	ldr	r3, [r7, #12]
 801f672:	685b      	ldr	r3, [r3, #4]
 801f674:	691c      	ldr	r4, [r3, #16]
 801f676:	68fb      	ldr	r3, [r7, #12]
 801f678:	6858      	ldr	r0, [r3, #4]
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	6819      	ldr	r1, [r3, #0]
 801f67e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f680:	f107 0314 	add.w	r3, r7, #20
 801f684:	9300      	str	r3, [sp, #0]
 801f686:	4613      	mov	r3, r2
 801f688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f68a:	47a0      	blx	r4
 801f68c:	4603      	mov	r3, r0
 801f68e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                file_p->cache->start = file_p->cache->end;
 801f692:	68fb      	ldr	r3, [r7, #12]
 801f694:	689a      	ldr	r2, [r3, #8]
 801f696:	68fb      	ldr	r3, [r7, #12]
 801f698:	689b      	ldr	r3, [r3, #8]
 801f69a:	6852      	ldr	r2, [r2, #4]
 801f69c:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 801f69e:	68fb      	ldr	r3, [r7, #12]
 801f6a0:	689b      	ldr	r3, [r3, #8]
 801f6a2:	6819      	ldr	r1, [r3, #0]
 801f6a4:	697a      	ldr	r2, [r7, #20]
 801f6a6:	68fb      	ldr	r3, [r7, #12]
 801f6a8:	689b      	ldr	r3, [r3, #8]
 801f6aa:	440a      	add	r2, r1
 801f6ac:	605a      	str	r2, [r3, #4]

                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 801f6ae:	687a      	ldr	r2, [r7, #4]
 801f6b0:	69fb      	ldr	r3, [r7, #28]
 801f6b2:	1ad2      	subs	r2, r2, r3
 801f6b4:	697b      	ldr	r3, [r7, #20]
 801f6b6:	4293      	cmp	r3, r2
 801f6b8:	bf28      	it	cs
 801f6ba:	4613      	movcs	r3, r2
 801f6bc:	837b      	strh	r3, [r7, #26]
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 801f6be:	68ba      	ldr	r2, [r7, #8]
 801f6c0:	69fb      	ldr	r3, [r7, #28]
 801f6c2:	4413      	add	r3, r2
 801f6c4:	8b7a      	ldrh	r2, [r7, #26]
 801f6c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f6c8:	4618      	mov	r0, r3
 801f6ca:	f000 fdf5 	bl	80202b8 <lv_memcpy>
            }
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 801f6ce:	697a      	ldr	r2, [r7, #20]
 801f6d0:	69fb      	ldr	r3, [r7, #28]
 801f6d2:	441a      	add	r2, r3
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	429a      	cmp	r2, r3
 801f6d8:	bf28      	it	cs
 801f6da:	461a      	movcs	r2, r3
 801f6dc:	683b      	ldr	r3, [r7, #0]
 801f6de:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 801f6e0:	e055      	b.n	801f78e <lv_fs_read_cached+0x1f6>
        }
    }
    else {
        /*Data is not in cache buffer*/
        if(btr > buffer_size) {
 801f6e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f6e4:	687a      	ldr	r2, [r7, #4]
 801f6e6:	429a      	cmp	r2, r3
 801f6e8:	d90f      	bls.n	801f70a <lv_fs_read_cached+0x172>
            /*If bigger data is requested, then do not use cache, instead read it directly*/
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 801f6ea:	68fb      	ldr	r3, [r7, #12]
 801f6ec:	685b      	ldr	r3, [r3, #4]
 801f6ee:	691c      	ldr	r4, [r3, #16]
 801f6f0:	68fb      	ldr	r3, [r7, #12]
 801f6f2:	6858      	ldr	r0, [r3, #4]
 801f6f4:	68fb      	ldr	r3, [r7, #12]
 801f6f6:	6819      	ldr	r1, [r3, #0]
 801f6f8:	683b      	ldr	r3, [r7, #0]
 801f6fa:	9300      	str	r3, [sp, #0]
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	68ba      	ldr	r2, [r7, #8]
 801f700:	47a0      	blx	r4
 801f702:	4603      	mov	r3, r0
 801f704:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801f708:	e041      	b.n	801f78e <lv_fs_read_cached+0x1f6>
        }
        else {
            /*If small data is requested, then read from FS into cache buffer*/
            if(buffer == NULL) {
 801f70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d111      	bne.n	801f734 <lv_fs_read_cached+0x19c>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 801f710:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f712:	68fb      	ldr	r3, [r7, #12]
 801f714:	689c      	ldr	r4, [r3, #8]
 801f716:	4610      	mov	r0, r2
 801f718:	f000 fc40 	bl	801ff9c <lv_mem_alloc>
 801f71c:	4603      	mov	r3, r0
 801f71e:	60e3      	str	r3, [r4, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 801f720:	68fb      	ldr	r3, [r7, #12]
 801f722:	689b      	ldr	r3, [r3, #8]
 801f724:	68db      	ldr	r3, [r3, #12]
 801f726:	2b00      	cmp	r3, #0
 801f728:	d100      	bne.n	801f72c <lv_fs_read_cached+0x194>
 801f72a:	e7fe      	b.n	801f72a <lv_fs_read_cached+0x192>
                buffer = file_p->cache->buffer;
 801f72c:	68fb      	ldr	r3, [r7, #12]
 801f72e:	689b      	ldr	r3, [r3, #8]
 801f730:	68db      	ldr	r3, [r3, #12]
 801f732:	633b      	str	r3, [r7, #48]	; 0x30
            }

            uint32_t bytes_read_to_buffer = 0;
 801f734:	2300      	movs	r3, #0
 801f736:	613b      	str	r3, [r7, #16]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 801f738:	68fb      	ldr	r3, [r7, #12]
 801f73a:	685b      	ldr	r3, [r3, #4]
 801f73c:	691c      	ldr	r4, [r3, #16]
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	6858      	ldr	r0, [r3, #4]
 801f742:	68fb      	ldr	r3, [r7, #12]
 801f744:	6819      	ldr	r1, [r3, #0]
 801f746:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f748:	f107 0310 	add.w	r3, r7, #16
 801f74c:	9300      	str	r3, [sp, #0]
 801f74e:	4613      	mov	r3, r2
 801f750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f752:	47a0      	blx	r4
 801f754:	4603      	mov	r3, r0
 801f756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            file_p->cache->start = file_position;
 801f75a:	68fb      	ldr	r3, [r7, #12]
 801f75c:	689b      	ldr	r3, [r3, #8]
 801f75e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f760:	601a      	str	r2, [r3, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 801f762:	68fb      	ldr	r3, [r7, #12]
 801f764:	689b      	ldr	r3, [r3, #8]
 801f766:	6819      	ldr	r1, [r3, #0]
 801f768:	693a      	ldr	r2, [r7, #16]
 801f76a:	68fb      	ldr	r3, [r7, #12]
 801f76c:	689b      	ldr	r3, [r3, #8]
 801f76e:	440a      	add	r2, r1
 801f770:	605a      	str	r2, [r3, #4]

            *br = LV_MIN(btr, bytes_read_to_buffer);
 801f772:	693a      	ldr	r2, [r7, #16]
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	429a      	cmp	r2, r3
 801f778:	bf28      	it	cs
 801f77a:	461a      	movcs	r2, r3
 801f77c:	683b      	ldr	r3, [r7, #0]
 801f77e:	601a      	str	r2, [r3, #0]
            lv_memcpy(buf, buffer, *br);
 801f780:	683b      	ldr	r3, [r7, #0]
 801f782:	681b      	ldr	r3, [r3, #0]
 801f784:	461a      	mov	r2, r3
 801f786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f788:	68b8      	ldr	r0, [r7, #8]
 801f78a:	f000 fd95 	bl	80202b8 <lv_memcpy>

        }
    }

    if(res == LV_FS_RES_OK) {
 801f78e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801f792:	2b00      	cmp	r3, #0
 801f794:	d108      	bne.n	801f7a8 <lv_fs_read_cached+0x210>
        file_p->cache->file_position += *br;
 801f796:	68fb      	ldr	r3, [r7, #12]
 801f798:	689b      	ldr	r3, [r3, #8]
 801f79a:	6899      	ldr	r1, [r3, #8]
 801f79c:	683b      	ldr	r3, [r7, #0]
 801f79e:	681a      	ldr	r2, [r3, #0]
 801f7a0:	68fb      	ldr	r3, [r7, #12]
 801f7a2:	689b      	ldr	r3, [r3, #8]
 801f7a4:	440a      	add	r2, r1
 801f7a6:	609a      	str	r2, [r3, #8]
    }

    return res;
 801f7a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	3738      	adds	r7, #56	; 0x38
 801f7b0:	46bd      	mov	sp, r7
 801f7b2:	bdb0      	pop	{r4, r5, r7, pc}

0801f7b4 <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 801f7b4:	b590      	push	{r4, r7, lr}
 801f7b6:	b089      	sub	sp, #36	; 0x24
 801f7b8:	af02      	add	r7, sp, #8
 801f7ba:	60f8      	str	r0, [r7, #12]
 801f7bc:	60b9      	str	r1, [r7, #8]
 801f7be:	607a      	str	r2, [r7, #4]
 801f7c0:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 801f7c2:	683b      	ldr	r3, [r7, #0]
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	d002      	beq.n	801f7ce <lv_fs_read+0x1a>
 801f7c8:	683b      	ldr	r3, [r7, #0]
 801f7ca:	2200      	movs	r2, #0
 801f7cc:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801f7ce:	68fb      	ldr	r3, [r7, #12]
 801f7d0:	685b      	ldr	r3, [r3, #4]
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d101      	bne.n	801f7da <lv_fs_read+0x26>
 801f7d6:	230b      	movs	r3, #11
 801f7d8:	e02d      	b.n	801f836 <lv_fs_read+0x82>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 801f7da:	68fb      	ldr	r3, [r7, #12]
 801f7dc:	685b      	ldr	r3, [r3, #4]
 801f7de:	691b      	ldr	r3, [r3, #16]
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d101      	bne.n	801f7e8 <lv_fs_read+0x34>
 801f7e4:	2309      	movs	r3, #9
 801f7e6:	e026      	b.n	801f836 <lv_fs_read+0x82>

    uint32_t br_tmp = 0;
 801f7e8:	2300      	movs	r3, #0
 801f7ea:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 801f7ec:	68fb      	ldr	r3, [r7, #12]
 801f7ee:	685b      	ldr	r3, [r3, #4]
 801f7f0:	885b      	ldrh	r3, [r3, #2]
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d009      	beq.n	801f80a <lv_fs_read+0x56>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 801f7f6:	f107 0310 	add.w	r3, r7, #16
 801f7fa:	687a      	ldr	r2, [r7, #4]
 801f7fc:	68b9      	ldr	r1, [r7, #8]
 801f7fe:	68f8      	ldr	r0, [r7, #12]
 801f800:	f7ff feca 	bl	801f598 <lv_fs_read_cached>
 801f804:	4603      	mov	r3, r0
 801f806:	75fb      	strb	r3, [r7, #23]
 801f808:	e00e      	b.n	801f828 <lv_fs_read+0x74>
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801f80a:	68fb      	ldr	r3, [r7, #12]
 801f80c:	685b      	ldr	r3, [r3, #4]
 801f80e:	691c      	ldr	r4, [r3, #16]
 801f810:	68fb      	ldr	r3, [r7, #12]
 801f812:	6858      	ldr	r0, [r3, #4]
 801f814:	68fb      	ldr	r3, [r7, #12]
 801f816:	6819      	ldr	r1, [r3, #0]
 801f818:	f107 0310 	add.w	r3, r7, #16
 801f81c:	9300      	str	r3, [sp, #0]
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	68ba      	ldr	r2, [r7, #8]
 801f822:	47a0      	blx	r4
 801f824:	4603      	mov	r3, r0
 801f826:	75fb      	strb	r3, [r7, #23]
    }

    if(br != NULL) *br = br_tmp;
 801f828:	683b      	ldr	r3, [r7, #0]
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d002      	beq.n	801f834 <lv_fs_read+0x80>
 801f82e:	693a      	ldr	r2, [r7, #16]
 801f830:	683b      	ldr	r3, [r7, #0]
 801f832:	601a      	str	r2, [r3, #0]

    return res;
 801f834:	7dfb      	ldrb	r3, [r7, #23]
}
 801f836:	4618      	mov	r0, r3
 801f838:	371c      	adds	r7, #28
 801f83a:	46bd      	mov	sp, r7
 801f83c:	bd90      	pop	{r4, r7, pc}

0801f83e <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 801f83e:	b590      	push	{r4, r7, lr}
 801f840:	b087      	sub	sp, #28
 801f842:	af00      	add	r7, sp, #0
 801f844:	60f8      	str	r0, [r7, #12]
 801f846:	60b9      	str	r1, [r7, #8]
 801f848:	4613      	mov	r3, r2
 801f84a:	71fb      	strb	r3, [r7, #7]
    if(file_p->drv == NULL) {
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	685b      	ldr	r3, [r3, #4]
 801f850:	2b00      	cmp	r3, #0
 801f852:	d101      	bne.n	801f858 <lv_fs_seek+0x1a>
        return LV_FS_RES_INV_PARAM;
 801f854:	230b      	movs	r3, #11
 801f856:	e098      	b.n	801f98a <lv_fs_seek+0x14c>
    }

    if(file_p->drv->seek_cb == NULL) {
 801f858:	68fb      	ldr	r3, [r7, #12]
 801f85a:	685b      	ldr	r3, [r3, #4]
 801f85c:	699b      	ldr	r3, [r3, #24]
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d101      	bne.n	801f866 <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 801f862:	2309      	movs	r3, #9
 801f864:	e091      	b.n	801f98a <lv_fs_seek+0x14c>
    }

    lv_fs_res_t res = LV_FS_RES_OK;
 801f866:	2300      	movs	r3, #0
 801f868:	75fb      	strb	r3, [r7, #23]
    if(file_p->drv->cache_size) {
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	685b      	ldr	r3, [r3, #4]
 801f86e:	885b      	ldrh	r3, [r3, #2]
 801f870:	2b00      	cmp	r3, #0
 801f872:	d077      	beq.n	801f964 <lv_fs_seek+0x126>
        switch(whence) {
 801f874:	79fb      	ldrb	r3, [r7, #7]
 801f876:	2b02      	cmp	r3, #2
 801f878:	d051      	beq.n	801f91e <lv_fs_seek+0xe0>
 801f87a:	2b02      	cmp	r3, #2
 801f87c:	f300 8084 	bgt.w	801f988 <lv_fs_seek+0x14a>
 801f880:	2b00      	cmp	r3, #0
 801f882:	d002      	beq.n	801f88a <lv_fs_seek+0x4c>
 801f884:	2b01      	cmp	r3, #1
 801f886:	d023      	beq.n	801f8d0 <lv_fs_seek+0x92>
 801f888:	e07e      	b.n	801f988 <lv_fs_seek+0x14a>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	689b      	ldr	r3, [r3, #8]
 801f88e:	68ba      	ldr	r2, [r7, #8]
 801f890:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 801f892:	68fb      	ldr	r3, [r7, #12]
 801f894:	689b      	ldr	r3, [r3, #8]
 801f896:	689a      	ldr	r2, [r3, #8]
 801f898:	68fb      	ldr	r3, [r7, #12]
 801f89a:	689b      	ldr	r3, [r3, #8]
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	429a      	cmp	r2, r3
 801f8a0:	d307      	bcc.n	801f8b2 <lv_fs_seek+0x74>
 801f8a2:	68fb      	ldr	r3, [r7, #12]
 801f8a4:	689b      	ldr	r3, [r3, #8]
 801f8a6:	689a      	ldr	r2, [r3, #8]
 801f8a8:	68fb      	ldr	r3, [r7, #12]
 801f8aa:	689b      	ldr	r3, [r3, #8]
 801f8ac:	685b      	ldr	r3, [r3, #4]
 801f8ae:	429a      	cmp	r2, r3
 801f8b0:	d965      	bls.n	801f97e <lv_fs_seek+0x140>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 801f8b2:	68fb      	ldr	r3, [r7, #12]
 801f8b4:	685b      	ldr	r3, [r3, #4]
 801f8b6:	699c      	ldr	r4, [r3, #24]
 801f8b8:	68fb      	ldr	r3, [r7, #12]
 801f8ba:	6858      	ldr	r0, [r3, #4]
 801f8bc:	68fb      	ldr	r3, [r7, #12]
 801f8be:	6819      	ldr	r1, [r3, #0]
 801f8c0:	68fb      	ldr	r3, [r7, #12]
 801f8c2:	689b      	ldr	r3, [r3, #8]
 801f8c4:	689a      	ldr	r2, [r3, #8]
 801f8c6:	2300      	movs	r3, #0
 801f8c8:	47a0      	blx	r4
 801f8ca:	4603      	mov	r3, r0
 801f8cc:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 801f8ce:	e056      	b.n	801f97e <lv_fs_seek+0x140>
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 801f8d0:	68fb      	ldr	r3, [r7, #12]
 801f8d2:	689b      	ldr	r3, [r3, #8]
 801f8d4:	6899      	ldr	r1, [r3, #8]
 801f8d6:	68fb      	ldr	r3, [r7, #12]
 801f8d8:	689b      	ldr	r3, [r3, #8]
 801f8da:	68ba      	ldr	r2, [r7, #8]
 801f8dc:	440a      	add	r2, r1
 801f8de:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 801f8e0:	68fb      	ldr	r3, [r7, #12]
 801f8e2:	689b      	ldr	r3, [r3, #8]
 801f8e4:	689a      	ldr	r2, [r3, #8]
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	689b      	ldr	r3, [r3, #8]
 801f8ea:	681b      	ldr	r3, [r3, #0]
 801f8ec:	429a      	cmp	r2, r3
 801f8ee:	d307      	bcc.n	801f900 <lv_fs_seek+0xc2>
 801f8f0:	68fb      	ldr	r3, [r7, #12]
 801f8f2:	689b      	ldr	r3, [r3, #8]
 801f8f4:	689a      	ldr	r2, [r3, #8]
 801f8f6:	68fb      	ldr	r3, [r7, #12]
 801f8f8:	689b      	ldr	r3, [r3, #8]
 801f8fa:	685b      	ldr	r3, [r3, #4]
 801f8fc:	429a      	cmp	r2, r3
 801f8fe:	d940      	bls.n	801f982 <lv_fs_seek+0x144>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	685b      	ldr	r3, [r3, #4]
 801f904:	699c      	ldr	r4, [r3, #24]
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	6858      	ldr	r0, [r3, #4]
 801f90a:	68fb      	ldr	r3, [r7, #12]
 801f90c:	6819      	ldr	r1, [r3, #0]
 801f90e:	68fb      	ldr	r3, [r7, #12]
 801f910:	689b      	ldr	r3, [r3, #8]
 801f912:	689a      	ldr	r2, [r3, #8]
 801f914:	2300      	movs	r3, #0
 801f916:	47a0      	blx	r4
 801f918:	4603      	mov	r3, r0
 801f91a:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 801f91c:	e031      	b.n	801f982 <lv_fs_seek+0x144>
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	685b      	ldr	r3, [r3, #4]
 801f922:	699c      	ldr	r4, [r3, #24]
 801f924:	68fb      	ldr	r3, [r7, #12]
 801f926:	6858      	ldr	r0, [r3, #4]
 801f928:	68fb      	ldr	r3, [r7, #12]
 801f92a:	6819      	ldr	r1, [r3, #0]
 801f92c:	79fb      	ldrb	r3, [r7, #7]
 801f92e:	68ba      	ldr	r2, [r7, #8]
 801f930:	47a0      	blx	r4
 801f932:	4603      	mov	r3, r0
 801f934:	75fb      	strb	r3, [r7, #23]
                    if(res == LV_FS_RES_OK) {
 801f936:	7dfb      	ldrb	r3, [r7, #23]
 801f938:	2b00      	cmp	r3, #0
 801f93a:	d124      	bne.n	801f986 <lv_fs_seek+0x148>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 801f93c:	68fb      	ldr	r3, [r7, #12]
 801f93e:	685b      	ldr	r3, [r3, #4]
 801f940:	69db      	ldr	r3, [r3, #28]
 801f942:	68fa      	ldr	r2, [r7, #12]
 801f944:	6850      	ldr	r0, [r2, #4]
 801f946:	68fa      	ldr	r2, [r7, #12]
 801f948:	6811      	ldr	r1, [r2, #0]
 801f94a:	f107 0210 	add.w	r2, r7, #16
 801f94e:	4798      	blx	r3
 801f950:	4603      	mov	r3, r0
 801f952:	75fb      	strb	r3, [r7, #23]

                        if(res == LV_FS_RES_OK) {
 801f954:	7dfb      	ldrb	r3, [r7, #23]
 801f956:	2b00      	cmp	r3, #0
 801f958:	d115      	bne.n	801f986 <lv_fs_seek+0x148>
                            file_p->cache->file_position = tmp_position;
 801f95a:	68fb      	ldr	r3, [r7, #12]
 801f95c:	689b      	ldr	r3, [r3, #8]
 801f95e:	693a      	ldr	r2, [r7, #16]
 801f960:	609a      	str	r2, [r3, #8]
                        }
                    }
                    break;
 801f962:	e010      	b.n	801f986 <lv_fs_seek+0x148>
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 801f964:	68fb      	ldr	r3, [r7, #12]
 801f966:	685b      	ldr	r3, [r3, #4]
 801f968:	699c      	ldr	r4, [r3, #24]
 801f96a:	68fb      	ldr	r3, [r7, #12]
 801f96c:	6858      	ldr	r0, [r3, #4]
 801f96e:	68fb      	ldr	r3, [r7, #12]
 801f970:	6819      	ldr	r1, [r3, #0]
 801f972:	79fb      	ldrb	r3, [r7, #7]
 801f974:	68ba      	ldr	r2, [r7, #8]
 801f976:	47a0      	blx	r4
 801f978:	4603      	mov	r3, r0
 801f97a:	75fb      	strb	r3, [r7, #23]
 801f97c:	e004      	b.n	801f988 <lv_fs_seek+0x14a>
                    break;
 801f97e:	bf00      	nop
 801f980:	e002      	b.n	801f988 <lv_fs_seek+0x14a>
                    break;
 801f982:	bf00      	nop
 801f984:	e000      	b.n	801f988 <lv_fs_seek+0x14a>
                    break;
 801f986:	bf00      	nop
    }

    return res;
 801f988:	7dfb      	ldrb	r3, [r7, #23]
}
 801f98a:	4618      	mov	r0, r3
 801f98c:	371c      	adds	r7, #28
 801f98e:	46bd      	mov	sp, r7
 801f990:	bd90      	pop	{r4, r7, pc}
	...

0801f994 <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801f994:	b580      	push	{r7, lr}
 801f996:	b084      	sub	sp, #16
 801f998:	af00      	add	r7, sp, #0
 801f99a:	4603      	mov	r3, r0
 801f99c:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 801f99e:	480d      	ldr	r0, [pc, #52]	; (801f9d4 <lv_fs_get_drv+0x40>)
 801f9a0:	f000 f93d 	bl	801fc1e <_lv_ll_get_head>
 801f9a4:	60f8      	str	r0, [r7, #12]
 801f9a6:	e00d      	b.n	801f9c4 <lv_fs_get_drv+0x30>
        if((*drv)->letter == letter) {
 801f9a8:	68fb      	ldr	r3, [r7, #12]
 801f9aa:	681b      	ldr	r3, [r3, #0]
 801f9ac:	781b      	ldrb	r3, [r3, #0]
 801f9ae:	79fa      	ldrb	r2, [r7, #7]
 801f9b0:	429a      	cmp	r2, r3
 801f9b2:	d102      	bne.n	801f9ba <lv_fs_get_drv+0x26>
            return *drv;
 801f9b4:	68fb      	ldr	r3, [r7, #12]
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	e008      	b.n	801f9cc <lv_fs_get_drv+0x38>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 801f9ba:	68f9      	ldr	r1, [r7, #12]
 801f9bc:	4805      	ldr	r0, [pc, #20]	; (801f9d4 <lv_fs_get_drv+0x40>)
 801f9be:	f000 f950 	bl	801fc62 <_lv_ll_get_next>
 801f9c2:	60f8      	str	r0, [r7, #12]
 801f9c4:	68fb      	ldr	r3, [r7, #12]
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d1ee      	bne.n	801f9a8 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 801f9ca:	2300      	movs	r3, #0
}
 801f9cc:	4618      	mov	r0, r3
 801f9ce:	3710      	adds	r7, #16
 801f9d0:	46bd      	mov	sp, r7
 801f9d2:	bd80      	pop	{r7, pc}
 801f9d4:	20000810 	.word	0x20000810

0801f9d8 <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 801f9d8:	b580      	push	{r7, lr}
 801f9da:	b084      	sub	sp, #16
 801f9dc:	af00      	add	r7, sp, #0
 801f9de:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 801f9e0:	6878      	ldr	r0, [r7, #4]
 801f9e2:	f7e0 fc33 	bl	800024c <strlen>
 801f9e6:	60f8      	str	r0, [r7, #12]
 801f9e8:	e01b      	b.n	801fa22 <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 801f9ea:	687a      	ldr	r2, [r7, #4]
 801f9ec:	68fb      	ldr	r3, [r7, #12]
 801f9ee:	4413      	add	r3, r2
 801f9f0:	781b      	ldrb	r3, [r3, #0]
 801f9f2:	2b2e      	cmp	r3, #46	; 0x2e
 801f9f4:	d104      	bne.n	801fa00 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 801f9f6:	68fb      	ldr	r3, [r7, #12]
 801f9f8:	3301      	adds	r3, #1
 801f9fa:	687a      	ldr	r2, [r7, #4]
 801f9fc:	4413      	add	r3, r2
 801f9fe:	e014      	b.n	801fa2a <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 801fa00:	687a      	ldr	r2, [r7, #4]
 801fa02:	68fb      	ldr	r3, [r7, #12]
 801fa04:	4413      	add	r3, r2
 801fa06:	781b      	ldrb	r3, [r3, #0]
 801fa08:	2b2f      	cmp	r3, #47	; 0x2f
 801fa0a:	d005      	beq.n	801fa18 <lv_fs_get_ext+0x40>
 801fa0c:	687a      	ldr	r2, [r7, #4]
 801fa0e:	68fb      	ldr	r3, [r7, #12]
 801fa10:	4413      	add	r3, r2
 801fa12:	781b      	ldrb	r3, [r3, #0]
 801fa14:	2b5c      	cmp	r3, #92	; 0x5c
 801fa16:	d101      	bne.n	801fa1c <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 801fa18:	4b06      	ldr	r3, [pc, #24]	; (801fa34 <lv_fs_get_ext+0x5c>)
 801fa1a:	e006      	b.n	801fa2a <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 801fa1c:	68fb      	ldr	r3, [r7, #12]
 801fa1e:	3b01      	subs	r3, #1
 801fa20:	60fb      	str	r3, [r7, #12]
 801fa22:	68fb      	ldr	r3, [r7, #12]
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	d1e0      	bne.n	801f9ea <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
 801fa28:	4b02      	ldr	r3, [pc, #8]	; (801fa34 <lv_fs_get_ext+0x5c>)
}
 801fa2a:	4618      	mov	r0, r3
 801fa2c:	3710      	adds	r7, #16
 801fa2e:	46bd      	mov	sp, r7
 801fa30:	bd80      	pop	{r7, pc}
 801fa32:	bf00      	nop
 801fa34:	08022c2c 	.word	0x08022c2c

0801fa38 <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 801fa38:	b480      	push	{r7}
 801fa3a:	b083      	sub	sp, #12
 801fa3c:	af00      	add	r7, sp, #0
 801fa3e:	6078      	str	r0, [r7, #4]
    path++; /*Ignore the driver letter*/
 801fa40:	687b      	ldr	r3, [r7, #4]
 801fa42:	3301      	adds	r3, #1
 801fa44:	607b      	str	r3, [r7, #4]
    if(*path == ':') path++;
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	781b      	ldrb	r3, [r3, #0]
 801fa4a:	2b3a      	cmp	r3, #58	; 0x3a
 801fa4c:	d102      	bne.n	801fa54 <lv_fs_get_real_path+0x1c>
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	3301      	adds	r3, #1
 801fa52:	607b      	str	r3, [r7, #4]

    return path;
 801fa54:	687b      	ldr	r3, [r7, #4]
}
 801fa56:	4618      	mov	r0, r3
 801fa58:	370c      	adds	r7, #12
 801fa5a:	46bd      	mov	sp, r7
 801fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa60:	4770      	bx	lr

0801fa62 <_lv_ll_init>:
 * Initialize linked list
 * @param ll_p pointer to lv_ll_t variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 801fa62:	b480      	push	{r7}
 801fa64:	b083      	sub	sp, #12
 801fa66:	af00      	add	r7, sp, #0
 801fa68:	6078      	str	r0, [r7, #4]
 801fa6a:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	2200      	movs	r2, #0
 801fa70:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	2200      	movs	r2, #0
 801fa76:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 801fa78:	683b      	ldr	r3, [r7, #0]
 801fa7a:	3303      	adds	r3, #3
 801fa7c:	f023 0303 	bic.w	r3, r3, #3
 801fa80:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	683a      	ldr	r2, [r7, #0]
 801fa86:	601a      	str	r2, [r3, #0]
}
 801fa88:	bf00      	nop
 801fa8a:	370c      	adds	r7, #12
 801fa8c:	46bd      	mov	sp, r7
 801fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa92:	4770      	bx	lr

0801fa94 <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 801fa94:	b580      	push	{r7, lr}
 801fa96:	b084      	sub	sp, #16
 801fa98:	af00      	add	r7, sp, #0
 801fa9a:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801fa9c:	687b      	ldr	r3, [r7, #4]
 801fa9e:	681b      	ldr	r3, [r3, #0]
 801faa0:	3308      	adds	r3, #8
 801faa2:	4618      	mov	r0, r3
 801faa4:	f000 fa7a 	bl	801ff9c <lv_mem_alloc>
 801faa8:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801faaa:	68fb      	ldr	r3, [r7, #12]
 801faac:	2b00      	cmp	r3, #0
 801faae:	d020      	beq.n	801faf2 <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 801fab0:	2200      	movs	r2, #0
 801fab2:	68f9      	ldr	r1, [r7, #12]
 801fab4:	6878      	ldr	r0, [r7, #4]
 801fab6:	f000 f917 	bl	801fce8 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 801faba:	687b      	ldr	r3, [r7, #4]
 801fabc:	685b      	ldr	r3, [r3, #4]
 801fabe:	461a      	mov	r2, r3
 801fac0:	68f9      	ldr	r1, [r7, #12]
 801fac2:	6878      	ldr	r0, [r7, #4]
 801fac4:	f000 f92f 	bl	801fd26 <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	685b      	ldr	r3, [r3, #4]
 801facc:	2b00      	cmp	r3, #0
 801face:	d006      	beq.n	801fade <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	685b      	ldr	r3, [r3, #4]
 801fad4:	68fa      	ldr	r2, [r7, #12]
 801fad6:	4619      	mov	r1, r3
 801fad8:	6878      	ldr	r0, [r7, #4]
 801fada:	f000 f905 	bl	801fce8 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 801fade:	687b      	ldr	r3, [r7, #4]
 801fae0:	68fa      	ldr	r2, [r7, #12]
 801fae2:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	689b      	ldr	r3, [r3, #8]
 801fae8:	2b00      	cmp	r3, #0
 801faea:	d102      	bne.n	801faf2 <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	68fa      	ldr	r2, [r7, #12]
 801faf0:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 801faf2:	68fb      	ldr	r3, [r7, #12]
}
 801faf4:	4618      	mov	r0, r3
 801faf6:	3710      	adds	r7, #16
 801faf8:	46bd      	mov	sp, r7
 801fafa:	bd80      	pop	{r7, pc}

0801fafc <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 801fafc:	b580      	push	{r7, lr}
 801fafe:	b084      	sub	sp, #16
 801fb00:	af00      	add	r7, sp, #0
 801fb02:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	3308      	adds	r3, #8
 801fb0a:	4618      	mov	r0, r3
 801fb0c:	f000 fa46 	bl	801ff9c <lv_mem_alloc>
 801fb10:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801fb12:	68fb      	ldr	r3, [r7, #12]
 801fb14:	2b00      	cmp	r3, #0
 801fb16:	d020      	beq.n	801fb5a <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 801fb18:	2200      	movs	r2, #0
 801fb1a:	68f9      	ldr	r1, [r7, #12]
 801fb1c:	6878      	ldr	r0, [r7, #4]
 801fb1e:	f000 f902 	bl	801fd26 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	689b      	ldr	r3, [r3, #8]
 801fb26:	461a      	mov	r2, r3
 801fb28:	68f9      	ldr	r1, [r7, #12]
 801fb2a:	6878      	ldr	r0, [r7, #4]
 801fb2c:	f000 f8dc 	bl	801fce8 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	689b      	ldr	r3, [r3, #8]
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	d006      	beq.n	801fb46 <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	689b      	ldr	r3, [r3, #8]
 801fb3c:	68fa      	ldr	r2, [r7, #12]
 801fb3e:	4619      	mov	r1, r3
 801fb40:	6878      	ldr	r0, [r7, #4]
 801fb42:	f000 f8f0 	bl	801fd26 <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	68fa      	ldr	r2, [r7, #12]
 801fb4a:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	685b      	ldr	r3, [r3, #4]
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	d102      	bne.n	801fb5a <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	68fa      	ldr	r2, [r7, #12]
 801fb58:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 801fb5a:	68fb      	ldr	r3, [r7, #12]
}
 801fb5c:	4618      	mov	r0, r3
 801fb5e:	3710      	adds	r7, #16
 801fb60:	46bd      	mov	sp, r7
 801fb62:	bd80      	pop	{r7, pc}

0801fb64 <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 801fb64:	b580      	push	{r7, lr}
 801fb66:	b084      	sub	sp, #16
 801fb68:	af00      	add	r7, sp, #0
 801fb6a:	6078      	str	r0, [r7, #4]
 801fb6c:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return;
 801fb6e:	687b      	ldr	r3, [r7, #4]
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d050      	beq.n	801fc16 <_lv_ll_remove+0xb2>

    if(_lv_ll_get_head(ll_p) == node_p) {
 801fb74:	6878      	ldr	r0, [r7, #4]
 801fb76:	f000 f852 	bl	801fc1e <_lv_ll_get_head>
 801fb7a:	4602      	mov	r2, r0
 801fb7c:	683b      	ldr	r3, [r7, #0]
 801fb7e:	4293      	cmp	r3, r2
 801fb80:	d116      	bne.n	801fbb0 <_lv_ll_remove+0x4c>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 801fb82:	6839      	ldr	r1, [r7, #0]
 801fb84:	6878      	ldr	r0, [r7, #4]
 801fb86:	f000 f86c 	bl	801fc62 <_lv_ll_get_next>
 801fb8a:	4602      	mov	r2, r0
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	685b      	ldr	r3, [r3, #4]
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	d103      	bne.n	801fba0 <_lv_ll_remove+0x3c>
            ll_p->tail = NULL;
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	2200      	movs	r2, #0
 801fb9c:	609a      	str	r2, [r3, #8]
 801fb9e:	e03b      	b.n	801fc18 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_prev(ll_p, ll_p->head, NULL);
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	685b      	ldr	r3, [r3, #4]
 801fba4:	2200      	movs	r2, #0
 801fba6:	4619      	mov	r1, r3
 801fba8:	6878      	ldr	r0, [r7, #4]
 801fbaa:	f000 f89d 	bl	801fce8 <node_set_prev>
 801fbae:	e033      	b.n	801fc18 <_lv_ll_remove+0xb4>
        }
    }
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 801fbb0:	6878      	ldr	r0, [r7, #4]
 801fbb2:	f000 f845 	bl	801fc40 <_lv_ll_get_tail>
 801fbb6:	4602      	mov	r2, r0
 801fbb8:	683b      	ldr	r3, [r7, #0]
 801fbba:	4293      	cmp	r3, r2
 801fbbc:	d116      	bne.n	801fbec <_lv_ll_remove+0x88>
        /*The new tail will be the node before 'n_act'*/
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 801fbbe:	6839      	ldr	r1, [r7, #0]
 801fbc0:	6878      	ldr	r0, [r7, #4]
 801fbc2:	f000 f863 	bl	801fc8c <_lv_ll_get_prev>
 801fbc6:	4602      	mov	r2, r0
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	689b      	ldr	r3, [r3, #8]
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d103      	bne.n	801fbdc <_lv_ll_remove+0x78>
            ll_p->head = NULL;
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	2200      	movs	r2, #0
 801fbd8:	605a      	str	r2, [r3, #4]
 801fbda:	e01d      	b.n	801fc18 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_next(ll_p, ll_p->tail, NULL);
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	689b      	ldr	r3, [r3, #8]
 801fbe0:	2200      	movs	r2, #0
 801fbe2:	4619      	mov	r1, r3
 801fbe4:	6878      	ldr	r0, [r7, #4]
 801fbe6:	f000 f89e 	bl	801fd26 <node_set_next>
 801fbea:	e015      	b.n	801fc18 <_lv_ll_remove+0xb4>
        }
    }
    else {
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 801fbec:	6839      	ldr	r1, [r7, #0]
 801fbee:	6878      	ldr	r0, [r7, #4]
 801fbf0:	f000 f84c 	bl	801fc8c <_lv_ll_get_prev>
 801fbf4:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 801fbf6:	6839      	ldr	r1, [r7, #0]
 801fbf8:	6878      	ldr	r0, [r7, #4]
 801fbfa:	f000 f832 	bl	801fc62 <_lv_ll_get_next>
 801fbfe:	60b8      	str	r0, [r7, #8]

        node_set_next(ll_p, n_prev, n_next);
 801fc00:	68ba      	ldr	r2, [r7, #8]
 801fc02:	68f9      	ldr	r1, [r7, #12]
 801fc04:	6878      	ldr	r0, [r7, #4]
 801fc06:	f000 f88e 	bl	801fd26 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 801fc0a:	68fa      	ldr	r2, [r7, #12]
 801fc0c:	68b9      	ldr	r1, [r7, #8]
 801fc0e:	6878      	ldr	r0, [r7, #4]
 801fc10:	f000 f86a 	bl	801fce8 <node_set_prev>
 801fc14:	e000      	b.n	801fc18 <_lv_ll_remove+0xb4>
    if(ll_p == NULL) return;
 801fc16:	bf00      	nop
    }
}
 801fc18:	3710      	adds	r7, #16
 801fc1a:	46bd      	mov	sp, r7
 801fc1c:	bd80      	pop	{r7, pc}

0801fc1e <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 801fc1e:	b480      	push	{r7}
 801fc20:	b083      	sub	sp, #12
 801fc22:	af00      	add	r7, sp, #0
 801fc24:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d101      	bne.n	801fc30 <_lv_ll_get_head+0x12>
 801fc2c:	2300      	movs	r3, #0
 801fc2e:	e001      	b.n	801fc34 <_lv_ll_get_head+0x16>
    return ll_p->head;
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	685b      	ldr	r3, [r3, #4]
}
 801fc34:	4618      	mov	r0, r3
 801fc36:	370c      	adds	r7, #12
 801fc38:	46bd      	mov	sp, r7
 801fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc3e:	4770      	bx	lr

0801fc40 <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the tail of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 801fc40:	b480      	push	{r7}
 801fc42:	b083      	sub	sp, #12
 801fc44:	af00      	add	r7, sp, #0
 801fc46:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	d101      	bne.n	801fc52 <_lv_ll_get_tail+0x12>
 801fc4e:	2300      	movs	r3, #0
 801fc50:	e001      	b.n	801fc56 <_lv_ll_get_tail+0x16>
    return ll_p->tail;
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	689b      	ldr	r3, [r3, #8]
}
 801fc56:	4618      	mov	r0, r3
 801fc58:	370c      	adds	r7, #12
 801fc5a:	46bd      	mov	sp, r7
 801fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc60:	4770      	bx	lr

0801fc62 <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 801fc62:	b480      	push	{r7}
 801fc64:	b085      	sub	sp, #20
 801fc66:	af00      	add	r7, sp, #0
 801fc68:	6078      	str	r0, [r7, #4]
 801fc6a:	6039      	str	r1, [r7, #0]
    /*Pointer to the next node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 801fc6c:	683b      	ldr	r3, [r7, #0]
 801fc6e:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	3304      	adds	r3, #4
 801fc76:	68fa      	ldr	r2, [r7, #12]
 801fc78:	4413      	add	r3, r2
 801fc7a:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	681b      	ldr	r3, [r3, #0]
}
 801fc80:	4618      	mov	r0, r3
 801fc82:	3714      	adds	r7, #20
 801fc84:	46bd      	mov	sp, r7
 801fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc8a:	4770      	bx	lr

0801fc8c <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 801fc8c:	b480      	push	{r7}
 801fc8e:	b085      	sub	sp, #20
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	6078      	str	r0, [r7, #4]
 801fc94:	6039      	str	r1, [r7, #0]
    /*Pointer to the prev. node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 801fc96:	683b      	ldr	r3, [r7, #0]
 801fc98:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	681b      	ldr	r3, [r3, #0]
 801fc9e:	68fa      	ldr	r2, [r7, #12]
 801fca0:	4413      	add	r3, r2
 801fca2:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801fca4:	68fb      	ldr	r3, [r7, #12]
 801fca6:	681b      	ldr	r3, [r3, #0]
}
 801fca8:	4618      	mov	r0, r3
 801fcaa:	3714      	adds	r7, #20
 801fcac:	46bd      	mov	sp, r7
 801fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcb2:	4770      	bx	lr

0801fcb4 <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 801fcb4:	b480      	push	{r7}
 801fcb6:	b083      	sub	sp, #12
 801fcb8:	af00      	add	r7, sp, #0
 801fcba:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	d101      	bne.n	801fcc6 <_lv_ll_is_empty+0x12>
 801fcc2:	2301      	movs	r3, #1
 801fcc4:	e00a      	b.n	801fcdc <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	685b      	ldr	r3, [r3, #4]
 801fcca:	2b00      	cmp	r3, #0
 801fccc:	d105      	bne.n	801fcda <_lv_ll_is_empty+0x26>
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	689b      	ldr	r3, [r3, #8]
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d101      	bne.n	801fcda <_lv_ll_is_empty+0x26>
 801fcd6:	2301      	movs	r3, #1
 801fcd8:	e000      	b.n	801fcdc <_lv_ll_is_empty+0x28>

    return false;
 801fcda:	2300      	movs	r3, #0
}
 801fcdc:	4618      	mov	r0, r3
 801fcde:	370c      	adds	r7, #12
 801fce0:	46bd      	mov	sp, r7
 801fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fce6:	4770      	bx	lr

0801fce8 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 801fce8:	b480      	push	{r7}
 801fcea:	b089      	sub	sp, #36	; 0x24
 801fcec:	af00      	add	r7, sp, #0
 801fcee:	60f8      	str	r0, [r7, #12]
 801fcf0:	60b9      	str	r1, [r7, #8]
 801fcf2:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801fcf4:	68bb      	ldr	r3, [r7, #8]
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d00f      	beq.n	801fd1a <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *)act;
 801fcfa:	68bb      	ldr	r3, [r7, #8]
 801fcfc:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 801fcfe:	68fb      	ldr	r3, [r7, #12]
 801fd00:	681b      	ldr	r3, [r3, #0]
 801fd02:	69fa      	ldr	r2, [r7, #28]
 801fd04:	4413      	add	r3, r2
 801fd06:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801fd08:	69fb      	ldr	r3, [r7, #28]
 801fd0a:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 801fd0c:	1d3b      	adds	r3, r7, #4
 801fd0e:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 801fd10:	697b      	ldr	r3, [r7, #20]
 801fd12:	681a      	ldr	r2, [r3, #0]
 801fd14:	69bb      	ldr	r3, [r7, #24]
 801fd16:	601a      	str	r2, [r3, #0]
 801fd18:	e000      	b.n	801fd1c <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801fd1a:	bf00      	nop
}
 801fd1c:	3724      	adds	r7, #36	; 0x24
 801fd1e:	46bd      	mov	sp, r7
 801fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd24:	4770      	bx	lr

0801fd26 <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 801fd26:	b480      	push	{r7}
 801fd28:	b089      	sub	sp, #36	; 0x24
 801fd2a:	af00      	add	r7, sp, #0
 801fd2c:	60f8      	str	r0, [r7, #12]
 801fd2e:	60b9      	str	r1, [r7, #8]
 801fd30:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801fd32:	68bb      	ldr	r3, [r7, #8]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d010      	beq.n	801fd5a <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *)act;
 801fd38:	68bb      	ldr	r3, [r7, #8]
 801fd3a:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 801fd3c:	68fb      	ldr	r3, [r7, #12]
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	3304      	adds	r3, #4
 801fd42:	69fa      	ldr	r2, [r7, #28]
 801fd44:	4413      	add	r3, r2
 801fd46:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801fd48:	69fb      	ldr	r3, [r7, #28]
 801fd4a:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 801fd4c:	1d3b      	adds	r3, r7, #4
 801fd4e:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 801fd50:	697b      	ldr	r3, [r7, #20]
 801fd52:	681a      	ldr	r2, [r3, #0]
 801fd54:	69bb      	ldr	r3, [r7, #24]
 801fd56:	601a      	str	r2, [r3, #0]
 801fd58:	e000      	b.n	801fd5c <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801fd5a:	bf00      	nop
}
 801fd5c:	3724      	adds	r7, #36	; 0x24
 801fd5e:	46bd      	mov	sp, r7
 801fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd64:	4770      	bx	lr
	...

0801fd68 <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
 801fd68:	b480      	push	{r7}
 801fd6a:	b085      	sub	sp, #20
 801fd6c:	af00      	add	r7, sp, #0
 801fd6e:	4603      	mov	r3, r0
 801fd70:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 801fd72:	2300      	movs	r3, #0
 801fd74:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 801fd76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fd7a:	4a31      	ldr	r2, [pc, #196]	; (801fe40 <lv_trigo_sin+0xd8>)
 801fd7c:	fb82 1203 	smull	r1, r2, r2, r3
 801fd80:	441a      	add	r2, r3
 801fd82:	1211      	asrs	r1, r2, #8
 801fd84:	17da      	asrs	r2, r3, #31
 801fd86:	1a8a      	subs	r2, r1, r2
 801fd88:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801fd8c:	fb01 f202 	mul.w	r2, r1, r2
 801fd90:	1a9b      	subs	r3, r3, r2
 801fd92:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 801fd94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fd98:	2b00      	cmp	r3, #0
 801fd9a:	da04      	bge.n	801fda6 <lv_trigo_sin+0x3e>
 801fd9c:	88fb      	ldrh	r3, [r7, #6]
 801fd9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801fda2:	b29b      	uxth	r3, r3
 801fda4:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 801fda6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdaa:	2b59      	cmp	r3, #89	; 0x59
 801fdac:	dc06      	bgt.n	801fdbc <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 801fdae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdb2:	4a24      	ldr	r2, [pc, #144]	; (801fe44 <lv_trigo_sin+0xdc>)
 801fdb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fdb8:	81fb      	strh	r3, [r7, #14]
 801fdba:	e038      	b.n	801fe2e <lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 801fdbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdc0:	2b59      	cmp	r3, #89	; 0x59
 801fdc2:	dd0f      	ble.n	801fde4 <lv_trigo_sin+0x7c>
 801fdc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdc8:	2bb3      	cmp	r3, #179	; 0xb3
 801fdca:	dc0b      	bgt.n	801fde4 <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 801fdcc:	88fb      	ldrh	r3, [r7, #6]
 801fdce:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 801fdd2:	b29b      	uxth	r3, r3
 801fdd4:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 801fdd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdda:	4a1a      	ldr	r2, [pc, #104]	; (801fe44 <lv_trigo_sin+0xdc>)
 801fddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fde0:	81fb      	strh	r3, [r7, #14]
 801fde2:	e024      	b.n	801fe2e <lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 801fde4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fde8:	2bb3      	cmp	r3, #179	; 0xb3
 801fdea:	dd12      	ble.n	801fe12 <lv_trigo_sin+0xaa>
 801fdec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdf0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801fdf4:	da0d      	bge.n	801fe12 <lv_trigo_sin+0xaa>
        angle = angle - 180;
 801fdf6:	88fb      	ldrh	r3, [r7, #6]
 801fdf8:	3bb4      	subs	r3, #180	; 0xb4
 801fdfa:	b29b      	uxth	r3, r3
 801fdfc:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801fdfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fe02:	4a10      	ldr	r2, [pc, #64]	; (801fe44 <lv_trigo_sin+0xdc>)
 801fe04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801fe08:	b29b      	uxth	r3, r3
 801fe0a:	425b      	negs	r3, r3
 801fe0c:	b29b      	uxth	r3, r3
 801fe0e:	81fb      	strh	r3, [r7, #14]
 801fe10:	e00d      	b.n	801fe2e <lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 801fe12:	88fb      	ldrh	r3, [r7, #6]
 801fe14:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801fe18:	b29b      	uxth	r3, r3
 801fe1a:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801fe1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fe20:	4a08      	ldr	r2, [pc, #32]	; (801fe44 <lv_trigo_sin+0xdc>)
 801fe22:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801fe26:	b29b      	uxth	r3, r3
 801fe28:	425b      	negs	r3, r3
 801fe2a:	b29b      	uxth	r3, r3
 801fe2c:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 801fe2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801fe32:	4618      	mov	r0, r3
 801fe34:	3714      	adds	r7, #20
 801fe36:	46bd      	mov	sp, r7
 801fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe3c:	4770      	bx	lr
 801fe3e:	bf00      	nop
 801fe40:	b60b60b7 	.word	0xb60b60b7
 801fe44:	0802631c 	.word	0x0802631c

0801fe48 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 801fe48:	b480      	push	{r7}
 801fe4a:	b08f      	sub	sp, #60	; 0x3c
 801fe4c:	af00      	add	r7, sp, #0
 801fe4e:	60f8      	str	r0, [r7, #12]
 801fe50:	60b9      	str	r1, [r7, #8]
 801fe52:	607a      	str	r2, [r7, #4]
 801fe54:	603b      	str	r3, [r7, #0]
    uint32_t t_rem  = 1024 - t;
 801fe56:	68fb      	ldr	r3, [r7, #12]
 801fe58:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fe5c:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 801fe5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fe60:	fb03 f303 	mul.w	r3, r3, r3
 801fe64:	0a9b      	lsrs	r3, r3, #10
 801fe66:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 801fe68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fe6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fe6c:	fb02 f303 	mul.w	r3, r2, r3
 801fe70:	0a9b      	lsrs	r3, r3, #10
 801fe72:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t t2     = (t * t) >> 10;
 801fe74:	68fb      	ldr	r3, [r7, #12]
 801fe76:	fb03 f303 	mul.w	r3, r3, r3
 801fe7a:	0a9b      	lsrs	r3, r3, #10
 801fe7c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t t3     = (t2 * t) >> 10;
 801fe7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe80:	68fa      	ldr	r2, [r7, #12]
 801fe82:	fb02 f303 	mul.w	r3, r2, r3
 801fe86:	0a9b      	lsrs	r3, r3, #10
 801fe88:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t v1 = (t_rem3 * u0) >> 10;
 801fe8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe8c:	68ba      	ldr	r2, [r7, #8]
 801fe8e:	fb02 f303 	mul.w	r3, r2, r3
 801fe92:	0a9b      	lsrs	r3, r3, #10
 801fe94:	623b      	str	r3, [r7, #32]
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 801fe96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fe98:	68fa      	ldr	r2, [r7, #12]
 801fe9a:	fb02 f303 	mul.w	r3, r2, r3
 801fe9e:	687a      	ldr	r2, [r7, #4]
 801fea0:	fb03 f202 	mul.w	r2, r3, r2
 801fea4:	4613      	mov	r3, r2
 801fea6:	005b      	lsls	r3, r3, #1
 801fea8:	4413      	add	r3, r2
 801feaa:	0d1b      	lsrs	r3, r3, #20
 801feac:	61fb      	str	r3, [r7, #28]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 801feae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801feb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801feb2:	fb02 f303 	mul.w	r3, r2, r3
 801feb6:	683a      	ldr	r2, [r7, #0]
 801feb8:	fb03 f202 	mul.w	r2, r3, r2
 801febc:	4613      	mov	r3, r2
 801febe:	005b      	lsls	r3, r3, #1
 801fec0:	4413      	add	r3, r2
 801fec2:	0d1b      	lsrs	r3, r3, #20
 801fec4:	61bb      	str	r3, [r7, #24]
    uint32_t v4 = (t3 * u3) >> 10;
 801fec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801feca:	fb02 f303 	mul.w	r3, r2, r3
 801fece:	0a9b      	lsrs	r3, r3, #10
 801fed0:	617b      	str	r3, [r7, #20]

    return v1 + v2 + v3 + v4;
 801fed2:	6a3a      	ldr	r2, [r7, #32]
 801fed4:	69fb      	ldr	r3, [r7, #28]
 801fed6:	441a      	add	r2, r3
 801fed8:	69bb      	ldr	r3, [r7, #24]
 801feda:	441a      	add	r2, r3
 801fedc:	697b      	ldr	r3, [r7, #20]
 801fede:	4413      	add	r3, r2
}
 801fee0:	4618      	mov	r0, r3
 801fee2:	373c      	adds	r7, #60	; 0x3c
 801fee4:	46bd      	mov	sp, r7
 801fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feea:	4770      	bx	lr

0801feec <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 801feec:	b480      	push	{r7}
 801feee:	b087      	sub	sp, #28
 801fef0:	af00      	add	r7, sp, #0
 801fef2:	60f8      	str	r0, [r7, #12]
 801fef4:	60b9      	str	r1, [r7, #8]
 801fef6:	607a      	str	r2, [r7, #4]
 801fef8:	603b      	str	r3, [r7, #0]
    if(max_in >= min_in && x >= max_in) return max_out;
 801fefa:	687a      	ldr	r2, [r7, #4]
 801fefc:	68bb      	ldr	r3, [r7, #8]
 801fefe:	429a      	cmp	r2, r3
 801ff00:	db05      	blt.n	801ff0e <lv_map+0x22>
 801ff02:	68fa      	ldr	r2, [r7, #12]
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	429a      	cmp	r2, r3
 801ff08:	db01      	blt.n	801ff0e <lv_map+0x22>
 801ff0a:	6a3b      	ldr	r3, [r7, #32]
 801ff0c:	e030      	b.n	801ff70 <lv_map+0x84>
    if(max_in >= min_in && x <= min_in) return min_out;
 801ff0e:	687a      	ldr	r2, [r7, #4]
 801ff10:	68bb      	ldr	r3, [r7, #8]
 801ff12:	429a      	cmp	r2, r3
 801ff14:	db05      	blt.n	801ff22 <lv_map+0x36>
 801ff16:	68fa      	ldr	r2, [r7, #12]
 801ff18:	68bb      	ldr	r3, [r7, #8]
 801ff1a:	429a      	cmp	r2, r3
 801ff1c:	dc01      	bgt.n	801ff22 <lv_map+0x36>
 801ff1e:	683b      	ldr	r3, [r7, #0]
 801ff20:	e026      	b.n	801ff70 <lv_map+0x84>

    if(max_in <= min_in && x <= max_in) return max_out;
 801ff22:	687a      	ldr	r2, [r7, #4]
 801ff24:	68bb      	ldr	r3, [r7, #8]
 801ff26:	429a      	cmp	r2, r3
 801ff28:	dc05      	bgt.n	801ff36 <lv_map+0x4a>
 801ff2a:	68fa      	ldr	r2, [r7, #12]
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	429a      	cmp	r2, r3
 801ff30:	dc01      	bgt.n	801ff36 <lv_map+0x4a>
 801ff32:	6a3b      	ldr	r3, [r7, #32]
 801ff34:	e01c      	b.n	801ff70 <lv_map+0x84>
    if(max_in <= min_in && x >= min_in) return min_out;
 801ff36:	687a      	ldr	r2, [r7, #4]
 801ff38:	68bb      	ldr	r3, [r7, #8]
 801ff3a:	429a      	cmp	r2, r3
 801ff3c:	dc05      	bgt.n	801ff4a <lv_map+0x5e>
 801ff3e:	68fa      	ldr	r2, [r7, #12]
 801ff40:	68bb      	ldr	r3, [r7, #8]
 801ff42:	429a      	cmp	r2, r3
 801ff44:	db01      	blt.n	801ff4a <lv_map+0x5e>
 801ff46:	683b      	ldr	r3, [r7, #0]
 801ff48:	e012      	b.n	801ff70 <lv_map+0x84>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 801ff4a:	687a      	ldr	r2, [r7, #4]
 801ff4c:	68bb      	ldr	r3, [r7, #8]
 801ff4e:	1ad3      	subs	r3, r2, r3
 801ff50:	617b      	str	r3, [r7, #20]
    int32_t delta_out = max_out - min_out;
 801ff52:	6a3a      	ldr	r2, [r7, #32]
 801ff54:	683b      	ldr	r3, [r7, #0]
 801ff56:	1ad3      	subs	r3, r2, r3
 801ff58:	613b      	str	r3, [r7, #16]

    return ((x - min_in) * delta_out) / delta_in + min_out;
 801ff5a:	68fa      	ldr	r2, [r7, #12]
 801ff5c:	68bb      	ldr	r3, [r7, #8]
 801ff5e:	1ad3      	subs	r3, r2, r3
 801ff60:	693a      	ldr	r2, [r7, #16]
 801ff62:	fb03 f202 	mul.w	r2, r3, r2
 801ff66:	697b      	ldr	r3, [r7, #20]
 801ff68:	fb92 f2f3 	sdiv	r2, r2, r3
 801ff6c:	683b      	ldr	r3, [r7, #0]
 801ff6e:	4413      	add	r3, r2
}
 801ff70:	4618      	mov	r0, r3
 801ff72:	371c      	adds	r7, #28
 801ff74:	46bd      	mov	sp, r7
 801ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff7a:	4770      	bx	lr

0801ff7c <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 801ff7c:	b580      	push	{r7, lr}
 801ff7e:	af00      	add	r7, sp, #0
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 801ff80:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 801ff84:	4803      	ldr	r0, [pc, #12]	; (801ff94 <lv_mem_init+0x18>)
 801ff86:	f002 f80f 	bl	8021fa8 <lv_tlsf_create_with_pool>
 801ff8a:	4603      	mov	r3, r0
 801ff8c:	4a02      	ldr	r2, [pc, #8]	; (801ff98 <lv_mem_init+0x1c>)
 801ff8e:	6013      	str	r3, [r2, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 801ff90:	bf00      	nop
 801ff92:	bd80      	pop	{r7, pc}
 801ff94:	20000a00 	.word	0x20000a00
 801ff98:	200009f4 	.word	0x200009f4

0801ff9c <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 801ff9c:	b580      	push	{r7, lr}
 801ff9e:	b084      	sub	sp, #16
 801ffa0:	af00      	add	r7, sp, #0
 801ffa2:	6078      	str	r0, [r7, #4]
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d101      	bne.n	801ffae <lv_mem_alloc+0x12>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 801ffaa:	4b10      	ldr	r3, [pc, #64]	; (801ffec <lv_mem_alloc+0x50>)
 801ffac:	e019      	b.n	801ffe2 <lv_mem_alloc+0x46>
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 801ffae:	4b10      	ldr	r3, [pc, #64]	; (801fff0 <lv_mem_alloc+0x54>)
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	6879      	ldr	r1, [r7, #4]
 801ffb4:	4618      	mov	r0, r3
 801ffb6:	f002 f814 	bl	8021fe2 <lv_tlsf_malloc>
 801ffba:	60f8      	str	r0, [r7, #12]
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 801ffbc:	68fb      	ldr	r3, [r7, #12]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d00e      	beq.n	801ffe0 <lv_mem_alloc+0x44>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 801ffc2:	4b0c      	ldr	r3, [pc, #48]	; (801fff4 <lv_mem_alloc+0x58>)
 801ffc4:	681a      	ldr	r2, [r3, #0]
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	4413      	add	r3, r2
 801ffca:	4a0a      	ldr	r2, [pc, #40]	; (801fff4 <lv_mem_alloc+0x58>)
 801ffcc:	6013      	str	r3, [r2, #0]
        max_used = LV_MAX(cur_used, max_used);
 801ffce:	4b0a      	ldr	r3, [pc, #40]	; (801fff8 <lv_mem_alloc+0x5c>)
 801ffd0:	681a      	ldr	r2, [r3, #0]
 801ffd2:	4b08      	ldr	r3, [pc, #32]	; (801fff4 <lv_mem_alloc+0x58>)
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	4293      	cmp	r3, r2
 801ffd8:	bf38      	it	cc
 801ffda:	4613      	movcc	r3, r2
 801ffdc:	4a06      	ldr	r2, [pc, #24]	; (801fff8 <lv_mem_alloc+0x5c>)
 801ffde:	6013      	str	r3, [r2, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
 801ffe0:	68fb      	ldr	r3, [r7, #12]
}
 801ffe2:	4618      	mov	r0, r3
 801ffe4:	3710      	adds	r7, #16
 801ffe6:	46bd      	mov	sp, r7
 801ffe8:	bd80      	pop	{r7, pc}
 801ffea:	bf00      	nop
 801ffec:	20000014 	.word	0x20000014
 801fff0:	200009f4 	.word	0x200009f4
 801fff4:	200009f8 	.word	0x200009f8
 801fff8:	200009fc 	.word	0x200009fc

0801fffc <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 801fffc:	b580      	push	{r7, lr}
 801fffe:	b084      	sub	sp, #16
 8020000:	af00      	add	r7, sp, #0
 8020002:	6078      	str	r0, [r7, #4]
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8020004:	687b      	ldr	r3, [r7, #4]
 8020006:	4a11      	ldr	r2, [pc, #68]	; (802004c <lv_mem_free+0x50>)
 8020008:	4293      	cmp	r3, r2
 802000a:	d019      	beq.n	8020040 <lv_mem_free+0x44>
    if(data == NULL) return;
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	2b00      	cmp	r3, #0
 8020010:	d018      	beq.n	8020044 <lv_mem_free+0x48>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8020012:	4b0f      	ldr	r3, [pc, #60]	; (8020050 <lv_mem_free+0x54>)
 8020014:	681b      	ldr	r3, [r3, #0]
 8020016:	6879      	ldr	r1, [r7, #4]
 8020018:	4618      	mov	r0, r3
 802001a:	f001 fffd 	bl	8022018 <lv_tlsf_free>
 802001e:	60f8      	str	r0, [r7, #12]
    if(cur_used > size) cur_used -= size;
 8020020:	4b0c      	ldr	r3, [pc, #48]	; (8020054 <lv_mem_free+0x58>)
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	68fa      	ldr	r2, [r7, #12]
 8020026:	429a      	cmp	r2, r3
 8020028:	d206      	bcs.n	8020038 <lv_mem_free+0x3c>
 802002a:	4b0a      	ldr	r3, [pc, #40]	; (8020054 <lv_mem_free+0x58>)
 802002c:	681a      	ldr	r2, [r3, #0]
 802002e:	68fb      	ldr	r3, [r7, #12]
 8020030:	1ad3      	subs	r3, r2, r3
 8020032:	4a08      	ldr	r2, [pc, #32]	; (8020054 <lv_mem_free+0x58>)
 8020034:	6013      	str	r3, [r2, #0]
 8020036:	e006      	b.n	8020046 <lv_mem_free+0x4a>
    else cur_used = 0;
 8020038:	4b06      	ldr	r3, [pc, #24]	; (8020054 <lv_mem_free+0x58>)
 802003a:	2200      	movs	r2, #0
 802003c:	601a      	str	r2, [r3, #0]
 802003e:	e002      	b.n	8020046 <lv_mem_free+0x4a>
    if(data == &zero_mem) return;
 8020040:	bf00      	nop
 8020042:	e000      	b.n	8020046 <lv_mem_free+0x4a>
    if(data == NULL) return;
 8020044:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8020046:	3710      	adds	r7, #16
 8020048:	46bd      	mov	sp, r7
 802004a:	bd80      	pop	{r7, pc}
 802004c:	20000014 	.word	0x20000014
 8020050:	200009f4 	.word	0x200009f4
 8020054:	200009f8 	.word	0x200009f8

08020058 <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 8020058:	b580      	push	{r7, lr}
 802005a:	b084      	sub	sp, #16
 802005c:	af00      	add	r7, sp, #0
 802005e:	6078      	str	r0, [r7, #4]
 8020060:	6039      	str	r1, [r7, #0]
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8020062:	683b      	ldr	r3, [r7, #0]
 8020064:	2b00      	cmp	r3, #0
 8020066:	d104      	bne.n	8020072 <lv_mem_realloc+0x1a>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
 8020068:	6878      	ldr	r0, [r7, #4]
 802006a:	f7ff ffc7 	bl	801fffc <lv_mem_free>
        return &zero_mem;
 802006e:	4b0e      	ldr	r3, [pc, #56]	; (80200a8 <lv_mem_realloc+0x50>)
 8020070:	e016      	b.n	80200a0 <lv_mem_realloc+0x48>
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	4a0c      	ldr	r2, [pc, #48]	; (80200a8 <lv_mem_realloc+0x50>)
 8020076:	4293      	cmp	r3, r2
 8020078:	d104      	bne.n	8020084 <lv_mem_realloc+0x2c>
 802007a:	6838      	ldr	r0, [r7, #0]
 802007c:	f7ff ff8e 	bl	801ff9c <lv_mem_alloc>
 8020080:	4603      	mov	r3, r0
 8020082:	e00d      	b.n	80200a0 <lv_mem_realloc+0x48>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8020084:	4b09      	ldr	r3, [pc, #36]	; (80200ac <lv_mem_realloc+0x54>)
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	683a      	ldr	r2, [r7, #0]
 802008a:	6879      	ldr	r1, [r7, #4]
 802008c:	4618      	mov	r0, r3
 802008e:	f001 fff3 	bl	8022078 <lv_tlsf_realloc>
 8020092:	60f8      	str	r0, [r7, #12]
#else
    void * new_p = LV_MEM_CUSTOM_REALLOC(data_p, new_size);
#endif
    if(new_p == NULL) {
 8020094:	68fb      	ldr	r3, [r7, #12]
 8020096:	2b00      	cmp	r3, #0
 8020098:	d101      	bne.n	802009e <lv_mem_realloc+0x46>
        LV_LOG_ERROR("couldn't allocate memory");
        return NULL;
 802009a:	2300      	movs	r3, #0
 802009c:	e000      	b.n	80200a0 <lv_mem_realloc+0x48>
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
 802009e:	68fb      	ldr	r3, [r7, #12]
}
 80200a0:	4618      	mov	r0, r3
 80200a2:	3710      	adds	r7, #16
 80200a4:	46bd      	mov	sp, r7
 80200a6:	bd80      	pop	{r7, pc}
 80200a8:	20000014 	.word	0x20000014
 80200ac:	200009f4 	.word	0x200009f4

080200b0 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 80200b0:	b580      	push	{r7, lr}
 80200b2:	b084      	sub	sp, #16
 80200b4:	af00      	add	r7, sp, #0
 80200b6:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	d101      	bne.n	80200c2 <lv_mem_buf_get+0x12>
 80200be:	2300      	movs	r3, #0
 80200c0:	e09c      	b.n	80201fc <lv_mem_buf_get+0x14c>

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 80200c2:	23ff      	movs	r3, #255	; 0xff
 80200c4:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80200c6:	2300      	movs	r3, #0
 80200c8:	73bb      	strb	r3, [r7, #14]
 80200ca:	e041      	b.n	8020150 <lv_mem_buf_get+0xa0>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80200cc:	7bbb      	ldrb	r3, [r7, #14]
 80200ce:	4a4d      	ldr	r2, [pc, #308]	; (8020204 <lv_mem_buf_get+0x154>)
 80200d0:	00db      	lsls	r3, r3, #3
 80200d2:	4413      	add	r3, r2
 80200d4:	799b      	ldrb	r3, [r3, #6]
 80200d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80200da:	b2db      	uxtb	r3, r3
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d134      	bne.n	802014a <lv_mem_buf_get+0x9a>
 80200e0:	7bbb      	ldrb	r3, [r7, #14]
 80200e2:	4a48      	ldr	r2, [pc, #288]	; (8020204 <lv_mem_buf_get+0x154>)
 80200e4:	00db      	lsls	r3, r3, #3
 80200e6:	4413      	add	r3, r2
 80200e8:	889b      	ldrh	r3, [r3, #4]
 80200ea:	461a      	mov	r2, r3
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	4293      	cmp	r3, r2
 80200f0:	d82b      	bhi.n	802014a <lv_mem_buf_get+0x9a>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 80200f2:	7bbb      	ldrb	r3, [r7, #14]
 80200f4:	4a43      	ldr	r2, [pc, #268]	; (8020204 <lv_mem_buf_get+0x154>)
 80200f6:	00db      	lsls	r3, r3, #3
 80200f8:	4413      	add	r3, r2
 80200fa:	889b      	ldrh	r3, [r3, #4]
 80200fc:	461a      	mov	r2, r3
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	4293      	cmp	r3, r2
 8020102:	d10c      	bne.n	802011e <lv_mem_buf_get+0x6e>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8020104:	7bbb      	ldrb	r3, [r7, #14]
 8020106:	4a3f      	ldr	r2, [pc, #252]	; (8020204 <lv_mem_buf_get+0x154>)
 8020108:	00db      	lsls	r3, r3, #3
 802010a:	4413      	add	r3, r2
 802010c:	799a      	ldrb	r2, [r3, #6]
 802010e:	f042 0201 	orr.w	r2, r2, #1
 8020112:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8020114:	7bbb      	ldrb	r3, [r7, #14]
 8020116:	4a3b      	ldr	r2, [pc, #236]	; (8020204 <lv_mem_buf_get+0x154>)
 8020118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802011c:	e06e      	b.n	80201fc <lv_mem_buf_get+0x14c>
            }
            else if(i_guess < 0) {
 802011e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020122:	2b00      	cmp	r3, #0
 8020124:	da02      	bge.n	802012c <lv_mem_buf_get+0x7c>
                i_guess = i;
 8020126:	7bbb      	ldrb	r3, [r7, #14]
 8020128:	73fb      	strb	r3, [r7, #15]
 802012a:	e00e      	b.n	802014a <lv_mem_buf_get+0x9a>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 802012c:	7bbb      	ldrb	r3, [r7, #14]
 802012e:	4a35      	ldr	r2, [pc, #212]	; (8020204 <lv_mem_buf_get+0x154>)
 8020130:	00db      	lsls	r3, r3, #3
 8020132:	4413      	add	r3, r2
 8020134:	889a      	ldrh	r2, [r3, #4]
 8020136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802013a:	4932      	ldr	r1, [pc, #200]	; (8020204 <lv_mem_buf_get+0x154>)
 802013c:	00db      	lsls	r3, r3, #3
 802013e:	440b      	add	r3, r1
 8020140:	889b      	ldrh	r3, [r3, #4]
 8020142:	429a      	cmp	r2, r3
 8020144:	d201      	bcs.n	802014a <lv_mem_buf_get+0x9a>
                i_guess = i;
 8020146:	7bbb      	ldrb	r3, [r7, #14]
 8020148:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802014a:	7bbb      	ldrb	r3, [r7, #14]
 802014c:	3301      	adds	r3, #1
 802014e:	73bb      	strb	r3, [r7, #14]
 8020150:	7bbb      	ldrb	r3, [r7, #14]
 8020152:	2b0f      	cmp	r3, #15
 8020154:	d9ba      	bls.n	80200cc <lv_mem_buf_get+0x1c>
            }
        }
    }

    if(i_guess >= 0) {
 8020156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802015a:	2b00      	cmp	r3, #0
 802015c:	db0e      	blt.n	802017c <lv_mem_buf_get+0xcc>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 802015e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020162:	4a28      	ldr	r2, [pc, #160]	; (8020204 <lv_mem_buf_get+0x154>)
 8020164:	00db      	lsls	r3, r3, #3
 8020166:	4413      	add	r3, r2
 8020168:	799a      	ldrb	r2, [r3, #6]
 802016a:	f042 0201 	orr.w	r2, r2, #1
 802016e:	719a      	strb	r2, [r3, #6]
        MEM_TRACE("returning already allocated buffer (buffer id: %d, address: %p)", i_guess,
                  LV_GC_ROOT(lv_mem_buf[i_guess]).p);
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8020170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020174:	4a23      	ldr	r2, [pc, #140]	; (8020204 <lv_mem_buf_get+0x154>)
 8020176:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802017a:	e03f      	b.n	80201fc <lv_mem_buf_get+0x14c>
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802017c:	2300      	movs	r3, #0
 802017e:	737b      	strb	r3, [r7, #13]
 8020180:	e038      	b.n	80201f4 <lv_mem_buf_get+0x144>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8020182:	7b7b      	ldrb	r3, [r7, #13]
 8020184:	4a1f      	ldr	r2, [pc, #124]	; (8020204 <lv_mem_buf_get+0x154>)
 8020186:	00db      	lsls	r3, r3, #3
 8020188:	4413      	add	r3, r2
 802018a:	799b      	ldrb	r3, [r3, #6]
 802018c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8020190:	b2db      	uxtb	r3, r3
 8020192:	2b00      	cmp	r3, #0
 8020194:	d12b      	bne.n	80201ee <lv_mem_buf_get+0x13e>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8020196:	7b7b      	ldrb	r3, [r7, #13]
 8020198:	4a1a      	ldr	r2, [pc, #104]	; (8020204 <lv_mem_buf_get+0x154>)
 802019a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802019e:	6879      	ldr	r1, [r7, #4]
 80201a0:	4618      	mov	r0, r3
 80201a2:	f7ff ff59 	bl	8020058 <lv_mem_realloc>
 80201a6:	60b8      	str	r0, [r7, #8]
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 80201a8:	68bb      	ldr	r3, [r7, #8]
 80201aa:	2b00      	cmp	r3, #0
 80201ac:	d100      	bne.n	80201b0 <lv_mem_buf_get+0x100>
 80201ae:	e7fe      	b.n	80201ae <lv_mem_buf_get+0xfe>
            if(buf == NULL) return NULL;
 80201b0:	68bb      	ldr	r3, [r7, #8]
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d101      	bne.n	80201ba <lv_mem_buf_get+0x10a>
 80201b6:	2300      	movs	r3, #0
 80201b8:	e020      	b.n	80201fc <lv_mem_buf_get+0x14c>

            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80201ba:	7b7b      	ldrb	r3, [r7, #13]
 80201bc:	4a11      	ldr	r2, [pc, #68]	; (8020204 <lv_mem_buf_get+0x154>)
 80201be:	00db      	lsls	r3, r3, #3
 80201c0:	4413      	add	r3, r2
 80201c2:	799a      	ldrb	r2, [r3, #6]
 80201c4:	f042 0201 	orr.w	r2, r2, #1
 80201c8:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 80201ca:	7b7b      	ldrb	r3, [r7, #13]
 80201cc:	687a      	ldr	r2, [r7, #4]
 80201ce:	b291      	uxth	r1, r2
 80201d0:	4a0c      	ldr	r2, [pc, #48]	; (8020204 <lv_mem_buf_get+0x154>)
 80201d2:	00db      	lsls	r3, r3, #3
 80201d4:	4413      	add	r3, r2
 80201d6:	460a      	mov	r2, r1
 80201d8:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 80201da:	7b7b      	ldrb	r3, [r7, #13]
 80201dc:	4909      	ldr	r1, [pc, #36]	; (8020204 <lv_mem_buf_get+0x154>)
 80201de:	68ba      	ldr	r2, [r7, #8]
 80201e0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            MEM_TRACE("allocated (buffer id: %d, address: %p)", i, LV_GC_ROOT(lv_mem_buf[i]).p);
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 80201e4:	7b7b      	ldrb	r3, [r7, #13]
 80201e6:	4a07      	ldr	r2, [pc, #28]	; (8020204 <lv_mem_buf_get+0x154>)
 80201e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80201ec:	e006      	b.n	80201fc <lv_mem_buf_get+0x14c>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80201ee:	7b7b      	ldrb	r3, [r7, #13]
 80201f0:	3301      	adds	r3, #1
 80201f2:	737b      	strb	r3, [r7, #13]
 80201f4:	7b7b      	ldrb	r3, [r7, #13]
 80201f6:	2b0f      	cmp	r3, #15
 80201f8:	d9c3      	bls.n	8020182 <lv_mem_buf_get+0xd2>
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 80201fa:	e7fe      	b.n	80201fa <lv_mem_buf_get+0x14a>
    return NULL;
}
 80201fc:	4618      	mov	r0, r3
 80201fe:	3710      	adds	r7, #16
 8020200:	46bd      	mov	sp, r7
 8020202:	bd80      	pop	{r7, pc}
 8020204:	2000087c 	.word	0x2000087c

08020208 <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 8020208:	b480      	push	{r7}
 802020a:	b085      	sub	sp, #20
 802020c:	af00      	add	r7, sp, #0
 802020e:	6078      	str	r0, [r7, #4]
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020210:	2300      	movs	r3, #0
 8020212:	73fb      	strb	r3, [r7, #15]
 8020214:	e012      	b.n	802023c <lv_mem_buf_release+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8020216:	7bfb      	ldrb	r3, [r7, #15]
 8020218:	4a0c      	ldr	r2, [pc, #48]	; (802024c <lv_mem_buf_release+0x44>)
 802021a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802021e:	687a      	ldr	r2, [r7, #4]
 8020220:	429a      	cmp	r2, r3
 8020222:	d108      	bne.n	8020236 <lv_mem_buf_release+0x2e>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8020224:	7bfb      	ldrb	r3, [r7, #15]
 8020226:	4a09      	ldr	r2, [pc, #36]	; (802024c <lv_mem_buf_release+0x44>)
 8020228:	00db      	lsls	r3, r3, #3
 802022a:	4413      	add	r3, r2
 802022c:	799a      	ldrb	r2, [r3, #6]
 802022e:	f36f 0200 	bfc	r2, #0, #1
 8020232:	719a      	strb	r2, [r3, #6]
            return;
 8020234:	e005      	b.n	8020242 <lv_mem_buf_release+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020236:	7bfb      	ldrb	r3, [r7, #15]
 8020238:	3301      	adds	r3, #1
 802023a:	73fb      	strb	r3, [r7, #15]
 802023c:	7bfb      	ldrb	r3, [r7, #15]
 802023e:	2b0f      	cmp	r3, #15
 8020240:	d9e9      	bls.n	8020216 <lv_mem_buf_release+0xe>
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 8020242:	3714      	adds	r7, #20
 8020244:	46bd      	mov	sp, r7
 8020246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802024a:	4770      	bx	lr
 802024c:	2000087c 	.word	0x2000087c

08020250 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 8020250:	b580      	push	{r7, lr}
 8020252:	b082      	sub	sp, #8
 8020254:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020256:	2300      	movs	r3, #0
 8020258:	71fb      	strb	r3, [r7, #7]
 802025a:	e022      	b.n	80202a2 <lv_mem_buf_free_all+0x52>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 802025c:	79fb      	ldrb	r3, [r7, #7]
 802025e:	4a15      	ldr	r2, [pc, #84]	; (80202b4 <lv_mem_buf_free_all+0x64>)
 8020260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020264:	2b00      	cmp	r3, #0
 8020266:	d019      	beq.n	802029c <lv_mem_buf_free_all+0x4c>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8020268:	79fb      	ldrb	r3, [r7, #7]
 802026a:	4a12      	ldr	r2, [pc, #72]	; (80202b4 <lv_mem_buf_free_all+0x64>)
 802026c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020270:	4618      	mov	r0, r3
 8020272:	f7ff fec3 	bl	801fffc <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8020276:	79fb      	ldrb	r3, [r7, #7]
 8020278:	4a0e      	ldr	r2, [pc, #56]	; (80202b4 <lv_mem_buf_free_all+0x64>)
 802027a:	2100      	movs	r1, #0
 802027c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8020280:	79fb      	ldrb	r3, [r7, #7]
 8020282:	4a0c      	ldr	r2, [pc, #48]	; (80202b4 <lv_mem_buf_free_all+0x64>)
 8020284:	00db      	lsls	r3, r3, #3
 8020286:	4413      	add	r3, r2
 8020288:	799a      	ldrb	r2, [r3, #6]
 802028a:	f36f 0200 	bfc	r2, #0, #1
 802028e:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8020290:	79fb      	ldrb	r3, [r7, #7]
 8020292:	4a08      	ldr	r2, [pc, #32]	; (80202b4 <lv_mem_buf_free_all+0x64>)
 8020294:	00db      	lsls	r3, r3, #3
 8020296:	4413      	add	r3, r2
 8020298:	2200      	movs	r2, #0
 802029a:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802029c:	79fb      	ldrb	r3, [r7, #7]
 802029e:	3301      	adds	r3, #1
 80202a0:	71fb      	strb	r3, [r7, #7]
 80202a2:	79fb      	ldrb	r3, [r7, #7]
 80202a4:	2b0f      	cmp	r3, #15
 80202a6:	d9d9      	bls.n	802025c <lv_mem_buf_free_all+0xc>
        }
    }
}
 80202a8:	bf00      	nop
 80202aa:	bf00      	nop
 80202ac:	3708      	adds	r7, #8
 80202ae:	46bd      	mov	sp, r7
 80202b0:	bd80      	pop	{r7, pc}
 80202b2:	bf00      	nop
 80202b4:	2000087c 	.word	0x2000087c

080202b8 <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 80202b8:	b480      	push	{r7}
 80202ba:	b08b      	sub	sp, #44	; 0x2c
 80202bc:	af00      	add	r7, sp, #0
 80202be:	60f8      	str	r0, [r7, #12]
 80202c0:	60b9      	str	r1, [r7, #8]
 80202c2:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 80202c4:	68fb      	ldr	r3, [r7, #12]
 80202c6:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 80202c8:	68bb      	ldr	r3, [r7, #8]
 80202ca:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 80202cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202ce:	f003 0303 	and.w	r3, r3, #3
 80202d2:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 80202d4:	6a3b      	ldr	r3, [r7, #32]
 80202d6:	f003 0303 	and.w	r3, r3, #3
 80202da:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 80202dc:	693a      	ldr	r2, [r7, #16]
 80202de:	69fb      	ldr	r3, [r7, #28]
 80202e0:	429a      	cmp	r2, r3
 80202e2:	f000 815b 	beq.w	802059c <lv_memcpy+0x2e4>
        while(len > 32) {
 80202e6:	e142      	b.n	802056e <lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 80202e8:	6a3b      	ldr	r3, [r7, #32]
 80202ea:	781a      	ldrb	r2, [r3, #0]
 80202ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202ee:	701a      	strb	r2, [r3, #0]
 80202f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202f2:	3301      	adds	r3, #1
 80202f4:	627b      	str	r3, [r7, #36]	; 0x24
 80202f6:	6a3b      	ldr	r3, [r7, #32]
 80202f8:	3301      	adds	r3, #1
 80202fa:	623b      	str	r3, [r7, #32]
 80202fc:	6a3b      	ldr	r3, [r7, #32]
 80202fe:	781a      	ldrb	r2, [r3, #0]
 8020300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020302:	701a      	strb	r2, [r3, #0]
 8020304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020306:	3301      	adds	r3, #1
 8020308:	627b      	str	r3, [r7, #36]	; 0x24
 802030a:	6a3b      	ldr	r3, [r7, #32]
 802030c:	3301      	adds	r3, #1
 802030e:	623b      	str	r3, [r7, #32]
 8020310:	6a3b      	ldr	r3, [r7, #32]
 8020312:	781a      	ldrb	r2, [r3, #0]
 8020314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020316:	701a      	strb	r2, [r3, #0]
 8020318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802031a:	3301      	adds	r3, #1
 802031c:	627b      	str	r3, [r7, #36]	; 0x24
 802031e:	6a3b      	ldr	r3, [r7, #32]
 8020320:	3301      	adds	r3, #1
 8020322:	623b      	str	r3, [r7, #32]
 8020324:	6a3b      	ldr	r3, [r7, #32]
 8020326:	781a      	ldrb	r2, [r3, #0]
 8020328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802032a:	701a      	strb	r2, [r3, #0]
 802032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802032e:	3301      	adds	r3, #1
 8020330:	627b      	str	r3, [r7, #36]	; 0x24
 8020332:	6a3b      	ldr	r3, [r7, #32]
 8020334:	3301      	adds	r3, #1
 8020336:	623b      	str	r3, [r7, #32]
 8020338:	6a3b      	ldr	r3, [r7, #32]
 802033a:	781a      	ldrb	r2, [r3, #0]
 802033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802033e:	701a      	strb	r2, [r3, #0]
 8020340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020342:	3301      	adds	r3, #1
 8020344:	627b      	str	r3, [r7, #36]	; 0x24
 8020346:	6a3b      	ldr	r3, [r7, #32]
 8020348:	3301      	adds	r3, #1
 802034a:	623b      	str	r3, [r7, #32]
 802034c:	6a3b      	ldr	r3, [r7, #32]
 802034e:	781a      	ldrb	r2, [r3, #0]
 8020350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020352:	701a      	strb	r2, [r3, #0]
 8020354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020356:	3301      	adds	r3, #1
 8020358:	627b      	str	r3, [r7, #36]	; 0x24
 802035a:	6a3b      	ldr	r3, [r7, #32]
 802035c:	3301      	adds	r3, #1
 802035e:	623b      	str	r3, [r7, #32]
 8020360:	6a3b      	ldr	r3, [r7, #32]
 8020362:	781a      	ldrb	r2, [r3, #0]
 8020364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020366:	701a      	strb	r2, [r3, #0]
 8020368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802036a:	3301      	adds	r3, #1
 802036c:	627b      	str	r3, [r7, #36]	; 0x24
 802036e:	6a3b      	ldr	r3, [r7, #32]
 8020370:	3301      	adds	r3, #1
 8020372:	623b      	str	r3, [r7, #32]
 8020374:	6a3b      	ldr	r3, [r7, #32]
 8020376:	781a      	ldrb	r2, [r3, #0]
 8020378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802037a:	701a      	strb	r2, [r3, #0]
 802037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802037e:	3301      	adds	r3, #1
 8020380:	627b      	str	r3, [r7, #36]	; 0x24
 8020382:	6a3b      	ldr	r3, [r7, #32]
 8020384:	3301      	adds	r3, #1
 8020386:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8020388:	6a3b      	ldr	r3, [r7, #32]
 802038a:	781a      	ldrb	r2, [r3, #0]
 802038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802038e:	701a      	strb	r2, [r3, #0]
 8020390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020392:	3301      	adds	r3, #1
 8020394:	627b      	str	r3, [r7, #36]	; 0x24
 8020396:	6a3b      	ldr	r3, [r7, #32]
 8020398:	3301      	adds	r3, #1
 802039a:	623b      	str	r3, [r7, #32]
 802039c:	6a3b      	ldr	r3, [r7, #32]
 802039e:	781a      	ldrb	r2, [r3, #0]
 80203a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203a2:	701a      	strb	r2, [r3, #0]
 80203a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203a6:	3301      	adds	r3, #1
 80203a8:	627b      	str	r3, [r7, #36]	; 0x24
 80203aa:	6a3b      	ldr	r3, [r7, #32]
 80203ac:	3301      	adds	r3, #1
 80203ae:	623b      	str	r3, [r7, #32]
 80203b0:	6a3b      	ldr	r3, [r7, #32]
 80203b2:	781a      	ldrb	r2, [r3, #0]
 80203b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203b6:	701a      	strb	r2, [r3, #0]
 80203b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203ba:	3301      	adds	r3, #1
 80203bc:	627b      	str	r3, [r7, #36]	; 0x24
 80203be:	6a3b      	ldr	r3, [r7, #32]
 80203c0:	3301      	adds	r3, #1
 80203c2:	623b      	str	r3, [r7, #32]
 80203c4:	6a3b      	ldr	r3, [r7, #32]
 80203c6:	781a      	ldrb	r2, [r3, #0]
 80203c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203ca:	701a      	strb	r2, [r3, #0]
 80203cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203ce:	3301      	adds	r3, #1
 80203d0:	627b      	str	r3, [r7, #36]	; 0x24
 80203d2:	6a3b      	ldr	r3, [r7, #32]
 80203d4:	3301      	adds	r3, #1
 80203d6:	623b      	str	r3, [r7, #32]
 80203d8:	6a3b      	ldr	r3, [r7, #32]
 80203da:	781a      	ldrb	r2, [r3, #0]
 80203dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203de:	701a      	strb	r2, [r3, #0]
 80203e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203e2:	3301      	adds	r3, #1
 80203e4:	627b      	str	r3, [r7, #36]	; 0x24
 80203e6:	6a3b      	ldr	r3, [r7, #32]
 80203e8:	3301      	adds	r3, #1
 80203ea:	623b      	str	r3, [r7, #32]
 80203ec:	6a3b      	ldr	r3, [r7, #32]
 80203ee:	781a      	ldrb	r2, [r3, #0]
 80203f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203f2:	701a      	strb	r2, [r3, #0]
 80203f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203f6:	3301      	adds	r3, #1
 80203f8:	627b      	str	r3, [r7, #36]	; 0x24
 80203fa:	6a3b      	ldr	r3, [r7, #32]
 80203fc:	3301      	adds	r3, #1
 80203fe:	623b      	str	r3, [r7, #32]
 8020400:	6a3b      	ldr	r3, [r7, #32]
 8020402:	781a      	ldrb	r2, [r3, #0]
 8020404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020406:	701a      	strb	r2, [r3, #0]
 8020408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802040a:	3301      	adds	r3, #1
 802040c:	627b      	str	r3, [r7, #36]	; 0x24
 802040e:	6a3b      	ldr	r3, [r7, #32]
 8020410:	3301      	adds	r3, #1
 8020412:	623b      	str	r3, [r7, #32]
 8020414:	6a3b      	ldr	r3, [r7, #32]
 8020416:	781a      	ldrb	r2, [r3, #0]
 8020418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802041a:	701a      	strb	r2, [r3, #0]
 802041c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802041e:	3301      	adds	r3, #1
 8020420:	627b      	str	r3, [r7, #36]	; 0x24
 8020422:	6a3b      	ldr	r3, [r7, #32]
 8020424:	3301      	adds	r3, #1
 8020426:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8020428:	6a3b      	ldr	r3, [r7, #32]
 802042a:	781a      	ldrb	r2, [r3, #0]
 802042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802042e:	701a      	strb	r2, [r3, #0]
 8020430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020432:	3301      	adds	r3, #1
 8020434:	627b      	str	r3, [r7, #36]	; 0x24
 8020436:	6a3b      	ldr	r3, [r7, #32]
 8020438:	3301      	adds	r3, #1
 802043a:	623b      	str	r3, [r7, #32]
 802043c:	6a3b      	ldr	r3, [r7, #32]
 802043e:	781a      	ldrb	r2, [r3, #0]
 8020440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020442:	701a      	strb	r2, [r3, #0]
 8020444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020446:	3301      	adds	r3, #1
 8020448:	627b      	str	r3, [r7, #36]	; 0x24
 802044a:	6a3b      	ldr	r3, [r7, #32]
 802044c:	3301      	adds	r3, #1
 802044e:	623b      	str	r3, [r7, #32]
 8020450:	6a3b      	ldr	r3, [r7, #32]
 8020452:	781a      	ldrb	r2, [r3, #0]
 8020454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020456:	701a      	strb	r2, [r3, #0]
 8020458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802045a:	3301      	adds	r3, #1
 802045c:	627b      	str	r3, [r7, #36]	; 0x24
 802045e:	6a3b      	ldr	r3, [r7, #32]
 8020460:	3301      	adds	r3, #1
 8020462:	623b      	str	r3, [r7, #32]
 8020464:	6a3b      	ldr	r3, [r7, #32]
 8020466:	781a      	ldrb	r2, [r3, #0]
 8020468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802046a:	701a      	strb	r2, [r3, #0]
 802046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802046e:	3301      	adds	r3, #1
 8020470:	627b      	str	r3, [r7, #36]	; 0x24
 8020472:	6a3b      	ldr	r3, [r7, #32]
 8020474:	3301      	adds	r3, #1
 8020476:	623b      	str	r3, [r7, #32]
 8020478:	6a3b      	ldr	r3, [r7, #32]
 802047a:	781a      	ldrb	r2, [r3, #0]
 802047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802047e:	701a      	strb	r2, [r3, #0]
 8020480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020482:	3301      	adds	r3, #1
 8020484:	627b      	str	r3, [r7, #36]	; 0x24
 8020486:	6a3b      	ldr	r3, [r7, #32]
 8020488:	3301      	adds	r3, #1
 802048a:	623b      	str	r3, [r7, #32]
 802048c:	6a3b      	ldr	r3, [r7, #32]
 802048e:	781a      	ldrb	r2, [r3, #0]
 8020490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020492:	701a      	strb	r2, [r3, #0]
 8020494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020496:	3301      	adds	r3, #1
 8020498:	627b      	str	r3, [r7, #36]	; 0x24
 802049a:	6a3b      	ldr	r3, [r7, #32]
 802049c:	3301      	adds	r3, #1
 802049e:	623b      	str	r3, [r7, #32]
 80204a0:	6a3b      	ldr	r3, [r7, #32]
 80204a2:	781a      	ldrb	r2, [r3, #0]
 80204a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204a6:	701a      	strb	r2, [r3, #0]
 80204a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204aa:	3301      	adds	r3, #1
 80204ac:	627b      	str	r3, [r7, #36]	; 0x24
 80204ae:	6a3b      	ldr	r3, [r7, #32]
 80204b0:	3301      	adds	r3, #1
 80204b2:	623b      	str	r3, [r7, #32]
 80204b4:	6a3b      	ldr	r3, [r7, #32]
 80204b6:	781a      	ldrb	r2, [r3, #0]
 80204b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204ba:	701a      	strb	r2, [r3, #0]
 80204bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204be:	3301      	adds	r3, #1
 80204c0:	627b      	str	r3, [r7, #36]	; 0x24
 80204c2:	6a3b      	ldr	r3, [r7, #32]
 80204c4:	3301      	adds	r3, #1
 80204c6:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 80204c8:	6a3b      	ldr	r3, [r7, #32]
 80204ca:	781a      	ldrb	r2, [r3, #0]
 80204cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204ce:	701a      	strb	r2, [r3, #0]
 80204d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204d2:	3301      	adds	r3, #1
 80204d4:	627b      	str	r3, [r7, #36]	; 0x24
 80204d6:	6a3b      	ldr	r3, [r7, #32]
 80204d8:	3301      	adds	r3, #1
 80204da:	623b      	str	r3, [r7, #32]
 80204dc:	6a3b      	ldr	r3, [r7, #32]
 80204de:	781a      	ldrb	r2, [r3, #0]
 80204e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204e2:	701a      	strb	r2, [r3, #0]
 80204e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204e6:	3301      	adds	r3, #1
 80204e8:	627b      	str	r3, [r7, #36]	; 0x24
 80204ea:	6a3b      	ldr	r3, [r7, #32]
 80204ec:	3301      	adds	r3, #1
 80204ee:	623b      	str	r3, [r7, #32]
 80204f0:	6a3b      	ldr	r3, [r7, #32]
 80204f2:	781a      	ldrb	r2, [r3, #0]
 80204f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204f6:	701a      	strb	r2, [r3, #0]
 80204f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204fa:	3301      	adds	r3, #1
 80204fc:	627b      	str	r3, [r7, #36]	; 0x24
 80204fe:	6a3b      	ldr	r3, [r7, #32]
 8020500:	3301      	adds	r3, #1
 8020502:	623b      	str	r3, [r7, #32]
 8020504:	6a3b      	ldr	r3, [r7, #32]
 8020506:	781a      	ldrb	r2, [r3, #0]
 8020508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802050a:	701a      	strb	r2, [r3, #0]
 802050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802050e:	3301      	adds	r3, #1
 8020510:	627b      	str	r3, [r7, #36]	; 0x24
 8020512:	6a3b      	ldr	r3, [r7, #32]
 8020514:	3301      	adds	r3, #1
 8020516:	623b      	str	r3, [r7, #32]
 8020518:	6a3b      	ldr	r3, [r7, #32]
 802051a:	781a      	ldrb	r2, [r3, #0]
 802051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802051e:	701a      	strb	r2, [r3, #0]
 8020520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020522:	3301      	adds	r3, #1
 8020524:	627b      	str	r3, [r7, #36]	; 0x24
 8020526:	6a3b      	ldr	r3, [r7, #32]
 8020528:	3301      	adds	r3, #1
 802052a:	623b      	str	r3, [r7, #32]
 802052c:	6a3b      	ldr	r3, [r7, #32]
 802052e:	781a      	ldrb	r2, [r3, #0]
 8020530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020532:	701a      	strb	r2, [r3, #0]
 8020534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020536:	3301      	adds	r3, #1
 8020538:	627b      	str	r3, [r7, #36]	; 0x24
 802053a:	6a3b      	ldr	r3, [r7, #32]
 802053c:	3301      	adds	r3, #1
 802053e:	623b      	str	r3, [r7, #32]
 8020540:	6a3b      	ldr	r3, [r7, #32]
 8020542:	781a      	ldrb	r2, [r3, #0]
 8020544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020546:	701a      	strb	r2, [r3, #0]
 8020548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802054a:	3301      	adds	r3, #1
 802054c:	627b      	str	r3, [r7, #36]	; 0x24
 802054e:	6a3b      	ldr	r3, [r7, #32]
 8020550:	3301      	adds	r3, #1
 8020552:	623b      	str	r3, [r7, #32]
 8020554:	6a3b      	ldr	r3, [r7, #32]
 8020556:	781a      	ldrb	r2, [r3, #0]
 8020558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802055a:	701a      	strb	r2, [r3, #0]
 802055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802055e:	3301      	adds	r3, #1
 8020560:	627b      	str	r3, [r7, #36]	; 0x24
 8020562:	6a3b      	ldr	r3, [r7, #32]
 8020564:	3301      	adds	r3, #1
 8020566:	623b      	str	r3, [r7, #32]
            len -= 32;
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	3b20      	subs	r3, #32
 802056c:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	2b20      	cmp	r3, #32
 8020572:	f63f aeb9 	bhi.w	80202e8 <lv_memcpy+0x30>
        }
        while(len) {
 8020576:	e00c      	b.n	8020592 <lv_memcpy+0x2da>
            COPY8
 8020578:	6a3b      	ldr	r3, [r7, #32]
 802057a:	781a      	ldrb	r2, [r3, #0]
 802057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802057e:	701a      	strb	r2, [r3, #0]
 8020580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020582:	3301      	adds	r3, #1
 8020584:	627b      	str	r3, [r7, #36]	; 0x24
 8020586:	6a3b      	ldr	r3, [r7, #32]
 8020588:	3301      	adds	r3, #1
 802058a:	623b      	str	r3, [r7, #32]
            len--;
 802058c:	687b      	ldr	r3, [r7, #4]
 802058e:	3b01      	subs	r3, #1
 8020590:	607b      	str	r3, [r7, #4]
        while(len) {
 8020592:	687b      	ldr	r3, [r7, #4]
 8020594:	2b00      	cmp	r3, #0
 8020596:	d1ef      	bne.n	8020578 <lv_memcpy+0x2c0>
        }
        return dst;
 8020598:	68fb      	ldr	r3, [r7, #12]
 802059a:	e09f      	b.n	80206dc <lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 802059c:	69fb      	ldr	r3, [r7, #28]
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d01a      	beq.n	80205d8 <lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 80205a2:	69fb      	ldr	r3, [r7, #28]
 80205a4:	f1c3 0304 	rsb	r3, r3, #4
 80205a8:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 80205aa:	e00f      	b.n	80205cc <lv_memcpy+0x314>
            COPY8;
 80205ac:	6a3b      	ldr	r3, [r7, #32]
 80205ae:	781a      	ldrb	r2, [r3, #0]
 80205b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205b2:	701a      	strb	r2, [r3, #0]
 80205b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205b6:	3301      	adds	r3, #1
 80205b8:	627b      	str	r3, [r7, #36]	; 0x24
 80205ba:	6a3b      	ldr	r3, [r7, #32]
 80205bc:	3301      	adds	r3, #1
 80205be:	623b      	str	r3, [r7, #32]
            d_align--;
 80205c0:	69fb      	ldr	r3, [r7, #28]
 80205c2:	3b01      	subs	r3, #1
 80205c4:	61fb      	str	r3, [r7, #28]
            len--;
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	3b01      	subs	r3, #1
 80205ca:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 80205cc:	69fb      	ldr	r3, [r7, #28]
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	d002      	beq.n	80205d8 <lv_memcpy+0x320>
 80205d2:	687b      	ldr	r3, [r7, #4]
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d1e9      	bne.n	80205ac <lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80205d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205da:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 80205dc:	6a3b      	ldr	r3, [r7, #32]
 80205de:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 80205e0:	e052      	b.n	8020688 <lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 80205e2:	697b      	ldr	r3, [r7, #20]
 80205e4:	681a      	ldr	r2, [r3, #0]
 80205e6:	69bb      	ldr	r3, [r7, #24]
 80205e8:	601a      	str	r2, [r3, #0]
 80205ea:	69bb      	ldr	r3, [r7, #24]
 80205ec:	3304      	adds	r3, #4
 80205ee:	61bb      	str	r3, [r7, #24]
 80205f0:	697b      	ldr	r3, [r7, #20]
 80205f2:	3304      	adds	r3, #4
 80205f4:	617b      	str	r3, [r7, #20]
 80205f6:	697b      	ldr	r3, [r7, #20]
 80205f8:	681a      	ldr	r2, [r3, #0]
 80205fa:	69bb      	ldr	r3, [r7, #24]
 80205fc:	601a      	str	r2, [r3, #0]
 80205fe:	69bb      	ldr	r3, [r7, #24]
 8020600:	3304      	adds	r3, #4
 8020602:	61bb      	str	r3, [r7, #24]
 8020604:	697b      	ldr	r3, [r7, #20]
 8020606:	3304      	adds	r3, #4
 8020608:	617b      	str	r3, [r7, #20]
 802060a:	697b      	ldr	r3, [r7, #20]
 802060c:	681a      	ldr	r2, [r3, #0]
 802060e:	69bb      	ldr	r3, [r7, #24]
 8020610:	601a      	str	r2, [r3, #0]
 8020612:	69bb      	ldr	r3, [r7, #24]
 8020614:	3304      	adds	r3, #4
 8020616:	61bb      	str	r3, [r7, #24]
 8020618:	697b      	ldr	r3, [r7, #20]
 802061a:	3304      	adds	r3, #4
 802061c:	617b      	str	r3, [r7, #20]
 802061e:	697b      	ldr	r3, [r7, #20]
 8020620:	681a      	ldr	r2, [r3, #0]
 8020622:	69bb      	ldr	r3, [r7, #24]
 8020624:	601a      	str	r2, [r3, #0]
 8020626:	69bb      	ldr	r3, [r7, #24]
 8020628:	3304      	adds	r3, #4
 802062a:	61bb      	str	r3, [r7, #24]
 802062c:	697b      	ldr	r3, [r7, #20]
 802062e:	3304      	adds	r3, #4
 8020630:	617b      	str	r3, [r7, #20]
 8020632:	697b      	ldr	r3, [r7, #20]
 8020634:	681a      	ldr	r2, [r3, #0]
 8020636:	69bb      	ldr	r3, [r7, #24]
 8020638:	601a      	str	r2, [r3, #0]
 802063a:	69bb      	ldr	r3, [r7, #24]
 802063c:	3304      	adds	r3, #4
 802063e:	61bb      	str	r3, [r7, #24]
 8020640:	697b      	ldr	r3, [r7, #20]
 8020642:	3304      	adds	r3, #4
 8020644:	617b      	str	r3, [r7, #20]
 8020646:	697b      	ldr	r3, [r7, #20]
 8020648:	681a      	ldr	r2, [r3, #0]
 802064a:	69bb      	ldr	r3, [r7, #24]
 802064c:	601a      	str	r2, [r3, #0]
 802064e:	69bb      	ldr	r3, [r7, #24]
 8020650:	3304      	adds	r3, #4
 8020652:	61bb      	str	r3, [r7, #24]
 8020654:	697b      	ldr	r3, [r7, #20]
 8020656:	3304      	adds	r3, #4
 8020658:	617b      	str	r3, [r7, #20]
 802065a:	697b      	ldr	r3, [r7, #20]
 802065c:	681a      	ldr	r2, [r3, #0]
 802065e:	69bb      	ldr	r3, [r7, #24]
 8020660:	601a      	str	r2, [r3, #0]
 8020662:	69bb      	ldr	r3, [r7, #24]
 8020664:	3304      	adds	r3, #4
 8020666:	61bb      	str	r3, [r7, #24]
 8020668:	697b      	ldr	r3, [r7, #20]
 802066a:	3304      	adds	r3, #4
 802066c:	617b      	str	r3, [r7, #20]
 802066e:	697b      	ldr	r3, [r7, #20]
 8020670:	681a      	ldr	r2, [r3, #0]
 8020672:	69bb      	ldr	r3, [r7, #24]
 8020674:	601a      	str	r2, [r3, #0]
 8020676:	69bb      	ldr	r3, [r7, #24]
 8020678:	3304      	adds	r3, #4
 802067a:	61bb      	str	r3, [r7, #24]
 802067c:	697b      	ldr	r3, [r7, #20]
 802067e:	3304      	adds	r3, #4
 8020680:	617b      	str	r3, [r7, #20]
        len -= 32;
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	3b20      	subs	r3, #32
 8020686:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	2b20      	cmp	r3, #32
 802068c:	d8a9      	bhi.n	80205e2 <lv_memcpy+0x32a>
    }

    while(len > 4) {
 802068e:	e00c      	b.n	80206aa <lv_memcpy+0x3f2>
        COPY32;
 8020690:	697b      	ldr	r3, [r7, #20]
 8020692:	681a      	ldr	r2, [r3, #0]
 8020694:	69bb      	ldr	r3, [r7, #24]
 8020696:	601a      	str	r2, [r3, #0]
 8020698:	69bb      	ldr	r3, [r7, #24]
 802069a:	3304      	adds	r3, #4
 802069c:	61bb      	str	r3, [r7, #24]
 802069e:	697b      	ldr	r3, [r7, #20]
 80206a0:	3304      	adds	r3, #4
 80206a2:	617b      	str	r3, [r7, #20]
        len -= 4;
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	3b04      	subs	r3, #4
 80206a8:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	2b04      	cmp	r3, #4
 80206ae:	d8ef      	bhi.n	8020690 <lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 80206b0:	69bb      	ldr	r3, [r7, #24]
 80206b2:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 80206b4:	697b      	ldr	r3, [r7, #20]
 80206b6:	623b      	str	r3, [r7, #32]
    while(len) {
 80206b8:	e00c      	b.n	80206d4 <lv_memcpy+0x41c>
        COPY8
 80206ba:	6a3b      	ldr	r3, [r7, #32]
 80206bc:	781a      	ldrb	r2, [r3, #0]
 80206be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206c0:	701a      	strb	r2, [r3, #0]
 80206c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206c4:	3301      	adds	r3, #1
 80206c6:	627b      	str	r3, [r7, #36]	; 0x24
 80206c8:	6a3b      	ldr	r3, [r7, #32]
 80206ca:	3301      	adds	r3, #1
 80206cc:	623b      	str	r3, [r7, #32]
        len--;
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	3b01      	subs	r3, #1
 80206d2:	607b      	str	r3, [r7, #4]
    while(len) {
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	d1ef      	bne.n	80206ba <lv_memcpy+0x402>
    }

    return dst;
 80206da:	68fb      	ldr	r3, [r7, #12]
}
 80206dc:	4618      	mov	r0, r3
 80206de:	372c      	adds	r7, #44	; 0x2c
 80206e0:	46bd      	mov	sp, r7
 80206e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206e6:	4770      	bx	lr

080206e8 <lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset(void * dst, uint8_t v, size_t len)
{
 80206e8:	b480      	push	{r7}
 80206ea:	b089      	sub	sp, #36	; 0x24
 80206ec:	af00      	add	r7, sp, #0
 80206ee:	60f8      	str	r0, [r7, #12]
 80206f0:	460b      	mov	r3, r1
 80206f2:	607a      	str	r2, [r7, #4]
 80206f4:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *)dst;
 80206f6:	68fb      	ldr	r3, [r7, #12]
 80206f8:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 80206fa:	69fb      	ldr	r3, [r7, #28]
 80206fc:	f003 0303 	and.w	r3, r3, #3
 8020700:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 8020702:	69bb      	ldr	r3, [r7, #24]
 8020704:	2b00      	cmp	r3, #0
 8020706:	d016      	beq.n	8020736 <lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 8020708:	69bb      	ldr	r3, [r7, #24]
 802070a:	f1c3 0304 	rsb	r3, r3, #4
 802070e:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 8020710:	e00b      	b.n	802072a <lv_memset+0x42>
            SET8(v);
 8020712:	69fb      	ldr	r3, [r7, #28]
 8020714:	7afa      	ldrb	r2, [r7, #11]
 8020716:	701a      	strb	r2, [r3, #0]
 8020718:	69fb      	ldr	r3, [r7, #28]
 802071a:	3301      	adds	r3, #1
 802071c:	61fb      	str	r3, [r7, #28]
            len--;
 802071e:	687b      	ldr	r3, [r7, #4]
 8020720:	3b01      	subs	r3, #1
 8020722:	607b      	str	r3, [r7, #4]
            d_align--;
 8020724:	69bb      	ldr	r3, [r7, #24]
 8020726:	3b01      	subs	r3, #1
 8020728:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 802072a:	69bb      	ldr	r3, [r7, #24]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d002      	beq.n	8020736 <lv_memset+0x4e>
 8020730:	687b      	ldr	r3, [r7, #4]
 8020732:	2b00      	cmp	r3, #0
 8020734:	d1ed      	bne.n	8020712 <lv_memset+0x2a>
        }
    }

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 8020736:	7afa      	ldrb	r2, [r7, #11]
 8020738:	7afb      	ldrb	r3, [r7, #11]
 802073a:	021b      	lsls	r3, r3, #8
 802073c:	441a      	add	r2, r3
 802073e:	7afb      	ldrb	r3, [r7, #11]
 8020740:	041b      	lsls	r3, r3, #16
 8020742:	441a      	add	r2, r3
 8020744:	7afb      	ldrb	r3, [r7, #11]
 8020746:	061b      	lsls	r3, r3, #24
 8020748:	4413      	add	r3, r2
 802074a:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 802074c:	69fb      	ldr	r3, [r7, #28]
 802074e:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 8020750:	e032      	b.n	80207b8 <lv_memset+0xd0>
        REPEAT8(SET32(v32));
 8020752:	697b      	ldr	r3, [r7, #20]
 8020754:	693a      	ldr	r2, [r7, #16]
 8020756:	601a      	str	r2, [r3, #0]
 8020758:	697b      	ldr	r3, [r7, #20]
 802075a:	3304      	adds	r3, #4
 802075c:	617b      	str	r3, [r7, #20]
 802075e:	697b      	ldr	r3, [r7, #20]
 8020760:	693a      	ldr	r2, [r7, #16]
 8020762:	601a      	str	r2, [r3, #0]
 8020764:	697b      	ldr	r3, [r7, #20]
 8020766:	3304      	adds	r3, #4
 8020768:	617b      	str	r3, [r7, #20]
 802076a:	697b      	ldr	r3, [r7, #20]
 802076c:	693a      	ldr	r2, [r7, #16]
 802076e:	601a      	str	r2, [r3, #0]
 8020770:	697b      	ldr	r3, [r7, #20]
 8020772:	3304      	adds	r3, #4
 8020774:	617b      	str	r3, [r7, #20]
 8020776:	697b      	ldr	r3, [r7, #20]
 8020778:	693a      	ldr	r2, [r7, #16]
 802077a:	601a      	str	r2, [r3, #0]
 802077c:	697b      	ldr	r3, [r7, #20]
 802077e:	3304      	adds	r3, #4
 8020780:	617b      	str	r3, [r7, #20]
 8020782:	697b      	ldr	r3, [r7, #20]
 8020784:	693a      	ldr	r2, [r7, #16]
 8020786:	601a      	str	r2, [r3, #0]
 8020788:	697b      	ldr	r3, [r7, #20]
 802078a:	3304      	adds	r3, #4
 802078c:	617b      	str	r3, [r7, #20]
 802078e:	697b      	ldr	r3, [r7, #20]
 8020790:	693a      	ldr	r2, [r7, #16]
 8020792:	601a      	str	r2, [r3, #0]
 8020794:	697b      	ldr	r3, [r7, #20]
 8020796:	3304      	adds	r3, #4
 8020798:	617b      	str	r3, [r7, #20]
 802079a:	697b      	ldr	r3, [r7, #20]
 802079c:	693a      	ldr	r2, [r7, #16]
 802079e:	601a      	str	r2, [r3, #0]
 80207a0:	697b      	ldr	r3, [r7, #20]
 80207a2:	3304      	adds	r3, #4
 80207a4:	617b      	str	r3, [r7, #20]
 80207a6:	697b      	ldr	r3, [r7, #20]
 80207a8:	693a      	ldr	r2, [r7, #16]
 80207aa:	601a      	str	r2, [r3, #0]
 80207ac:	697b      	ldr	r3, [r7, #20]
 80207ae:	3304      	adds	r3, #4
 80207b0:	617b      	str	r3, [r7, #20]
        len -= 32;
 80207b2:	687b      	ldr	r3, [r7, #4]
 80207b4:	3b20      	subs	r3, #32
 80207b6:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	2b20      	cmp	r3, #32
 80207bc:	d8c9      	bhi.n	8020752 <lv_memset+0x6a>
    }

    while(len > 4) {
 80207be:	e008      	b.n	80207d2 <lv_memset+0xea>
        SET32(v32);
 80207c0:	697b      	ldr	r3, [r7, #20]
 80207c2:	693a      	ldr	r2, [r7, #16]
 80207c4:	601a      	str	r2, [r3, #0]
 80207c6:	697b      	ldr	r3, [r7, #20]
 80207c8:	3304      	adds	r3, #4
 80207ca:	617b      	str	r3, [r7, #20]
        len -= 4;
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	3b04      	subs	r3, #4
 80207d0:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 80207d2:	687b      	ldr	r3, [r7, #4]
 80207d4:	2b04      	cmp	r3, #4
 80207d6:	d8f3      	bhi.n	80207c0 <lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 80207d8:	697b      	ldr	r3, [r7, #20]
 80207da:	61fb      	str	r3, [r7, #28]
    while(len) {
 80207dc:	e008      	b.n	80207f0 <lv_memset+0x108>
        SET8(v);
 80207de:	69fb      	ldr	r3, [r7, #28]
 80207e0:	7afa      	ldrb	r2, [r7, #11]
 80207e2:	701a      	strb	r2, [r3, #0]
 80207e4:	69fb      	ldr	r3, [r7, #28]
 80207e6:	3301      	adds	r3, #1
 80207e8:	61fb      	str	r3, [r7, #28]
        len--;
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	3b01      	subs	r3, #1
 80207ee:	607b      	str	r3, [r7, #4]
    while(len) {
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d1f3      	bne.n	80207de <lv_memset+0xf6>
    }
}
 80207f6:	bf00      	nop
 80207f8:	bf00      	nop
 80207fa:	3724      	adds	r7, #36	; 0x24
 80207fc:	46bd      	mov	sp, r7
 80207fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020802:	4770      	bx	lr

08020804 <lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_00(void * dst, size_t len)
{
 8020804:	b480      	push	{r7}
 8020806:	b087      	sub	sp, #28
 8020808:	af00      	add	r7, sp, #0
 802080a:	6078      	str	r0, [r7, #4]
 802080c:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8020812:	697b      	ldr	r3, [r7, #20]
 8020814:	f003 0303 	and.w	r3, r3, #3
 8020818:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 802081a:	693b      	ldr	r3, [r7, #16]
 802081c:	2b00      	cmp	r3, #0
 802081e:	d016      	beq.n	802084e <lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 8020820:	693b      	ldr	r3, [r7, #16]
 8020822:	f1c3 0304 	rsb	r3, r3, #4
 8020826:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 8020828:	e00b      	b.n	8020842 <lv_memset_00+0x3e>
            SET8(0);
 802082a:	697b      	ldr	r3, [r7, #20]
 802082c:	2200      	movs	r2, #0
 802082e:	701a      	strb	r2, [r3, #0]
 8020830:	697b      	ldr	r3, [r7, #20]
 8020832:	3301      	adds	r3, #1
 8020834:	617b      	str	r3, [r7, #20]
            len--;
 8020836:	683b      	ldr	r3, [r7, #0]
 8020838:	3b01      	subs	r3, #1
 802083a:	603b      	str	r3, [r7, #0]
            d_align--;
 802083c:	693b      	ldr	r3, [r7, #16]
 802083e:	3b01      	subs	r3, #1
 8020840:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 8020842:	693b      	ldr	r3, [r7, #16]
 8020844:	2b00      	cmp	r3, #0
 8020846:	d002      	beq.n	802084e <lv_memset_00+0x4a>
 8020848:	683b      	ldr	r3, [r7, #0]
 802084a:	2b00      	cmp	r3, #0
 802084c:	d1ed      	bne.n	802082a <lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 802084e:	697b      	ldr	r3, [r7, #20]
 8020850:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 8020852:	e032      	b.n	80208ba <lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	2200      	movs	r2, #0
 8020858:	601a      	str	r2, [r3, #0]
 802085a:	68fb      	ldr	r3, [r7, #12]
 802085c:	3304      	adds	r3, #4
 802085e:	60fb      	str	r3, [r7, #12]
 8020860:	68fb      	ldr	r3, [r7, #12]
 8020862:	2200      	movs	r2, #0
 8020864:	601a      	str	r2, [r3, #0]
 8020866:	68fb      	ldr	r3, [r7, #12]
 8020868:	3304      	adds	r3, #4
 802086a:	60fb      	str	r3, [r7, #12]
 802086c:	68fb      	ldr	r3, [r7, #12]
 802086e:	2200      	movs	r2, #0
 8020870:	601a      	str	r2, [r3, #0]
 8020872:	68fb      	ldr	r3, [r7, #12]
 8020874:	3304      	adds	r3, #4
 8020876:	60fb      	str	r3, [r7, #12]
 8020878:	68fb      	ldr	r3, [r7, #12]
 802087a:	2200      	movs	r2, #0
 802087c:	601a      	str	r2, [r3, #0]
 802087e:	68fb      	ldr	r3, [r7, #12]
 8020880:	3304      	adds	r3, #4
 8020882:	60fb      	str	r3, [r7, #12]
 8020884:	68fb      	ldr	r3, [r7, #12]
 8020886:	2200      	movs	r2, #0
 8020888:	601a      	str	r2, [r3, #0]
 802088a:	68fb      	ldr	r3, [r7, #12]
 802088c:	3304      	adds	r3, #4
 802088e:	60fb      	str	r3, [r7, #12]
 8020890:	68fb      	ldr	r3, [r7, #12]
 8020892:	2200      	movs	r2, #0
 8020894:	601a      	str	r2, [r3, #0]
 8020896:	68fb      	ldr	r3, [r7, #12]
 8020898:	3304      	adds	r3, #4
 802089a:	60fb      	str	r3, [r7, #12]
 802089c:	68fb      	ldr	r3, [r7, #12]
 802089e:	2200      	movs	r2, #0
 80208a0:	601a      	str	r2, [r3, #0]
 80208a2:	68fb      	ldr	r3, [r7, #12]
 80208a4:	3304      	adds	r3, #4
 80208a6:	60fb      	str	r3, [r7, #12]
 80208a8:	68fb      	ldr	r3, [r7, #12]
 80208aa:	2200      	movs	r2, #0
 80208ac:	601a      	str	r2, [r3, #0]
 80208ae:	68fb      	ldr	r3, [r7, #12]
 80208b0:	3304      	adds	r3, #4
 80208b2:	60fb      	str	r3, [r7, #12]
        len -= 32;
 80208b4:	683b      	ldr	r3, [r7, #0]
 80208b6:	3b20      	subs	r3, #32
 80208b8:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 80208ba:	683b      	ldr	r3, [r7, #0]
 80208bc:	2b20      	cmp	r3, #32
 80208be:	d8c9      	bhi.n	8020854 <lv_memset_00+0x50>
    }

    while(len > 4) {
 80208c0:	e008      	b.n	80208d4 <lv_memset_00+0xd0>
        SET32(0);
 80208c2:	68fb      	ldr	r3, [r7, #12]
 80208c4:	2200      	movs	r2, #0
 80208c6:	601a      	str	r2, [r3, #0]
 80208c8:	68fb      	ldr	r3, [r7, #12]
 80208ca:	3304      	adds	r3, #4
 80208cc:	60fb      	str	r3, [r7, #12]
        len -= 4;
 80208ce:	683b      	ldr	r3, [r7, #0]
 80208d0:	3b04      	subs	r3, #4
 80208d2:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 80208d4:	683b      	ldr	r3, [r7, #0]
 80208d6:	2b04      	cmp	r3, #4
 80208d8:	d8f3      	bhi.n	80208c2 <lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 80208da:	68fb      	ldr	r3, [r7, #12]
 80208dc:	617b      	str	r3, [r7, #20]
    while(len) {
 80208de:	e008      	b.n	80208f2 <lv_memset_00+0xee>
        SET8(0);
 80208e0:	697b      	ldr	r3, [r7, #20]
 80208e2:	2200      	movs	r2, #0
 80208e4:	701a      	strb	r2, [r3, #0]
 80208e6:	697b      	ldr	r3, [r7, #20]
 80208e8:	3301      	adds	r3, #1
 80208ea:	617b      	str	r3, [r7, #20]
        len--;
 80208ec:	683b      	ldr	r3, [r7, #0]
 80208ee:	3b01      	subs	r3, #1
 80208f0:	603b      	str	r3, [r7, #0]
    while(len) {
 80208f2:	683b      	ldr	r3, [r7, #0]
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d1f3      	bne.n	80208e0 <lv_memset_00+0xdc>
    }
}
 80208f8:	bf00      	nop
 80208fa:	bf00      	nop
 80208fc:	371c      	adds	r7, #28
 80208fe:	46bd      	mov	sp, r7
 8020900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020904:	4770      	bx	lr

08020906 <lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_ff(void * dst, size_t len)
{
 8020906:	b480      	push	{r7}
 8020908:	b087      	sub	sp, #28
 802090a:	af00      	add	r7, sp, #0
 802090c:	6078      	str	r0, [r7, #4]
 802090e:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8020914:	697b      	ldr	r3, [r7, #20]
 8020916:	f003 0303 	and.w	r3, r3, #3
 802091a:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 802091c:	693b      	ldr	r3, [r7, #16]
 802091e:	2b00      	cmp	r3, #0
 8020920:	d016      	beq.n	8020950 <lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 8020922:	693b      	ldr	r3, [r7, #16]
 8020924:	f1c3 0304 	rsb	r3, r3, #4
 8020928:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802092a:	e00b      	b.n	8020944 <lv_memset_ff+0x3e>
            SET8(0xFF);
 802092c:	697b      	ldr	r3, [r7, #20]
 802092e:	22ff      	movs	r2, #255	; 0xff
 8020930:	701a      	strb	r2, [r3, #0]
 8020932:	697b      	ldr	r3, [r7, #20]
 8020934:	3301      	adds	r3, #1
 8020936:	617b      	str	r3, [r7, #20]
            len--;
 8020938:	683b      	ldr	r3, [r7, #0]
 802093a:	3b01      	subs	r3, #1
 802093c:	603b      	str	r3, [r7, #0]
            d_align--;
 802093e:	693b      	ldr	r3, [r7, #16]
 8020940:	3b01      	subs	r3, #1
 8020942:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 8020944:	693b      	ldr	r3, [r7, #16]
 8020946:	2b00      	cmp	r3, #0
 8020948:	d002      	beq.n	8020950 <lv_memset_ff+0x4a>
 802094a:	683b      	ldr	r3, [r7, #0]
 802094c:	2b00      	cmp	r3, #0
 802094e:	d1ed      	bne.n	802092c <lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 8020950:	697b      	ldr	r3, [r7, #20]
 8020952:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 8020954:	e03a      	b.n	80209cc <lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 8020956:	68fb      	ldr	r3, [r7, #12]
 8020958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802095c:	601a      	str	r2, [r3, #0]
 802095e:	68fb      	ldr	r3, [r7, #12]
 8020960:	3304      	adds	r3, #4
 8020962:	60fb      	str	r3, [r7, #12]
 8020964:	68fb      	ldr	r3, [r7, #12]
 8020966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802096a:	601a      	str	r2, [r3, #0]
 802096c:	68fb      	ldr	r3, [r7, #12]
 802096e:	3304      	adds	r3, #4
 8020970:	60fb      	str	r3, [r7, #12]
 8020972:	68fb      	ldr	r3, [r7, #12]
 8020974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020978:	601a      	str	r2, [r3, #0]
 802097a:	68fb      	ldr	r3, [r7, #12]
 802097c:	3304      	adds	r3, #4
 802097e:	60fb      	str	r3, [r7, #12]
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020986:	601a      	str	r2, [r3, #0]
 8020988:	68fb      	ldr	r3, [r7, #12]
 802098a:	3304      	adds	r3, #4
 802098c:	60fb      	str	r3, [r7, #12]
 802098e:	68fb      	ldr	r3, [r7, #12]
 8020990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020994:	601a      	str	r2, [r3, #0]
 8020996:	68fb      	ldr	r3, [r7, #12]
 8020998:	3304      	adds	r3, #4
 802099a:	60fb      	str	r3, [r7, #12]
 802099c:	68fb      	ldr	r3, [r7, #12]
 802099e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80209a2:	601a      	str	r2, [r3, #0]
 80209a4:	68fb      	ldr	r3, [r7, #12]
 80209a6:	3304      	adds	r3, #4
 80209a8:	60fb      	str	r3, [r7, #12]
 80209aa:	68fb      	ldr	r3, [r7, #12]
 80209ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80209b0:	601a      	str	r2, [r3, #0]
 80209b2:	68fb      	ldr	r3, [r7, #12]
 80209b4:	3304      	adds	r3, #4
 80209b6:	60fb      	str	r3, [r7, #12]
 80209b8:	68fb      	ldr	r3, [r7, #12]
 80209ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80209be:	601a      	str	r2, [r3, #0]
 80209c0:	68fb      	ldr	r3, [r7, #12]
 80209c2:	3304      	adds	r3, #4
 80209c4:	60fb      	str	r3, [r7, #12]
        len -= 32;
 80209c6:	683b      	ldr	r3, [r7, #0]
 80209c8:	3b20      	subs	r3, #32
 80209ca:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 80209cc:	683b      	ldr	r3, [r7, #0]
 80209ce:	2b20      	cmp	r3, #32
 80209d0:	d8c1      	bhi.n	8020956 <lv_memset_ff+0x50>
    }

    while(len > 4) {
 80209d2:	e009      	b.n	80209e8 <lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 80209d4:	68fb      	ldr	r3, [r7, #12]
 80209d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80209da:	601a      	str	r2, [r3, #0]
 80209dc:	68fb      	ldr	r3, [r7, #12]
 80209de:	3304      	adds	r3, #4
 80209e0:	60fb      	str	r3, [r7, #12]
        len -= 4;
 80209e2:	683b      	ldr	r3, [r7, #0]
 80209e4:	3b04      	subs	r3, #4
 80209e6:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 80209e8:	683b      	ldr	r3, [r7, #0]
 80209ea:	2b04      	cmp	r3, #4
 80209ec:	d8f2      	bhi.n	80209d4 <lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 80209ee:	68fb      	ldr	r3, [r7, #12]
 80209f0:	617b      	str	r3, [r7, #20]
    while(len) {
 80209f2:	e008      	b.n	8020a06 <lv_memset_ff+0x100>
        SET8(0xFF);
 80209f4:	697b      	ldr	r3, [r7, #20]
 80209f6:	22ff      	movs	r2, #255	; 0xff
 80209f8:	701a      	strb	r2, [r3, #0]
 80209fa:	697b      	ldr	r3, [r7, #20]
 80209fc:	3301      	adds	r3, #1
 80209fe:	617b      	str	r3, [r7, #20]
        len--;
 8020a00:	683b      	ldr	r3, [r7, #0]
 8020a02:	3b01      	subs	r3, #1
 8020a04:	603b      	str	r3, [r7, #0]
    while(len) {
 8020a06:	683b      	ldr	r3, [r7, #0]
 8020a08:	2b00      	cmp	r3, #0
 8020a0a:	d1f3      	bne.n	80209f4 <lv_memset_ff+0xee>
    }
}
 8020a0c:	bf00      	nop
 8020a0e:	bf00      	nop
 8020a10:	371c      	adds	r7, #28
 8020a12:	46bd      	mov	sp, r7
 8020a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a18:	4770      	bx	lr

08020a1a <lv_color_make>:
{
 8020a1a:	b480      	push	{r7}
 8020a1c:	b083      	sub	sp, #12
 8020a1e:	af00      	add	r7, sp, #0
 8020a20:	4603      	mov	r3, r0
 8020a22:	71fb      	strb	r3, [r7, #7]
 8020a24:	460b      	mov	r3, r1
 8020a26:	71bb      	strb	r3, [r7, #6]
 8020a28:	4613      	mov	r3, r2
 8020a2a:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8020a2c:	797b      	ldrb	r3, [r7, #5]
 8020a2e:	09db      	lsrs	r3, r3, #7
 8020a30:	b2da      	uxtb	r2, r3
 8020a32:	79bb      	ldrb	r3, [r7, #6]
 8020a34:	09db      	lsrs	r3, r3, #7
 8020a36:	b2db      	uxtb	r3, r3
 8020a38:	4313      	orrs	r3, r2
 8020a3a:	b2da      	uxtb	r2, r3
 8020a3c:	79fb      	ldrb	r3, [r7, #7]
 8020a3e:	09db      	lsrs	r3, r3, #7
 8020a40:	b2db      	uxtb	r3, r3
 8020a42:	4313      	orrs	r3, r2
 8020a44:	b2db      	uxtb	r3, r3
}
 8020a46:	4618      	mov	r0, r3
 8020a48:	370c      	adds	r7, #12
 8020a4a:	46bd      	mov	sp, r7
 8020a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a50:	4770      	bx	lr

08020a52 <lv_color_white>:
{
 8020a52:	b580      	push	{r7, lr}
 8020a54:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8020a56:	22ff      	movs	r2, #255	; 0xff
 8020a58:	21ff      	movs	r1, #255	; 0xff
 8020a5a:	20ff      	movs	r0, #255	; 0xff
 8020a5c:	f7ff ffdd 	bl	8020a1a <lv_color_make>
 8020a60:	4603      	mov	r3, r0
}
 8020a62:	4618      	mov	r0, r3
 8020a64:	bd80      	pop	{r7, pc}

08020a66 <lv_color_black>:
{
 8020a66:	b580      	push	{r7, lr}
 8020a68:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8020a6a:	2200      	movs	r2, #0
 8020a6c:	2100      	movs	r1, #0
 8020a6e:	2000      	movs	r0, #0
 8020a70:	f7ff ffd3 	bl	8020a1a <lv_color_make>
 8020a74:	4603      	mov	r3, r0
}
 8020a76:	4618      	mov	r0, r3
 8020a78:	bd80      	pop	{r7, pc}

08020a7a <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8020a7a:	b580      	push	{r7, lr}
 8020a7c:	b08c      	sub	sp, #48	; 0x30
 8020a7e:	af00      	add	r7, sp, #0
 8020a80:	60f8      	str	r0, [r7, #12]
 8020a82:	460b      	mov	r3, r1
 8020a84:	607a      	str	r2, [r7, #4]
 8020a86:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	891b      	ldrh	r3, [r3, #8]
 8020a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a90:	4293      	cmp	r3, r2
 8020a92:	d137      	bne.n	8020b04 <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8020a94:	2300      	movs	r3, #0
 8020a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020a98:	e02c      	b.n	8020af4 <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 8020a9a:	68fb      	ldr	r3, [r7, #12]
 8020a9c:	685a      	ldr	r2, [r3, #4]
 8020a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020aa0:	00db      	lsls	r3, r3, #3
 8020aa2:	4413      	add	r3, r2
 8020aa4:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8020aa6:	697b      	ldr	r3, [r7, #20]
 8020aa8:	881b      	ldrh	r3, [r3, #0]
 8020aaa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020aae:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8020ab0:	8a7a      	ldrh	r2, [r7, #18]
 8020ab2:	897b      	ldrh	r3, [r7, #10]
 8020ab4:	429a      	cmp	r2, r3
 8020ab6:	d11a      	bne.n	8020aee <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8020ab8:	697b      	ldr	r3, [r7, #20]
 8020aba:	881b      	ldrh	r3, [r3, #0]
 8020abc:	b21b      	sxth	r3, r3
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	da01      	bge.n	8020ac6 <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 8020ac2:	2302      	movs	r3, #2
 8020ac4:	e098      	b.n	8020bf8 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8020ac6:	697b      	ldr	r3, [r7, #20]
 8020ac8:	881b      	ldrh	r3, [r3, #0]
 8020aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d007      	beq.n	8020ae2 <lv_style_get_prop_inlined+0x68>
 8020ad2:	8a7b      	ldrh	r3, [r7, #18]
 8020ad4:	4618      	mov	r0, r3
 8020ad6:	f000 f9cd 	bl	8020e74 <lv_style_prop_get_default>
 8020ada:	4602      	mov	r2, r0
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	601a      	str	r2, [r3, #0]
 8020ae0:	e003      	b.n	8020aea <lv_style_get_prop_inlined+0x70>
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	697a      	ldr	r2, [r7, #20]
 8020ae6:	6852      	ldr	r2, [r2, #4]
 8020ae8:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 8020aea:	2301      	movs	r3, #1
 8020aec:	e084      	b.n	8020bf8 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8020aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020af0:	3301      	adds	r3, #1
 8020af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020af4:	68fb      	ldr	r3, [r7, #12]
 8020af6:	7adb      	ldrb	r3, [r3, #11]
 8020af8:	461a      	mov	r2, r3
 8020afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020afc:	4293      	cmp	r3, r2
 8020afe:	d3cc      	bcc.n	8020a9a <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 8020b00:	2300      	movs	r3, #0
 8020b02:	e079      	b.n	8020bf8 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8020b04:	68fb      	ldr	r3, [r7, #12]
 8020b06:	7adb      	ldrb	r3, [r3, #11]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d101      	bne.n	8020b10 <lv_style_get_prop_inlined+0x96>
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	e073      	b.n	8020bf8 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 8020b10:	68fb      	ldr	r3, [r7, #12]
 8020b12:	7adb      	ldrb	r3, [r3, #11]
 8020b14:	2b01      	cmp	r3, #1
 8020b16:	d948      	bls.n	8020baa <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8020b18:	68fb      	ldr	r3, [r7, #12]
 8020b1a:	685a      	ldr	r2, [r3, #4]
 8020b1c:	68fb      	ldr	r3, [r7, #12]
 8020b1e:	7adb      	ldrb	r3, [r3, #11]
 8020b20:	009b      	lsls	r3, r3, #2
 8020b22:	4413      	add	r3, r2
 8020b24:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 8020b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b28:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8020b2a:	2300      	movs	r3, #0
 8020b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8020b2e:	e035      	b.n	8020b9c <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8020b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b32:	005b      	lsls	r3, r3, #1
 8020b34:	6a3a      	ldr	r2, [r7, #32]
 8020b36:	4413      	add	r3, r2
 8020b38:	881b      	ldrh	r3, [r3, #0]
 8020b3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020b3e:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 8020b40:	8bfa      	ldrh	r2, [r7, #30]
 8020b42:	897b      	ldrh	r3, [r7, #10]
 8020b44:	429a      	cmp	r2, r3
 8020b46:	d126      	bne.n	8020b96 <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8020b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b4a:	005b      	lsls	r3, r3, #1
 8020b4c:	6a3a      	ldr	r2, [r7, #32]
 8020b4e:	4413      	add	r3, r2
 8020b50:	881b      	ldrh	r3, [r3, #0]
 8020b52:	b21b      	sxth	r3, r3
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	da01      	bge.n	8020b5c <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8020b58:	2302      	movs	r3, #2
 8020b5a:	e04d      	b.n	8020bf8 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8020b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b5e:	005b      	lsls	r3, r3, #1
 8020b60:	6a3a      	ldr	r2, [r7, #32]
 8020b62:	4413      	add	r3, r2
 8020b64:	881b      	ldrh	r3, [r3, #0]
 8020b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d007      	beq.n	8020b7e <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8020b6e:	8bfb      	ldrh	r3, [r7, #30]
 8020b70:	4618      	mov	r0, r3
 8020b72:	f000 f97f 	bl	8020e74 <lv_style_prop_get_default>
 8020b76:	4602      	mov	r2, r0
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	601a      	str	r2, [r3, #0]
 8020b7c:	e009      	b.n	8020b92 <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8020b7e:	68fb      	ldr	r3, [r7, #12]
 8020b80:	685b      	ldr	r3, [r3, #4]
 8020b82:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 8020b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b86:	009b      	lsls	r3, r3, #2
 8020b88:	69ba      	ldr	r2, [r7, #24]
 8020b8a:	441a      	add	r2, r3
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	6812      	ldr	r2, [r2, #0]
 8020b90:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 8020b92:	2301      	movs	r3, #1
 8020b94:	e030      	b.n	8020bf8 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8020b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b98:	3301      	adds	r3, #1
 8020b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	7adb      	ldrb	r3, [r3, #11]
 8020ba0:	461a      	mov	r2, r3
 8020ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ba4:	4293      	cmp	r3, r2
 8020ba6:	d3c3      	bcc.n	8020b30 <lv_style_get_prop_inlined+0xb6>
 8020ba8:	e025      	b.n	8020bf6 <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8020baa:	68fb      	ldr	r3, [r7, #12]
 8020bac:	891b      	ldrh	r3, [r3, #8]
 8020bae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8020bb2:	897b      	ldrh	r3, [r7, #10]
 8020bb4:	429a      	cmp	r2, r3
 8020bb6:	d11e      	bne.n	8020bf6 <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	891b      	ldrh	r3, [r3, #8]
 8020bbc:	b21b      	sxth	r3, r3
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	da01      	bge.n	8020bc6 <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 8020bc2:	2302      	movs	r3, #2
 8020bc4:	e018      	b.n	8020bf8 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8020bc6:	68fb      	ldr	r3, [r7, #12]
 8020bc8:	891b      	ldrh	r3, [r3, #8]
 8020bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020bce:	2b00      	cmp	r3, #0
 8020bd0:	d00b      	beq.n	8020bea <lv_style_get_prop_inlined+0x170>
 8020bd2:	68fb      	ldr	r3, [r7, #12]
 8020bd4:	891b      	ldrh	r3, [r3, #8]
 8020bd6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020bda:	b29b      	uxth	r3, r3
 8020bdc:	4618      	mov	r0, r3
 8020bde:	f000 f949 	bl	8020e74 <lv_style_prop_get_default>
 8020be2:	4602      	mov	r2, r0
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	601a      	str	r2, [r3, #0]
 8020be8:	e003      	b.n	8020bf2 <lv_style_get_prop_inlined+0x178>
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	68fa      	ldr	r2, [r7, #12]
 8020bee:	6852      	ldr	r2, [r2, #4]
 8020bf0:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 8020bf2:	2301      	movs	r3, #1
 8020bf4:	e000      	b.n	8020bf8 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 8020bf6:	2300      	movs	r3, #0
}
 8020bf8:	4618      	mov	r0, r3
 8020bfa:	3730      	adds	r7, #48	; 0x30
 8020bfc:	46bd      	mov	sp, r7
 8020bfe:	bd80      	pop	{r7, pc}

08020c00 <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
 8020c00:	b580      	push	{r7, lr}
 8020c02:	b082      	sub	sp, #8
 8020c04:	af00      	add	r7, sp, #0
 8020c06:	6078      	str	r0, [r7, #4]
#if LV_USE_ASSERT_STYLE
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	681b      	ldr	r3, [r3, #0]
 8020c0c:	4a06      	ldr	r2, [pc, #24]	; (8020c28 <lv_style_init+0x28>)
 8020c0e:	4293      	cmp	r3, r2
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8020c10:	210c      	movs	r1, #12
 8020c12:	6878      	ldr	r0, [r7, #4]
 8020c14:	f7ff fdf6 	bl	8020804 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	4a03      	ldr	r2, [pc, #12]	; (8020c28 <lv_style_init+0x28>)
 8020c1c:	601a      	str	r2, [r3, #0]
#endif
}
 8020c1e:	bf00      	nop
 8020c20:	3708      	adds	r7, #8
 8020c22:	46bd      	mov	sp, r7
 8020c24:	bd80      	pop	{r7, pc}
 8020c26:	bf00      	nop
 8020c28:	aabbccdd 	.word	0xaabbccdd

08020c2c <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
 8020c2c:	b580      	push	{r7, lr}
 8020c2e:	b082      	sub	sp, #8
 8020c30:	af00      	add	r7, sp, #0
 8020c32:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	d100      	bne.n	8020c3c <lv_style_reset+0x10>
 8020c3a:	e7fe      	b.n	8020c3a <lv_style_reset+0xe>
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	4a0f      	ldr	r2, [pc, #60]	; (8020c80 <lv_style_reset+0x54>)
 8020c42:	4293      	cmp	r3, r2
 8020c44:	d000      	beq.n	8020c48 <lv_style_reset+0x1c>
 8020c46:	e7fe      	b.n	8020c46 <lv_style_reset+0x1a>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	891b      	ldrh	r3, [r3, #8]
 8020c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020c50:	4293      	cmp	r3, r2
 8020c52:	d010      	beq.n	8020c76 <lv_style_reset+0x4a>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8020c54:	687b      	ldr	r3, [r7, #4]
 8020c56:	7adb      	ldrb	r3, [r3, #11]
 8020c58:	2b01      	cmp	r3, #1
 8020c5a:	d904      	bls.n	8020c66 <lv_style_reset+0x3a>
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	685b      	ldr	r3, [r3, #4]
 8020c60:	4618      	mov	r0, r3
 8020c62:	f7ff f9cb 	bl	801fffc <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8020c66:	210c      	movs	r1, #12
 8020c68:	6878      	ldr	r0, [r7, #4]
 8020c6a:	f7ff fdcb 	bl	8020804 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	4a03      	ldr	r2, [pc, #12]	; (8020c80 <lv_style_reset+0x54>)
 8020c72:	601a      	str	r2, [r3, #0]
 8020c74:	e000      	b.n	8020c78 <lv_style_reset+0x4c>
        return;
 8020c76:	bf00      	nop
#endif
}
 8020c78:	3708      	adds	r7, #8
 8020c7a:	46bd      	mov	sp, r7
 8020c7c:	bd80      	pop	{r7, pc}
 8020c7e:	bf00      	nop
 8020c80:	aabbccdd 	.word	0xaabbccdd

08020c84 <lv_style_remove_prop>:
{
    return last_custom_prop_id - _LV_STYLE_LAST_BUILT_IN_PROP;
}

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8020c84:	b580      	push	{r7, lr}
 8020c86:	b08c      	sub	sp, #48	; 0x30
 8020c88:	af00      	add	r7, sp, #0
 8020c8a:	6078      	str	r0, [r7, #4]
 8020c8c:	460b      	mov	r3, r1
 8020c8e:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	d100      	bne.n	8020c98 <lv_style_remove_prop+0x14>
 8020c96:	e7fe      	b.n	8020c96 <lv_style_remove_prop+0x12>
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	4a61      	ldr	r2, [pc, #388]	; (8020e24 <lv_style_remove_prop+0x1a0>)
 8020c9e:	4293      	cmp	r3, r2
 8020ca0:	d000      	beq.n	8020ca4 <lv_style_remove_prop+0x20>
 8020ca2:	e7fe      	b.n	8020ca2 <lv_style_remove_prop+0x1e>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	891b      	ldrh	r3, [r3, #8]
 8020ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020cac:	4293      	cmp	r3, r2
 8020cae:	d101      	bne.n	8020cb4 <lv_style_remove_prop+0x30>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
 8020cb0:	2300      	movs	r3, #0
 8020cb2:	e0b2      	b.n	8020e1a <lv_style_remove_prop+0x196>
    }

    if(style->prop_cnt == 0)  return false;
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	7adb      	ldrb	r3, [r3, #11]
 8020cb8:	2b00      	cmp	r3, #0
 8020cba:	d101      	bne.n	8020cc0 <lv_style_remove_prop+0x3c>
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	e0ac      	b.n	8020e1a <lv_style_remove_prop+0x196>

    if(style->prop_cnt == 1) {
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	7adb      	ldrb	r3, [r3, #11]
 8020cc4:	2b01      	cmp	r3, #1
 8020cc6:	d110      	bne.n	8020cea <lv_style_remove_prop+0x66>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	891b      	ldrh	r3, [r3, #8]
 8020ccc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8020cd0:	887b      	ldrh	r3, [r7, #2]
 8020cd2:	429a      	cmp	r2, r3
 8020cd4:	d107      	bne.n	8020ce6 <lv_style_remove_prop+0x62>
            style->prop1 = LV_STYLE_PROP_INV;
 8020cd6:	687b      	ldr	r3, [r7, #4]
 8020cd8:	2200      	movs	r2, #0
 8020cda:	811a      	strh	r2, [r3, #8]
            style->prop_cnt = 0;
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	2200      	movs	r2, #0
 8020ce0:	72da      	strb	r2, [r3, #11]
            return true;
 8020ce2:	2301      	movs	r3, #1
 8020ce4:	e099      	b.n	8020e1a <lv_style_remove_prop+0x196>
        }
        return false;
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	e097      	b.n	8020e1a <lv_style_remove_prop+0x196>
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	685a      	ldr	r2, [r3, #4]
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	7adb      	ldrb	r3, [r3, #11]
 8020cf2:	009b      	lsls	r3, r3, #2
 8020cf4:	4413      	add	r3, r2
 8020cf6:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t * old_props = (uint16_t *)tmp;
 8020cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cfa:	623b      	str	r3, [r7, #32]
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
 8020cfc:	2300      	movs	r3, #0
 8020cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020d00:	e083      	b.n	8020e0a <lv_style_remove_prop+0x186>
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8020d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d04:	005b      	lsls	r3, r3, #1
 8020d06:	6a3a      	ldr	r2, [r7, #32]
 8020d08:	4413      	add	r3, r2
 8020d0a:	881b      	ldrh	r3, [r3, #0]
 8020d0c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8020d10:	887b      	ldrh	r3, [r7, #2]
 8020d12:	429a      	cmp	r2, r3
 8020d14:	d176      	bne.n	8020e04 <lv_style_remove_prop+0x180>
            lv_style_value_t * old_values = (lv_style_value_t *)style->v_p.values_and_props;
 8020d16:	687b      	ldr	r3, [r7, #4]
 8020d18:	685b      	ldr	r3, [r3, #4]
 8020d1a:	61fb      	str	r3, [r7, #28]

            if(style->prop_cnt == 2) {
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	7adb      	ldrb	r3, [r3, #11]
 8020d20:	2b02      	cmp	r3, #2
 8020d22:	d119      	bne.n	8020d58 <lv_style_remove_prop+0xd4>
                style->prop_cnt = 1;
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	2201      	movs	r2, #1
 8020d28:	72da      	strb	r2, [r3, #11]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8020d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	d102      	bne.n	8020d36 <lv_style_remove_prop+0xb2>
 8020d30:	6a3b      	ldr	r3, [r7, #32]
 8020d32:	885b      	ldrh	r3, [r3, #2]
 8020d34:	e001      	b.n	8020d3a <lv_style_remove_prop+0xb6>
 8020d36:	6a3b      	ldr	r3, [r7, #32]
 8020d38:	881b      	ldrh	r3, [r3, #0]
 8020d3a:	687a      	ldr	r2, [r7, #4]
 8020d3c:	8113      	strh	r3, [r2, #8]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8020d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d104      	bne.n	8020d4e <lv_style_remove_prop+0xca>
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	69fa      	ldr	r2, [r7, #28]
 8020d48:	6852      	ldr	r2, [r2, #4]
 8020d4a:	605a      	str	r2, [r3, #4]
 8020d4c:	e055      	b.n	8020dfa <lv_style_remove_prop+0x176>
 8020d4e:	687b      	ldr	r3, [r7, #4]
 8020d50:	69fa      	ldr	r2, [r7, #28]
 8020d52:	6812      	ldr	r2, [r2, #0]
 8020d54:	605a      	str	r2, [r3, #4]
 8020d56:	e050      	b.n	8020dfa <lv_style_remove_prop+0x176>
            }
            else {
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8020d58:	687b      	ldr	r3, [r7, #4]
 8020d5a:	7adb      	ldrb	r3, [r3, #11]
 8020d5c:	3b01      	subs	r3, #1
 8020d5e:	461a      	mov	r2, r3
 8020d60:	4613      	mov	r3, r2
 8020d62:	005b      	lsls	r3, r3, #1
 8020d64:	4413      	add	r3, r2
 8020d66:	005b      	lsls	r3, r3, #1
 8020d68:	61bb      	str	r3, [r7, #24]
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8020d6a:	69b8      	ldr	r0, [r7, #24]
 8020d6c:	f7ff f916 	bl	801ff9c <lv_mem_alloc>
 8020d70:	6178      	str	r0, [r7, #20]
                if(new_values_and_props == NULL) return false;
 8020d72:	697b      	ldr	r3, [r7, #20]
 8020d74:	2b00      	cmp	r3, #0
 8020d76:	d101      	bne.n	8020d7c <lv_style_remove_prop+0xf8>
 8020d78:	2300      	movs	r3, #0
 8020d7a:	e04e      	b.n	8020e1a <lv_style_remove_prop+0x196>
                style->v_p.values_and_props = new_values_and_props;
 8020d7c:	687b      	ldr	r3, [r7, #4]
 8020d7e:	697a      	ldr	r2, [r7, #20]
 8020d80:	605a      	str	r2, [r3, #4]
                style->prop_cnt--;
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	7adb      	ldrb	r3, [r3, #11]
 8020d86:	3b01      	subs	r3, #1
 8020d88:	b2da      	uxtb	r2, r3
 8020d8a:	687b      	ldr	r3, [r7, #4]
 8020d8c:	72da      	strb	r2, [r3, #11]

                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8020d8e:	687b      	ldr	r3, [r7, #4]
 8020d90:	7adb      	ldrb	r3, [r3, #11]
 8020d92:	009b      	lsls	r3, r3, #2
 8020d94:	697a      	ldr	r2, [r7, #20]
 8020d96:	4413      	add	r3, r2
 8020d98:	627b      	str	r3, [r7, #36]	; 0x24
                uint16_t * new_props = (uint16_t *)tmp;
 8020d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d9c:	613b      	str	r3, [r7, #16]
                lv_style_value_t * new_values = (lv_style_value_t *)new_values_and_props;
 8020d9e:	697b      	ldr	r3, [r7, #20]
 8020da0:	60fb      	str	r3, [r7, #12]

                uint32_t j;
                for(i = j = 0; j <= style->prop_cnt;
 8020da2:	2300      	movs	r3, #0
 8020da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8020da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020daa:	e020      	b.n	8020dee <lv_style_remove_prop+0x16a>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
                    if(old_props[j] != prop) {
 8020dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020dae:	005b      	lsls	r3, r3, #1
 8020db0:	6a3a      	ldr	r2, [r7, #32]
 8020db2:	4413      	add	r3, r2
 8020db4:	881b      	ldrh	r3, [r3, #0]
 8020db6:	887a      	ldrh	r2, [r7, #2]
 8020db8:	429a      	cmp	r2, r3
 8020dba:	d015      	beq.n	8020de8 <lv_style_remove_prop+0x164>
                        new_values[i] = old_values[j];
 8020dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020dbe:	009b      	lsls	r3, r3, #2
 8020dc0:	69fa      	ldr	r2, [r7, #28]
 8020dc2:	441a      	add	r2, r3
 8020dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dc6:	009b      	lsls	r3, r3, #2
 8020dc8:	68f9      	ldr	r1, [r7, #12]
 8020dca:	440b      	add	r3, r1
 8020dcc:	6812      	ldr	r2, [r2, #0]
 8020dce:	601a      	str	r2, [r3, #0]
                        new_props[i++] = old_props[j];
 8020dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020dd2:	005b      	lsls	r3, r3, #1
 8020dd4:	6a3a      	ldr	r2, [r7, #32]
 8020dd6:	441a      	add	r2, r3
 8020dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020dda:	1c59      	adds	r1, r3, #1
 8020ddc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8020dde:	005b      	lsls	r3, r3, #1
 8020de0:	6939      	ldr	r1, [r7, #16]
 8020de2:	440b      	add	r3, r1
 8020de4:	8812      	ldrh	r2, [r2, #0]
 8020de6:	801a      	strh	r2, [r3, #0]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8020de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020dea:	3301      	adds	r3, #1
 8020dec:	62bb      	str	r3, [r7, #40]	; 0x28
                for(i = j = 0; j <= style->prop_cnt;
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	7adb      	ldrb	r3, [r3, #11]
 8020df2:	461a      	mov	r2, r3
 8020df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020df6:	4293      	cmp	r3, r2
 8020df8:	d9d8      	bls.n	8020dac <lv_style_remove_prop+0x128>
                    }
                }
            }

            lv_mem_free(old_values);
 8020dfa:	69f8      	ldr	r0, [r7, #28]
 8020dfc:	f7ff f8fe 	bl	801fffc <lv_mem_free>
            return true;
 8020e00:	2301      	movs	r3, #1
 8020e02:	e00a      	b.n	8020e1a <lv_style_remove_prop+0x196>
    for(i = 0; i < style->prop_cnt; i++) {
 8020e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e06:	3301      	adds	r3, #1
 8020e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	7adb      	ldrb	r3, [r3, #11]
 8020e0e:	461a      	mov	r2, r3
 8020e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e12:	4293      	cmp	r3, r2
 8020e14:	f4ff af75 	bcc.w	8020d02 <lv_style_remove_prop+0x7e>
        }
    }

    return false;
 8020e18:	2300      	movs	r3, #0
}
 8020e1a:	4618      	mov	r0, r3
 8020e1c:	3730      	adds	r7, #48	; 0x30
 8020e1e:	46bd      	mov	sp, r7
 8020e20:	bd80      	pop	{r7, pc}
 8020e22:	bf00      	nop
 8020e24:	aabbccdd 	.word	0xaabbccdd

08020e28 <lv_style_set_prop>:

void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
{
 8020e28:	b580      	push	{r7, lr}
 8020e2a:	b084      	sub	sp, #16
 8020e2c:	af00      	add	r7, sp, #0
 8020e2e:	60f8      	str	r0, [r7, #12]
 8020e30:	460b      	mov	r3, r1
 8020e32:	607a      	str	r2, [r7, #4]
 8020e34:	817b      	strh	r3, [r7, #10]
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 8020e36:	8979      	ldrh	r1, [r7, #10]
 8020e38:	4b04      	ldr	r3, [pc, #16]	; (8020e4c <lv_style_set_prop+0x24>)
 8020e3a:	687a      	ldr	r2, [r7, #4]
 8020e3c:	68f8      	ldr	r0, [r7, #12]
 8020e3e:	f000 f9a5 	bl	802118c <lv_style_set_prop_internal>
}
 8020e42:	bf00      	nop
 8020e44:	3710      	adds	r7, #16
 8020e46:	46bd      	mov	sp, r7
 8020e48:	bd80      	pop	{r7, pc}
 8020e4a:	bf00      	nop
 8020e4c:	08021165 	.word	0x08021165

08020e50 <lv_style_get_prop>:
{
    lv_style_set_prop_internal(style, prop | meta, null_style_value, lv_style_set_prop_meta_helper);
}

lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 8020e50:	b580      	push	{r7, lr}
 8020e52:	b084      	sub	sp, #16
 8020e54:	af00      	add	r7, sp, #0
 8020e56:	60f8      	str	r0, [r7, #12]
 8020e58:	460b      	mov	r3, r1
 8020e5a:	607a      	str	r2, [r7, #4]
 8020e5c:	817b      	strh	r3, [r7, #10]
    return lv_style_get_prop_inlined(style, prop, value);
 8020e5e:	897b      	ldrh	r3, [r7, #10]
 8020e60:	687a      	ldr	r2, [r7, #4]
 8020e62:	4619      	mov	r1, r3
 8020e64:	68f8      	ldr	r0, [r7, #12]
 8020e66:	f7ff fe08 	bl	8020a7a <lv_style_get_prop_inlined>
 8020e6a:	4603      	mov	r3, r0
}
 8020e6c:	4618      	mov	r0, r3
 8020e6e:	3710      	adds	r7, #16
 8020e70:	46bd      	mov	sp, r7
 8020e72:	bd80      	pop	{r7, pc}

08020e74 <lv_style_prop_get_default>:
    LV_UNUSED(user_data);
#endif
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
 8020e74:	b580      	push	{r7, lr}
 8020e76:	b084      	sub	sp, #16
 8020e78:	af00      	add	r7, sp, #0
 8020e7a:	4603      	mov	r3, r0
 8020e7c:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value;
    switch(prop) {
 8020e7e:	88fb      	ldrh	r3, [r7, #6]
 8020e80:	3b03      	subs	r3, #3
 8020e82:	2b69      	cmp	r3, #105	; 0x69
 8020e84:	f200 80f4 	bhi.w	8021070 <lv_style_prop_get_default+0x1fc>
 8020e88:	a201      	add	r2, pc, #4	; (adr r2, 8020e90 <lv_style_prop_get_default+0x1c>)
 8020e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e8e:	bf00      	nop
 8020e90:	08021069 	.word	0x08021069
 8020e94:	08021071 	.word	0x08021071
 8020e98:	08021071 	.word	0x08021071
 8020e9c:	08021069 	.word	0x08021069
 8020ea0:	08021071 	.word	0x08021071
 8020ea4:	08021071 	.word	0x08021071
 8020ea8:	08021071 	.word	0x08021071
 8020eac:	08021071 	.word	0x08021071
 8020eb0:	08021071 	.word	0x08021071
 8020eb4:	08021071 	.word	0x08021071
 8020eb8:	08021071 	.word	0x08021071
 8020ebc:	08021071 	.word	0x08021071
 8020ec0:	08021071 	.word	0x08021071
 8020ec4:	08021071 	.word	0x08021071
 8020ec8:	08021071 	.word	0x08021071
 8020ecc:	08021071 	.word	0x08021071
 8020ed0:	08021071 	.word	0x08021071
 8020ed4:	08021071 	.word	0x08021071
 8020ed8:	08021071 	.word	0x08021071
 8020edc:	08021071 	.word	0x08021071
 8020ee0:	08021071 	.word	0x08021071
 8020ee4:	08021071 	.word	0x08021071
 8020ee8:	08021071 	.word	0x08021071
 8020eec:	08021071 	.word	0x08021071
 8020ef0:	08021071 	.word	0x08021071
 8020ef4:	08021071 	.word	0x08021071
 8020ef8:	08021071 	.word	0x08021071
 8020efc:	08021071 	.word	0x08021071
 8020f00:	08021071 	.word	0x08021071
 8020f04:	08021041 	.word	0x08021041
 8020f08:	08021071 	.word	0x08021071
 8020f0c:	08021049 	.word	0x08021049
 8020f10:	08021071 	.word	0x08021071
 8020f14:	08021071 	.word	0x08021071
 8020f18:	08021057 	.word	0x08021057
 8020f1c:	08021071 	.word	0x08021071
 8020f20:	08021071 	.word	0x08021071
 8020f24:	08021071 	.word	0x08021071
 8020f28:	08021051 	.word	0x08021051
 8020f2c:	08021071 	.word	0x08021071
 8020f30:	08021071 	.word	0x08021071
 8020f34:	08021071 	.word	0x08021071
 8020f38:	08021071 	.word	0x08021071
 8020f3c:	08021071 	.word	0x08021071
 8020f40:	08021071 	.word	0x08021071
 8020f44:	08021049 	.word	0x08021049
 8020f48:	08021051 	.word	0x08021051
 8020f4c:	08021071 	.word	0x08021071
 8020f50:	0802105d 	.word	0x0802105d
 8020f54:	08021071 	.word	0x08021071
 8020f58:	08021071 	.word	0x08021071
 8020f5c:	08021049 	.word	0x08021049
 8020f60:	08021051 	.word	0x08021051
 8020f64:	08021071 	.word	0x08021071
 8020f68:	08021071 	.word	0x08021071
 8020f6c:	08021071 	.word	0x08021071
 8020f70:	08021071 	.word	0x08021071
 8020f74:	08021071 	.word	0x08021071
 8020f78:	08021071 	.word	0x08021071
 8020f7c:	08021071 	.word	0x08021071
 8020f80:	08021071 	.word	0x08021071
 8020f84:	08021071 	.word	0x08021071
 8020f88:	08021071 	.word	0x08021071
 8020f8c:	08021071 	.word	0x08021071
 8020f90:	08021071 	.word	0x08021071
 8020f94:	08021049 	.word	0x08021049
 8020f98:	08021051 	.word	0x08021051
 8020f9c:	08021051 	.word	0x08021051
 8020fa0:	08021049 	.word	0x08021049
 8020fa4:	08021071 	.word	0x08021071
 8020fa8:	08021071 	.word	0x08021071
 8020fac:	08021071 	.word	0x08021071
 8020fb0:	08021071 	.word	0x08021071
 8020fb4:	08021071 	.word	0x08021071
 8020fb8:	08021049 	.word	0x08021049
 8020fbc:	08021051 	.word	0x08021051
 8020fc0:	08021071 	.word	0x08021071
 8020fc4:	08021071 	.word	0x08021071
 8020fc8:	08021071 	.word	0x08021071
 8020fcc:	08021049 	.word	0x08021049
 8020fd0:	08021051 	.word	0x08021051
 8020fd4:	08021071 	.word	0x08021071
 8020fd8:	08021049 	.word	0x08021049
 8020fdc:	08021051 	.word	0x08021051
 8020fe0:	08021063 	.word	0x08021063
 8020fe4:	08021071 	.word	0x08021071
 8020fe8:	08021071 	.word	0x08021071
 8020fec:	08021071 	.word	0x08021071
 8020ff0:	08021071 	.word	0x08021071
 8020ff4:	08021071 	.word	0x08021071
 8020ff8:	08021071 	.word	0x08021071
 8020ffc:	08021071 	.word	0x08021071
 8021000:	08021071 	.word	0x08021071
 8021004:	08021051 	.word	0x08021051
 8021008:	08021071 	.word	0x08021071
 802100c:	08021071 	.word	0x08021071
 8021010:	08021071 	.word	0x08021071
 8021014:	08021071 	.word	0x08021071
 8021018:	08021071 	.word	0x08021071
 802101c:	08021071 	.word	0x08021071
 8021020:	08021071 	.word	0x08021071
 8021024:	08021071 	.word	0x08021071
 8021028:	08021071 	.word	0x08021071
 802102c:	08021071 	.word	0x08021071
 8021030:	08021071 	.word	0x08021071
 8021034:	08021039 	.word	0x08021039
        case LV_STYLE_TRANSFORM_ZOOM:
            value.num = LV_IMG_ZOOM_NONE;
 8021038:	f44f 7380 	mov.w	r3, #256	; 0x100
 802103c:	60fb      	str	r3, [r7, #12]
            break;
 802103e:	e01c      	b.n	802107a <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_COLOR:
            value.color = lv_color_white();
 8021040:	f7ff fd07 	bl	8020a52 <lv_color_white>
 8021044:	7338      	strb	r0, [r7, #12]
            break;
 8021046:	e018      	b.n	802107a <lv_style_prop_get_default+0x206>
        case LV_STYLE_OUTLINE_COLOR:
        case LV_STYLE_ARC_COLOR:
        case LV_STYLE_LINE_COLOR:
        case LV_STYLE_TEXT_COLOR:
        case LV_STYLE_IMG_RECOLOR:
            value.color = lv_color_black();
 8021048:	f7ff fd0d 	bl	8020a66 <lv_color_black>
 802104c:	7338      	strb	r0, [r7, #12]
            break;
 802104e:	e014      	b.n	802107a <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 8021050:	23ff      	movs	r3, #255	; 0xff
 8021052:	60fb      	str	r3, [r7, #12]
            break;
 8021054:	e011      	b.n	802107a <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_GRAD_STOP:
            value.num = 255;
 8021056:	23ff      	movs	r3, #255	; 0xff
 8021058:	60fb      	str	r3, [r7, #12]
            break;
 802105a:	e00e      	b.n	802107a <lv_style_prop_get_default+0x206>
        case LV_STYLE_BORDER_SIDE:
            value.num = LV_BORDER_SIDE_FULL;
 802105c:	230f      	movs	r3, #15
 802105e:	60fb      	str	r3, [r7, #12]
            break;
 8021060:	e00b      	b.n	802107a <lv_style_prop_get_default+0x206>
        case LV_STYLE_TEXT_FONT:
            value.ptr = LV_FONT_DEFAULT;
 8021062:	4b08      	ldr	r3, [pc, #32]	; (8021084 <lv_style_prop_get_default+0x210>)
 8021064:	60fb      	str	r3, [r7, #12]
            break;
 8021066:	e008      	b.n	802107a <lv_style_prop_get_default+0x206>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
 8021068:	f641 73ff 	movw	r3, #8191	; 0x1fff
 802106c:	60fb      	str	r3, [r7, #12]
            break;
 802106e:	e004      	b.n	802107a <lv_style_prop_get_default+0x206>
        default:
            value.ptr = NULL;
 8021070:	2300      	movs	r3, #0
 8021072:	60fb      	str	r3, [r7, #12]
            value.num = 0;
 8021074:	2300      	movs	r3, #0
 8021076:	60fb      	str	r3, [r7, #12]
            break;
 8021078:	bf00      	nop
    }

    return value;
 802107a:	68fb      	ldr	r3, [r7, #12]
}
 802107c:	4618      	mov	r0, r3
 802107e:	3710      	adds	r7, #16
 8021080:	46bd      	mov	sp, r7
 8021082:	bd80      	pop	{r7, pc}
 8021084:	080262ec 	.word	0x080262ec

08021088 <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
 8021088:	b480      	push	{r7}
 802108a:	b083      	sub	sp, #12
 802108c:	af00      	add	r7, sp, #0
 802108e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	2b00      	cmp	r3, #0
 8021094:	d100      	bne.n	8021098 <lv_style_is_empty+0x10>
 8021096:	e7fe      	b.n	8021096 <lv_style_is_empty+0xe>
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	681b      	ldr	r3, [r3, #0]
 802109c:	4a08      	ldr	r2, [pc, #32]	; (80210c0 <lv_style_is_empty+0x38>)
 802109e:	4293      	cmp	r3, r2
 80210a0:	d000      	beq.n	80210a4 <lv_style_is_empty+0x1c>
 80210a2:	e7fe      	b.n	80210a2 <lv_style_is_empty+0x1a>

    return style->prop_cnt == 0 ? true : false;
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	7adb      	ldrb	r3, [r3, #11]
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	bf0c      	ite	eq
 80210ac:	2301      	moveq	r3, #1
 80210ae:	2300      	movne	r3, #0
 80210b0:	b2db      	uxtb	r3, r3
}
 80210b2:	4618      	mov	r0, r3
 80210b4:	370c      	adds	r7, #12
 80210b6:	46bd      	mov	sp, r7
 80210b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210bc:	4770      	bx	lr
 80210be:	bf00      	nop
 80210c0:	aabbccdd 	.word	0xaabbccdd

080210c4 <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
 80210c4:	b480      	push	{r7}
 80210c6:	b085      	sub	sp, #20
 80210c8:	af00      	add	r7, sp, #0
 80210ca:	4603      	mov	r3, r0
 80210cc:	80fb      	strh	r3, [r7, #6]
    uint16_t group = (prop & 0x1FF) >> 4;
 80210ce:	88fb      	ldrh	r3, [r7, #6]
 80210d0:	111b      	asrs	r3, r3, #4
 80210d2:	b29b      	uxth	r3, r3
 80210d4:	f003 031f 	and.w	r3, r3, #31
 80210d8:	81fb      	strh	r3, [r7, #14]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80210da:	89fb      	ldrh	r3, [r7, #14]
 80210dc:	2b07      	cmp	r3, #7
 80210de:	d901      	bls.n	80210e4 <_lv_style_get_prop_group+0x20>
 80210e0:	2307      	movs	r3, #7
 80210e2:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)group;
 80210e4:	89fb      	ldrh	r3, [r7, #14]
 80210e6:	b2db      	uxtb	r3, r3
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	3714      	adds	r7, #20
 80210ec:	46bd      	mov	sp, r7
 80210ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210f2:	4770      	bx	lr

080210f4 <_lv_style_prop_lookup_flags>:

uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop)
{
 80210f4:	b480      	push	{r7}
 80210f6:	b083      	sub	sp, #12
 80210f8:	af00      	add	r7, sp, #0
 80210fa:	4603      	mov	r3, r0
 80210fc:	80fb      	strh	r3, [r7, #6]
    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    extern uint32_t _lv_style_custom_prop_flag_lookup_table_size;
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 80210fe:	88fb      	ldrh	r3, [r7, #6]
 8021100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021104:	4293      	cmp	r3, r2
 8021106:	d101      	bne.n	802110c <_lv_style_prop_lookup_flags+0x18>
 8021108:	231f      	movs	r3, #31
 802110a:	e01e      	b.n	802114a <_lv_style_prop_lookup_flags+0x56>
    if(prop == LV_STYLE_PROP_INV) return 0;
 802110c:	88fb      	ldrh	r3, [r7, #6]
 802110e:	2b00      	cmp	r3, #0
 8021110:	d101      	bne.n	8021116 <_lv_style_prop_lookup_flags+0x22>
 8021112:	2300      	movs	r3, #0
 8021114:	e019      	b.n	802114a <_lv_style_prop_lookup_flags+0x56>

    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 8021116:	88fb      	ldrh	r3, [r7, #6]
 8021118:	2b6f      	cmp	r3, #111	; 0x6f
 802111a:	d803      	bhi.n	8021124 <_lv_style_prop_lookup_flags+0x30>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 802111c:	88fb      	ldrh	r3, [r7, #6]
 802111e:	4a0e      	ldr	r2, [pc, #56]	; (8021158 <_lv_style_prop_lookup_flags+0x64>)
 8021120:	5cd3      	ldrb	r3, [r2, r3]
 8021122:	e012      	b.n	802114a <_lv_style_prop_lookup_flags+0x56>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 8021124:	88fb      	ldrh	r3, [r7, #6]
 8021126:	3b70      	subs	r3, #112	; 0x70
 8021128:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 802112a:	4b0c      	ldr	r3, [pc, #48]	; (802115c <_lv_style_prop_lookup_flags+0x68>)
 802112c:	681b      	ldr	r3, [r3, #0]
 802112e:	2b00      	cmp	r3, #0
 8021130:	d00a      	beq.n	8021148 <_lv_style_prop_lookup_flags+0x54>
 8021132:	88fa      	ldrh	r2, [r7, #6]
 8021134:	4b0a      	ldr	r3, [pc, #40]	; (8021160 <_lv_style_prop_lookup_flags+0x6c>)
 8021136:	681b      	ldr	r3, [r3, #0]
 8021138:	429a      	cmp	r2, r3
 802113a:	d205      	bcs.n	8021148 <_lv_style_prop_lookup_flags+0x54>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 802113c:	4b07      	ldr	r3, [pc, #28]	; (802115c <_lv_style_prop_lookup_flags+0x68>)
 802113e:	681a      	ldr	r2, [r3, #0]
 8021140:	88fb      	ldrh	r3, [r7, #6]
 8021142:	4413      	add	r3, r2
 8021144:	781b      	ldrb	r3, [r3, #0]
 8021146:	e000      	b.n	802114a <_lv_style_prop_lookup_flags+0x56>
    return 0;
 8021148:	2300      	movs	r3, #0
}
 802114a:	4618      	mov	r0, r3
 802114c:	370c      	adds	r7, #12
 802114e:	46bd      	mov	sp, r7
 8021150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021154:	4770      	bx	lr
 8021156:	bf00      	nop
 8021158:	080263d4 	.word	0x080263d4
 802115c:	200009f0 	.word	0x200009f0
 8021160:	2000ca00 	.word	0x2000ca00

08021164 <lv_style_set_prop_helper>:
 *   STATIC FUNCTIONS
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
 8021164:	b480      	push	{r7}
 8021166:	b085      	sub	sp, #20
 8021168:	af00      	add	r7, sp, #0
 802116a:	60b9      	str	r1, [r7, #8]
 802116c:	607a      	str	r2, [r7, #4]
 802116e:	603b      	str	r3, [r7, #0]
 8021170:	4603      	mov	r3, r0
 8021172:	81fb      	strh	r3, [r7, #14]
    *prop_storage = prop;
 8021174:	687b      	ldr	r3, [r7, #4]
 8021176:	89fa      	ldrh	r2, [r7, #14]
 8021178:	801a      	strh	r2, [r3, #0]
    *value_storage = value;
 802117a:	683b      	ldr	r3, [r7, #0]
 802117c:	68ba      	ldr	r2, [r7, #8]
 802117e:	601a      	str	r2, [r3, #0]
}
 8021180:	bf00      	nop
 8021182:	3714      	adds	r7, #20
 8021184:	46bd      	mov	sp, r7
 8021186:	f85d 7b04 	ldr.w	r7, [sp], #4
 802118a:	4770      	bx	lr

0802118c <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 802118c:	b590      	push	{r4, r7, lr}
 802118e:	b095      	sub	sp, #84	; 0x54
 8021190:	af00      	add	r7, sp, #0
 8021192:	60f8      	str	r0, [r7, #12]
 8021194:	607a      	str	r2, [r7, #4]
 8021196:	603b      	str	r3, [r7, #0]
 8021198:	460b      	mov	r3, r1
 802119a:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d100      	bne.n	80211a4 <lv_style_set_prop_internal+0x18>
 80211a2:	e7fe      	b.n	80211a2 <lv_style_set_prop_internal+0x16>
 80211a4:	68fb      	ldr	r3, [r7, #12]
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	4a8b      	ldr	r2, [pc, #556]	; (80213d8 <lv_style_set_prop_internal+0x24c>)
 80211aa:	4293      	cmp	r3, r2
 80211ac:	d000      	beq.n	80211b0 <lv_style_set_prop_internal+0x24>
 80211ae:	e7fe      	b.n	80211ae <lv_style_set_prop_internal+0x22>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80211b0:	68fb      	ldr	r3, [r7, #12]
 80211b2:	891b      	ldrh	r3, [r3, #8]
 80211b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80211b8:	4293      	cmp	r3, r2
 80211ba:	f000 8104 	beq.w	80213c6 <lv_style_set_prop_internal+0x23a>
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 80211be:	897b      	ldrh	r3, [r7, #10]
 80211c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80211c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    if(style->prop_cnt > 1) {
 80211c8:	68fb      	ldr	r3, [r7, #12]
 80211ca:	7adb      	ldrb	r3, [r3, #11]
 80211cc:	2b01      	cmp	r3, #1
 80211ce:	f240 808d 	bls.w	80212ec <lv_style_set_prop_internal+0x160>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80211d2:	68fb      	ldr	r3, [r7, #12]
 80211d4:	685a      	ldr	r2, [r3, #4]
 80211d6:	68fb      	ldr	r3, [r7, #12]
 80211d8:	7adb      	ldrb	r3, [r3, #11]
 80211da:	009b      	lsls	r3, r3, #2
 80211dc:	4413      	add	r3, r2
 80211de:	633b      	str	r3, [r7, #48]	; 0x30
        uint16_t * props = (uint16_t *)tmp;
 80211e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80211e4:	68fb      	ldr	r3, [r7, #12]
 80211e6:	7adb      	ldrb	r3, [r3, #11]
 80211e8:	3b01      	subs	r3, #1
 80211ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80211ec:	e01e      	b.n	802122c <lv_style_set_prop_internal+0xa0>
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 80211ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80211f0:	005b      	lsls	r3, r3, #1
 80211f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80211f4:	4413      	add	r3, r2
 80211f6:	881b      	ldrh	r3, [r3, #0]
 80211f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80211fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8021200:	429a      	cmp	r2, r3
 8021202:	d110      	bne.n	8021226 <lv_style_set_prop_internal+0x9a>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8021204:	68fb      	ldr	r3, [r7, #12]
 8021206:	685b      	ldr	r3, [r3, #4]
 8021208:	61fb      	str	r3, [r7, #28]
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 802120a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802120c:	005b      	lsls	r3, r3, #1
 802120e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021210:	18d1      	adds	r1, r2, r3
 8021212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021214:	009b      	lsls	r3, r3, #2
 8021216:	69fa      	ldr	r2, [r7, #28]
 8021218:	4413      	add	r3, r2
 802121a:	8978      	ldrh	r0, [r7, #10]
 802121c:	683c      	ldr	r4, [r7, #0]
 802121e:	460a      	mov	r2, r1
 8021220:	6879      	ldr	r1, [r7, #4]
 8021222:	47a0      	blx	r4
                return;
 8021224:	e0d4      	b.n	80213d0 <lv_style_set_prop_internal+0x244>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8021226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021228:	3b01      	subs	r3, #1
 802122a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802122c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802122e:	2b00      	cmp	r3, #0
 8021230:	dadd      	bge.n	80211ee <lv_style_set_prop_internal+0x62>
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8021232:	68fb      	ldr	r3, [r7, #12]
 8021234:	7adb      	ldrb	r3, [r3, #11]
 8021236:	3301      	adds	r3, #1
 8021238:	461a      	mov	r2, r3
 802123a:	4613      	mov	r3, r2
 802123c:	005b      	lsls	r3, r3, #1
 802123e:	4413      	add	r3, r2
 8021240:	005b      	lsls	r3, r3, #1
 8021242:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8021244:	68fb      	ldr	r3, [r7, #12]
 8021246:	685b      	ldr	r3, [r3, #4]
 8021248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802124a:	4618      	mov	r0, r3
 802124c:	f7fe ff04 	bl	8020058 <lv_mem_realloc>
 8021250:	6278      	str	r0, [r7, #36]	; 0x24
        if(values_and_props == NULL) return;
 8021252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021254:	2b00      	cmp	r3, #0
 8021256:	f000 80b8 	beq.w	80213ca <lv_style_set_prop_internal+0x23e>
        style->v_p.values_and_props = values_and_props;
 802125a:	68fb      	ldr	r3, [r7, #12]
 802125c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802125e:	605a      	str	r2, [r3, #4]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8021260:	68fb      	ldr	r3, [r7, #12]
 8021262:	7adb      	ldrb	r3, [r3, #11]
 8021264:	009b      	lsls	r3, r3, #2
 8021266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021268:	4413      	add	r3, r2
 802126a:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 802126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802126e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8021270:	68fb      	ldr	r3, [r7, #12]
 8021272:	7adb      	ldrb	r3, [r3, #11]
 8021274:	3b01      	subs	r3, #1
 8021276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021278:	e00d      	b.n	8021296 <lv_style_set_prop_internal+0x10a>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 802127a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802127c:	005b      	lsls	r3, r3, #1
 802127e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021280:	441a      	add	r2, r3
 8021282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021284:	3302      	adds	r3, #2
 8021286:	005b      	lsls	r3, r3, #1
 8021288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802128a:	440b      	add	r3, r1
 802128c:	8812      	ldrh	r2, [r2, #0]
 802128e:	801a      	strh	r2, [r3, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8021290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021292:	3b01      	subs	r3, #1
 8021294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021298:	2b00      	cmp	r3, #0
 802129a:	daee      	bge.n	802127a <lv_style_set_prop_internal+0xee>
        }
        style->prop_cnt++;
 802129c:	68fb      	ldr	r3, [r7, #12]
 802129e:	7adb      	ldrb	r3, [r3, #11]
 80212a0:	3301      	adds	r3, #1
 80212a2:	b2da      	uxtb	r2, r3
 80212a4:	68fb      	ldr	r3, [r7, #12]
 80212a6:	72da      	strb	r2, [r3, #11]

        /*Go to the new position wit the props*/
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80212a8:	68fb      	ldr	r3, [r7, #12]
 80212aa:	7adb      	ldrb	r3, [r3, #11]
 80212ac:	009b      	lsls	r3, r3, #2
 80212ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80212b0:	4413      	add	r3, r2
 80212b2:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 80212b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 80212b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212ba:	623b      	str	r3, [r7, #32]

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	7adb      	ldrb	r3, [r3, #11]
 80212c0:	461a      	mov	r2, r3
 80212c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80212c6:	4413      	add	r3, r2
 80212c8:	005b      	lsls	r3, r3, #1
 80212ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80212cc:	18d1      	adds	r1, r2, r3
 80212ce:	68fb      	ldr	r3, [r7, #12]
 80212d0:	7adb      	ldrb	r3, [r3, #11]
 80212d2:	461a      	mov	r2, r3
 80212d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80212d8:	4413      	add	r3, r2
 80212da:	009b      	lsls	r3, r3, #2
 80212dc:	6a3a      	ldr	r2, [r7, #32]
 80212de:	4413      	add	r3, r2
 80212e0:	8978      	ldrh	r0, [r7, #10]
 80212e2:	683c      	ldr	r4, [r7, #0]
 80212e4:	460a      	mov	r2, r1
 80212e6:	6879      	ldr	r1, [r7, #4]
 80212e8:	47a0      	blx	r4
 80212ea:	e057      	b.n	802139c <lv_style_set_prop_internal+0x210>
    }
    else if(style->prop_cnt == 1) {
 80212ec:	68fb      	ldr	r3, [r7, #12]
 80212ee:	7adb      	ldrb	r3, [r3, #11]
 80212f0:	2b01      	cmp	r3, #1
 80212f2:	d147      	bne.n	8021384 <lv_style_set_prop_internal+0x1f8>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 80212f4:	68fb      	ldr	r3, [r7, #12]
 80212f6:	891b      	ldrh	r3, [r3, #8]
 80212f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80212fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8021300:	429a      	cmp	r2, r3
 8021302:	d109      	bne.n	8021318 <lv_style_set_prop_internal+0x18c>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8021304:	68fb      	ldr	r3, [r7, #12]
 8021306:	f103 0208 	add.w	r2, r3, #8
 802130a:	68fb      	ldr	r3, [r7, #12]
 802130c:	3304      	adds	r3, #4
 802130e:	8978      	ldrh	r0, [r7, #10]
 8021310:	683c      	ldr	r4, [r7, #0]
 8021312:	6879      	ldr	r1, [r7, #4]
 8021314:	47a0      	blx	r4
            return;
 8021316:	e05b      	b.n	80213d0 <lv_style_set_prop_internal+0x244>
        }
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8021318:	68fb      	ldr	r3, [r7, #12]
 802131a:	7adb      	ldrb	r3, [r3, #11]
 802131c:	3301      	adds	r3, #1
 802131e:	461a      	mov	r2, r3
 8021320:	4613      	mov	r3, r2
 8021322:	005b      	lsls	r3, r3, #1
 8021324:	4413      	add	r3, r2
 8021326:	005b      	lsls	r3, r3, #1
 8021328:	647b      	str	r3, [r7, #68]	; 0x44
        uint8_t * values_and_props = lv_mem_alloc(size);
 802132a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 802132c:	f7fe fe36 	bl	801ff9c <lv_mem_alloc>
 8021330:	6438      	str	r0, [r7, #64]	; 0x40
        if(values_and_props == NULL) return;
 8021332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021334:	2b00      	cmp	r3, #0
 8021336:	d04a      	beq.n	80213ce <lv_style_set_prop_internal+0x242>
        lv_style_value_t value_tmp = style->v_p.value1;
 8021338:	68fb      	ldr	r3, [r7, #12]
 802133a:	685b      	ldr	r3, [r3, #4]
 802133c:	617b      	str	r3, [r7, #20]
        style->v_p.values_and_props = values_and_props;
 802133e:	68fb      	ldr	r3, [r7, #12]
 8021340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021342:	605a      	str	r2, [r3, #4]
        style->prop_cnt++;
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	7adb      	ldrb	r3, [r3, #11]
 8021348:	3301      	adds	r3, #1
 802134a:	b2da      	uxtb	r2, r3
 802134c:	68fb      	ldr	r3, [r7, #12]
 802134e:	72da      	strb	r2, [r3, #11]

        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8021350:	68fb      	ldr	r3, [r7, #12]
 8021352:	7adb      	ldrb	r3, [r3, #11]
 8021354:	009b      	lsls	r3, r3, #2
 8021356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021358:	4413      	add	r3, r2
 802135a:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint16_t * props = (uint16_t *)tmp;
 802135c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802135e:	63bb      	str	r3, [r7, #56]	; 0x38
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 8021360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021362:	637b      	str	r3, [r7, #52]	; 0x34
        props[0] = style->prop1;
 8021364:	68fb      	ldr	r3, [r7, #12]
 8021366:	891a      	ldrh	r2, [r3, #8]
 8021368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802136a:	801a      	strh	r2, [r3, #0]
        values[0] = value_tmp;
 802136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802136e:	697a      	ldr	r2, [r7, #20]
 8021370:	601a      	str	r2, [r3, #0]
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8021372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021374:	1c9a      	adds	r2, r3, #2
 8021376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021378:	3304      	adds	r3, #4
 802137a:	8978      	ldrh	r0, [r7, #10]
 802137c:	683c      	ldr	r4, [r7, #0]
 802137e:	6879      	ldr	r1, [r7, #4]
 8021380:	47a0      	blx	r4
 8021382:	e00b      	b.n	802139c <lv_style_set_prop_internal+0x210>
    }
    else {
        style->prop_cnt = 1;
 8021384:	68fb      	ldr	r3, [r7, #12]
 8021386:	2201      	movs	r2, #1
 8021388:	72da      	strb	r2, [r3, #11]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 802138a:	68fb      	ldr	r3, [r7, #12]
 802138c:	f103 0208 	add.w	r2, r3, #8
 8021390:	68fb      	ldr	r3, [r7, #12]
 8021392:	3304      	adds	r3, #4
 8021394:	8978      	ldrh	r0, [r7, #10]
 8021396:	683c      	ldr	r4, [r7, #0]
 8021398:	6879      	ldr	r1, [r7, #4]
 802139a:	47a0      	blx	r4
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 802139c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80213a0:	4618      	mov	r0, r3
 80213a2:	f7ff fe8f 	bl	80210c4 <_lv_style_get_prop_group>
 80213a6:	4603      	mov	r3, r0
 80213a8:	76fb      	strb	r3, [r7, #27]
    style->has_group |= 1 << group;
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	7a9b      	ldrb	r3, [r3, #10]
 80213ae:	b25a      	sxtb	r2, r3
 80213b0:	7efb      	ldrb	r3, [r7, #27]
 80213b2:	2101      	movs	r1, #1
 80213b4:	fa01 f303 	lsl.w	r3, r1, r3
 80213b8:	b25b      	sxtb	r3, r3
 80213ba:	4313      	orrs	r3, r2
 80213bc:	b25b      	sxtb	r3, r3
 80213be:	b2da      	uxtb	r2, r3
 80213c0:	68fb      	ldr	r3, [r7, #12]
 80213c2:	729a      	strb	r2, [r3, #10]
 80213c4:	e004      	b.n	80213d0 <lv_style_set_prop_internal+0x244>
        return;
 80213c6:	bf00      	nop
 80213c8:	e002      	b.n	80213d0 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 80213ca:	bf00      	nop
 80213cc:	e000      	b.n	80213d0 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 80213ce:	bf00      	nop
}
 80213d0:	3754      	adds	r7, #84	; 0x54
 80213d2:	46bd      	mov	sp, r7
 80213d4:	bd90      	pop	{r4, r7, pc}
 80213d6:	bf00      	nop
 80213d8:	aabbccdd 	.word	0xaabbccdd

080213dc <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 80213dc:	b580      	push	{r7, lr}
 80213de:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 80213e0:	2118      	movs	r1, #24
 80213e2:	4804      	ldr	r0, [pc, #16]	; (80213f4 <_lv_timer_core_init+0x18>)
 80213e4:	f7fe fb3d 	bl	801fa62 <_lv_ll_init>

    /*Initially enable the lv_timer handling*/
    lv_timer_enable(true);
 80213e8:	2001      	movs	r0, #1
 80213ea:	f000 f86d 	bl	80214c8 <lv_timer_enable>
}
 80213ee:	bf00      	nop
 80213f0:	bd80      	pop	{r7, pc}
 80213f2:	bf00      	nop
 80213f4:	200007ec 	.word	0x200007ec

080213f8 <lv_timer_create>:
 * @param period call period in ms unit
 * @param user_data custom parameter
 * @return pointer to the new timer
 */
lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * user_data)
{
 80213f8:	b580      	push	{r7, lr}
 80213fa:	b086      	sub	sp, #24
 80213fc:	af00      	add	r7, sp, #0
 80213fe:	60f8      	str	r0, [r7, #12]
 8021400:	60b9      	str	r1, [r7, #8]
 8021402:	607a      	str	r2, [r7, #4]
    lv_timer_t * new_timer = NULL;
 8021404:	2300      	movs	r3, #0
 8021406:	617b      	str	r3, [r7, #20]

    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8021408:	4815      	ldr	r0, [pc, #84]	; (8021460 <lv_timer_create+0x68>)
 802140a:	f7fe fb43 	bl	801fa94 <_lv_ll_ins_head>
 802140e:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(new_timer);
 8021410:	697b      	ldr	r3, [r7, #20]
 8021412:	2b00      	cmp	r3, #0
 8021414:	d100      	bne.n	8021418 <lv_timer_create+0x20>
 8021416:	e7fe      	b.n	8021416 <lv_timer_create+0x1e>
    if(new_timer == NULL) return NULL;
 8021418:	697b      	ldr	r3, [r7, #20]
 802141a:	2b00      	cmp	r3, #0
 802141c:	d101      	bne.n	8021422 <lv_timer_create+0x2a>
 802141e:	2300      	movs	r3, #0
 8021420:	e01a      	b.n	8021458 <lv_timer_create+0x60>

    new_timer->period = period;
 8021422:	697b      	ldr	r3, [r7, #20]
 8021424:	68ba      	ldr	r2, [r7, #8]
 8021426:	601a      	str	r2, [r3, #0]
    new_timer->timer_cb = timer_xcb;
 8021428:	697b      	ldr	r3, [r7, #20]
 802142a:	68fa      	ldr	r2, [r7, #12]
 802142c:	609a      	str	r2, [r3, #8]
    new_timer->repeat_count = -1;
 802142e:	697b      	ldr	r3, [r7, #20]
 8021430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021434:	611a      	str	r2, [r3, #16]
    new_timer->paused = 0;
 8021436:	697a      	ldr	r2, [r7, #20]
 8021438:	7d13      	ldrb	r3, [r2, #20]
 802143a:	f36f 0300 	bfc	r3, #0, #1
 802143e:	7513      	strb	r3, [r2, #20]
    new_timer->last_run = lv_tick_get();
 8021440:	f7fc fe76 	bl	801e130 <lv_tick_get>
 8021444:	4602      	mov	r2, r0
 8021446:	697b      	ldr	r3, [r7, #20]
 8021448:	605a      	str	r2, [r3, #4]
    new_timer->user_data = user_data;
 802144a:	697b      	ldr	r3, [r7, #20]
 802144c:	687a      	ldr	r2, [r7, #4]
 802144e:	60da      	str	r2, [r3, #12]

    timer_created = true;
 8021450:	4b04      	ldr	r3, [pc, #16]	; (8021464 <lv_timer_create+0x6c>)
 8021452:	2201      	movs	r2, #1
 8021454:	701a      	strb	r2, [r3, #0]

    return new_timer;
 8021456:	697b      	ldr	r3, [r7, #20]
}
 8021458:	4618      	mov	r0, r3
 802145a:	3718      	adds	r7, #24
 802145c:	46bd      	mov	sp, r7
 802145e:	bd80      	pop	{r7, pc}
 8021460:	200007ec 	.word	0x200007ec
 8021464:	2000ca05 	.word	0x2000ca05

08021468 <lv_timer_pause>:
/**
 * Pause/resume a timer.
 * @param timer pointer to an lv_timer
 */
void lv_timer_pause(lv_timer_t * timer)
{
 8021468:	b480      	push	{r7}
 802146a:	b083      	sub	sp, #12
 802146c:	af00      	add	r7, sp, #0
 802146e:	6078      	str	r0, [r7, #4]
    timer->paused = true;
 8021470:	687a      	ldr	r2, [r7, #4]
 8021472:	7d13      	ldrb	r3, [r2, #20]
 8021474:	f043 0301 	orr.w	r3, r3, #1
 8021478:	7513      	strb	r3, [r2, #20]
}
 802147a:	bf00      	nop
 802147c:	370c      	adds	r7, #12
 802147e:	46bd      	mov	sp, r7
 8021480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021484:	4770      	bx	lr

08021486 <lv_timer_resume>:

void lv_timer_resume(lv_timer_t * timer)
{
 8021486:	b480      	push	{r7}
 8021488:	b083      	sub	sp, #12
 802148a:	af00      	add	r7, sp, #0
 802148c:	6078      	str	r0, [r7, #4]
    timer->paused = false;
 802148e:	687a      	ldr	r2, [r7, #4]
 8021490:	7d13      	ldrb	r3, [r2, #20]
 8021492:	f36f 0300 	bfc	r3, #0, #1
 8021496:	7513      	strb	r3, [r2, #20]
}
 8021498:	bf00      	nop
 802149a:	370c      	adds	r7, #12
 802149c:	46bd      	mov	sp, r7
 802149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214a2:	4770      	bx	lr

080214a4 <lv_timer_ready>:
/**
 * Make a lv_timer ready. It will not wait its period.
 * @param timer pointer to a lv_timer.
 */
void lv_timer_ready(lv_timer_t * timer)
{
 80214a4:	b580      	push	{r7, lr}
 80214a6:	b082      	sub	sp, #8
 80214a8:	af00      	add	r7, sp, #0
 80214aa:	6078      	str	r0, [r7, #4]
    timer->last_run = lv_tick_get() - timer->period - 1;
 80214ac:	f7fc fe40 	bl	801e130 <lv_tick_get>
 80214b0:	4602      	mov	r2, r0
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	681b      	ldr	r3, [r3, #0]
 80214b6:	1ad3      	subs	r3, r2, r3
 80214b8:	1e5a      	subs	r2, r3, #1
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	605a      	str	r2, [r3, #4]
}
 80214be:	bf00      	nop
 80214c0:	3708      	adds	r7, #8
 80214c2:	46bd      	mov	sp, r7
 80214c4:	bd80      	pop	{r7, pc}
	...

080214c8 <lv_timer_enable>:
/**
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
 80214c8:	b480      	push	{r7}
 80214ca:	b083      	sub	sp, #12
 80214cc:	af00      	add	r7, sp, #0
 80214ce:	4603      	mov	r3, r0
 80214d0:	71fb      	strb	r3, [r7, #7]
    lv_timer_run = en;
 80214d2:	4a04      	ldr	r2, [pc, #16]	; (80214e4 <lv_timer_enable+0x1c>)
 80214d4:	79fb      	ldrb	r3, [r7, #7]
 80214d6:	7013      	strb	r3, [r2, #0]
}
 80214d8:	bf00      	nop
 80214da:	370c      	adds	r7, #12
 80214dc:	46bd      	mov	sp, r7
 80214de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214e2:	4770      	bx	lr
 80214e4:	2000ca04 	.word	0x2000ca04

080214e8 <tlsf_ffs>:
}

#else

tlsf_decl int tlsf_ffs(unsigned int word)
{
 80214e8:	b480      	push	{r7}
 80214ea:	b083      	sub	sp, #12
 80214ec:	af00      	add	r7, sp, #0
 80214ee:	6078      	str	r0, [r7, #4]
    return __builtin_ffs(word) - 1;
 80214f0:	687b      	ldr	r3, [r7, #4]
 80214f2:	fa93 f2a3 	rbit	r2, r3
 80214f6:	fab2 f282 	clz	r2, r2
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	d101      	bne.n	8021502 <tlsf_ffs+0x1a>
 80214fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021502:	1c53      	adds	r3, r2, #1
 8021504:	3b01      	subs	r3, #1
}
 8021506:	4618      	mov	r0, r3
 8021508:	370c      	adds	r7, #12
 802150a:	46bd      	mov	sp, r7
 802150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021510:	4770      	bx	lr

08021512 <tlsf_fls>:

#endif

tlsf_decl int tlsf_fls(unsigned int word)
{
 8021512:	b480      	push	{r7}
 8021514:	b085      	sub	sp, #20
 8021516:	af00      	add	r7, sp, #0
 8021518:	6078      	str	r0, [r7, #4]
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	2b00      	cmp	r3, #0
 802151e:	d005      	beq.n	802152c <tlsf_fls+0x1a>
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	fab3 f383 	clz	r3, r3
 8021526:	f1c3 0320 	rsb	r3, r3, #32
 802152a:	e000      	b.n	802152e <tlsf_fls+0x1c>
 802152c:	2300      	movs	r3, #0
 802152e:	60fb      	str	r3, [r7, #12]
    return bit - 1;
 8021530:	68fb      	ldr	r3, [r7, #12]
 8021532:	3b01      	subs	r3, #1
}
 8021534:	4618      	mov	r0, r3
 8021536:	3714      	adds	r7, #20
 8021538:	46bd      	mov	sp, r7
 802153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802153e:	4770      	bx	lr

08021540 <block_size>:
/*
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
 8021540:	b480      	push	{r7}
 8021542:	b083      	sub	sp, #12
 8021544:	af00      	add	r7, sp, #0
 8021546:	6078      	str	r0, [r7, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	685a      	ldr	r2, [r3, #4]
 802154c:	2101      	movs	r1, #1
 802154e:	2302      	movs	r3, #2
 8021550:	430b      	orrs	r3, r1
 8021552:	43db      	mvns	r3, r3
 8021554:	4013      	ands	r3, r2
}
 8021556:	4618      	mov	r0, r3
 8021558:	370c      	adds	r7, #12
 802155a:	46bd      	mov	sp, r7
 802155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021560:	4770      	bx	lr

08021562 <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
 8021562:	b480      	push	{r7}
 8021564:	b085      	sub	sp, #20
 8021566:	af00      	add	r7, sp, #0
 8021568:	6078      	str	r0, [r7, #4]
 802156a:	6039      	str	r1, [r7, #0]
    const size_t oldsize = block->size;
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	685b      	ldr	r3, [r3, #4]
 8021570:	60fb      	str	r3, [r7, #12]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8021572:	2201      	movs	r2, #1
 8021574:	2302      	movs	r3, #2
 8021576:	431a      	orrs	r2, r3
 8021578:	68fb      	ldr	r3, [r7, #12]
 802157a:	401a      	ands	r2, r3
 802157c:	683b      	ldr	r3, [r7, #0]
 802157e:	431a      	orrs	r2, r3
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	605a      	str	r2, [r3, #4]
}
 8021584:	bf00      	nop
 8021586:	3714      	adds	r7, #20
 8021588:	46bd      	mov	sp, r7
 802158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802158e:	4770      	bx	lr

08021590 <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 8021590:	b580      	push	{r7, lr}
 8021592:	b082      	sub	sp, #8
 8021594:	af00      	add	r7, sp, #0
 8021596:	6078      	str	r0, [r7, #4]
    return block_size(block) == 0;
 8021598:	6878      	ldr	r0, [r7, #4]
 802159a:	f7ff ffd1 	bl	8021540 <block_size>
 802159e:	4603      	mov	r3, r0
 80215a0:	2b00      	cmp	r3, #0
 80215a2:	bf0c      	ite	eq
 80215a4:	2301      	moveq	r3, #1
 80215a6:	2300      	movne	r3, #0
 80215a8:	b2db      	uxtb	r3, r3
}
 80215aa:	4618      	mov	r0, r3
 80215ac:	3708      	adds	r7, #8
 80215ae:	46bd      	mov	sp, r7
 80215b0:	bd80      	pop	{r7, pc}

080215b2 <block_is_free>:

static int block_is_free(const block_header_t * block)
{
 80215b2:	b480      	push	{r7}
 80215b4:	b083      	sub	sp, #12
 80215b6:	af00      	add	r7, sp, #0
 80215b8:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	685b      	ldr	r3, [r3, #4]
 80215be:	2201      	movs	r2, #1
 80215c0:	4013      	ands	r3, r2
}
 80215c2:	4618      	mov	r0, r3
 80215c4:	370c      	adds	r7, #12
 80215c6:	46bd      	mov	sp, r7
 80215c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215cc:	4770      	bx	lr

080215ce <block_set_free>:

static void block_set_free(block_header_t * block)
{
 80215ce:	b480      	push	{r7}
 80215d0:	b083      	sub	sp, #12
 80215d2:	af00      	add	r7, sp, #0
 80215d4:	6078      	str	r0, [r7, #4]
    block->size |= block_header_free_bit;
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	685b      	ldr	r3, [r3, #4]
 80215da:	2201      	movs	r2, #1
 80215dc:	431a      	orrs	r2, r3
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	605a      	str	r2, [r3, #4]
}
 80215e2:	bf00      	nop
 80215e4:	370c      	adds	r7, #12
 80215e6:	46bd      	mov	sp, r7
 80215e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ec:	4770      	bx	lr

080215ee <block_set_used>:

static void block_set_used(block_header_t * block)
{
 80215ee:	b480      	push	{r7}
 80215f0:	b083      	sub	sp, #12
 80215f2:	af00      	add	r7, sp, #0
 80215f4:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_free_bit;
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	685a      	ldr	r2, [r3, #4]
 80215fa:	2301      	movs	r3, #1
 80215fc:	43db      	mvns	r3, r3
 80215fe:	401a      	ands	r2, r3
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	605a      	str	r2, [r3, #4]
}
 8021604:	bf00      	nop
 8021606:	370c      	adds	r7, #12
 8021608:	46bd      	mov	sp, r7
 802160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802160e:	4770      	bx	lr

08021610 <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
 8021610:	b480      	push	{r7}
 8021612:	b083      	sub	sp, #12
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	685b      	ldr	r3, [r3, #4]
 802161c:	2202      	movs	r2, #2
 802161e:	4013      	ands	r3, r2
}
 8021620:	4618      	mov	r0, r3
 8021622:	370c      	adds	r7, #12
 8021624:	46bd      	mov	sp, r7
 8021626:	f85d 7b04 	ldr.w	r7, [sp], #4
 802162a:	4770      	bx	lr

0802162c <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
 802162c:	b480      	push	{r7}
 802162e:	b083      	sub	sp, #12
 8021630:	af00      	add	r7, sp, #0
 8021632:	6078      	str	r0, [r7, #4]
    block->size |= block_header_prev_free_bit;
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	685b      	ldr	r3, [r3, #4]
 8021638:	2202      	movs	r2, #2
 802163a:	431a      	orrs	r2, r3
 802163c:	687b      	ldr	r3, [r7, #4]
 802163e:	605a      	str	r2, [r3, #4]
}
 8021640:	bf00      	nop
 8021642:	370c      	adds	r7, #12
 8021644:	46bd      	mov	sp, r7
 8021646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802164a:	4770      	bx	lr

0802164c <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
 802164c:	b480      	push	{r7}
 802164e:	b083      	sub	sp, #12
 8021650:	af00      	add	r7, sp, #0
 8021652:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_prev_free_bit;
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	685a      	ldr	r2, [r3, #4]
 8021658:	2302      	movs	r3, #2
 802165a:	43db      	mvns	r3, r3
 802165c:	401a      	ands	r2, r3
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	605a      	str	r2, [r3, #4]
}
 8021662:	bf00      	nop
 8021664:	370c      	adds	r7, #12
 8021666:	46bd      	mov	sp, r7
 8021668:	f85d 7b04 	ldr.w	r7, [sp], #4
 802166c:	4770      	bx	lr

0802166e <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
 802166e:	b480      	push	{r7}
 8021670:	b083      	sub	sp, #12
 8021672:	af00      	add	r7, sp, #0
 8021674:	6078      	str	r0, [r7, #4]
    return tlsf_cast(block_header_t *,
 8021676:	2308      	movs	r3, #8
 8021678:	425b      	negs	r3, r3
 802167a:	687a      	ldr	r2, [r7, #4]
 802167c:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 802167e:	4618      	mov	r0, r3
 8021680:	370c      	adds	r7, #12
 8021682:	46bd      	mov	sp, r7
 8021684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021688:	4770      	bx	lr

0802168a <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
 802168a:	b480      	push	{r7}
 802168c:	b083      	sub	sp, #12
 802168e:	af00      	add	r7, sp, #0
 8021690:	6078      	str	r0, [r7, #4]
    return tlsf_cast(void *,
 8021692:	2208      	movs	r2, #8
 8021694:	687b      	ldr	r3, [r7, #4]
 8021696:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 8021698:	4618      	mov	r0, r3
 802169a:	370c      	adds	r7, #12
 802169c:	46bd      	mov	sp, r7
 802169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216a2:	4770      	bx	lr

080216a4 <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
 80216a4:	b480      	push	{r7}
 80216a6:	b083      	sub	sp, #12
 80216a8:	af00      	add	r7, sp, #0
 80216aa:	6078      	str	r0, [r7, #4]
 80216ac:	6039      	str	r1, [r7, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80216ae:	687a      	ldr	r2, [r7, #4]
 80216b0:	683b      	ldr	r3, [r7, #0]
 80216b2:	4413      	add	r3, r2
}
 80216b4:	4618      	mov	r0, r3
 80216b6:	370c      	adds	r7, #12
 80216b8:	46bd      	mov	sp, r7
 80216ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216be:	4770      	bx	lr

080216c0 <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 80216c0:	b580      	push	{r7, lr}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 80216c8:	6878      	ldr	r0, [r7, #4]
 80216ca:	f7ff ffa1 	bl	8021610 <block_is_prev_free>
 80216ce:	4603      	mov	r3, r0
 80216d0:	2b00      	cmp	r3, #0
 80216d2:	d100      	bne.n	80216d6 <block_prev+0x16>
 80216d4:	e7fe      	b.n	80216d4 <block_prev+0x14>
    return block->prev_phys_block;
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	681b      	ldr	r3, [r3, #0]
}
 80216da:	4618      	mov	r0, r3
 80216dc:	3708      	adds	r7, #8
 80216de:	46bd      	mov	sp, r7
 80216e0:	bd80      	pop	{r7, pc}

080216e2 <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 80216e2:	b590      	push	{r4, r7, lr}
 80216e4:	b085      	sub	sp, #20
 80216e6:	af00      	add	r7, sp, #0
 80216e8:	6078      	str	r0, [r7, #4]
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80216ea:	6878      	ldr	r0, [r7, #4]
 80216ec:	f7ff ffcd 	bl	802168a <block_to_ptr>
 80216f0:	4604      	mov	r4, r0
                                            block_size(block) - block_header_overhead);
 80216f2:	6878      	ldr	r0, [r7, #4]
 80216f4:	f7ff ff24 	bl	8021540 <block_size>
 80216f8:	4603      	mov	r3, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80216fa:	2204      	movs	r2, #4
 80216fc:	1a9b      	subs	r3, r3, r2
 80216fe:	4619      	mov	r1, r3
 8021700:	4620      	mov	r0, r4
 8021702:	f7ff ffcf 	bl	80216a4 <offset_to_block>
 8021706:	60f8      	str	r0, [r7, #12]
    tlsf_assert(!block_is_last(block));
 8021708:	6878      	ldr	r0, [r7, #4]
 802170a:	f7ff ff41 	bl	8021590 <block_is_last>
 802170e:	4603      	mov	r3, r0
 8021710:	2b00      	cmp	r3, #0
 8021712:	d000      	beq.n	8021716 <block_next+0x34>
 8021714:	e7fe      	b.n	8021714 <block_next+0x32>
    return next;
 8021716:	68fb      	ldr	r3, [r7, #12]
}
 8021718:	4618      	mov	r0, r3
 802171a:	3714      	adds	r7, #20
 802171c:	46bd      	mov	sp, r7
 802171e:	bd90      	pop	{r4, r7, pc}

08021720 <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 8021720:	b580      	push	{r7, lr}
 8021722:	b084      	sub	sp, #16
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 8021728:	6878      	ldr	r0, [r7, #4]
 802172a:	f7ff ffda 	bl	80216e2 <block_next>
 802172e:	60f8      	str	r0, [r7, #12]
    next->prev_phys_block = block;
 8021730:	68fb      	ldr	r3, [r7, #12]
 8021732:	687a      	ldr	r2, [r7, #4]
 8021734:	601a      	str	r2, [r3, #0]
    return next;
 8021736:	68fb      	ldr	r3, [r7, #12]
}
 8021738:	4618      	mov	r0, r3
 802173a:	3710      	adds	r7, #16
 802173c:	46bd      	mov	sp, r7
 802173e:	bd80      	pop	{r7, pc}

08021740 <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 8021740:	b580      	push	{r7, lr}
 8021742:	b084      	sub	sp, #16
 8021744:	af00      	add	r7, sp, #0
 8021746:	6078      	str	r0, [r7, #4]
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 8021748:	6878      	ldr	r0, [r7, #4]
 802174a:	f7ff ffe9 	bl	8021720 <block_link_next>
 802174e:	60f8      	str	r0, [r7, #12]
    block_set_prev_free(next);
 8021750:	68f8      	ldr	r0, [r7, #12]
 8021752:	f7ff ff6b 	bl	802162c <block_set_prev_free>
    block_set_free(block);
 8021756:	6878      	ldr	r0, [r7, #4]
 8021758:	f7ff ff39 	bl	80215ce <block_set_free>
}
 802175c:	bf00      	nop
 802175e:	3710      	adds	r7, #16
 8021760:	46bd      	mov	sp, r7
 8021762:	bd80      	pop	{r7, pc}

08021764 <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 8021764:	b580      	push	{r7, lr}
 8021766:	b084      	sub	sp, #16
 8021768:	af00      	add	r7, sp, #0
 802176a:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 802176c:	6878      	ldr	r0, [r7, #4]
 802176e:	f7ff ffb8 	bl	80216e2 <block_next>
 8021772:	60f8      	str	r0, [r7, #12]
    block_set_prev_used(next);
 8021774:	68f8      	ldr	r0, [r7, #12]
 8021776:	f7ff ff69 	bl	802164c <block_set_prev_used>
    block_set_used(block);
 802177a:	6878      	ldr	r0, [r7, #4]
 802177c:	f7ff ff37 	bl	80215ee <block_set_used>
}
 8021780:	bf00      	nop
 8021782:	3710      	adds	r7, #16
 8021784:	46bd      	mov	sp, r7
 8021786:	bd80      	pop	{r7, pc}

08021788 <align_up>:

static size_t align_up(size_t x, size_t align)
{
 8021788:	b480      	push	{r7}
 802178a:	b083      	sub	sp, #12
 802178c:	af00      	add	r7, sp, #0
 802178e:	6078      	str	r0, [r7, #4]
 8021790:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8021792:	683b      	ldr	r3, [r7, #0]
 8021794:	1e5a      	subs	r2, r3, #1
 8021796:	683b      	ldr	r3, [r7, #0]
 8021798:	4013      	ands	r3, r2
 802179a:	2b00      	cmp	r3, #0
 802179c:	d000      	beq.n	80217a0 <align_up+0x18>
 802179e:	e7fe      	b.n	802179e <align_up+0x16>
    return (x + (align - 1)) & ~(align - 1);
 80217a0:	683a      	ldr	r2, [r7, #0]
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	4413      	add	r3, r2
 80217a6:	1e5a      	subs	r2, r3, #1
 80217a8:	683b      	ldr	r3, [r7, #0]
 80217aa:	425b      	negs	r3, r3
 80217ac:	4013      	ands	r3, r2
}
 80217ae:	4618      	mov	r0, r3
 80217b0:	370c      	adds	r7, #12
 80217b2:	46bd      	mov	sp, r7
 80217b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217b8:	4770      	bx	lr

080217ba <align_down>:

static size_t align_down(size_t x, size_t align)
{
 80217ba:	b480      	push	{r7}
 80217bc:	b083      	sub	sp, #12
 80217be:	af00      	add	r7, sp, #0
 80217c0:	6078      	str	r0, [r7, #4]
 80217c2:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80217c4:	683b      	ldr	r3, [r7, #0]
 80217c6:	1e5a      	subs	r2, r3, #1
 80217c8:	683b      	ldr	r3, [r7, #0]
 80217ca:	4013      	ands	r3, r2
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d000      	beq.n	80217d2 <align_down+0x18>
 80217d0:	e7fe      	b.n	80217d0 <align_down+0x16>
    return x - (x & (align - 1));
 80217d2:	683b      	ldr	r3, [r7, #0]
 80217d4:	425a      	negs	r2, r3
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	4013      	ands	r3, r2
}
 80217da:	4618      	mov	r0, r3
 80217dc:	370c      	adds	r7, #12
 80217de:	46bd      	mov	sp, r7
 80217e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217e4:	4770      	bx	lr

080217e6 <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
 80217e6:	b480      	push	{r7}
 80217e8:	b085      	sub	sp, #20
 80217ea:	af00      	add	r7, sp, #0
 80217ec:	6078      	str	r0, [r7, #4]
 80217ee:	6039      	str	r1, [r7, #0]
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80217f0:	687a      	ldr	r2, [r7, #4]
 80217f2:	683b      	ldr	r3, [r7, #0]
 80217f4:	4413      	add	r3, r2
 80217f6:	1e5a      	subs	r2, r3, #1
 80217f8:	683b      	ldr	r3, [r7, #0]
 80217fa:	425b      	negs	r3, r3
 80217fc:	4013      	ands	r3, r2
    const tlsfptr_t aligned =
 80217fe:	60fb      	str	r3, [r7, #12]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8021800:	683b      	ldr	r3, [r7, #0]
 8021802:	1e5a      	subs	r2, r3, #1
 8021804:	683b      	ldr	r3, [r7, #0]
 8021806:	4013      	ands	r3, r2
 8021808:	2b00      	cmp	r3, #0
 802180a:	d000      	beq.n	802180e <align_ptr+0x28>
 802180c:	e7fe      	b.n	802180c <align_ptr+0x26>
    return tlsf_cast(void *, aligned);
 802180e:	68fb      	ldr	r3, [r7, #12]
}
 8021810:	4618      	mov	r0, r3
 8021812:	3714      	adds	r7, #20
 8021814:	46bd      	mov	sp, r7
 8021816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802181a:	4770      	bx	lr

0802181c <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 802181c:	b580      	push	{r7, lr}
 802181e:	b084      	sub	sp, #16
 8021820:	af00      	add	r7, sp, #0
 8021822:	6078      	str	r0, [r7, #4]
 8021824:	6039      	str	r1, [r7, #0]
    size_t adjust = 0;
 8021826:	2300      	movs	r3, #0
 8021828:	60fb      	str	r3, [r7, #12]
    if(size) {
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	2b00      	cmp	r3, #0
 802182e:	d00f      	beq.n	8021850 <adjust_request_size+0x34>
        const size_t aligned = align_up(size, align);
 8021830:	6839      	ldr	r1, [r7, #0]
 8021832:	6878      	ldr	r0, [r7, #4]
 8021834:	f7ff ffa8 	bl	8021788 <align_up>
 8021838:	60b8      	str	r0, [r7, #8]

        /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
        if(aligned < block_size_max) {
 802183a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802183e:	68bb      	ldr	r3, [r7, #8]
 8021840:	4293      	cmp	r3, r2
 8021842:	d205      	bcs.n	8021850 <adjust_request_size+0x34>
            adjust = tlsf_max(aligned, block_size_min);
 8021844:	220c      	movs	r2, #12
 8021846:	68bb      	ldr	r3, [r7, #8]
 8021848:	4293      	cmp	r3, r2
 802184a:	bf38      	it	cc
 802184c:	4613      	movcc	r3, r2
 802184e:	60fb      	str	r3, [r7, #12]
        }
    }
    return adjust;
 8021850:	68fb      	ldr	r3, [r7, #12]
}
 8021852:	4618      	mov	r0, r3
 8021854:	3710      	adds	r7, #16
 8021856:	46bd      	mov	sp, r7
 8021858:	bd80      	pop	{r7, pc}

0802185a <mapping_insert>:
** TLSF utility functions. In most cases, these are direct translations of
** the documentation found in the white paper.
*/

static void mapping_insert(size_t size, int * fli, int * sli)
{
 802185a:	b580      	push	{r7, lr}
 802185c:	b086      	sub	sp, #24
 802185e:	af00      	add	r7, sp, #0
 8021860:	60f8      	str	r0, [r7, #12]
 8021862:	60b9      	str	r1, [r7, #8]
 8021864:	607a      	str	r2, [r7, #4]
    int fl, sl;
    if(size < SMALL_BLOCK_SIZE) {
 8021866:	68fb      	ldr	r3, [r7, #12]
 8021868:	2b7f      	cmp	r3, #127	; 0x7f
 802186a:	d808      	bhi.n	802187e <mapping_insert+0x24>
        /* Store small blocks in first list. */
        fl = 0;
 802186c:	2300      	movs	r3, #0
 802186e:	617b      	str	r3, [r7, #20]
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8021870:	68fb      	ldr	r3, [r7, #12]
 8021872:	2b00      	cmp	r3, #0
 8021874:	da00      	bge.n	8021878 <mapping_insert+0x1e>
 8021876:	3303      	adds	r3, #3
 8021878:	109b      	asrs	r3, r3, #2
 802187a:	613b      	str	r3, [r7, #16]
 802187c:	e00e      	b.n	802189c <mapping_insert+0x42>
    }
    else {
        fl = tlsf_fls_sizet(size);
 802187e:	68f8      	ldr	r0, [r7, #12]
 8021880:	f7ff fe47 	bl	8021512 <tlsf_fls>
 8021884:	6178      	str	r0, [r7, #20]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8021886:	697b      	ldr	r3, [r7, #20]
 8021888:	3b05      	subs	r3, #5
 802188a:	68fa      	ldr	r2, [r7, #12]
 802188c:	fa22 f303 	lsr.w	r3, r2, r3
 8021890:	f083 0320 	eor.w	r3, r3, #32
 8021894:	613b      	str	r3, [r7, #16]
        fl -= (FL_INDEX_SHIFT - 1);
 8021896:	697b      	ldr	r3, [r7, #20]
 8021898:	3b06      	subs	r3, #6
 802189a:	617b      	str	r3, [r7, #20]
    }
    *fli = fl;
 802189c:	68bb      	ldr	r3, [r7, #8]
 802189e:	697a      	ldr	r2, [r7, #20]
 80218a0:	601a      	str	r2, [r3, #0]
    *sli = sl;
 80218a2:	687b      	ldr	r3, [r7, #4]
 80218a4:	693a      	ldr	r2, [r7, #16]
 80218a6:	601a      	str	r2, [r3, #0]
}
 80218a8:	bf00      	nop
 80218aa:	3718      	adds	r7, #24
 80218ac:	46bd      	mov	sp, r7
 80218ae:	bd80      	pop	{r7, pc}

080218b0 <mapping_search>:

/* This version rounds up to the next block size (for allocations) */
static void mapping_search(size_t size, int * fli, int * sli)
{
 80218b0:	b580      	push	{r7, lr}
 80218b2:	b086      	sub	sp, #24
 80218b4:	af00      	add	r7, sp, #0
 80218b6:	60f8      	str	r0, [r7, #12]
 80218b8:	60b9      	str	r1, [r7, #8]
 80218ba:	607a      	str	r2, [r7, #4]
    if(size >= SMALL_BLOCK_SIZE) {
 80218bc:	68fb      	ldr	r3, [r7, #12]
 80218be:	2b7f      	cmp	r3, #127	; 0x7f
 80218c0:	d90d      	bls.n	80218de <mapping_search+0x2e>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 80218c2:	68f8      	ldr	r0, [r7, #12]
 80218c4:	f7ff fe25 	bl	8021512 <tlsf_fls>
 80218c8:	4603      	mov	r3, r0
 80218ca:	3b05      	subs	r3, #5
 80218cc:	2201      	movs	r2, #1
 80218ce:	fa02 f303 	lsl.w	r3, r2, r3
 80218d2:	3b01      	subs	r3, #1
 80218d4:	617b      	str	r3, [r7, #20]
        size += round;
 80218d6:	68fa      	ldr	r2, [r7, #12]
 80218d8:	697b      	ldr	r3, [r7, #20]
 80218da:	4413      	add	r3, r2
 80218dc:	60fb      	str	r3, [r7, #12]
    }
    mapping_insert(size, fli, sli);
 80218de:	687a      	ldr	r2, [r7, #4]
 80218e0:	68b9      	ldr	r1, [r7, #8]
 80218e2:	68f8      	ldr	r0, [r7, #12]
 80218e4:	f7ff ffb9 	bl	802185a <mapping_insert>
}
 80218e8:	bf00      	nop
 80218ea:	3718      	adds	r7, #24
 80218ec:	46bd      	mov	sp, r7
 80218ee:	bd80      	pop	{r7, pc}

080218f0 <search_suitable_block>:

static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	b088      	sub	sp, #32
 80218f4:	af00      	add	r7, sp, #0
 80218f6:	60f8      	str	r0, [r7, #12]
 80218f8:	60b9      	str	r1, [r7, #8]
 80218fa:	607a      	str	r2, [r7, #4]
    int fl = *fli;
 80218fc:	68bb      	ldr	r3, [r7, #8]
 80218fe:	681b      	ldr	r3, [r3, #0]
 8021900:	61fb      	str	r3, [r7, #28]
    int sl = *sli;
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	681b      	ldr	r3, [r3, #0]
 8021906:	617b      	str	r3, [r7, #20]

    /*
    ** First, search for a block in the list associated with the given
    ** fl/sl index.
    */
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8021908:	68fa      	ldr	r2, [r7, #12]
 802190a:	69fb      	ldr	r3, [r7, #28]
 802190c:	3304      	adds	r3, #4
 802190e:	009b      	lsls	r3, r3, #2
 8021910:	4413      	add	r3, r2
 8021912:	685a      	ldr	r2, [r3, #4]
 8021914:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021918:	697b      	ldr	r3, [r7, #20]
 802191a:	fa01 f303 	lsl.w	r3, r1, r3
 802191e:	4013      	ands	r3, r2
 8021920:	61bb      	str	r3, [r7, #24]
    if(!sl_map) {
 8021922:	69bb      	ldr	r3, [r7, #24]
 8021924:	2b00      	cmp	r3, #0
 8021926:	d11c      	bne.n	8021962 <search_suitable_block+0x72>
        /* No block exists. Search in the next largest first-level list. */
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8021928:	68fb      	ldr	r3, [r7, #12]
 802192a:	691a      	ldr	r2, [r3, #16]
 802192c:	69fb      	ldr	r3, [r7, #28]
 802192e:	3301      	adds	r3, #1
 8021930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021934:	fa01 f303 	lsl.w	r3, r1, r3
 8021938:	4013      	ands	r3, r2
 802193a:	613b      	str	r3, [r7, #16]
        if(!fl_map) {
 802193c:	693b      	ldr	r3, [r7, #16]
 802193e:	2b00      	cmp	r3, #0
 8021940:	d101      	bne.n	8021946 <search_suitable_block+0x56>
            /* No free blocks available, memory has been exhausted. */
            return 0;
 8021942:	2300      	movs	r3, #0
 8021944:	e021      	b.n	802198a <search_suitable_block+0x9a>
        }

        fl = tlsf_ffs(fl_map);
 8021946:	6938      	ldr	r0, [r7, #16]
 8021948:	f7ff fdce 	bl	80214e8 <tlsf_ffs>
 802194c:	61f8      	str	r0, [r7, #28]
        *fli = fl;
 802194e:	68bb      	ldr	r3, [r7, #8]
 8021950:	69fa      	ldr	r2, [r7, #28]
 8021952:	601a      	str	r2, [r3, #0]
        sl_map = control->sl_bitmap[fl];
 8021954:	68fa      	ldr	r2, [r7, #12]
 8021956:	69fb      	ldr	r3, [r7, #28]
 8021958:	3304      	adds	r3, #4
 802195a:	009b      	lsls	r3, r3, #2
 802195c:	4413      	add	r3, r2
 802195e:	685b      	ldr	r3, [r3, #4]
 8021960:	61bb      	str	r3, [r7, #24]
    }
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8021962:	69bb      	ldr	r3, [r7, #24]
 8021964:	2b00      	cmp	r3, #0
 8021966:	d100      	bne.n	802196a <search_suitable_block+0x7a>
 8021968:	e7fe      	b.n	8021968 <search_suitable_block+0x78>
    sl = tlsf_ffs(sl_map);
 802196a:	69b8      	ldr	r0, [r7, #24]
 802196c:	f7ff fdbc 	bl	80214e8 <tlsf_ffs>
 8021970:	6178      	str	r0, [r7, #20]
    *sli = sl;
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	697a      	ldr	r2, [r7, #20]
 8021976:	601a      	str	r2, [r3, #0]

    /* Return the first block in the free list. */
    return control->blocks[fl][sl];
 8021978:	68fa      	ldr	r2, [r7, #12]
 802197a:	69fb      	ldr	r3, [r7, #28]
 802197c:	0159      	lsls	r1, r3, #5
 802197e:	697b      	ldr	r3, [r7, #20]
 8021980:	440b      	add	r3, r1
 8021982:	330e      	adds	r3, #14
 8021984:	009b      	lsls	r3, r3, #2
 8021986:	4413      	add	r3, r2
 8021988:	685b      	ldr	r3, [r3, #4]
}
 802198a:	4618      	mov	r0, r3
 802198c:	3720      	adds	r7, #32
 802198e:	46bd      	mov	sp, r7
 8021990:	bd80      	pop	{r7, pc}

08021992 <remove_free_block>:

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8021992:	b480      	push	{r7}
 8021994:	b087      	sub	sp, #28
 8021996:	af00      	add	r7, sp, #0
 8021998:	60f8      	str	r0, [r7, #12]
 802199a:	60b9      	str	r1, [r7, #8]
 802199c:	607a      	str	r2, [r7, #4]
 802199e:	603b      	str	r3, [r7, #0]
    block_header_t * prev = block->prev_free;
 80219a0:	68bb      	ldr	r3, [r7, #8]
 80219a2:	68db      	ldr	r3, [r3, #12]
 80219a4:	617b      	str	r3, [r7, #20]
    block_header_t * next = block->next_free;
 80219a6:	68bb      	ldr	r3, [r7, #8]
 80219a8:	689b      	ldr	r3, [r3, #8]
 80219aa:	613b      	str	r3, [r7, #16]
    tlsf_assert(prev && "prev_free field can not be null");
 80219ac:	697b      	ldr	r3, [r7, #20]
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	d100      	bne.n	80219b4 <remove_free_block+0x22>
 80219b2:	e7fe      	b.n	80219b2 <remove_free_block+0x20>
    tlsf_assert(next && "next_free field can not be null");
 80219b4:	693b      	ldr	r3, [r7, #16]
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	d100      	bne.n	80219bc <remove_free_block+0x2a>
 80219ba:	e7fe      	b.n	80219ba <remove_free_block+0x28>
    next->prev_free = prev;
 80219bc:	693b      	ldr	r3, [r7, #16]
 80219be:	697a      	ldr	r2, [r7, #20]
 80219c0:	60da      	str	r2, [r3, #12]
    prev->next_free = next;
 80219c2:	697b      	ldr	r3, [r7, #20]
 80219c4:	693a      	ldr	r2, [r7, #16]
 80219c6:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 80219c8:	68fa      	ldr	r2, [r7, #12]
 80219ca:	687b      	ldr	r3, [r7, #4]
 80219cc:	0159      	lsls	r1, r3, #5
 80219ce:	683b      	ldr	r3, [r7, #0]
 80219d0:	440b      	add	r3, r1
 80219d2:	330e      	adds	r3, #14
 80219d4:	009b      	lsls	r3, r3, #2
 80219d6:	4413      	add	r3, r2
 80219d8:	685b      	ldr	r3, [r3, #4]
 80219da:	68ba      	ldr	r2, [r7, #8]
 80219dc:	429a      	cmp	r2, r3
 80219de:	d131      	bne.n	8021a44 <remove_free_block+0xb2>
        control->blocks[fl][sl] = next;
 80219e0:	68fa      	ldr	r2, [r7, #12]
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	0159      	lsls	r1, r3, #5
 80219e6:	683b      	ldr	r3, [r7, #0]
 80219e8:	440b      	add	r3, r1
 80219ea:	330e      	adds	r3, #14
 80219ec:	009b      	lsls	r3, r3, #2
 80219ee:	4413      	add	r3, r2
 80219f0:	693a      	ldr	r2, [r7, #16]
 80219f2:	605a      	str	r2, [r3, #4]

        /* If the new head is null, clear the bitmap. */
        if(next == &control->block_null) {
 80219f4:	68fb      	ldr	r3, [r7, #12]
 80219f6:	693a      	ldr	r2, [r7, #16]
 80219f8:	429a      	cmp	r2, r3
 80219fa:	d123      	bne.n	8021a44 <remove_free_block+0xb2>
            control->sl_bitmap[fl] &= ~(1U << sl);
 80219fc:	68fa      	ldr	r2, [r7, #12]
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	3304      	adds	r3, #4
 8021a02:	009b      	lsls	r3, r3, #2
 8021a04:	4413      	add	r3, r2
 8021a06:	685a      	ldr	r2, [r3, #4]
 8021a08:	2101      	movs	r1, #1
 8021a0a:	683b      	ldr	r3, [r7, #0]
 8021a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8021a10:	43db      	mvns	r3, r3
 8021a12:	401a      	ands	r2, r3
 8021a14:	68f9      	ldr	r1, [r7, #12]
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	3304      	adds	r3, #4
 8021a1a:	009b      	lsls	r3, r3, #2
 8021a1c:	440b      	add	r3, r1
 8021a1e:	605a      	str	r2, [r3, #4]

            /* If the second bitmap is now empty, clear the fl bitmap. */
            if(!control->sl_bitmap[fl]) {
 8021a20:	68fa      	ldr	r2, [r7, #12]
 8021a22:	687b      	ldr	r3, [r7, #4]
 8021a24:	3304      	adds	r3, #4
 8021a26:	009b      	lsls	r3, r3, #2
 8021a28:	4413      	add	r3, r2
 8021a2a:	685b      	ldr	r3, [r3, #4]
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d109      	bne.n	8021a44 <remove_free_block+0xb2>
                control->fl_bitmap &= ~(1U << fl);
 8021a30:	68fb      	ldr	r3, [r7, #12]
 8021a32:	691a      	ldr	r2, [r3, #16]
 8021a34:	2101      	movs	r1, #1
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	fa01 f303 	lsl.w	r3, r1, r3
 8021a3c:	43db      	mvns	r3, r3
 8021a3e:	401a      	ands	r2, r3
 8021a40:	68fb      	ldr	r3, [r7, #12]
 8021a42:	611a      	str	r2, [r3, #16]
            }
        }
    }
}
 8021a44:	bf00      	nop
 8021a46:	371c      	adds	r7, #28
 8021a48:	46bd      	mov	sp, r7
 8021a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a4e:	4770      	bx	lr

08021a50 <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8021a50:	b590      	push	{r4, r7, lr}
 8021a52:	b087      	sub	sp, #28
 8021a54:	af00      	add	r7, sp, #0
 8021a56:	60f8      	str	r0, [r7, #12]
 8021a58:	60b9      	str	r1, [r7, #8]
 8021a5a:	607a      	str	r2, [r7, #4]
 8021a5c:	603b      	str	r3, [r7, #0]
    block_header_t * current = control->blocks[fl][sl];
 8021a5e:	68fa      	ldr	r2, [r7, #12]
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	0159      	lsls	r1, r3, #5
 8021a64:	683b      	ldr	r3, [r7, #0]
 8021a66:	440b      	add	r3, r1
 8021a68:	330e      	adds	r3, #14
 8021a6a:	009b      	lsls	r3, r3, #2
 8021a6c:	4413      	add	r3, r2
 8021a6e:	685b      	ldr	r3, [r3, #4]
 8021a70:	617b      	str	r3, [r7, #20]
    tlsf_assert(current && "free list cannot have a null entry");
 8021a72:	697b      	ldr	r3, [r7, #20]
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d100      	bne.n	8021a7a <insert_free_block+0x2a>
 8021a78:	e7fe      	b.n	8021a78 <insert_free_block+0x28>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 8021a7a:	68bb      	ldr	r3, [r7, #8]
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d100      	bne.n	8021a82 <insert_free_block+0x32>
 8021a80:	e7fe      	b.n	8021a80 <insert_free_block+0x30>
    block->next_free = current;
 8021a82:	68bb      	ldr	r3, [r7, #8]
 8021a84:	697a      	ldr	r2, [r7, #20]
 8021a86:	609a      	str	r2, [r3, #8]
    block->prev_free = &control->block_null;
 8021a88:	68fa      	ldr	r2, [r7, #12]
 8021a8a:	68bb      	ldr	r3, [r7, #8]
 8021a8c:	60da      	str	r2, [r3, #12]
    current->prev_free = block;
 8021a8e:	697b      	ldr	r3, [r7, #20]
 8021a90:	68ba      	ldr	r2, [r7, #8]
 8021a92:	60da      	str	r2, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8021a94:	68b8      	ldr	r0, [r7, #8]
 8021a96:	f7ff fdf8 	bl	802168a <block_to_ptr>
 8021a9a:	4604      	mov	r4, r0
 8021a9c:	68b8      	ldr	r0, [r7, #8]
 8021a9e:	f7ff fdf4 	bl	802168a <block_to_ptr>
 8021aa2:	4603      	mov	r3, r0
 8021aa4:	2104      	movs	r1, #4
 8021aa6:	4618      	mov	r0, r3
 8021aa8:	f7ff fe9d 	bl	80217e6 <align_ptr>
 8021aac:	4603      	mov	r3, r0
 8021aae:	429c      	cmp	r4, r3
 8021ab0:	d000      	beq.n	8021ab4 <insert_free_block+0x64>
 8021ab2:	e7fe      	b.n	8021ab2 <insert_free_block+0x62>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 8021ab4:	68fa      	ldr	r2, [r7, #12]
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	0159      	lsls	r1, r3, #5
 8021aba:	683b      	ldr	r3, [r7, #0]
 8021abc:	440b      	add	r3, r1
 8021abe:	330e      	adds	r3, #14
 8021ac0:	009b      	lsls	r3, r3, #2
 8021ac2:	4413      	add	r3, r2
 8021ac4:	68ba      	ldr	r2, [r7, #8]
 8021ac6:	605a      	str	r2, [r3, #4]
    control->fl_bitmap |= (1U << fl);
 8021ac8:	68fb      	ldr	r3, [r7, #12]
 8021aca:	691a      	ldr	r2, [r3, #16]
 8021acc:	2101      	movs	r1, #1
 8021ace:	687b      	ldr	r3, [r7, #4]
 8021ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8021ad4:	431a      	orrs	r2, r3
 8021ad6:	68fb      	ldr	r3, [r7, #12]
 8021ad8:	611a      	str	r2, [r3, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8021ada:	68fa      	ldr	r2, [r7, #12]
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	3304      	adds	r3, #4
 8021ae0:	009b      	lsls	r3, r3, #2
 8021ae2:	4413      	add	r3, r2
 8021ae4:	685a      	ldr	r2, [r3, #4]
 8021ae6:	2101      	movs	r1, #1
 8021ae8:	683b      	ldr	r3, [r7, #0]
 8021aea:	fa01 f303 	lsl.w	r3, r1, r3
 8021aee:	431a      	orrs	r2, r3
 8021af0:	68f9      	ldr	r1, [r7, #12]
 8021af2:	687b      	ldr	r3, [r7, #4]
 8021af4:	3304      	adds	r3, #4
 8021af6:	009b      	lsls	r3, r3, #2
 8021af8:	440b      	add	r3, r1
 8021afa:	605a      	str	r2, [r3, #4]
}
 8021afc:	bf00      	nop
 8021afe:	371c      	adds	r7, #28
 8021b00:	46bd      	mov	sp, r7
 8021b02:	bd90      	pop	{r4, r7, pc}

08021b04 <block_remove>:

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 8021b04:	b580      	push	{r7, lr}
 8021b06:	b084      	sub	sp, #16
 8021b08:	af00      	add	r7, sp, #0
 8021b0a:	6078      	str	r0, [r7, #4]
 8021b0c:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8021b0e:	6838      	ldr	r0, [r7, #0]
 8021b10:	f7ff fd16 	bl	8021540 <block_size>
 8021b14:	f107 0208 	add.w	r2, r7, #8
 8021b18:	f107 030c 	add.w	r3, r7, #12
 8021b1c:	4619      	mov	r1, r3
 8021b1e:	f7ff fe9c 	bl	802185a <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8021b22:	68fa      	ldr	r2, [r7, #12]
 8021b24:	68bb      	ldr	r3, [r7, #8]
 8021b26:	6839      	ldr	r1, [r7, #0]
 8021b28:	6878      	ldr	r0, [r7, #4]
 8021b2a:	f7ff ff32 	bl	8021992 <remove_free_block>
}
 8021b2e:	bf00      	nop
 8021b30:	3710      	adds	r7, #16
 8021b32:	46bd      	mov	sp, r7
 8021b34:	bd80      	pop	{r7, pc}

08021b36 <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 8021b36:	b580      	push	{r7, lr}
 8021b38:	b084      	sub	sp, #16
 8021b3a:	af00      	add	r7, sp, #0
 8021b3c:	6078      	str	r0, [r7, #4]
 8021b3e:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8021b40:	6838      	ldr	r0, [r7, #0]
 8021b42:	f7ff fcfd 	bl	8021540 <block_size>
 8021b46:	f107 0208 	add.w	r2, r7, #8
 8021b4a:	f107 030c 	add.w	r3, r7, #12
 8021b4e:	4619      	mov	r1, r3
 8021b50:	f7ff fe83 	bl	802185a <mapping_insert>
    insert_free_block(control, block, fl, sl);
 8021b54:	68fa      	ldr	r2, [r7, #12]
 8021b56:	68bb      	ldr	r3, [r7, #8]
 8021b58:	6839      	ldr	r1, [r7, #0]
 8021b5a:	6878      	ldr	r0, [r7, #4]
 8021b5c:	f7ff ff78 	bl	8021a50 <insert_free_block>
}
 8021b60:	bf00      	nop
 8021b62:	3710      	adds	r7, #16
 8021b64:	46bd      	mov	sp, r7
 8021b66:	bd80      	pop	{r7, pc}

08021b68 <block_can_split>:

static int block_can_split(block_header_t * block, size_t size)
{
 8021b68:	b580      	push	{r7, lr}
 8021b6a:	b082      	sub	sp, #8
 8021b6c:	af00      	add	r7, sp, #0
 8021b6e:	6078      	str	r0, [r7, #4]
 8021b70:	6039      	str	r1, [r7, #0]
    return block_size(block) >= sizeof(block_header_t) + size;
 8021b72:	6878      	ldr	r0, [r7, #4]
 8021b74:	f7ff fce4 	bl	8021540 <block_size>
 8021b78:	4602      	mov	r2, r0
 8021b7a:	683b      	ldr	r3, [r7, #0]
 8021b7c:	3310      	adds	r3, #16
 8021b7e:	429a      	cmp	r2, r3
 8021b80:	bf2c      	ite	cs
 8021b82:	2301      	movcs	r3, #1
 8021b84:	2300      	movcc	r3, #0
 8021b86:	b2db      	uxtb	r3, r3
}
 8021b88:	4618      	mov	r0, r3
 8021b8a:	3708      	adds	r7, #8
 8021b8c:	46bd      	mov	sp, r7
 8021b8e:	bd80      	pop	{r7, pc}

08021b90 <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8021b90:	b590      	push	{r4, r7, lr}
 8021b92:	b085      	sub	sp, #20
 8021b94:	af00      	add	r7, sp, #0
 8021b96:	6078      	str	r0, [r7, #4]
 8021b98:	6039      	str	r1, [r7, #0]
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 8021b9a:	6878      	ldr	r0, [r7, #4]
 8021b9c:	f7ff fd75 	bl	802168a <block_to_ptr>
 8021ba0:	4602      	mov	r2, r0
 8021ba2:	2104      	movs	r1, #4
 8021ba4:	683b      	ldr	r3, [r7, #0]
 8021ba6:	1a5b      	subs	r3, r3, r1
 8021ba8:	4619      	mov	r1, r3
 8021baa:	4610      	mov	r0, r2
 8021bac:	f7ff fd7a 	bl	80216a4 <offset_to_block>
 8021bb0:	60f8      	str	r0, [r7, #12]

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8021bb2:	6878      	ldr	r0, [r7, #4]
 8021bb4:	f7ff fcc4 	bl	8021540 <block_size>
 8021bb8:	4602      	mov	r2, r0
 8021bba:	2104      	movs	r1, #4
 8021bbc:	683b      	ldr	r3, [r7, #0]
 8021bbe:	440b      	add	r3, r1
 8021bc0:	1ad3      	subs	r3, r2, r3
 8021bc2:	60bb      	str	r3, [r7, #8]

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8021bc4:	68f8      	ldr	r0, [r7, #12]
 8021bc6:	f7ff fd60 	bl	802168a <block_to_ptr>
 8021bca:	4604      	mov	r4, r0
 8021bcc:	68f8      	ldr	r0, [r7, #12]
 8021bce:	f7ff fd5c 	bl	802168a <block_to_ptr>
 8021bd2:	4603      	mov	r3, r0
 8021bd4:	2104      	movs	r1, #4
 8021bd6:	4618      	mov	r0, r3
 8021bd8:	f7ff fe05 	bl	80217e6 <align_ptr>
 8021bdc:	4603      	mov	r3, r0
 8021bde:	429c      	cmp	r4, r3
 8021be0:	d000      	beq.n	8021be4 <block_split+0x54>
 8021be2:	e7fe      	b.n	8021be2 <block_split+0x52>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8021be4:	6878      	ldr	r0, [r7, #4]
 8021be6:	f7ff fcab 	bl	8021540 <block_size>
 8021bea:	4601      	mov	r1, r0
 8021bec:	68ba      	ldr	r2, [r7, #8]
 8021bee:	683b      	ldr	r3, [r7, #0]
 8021bf0:	4413      	add	r3, r2
 8021bf2:	2204      	movs	r2, #4
 8021bf4:	4413      	add	r3, r2
 8021bf6:	4299      	cmp	r1, r3
 8021bf8:	d000      	beq.n	8021bfc <block_split+0x6c>
 8021bfa:	e7fe      	b.n	8021bfa <block_split+0x6a>
    block_set_size(remaining, remain_size);
 8021bfc:	68b9      	ldr	r1, [r7, #8]
 8021bfe:	68f8      	ldr	r0, [r7, #12]
 8021c00:	f7ff fcaf 	bl	8021562 <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8021c04:	68f8      	ldr	r0, [r7, #12]
 8021c06:	f7ff fc9b 	bl	8021540 <block_size>
 8021c0a:	4603      	mov	r3, r0
 8021c0c:	220c      	movs	r2, #12
 8021c0e:	4293      	cmp	r3, r2
 8021c10:	d200      	bcs.n	8021c14 <block_split+0x84>
 8021c12:	e7fe      	b.n	8021c12 <block_split+0x82>

    block_set_size(block, size);
 8021c14:	6839      	ldr	r1, [r7, #0]
 8021c16:	6878      	ldr	r0, [r7, #4]
 8021c18:	f7ff fca3 	bl	8021562 <block_set_size>
    block_mark_as_free(remaining);
 8021c1c:	68f8      	ldr	r0, [r7, #12]
 8021c1e:	f7ff fd8f 	bl	8021740 <block_mark_as_free>

    return remaining;
 8021c22:	68fb      	ldr	r3, [r7, #12]
}
 8021c24:	4618      	mov	r0, r3
 8021c26:	3714      	adds	r7, #20
 8021c28:	46bd      	mov	sp, r7
 8021c2a:	bd90      	pop	{r4, r7, pc}

08021c2c <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 8021c2c:	b580      	push	{r7, lr}
 8021c2e:	b082      	sub	sp, #8
 8021c30:	af00      	add	r7, sp, #0
 8021c32:	6078      	str	r0, [r7, #4]
 8021c34:	6039      	str	r1, [r7, #0]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8021c36:	6878      	ldr	r0, [r7, #4]
 8021c38:	f7ff fcaa 	bl	8021590 <block_is_last>
 8021c3c:	4603      	mov	r3, r0
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d000      	beq.n	8021c44 <block_absorb+0x18>
 8021c42:	e7fe      	b.n	8021c42 <block_absorb+0x16>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 8021c44:	6838      	ldr	r0, [r7, #0]
 8021c46:	f7ff fc7b 	bl	8021540 <block_size>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	2204      	movs	r2, #4
 8021c4e:	441a      	add	r2, r3
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	685b      	ldr	r3, [r3, #4]
 8021c54:	441a      	add	r2, r3
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	605a      	str	r2, [r3, #4]
    block_link_next(prev);
 8021c5a:	6878      	ldr	r0, [r7, #4]
 8021c5c:	f7ff fd60 	bl	8021720 <block_link_next>
    return prev;
 8021c60:	687b      	ldr	r3, [r7, #4]
}
 8021c62:	4618      	mov	r0, r3
 8021c64:	3708      	adds	r7, #8
 8021c66:	46bd      	mov	sp, r7
 8021c68:	bd80      	pop	{r7, pc}

08021c6a <block_merge_prev>:

/* Merge a just-freed block with an adjacent previous free block. */
static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
{
 8021c6a:	b580      	push	{r7, lr}
 8021c6c:	b084      	sub	sp, #16
 8021c6e:	af00      	add	r7, sp, #0
 8021c70:	6078      	str	r0, [r7, #4]
 8021c72:	6039      	str	r1, [r7, #0]
    if(block_is_prev_free(block)) {
 8021c74:	6838      	ldr	r0, [r7, #0]
 8021c76:	f7ff fccb 	bl	8021610 <block_is_prev_free>
 8021c7a:	4603      	mov	r3, r0
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d017      	beq.n	8021cb0 <block_merge_prev+0x46>
        block_header_t * prev = block_prev(block);
 8021c80:	6838      	ldr	r0, [r7, #0]
 8021c82:	f7ff fd1d 	bl	80216c0 <block_prev>
 8021c86:	60f8      	str	r0, [r7, #12]
        tlsf_assert(prev && "prev physical block can't be null");
 8021c88:	68fb      	ldr	r3, [r7, #12]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d100      	bne.n	8021c90 <block_merge_prev+0x26>
 8021c8e:	e7fe      	b.n	8021c8e <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8021c90:	68f8      	ldr	r0, [r7, #12]
 8021c92:	f7ff fc8e 	bl	80215b2 <block_is_free>
 8021c96:	4603      	mov	r3, r0
 8021c98:	2b00      	cmp	r3, #0
 8021c9a:	d100      	bne.n	8021c9e <block_merge_prev+0x34>
 8021c9c:	e7fe      	b.n	8021c9c <block_merge_prev+0x32>
        block_remove(control, prev);
 8021c9e:	68f9      	ldr	r1, [r7, #12]
 8021ca0:	6878      	ldr	r0, [r7, #4]
 8021ca2:	f7ff ff2f 	bl	8021b04 <block_remove>
        block = block_absorb(prev, block);
 8021ca6:	6839      	ldr	r1, [r7, #0]
 8021ca8:	68f8      	ldr	r0, [r7, #12]
 8021caa:	f7ff ffbf 	bl	8021c2c <block_absorb>
 8021cae:	6038      	str	r0, [r7, #0]
    }

    return block;
 8021cb0:	683b      	ldr	r3, [r7, #0]
}
 8021cb2:	4618      	mov	r0, r3
 8021cb4:	3710      	adds	r7, #16
 8021cb6:	46bd      	mov	sp, r7
 8021cb8:	bd80      	pop	{r7, pc}

08021cba <block_merge_next>:

/* Merge a just-freed block with an adjacent free block. */
static block_header_t * block_merge_next(control_t * control, block_header_t * block)
{
 8021cba:	b580      	push	{r7, lr}
 8021cbc:	b084      	sub	sp, #16
 8021cbe:	af00      	add	r7, sp, #0
 8021cc0:	6078      	str	r0, [r7, #4]
 8021cc2:	6039      	str	r1, [r7, #0]
    block_header_t * next = block_next(block);
 8021cc4:	6838      	ldr	r0, [r7, #0]
 8021cc6:	f7ff fd0c 	bl	80216e2 <block_next>
 8021cca:	60f8      	str	r0, [r7, #12]
    tlsf_assert(next && "next physical block can't be null");
 8021ccc:	68fb      	ldr	r3, [r7, #12]
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	d100      	bne.n	8021cd4 <block_merge_next+0x1a>
 8021cd2:	e7fe      	b.n	8021cd2 <block_merge_next+0x18>

    if(block_is_free(next)) {
 8021cd4:	68f8      	ldr	r0, [r7, #12]
 8021cd6:	f7ff fc6c 	bl	80215b2 <block_is_free>
 8021cda:	4603      	mov	r3, r0
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	d00f      	beq.n	8021d00 <block_merge_next+0x46>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8021ce0:	6838      	ldr	r0, [r7, #0]
 8021ce2:	f7ff fc55 	bl	8021590 <block_is_last>
 8021ce6:	4603      	mov	r3, r0
 8021ce8:	2b00      	cmp	r3, #0
 8021cea:	d000      	beq.n	8021cee <block_merge_next+0x34>
 8021cec:	e7fe      	b.n	8021cec <block_merge_next+0x32>
        block_remove(control, next);
 8021cee:	68f9      	ldr	r1, [r7, #12]
 8021cf0:	6878      	ldr	r0, [r7, #4]
 8021cf2:	f7ff ff07 	bl	8021b04 <block_remove>
        block = block_absorb(block, next);
 8021cf6:	68f9      	ldr	r1, [r7, #12]
 8021cf8:	6838      	ldr	r0, [r7, #0]
 8021cfa:	f7ff ff97 	bl	8021c2c <block_absorb>
 8021cfe:	6038      	str	r0, [r7, #0]
    }

    return block;
 8021d00:	683b      	ldr	r3, [r7, #0]
}
 8021d02:	4618      	mov	r0, r3
 8021d04:	3710      	adds	r7, #16
 8021d06:	46bd      	mov	sp, r7
 8021d08:	bd80      	pop	{r7, pc}

08021d0a <block_trim_free>:

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
 8021d0a:	b580      	push	{r7, lr}
 8021d0c:	b086      	sub	sp, #24
 8021d0e:	af00      	add	r7, sp, #0
 8021d10:	60f8      	str	r0, [r7, #12]
 8021d12:	60b9      	str	r1, [r7, #8]
 8021d14:	607a      	str	r2, [r7, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 8021d16:	68b8      	ldr	r0, [r7, #8]
 8021d18:	f7ff fc4b 	bl	80215b2 <block_is_free>
 8021d1c:	4603      	mov	r3, r0
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d100      	bne.n	8021d24 <block_trim_free+0x1a>
 8021d22:	e7fe      	b.n	8021d22 <block_trim_free+0x18>
    if(block_can_split(block, size)) {
 8021d24:	6879      	ldr	r1, [r7, #4]
 8021d26:	68b8      	ldr	r0, [r7, #8]
 8021d28:	f7ff ff1e 	bl	8021b68 <block_can_split>
 8021d2c:	4603      	mov	r3, r0
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d00e      	beq.n	8021d50 <block_trim_free+0x46>
        block_header_t * remaining_block = block_split(block, size);
 8021d32:	6879      	ldr	r1, [r7, #4]
 8021d34:	68b8      	ldr	r0, [r7, #8]
 8021d36:	f7ff ff2b 	bl	8021b90 <block_split>
 8021d3a:	6178      	str	r0, [r7, #20]
        block_link_next(block);
 8021d3c:	68b8      	ldr	r0, [r7, #8]
 8021d3e:	f7ff fcef 	bl	8021720 <block_link_next>
        block_set_prev_free(remaining_block);
 8021d42:	6978      	ldr	r0, [r7, #20]
 8021d44:	f7ff fc72 	bl	802162c <block_set_prev_free>
        block_insert(control, remaining_block);
 8021d48:	6979      	ldr	r1, [r7, #20]
 8021d4a:	68f8      	ldr	r0, [r7, #12]
 8021d4c:	f7ff fef3 	bl	8021b36 <block_insert>
    }
}
 8021d50:	bf00      	nop
 8021d52:	3718      	adds	r7, #24
 8021d54:	46bd      	mov	sp, r7
 8021d56:	bd80      	pop	{r7, pc}

08021d58 <block_trim_used>:

/* Trim any trailing block space off the end of a used block, return to pool. */
static void block_trim_used(control_t * control, block_header_t * block, size_t size)
{
 8021d58:	b580      	push	{r7, lr}
 8021d5a:	b086      	sub	sp, #24
 8021d5c:	af00      	add	r7, sp, #0
 8021d5e:	60f8      	str	r0, [r7, #12]
 8021d60:	60b9      	str	r1, [r7, #8]
 8021d62:	607a      	str	r2, [r7, #4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 8021d64:	68b8      	ldr	r0, [r7, #8]
 8021d66:	f7ff fc24 	bl	80215b2 <block_is_free>
 8021d6a:	4603      	mov	r3, r0
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d000      	beq.n	8021d72 <block_trim_used+0x1a>
 8021d70:	e7fe      	b.n	8021d70 <block_trim_used+0x18>
    if(block_can_split(block, size)) {
 8021d72:	6879      	ldr	r1, [r7, #4]
 8021d74:	68b8      	ldr	r0, [r7, #8]
 8021d76:	f7ff fef7 	bl	8021b68 <block_can_split>
 8021d7a:	4603      	mov	r3, r0
 8021d7c:	2b00      	cmp	r3, #0
 8021d7e:	d010      	beq.n	8021da2 <block_trim_used+0x4a>
        /* If the next block is free, we must coalesce. */
        block_header_t * remaining_block = block_split(block, size);
 8021d80:	6879      	ldr	r1, [r7, #4]
 8021d82:	68b8      	ldr	r0, [r7, #8]
 8021d84:	f7ff ff04 	bl	8021b90 <block_split>
 8021d88:	6178      	str	r0, [r7, #20]
        block_set_prev_used(remaining_block);
 8021d8a:	6978      	ldr	r0, [r7, #20]
 8021d8c:	f7ff fc5e 	bl	802164c <block_set_prev_used>

        remaining_block = block_merge_next(control, remaining_block);
 8021d90:	6979      	ldr	r1, [r7, #20]
 8021d92:	68f8      	ldr	r0, [r7, #12]
 8021d94:	f7ff ff91 	bl	8021cba <block_merge_next>
 8021d98:	6178      	str	r0, [r7, #20]
        block_insert(control, remaining_block);
 8021d9a:	6979      	ldr	r1, [r7, #20]
 8021d9c:	68f8      	ldr	r0, [r7, #12]
 8021d9e:	f7ff feca 	bl	8021b36 <block_insert>
    }
}
 8021da2:	bf00      	nop
 8021da4:	3718      	adds	r7, #24
 8021da6:	46bd      	mov	sp, r7
 8021da8:	bd80      	pop	{r7, pc}

08021daa <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 8021daa:	b580      	push	{r7, lr}
 8021dac:	b086      	sub	sp, #24
 8021dae:	af00      	add	r7, sp, #0
 8021db0:	6078      	str	r0, [r7, #4]
 8021db2:	6039      	str	r1, [r7, #0]
    int fl = 0, sl = 0;
 8021db4:	2300      	movs	r3, #0
 8021db6:	613b      	str	r3, [r7, #16]
 8021db8:	2300      	movs	r3, #0
 8021dba:	60fb      	str	r3, [r7, #12]
    block_header_t * block = 0;
 8021dbc:	2300      	movs	r3, #0
 8021dbe:	617b      	str	r3, [r7, #20]

    if(size) {
 8021dc0:	683b      	ldr	r3, [r7, #0]
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	d013      	beq.n	8021dee <block_locate_free+0x44>
        mapping_search(size, &fl, &sl);
 8021dc6:	f107 020c 	add.w	r2, r7, #12
 8021dca:	f107 0310 	add.w	r3, r7, #16
 8021dce:	4619      	mov	r1, r3
 8021dd0:	6838      	ldr	r0, [r7, #0]
 8021dd2:	f7ff fd6d 	bl	80218b0 <mapping_search>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 8021dd6:	693b      	ldr	r3, [r7, #16]
 8021dd8:	2b09      	cmp	r3, #9
 8021dda:	dc08      	bgt.n	8021dee <block_locate_free+0x44>
            block = search_suitable_block(control, &fl, &sl);
 8021ddc:	f107 020c 	add.w	r2, r7, #12
 8021de0:	f107 0310 	add.w	r3, r7, #16
 8021de4:	4619      	mov	r1, r3
 8021de6:	6878      	ldr	r0, [r7, #4]
 8021de8:	f7ff fd82 	bl	80218f0 <search_suitable_block>
 8021dec:	6178      	str	r0, [r7, #20]
        }
    }

    if(block) {
 8021dee:	697b      	ldr	r3, [r7, #20]
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d00d      	beq.n	8021e10 <block_locate_free+0x66>
        tlsf_assert(block_size(block) >= size);
 8021df4:	6978      	ldr	r0, [r7, #20]
 8021df6:	f7ff fba3 	bl	8021540 <block_size>
 8021dfa:	4602      	mov	r2, r0
 8021dfc:	683b      	ldr	r3, [r7, #0]
 8021dfe:	4293      	cmp	r3, r2
 8021e00:	d900      	bls.n	8021e04 <block_locate_free+0x5a>
 8021e02:	e7fe      	b.n	8021e02 <block_locate_free+0x58>
        remove_free_block(control, block, fl, sl);
 8021e04:	693a      	ldr	r2, [r7, #16]
 8021e06:	68fb      	ldr	r3, [r7, #12]
 8021e08:	6979      	ldr	r1, [r7, #20]
 8021e0a:	6878      	ldr	r0, [r7, #4]
 8021e0c:	f7ff fdc1 	bl	8021992 <remove_free_block>
    }

    return block;
 8021e10:	697b      	ldr	r3, [r7, #20]
}
 8021e12:	4618      	mov	r0, r3
 8021e14:	3718      	adds	r7, #24
 8021e16:	46bd      	mov	sp, r7
 8021e18:	bd80      	pop	{r7, pc}

08021e1a <block_prepare_used>:

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 8021e1a:	b580      	push	{r7, lr}
 8021e1c:	b086      	sub	sp, #24
 8021e1e:	af00      	add	r7, sp, #0
 8021e20:	60f8      	str	r0, [r7, #12]
 8021e22:	60b9      	str	r1, [r7, #8]
 8021e24:	607a      	str	r2, [r7, #4]
    void * p = 0;
 8021e26:	2300      	movs	r3, #0
 8021e28:	617b      	str	r3, [r7, #20]
    if(block) {
 8021e2a:	68bb      	ldr	r3, [r7, #8]
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d00f      	beq.n	8021e50 <block_prepare_used+0x36>
        tlsf_assert(size && "size must be non-zero");
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	d100      	bne.n	8021e38 <block_prepare_used+0x1e>
 8021e36:	e7fe      	b.n	8021e36 <block_prepare_used+0x1c>
        block_trim_free(control, block, size);
 8021e38:	687a      	ldr	r2, [r7, #4]
 8021e3a:	68b9      	ldr	r1, [r7, #8]
 8021e3c:	68f8      	ldr	r0, [r7, #12]
 8021e3e:	f7ff ff64 	bl	8021d0a <block_trim_free>
        block_mark_as_used(block);
 8021e42:	68b8      	ldr	r0, [r7, #8]
 8021e44:	f7ff fc8e 	bl	8021764 <block_mark_as_used>
        p = block_to_ptr(block);
 8021e48:	68b8      	ldr	r0, [r7, #8]
 8021e4a:	f7ff fc1e 	bl	802168a <block_to_ptr>
 8021e4e:	6178      	str	r0, [r7, #20]
    }
    return p;
 8021e50:	697b      	ldr	r3, [r7, #20]
}
 8021e52:	4618      	mov	r0, r3
 8021e54:	3718      	adds	r7, #24
 8021e56:	46bd      	mov	sp, r7
 8021e58:	bd80      	pop	{r7, pc}

08021e5a <control_constructor>:

/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
 8021e5a:	b480      	push	{r7}
 8021e5c:	b085      	sub	sp, #20
 8021e5e:	af00      	add	r7, sp, #0
 8021e60:	6078      	str	r0, [r7, #4]
    int i, j;

    control->block_null.next_free = &control->block_null;
 8021e62:	687a      	ldr	r2, [r7, #4]
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	609a      	str	r2, [r3, #8]
    control->block_null.prev_free = &control->block_null;
 8021e68:	687a      	ldr	r2, [r7, #4]
 8021e6a:	687b      	ldr	r3, [r7, #4]
 8021e6c:	60da      	str	r2, [r3, #12]

    control->fl_bitmap = 0;
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	2200      	movs	r2, #0
 8021e72:	611a      	str	r2, [r3, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8021e74:	2300      	movs	r3, #0
 8021e76:	60fb      	str	r3, [r7, #12]
 8021e78:	e01c      	b.n	8021eb4 <control_constructor+0x5a>
        control->sl_bitmap[i] = 0;
 8021e7a:	687a      	ldr	r2, [r7, #4]
 8021e7c:	68fb      	ldr	r3, [r7, #12]
 8021e7e:	3304      	adds	r3, #4
 8021e80:	009b      	lsls	r3, r3, #2
 8021e82:	4413      	add	r3, r2
 8021e84:	2200      	movs	r2, #0
 8021e86:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8021e88:	2300      	movs	r3, #0
 8021e8a:	60bb      	str	r3, [r7, #8]
 8021e8c:	e00c      	b.n	8021ea8 <control_constructor+0x4e>
            control->blocks[i][j] = &control->block_null;
 8021e8e:	687a      	ldr	r2, [r7, #4]
 8021e90:	6879      	ldr	r1, [r7, #4]
 8021e92:	68fb      	ldr	r3, [r7, #12]
 8021e94:	0158      	lsls	r0, r3, #5
 8021e96:	68bb      	ldr	r3, [r7, #8]
 8021e98:	4403      	add	r3, r0
 8021e9a:	330e      	adds	r3, #14
 8021e9c:	009b      	lsls	r3, r3, #2
 8021e9e:	440b      	add	r3, r1
 8021ea0:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8021ea2:	68bb      	ldr	r3, [r7, #8]
 8021ea4:	3301      	adds	r3, #1
 8021ea6:	60bb      	str	r3, [r7, #8]
 8021ea8:	68bb      	ldr	r3, [r7, #8]
 8021eaa:	2b1f      	cmp	r3, #31
 8021eac:	ddef      	ble.n	8021e8e <control_constructor+0x34>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	3301      	adds	r3, #1
 8021eb2:	60fb      	str	r3, [r7, #12]
 8021eb4:	68fb      	ldr	r3, [r7, #12]
 8021eb6:	2b09      	cmp	r3, #9
 8021eb8:	dddf      	ble.n	8021e7a <control_constructor+0x20>
        }
    }
}
 8021eba:	bf00      	nop
 8021ebc:	bf00      	nop
 8021ebe:	3714      	adds	r7, #20
 8021ec0:	46bd      	mov	sp, r7
 8021ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ec6:	4770      	bx	lr

08021ec8 <lv_tlsf_size>:
/*
** Size of the TLSF structures in a given memory block passed to
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
 8021ec8:	b480      	push	{r7}
 8021eca:	af00      	add	r7, sp, #0
    return sizeof(control_t);
 8021ecc:	f240 533c 	movw	r3, #1340	; 0x53c
}
 8021ed0:	4618      	mov	r0, r3
 8021ed2:	46bd      	mov	sp, r7
 8021ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ed8:	4770      	bx	lr

08021eda <lv_tlsf_pool_overhead>:
** Overhead of the TLSF structures in a given memory block passed to
** lv_tlsf_add_pool, equal to the overhead of a free block and the
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
 8021eda:	b480      	push	{r7}
 8021edc:	af00      	add	r7, sp, #0
    return 2 * block_header_overhead;
 8021ede:	2304      	movs	r3, #4
 8021ee0:	005b      	lsls	r3, r3, #1
}
 8021ee2:	4618      	mov	r0, r3
 8021ee4:	46bd      	mov	sp, r7
 8021ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eea:	4770      	bx	lr

08021eec <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 8021eec:	b580      	push	{r7, lr}
 8021eee:	b088      	sub	sp, #32
 8021ef0:	af00      	add	r7, sp, #0
 8021ef2:	60f8      	str	r0, [r7, #12]
 8021ef4:	60b9      	str	r1, [r7, #8]
 8021ef6:	607a      	str	r2, [r7, #4]
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 8021ef8:	f7ff ffef 	bl	8021eda <lv_tlsf_pool_overhead>
 8021efc:	61f8      	str	r0, [r7, #28]
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8021efe:	687a      	ldr	r2, [r7, #4]
 8021f00:	69fb      	ldr	r3, [r7, #28]
 8021f02:	1ad3      	subs	r3, r2, r3
 8021f04:	2104      	movs	r1, #4
 8021f06:	4618      	mov	r0, r3
 8021f08:	f7ff fc57 	bl	80217ba <align_down>
 8021f0c:	61b8      	str	r0, [r7, #24]

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8021f0e:	68bb      	ldr	r3, [r7, #8]
 8021f10:	f003 0303 	and.w	r3, r3, #3
 8021f14:	2b00      	cmp	r3, #0
 8021f16:	d001      	beq.n	8021f1c <lv_tlsf_add_pool+0x30>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 8021f18:	2300      	movs	r3, #0
 8021f1a:	e02e      	b.n	8021f7a <lv_tlsf_add_pool+0x8e>
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 8021f1c:	220c      	movs	r2, #12
 8021f1e:	69bb      	ldr	r3, [r7, #24]
 8021f20:	4293      	cmp	r3, r2
 8021f22:	d304      	bcc.n	8021f2e <lv_tlsf_add_pool+0x42>
 8021f24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8021f28:	69bb      	ldr	r3, [r7, #24]
 8021f2a:	4293      	cmp	r3, r2
 8021f2c:	d901      	bls.n	8021f32 <lv_tlsf_add_pool+0x46>
#else
        printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
               (unsigned int)(pool_overhead + block_size_min),
               (unsigned int)(pool_overhead + block_size_max));
#endif
        return 0;
 8021f2e:	2300      	movs	r3, #0
 8021f30:	e023      	b.n	8021f7a <lv_tlsf_add_pool+0x8e>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 8021f32:	2304      	movs	r3, #4
 8021f34:	425b      	negs	r3, r3
 8021f36:	4619      	mov	r1, r3
 8021f38:	68b8      	ldr	r0, [r7, #8]
 8021f3a:	f7ff fbb3 	bl	80216a4 <offset_to_block>
 8021f3e:	6178      	str	r0, [r7, #20]
    block_set_size(block, pool_bytes);
 8021f40:	69b9      	ldr	r1, [r7, #24]
 8021f42:	6978      	ldr	r0, [r7, #20]
 8021f44:	f7ff fb0d 	bl	8021562 <block_set_size>
    block_set_free(block);
 8021f48:	6978      	ldr	r0, [r7, #20]
 8021f4a:	f7ff fb40 	bl	80215ce <block_set_free>
    block_set_prev_used(block);
 8021f4e:	6978      	ldr	r0, [r7, #20]
 8021f50:	f7ff fb7c 	bl	802164c <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 8021f54:	6979      	ldr	r1, [r7, #20]
 8021f56:	68f8      	ldr	r0, [r7, #12]
 8021f58:	f7ff fded 	bl	8021b36 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8021f5c:	6978      	ldr	r0, [r7, #20]
 8021f5e:	f7ff fbdf 	bl	8021720 <block_link_next>
 8021f62:	6138      	str	r0, [r7, #16]
    block_set_size(next, 0);
 8021f64:	2100      	movs	r1, #0
 8021f66:	6938      	ldr	r0, [r7, #16]
 8021f68:	f7ff fafb 	bl	8021562 <block_set_size>
    block_set_used(next);
 8021f6c:	6938      	ldr	r0, [r7, #16]
 8021f6e:	f7ff fb3e 	bl	80215ee <block_set_used>
    block_set_prev_free(next);
 8021f72:	6938      	ldr	r0, [r7, #16]
 8021f74:	f7ff fb5a 	bl	802162c <block_set_prev_free>

    return mem;
 8021f78:	68bb      	ldr	r3, [r7, #8]
}
 8021f7a:	4618      	mov	r0, r3
 8021f7c:	3720      	adds	r7, #32
 8021f7e:	46bd      	mov	sp, r7
 8021f80:	bd80      	pop	{r7, pc}

08021f82 <lv_tlsf_create>:
    return rv;
}
#endif

lv_tlsf_t lv_tlsf_create(void * mem)
{
 8021f82:	b580      	push	{r7, lr}
 8021f84:	b082      	sub	sp, #8
 8021f86:	af00      	add	r7, sp, #0
 8021f88:	6078      	str	r0, [r7, #4]
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	f003 0303 	and.w	r3, r3, #3
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	d001      	beq.n	8021f98 <lv_tlsf_create+0x16>
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 8021f94:	2300      	movs	r3, #0
 8021f96:	e003      	b.n	8021fa0 <lv_tlsf_create+0x1e>
    }

    control_constructor(tlsf_cast(control_t *, mem));
 8021f98:	6878      	ldr	r0, [r7, #4]
 8021f9a:	f7ff ff5e 	bl	8021e5a <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 8021f9e:	687b      	ldr	r3, [r7, #4]
}
 8021fa0:	4618      	mov	r0, r3
 8021fa2:	3708      	adds	r7, #8
 8021fa4:	46bd      	mov	sp, r7
 8021fa6:	bd80      	pop	{r7, pc}

08021fa8 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8021fa8:	b590      	push	{r4, r7, lr}
 8021faa:	b085      	sub	sp, #20
 8021fac:	af00      	add	r7, sp, #0
 8021fae:	6078      	str	r0, [r7, #4]
 8021fb0:	6039      	str	r1, [r7, #0]
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8021fb2:	6878      	ldr	r0, [r7, #4]
 8021fb4:	f7ff ffe5 	bl	8021f82 <lv_tlsf_create>
 8021fb8:	60f8      	str	r0, [r7, #12]
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8021fba:	f7ff ff85 	bl	8021ec8 <lv_tlsf_size>
 8021fbe:	4602      	mov	r2, r0
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	189c      	adds	r4, r3, r2
 8021fc4:	f7ff ff80 	bl	8021ec8 <lv_tlsf_size>
 8021fc8:	4602      	mov	r2, r0
 8021fca:	683b      	ldr	r3, [r7, #0]
 8021fcc:	1a9b      	subs	r3, r3, r2
 8021fce:	461a      	mov	r2, r3
 8021fd0:	4621      	mov	r1, r4
 8021fd2:	68f8      	ldr	r0, [r7, #12]
 8021fd4:	f7ff ff8a 	bl	8021eec <lv_tlsf_add_pool>
    return tlsf;
 8021fd8:	68fb      	ldr	r3, [r7, #12]
}
 8021fda:	4618      	mov	r0, r3
 8021fdc:	3714      	adds	r7, #20
 8021fde:	46bd      	mov	sp, r7
 8021fe0:	bd90      	pop	{r4, r7, pc}

08021fe2 <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8021fe2:	b580      	push	{r7, lr}
 8021fe4:	b086      	sub	sp, #24
 8021fe6:	af00      	add	r7, sp, #0
 8021fe8:	6078      	str	r0, [r7, #4]
 8021fea:	6039      	str	r1, [r7, #0]
    control_t * control = tlsf_cast(control_t *, tlsf);
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	617b      	str	r3, [r7, #20]
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8021ff0:	2104      	movs	r1, #4
 8021ff2:	6838      	ldr	r0, [r7, #0]
 8021ff4:	f7ff fc12 	bl	802181c <adjust_request_size>
 8021ff8:	6138      	str	r0, [r7, #16]
    block_header_t * block = block_locate_free(control, adjust);
 8021ffa:	6939      	ldr	r1, [r7, #16]
 8021ffc:	6978      	ldr	r0, [r7, #20]
 8021ffe:	f7ff fed4 	bl	8021daa <block_locate_free>
 8022002:	60f8      	str	r0, [r7, #12]
    return block_prepare_used(control, block, adjust);
 8022004:	693a      	ldr	r2, [r7, #16]
 8022006:	68f9      	ldr	r1, [r7, #12]
 8022008:	6978      	ldr	r0, [r7, #20]
 802200a:	f7ff ff06 	bl	8021e1a <block_prepare_used>
 802200e:	4603      	mov	r3, r0
}
 8022010:	4618      	mov	r0, r3
 8022012:	3718      	adds	r7, #24
 8022014:	46bd      	mov	sp, r7
 8022016:	bd80      	pop	{r7, pc}

08022018 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8022018:	b580      	push	{r7, lr}
 802201a:	b086      	sub	sp, #24
 802201c:	af00      	add	r7, sp, #0
 802201e:	6078      	str	r0, [r7, #4]
 8022020:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8022022:	2300      	movs	r3, #0
 8022024:	617b      	str	r3, [r7, #20]
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8022026:	683b      	ldr	r3, [r7, #0]
 8022028:	2b00      	cmp	r3, #0
 802202a:	d020      	beq.n	802206e <lv_tlsf_free+0x56>
        control_t * control = tlsf_cast(control_t *, tlsf);
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	613b      	str	r3, [r7, #16]
        block_header_t * block = block_from_ptr(ptr);
 8022030:	6838      	ldr	r0, [r7, #0]
 8022032:	f7ff fb1c 	bl	802166e <block_from_ptr>
 8022036:	60f8      	str	r0, [r7, #12]
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8022038:	68f8      	ldr	r0, [r7, #12]
 802203a:	f7ff faba 	bl	80215b2 <block_is_free>
 802203e:	4603      	mov	r3, r0
 8022040:	2b00      	cmp	r3, #0
 8022042:	d000      	beq.n	8022046 <lv_tlsf_free+0x2e>
 8022044:	e7fe      	b.n	8022044 <lv_tlsf_free+0x2c>
        size = block->size;
 8022046:	68fb      	ldr	r3, [r7, #12]
 8022048:	685b      	ldr	r3, [r3, #4]
 802204a:	617b      	str	r3, [r7, #20]
        block_mark_as_free(block);
 802204c:	68f8      	ldr	r0, [r7, #12]
 802204e:	f7ff fb77 	bl	8021740 <block_mark_as_free>
        block = block_merge_prev(control, block);
 8022052:	68f9      	ldr	r1, [r7, #12]
 8022054:	6938      	ldr	r0, [r7, #16]
 8022056:	f7ff fe08 	bl	8021c6a <block_merge_prev>
 802205a:	60f8      	str	r0, [r7, #12]
        block = block_merge_next(control, block);
 802205c:	68f9      	ldr	r1, [r7, #12]
 802205e:	6938      	ldr	r0, [r7, #16]
 8022060:	f7ff fe2b 	bl	8021cba <block_merge_next>
 8022064:	60f8      	str	r0, [r7, #12]
        block_insert(control, block);
 8022066:	68f9      	ldr	r1, [r7, #12]
 8022068:	6938      	ldr	r0, [r7, #16]
 802206a:	f7ff fd64 	bl	8021b36 <block_insert>
    }

    return size;
 802206e:	697b      	ldr	r3, [r7, #20]
}
 8022070:	4618      	mov	r0, r3
 8022072:	3718      	adds	r7, #24
 8022074:	46bd      	mov	sp, r7
 8022076:	bd80      	pop	{r7, pc}

08022078 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8022078:	b580      	push	{r7, lr}
 802207a:	b08c      	sub	sp, #48	; 0x30
 802207c:	af00      	add	r7, sp, #0
 802207e:	60f8      	str	r0, [r7, #12]
 8022080:	60b9      	str	r1, [r7, #8]
 8022082:	607a      	str	r2, [r7, #4]
    control_t * control = tlsf_cast(control_t *, tlsf);
 8022084:	68fb      	ldr	r3, [r7, #12]
 8022086:	62bb      	str	r3, [r7, #40]	; 0x28
    void * p = 0;
 8022088:	2300      	movs	r3, #0
 802208a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 802208c:	68bb      	ldr	r3, [r7, #8]
 802208e:	2b00      	cmp	r3, #0
 8022090:	d007      	beq.n	80220a2 <lv_tlsf_realloc+0x2a>
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	2b00      	cmp	r3, #0
 8022096:	d104      	bne.n	80220a2 <lv_tlsf_realloc+0x2a>
        lv_tlsf_free(tlsf, ptr);
 8022098:	68b9      	ldr	r1, [r7, #8]
 802209a:	68f8      	ldr	r0, [r7, #12]
 802209c:	f7ff ffbc 	bl	8022018 <lv_tlsf_free>
 80220a0:	e06a      	b.n	8022178 <lv_tlsf_realloc+0x100>
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 80220a2:	68bb      	ldr	r3, [r7, #8]
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	d105      	bne.n	80220b4 <lv_tlsf_realloc+0x3c>
        p = lv_tlsf_malloc(tlsf, size);
 80220a8:	6879      	ldr	r1, [r7, #4]
 80220aa:	68f8      	ldr	r0, [r7, #12]
 80220ac:	f7ff ff99 	bl	8021fe2 <lv_tlsf_malloc>
 80220b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80220b2:	e061      	b.n	8022178 <lv_tlsf_realloc+0x100>
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 80220b4:	68b8      	ldr	r0, [r7, #8]
 80220b6:	f7ff fada 	bl	802166e <block_from_ptr>
 80220ba:	6278      	str	r0, [r7, #36]	; 0x24
        block_header_t * next = block_next(block);
 80220bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80220be:	f7ff fb10 	bl	80216e2 <block_next>
 80220c2:	6238      	str	r0, [r7, #32]

        const size_t cursize = block_size(block);
 80220c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80220c6:	f7ff fa3b 	bl	8021540 <block_size>
 80220ca:	61f8      	str	r0, [r7, #28]
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 80220cc:	6a38      	ldr	r0, [r7, #32]
 80220ce:	f7ff fa37 	bl	8021540 <block_size>
 80220d2:	4602      	mov	r2, r0
 80220d4:	69fb      	ldr	r3, [r7, #28]
 80220d6:	4413      	add	r3, r2
 80220d8:	2204      	movs	r2, #4
 80220da:	4413      	add	r3, r2
 80220dc:	61bb      	str	r3, [r7, #24]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80220de:	2104      	movs	r1, #4
 80220e0:	6878      	ldr	r0, [r7, #4]
 80220e2:	f7ff fb9b 	bl	802181c <adjust_request_size>
 80220e6:	6178      	str	r0, [r7, #20]
        if(size > cursize && adjust == 0) {
 80220e8:	687a      	ldr	r2, [r7, #4]
 80220ea:	69fb      	ldr	r3, [r7, #28]
 80220ec:	429a      	cmp	r2, r3
 80220ee:	d904      	bls.n	80220fa <lv_tlsf_realloc+0x82>
 80220f0:	697b      	ldr	r3, [r7, #20]
 80220f2:	2b00      	cmp	r3, #0
 80220f4:	d101      	bne.n	80220fa <lv_tlsf_realloc+0x82>
            /* The request is probably too large, fail */
            return NULL;
 80220f6:	2300      	movs	r3, #0
 80220f8:	e03f      	b.n	802217a <lv_tlsf_realloc+0x102>
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80220fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80220fc:	f7ff fa59 	bl	80215b2 <block_is_free>
 8022100:	4603      	mov	r3, r0
 8022102:	2b00      	cmp	r3, #0
 8022104:	d000      	beq.n	8022108 <lv_tlsf_realloc+0x90>
 8022106:	e7fe      	b.n	8022106 <lv_tlsf_realloc+0x8e>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8022108:	697a      	ldr	r2, [r7, #20]
 802210a:	69fb      	ldr	r3, [r7, #28]
 802210c:	429a      	cmp	r2, r3
 802210e:	d921      	bls.n	8022154 <lv_tlsf_realloc+0xdc>
 8022110:	6a38      	ldr	r0, [r7, #32]
 8022112:	f7ff fa4e 	bl	80215b2 <block_is_free>
 8022116:	4603      	mov	r3, r0
 8022118:	2b00      	cmp	r3, #0
 802211a:	d003      	beq.n	8022124 <lv_tlsf_realloc+0xac>
 802211c:	697a      	ldr	r2, [r7, #20]
 802211e:	69bb      	ldr	r3, [r7, #24]
 8022120:	429a      	cmp	r2, r3
 8022122:	d917      	bls.n	8022154 <lv_tlsf_realloc+0xdc>
            p = lv_tlsf_malloc(tlsf, size);
 8022124:	6879      	ldr	r1, [r7, #4]
 8022126:	68f8      	ldr	r0, [r7, #12]
 8022128:	f7ff ff5b 	bl	8021fe2 <lv_tlsf_malloc>
 802212c:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(p) {
 802212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022130:	2b00      	cmp	r3, #0
 8022132:	d021      	beq.n	8022178 <lv_tlsf_realloc+0x100>
                const size_t minsize = tlsf_min(cursize, size);
 8022134:	687a      	ldr	r2, [r7, #4]
 8022136:	69fb      	ldr	r3, [r7, #28]
 8022138:	4293      	cmp	r3, r2
 802213a:	bf28      	it	cs
 802213c:	4613      	movcs	r3, r2
 802213e:	613b      	str	r3, [r7, #16]
                lv_memcpy(p, ptr, minsize);
 8022140:	693a      	ldr	r2, [r7, #16]
 8022142:	68b9      	ldr	r1, [r7, #8]
 8022144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022146:	f7fe f8b7 	bl	80202b8 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 802214a:	68b9      	ldr	r1, [r7, #8]
 802214c:	68f8      	ldr	r0, [r7, #12]
 802214e:	f7ff ff63 	bl	8022018 <lv_tlsf_free>
            if(p) {
 8022152:	e011      	b.n	8022178 <lv_tlsf_realloc+0x100>
            }
        }
        else {
            /* Do we need to expand to the next block? */
            if(adjust > cursize) {
 8022154:	697a      	ldr	r2, [r7, #20]
 8022156:	69fb      	ldr	r3, [r7, #28]
 8022158:	429a      	cmp	r2, r3
 802215a:	d906      	bls.n	802216a <lv_tlsf_realloc+0xf2>
                block_merge_next(control, block);
 802215c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802215e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022160:	f7ff fdab 	bl	8021cba <block_merge_next>
                block_mark_as_used(block);
 8022164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022166:	f7ff fafd 	bl	8021764 <block_mark_as_used>
            }

            /* Trim the resulting block and return the original pointer. */
            block_trim_used(control, block, adjust);
 802216a:	697a      	ldr	r2, [r7, #20]
 802216c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802216e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022170:	f7ff fdf2 	bl	8021d58 <block_trim_used>
            p = ptr;
 8022174:	68bb      	ldr	r3, [r7, #8]
 8022176:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    return p;
 8022178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802217a:	4618      	mov	r0, r3
 802217c:	3730      	adds	r7, #48	; 0x30
 802217e:	46bd      	mov	sp, r7
 8022180:	bd80      	pop	{r7, pc}

08022182 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8022182:	b480      	push	{r7}
 8022184:	b083      	sub	sp, #12
 8022186:	af00      	add	r7, sp, #0
 8022188:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8022190:	4618      	mov	r0, r3
 8022192:	370c      	adds	r7, #12
 8022194:	46bd      	mov	sp, r7
 8022196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802219a:	4770      	bx	lr

0802219c <_lv_txt_is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool _lv_txt_is_break_char(uint32_t letter)
{
 802219c:	b480      	push	{r7}
 802219e:	b085      	sub	sp, #20
 80221a0:	af00      	add	r7, sp, #0
 80221a2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 80221a4:	2300      	movs	r3, #0
 80221a6:	73bb      	strb	r3, [r7, #14]

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 80221a8:	687b      	ldr	r3, [r7, #4]
 80221aa:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 80221ae:	d306      	bcc.n	80221be <_lv_txt_is_break_char+0x22>
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	f649 72a5 	movw	r2, #40869	; 0x9fa5
 80221b6:	4293      	cmp	r3, r2
 80221b8:	d801      	bhi.n	80221be <_lv_txt_is_break_char+0x22>
        return true;
 80221ba:	2301      	movs	r3, #1
 80221bc:	e015      	b.n	80221ea <_lv_txt_is_break_char+0x4e>
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80221be:	2300      	movs	r3, #0
 80221c0:	73fb      	strb	r3, [r7, #15]
 80221c2:	e00c      	b.n	80221de <_lv_txt_is_break_char+0x42>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 80221c4:	7bfb      	ldrb	r3, [r7, #15]
 80221c6:	4a0c      	ldr	r2, [pc, #48]	; (80221f8 <_lv_txt_is_break_char+0x5c>)
 80221c8:	5cd3      	ldrb	r3, [r2, r3]
 80221ca:	461a      	mov	r2, r3
 80221cc:	687b      	ldr	r3, [r7, #4]
 80221ce:	4293      	cmp	r3, r2
 80221d0:	d102      	bne.n	80221d8 <_lv_txt_is_break_char+0x3c>
            ret = true; /*If match then it is break char*/
 80221d2:	2301      	movs	r3, #1
 80221d4:	73bb      	strb	r3, [r7, #14]
            break;
 80221d6:	e007      	b.n	80221e8 <_lv_txt_is_break_char+0x4c>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80221d8:	7bfb      	ldrb	r3, [r7, #15]
 80221da:	3301      	adds	r3, #1
 80221dc:	73fb      	strb	r3, [r7, #15]
 80221de:	7bfb      	ldrb	r3, [r7, #15]
 80221e0:	4a05      	ldr	r2, [pc, #20]	; (80221f8 <_lv_txt_is_break_char+0x5c>)
 80221e2:	5cd3      	ldrb	r3, [r2, r3]
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d1ed      	bne.n	80221c4 <_lv_txt_is_break_char+0x28>
        }
    }

    return ret;
 80221e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80221ea:	4618      	mov	r0, r3
 80221ec:	3714      	adds	r7, #20
 80221ee:	46bd      	mov	sp, r7
 80221f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221f4:	4770      	bx	lr
 80221f6:	bf00      	nop
 80221f8:	08022c30 	.word	0x08022c30

080221fc <lv_txt_get_size>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_text_flag_t flag)
{
 80221fc:	b580      	push	{r7, lr}
 80221fe:	b08a      	sub	sp, #40	; 0x28
 8022200:	af02      	add	r7, sp, #8
 8022202:	60f8      	str	r0, [r7, #12]
 8022204:	60b9      	str	r1, [r7, #8]
 8022206:	607a      	str	r2, [r7, #4]
 8022208:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 802220a:	68fb      	ldr	r3, [r7, #12]
 802220c:	2200      	movs	r2, #0
 802220e:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 8022210:	68fb      	ldr	r3, [r7, #12]
 8022212:	2200      	movs	r2, #0
 8022214:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 8022216:	68bb      	ldr	r3, [r7, #8]
 8022218:	2b00      	cmp	r3, #0
 802221a:	f000 80a2 	beq.w	8022362 <lv_txt_get_size+0x166>
    if(font == NULL) return;
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	2b00      	cmp	r3, #0
 8022222:	f000 80a0 	beq.w	8022366 <lv_txt_get_size+0x16a>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8022226:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 802222a:	f003 0302 	and.w	r3, r3, #2
 802222e:	2b00      	cmp	r3, #0
 8022230:	d002      	beq.n	8022238 <lv_txt_get_size+0x3c>
 8022232:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8022236:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 8022238:	2300      	movs	r3, #0
 802223a:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 802223c:	2300      	movs	r3, #0
 802223e:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 8022240:	6878      	ldr	r0, [r7, #4]
 8022242:	f7ff ff9e 	bl	8022182 <lv_font_get_line_height>
 8022246:	4603      	mov	r3, r0
 8022248:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 802224a:	e051      	b.n	80222f0 <lv_txt_get_size+0xf4>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 802224c:	68ba      	ldr	r2, [r7, #8]
 802224e:	69fb      	ldr	r3, [r7, #28]
 8022250:	18d0      	adds	r0, r2, r3
 8022252:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8022256:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 802225a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 802225e:	9301      	str	r3, [sp, #4]
 8022260:	2300      	movs	r3, #0
 8022262:	9300      	str	r3, [sp, #0]
 8022264:	460b      	mov	r3, r1
 8022266:	6879      	ldr	r1, [r7, #4]
 8022268:	f000 f964 	bl	8022534 <_lv_txt_get_next_line>
 802226c:	4602      	mov	r2, r0
 802226e:	69bb      	ldr	r3, [r7, #24]
 8022270:	4413      	add	r3, r2
 8022272:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8022274:	68fb      	ldr	r3, [r7, #12]
 8022276:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802227a:	461a      	mov	r2, r3
 802227c:	8afb      	ldrh	r3, [r7, #22]
 802227e:	441a      	add	r2, r3
 8022280:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8022284:	4413      	add	r3, r2
 8022286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802228a:	d26e      	bcs.n	802236a <lv_txt_get_size+0x16e>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 802228c:	68fb      	ldr	r3, [r7, #12]
 802228e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022292:	b29a      	uxth	r2, r3
 8022294:	8afb      	ldrh	r3, [r7, #22]
 8022296:	4413      	add	r3, r2
 8022298:	b29b      	uxth	r3, r3
 802229a:	b21a      	sxth	r2, r3
 802229c:	68fb      	ldr	r3, [r7, #12]
 802229e:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 80222a0:	68fb      	ldr	r3, [r7, #12]
 80222a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80222a6:	b29a      	uxth	r2, r3
 80222a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80222aa:	4413      	add	r3, r2
 80222ac:	b29b      	uxth	r3, r3
 80222ae:	b21a      	sxth	r2, r3
 80222b0:	68fb      	ldr	r3, [r7, #12]
 80222b2:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 80222b4:	68ba      	ldr	r2, [r7, #8]
 80222b6:	69fb      	ldr	r3, [r7, #28]
 80222b8:	18d0      	adds	r0, r2, r3
 80222ba:	69ba      	ldr	r2, [r7, #24]
 80222bc:	69fb      	ldr	r3, [r7, #28]
 80222be:	1ad1      	subs	r1, r2, r3
 80222c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80222c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80222c8:	9300      	str	r3, [sp, #0]
 80222ca:	4613      	mov	r3, r2
 80222cc:	687a      	ldr	r2, [r7, #4]
 80222ce:	f000 fa0f 	bl	80226f0 <lv_txt_get_width>
 80222d2:	4603      	mov	r3, r0
 80222d4:	82bb      	strh	r3, [r7, #20]
                                                      flag);

        size_res->x = LV_MAX(act_line_length, size_res->x);
 80222d6:	68fb      	ldr	r3, [r7, #12]
 80222d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80222dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80222e0:	4293      	cmp	r3, r2
 80222e2:	bfb8      	it	lt
 80222e4:	4613      	movlt	r3, r2
 80222e6:	b21a      	sxth	r2, r3
 80222e8:	68fb      	ldr	r3, [r7, #12]
 80222ea:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 80222ec:	69bb      	ldr	r3, [r7, #24]
 80222ee:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 80222f0:	68ba      	ldr	r2, [r7, #8]
 80222f2:	69fb      	ldr	r3, [r7, #28]
 80222f4:	4413      	add	r3, r2
 80222f6:	781b      	ldrb	r3, [r3, #0]
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d1a7      	bne.n	802224c <lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80222fc:	69fb      	ldr	r3, [r7, #28]
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d01a      	beq.n	8022338 <lv_txt_get_size+0x13c>
 8022302:	69fb      	ldr	r3, [r7, #28]
 8022304:	3b01      	subs	r3, #1
 8022306:	68ba      	ldr	r2, [r7, #8]
 8022308:	4413      	add	r3, r2
 802230a:	781b      	ldrb	r3, [r3, #0]
 802230c:	2b0a      	cmp	r3, #10
 802230e:	d006      	beq.n	802231e <lv_txt_get_size+0x122>
 8022310:	69fb      	ldr	r3, [r7, #28]
 8022312:	3b01      	subs	r3, #1
 8022314:	68ba      	ldr	r2, [r7, #8]
 8022316:	4413      	add	r3, r2
 8022318:	781b      	ldrb	r3, [r3, #0]
 802231a:	2b0d      	cmp	r3, #13
 802231c:	d10c      	bne.n	8022338 <lv_txt_get_size+0x13c>
        size_res->y += letter_height + line_space;
 802231e:	68fb      	ldr	r3, [r7, #12]
 8022320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022324:	b29a      	uxth	r2, r3
 8022326:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8022328:	8afb      	ldrh	r3, [r7, #22]
 802232a:	440b      	add	r3, r1
 802232c:	b29b      	uxth	r3, r3
 802232e:	4413      	add	r3, r2
 8022330:	b29b      	uxth	r3, r3
 8022332:	b21a      	sxth	r2, r3
 8022334:	68fb      	ldr	r3, [r7, #12]
 8022336:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 8022338:	68fb      	ldr	r3, [r7, #12]
 802233a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802233e:	2b00      	cmp	r3, #0
 8022340:	d104      	bne.n	802234c <lv_txt_get_size+0x150>
        size_res->y = letter_height;
 8022342:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022346:	68fb      	ldr	r3, [r7, #12]
 8022348:	805a      	strh	r2, [r3, #2]
 802234a:	e00f      	b.n	802236c <lv_txt_get_size+0x170>
    else
        size_res->y -= line_space;
 802234c:	68fb      	ldr	r3, [r7, #12]
 802234e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022352:	b29a      	uxth	r2, r3
 8022354:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8022356:	1ad3      	subs	r3, r2, r3
 8022358:	b29b      	uxth	r3, r3
 802235a:	b21a      	sxth	r2, r3
 802235c:	68fb      	ldr	r3, [r7, #12]
 802235e:	805a      	strh	r2, [r3, #2]
 8022360:	e004      	b.n	802236c <lv_txt_get_size+0x170>
    if(text == NULL) return;
 8022362:	bf00      	nop
 8022364:	e002      	b.n	802236c <lv_txt_get_size+0x170>
    if(font == NULL) return;
 8022366:	bf00      	nop
 8022368:	e000      	b.n	802236c <lv_txt_get_size+0x170>
            return;
 802236a:	bf00      	nop
}
 802236c:	3720      	adds	r7, #32
 802236e:	46bd      	mov	sp, r7
 8022370:	bd80      	pop	{r7, pc}
	...

08022374 <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_text_flag_t flag, uint32_t * word_w_ptr, lv_text_cmd_state_t * cmd_state, bool force)
{
 8022374:	b580      	push	{r7, lr}
 8022376:	b08e      	sub	sp, #56	; 0x38
 8022378:	af00      	add	r7, sp, #0
 802237a:	60f8      	str	r0, [r7, #12]
 802237c:	60b9      	str	r1, [r7, #8]
 802237e:	4611      	mov	r1, r2
 8022380:	461a      	mov	r2, r3
 8022382:	460b      	mov	r3, r1
 8022384:	80fb      	strh	r3, [r7, #6]
 8022386:	4613      	mov	r3, r2
 8022388:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 802238a:	68fb      	ldr	r3, [r7, #12]
 802238c:	2b00      	cmp	r3, #0
 802238e:	d003      	beq.n	8022398 <lv_txt_get_next_word+0x24>
 8022390:	68fb      	ldr	r3, [r7, #12]
 8022392:	781b      	ldrb	r3, [r3, #0]
 8022394:	2b00      	cmp	r3, #0
 8022396:	d101      	bne.n	802239c <lv_txt_get_next_word+0x28>
 8022398:	2300      	movs	r3, #0
 802239a:	e0c4      	b.n	8022526 <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 802239c:	68bb      	ldr	r3, [r7, #8]
 802239e:	2b00      	cmp	r3, #0
 80223a0:	d101      	bne.n	80223a6 <lv_txt_get_next_word+0x32>
 80223a2:	2300      	movs	r3, #0
 80223a4:	e0bf      	b.n	8022526 <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80223a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80223aa:	f003 0302 	and.w	r3, r3, #2
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	d002      	beq.n	80223b8 <lv_txt_get_next_word+0x44>
 80223b2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80223b6:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 80223b8:	2300      	movs	r3, #0
 80223ba:	637b      	str	r3, [r7, #52]	; 0x34
 80223bc:	2300      	movs	r3, #0
 80223be:	617b      	str	r3, [r7, #20]
 80223c0:	2300      	movs	r3, #0
 80223c2:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /*Letter at i*/
 80223c4:	2300      	movs	r3, #0
 80223c6:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /*Letter at i_next*/
 80223c8:	2300      	movs	r3, #0
 80223ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 80223cc:	2300      	movs	r3, #0
 80223ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 80223d0:	2300      	movs	r3, #0
 80223d2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 80223d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80223d8:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /*Number of characters up to the long word break point*/
 80223da:	2300      	movs	r3, #0
 80223dc:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 80223de:	4b54      	ldr	r3, [pc, #336]	; (8022530 <lv_txt_get_next_word+0x1bc>)
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	f107 0214 	add.w	r2, r7, #20
 80223e6:	4611      	mov	r1, r2
 80223e8:	68f8      	ldr	r0, [r7, #12]
 80223ea:	4798      	blx	r3
 80223ec:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 80223ee:	697b      	ldr	r3, [r7, #20]
 80223f0:	613b      	str	r3, [r7, #16]

    /*Obtain the full word, regardless if it fits or not in max_width*/
    while(txt[i] != '\0') {
 80223f2:	e074      	b.n	80224de <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80223f4:	4b4e      	ldr	r3, [pc, #312]	; (8022530 <lv_txt_get_next_word+0x1bc>)
 80223f6:	681b      	ldr	r3, [r3, #0]
 80223f8:	f107 0210 	add.w	r2, r7, #16
 80223fc:	4611      	mov	r1, r2
 80223fe:	68f8      	ldr	r0, [r7, #12]
 8022400:	4798      	blx	r3
 8022402:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 8022404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022406:	3301      	adds	r3, #1
 8022408:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802240a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 802240e:	f003 0301 	and.w	r3, r3, #1
 8022412:	2b00      	cmp	r3, #0
 8022414:	d00d      	beq.n	8022432 <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8022416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8022418:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 802241a:	f000 f9cd 	bl	80227b8 <_lv_txt_is_cmd>
 802241e:	4603      	mov	r3, r0
 8022420:	2b00      	cmp	r3, #0
 8022422:	d006      	beq.n	8022432 <lv_txt_get_next_word+0xbe>
                i = i_next;
 8022424:	697b      	ldr	r3, [r7, #20]
 8022426:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 8022428:	693b      	ldr	r3, [r7, #16]
 802242a:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 802242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802242e:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter if it is part of a command*/
 8022430:	e055      	b.n	80224de <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8022432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8022436:	68b8      	ldr	r0, [r7, #8]
 8022438:	f7fb f936 	bl	801d6a8 <lv_font_get_glyph_width>
 802243c:	4603      	mov	r3, r0
 802243e:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 8022440:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8022442:	8b7b      	ldrh	r3, [r7, #26]
 8022444:	4413      	add	r3, r2
 8022446:	b29b      	uxth	r3, r3
 8022448:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 802244a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 802244e:	2b00      	cmp	r3, #0
 8022450:	dd04      	ble.n	802245c <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 8022452:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8022454:	88fb      	ldrh	r3, [r7, #6]
 8022456:	4413      	add	r3, r2
 8022458:	b29b      	uxth	r3, r3
 802245a:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /*Test if this character fits within max_width*/
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 802245c:	6a3b      	ldr	r3, [r7, #32]
 802245e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8022462:	d10d      	bne.n	8022480 <lv_txt_get_next_word+0x10c>
 8022464:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8022468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802246c:	1ad2      	subs	r2, r2, r3
 802246e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8022472:	429a      	cmp	r2, r3
 8022474:	dd04      	ble.n	8022480 <lv_txt_get_next_word+0x10c>
            break_index = i;
 8022476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022478:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 802247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802247c:	3b01      	subs	r3, #1
 802247e:	61fb      	str	r3, [r7, #28]
            /*break_index is now pointing at the character that doesn't fit*/
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8022480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022482:	2b0a      	cmp	r3, #10
 8022484:	d008      	beq.n	8022498 <lv_txt_get_next_word+0x124>
 8022486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022488:	2b0d      	cmp	r3, #13
 802248a:	d005      	beq.n	8022498 <lv_txt_get_next_word+0x124>
 802248c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802248e:	f7ff fe85 	bl	802219c <_lv_txt_is_break_char>
 8022492:	4603      	mov	r3, r0
 8022494:	2b00      	cmp	r3, #0
 8022496:	d011      	beq.n	80224bc <lv_txt_get_next_word+0x148>
            /*Update the output width on the first character if it fits.
             *Must do this here in case first letter is a break character.*/
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8022498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802249a:	2b00      	cmp	r3, #0
 802249c:	d10a      	bne.n	80224b4 <lv_txt_get_next_word+0x140>
 802249e:	6a3b      	ldr	r3, [r7, #32]
 80224a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80224a4:	d106      	bne.n	80224b4 <lv_txt_get_next_word+0x140>
 80224a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	d003      	beq.n	80224b4 <lv_txt_get_next_word+0x140>
 80224ac:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80224b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80224b2:	601a      	str	r2, [r3, #0]
            word_len--;
 80224b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224b6:	3b01      	subs	r3, #1
 80224b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80224ba:	e016      	b.n	80224ea <lv_txt_get_next_word+0x176>
        }

        /*Update the output width*/
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 80224bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d007      	beq.n	80224d2 <lv_txt_get_next_word+0x15e>
 80224c2:	6a3b      	ldr	r3, [r7, #32]
 80224c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80224c8:	d103      	bne.n	80224d2 <lv_txt_get_next_word+0x15e>
 80224ca:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80224ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80224d0:	601a      	str	r2, [r3, #0]

        i = i_next;
 80224d2:	697b      	ldr	r3, [r7, #20]
 80224d4:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 80224d6:	693b      	ldr	r3, [r7, #16]
 80224d8:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 80224da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80224dc:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 80224de:	68fa      	ldr	r2, [r7, #12]
 80224e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80224e2:	4413      	add	r3, r2
 80224e4:	781b      	ldrb	r3, [r3, #0]
 80224e6:	2b00      	cmp	r3, #0
 80224e8:	d184      	bne.n	80223f4 <lv_txt_get_next_word+0x80>
    }

    /*Entire Word fits in the provided space*/
    if(break_index == NO_BREAK_FOUND) {
 80224ea:	6a3b      	ldr	r3, [r7, #32]
 80224ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80224f0:	d10c      	bne.n	802250c <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 80224f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d005      	beq.n	8022504 <lv_txt_get_next_word+0x190>
 80224f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224fa:	2b0d      	cmp	r3, #13
 80224fc:	d104      	bne.n	8022508 <lv_txt_get_next_word+0x194>
 80224fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022500:	2b0a      	cmp	r3, #10
 8022502:	d101      	bne.n	8022508 <lv_txt_get_next_word+0x194>
 8022504:	697b      	ldr	r3, [r7, #20]
 8022506:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 8022508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802250a:	e00c      	b.n	8022526 <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 802250c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8022510:	2b00      	cmp	r3, #0
 8022512:	d001      	beq.n	8022518 <lv_txt_get_next_word+0x1a4>
 8022514:	6a3b      	ldr	r3, [r7, #32]
 8022516:	e006      	b.n	8022526 <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 8022518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802251a:	2b00      	cmp	r3, #0
 802251c:	d002      	beq.n	8022524 <lv_txt_get_next_word+0x1b0>
 802251e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022520:	2200      	movs	r2, #0
 8022522:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 8022524:	2300      	movs	r3, #0
#endif
}
 8022526:	4618      	mov	r0, r3
 8022528:	3738      	adds	r7, #56	; 0x38
 802252a:	46bd      	mov	sp, r7
 802252c:	bd80      	pop	{r7, pc}
 802252e:	bf00      	nop
 8022530:	20000018 	.word	0x20000018

08022534 <_lv_txt_get_next_line>:

uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width,
                               lv_coord_t * used_width, lv_text_flag_t flag)
{
 8022534:	b580      	push	{r7, lr}
 8022536:	b090      	sub	sp, #64	; 0x40
 8022538:	af04      	add	r7, sp, #16
 802253a:	60f8      	str	r0, [r7, #12]
 802253c:	60b9      	str	r1, [r7, #8]
 802253e:	4611      	mov	r1, r2
 8022540:	461a      	mov	r2, r3
 8022542:	460b      	mov	r3, r1
 8022544:	80fb      	strh	r3, [r7, #6]
 8022546:	4613      	mov	r3, r2
 8022548:	80bb      	strh	r3, [r7, #4]
    if(used_width) *used_width = 0;
 802254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802254c:	2b00      	cmp	r3, #0
 802254e:	d002      	beq.n	8022556 <_lv_txt_get_next_line+0x22>
 8022550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022552:	2200      	movs	r2, #0
 8022554:	801a      	strh	r2, [r3, #0]

    if(txt == NULL) return 0;
 8022556:	68fb      	ldr	r3, [r7, #12]
 8022558:	2b00      	cmp	r3, #0
 802255a:	d101      	bne.n	8022560 <_lv_txt_get_next_line+0x2c>
 802255c:	2300      	movs	r3, #0
 802255e:	e0c1      	b.n	80226e4 <_lv_txt_get_next_line+0x1b0>
    if(txt[0] == '\0') return 0;
 8022560:	68fb      	ldr	r3, [r7, #12]
 8022562:	781b      	ldrb	r3, [r3, #0]
 8022564:	2b00      	cmp	r3, #0
 8022566:	d101      	bne.n	802256c <_lv_txt_get_next_line+0x38>
 8022568:	2300      	movs	r3, #0
 802256a:	e0bb      	b.n	80226e4 <_lv_txt_get_next_line+0x1b0>
    if(font == NULL) return 0;
 802256c:	68bb      	ldr	r3, [r7, #8]
 802256e:	2b00      	cmp	r3, #0
 8022570:	d101      	bne.n	8022576 <_lv_txt_get_next_line+0x42>
 8022572:	2300      	movs	r3, #0
 8022574:	e0b6      	b.n	80226e4 <_lv_txt_get_next_line+0x1b0>

    lv_coord_t line_w = 0;
 8022576:	2300      	movs	r3, #0
 8022578:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /*If max_width doesn't mater simply find the new line character
     *without thinking about word wrapping*/
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 802257a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802257e:	f003 0302 	and.w	r3, r3, #2
 8022582:	2b00      	cmp	r3, #0
 8022584:	d105      	bne.n	8022592 <_lv_txt_get_next_line+0x5e>
 8022586:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802258a:	f003 0304 	and.w	r3, r3, #4
 802258e:	2b00      	cmp	r3, #0
 8022590:	d029      	beq.n	80225e6 <_lv_txt_get_next_line+0xb2>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8022592:	2300      	movs	r3, #0
 8022594:	62bb      	str	r3, [r7, #40]	; 0x28
 8022596:	e002      	b.n	802259e <_lv_txt_get_next_line+0x6a>
 8022598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802259a:	3301      	adds	r3, #1
 802259c:	62bb      	str	r3, [r7, #40]	; 0x28
 802259e:	68fa      	ldr	r2, [r7, #12]
 80225a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80225a2:	4413      	add	r3, r2
 80225a4:	781b      	ldrb	r3, [r3, #0]
 80225a6:	2b0a      	cmp	r3, #10
 80225a8:	d00b      	beq.n	80225c2 <_lv_txt_get_next_line+0x8e>
 80225aa:	68fa      	ldr	r2, [r7, #12]
 80225ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80225ae:	4413      	add	r3, r2
 80225b0:	781b      	ldrb	r3, [r3, #0]
 80225b2:	2b0d      	cmp	r3, #13
 80225b4:	d005      	beq.n	80225c2 <_lv_txt_get_next_line+0x8e>
 80225b6:	68fa      	ldr	r2, [r7, #12]
 80225b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80225ba:	4413      	add	r3, r2
 80225bc:	781b      	ldrb	r3, [r3, #0]
 80225be:	2b00      	cmp	r3, #0
 80225c0:	d1ea      	bne.n	8022598 <_lv_txt_get_next_line+0x64>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 80225c2:	68fa      	ldr	r2, [r7, #12]
 80225c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80225c6:	4413      	add	r3, r2
 80225c8:	781b      	ldrb	r3, [r3, #0]
 80225ca:	2b00      	cmp	r3, #0
 80225cc:	d002      	beq.n	80225d4 <_lv_txt_get_next_line+0xa0>
 80225ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80225d0:	3301      	adds	r3, #1
 80225d2:	62bb      	str	r3, [r7, #40]	; 0x28
        if(used_width) *used_width = -1;
 80225d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80225d6:	2b00      	cmp	r3, #0
 80225d8:	d003      	beq.n	80225e2 <_lv_txt_get_next_line+0xae>
 80225da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80225dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80225e0:	801a      	strh	r2, [r3, #0]
        return i;
 80225e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80225e4:	e07e      	b.n	80226e4 <_lv_txt_get_next_line+0x1b0>
    }

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80225e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80225ea:	f003 0302 	and.w	r3, r3, #2
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	d002      	beq.n	80225f8 <_lv_txt_get_next_line+0xc4>
 80225f2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80225f6:	80bb      	strh	r3, [r7, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80225f8:	2300      	movs	r3, #0
 80225fa:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80225fc:	2300      	movs	r3, #0
 80225fe:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 8022600:	e048      	b.n	8022694 <_lv_txt_get_next_line+0x160>
        uint32_t word_w = 0;
 8022602:	2300      	movs	r3, #0
 8022604:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 8022606:	69bb      	ldr	r3, [r7, #24]
 8022608:	68fa      	ldr	r2, [r7, #12]
 802260a:	18d0      	adds	r0, r2, r3
 802260c:	69bb      	ldr	r3, [r7, #24]
 802260e:	2b00      	cmp	r3, #0
 8022610:	bf0c      	ite	eq
 8022612:	2301      	moveq	r3, #1
 8022614:	2300      	movne	r3, #0
 8022616:	b2db      	uxtb	r3, r3
 8022618:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 802261c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022620:	9303      	str	r3, [sp, #12]
 8022622:	f107 031f 	add.w	r3, r7, #31
 8022626:	9302      	str	r3, [sp, #8]
 8022628:	f107 0314 	add.w	r3, r7, #20
 802262c:	9301      	str	r3, [sp, #4]
 802262e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8022632:	9300      	str	r3, [sp, #0]
 8022634:	460b      	mov	r3, r1
 8022636:	68b9      	ldr	r1, [r7, #8]
 8022638:	f7ff fe9c 	bl	8022374 <lv_txt_get_next_word>
 802263c:	6278      	str	r0, [r7, #36]	; 0x24
        max_width -= word_w;
 802263e:	88ba      	ldrh	r2, [r7, #4]
 8022640:	697b      	ldr	r3, [r7, #20]
 8022642:	b29b      	uxth	r3, r3
 8022644:	1ad3      	subs	r3, r2, r3
 8022646:	b29b      	uxth	r3, r3
 8022648:	80bb      	strh	r3, [r7, #4]
        line_w += word_w;
 802264a:	697b      	ldr	r3, [r7, #20]
 802264c:	b29a      	uxth	r2, r3
 802264e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022650:	4413      	add	r3, r2
 8022652:	b29b      	uxth	r3, r3
 8022654:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(advance == 0) {
 8022656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022658:	2b00      	cmp	r3, #0
 802265a:	d026      	beq.n	80226aa <_lv_txt_get_next_line+0x176>
            break;
        }

        i += advance;
 802265c:	69ba      	ldr	r2, [r7, #24]
 802265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022660:	4413      	add	r3, r2
 8022662:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 8022664:	68fb      	ldr	r3, [r7, #12]
 8022666:	781b      	ldrb	r3, [r3, #0]
 8022668:	2b0a      	cmp	r3, #10
 802266a:	d01e      	beq.n	80226aa <_lv_txt_get_next_line+0x176>
 802266c:	68fb      	ldr	r3, [r7, #12]
 802266e:	781b      	ldrb	r3, [r3, #0]
 8022670:	2b0d      	cmp	r3, #13
 8022672:	d01a      	beq.n	80226aa <_lv_txt_get_next_line+0x176>

        if(txt[i] == '\n' || txt[i] == '\r') {
 8022674:	69bb      	ldr	r3, [r7, #24]
 8022676:	68fa      	ldr	r2, [r7, #12]
 8022678:	4413      	add	r3, r2
 802267a:	781b      	ldrb	r3, [r3, #0]
 802267c:	2b0a      	cmp	r3, #10
 802267e:	d005      	beq.n	802268c <_lv_txt_get_next_line+0x158>
 8022680:	69bb      	ldr	r3, [r7, #24]
 8022682:	68fa      	ldr	r2, [r7, #12]
 8022684:	4413      	add	r3, r2
 8022686:	781b      	ldrb	r3, [r3, #0]
 8022688:	2b0d      	cmp	r3, #13
 802268a:	d103      	bne.n	8022694 <_lv_txt_get_next_line+0x160>
            i++;  /*Include the following newline in the current line*/
 802268c:	69bb      	ldr	r3, [r7, #24]
 802268e:	3301      	adds	r3, #1
 8022690:	61bb      	str	r3, [r7, #24]
            break;
 8022692:	e00b      	b.n	80226ac <_lv_txt_get_next_line+0x178>
    while(txt[i] != '\0' && max_width > 0) {
 8022694:	69bb      	ldr	r3, [r7, #24]
 8022696:	68fa      	ldr	r2, [r7, #12]
 8022698:	4413      	add	r3, r2
 802269a:	781b      	ldrb	r3, [r3, #0]
 802269c:	2b00      	cmp	r3, #0
 802269e:	d005      	beq.n	80226ac <_lv_txt_get_next_line+0x178>
 80226a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	dcac      	bgt.n	8022602 <_lv_txt_get_next_line+0xce>
 80226a8:	e000      	b.n	80226ac <_lv_txt_get_next_line+0x178>
            break;
 80226aa:	bf00      	nop
        }

    }

    /*Always step at least one to avoid infinite loops*/
    if(i == 0) {
 80226ac:	69bb      	ldr	r3, [r7, #24]
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	d111      	bne.n	80226d6 <_lv_txt_get_next_line+0x1a2>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80226b2:	4b0e      	ldr	r3, [pc, #56]	; (80226ec <_lv_txt_get_next_line+0x1b8>)
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	f107 0218 	add.w	r2, r7, #24
 80226ba:	4611      	mov	r1, r2
 80226bc:	68f8      	ldr	r0, [r7, #12]
 80226be:	4798      	blx	r3
 80226c0:	6238      	str	r0, [r7, #32]
        if(used_width != NULL) {
 80226c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	d006      	beq.n	80226d6 <_lv_txt_get_next_line+0x1a2>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 80226c8:	2200      	movs	r2, #0
 80226ca:	6a39      	ldr	r1, [r7, #32]
 80226cc:	68b8      	ldr	r0, [r7, #8]
 80226ce:	f7fa ffeb 	bl	801d6a8 <lv_font_get_glyph_width>
 80226d2:	4603      	mov	r3, r0
 80226d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(used_width != NULL) {
 80226d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80226d8:	2b00      	cmp	r3, #0
 80226da:	d002      	beq.n	80226e2 <_lv_txt_get_next_line+0x1ae>
        *used_width = line_w;
 80226dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80226de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80226e0:	801a      	strh	r2, [r3, #0]
    }

    return i;
 80226e2:	69bb      	ldr	r3, [r7, #24]
}
 80226e4:	4618      	mov	r0, r3
 80226e6:	3730      	adds	r7, #48	; 0x30
 80226e8:	46bd      	mov	sp, r7
 80226ea:	bd80      	pop	{r7, pc}
 80226ec:	20000018 	.word	0x20000018

080226f0 <lv_txt_get_width>:

lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_text_flag_t flag)
{
 80226f0:	b580      	push	{r7, lr}
 80226f2:	b08a      	sub	sp, #40	; 0x28
 80226f4:	af00      	add	r7, sp, #0
 80226f6:	60f8      	str	r0, [r7, #12]
 80226f8:	60b9      	str	r1, [r7, #8]
 80226fa:	607a      	str	r2, [r7, #4]
 80226fc:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 80226fe:	68fb      	ldr	r3, [r7, #12]
 8022700:	2b00      	cmp	r3, #0
 8022702:	d101      	bne.n	8022708 <lv_txt_get_width+0x18>
 8022704:	2300      	movs	r3, #0
 8022706:	e053      	b.n	80227b0 <lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	2b00      	cmp	r3, #0
 802270c:	d101      	bne.n	8022712 <lv_txt_get_width+0x22>
 802270e:	2300      	movs	r3, #0
 8022710:	e04e      	b.n	80227b0 <lv_txt_get_width+0xc0>
    if(txt[0] == '\0') return 0;
 8022712:	68fb      	ldr	r3, [r7, #12]
 8022714:	781b      	ldrb	r3, [r3, #0]
 8022716:	2b00      	cmp	r3, #0
 8022718:	d101      	bne.n	802271e <lv_txt_get_width+0x2e>
 802271a:	2300      	movs	r3, #0
 802271c:	e048      	b.n	80227b0 <lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 802271e:	2300      	movs	r3, #0
 8022720:	623b      	str	r3, [r7, #32]
    lv_coord_t width             = 0;
 8022722:	2300      	movs	r3, #0
 8022724:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8022726:	2300      	movs	r3, #0
 8022728:	77fb      	strb	r3, [r7, #31]

    if(length != 0) {
 802272a:	68bb      	ldr	r3, [r7, #8]
 802272c:	2b00      	cmp	r3, #0
 802272e:	d03d      	beq.n	80227ac <lv_txt_get_width+0xbc>
        while(i < length) {
 8022730:	e02f      	b.n	8022792 <lv_txt_get_width+0xa2>
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8022732:	f107 0320 	add.w	r3, r7, #32
 8022736:	f107 0214 	add.w	r2, r7, #20
 802273a:	f107 0118 	add.w	r1, r7, #24
 802273e:	68f8      	ldr	r0, [r7, #12]
 8022740:	f000 f874 	bl	802282c <_lv_txt_encoded_letter_next_2>

            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8022744:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8022748:	f003 0301 	and.w	r3, r3, #1
 802274c:	2b00      	cmp	r3, #0
 802274e:	d00a      	beq.n	8022766 <lv_txt_get_width+0x76>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8022750:	69ba      	ldr	r2, [r7, #24]
 8022752:	f107 031f 	add.w	r3, r7, #31
 8022756:	4611      	mov	r1, r2
 8022758:	4618      	mov	r0, r3
 802275a:	f000 f82d 	bl	80227b8 <_lv_txt_is_cmd>
 802275e:	4603      	mov	r3, r0
 8022760:	2b00      	cmp	r3, #0
 8022762:	d000      	beq.n	8022766 <lv_txt_get_width+0x76>
 8022764:	e015      	b.n	8022792 <lv_txt_get_width+0xa2>
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8022766:	69bb      	ldr	r3, [r7, #24]
 8022768:	697a      	ldr	r2, [r7, #20]
 802276a:	4619      	mov	r1, r3
 802276c:	6878      	ldr	r0, [r7, #4]
 802276e:	f7fa ff9b 	bl	801d6a8 <lv_font_get_glyph_width>
 8022772:	4603      	mov	r3, r0
 8022774:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(char_width > 0) {
 8022776:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 802277a:	2b00      	cmp	r3, #0
 802277c:	dd09      	ble.n	8022792 <lv_txt_get_width+0xa2>
                width += char_width;
 802277e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8022780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022782:	4413      	add	r3, r2
 8022784:	b29b      	uxth	r3, r3
 8022786:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 8022788:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802278a:	887b      	ldrh	r3, [r7, #2]
 802278c:	4413      	add	r3, r2
 802278e:	b29b      	uxth	r3, r3
 8022790:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 8022792:	6a3b      	ldr	r3, [r7, #32]
 8022794:	68ba      	ldr	r2, [r7, #8]
 8022796:	429a      	cmp	r2, r3
 8022798:	d8cb      	bhi.n	8022732 <lv_txt_get_width+0x42>
            }
        }

        if(width > 0) {
 802279a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802279e:	2b00      	cmp	r3, #0
 80227a0:	dd04      	ble.n	80227ac <lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80227a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80227a4:	887b      	ldrh	r3, [r7, #2]
 80227a6:	1ad3      	subs	r3, r2, r3
 80227a8:	b29b      	uxth	r3, r3
 80227aa:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned*/
        }
    }

    return width;
 80227ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80227b0:	4618      	mov	r0, r3
 80227b2:	3728      	adds	r7, #40	; 0x28
 80227b4:	46bd      	mov	sp, r7
 80227b6:	bd80      	pop	{r7, pc}

080227b8 <_lv_txt_is_cmd>:

bool _lv_txt_is_cmd(lv_text_cmd_state_t * state, uint32_t c)
{
 80227b8:	b480      	push	{r7}
 80227ba:	b085      	sub	sp, #20
 80227bc:	af00      	add	r7, sp, #0
 80227be:	6078      	str	r0, [r7, #4]
 80227c0:	6039      	str	r1, [r7, #0]
    bool ret = false;
 80227c2:	2300      	movs	r3, #0
 80227c4:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80227c6:	2323      	movs	r3, #35	; 0x23
 80227c8:	461a      	mov	r2, r3
 80227ca:	683b      	ldr	r3, [r7, #0]
 80227cc:	4293      	cmp	r3, r2
 80227ce:	d11a      	bne.n	8022806 <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	781b      	ldrb	r3, [r3, #0]
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d105      	bne.n	80227e4 <_lv_txt_is_cmd+0x2c>
            *state = LV_TEXT_CMD_STATE_PAR;
 80227d8:	687b      	ldr	r3, [r7, #4]
 80227da:	2201      	movs	r2, #1
 80227dc:	701a      	strb	r2, [r3, #0]
            ret    = true;
 80227de:	2301      	movs	r3, #1
 80227e0:	73fb      	strb	r3, [r7, #15]
 80227e2:	e010      	b.n	8022806 <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char*/
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	781b      	ldrb	r3, [r3, #0]
 80227e8:	2b01      	cmp	r3, #1
 80227ea:	d103      	bne.n	80227f4 <_lv_txt_is_cmd+0x3c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	2200      	movs	r2, #0
 80227f0:	701a      	strb	r2, [r3, #0]
 80227f2:	e008      	b.n	8022806 <_lv_txt_is_cmd+0x4e>
        }
        /*Command end*/
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	781b      	ldrb	r3, [r3, #0]
 80227f8:	2b02      	cmp	r3, #2
 80227fa:	d104      	bne.n	8022806 <_lv_txt_is_cmd+0x4e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	2200      	movs	r2, #0
 8022800:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8022802:	2301      	movs	r3, #1
 8022804:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8022806:	687b      	ldr	r3, [r7, #4]
 8022808:	781b      	ldrb	r3, [r3, #0]
 802280a:	2b01      	cmp	r3, #1
 802280c:	d107      	bne.n	802281e <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 802280e:	683b      	ldr	r3, [r7, #0]
 8022810:	2b20      	cmp	r3, #32
 8022812:	d102      	bne.n	802281a <_lv_txt_is_cmd+0x62>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	2202      	movs	r2, #2
 8022818:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 802281a:	2301      	movs	r3, #1
 802281c:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 802281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022820:	4618      	mov	r0, r3
 8022822:	3714      	adds	r7, #20
 8022824:	46bd      	mov	sp, r7
 8022826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802282a:	4770      	bx	lr

0802282c <_lv_txt_encoded_letter_next_2>:

    return text;
}

void _lv_txt_encoded_letter_next_2(const char * txt, uint32_t * letter, uint32_t * letter_next, uint32_t * ofs)
{
 802282c:	b580      	push	{r7, lr}
 802282e:	b084      	sub	sp, #16
 8022830:	af00      	add	r7, sp, #0
 8022832:	60f8      	str	r0, [r7, #12]
 8022834:	60b9      	str	r1, [r7, #8]
 8022836:	607a      	str	r2, [r7, #4]
 8022838:	603b      	str	r3, [r7, #0]
    *letter = _lv_txt_encoded_next(txt, ofs);
 802283a:	4b0f      	ldr	r3, [pc, #60]	; (8022878 <_lv_txt_encoded_letter_next_2+0x4c>)
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	6839      	ldr	r1, [r7, #0]
 8022840:	68f8      	ldr	r0, [r7, #12]
 8022842:	4798      	blx	r3
 8022844:	4602      	mov	r2, r0
 8022846:	68bb      	ldr	r3, [r7, #8]
 8022848:	601a      	str	r2, [r3, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 802284a:	68bb      	ldr	r3, [r7, #8]
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	2b00      	cmp	r3, #0
 8022850:	d00a      	beq.n	8022868 <_lv_txt_encoded_letter_next_2+0x3c>
 8022852:	4b09      	ldr	r3, [pc, #36]	; (8022878 <_lv_txt_encoded_letter_next_2+0x4c>)
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	683a      	ldr	r2, [r7, #0]
 8022858:	6812      	ldr	r2, [r2, #0]
 802285a:	68f9      	ldr	r1, [r7, #12]
 802285c:	440a      	add	r2, r1
 802285e:	2100      	movs	r1, #0
 8022860:	4610      	mov	r0, r2
 8022862:	4798      	blx	r3
 8022864:	4603      	mov	r3, r0
 8022866:	e000      	b.n	802286a <_lv_txt_encoded_letter_next_2+0x3e>
 8022868:	2300      	movs	r3, #0
 802286a:	687a      	ldr	r2, [r7, #4]
 802286c:	6013      	str	r3, [r2, #0]
}
 802286e:	bf00      	nop
 8022870:	3710      	adds	r7, #16
 8022872:	46bd      	mov	sp, r7
 8022874:	bd80      	pop	{r7, pc}
 8022876:	bf00      	nop
 8022878:	20000018 	.word	0x20000018

0802287c <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 802287c:	b480      	push	{r7}
 802287e:	b085      	sub	sp, #20
 8022880:	af00      	add	r7, sp, #0
 8022882:	6078      	str	r0, [r7, #4]
 8022884:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     */

    uint32_t result = 0;
 8022886:	2300      	movs	r3, #0
 8022888:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 802288a:	2300      	movs	r3, #0
 802288c:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 802288e:	683b      	ldr	r3, [r7, #0]
 8022890:	2b00      	cmp	r3, #0
 8022892:	d102      	bne.n	802289a <lv_txt_utf8_next+0x1e>
 8022894:	f107 0308 	add.w	r3, r7, #8
 8022898:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 802289a:	683b      	ldr	r3, [r7, #0]
 802289c:	681b      	ldr	r3, [r3, #0]
 802289e:	687a      	ldr	r2, [r7, #4]
 80228a0:	4413      	add	r3, r2
 80228a2:	781b      	ldrb	r3, [r3, #0]
 80228a4:	b25b      	sxtb	r3, r3
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	db0b      	blt.n	80228c2 <lv_txt_utf8_next+0x46>
        result = txt[*i];
 80228aa:	683b      	ldr	r3, [r7, #0]
 80228ac:	681b      	ldr	r3, [r3, #0]
 80228ae:	687a      	ldr	r2, [r7, #4]
 80228b0:	4413      	add	r3, r2
 80228b2:	781b      	ldrb	r3, [r3, #0]
 80228b4:	60fb      	str	r3, [r7, #12]
        (*i)++;
 80228b6:	683b      	ldr	r3, [r7, #0]
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	1c5a      	adds	r2, r3, #1
 80228bc:	683b      	ldr	r3, [r7, #0]
 80228be:	601a      	str	r2, [r3, #0]
 80228c0:	e0ea      	b.n	8022a98 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 80228c2:	683b      	ldr	r3, [r7, #0]
 80228c4:	681b      	ldr	r3, [r3, #0]
 80228c6:	687a      	ldr	r2, [r7, #4]
 80228c8:	4413      	add	r3, r2
 80228ca:	781b      	ldrb	r3, [r3, #0]
 80228cc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80228d0:	2bc0      	cmp	r3, #192	; 0xc0
 80228d2:	d128      	bne.n	8022926 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 80228d4:	683b      	ldr	r3, [r7, #0]
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	687a      	ldr	r2, [r7, #4]
 80228da:	4413      	add	r3, r2
 80228dc:	781b      	ldrb	r3, [r3, #0]
 80228de:	019b      	lsls	r3, r3, #6
 80228e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80228e4:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80228e6:	683b      	ldr	r3, [r7, #0]
 80228e8:	681b      	ldr	r3, [r3, #0]
 80228ea:	1c5a      	adds	r2, r3, #1
 80228ec:	683b      	ldr	r3, [r7, #0]
 80228ee:	601a      	str	r2, [r3, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80228f0:	683b      	ldr	r3, [r7, #0]
 80228f2:	681b      	ldr	r3, [r3, #0]
 80228f4:	687a      	ldr	r2, [r7, #4]
 80228f6:	4413      	add	r3, r2
 80228f8:	781b      	ldrb	r3, [r3, #0]
 80228fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80228fe:	2b80      	cmp	r3, #128	; 0x80
 8022900:	d001      	beq.n	8022906 <lv_txt_utf8_next+0x8a>
 8022902:	2300      	movs	r3, #0
 8022904:	e0c9      	b.n	8022a9a <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8022906:	683b      	ldr	r3, [r7, #0]
 8022908:	681b      	ldr	r3, [r3, #0]
 802290a:	687a      	ldr	r2, [r7, #4]
 802290c:	4413      	add	r3, r2
 802290e:	781b      	ldrb	r3, [r3, #0]
 8022910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8022914:	68fa      	ldr	r2, [r7, #12]
 8022916:	4413      	add	r3, r2
 8022918:	60fb      	str	r3, [r7, #12]
            (*i)++;
 802291a:	683b      	ldr	r3, [r7, #0]
 802291c:	681b      	ldr	r3, [r3, #0]
 802291e:	1c5a      	adds	r2, r3, #1
 8022920:	683b      	ldr	r3, [r7, #0]
 8022922:	601a      	str	r2, [r3, #0]
 8022924:	e0b8      	b.n	8022a98 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 8022926:	683b      	ldr	r3, [r7, #0]
 8022928:	681b      	ldr	r3, [r3, #0]
 802292a:	687a      	ldr	r2, [r7, #4]
 802292c:	4413      	add	r3, r2
 802292e:	781b      	ldrb	r3, [r3, #0]
 8022930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022934:	2be0      	cmp	r3, #224	; 0xe0
 8022936:	d142      	bne.n	80229be <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8022938:	683b      	ldr	r3, [r7, #0]
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	687a      	ldr	r2, [r7, #4]
 802293e:	4413      	add	r3, r2
 8022940:	781b      	ldrb	r3, [r3, #0]
 8022942:	031b      	lsls	r3, r3, #12
 8022944:	b29b      	uxth	r3, r3
 8022946:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8022948:	683b      	ldr	r3, [r7, #0]
 802294a:	681b      	ldr	r3, [r3, #0]
 802294c:	1c5a      	adds	r2, r3, #1
 802294e:	683b      	ldr	r3, [r7, #0]
 8022950:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8022952:	683b      	ldr	r3, [r7, #0]
 8022954:	681b      	ldr	r3, [r3, #0]
 8022956:	687a      	ldr	r2, [r7, #4]
 8022958:	4413      	add	r3, r2
 802295a:	781b      	ldrb	r3, [r3, #0]
 802295c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8022960:	2b80      	cmp	r3, #128	; 0x80
 8022962:	d001      	beq.n	8022968 <lv_txt_utf8_next+0xec>
 8022964:	2300      	movs	r3, #0
 8022966:	e098      	b.n	8022a9a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8022968:	683b      	ldr	r3, [r7, #0]
 802296a:	681b      	ldr	r3, [r3, #0]
 802296c:	687a      	ldr	r2, [r7, #4]
 802296e:	4413      	add	r3, r2
 8022970:	781b      	ldrb	r3, [r3, #0]
 8022972:	019b      	lsls	r3, r3, #6
 8022974:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8022978:	68fa      	ldr	r2, [r7, #12]
 802297a:	4413      	add	r3, r2
 802297c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 802297e:	683b      	ldr	r3, [r7, #0]
 8022980:	681b      	ldr	r3, [r3, #0]
 8022982:	1c5a      	adds	r2, r3, #1
 8022984:	683b      	ldr	r3, [r7, #0]
 8022986:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8022988:	683b      	ldr	r3, [r7, #0]
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	687a      	ldr	r2, [r7, #4]
 802298e:	4413      	add	r3, r2
 8022990:	781b      	ldrb	r3, [r3, #0]
 8022992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8022996:	2b80      	cmp	r3, #128	; 0x80
 8022998:	d001      	beq.n	802299e <lv_txt_utf8_next+0x122>
 802299a:	2300      	movs	r3, #0
 802299c:	e07d      	b.n	8022a9a <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 802299e:	683b      	ldr	r3, [r7, #0]
 80229a0:	681b      	ldr	r3, [r3, #0]
 80229a2:	687a      	ldr	r2, [r7, #4]
 80229a4:	4413      	add	r3, r2
 80229a6:	781b      	ldrb	r3, [r3, #0]
 80229a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80229ac:	68fa      	ldr	r2, [r7, #12]
 80229ae:	4413      	add	r3, r2
 80229b0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80229b2:	683b      	ldr	r3, [r7, #0]
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	1c5a      	adds	r2, r3, #1
 80229b8:	683b      	ldr	r3, [r7, #0]
 80229ba:	601a      	str	r2, [r3, #0]
 80229bc:	e06c      	b.n	8022a98 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80229be:	683b      	ldr	r3, [r7, #0]
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	687a      	ldr	r2, [r7, #4]
 80229c4:	4413      	add	r3, r2
 80229c6:	781b      	ldrb	r3, [r3, #0]
 80229c8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80229cc:	2bf0      	cmp	r3, #240	; 0xf0
 80229ce:	d15e      	bne.n	8022a8e <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80229d0:	683b      	ldr	r3, [r7, #0]
 80229d2:	681b      	ldr	r3, [r3, #0]
 80229d4:	687a      	ldr	r2, [r7, #4]
 80229d6:	4413      	add	r3, r2
 80229d8:	781b      	ldrb	r3, [r3, #0]
 80229da:	049b      	lsls	r3, r3, #18
 80229dc:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80229e0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80229e2:	683b      	ldr	r3, [r7, #0]
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	1c5a      	adds	r2, r3, #1
 80229e8:	683b      	ldr	r3, [r7, #0]
 80229ea:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80229ec:	683b      	ldr	r3, [r7, #0]
 80229ee:	681b      	ldr	r3, [r3, #0]
 80229f0:	687a      	ldr	r2, [r7, #4]
 80229f2:	4413      	add	r3, r2
 80229f4:	781b      	ldrb	r3, [r3, #0]
 80229f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80229fa:	2b80      	cmp	r3, #128	; 0x80
 80229fc:	d001      	beq.n	8022a02 <lv_txt_utf8_next+0x186>
 80229fe:	2300      	movs	r3, #0
 8022a00:	e04b      	b.n	8022a9a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8022a02:	683b      	ldr	r3, [r7, #0]
 8022a04:	681b      	ldr	r3, [r3, #0]
 8022a06:	687a      	ldr	r2, [r7, #4]
 8022a08:	4413      	add	r3, r2
 8022a0a:	781b      	ldrb	r3, [r3, #0]
 8022a0c:	031b      	lsls	r3, r3, #12
 8022a0e:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 8022a12:	68fa      	ldr	r2, [r7, #12]
 8022a14:	4413      	add	r3, r2
 8022a16:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8022a18:	683b      	ldr	r3, [r7, #0]
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	1c5a      	adds	r2, r3, #1
 8022a1e:	683b      	ldr	r3, [r7, #0]
 8022a20:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8022a22:	683b      	ldr	r3, [r7, #0]
 8022a24:	681b      	ldr	r3, [r3, #0]
 8022a26:	687a      	ldr	r2, [r7, #4]
 8022a28:	4413      	add	r3, r2
 8022a2a:	781b      	ldrb	r3, [r3, #0]
 8022a2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8022a30:	2b80      	cmp	r3, #128	; 0x80
 8022a32:	d001      	beq.n	8022a38 <lv_txt_utf8_next+0x1bc>
 8022a34:	2300      	movs	r3, #0
 8022a36:	e030      	b.n	8022a9a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8022a38:	683b      	ldr	r3, [r7, #0]
 8022a3a:	681b      	ldr	r3, [r3, #0]
 8022a3c:	687a      	ldr	r2, [r7, #4]
 8022a3e:	4413      	add	r3, r2
 8022a40:	781b      	ldrb	r3, [r3, #0]
 8022a42:	019b      	lsls	r3, r3, #6
 8022a44:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8022a48:	68fa      	ldr	r2, [r7, #12]
 8022a4a:	4413      	add	r3, r2
 8022a4c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8022a4e:	683b      	ldr	r3, [r7, #0]
 8022a50:	681b      	ldr	r3, [r3, #0]
 8022a52:	1c5a      	adds	r2, r3, #1
 8022a54:	683b      	ldr	r3, [r7, #0]
 8022a56:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8022a58:	683b      	ldr	r3, [r7, #0]
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	687a      	ldr	r2, [r7, #4]
 8022a5e:	4413      	add	r3, r2
 8022a60:	781b      	ldrb	r3, [r3, #0]
 8022a62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8022a66:	2b80      	cmp	r3, #128	; 0x80
 8022a68:	d001      	beq.n	8022a6e <lv_txt_utf8_next+0x1f2>
 8022a6a:	2300      	movs	r3, #0
 8022a6c:	e015      	b.n	8022a9a <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 8022a6e:	683b      	ldr	r3, [r7, #0]
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	687a      	ldr	r2, [r7, #4]
 8022a74:	4413      	add	r3, r2
 8022a76:	781b      	ldrb	r3, [r3, #0]
 8022a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8022a7c:	68fa      	ldr	r2, [r7, #12]
 8022a7e:	4413      	add	r3, r2
 8022a80:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8022a82:	683b      	ldr	r3, [r7, #0]
 8022a84:	681b      	ldr	r3, [r3, #0]
 8022a86:	1c5a      	adds	r2, r3, #1
 8022a88:	683b      	ldr	r3, [r7, #0]
 8022a8a:	601a      	str	r2, [r3, #0]
 8022a8c:	e004      	b.n	8022a98 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8022a8e:	683b      	ldr	r3, [r7, #0]
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	1c5a      	adds	r2, r3, #1
 8022a94:	683b      	ldr	r3, [r7, #0]
 8022a96:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 8022a98:	68fb      	ldr	r3, [r7, #12]
}
 8022a9a:	4618      	mov	r0, r3
 8022a9c:	3714      	adds	r7, #20
 8022a9e:	46bd      	mov	sp, r7
 8022aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aa4:	4770      	bx	lr
	...

08022aa8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b084      	sub	sp, #16
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	6078      	str	r0, [r7, #4]
 8022ab0:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 8022ab2:	2300      	movs	r3, #0
 8022ab4:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 8022aba:	e009      	b.n	8022ad0 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8022abc:	4b09      	ldr	r3, [pc, #36]	; (8022ae4 <lv_txt_utf8_get_char_id+0x3c>)
 8022abe:	681b      	ldr	r3, [r3, #0]
 8022ac0:	f107 0208 	add.w	r2, r7, #8
 8022ac4:	4611      	mov	r1, r2
 8022ac6:	6878      	ldr	r0, [r7, #4]
 8022ac8:	4798      	blx	r3
        char_cnt++;
 8022aca:	68fb      	ldr	r3, [r7, #12]
 8022acc:	3301      	adds	r3, #1
 8022ace:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 8022ad0:	68bb      	ldr	r3, [r7, #8]
 8022ad2:	683a      	ldr	r2, [r7, #0]
 8022ad4:	429a      	cmp	r2, r3
 8022ad6:	d8f1      	bhi.n	8022abc <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 8022ad8:	68fb      	ldr	r3, [r7, #12]
}
 8022ada:	4618      	mov	r0, r3
 8022adc:	3710      	adds	r7, #16
 8022ade:	46bd      	mov	sp, r7
 8022ae0:	bd80      	pop	{r7, pc}
 8022ae2:	bf00      	nop
 8022ae4:	20000018 	.word	0x20000018

08022ae8 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8022ae8:	b580      	push	{r7, lr}
 8022aea:	b086      	sub	sp, #24
 8022aec:	af00      	add	r7, sp, #0
 8022aee:	60f8      	str	r0, [r7, #12]
 8022af0:	60b9      	str	r1, [r7, #8]
 8022af2:	607a      	str	r2, [r7, #4]
 8022af4:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8022af6:	68bb      	ldr	r3, [r7, #8]
 8022af8:	617b      	str	r3, [r7, #20]
 8022afa:	e02d      	b.n	8022b58 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	085b      	lsrs	r3, r3, #1
 8022b00:	683a      	ldr	r2, [r7, #0]
 8022b02:	fb02 f303 	mul.w	r3, r2, r3
 8022b06:	697a      	ldr	r2, [r7, #20]
 8022b08:	4413      	add	r3, r2
 8022b0a:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 8022b0c:	6a3b      	ldr	r3, [r7, #32]
 8022b0e:	6979      	ldr	r1, [r7, #20]
 8022b10:	68f8      	ldr	r0, [r7, #12]
 8022b12:	4798      	blx	r3
 8022b14:	6138      	str	r0, [r7, #16]
 8022b16:	693b      	ldr	r3, [r7, #16]
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	dd12      	ble.n	8022b42 <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 8022b1c:	687b      	ldr	r3, [r7, #4]
 8022b1e:	085b      	lsrs	r3, r3, #1
 8022b20:	687a      	ldr	r2, [r7, #4]
 8022b22:	f002 0201 	and.w	r2, r2, #1
 8022b26:	2a00      	cmp	r2, #0
 8022b28:	bf0c      	ite	eq
 8022b2a:	2201      	moveq	r2, #1
 8022b2c:	2200      	movne	r2, #0
 8022b2e:	b2d2      	uxtb	r2, r2
 8022b30:	1a9b      	subs	r3, r3, r2
 8022b32:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 8022b34:	697a      	ldr	r2, [r7, #20]
 8022b36:	683b      	ldr	r3, [r7, #0]
 8022b38:	4413      	add	r3, r2
 8022b3a:	617b      	str	r3, [r7, #20]
 8022b3c:	697b      	ldr	r3, [r7, #20]
 8022b3e:	60bb      	str	r3, [r7, #8]
 8022b40:	e00a      	b.n	8022b58 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 8022b42:	693b      	ldr	r3, [r7, #16]
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	da05      	bge.n	8022b54 <_lv_utils_bsearch+0x6c>
            n /= 2;
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	085b      	lsrs	r3, r3, #1
 8022b4c:	607b      	str	r3, [r7, #4]
            middle = base;
 8022b4e:	68bb      	ldr	r3, [r7, #8]
 8022b50:	617b      	str	r3, [r7, #20]
 8022b52:	e001      	b.n	8022b58 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 8022b54:	697b      	ldr	r3, [r7, #20]
 8022b56:	e003      	b.n	8022b60 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8022b58:	687b      	ldr	r3, [r7, #4]
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d1ce      	bne.n	8022afc <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8022b5e:	2300      	movs	r3, #0
}
 8022b60:	4618      	mov	r0, r3
 8022b62:	3718      	adds	r7, #24
 8022b64:	46bd      	mov	sp, r7
 8022b66:	bd80      	pop	{r7, pc}

08022b68 <__libc_init_array>:
 8022b68:	b570      	push	{r4, r5, r6, lr}
 8022b6a:	4d0d      	ldr	r5, [pc, #52]	; (8022ba0 <__libc_init_array+0x38>)
 8022b6c:	4c0d      	ldr	r4, [pc, #52]	; (8022ba4 <__libc_init_array+0x3c>)
 8022b6e:	1b64      	subs	r4, r4, r5
 8022b70:	10a4      	asrs	r4, r4, #2
 8022b72:	2600      	movs	r6, #0
 8022b74:	42a6      	cmp	r6, r4
 8022b76:	d109      	bne.n	8022b8c <__libc_init_array+0x24>
 8022b78:	4d0b      	ldr	r5, [pc, #44]	; (8022ba8 <__libc_init_array+0x40>)
 8022b7a:	4c0c      	ldr	r4, [pc, #48]	; (8022bac <__libc_init_array+0x44>)
 8022b7c:	f000 f836 	bl	8022bec <_init>
 8022b80:	1b64      	subs	r4, r4, r5
 8022b82:	10a4      	asrs	r4, r4, #2
 8022b84:	2600      	movs	r6, #0
 8022b86:	42a6      	cmp	r6, r4
 8022b88:	d105      	bne.n	8022b96 <__libc_init_array+0x2e>
 8022b8a:	bd70      	pop	{r4, r5, r6, pc}
 8022b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022b90:	4798      	blx	r3
 8022b92:	3601      	adds	r6, #1
 8022b94:	e7ee      	b.n	8022b74 <__libc_init_array+0xc>
 8022b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8022b9a:	4798      	blx	r3
 8022b9c:	3601      	adds	r6, #1
 8022b9e:	e7f2      	b.n	8022b86 <__libc_init_array+0x1e>
 8022ba0:	0802644c 	.word	0x0802644c
 8022ba4:	0802644c 	.word	0x0802644c
 8022ba8:	0802644c 	.word	0x0802644c
 8022bac:	08026450 	.word	0x08026450

08022bb0 <memcpy>:
 8022bb0:	440a      	add	r2, r1
 8022bb2:	4291      	cmp	r1, r2
 8022bb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8022bb8:	d100      	bne.n	8022bbc <memcpy+0xc>
 8022bba:	4770      	bx	lr
 8022bbc:	b510      	push	{r4, lr}
 8022bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022bc6:	4291      	cmp	r1, r2
 8022bc8:	d1f9      	bne.n	8022bbe <memcpy+0xe>
 8022bca:	bd10      	pop	{r4, pc}

08022bcc <memset>:
 8022bcc:	4402      	add	r2, r0
 8022bce:	4603      	mov	r3, r0
 8022bd0:	4293      	cmp	r3, r2
 8022bd2:	d100      	bne.n	8022bd6 <memset+0xa>
 8022bd4:	4770      	bx	lr
 8022bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8022bda:	e7f9      	b.n	8022bd0 <memset+0x4>

08022bdc <strcpy>:
 8022bdc:	4603      	mov	r3, r0
 8022bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022be2:	f803 2b01 	strb.w	r2, [r3], #1
 8022be6:	2a00      	cmp	r2, #0
 8022be8:	d1f9      	bne.n	8022bde <strcpy+0x2>
 8022bea:	4770      	bx	lr

08022bec <_init>:
 8022bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bee:	bf00      	nop
 8022bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022bf2:	bc08      	pop	{r3}
 8022bf4:	469e      	mov	lr, r3
 8022bf6:	4770      	bx	lr

08022bf8 <_fini>:
 8022bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bfa:	bf00      	nop
 8022bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022bfe:	bc08      	pop	{r3}
 8022c00:	469e      	mov	lr, r3
 8022c02:	4770      	bx	lr
