
08_OLED_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023514  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003840  0802370c  0802370c  0003370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026f4c  08026f4c  00040020  2**0
                  CONTENTS
  4 .ARM          00000008  08026f4c  08026f4c  00036f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026f54  08026f54  00040020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026f54  08026f54  00036f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026f58  08026f58  00036f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08026f5c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca48  20000020  08026f7c  00040020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ca68  08026f7c  0004ca68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006f3b7  00000000  00000000  0004004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cd09  00000000  00000000  000af405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003560  00000000  00000000  000bc110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003450  00000000  00000000  000bf670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038c0a  00000000  00000000  000c2ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005e614  00000000  00000000  000fb6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ec5c  00000000  00000000  00159cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026893a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dc84  00000000  00000000  0026898c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000020 	.word	0x20000020
 8000214:	00000000 	.word	0x00000000
 8000218:	080236f4 	.word	0x080236f4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000024 	.word	0x20000024
 8000234:	080236f4 	.word	0x080236f4

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 b974 	b.w	800055c <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468e      	mov	lr, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14d      	bne.n	8000336 <__udivmoddi4+0xaa>
 800029a:	428a      	cmp	r2, r1
 800029c:	4694      	mov	ip, r2
 800029e:	d969      	bls.n	8000374 <__udivmoddi4+0xe8>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b152      	cbz	r2, 80002bc <__udivmoddi4+0x30>
 80002a6:	fa01 f302 	lsl.w	r3, r1, r2
 80002aa:	f1c2 0120 	rsb	r1, r2, #32
 80002ae:	fa20 f101 	lsr.w	r1, r0, r1
 80002b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b6:	ea41 0e03 	orr.w	lr, r1, r3
 80002ba:	4094      	lsls	r4, r2
 80002bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c0:	0c21      	lsrs	r1, r4, #16
 80002c2:	fbbe f6f8 	udiv	r6, lr, r8
 80002c6:	fa1f f78c 	uxth.w	r7, ip
 80002ca:	fb08 e316 	mls	r3, r8, r6, lr
 80002ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002d2:	fb06 f107 	mul.w	r1, r6, r7
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e2:	f080 811f 	bcs.w	8000524 <__udivmoddi4+0x298>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 811c 	bls.w	8000524 <__udivmoddi4+0x298>
 80002ec:	3e02      	subs	r6, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f8:	fb08 3310 	mls	r3, r8, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 f707 	mul.w	r7, r0, r7
 8000304:	42a7      	cmp	r7, r4
 8000306:	d90a      	bls.n	800031e <__udivmoddi4+0x92>
 8000308:	eb1c 0404 	adds.w	r4, ip, r4
 800030c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000310:	f080 810a 	bcs.w	8000528 <__udivmoddi4+0x29c>
 8000314:	42a7      	cmp	r7, r4
 8000316:	f240 8107 	bls.w	8000528 <__udivmoddi4+0x29c>
 800031a:	4464      	add	r4, ip
 800031c:	3802      	subs	r0, #2
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	1be4      	subs	r4, r4, r7
 8000324:	2600      	movs	r6, #0
 8000326:	b11d      	cbz	r5, 8000330 <__udivmoddi4+0xa4>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c5 4300 	strd	r4, r3, [r5]
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0xc2>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80ef 	beq.w	800051e <__udivmoddi4+0x292>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x160>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xd4>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80f9 	bhi.w	8000552 <__udivmoddi4+0x2c6>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0303 	sbc.w	r3, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	469e      	mov	lr, r3
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0e0      	beq.n	8000330 <__udivmoddi4+0xa4>
 800036e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000372:	e7dd      	b.n	8000330 <__udivmoddi4+0xa4>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xec>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	2a00      	cmp	r2, #0
 800037e:	f040 8092 	bne.w	80004a6 <__udivmoddi4+0x21a>
 8000382:	eba1 010c 	sub.w	r1, r1, ip
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2601      	movs	r6, #1
 8000390:	0c20      	lsrs	r0, r4, #16
 8000392:	fbb1 f3f7 	udiv	r3, r1, r7
 8000396:	fb07 1113 	mls	r1, r7, r3, r1
 800039a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039e:	fb0e f003 	mul.w	r0, lr, r3
 80003a2:	4288      	cmp	r0, r1
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x12c>
 80003a6:	eb1c 0101 	adds.w	r1, ip, r1
 80003aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x12a>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2c0>
 80003b6:	4643      	mov	r3, r8
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c0:	fb07 1110 	mls	r1, r7, r0, r1
 80003c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x156>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x154>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2ca>
 80003e0:	4608      	mov	r0, r1
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ea:	e79c      	b.n	8000326 <__udivmoddi4+0x9a>
 80003ec:	f1c6 0720 	rsb	r7, r6, #32
 80003f0:	40b3      	lsls	r3, r6
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa20 f407 	lsr.w	r4, r0, r7
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	431c      	orrs	r4, r3
 8000404:	40f9      	lsrs	r1, r7
 8000406:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040a:	fa00 f306 	lsl.w	r3, r0, r6
 800040e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000412:	0c20      	lsrs	r0, r4, #16
 8000414:	fa1f fe8c 	uxth.w	lr, ip
 8000418:	fb09 1118 	mls	r1, r9, r8, r1
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	fb08 f00e 	mul.w	r0, r8, lr
 8000424:	4288      	cmp	r0, r1
 8000426:	fa02 f206 	lsl.w	r2, r2, r6
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b8>
 800042c:	eb1c 0101 	adds.w	r1, ip, r1
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2bc>
 8000438:	4288      	cmp	r0, r1
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2bc>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4461      	add	r1, ip
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f9 	udiv	r0, r1, r9
 800044c:	fb09 1110 	mls	r1, r9, r0, r1
 8000450:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000454:	fb00 fe0e 	mul.w	lr, r0, lr
 8000458:	458e      	cmp	lr, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1e2>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2b4>
 8000466:	458e      	cmp	lr, r1
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2b4>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000472:	fba0 9402 	umull	r9, r4, r0, r2
 8000476:	eba1 010e 	sub.w	r1, r1, lr
 800047a:	42a1      	cmp	r1, r4
 800047c:	46c8      	mov	r8, r9
 800047e:	46a6      	mov	lr, r4
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x2a4>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x2a0>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x212>
 8000486:	ebb3 0208 	subs.w	r2, r3, r8
 800048a:	eb61 010e 	sbc.w	r1, r1, lr
 800048e:	fa01 f707 	lsl.w	r7, r1, r7
 8000492:	fa22 f306 	lsr.w	r3, r2, r6
 8000496:	40f1      	lsrs	r1, r6
 8000498:	431f      	orrs	r7, r3
 800049a:	e9c5 7100 	strd	r7, r1, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	40d8      	lsrs	r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa21 f303 	lsr.w	r3, r1, r3
 80004b4:	4091      	lsls	r1, r2
 80004b6:	4301      	orrs	r1, r0
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c4:	fb07 3610 	mls	r6, r7, r0, r3
 80004c8:	0c0b      	lsrs	r3, r1, #16
 80004ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ce:	fb00 f60e 	mul.w	r6, r0, lr
 80004d2:	429e      	cmp	r6, r3
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x260>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b8>
 80004e4:	429e      	cmp	r6, r3
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b8>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1b9b      	subs	r3, r3, r6
 80004ee:	b289      	uxth	r1, r1
 80004f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004f4:	fb07 3316 	mls	r3, r7, r6, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb06 f30e 	mul.w	r3, r6, lr
 8000500:	428b      	cmp	r3, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x28a>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2b0>
 800050e:	428b      	cmp	r3, r1
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2b0>
 8000512:	3e02      	subs	r6, #2
 8000514:	4461      	add	r1, ip
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0x104>
 800051e:	462e      	mov	r6, r5
 8000520:	4628      	mov	r0, r5
 8000522:	e705      	b.n	8000330 <__udivmoddi4+0xa4>
 8000524:	4606      	mov	r6, r0
 8000526:	e6e3      	b.n	80002f0 <__udivmoddi4+0x64>
 8000528:	4618      	mov	r0, r3
 800052a:	e6f8      	b.n	800031e <__udivmoddi4+0x92>
 800052c:	454b      	cmp	r3, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f8>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000538:	3801      	subs	r0, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f8>
 800053c:	4646      	mov	r6, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x28a>
 8000540:	4620      	mov	r0, r4
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1e2>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x260>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b8>
 800054c:	3b02      	subs	r3, #2
 800054e:	4461      	add	r1, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x12c>
 8000552:	4630      	mov	r0, r6
 8000554:	e709      	b.n	800036a <__udivmoddi4+0xde>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x156>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <MX_GPIO_Init+0xdc>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <MX_GPIO_Init+0xdc>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_GPIO_Init+0xdc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_GPIO_Init+0xdc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <MX_GPIO_Init+0xdc>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_GPIO_Init+0xdc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0xdc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <MX_GPIO_Init+0xdc>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_GPIO_Init+0xdc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xdc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <MX_GPIO_Init+0xe0>)
 80005f6:	f001 f819 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_GPIO_Init+0xe4>)
 8000612:	f000 fe5f 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000616:	f244 0381 	movw	r3, #16513	; 0x4081
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0xe0>)
 8000630:	f000 fe50 	bl	80012d4 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40020800 	.word	0x40020800

08000648 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_I2C1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_I2C1_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_I2C1_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_I2C1_Init+0x74>)
 8000684:	f000 ffec 	bl	8001660 <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 fa13 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_I2C1_Init+0x74>)
 8000696:	f001 fbcd 	bl	8001e34 <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 fa0a 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2C1_Init+0x74>)
 80006a8:	f001 fc0f 	bl	8001eca <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 fa01 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000003c 	.word	0x2000003c
 80006c0:	40005400 	.word	0x40005400
 80006c4:	2010091a 	.word	0x2010091a

080006c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0ae      	sub	sp, #184	; 0xb8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2290      	movs	r2, #144	; 0x90
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f022 fff3 	bl	80236d4 <memset>
  if(i2cHandle->Instance==I2C1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a22      	ldr	r2, [pc, #136]	; (800077c <HAL_I2C_MspInit+0xb4>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d13c      	bne.n	8000772 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006fe:	2300      	movs	r3, #0
 8000700:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f002 f960 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000712:	f000 f9d1 	bl	8000ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000736:	2312      	movs	r3, #18
 8000738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000748:	2304      	movs	r3, #4
 800074a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <HAL_I2C_MspInit+0xbc>)
 8000756:	f000 fdbd 	bl	80012d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_I2C_MspInit+0xb8>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000772:	bf00      	nop
 8000774:	37b8      	adds	r7, #184	; 0xb8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40005400 	.word	0x40005400
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <lv_port_disp_init>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_disp_t * lv_port_disp_init(I2C_HandleTypeDef *I2C){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
    /*-------------------------
     * Initialize your display
     * -----------------------*/
    disp_init(I2C);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f831 	bl	80007f8 <disp_init>
     */

    /* Example for 1) */
    static lv_disp_draw_buf_t draw_buf_dsc_1;
    static lv_color_t buf_1[MY_DISP_HOR_RES * 10];                          /*A buffer for 10 rows*/
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/
 8000796:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800079a:	2200      	movs	r2, #0
 800079c:	4910      	ldr	r1, [pc, #64]	; (80007e0 <lv_port_disp_init+0x58>)
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <lv_port_disp_init+0x5c>)
 80007a0:	f01d ff60 	bl	801e664 <lv_disp_draw_buf_init>
    /*-----------------------------------
     * Register the display in LVGL
     *----------------------------------*/

    static lv_disp_drv_t disp_drv;                         /*Descriptor of a display driver*/
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <lv_port_disp_init+0x60>)
 80007a6:	f01d ff19 	bl	801e5dc <lv_disp_drv_init>

    /*Set up the functions to access to your display*/

    /*Set the resolution of the display*/
    disp_drv.hor_res = MY_DISP_HOR_RES;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <lv_port_disp_init+0x60>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	801a      	strh	r2, [r3, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <lv_port_disp_init+0x60>)
 80007b2:	2240      	movs	r2, #64	; 0x40
 80007b4:	805a      	strh	r2, [r3, #2]

    /*Used to copy the buffer's content to the display*/
    disp_drv.flush_cb = disp_flush;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <lv_port_disp_init+0x60>)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <lv_port_disp_init+0x64>)
 80007ba:	615a      	str	r2, [r3, #20]
    disp_drv.set_px_cb = set_px_cb;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <lv_port_disp_init+0x60>)
 80007be:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <lv_port_disp_init+0x68>)
 80007c0:	61da      	str	r2, [r3, #28]
    disp_drv.rounder_cb = rounder_cb;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <lv_port_disp_init+0x60>)
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <lv_port_disp_init+0x6c>)
 80007c6:	619a      	str	r2, [r3, #24]

    /*Set a display buffer*/
    disp_drv.draw_buf = &draw_buf_dsc_1;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <lv_port_disp_init+0x60>)
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <lv_port_disp_init+0x5c>)
 80007cc:	60da      	str	r2, [r3, #12]
     * Note that, in lv_conf.h you can enable GPUs that has built-in support in LVGL.
     * But if you have a different GPU you can use with this callback.*/
    //disp_drv.gpu_fill_cb = gpu_fill;

    /*Finally register the driver*/
    return lv_disp_drv_register(&disp_drv);
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <lv_port_disp_init+0x60>)
 80007d0:	f01d ff64 	bl	801e69c <lv_disp_drv_register>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000ac 	.word	0x200000ac
 80007e4:	20000090 	.word	0x20000090
 80007e8:	200005ac 	.word	0x200005ac
 80007ec:	08000811 	.word	0x08000811
 80007f0:	08000869 	.word	0x08000869
 80007f4:	080008fd 	.word	0x080008fd

080007f8 <disp_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

/*Initialize your display and the required peripherals.*/
static void disp_init(I2C_HandleTypeDef *i2c){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

	SH1106_HwInit(i2c);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 f9e9 	bl	8000bd8 <SH1106_HwInit>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af02      	add	r7, sp, #8
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
    if(disp_flush_enabled) {
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <disp_flush+0x54>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d016      	beq.n	8000854 <disp_flush+0x44>
        /*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/

    	uint8_t *buff = (uint8_t *)color_p;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	617b      	str	r3, [r7, #20]
    	SH1106_Send(area->x1, area->x2, area->y1, area->y2, buff);
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000830:	b2d8      	uxtb	r0, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000838:	b2d9      	uxtb	r1, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000848:	b2dc      	uxtb	r4, r3
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	4623      	mov	r3, r4
 8000850:	f000 fa0a 	bl	8000c68 <SH1106_Send>
    }

    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
    lv_disp_flush_ready(disp_drv);
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f01e f85d 	bl	801e914 <lv_disp_flush_ready>
}
 800085a:	bf00      	nop
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000

08000868 <set_px_cb>:



static void set_px_cb(struct _lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
        				lv_color_t color, lv_opa_t opa){
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	460b      	mov	r3, r1
 8000878:	80fb      	strh	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	80bb      	strh	r3, [r7, #4]

	uint16_t byte_index = x + ((y / 8) * buf_w);
 800087e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da00      	bge.n	8000888 <set_px_cb+0x20>
 8000886:	3307      	adds	r3, #7
 8000888:	10db      	asrs	r3, r3, #3
 800088a:	b21b      	sxth	r3, r3
 800088c:	b29a      	uxth	r2, r3
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	fb12 f303 	smulbb	r3, r2, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	82fb      	strh	r3, [r7, #22]
	uint8_t  bit_index  = y & 0x7;
 800089c:	8c3b      	ldrh	r3, [r7, #32]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	757b      	strb	r3, [r7, #21]

	// == 0 inverts, so we get blue on black
	if(color.full == 0){
 80008a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10f      	bne.n	80008ce <set_px_cb+0x66>

		BIT_SET( buf[byte_index], bit_index);
 80008ae:	8afb      	ldrh	r3, [r7, #22]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	4413      	add	r3, r2
 80008b4:	7819      	ldrb	r1, [r3, #0]
 80008b6:	7d7b      	ldrb	r3, [r7, #21]
 80008b8:	2201      	movs	r2, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	8afb      	ldrh	r3, [r7, #22]
 80008c2:	68b8      	ldr	r0, [r7, #8]
 80008c4:	4403      	add	r3, r0
 80008c6:	430a      	orrs	r2, r1
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	701a      	strb	r2, [r3, #0]
	}
	else{

		BIT_CLEAR( buf[byte_index], bit_index);
	}
}
 80008cc:	e010      	b.n	80008f0 <set_px_cb+0x88>
		BIT_CLEAR( buf[byte_index], bit_index);
 80008ce:	8afb      	ldrh	r3, [r7, #22]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	7d7b      	ldrb	r3, [r7, #21]
 80008d8:	2201      	movs	r2, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	68b8      	ldr	r0, [r7, #8]
 80008e8:	4403      	add	r3, r0
 80008ea:	400a      	ands	r2, r1
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <rounder_cb>:


static void rounder_cb(struct _lv_disp_drv_t * disp_drv, lv_area_t * area){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]

	area->y1 = (area->y1 & (~0x7));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800090c:	f023 0307 	bic.w	r3, r3, #7
 8000910:	b21a      	sxth	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	805a      	strh	r2, [r3, #2]
	area->y2 = ((area->y2 & (~0x7)) + 7);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800091c:	b29b      	uxth	r3, r3
 800091e:	f023 0307 	bic.w	r3, r3, #7
 8000922:	b29b      	uxth	r3, r3
 8000924:	3307      	adds	r3, #7
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	80da      	strh	r2, [r3, #6]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <lv_timer_handler_run_in_period>:
 * with a given period in ms. You can use it with sleep or delay in OS environment.
 * This function is used to simplify the porting.
 * @param __ms the period for running lv_timer_handler()
 */
static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler_run_in_period(uint32_t ms)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    uint32_t curr_tick = lv_tick_get();
 8000944:	f01e f836 	bl	801e9b4 <lv_tick_get>
 8000948:	60f8      	str	r0, [r7, #12]

    if((curr_tick - last_tick) >= (ms)) {
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <lv_timer_handler_run_in_period+0x34>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	d806      	bhi.n	8000966 <lv_timer_handler_run_in_period+0x2a>
        last_tick = curr_tick;
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <lv_timer_handler_run_in_period+0x34>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6013      	str	r3, [r2, #0]
        return lv_timer_handler();
 800095e:	f021 f98d 	bl	8021c7c <lv_timer_handler>
 8000962:	4603      	mov	r3, r0
 8000964:	e000      	b.n	8000968 <lv_timer_handler_run_in_period+0x2c>
    }
    return 1;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200005fc 	.word	0x200005fc

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 fb3d 	bl	8000ff6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f818 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f7ff fdee 	bl	8000560 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000984:	f000 fa7e 	bl	8000e84 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000988:	f7ff fe5e 	bl	8000648 <MX_I2C1_Init>
  MX_TIM6_Init();
 800098c:	f000 fa1e 	bl	8000dcc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  lv_init();
 8000990:	f004 fcdc 	bl	800534c <lv_init>
  lv_port_disp_init(&hi2c1);
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <main+0x34>)
 8000996:	f7ff fef7 	bl	8000788 <lv_port_disp_init>
  HAL_TIM_Base_Start_IT(&htim6);
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <main+0x38>)
 800099c:	f002 fc96 	bl	80032cc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  lv_timer_handler_run_in_period(5);
 80009a0:	2005      	movs	r0, #5
 80009a2:	f7ff ffcb 	bl	800093c <lv_timer_handler_run_in_period>
 80009a6:	e7fb      	b.n	80009a0 <main+0x2c>
 80009a8:	2000003c 	.word	0x2000003c
 80009ac:	20000604 	.word	0x20000604

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b094      	sub	sp, #80	; 0x50
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2234      	movs	r2, #52	; 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f022 fe88 	bl	80236d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009d4:	f001 fac6 	bl	8001f64 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <SystemClock_Config+0xdc>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <SystemClock_Config+0xdc>)
 80009de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <SystemClock_Config+0xdc>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <SystemClock_Config+0xe0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f8:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <SystemClock_Config+0xe0>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <SystemClock_Config+0xe0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a16:	2302      	movs	r3, #2
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a24:	2360      	movs	r3, #96	; 0x60
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 faf3 	bl	8002024 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a44:	f000 f838 	bl	8000ab8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a48:	f001 fa9c 	bl	8001f84 <HAL_PWREx_EnableOverDrive>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a52:	f000 f831 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	2103      	movs	r1, #3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fd84 	bl	8002580 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a7e:	f000 f81b 	bl	8000ab8 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d102      	bne.n	8000aac <HAL_TIM_PeriodElapsedCallback+0x18>

		lv_tick_inc(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f01d ff6c 	bl	801e984 <lv_tick_inc>
	}
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40001000 	.word	0x40001000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <sh1106_cmd>:
/*********************************************************************************/
							// Low level I2C functions //
/*********************************************************************************/


static void sh1106_cmd(uint8_t cmd){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af04      	add	r7, sp, #16
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]

//	i2c_write_byte(SH1106_ADR, SH1106_CMD, cmd, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_CMD, 1, &cmd, 1, SH1106_TIMEOUT_MS);
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <sh1106_cmd+0x2c>)
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	2364      	movs	r3, #100	; 0x64
 8000ad4:	9302      	str	r3, [sp, #8]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	2178      	movs	r1, #120	; 0x78
 8000ae4:	f000 fe4c 	bl	8001780 <HAL_I2C_Mem_Write>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000600 	.word	0x20000600

08000af4 <sh1106_multi_cmd>:

static void sh1106_multi_cmd(uint8_t *cmd, uint8_t len){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af04      	add	r7, sp, #16
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_CMD, cmd, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_CMD, 1, cmd, len, SH1106_TIMEOUT_MS);
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <sh1106_multi_cmd+0x30>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	2264      	movs	r2, #100	; 0x64
 8000b0a:	9202      	str	r2, [sp, #8]
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	2200      	movs	r2, #0
 8000b16:	2178      	movs	r1, #120	; 0x78
 8000b18:	f000 fe32 	bl	8001780 <HAL_I2C_Mem_Write>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000600 	.word	0x20000600

08000b28 <sh1106_multi_data>:

static void sh1106_multi_data(uint8_t *data, uint8_t len){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_DATA, data, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_DATA, 1, data, len, SH1106_TIMEOUT_MS);
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <sh1106_multi_data+0x30>)
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	2264      	movs	r2, #100	; 0x64
 8000b3e:	9202      	str	r2, [sp, #8]
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2301      	movs	r3, #1
 8000b48:	2240      	movs	r2, #64	; 0x40
 8000b4a:	2178      	movs	r1, #120	; 0x78
 8000b4c:	f000 fe18 	bl	8001780 <HAL_I2C_Mem_Write>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000600 	.word	0x20000600

08000b5c <sh1106_set_col>:

/*********************************************************************************/
								// Basic functions //
/*********************************************************************************/

static void sh1106_set_col(uint8_t col){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]

	if(col > (HORIZONTAL_RES - 1)) return;
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db16      	blt.n	8000b9c <sh1106_set_col+0x40>

	uint8_t buff[2];

	buff[0] = ((col + SH1106_OFFSET) & 0b00001111) | SET_L_COL_ADDR;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	3302      	adds	r3, #2
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f003 030f 	and.w	r3, r3, #15
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	733b      	strb	r3, [r7, #12]
	buff[1] = ((col + SH1106_OFFSET) >> 4) | SET_H_COL_ADDR;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	111b      	asrs	r3, r3, #4
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	737b      	strb	r3, [r7, #13]

	sh1106_multi_cmd(buff, 2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2102      	movs	r1, #2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffad 	bl	8000af4 <sh1106_multi_cmd>
 8000b9a:	e000      	b.n	8000b9e <sh1106_set_col+0x42>
	if(col > (HORIZONTAL_RES - 1)) return;
 8000b9c:	bf00      	nop
}
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <sh1106_set_page>:

static void sh1106_set_page(uint8_t page){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]

	if(page > (PAGES - 1)) return;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	d80d      	bhi.n	8000bd0 <sh1106_set_page+0x2c>

	uint8_t a = (page & 0b00000111) | SET_PAGE_ADDR;
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	73fb      	strb	r3, [r7, #15]

	sh1106_cmd(a);
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff7b 	bl	8000ac4 <sh1106_cmd>
 8000bce:	e000      	b.n	8000bd2 <sh1106_set_page+0x2e>
	if(page > (PAGES - 1)) return;
 8000bd0:	bf00      	nop
}
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <SH1106_HwInit>:

							// oled initialization //

/*********************************************************************************/

void SH1106_HwInit(I2C_HandleTypeDef *i2c){
 8000bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bdc:	b087      	sub	sp, #28
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	466b      	mov	r3, sp
 8000be4:	461e      	mov	r6, r3

	sh1106_i2c = i2c;
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <SH1106_HwInit+0x88>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6013      	str	r3, [r2, #0]

	uint8_t a = sizeof(init_commands);
 8000bec:	2317      	movs	r3, #23
 8000bee:	75fb      	strb	r3, [r7, #23]
	uint8_t tab[a];
 8000bf0:	7df9      	ldrb	r1, [r7, #23]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	b2cb      	uxtb	r3, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	4691      	mov	r9, r2
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c14:	b2cb      	uxtb	r3, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	461c      	mov	r4, r3
 8000c1a:	4615      	mov	r5, r2
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	00eb      	lsls	r3, r5, #3
 8000c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c2a:	00e2      	lsls	r2, r4, #3
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	3307      	adds	r3, #7
 8000c30:	08db      	lsrs	r3, r3, #3
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	ebad 0d03 	sub.w	sp, sp, r3
 8000c38:	466b      	mov	r3, sp
 8000c3a:	3300      	adds	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]

	memcpy(tab, init_commands, a);
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <SH1106_HwInit+0x8c>)
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f022 fd37 	bl	80236b8 <memcpy>

	sh1106_multi_cmd(tab, a);
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff ff50 	bl	8000af4 <sh1106_multi_cmd>
 8000c54:	46b5      	mov	sp, r6
}
 8000c56:	bf00      	nop
 8000c58:	371c      	adds	r7, #28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c60:	20000600 	.word	0x20000600
 8000c64:	08023740 	.word	0x08023740

08000c68 <SH1106_Send>:
				// Y1 and Y2 have to be (multiplication of 8) -1 //
				// f.e. 0, 7, 15 etc.

/*********************************************************************************/

void SH1106_Send(uint8_t X1, uint8_t X2, uint8_t Y1, uint8_t Y2, uint8_t *Buff){
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4623      	mov	r3, r4
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	717b      	strb	r3, [r7, #5]
 8000c82:	4613      	mov	r3, r2
 8000c84:	713b      	strb	r3, [r7, #4]

	uint8_t xPixels = X2 - X1 + 1;
 8000c86:	79ba      	ldrb	r2, [r7, #6]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	3301      	adds	r3, #1
 8000c90:	73bb      	strb	r3, [r7, #14]

	uint8_t firstPage = (Y1 / 8);
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	737b      	strb	r3, [r7, #13]
	uint8_t lastPage = (Y2 / 8);
 8000c98:	793b      	ldrb	r3, [r7, #4]
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	733b      	strb	r3, [r7, #12]
	uint8_t pages = lastPage - firstPage + 1;
 8000c9e:	7b3a      	ldrb	r2, [r7, #12]
 8000ca0:	7b7b      	ldrb	r3, [r7, #13]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	72fb      	strb	r3, [r7, #11]

	for(uint8_t a = 0; a < pages; a++){
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e019      	b.n	8000ce4 <SH1106_Send+0x7c>

		sh1106_set_page(a + firstPage);
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	7b7b      	ldrb	r3, [r7, #13]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff73 	bl	8000ba4 <sh1106_set_page>
		sh1106_set_col(X1);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff4b 	bl	8000b5c <sh1106_set_col>
		sh1106_multi_data(&Buff[a * xPixels], xPixels);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	7bba      	ldrb	r2, [r7, #14]
 8000cca:	fb02 f303 	mul.w	r3, r2, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	7bba      	ldrb	r2, [r7, #14]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff25 	bl	8000b28 <sh1106_multi_data>
	for(uint8_t a = 0; a < pages; a++){
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3e1      	bcc.n	8000cb0 <SH1106_Send+0x48>
	}
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd90      	pop	{r4, r7, pc}
	...

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x44>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_MspInit+0x44>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_MspInit+0x44>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x44>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x44>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f970 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM6_DAC_IRQHandler+0x10>)
 8000d9a:	f002 fb0f 	bl	80033bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000604 	.word	0x20000604

08000da8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_TIM6_Init+0x64>)
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <MX_TIM6_Init+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_TIM6_Init+0x64>)
 8000de4:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000de8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_TIM6_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_TIM6_Init+0x64>)
 8000df2:	2263      	movs	r2, #99	; 0x63
 8000df4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_TIM6_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_TIM6_Init+0x64>)
 8000dfe:	f002 fa0d 	bl	800321c <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e08:	f7ff fe56 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_TIM6_Init+0x64>)
 8000e1a:	f002 fcb7 	bl	800378c <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e24:	f7ff fe48 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000604 	.word	0x20000604
 8000e34:	40001000 	.word	0x40001000

08000e38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_TIM_Base_MspInit+0x44>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d113      	bne.n	8000e72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_TIM_Base_MspInit+0x48>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_TIM_Base_MspInit+0x48>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_TIM_Base_MspInit+0x48>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2036      	movs	r0, #54	; 0x36
 8000e68:	f000 f9fd 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e6c:	2036      	movs	r0, #54	; 0x36
 8000e6e:	f000 fa16 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40001000 	.word	0x40001000
 8000e80:	40023800 	.word	0x40023800

08000e84 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <MX_USART3_UART_Init+0x5c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART3_UART_Init+0x58>)
 8000ec8:	f002 fd0c 	bl	80038e4 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ed2:	f7ff fdf1 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000650 	.word	0x20000650
 8000ee0:	40004800 	.word	0x40004800

08000ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0ae      	sub	sp, #184	; 0xb8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2290      	movs	r2, #144	; 0x90
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f022 fbe5 	bl	80236d4 <memset>
  if(uartHandle->Instance==USART3)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <HAL_UART_MspInit+0xb4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d13c      	bne.n	8000f8e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fd52 	bl	80029cc <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f2e:	f7ff fdc3 	bl	8000ab8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_UART_MspInit+0xb8>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0xb8>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0xb8>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_MspInit+0xb8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_UART_MspInit+0xb8>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0xb8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_MspInit+0xbc>)
 8000f8a:	f000 f9a3 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	37b8      	adds	r7, #184	; 0xb8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40004800 	.word	0x40004800
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020c00 	.word	0x40020c00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fce:	f7ff feeb 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f022 fb4d 	bl	8023670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fccd 	bl	8000974 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000fe8:	08026f5c 	.word	0x08026f5c
  ldr r2, =_sbss
 8000fec:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ff0:	2000ca68 	.word	0x2000ca68

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>

08000ff6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 f928 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f805 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001006:	f7ff fe77 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f943 	bl	80012ba <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800104c:	f000 f90b 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000004 	.word	0x20000004
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000000c 	.word	0x2000000c
 8001094:	200006d8 	.word	0x200006d8

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200006d8 	.word	0x200006d8

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <__NVIC_SetPriorityGrouping+0x40>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x40>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00
 80010f4:	05fa0000 	.word	0x05fa0000

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff29 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff3e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff31 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e175      	b.n	80015e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	f040 8164 	bne.w	80015da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_GPIO_Init+0x56>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d130      	bne.n	800138c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0201 	and.w	r2, r3, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b03      	cmp	r3, #3
 8001396:	d017      	beq.n	80013c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80be 	beq.w	80015da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a65      	ldr	r2, [pc, #404]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <HAL_GPIO_Init+0x324>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001476:	4a61      	ldr	r2, [pc, #388]	; (80015fc <HAL_GPIO_Init+0x328>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a58      	ldr	r2, [pc, #352]	; (8001600 <HAL_GPIO_Init+0x32c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d037      	beq.n	8001512 <HAL_GPIO_Init+0x23e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_GPIO_Init+0x330>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d031      	beq.n	800150e <HAL_GPIO_Init+0x23a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a56      	ldr	r2, [pc, #344]	; (8001608 <HAL_GPIO_Init+0x334>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d02b      	beq.n	800150a <HAL_GPIO_Init+0x236>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a55      	ldr	r2, [pc, #340]	; (800160c <HAL_GPIO_Init+0x338>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d025      	beq.n	8001506 <HAL_GPIO_Init+0x232>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a54      	ldr	r2, [pc, #336]	; (8001610 <HAL_GPIO_Init+0x33c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01f      	beq.n	8001502 <HAL_GPIO_Init+0x22e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a53      	ldr	r2, [pc, #332]	; (8001614 <HAL_GPIO_Init+0x340>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d019      	beq.n	80014fe <HAL_GPIO_Init+0x22a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_GPIO_Init+0x344>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0x226>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a51      	ldr	r2, [pc, #324]	; (800161c <HAL_GPIO_Init+0x348>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00d      	beq.n	80014f6 <HAL_GPIO_Init+0x222>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a50      	ldr	r2, [pc, #320]	; (8001620 <HAL_GPIO_Init+0x34c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x21e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x350>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_GPIO_Init+0x21a>
 80014ea:	2309      	movs	r3, #9
 80014ec:	e012      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014ee:	230a      	movs	r3, #10
 80014f0:	e010      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014f2:	2308      	movs	r3, #8
 80014f4:	e00e      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x240>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x240>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x240>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x240>
 8001512:	2300      	movs	r3, #0
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001524:	4935      	ldr	r1, [pc, #212]	; (80015fc <HAL_GPIO_Init+0x328>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001556:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_GPIO_Init+0x354>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001580:	4a29      	ldr	r2, [pc, #164]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_GPIO_Init+0x354>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_GPIO_Init+0x354>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	f67f ae86 	bls.w	80012f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40013800 	.word	0x40013800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40021400 	.word	0x40021400
 8001618:	40021800 	.word	0x40021800
 800161c:	40021c00 	.word	0x40021c00
 8001620:	40022000 	.word	0x40022000
 8001624:	40022400 	.word	0x40022400
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e07f      	b.n	8001772 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff f81e 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2224      	movs	r2, #36	; 0x24
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e006      	b.n	80016e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d104      	bne.n	80016fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_I2C_Init+0x11c>)
 8001706:	430b      	orrs	r3, r1
 8001708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69d9      	ldr	r1, [r3, #28]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	02008000 	.word	0x02008000

08001780 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	817b      	strh	r3, [r7, #10]
 8001792:	460b      	mov	r3, r1
 8001794:	813b      	strh	r3, [r7, #8]
 8001796:	4613      	mov	r3, r2
 8001798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	f040 80f9 	bne.w	800199a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_I2C_Mem_Write+0x34>
 80017ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0ed      	b.n	800199c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_I2C_Mem_Write+0x4e>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0e6      	b.n	800199c <HAL_I2C_Mem_Write+0x21c>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017d6:	f7ff fc5f 	bl	8001098 <HAL_GetTick>
 80017da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2319      	movs	r3, #25
 80017e2:	2201      	movs	r2, #1
 80017e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f955 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0d1      	b.n	800199c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2221      	movs	r2, #33	; 0x21
 80017fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001820:	88f8      	ldrh	r0, [r7, #6]
 8001822:	893a      	ldrh	r2, [r7, #8]
 8001824:	8979      	ldrh	r1, [r7, #10]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	4603      	mov	r3, r0
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f8b9 	bl	80019a8 <I2C_RequestMemoryWrite>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0a9      	b.n	800199c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d90e      	bls.n	8001870 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	22ff      	movs	r2, #255	; 0xff
 8001856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	b2da      	uxtb	r2, r3
 800185e:	8979      	ldrh	r1, [r7, #10]
 8001860:	2300      	movs	r3, #0
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 fab1 	bl	8001dd0 <I2C_TransferConfig>
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187e:	b2da      	uxtb	r2, r3
 8001880:	8979      	ldrh	r1, [r7, #10]
 8001882:	2300      	movs	r3, #0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 faa0 	bl	8001dd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f93f 	bl	8001b18 <I2C_WaitOnTXISFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e07b      	b.n	800199c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d034      	beq.n	8001948 <HAL_I2C_Mem_Write+0x1c8>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d130      	bne.n	8001948 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	2200      	movs	r2, #0
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f8d1 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e04d      	b.n	800199c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d90e      	bls.n	8001928 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	22ff      	movs	r2, #255	; 0xff
 800190e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001914:	b2da      	uxtb	r2, r3
 8001916:	8979      	ldrh	r1, [r7, #10]
 8001918:	2300      	movs	r3, #0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fa55 	bl	8001dd0 <I2C_TransferConfig>
 8001926:	e00f      	b.n	8001948 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	b2da      	uxtb	r2, r3
 8001938:	8979      	ldrh	r1, [r7, #10]
 800193a:	2300      	movs	r3, #0
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fa44 	bl	8001dd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d19e      	bne.n	8001890 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f91e 	bl	8001b98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e01a      	b.n	800199c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2220      	movs	r2, #32
 800196c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_I2C_Mem_Write+0x224>)
 800197a:	400b      	ands	r3, r1
 800197c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2220      	movs	r2, #32
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e000      	b.n	800199c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800199a:	2302      	movs	r3, #2
  }
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	fe00e800 	.word	0xfe00e800

080019a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	817b      	strh	r3, [r7, #10]
 80019ba:	460b      	mov	r3, r1
 80019bc:	813b      	strh	r3, [r7, #8]
 80019be:	4613      	mov	r3, r2
 80019c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	8979      	ldrh	r1, [r7, #10]
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <I2C_RequestMemoryWrite+0xa4>)
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f9fd 	bl	8001dd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	69b9      	ldr	r1, [r7, #24]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 f89c 	bl	8001b18 <I2C_WaitOnTXISFlagUntilTimeout>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e02c      	b.n	8001a44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019f0:	893b      	ldrh	r3, [r7, #8]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
 80019fa:	e015      	b.n	8001a28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019fc:	893b      	ldrh	r3, [r7, #8]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f882 	bl	8001b18 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e012      	b.n	8001a44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a1e:	893b      	ldrh	r3, [r7, #8]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f830 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	80002000 	.word	0x80002000

08001a50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d103      	bne.n	8001a6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d007      	beq.n	8001a8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	619a      	str	r2, [r3, #24]
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa8:	e022      	b.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab0:	d01e      	beq.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab2:	f7ff faf1 	bl	8001098 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d302      	bcc.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d113      	bne.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e00f      	b.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4013      	ands	r3, r2
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d0cd      	beq.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b24:	e02c      	b.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f870 	bl	8001c10 <I2C_IsErrorOccurred>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e02a      	b.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b40:	d01e      	beq.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b42:	f7ff faa9 	bl	8001098 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d302      	bcc.n	8001b58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d113      	bne.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e007      	b.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d1cb      	bne.n	8001b26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba4:	e028      	b.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f830 	bl	8001c10 <I2C_IsErrorOccurred>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e026      	b.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bba:	f7ff fa6d 	bl	8001098 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d302      	bcc.n	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d113      	bne.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e007      	b.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d1cf      	bne.n	8001ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d068      	beq.n	8001d0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2210      	movs	r2, #16
 8001c42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c44:	e049      	b.n	8001cda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c4c:	d045      	beq.n	8001cda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7ff fa23 	bl	8001098 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_IsErrorOccurred+0x54>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d13a      	bne.n	8001cda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c86:	d121      	bne.n	8001ccc <I2C_IsErrorOccurred+0xbc>
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c8e:	d01d      	beq.n	8001ccc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c90:	7cfb      	ldrb	r3, [r7, #19]
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d01a      	beq.n	8001ccc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ca4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ca6:	f7ff f9f7 	bl	8001098 <HAL_GetTick>
 8001caa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cac:	e00e      	b.n	8001ccc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cae:	f7ff f9f3 	bl	8001098 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b19      	cmp	r3, #25
 8001cba:	d907      	bls.n	8001ccc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	f043 0320 	orr.w	r3, r3, #32
 8001cc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001cca:	e006      	b.n	8001cda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d1e9      	bne.n	8001cae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d003      	beq.n	8001cf0 <I2C_IsErrorOccurred+0xe0>
 8001ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0aa      	beq.n	8001c46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d103      	bne.n	8001d00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00b      	beq.n	8001d38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01c      	beq.n	8001dbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7ff fe63 	bl	8001a50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <I2C_IsErrorOccurred+0x1bc>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	fe00e800 	.word	0xfe00e800

08001dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	817b      	strh	r3, [r7, #10]
 8001dde:	4613      	mov	r3, r2
 8001de0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001de2:	897b      	ldrh	r3, [r7, #10]
 8001de4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001de8:	7a7b      	ldrb	r3, [r7, #9]
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001df0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	0d5b      	lsrs	r3, r3, #21
 8001e0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <I2C_TransferConfig+0x60>)
 8001e10:	430b      	orrs	r3, r1
 8001e12:	43db      	mvns	r3, r3
 8001e14:	ea02 0103 	and.w	r1, r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	03ff63ff 	.word	0x03ff63ff

08001e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d138      	bne.n	8001ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e032      	b.n	8001ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d139      	bne.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e033      	b.n	8001f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2224      	movs	r2, #36	; 0x24
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40007000 	.word	0x40007000

08001f84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b23      	ldr	r3, [pc, #140]	; (800201c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fb2:	f7ff f871 	bl	8001098 <HAL_GetTick>
 8001fb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fb8:	e009      	b.n	8001fce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fba:	f7ff f86d 	bl	8001098 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fc8:	d901      	bls.n	8001fce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e022      	b.n	8002014 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d1ee      	bne.n	8001fba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe8:	f7ff f856 	bl	8001098 <HAL_GetTick>
 8001fec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fee:	e009      	b.n	8002004 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ff0:	f7ff f852 	bl	8001098 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ffe:	d901      	bls.n	8002004 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e007      	b.n	8002014 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002010:	d1ee      	bne.n	8001ff0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	40007000 	.word	0x40007000

08002024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e29b      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8087 	beq.w	8002156 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002048:	4b96      	ldr	r3, [pc, #600]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00c      	beq.n	800206e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002054:	4b93      	ldr	r3, [pc, #588]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d112      	bne.n	8002086 <HAL_RCC_OscConfig+0x62>
 8002060:	4b90      	ldr	r3, [pc, #576]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206c:	d10b      	bne.n	8002086 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206e:	4b8d      	ldr	r3, [pc, #564]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06c      	beq.n	8002154 <HAL_RCC_OscConfig+0x130>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d168      	bne.n	8002154 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e275      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x7a>
 8002090:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a83      	ldr	r2, [pc, #524]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x9c>
 80020a6:	4b7f      	ldr	r3, [pc, #508]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7e      	ldr	r2, [pc, #504]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b7c      	ldr	r3, [pc, #496]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7b      	ldr	r2, [pc, #492]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0xc0>
 80020ca:	4b76      	ldr	r3, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a75      	ldr	r2, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b73      	ldr	r3, [pc, #460]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a72      	ldr	r2, [pc, #456]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 80020e4:	4b6f      	ldr	r3, [pc, #444]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6e      	ldr	r2, [pc, #440]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b6c      	ldr	r3, [pc, #432]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a6b      	ldr	r2, [pc, #428]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe ffc8 	bl	8001098 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7fe ffc4 	bl	8001098 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e229      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b61      	ldr	r3, [pc, #388]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xe8>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe ffb4 	bl	8001098 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe ffb0 	bl	8001098 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e215      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x110>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d069      	beq.n	8002236 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002162:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216e:	4b4d      	ldr	r3, [pc, #308]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x190>
 800217a:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x17a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1e9      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b41      	ldr	r3, [pc, #260]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	493d      	ldr	r1, [pc, #244]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e040      	b.n	8002236 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d023      	beq.n	8002204 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b39      	ldr	r3, [pc, #228]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a38      	ldr	r2, [pc, #224]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff66 	bl	8001098 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d0:	f7fe ff62 	bl	8001098 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1c7      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4929      	ldr	r1, [pc, #164]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
 8002202:	e018      	b.n	8002236 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe ff42 	bl	8001098 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002218:	f7fe ff3e 	bl	8001098 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1a3      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d038      	beq.n	80022b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d019      	beq.n	800227e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 800224c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224e:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7fe ff1f 	bl	8001098 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe ff1b 	bl	8001098 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e180      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x23a>
 800227c:	e01a      	b.n	80022b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7fe ff05 	bl	8001098 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7fe ff01 	bl	8001098 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d903      	bls.n	80022a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e166      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
 80022a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ee      	bne.n	8002292 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a4 	beq.w	800240a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b8c      	ldr	r3, [pc, #560]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10d      	bne.n	80022ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a88      	ldr	r2, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b86      	ldr	r3, [pc, #536]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ea:	4b83      	ldr	r3, [pc, #524]	; (80024f8 <HAL_RCC_OscConfig+0x4d4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022f6:	4b80      	ldr	r3, [pc, #512]	; (80024f8 <HAL_RCC_OscConfig+0x4d4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7f      	ldr	r2, [pc, #508]	; (80024f8 <HAL_RCC_OscConfig+0x4d4>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe fec9 	bl	8001098 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe fec5 	bl	8001098 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e12a      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231c:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <HAL_RCC_OscConfig+0x4d4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x31a>
 8002330:	4b70      	ldr	r3, [pc, #448]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	4a6f      	ldr	r2, [pc, #444]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6713      	str	r3, [r2, #112]	; 0x70
 800233c:	e02d      	b.n	800239a <HAL_RCC_OscConfig+0x376>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x33c>
 8002346:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a6a      	ldr	r2, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
 8002352:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6713      	str	r3, [r2, #112]	; 0x70
 800235e:	e01c      	b.n	800239a <HAL_RCC_OscConfig+0x376>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x35e>
 8002368:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a61      	ldr	r2, [pc, #388]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
 8002374:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a5e      	ldr	r2, [pc, #376]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
 8002380:	e00b      	b.n	800239a <HAL_RCC_OscConfig+0x376>
 8002382:	4b5c      	ldr	r3, [pc, #368]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a5b      	ldr	r2, [pc, #364]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d015      	beq.n	80023ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7fe fe79 	bl	8001098 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe fe75 	bl	8001098 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0d8      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ee      	beq.n	80023aa <HAL_RCC_OscConfig+0x386>
 80023cc:	e014      	b.n	80023f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ce:	f7fe fe63 	bl	8001098 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe fe5f 	bl	8001098 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0c2      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ee      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a3c      	ldr	r2, [pc, #240]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80ae 	beq.w	8002570 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d06d      	beq.n	80024fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d14b      	bne.n	80024c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a31      	ldr	r2, [pc, #196]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fe30 	bl	8001098 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7fe fe2c 	bl	8001098 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e091      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	3b01      	subs	r3, #1
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	071b      	lsls	r3, r3, #28
 8002486:	491b      	ldr	r1, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fdfe 	bl	8001098 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe fdfa 	bl	8001098 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e05f      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x47c>
 80024be:	e057      	b.n	8002570 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fde4 	bl	8001098 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe fde0 	bl	8001098 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e045      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4b0>
 80024f2:	e03d      	b.n	8002570 <HAL_RCC_OscConfig+0x54c>
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_RCC_OscConfig+0x558>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d030      	beq.n	800256c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d129      	bne.n	800256c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d122      	bne.n	800256c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002532:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002534:	4293      	cmp	r3, r2
 8002536:	d119      	bne.n	800256c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	3b01      	subs	r3, #1
 8002546:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d10f      	bne.n	800256c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d107      	bne.n	800256c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0d0      	b.n	800273a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d910      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b67      	ldr	r3, [pc, #412]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 020f 	bic.w	r2, r3, #15
 80025ae:	4965      	ldr	r1, [pc, #404]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 80025e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d040      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d115      	bne.n	8002662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e073      	b.n	800273a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06b      	b.n	800273a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002662:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f023 0203 	bic.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4936      	ldr	r1, [pc, #216]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002674:	f7fe fd10 	bl	8001098 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7fe fd0c 	bl	8001098 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e053      	b.n	800273a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 020c 	and.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1eb      	bne.n	800267c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d210      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 020f 	bic.w	r2, r3, #15
 80026ba:	4922      	ldr	r1, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1cc>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1d0>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1d4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fc6c 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	08023758 	.word	0x08023758
 8002750:	20000004 	.word	0x20000004
 8002754:	20000008 	.word	0x20000008

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800275c:	b094      	sub	sp, #80	; 0x50
 800275e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
 8002764:	2300      	movs	r3, #0
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002768:	2300      	movs	r3, #0
 800276a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002770:	4b79      	ldr	r3, [pc, #484]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b08      	cmp	r3, #8
 800277a:	d00d      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x40>
 800277c:	2b08      	cmp	r3, #8
 800277e:	f200 80e1 	bhi.w	8002944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x34>
 8002786:	2b04      	cmp	r3, #4
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x3a>
 800278a:	e0db      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4b73      	ldr	r3, [pc, #460]	; (800295c <HAL_RCC_GetSysClockFreq+0x204>)
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002790:	e0db      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002792:	4b73      	ldr	r3, [pc, #460]	; (8002960 <HAL_RCC_GetSysClockFreq+0x208>)
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002796:	e0d8      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002798:	4b6f      	ldr	r3, [pc, #444]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027a2:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d063      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	2200      	movs	r2, #0
 80027b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
 80027c2:	2300      	movs	r3, #0
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
 80027c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027ca:	4622      	mov	r2, r4
 80027cc:	462b      	mov	r3, r5
 80027ce:	f04f 0000 	mov.w	r0, #0
 80027d2:	f04f 0100 	mov.w	r1, #0
 80027d6:	0159      	lsls	r1, r3, #5
 80027d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027dc:	0150      	lsls	r0, r2, #5
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4621      	mov	r1, r4
 80027e4:	1a51      	subs	r1, r2, r1
 80027e6:	6139      	str	r1, [r7, #16]
 80027e8:	4629      	mov	r1, r5
 80027ea:	eb63 0301 	sbc.w	r3, r3, r1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027fc:	4659      	mov	r1, fp
 80027fe:	018b      	lsls	r3, r1, #6
 8002800:	4651      	mov	r1, sl
 8002802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002806:	4651      	mov	r1, sl
 8002808:	018a      	lsls	r2, r1, #6
 800280a:	4651      	mov	r1, sl
 800280c:	ebb2 0801 	subs.w	r8, r2, r1
 8002810:	4659      	mov	r1, fp
 8002812:	eb63 0901 	sbc.w	r9, r3, r1
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800282a:	4690      	mov	r8, r2
 800282c:	4699      	mov	r9, r3
 800282e:	4623      	mov	r3, r4
 8002830:	eb18 0303 	adds.w	r3, r8, r3
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	462b      	mov	r3, r5
 8002838:	eb49 0303 	adc.w	r3, r9, r3
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800284a:	4629      	mov	r1, r5
 800284c:	024b      	lsls	r3, r1, #9
 800284e:	4621      	mov	r1, r4
 8002850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002854:	4621      	mov	r1, r4
 8002856:	024a      	lsls	r2, r1, #9
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285e:	2200      	movs	r2, #0
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
 8002862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002868:	f7fd fcf8 	bl	800025c <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002874:	e058      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002876:	4b38      	ldr	r3, [pc, #224]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	2200      	movs	r2, #0
 800287e:	4618      	mov	r0, r3
 8002880:	4611      	mov	r1, r2
 8002882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	0159      	lsls	r1, r3, #5
 800289e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a2:	0150      	lsls	r0, r2, #5
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4641      	mov	r1, r8
 80028aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ae:	4649      	mov	r1, r9
 80028b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028c8:	ebb2 040a 	subs.w	r4, r2, sl
 80028cc:	eb63 050b 	sbc.w	r5, r3, fp
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	00eb      	lsls	r3, r5, #3
 80028da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028de:	00e2      	lsls	r2, r4, #3
 80028e0:	4614      	mov	r4, r2
 80028e2:	461d      	mov	r5, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	18e3      	adds	r3, r4, r3
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	464b      	mov	r3, r9
 80028ec:	eb45 0303 	adc.w	r3, r5, r3
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fe:	4629      	mov	r1, r5
 8002900:	028b      	lsls	r3, r1, #10
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002908:	4621      	mov	r1, r4
 800290a:	028a      	lsls	r2, r1, #10
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002912:	2200      	movs	r2, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	61fa      	str	r2, [r7, #28]
 8002918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291c:	f7fd fc9e 	bl	800025c <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_GetSysClockFreq+0x200>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800293a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002942:	e002      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetSysClockFreq+0x204>)
 8002946:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800294c:	4618      	mov	r0, r3
 800294e:	3750      	adds	r7, #80	; 0x50
 8002950:	46bd      	mov	sp, r7
 8002952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200

08002964 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000004 	.word	0x20000004

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002980:	f7ff fff0 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0a9b      	lsrs	r3, r3, #10
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4903      	ldr	r1, [pc, #12]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	08023768 	.word	0x08023768

080029a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a8:	f7ff ffdc 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0b5b      	lsrs	r3, r3, #13
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	08023768 	.word	0x08023768

080029cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029f4:	4b69      	ldr	r3, [pc, #420]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a68      	ldr	r2, [pc, #416]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029fe:	6093      	str	r3, [r2, #8]
 8002a00:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	4964      	ldr	r1, [pc, #400]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d017      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a26:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	4959      	ldr	r1, [pc, #356]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a44:	d101      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d017      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a62:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	494a      	ldr	r1, [pc, #296]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a80:	d101      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 808b 	beq.w	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	4a39      	ldr	r2, [pc, #228]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6413      	str	r3, [r2, #64]	; 0x40
 8002abc:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a34      	ldr	r2, [pc, #208]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fae0 	bl	8001098 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002adc:	f7fe fadc 	bl	8001098 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e38f      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d035      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d02e      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b3a:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b40:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d114      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe faa4 	bl	8001098 <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fe faa0 	bl	8001098 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e351      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ee      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b82:	d111      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b92:	400b      	ands	r3, r1
 8002b94:	4901      	ldr	r1, [pc, #4]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	0ffffcff 	.word	0x0ffffcff
 8002ba8:	4bac      	ldr	r3, [pc, #688]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4aab      	ldr	r2, [pc, #684]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bb2:	6093      	str	r3, [r2, #8]
 8002bb4:	4ba9      	ldr	r3, [pc, #676]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc0:	49a6      	ldr	r1, [pc, #664]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d010      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bd2:	4ba2      	ldr	r3, [pc, #648]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd8:	4aa0      	ldr	r2, [pc, #640]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002be2:	4b9e      	ldr	r3, [pc, #632]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	499b      	ldr	r1, [pc, #620]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c00:	4b96      	ldr	r3, [pc, #600]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c0e:	4993      	ldr	r1, [pc, #588]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c22:	4b8e      	ldr	r3, [pc, #568]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c30:	498a      	ldr	r1, [pc, #552]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c44:	4b85      	ldr	r3, [pc, #532]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c52:	4982      	ldr	r1, [pc, #520]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c66:	4b7d      	ldr	r3, [pc, #500]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4979      	ldr	r1, [pc, #484]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c88:	4b74      	ldr	r3, [pc, #464]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4971      	ldr	r1, [pc, #452]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002caa:	4b6c      	ldr	r3, [pc, #432]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f023 020c 	bic.w	r2, r3, #12
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	4968      	ldr	r1, [pc, #416]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ccc:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4960      	ldr	r1, [pc, #384]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfc:	4957      	ldr	r1, [pc, #348]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d10:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	494f      	ldr	r1, [pc, #316]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d32:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	4946      	ldr	r1, [pc, #280]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d54:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	493e      	ldr	r1, [pc, #248]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d84:	4935      	ldr	r1, [pc, #212]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d98:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da6:	492d      	ldr	r1, [pc, #180]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d011      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002dba:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc8:	4924      	ldr	r1, [pc, #144]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd8:	d101      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e08:	4914      	ldr	r1, [pc, #80]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2c:	490b      	ldr	r1, [pc, #44]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00f      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e50:	4902      	ldr	r1, [pc, #8]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e58:	e002      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e6c:	4b8a      	ldr	r3, [pc, #552]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	4986      	ldr	r1, [pc, #536]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e90:	4b81      	ldr	r3, [pc, #516]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea0:	497d      	ldr	r1, [pc, #500]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d006      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80d6 	beq.w	8003068 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fe f8e6 	bl	8001098 <HAL_GetTick>
 8002ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ed0:	f7fe f8e2 	bl	8001098 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e195      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d021      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11d      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f02:	4b65      	ldr	r3, [pc, #404]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f10:	4b61      	ldr	r3, [pc, #388]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f16:	0e1b      	lsrs	r3, r3, #24
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	019a      	lsls	r2, r3, #6
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	4958      	ldr	r1, [pc, #352]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d02e      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f68:	d129      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f78:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7e:	0f1b      	lsrs	r3, r3, #28
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	019a      	lsls	r2, r3, #6
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	493e      	ldr	r1, [pc, #248]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fa6:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fac:	f023 021f 	bic.w	r2, r3, #31
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	4938      	ldr	r1, [pc, #224]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01d      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd0:	0e1b      	lsrs	r3, r3, #24
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fde:	0f1b      	lsrs	r3, r3, #28
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	019a      	lsls	r2, r3, #6
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	061b      	lsls	r3, r3, #24
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	071b      	lsls	r3, r3, #28
 8002ffe:	4926      	ldr	r1, [pc, #152]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d011      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	019a      	lsls	r2, r3, #6
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	491a      	ldr	r1, [pc, #104]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a17      	ldr	r2, [pc, #92]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003042:	f7fe f829 	bl	8001098 <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800304a:	f7fe f825 	bl	8001098 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b64      	cmp	r3, #100	; 0x64
 8003056:	d901      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0d8      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b01      	cmp	r3, #1
 800306c:	f040 80ce 	bne.w	800320c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a08      	ldr	r2, [pc, #32]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307c:	f7fe f80c 	bl	8001098 <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003082:	e00b      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003084:	f7fe f808 	bl	8001098 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d904      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0bb      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800309c:	4b5e      	ldr	r3, [pc, #376]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a8:	d0ec      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02e      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d12a      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030d2:	4b51      	ldr	r3, [pc, #324]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030e0:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	0f1b      	lsrs	r3, r3, #28
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	019a      	lsls	r2, r3, #6
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	061b      	lsls	r3, r3, #24
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	071b      	lsls	r3, r3, #28
 8003106:	4944      	ldr	r1, [pc, #272]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800310e:	4b42      	ldr	r3, [pc, #264]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003114:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	493d      	ldr	r1, [pc, #244]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d022      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800313c:	d11d      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003144:	0e1b      	lsrs	r3, r3, #24
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	0f1b      	lsrs	r3, r3, #28
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	019a      	lsls	r2, r3, #6
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	431a      	orrs	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	071b      	lsls	r3, r3, #28
 8003172:	4929      	ldr	r1, [pc, #164]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d028      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	0e1b      	lsrs	r3, r3, #24
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003194:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	019a      	lsls	r2, r3, #6
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	041b      	lsls	r3, r3, #16
 80031ac:	431a      	orrs	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	071b      	lsls	r3, r3, #28
 80031ba:	4917      	ldr	r1, [pc, #92]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	4911      	ldr	r1, [pc, #68]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fd ff58 	bl	8001098 <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031ec:	f7fd ff54 	bl	8001098 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e007      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800320a:	d1ef      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e049      	b.n	80032c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fdf8 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f000 f9f6 	bl	800364c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d001      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e054      	b.n	800338e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_TIM_Base_Start_IT+0xd0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d022      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d01d      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d018      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d013      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1f      	ldr	r2, [pc, #124]	; (80033a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00e      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <HAL_TIM_Base_Start_IT+0xe0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x80>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d115      	bne.n	8003378 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_TIM_Base_Start_IT+0xec>)
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b06      	cmp	r3, #6
 800335c:	d015      	beq.n	800338a <HAL_TIM_Base_Start_IT+0xbe>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d011      	beq.n	800338a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003376:	e008      	b.n	800338a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e000      	b.n	800338c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40010400 	.word	0x40010400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40001800 	.word	0x40001800
 80033b8:	00010007 	.word	0x00010007

080033bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d122      	bne.n	8003418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d11b      	bne.n	8003418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0202 	mvn.w	r2, #2
 80033e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f905 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 8003404:	e005      	b.n	8003412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8f7 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f908 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d122      	bne.n	800346c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b04      	cmp	r3, #4
 8003432:	d11b      	bne.n	800346c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0204 	mvn.w	r2, #4
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8db 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 8003458:	e005      	b.n	8003466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8cd 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f8de 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d122      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b08      	cmp	r3, #8
 8003486:	d11b      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0208 	mvn.w	r2, #8
 8003490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2204      	movs	r2, #4
 8003496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8b1 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8a3 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f8b4 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d122      	bne.n	8003514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0210 	mvn.w	r2, #16
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2208      	movs	r2, #8
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f887 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f879 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f88a 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10e      	bne.n	8003540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0201 	mvn.w	r2, #1
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd faaa 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b80      	cmp	r3, #128	; 0x80
 800354c:	d10e      	bne.n	800356c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d107      	bne.n	800356c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9a8 	bl	80038bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d10e      	bne.n	800359a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d107      	bne.n	800359a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f99b 	bl	80038d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d10e      	bne.n	80035c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d107      	bne.n	80035c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f838 	bl	8003636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d10e      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d107      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f06f 0220 	mvn.w	r2, #32
 80035ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f95b 	bl	80038a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a40      	ldr	r2, [pc, #256]	; (8003760 <TIM_Base_SetConfig+0x114>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366a:	d00f      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3d      	ldr	r2, [pc, #244]	; (8003764 <TIM_Base_SetConfig+0x118>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00b      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3c      	ldr	r2, [pc, #240]	; (8003768 <TIM_Base_SetConfig+0x11c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3b      	ldr	r2, [pc, #236]	; (800376c <TIM_Base_SetConfig+0x120>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <TIM_Base_SetConfig+0x124>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <TIM_Base_SetConfig+0x114>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d02b      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ac:	d027      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <TIM_Base_SetConfig+0x118>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d023      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <TIM_Base_SetConfig+0x11c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	; (800376c <TIM_Base_SetConfig+0x120>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01b      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a29      	ldr	r2, [pc, #164]	; (8003770 <TIM_Base_SetConfig+0x124>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d017      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a28      	ldr	r2, [pc, #160]	; (8003774 <TIM_Base_SetConfig+0x128>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <TIM_Base_SetConfig+0x12c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00f      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a26      	ldr	r2, [pc, #152]	; (800377c <TIM_Base_SetConfig+0x130>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a25      	ldr	r2, [pc, #148]	; (8003780 <TIM_Base_SetConfig+0x134>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a24      	ldr	r2, [pc, #144]	; (8003784 <TIM_Base_SetConfig+0x138>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a23      	ldr	r2, [pc, #140]	; (8003788 <TIM_Base_SetConfig+0x13c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d108      	bne.n	8003710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <TIM_Base_SetConfig+0x114>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0xf8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <TIM_Base_SetConfig+0x124>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d103      	bne.n	800374c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	615a      	str	r2, [r3, #20]
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800
 8003780:	40001800 	.word	0x40001800
 8003784:	40001c00 	.word	0x40001c00
 8003788:	40002000 	.word	0x40002000

0800378c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e06d      	b.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a30      	ldr	r2, [pc, #192]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2f      	ldr	r2, [pc, #188]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d108      	bne.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a20      	ldr	r2, [pc, #128]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d022      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d01d      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1a      	ldr	r2, [pc, #104]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00e      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d10c      	bne.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40001800 	.word	0x40001800

080038a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e040      	b.n	8003978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd faec 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f82c 	bl	8003980 <UART_SetConfig>
 8003928:	4603      	mov	r3, r0
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e022      	b.n	8003978 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa84 	bl	8003e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800394e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800395e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fb0b 	bl	8003f8c <UART_CheckIdleState>
 8003976:	4603      	mov	r3, r0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4ba6      	ldr	r3, [pc, #664]	; (8003c44 <UART_SetConfig+0x2c4>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a94      	ldr	r2, [pc, #592]	; (8003c48 <UART_SetConfig+0x2c8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d120      	bne.n	8003a3e <UART_SetConfig+0xbe>
 80039fc:	4b93      	ldr	r3, [pc, #588]	; (8003c4c <UART_SetConfig+0x2cc>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d816      	bhi.n	8003a38 <UART_SetConfig+0xb8>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0x90>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a2d 	.word	0x08003a2d
 8003a18:	08003a27 	.word	0x08003a27
 8003a1c:	08003a33 	.word	0x08003a33
 8003a20:	2301      	movs	r3, #1
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e150      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a26:	2302      	movs	r3, #2
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e14d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e14a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a32:	2308      	movs	r3, #8
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e147      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e144      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a83      	ldr	r2, [pc, #524]	; (8003c50 <UART_SetConfig+0x2d0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d132      	bne.n	8003aae <UART_SetConfig+0x12e>
 8003a48:	4b80      	ldr	r3, [pc, #512]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d828      	bhi.n	8003aa8 <UART_SetConfig+0x128>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0xdc>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003aa9 	.word	0x08003aa9
 8003a64:	08003aa9 	.word	0x08003aa9
 8003a68:	08003aa9 	.word	0x08003aa9
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003aa9 	.word	0x08003aa9
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003aa9 	.word	0x08003aa9
 8003a7c:	08003a97 	.word	0x08003a97
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003aa9 	.word	0x08003aa9
 8003a8c:	08003aa3 	.word	0x08003aa3
 8003a90:	2300      	movs	r3, #0
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e118      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a96:	2302      	movs	r3, #2
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e115      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e112      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e10f      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e10c      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a68      	ldr	r2, [pc, #416]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d120      	bne.n	8003afa <UART_SetConfig+0x17a>
 8003ab8:	4b64      	ldr	r3, [pc, #400]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ac2:	2b30      	cmp	r3, #48	; 0x30
 8003ac4:	d013      	beq.n	8003aee <UART_SetConfig+0x16e>
 8003ac6:	2b30      	cmp	r3, #48	; 0x30
 8003ac8:	d814      	bhi.n	8003af4 <UART_SetConfig+0x174>
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d009      	beq.n	8003ae2 <UART_SetConfig+0x162>
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d810      	bhi.n	8003af4 <UART_SetConfig+0x174>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <UART_SetConfig+0x15c>
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d006      	beq.n	8003ae8 <UART_SetConfig+0x168>
 8003ada:	e00b      	b.n	8003af4 <UART_SetConfig+0x174>
 8003adc:	2300      	movs	r3, #0
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e0f2      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e0ef      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e0ec      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003aee:	2308      	movs	r3, #8
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e0e9      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003af4:	2310      	movs	r3, #16
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e0e6      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a56      	ldr	r2, [pc, #344]	; (8003c58 <UART_SetConfig+0x2d8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d120      	bne.n	8003b46 <UART_SetConfig+0x1c6>
 8003b04:	4b51      	ldr	r3, [pc, #324]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b10:	d013      	beq.n	8003b3a <UART_SetConfig+0x1ba>
 8003b12:	2bc0      	cmp	r3, #192	; 0xc0
 8003b14:	d814      	bhi.n	8003b40 <UART_SetConfig+0x1c0>
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d009      	beq.n	8003b2e <UART_SetConfig+0x1ae>
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	d810      	bhi.n	8003b40 <UART_SetConfig+0x1c0>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <UART_SetConfig+0x1a8>
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d006      	beq.n	8003b34 <UART_SetConfig+0x1b4>
 8003b26:	e00b      	b.n	8003b40 <UART_SetConfig+0x1c0>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e0cc      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e0c9      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b34:	2304      	movs	r3, #4
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e0c6      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e0c3      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b40:	2310      	movs	r3, #16
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e0c0      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a44      	ldr	r2, [pc, #272]	; (8003c5c <UART_SetConfig+0x2dc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d125      	bne.n	8003b9c <UART_SetConfig+0x21c>
 8003b50:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b5e:	d017      	beq.n	8003b90 <UART_SetConfig+0x210>
 8003b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b64:	d817      	bhi.n	8003b96 <UART_SetConfig+0x216>
 8003b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6a:	d00b      	beq.n	8003b84 <UART_SetConfig+0x204>
 8003b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b70:	d811      	bhi.n	8003b96 <UART_SetConfig+0x216>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <UART_SetConfig+0x1fe>
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7a:	d006      	beq.n	8003b8a <UART_SetConfig+0x20a>
 8003b7c:	e00b      	b.n	8003b96 <UART_SetConfig+0x216>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e0a1      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b84:	2302      	movs	r3, #2
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e09e      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e09b      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b90:	2308      	movs	r3, #8
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e098      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b96:	2310      	movs	r3, #16
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e095      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <UART_SetConfig+0x2e0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d125      	bne.n	8003bf2 <UART_SetConfig+0x272>
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bb4:	d017      	beq.n	8003be6 <UART_SetConfig+0x266>
 8003bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bba:	d817      	bhi.n	8003bec <UART_SetConfig+0x26c>
 8003bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc0:	d00b      	beq.n	8003bda <UART_SetConfig+0x25a>
 8003bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc6:	d811      	bhi.n	8003bec <UART_SetConfig+0x26c>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <UART_SetConfig+0x254>
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d006      	beq.n	8003be0 <UART_SetConfig+0x260>
 8003bd2:	e00b      	b.n	8003bec <UART_SetConfig+0x26c>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e076      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e073      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003be0:	2304      	movs	r3, #4
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e070      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003be6:	2308      	movs	r3, #8
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e06d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bec:	2310      	movs	r3, #16
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e06a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1b      	ldr	r2, [pc, #108]	; (8003c64 <UART_SetConfig+0x2e4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d138      	bne.n	8003c6e <UART_SetConfig+0x2ee>
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c0a:	d017      	beq.n	8003c3c <UART_SetConfig+0x2bc>
 8003c0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c10:	d82a      	bhi.n	8003c68 <UART_SetConfig+0x2e8>
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c16:	d00b      	beq.n	8003c30 <UART_SetConfig+0x2b0>
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1c:	d824      	bhi.n	8003c68 <UART_SetConfig+0x2e8>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <UART_SetConfig+0x2aa>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	d006      	beq.n	8003c36 <UART_SetConfig+0x2b6>
 8003c28:	e01e      	b.n	8003c68 <UART_SetConfig+0x2e8>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e04b      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c30:	2302      	movs	r3, #2
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e048      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c36:	2304      	movs	r3, #4
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e045      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e042      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c42:	bf00      	nop
 8003c44:	efff69f3 	.word	0xefff69f3
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40004400 	.word	0x40004400
 8003c54:	40004800 	.word	0x40004800
 8003c58:	40004c00 	.word	0x40004c00
 8003c5c:	40005000 	.word	0x40005000
 8003c60:	40011400 	.word	0x40011400
 8003c64:	40007800 	.word	0x40007800
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e02c      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a72      	ldr	r2, [pc, #456]	; (8003e3c <UART_SetConfig+0x4bc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d125      	bne.n	8003cc4 <UART_SetConfig+0x344>
 8003c78:	4b71      	ldr	r3, [pc, #452]	; (8003e40 <UART_SetConfig+0x4c0>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c86:	d017      	beq.n	8003cb8 <UART_SetConfig+0x338>
 8003c88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c8c:	d817      	bhi.n	8003cbe <UART_SetConfig+0x33e>
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d00b      	beq.n	8003cac <UART_SetConfig+0x32c>
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c98:	d811      	bhi.n	8003cbe <UART_SetConfig+0x33e>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <UART_SetConfig+0x326>
 8003c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca2:	d006      	beq.n	8003cb2 <UART_SetConfig+0x332>
 8003ca4:	e00b      	b.n	8003cbe <UART_SetConfig+0x33e>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e00d      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cac:	2302      	movs	r3, #2
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e00a      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e007      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e004      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x348>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd0:	d15b      	bne.n	8003d8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cd2:	7ffb      	ldrb	r3, [r7, #31]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d828      	bhi.n	8003d2a <UART_SetConfig+0x3aa>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <UART_SetConfig+0x360>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d2b 	.word	0x08003d2b
 8003cf0:	08003d1b 	.word	0x08003d1b
 8003cf4:	08003d2b 	.word	0x08003d2b
 8003cf8:	08003d2b 	.word	0x08003d2b
 8003cfc:	08003d2b 	.word	0x08003d2b
 8003d00:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe fe3a 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003d08:	61b8      	str	r0, [r7, #24]
        break;
 8003d0a:	e013      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d0c:	f7fe fe4a 	bl	80029a4 <HAL_RCC_GetPCLK2Freq>
 8003d10:	61b8      	str	r0, [r7, #24]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <UART_SetConfig+0x4c4>)
 8003d16:	61bb      	str	r3, [r7, #24]
        break;
 8003d18:	e00c      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fd1d 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8003d1e:	61b8      	str	r0, [r7, #24]
        break;
 8003d20:	e008      	b.n	8003d34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e004      	b.n	8003d34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	77bb      	strb	r3, [r7, #30]
        break;
 8003d32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d074      	beq.n	8003e24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	d916      	bls.n	8003d84 <UART_SetConfig+0x404>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d212      	bcs.n	8003d84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f023 030f 	bic.w	r3, r3, #15
 8003d66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	89fb      	ldrh	r3, [r7, #14]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	89fa      	ldrh	r2, [r7, #14]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e04f      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	77bb      	strb	r3, [r7, #30]
 8003d88:	e04c      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d8a:	7ffb      	ldrb	r3, [r7, #31]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d828      	bhi.n	8003de2 <UART_SetConfig+0x462>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0x418>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003de3 	.word	0x08003de3
 8003da8:	08003dd3 	.word	0x08003dd3
 8003dac:	08003de3 	.word	0x08003de3
 8003db0:	08003de3 	.word	0x08003de3
 8003db4:	08003de3 	.word	0x08003de3
 8003db8:	08003ddb 	.word	0x08003ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dbc:	f7fe fdde 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003dc0:	61b8      	str	r0, [r7, #24]
        break;
 8003dc2:	e013      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc4:	f7fe fdee 	bl	80029a4 <HAL_RCC_GetPCLK2Freq>
 8003dc8:	61b8      	str	r0, [r7, #24]
        break;
 8003dca:	e00f      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <UART_SetConfig+0x4c4>)
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e00c      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe fcc1 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8003dd6:	61b8      	str	r0, [r7, #24]
        break;
 8003dd8:	e008      	b.n	8003dec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dde:	61bb      	str	r3, [r7, #24]
        break;
 8003de0:	e004      	b.n	8003dec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dea:	bf00      	nop
    }

    if (pclk != 0U)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085a      	lsrs	r2, r3, #1
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b0f      	cmp	r3, #15
 8003e0a:	d909      	bls.n	8003e20 <UART_SetConfig+0x4a0>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e12:	d205      	bcs.n	8003e20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	e001      	b.n	8003e24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40007c00 	.word	0x40007c00
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00f42400 	.word	0x00f42400

08003e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f46:	d10a      	bne.n	8003f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f9c:	f7fd f87c 	bl	8001098 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d10e      	bne.n	8003fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f831 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e027      	b.n	800401e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d10e      	bne.n	8003ffa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f81b 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e011      	b.n	800401e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b09c      	sub	sp, #112	; 0x70
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004036:	e0a7      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403e:	f000 80a3 	beq.w	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fd f829 	bl	8001098 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <UART_WaitOnFlagUntilTimeout+0x32>
 8004052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004054:	2b00      	cmp	r3, #0
 8004056:	d13f      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800406c:	667b      	str	r3, [r7, #100]	; 0x64
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004078:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800407c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3308      	adds	r3, #8
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3308      	adds	r3, #8
 80040a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80040ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e068      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d050      	beq.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d148      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411e:	637b      	str	r3, [r7, #52]	; 0x34
 8004120:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e6      	bne.n	8004100 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	66bb      	str	r3, [r7, #104]	; 0x68
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3308      	adds	r3, #8
 8004150:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004152:	623a      	str	r2, [r7, #32]
 8004154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e010      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	f43f af48 	beq.w	8004038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3770      	adds	r7, #112	; 0x70
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <lv_disp_get_scr_act+0x14>
 80041c0:	f01a fb36 	bl	801e830 <lv_disp_get_default>
 80041c4:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e001      	b.n	80041d4 <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <lv_disp_get_scr_prev+0x14>
 80041ea:	f01a fb21 	bl	801e830 <lv_disp_get_default>
 80041ee:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e001      	b.n	80041fe <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <lv_disp_get_layer_top+0x14>
 8004214:	f01a fb0c 	bl	801e830 <lv_disp_get_default>
 8004218:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8004220:	2300      	movs	r3, #0
 8004222:	e001      	b.n	8004228 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <lv_disp_get_layer_sys+0x14>
 800423e:	f01a faf7 	bl	801e830 <lv_disp_get_default>
 8004242:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	e001      	b.n	8004252 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <lv_disp_get_theme+0x14>
 8004268:	f01a fae2 	bl	801e830 <lv_disp_get_default>
 800426c:	6078      	str	r0, [r7, #4]
    return disp->theme;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <lv_disp_is_invalidation_enabled+0x14>
 8004288:	f01a fad2 	bl	801e830 <lv_disp_get_default>
 800428c:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <lv_disp_is_invalidation_enabled+0x1e>
        LV_LOG_WARN("no display registered");
        return false;
 8004294:	2300      	movs	r3, #0
 8004296:	e007      	b.n	80042a8 <lv_disp_is_invalidation_enabled+0x2e>
    }

    return (disp->inv_en_cnt > 0);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bfcc      	ite	gt
 80042a2:	2301      	movgt	r3, #1
 80042a4:	2300      	movle	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <lv_event_send>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_res_t lv_event_send(lv_obj_t * obj, lv_event_code_t event_code, void * param)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08c      	sub	sp, #48	; 0x30
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	460b      	mov	r3, r1
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <lv_event_send+0x18>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e02f      	b.n	8004328 <lv_event_send+0x78>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_event_t e;
    e.target = obj;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	613b      	str	r3, [r7, #16]
    e.current_target = obj;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	617b      	str	r3, [r7, #20]
    e.code = event_code;
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	763b      	strb	r3, [r7, #24]
    e.user_data = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
    e.param = param;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	623b      	str	r3, [r7, #32]
    e.deleted = 0;
 80042dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042e0:	f36f 0300 	bfc	r3, #0, #1
 80042e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_bubbling = 0;
 80042e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042ec:	f36f 0382 	bfc	r3, #2, #1
 80042f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_processing = 0;
 80042f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042f8:	f36f 0341 	bfc	r3, #1, #1
 80042fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*Build a simple linked list from the objects used in the events
     *It's important to know if this object was deleted by a nested event
     *called from this `event_cb`.*/
    e.prev = event_head;
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <lv_event_send+0x80>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
    event_head = &e;
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <lv_event_send+0x80>)
 8004308:	f107 0310 	add.w	r3, r7, #16
 800430c:	6013      	str	r3, [r2, #0]

    /*Send the event*/
    lv_res_t res = event_send_core(&e);
 800430e:	f107 0310 	add.w	r3, r7, #16
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f95d 	bl	80045d2 <event_send_core>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /*Remove this element from the list*/
    event_head = e.prev;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	4a03      	ldr	r2, [pc, #12]	; (8004330 <lv_event_send+0x80>)
 8004322:	6013      	str	r3, [r2, #0]

    return res;
 8004324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004328:	4618      	mov	r0, r3
 800432a:	3730      	adds	r7, #48	; 0x30
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200006dc 	.word	0x200006dc

08004334 <lv_obj_event_base>:


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <lv_obj_event_base+0x1a>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e006      	b.n	800435c <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]

    /*Find a base in which call the ancestor's event handler_cb if set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8004354:	e002      	b.n	800435c <lv_obj_event_base+0x28>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <lv_obj_event_base+0x36>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f5      	beq.n	8004356 <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <lv_obj_event_base+0x40>
 8004370:	2301      	movs	r3, #1
 8004372:	e019      	b.n	80043a8 <lv_obj_event_base+0x74>
    if(base->event_cb == NULL) return LV_RES_OK;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <lv_obj_event_base+0x4c>
 800437c:	2301      	movs	r3, #1
 800437e:	e013      	b.n	80043a8 <lv_obj_event_base+0x74>

    /*Call the actual event callback*/
    e->user_data = NULL;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	60da      	str	r2, [r3, #12]
    base->event_cb(base, e);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
 8004390:	2301      	movs	r3, #1
 8004392:	72fb      	strb	r3, [r7, #11]
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	7e1b      	ldrb	r3, [r3, #24]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <lv_obj_event_base+0x72>
 80043a2:	2300      	movs	r3, #0
 80043a4:	72fb      	strb	r3, [r7, #11]

    return res;
 80043a6:	7afb      	ldrb	r3, [r7, #11]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <lv_event_get_target>:


lv_obj_t * lv_event_get_target(lv_event_t * e)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    return e->target;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <lv_event_get_current_target>:

lv_obj_t * lv_event_get_current_target(lv_event_t * e)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
    return e->current_target;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <lv_event_get_code>:

lv_event_code_t lv_event_get_code(lv_event_t * e)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
    return e->code & ~LV_EVENT_PREPROCESS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7a1b      	ldrb	r3, [r3, #8]
 80043ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f0:	b2db      	uxtb	r3, r3
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <lv_event_get_param>:

void * lv_event_get_param(lv_event_t * e)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
    return e->param;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <_lv_event_mark_deleted>:
    last_id ++;
    return last_id;
}

void _lv_event_mark_deleted(lv_obj_t * obj)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    lv_event_t * e = event_head;
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <_lv_event_mark_deleted+0x48>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]

    while(e) {
 8004426:	e011      	b.n	800444c <_lv_event_mark_deleted+0x34>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d004      	beq.n	800443c <_lv_event_mark_deleted+0x24>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d104      	bne.n	8004446 <_lv_event_mark_deleted+0x2e>
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	7e13      	ldrb	r3, [r2, #24]
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	7613      	strb	r3, [r2, #24]
        e = e->prev;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	60fb      	str	r3, [r7, #12]
    while(e) {
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ea      	bne.n	8004428 <_lv_event_mark_deleted+0x10>
    }
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	200006dc 	.word	0x200006dc

08004464 <lv_event_get_indev>:
    }
    return NULL;
}

lv_indev_t * lv_event_get_indev(lv_event_t * e)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

    if(e->code == LV_EVENT_PRESSED ||
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7a1b      	ldrb	r3, [r3, #8]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d03b      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESSING ||
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8004478:	2b02      	cmp	r3, #2
 800447a:	d037      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESS_LOST ||
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESSING ||
 8004480:	2b03      	cmp	r3, #3
 8004482:	d033      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SHORT_CLICKED ||
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESS_LOST ||
 8004488:	2b04      	cmp	r3, #4
 800448a:	d02f      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED ||
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SHORT_CLICKED ||
 8004490:	2b05      	cmp	r3, #5
 8004492:	d02b      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED ||
 8004498:	2b06      	cmp	r3, #6
 800449a:	d027      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_CLICKED ||
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 80044a0:	2b07      	cmp	r3, #7
 80044a2:	d023      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_RELEASED ||
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_CLICKED ||
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d01f      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_BEGIN ||
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_RELEASED ||
 80044b0:	2b09      	cmp	r3, #9
 80044b2:	d01b      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_END ||
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_BEGIN ||
 80044b8:	2b0a      	cmp	r3, #10
 80044ba:	d017      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL ||
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_END ||
 80044c0:	2b0b      	cmp	r3, #11
 80044c2:	d013      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_GESTURE ||
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL ||
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	d00f      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_KEY ||
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_GESTURE ||
 80044d0:	2b0d      	cmp	r3, #13
 80044d2:	d00b      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_FOCUSED ||
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_KEY ||
 80044d8:	2b0e      	cmp	r3, #14
 80044da:	d007      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_DEFOCUSED ||
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_FOCUSED ||
 80044e0:	2b0f      	cmp	r3, #15
 80044e2:	d003      	beq.n	80044ec <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LEAVE) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DEFOCUSED ||
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d104      	bne.n	80044f6 <lv_event_get_indev+0x92>
        return lv_event_get_param(e);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ff86 	bl	80043fe <lv_event_get_param>
 80044f2:	4603      	mov	r3, r0
 80044f4:	e000      	b.n	80044f8 <lv_event_get_indev+0x94>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 80044f6:	2300      	movs	r3, #0
    }
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <lv_event_get_draw_ctx>:
        return NULL;
    }
}

lv_draw_ctx_t * lv_event_get_draw_ctx(lv_event_t * e)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	7a1b      	ldrb	r3, [r3, #8]
 800450c:	2b15      	cmp	r3, #21
 800450e:	d013      	beq.n	8004538 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004514:	2b14      	cmp	r3, #20
 8004516:	d00f      	beq.n	8004538 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 800451c:	2b16      	cmp	r3, #22
 800451e:	d00b      	beq.n	8004538 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST ||
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8004524:	2b18      	cmp	r3, #24
 8004526:	d007      	beq.n	8004538 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST ||
 800452c:	2b17      	cmp	r3, #23
 800452e:	d003      	beq.n	8004538 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_END) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8004534:	2b19      	cmp	r3, #25
 8004536:	d104      	bne.n	8004542 <lv_event_get_draw_ctx+0x42>
        return lv_event_get_param(e);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff60 	bl	80043fe <lv_event_get_param>
 800453e:	4603      	mov	r3, r0
 8004540:	e000      	b.n	8004544 <lv_event_get_draw_ctx+0x44>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8004542:	2300      	movs	r3, #0
    }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <lv_event_set_ext_draw_size>:
        return 0;
    }
}

void lv_event_set_ext_draw_size(lv_event_t * e, lv_coord_t size)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	807b      	strh	r3, [r7, #2]
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	7a1b      	ldrb	r3, [r3, #8]
 800455c:	2b13      	cmp	r3, #19
 800455e:	d10e      	bne.n	800457e <lv_event_set_ext_draw_size+0x32>
        lv_coord_t * cur_size = lv_event_get_param(e);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff4c 	bl	80043fe <lv_event_get_param>
 8004566:	60f8      	str	r0, [r7, #12]
        *cur_size = LV_MAX(*cur_size, size);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800456e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004572:	4293      	cmp	r3, r2
 8004574:	bfb8      	it	lt
 8004576:	4613      	movlt	r3, r2
 8004578:	b21a      	sxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	801a      	strh	r2, [r3, #0]
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
    }
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <lv_obj_get_event_dsc>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <lv_obj_get_event_dsc+0x16>
 8004598:	2300      	movs	r3, #0
 800459a:	e014      	b.n	80045c6 <lv_obj_get_event_dsc+0x40>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	7e9b      	ldrb	r3, [r3, #26]
 80045a2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d301      	bcc.n	80045b4 <lv_obj_get_event_dsc+0x2e>
 80045b0:	2300      	movs	r3, #0
 80045b2:	e008      	b.n	80045c6 <lv_obj_get_event_dsc+0x40>

    return &obj->spec_attr->event_dsc[id];
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b086      	sub	sp, #24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 80045da:	f000 fbe9 	bl	8004db0 <lv_indev_get_act>
 80045de:	60b8      	str	r0, [r7, #8]
    if(indev_act) {
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01f      	beq.n	8004626 <event_send_core+0x54>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <event_send_core+0x30>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	6810      	ldr	r0, [r2, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	7a12      	ldrb	r2, [r2, #8]
 80045fe:	4611      	mov	r1, r2
 8004600:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	7e1b      	ldrb	r3, [r3, #24]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <event_send_core+0x42>
 8004610:	2301      	movs	r3, #1
 8004612:	e0c4      	b.n	800479e <event_send_core+0x1cc>
        if(e->deleted) return LV_RES_INV;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7e1b      	ldrb	r3, [r3, #24]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <event_send_core+0x54>
 8004622:	2300      	movs	r3, #0
 8004624:	e0bb      	b.n	800479e <event_send_core+0x1cc>
    }

    lv_res_t res = LV_RES_OK;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ffa8 	bl	8004586 <lv_obj_get_event_dsc>
 8004636:	6138      	str	r0, [r7, #16]

    uint32_t i = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 800463c:	e038      	b.n	80046b0 <event_send_core+0xde>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d02a      	beq.n	800469c <event_send_core+0xca>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	7a1b      	ldrb	r3, [r3, #8]
 800464a:	b25b      	sxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	da25      	bge.n	800469c <event_send_core+0xca>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	7a1b      	ldrb	r3, [r3, #8]
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d007      	beq.n	8004668 <event_send_core+0x96>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	7a1b      	ldrb	r3, [r3, #8]
 800465c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	7a12      	ldrb	r2, [r2, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004664:	4293      	cmp	r3, r2
 8004666:	d119      	bne.n	800469c <event_send_core+0xca>
            e->user_data = event_dsc->user_data;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	7e1b      	ldrb	r3, [r3, #24]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <event_send_core+0xb8>
 8004686:	2301      	movs	r3, #1
 8004688:	e089      	b.n	800479e <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	7e1b      	ldrb	r3, [r3, #24]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <event_send_core+0xca>
 8004698:	2300      	movs	r3, #0
 800469a:	e080      	b.n	800479e <event_send_core+0x1cc>
        }

        i++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3301      	adds	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff6c 	bl	8004586 <lv_obj_get_event_dsc>
 80046ae:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <event_send_core+0xea>
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d0c0      	beq.n	800463e <event_send_core+0x6c>
    }

    res = lv_obj_event_base(NULL, e);
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	2000      	movs	r0, #0
 80046c0:	f7ff fe38 	bl	8004334 <lv_obj_event_base>
 80046c4:	4603      	mov	r3, r0
 80046c6:	75fb      	strb	r3, [r7, #23]

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <event_send_core+0x10c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff56 	bl	8004586 <lv_obj_get_event_dsc>
 80046da:	4603      	mov	r3, r0
 80046dc:	e000      	b.n	80046e0 <event_send_core+0x10e>
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]

    i = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 80046e6:	e036      	b.n	8004756 <event_send_core+0x184>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d028      	beq.n	8004742 <event_send_core+0x170>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	7a1b      	ldrb	r3, [r3, #8]
 80046f4:	b25b      	sxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	db23      	blt.n	8004742 <event_send_core+0x170>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	7a1b      	ldrb	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <event_send_core+0x13c>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	7a1a      	ldrb	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7a1b      	ldrb	r3, [r3, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d119      	bne.n	8004742 <event_send_core+0x170>
            e->user_data = event_dsc->user_data;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	7e1b      	ldrb	r3, [r3, #24]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <event_send_core+0x15e>
 800472c:	2301      	movs	r3, #1
 800472e:	e036      	b.n	800479e <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	7e1b      	ldrb	r3, [r3, #24]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <event_send_core+0x170>
 800473e:	2300      	movs	r3, #0
 8004740:	e02d      	b.n	800479e <event_send_core+0x1cc>
        }

        i++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff ff19 	bl	8004586 <lv_obj_get_event_dsc>
 8004754:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <event_send_core+0x190>
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d0c2      	beq.n	80046e8 <event_send_core+0x116>
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d119      	bne.n	800479c <event_send_core+0x1ca>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d014      	beq.n	800479c <event_send_core+0x1ca>
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f818 	bl	80047a8 <event_is_bubbled>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <event_send_core+0x1ca>
        e->current_target = e->current_target->parent;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	605a      	str	r2, [r3, #4]
        res = event_send_core(e);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff22 	bl	80045d2 <event_send_core>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) return LV_RES_INV;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d001      	beq.n	800479c <event_send_core+0x1ca>
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <event_send_core+0x1cc>
    }

    return res;
 800479c:	7dfb      	ldrb	r3, [r7, #23]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <event_is_bubbled>:

static bool event_is_bubbled(lv_event_t * e)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
    if(e->stop_bubbling) return false;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	7e1b      	ldrb	r3, [r3, #24]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <event_is_bubbled+0x1a>
 80047be:	2300      	movs	r3, #0
 80047c0:	e059      	b.n	8004876 <event_is_bubbled+0xce>

    /*Event codes that always bubble*/
    switch(e->code) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7a1b      	ldrb	r3, [r3, #8]
 80047c6:	3b23      	subs	r3, #35	; 0x23
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d801      	bhi.n	80047d0 <event_is_bubbled+0x28>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e052      	b.n	8004876 <event_is_bubbled+0xce>
        default:
            break;
 80047d0:	bf00      	nop
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fead 	bl	800553a <lv_obj_has_flag>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f083 0301 	eor.w	r3, r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <event_is_bubbled+0x48>
 80047ec:	2300      	movs	r3, #0
 80047ee:	e042      	b.n	8004876 <event_is_bubbled+0xce>

    switch(e->code) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7a1b      	ldrb	r3, [r3, #8]
 80047f4:	3b11      	subs	r3, #17
 80047f6:	2b1b      	cmp	r3, #27
 80047f8:	d83c      	bhi.n	8004874 <event_is_bubbled+0xcc>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <event_is_bubbled+0x58>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004871 	.word	0x08004871
 8004804:	08004871 	.word	0x08004871
 8004808:	08004871 	.word	0x08004871
 800480c:	08004871 	.word	0x08004871
 8004810:	08004871 	.word	0x08004871
 8004814:	08004871 	.word	0x08004871
 8004818:	08004871 	.word	0x08004871
 800481c:	08004871 	.word	0x08004871
 8004820:	08004871 	.word	0x08004871
 8004824:	08004871 	.word	0x08004871
 8004828:	08004871 	.word	0x08004871
 800482c:	08004875 	.word	0x08004875
 8004830:	08004875 	.word	0x08004875
 8004834:	08004871 	.word	0x08004871
 8004838:	08004875 	.word	0x08004875
 800483c:	08004875 	.word	0x08004875
 8004840:	08004871 	.word	0x08004871
 8004844:	08004871 	.word	0x08004871
 8004848:	08004871 	.word	0x08004871
 800484c:	08004871 	.word	0x08004871
 8004850:	08004875 	.word	0x08004875
 8004854:	08004875 	.word	0x08004875
 8004858:	08004875 	.word	0x08004875
 800485c:	08004875 	.word	0x08004875
 8004860:	08004871 	.word	0x08004871
 8004864:	08004871 	.word	0x08004871
 8004868:	08004875 	.word	0x08004875
 800486c:	08004871 	.word	0x08004871
        case LV_EVENT_CHILD_DELETED:
        case LV_EVENT_CHILD_CHANGED:
        case LV_EVENT_SIZE_CHANGED:
        case LV_EVENT_STYLE_CHANGED:
        case LV_EVENT_GET_SELF_SIZE:
            return false;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <event_is_bubbled+0xce>
        default:
            return true;
 8004874:	2301      	movs	r3, #1
    }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop

08004880 <_lv_group_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8004884:	2120      	movs	r1, #32
 8004886:	4802      	ldr	r0, [pc, #8]	; (8004890 <_lv_group_init+0x10>)
 8004888:	f01b fd2d 	bl	80202e6 <_lv_ll_init>
}
 800488c:	bf00      	nop
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000874 	.word	0x20000874

08004894 <lv_group_get_default>:
{
    default_group = group;
}

lv_group_t * lv_group_get_default(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
    return default_group;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <lv_group_get_default+0x14>)
 800489a:	681b      	ldr	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	200006e0 	.word	0x200006e0

080048ac <lv_group_add_obj>:

void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d053      	beq.n	8004964 <lv_group_add_obj+0xb8>

    LV_LOG_TRACE("begin");

    /*Be sure the object is removed from its current group*/
    lv_group_remove_obj(obj);
 80048bc:	6838      	ldr	r0, [r7, #0]
 80048be:	f000 f859 	bl	8004974 <lv_group_remove_obj>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(&group->obj_ll, obj_i) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f01b fdec 	bl	80204a2 <_lv_ll_get_head>
 80048ca:	6178      	str	r0, [r7, #20]
 80048cc:	e00a      	b.n	80048e4 <lv_group_add_obj+0x38>
        if((*obj_i) == obj) {
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d047      	beq.n	8004968 <lv_group_add_obj+0xbc>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	4618      	mov	r0, r3
 80048de:	f01b fe02 	bl	80204e6 <_lv_ll_get_next>
 80048e2:	6178      	str	r0, [r7, #20]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f1      	bne.n	80048ce <lv_group_add_obj+0x22>
            return;
        }
    }

    /*If the object is already in a group and focused then refocus it*/
    lv_group_t * group_cur = lv_obj_get_group(obj);
 80048ea:	6838      	ldr	r0, [r7, #0]
 80048ec:	f000 fe5a 	bl	80055a4 <lv_obj_get_group>
 80048f0:	6138      	str	r0, [r7, #16]
    if(group_cur) {
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00f      	beq.n	8004918 <lv_group_add_obj+0x6c>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <lv_group_add_obj+0x6c>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d102      	bne.n	8004918 <lv_group_add_obj+0x6c>
            lv_group_refocus(group_cur);
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	f000 f908 	bl	8004b28 <lv_group_refocus>

            LV_LOG_INFO("changing object's group");
        }
    }

    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <lv_group_add_obj+0x7a>
 8004920:	6838      	ldr	r0, [r7, #0]
 8004922:	f000 fe53 	bl	80055cc <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	609a      	str	r2, [r3, #8]

    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	f01b fd25 	bl	8020380 <_lv_ll_ins_tail>
 8004936:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(next);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d100      	bne.n	8004940 <lv_group_add_obj+0x94>
 800493e:	e7fe      	b.n	800493e <lv_group_add_obj+0x92>
    if(next == NULL) return;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d012      	beq.n	800496c <lv_group_add_obj+0xc0>
    *next = obj;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	601a      	str	r2, [r3, #0]

    /*If the head and the tail is equal then there is only one object in the linked list.
     *In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	f01b fda7 	bl	80204a2 <_lv_ll_get_head>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4293      	cmp	r3, r2
 800495a:	d108      	bne.n	800496e <lv_group_add_obj+0xc2>
        lv_group_refocus(group);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f8e3 	bl	8004b28 <lv_group_refocus>
 8004962:	e004      	b.n	800496e <lv_group_add_obj+0xc2>
    if(group == NULL) return;
 8004964:	bf00      	nop
 8004966:	e002      	b.n	800496e <lv_group_add_obj+0xc2>
            return;
 8004968:	bf00      	nop
 800496a:	e000      	b.n	800496e <lv_group_add_obj+0xc2>
    if(next == NULL) return;
 800496c:	bf00      	nop
    }

    LV_LOG_TRACE("finished");
}
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <lv_group_remove_obj>:
    else if(*g1->obj_focus == obj2) lv_group_focus_obj(obj1);

}

void lv_group_remove_obj(lv_obj_t * obj)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
    lv_group_t * g = lv_obj_get_group(obj);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fe11 	bl	80055a4 <lv_obj_get_group>
 8004982:	60b8      	str	r0, [r7, #8]
    if(g == NULL) return;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d06a      	beq.n	8004a60 <lv_group_remove_obj+0xec>

    LV_LOG_TRACE("begin");

    /*Focus on the next object*/
    if(g->obj_focus && *g->obj_focus == obj) {
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d033      	beq.n	80049fa <lv_group_remove_obj+0x86>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d12d      	bne.n	80049fa <lv_group_remove_obj+0x86>
        if(g->frozen) g->frozen = 0;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	7f1b      	ldrb	r3, [r3, #28]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <lv_group_remove_obj+0x42>
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	7f13      	ldrb	r3, [r2, #28]
 80049b0:	f36f 0300 	bfc	r3, #0, #1
 80049b4:	7713      	strb	r3, [r2, #28]

        /*If this is the only object in the group then focus to nothing.*/
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f01b fd72 	bl	80204a2 <_lv_ll_get_head>
 80049be:	4602      	mov	r2, r0
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d115      	bne.n	80049f4 <lv_group_remove_obj+0x80>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f01b fd7a 	bl	80204c4 <_lv_ll_get_tail>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10c      	bne.n	80049f4 <lv_group_remove_obj+0x80>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	681c      	ldr	r4, [r3, #0]
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f000 f9a8 	bl	8004d36 <get_indev>
 80049e6:	4603      	mov	r3, r0
 80049e8:	461a      	mov	r2, r3
 80049ea:	210f      	movs	r1, #15
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff fc5f 	bl	80042b0 <lv_event_send>
 80049f2:	e002      	b.n	80049fa <lv_group_remove_obj+0x86>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 80049f4:	68b8      	ldr	r0, [r7, #8]
 80049f6:	f000 f897 	bl	8004b28 <lv_group_refocus>
    }

    /*If the focuses object is still the same then it was the only object in the group but it will
     *be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     *zero objects*/
    if(g->obj_focus && *g->obj_focus == obj) {
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <lv_group_remove_obj+0xa0>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d102      	bne.n	8004a14 <lv_group_remove_obj+0xa0>
        g->obj_focus = NULL;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2200      	movs	r2, #0
 8004a12:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group*/
    lv_obj_t ** i;
    _LV_LL_READ(&g->obj_ll, i) {
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f01b fd43 	bl	80204a2 <_lv_ll_get_head>
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	e01b      	b.n	8004a58 <lv_group_remove_obj+0xe4>
        if(*i == obj) {
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d110      	bne.n	8004a4c <lv_group_remove_obj+0xd8>
            _lv_ll_remove(&g->obj_ll, i);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f01b fcda 	bl	80203e8 <_lv_ll_remove>
            lv_mem_free(i);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f01b ff23 	bl	8020880 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d010      	beq.n	8004a64 <lv_group_remove_obj+0xf0>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
            break;
 8004a4a:	e00b      	b.n	8004a64 <lv_group_remove_obj+0xf0>
    _LV_LL_READ(&g->obj_ll, i) {
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f01b fd48 	bl	80204e6 <_lv_ll_get_next>
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e0      	bne.n	8004a20 <lv_group_remove_obj+0xac>
 8004a5e:	e002      	b.n	8004a66 <lv_group_remove_obj+0xf2>
    if(g == NULL) return;
 8004a60:	bf00      	nop
 8004a62:	e000      	b.n	8004a66 <lv_group_remove_obj+0xf2>
            break;
 8004a64:	bf00      	nop
        }
    }
    LV_LOG_TRACE("finished");
}
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}

08004a6c <lv_group_focus_next>:
        }
    }
}

void lv_group_focus_next(lv_group_t * group)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 8004a74:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <lv_group_focus_next+0x3c>)
 8004a76:	490d      	ldr	r1, [pc, #52]	; (8004aac <lv_group_focus_next+0x40>)
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f886 	bl	8004b8a <focus_next_core>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <lv_group_focus_next+0x34>
        if(!focus_changed)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	f083 0301 	eor.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <lv_group_focus_next+0x34>
            group->edge_cb(group, true);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
    }
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	080204e7 	.word	0x080204e7
 8004aac:	080204a3 	.word	0x080204a3

08004ab0 <lv_group_focus_prev>:

void lv_group_focus_prev(lv_group_t * group)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8004ab8:	4a0c      	ldr	r2, [pc, #48]	; (8004aec <lv_group_focus_prev+0x3c>)
 8004aba:	490d      	ldr	r1, [pc, #52]	; (8004af0 <lv_group_focus_prev+0x40>)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f864 	bl	8004b8a <focus_next_core>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <lv_group_focus_prev+0x34>
        if(!focus_changed)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	f083 0301 	eor.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <lv_group_focus_prev+0x34>
            group->edge_cb(group, false);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
    }
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	08020511 	.word	0x08020511
 8004af0:	080204c5 	.word	0x080204c5

08004af4 <lv_group_get_editing>:
    if(!group) return NULL;
    return group->edge_cb;
}

bool lv_group_get_editing(const lv_group_t * group)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <lv_group_get_editing+0x12>
 8004b02:	2300      	movs	r3, #0
 8004b04:	e00a      	b.n	8004b1c <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	7f1b      	ldrb	r3, [r3, #28]
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	bf14      	ite	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	2300      	moveq	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7f1b      	ldrb	r3, [r3, #28]
 8004b34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	7f13      	ldrb	r3, [r2, #28]
 8004b40:	f043 0308 	orr.w	r3, r3, #8
 8004b44:	7713      	strb	r3, [r2, #28]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	7f1b      	ldrb	r3, [r3, #28]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d103      	bne.n	8004b5c <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff ff89 	bl	8004a6c <lv_group_focus_next>
 8004b5a:	e009      	b.n	8004b70 <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7f1b      	ldrb	r3, [r3, #28]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ffa0 	bl	8004ab0 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	b2d9      	uxtb	r1, r3
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	7f13      	ldrb	r3, [r2, #28]
 8004b7c:	f361 03c3 	bfi	r3, r1, #3, #1
 8004b80:	7713      	strb	r3, [r2, #28]
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <focus_next_core>:

static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8004b8a:	b590      	push	{r4, r7, lr}
 8004b8c:	b08b      	sub	sp, #44	; 0x2c
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
    bool focus_changed = false;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]
    if(group->frozen) return focus_changed;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	7f1b      	ldrb	r3, [r3, #28]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <focus_next_core+0x22>
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	e0c0      	b.n	8004d2e <focus_next_core+0x1a4>

    lv_obj_t ** obj_next     = group->obj_focus;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
    lv_obj_t ** obj_sentinel = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
    bool can_move            = true;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	77fb      	strb	r3, [r7, #31]
    bool can_begin           = true;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	77bb      	strb	r3, [r7, #30]

    for(;;) {
        if(obj_next == NULL) {
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d11d      	bne.n	8004c00 <focus_next_core+0x76>
            if(group->wrap || obj_sentinel == NULL) {
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	7f1b      	ldrb	r3, [r3, #28]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <focus_next_core+0x4e>
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d111      	bne.n	8004bfc <focus_next_core+0x72>
                if(!can_begin) return focus_changed;
 8004bd8:	7fbb      	ldrb	r3, [r7, #30]
 8004bda:	f083 0301 	eor.w	r3, r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <focus_next_core+0x5e>
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	e0a2      	b.n	8004d2e <focus_next_core+0x1a4>
                obj_next  = begin(&group->obj_ll);
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4610      	mov	r0, r2
 8004bee:	4798      	blx	r3
 8004bf0:	6278      	str	r0, [r7, #36]	; 0x24
                can_move  = false;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	77fb      	strb	r3, [r7, #31]
                can_begin = false;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	77bb      	strb	r3, [r7, #30]
 8004bfa:	e001      	b.n	8004c00 <focus_next_core+0x76>
            }
            else {
                /*Currently focused object is the last/first in the group, keep it that way*/
                return focus_changed;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	e096      	b.n	8004d2e <focus_next_core+0x1a4>
            }
        }

        if(obj_sentinel == NULL) {
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <focus_next_core+0x8a>
            obj_sentinel = obj_next;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	623b      	str	r3, [r7, #32]
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <focus_next_core+0x8a>
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
 8004c12:	e08c      	b.n	8004d2e <focus_next_core+0x1a4>
        }

        if(can_move) {
 8004c14:	7ffb      	ldrb	r3, [r7, #31]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <focus_next_core+0xa8>
            obj_next = move(&group->obj_ll, obj_next);
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
 8004c24:	6278      	str	r0, [r7, #36]	; 0x24

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return focus_changed;
 8004c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d101      	bne.n	8004c32 <focus_next_core+0xa8>
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	e07d      	b.n	8004d2e <focus_next_core+0x1a4>
        }

        can_move = true;
 8004c32:	2301      	movs	r3, #1
 8004c34:	77fb      	strb	r3, [r7, #31]

        if(obj_next == NULL) continue;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d028      	beq.n	8004c8e <focus_next_core+0x104>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fca3 	bl	800558c <lv_obj_get_state>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d120      	bne.n	8004c92 <focus_next_core+0x108>

        /*Hidden objects don't receive focus.
         *If any parent is hidden, the object is also hidden)*/
        lv_obj_t * parent = *obj_next;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61bb      	str	r3, [r7, #24]
        while(parent) {
 8004c56:	e00a      	b.n	8004c6e <focus_next_core+0xe4>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8004c58:	2101      	movs	r1, #1
 8004c5a:	69b8      	ldr	r0, [r7, #24]
 8004c5c:	f000 fc6d 	bl	800553a <lv_obj_has_flag>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <focus_next_core+0xec>
            parent = lv_obj_get_parent(parent);
 8004c66:	69b8      	ldr	r0, [r7, #24]
 8004c68:	f008 f84c 	bl	800cd04 <lv_obj_get_parent>
 8004c6c:	61b8      	str	r0, [r7, #24]
        while(parent) {
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f1      	bne.n	8004c58 <focus_next_core+0xce>
 8004c74:	e000      	b.n	8004c78 <focus_next_core+0xee>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8004c76:	bf00      	nop
        }

        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <focus_next_core+0x10c>
 8004c7e:	2101      	movs	r1, #1
 8004c80:	69b8      	ldr	r0, [r7, #24]
 8004c82:	f000 fc5a 	bl	800553a <lv_obj_has_flag>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <focus_next_core+0x10c>
 8004c8c:	e002      	b.n	8004c94 <focus_next_core+0x10a>
        if(obj_next == NULL) continue;
 8004c8e:	bf00      	nop
 8004c90:	e795      	b.n	8004bbe <focus_next_core+0x34>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8004c92:	bf00      	nop
    for(;;) {
 8004c94:	e793      	b.n	8004bbe <focus_next_core+0x34>

        /*If we got her a good candidate is found*/
        break;
 8004c96:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d101      	bne.n	8004ca6 <focus_next_core+0x11c>
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	e043      	b.n	8004d2e <focus_next_core+0x1a4>

    if(group->obj_focus) {
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <focus_next_core+0x156>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	681c      	ldr	r4, [r3, #0]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f83e 	bl	8004d36 <get_indev>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	210f      	movs	r1, #15
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7ff faf5 	bl	80042b0 <lv_event_send>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	75bb      	strb	r3, [r7, #22]
        if(res != LV_RES_OK) return focus_changed;
 8004cca:	7dbb      	ldrb	r3, [r7, #22]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <focus_next_core+0x14a>
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	e02c      	b.n	8004d2e <focus_next_core+0x1a4>
        lv_obj_invalidate(*group->obj_focus);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f003 feb5 	bl	8008a4a <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce4:	60da      	str	r2, [r3, #12]

    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	681c      	ldr	r4, [r3, #0]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f822 	bl	8004d36 <get_indev>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	210e      	movs	r1, #14
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f7ff fad9 	bl	80042b0 <lv_event_send>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	757b      	strb	r3, [r7, #21]
    if(res != LV_RES_OK) return focus_changed;
 8004d02:	7d7b      	ldrb	r3, [r7, #21]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <focus_next_core+0x182>
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	e010      	b.n	8004d2e <focus_next_core+0x1a4>

    lv_obj_invalidate(*group->obj_focus);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f003 fe99 	bl	8008a4a <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <focus_next_core+0x19e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	4798      	blx	r3
    focus_changed = true;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
    return focus_changed;
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	372c      	adds	r7, #44	; 0x2c
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd90      	pop	{r4, r7, pc}

08004d36 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
    lv_indev_t * indev_encoder = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
    lv_indev_t * indev_group = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8004d46:	2000      	movs	r0, #0
 8004d48:	f019 fe04 	bl	801e954 <lv_indev_get_next>
 8004d4c:	60f8      	str	r0, [r7, #12]
    while(indev) {
 8004d4e:	e019      	b.n	8004d84 <get_indev+0x4e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f839 	bl	8004dc8 <lv_indev_get_type>
 8004d56:	4603      	mov	r3, r0
 8004d58:	72fb      	strb	r3, [r7, #11]
        if(indev->group == g) {
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d10b      	bne.n	8004d7c <get_indev+0x46>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d101      	bne.n	8004d6e <get_indev+0x38>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	e01b      	b.n	8004da6 <get_indev+0x70>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8004d6e:	7afb      	ldrb	r3, [r7, #11]
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d101      	bne.n	8004d78 <get_indev+0x42>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	617b      	str	r3, [r7, #20]
            indev_group = indev;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	613b      	str	r3, [r7, #16]
        }
        indev = lv_indev_get_next(indev);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f019 fde9 	bl	801e954 <lv_indev_get_next>
 8004d82:	60f8      	str	r0, [r7, #12]
    while(indev) {
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e2      	bne.n	8004d50 <get_indev+0x1a>
    }

    if(indev_encoder) return indev_encoder;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <get_indev+0x5e>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	e008      	b.n	8004da6 <get_indev+0x70>
    if(indev_group) return indev_group;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <get_indev+0x68>
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	e003      	b.n	8004da6 <get_indev+0x70>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f019 fdd8 	bl	801e954 <lv_indev_get_next>
 8004da4:	4603      	mov	r3, r0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <lv_indev_get_act>:
        }
    }
}

lv_indev_t * lv_indev_get_act(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
    return indev_act;
 8004db4:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <lv_indev_get_act+0x14>)
 8004db6:	681b      	ldr	r3, [r3, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	200006e4 	.word	0x200006e4

08004dc8 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <lv_indev_get_type+0x12>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e002      	b.n	8004de0 <lv_indev_get_type+0x18>

    return indev->driver->type;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <lv_indev_get_scroll_dir>:
    else
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <lv_indev_get_scroll_dir+0x12>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e011      	b.n	8004e22 <lv_indev_get_scroll_dir+0x36>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d006      	beq.n	8004e16 <lv_indev_get_scroll_dir+0x2a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d001      	beq.n	8004e16 <lv_indev_get_scroll_dir+0x2a>
 8004e12:	2300      	movs	r3, #0
 8004e14:	e005      	b.n	8004e22 <lv_indev_get_scroll_dir+0x36>
    return indev->proc.types.pointer.scroll_dir;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e1c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004e20:	b2db      	uxtb	r3, r3
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return NULL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <lv_indev_get_scroll_obj+0x12>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e00d      	b.n	8004e5c <lv_indev_get_scroll_obj+0x2e>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d006      	beq.n	8004e58 <lv_indev_get_scroll_obj+0x2a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d001      	beq.n	8004e58 <lv_indev_get_scroll_obj+0x2a>
 8004e54:	2300      	movs	r3, #0
 8004e56:	e001      	b.n	8004e5c <lv_indev_get_scroll_obj+0x2e>
    return indev->proc.types.pointer.scroll_obj;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	80da      	strh	r2, [r3, #6]
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b08c      	sub	sp, #48	; 0x30
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	891b      	ldrh	r3, [r3, #8]
 8004eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d137      	bne.n	8004f30 <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec4:	e02c      	b.n	8004f20 <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004eda:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8004edc:	8a7a      	ldrh	r2, [r7, #18]
 8004ede:	897b      	ldrh	r3, [r7, #10]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d11a      	bne.n	8004f1a <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b21b      	sxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da01      	bge.n	8004ef2 <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e098      	b.n	8005024 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <lv_style_get_prop_inlined+0x68>
 8004efe:	8a7b      	ldrh	r3, [r7, #18]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f01c fbf9 	bl	80216f8 <lv_style_prop_get_default>
 8004f06:	4602      	mov	r2, r0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e003      	b.n	8004f16 <lv_style_get_prop_inlined+0x70>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	6852      	ldr	r2, [r2, #4]
 8004f14:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e084      	b.n	8005024 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	7adb      	ldrb	r3, [r3, #11]
 8004f24:	461a      	mov	r2, r3
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d3cc      	bcc.n	8004ec6 <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e079      	b.n	8005024 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	7adb      	ldrb	r3, [r3, #11]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <lv_style_get_prop_inlined+0x96>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e073      	b.n	8005024 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	7adb      	ldrb	r3, [r3, #11]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d948      	bls.n	8004fd6 <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	7adb      	ldrb	r3, [r3, #11]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8004f56:	2300      	movs	r3, #0
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5a:	e035      	b.n	8004fc8 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004f6a:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 8004f6c:	8bfa      	ldrh	r2, [r7, #30]
 8004f6e:	897b      	ldrh	r3, [r7, #10]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d126      	bne.n	8004fc2 <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	6a3a      	ldr	r2, [r7, #32]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da01      	bge.n	8004f88 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8004f84:	2302      	movs	r3, #2
 8004f86:	e04d      	b.n	8005024 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	6a3a      	ldr	r2, [r7, #32]
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8004f9a:	8bfb      	ldrh	r3, [r7, #30]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f01c fbab 	bl	80216f8 <lv_style_prop_get_default>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	e009      	b.n	8004fbe <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	441a      	add	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e030      	b.n	8005024 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	7adb      	ldrb	r3, [r3, #11]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d3c3      	bcc.n	8004f5c <lv_style_get_prop_inlined+0xb6>
 8004fd4:	e025      	b.n	8005022 <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	891b      	ldrh	r3, [r3, #8]
 8004fda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fde:	897b      	ldrh	r3, [r7, #10]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d11e      	bne.n	8005022 <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	891b      	ldrh	r3, [r3, #8]
 8004fe8:	b21b      	sxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	da01      	bge.n	8004ff2 <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e018      	b.n	8005024 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	891b      	ldrh	r3, [r3, #8]
 8004ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <lv_style_get_prop_inlined+0x170>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	891b      	ldrh	r3, [r3, #8]
 8005002:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005006:	b29b      	uxth	r3, r3
 8005008:	4618      	mov	r0, r3
 800500a:	f01c fb75 	bl	80216f8 <lv_style_prop_get_default>
 800500e:	4602      	mov	r2, r0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e003      	b.n	800501e <lv_style_get_prop_inlined+0x178>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	6852      	ldr	r2, [r2, #4]
 800501c:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3730      	adds	r7, #48	; 0x30
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8005034:	4a04      	ldr	r2, [pc, #16]	; (8005048 <lv_obj_remove_style_all+0x1c>)
 8005036:	2100      	movs	r1, #0
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f006 fbaf 	bl	800b79c <lv_obj_remove_style>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	000fffff 	.word	0x000fffff

0800504c <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005056:	2201      	movs	r2, #1
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f006 fd6e 	bl	800bb3c <lv_obj_get_style_prop>
 8005060:	4603      	mov	r3, r0
 8005062:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	b21b      	sxth	r3, r3
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <lv_obj_get_style_height>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800507a:	2204      	movs	r2, #4
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f006 fd5c 	bl	800bb3c <lv_obj_get_style_prop>
 8005084:	4603      	mov	r3, r0
 8005086:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	b21b      	sxth	r3, r3
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <lv_obj_get_style_align>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
    return (lv_coord_t)v.num;
}

static inline lv_align_t lv_obj_get_style_align(const struct _lv_obj_t * obj, uint32_t part)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800509e:	2209      	movs	r2, #9
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f006 fd4a 	bl	800bb3c <lv_obj_get_style_prop>
 80050a8:	4603      	mov	r3, r0
 80050aa:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	b2db      	uxtb	r3, r3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <lv_obj_get_style_transform_width>:

static inline lv_coord_t lv_obj_get_style_transform_width(const struct _lv_obj_t * obj, uint32_t part)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80050c2:	2268      	movs	r2, #104	; 0x68
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f006 fd38 	bl	800bb3c <lv_obj_get_style_prop>
 80050cc:	4603      	mov	r3, r0
 80050ce:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	b21b      	sxth	r3, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <lv_obj_get_style_transform_height>:

static inline lv_coord_t lv_obj_get_style_transform_height(const struct _lv_obj_t * obj, uint32_t part)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80050e6:	2269      	movs	r2, #105	; 0x69
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f006 fd26 	bl	800bb3c <lv_obj_get_style_prop>
 80050f0:	4603      	mov	r3, r0
 80050f2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	b21b      	sxth	r3, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800510a:	2210      	movs	r2, #16
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f006 fd14 	bl	800bb3c <lv_obj_get_style_prop>
 8005114:	4603      	mov	r3, r0
 8005116:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	b21b      	sxth	r3, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800512e:	2212      	movs	r2, #18
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f006 fd02 	bl	800bb3c <lv_obj_get_style_prop>
 8005138:	4603      	mov	r3, r0
 800513a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	b21b      	sxth	r3, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8005152:	2220      	movs	r2, #32
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f006 fcf0 	bl	800bb3c <lv_obj_get_style_prop>
 800515c:	4603      	mov	r3, r0
 800515e:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005160:	7b3b      	ldrb	r3, [r7, #12]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <lv_obj_get_style_bg_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8005174:	2221      	movs	r2, #33	; 0x21
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f006 fcdf 	bl	800bb3c <lv_obj_get_style_prop>
 800517e:	4603      	mov	r3, r0
 8005180:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	b2db      	uxtb	r3, r3
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <lv_obj_get_style_border_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
    return (bool)v.num;
}

static inline lv_color_t lv_obj_get_style_border_color(const struct _lv_obj_t * obj, uint32_t part)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8005198:	2230      	movs	r2, #48	; 0x30
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f006 fccd 	bl	800bb3c <lv_obj_get_style_prop>
 80051a2:	4603      	mov	r3, r0
 80051a4:	60fb      	str	r3, [r7, #12]
    return v.color;
 80051a6:	7b3b      	ldrb	r3, [r7, #12]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <lv_obj_get_style_border_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80051ba:	2231      	movs	r2, #49	; 0x31
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f006 fcbc 	bl	800bb3c <lv_obj_get_style_prop>
 80051c4:	4603      	mov	r3, r0
 80051c6:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	b2db      	uxtb	r3, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <lv_obj_get_style_border_width>:

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80051de:	2232      	movs	r2, #50	; 0x32
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f006 fcaa 	bl	800bb3c <lv_obj_get_style_prop>
 80051e8:	4603      	mov	r3, r0
 80051ea:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	b21b      	sxth	r3, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <lv_obj_get_style_border_post>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8005202:	2234      	movs	r2, #52	; 0x34
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f006 fc98 	bl	800bb3c <lv_obj_get_style_prop>
 800520c:	4603      	mov	r3, r0
 800520e:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <lv_obj_get_style_shadow_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f006 fc82 	bl	800bb3c <lv_obj_get_style_prop>
 8005238:	4603      	mov	r3, r0
 800523a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	b21b      	sxth	r3, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <lv_obj_get_style_shadow_spread>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_spread(const struct _lv_obj_t * obj, uint32_t part)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8005252:	2243      	movs	r2, #67	; 0x43
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f006 fc70 	bl	800bb3c <lv_obj_get_style_prop>
 800525c:	4603      	mov	r3, r0
 800525e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	b21b      	sxth	r3, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <lv_obj_get_style_shadow_color>:

static inline lv_color_t lv_obj_get_style_shadow_color(const struct _lv_obj_t * obj, uint32_t part)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8005276:	2244      	movs	r2, #68	; 0x44
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f006 fc5e 	bl	800bb3c <lv_obj_get_style_prop>
 8005280:	4603      	mov	r3, r0
 8005282:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005284:	7b3b      	ldrb	r3, [r7, #12]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <lv_obj_get_style_shadow_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8005298:	2245      	movs	r2, #69	; 0x45
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f006 fc4d 	bl	800bb3c <lv_obj_get_style_prop>
 80052a2:	4603      	mov	r3, r0
 80052a4:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	b2db      	uxtb	r3, r3
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <lv_obj_get_style_radius>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
    return (lv_text_align_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_radius(const struct _lv_obj_t * obj, uint32_t part)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80052bc:	220b      	movs	r2, #11
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f006 fc3b 	bl	800bb3c <lv_obj_get_style_prop>
 80052c6:	4603      	mov	r3, r0
 80052c8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	b21b      	sxth	r3, r3
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <lv_obj_get_style_clip_corner>:

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80052e0:	2217      	movs	r2, #23
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f006 fc29 	bl	800bb3c <lv_obj_get_style_prop>
 80052ea:	4603      	mov	r3, r0
 80052ec:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <lv_obj_get_style_opa>:

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800530c:	2260      	movs	r2, #96	; 0x60
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f006 fc13 	bl	800bb3c <lv_obj_get_style_prop>
 8005316:	4603      	mov	r3, r0
 8005318:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	b2db      	uxtb	r3, r3
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <lv_obj_get_style_layout>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005330:	220a      	movs	r2, #10
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f006 fc01 	bl	800bb3c <lv_obj_get_style_prop>
 800533a:	4603      	mov	r3, r0
 800533c:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	b29b      	uxth	r3, r3
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <lv_init>:
{
    return lv_initialized;
}

void lv_init(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
    /*Do nothing if already initialized*/
    if(lv_initialized) {
 8005352:	4b22      	ldr	r3, [pc, #136]	; (80053dc <lv_init+0x90>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d13b      	bne.n	80053d2 <lv_init+0x86>
    }

    LV_LOG_INFO("begin");

    /*Initialize the misc modules*/
    lv_mem_init();
 800535a:	f01b fa51 	bl	8020800 <lv_mem_init>

    _lv_timer_core_init();
 800535e:	f01c fc7f 	bl	8021c60 <_lv_timer_core_init>

    _lv_fs_init();
 8005362:	f01a fca1 	bl	801fca8 <_lv_fs_init>

    _lv_anim_core_init();
 8005366:	f019 fb5b 	bl	801ea20 <_lv_anim_core_init>

    _lv_group_init();
 800536a:	f7ff fa89 	bl	8004880 <_lv_group_init>

    lv_draw_init();
 800536e:	f009 fbfe 	bl	800eb6e <lv_draw_init>

#if LV_USE_GPU_NXP_PXP && LV_USE_GPU_NXP_PXP_AUTO_INIT
    PXP_COND_STOP(!lv_gpu_nxp_pxp_init(), "PXP init failed.");
#endif

    _lv_obj_style_init();
 8005372:	f006 fa09 	bl	800b788 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8005376:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800537a:	4819      	ldr	r0, [pc, #100]	; (80053e0 <lv_init+0x94>)
 800537c:	f01a ffb3 	bl	80202e6 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8005380:	215c      	movs	r1, #92	; 0x5c
 8005382:	4818      	ldr	r0, [pc, #96]	; (80053e4 <lv_init+0x98>)
 8005384:	f01a ffaf 	bl	80202e6 <_lv_ll_init>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8005388:	f007 fd99 	bl	800cebe <_lv_refr_init>

    _lv_img_decoder_init();
 800538c:	f00d fdb0 	bl	8012ef0 <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 8005390:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <lv_init+0x9c>)
 8005392:	617b      	str	r3, [r7, #20]

    uint8_t * txt_u8 = (uint8_t *)txt;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	613b      	str	r3, [r7, #16]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2bc3      	cmp	r3, #195	; 0xc3
 800539e:	d103      	bne.n	80053a8 <lv_init+0x5c>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	3301      	adds	r3, #1
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings have no UTF-8 encoding. Non-ASCII characters won't be displayed.");
    }

    uint32_t endianess_test = 0x11223344;
 80053a8:	4b10      	ldr	r3, [pc, #64]	; (80053ec <lv_init+0xa0>)
 80053aa:	607b      	str	r3, [r7, #4]
    uint8_t * endianess_test_p = (uint8_t *) &endianess_test;
 80053ac:	1d3b      	adds	r3, r7, #4
 80053ae:	60fb      	str	r3, [r7, #12]
    bool big_endian = endianess_test_p[0] == 0x11 ? true : false;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b11      	cmp	r3, #17
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	72fb      	strb	r3, [r7, #11]

    if(big_endian) {
 80053be:	7afb      	ldrb	r3, [r7, #11]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d000      	beq.n	80053c6 <lv_init+0x7a>
        LV_ASSERT_MSG(LV_BIG_ENDIAN_SYSTEM == 1,
 80053c4:	e7fe      	b.n	80053c4 <lv_init+0x78>

#if LV_LOG_LEVEL == LV_LOG_LEVEL_TRACE
    LV_LOG_WARN("Log level is set to 'Trace' which makes LVGL much slower");
#endif

    lv_extra_init();
 80053c6:	f018 fcf2 	bl	801ddae <lv_extra_init>

    lv_initialized = true;
 80053ca:	4b04      	ldr	r3, [pc, #16]	; (80053dc <lv_init+0x90>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	e000      	b.n	80053d4 <lv_init+0x88>
        return;
 80053d2:	bf00      	nop

    LV_LOG_TRACE("finished");
}
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	200006e8 	.word	0x200006e8
 80053e0:	20000844 	.word	0x20000844
 80053e4:	20000850 	.word	0x20000850
 80053e8:	0802370c 	.word	0x0802370c
 80053ec:	11223344 	.word	0x11223344

080053f0 <lv_obj_create>:
#endif
}
#endif

lv_obj_t * lv_obj_create(lv_obj_t * parent)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4806      	ldr	r0, [pc, #24]	; (8005414 <lv_obj_create+0x24>)
 80053fc:	f001 f9b8 	bl	8006770 <lv_obj_class_create_obj>
 8005400:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f001 fa69 	bl	80068da <lv_obj_class_init_obj>
    return obj;
 8005408:	68fb      	ldr	r3, [r7, #12]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	08023770 	.word	0x08023770

08005418 <lv_obj_clear_flag>:
        lv_obj_invalidate_area(obj, &ver_area);
    }
}

void lv_obj_clear_flag(lv_obj_t * obj, lv_obj_flag_t f)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f002 fcbc 	bl	8007da0 <lv_obj_is_layout_positioned>
 8005428:	4603      	mov	r3, r0
 800542a:	77fb      	strb	r3, [r7, #31]
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b00      	cmp	r3, #0
 8005434:	d013      	beq.n	800545e <lv_obj_clear_flag+0x46>
        lv_area_t hor_area, ver_area;
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005436:	f107 020c 	add.w	r2, r7, #12
 800543a:	f107 0314 	add.w	r3, r7, #20
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f004 fedb 	bl	800a1fc <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f003 fac7 	bl	80089e0 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f003 fac1 	bl	80089e0 <lv_obj_invalidate_area>
    }

    obj->flags &= (~f);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	43db      	mvns	r3, r3
 8005466:	401a      	ands	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	61da      	str	r2, [r3, #28]

    if(f & LV_OBJ_FLAG_HIDDEN) {
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d012      	beq.n	800549c <lv_obj_clear_flag+0x84>
        lv_obj_invalidate(obj);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f003 fae7 	bl	8008a4a <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f002 fc8f 	bl	8007da0 <lv_obj_is_layout_positioned>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <lv_obj_clear_flag+0x84>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f007 fc3b 	bl	800cd04 <lv_obj_get_parent>
 800548e:	4603      	mov	r3, r0
 8005490:	4618      	mov	r0, r3
 8005492:	f002 fcad 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f002 fcaa 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
        }
    }

    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f002 fc7f 	bl	8007da0 <lv_obj_is_layout_positioned>
 80054a2:	4603      	mov	r3, r0
 80054a4:	461a      	mov	r2, r3
 80054a6:	7ffb      	ldrb	r3, [r7, #31]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d104      	bne.n	80054b6 <lv_obj_clear_flag+0x9e>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f003 73c0 	and.w	r3, r3, #25165824	; 0x1800000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <lv_obj_clear_flag+0xac>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f007 fc24 	bl	800cd04 <lv_obj_get_parent>
 80054bc:	4603      	mov	r3, r0
 80054be:	4618      	mov	r0, r3
 80054c0:	f002 fc96 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
    }

}
 80054c4:	bf00      	nop
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <lv_obj_add_state>:

void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state | state;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8c1a      	ldrh	r2, [r3, #32]
 80054dc:	887b      	ldrh	r3, [r7, #2]
 80054de:	4313      	orrs	r3, r2
 80054e0:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8c1b      	ldrh	r3, [r3, #32]
 80054e6:	89fa      	ldrh	r2, [r7, #14]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d004      	beq.n	80054f6 <lv_obj_add_state+0x2a>
        lv_obj_set_state(obj, new_state);
 80054ec:	89fb      	ldrh	r3, [r7, #14]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 ffd1 	bl	8006498 <lv_obj_set_state>
    }
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <lv_obj_clear_state>:

void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	460b      	mov	r3, r1
 8005508:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state & (~state);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8c1b      	ldrh	r3, [r3, #32]
 800550e:	b21a      	sxth	r2, r3
 8005510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005514:	43db      	mvns	r3, r3
 8005516:	b21b      	sxth	r3, r3
 8005518:	4013      	ands	r3, r2
 800551a:	b21b      	sxth	r3, r3
 800551c:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8c1b      	ldrh	r3, [r3, #32]
 8005522:	89fa      	ldrh	r2, [r7, #14]
 8005524:	429a      	cmp	r2, r3
 8005526:	d004      	beq.n	8005532 <lv_obj_clear_state+0x34>
        lv_obj_set_state(obj, new_state);
 8005528:	89fb      	ldrh	r3, [r7, #14]
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 ffb3 	bl	8006498 <lv_obj_set_state>
    }
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <lv_obj_has_flag>:
/*=======================
 * Getter functions
 *======================*/

bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f)  == f ? true : false;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4013      	ands	r3, r2
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	bf0c      	ite	eq
 8005552:	2301      	moveq	r3, #1
 8005554:	2300      	movne	r3, #0
 8005556:	b2db      	uxtb	r3, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <lv_obj_has_flag_any>:

bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f) ? true : false;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->state;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	8c1b      	ldrh	r3, [r3, #32]
}
 8005598:	4618      	mov	r0, r3
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <lv_obj_get_group>:

    return obj->state & state ? true : false;
}

void * lv_obj_get_group(const lv_obj_t * obj)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr) return obj->spec_attr->group_p;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <lv_obj_get_group+0x18>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	e000      	b.n	80055be <lv_obj_get_group+0x1a>
    else return NULL;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <lv_obj_allocate_spec_attr>:
/*-------------------
 * OTHER FUNCTIONS
 *------------------*/

void lv_obj_allocate_spec_attr(lv_obj_t * obj)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) {
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d127      	bne.n	800562c <lv_obj_allocate_spec_attr+0x60>
        static uint32_t x = 0;
        x++;
 80055dc:	4b15      	ldr	r3, [pc, #84]	; (8005634 <lv_obj_allocate_spec_attr+0x68>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	4a14      	ldr	r2, [pc, #80]	; (8005634 <lv_obj_allocate_spec_attr+0x68>)
 80055e4:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 80055e6:	201c      	movs	r0, #28
 80055e8:	f01b f91a 	bl	8020820 <lv_mem_alloc>
 80055ec:	4602      	mov	r2, r0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d100      	bne.n	80055fc <lv_obj_allocate_spec_attr+0x30>
 80055fa:	e7fe      	b.n	80055fa <lv_obj_allocate_spec_attr+0x2e>
        if(obj->spec_attr == NULL) return;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d012      	beq.n	800562a <lv_obj_allocate_spec_attr+0x5e>

        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	211c      	movs	r1, #28
 800560a:	4618      	mov	r0, r3
 800560c:	f01b fd3c 	bl	8021088 <lv_memset_00>

        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	7e53      	ldrb	r3, [r2, #25]
 8005616:	f043 030f 	orr.w	r3, r3, #15
 800561a:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	7e13      	ldrb	r3, [r2, #24]
 8005622:	f043 0303 	orr.w	r3, r3, #3
 8005626:	7613      	strb	r3, [r2, #24]
 8005628:	e000      	b.n	800562c <lv_obj_allocate_spec_attr+0x60>
        if(obj->spec_attr == NULL) return;
 800562a:	bf00      	nop
    }
}
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200006ec 	.word	0x200006ec

08005638 <lv_obj_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_t * parent = obj->parent;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	60fb      	str	r3, [r7, #12]
    if(parent) {
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d03f      	beq.n	80056ce <lv_obj_constructor+0x96>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f004 f9ca 	bl	80099e8 <lv_obj_get_scroll_left>
 8005654:	4603      	mov	r3, r0
 8005656:	817b      	strh	r3, [r7, #10]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f004 f927 	bl	80098ac <lv_obj_get_scroll_top>
 800565e:	4603      	mov	r3, r0
 8005660:	813b      	strh	r3, [r7, #8]

        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005668:	b29c      	uxth	r4, r3
 800566a:	2100      	movs	r1, #0
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fd47 	bl	8005100 <lv_obj_get_style_pad_top>
 8005672:	4603      	mov	r3, r0
 8005674:	b29b      	uxth	r3, r3
 8005676:	4423      	add	r3, r4
 8005678:	b29a      	uxth	r2, r3
 800567a:	893b      	ldrh	r3, [r7, #8]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	b29b      	uxth	r3, r3
 8005680:	b21a      	sxth	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	82da      	strh	r2, [r3, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29b      	uxth	r3, r3
 8005692:	b21a      	sxth	r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	835a      	strh	r2, [r3, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800569e:	b29c      	uxth	r4, r3
 80056a0:	2100      	movs	r1, #0
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff fd3e 	bl	8005124 <lv_obj_get_style_pad_left>
 80056a8:	4603      	mov	r3, r0
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	4423      	add	r3, r4
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	897b      	ldrh	r3, [r7, #10]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	b21a      	sxth	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	829a      	strh	r2, [r3, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	b21a      	sxth	r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	831a      	strh	r2, [r3, #24]
    }

    /*Set attributes*/
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2202      	movs	r2, #2
 80056d2:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <lv_obj_constructor+0xba>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <lv_obj_constructor+0xcc>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f043 0204 	orr.w	r2, r3, #4
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f043 0210 	orr.w	r2, r3, #16
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <lv_obj_constructor+0x11a>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	61da      	str	r2, [r3, #28]

    LV_TRACE_OBJ_CREATE("finished");
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bd90      	pop	{r4, r7, pc}

0800575a <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    _lv_event_mark_deleted(obj);
 8005764:	6838      	ldr	r0, [r7, #0]
 8005766:	f7fe fe57 	bl	8004418 <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 800576a:	2000      	movs	r0, #0
 800576c:	f006 f9d6 	bl	800bb1c <lv_obj_enable_style_refresh>
    lv_obj_remove_style_all(obj);
 8005770:	6838      	ldr	r0, [r7, #0]
 8005772:	f7ff fc5b 	bl	800502c <lv_obj_remove_style_all>
    lv_obj_enable_style_refresh(true);
 8005776:	2001      	movs	r0, #1
 8005778:	f006 f9d0 	bl	800bb1c <lv_obj_enable_style_refresh>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 800577c:	2100      	movs	r1, #0
 800577e:	6838      	ldr	r0, [r7, #0]
 8005780:	f019 fa0a 	bl	801eb98 <lv_anim_del>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 8005784:	6838      	ldr	r0, [r7, #0]
 8005786:	f7ff ff0d 	bl	80055a4 <lv_obj_get_group>
 800578a:	60f8      	str	r0, [r7, #12]
    if(group) lv_group_remove_obj(obj);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <lv_obj_destructor+0x3e>
 8005792:	6838      	ldr	r0, [r7, #0]
 8005794:	f7ff f8ee 	bl	8004974 <lv_group_remove_obj>

    if(obj->spec_attr) {
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d025      	beq.n	80057ec <lv_obj_destructor+0x92>
        if(obj->spec_attr->children) {
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <lv_obj_destructor+0x64>
            lv_mem_free(obj->spec_attr->children);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f01b f865 	bl	8020880 <lv_mem_free>
            obj->spec_attr->children = NULL;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d009      	beq.n	80057dc <lv_obj_destructor+0x82>
            lv_mem_free(obj->spec_attr->event_dsc);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f01b f856 	bl	8020880 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f01b f84d 	bl	8020880 <lv_mem_free>
        obj->spec_attr = NULL;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	609a      	str	r2, [r3, #8]
    }
}
 80057ec:	bf00      	nop
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <lv_obj_draw>:

static void lv_obj_draw(lv_event_t * e)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b0b4      	sub	sp, #208	; 0xd0
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
    lv_event_code_t code = lv_event_get_code(e);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fe fdef 	bl	80043e0 <lv_event_get_code>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    lv_obj_t * obj = lv_event_get_target(e);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fe fdd1 	bl	80043b0 <lv_event_get_target>
 800580e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if(code == LV_EVENT_COVER_CHECK) {
 8005812:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005816:	2b12      	cmp	r3, #18
 8005818:	f040 8089 	bne.w	800592e <lv_obj_draw+0x13a>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fe fdee 	bl	80043fe <lv_event_get_param>
 8005822:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if(info->res == LV_COVER_RES_MASKED) return;
 8005826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b02      	cmp	r3, #2
 800582e:	f000 8227 	beq.w	8005c80 <lv_obj_draw+0x48c>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8005832:	2100      	movs	r1, #0
 8005834:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005838:	f7ff fd4d 	bl	80052d6 <lv_obj_get_style_clip_corner>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <lv_obj_draw+0x58>
            info->res = LV_COVER_RES_MASKED;
 8005842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005846:	2202      	movs	r2, #2
 8005848:	701a      	strb	r2, [r3, #0]
            return;
 800584a:	e21a      	b.n	8005c82 <lv_obj_draw+0x48e>
        }

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_PART_MAIN);
 800584c:	2100      	movs	r1, #0
 800584e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005852:	f7ff fd2e 	bl	80052b2 <lv_obj_get_style_radius>
 8005856:	4603      	mov	r3, r0
 8005858:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 800585c:	2100      	movs	r1, #0
 800585e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005862:	f7ff fc29 	bl	80050b8 <lv_obj_get_style_transform_width>
 8005866:	4603      	mov	r3, r0
 8005868:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 800586c:	2100      	movs	r1, #0
 800586e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005872:	f7ff fc33 	bl	80050dc <lv_obj_get_style_transform_height>
 8005876:	4603      	mov	r3, r0
 8005878:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 800587c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005880:	f103 0214 	add.w	r2, r3, #20
 8005884:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff faec 	bl	8004e68 <lv_area_copy>
        coords.x1 -= w;
 8005890:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8005894:	b29a      	uxth	r2, r3
 8005896:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	b29b      	uxth	r3, r3
 800589e:	b21b      	sxth	r3, r3
 80058a0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.x2 += w;
 80058a4:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80058ae:	4413      	add	r3, r2
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	b21b      	sxth	r3, r3
 80058b4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        coords.y1 -= h;
 80058b8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80058bc:	b29a      	uxth	r2, r3
 80058be:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        coords.y2 += h;
 80058cc:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80058d6:	4413      	add	r3, r2
 80058d8:	b29b      	uxth	r3, r3
 80058da:	b21b      	sxth	r3, r3
 80058dc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80058e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 80058ea:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80058ee:	4618      	mov	r0, r3
 80058f0:	f019 fe5a 	bl	801f5a8 <_lv_area_is_in>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f083 0301 	eor.w	r3, r3, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <lv_obj_draw+0x116>
            info->res = LV_COVER_RES_NOT_COVER;
 8005900:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]
            return;
 8005908:	e1bb      	b.n	8005c82 <lv_obj_draw+0x48e>
        }

        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 800590a:	2100      	movs	r1, #0
 800590c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005910:	f7ff fc2b 	bl	800516a <lv_obj_get_style_bg_opa>
 8005914:	4603      	mov	r3, r0
 8005916:	2bfc      	cmp	r3, #252	; 0xfc
 8005918:	d804      	bhi.n	8005924 <lv_obj_draw+0x130>
            info->res = LV_COVER_RES_NOT_COVER;
 800591a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
            return;
 8005922:	e1ae      	b.n	8005c82 <lv_obj_draw+0x48e>
        }

        info->res = LV_COVER_RES_COVER;
 8005924:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	e1a9      	b.n	8005c82 <lv_obj_draw+0x48e>

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 800592e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005932:	2b15      	cmp	r3, #21
 8005934:	f040 80e7 	bne.w	8005b06 <lv_obj_draw+0x312>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fe fde1 	bl	8004500 <lv_event_get_draw_ctx>
 800593e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 8005942:	f107 030c 	add.w	r3, r7, #12
 8005946:	4618      	mov	r0, r3
 8005948:	f00d f8f6 	bl	8012b38 <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 800594c:	2100      	movs	r1, #0
 800594e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005952:	f7ff fc51 	bl	80051f8 <lv_obj_get_style_border_post>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <lv_obj_draw+0x174>
            draw_dsc.border_post = 1;
 800595c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }

        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8005968:	f107 030c 	add.w	r3, r7, #12
 800596c:	461a      	mov	r2, r3
 800596e:	2100      	movs	r1, #0
 8005970:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005974:	f001 fb20 	bl	8006fb8 <lv_obj_init_draw_rect_dsc>
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 8005978:	2100      	movs	r1, #0
 800597a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800597e:	f7ff fb9b 	bl	80050b8 <lv_obj_get_style_transform_width>
 8005982:	4603      	mov	r3, r0
 8005984:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8005988:	2100      	movs	r1, #0
 800598a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800598e:	f7ff fba5 	bl	80050dc <lv_obj_get_style_transform_height>
 8005992:	4603      	mov	r3, r0
 8005994:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8005998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800599c:	f103 0214 	add.w	r2, r3, #20
 80059a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fa5e 	bl	8004e68 <lv_area_copy>
        coords.x1 -= w;
 80059ac:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	b21b      	sxth	r3, r3
 80059bc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.x2 += w;
 80059c0:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80059ca:	4413      	add	r3, r2
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	b21b      	sxth	r3, r3
 80059d0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.y1 -= h;
 80059d4:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 80059d8:	b29a      	uxth	r2, r3
 80059da:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	b21b      	sxth	r3, r3
 80059e4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
        coords.y2 += h;
 80059e8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80059f2:	4413      	add	r3, r2
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	b21b      	sxth	r3, r3
 80059f8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

        lv_obj_draw_part_dsc_t part_dsc;
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80059fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a00:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 fd3e 	bl	8007486 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 8005a0a:	4b9f      	ldr	r3, [pc, #636]	; (8005c88 <lv_obj_draw+0x494>)
 8005a0c:	643b      	str	r3, [r7, #64]	; 0x40
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	647b      	str	r3, [r7, #68]	; 0x44
        part_dsc.rect_dsc = &draw_dsc;
 8005a12:	f107 030c 	add.w	r3, r7, #12
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
        part_dsc.draw_area = &coords;
 8005a18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005a1c:	64bb      	str	r3, [r7, #72]	; 0x48
        part_dsc.part = LV_PART_MAIN;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	673b      	str	r3, [r7, #112]	; 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8005a22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a26:	461a      	mov	r2, r3
 8005a28:	211a      	movs	r1, #26
 8005a2a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005a2e:	f7fe fc3f 	bl	80042b0 <lv_event_send>

#if LV_DRAW_COMPLEX
        /*With clip corner enabled draw the bg img separately to make it clipped*/
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8005a32:	2100      	movs	r1, #0
 8005a34:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005a38:	f7ff fc4d 	bl	80052d6 <lv_obj_get_style_clip_corner>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <lv_obj_draw+0x25a>
 8005a42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <lv_obj_draw+0x25a>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <lv_obj_draw+0x25c>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8005a54:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
        const void * bg_img_src = draw_dsc.bg_img_src;
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if(clip_corner) {
 8005a66:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <lv_obj_draw+0x27e>
            draw_dsc.bg_img_src = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
        }
#endif

        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8005a72:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005a76:	f107 030c 	add.w	r3, r7, #12
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005a80:	f00d f89e 	bl	8012bc0 <lv_draw_rect>


#if LV_DRAW_COMPLEX
        if(clip_corner) {
 8005a84:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d033      	beq.n	8005af4 <lv_obj_draw+0x300>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8005a8c:	2018      	movs	r0, #24
 8005a8e:	f01a ff51 	bl	8020934 <lv_mem_buf_get>
 8005a92:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8005a96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a9a:	f103 0114 	add.w	r1, r3, #20
 8005a9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005aa8:	f00b f84a 	bl	8010b40 <lv_draw_mask_radius_init>
            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 8005aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ab0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005aba:	f00a fc75 	bl	80103a8 <lv_draw_mask_add>

            if(bg_img_src) {
 8005abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d016      	beq.n	8005af4 <lv_obj_draw+0x300>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                draw_dsc.bg_img_src = bg_img_src;
 8005adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ae0:	61bb      	str	r3, [r7, #24]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8005ae2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005ae6:	f107 030c 	add.w	r3, r7, #12
 8005aea:	4619      	mov	r1, r3
 8005aec:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005af0:	f00d f866 	bl	8012bc0 <lv_draw_rect>
            }

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8005af4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005af8:	461a      	mov	r2, r3
 8005afa:	211b      	movs	r1, #27
 8005afc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005b00:	f7fe fbd6 	bl	80042b0 <lv_event_send>
 8005b04:	e0bd      	b.n	8005c82 <lv_obj_draw+0x48e>
    }
    else if(code == LV_EVENT_DRAW_POST) {
 8005b06:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005b0a:	2b18      	cmp	r3, #24
 8005b0c:	f040 80b9 	bne.w	8005c82 <lv_obj_draw+0x48e>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fe fcf5 	bl	8004500 <lv_event_get_draw_ctx>
 8005b16:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        draw_scrollbar(obj, draw_ctx);
 8005b1a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8005b1e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005b22:	f000 f8b3 	bl	8005c8c <draw_scrollbar>

#if LV_DRAW_COMPLEX
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8005b26:	2100      	movs	r1, #0
 8005b28:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005b2c:	f7ff fbd3 	bl	80052d6 <lv_obj_get_style_clip_corner>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d014      	beq.n	8005b60 <lv_obj_draw+0x36c>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8005b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b3a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f00a fcd0 	bl	80104e4 <lv_draw_mask_remove_custom>
 8005b44:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
            if(param) {
 8005b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <lv_obj_draw+0x36c>
                lv_draw_mask_free_param(param);
 8005b50:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005b54:	f00a fcee 	bl	8010534 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 8005b58:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005b5c:	f01a ff96 	bl	8020a8c <lv_mem_buf_release>
            }
        }
#endif

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8005b60:	2100      	movs	r1, #0
 8005b62:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005b66:	f7ff fb47 	bl	80051f8 <lv_obj_get_style_border_post>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8088 	beq.w	8005c82 <lv_obj_draw+0x48e>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 8005b72:	f107 030c 	add.w	r3, r7, #12
 8005b76:	4618      	mov	r0, r3
 8005b78:	f00c ffde 	bl	8012b38 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73fb      	strb	r3, [r7, #15]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8005b92:	f107 030c 	add.w	r3, r7, #12
 8005b96:	461a      	mov	r2, r3
 8005b98:	2100      	movs	r1, #0
 8005b9a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005b9e:	f001 fa0b 	bl	8006fb8 <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005ba8:	f7ff fa86 	bl	80050b8 <lv_obj_get_style_transform_width>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005bb8:	f7ff fa90 	bl	80050dc <lv_obj_get_style_transform_height>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 8005bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bc6:	f103 0214 	add.w	r2, r3, #20
 8005bca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff f949 	bl	8004e68 <lv_area_copy>
            coords.x1 -= w;
 8005bd6:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
            coords.x2 += w;
 8005bea:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf4:	4413      	add	r3, r2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	b21b      	sxth	r3, r3
 8005bfa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
            coords.y1 -= h;
 8005bfe:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	b21b      	sxth	r3, r3
 8005c0e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            coords.y2 += h;
 8005c12:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005c1c:	4413      	add	r3, r2
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	b21b      	sxth	r3, r3
 8005c22:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            lv_obj_draw_part_dsc_t part_dsc;
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8005c26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c2a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fc29 	bl	8007486 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8005c34:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <lv_obj_draw+0x494>)
 8005c36:	643b      	str	r3, [r7, #64]	; 0x40
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	647b      	str	r3, [r7, #68]	; 0x44
            part_dsc.rect_dsc = &draw_dsc;
 8005c3c:	f107 030c 	add.w	r3, r7, #12
 8005c40:	64fb      	str	r3, [r7, #76]	; 0x4c
            part_dsc.draw_area = &coords;
 8005c42:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
            part_dsc.part = LV_PART_MAIN;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	673b      	str	r3, [r7, #112]	; 0x70
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8005c4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c50:	461a      	mov	r2, r3
 8005c52:	211a      	movs	r1, #26
 8005c54:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005c58:	f7fe fb2a 	bl	80042b0 <lv_event_send>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8005c5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	4619      	mov	r1, r3
 8005c66:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005c6a:	f00c ffa9 	bl	8012bc0 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8005c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c72:	461a      	mov	r2, r3
 8005c74:	211b      	movs	r1, #27
 8005c76:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005c7a:	f7fe fb19 	bl	80042b0 <lv_event_send>
 8005c7e:	e000      	b.n	8005c82 <lv_obj_draw+0x48e>
        if(info->res == LV_COVER_RES_MASKED) return;
 8005c80:	bf00      	nop
        }
    }
}
 8005c82:	37d0      	adds	r7, #208	; 0xd0
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	08023770 	.word	0x08023770

08005c8c <draw_scrollbar>:

static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b0a6      	sub	sp, #152	; 0x98
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005c96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005c9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f004 faab 	bl	800a1fc <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8005ca6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005caa:	4618      	mov	r0, r3
 8005cac:	f019 fa0b 	bl	801f0c6 <lv_area_get_size>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d107      	bne.n	8005cc6 <draw_scrollbar+0x3a>
 8005cb6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f019 fa03 	bl	801f0c6 <lv_area_get_size>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d062      	beq.n	8005d8c <draw_scrollbar+0x100>

    lv_draw_rect_dsc_t draw_dsc;
    lv_res_t sb_res = scrollbar_init_draw_dsc(obj, &draw_dsc);
 8005cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f865 	bl	8005d9c <scrollbar_init_draw_dsc>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(sb_res != LV_RES_OK) return;
 8005cd8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d157      	bne.n	8005d90 <draw_scrollbar+0x104>

    lv_obj_draw_part_dsc_t part_dsc;
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8005ce0:	f107 030c 	add.w	r3, r7, #12
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fbcd 	bl	8007486 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8005cec:	4b2a      	ldr	r3, [pc, #168]	; (8005d98 <draw_scrollbar+0x10c>)
 8005cee:	613b      	str	r3, [r7, #16]
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	617b      	str	r3, [r7, #20]
    part_dsc.rect_dsc = &draw_dsc;
 8005cf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005cf8:	61fb      	str	r3, [r7, #28]
    part_dsc.part = LV_PART_SCROLLBAR;
 8005cfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cfe:	643b      	str	r3, [r7, #64]	; 0x40

    if(lv_area_get_size(&hor_area) > 0) {
 8005d00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005d04:	4618      	mov	r0, r3
 8005d06:	f019 f9de 	bl	801f0c6 <lv_area_get_size>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d018      	beq.n	8005d42 <draw_scrollbar+0xb6>
        part_dsc.draw_area = &hor_area;
 8005d10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005d14:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8005d16:	f107 030c 	add.w	r3, r7, #12
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	211a      	movs	r1, #26
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fe fac6 	bl	80042b0 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8005d24:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005d28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6838      	ldr	r0, [r7, #0]
 8005d30:	f00c ff46 	bl	8012bc0 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8005d34:	f107 030c 	add.w	r3, r7, #12
 8005d38:	461a      	mov	r2, r3
 8005d3a:	211b      	movs	r1, #27
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fe fab7 	bl	80042b0 <lv_event_send>
    }
    if(lv_area_get_size(&ver_area) > 0) {
 8005d42:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005d46:	4618      	mov	r0, r3
 8005d48:	f019 f9bd 	bl	801f0c6 <lv_area_get_size>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01f      	beq.n	8005d92 <draw_scrollbar+0x106>
        part_dsc.draw_area = &ver_area;
 8005d52:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005d56:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8005d58:	f107 030c 	add.w	r3, r7, #12
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	211a      	movs	r1, #26
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fe faa5 	bl	80042b0 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 8005d66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005d6a:	61bb      	str	r3, [r7, #24]
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8005d6c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005d70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d74:	4619      	mov	r1, r3
 8005d76:	6838      	ldr	r0, [r7, #0]
 8005d78:	f00c ff22 	bl	8012bc0 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	461a      	mov	r2, r3
 8005d82:	211b      	movs	r1, #27
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fe fa93 	bl	80042b0 <lv_event_send>
 8005d8a:	e002      	b.n	8005d92 <draw_scrollbar+0x106>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <draw_scrollbar+0x106>
    if(sb_res != LV_RES_OK) return;
 8005d90:	bf00      	nop
    }
}
 8005d92:	3798      	adds	r7, #152	; 0x98
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	08023770 	.word	0x08023770

08005d9c <scrollbar_init_draw_dsc>:
 * @param obj pointer to an object
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
 8005d9c:	b590      	push	{r4, r7, lr}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
    lv_draw_rect_dsc_init(dsc);
 8005da6:	6838      	ldr	r0, [r7, #0]
 8005da8:	f00c fec6 	bl	8012b38 <lv_draw_rect_dsc_init>
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8005dac:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff f9da 	bl	800516a <lv_obj_get_style_bg_opa>
 8005db6:	4603      	mov	r3, r0
 8005db8:	461a      	mov	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	70da      	strb	r2, [r3, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	78db      	ldrb	r3, [r3, #3]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d906      	bls.n	8005dd4 <scrollbar_init_draw_dsc+0x38>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8005dc6:	683c      	ldr	r4, [r7, #0]
 8005dc8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff f9bb 	bl	8005148 <lv_obj_get_style_bg_color>
 8005dd2:	7120      	strb	r0, [r4, #4]
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8005dd4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff f9e9 	bl	80051b0 <lv_obj_get_style_border_opa>
 8005dde:	4603      	mov	r3, r0
 8005de0:	461a      	mov	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	771a      	strb	r2, [r3, #28]
    if(dsc->border_opa > LV_OPA_MIN) {
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	7f1b      	ldrb	r3, [r3, #28]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d918      	bls.n	8005e20 <scrollbar_init_draw_dsc+0x84>
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8005dee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff f9ee 	bl	80051d4 <lv_obj_get_style_border_width>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	835a      	strh	r2, [r3, #26]
        if(dsc->border_width > 0) {
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dd07      	ble.n	8005e1a <scrollbar_init_draw_dsc+0x7e>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8005e0a:	683c      	ldr	r4, [r7, #0]
 8005e0c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff f9bc 	bl	800518e <lv_obj_get_style_border_color>
 8005e16:	7620      	strb	r0, [r4, #24]
 8005e18:	e002      	b.n	8005e20 <scrollbar_init_draw_dsc+0x84>
        }
        else {
            dsc->border_opa = LV_OPA_TRANSP;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 8005e20:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff fa32 	bl	800528e <lv_obj_get_style_shadow_opa>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d923      	bls.n	8005e86 <scrollbar_init_draw_dsc+0xea>
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 8005e3e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff f9ee 	bl	8005224 <lv_obj_get_style_shadow_width>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	84da      	strh	r2, [r3, #38]	; 0x26
        if(dsc->shadow_width > 0) {
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dd11      	ble.n	8005e7e <scrollbar_init_draw_dsc+0xe2>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8005e5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff f9f2 	bl	8005248 <lv_obj_get_style_shadow_spread>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	859a      	strh	r2, [r3, #44]	; 0x2c
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8005e6c:	683c      	ldr	r4, [r7, #0]
 8005e6e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff f9fa 	bl	800526c <lv_obj_get_style_shadow_color>
 8005e78:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 8005e7c:	e003      	b.n	8005e86 <scrollbar_init_draw_dsc+0xea>
        }
        else {
            dsc->shadow_opa = LV_OPA_TRANSP;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
 8005e86:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fa39 	bl	8005302 <lv_obj_get_style_opa>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
    if(opa < LV_OPA_MAX) {
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2bfc      	cmp	r3, #252	; 0xfc
 8005e98:	d81e      	bhi.n	8005ed8 <scrollbar_init_draw_dsc+0x13c>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	78db      	ldrb	r3, [r3, #3]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	121b      	asrs	r3, r3, #8
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	70da      	strb	r2, [r3, #3]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	78db      	ldrb	r3, [r3, #3]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	121b      	asrs	r3, r3, #8
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	771a      	strb	r2, [r3, #28]
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	78db      	ldrb	r3, [r3, #3]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	121b      	asrs	r3, r3, #8
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d108      	bne.n	8005ef2 <scrollbar_init_draw_dsc+0x156>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	7f1b      	ldrb	r3, [r3, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <scrollbar_init_draw_dsc+0x156>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <scrollbar_init_draw_dsc+0x16c>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8005ef2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff f9db 	bl	80052b2 <lv_obj_get_style_radius>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	801a      	strh	r2, [r3, #0]
        return LV_RES_OK;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <scrollbar_init_draw_dsc+0x16e>
    }
    else {
        return LV_RES_INV;
 8005f08:	2300      	movs	r3, #0
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
    else return LV_RES_INV;
#endif
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd90      	pop	{r4, r7, pc}

08005f12 <lv_obj_event>:

static void lv_obj_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8005f12:	b590      	push	{r4, r7, lr}
 8005f14:	b09b      	sub	sp, #108	; 0x6c
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 8005f1c:	6838      	ldr	r0, [r7, #0]
 8005f1e:	f7fe fa5f 	bl	80043e0 <lv_event_get_code>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_obj_t * obj = lv_event_get_current_target(e);
 8005f28:	6838      	ldr	r0, [r7, #0]
 8005f2a:	f7fe fa4d 	bl	80043c8 <lv_event_get_current_target>
 8005f2e:	6538      	str	r0, [r7, #80]	; 0x50
    if(code == LV_EVENT_PRESSED) {
 8005f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d104      	bne.n	8005f42 <lv_obj_event+0x30>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8005f38:	2120      	movs	r1, #32
 8005f3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f3c:	f7ff fac6 	bl	80054cc <lv_obj_add_state>
 8005f40:	e2a7      	b.n	8006492 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_RELEASED) {
 8005f42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d131      	bne.n	8005fae <lv_obj_event+0x9c>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8005f4a:	2120      	movs	r1, #32
 8005f4c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f4e:	f7ff fad6 	bl	80054fe <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8005f52:	6838      	ldr	r0, [r7, #0]
 8005f54:	f7fe fa53 	bl	80043fe <lv_event_get_param>
 8005f58:	6238      	str	r0, [r7, #32]
        /*Go the checked state if enabled*/
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8005f5a:	6a38      	ldr	r0, [r7, #32]
 8005f5c:	f7fe ff67 	bl	8004e2e <lv_indev_get_scroll_obj>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f040 8295 	bne.w	8006492 <lv_obj_event+0x580>
 8005f68:	2108      	movs	r1, #8
 8005f6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f6c:	f7ff fae5 	bl	800553a <lv_obj_has_flag>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 828d 	beq.w	8006492 <lv_obj_event+0x580>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8005f78:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f7a:	f7ff fb07 	bl	800558c <lv_obj_get_state>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <lv_obj_event+0x80>
 8005f88:	2101      	movs	r1, #1
 8005f8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f8c:	f7ff fa9e 	bl	80054cc <lv_obj_add_state>
 8005f90:	e003      	b.n	8005f9a <lv_obj_event+0x88>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8005f92:	2101      	movs	r1, #1
 8005f94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f96:	f7ff fab2 	bl	80054fe <lv_obj_clear_state>

            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	211c      	movs	r1, #28
 8005f9e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005fa0:	f7fe f986 	bl	80042b0 <lv_event_send>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) return;
 8005fa8:	7ffb      	ldrb	r3, [r7, #31]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	e271      	b.n	8006492 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_PRESS_LOST) {
 8005fae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d104      	bne.n	8005fc0 <lv_obj_event+0xae>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8005fb6:	2120      	movs	r1, #32
 8005fb8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005fba:	f7ff faa0 	bl	80054fe <lv_obj_clear_state>
 8005fbe:	e268      	b.n	8006492 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8005fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc6:	d119      	bne.n	8005ffc <lv_obj_event+0xea>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005fc8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005fca:	f006 feac 	bl	800cd26 <lv_obj_get_child_cnt>
 8005fce:	62b8      	str	r0, [r7, #40]	; 0x28
        for(uint32_t i = 0; i < child_cnt; i++) {
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	667b      	str	r3, [r7, #100]	; 0x64
 8005fd4:	e00d      	b.n	8005ff2 <lv_obj_event+0xe0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
            lv_obj_mark_layout_as_dirty(child);
 8005fe6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fe8:	f001 ff02 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8005fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fee:	3301      	adds	r3, #1
 8005ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ff2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d3ed      	bcc.n	8005fd6 <lv_obj_event+0xc4>
 8005ffa:	e24a      	b.n	8006492 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_KEY) {
 8005ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006000:	2b0d      	cmp	r3, #13
 8006002:	f040 8126 	bne.w	8006252 <lv_obj_event+0x340>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8006006:	2108      	movs	r1, #8
 8006008:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800600a:	f7ff fa96 	bl	800553a <lv_obj_has_flag>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d030      	beq.n	8006076 <lv_obj_event+0x164>
            char c = *((char *)lv_event_get_param(e));
 8006014:	6838      	ldr	r0, [r7, #0]
 8006016:	f7fe f9f2 	bl	80043fe <lv_event_get_param>
 800601a:	4603      	mov	r3, r0
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8006022:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006026:	2b13      	cmp	r3, #19
 8006028:	d003      	beq.n	8006032 <lv_obj_event+0x120>
 800602a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800602e:	2b11      	cmp	r3, #17
 8006030:	d104      	bne.n	800603c <lv_obj_event+0x12a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8006032:	2101      	movs	r1, #1
 8006034:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006036:	f7ff fa49 	bl	80054cc <lv_obj_add_state>
 800603a:	e00b      	b.n	8006054 <lv_obj_event+0x142>
            }
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 800603c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006040:	2b14      	cmp	r3, #20
 8006042:	d003      	beq.n	800604c <lv_obj_event+0x13a>
 8006044:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006048:	2b12      	cmp	r3, #18
 800604a:	d103      	bne.n	8006054 <lv_obj_event+0x142>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 800604c:	2101      	movs	r1, #1
 800604e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006050:	f7ff fa55 	bl	80054fe <lv_obj_clear_state>
            }

            /*With Enter LV_EVENT_RELEASED will send VALUE_CHANGE event*/
            if(c != LV_KEY_ENTER) {
 8006054:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006058:	2b0a      	cmp	r3, #10
 800605a:	f000 821a 	beq.w	8006492 <lv_obj_event+0x580>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800605e:	2200      	movs	r2, #0
 8006060:	211c      	movs	r1, #28
 8006062:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006064:	f7fe f924 	bl	80042b0 <lv_event_send>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if(res != LV_RES_OK) return;
 800606e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006072:	2b01      	cmp	r3, #1
 8006074:	e20d      	b.n	8006492 <lv_obj_event+0x580>
            }
        }
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8006076:	f44f 6101 	mov.w	r1, #2064	; 0x810
 800607a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800607c:	f7ff fa5d 	bl	800553a <lv_obj_has_flag>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8205 	beq.w	8006492 <lv_obj_event+0x580>
 8006088:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800608a:	f000 fc6b 	bl	8006964 <lv_obj_is_editable>
 800608e:	4603      	mov	r3, r0
 8006090:	f083 0301 	eor.w	r3, r3, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 81fb 	beq.w	8006492 <lv_obj_event+0x580>
            /*scroll by keypad or encoder*/
            lv_anim_enable_t anim_enable = LV_ANIM_OFF;
 800609c:	2300      	movs	r3, #0
 800609e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 80060a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80060a4:	f003 fca0 	bl	80099e8 <lv_obj_get_scroll_left>
 80060a8:	4603      	mov	r3, r0
 80060aa:	867b      	strh	r3, [r7, #50]	; 0x32
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 80060ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80060ae:	f003 fd3f 	bl	8009b30 <lv_obj_get_scroll_right>
 80060b2:	4603      	mov	r3, r0
 80060b4:	863b      	strh	r3, [r7, #48]	; 0x30
            char c = *((char *)lv_event_get_param(e));
 80060b6:	6838      	ldr	r0, [r7, #0]
 80060b8:	f7fe f9a1 	bl	80043fe <lv_event_get_param>
 80060bc:	4603      	mov	r3, r0
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(c == LV_KEY_DOWN) {
 80060c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060c8:	2b12      	cmp	r3, #18
 80060ca:	d118      	bne.n	80060fe <lv_obj_event+0x1ec>
                /*use scroll_to_x/y functions to enforce scroll limits*/
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 80060cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80060ce:	f003 fbd5 	bl	800987c <lv_obj_get_scroll_y>
 80060d2:	4603      	mov	r3, r0
 80060d4:	b29c      	uxth	r4, r3
 80060d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80060d8:	f001 fefb 	bl	8007ed2 <lv_obj_get_height>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da00      	bge.n	80060e4 <lv_obj_event+0x1d2>
 80060e2:	3303      	adds	r3, #3
 80060e4:	109b      	asrs	r3, r3, #2
 80060e6:	b21b      	sxth	r3, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4423      	add	r3, r4
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	b21b      	sxth	r3, r3
 80060f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80060f4:	4619      	mov	r1, r3
 80060f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80060f8:	f003 ffe8 	bl	800a0cc <lv_obj_scroll_to_y>
 80060fc:	e1c9      	b.n	8006492 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_UP) {
 80060fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006102:	2b11      	cmp	r3, #17
 8006104:	d118      	bne.n	8006138 <lv_obj_event+0x226>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006106:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006108:	f003 fbb8 	bl	800987c <lv_obj_get_scroll_y>
 800610c:	4603      	mov	r3, r0
 800610e:	b29c      	uxth	r4, r3
 8006110:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006112:	f001 fede 	bl	8007ed2 <lv_obj_get_height>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	da00      	bge.n	800611e <lv_obj_event+0x20c>
 800611c:	3303      	adds	r3, #3
 800611e:	109b      	asrs	r3, r3, #2
 8006120:	b21b      	sxth	r3, r3
 8006122:	b29b      	uxth	r3, r3
 8006124:	1ae3      	subs	r3, r4, r3
 8006126:	b29b      	uxth	r3, r3
 8006128:	b21b      	sxth	r3, r3
 800612a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800612e:	4619      	mov	r1, r3
 8006130:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006132:	f003 ffcb 	bl	800a0cc <lv_obj_scroll_to_y>
 8006136:	e1ac      	b.n	8006492 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_RIGHT) {
 8006138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800613c:	2b13      	cmp	r3, #19
 800613e:	d141      	bne.n	80061c4 <lv_obj_event+0x2b2>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006140:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006142:	f003 fb41 	bl	80097c8 <lv_obj_get_scroll_dir>
 8006146:	4603      	mov	r3, r0
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <lv_obj_event+0x24e>
 8006150:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006154:	2b00      	cmp	r3, #0
 8006156:	dc1c      	bgt.n	8006192 <lv_obj_event+0x280>
 8006158:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800615c:	2b00      	cmp	r3, #0
 800615e:	dc18      	bgt.n	8006192 <lv_obj_event+0x280>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006160:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006162:	f003 fb8b 	bl	800987c <lv_obj_get_scroll_y>
 8006166:	4603      	mov	r3, r0
 8006168:	b29c      	uxth	r4, r3
 800616a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800616c:	f001 feb1 	bl	8007ed2 <lv_obj_get_height>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	da00      	bge.n	8006178 <lv_obj_event+0x266>
 8006176:	3303      	adds	r3, #3
 8006178:	109b      	asrs	r3, r3, #2
 800617a:	b21b      	sxth	r3, r3
 800617c:	b29b      	uxth	r3, r3
 800617e:	4423      	add	r3, r4
 8006180:	b29b      	uxth	r3, r3
 8006182:	b21b      	sxth	r3, r3
 8006184:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006188:	4619      	mov	r1, r3
 800618a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800618c:	f003 ff9e 	bl	800a0cc <lv_obj_scroll_to_y>
 8006190:	e17f      	b.n	8006492 <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8006192:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006194:	f003 fb5a 	bl	800984c <lv_obj_get_scroll_x>
 8006198:	4603      	mov	r3, r0
 800619a:	b29c      	uxth	r4, r3
 800619c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800619e:	f001 fe8a 	bl	8007eb6 <lv_obj_get_width>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	da00      	bge.n	80061aa <lv_obj_event+0x298>
 80061a8:	3303      	adds	r3, #3
 80061aa:	109b      	asrs	r3, r3, #2
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4423      	add	r3, r4
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	b21b      	sxth	r3, r3
 80061b6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80061ba:	4619      	mov	r1, r3
 80061bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80061be:	f003 ff61 	bl	800a084 <lv_obj_scroll_to_x>
 80061c2:	e166      	b.n	8006492 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_LEFT) {
 80061c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061c8:	2b14      	cmp	r3, #20
 80061ca:	f040 8162 	bne.w	8006492 <lv_obj_event+0x580>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 80061ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80061d0:	f003 fafa 	bl	80097c8 <lv_obj_get_scroll_dir>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <lv_obj_event+0x2dc>
 80061de:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dc1c      	bgt.n	8006220 <lv_obj_event+0x30e>
 80061e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dc18      	bgt.n	8006220 <lv_obj_event+0x30e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 80061ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80061f0:	f003 fb44 	bl	800987c <lv_obj_get_scroll_y>
 80061f4:	4603      	mov	r3, r0
 80061f6:	b29c      	uxth	r4, r3
 80061f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80061fa:	f001 fe6a 	bl	8007ed2 <lv_obj_get_height>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	da00      	bge.n	8006206 <lv_obj_event+0x2f4>
 8006204:	3303      	adds	r3, #3
 8006206:	109b      	asrs	r3, r3, #2
 8006208:	b21b      	sxth	r3, r3
 800620a:	b29b      	uxth	r3, r3
 800620c:	1ae3      	subs	r3, r4, r3
 800620e:	b29b      	uxth	r3, r3
 8006210:	b21b      	sxth	r3, r3
 8006212:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006216:	4619      	mov	r1, r3
 8006218:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800621a:	f003 ff57 	bl	800a0cc <lv_obj_scroll_to_y>
 800621e:	e138      	b.n	8006492 <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8006220:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006222:	f003 fb13 	bl	800984c <lv_obj_get_scroll_x>
 8006226:	4603      	mov	r3, r0
 8006228:	b29c      	uxth	r4, r3
 800622a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800622c:	f001 fe43 	bl	8007eb6 <lv_obj_get_width>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	da00      	bge.n	8006238 <lv_obj_event+0x326>
 8006236:	3303      	adds	r3, #3
 8006238:	109b      	asrs	r3, r3, #2
 800623a:	b21b      	sxth	r3, r3
 800623c:	b29b      	uxth	r3, r3
 800623e:	1ae3      	subs	r3, r4, r3
 8006240:	b29b      	uxth	r3, r3
 8006242:	b21b      	sxth	r3, r3
 8006244:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006248:	4619      	mov	r1, r3
 800624a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800624c:	f003 ff1a 	bl	800a084 <lv_obj_scroll_to_x>
 8006250:	e11f      	b.n	8006492 <lv_obj_event+0x580>
            }
        }
    }
    else if(code == LV_EVENT_FOCUSED) {
 8006252:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006256:	2b0e      	cmp	r3, #14
 8006258:	d155      	bne.n	8006306 <lv_obj_event+0x3f4>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 800625a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800625e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006260:	f7ff f96b 	bl	800553a <lv_obj_has_flag>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <lv_obj_event+0x360>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 800626a:	2101      	movs	r1, #1
 800626c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800626e:	f003 ff51 	bl	800a114 <lv_obj_scroll_to_view_recursive>
        }

        bool editing = false;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8006278:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800627a:	f7ff f993 	bl	80055a4 <lv_obj_get_group>
 800627e:	4603      	mov	r3, r0
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe fc37 	bl	8004af4 <lv_group_get_editing>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_state_t state = LV_STATE_FOCUSED;
 800628c:	2302      	movs	r3, #2
 800628e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        /* Use the indev for then indev handler.
         * But if the obj was focused manually it returns NULL so try to
         * use the indev from the event*/
        lv_indev_t * indev = lv_indev_get_act();
 8006292:	f7fe fd8d 	bl	8004db0 <lv_indev_get_act>
 8006296:	65f8      	str	r0, [r7, #92]	; 0x5c
        if(indev == NULL) indev = lv_event_get_indev(e);
 8006298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <lv_obj_event+0x394>
 800629e:	6838      	ldr	r0, [r7, #0]
 80062a0:	f7fe f8e0 	bl	8004464 <lv_event_get_indev>
 80062a4:	65f8      	str	r0, [r7, #92]	; 0x5c

        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80062a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80062a8:	f7fe fd8e 	bl	8004dc8 <lv_indev_get_type>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 80062b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d003      	beq.n	80062c2 <lv_obj_event+0x3b0>
 80062ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d105      	bne.n	80062ce <lv_obj_event+0x3bc>
 80062c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062c6:	f043 0304 	orr.w	r3, r3, #4
 80062ca:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        if(editing) {
 80062ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <lv_obj_event+0x3de>
            state |= LV_STATE_EDITED;
 80062d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062da:	f043 0308 	orr.w	r3, r3, #8
 80062de:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_obj_add_state(obj, state);
 80062e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062e6:	4619      	mov	r1, r3
 80062e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80062ea:	f7ff f8ef 	bl	80054cc <lv_obj_add_state>
 80062ee:	e0d0      	b.n	8006492 <lv_obj_event+0x580>
        }
        else {
            lv_obj_add_state(obj, state);
 80062f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062f4:	4619      	mov	r1, r3
 80062f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80062f8:	f7ff f8e8 	bl	80054cc <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 80062fc:	2108      	movs	r1, #8
 80062fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006300:	f7ff f8fd 	bl	80054fe <lv_obj_clear_state>
 8006304:	e0c5      	b.n	8006492 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8006306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800630a:	2b09      	cmp	r3, #9
 800630c:	d104      	bne.n	8006318 <lv_obj_event+0x406>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 800630e:	2140      	movs	r1, #64	; 0x40
 8006310:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006312:	f7ff f8db 	bl	80054cc <lv_obj_add_state>
 8006316:	e0bc      	b.n	8006492 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SCROLL_END) {
 8006318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800631c:	2b0a      	cmp	r3, #10
 800631e:	d11f      	bne.n	8006360 <lv_obj_event+0x44e>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8006320:	2140      	movs	r1, #64	; 0x40
 8006322:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006324:	f7ff f8eb 	bl	80054fe <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8006328:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800632a:	f003 fa37 	bl	800979c <lv_obj_get_scrollbar_mode>
 800632e:	4603      	mov	r3, r0
 8006330:	2b02      	cmp	r3, #2
 8006332:	f040 80ae 	bne.w	8006492 <lv_obj_event+0x580>
            lv_area_t hor_area, ver_area;
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006336:	f107 020c 	add.w	r2, r7, #12
 800633a:	f107 0314 	add.w	r3, r7, #20
 800633e:	4619      	mov	r1, r3
 8006340:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006342:	f003 ff5b 	bl	800a1fc <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8006346:	f107 0314 	add.w	r3, r7, #20
 800634a:	4619      	mov	r1, r3
 800634c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800634e:	f002 fb47 	bl	80089e0 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8006352:	f107 030c 	add.w	r3, r7, #12
 8006356:	4619      	mov	r1, r3
 8006358:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800635a:	f002 fb41 	bl	80089e0 <lv_obj_invalidate_area>
 800635e:	e098      	b.n	8006492 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_DEFOCUSED) {
 8006360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d104      	bne.n	8006372 <lv_obj_event+0x460>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8006368:	210e      	movs	r1, #14
 800636a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800636c:	f7ff f8c7 	bl	80054fe <lv_obj_clear_state>
 8006370:	e08f      	b.n	8006492 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8006372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006376:	2b29      	cmp	r3, #41	; 0x29
 8006378:	d132      	bne.n	80063e0 <lv_obj_event+0x4ce>
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 800637a:	2100      	movs	r1, #0
 800637c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800637e:	f7fe fe89 	bl	8005094 <lv_obj_get_style_align>
 8006382:	4603      	mov	r3, r0
 8006384:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8006388:	2100      	movs	r1, #0
 800638a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800638c:	f7fe ffcb 	bl	8005326 <lv_obj_get_style_layout>
 8006390:	4603      	mov	r3, r0
 8006392:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        if(layout || align) {
 8006396:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <lv_obj_event+0x494>
 800639e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <lv_obj_event+0x49a>
            lv_obj_mark_layout_as_dirty(obj);
 80063a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80063a8:	f001 fd22 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
        }

        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80063ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80063ae:	f006 fcba 	bl	800cd26 <lv_obj_get_child_cnt>
 80063b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        for(i = 0; i < child_cnt; i++) {
 80063b4:	2300      	movs	r3, #0
 80063b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80063b8:	e00d      	b.n	80063d6 <lv_obj_event+0x4c4>
            lv_obj_t * child = obj->spec_attr->children[i];
 80063ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	63bb      	str	r3, [r7, #56]	; 0x38
            lv_obj_mark_layout_as_dirty(child);
 80063ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063cc:	f001 fd10 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 80063d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063d2:	3301      	adds	r3, #1
 80063d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80063d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063da:	429a      	cmp	r2, r3
 80063dc:	d3ed      	bcc.n	80063ba <lv_obj_event+0x4a8>
 80063de:	e058      	b.n	8006492 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_CHILD_CHANGED) {
 80063e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063e4:	2b22      	cmp	r3, #34	; 0x22
 80063e6:	d133      	bne.n	8006450 <lv_obj_event+0x53e>
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 80063e8:	2100      	movs	r1, #0
 80063ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80063ec:	f7fe fe2e 	bl	800504c <lv_obj_get_style_width>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 80063f6:	2100      	movs	r1, #0
 80063f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80063fa:	f7fe fe39 	bl	8005070 <lv_obj_get_style_height>
 80063fe:	4603      	mov	r3, r0
 8006400:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8006404:	2100      	movs	r1, #0
 8006406:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006408:	f7fe fe44 	bl	8005094 <lv_obj_get_style_align>
 800640c:	4603      	mov	r3, r0
 800640e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8006412:	2100      	movs	r1, #0
 8006414:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006416:	f7fe ff86 	bl	8005326 <lv_obj_get_style_layout>
 800641a:	4603      	mov	r3, r0
 800641c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8006420:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10f      	bne.n	8006448 <lv_obj_event+0x536>
 8006428:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <lv_obj_event+0x536>
 8006430:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006434:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8006438:	4293      	cmp	r3, r2
 800643a:	d005      	beq.n	8006448 <lv_obj_event+0x536>
 800643c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006440:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8006444:	4293      	cmp	r3, r2
 8006446:	d124      	bne.n	8006492 <lv_obj_event+0x580>
            lv_obj_mark_layout_as_dirty(obj);
 8006448:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800644a:	f001 fcd1 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
 800644e:	e020      	b.n	8006492 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8006450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006454:	2b13      	cmp	r3, #19
 8006456:	d10d      	bne.n	8006474 <lv_obj_event+0x562>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8006458:	2100      	movs	r1, #0
 800645a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800645c:	f000 ff75 	bl	800734a <lv_obj_calculate_ext_draw_size>
 8006460:	4603      	mov	r3, r0
 8006462:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_event_set_ext_draw_size(e, d);
 8006466:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800646a:	4619      	mov	r1, r3
 800646c:	6838      	ldr	r0, [r7, #0]
 800646e:	f7fe f86d 	bl	800454c <lv_event_set_ext_draw_size>
 8006472:	e00e      	b.n	8006492 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8006474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006478:	2b15      	cmp	r3, #21
 800647a:	d007      	beq.n	800648c <lv_obj_event+0x57a>
 800647c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006480:	2b18      	cmp	r3, #24
 8006482:	d003      	beq.n	800648c <lv_obj_event+0x57a>
 8006484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006488:	2b12      	cmp	r3, #18
 800648a:	d102      	bne.n	8006492 <lv_obj_event+0x580>
        lv_obj_draw(e);
 800648c:	6838      	ldr	r0, [r7, #0]
 800648e:	f7ff f9b1 	bl	80057f4 <lv_obj_draw>
    }
}
 8006492:	376c      	adds	r7, #108	; 0x6c
 8006494:	46bd      	mov	sp, r7
 8006496:	bd90      	pop	{r4, r7, pc}

08006498 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b094      	sub	sp, #80	; 0x50
 800649c:	af02      	add	r7, sp, #8
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	807b      	strh	r3, [r7, #2]
    if(obj->state == new_state) return;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8c1b      	ldrh	r3, [r3, #32]
 80064a8:	887a      	ldrh	r2, [r7, #2]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	f000 815a 	beq.w	8006764 <lv_obj_set_state+0x2cc>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8c1b      	ldrh	r3, [r3, #32]
 80064b4:	86fb      	strh	r3, [r7, #54]	; 0x36
    obj->state = new_state;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	887a      	ldrh	r2, [r7, #2]
 80064ba:	841a      	strh	r2, [r3, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 80064bc:	887a      	ldrh	r2, [r7, #2]
 80064be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f005 fcfa 	bl	800bebc <_lv_obj_style_state_compare>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 80064ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8148 	beq.w	8006768 <lv_obj_set_state+0x2d0>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 80064d8:	f44f 7020 	mov.w	r0, #640	; 0x280
 80064dc:	f01a fa2a 	bl	8020934 <lv_mem_buf_get>
 80064e0:	6338      	str	r0, [r7, #48]	; 0x30
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 80064e2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80064e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064e8:	f01a fdce 	bl	8021088 <lv_memset_00>
    uint32_t tsi = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80064f0:	2300      	movs	r3, #0
 80064f2:	643b      	str	r3, [r7, #64]	; 0x40
 80064f4:	e0e0      	b.n	80066b8 <lv_obj_set_state+0x220>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4413      	add	r3, r2
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006512:	4618      	mov	r0, r3
 8006514:	f005 fec8 	bl	800c2a8 <lv_obj_style_get_selector_state>
 8006518:	4603      	mov	r3, r0
 800651a:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	4413      	add	r3, r2
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800652c:	4618      	mov	r0, r3
 800652e:	f005 fec7 	bl	800c2c0 <lv_obj_style_get_selector_part>
 8006532:	6278      	str	r0, [r7, #36]	; 0x24
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8006534:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006536:	887b      	ldrh	r3, [r7, #2]
 8006538:	43db      	mvns	r3, r3
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 80b3 	bne.w	80066a8 <lv_obj_set_state+0x210>
        if(obj_style->is_trans) continue;
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	79db      	ldrb	r3, [r3, #7]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 80ad 	bne.w	80066ac <lv_obj_set_state+0x214>

        lv_style_value_t v;
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f107 020c 	add.w	r2, r7, #12
 800655a:	2166      	movs	r1, #102	; 0x66
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe fca2 	bl	8004ea6 <lv_style_get_prop_inlined>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	f040 80a3 	bne.w	80066b0 <lv_obj_set_state+0x218>
        const lv_style_transition_dsc_t * tr = v.ptr;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	623b      	str	r3, [r7, #32]

        /*Add the props to the set if not added yet or added but with smaller weight*/
        uint32_t j;
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 800656e:	2300      	movs	r3, #0
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006572:	e08c      	b.n	800668e <lv_obj_set_state+0x1f6>
            uint32_t t;
            for(t = 0; t < tsi; t++) {
 8006574:	2300      	movs	r3, #0
 8006576:	63bb      	str	r3, [r7, #56]	; 0x38
 8006578:	e02e      	b.n	80065d8 <lv_obj_set_state+0x140>
                lv_style_selector_t selector = ts[t].selector;
 800657a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	461a      	mov	r2, r3
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	4413      	add	r3, r2
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	61fb      	str	r3, [r7, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 800658e:	69f8      	ldr	r0, [r7, #28]
 8006590:	f005 fe8a 	bl	800c2a8 <lv_obj_style_get_selector_state>
 8006594:	4603      	mov	r3, r0
 8006596:	837b      	strh	r3, [r7, #26]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8006598:	69f8      	ldr	r0, [r7, #28]
 800659a:	f005 fe91 	bl	800c2c0 <lv_obj_style_get_selector_part>
 800659e:	6178      	str	r0, [r7, #20]
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 80065a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	461a      	mov	r2, r3
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	4413      	add	r3, r2
 80065b0:	891a      	ldrh	r2, [r3, #8]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	440b      	add	r3, r1
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d107      	bne.n	80065d2 <lv_obj_set_state+0x13a>
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d103      	bne.n	80065d2 <lv_obj_set_state+0x13a>
 80065ca:	8b7a      	ldrh	r2, [r7, #26]
 80065cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d207      	bcs.n	80065e2 <lv_obj_set_state+0x14a>
            for(t = 0; t < tsi; t++) {
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	3301      	adds	r3, #1
 80065d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065dc:	429a      	cmp	r2, r3
 80065de:	d3cc      	bcc.n	800657a <lv_obj_set_state+0xe2>
 80065e0:	e000      	b.n	80065e4 <lv_obj_set_state+0x14c>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 80065e2:	bf00      	nop
            }

            /*If not found  add it*/
            if(t == tsi) {
 80065e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d14d      	bne.n	8006688 <lv_obj_set_state+0x1f0>
                ts[tsi].time = tr->time;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	68d9      	ldr	r1, [r3, #12]
 80065f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	461a      	mov	r2, r3
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	4413      	add	r3, r2
 8006600:	b28a      	uxth	r2, r1
 8006602:	801a      	strh	r2, [r3, #0]
                ts[tsi].delay = tr->delay;
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	6919      	ldr	r1, [r3, #16]
 8006608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	461a      	mov	r2, r3
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	4413      	add	r3, r2
 8006618:	b28a      	uxth	r2, r1
 800661a:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 800661c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	461a      	mov	r2, r3
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	4413      	add	r3, r2
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	6892      	ldr	r2, [r2, #8]
 8006630:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	18d1      	adds	r1, r2, r3
 800663c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	461a      	mov	r2, r3
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	4413      	add	r3, r2
 800664c:	880a      	ldrh	r2, [r1, #0]
 800664e:	811a      	strh	r2, [r3, #8]
#if LV_USE_USER_DATA
                ts[tsi].user_data = tr->user_data;
 8006650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	461a      	mov	r2, r3
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	4413      	add	r3, r2
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	6852      	ldr	r2, [r2, #4]
 8006664:	611a      	str	r2, [r3, #16]
#endif
                ts[tsi].selector = obj_style->selector;
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800666e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	461a      	mov	r2, r3
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	4413      	add	r3, r2
 800667e:	460a      	mov	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
                tsi++;
 8006682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006684:	3301      	adds	r3, #1
 8006686:	647b      	str	r3, [r7, #68]	; 0x44
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8006688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668a:	3301      	adds	r3, #1
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <lv_obj_set_state+0x21a>
 800669e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a0:	2b1f      	cmp	r3, #31
 80066a2:	f67f af67 	bls.w	8006574 <lv_obj_set_state+0xdc>
 80066a6:	e004      	b.n	80066b2 <lv_obj_set_state+0x21a>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80066a8:	bf00      	nop
 80066aa:	e002      	b.n	80066b2 <lv_obj_set_state+0x21a>
        if(obj_style->is_trans) continue;
 80066ac:	bf00      	nop
 80066ae:	e000      	b.n	80066b2 <lv_obj_set_state+0x21a>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 80066b0:	bf00      	nop
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80066b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b4:	3301      	adds	r3, #1
 80066b6:	643b      	str	r3, [r7, #64]	; 0x40
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80066bc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d203      	bcs.n	80066d2 <lv_obj_set_state+0x23a>
 80066ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066cc:	2b1f      	cmp	r3, #31
 80066ce:	f67f af12 	bls.w	80064f6 <lv_obj_set_state+0x5e>
            }
        }
    }

    for(i = 0; i < tsi; i++) {
 80066d2:	2300      	movs	r3, #0
 80066d4:	643b      	str	r3, [r7, #64]	; 0x40
 80066d6:	e01f      	b.n	8006718 <lv_obj_set_state+0x280>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 80066d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	461a      	mov	r2, r3
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	4413      	add	r3, r2
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f005 fde8 	bl	800c2c0 <lv_obj_style_get_selector_part>
 80066f0:	6138      	str	r0, [r7, #16]
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 80066f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	461a      	mov	r2, r3
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	4413      	add	r3, r2
 8006702:	8879      	ldrh	r1, [r7, #2]
 8006704:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	460b      	mov	r3, r1
 800670a:	6939      	ldr	r1, [r7, #16]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f005 fa8f 	bl	800bc30 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 8006712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006714:	3301      	adds	r3, #1
 8006716:	643b      	str	r3, [r7, #64]	; 0x40
 8006718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800671a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800671c:	429a      	cmp	r2, r3
 800671e:	d3db      	bcc.n	80066d8 <lv_obj_set_state+0x240>
    }

    lv_mem_buf_release(ts);
 8006720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006722:	f01a f9b3 	bl	8020a8c <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8006726:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800672a:	2b01      	cmp	r3, #1
 800672c:	d103      	bne.n	8006736 <lv_obj_set_state+0x29e>
        lv_obj_invalidate(obj);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 f98b 	bl	8008a4a <lv_obj_invalidate>
 8006734:	e019      	b.n	800676a <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8006736:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800673a:	2b03      	cmp	r3, #3
 800673c:	d107      	bne.n	800674e <lv_obj_set_state+0x2b6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800673e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006742:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f005 f91e 	bl	800b988 <lv_obj_refresh_style>
 800674c:	e00d      	b.n	800676a <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 800674e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006752:	2b02      	cmp	r3, #2
 8006754:	d109      	bne.n	800676a <lv_obj_set_state+0x2d2>
        lv_obj_invalidate(obj);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f002 f977 	bl	8008a4a <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fea2 	bl	80074a6 <lv_obj_refresh_ext_draw_size>
 8006762:	e002      	b.n	800676a <lv_obj_set_state+0x2d2>
    if(obj->state == new_state) return;
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <lv_obj_set_state+0x2d2>
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8006768:	bf00      	nop
    }
}
 800676a:	3748      	adds	r7, #72	; 0x48
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <lv_obj_class_create_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
    LV_TRACE_OBJ_CREATE("Creating object with %p class on %p parent", (void *)class_p, (void *)parent);
    uint32_t s = get_instance_size(class_p);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f96e 	bl	8006a5c <get_instance_size>
 8006780:	6178      	str	r0, [r7, #20]
    lv_obj_t * obj = lv_mem_alloc(s);
 8006782:	6978      	ldr	r0, [r7, #20]
 8006784:	f01a f84c 	bl	8020820 <lv_mem_alloc>
 8006788:	6138      	str	r0, [r7, #16]
    if(obj == NULL) return NULL;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <lv_obj_class_create_obj+0x24>
 8006790:	2300      	movs	r3, #0
 8006792:	e09e      	b.n	80068d2 <lv_obj_class_create_obj+0x162>
    lv_memset_00(obj, s);
 8006794:	6979      	ldr	r1, [r7, #20]
 8006796:	6938      	ldr	r0, [r7, #16]
 8006798:	f01a fc76 	bl	8021088 <lv_memset_00>
    obj->class_p = class_p;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
    obj->parent = parent;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	605a      	str	r2, [r3, #4]

    /*Create a screen*/
    if(parent == NULL) {
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d153      	bne.n	8006856 <lv_obj_class_create_obj+0xe6>
        LV_TRACE_OBJ_CREATE("creating a screen");
        lv_disp_t * disp = lv_disp_get_default();
 80067ae:	f018 f83f 	bl	801e830 <lv_disp_get_default>
 80067b2:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <lv_obj_class_create_obj+0x54>
            LV_LOG_WARN("No display created yet. No place to assign the new screen");
            lv_mem_free(obj);
 80067ba:	6938      	ldr	r0, [r7, #16]
 80067bc:	f01a f860 	bl	8020880 <lv_mem_free>
            return NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e086      	b.n	80068d2 <lv_obj_class_create_obj+0x162>
        }

        if(disp->screens == NULL) {
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10d      	bne.n	80067e8 <lv_obj_class_create_obj+0x78>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 80067cc:	2004      	movs	r0, #4
 80067ce:	f01a f827 	bl	8020820 <lv_mem_alloc>
 80067d2:	4602      	mov	r2, r0
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	60da      	str	r2, [r3, #12]
            disp->screens[0] = obj;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	601a      	str	r2, [r3, #0]
            disp->screen_cnt = 1;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24
 80067e6:	e01b      	b.n	8006820 <lv_obj_class_create_obj+0xb0>
        }
        else {
            disp->screen_cnt++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	625a      	str	r2, [r3, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f01a f86c 	bl	80208dc <lv_mem_realloc>
 8006804:	4602      	mov	r2, r0
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	60da      	str	r2, [r3, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006812:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006816:	440b      	add	r3, r1
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	601a      	str	r2, [r3, #0]
        }

        /*Set coordinates to full screen size*/
        obj->coords.x1 = 0;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2200      	movs	r2, #0
 8006824:	829a      	strh	r2, [r3, #20]
        obj->coords.y1 = 0;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2200      	movs	r2, #0
 800682a:	82da      	strh	r2, [r3, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 800682c:	2000      	movs	r0, #0
 800682e:	f018 f80b 	bl	801e848 <lv_disp_get_hor_res>
 8006832:	4603      	mov	r3, r0
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	b21a      	sxth	r2, r3
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	831a      	strh	r2, [r3, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8006840:	2000      	movs	r0, #0
 8006842:	f018 f827 	bl	801e894 <lv_disp_get_ver_res>
 8006846:	4603      	mov	r3, r0
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29b      	uxth	r3, r3
 800684e:	b21a      	sxth	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	835a      	strh	r2, [r3, #26]
 8006854:	e03c      	b.n	80068d0 <lv_obj_class_create_obj+0x160>
    }
    /*Create a normal object*/
    else {
        LV_TRACE_OBJ_CREATE("creating normal object");
        LV_ASSERT_OBJ(parent, MY_CLASS);
        if(parent->spec_attr == NULL) {
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d102      	bne.n	8006864 <lv_obj_class_create_obj+0xf4>
            lv_obj_allocate_spec_attr(parent);
 800685e:	6838      	ldr	r0, [r7, #0]
 8006860:	f7fe feb4 	bl	80055cc <lv_obj_allocate_spec_attr>
        }

        if(parent->spec_attr->children == NULL) {
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d110      	bne.n	8006890 <lv_obj_class_create_obj+0x120>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	689c      	ldr	r4, [r3, #8]
 8006872:	2004      	movs	r0, #4
 8006874:	f019 ffd4 	bl	8020820 <lv_mem_alloc>
 8006878:	4603      	mov	r3, r0
 800687a:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[0] = obj;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	601a      	str	r2, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2201      	movs	r2, #1
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	e01f      	b.n	80068d0 <lv_obj_class_create_obj+0x160>
        }
        else {
            parent->spec_attr->child_cnt++;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	3201      	adds	r2, #1
 8006898:	605a      	str	r2, [r3, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	681a      	ldr	r2, [r3, #0]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	0099      	lsls	r1, r3, #2
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689c      	ldr	r4, [r3, #8]
 80068ac:	4610      	mov	r0, r2
 80068ae:	f01a f815 	bl	80208dc <lv_mem_realloc>
 80068b2:	4603      	mov	r3, r0
 80068b4:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	6859      	ldr	r1, [r3, #4]
 80068c2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80068c6:	440b      	add	r3, r1
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	601a      	str	r2, [r3, #0]
        }
    }

    return obj;
 80068d0:	693b      	ldr	r3, [r7, #16]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd90      	pop	{r4, r7, pc}

080068da <lv_obj_class_init_obj>:

void lv_obj_class_init_obj(lv_obj_t * obj)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
    lv_obj_mark_layout_as_dirty(obj);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fa84 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 80068e8:	2000      	movs	r0, #0
 80068ea:	f005 f917 	bl	800bb1c <lv_obj_enable_style_refresh>

    lv_theme_apply(obj);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f008 f90a 	bl	800eb08 <lv_theme_apply>
    lv_obj_construct(obj);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f889 	bl	8006a0c <lv_obj_construct>

    lv_obj_enable_style_refresh(true);
 80068fa:	2001      	movs	r0, #1
 80068fc:	f005 f90e 	bl	800bb1c <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8006900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006904:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f005 f83d 	bl	800b988 <lv_obj_refresh_style>

    lv_obj_refresh_self_size(obj);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fbce 	bl	80080b0 <lv_obj_refresh_self_size>

    lv_group_t * def_group = lv_group_get_default();
 8006914:	f7fd ffbe 	bl	8004894 <lv_group_get_default>
 8006918:	60f8      	str	r0, [r7, #12]
    if(def_group && lv_obj_is_group_def(obj)) {
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d009      	beq.n	8006934 <lv_obj_class_init_obj+0x5a>
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f849 	bl	80069b8 <lv_obj_is_group_def>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <lv_obj_class_init_obj+0x5a>
        lv_group_add_obj(def_group, obj);
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7fd ffbc 	bl	80048ac <lv_group_add_obj>
    }

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f006 f9e5 	bl	800cd04 <lv_obj_get_parent>
 800693a:	60b8      	str	r0, [r7, #8]
    if(parent) {
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <lv_obj_class_init_obj+0x82>
        /*Call the ancestor's event handler to the parent to notify it about the new child.
         *Also triggers layout update*/
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	2122      	movs	r1, #34	; 0x22
 8006946:	68b8      	ldr	r0, [r7, #8]
 8006948:	f7fd fcb2 	bl	80042b0 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	2123      	movs	r1, #35	; 0x23
 8006950:	68b8      	ldr	r0, [r7, #8]
 8006952:	f7fd fcad 	bl	80042b0 <lv_event_send>

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(obj);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f002 f877 	bl	8008a4a <lv_obj_invalidate>
    }
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <lv_obj_is_editable>:
        _lv_obj_destruct(obj);
    }
}

bool lv_obj_is_editable(lv_obj_t * obj)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60fb      	str	r3, [r7, #12]

    /*Find a base in which editable is set*/
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8006972:	e002      	b.n	800697a <lv_obj_is_editable+0x16>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <lv_obj_is_editable+0x2a>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	7e1b      	ldrb	r3, [r3, #24]
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f2      	beq.n	8006974 <lv_obj_is_editable+0x10>

    if(class_p == NULL) return false;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <lv_obj_is_editable+0x34>
 8006994:	2300      	movs	r3, #0
 8006996:	e009      	b.n	80069ac <lv_obj_is_editable+0x48>

    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	7e1b      	ldrb	r3, [r3, #24]
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	bf0c      	ite	eq
 80069a6:	2301      	moveq	r3, #1
 80069a8:	2300      	movne	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <lv_obj_is_group_def>:

bool lv_obj_is_group_def(lv_obj_t * obj)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60fb      	str	r3, [r7, #12]

    /*Find a base in which group_def is set*/
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 80069c6:	e002      	b.n	80069ce <lv_obj_is_group_def+0x16>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <lv_obj_is_group_def+0x2a>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	7e1b      	ldrb	r3, [r3, #24]
 80069d8:	f003 030c 	and.w	r3, r3, #12
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f2      	beq.n	80069c8 <lv_obj_is_group_def+0x10>

    if(class_p == NULL) return false;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <lv_obj_is_group_def+0x34>
 80069e8:	2300      	movs	r3, #0
 80069ea:	e009      	b.n	8006a00 <lv_obj_is_group_def+0x48>

    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	7e1b      	ldrb	r3, [r3, #24]
 80069f0:	f003 030c 	and.w	r3, r3, #12
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	bf0c      	ite	eq
 80069fa:	2301      	moveq	r3, #1
 80069fc:	2300      	movne	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * original_class_p = obj->class_p;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]

    if(obj->class_p->base_class) {
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <lv_obj_construct+0x28>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff ffec 	bl	8006a0c <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	601a      	str	r2, [r3, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <lv_obj_construct+0x48>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <get_instance_size>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]
    while(base && base->instance_size == 0) base = base->base_class;
 8006a68:	e002      	b.n	8006a70 <get_instance_size+0x14>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <get_instance_size+0x26>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <get_instance_size+0x48>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f3      	beq.n	8006a6a <get_instance_size+0xe>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <get_instance_size+0x30>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e004      	b.n	8006a96 <get_instance_size+0x3a>

    return base->instance_size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f3c3 130f 	ubfx	r3, r3, #4, #16
 8006a94:	b29b      	uxth	r3, r3
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	000ffff0 	.word	0x000ffff0

08006aa8 <lv_obj_get_style_transform_width>:
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8006ab2:	2268      	movs	r2, #104	; 0x68
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f005 f840 	bl	800bb3c <lv_obj_get_style_prop>
 8006abc:	4603      	mov	r3, r0
 8006abe:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	b21b      	sxth	r3, r3
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <lv_obj_get_style_transform_height>:
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8006ad6:	2269      	movs	r2, #105	; 0x69
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f005 f82e 	bl	800bb3c <lv_obj_get_style_prop>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	b21b      	sxth	r3, r3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <lv_obj_get_style_bg_color_filtered>:
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 8006afa:	2220      	movs	r2, #32
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f005 f81c 	bl	800bb3c <lv_obj_get_style_prop>
 8006b04:	4603      	mov	r3, r0
 8006b06:	461a      	mov	r2, r3
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f005 f9aa 	bl	800be64 <_lv_obj_style_apply_color_filter>
 8006b10:	4603      	mov	r3, r0
 8006b12:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006b14:	7b3b      	ldrb	r3, [r7, #12]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <lv_obj_get_style_bg_opa>:
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8006b28:	2221      	movs	r2, #33	; 0x21
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f005 f805 	bl	800bb3c <lv_obj_get_style_prop>
 8006b32:	4603      	mov	r3, r0
 8006b34:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	b2db      	uxtb	r3, r3
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <lv_obj_get_style_bg_grad_color_filtered>:
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 8006b4c:	2222      	movs	r2, #34	; 0x22
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f004 fff3 	bl	800bb3c <lv_obj_get_style_prop>
 8006b56:	4603      	mov	r3, r0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f005 f981 	bl	800be64 <_lv_obj_style_apply_color_filter>
 8006b62:	4603      	mov	r3, r0
 8006b64:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006b66:	7b3b      	ldrb	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <lv_obj_get_style_bg_grad_dir>:
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8006b7a:	2223      	movs	r2, #35	; 0x23
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f004 ffdc 	bl	800bb3c <lv_obj_get_style_prop>
 8006b84:	4603      	mov	r3, r0
 8006b86:	60fb      	str	r3, [r7, #12]
    return (lv_grad_dir_t)v.num;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	b2db      	uxtb	r3, r3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <lv_obj_get_style_bg_main_stop>:
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8006b9e:	2224      	movs	r2, #36	; 0x24
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f004 ffca 	bl	800bb3c <lv_obj_get_style_prop>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	b21b      	sxth	r3, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <lv_obj_get_style_bg_grad_stop>:
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 8006bc2:	2225      	movs	r2, #37	; 0x25
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f004 ffb8 	bl	800bb3c <lv_obj_get_style_prop>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	b21b      	sxth	r3, r3
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <lv_obj_get_style_bg_grad>:
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 8006be6:	2226      	movs	r2, #38	; 0x26
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f004 ffa6 	bl	800bb3c <lv_obj_get_style_prop>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	60fb      	str	r3, [r7, #12]
    return (const lv_grad_dsc_t *)v.ptr;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <lv_obj_get_style_bg_dither_mode>:
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 8006c08:	2227      	movs	r2, #39	; 0x27
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f004 ff95 	bl	800bb3c <lv_obj_get_style_prop>
 8006c12:	4603      	mov	r3, r0
 8006c14:	60fb      	str	r3, [r7, #12]
    return (lv_dither_mode_t)v.num;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	b2db      	uxtb	r3, r3
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <lv_obj_get_style_bg_img_src>:
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8006c2c:	2228      	movs	r2, #40	; 0x28
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f004 ff83 	bl	800bb3c <lv_obj_get_style_prop>
 8006c36:	4603      	mov	r3, r0
 8006c38:	60fb      	str	r3, [r7, #12]
    return (const void *)v.ptr;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <lv_obj_get_style_bg_img_opa>:
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8006c4e:	2229      	movs	r2, #41	; 0x29
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f004 ff72 	bl	800bb3c <lv_obj_get_style_prop>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	b2db      	uxtb	r3, r3
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <lv_obj_get_style_bg_img_recolor_filtered>:
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 8006c72:	222a      	movs	r2, #42	; 0x2a
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f004 ff60 	bl	800bb3c <lv_obj_get_style_prop>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f005 f8ee 	bl	800be64 <_lv_obj_style_apply_color_filter>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006c8c:	7b3b      	ldrb	r3, [r7, #12]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <lv_obj_get_style_bg_img_recolor_opa>:
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8006ca0:	222b      	movs	r2, #43	; 0x2b
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f004 ff49 	bl	800bb3c <lv_obj_get_style_prop>
 8006caa:	4603      	mov	r3, r0
 8006cac:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	b2db      	uxtb	r3, r3
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <lv_obj_get_style_bg_img_tiled>:
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 8006cc4:	222c      	movs	r2, #44	; 0x2c
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f004 ff37 	bl	800bb3c <lv_obj_get_style_prop>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bf14      	ite	ne
 8006cd8:	2301      	movne	r3, #1
 8006cda:	2300      	moveq	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <lv_obj_get_style_border_color_filtered>:
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 8006cf0:	2230      	movs	r2, #48	; 0x30
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f004 ff21 	bl	800bb3c <lv_obj_get_style_prop>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f005 f8af 	bl	800be64 <_lv_obj_style_apply_color_filter>
 8006d06:	4603      	mov	r3, r0
 8006d08:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006d0a:	7b3b      	ldrb	r3, [r7, #12]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <lv_obj_get_style_border_opa>:
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8006d1e:	2231      	movs	r2, #49	; 0x31
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f004 ff0a 	bl	800bb3c <lv_obj_get_style_prop>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	b2db      	uxtb	r3, r3
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <lv_obj_get_style_border_width>:
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006d42:	2232      	movs	r2, #50	; 0x32
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f004 fef8 	bl	800bb3c <lv_obj_get_style_prop>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	b21b      	sxth	r3, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <lv_obj_get_style_border_side>:
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8006d66:	2233      	movs	r2, #51	; 0x33
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f004 fee6 	bl	800bb3c <lv_obj_get_style_prop>
 8006d70:	4603      	mov	r3, r0
 8006d72:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	b2db      	uxtb	r3, r3
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <lv_obj_get_style_outline_width>:
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8006d8a:	2235      	movs	r2, #53	; 0x35
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f004 fed4 	bl	800bb3c <lv_obj_get_style_prop>
 8006d94:	4603      	mov	r3, r0
 8006d96:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	b21b      	sxth	r3, r3
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <lv_obj_get_style_outline_color_filtered>:
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 8006dae:	2236      	movs	r2, #54	; 0x36
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f004 fec2 	bl	800bb3c <lv_obj_get_style_prop>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f005 f850 	bl	800be64 <_lv_obj_style_apply_color_filter>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006dc8:	7b3b      	ldrb	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <lv_obj_get_style_outline_opa>:
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8006ddc:	2237      	movs	r2, #55	; 0x37
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f004 feab 	bl	800bb3c <lv_obj_get_style_prop>
 8006de6:	4603      	mov	r3, r0
 8006de8:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	b2db      	uxtb	r3, r3
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <lv_obj_get_style_outline_pad>:
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8006e00:	2238      	movs	r2, #56	; 0x38
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f004 fe99 	bl	800bb3c <lv_obj_get_style_prop>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	b21b      	sxth	r3, r3
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <lv_obj_get_style_shadow_width>:
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8006e24:	2240      	movs	r2, #64	; 0x40
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f004 fe87 	bl	800bb3c <lv_obj_get_style_prop>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	b21b      	sxth	r3, r3
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <lv_obj_get_style_shadow_ofs_x>:
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8006e48:	2241      	movs	r2, #65	; 0x41
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f004 fe75 	bl	800bb3c <lv_obj_get_style_prop>
 8006e52:	4603      	mov	r3, r0
 8006e54:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	b21b      	sxth	r3, r3
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <lv_obj_get_style_shadow_ofs_y>:
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8006e6c:	2242      	movs	r2, #66	; 0x42
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f004 fe63 	bl	800bb3c <lv_obj_get_style_prop>
 8006e76:	4603      	mov	r3, r0
 8006e78:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	b21b      	sxth	r3, r3
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <lv_obj_get_style_shadow_spread>:
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8006e90:	2243      	movs	r2, #67	; 0x43
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f004 fe51 	bl	800bb3c <lv_obj_get_style_prop>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	b21b      	sxth	r3, r3
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <lv_obj_get_style_shadow_color_filtered>:
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 8006eb4:	2244      	movs	r2, #68	; 0x44
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f004 fe3f 	bl	800bb3c <lv_obj_get_style_prop>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f004 ffcd 	bl	800be64 <_lv_obj_style_apply_color_filter>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006ece:	7b3b      	ldrb	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <lv_obj_get_style_shadow_opa>:
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8006ee2:	2245      	movs	r2, #69	; 0x45
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f004 fe28 	bl	800bb3c <lv_obj_get_style_prop>
 8006eec:	4603      	mov	r3, r0
 8006eee:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	b2db      	uxtb	r3, r3
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <lv_obj_get_style_text_color_filtered>:
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8006f06:	2255      	movs	r2, #85	; 0x55
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f004 fe16 	bl	800bb3c <lv_obj_get_style_prop>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461a      	mov	r2, r3
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f004 ffa4 	bl	800be64 <_lv_obj_style_apply_color_filter>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	60fb      	str	r3, [r7, #12]
    return v.color;
 8006f20:	7b3b      	ldrb	r3, [r7, #12]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <lv_obj_get_style_text_font>:
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8006f34:	2257      	movs	r2, #87	; 0x57
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f004 fdff 	bl	800bb3c <lv_obj_get_style_prop>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 8006f42:	68fb      	ldr	r3, [r7, #12]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <lv_obj_get_style_radius>:
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8006f56:	220b      	movs	r2, #11
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f004 fdee 	bl	800bb3c <lv_obj_get_style_prop>
 8006f60:	4603      	mov	r3, r0
 8006f62:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	b21b      	sxth	r3, r3
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <lv_obj_get_style_opa>:
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8006f7a:	2260      	movs	r2, #96	; 0x60
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f004 fddc 	bl	800bb3c <lv_obj_get_style_prop>
 8006f84:	4603      	mov	r3, r0
 8006f86:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	b2db      	uxtb	r3, r3
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <lv_obj_get_style_blend_mode>:
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8006f9e:	2267      	movs	r2, #103	; 0x67
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f004 fdca 	bl	800bb3c <lv_obj_get_style_prop>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	b2db      	uxtb	r3, r3
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
    lv_opa_t opa = LV_OPA_COVER;
 8006fc4:	23ff      	movs	r3, #255	; 0xff
 8006fc6:	75fb      	strb	r3, [r7, #23]
    if(part != LV_PART_MAIN) {
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01a      	beq.n	8007004 <lv_obj_init_draw_rect_dsc+0x4c>
        opa = lv_obj_get_style_opa(obj, part);
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7ff ffcd 	bl	8006f70 <lv_obj_get_style_opa>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d811      	bhi.n	8007004 <lv_obj_init_draw_rect_dsc+0x4c>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            return;
 8007002:	e19f      	b.n	8007344 <lv_obj_init_draw_rect_dsc+0x38c>
        }
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d007      	beq.n	800701a <lv_obj_init_draw_rect_dsc+0x62>
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff ffc1 	bl	8006f94 <lv_obj_get_style_blend_mode>
 8007012:	4603      	mov	r3, r0
 8007014:	461a      	mov	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	709a      	strb	r2, [r3, #2]

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff ff95 	bl	8006f4c <lv_obj_get_style_radius>
 8007022:	4603      	mov	r3, r0
 8007024:	461a      	mov	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	801a      	strh	r2, [r3, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	78db      	ldrb	r3, [r3, #3]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d065      	beq.n	80070fe <lv_obj_init_draw_rect_dsc+0x146>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff fd72 	bl	8006b1e <lv_obj_get_style_bg_opa>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	70da      	strb	r2, [r3, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	78db      	ldrb	r3, [r3, #3]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d959      	bls.n	80070fe <lv_obj_init_draw_rect_dsc+0x146>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 800704a:	687c      	ldr	r4, [r7, #4]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7ff fd4e 	bl	8006af0 <lv_obj_get_style_bg_color_filtered>
 8007054:	7120      	strb	r0, [r4, #4]
            const lv_grad_dsc_t * grad = lv_obj_get_style_bg_grad(obj, part);
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7ff fdbf 	bl	8006bdc <lv_obj_get_style_bg_grad>
 800705e:	6138      	str	r0, [r7, #16]
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00e      	beq.n	8007084 <lv_obj_init_draw_rect_dsc+0xcc>
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	795b      	ldrb	r3, [r3, #5]
 800706a:	f003 0307 	and.w	r3, r3, #7
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <lv_obj_init_draw_rect_dsc+0xcc>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3305      	adds	r3, #5
 8007078:	2206      	movs	r2, #6
 800707a:	6939      	ldr	r1, [r7, #16]
 800707c:	4618      	mov	r0, r3
 800707e:	f019 fd5d 	bl	8020b3c <lv_memcpy>
 8007082:	e03c      	b.n	80070fe <lv_obj_init_draw_rect_dsc+0x146>
            }
            else {
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff fd72 	bl	8006b70 <lv_obj_get_style_bg_grad_dir>
 800708c:	4603      	mov	r3, r0
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	b2d9      	uxtb	r1, r3
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	7a93      	ldrb	r3, [r2, #10]
 8007098:	f361 0302 	bfi	r3, r1, #0, #3
 800709c:	7293      	strb	r3, [r2, #10]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	7a9b      	ldrb	r3, [r3, #10]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01b      	beq.n	80070e4 <lv_obj_init_draw_rect_dsc+0x12c>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 80070ac:	687c      	ldr	r4, [r7, #4]
 80070ae:	68b9      	ldr	r1, [r7, #8]
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7ff fd1d 	bl	8006af0 <lv_obj_get_style_bg_color_filtered>
 80070b6:	7160      	strb	r0, [r4, #5]
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 80070b8:	687c      	ldr	r4, [r7, #4]
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7ff fd40 	bl	8006b42 <lv_obj_get_style_bg_grad_color_filtered>
 80070c2:	71e0      	strb	r0, [r4, #7]
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fd64 	bl	8006b94 <lv_obj_get_style_bg_main_stop>
 80070cc:	4603      	mov	r3, r0
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	719a      	strb	r2, [r3, #6]
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff fd6e 	bl	8006bb8 <lv_obj_get_style_bg_grad_stop>
 80070dc:	4603      	mov	r3, r0
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	721a      	strb	r2, [r3, #8]
                }
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff fd89 	bl	8006bfe <lv_obj_get_style_bg_dither_mode>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	b2d9      	uxtb	r1, r3
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7a93      	ldrb	r3, [r2, #10]
 80070f8:	f361 03c5 	bfi	r3, r1, #3, #3
 80070fc:	7293      	strb	r3, [r2, #10]
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 80070fe:	68b9      	ldr	r1, [r7, #8]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff fe19 	bl	8006d38 <lv_obj_get_style_border_width>
 8007106:	4603      	mov	r3, r0
 8007108:	461a      	mov	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	835a      	strh	r2, [r3, #26]
    if(draw_dsc->border_width) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d022      	beq.n	800715e <lv_obj_init_draw_rect_dsc+0x1a6>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	7f1b      	ldrb	r3, [r3, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01e      	beq.n	800715e <lv_obj_init_draw_rect_dsc+0x1a6>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff fdf6 	bl	8006d14 <lv_obj_get_style_border_opa>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7f1b      	ldrb	r3, [r3, #28]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d912      	bls.n	800715e <lv_obj_init_draw_rect_dsc+0x1a6>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7ff fe0e 	bl	8006d5c <lv_obj_get_style_border_side>
 8007140:	4603      	mov	r3, r0
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	b2d9      	uxtb	r1, r3
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	7f53      	ldrb	r3, [r2, #29]
 800714c:	f361 0345 	bfi	r3, r1, #1, #5
 8007150:	7753      	strb	r3, [r2, #29]
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8007152:	687c      	ldr	r4, [r7, #4]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fdc5 	bl	8006ce6 <lv_obj_get_style_border_color_filtered>
 800715c:	7620      	strb	r0, [r4, #24]
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff fe0d 	bl	8006d80 <lv_obj_get_style_outline_width>
 8007166:	4603      	mov	r3, r0
 8007168:	461a      	mov	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	841a      	strh	r2, [r3, #32]
    if(draw_dsc->outline_width) {
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d020      	beq.n	80071ba <lv_obj_init_draw_rect_dsc+0x202>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800717e:	2b00      	cmp	r3, #0
 8007180:	d01b      	beq.n	80071ba <lv_obj_init_draw_rect_dsc+0x202>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8007182:	68b9      	ldr	r1, [r7, #8]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fe24 	bl	8006dd2 <lv_obj_get_style_outline_opa>
 800718a:	4603      	mov	r3, r0
 800718c:	461a      	mov	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800719a:	2b02      	cmp	r3, #2
 800719c:	d90d      	bls.n	80071ba <lv_obj_init_draw_rect_dsc+0x202>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f7ff fe28 	bl	8006df6 <lv_obj_get_style_outline_pad>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461a      	mov	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	845a      	strh	r2, [r3, #34]	; 0x22
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 80071ae:	687c      	ldr	r4, [r7, #4]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fdf6 	bl	8006da4 <lv_obj_get_style_outline_color_filtered>
 80071b8:	77a0      	strb	r0, [r4, #30]
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7d5b      	ldrb	r3, [r3, #21]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d042      	beq.n	8007248 <lv_obj_init_draw_rect_dsc+0x290>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fd2c 	bl	8006c22 <lv_obj_get_style_bg_img_src>
 80071ca:	4602      	mov	r2, r0
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60da      	str	r2, [r3, #12]
        if(draw_dsc->bg_img_src) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d037      	beq.n	8007248 <lv_obj_init_draw_rect_dsc+0x290>
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fd32 	bl	8006c44 <lv_obj_get_style_bg_img_opa>
 80071e0:	4603      	mov	r3, r0
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	755a      	strb	r2, [r3, #21]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7d5b      	ldrb	r3, [r3, #21]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d92b      	bls.n	8007248 <lv_obj_init_draw_rect_dsc+0x290>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f007 fe32 	bl	800ee5e <lv_img_src_get_type>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d10d      	bne.n	800721c <lv_obj_init_draw_rect_dsc+0x264>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fe91 	bl	8006f2a <lv_obj_get_style_text_font>
 8007208:	4602      	mov	r2, r0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	611a      	str	r2, [r3, #16]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 800720e:	687c      	ldr	r4, [r7, #4]
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7ff fe72 	bl	8006efc <lv_obj_get_style_text_color_filtered>
 8007218:	7520      	strb	r0, [r4, #20]
 800721a:	e015      	b.n	8007248 <lv_obj_init_draw_rect_dsc+0x290>
                }
                else {
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 800721c:	687c      	ldr	r4, [r7, #4]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff fd21 	bl	8006c68 <lv_obj_get_style_bg_img_recolor_filtered>
 8007226:	7520      	strb	r0, [r4, #20]
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f7ff fd33 	bl	8006c96 <lv_obj_get_style_bg_img_recolor_opa>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	759a      	strb	r2, [r3, #22]
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7ff fd3d 	bl	8006cba <lv_obj_get_style_bg_img_tiled>
 8007240:	4603      	mov	r3, r0
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	75da      	strb	r2, [r3, #23]
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800724e:	2b00      	cmp	r3, #0
 8007250:	d03e      	beq.n	80072d0 <lv_obj_init_draw_rect_dsc+0x318>
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff fde0 	bl	8006e1a <lv_obj_get_style_shadow_width>
 800725a:	4603      	mov	r3, r0
 800725c:	461a      	mov	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	84da      	strh	r2, [r3, #38]	; 0x26
        if(draw_dsc->shadow_width) {
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8007268:	2b00      	cmp	r3, #0
 800726a:	d031      	beq.n	80072d0 <lv_obj_init_draw_rect_dsc+0x318>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007272:	2b02      	cmp	r3, #2
 8007274:	d92c      	bls.n	80072d0 <lv_obj_init_draw_rect_dsc+0x318>
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff fe2d 	bl	8006ed8 <lv_obj_get_style_shadow_opa>
 800727e:	4603      	mov	r3, r0
 8007280:	461a      	mov	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800728e:	2b02      	cmp	r3, #2
 8007290:	d91e      	bls.n	80072d0 <lv_obj_init_draw_rect_dsc+0x318>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff fdd2 	bl	8006e3e <lv_obj_get_style_shadow_ofs_x>
 800729a:	4603      	mov	r3, r0
 800729c:	461a      	mov	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	851a      	strh	r2, [r3, #40]	; 0x28
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fddc 	bl	8006e62 <lv_obj_get_style_shadow_ofs_y>
 80072aa:	4603      	mov	r3, r0
 80072ac:	461a      	mov	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	855a      	strh	r2, [r3, #42]	; 0x2a
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff fde6 	bl	8006e86 <lv_obj_get_style_shadow_spread>
 80072ba:	4603      	mov	r3, r0
 80072bc:	461a      	mov	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	859a      	strh	r2, [r3, #44]	; 0x2c
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 80072c2:	687c      	ldr	r4, [r7, #4]
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff fdef 	bl	8006eaa <lv_obj_get_style_shadow_color_filtered>
 80072cc:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d036      	beq.n	8007344 <lv_obj_init_draw_rect_dsc+0x38c>
        if(opa < LV_OPA_MAX) {
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	2bfc      	cmp	r3, #252	; 0xfc
 80072da:	d833      	bhi.n	8007344 <lv_obj_init_draw_rect_dsc+0x38c>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80072e4:	fb02 f303 	mul.w	r3, r2, r3
 80072e8:	121b      	asrs	r3, r3, #8
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	121b      	asrs	r3, r3, #8
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800730c:	fb02 f303 	mul.w	r3, r2, r3
 8007310:	121b      	asrs	r3, r3, #8
 8007312:	b2da      	uxtb	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007320:	fb02 f303 	mul.w	r3, r2, r3
 8007324:	121b      	asrs	r3, r3, #8
 8007326:	b2da      	uxtb	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007336:	fb02 f303 	mul.w	r3, r2, r3
 800733a:	121b      	asrs	r3, r3, #8
 800733c:	b2da      	uxtb	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }
}
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	bd90      	pop	{r4, r7, pc}

0800734a <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b088      	sub	sp, #32
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
    lv_coord_t s = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	83fb      	strh	r3, [r7, #30]

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fd5d 	bl	8006e1a <lv_obj_get_style_shadow_width>
 8007360:	4603      	mov	r3, r0
 8007362:	83bb      	strh	r3, [r7, #28]
    if(sh_width) {
 8007364:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d045      	beq.n	80073f8 <lv_obj_calculate_ext_draw_size+0xae>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fdb2 	bl	8006ed8 <lv_obj_get_style_shadow_opa>
 8007374:	4603      	mov	r3, r0
 8007376:	76fb      	strb	r3, [r7, #27]
        if(sh_opa > LV_OPA_MIN) {
 8007378:	7efb      	ldrb	r3, [r7, #27]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d93c      	bls.n	80073f8 <lv_obj_calculate_ext_draw_size+0xae>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 800737e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	da00      	bge.n	8007388 <lv_obj_calculate_ext_draw_size+0x3e>
 8007386:	3301      	adds	r3, #1
 8007388:	105b      	asrs	r3, r3, #1
 800738a:	b21b      	sxth	r3, r3
 800738c:	b29b      	uxth	r3, r3
 800738e:	3301      	adds	r3, #1
 8007390:	b29b      	uxth	r3, r3
 8007392:	83bb      	strh	r3, [r7, #28]
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff fd75 	bl	8006e86 <lv_obj_get_style_shadow_spread>
 800739c:	4603      	mov	r3, r0
 800739e:	b29a      	uxth	r2, r3
 80073a0:	8bbb      	ldrh	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	83bb      	strh	r3, [r7, #28]
            lv_coord_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fd47 	bl	8006e3e <lv_obj_get_style_shadow_ofs_x>
 80073b0:	4603      	mov	r3, r0
 80073b2:	833b      	strh	r3, [r7, #24]
            lv_coord_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fd53 	bl	8006e62 <lv_obj_get_style_shadow_ofs_y>
 80073bc:	4603      	mov	r3, r0
 80073be:	82fb      	strh	r3, [r7, #22]
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 80073c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	bfb8      	it	lt
 80073c8:	425b      	neglt	r3, r3
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfb8      	it	lt
 80073d4:	425b      	neglt	r3, r3
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4293      	cmp	r3, r2
 80073da:	bf38      	it	cc
 80073dc:	4613      	movcc	r3, r2
 80073de:	b29a      	uxth	r2, r3
 80073e0:	8bbb      	ldrh	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	83bb      	strh	r3, [r7, #28]
            s = LV_MAX(s, sh_width);
 80073e8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80073ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80073f0:	4293      	cmp	r3, r2
 80073f2:	bfb8      	it	lt
 80073f4:	4613      	movlt	r3, r2
 80073f6:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff fcc0 	bl	8006d80 <lv_obj_get_style_outline_width>
 8007400:	4603      	mov	r3, r0
 8007402:	82bb      	strh	r3, [r7, #20]
    if(outline_width) {
 8007404:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d019      	beq.n	8007440 <lv_obj_calculate_ext_draw_size+0xf6>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff fcdf 	bl	8006dd2 <lv_obj_get_style_outline_opa>
 8007414:	4603      	mov	r3, r0
 8007416:	74fb      	strb	r3, [r7, #19]
        if(outline_opa > LV_OPA_MIN) {
 8007418:	7cfb      	ldrb	r3, [r7, #19]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d910      	bls.n	8007440 <lv_obj_calculate_ext_draw_size+0xf6>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fce8 	bl	8006df6 <lv_obj_get_style_outline_pad>
 8007426:	4603      	mov	r3, r0
 8007428:	823b      	strh	r3, [r7, #16]
            s = LV_MAX(s, outline_pad + outline_width);
 800742a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800742e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007432:	441a      	add	r2, r3
 8007434:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007438:	4293      	cmp	r3, r2
 800743a:	bfb8      	it	lt
 800743c:	4613      	movlt	r3, r2
 800743e:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fb30 	bl	8006aa8 <lv_obj_get_style_transform_width>
 8007448:	4603      	mov	r3, r0
 800744a:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff fb3c 	bl	8006acc <lv_obj_get_style_transform_height>
 8007454:	4603      	mov	r3, r0
 8007456:	81bb      	strh	r3, [r7, #12]
    lv_coord_t wh = LV_MAX(w, h);
 8007458:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800745c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007460:	4293      	cmp	r3, r2
 8007462:	bfb8      	it	lt
 8007464:	4613      	movlt	r3, r2
 8007466:	817b      	strh	r3, [r7, #10]
    if(wh > 0) s += wh;
 8007468:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dd04      	ble.n	800747a <lv_obj_calculate_ext_draw_size+0x130>
 8007470:	8bfa      	ldrh	r2, [r7, #30]
 8007472:	897b      	ldrh	r3, [r7, #10]
 8007474:	4413      	add	r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	83fb      	strh	r3, [r7, #30]

    return s;
 800747a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8007490:	2148      	movs	r1, #72	; 0x48
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f019 fdf8 	bl	8021088 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	601a      	str	r2, [r3, #0]
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <lv_obj_refresh_ext_draw_size>:
    if(dsc->class_p == class_p && dsc->type == type) return true;
    else return false;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f837 	bl	8007522 <_lv_obj_get_ext_draw_size>
 80074b4:	4603      	mov	r3, r0
 80074b6:	81fb      	strh	r3, [r7, #14]
    lv_coord_t s_new = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	81bb      	strh	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 80074bc:	f107 030c 	add.w	r3, r7, #12
 80074c0:	461a      	mov	r2, r3
 80074c2:	2113      	movs	r1, #19
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fc fef3 	bl	80042b0 <lv_event_send>

    if(s_new != s_old) lv_obj_invalidate(obj);
 80074ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d002      	beq.n	80074dc <lv_obj_refresh_ext_draw_size+0x36>
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fab7 	bl	8008a4a <lv_obj_invalidate>

    /*Store the result if the special attrs already allocated*/
    if(obj->spec_attr) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <lv_obj_refresh_ext_draw_size+0x4a>
        obj->spec_attr->ext_draw_size = s_new;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80074ec:	82da      	strh	r2, [r3, #22]
 80074ee:	e00b      	b.n	8007508 <lv_obj_refresh_ext_draw_size+0x62>
    }
    /*Allocate spec. attrs. only if the result is not zero.
     *Zero is the default value if the spec. attr. are not defined.*/
    else if(s_new != 0) {
 80074f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <lv_obj_refresh_ext_draw_size+0x62>
        lv_obj_allocate_spec_attr(obj);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7fe f867 	bl	80055cc <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007506:	82da      	strh	r2, [r3, #22]
    }

    if(s_new != s_old) lv_obj_invalidate(obj);
 8007508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800750c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007510:	429a      	cmp	r2, r3
 8007512:	d002      	beq.n	800751a <lv_obj_refresh_ext_draw_size+0x74>
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 fa98 	bl	8008a4a <lv_obj_invalidate>
}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <_lv_obj_get_ext_draw_size>:

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <_lv_obj_get_ext_draw_size+0x1a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800753a:	e000      	b.n	800753e <_lv_obj_get_ext_draw_size+0x1c>
    else return 0;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d006      	beq.n	8007568 <_lv_obj_get_layer_type+0x1e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	7e9b      	ldrb	r3, [r3, #26]
 8007560:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8007564:	b2db      	uxtb	r3, r3
 8007566:	e000      	b.n	800756a <_lv_obj_get_layer_type+0x20>
    else return LV_LAYER_TYPE_NONE;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <lv_area_copy>:
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	80da      	strh	r2, [r3, #6]
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3301      	adds	r3, #1
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	b21b      	sxth	r3, r3
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3301      	adds	r3, #1
 8007600:	b29b      	uxth	r3, r3
 8007602:	b21b      	sxth	r3, r3
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <lv_obj_get_style_width>:
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800761a:	2201      	movs	r2, #1
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f004 fa8c 	bl	800bb3c <lv_obj_get_style_prop>
 8007624:	4603      	mov	r3, r0
 8007626:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	b21b      	sxth	r3, r3
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <lv_obj_get_style_min_width>:
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800763e:	2202      	movs	r2, #2
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f004 fa7a 	bl	800bb3c <lv_obj_get_style_prop>
 8007648:	4603      	mov	r3, r0
 800764a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	b21b      	sxth	r3, r3
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <lv_obj_get_style_max_width>:
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8007662:	2203      	movs	r2, #3
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f004 fa68 	bl	800bb3c <lv_obj_get_style_prop>
 800766c:	4603      	mov	r3, r0
 800766e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	b21b      	sxth	r3, r3
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <lv_obj_get_style_height>:
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8007686:	2204      	movs	r2, #4
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f004 fa56 	bl	800bb3c <lv_obj_get_style_prop>
 8007690:	4603      	mov	r3, r0
 8007692:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	b21b      	sxth	r3, r3
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <lv_obj_get_style_min_height>:
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80076aa:	2205      	movs	r2, #5
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f004 fa44 	bl	800bb3c <lv_obj_get_style_prop>
 80076b4:	4603      	mov	r3, r0
 80076b6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	b21b      	sxth	r3, r3
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <lv_obj_get_style_max_height>:
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 80076ce:	2206      	movs	r2, #6
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f004 fa32 	bl	800bb3c <lv_obj_get_style_prop>
 80076d8:	4603      	mov	r3, r0
 80076da:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	b21b      	sxth	r3, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <lv_obj_get_style_x>:
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80076f2:	2207      	movs	r2, #7
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f004 fa20 	bl	800bb3c <lv_obj_get_style_prop>
 80076fc:	4603      	mov	r3, r0
 80076fe:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	b21b      	sxth	r3, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <lv_obj_get_style_y>:
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8007716:	2208      	movs	r2, #8
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f004 fa0e 	bl	800bb3c <lv_obj_get_style_prop>
 8007720:	4603      	mov	r3, r0
 8007722:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	b21b      	sxth	r3, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <lv_obj_get_style_align>:
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800773a:	2209      	movs	r2, #9
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f004 f9fc 	bl	800bb3c <lv_obj_get_style_prop>
 8007744:	4603      	mov	r3, r0
 8007746:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	b2db      	uxtb	r3, r3
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <lv_obj_get_style_translate_x>:
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800775e:	226a      	movs	r2, #106	; 0x6a
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f004 f9ea 	bl	800bb3c <lv_obj_get_style_prop>
 8007768:	4603      	mov	r3, r0
 800776a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	b21b      	sxth	r3, r3
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <lv_obj_get_style_translate_y>:
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8007782:	226b      	movs	r2, #107	; 0x6b
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f004 f9d8 	bl	800bb3c <lv_obj_get_style_prop>
 800778c:	4603      	mov	r3, r0
 800778e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	b21b      	sxth	r3, r3
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <lv_obj_get_style_transform_zoom>:
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80077a6:	226c      	movs	r2, #108	; 0x6c
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f004 f9c6 	bl	800bb3c <lv_obj_get_style_prop>
 80077b0:	4603      	mov	r3, r0
 80077b2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	b21b      	sxth	r3, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <lv_obj_get_style_transform_angle>:
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80077ca:	226d      	movs	r2, #109	; 0x6d
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f004 f9b4 	bl	800bb3c <lv_obj_get_style_prop>
 80077d4:	4603      	mov	r3, r0
 80077d6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	b21b      	sxth	r3, r3
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <lv_obj_get_style_transform_pivot_x>:
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 80077ee:	226e      	movs	r2, #110	; 0x6e
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f004 f9a2 	bl	800bb3c <lv_obj_get_style_prop>
 80077f8:	4603      	mov	r3, r0
 80077fa:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	b21b      	sxth	r3, r3
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <lv_obj_get_style_transform_pivot_y>:
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8007812:	226f      	movs	r2, #111	; 0x6f
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f004 f990 	bl	800bb3c <lv_obj_get_style_prop>
 800781c:	4603      	mov	r3, r0
 800781e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	b21b      	sxth	r3, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <lv_obj_get_style_pad_top>:
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007836:	2210      	movs	r2, #16
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f004 f97e 	bl	800bb3c <lv_obj_get_style_prop>
 8007840:	4603      	mov	r3, r0
 8007842:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	b21b      	sxth	r3, r3
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <lv_obj_get_style_pad_bottom>:
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800785a:	2211      	movs	r2, #17
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f004 f96c 	bl	800bb3c <lv_obj_get_style_prop>
 8007864:	4603      	mov	r3, r0
 8007866:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	b21b      	sxth	r3, r3
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <lv_obj_get_style_pad_left>:
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800787e:	2212      	movs	r2, #18
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f004 f95a 	bl	800bb3c <lv_obj_get_style_prop>
 8007888:	4603      	mov	r3, r0
 800788a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	b21b      	sxth	r3, r3
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <lv_obj_get_style_pad_right>:
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80078a2:	2213      	movs	r2, #19
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f004 f948 	bl	800bb3c <lv_obj_get_style_prop>
 80078ac:	4603      	mov	r3, r0
 80078ae:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	b21b      	sxth	r3, r3
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <lv_obj_get_style_border_width>:
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80078c6:	2232      	movs	r2, #50	; 0x32
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f004 f936 	bl	800bb3c <lv_obj_get_style_prop>
 80078d0:	4603      	mov	r3, r0
 80078d2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	b21b      	sxth	r3, r3
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <lv_obj_get_style_layout>:
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80078ea:	220a      	movs	r2, #10
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f004 f924 	bl	800bb3c <lv_obj_get_style_prop>
 80078f4:	4603      	mov	r3, r0
 80078f6:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	b29b      	uxth	r3, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <lv_obj_get_style_base_dir>:

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800790e:	2216      	movs	r2, #22
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f004 f912 	bl	800bb3c <lv_obj_get_style_prop>
 8007918:	4603      	mov	r3, r0
 800791a:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	b2db      	uxtb	r3, r3
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <lv_obj_refr_size>:
        lv_obj_set_style_y(obj, y, 0);
    }
}

bool lv_obj_refr_size(lv_obj_t * obj)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b090      	sub	sp, #64	; 0x40
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*If the width or height is set by a layout do not modify them*/
    if(obj->w_layout && obj->h_layout) return false;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <lv_obj_refr_size+0x2c>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <lv_obj_refr_size+0x2c>
 8007950:	2300      	movs	r3, #0
 8007952:	e221      	b.n	8007d98 <lv_obj_refr_size+0x470>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f005 f9d5 	bl	800cd04 <lv_obj_get_parent>
 800795a:	6378      	str	r0, [r7, #52]	; 0x34
    if(parent == NULL) return false;
 800795c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <lv_obj_refr_size+0x3e>
 8007962:	2300      	movs	r3, #0
 8007964:	e218      	b.n	8007d98 <lv_obj_refr_size+0x470>

    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f002 f83e 	bl	80099e8 <lv_obj_get_scroll_left>
 800796c:	4603      	mov	r3, r0
 800796e:	867b      	strh	r3, [r7, #50]	; 0x32
    bool w_is_content = false;
 8007970:	2300      	movs	r3, #0
 8007972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool w_is_pct = false;
 8007976:	2300      	movs	r3, #0
 8007978:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    lv_coord_t w;
    if(obj->w_layout) {
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007982:	f003 0304 	and.w	r3, r3, #4
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <lv_obj_refr_size+0x70>
        w = lv_obj_get_width(obj);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa92 	bl	8007eb6 <lv_obj_get_width>
 8007992:	4603      	mov	r3, r0
 8007994:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007996:	e0a0      	b.n	8007ada <lv_obj_refr_size+0x1b2>
    }
    else {
        w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fe38 	bl	8007610 <lv_obj_get_style_width>
 80079a0:	4603      	mov	r3, r0
 80079a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 80079a4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80079a8:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 80079b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079ba:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80079be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c2:	d108      	bne.n	80079d6 <lv_obj_refr_size+0xae>
 80079c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079c6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80079d0:	dc01      	bgt.n	80079d6 <lv_obj_refr_size+0xae>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <lv_obj_refr_size+0xb0>
 80079d6:	2300      	movs	r3, #0
 80079d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80079dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 80079e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80079ea:	f000 fa80 	bl	8007eee <lv_obj_get_content_width>
 80079ee:	4603      	mov	r3, r0
 80079f0:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(w_is_content) {
 80079f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <lv_obj_refr_size+0xde>
            w = calc_content_width(obj);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 fa16 	bl	8008e2c <calc_content_width>
 8007a00:	4603      	mov	r3, r0
 8007a02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007a04:	e051      	b.n	8007aaa <lv_obj_refr_size+0x182>
        }
        else if(w_is_pct) {
 8007a06:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d04d      	beq.n	8007aaa <lv_obj_refr_size+0x182>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d128      	bne.n	8007a70 <lv_obj_refr_size+0x148>
 8007a1e:	2100      	movs	r1, #0
 8007a20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a22:	f7ff fdf5 	bl	8007610 <lv_obj_get_style_width>
 8007a26:	4603      	mov	r3, r0
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d11e      	bne.n	8007a70 <lv_obj_refr_size+0x148>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 8007a32:	2100      	movs	r1, #0
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff ff41 	bl	80078bc <lv_obj_get_style_border_width>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff ff17 	bl	8007874 <lv_obj_get_style_pad_left>
 8007a46:	4603      	mov	r3, r0
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a4c:	4413      	add	r3, r2
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	87bb      	strh	r3, [r7, #60]	; 0x3c
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8007a52:	2100      	movs	r1, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff ff1f 	bl	8007898 <lv_obj_get_style_pad_right>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007a62:	4413      	add	r3, r2
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a68:	4413      	add	r3, r2
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8007a6e:	e01c      	b.n	8007aaa <lv_obj_refr_size+0x182>
            }
            else {
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8007a70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a72:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a76:	b21b      	sxth	r3, r3
 8007a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a7c:	dd06      	ble.n	8007a8c <lv_obj_refr_size+0x164>
 8007a7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a80:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a84:	b21b      	sxth	r3, r3
 8007a86:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007a8a:	e003      	b.n	8007a94 <lv_obj_refr_size+0x16c>
 8007a8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a8e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007a92:	b21b      	sxth	r3, r3
 8007a94:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8007a98:	fb02 f303 	mul.w	r3, r2, r3
 8007a9c:	4a9f      	ldr	r2, [pc, #636]	; (8007d1c <lv_obj_refr_size+0x3f4>)
 8007a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8007aa2:	1152      	asrs	r2, r2, #5
 8007aa4:	17db      	asrs	r3, r3, #31
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }

        lv_coord_t minw = lv_obj_get_style_min_width(obj, LV_PART_MAIN);
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff fdc1 	bl	8007634 <lv_obj_get_style_min_width>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_coord_t maxw = lv_obj_get_style_max_width(obj, LV_PART_MAIN);
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff fdcd 	bl	8007658 <lv_obj_get_style_max_width>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	853b      	strh	r3, [r7, #40]	; 0x28
        w = lv_clamp_width(w, minw, maxw, parent_w);
 8007ac2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007ac6:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8007aca:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8007ace:	f9b7 003c 	ldrsh.w	r0, [r7, #60]	; 0x3c
 8007ad2:	f001 f8bb 	bl	8008c4c <lv_clamp_width>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }

    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 fee6 	bl	80098ac <lv_obj_get_scroll_top>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h;
    bool h_is_content = false;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    bool h_is_pct = false;
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(obj->h_layout) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <lv_obj_refr_size+0x1e4>
        h = lv_obj_get_height(obj);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f9e6 	bl	8007ed2 <lv_obj_get_height>
 8007b06:	4603      	mov	r3, r0
 8007b08:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b0a:	e0a0      	b.n	8007c4e <lv_obj_refr_size+0x326>
    }
    else {
        h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fdb4 	bl	800767c <lv_obj_get_style_height>
 8007b14:	4603      	mov	r3, r0
 8007b16:	877b      	strh	r3, [r7, #58]	; 0x3a
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 8007b18:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8007b1c:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8007b20:	4293      	cmp	r3, r2
 8007b22:	bf0c      	ite	eq
 8007b24:	2301      	moveq	r3, #1
 8007b26:	2300      	movne	r3, #0
 8007b28:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8007b2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b2e:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b36:	d108      	bne.n	8007b4a <lv_obj_refr_size+0x222>
 8007b38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b3a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007b3e:	b21b      	sxth	r3, r3
 8007b40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007b44:	dc01      	bgt.n	8007b4a <lv_obj_refr_size+0x222>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e000      	b.n	8007b4c <lv_obj_refr_size+0x224>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007b50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8007b5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b5e:	f000 f9f1 	bl	8007f44 <lv_obj_get_content_height>
 8007b62:	4603      	mov	r3, r0
 8007b64:	847b      	strh	r3, [r7, #34]	; 0x22

        if(h_is_content) {
 8007b66:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <lv_obj_refr_size+0x252>
            h = calc_content_height(obj);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 fad2 	bl	8009118 <calc_content_height>
 8007b74:	4603      	mov	r3, r0
 8007b76:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b78:	e051      	b.n	8007c1e <lv_obj_refr_size+0x2f6>
        }
        else if(h_is_pct) {
 8007b7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d04d      	beq.n	8007c1e <lv_obj_refr_size+0x2f6>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b84:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d128      	bne.n	8007be4 <lv_obj_refr_size+0x2bc>
 8007b92:	2100      	movs	r1, #0
 8007b94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b96:	f7ff fd71 	bl	800767c <lv_obj_get_style_height>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d11e      	bne.n	8007be4 <lv_obj_refr_size+0x2bc>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fe87 	bl	80078bc <lv_obj_get_style_border_width>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	843b      	strh	r3, [r7, #32]
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fe39 	bl	800782c <lv_obj_get_style_pad_top>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	8c3b      	ldrh	r3, [r7, #32]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	877b      	strh	r3, [r7, #58]	; 0x3a
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fe41 	bl	8007850 <lv_obj_get_style_pad_bottom>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007bdc:	4413      	add	r3, r2
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	877b      	strh	r3, [r7, #58]	; 0x3a
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8007be2:	e01c      	b.n	8007c1e <lv_obj_refr_size+0x2f6>
            }
            else {
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8007be4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007be6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007bea:	b21b      	sxth	r3, r3
 8007bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bf0:	dd06      	ble.n	8007c00 <lv_obj_refr_size+0x2d8>
 8007bf2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007bf4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007bf8:	b21b      	sxth	r3, r3
 8007bfa:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007bfe:	e003      	b.n	8007c08 <lv_obj_refr_size+0x2e0>
 8007c00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007c02:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007c06:	b21b      	sxth	r3, r3
 8007c08:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8007c0c:	fb02 f303 	mul.w	r3, r2, r3
 8007c10:	4a42      	ldr	r2, [pc, #264]	; (8007d1c <lv_obj_refr_size+0x3f4>)
 8007c12:	fb82 1203 	smull	r1, r2, r2, r3
 8007c16:	1152      	asrs	r2, r2, #5
 8007c18:	17db      	asrs	r3, r3, #31
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
        }

        lv_coord_t minh = lv_obj_get_style_min_height(obj, LV_PART_MAIN);
 8007c1e:	2100      	movs	r1, #0
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff fd3d 	bl	80076a0 <lv_obj_get_style_min_height>
 8007c26:	4603      	mov	r3, r0
 8007c28:	83fb      	strh	r3, [r7, #30]
        lv_coord_t maxh = lv_obj_get_style_max_height(obj, LV_PART_MAIN);
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fd49 	bl	80076c4 <lv_obj_get_style_max_height>
 8007c32:	4603      	mov	r3, r0
 8007c34:	83bb      	strh	r3, [r7, #28]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8007c36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007c3a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007c3e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8007c42:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	; 0x3a
 8007c46:	f001 f879 	bl	8008d3c <lv_clamp_height>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    /*calc_auto_size set the scroll x/y to 0 so revert the original value*/
    if(w_is_content || h_is_content) {
 8007c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d103      	bne.n	8007c5e <lv_obj_refr_size+0x336>
 8007c56:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <lv_obj_refr_size+0x346>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8007c5e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8007c62:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8007c66:	2300      	movs	r3, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f002 f9eb 	bl	800a044 <lv_obj_scroll_to>
    }

    /*Do nothing if the size is not changed*/
    /*It is very important else recursive resizing can occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f921 	bl	8007eb6 <lv_obj_get_width>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10a      	bne.n	8007c96 <lv_obj_refr_size+0x36e>
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f926 	bl	8007ed2 <lv_obj_get_height>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d101      	bne.n	8007c96 <lv_obj_refr_size+0x36e>
 8007c92:	2300      	movs	r3, #0
 8007c94:	e080      	b.n	8007d98 <lv_obj_refr_size+0x470>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fed7 	bl	8008a4a <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8007c9c:	f107 0310 	add.w	r3, r7, #16
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8f8 	bl	8007e98 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8007ca8:	f107 0308 	add.w	r3, r7, #8
 8007cac:	4619      	mov	r1, r3
 8007cae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cb0:	f000 f973 	bl	8007f9a <lv_obj_get_content_coords>

    /*If the object is already out of the parent and its position is changes
     *surely the scrollbars also changes so invalidate them*/
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8007cb4:	f107 0108 	add.w	r1, r7, #8
 8007cb8:	f107 0310 	add.w	r3, r7, #16
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f017 fc72 	bl	801f5a8 <_lv_area_is_in>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	76fb      	strb	r3, [r7, #27]
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8007cc8:	7efb      	ldrb	r3, [r7, #27]
 8007cca:	f083 0301 	eor.w	r3, r3, #1
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <lv_obj_refr_size+0x3b2>
 8007cd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cd6:	f003 f855 	bl	800ad84 <lv_obj_scrollbar_invalidate>

    /*Set the length and height
     *Be sure the content is not scrolled in an invalid position on the new size*/
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007ce4:	4413      	add	r3, r2
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	b21a      	sxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	835a      	strh	r2, [r3, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fe05 	bl	8007904 <lv_obj_get_style_base_dir>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10f      	bne.n	8007d20 <lv_obj_refr_size+0x3f8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3301      	adds	r3, #1
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	b21a      	sxth	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	829a      	strh	r2, [r3, #20]
 8007d18:	e00e      	b.n	8007d38 <lv_obj_refr_size+0x410>
 8007d1a:	bf00      	nop
 8007d1c:	51eb851f 	.word	0x51eb851f
    }
    else {
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007d2a:	4413      	add	r3, r2
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	b21a      	sxth	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	831a      	strh	r2, [r3, #24]
    }

    /*Call the ancestor's event handler to the object with its new coordinates*/
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8007d38:	f107 0310 	add.w	r3, r7, #16
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	2129      	movs	r1, #41	; 0x29
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7fc fab5 	bl	80042b0 <lv_event_send>

    /*Call the ancestor's event handler to the parent too*/
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	2122      	movs	r1, #34	; 0x22
 8007d4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d4c:	f7fc fab0 	bl	80042b0 <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fe7a 	bl	8008a4a <lv_obj_invalidate>

    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8007d56:	2100      	movs	r1, #0
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f003 f850 	bl	800adfe <lv_obj_readjust_scroll>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the scrollbars*/
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3314      	adds	r3, #20
 8007d62:	f107 0108 	add.w	r1, r7, #8
 8007d66:	2200      	movs	r2, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f017 fc1d 	bl	801f5a8 <_lv_area_is_in>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	76bb      	strb	r3, [r7, #26]
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8007d72:	7efb      	ldrb	r3, [r7, #27]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d108      	bne.n	8007d8a <lv_obj_refr_size+0x462>
 8007d78:	7efb      	ldrb	r3, [r7, #27]
 8007d7a:	f083 0301 	eor.w	r3, r3, #1
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <lv_obj_refr_size+0x468>
 8007d84:	7ebb      	ldrb	r3, [r7, #26]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <lv_obj_refr_size+0x468>
 8007d8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d8c:	f002 fffa 	bl	800ad84 <lv_obj_scrollbar_invalidate>

    lv_obj_refresh_ext_draw_size(obj);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fb88 	bl	80074a6 <lv_obj_refresh_ext_draw_size>

    return true;
 8007d96:	2301      	movs	r3, #1
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3740      	adds	r7, #64	; 0x40
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8007da8:	4910      	ldr	r1, [pc, #64]	; (8007dec <lv_obj_is_layout_positioned+0x4c>)
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fd fbda 	bl	8005564 <lv_obj_has_flag_any>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <lv_obj_is_layout_positioned+0x1a>
 8007db6:	2300      	movs	r3, #0
 8007db8:	e014      	b.n	8007de4 <lv_obj_is_layout_positioned+0x44>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f004 ffa2 	bl	800cd04 <lv_obj_get_parent>
 8007dc0:	60f8      	str	r0, [r7, #12]
    if(parent == NULL) return false;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <lv_obj_is_layout_positioned+0x2c>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e00b      	b.n	8007de4 <lv_obj_is_layout_positioned+0x44>

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
 8007dcc:	2100      	movs	r1, #0
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f7ff fd86 	bl	80078e0 <lv_obj_get_style_layout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	60bb      	str	r3, [r7, #8]
    if(layout) return true;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <lv_obj_is_layout_positioned+0x42>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <lv_obj_is_layout_positioned+0x44>
    else return false;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	00060001 	.word	0x00060001

08007df0 <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
    obj->layout_inv = 1;
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f004 ff2e 	bl	800cc68 <lv_obj_get_screen>
 8007e0c:	60f8      	str	r0, [r7, #12]
    scr->scr_layout_inv = 1;
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8007e14:	f043 0302 	orr.w	r3, r3, #2
 8007e18:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f004 ff37 	bl	800cc90 <lv_obj_get_disp>
 8007e22:	60b8      	str	r0, [r7, #8]
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d004      	beq.n	8007e36 <lv_obj_mark_layout_as_dirty+0x46>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f01a f84a 	bl	8021eca <lv_timer_resume>
}
 8007e36:	bf00      	nop
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <lv_obj_update_layout>:

void lv_obj_update_layout(const lv_obj_t * obj)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
    static bool mutex = false;
    if(mutex) {
 8007e48:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <lv_obj_update_layout+0x54>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d11d      	bne.n	8007e8c <lv_obj_update_layout+0x4c>
        LV_LOG_TRACE("Already running, returning");
        return;
    }
    mutex = true;
 8007e50:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <lv_obj_update_layout+0x54>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	701a      	strb	r2, [r3, #0]

    lv_obj_t * scr = lv_obj_get_screen(obj);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f004 ff06 	bl	800cc68 <lv_obj_get_screen>
 8007e5c:	60f8      	str	r0, [r7, #12]

    /*Repeat until there where layout invalidations*/
    while(scr->scr_layout_inv) {
 8007e5e:	e009      	b.n	8007e74 <lv_obj_update_layout+0x34>
        LV_LOG_INFO("Layout update begin");
        scr->scr_layout_inv = 0;
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8007e66:	f36f 0341 	bfc	r3, #1, #1
 8007e6a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
        layout_update_core(scr);
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f001 fa18 	bl	80092a4 <layout_update_core>
    while(scr->scr_layout_inv) {
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1ed      	bne.n	8007e60 <lv_obj_update_layout+0x20>
        LV_LOG_TRACE("Layout update end");
    }

    mutex = false;
 8007e84:	4b03      	ldr	r3, [pc, #12]	; (8007e94 <lv_obj_update_layout+0x54>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e000      	b.n	8007e8e <lv_obj_update_layout+0x4e>
        return;
 8007e8c:	bf00      	nop
}
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	200006f4 	.word	0x200006f4

08007e98 <lv_obj_get_coords>:
    lv_obj_set_pos(obj, x, y);

}

void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3314      	adds	r3, #20
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6838      	ldr	r0, [r7, #0]
 8007eaa:	f7ff fb64 	bl	8007576 <lv_area_copy>
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <lv_obj_get_width>:
    return lv_obj_get_style_y(obj, LV_PART_MAIN);
}


lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3314      	adds	r3, #20
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fb76 	bl	80075b4 <lv_area_get_width>
 8007ec8:	4603      	mov	r3, r0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <lv_obj_get_height>:

lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3314      	adds	r3, #20
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fb7f 	bl	80075e2 <lv_area_get_height>
 8007ee4:	4603      	mov	r3, r0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fcbb 	bl	8007874 <lv_obj_get_style_pad_left>
 8007efe:	4603      	mov	r3, r0
 8007f00:	81fb      	strh	r3, [r7, #14]
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8007f02:	2100      	movs	r1, #0
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fcc7 	bl	8007898 <lv_obj_get_style_pad_right>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff fcd3 	bl	80078bc <lv_obj_get_style_border_width>
 8007f16:	4603      	mov	r3, r0
 8007f18:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ffcb 	bl	8007eb6 <lv_obj_get_width>
 8007f20:	4603      	mov	r3, r0
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	89fb      	ldrh	r3, [r7, #14]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	89bb      	ldrh	r3, [r7, #12]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	897b      	ldrh	r3, [r7, #10]
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	b21b      	sxth	r3, r3
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff fc6c 	bl	800782c <lv_obj_get_style_pad_top>
 8007f54:	4603      	mov	r3, r0
 8007f56:	81fb      	strh	r3, [r7, #14]
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8007f58:	2100      	movs	r1, #0
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff fc78 	bl	8007850 <lv_obj_get_style_pad_bottom>
 8007f60:	4603      	mov	r3, r0
 8007f62:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff fca8 	bl	80078bc <lv_obj_get_style_border_width>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff ffae 	bl	8007ed2 <lv_obj_get_height>
 8007f76:	4603      	mov	r3, r0
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	89fb      	ldrh	r3, [r7, #14]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	89bb      	ldrh	r3, [r7, #12]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	897b      	ldrh	r3, [r7, #10]
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	b21b      	sxth	r3, r3
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7ff fc88 	bl	80078bc <lv_obj_get_style_border_width>
 8007fac:	4603      	mov	r3, r0
 8007fae:	81fb      	strh	r3, [r7, #14]

    lv_obj_get_coords(obj, area);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff ff70 	bl	8007e98 <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8007fb8:	89fb      	ldrh	r3, [r7, #14]
 8007fba:	425b      	negs	r3, r3
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	b21b      	sxth	r3, r3
 8007fc0:	89fa      	ldrh	r2, [r7, #14]
 8007fc2:	4252      	negs	r2, r2
 8007fc4:	b292      	uxth	r2, r2
 8007fc6:	b212      	sxth	r2, r2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6838      	ldr	r0, [r7, #0]
 8007fcc:	f017 f89c 	bl	801f108 <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff fc4e 	bl	8007874 <lv_obj_get_style_pad_left>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	4619      	mov	r1, r3
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	b28b      	uxth	r3, r1
 8007fe6:	4413      	add	r3, r2
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	b21a      	sxth	r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	801a      	strh	r2, [r3, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff fc50 	bl	8007898 <lv_obj_get_style_pad_right>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008002:	b29a      	uxth	r2, r3
 8008004:	b28b      	uxth	r3, r1
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	b29b      	uxth	r3, r3
 800800a:	b21a      	sxth	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	809a      	strh	r2, [r3, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008010:	2100      	movs	r1, #0
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fc0a 	bl	800782c <lv_obj_get_style_pad_top>
 8008018:	4603      	mov	r3, r0
 800801a:	4619      	mov	r1, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008022:	b29a      	uxth	r2, r3
 8008024:	b28b      	uxth	r3, r1
 8008026:	4413      	add	r3, r2
 8008028:	b29b      	uxth	r3, r3
 800802a:	b21a      	sxth	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	805a      	strh	r2, [r3, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008030:	2100      	movs	r1, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff fc0c 	bl	8007850 <lv_obj_get_style_pad_bottom>
 8008038:	4603      	mov	r3, r0
 800803a:	4619      	mov	r1, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008042:	b29a      	uxth	r2, r3
 8008044:	b28b      	uxth	r3, r1
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	b29b      	uxth	r3, r3
 800804a:	b21a      	sxth	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	80da      	strh	r2, [r3, #6]

}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
    lv_point_t p = {0, LV_COORD_MIN};
 8008060:	2300      	movs	r3, #0
 8008062:	81bb      	strh	r3, [r7, #12]
 8008064:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008068:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 800806a:	f107 030c 	add.w	r3, r7, #12
 800806e:	461a      	mov	r2, r3
 8008070:	212c      	movs	r1, #44	; 0x2c
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fc f91c 	bl	80042b0 <lv_event_send>
    return p.x;
 8008078:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
    lv_point_t p = {LV_COORD_MIN, 0};
 800808c:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008090:	81bb      	strh	r3, [r7, #12]
 8008092:	2300      	movs	r3, #0
 8008094:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008096:	f107 030c 	add.w	r3, r7, #12
 800809a:	461a      	mov	r2, r3
 800809c:	212c      	movs	r1, #44	; 0x2c
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fc f906 	bl	80042b0 <lv_event_send>
    return p.y;
 80080a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
 80080b8:	2100      	movs	r1, #0
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff faa8 	bl	8007610 <lv_obj_get_style_width>
 80080c0:	4603      	mov	r3, r0
 80080c2:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
 80080c4:	2100      	movs	r1, #0
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff fad8 	bl	800767c <lv_obj_get_style_height>
 80080cc:	4603      	mov	r3, r0
 80080ce:	81bb      	strh	r3, [r7, #12]
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 80080d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80080d4:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80080d8:	4293      	cmp	r3, r2
 80080da:	d007      	beq.n	80080ec <lv_obj_refresh_self_size+0x3c>
 80080dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80080e0:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d001      	beq.n	80080ec <lv_obj_refresh_self_size+0x3c>
 80080e8:	2300      	movs	r3, #0
 80080ea:	e003      	b.n	80080f4 <lv_obj_refresh_self_size+0x44>

    lv_obj_mark_layout_as_dirty(obj);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fe7f 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
    return true;
 80080f2:	2301      	movs	r3, #1
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <lv_obj_refr_pos>:

void lv_obj_refr_pos(lv_obj_t * obj)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
    if(lv_obj_is_layout_positioned(obj)) return;
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff fe4b 	bl	8007da0 <lv_obj_is_layout_positioned>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 81ef 	bne.w	80084f0 <lv_obj_refr_pos+0x3f4>


    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f004 fdf6 	bl	800cd04 <lv_obj_get_parent>
 8008118:	6138      	str	r0, [r7, #16]
    lv_coord_t x = lv_obj_get_style_x(obj, LV_PART_MAIN);
 800811a:	2100      	movs	r1, #0
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff fae3 	bl	80076e8 <lv_obj_get_style_x>
 8008122:	4603      	mov	r3, r0
 8008124:	83fb      	strh	r3, [r7, #30]
    lv_coord_t y = lv_obj_get_style_y(obj, LV_PART_MAIN);
 8008126:	2100      	movs	r1, #0
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff faef 	bl	800770c <lv_obj_get_style_y>
 800812e:	4603      	mov	r3, r0
 8008130:	83bb      	strh	r3, [r7, #28]

    if(parent == NULL) {
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <lv_obj_refr_pos+0x4e>
        lv_obj_move_to(obj, x, y);
 8008138:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800813c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f9d8 	bl	80084f8 <lv_obj_move_to>
        return;
 8008148:	e1d3      	b.n	80084f2 <lv_obj_refr_pos+0x3f6>
    }

    /*Handle percentage value*/
    lv_coord_t pw = lv_obj_get_content_width(parent);
 800814a:	6938      	ldr	r0, [r7, #16]
 800814c:	f7ff fecf 	bl	8007eee <lv_obj_get_content_width>
 8008150:	4603      	mov	r3, r0
 8008152:	81fb      	strh	r3, [r7, #14]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8008154:	6938      	ldr	r0, [r7, #16]
 8008156:	f7ff fef5 	bl	8007f44 <lv_obj_get_content_height>
 800815a:	4603      	mov	r3, r0
 800815c:	81bb      	strh	r3, [r7, #12]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800815e:	8bfb      	ldrh	r3, [r7, #30]
 8008160:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008168:	d123      	bne.n	80081b2 <lv_obj_refr_pos+0xb6>
 800816a:	8bfb      	ldrh	r3, [r7, #30]
 800816c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008170:	b21b      	sxth	r3, r3
 8008172:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008176:	dc1c      	bgt.n	80081b2 <lv_obj_refr_pos+0xb6>
 8008178:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800817c:	8bfb      	ldrh	r3, [r7, #30]
 800817e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008182:	b21b      	sxth	r3, r3
 8008184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008188:	dd06      	ble.n	8008198 <lv_obj_refr_pos+0x9c>
 800818a:	8bfb      	ldrh	r3, [r7, #30]
 800818c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008190:	b21b      	sxth	r3, r3
 8008192:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008196:	e003      	b.n	80081a0 <lv_obj_refr_pos+0xa4>
 8008198:	8bfb      	ldrh	r3, [r7, #30]
 800819a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800819e:	b21b      	sxth	r3, r3
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	4aa6      	ldr	r2, [pc, #664]	; (8008440 <lv_obj_refr_pos+0x344>)
 80081a6:	fb82 1203 	smull	r1, r2, r2, r3
 80081aa:	1152      	asrs	r2, r2, #5
 80081ac:	17db      	asrs	r3, r3, #31
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	83fb      	strh	r3, [r7, #30]
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 80081b2:	8bbb      	ldrh	r3, [r7, #28]
 80081b4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80081b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081bc:	d123      	bne.n	8008206 <lv_obj_refr_pos+0x10a>
 80081be:	8bbb      	ldrh	r3, [r7, #28]
 80081c0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80081c4:	b21b      	sxth	r3, r3
 80081c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081ca:	dc1c      	bgt.n	8008206 <lv_obj_refr_pos+0x10a>
 80081cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80081d0:	8bbb      	ldrh	r3, [r7, #28]
 80081d2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80081d6:	b21b      	sxth	r3, r3
 80081d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081dc:	dd06      	ble.n	80081ec <lv_obj_refr_pos+0xf0>
 80081de:	8bbb      	ldrh	r3, [r7, #28]
 80081e0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80081e4:	b21b      	sxth	r3, r3
 80081e6:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80081ea:	e003      	b.n	80081f4 <lv_obj_refr_pos+0xf8>
 80081ec:	8bbb      	ldrh	r3, [r7, #28]
 80081ee:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80081f2:	b21b      	sxth	r3, r3
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
 80081f8:	4a91      	ldr	r2, [pc, #580]	; (8008440 <lv_obj_refr_pos+0x344>)
 80081fa:	fb82 1203 	smull	r1, r2, r2, r3
 80081fe:	1152      	asrs	r2, r2, #5
 8008200:	17db      	asrs	r3, r3, #31
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	83bb      	strh	r3, [r7, #28]

    /*Handle percentage value of translate*/
    lv_coord_t tr_x = lv_obj_get_style_translate_x(obj, LV_PART_MAIN);
 8008206:	2100      	movs	r1, #0
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff faa3 	bl	8007754 <lv_obj_get_style_translate_x>
 800820e:	4603      	mov	r3, r0
 8008210:	837b      	strh	r3, [r7, #26]
    lv_coord_t tr_y = lv_obj_get_style_translate_y(obj, LV_PART_MAIN);
 8008212:	2100      	movs	r1, #0
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff faaf 	bl	8007778 <lv_obj_get_style_translate_y>
 800821a:	4603      	mov	r3, r0
 800821c:	833b      	strh	r3, [r7, #24]
    lv_coord_t w = lv_obj_get_width(obj);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff fe49 	bl	8007eb6 <lv_obj_get_width>
 8008224:	4603      	mov	r3, r0
 8008226:	817b      	strh	r3, [r7, #10]
    lv_coord_t h = lv_obj_get_height(obj);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff fe52 	bl	8007ed2 <lv_obj_get_height>
 800822e:	4603      	mov	r3, r0
 8008230:	813b      	strh	r3, [r7, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8008232:	8b7b      	ldrh	r3, [r7, #26]
 8008234:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823c:	d123      	bne.n	8008286 <lv_obj_refr_pos+0x18a>
 800823e:	8b7b      	ldrh	r3, [r7, #26]
 8008240:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008244:	b21b      	sxth	r3, r3
 8008246:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800824a:	dc1c      	bgt.n	8008286 <lv_obj_refr_pos+0x18a>
 800824c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008250:	8b7b      	ldrh	r3, [r7, #26]
 8008252:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008256:	b21b      	sxth	r3, r3
 8008258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800825c:	dd06      	ble.n	800826c <lv_obj_refr_pos+0x170>
 800825e:	8b7b      	ldrh	r3, [r7, #26]
 8008260:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008264:	b21b      	sxth	r3, r3
 8008266:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800826a:	e003      	b.n	8008274 <lv_obj_refr_pos+0x178>
 800826c:	8b7b      	ldrh	r3, [r7, #26]
 800826e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008272:	b21b      	sxth	r3, r3
 8008274:	fb02 f303 	mul.w	r3, r2, r3
 8008278:	4a71      	ldr	r2, [pc, #452]	; (8008440 <lv_obj_refr_pos+0x344>)
 800827a:	fb82 1203 	smull	r1, r2, r2, r3
 800827e:	1152      	asrs	r2, r2, #5
 8008280:	17db      	asrs	r3, r3, #31
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	837b      	strh	r3, [r7, #26]
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8008286:	8b3b      	ldrh	r3, [r7, #24]
 8008288:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800828c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008290:	d123      	bne.n	80082da <lv_obj_refr_pos+0x1de>
 8008292:	8b3b      	ldrh	r3, [r7, #24]
 8008294:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008298:	b21b      	sxth	r3, r3
 800829a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800829e:	dc1c      	bgt.n	80082da <lv_obj_refr_pos+0x1de>
 80082a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80082a4:	8b3b      	ldrh	r3, [r7, #24]
 80082a6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80082aa:	b21b      	sxth	r3, r3
 80082ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082b0:	dd06      	ble.n	80082c0 <lv_obj_refr_pos+0x1c4>
 80082b2:	8b3b      	ldrh	r3, [r7, #24]
 80082b4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80082b8:	b21b      	sxth	r3, r3
 80082ba:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80082be:	e003      	b.n	80082c8 <lv_obj_refr_pos+0x1cc>
 80082c0:	8b3b      	ldrh	r3, [r7, #24]
 80082c2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80082c6:	b21b      	sxth	r3, r3
 80082c8:	fb02 f303 	mul.w	r3, r2, r3
 80082cc:	4a5c      	ldr	r2, [pc, #368]	; (8008440 <lv_obj_refr_pos+0x344>)
 80082ce:	fb82 1203 	smull	r1, r2, r2, r3
 80082d2:	1152      	asrs	r2, r2, #5
 80082d4:	17db      	asrs	r3, r3, #31
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	833b      	strh	r3, [r7, #24]

    /*Use the translation*/
    x += tr_x;
 80082da:	8bfa      	ldrh	r2, [r7, #30]
 80082dc:	8b7b      	ldrh	r3, [r7, #26]
 80082de:	4413      	add	r3, r2
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	83fb      	strh	r3, [r7, #30]
    y += tr_y;
 80082e4:	8bba      	ldrh	r2, [r7, #28]
 80082e6:	8b3b      	ldrh	r3, [r7, #24]
 80082e8:	4413      	add	r3, r2
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	83bb      	strh	r3, [r7, #28]

    lv_align_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff fa1d 	bl	8007730 <lv_obj_get_style_align>
 80082f6:	4603      	mov	r3, r0
 80082f8:	75fb      	strb	r3, [r7, #23]

    if(align == LV_ALIGN_DEFAULT) {
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10b      	bne.n	8008318 <lv_obj_refr_pos+0x21c>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8008300:	2100      	movs	r1, #0
 8008302:	6938      	ldr	r0, [r7, #16]
 8008304:	f7ff fafe 	bl	8007904 <lv_obj_get_style_base_dir>
 8008308:	4603      	mov	r3, r0
 800830a:	2b01      	cmp	r3, #1
 800830c:	d102      	bne.n	8008314 <lv_obj_refr_pos+0x218>
 800830e:	2303      	movs	r3, #3
 8008310:	75fb      	strb	r3, [r7, #23]
 8008312:	e001      	b.n	8008318 <lv_obj_refr_pos+0x21c>
        else align = LV_ALIGN_TOP_LEFT;
 8008314:	2301      	movs	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]
    }

    if(align == LV_ALIGN_TOP_LEFT) {
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d108      	bne.n	8008330 <lv_obj_refr_pos+0x234>
        lv_obj_move_to(obj, x, y);
 800831e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008322:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f8e5 	bl	80084f8 <lv_obj_move_to>
 800832e:	e0e0      	b.n	80084f2 <lv_obj_refr_pos+0x3f6>
    }
    else {

        switch(align) {
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	3b02      	subs	r3, #2
 8008334:	2b07      	cmp	r3, #7
 8008336:	f200 80d1 	bhi.w	80084dc <lv_obj_refr_pos+0x3e0>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <lv_obj_refr_pos+0x244>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008361 	.word	0x08008361
 8008344:	0800838f 	.word	0x0800838f
 8008348:	080083cf 	.word	0x080083cf
 800834c:	080083e1 	.word	0x080083e1
 8008350:	0800841f 	.word	0x0800841f
 8008354:	080083a1 	.word	0x080083a1
 8008358:	08008445 	.word	0x08008445
 800835c:	08008483 	.word	0x08008483
            case LV_ALIGN_TOP_MID:
                x += pw / 2 - w / 2;
 8008360:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	da00      	bge.n	800836a <lv_obj_refr_pos+0x26e>
 8008368:	3301      	adds	r3, #1
 800836a:	105b      	asrs	r3, r3, #1
 800836c:	b21b      	sxth	r3, r3
 800836e:	b29a      	uxth	r2, r3
 8008370:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008374:	2b00      	cmp	r3, #0
 8008376:	da00      	bge.n	800837a <lv_obj_refr_pos+0x27e>
 8008378:	3301      	adds	r3, #1
 800837a:	105b      	asrs	r3, r3, #1
 800837c:	b21b      	sxth	r3, r3
 800837e:	b29b      	uxth	r3, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	b29a      	uxth	r2, r3
 8008384:	8bfb      	ldrh	r3, [r7, #30]
 8008386:	4413      	add	r3, r2
 8008388:	b29b      	uxth	r3, r3
 800838a:	83fb      	strh	r3, [r7, #30]
                break;
 800838c:	e0a7      	b.n	80084de <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_TOP_RIGHT:
                x += pw - w;
 800838e:	89fa      	ldrh	r2, [r7, #14]
 8008390:	897b      	ldrh	r3, [r7, #10]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	b29a      	uxth	r2, r3
 8008396:	8bfb      	ldrh	r3, [r7, #30]
 8008398:	4413      	add	r3, r2
 800839a:	b29b      	uxth	r3, r3
 800839c:	83fb      	strh	r3, [r7, #30]
                break;
 800839e:	e09e      	b.n	80084de <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_LEFT_MID:
                y += ph / 2 - h / 2;
 80083a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da00      	bge.n	80083aa <lv_obj_refr_pos+0x2ae>
 80083a8:	3301      	adds	r3, #1
 80083aa:	105b      	asrs	r3, r3, #1
 80083ac:	b21b      	sxth	r3, r3
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	da00      	bge.n	80083ba <lv_obj_refr_pos+0x2be>
 80083b8:	3301      	adds	r3, #1
 80083ba:	105b      	asrs	r3, r3, #1
 80083bc:	b21b      	sxth	r3, r3
 80083be:	b29b      	uxth	r3, r3
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	8bbb      	ldrh	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	83bb      	strh	r3, [r7, #28]
                break;
 80083cc:	e087      	b.n	80084de <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_LEFT:
                y += ph - h;
 80083ce:	89ba      	ldrh	r2, [r7, #12]
 80083d0:	893b      	ldrh	r3, [r7, #8]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	8bbb      	ldrh	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	b29b      	uxth	r3, r3
 80083dc:	83bb      	strh	r3, [r7, #28]
                break;
 80083de:	e07e      	b.n	80084de <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_MID:
                x += pw / 2 - w / 2;
 80083e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	da00      	bge.n	80083ea <lv_obj_refr_pos+0x2ee>
 80083e8:	3301      	adds	r3, #1
 80083ea:	105b      	asrs	r3, r3, #1
 80083ec:	b21b      	sxth	r3, r3
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da00      	bge.n	80083fa <lv_obj_refr_pos+0x2fe>
 80083f8:	3301      	adds	r3, #1
 80083fa:	105b      	asrs	r3, r3, #1
 80083fc:	b21b      	sxth	r3, r3
 80083fe:	b29b      	uxth	r3, r3
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	b29a      	uxth	r2, r3
 8008404:	8bfb      	ldrh	r3, [r7, #30]
 8008406:	4413      	add	r3, r2
 8008408:	b29b      	uxth	r3, r3
 800840a:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 800840c:	89ba      	ldrh	r2, [r7, #12]
 800840e:	893b      	ldrh	r3, [r7, #8]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	b29a      	uxth	r2, r3
 8008414:	8bbb      	ldrh	r3, [r7, #28]
 8008416:	4413      	add	r3, r2
 8008418:	b29b      	uxth	r3, r3
 800841a:	83bb      	strh	r3, [r7, #28]
                break;
 800841c:	e05f      	b.n	80084de <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_RIGHT:
                x += pw - w;
 800841e:	89fa      	ldrh	r2, [r7, #14]
 8008420:	897b      	ldrh	r3, [r7, #10]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	b29a      	uxth	r2, r3
 8008426:	8bfb      	ldrh	r3, [r7, #30]
 8008428:	4413      	add	r3, r2
 800842a:	b29b      	uxth	r3, r3
 800842c:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 800842e:	89ba      	ldrh	r2, [r7, #12]
 8008430:	893b      	ldrh	r3, [r7, #8]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	b29a      	uxth	r2, r3
 8008436:	8bbb      	ldrh	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	b29b      	uxth	r3, r3
 800843c:	83bb      	strh	r3, [r7, #28]
                break;
 800843e:	e04e      	b.n	80084de <lv_obj_refr_pos+0x3e2>
 8008440:	51eb851f 	.word	0x51eb851f
            case LV_ALIGN_RIGHT_MID:
                x += pw - w;
 8008444:	89fa      	ldrh	r2, [r7, #14]
 8008446:	897b      	ldrh	r3, [r7, #10]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	b29a      	uxth	r2, r3
 800844c:	8bfb      	ldrh	r3, [r7, #30]
 800844e:	4413      	add	r3, r2
 8008450:	b29b      	uxth	r3, r3
 8008452:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 8008454:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	da00      	bge.n	800845e <lv_obj_refr_pos+0x362>
 800845c:	3301      	adds	r3, #1
 800845e:	105b      	asrs	r3, r3, #1
 8008460:	b21b      	sxth	r3, r3
 8008462:	b29a      	uxth	r2, r3
 8008464:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	da00      	bge.n	800846e <lv_obj_refr_pos+0x372>
 800846c:	3301      	adds	r3, #1
 800846e:	105b      	asrs	r3, r3, #1
 8008470:	b21b      	sxth	r3, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	b29a      	uxth	r2, r3
 8008478:	8bbb      	ldrh	r3, [r7, #28]
 800847a:	4413      	add	r3, r2
 800847c:	b29b      	uxth	r3, r3
 800847e:	83bb      	strh	r3, [r7, #28]
                break;
 8008480:	e02d      	b.n	80084de <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_CENTER:
                x += pw / 2 - w / 2;
 8008482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008486:	2b00      	cmp	r3, #0
 8008488:	da00      	bge.n	800848c <lv_obj_refr_pos+0x390>
 800848a:	3301      	adds	r3, #1
 800848c:	105b      	asrs	r3, r3, #1
 800848e:	b21b      	sxth	r3, r3
 8008490:	b29a      	uxth	r2, r3
 8008492:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008496:	2b00      	cmp	r3, #0
 8008498:	da00      	bge.n	800849c <lv_obj_refr_pos+0x3a0>
 800849a:	3301      	adds	r3, #1
 800849c:	105b      	asrs	r3, r3, #1
 800849e:	b21b      	sxth	r3, r3
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	8bfb      	ldrh	r3, [r7, #30]
 80084a8:	4413      	add	r3, r2
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 80084ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da00      	bge.n	80084b8 <lv_obj_refr_pos+0x3bc>
 80084b6:	3301      	adds	r3, #1
 80084b8:	105b      	asrs	r3, r3, #1
 80084ba:	b21b      	sxth	r3, r3
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da00      	bge.n	80084c8 <lv_obj_refr_pos+0x3cc>
 80084c6:	3301      	adds	r3, #1
 80084c8:	105b      	asrs	r3, r3, #1
 80084ca:	b21b      	sxth	r3, r3
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	8bbb      	ldrh	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	83bb      	strh	r3, [r7, #28]
                break;
 80084da:	e000      	b.n	80084de <lv_obj_refr_pos+0x3e2>
            default:
                break;
 80084dc:	bf00      	nop
        }
        lv_obj_move_to(obj, x, y);
 80084de:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80084e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f805 	bl	80084f8 <lv_obj_move_to>
 80084ee:	e000      	b.n	80084f2 <lv_obj_refr_pos+0x3f6>
    if(lv_obj_is_layout_positioned(obj)) return;
 80084f0:	bf00      	nop
    }
}
 80084f2:	3720      	adds	r7, #32
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <lv_obj_move_to>:

void lv_obj_move_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 80084f8:	b590      	push	{r4, r7, lr}
 80084fa:	b08d      	sub	sp, #52	; 0x34
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	807b      	strh	r3, [r7, #2]
 8008504:	4613      	mov	r3, r2
 8008506:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * parent = obj->parent;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	62bb      	str	r3, [r7, #40]	; 0x28

    if(parent) {
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	2b00      	cmp	r3, #0
 8008512:	d05a      	beq.n	80085ca <lv_obj_move_to+0xd2>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8008514:	2100      	movs	r1, #0
 8008516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008518:	f7ff f9ac 	bl	8007874 <lv_obj_get_style_pad_left>
 800851c:	4603      	mov	r3, r0
 800851e:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8008520:	2100      	movs	r1, #0
 8008522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008524:	f7ff f982 	bl	800782c <lv_obj_get_style_pad_top>
 8008528:	4603      	mov	r3, r0
 800852a:	84bb      	strh	r3, [r7, #36]	; 0x24

        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 800852c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7fd f802 	bl	800553a <lv_obj_has_flag>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d016      	beq.n	800856a <lv_obj_move_to+0x72>
            x += pad_left + parent->coords.x1;
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008542:	b29a      	uxth	r2, r3
 8008544:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008546:	4413      	add	r3, r2
 8008548:	b29a      	uxth	r2, r3
 800854a:	887b      	ldrh	r3, [r7, #2]
 800854c:	4413      	add	r3, r2
 800854e:	b29b      	uxth	r3, r3
 8008550:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1;
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008558:	b29a      	uxth	r2, r3
 800855a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800855c:	4413      	add	r3, r2
 800855e:	b29a      	uxth	r2, r3
 8008560:	883b      	ldrh	r3, [r7, #0]
 8008562:	4413      	add	r3, r2
 8008564:	b29b      	uxth	r3, r3
 8008566:	803b      	strh	r3, [r7, #0]
 8008568:	e01f      	b.n	80085aa <lv_obj_move_to+0xb2>
        }
        else {
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 800856a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800856e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008570:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8008574:	189c      	adds	r4, r3, r2
 8008576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008578:	f001 f968 	bl	800984c <lv_obj_get_scroll_x>
 800857c:	4603      	mov	r3, r0
 800857e:	1ae3      	subs	r3, r4, r3
 8008580:	b29a      	uxth	r2, r3
 8008582:	887b      	ldrh	r3, [r7, #2]
 8008584:	4413      	add	r3, r2
 8008586:	b29b      	uxth	r3, r3
 8008588:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800858a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800858e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008590:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8008594:	189c      	adds	r4, r3, r2
 8008596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008598:	f001 f970 	bl	800987c <lv_obj_get_scroll_y>
 800859c:	4603      	mov	r3, r0
 800859e:	1ae3      	subs	r3, r4, r3
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	883b      	ldrh	r3, [r7, #0]
 80085a4:	4413      	add	r3, r2
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	803b      	strh	r3, [r7, #0]
        }

        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 80085aa:	2100      	movs	r1, #0
 80085ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ae:	f7ff f985 	bl	80078bc <lv_obj_get_style_border_width>
 80085b2:	4603      	mov	r3, r0
 80085b4:	847b      	strh	r3, [r7, #34]	; 0x22
        x += border_width;
 80085b6:	887a      	ldrh	r2, [r7, #2]
 80085b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085ba:	4413      	add	r3, r2
 80085bc:	b29b      	uxth	r3, r3
 80085be:	807b      	strh	r3, [r7, #2]
        y += border_width;
 80085c0:	883a      	ldrh	r2, [r7, #0]
 80085c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085c4:	4413      	add	r3, r2
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 80085ca:	887a      	ldrh	r2, [r7, #2]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	b21b      	sxth	r3, r3
 80085da:	83bb      	strh	r3, [r7, #28]
    diff.y = y - obj->coords.y1;
 80085dc:	883a      	ldrh	r2, [r7, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	b21b      	sxth	r3, r3
 80085ec:	83fb      	strh	r3, [r7, #30]

    /*Do nothing if the position is not changed*/
    /*It is very important else recursive positioning can
     *occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 80085ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d104      	bne.n	8008600 <lv_obj_move_to+0x108>
 80085f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 808e 	beq.w	800871c <lv_obj_move_to+0x224>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fa22 	bl	8008a4a <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8008606:	f107 0314 	add.w	r3, r7, #20
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fc43 	bl	8007e98 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    bool on1 = false;
 8008612:	2300      	movs	r3, #0
 8008614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(parent) {
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01a      	beq.n	8008654 <lv_obj_move_to+0x15c>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 800861e:	f107 030c 	add.w	r3, r7, #12
 8008622:	4619      	mov	r1, r3
 8008624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008626:	f7ff fcb8 	bl	8007f9a <lv_obj_get_content_coords>

        /*If the object is already out of the parent and its position is changes
         *surely the scrollbars also changes so invalidate them*/
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800862a:	f107 010c 	add.w	r1, r7, #12
 800862e:	f107 0314 	add.w	r3, r7, #20
 8008632:	2200      	movs	r2, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f016 ffb7 	bl	801f5a8 <_lv_area_is_in>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8008640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008644:	f083 0301 	eor.w	r3, r3, #1
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <lv_obj_move_to+0x15c>
 800864e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008650:	f002 fb98 	bl	800ad84 <lv_obj_scrollbar_invalidate>
    }

    obj->coords.x1 += diff.x;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800865a:	b29a      	uxth	r2, r3
 800865c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008660:	b29b      	uxth	r3, r3
 8008662:	4413      	add	r3, r2
 8008664:	b29b      	uxth	r3, r3
 8008666:	b21a      	sxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	829a      	strh	r2, [r3, #20]
    obj->coords.y1 += diff.y;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008672:	b29a      	uxth	r2, r3
 8008674:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008678:	b29b      	uxth	r3, r3
 800867a:	4413      	add	r3, r2
 800867c:	b29b      	uxth	r3, r3
 800867e:	b21a      	sxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	82da      	strh	r2, [r3, #22]
    obj->coords.x2 += diff.x;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800868a:	b29a      	uxth	r2, r3
 800868c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008690:	b29b      	uxth	r3, r3
 8008692:	4413      	add	r3, r2
 8008694:	b29b      	uxth	r3, r3
 8008696:	b21a      	sxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	831a      	strh	r2, [r3, #24]
    obj->coords.y2 += diff.y;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	b21a      	sxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	835a      	strh	r2, [r3, #26]

    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 80086b4:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80086b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80086bc:	2300      	movs	r3, #0
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f830 	bl	8008724 <lv_obj_move_children_by>

    /*Call the ancestor's event handler to the parent too*/
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <lv_obj_move_to+0x1dc>
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	2122      	movs	r1, #34	; 0x22
 80086ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d0:	f7fb fdee 	bl	80042b0 <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f9b8 	bl	8008a4a <lv_obj_invalidate>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the srollbars*/
    if(parent) {
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01e      	beq.n	800871e <lv_obj_move_to+0x226>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3314      	adds	r3, #20
 80086e4:	f107 010c 	add.w	r1, r7, #12
 80086e8:	2200      	movs	r2, #0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f016 ff5c 	bl	801f5a8 <_lv_area_is_in>
 80086f0:	4603      	mov	r3, r0
 80086f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80086f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <lv_obj_move_to+0x21c>
 80086fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008702:	f083 0301 	eor.w	r3, r3, #1
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d008      	beq.n	800871e <lv_obj_move_to+0x226>
 800870c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <lv_obj_move_to+0x226>
 8008714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008716:	f002 fb35 	bl	800ad84 <lv_obj_scrollbar_invalidate>
 800871a:	e000      	b.n	800871e <lv_obj_move_to+0x226>
    if(diff.x == 0 && diff.y == 0) return;
 800871c:	bf00      	nop
    }
}
 800871e:	3734      	adds	r7, #52	; 0x34
 8008720:	46bd      	mov	sp, r7
 8008722:	bd90      	pop	{r4, r7, pc}

08008724 <lv_obj_move_children_by>:

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	461a      	mov	r2, r3
 8008732:	4603      	mov	r3, r0
 8008734:	817b      	strh	r3, [r7, #10]
 8008736:	460b      	mov	r3, r1
 8008738:	813b      	strh	r3, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f004 faf1 	bl	800cd26 <lv_obj_get_child_cnt>
 8008744:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	e047      	b.n	80087dc <lv_obj_move_children_by+0xb8>
        lv_obj_t * child = obj->spec_attr->children[i];
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	617b      	str	r3, [r7, #20]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d007      	beq.n	8008772 <lv_obj_move_children_by+0x4e>
 8008762:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008766:	6978      	ldr	r0, [r7, #20]
 8008768:	f7fc fee7 	bl	800553a <lv_obj_has_flag>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d130      	bne.n	80087d4 <lv_obj_move_children_by+0xb0>
        child->coords.x1 += x_diff;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008778:	b29a      	uxth	r2, r3
 800877a:	897b      	ldrh	r3, [r7, #10]
 800877c:	4413      	add	r3, r2
 800877e:	b29b      	uxth	r3, r3
 8008780:	b21a      	sxth	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	829a      	strh	r2, [r3, #20]
        child->coords.y1 += y_diff;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800878c:	b29a      	uxth	r2, r3
 800878e:	893b      	ldrh	r3, [r7, #8]
 8008790:	4413      	add	r3, r2
 8008792:	b29b      	uxth	r3, r3
 8008794:	b21a      	sxth	r2, r3
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	82da      	strh	r2, [r3, #22]
        child->coords.x2 += x_diff;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	897b      	ldrh	r3, [r7, #10]
 80087a4:	4413      	add	r3, r2
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	b21a      	sxth	r2, r3
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	831a      	strh	r2, [r3, #24]
        child->coords.y2 += y_diff;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	893b      	ldrh	r3, [r7, #8]
 80087b8:	4413      	add	r3, r2
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	b21a      	sxth	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	835a      	strh	r2, [r3, #26]

        lv_obj_move_children_by(child, x_diff, y_diff, false);
 80087c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80087c6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80087ca:	2300      	movs	r3, #0
 80087cc:	6978      	ldr	r0, [r7, #20]
 80087ce:	f7ff ffa9 	bl	8008724 <lv_obj_move_children_by>
 80087d2:	e000      	b.n	80087d6 <lv_obj_move_children_by+0xb2>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 80087d4:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	3301      	adds	r3, #1
 80087da:	61fb      	str	r3, [r7, #28]
 80087dc:	69fa      	ldr	r2, [r7, #28]
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d3b3      	bcc.n	800874c <lv_obj_move_children_by+0x28>
    }
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <lv_obj_transform_point>:

void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, bool recursive, bool inv)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	4611      	mov	r1, r2
 80087fa:	461a      	mov	r2, r3
 80087fc:	460b      	mov	r3, r1
 80087fe:	71fb      	strb	r3, [r7, #7]
 8008800:	4613      	mov	r3, r2
 8008802:	71bb      	strb	r3, [r7, #6]
    if(obj) {
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d036      	beq.n	8008878 <lv_obj_transform_point+0x8a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7fe fe9d 	bl	800754a <_lv_obj_get_layer_type>
 8008810:	4603      	mov	r3, r0
 8008812:	75fb      	strb	r3, [r7, #23]
        bool do_tranf = layer_type == LV_LAYER_TYPE_TRANSFORM;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b02      	cmp	r3, #2
 8008818:	bf0c      	ite	eq
 800881a:	2301      	moveq	r3, #1
 800881c:	2300      	movne	r3, #0
 800881e:	75bb      	strb	r3, [r7, #22]
        if(inv) {
 8008820:	79bb      	ldrb	r3, [r7, #6]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d014      	beq.n	8008850 <lv_obj_transform_point+0x62>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d007      	beq.n	800883c <lv_obj_transform_point+0x4e>
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f004 fa69 	bl	800cd04 <lv_obj_get_parent>
 8008832:	79bb      	ldrb	r3, [r7, #6]
 8008834:	79fa      	ldrb	r2, [r7, #7]
 8008836:	68b9      	ldr	r1, [r7, #8]
 8008838:	f7ff ffd9 	bl	80087ee <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 800883c:	7dbb      	ldrb	r3, [r7, #22]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d01a      	beq.n	8008878 <lv_obj_transform_point+0x8a>
 8008842:	79bb      	ldrb	r3, [r7, #6]
 8008844:	461a      	mov	r2, r3
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 fd8d 	bl	8009368 <transform_point>
        else {
            if(do_tranf) transform_point(obj, p, inv);
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
        }
    }
}
 800884e:	e013      	b.n	8008878 <lv_obj_transform_point+0x8a>
            if(do_tranf) transform_point(obj, p, inv);
 8008850:	7dbb      	ldrb	r3, [r7, #22]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <lv_obj_transform_point+0x74>
 8008856:	79bb      	ldrb	r3, [r7, #6]
 8008858:	461a      	mov	r2, r3
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fd83 	bl	8009368 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <lv_obj_transform_point+0x8a>
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f004 fa4b 	bl	800cd04 <lv_obj_get_parent>
 800886e:	79bb      	ldrb	r3, [r7, #6]
 8008870:	79fa      	ldrb	r2, [r7, #7]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	f7ff ffbb 	bl	80087ee <lv_obj_transform_point>
}
 8008878:	bf00      	nop
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <lv_obj_get_transformed_area>:

void lv_obj_get_transformed_area(const lv_obj_t * obj, lv_area_t * area, bool recursive,
                                 bool inv)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4611      	mov	r1, r2
 800888c:	461a      	mov	r2, r3
 800888e:	460b      	mov	r3, r1
 8008890:	71fb      	strb	r3, [r7, #7]
 8008892:	4613      	mov	r3, r2
 8008894:	71bb      	strb	r3, [r7, #6]
    lv_point_t p[4] = {
        {area->x1, area->y1},
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 800889c:	823b      	strh	r3, [r7, #16]
        {area->x1, area->y1},
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 80088a4:	827b      	strh	r3, [r7, #18]
        {area->x1, area->y2},
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 80088ac:	82bb      	strh	r3, [r7, #20]
        {area->x1, area->y2},
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 80088b4:	82fb      	strh	r3, [r7, #22]
        {area->x2, area->y1},
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 80088bc:	833b      	strh	r3, [r7, #24]
        {area->x2, area->y1},
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 80088c4:	837b      	strh	r3, [r7, #26]
        {area->x2, area->y2},
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 80088cc:	83bb      	strh	r3, [r7, #28]
        {area->x2, area->y2},
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 80088d4:	83fb      	strh	r3, [r7, #30]
    };

    lv_obj_transform_point(obj, &p[0], recursive, inv);
 80088d6:	79bb      	ldrb	r3, [r7, #6]
 80088d8:	79fa      	ldrb	r2, [r7, #7]
 80088da:	f107 0110 	add.w	r1, r7, #16
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7ff ff85 	bl	80087ee <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 80088e4:	79b8      	ldrb	r0, [r7, #6]
 80088e6:	79fa      	ldrb	r2, [r7, #7]
 80088e8:	f107 0310 	add.w	r3, r7, #16
 80088ec:	1d19      	adds	r1, r3, #4
 80088ee:	4603      	mov	r3, r0
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff ff7c 	bl	80087ee <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 80088f6:	79b8      	ldrb	r0, [r7, #6]
 80088f8:	79fa      	ldrb	r2, [r7, #7]
 80088fa:	f107 0310 	add.w	r3, r7, #16
 80088fe:	f103 0108 	add.w	r1, r3, #8
 8008902:	4603      	mov	r3, r0
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff ff72 	bl	80087ee <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 800890a:	79b8      	ldrb	r0, [r7, #6]
 800890c:	79fa      	ldrb	r2, [r7, #7]
 800890e:	f107 0310 	add.w	r3, r7, #16
 8008912:	f103 010c 	add.w	r1, r3, #12
 8008916:	4603      	mov	r3, r0
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7ff ff68 	bl	80087ee <lv_obj_transform_point>

    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 800891e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008922:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008926:	4293      	cmp	r3, r2
 8008928:	bfa8      	it	ge
 800892a:	4613      	movge	r3, r2
 800892c:	b21a      	sxth	r2, r3
 800892e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8008932:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008936:	428b      	cmp	r3, r1
 8008938:	bfa8      	it	ge
 800893a:	460b      	movge	r3, r1
 800893c:	b21b      	sxth	r3, r3
 800893e:	4293      	cmp	r3, r2
 8008940:	bfa8      	it	ge
 8008942:	4613      	movge	r3, r2
 8008944:	b21a      	sxth	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	801a      	strh	r2, [r3, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 800894a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800894e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008952:	4293      	cmp	r3, r2
 8008954:	bfb8      	it	lt
 8008956:	4613      	movlt	r3, r2
 8008958:	b21a      	sxth	r2, r3
 800895a:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800895e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008962:	428b      	cmp	r3, r1
 8008964:	bfb8      	it	lt
 8008966:	460b      	movlt	r3, r1
 8008968:	b21b      	sxth	r3, r3
 800896a:	4293      	cmp	r3, r2
 800896c:	bfb8      	it	lt
 800896e:	4613      	movlt	r3, r2
 8008970:	b21a      	sxth	r2, r3
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	809a      	strh	r2, [r3, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8008976:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800897a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800897e:	4293      	cmp	r3, r2
 8008980:	bfa8      	it	ge
 8008982:	4613      	movge	r3, r2
 8008984:	b21a      	sxth	r2, r3
 8008986:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800898a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800898e:	428b      	cmp	r3, r1
 8008990:	bfa8      	it	ge
 8008992:	460b      	movge	r3, r1
 8008994:	b21b      	sxth	r3, r3
 8008996:	4293      	cmp	r3, r2
 8008998:	bfa8      	it	ge
 800899a:	4613      	movge	r3, r2
 800899c:	b21a      	sxth	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	805a      	strh	r2, [r3, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 80089a2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80089a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80089aa:	4293      	cmp	r3, r2
 80089ac:	bfb8      	it	lt
 80089ae:	4613      	movlt	r3, r2
 80089b0:	b21a      	sxth	r2, r3
 80089b2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80089b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089ba:	428b      	cmp	r3, r1
 80089bc:	bfb8      	it	lt
 80089be:	460b      	movlt	r3, r1
 80089c0:	b21b      	sxth	r3, r3
 80089c2:	4293      	cmp	r3, r2
 80089c4:	bfb8      	it	lt
 80089c6:	4613      	movlt	r3, r2
 80089c8:	b21a      	sxth	r2, r3
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	80da      	strh	r2, [r3, #6]
    lv_area_increase(area, 5, 5);
 80089ce:	2205      	movs	r2, #5
 80089d0:	2105      	movs	r1, #5
 80089d2:	68b8      	ldr	r0, [r7, #8]
 80089d4:	f016 fb98 	bl	801f108 <lv_area_increase>
}
 80089d8:	bf00      	nop
 80089da:	3720      	adds	r7, #32
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <lv_obj_invalidate_area>:


void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_disp_t * disp   = lv_obj_get_disp(obj);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f004 f950 	bl	800cc90 <lv_obj_get_disp>
 80089f0:	6178      	str	r0, [r7, #20]
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 80089f2:	6978      	ldr	r0, [r7, #20]
 80089f4:	f7fb fc41 	bl	800427a <lv_disp_is_invalidation_enabled>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f083 0301 	eor.w	r3, r3, #1
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d11c      	bne.n	8008a3e <lv_obj_invalidate_area+0x5e>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 8008a04:	f107 030c 	add.w	r3, r7, #12
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fdb3 	bl	8007576 <lv_area_copy>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8008a10:	f107 030c 	add.w	r3, r7, #12
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f853 	bl	8008ac2 <lv_obj_area_is_visible>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f083 0301 	eor.w	r3, r3, #1
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10c      	bne.n	8008a42 <lv_obj_invalidate_area+0x62>

    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f004 f931 	bl	800cc90 <lv_obj_get_disp>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	f107 030c 	add.w	r3, r7, #12
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f004 fb01 	bl	800d03e <_lv_inv_area>
 8008a3c:	e002      	b.n	8008a44 <lv_obj_invalidate_area+0x64>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8008a3e:	bf00      	nop
 8008a40:	e000      	b.n	8008a44 <lv_obj_invalidate_area+0x64>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8008a42:	bf00      	nop
}
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <lv_obj_invalidate>:

void lv_obj_invalidate(const lv_obj_t * obj)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b086      	sub	sp, #24
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fe fd65 	bl	8007522 <_lv_obj_get_ext_draw_size>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f103 0214 	add.w	r2, r3, #20
 8008a62:	f107 030c 	add.w	r3, r7, #12
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fd84 	bl	8007576 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 8008a6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	8afb      	ldrh	r3, [r7, #22]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 8008a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	8afb      	ldrh	r3, [r7, #22]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	b21b      	sxth	r3, r3
 8008a8c:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 8008a8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	8afb      	ldrh	r3, [r7, #22]
 8008a96:	4413      	add	r3, r2
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 8008a9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	8afb      	ldrh	r3, [r7, #22]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	b21b      	sxth	r3, r3
 8008aac:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 8008aae:	f107 030c 	add.w	r3, r7, #12
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff ff93 	bl	80089e0 <lv_obj_invalidate_area>

}
 8008aba:	bf00      	nop
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <lv_obj_area_is_visible>:

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b08a      	sub	sp, #40	; 0x28
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8008acc:	2101      	movs	r1, #1
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7fc fd33 	bl	800553a <lv_obj_has_flag>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <lv_obj_area_is_visible+0x1c>
 8008ada:	2300      	movs	r3, #0
 8008adc:	e0b2      	b.n	8008c44 <lv_obj_area_is_visible+0x182>

    /*Invalidate the object only if it belongs to the current or previous or one of the layers'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f004 f8c2 	bl	800cc68 <lv_obj_get_screen>
 8008ae4:	6238      	str	r0, [r7, #32]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8008ae6:	6a38      	ldr	r0, [r7, #32]
 8008ae8:	f004 f8d2 	bl	800cc90 <lv_obj_get_disp>
 8008aec:	61f8      	str	r0, [r7, #28]
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8008aee:	69f8      	ldr	r0, [r7, #28]
 8008af0:	f7fb fb5f 	bl	80041b2 <lv_disp_get_scr_act>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d016      	beq.n	8008b2a <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8008afc:	69f8      	ldr	r0, [r7, #28]
 8008afe:	f7fb fb6d 	bl	80041dc <lv_disp_get_scr_prev>
 8008b02:	4602      	mov	r2, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d00f      	beq.n	8008b2a <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8008b0a:	69f8      	ldr	r0, [r7, #28]
 8008b0c:	f7fb fb7b 	bl	8004206 <lv_disp_get_layer_top>
 8008b10:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d008      	beq.n	8008b2a <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8008b18:	69f8      	ldr	r0, [r7, #28]
 8008b1a:	f7fb fb89 	bl	8004230 <lv_disp_get_layer_sys>
 8008b1e:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_layer_top(disp) &&
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d001      	beq.n	8008b2a <lv_obj_area_is_visible+0x68>
        return false;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e08c      	b.n	8008c44 <lv_obj_area_is_visible+0x182>
    }

    /*Truncate the area to the object*/
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8008b2a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7fc fd18 	bl	8005564 <lv_obj_has_flag_any>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f083 0301 	eor.w	r3, r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d03c      	beq.n	8008bba <lv_obj_area_is_visible+0xf8>
        lv_area_t obj_coords;
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7fe fcee 	bl	8007522 <_lv_obj_get_ext_draw_size>
 8008b46:	4603      	mov	r3, r0
 8008b48:	837b      	strh	r3, [r7, #26]
        lv_area_copy(&obj_coords, &obj->coords);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f103 0214 	add.w	r2, r3, #20
 8008b50:	f107 0310 	add.w	r3, r7, #16
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fd0d 	bl	8007576 <lv_area_copy>
        obj_coords.x1 -= ext_size;
 8008b5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	8b7b      	ldrh	r3, [r7, #26]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	b21b      	sxth	r3, r3
 8008b6a:	823b      	strh	r3, [r7, #16]
        obj_coords.y1 -= ext_size;
 8008b6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	8b7b      	ldrh	r3, [r7, #26]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	b21b      	sxth	r3, r3
 8008b7a:	827b      	strh	r3, [r7, #18]
        obj_coords.x2 += ext_size;
 8008b7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	8b7b      	ldrh	r3, [r7, #26]
 8008b84:	4413      	add	r3, r2
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	b21b      	sxth	r3, r3
 8008b8a:	82bb      	strh	r3, [r7, #20]
        obj_coords.y2 += ext_size;
 8008b8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	8b7b      	ldrh	r3, [r7, #26]
 8008b94:	4413      	add	r3, r2
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	b21b      	sxth	r3, r3
 8008b9a:	82fb      	strh	r3, [r7, #22]

        /*The area is not on the object*/
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8008b9c:	f107 0310 	add.w	r3, r7, #16
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6838      	ldr	r0, [r7, #0]
 8008ba6:	f016 fb1b 	bl	801f1e0 <_lv_area_intersect>
 8008baa:	4603      	mov	r3, r0
 8008bac:	f083 0301 	eor.w	r3, r3, #1
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <lv_obj_area_is_visible+0xf8>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e044      	b.n	8008c44 <lv_obj_area_is_visible+0x182>
    }

    lv_obj_get_transformed_area(obj, area, true, false);
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff fe5d 	bl	8008880 <lv_obj_get_transformed_area>


    /*Truncate recursively to the parents*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f004 f89c 	bl	800cd04 <lv_obj_get_parent>
 8008bcc:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 8008bce:	e035      	b.n	8008c3c <lv_obj_area_is_visible+0x17a>
        /*If the parent is hidden then the child is hidden and won't be drawn*/
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bd4:	f7fc fcb1 	bl	800553a <lv_obj_has_flag>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <lv_obj_area_is_visible+0x120>
 8008bde:	2300      	movs	r3, #0
 8008be0:	e030      	b.n	8008c44 <lv_obj_area_is_visible+0x182>

        /*Truncate to the parent and if no common parts break*/
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8008be2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008be8:	f7fc fcbc 	bl	8005564 <lv_obj_has_flag_any>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f083 0301 	eor.w	r3, r3, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01d      	beq.n	8008c34 <lv_obj_area_is_visible+0x172>
            lv_area_t par_area = par->coords;
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfa:	f107 0308 	add.w	r3, r7, #8
 8008bfe:	3214      	adds	r2, #20
 8008c00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c04:	e883 0003 	stmia.w	r3, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 8008c08:	f107 0108 	add.w	r1, r7, #8
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2201      	movs	r2, #1
 8008c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c12:	f7ff fe35 	bl	8008880 <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 8008c16:	f107 0308 	add.w	r3, r7, #8
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6838      	ldr	r0, [r7, #0]
 8008c20:	f016 fade 	bl	801f1e0 <_lv_area_intersect>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f083 0301 	eor.w	r3, r3, #1
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <lv_obj_area_is_visible+0x172>
 8008c30:	2300      	movs	r3, #0
 8008c32:	e007      	b.n	8008c44 <lv_obj_area_is_visible+0x182>
        }

        par = lv_obj_get_parent(par);
 8008c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c36:	f004 f865 	bl	800cd04 <lv_obj_get_parent>
 8008c3a:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1c6      	bne.n	8008bd0 <lv_obj_area_is_visible+0x10e>
    }

    return true;
 8008c42:	2301      	movs	r3, #1
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3728      	adds	r7, #40	; 0x28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <lv_clamp_width>:

    return res;
}

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 8008c4c:	b490      	push	{r4, r7}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	4611      	mov	r1, r2
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4623      	mov	r3, r4
 8008c5c:	80fb      	strh	r3, [r7, #6]
 8008c5e:	4603      	mov	r3, r0
 8008c60:	80bb      	strh	r3, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	807b      	strh	r3, [r7, #2]
 8008c66:	4613      	mov	r3, r2
 8008c68:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8008c6a:	88bb      	ldrh	r3, [r7, #4]
 8008c6c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c74:	d123      	bne.n	8008cbe <lv_clamp_width+0x72>
 8008c76:	88bb      	ldrh	r3, [r7, #4]
 8008c78:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008c7c:	b21b      	sxth	r3, r3
 8008c7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008c82:	dc1c      	bgt.n	8008cbe <lv_clamp_width+0x72>
 8008c84:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008c88:	88bb      	ldrh	r3, [r7, #4]
 8008c8a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008c8e:	b21b      	sxth	r3, r3
 8008c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c94:	dd06      	ble.n	8008ca4 <lv_clamp_width+0x58>
 8008c96:	88bb      	ldrh	r3, [r7, #4]
 8008c98:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008c9c:	b21b      	sxth	r3, r3
 8008c9e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008ca2:	e003      	b.n	8008cac <lv_clamp_width+0x60>
 8008ca4:	88bb      	ldrh	r3, [r7, #4]
 8008ca6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008caa:	b21b      	sxth	r3, r3
 8008cac:	fb02 f303 	mul.w	r3, r2, r3
 8008cb0:	4a21      	ldr	r2, [pc, #132]	; (8008d38 <lv_clamp_width+0xec>)
 8008cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8008cb6:	1152      	asrs	r2, r2, #5
 8008cb8:	17db      	asrs	r3, r3, #31
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8008cbe:	887b      	ldrh	r3, [r7, #2]
 8008cc0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc8:	d123      	bne.n	8008d12 <lv_clamp_width+0xc6>
 8008cca:	887b      	ldrh	r3, [r7, #2]
 8008ccc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008cd0:	b21b      	sxth	r3, r3
 8008cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008cd6:	dc1c      	bgt.n	8008d12 <lv_clamp_width+0xc6>
 8008cd8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008cdc:	887b      	ldrh	r3, [r7, #2]
 8008cde:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ce8:	dd06      	ble.n	8008cf8 <lv_clamp_width+0xac>
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008cf0:	b21b      	sxth	r3, r3
 8008cf2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008cf6:	e003      	b.n	8008d00 <lv_clamp_width+0xb4>
 8008cf8:	887b      	ldrh	r3, [r7, #2]
 8008cfa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008cfe:	b21b      	sxth	r3, r3
 8008d00:	fb02 f303 	mul.w	r3, r2, r3
 8008d04:	4a0c      	ldr	r2, [pc, #48]	; (8008d38 <lv_clamp_width+0xec>)
 8008d06:	fb82 1203 	smull	r1, r2, r2, r3
 8008d0a:	1152      	asrs	r2, r2, #5
 8008d0c:	17db      	asrs	r3, r3, #31
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_width, width, max_width);
 8008d12:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	bfa8      	it	ge
 8008d1e:	4613      	movge	r3, r2
 8008d20:	b21b      	sxth	r3, r3
 8008d22:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	bfb8      	it	lt
 8008d2a:	4613      	movlt	r3, r2
 8008d2c:	b21b      	sxth	r3, r3
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bc90      	pop	{r4, r7}
 8008d36:	4770      	bx	lr
 8008d38:	51eb851f 	.word	0x51eb851f

08008d3c <lv_clamp_height>:

lv_coord_t lv_clamp_height(lv_coord_t height, lv_coord_t min_height, lv_coord_t max_height, lv_coord_t ref_height)
{
 8008d3c:	b490      	push	{r4, r7}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	80fb      	strh	r3, [r7, #6]
 8008d4e:	4603      	mov	r3, r0
 8008d50:	80bb      	strh	r3, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	807b      	strh	r3, [r7, #2]
 8008d56:	4613      	mov	r3, r2
 8008d58:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 8008d5a:	88bb      	ldrh	r3, [r7, #4]
 8008d5c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d64:	d123      	bne.n	8008dae <lv_clamp_height+0x72>
 8008d66:	88bb      	ldrh	r3, [r7, #4]
 8008d68:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008d6c:	b21b      	sxth	r3, r3
 8008d6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d72:	dc1c      	bgt.n	8008dae <lv_clamp_height+0x72>
 8008d74:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008d78:	88bb      	ldrh	r3, [r7, #4]
 8008d7a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008d7e:	b21b      	sxth	r3, r3
 8008d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d84:	dd06      	ble.n	8008d94 <lv_clamp_height+0x58>
 8008d86:	88bb      	ldrh	r3, [r7, #4]
 8008d88:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008d8c:	b21b      	sxth	r3, r3
 8008d8e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008d92:	e003      	b.n	8008d9c <lv_clamp_height+0x60>
 8008d94:	88bb      	ldrh	r3, [r7, #4]
 8008d96:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008d9a:	b21b      	sxth	r3, r3
 8008d9c:	fb02 f303 	mul.w	r3, r2, r3
 8008da0:	4a21      	ldr	r2, [pc, #132]	; (8008e28 <lv_clamp_height+0xec>)
 8008da2:	fb82 1203 	smull	r1, r2, r2, r3
 8008da6:	1152      	asrs	r2, r2, #5
 8008da8:	17db      	asrs	r3, r3, #31
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8008dae:	887b      	ldrh	r3, [r7, #2]
 8008db0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db8:	d123      	bne.n	8008e02 <lv_clamp_height+0xc6>
 8008dba:	887b      	ldrh	r3, [r7, #2]
 8008dbc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008dc0:	b21b      	sxth	r3, r3
 8008dc2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008dc6:	dc1c      	bgt.n	8008e02 <lv_clamp_height+0xc6>
 8008dc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008dcc:	887b      	ldrh	r3, [r7, #2]
 8008dce:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008dd2:	b21b      	sxth	r3, r3
 8008dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dd8:	dd06      	ble.n	8008de8 <lv_clamp_height+0xac>
 8008dda:	887b      	ldrh	r3, [r7, #2]
 8008ddc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008de0:	b21b      	sxth	r3, r3
 8008de2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008de6:	e003      	b.n	8008df0 <lv_clamp_height+0xb4>
 8008de8:	887b      	ldrh	r3, [r7, #2]
 8008dea:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008dee:	b21b      	sxth	r3, r3
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	4a0c      	ldr	r2, [pc, #48]	; (8008e28 <lv_clamp_height+0xec>)
 8008df6:	fb82 1203 	smull	r1, r2, r2, r3
 8008dfa:	1152      	asrs	r2, r2, #5
 8008dfc:	17db      	asrs	r3, r3, #31
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_height, height, max_height);
 8008e02:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8008e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	bfa8      	it	ge
 8008e0e:	4613      	movge	r3, r2
 8008e10:	b21b      	sxth	r3, r3
 8008e12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	bfb8      	it	lt
 8008e1a:	4613      	movlt	r3, r2
 8008e1c:	b21b      	sxth	r3, r3
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bc90      	pop	{r4, r7}
 8008e26:	4770      	bx	lr
 8008e28:	51eb851f 	.word	0x51eb851f

08008e2c <calc_content_width>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
 8008e2c:	b590      	push	{r4, r7, lr}
 8008e2e:	b08d      	sub	sp, #52	; 0x34
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8008e34:	2200      	movs	r2, #0
 8008e36:	2100      	movs	r1, #0
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 f923 	bl	800a084 <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008e3e:	2100      	movs	r1, #0
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7fe fd3b 	bl	80078bc <lv_obj_get_style_border_width>
 8008e46:	4603      	mov	r3, r0
 8008e48:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7fe fd23 	bl	8007898 <lv_obj_get_style_pad_right>
 8008e52:	4603      	mov	r3, r0
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e58:	4413      	add	r3, r2
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8008e5e:	2100      	movs	r1, #0
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7fe fd07 	bl	8007874 <lv_obj_get_style_pad_left>
 8008e66:	4603      	mov	r3, r0
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e6c:	4413      	add	r3, r2
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff f8f0 	bl	8008058 <lv_obj_get_self_width>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e7e:	4413      	add	r3, r2
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e84:	4413      	add	r3, r2
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	843b      	strh	r3, [r7, #32]

    lv_coord_t child_res = LV_COORD_MIN;
 8008e8a:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008e8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f003 ff48 	bl	800cd26 <lv_obj_get_child_cnt>
 8008e96:	61f8      	str	r0, [r7, #28]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008e98:	2100      	movs	r1, #0
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7fe fd32 	bl	8007904 <lv_obj_get_style_base_dir>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	f040 8094 	bne.w	8008fd0 <calc_content_width+0x1a4>
        for(i = 0; i < child_cnt; i++) {
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eac:	e07f      	b.n	8008fae <calc_content_width+0x182>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	613b      	str	r3, [r7, #16]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008ebe:	4994      	ldr	r1, [pc, #592]	; (8009110 <calc_content_width+0x2e4>)
 8008ec0:	6938      	ldr	r0, [r7, #16]
 8008ec2:	f7fc fb4f 	bl	8005564 <lv_obj_has_flag_any>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d16c      	bne.n	8008fa6 <calc_content_width+0x17a>

            if(!lv_obj_is_layout_positioned(child)) {
 8008ecc:	6938      	ldr	r0, [r7, #16]
 8008ece:	f7fe ff67 	bl	8007da0 <lv_obj_is_layout_positioned>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f083 0301 	eor.w	r3, r3, #1
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d053      	beq.n	8008f86 <calc_content_width+0x15a>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 8008ede:	2100      	movs	r1, #0
 8008ee0:	6938      	ldr	r0, [r7, #16]
 8008ee2:	f7fe fc25 	bl	8007730 <lv_obj_get_style_align>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
                switch(align) {
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d825      	bhi.n	8008f3c <calc_content_width+0x110>
 8008ef0:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <calc_content_width+0xcc>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f1d 	.word	0x08008f1d
 8008efc:	08008f3d 	.word	0x08008f3d
 8008f00:	08008f3d 	.word	0x08008f3d
 8008f04:	08008f1d 	.word	0x08008f1d
 8008f08:	08008f3d 	.word	0x08008f3d
 8008f0c:	08008f3d 	.word	0x08008f3d
 8008f10:	08008f1d 	.word	0x08008f1d
 8008f14:	08008f3d 	.word	0x08008f3d
 8008f18:	08008f1d 	.word	0x08008f1d
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_RIGHT:
                    case LV_ALIGN_BOTTOM_RIGHT:
                    case LV_ALIGN_RIGHT_MID:
                        /*Normal right aligns. Other are ignored due to possible circular dependencies*/
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8008f22:	461a      	mov	r2, r3
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008f32:	4293      	cmp	r3, r2
 8008f34:	bfb8      	it	lt
 8008f36:	4613      	movlt	r3, r2
 8008f38:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8008f3a:	e035      	b.n	8008fa8 <calc_content_width+0x17c>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	6938      	ldr	r0, [r7, #16]
 8008f40:	f7fe fbd2 	bl	80076e8 <lv_obj_get_style_x>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d12e      	bne.n	8008fa8 <calc_content_width+0x17c>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8008f4a:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	3314      	adds	r3, #20
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fb2e 	bl	80075b4 <lv_area_get_width>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008f60:	4413      	add	r3, r2
 8008f62:	429c      	cmp	r4, r3
 8008f64:	dc0b      	bgt.n	8008f7e <calc_content_width+0x152>
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	3314      	adds	r3, #20
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fb22 	bl	80075b4 <lv_area_get_width>
 8008f70:	4603      	mov	r3, r0
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f76:	4413      	add	r3, r2
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	b21b      	sxth	r3, r3
 8008f7c:	e001      	b.n	8008f82 <calc_content_width+0x156>
 8008f7e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008f82:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008f84:	e010      	b.n	8008fa8 <calc_content_width+0x17c>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	bfb8      	it	lt
 8008fa0:	4613      	movlt	r3, r2
 8008fa2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008fa4:	e000      	b.n	8008fa8 <calc_content_width+0x17c>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008fa6:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	3301      	adds	r3, #1
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	f4ff af7b 	bcc.w	8008eae <calc_content_width+0x82>
            }
        }
        if(child_res != LV_COORD_MIN) {
 8008fb8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008fbc:	4a55      	ldr	r2, [pc, #340]	; (8009114 <calc_content_width+0x2e8>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	f000 8092 	beq.w	80090e8 <calc_content_width+0x2bc>
            child_res += pad_left;
 8008fc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fc8:	4413      	add	r3, r2
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008fce:	e08b      	b.n	80090e8 <calc_content_width+0x2bc>
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fd4:	e07a      	b.n	80090cc <calc_content_width+0x2a0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	61bb      	str	r3, [r7, #24]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008fe6:	494a      	ldr	r1, [pc, #296]	; (8009110 <calc_content_width+0x2e4>)
 8008fe8:	69b8      	ldr	r0, [r7, #24]
 8008fea:	f7fc fabb 	bl	8005564 <lv_obj_has_flag_any>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d167      	bne.n	80090c4 <calc_content_width+0x298>

            if(!lv_obj_is_layout_positioned(child)) {
 8008ff4:	69b8      	ldr	r0, [r7, #24]
 8008ff6:	f7fe fed3 	bl	8007da0 <lv_obj_is_layout_positioned>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f083 0301 	eor.w	r3, r3, #1
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d04e      	beq.n	80090a4 <calc_content_width+0x278>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 8009006:	2100      	movs	r1, #0
 8009008:	69b8      	ldr	r0, [r7, #24]
 800900a:	f7fe fb91 	bl	8007730 <lv_obj_get_style_align>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]
                switch(align) {
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	2b07      	cmp	r3, #7
 8009016:	bf8c      	ite	hi
 8009018:	2201      	movhi	r2, #1
 800901a:	2200      	movls	r2, #0
 800901c:	b2d2      	uxtb	r2, r2
 800901e:	2a00      	cmp	r2, #0
 8009020:	d11b      	bne.n	800905a <calc_content_width+0x22e>
 8009022:	2201      	movs	r2, #1
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	f003 0393 	and.w	r3, r3, #147	; 0x93
 800902c:	2b00      	cmp	r3, #0
 800902e:	bf14      	ite	ne
 8009030:	2301      	movne	r3, #1
 8009032:	2300      	moveq	r3, #0
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00f      	beq.n	800905a <calc_content_width+0x22e>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009040:	461a      	mov	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009050:	4293      	cmp	r3, r2
 8009052:	bfb8      	it	lt
 8009054:	4613      	movlt	r3, r2
 8009056:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8009058:	e035      	b.n	80090c6 <calc_content_width+0x29a>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_y(child, 0) == 0) {
 800905a:	2100      	movs	r1, #0
 800905c:	69b8      	ldr	r0, [r7, #24]
 800905e:	f7fe fb55 	bl	800770c <lv_obj_get_style_y>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d12e      	bne.n	80090c6 <calc_content_width+0x29a>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8009068:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	3314      	adds	r3, #20
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fa9f 	bl	80075b4 <lv_area_get_width>
 8009076:	4603      	mov	r3, r0
 8009078:	461a      	mov	r2, r3
 800907a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800907e:	4413      	add	r3, r2
 8009080:	429c      	cmp	r4, r3
 8009082:	dc0b      	bgt.n	800909c <calc_content_width+0x270>
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	3314      	adds	r3, #20
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fa93 	bl	80075b4 <lv_area_get_width>
 800908e:	4603      	mov	r3, r0
 8009090:	b29a      	uxth	r2, r3
 8009092:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009094:	4413      	add	r3, r2
 8009096:	b29b      	uxth	r3, r3
 8009098:	b21b      	sxth	r3, r3
 800909a:	e001      	b.n	80090a0 <calc_content_width+0x274>
 800909c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80090a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80090a2:	e010      	b.n	80090c6 <calc_content_width+0x29a>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80090aa:	461a      	mov	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80090ba:	4293      	cmp	r3, r2
 80090bc:	bfb8      	it	lt
 80090be:	4613      	movlt	r3, r2
 80090c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80090c2:	e000      	b.n	80090c6 <calc_content_width+0x29a>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80090c4:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	3301      	adds	r3, #1
 80090ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80090cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d380      	bcc.n	8008fd6 <calc_content_width+0x1aa>
            }
        }

        if(child_res != LV_COORD_MIN) {
 80090d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80090d8:	4a0e      	ldr	r2, [pc, #56]	; (8009114 <calc_content_width+0x2e8>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d004      	beq.n	80090e8 <calc_content_width+0x2bc>
            child_res += pad_right;
 80090de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090e2:	4413      	add	r3, r2
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 80090e8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80090ec:	4a09      	ldr	r2, [pc, #36]	; (8009114 <calc_content_width+0x2e8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d102      	bne.n	80090f8 <calc_content_width+0x2cc>
 80090f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80090f6:	e007      	b.n	8009108 <calc_content_width+0x2dc>
    else return LV_MAX(child_res, self_w);
 80090f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80090fc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009100:	4293      	cmp	r3, r2
 8009102:	bfb8      	it	lt
 8009104:	4613      	movlt	r3, r2
 8009106:	b21b      	sxth	r3, r3
}
 8009108:	4618      	mov	r0, r3
 800910a:	3734      	adds	r7, #52	; 0x34
 800910c:	46bd      	mov	sp, r7
 800910e:	bd90      	pop	{r4, r7, pc}
 8009110:	00040001 	.word	0x00040001
 8009114:	ffffe001 	.word	0xffffe001

08009118 <calc_content_height>:

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b08b      	sub	sp, #44	; 0x2c
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8009120:	2200      	movs	r2, #0
 8009122:	2100      	movs	r1, #0
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 ffd1 	bl	800a0cc <lv_obj_scroll_to_y>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800912a:	2100      	movs	r1, #0
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7fe fbc5 	bl	80078bc <lv_obj_get_style_border_width>
 8009132:	4603      	mov	r3, r0
 8009134:	83fb      	strh	r3, [r7, #30]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8009136:	2100      	movs	r1, #0
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7fe fb77 	bl	800782c <lv_obj_get_style_pad_top>
 800913e:	4603      	mov	r3, r0
 8009140:	b29a      	uxth	r2, r3
 8009142:	8bfb      	ldrh	r3, [r7, #30]
 8009144:	4413      	add	r3, r2
 8009146:	b29b      	uxth	r3, r3
 8009148:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 800914a:	2100      	movs	r1, #0
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7fe fb7f 	bl	8007850 <lv_obj_get_style_pad_bottom>
 8009152:	4603      	mov	r3, r0
 8009154:	b29a      	uxth	r2, r3
 8009156:	8bfb      	ldrh	r3, [r7, #30]
 8009158:	4413      	add	r3, r2
 800915a:	b29b      	uxth	r3, r3
 800915c:	837b      	strh	r3, [r7, #26]

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7fe ff90 	bl	8008084 <lv_obj_get_self_height>
 8009164:	4603      	mov	r3, r0
 8009166:	b29a      	uxth	r2, r3
 8009168:	8bbb      	ldrh	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	b29a      	uxth	r2, r3
 800916e:	8b7b      	ldrh	r3, [r7, #26]
 8009170:	4413      	add	r3, r2
 8009172:	b29b      	uxth	r3, r3
 8009174:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = LV_COORD_MIN;
 8009176:	f24e 0301 	movw	r3, #57345	; 0xe001
 800917a:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f003 fdd2 	bl	800cd26 <lv_obj_get_child_cnt>
 8009182:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 8009184:	2300      	movs	r3, #0
 8009186:	623b      	str	r3, [r7, #32]
 8009188:	e06b      	b.n	8009262 <calc_content_height+0x14a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	613b      	str	r3, [r7, #16]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800919a:	4940      	ldr	r1, [pc, #256]	; (800929c <calc_content_height+0x184>)
 800919c:	6938      	ldr	r0, [r7, #16]
 800919e:	f7fc f9e1 	bl	8005564 <lv_obj_has_flag_any>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d156      	bne.n	8009256 <calc_content_height+0x13e>


        if(!lv_obj_is_layout_positioned(child)) {
 80091a8:	6938      	ldr	r0, [r7, #16]
 80091aa:	f7fe fdf9 	bl	8007da0 <lv_obj_is_layout_positioned>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f083 0301 	eor.w	r3, r3, #1
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d03d      	beq.n	8009236 <calc_content_height+0x11e>
            lv_align_t align = lv_obj_get_style_align(child, 0);
 80091ba:	2100      	movs	r1, #0
 80091bc:	6938      	ldr	r0, [r7, #16]
 80091be:	f7fe fab7 	bl	8007730 <lv_obj_get_style_align>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
            switch(align) {
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d80f      	bhi.n	80091ec <calc_content_height+0xd4>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80091d2:	461a      	mov	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80091e2:	4293      	cmp	r3, r2
 80091e4:	bfb8      	it	lt
 80091e6:	4613      	movlt	r3, r2
 80091e8:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 80091ea:	e037      	b.n	800925c <calc_content_height+0x144>
                default:
                    /* Consider other cases only if y=0 and use the height of the object.
                     * With y!=0 circular dependency could occur. */
                    if(lv_obj_get_style_y(child, 0) == 0) {
 80091ec:	2100      	movs	r1, #0
 80091ee:	6938      	ldr	r0, [r7, #16]
 80091f0:	f7fe fa8c 	bl	800770c <lv_obj_get_style_y>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d12f      	bne.n	800925a <calc_content_height+0x142>
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 80091fa:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	3314      	adds	r3, #20
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe f9ed 	bl	80075e2 <lv_area_get_height>
 8009208:	4603      	mov	r3, r0
 800920a:	461a      	mov	r2, r3
 800920c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009210:	4413      	add	r3, r2
 8009212:	429c      	cmp	r4, r3
 8009214:	dc0b      	bgt.n	800922e <calc_content_height+0x116>
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	3314      	adds	r3, #20
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe f9e1 	bl	80075e2 <lv_area_get_height>
 8009220:	4603      	mov	r3, r0
 8009222:	b29a      	uxth	r2, r3
 8009224:	8bbb      	ldrh	r3, [r7, #28]
 8009226:	4413      	add	r3, r2
 8009228:	b29b      	uxth	r3, r3
 800922a:	b21b      	sxth	r3, r3
 800922c:	e001      	b.n	8009232 <calc_content_height+0x11a>
 800922e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009232:	84fb      	strh	r3, [r7, #38]	; 0x26
                    }
                    break;
 8009234:	e011      	b.n	800925a <calc_content_height+0x142>
            }
        }
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800923c:	461a      	mov	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800924c:	4293      	cmp	r3, r2
 800924e:	bfb8      	it	lt
 8009250:	4613      	movlt	r3, r2
 8009252:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009254:	e002      	b.n	800925c <calc_content_height+0x144>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009256:	bf00      	nop
 8009258:	e000      	b.n	800925c <calc_content_height+0x144>
                    break;
 800925a:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	3301      	adds	r3, #1
 8009260:	623b      	str	r3, [r7, #32]
 8009262:	6a3a      	ldr	r2, [r7, #32]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	429a      	cmp	r2, r3
 8009268:	d38f      	bcc.n	800918a <calc_content_height+0x72>
        }
    }

    if(child_res != LV_COORD_MIN) {
 800926a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800926e:	4a0c      	ldr	r2, [pc, #48]	; (80092a0 <calc_content_height+0x188>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00d      	beq.n	8009290 <calc_content_height+0x178>
        child_res += pad_bottom;
 8009274:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009276:	8b7b      	ldrh	r3, [r7, #26]
 8009278:	4413      	add	r3, r2
 800927a:	b29b      	uxth	r3, r3
 800927c:	84fb      	strh	r3, [r7, #38]	; 0x26
        return LV_MAX(child_res, self_h);
 800927e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009282:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009286:	4293      	cmp	r3, r2
 8009288:	bfb8      	it	lt
 800928a:	4613      	movlt	r3, r2
 800928c:	b21b      	sxth	r3, r3
 800928e:	e001      	b.n	8009294 <calc_content_height+0x17c>
    }
    else {
        return self_h;
 8009290:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    }

}
 8009294:	4618      	mov	r0, r3
 8009296:	372c      	adds	r7, #44	; 0x2c
 8009298:	46bd      	mov	sp, r7
 800929a:	bd90      	pop	{r4, r7, pc}
 800929c:	00040001 	.word	0x00040001
 80092a0:	ffffe001 	.word	0xffffe001

080092a4 <layout_update_core>:

static void layout_update_core(lv_obj_t * obj)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f003 fd3a 	bl	800cd26 <lv_obj_get_child_cnt>
 80092b2:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	e00d      	b.n	80092d6 <layout_update_core+0x32>
        lv_obj_t * child = obj->spec_attr->children[i];
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60fb      	str	r3, [r7, #12]
        layout_update_core(child);
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff ffea 	bl	80092a4 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	3301      	adds	r3, #1
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d3ed      	bcc.n	80092ba <layout_update_core+0x16>
    }

    if(obj->layout_inv == 0) return;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d034      	beq.n	8009358 <layout_update_core+0xb4>

    obj->layout_inv = 0;
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80092f4:	f36f 0300 	bfc	r3, #0, #1
 80092f8:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    lv_obj_refr_size(obj);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7fe fb13 	bl	8007928 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7fe fefa 	bl	80080fc <lv_obj_refr_pos>

    if(child_cnt > 0) {
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d025      	beq.n	800935a <layout_update_core+0xb6>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 800930e:	2100      	movs	r1, #0
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7fe fae5 	bl	80078e0 <lv_obj_get_style_layout>
 8009316:	4603      	mov	r3, r0
 8009318:	617b      	str	r3, [r7, #20]
        if(layout_id > 0 && layout_id <= layout_cnt) {
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01c      	beq.n	800935a <layout_update_core+0xb6>
 8009320:	4b0f      	ldr	r3, [pc, #60]	; (8009360 <layout_update_core+0xbc>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	429a      	cmp	r2, r3
 8009328:	d817      	bhi.n	800935a <layout_update_core+0xb6>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 800932a:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <layout_update_core+0xc0>)
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	6979      	ldr	r1, [r7, #20]
 8009330:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009334:	440b      	add	r3, r1
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	4413      	add	r3, r2
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	613b      	str	r3, [r7, #16]
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <layout_update_core+0xc0>)
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	6979      	ldr	r1, [r7, #20]
 8009344:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009348:	440b      	add	r3, r1
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	4413      	add	r3, r2
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6939      	ldr	r1, [r7, #16]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
 8009356:	e000      	b.n	800935a <layout_update_core+0xb6>
    if(obj->layout_inv == 0) return;
 8009358:	bf00      	nop
        }
    }
}
 800935a:	3720      	adds	r7, #32
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	200006f0 	.word	0x200006f0
 8009364:	20000898 	.word	0x20000898

08009368 <transform_point>:

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 8009368:	b590      	push	{r4, r7, lr}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	71fb      	strb	r3, [r7, #7]
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
 8009376:	2100      	movs	r1, #0
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f7fe fa21 	bl	80077c0 <lv_obj_get_style_transform_angle>
 800937e:	4603      	mov	r3, r0
 8009380:	82fb      	strh	r3, [r7, #22]
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);
 8009382:	2100      	movs	r1, #0
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f7fe fa09 	bl	800779c <lv_obj_get_style_transform_zoom>
 800938a:	4603      	mov	r3, r0
 800938c:	82bb      	strh	r3, [r7, #20]

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800938e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d105      	bne.n	80093a2 <transform_point+0x3a>
 8009396:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800939a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800939e:	f000 80a6 	beq.w	80094ee <transform_point+0x186>

    lv_point_t pivot = {
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 80093a2:	2100      	movs	r1, #0
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f7fe fa1d 	bl	80077e4 <lv_obj_get_style_transform_pivot_x>
 80093aa:	4603      	mov	r3, r0
    lv_point_t pivot = {
 80093ac:	823b      	strh	r3, [r7, #16]
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 80093ae:	2100      	movs	r1, #0
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f7fe fa29 	bl	8007808 <lv_obj_get_style_transform_pivot_y>
 80093b6:	4603      	mov	r3, r0
    lv_point_t pivot = {
 80093b8:	827b      	strh	r3, [r7, #18]
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 80093ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80093c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c8:	d12d      	bne.n	8009426 <transform_point+0xbe>
 80093ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80093ce:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80093d8:	dc25      	bgt.n	8009426 <transform_point+0xbe>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 80093da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80093de:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80093e2:	b21b      	sxth	r3, r3
 80093e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093e8:	dd07      	ble.n	80093fa <transform_point+0x92>
 80093ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80093ee:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80093f2:	b21b      	sxth	r3, r3
 80093f4:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 80093f8:	e005      	b.n	8009406 <transform_point+0x9e>
 80093fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80093fe:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009402:	b21b      	sxth	r3, r3
 8009404:	461c      	mov	r4, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3314      	adds	r3, #20
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe f8d2 	bl	80075b4 <lv_area_get_width>
 8009410:	4603      	mov	r3, r0
 8009412:	fb04 f303 	mul.w	r3, r4, r3
 8009416:	4a38      	ldr	r2, [pc, #224]	; (80094f8 <transform_point+0x190>)
 8009418:	fb82 1203 	smull	r1, r2, r2, r3
 800941c:	1152      	asrs	r2, r2, #5
 800941e:	17db      	asrs	r3, r3, #31
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	b21b      	sxth	r3, r3
 8009424:	823b      	strh	r3, [r7, #16]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 8009426:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009434:	d12d      	bne.n	8009492 <transform_point+0x12a>
 8009436:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800943a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800943e:	b21b      	sxth	r3, r3
 8009440:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009444:	dc25      	bgt.n	8009492 <transform_point+0x12a>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8009446:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800944a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800944e:	b21b      	sxth	r3, r3
 8009450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009454:	dd07      	ble.n	8009466 <transform_point+0xfe>
 8009456:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800945a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800945e:	b21b      	sxth	r3, r3
 8009460:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 8009464:	e005      	b.n	8009472 <transform_point+0x10a>
 8009466:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800946a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800946e:	b21b      	sxth	r3, r3
 8009470:	461c      	mov	r4, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3314      	adds	r3, #20
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe f8b3 	bl	80075e2 <lv_area_get_height>
 800947c:	4603      	mov	r3, r0
 800947e:	fb04 f303 	mul.w	r3, r4, r3
 8009482:	4a1d      	ldr	r2, [pc, #116]	; (80094f8 <transform_point+0x190>)
 8009484:	fb82 1203 	smull	r1, r2, r2, r3
 8009488:	1152      	asrs	r2, r2, #5
 800948a:	17db      	asrs	r3, r3, #31
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	b21b      	sxth	r3, r3
 8009490:	827b      	strh	r3, [r7, #18]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009498:	b29a      	uxth	r2, r3
 800949a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	4413      	add	r3, r2
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	b21b      	sxth	r3, r3
 80094a6:	823b      	strh	r3, [r7, #16]
    pivot.y = obj->coords.y1 + pivot.y;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	4413      	add	r3, r2
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	b21b      	sxth	r3, r3
 80094bc:	827b      	strh	r3, [r7, #18]

    if(inv) {
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <transform_point+0x172>
        angle = -angle;
 80094c4:	8afb      	ldrh	r3, [r7, #22]
 80094c6:	425b      	negs	r3, r3
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	82fb      	strh	r3, [r7, #22]
        zoom = (256 * 256) / zoom;
 80094cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80094d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80094d8:	82bb      	strh	r3, [r7, #20]
    }

    lv_point_transform(p, angle, zoom, &pivot);
 80094da:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80094de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80094e2:	f107 0310 	add.w	r3, r7, #16
 80094e6:	68b8      	ldr	r0, [r7, #8]
 80094e8:	f016 f984 	bl	801f7f4 <lv_point_transform>
 80094ec:	e000      	b.n	80094f0 <transform_point+0x188>
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 80094ee:	bf00      	nop
}
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd90      	pop	{r4, r7, pc}
 80094f6:	bf00      	nop
 80094f8:	51eb851f 	.word	0x51eb851f

080094fc <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800950a:	b29a      	uxth	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009512:	b29b      	uxth	r3, r3
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	b29b      	uxth	r3, r3
 8009518:	3301      	adds	r3, #1
 800951a:	b29b      	uxth	r3, r3
 800951c:	b21b      	sxth	r3, r3
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009540:	b29b      	uxth	r3, r3
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	b29b      	uxth	r3, r3
 8009546:	3301      	adds	r3, #1
 8009548:	b29b      	uxth	r3, r3
 800954a:	b21b      	sxth	r3, r3
}
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
    a->var = var;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	601a      	str	r2, [r3, #0]
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	605a      	str	r2, [r3, #4]
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80095ca:	bf00      	nop
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <lv_anim_set_path_cb>:
 * Set the path (curve) of the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function to set the current value of the animation.
 */
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	61da      	str	r2, [r3, #28]
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	60da      	str	r2, [r3, #12]
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <lv_obj_get_style_width>:
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8009618:	2201      	movs	r2, #1
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f002 fa8d 	bl	800bb3c <lv_obj_get_style_prop>
 8009622:	4603      	mov	r3, r0
 8009624:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	b21b      	sxth	r3, r3
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <lv_obj_get_style_pad_top>:
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800963c:	2210      	movs	r2, #16
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f002 fa7b 	bl	800bb3c <lv_obj_get_style_prop>
 8009646:	4603      	mov	r3, r0
 8009648:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	b21b      	sxth	r3, r3
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <lv_obj_get_style_pad_bottom>:
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009660:	2211      	movs	r2, #17
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f002 fa69 	bl	800bb3c <lv_obj_get_style_prop>
 800966a:	4603      	mov	r3, r0
 800966c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	b21b      	sxth	r3, r3
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <lv_obj_get_style_pad_left>:
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009684:	2212      	movs	r2, #18
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f002 fa57 	bl	800bb3c <lv_obj_get_style_prop>
 800968e:	4603      	mov	r3, r0
 8009690:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	b21b      	sxth	r3, r3
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <lv_obj_get_style_pad_right>:
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80096a8:	2213      	movs	r2, #19
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f002 fa45 	bl	800bb3c <lv_obj_get_style_prop>
 80096b2:	4603      	mov	r3, r0
 80096b4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	b21b      	sxth	r3, r3
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <lv_obj_get_style_bg_opa>:
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80096cc:	2221      	movs	r2, #33	; 0x21
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f002 fa33 	bl	800bb3c <lv_obj_get_style_prop>
 80096d6:	4603      	mov	r3, r0
 80096d8:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	b2db      	uxtb	r3, r3
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <lv_obj_get_style_border_opa>:
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80096f0:	2231      	movs	r2, #49	; 0x31
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f002 fa21 	bl	800bb3c <lv_obj_get_style_prop>
 80096fa:	4603      	mov	r3, r0
 80096fc:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	b2db      	uxtb	r3, r3
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <lv_obj_get_style_border_width>:
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009714:	2232      	movs	r2, #50	; 0x32
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f002 fa0f 	bl	800bb3c <lv_obj_get_style_prop>
 800971e:	4603      	mov	r3, r0
 8009720:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	b21b      	sxth	r3, r3
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <lv_obj_get_style_base_dir>:
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8009738:	2216      	movs	r2, #22
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f002 f9fd 	bl	800bb3c <lv_obj_get_style_prop>
 8009742:	4603      	mov	r3, r0
 8009744:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	b2db      	uxtb	r3, r3
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <lv_obj_set_scrollbar_mode>:
/*=====================
 * Setter functions
 *====================*/

void lv_obj_set_scrollbar_mode(lv_obj_t * obj, lv_scrollbar_mode_t mode)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7fb ff34 	bl	80055cc <lv_obj_allocate_spec_attr>

    if(obj->spec_attr->scrollbar_mode == mode) return;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	7e1b      	ldrb	r3, [r3, #24]
 800976a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800976e:	b2db      	uxtb	r3, r3
 8009770:	461a      	mov	r2, r3
 8009772:	78fb      	ldrb	r3, [r7, #3]
 8009774:	429a      	cmp	r2, r3
 8009776:	d00d      	beq.n	8009794 <lv_obj_set_scrollbar_mode+0x42>
    obj->spec_attr->scrollbar_mode = mode;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	f003 0303 	and.w	r3, r3, #3
 8009782:	b2d9      	uxtb	r1, r3
 8009784:	7e13      	ldrb	r3, [r2, #24]
 8009786:	f361 0301 	bfi	r3, r1, #0, #2
 800978a:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff f95c 	bl	8008a4a <lv_obj_invalidate>
 8009792:	e000      	b.n	8009796 <lv_obj_set_scrollbar_mode+0x44>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 8009794:	bf00      	nop
}
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <lv_obj_get_scrollbar_mode>:
/*=====================
 * Getter functions
 *====================*/

lv_scrollbar_mode_t lv_obj_get_scrollbar_mode(const lv_obj_t * obj)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d006      	beq.n	80097ba <lv_obj_get_scrollbar_mode+0x1e>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	7e1b      	ldrb	r3, [r3, #24]
 80097b2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	e000      	b.n	80097bc <lv_obj_get_scrollbar_mode+0x20>
    else return LV_SCROLLBAR_MODE_AUTO;
 80097ba:	2303      	movs	r3, #3
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <lv_obj_get_scroll_dir>:

lv_dir_t lv_obj_get_scroll_dir(const lv_obj_t * obj)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d006      	beq.n	80097e6 <lv_obj_get_scroll_dir+0x1e>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	7e5b      	ldrb	r3, [r3, #25]
 80097de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	e000      	b.n	80097e8 <lv_obj_get_scroll_dir+0x20>
    else return LV_DIR_ALL;
 80097e6:	230f      	movs	r3, #15
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <lv_obj_get_scroll_snap_x>:

lv_scroll_snap_t lv_obj_get_scroll_snap_x(const lv_obj_t * obj)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d006      	beq.n	8009812 <lv_obj_get_scroll_snap_x+0x1e>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	7e1b      	ldrb	r3, [r3, #24]
 800980a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800980e:	b2db      	uxtb	r3, r3
 8009810:	e000      	b.n	8009814 <lv_obj_get_scroll_snap_x+0x20>
    else return LV_SCROLL_SNAP_NONE;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <lv_obj_get_scroll_snap_y>:

lv_scroll_snap_t lv_obj_get_scroll_snap_y(const lv_obj_t * obj)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d006      	beq.n	800983e <lv_obj_get_scroll_snap_y+0x1e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	7e1b      	ldrb	r3, [r3, #24]
 8009836:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800983a:	b2db      	uxtb	r3, r3
 800983c:	e000      	b.n	8009840 <lv_obj_get_scroll_snap_y+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <lv_obj_get_scroll_x>:

lv_coord_t lv_obj_get_scroll_x(const lv_obj_t * obj)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <lv_obj_get_scroll_x+0x14>
 800985c:	2300      	movs	r3, #0
 800985e:	e007      	b.n	8009870 <lv_obj_get_scroll_x+0x24>
    return -obj->spec_attr->scroll.x;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009868:	b29b      	uxth	r3, r3
 800986a:	425b      	negs	r3, r3
 800986c:	b29b      	uxth	r3, r3
 800986e:	b21b      	sxth	r3, r3
}
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <lv_obj_get_scroll_y>:

lv_coord_t lv_obj_get_scroll_y(const lv_obj_t * obj)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <lv_obj_get_scroll_y+0x14>
 800988c:	2300      	movs	r3, #0
 800988e:	e007      	b.n	80098a0 <lv_obj_get_scroll_y+0x24>
    return -obj->spec_attr->scroll.y;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009898:	b29b      	uxth	r3, r3
 800989a:	425b      	negs	r3, r3
 800989c:	b29b      	uxth	r3, r3
 800989e:	b21b      	sxth	r3, r3
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <lv_obj_get_scroll_top>:

lv_coord_t lv_obj_get_scroll_top(lv_obj_t * obj)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <lv_obj_get_scroll_top+0x14>
 80098bc:	2300      	movs	r3, #0
 80098be:	e007      	b.n	80098d0 <lv_obj_get_scroll_top+0x24>
    return -obj->spec_attr->scroll.y;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	425b      	negs	r3, r3
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	b21b      	sxth	r3, r3
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <lv_obj_get_scroll_bottom>:

lv_coord_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 80098dc:	b5b0      	push	{r4, r5, r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t child_res = LV_COORD_MIN;
 80098e4:	f24e 0301 	movw	r3, #57345	; 0xe001
 80098e8:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f003 fa1b 	bl	800cd26 <lv_obj_get_child_cnt>
 80098f0:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 80098f2:	2300      	movs	r3, #0
 80098f4:	61bb      	str	r3, [r7, #24]
 80098f6:	e01c      	b.n	8009932 <lv_obj_get_scroll_bottom+0x56>
        lv_obj_t * child = obj->spec_attr->children[i];
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009908:	4935      	ldr	r1, [pc, #212]	; (80099e0 <lv_obj_get_scroll_bottom+0x104>)
 800990a:	68b8      	ldr	r0, [r7, #8]
 800990c:	f7fb fe2a 	bl	8005564 <lv_obj_has_flag_any>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d109      	bne.n	800992a <lv_obj_get_scroll_bottom+0x4e>
        child_res = LV_MAX(child_res, child->coords.y2);
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800991c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009920:	4293      	cmp	r3, r2
 8009922:	bfb8      	it	lt
 8009924:	4613      	movlt	r3, r2
 8009926:	83fb      	strh	r3, [r7, #30]
 8009928:	e000      	b.n	800992c <lv_obj_get_scroll_bottom+0x50>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800992a:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	3301      	adds	r3, #1
 8009930:	61bb      	str	r3, [r7, #24]
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	429a      	cmp	r2, r3
 8009938:	d3de      	bcc.n	80098f8 <lv_obj_get_scroll_bottom+0x1c>
    }

    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800993a:	2100      	movs	r1, #0
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff fe78 	bl	8009632 <lv_obj_get_style_pad_top>
 8009942:	4603      	mov	r3, r0
 8009944:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8009946:	2100      	movs	r1, #0
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff fe84 	bl	8009656 <lv_obj_get_style_pad_bottom>
 800994e:	4603      	mov	r3, r0
 8009950:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009952:	2100      	movs	r1, #0
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff fed8 	bl	800970a <lv_obj_get_style_border_width>
 800995a:	4603      	mov	r3, r0
 800995c:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800995e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009962:	4a20      	ldr	r2, [pc, #128]	; (80099e4 <lv_obj_get_scroll_bottom+0x108>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d00d      	beq.n	8009984 <lv_obj_get_scroll_bottom+0xa8>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8009968:	8a3a      	ldrh	r2, [r7, #16]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009970:	b29b      	uxth	r3, r3
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	b29a      	uxth	r2, r3
 8009976:	89fb      	ldrh	r3, [r7, #14]
 8009978:	4413      	add	r3, r2
 800997a:	b29a      	uxth	r2, r3
 800997c:	8bfb      	ldrh	r3, [r7, #30]
 800997e:	4413      	add	r3, r2
 8009980:	b29b      	uxth	r3, r3
 8009982:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fe fb7d 	bl	8008084 <lv_obj_get_self_height>
 800998a:	4603      	mov	r3, r0
 800998c:	81bb      	strh	r3, [r7, #12]
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800998e:	89fb      	ldrh	r3, [r7, #14]
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	b29c      	uxth	r4, r3
 8009994:	8a7d      	ldrh	r5, [r7, #18]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7fe fa9b 	bl	8007ed2 <lv_obj_get_height>
 800999c:	4603      	mov	r3, r0
 800999e:	b29b      	uxth	r3, r3
 80099a0:	1aeb      	subs	r3, r5, r3
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	8a3b      	ldrh	r3, [r7, #16]
 80099a6:	4413      	add	r3, r2
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4423      	add	r3, r4
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	89bb      	ldrh	r3, [r7, #12]
 80099b0:	4413      	add	r3, r2
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	81bb      	strh	r3, [r7, #12]
    self_h -= lv_obj_get_scroll_y(obj);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7ff ff60 	bl	800987c <lv_obj_get_scroll_y>
 80099bc:	4603      	mov	r3, r0
 80099be:	89ba      	ldrh	r2, [r7, #12]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_h);
 80099c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80099cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	bfb8      	it	lt
 80099d4:	4613      	movlt	r3, r2
 80099d6:	b21b      	sxth	r3, r3
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bdb0      	pop	{r4, r5, r7, pc}
 80099e0:	00040001 	.word	0x00040001
 80099e4:	ffffe001 	.word	0xffffe001

080099e8 <lv_obj_get_scroll_left>:

lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 80099e8:	b5b0      	push	{r4, r5, r7, lr}
 80099ea:	b08a      	sub	sp, #40	; 0x28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80099f0:	2100      	movs	r1, #0
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff fe9b 	bl	800972e <lv_obj_get_style_base_dir>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d00e      	beq.n	8009a1c <lv_obj_get_scroll_left+0x34>
        if(obj->spec_attr == NULL) return 0;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <lv_obj_get_scroll_left+0x22>
 8009a06:	2300      	movs	r3, #0
 8009a08:	e08b      	b.n	8009b22 <lv_obj_get_scroll_left+0x13a>
        return -obj->spec_attr->scroll.x;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	425b      	negs	r3, r3
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	b21b      	sxth	r3, r3
 8009a1a:	e082      	b.n	8009b22 <lv_obj_get_scroll_left+0x13a>
    }

    /*With RTL base direction scrolling the left is normal so find the left most coordinate*/
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fe3d 	bl	800969e <lv_obj_get_style_pad_right>
 8009a24:	4603      	mov	r3, r0
 8009a26:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8009a28:	2100      	movs	r1, #0
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff fe25 	bl	800967a <lv_obj_get_style_pad_left>
 8009a30:	4603      	mov	r3, r0
 8009a32:	837b      	strh	r3, [r7, #26]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff fe67 	bl	800970a <lv_obj_get_style_border_width>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint32_t i;
    lv_coord_t x1 = LV_COORD_MAX;
 8009a44:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8009a48:	83fb      	strh	r3, [r7, #30]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f003 f96b 	bl	800cd26 <lv_obj_get_child_cnt>
 8009a50:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 8009a52:	2300      	movs	r3, #0
 8009a54:	623b      	str	r3, [r7, #32]
 8009a56:	e01c      	b.n	8009a92 <lv_obj_get_scroll_left+0xaa>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009a68:	4930      	ldr	r1, [pc, #192]	; (8009b2c <lv_obj_get_scroll_left+0x144>)
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7fb fd7a 	bl	8005564 <lv_obj_has_flag_any>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d109      	bne.n	8009a8a <lv_obj_get_scroll_left+0xa2>
        x1 = LV_MIN(x1, child->coords.x1);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009a7c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009a80:	4293      	cmp	r3, r2
 8009a82:	bfa8      	it	ge
 8009a84:	4613      	movge	r3, r2
 8009a86:	83fb      	strh	r3, [r7, #30]
 8009a88:	e000      	b.n	8009a8c <lv_obj_get_scroll_left+0xa4>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009a8a:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	623b      	str	r3, [r7, #32]
 8009a92:	6a3a      	ldr	r2, [r7, #32]
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d3de      	bcc.n	8009a58 <lv_obj_get_scroll_left+0x70>

    }

    if(x1 != LV_COORD_MAX) {
 8009a9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009a9e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d010      	beq.n	8009ac8 <lv_obj_get_scroll_left+0xe0>
        child_res = x1;
 8009aa6:	8bfb      	ldrh	r3, [r7, #30]
 8009aa8:	84fb      	strh	r3, [r7, #38]	; 0x26
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	8b7b      	ldrh	r3, [r7, #26]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	8b3b      	ldrh	r3, [r7, #24]
 8009aba:	4413      	add	r3, r2
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009ac6:	e002      	b.n	8009ace <lv_obj_get_scroll_left+0xe6>
    }
    else {
        child_res = LV_COORD_MIN;
 8009ac8:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009acc:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7fe fac2 	bl	8008058 <lv_obj_get_self_width>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	827b      	strh	r3, [r7, #18]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8009ad8:	8b3b      	ldrh	r3, [r7, #24]
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	b29c      	uxth	r4, r3
 8009ade:	8bbd      	ldrh	r5, [r7, #28]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7fe f9e8 	bl	8007eb6 <lv_obj_get_width>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	1aeb      	subs	r3, r5, r3
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	8b7b      	ldrh	r3, [r7, #26]
 8009af0:	4413      	add	r3, r2
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	4423      	add	r3, r4
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	8a7b      	ldrh	r3, [r7, #18]
 8009afa:	4413      	add	r3, r2
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	827b      	strh	r3, [r7, #18]
    self_w += lv_obj_get_scroll_x(obj);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff fea3 	bl	800984c <lv_obj_get_scroll_x>
 8009b06:	4603      	mov	r3, r0
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	8a7b      	ldrh	r3, [r7, #18]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	827b      	strh	r3, [r7, #18]

    return LV_MAX(child_res, self_w);
 8009b12:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009b16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	bfb8      	it	lt
 8009b1e:	4613      	movlt	r3, r2
 8009b20:	b21b      	sxth	r3, r3
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3728      	adds	r7, #40	; 0x28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bdb0      	pop	{r4, r5, r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	00040001 	.word	0x00040001

08009b30 <lv_obj_get_scroll_right>:

lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 8009b30:	b5b0      	push	{r4, r5, r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff fdf7 	bl	800972e <lv_obj_get_style_base_dir>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d10a      	bne.n	8009b5c <lv_obj_get_scroll_right+0x2c>
        if(obj->spec_attr == NULL) return 0;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <lv_obj_get_scroll_right+0x22>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e07e      	b.n	8009c50 <lv_obj_get_scroll_right+0x120>
        return obj->spec_attr->scroll.x;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009b5a:	e079      	b.n	8009c50 <lv_obj_get_scroll_right+0x120>
    }

    /*With other base direction (LTR) scrolling to the right is normal so find the right most coordinate*/
    lv_coord_t child_res = LV_COORD_MIN;
 8009b5c:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009b60:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f003 f8df 	bl	800cd26 <lv_obj_get_child_cnt>
 8009b68:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	e01c      	b.n	8009baa <lv_obj_get_scroll_right+0x7a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009b80:	4935      	ldr	r1, [pc, #212]	; (8009c58 <lv_obj_get_scroll_right+0x128>)
 8009b82:	68b8      	ldr	r0, [r7, #8]
 8009b84:	f7fb fcee 	bl	8005564 <lv_obj_has_flag_any>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d109      	bne.n	8009ba2 <lv_obj_get_scroll_right+0x72>
        child_res = LV_MAX(child_res, child->coords.x2);
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009b94:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	bfb8      	it	lt
 8009b9c:	4613      	movlt	r3, r2
 8009b9e:	83fb      	strh	r3, [r7, #30]
 8009ba0:	e000      	b.n	8009ba4 <lv_obj_get_scroll_right+0x74>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009ba2:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	61bb      	str	r3, [r7, #24]
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d3de      	bcc.n	8009b70 <lv_obj_get_scroll_right+0x40>
    }

    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fd72 	bl	800969e <lv_obj_get_style_pad_right>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff fd5a 	bl	800967a <lv_obj_get_style_pad_left>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009bca:	2100      	movs	r1, #0
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff fd9c 	bl	800970a <lv_obj_get_style_border_width>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 8009bd6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009bda:	4a20      	ldr	r2, [pc, #128]	; (8009c5c <lv_obj_get_scroll_right+0x12c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d00d      	beq.n	8009bfc <lv_obj_get_scroll_right+0xcc>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 8009be0:	8a7a      	ldrh	r2, [r7, #18]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	89fb      	ldrh	r3, [r7, #14]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	8bfb      	ldrh	r3, [r7, #30]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7fe fa2b 	bl	8008058 <lv_obj_get_self_width>
 8009c02:	4603      	mov	r3, r0
 8009c04:	81bb      	strh	r3, [r7, #12]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8009c06:	89fb      	ldrh	r3, [r7, #14]
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	b29c      	uxth	r4, r3
 8009c0c:	8a7d      	ldrh	r5, [r7, #18]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fe f951 	bl	8007eb6 <lv_obj_get_width>
 8009c14:	4603      	mov	r3, r0
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	1aeb      	subs	r3, r5, r3
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	8a3b      	ldrh	r3, [r7, #16]
 8009c1e:	4413      	add	r3, r2
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	4423      	add	r3, r4
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	89bb      	ldrh	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	81bb      	strh	r3, [r7, #12]
    self_w -= lv_obj_get_scroll_x(obj);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fe0c 	bl	800984c <lv_obj_get_scroll_x>
 8009c34:	4603      	mov	r3, r0
 8009c36:	89ba      	ldrh	r2, [r7, #12]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_w);
 8009c40:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009c44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	bfb8      	it	lt
 8009c4c:	4613      	movlt	r3, r2
 8009c4e:	b21b      	sxth	r3, r3
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3720      	adds	r7, #32
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bdb0      	pop	{r4, r5, r7, pc}
 8009c58:	00040001 	.word	0x00040001
 8009c5c:	ffffe001 	.word	0xffffe001

08009c60 <lv_obj_scroll_by_bounded>:
/*=====================
 * Other functions
 *====================*/

void lv_obj_scroll_by_bounded(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b089      	sub	sp, #36	; 0x24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	4608      	mov	r0, r1
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	817b      	strh	r3, [r7, #10]
 8009c72:	460b      	mov	r3, r1
 8009c74:	813b      	strh	r3, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 8009c7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d104      	bne.n	8009c8c <lv_obj_scroll_by_bounded+0x2c>
 8009c82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 80b5 	beq.w	8009df6 <lv_obj_scroll_by_bounded+0x196>

    /*We need to know the final sizes for bound check*/
    lv_obj_update_layout(obj);
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7fe f8d7 	bl	8007e40 <lv_obj_update_layout>

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff fdda 	bl	800984c <lv_obj_get_scroll_x>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	425b      	negs	r3, r3
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	82bb      	strh	r3, [r7, #20]
    lv_coord_t x_bounded = x_current + dx;
 8009ca2:	8aba      	ldrh	r2, [r7, #20]
 8009ca4:	897b      	ldrh	r3, [r7, #10]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	83fb      	strh	r3, [r7, #30]

    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8009cac:	2100      	movs	r1, #0
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff fd3d 	bl	800972e <lv_obj_get_style_base_dir>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d028      	beq.n	8009d0c <lv_obj_scroll_by_bounded+0xac>
        if(x_bounded > 0) x_bounded = 0;
 8009cba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dd01      	ble.n	8009cc6 <lv_obj_scroll_by_bounded+0x66>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	83fb      	strh	r3, [r7, #30]
        if(x_bounded < 0) {
 8009cc6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da43      	bge.n	8009d56 <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff fe8a 	bl	80099e8 <lv_obj_get_scroll_left>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	b29c      	uxth	r4, r3
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f7ff ff29 	bl	8009b30 <lv_obj_get_scroll_right>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	4423      	add	r3, r4
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	83bb      	strh	r3, [r7, #28]
            if(scroll_max < 0) scroll_max = 0;
 8009ce8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da01      	bge.n	8009cf4 <lv_obj_scroll_by_bounded+0x94>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	83bb      	strh	r3, [r7, #28]

            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 8009cf4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009cf8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009cfc:	425b      	negs	r3, r3
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	da29      	bge.n	8009d56 <lv_obj_scroll_by_bounded+0xf6>
 8009d02:	8bbb      	ldrh	r3, [r7, #28]
 8009d04:	425b      	negs	r3, r3
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	83fb      	strh	r3, [r7, #30]
 8009d0a:	e024      	b.n	8009d56 <lv_obj_scroll_by_bounded+0xf6>
        }
    }
    else {
        if(x_bounded < 0) x_bounded = 0;
 8009d0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	da01      	bge.n	8009d18 <lv_obj_scroll_by_bounded+0xb8>
 8009d14:	2300      	movs	r3, #0
 8009d16:	83fb      	strh	r3, [r7, #30]
        if(x_bounded > 0) {
 8009d18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	dd1a      	ble.n	8009d56 <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f7ff fe61 	bl	80099e8 <lv_obj_get_scroll_left>
 8009d26:	4603      	mov	r3, r0
 8009d28:	b29c      	uxth	r4, r3
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f7ff ff00 	bl	8009b30 <lv_obj_get_scroll_right>
 8009d30:	4603      	mov	r3, r0
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	4423      	add	r3, r4
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	837b      	strh	r3, [r7, #26]
            if(scroll_max < 0) scroll_max = 0;
 8009d3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	da01      	bge.n	8009d46 <lv_obj_scroll_by_bounded+0xe6>
 8009d42:	2300      	movs	r3, #0
 8009d44:	837b      	strh	r3, [r7, #26]

            if(x_bounded > scroll_max) x_bounded = scroll_max;
 8009d46:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009d4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	dd01      	ble.n	8009d56 <lv_obj_scroll_by_bounded+0xf6>
 8009d52:	8b7b      	ldrh	r3, [r7, #26]
 8009d54:	83fb      	strh	r3, [r7, #30]
        }
    }

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f7ff fd90 	bl	800987c <lv_obj_get_scroll_y>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	425b      	negs	r3, r3
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	827b      	strh	r3, [r7, #18]
    lv_coord_t y_bounded = y_current + dy;
 8009d66:	8a7a      	ldrh	r2, [r7, #18]
 8009d68:	893b      	ldrh	r3, [r7, #8]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	833b      	strh	r3, [r7, #24]

    if(y_bounded > 0) y_bounded = 0;
 8009d70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dd01      	ble.n	8009d7c <lv_obj_scroll_by_bounded+0x11c>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	833b      	strh	r3, [r7, #24]
    if(y_bounded < 0) {
 8009d7c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	da1d      	bge.n	8009dc0 <lv_obj_scroll_by_bounded+0x160>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f7ff fd91 	bl	80098ac <lv_obj_get_scroll_top>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	b29c      	uxth	r4, r3
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff fda4 	bl	80098dc <lv_obj_get_scroll_bottom>
 8009d94:	4603      	mov	r3, r0
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	4423      	add	r3, r4
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	82fb      	strh	r3, [r7, #22]
        if(scroll_max < 0) scroll_max = 0;
 8009d9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da01      	bge.n	8009daa <lv_obj_scroll_by_bounded+0x14a>
 8009da6:	2300      	movs	r3, #0
 8009da8:	82fb      	strh	r3, [r7, #22]
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 8009daa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009dae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009db2:	425b      	negs	r3, r3
 8009db4:	429a      	cmp	r2, r3
 8009db6:	da03      	bge.n	8009dc0 <lv_obj_scroll_by_bounded+0x160>
 8009db8:	8afb      	ldrh	r3, [r7, #22]
 8009dba:	425b      	negs	r3, r3
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	833b      	strh	r3, [r7, #24]
    }

    dx = x_bounded - x_current;
 8009dc0:	8bfa      	ldrh	r2, [r7, #30]
 8009dc2:	8abb      	ldrh	r3, [r7, #20]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	817b      	strh	r3, [r7, #10]
    dy = y_bounded - y_current;
 8009dca:	8b3a      	ldrh	r2, [r7, #24]
 8009dcc:	8a7b      	ldrh	r3, [r7, #18]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	813b      	strh	r3, [r7, #8]
    if(dx || dy) {
 8009dd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d103      	bne.n	8009de4 <lv_obj_scroll_by_bounded+0x184>
 8009ddc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d009      	beq.n	8009df8 <lv_obj_scroll_by_bounded+0x198>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 8009de4:	79fb      	ldrb	r3, [r7, #7]
 8009de6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009dea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f806 	bl	8009e00 <lv_obj_scroll_by>
 8009df4:	e000      	b.n	8009df8 <lv_obj_scroll_by_bounded+0x198>
    if(dx == 0 && dy == 0) return;
 8009df6:	bf00      	nop
    }
}
 8009df8:	3724      	adds	r7, #36	; 0x24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd90      	pop	{r4, r7, pc}
	...

08009e00 <lv_obj_scroll_by>:


void lv_obj_scroll_by(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b09c      	sub	sp, #112	; 0x70
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	4608      	mov	r0, r1
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	4603      	mov	r3, r0
 8009e10:	817b      	strh	r3, [r7, #10]
 8009e12:	460b      	mov	r3, r1
 8009e14:	813b      	strh	r3, [r7, #8]
 8009e16:	4613      	mov	r3, r2
 8009e18:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 8009e1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d104      	bne.n	8009e2c <lv_obj_scroll_by+0x2c>
 8009e22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80f7 	beq.w	800a01a <lv_obj_scroll_by+0x21a>
    if(anim_en == LV_ANIM_ON) {
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	f040 80c4 	bne.w	8009fbc <lv_obj_scroll_by+0x1bc>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f002 ff2b 	bl	800cc90 <lv_obj_get_disp>
 8009e3a:	6638      	str	r0, [r7, #96]	; 0x60
        lv_anim_t a;
        lv_anim_init(&a);
 8009e3c:	f107 0314 	add.w	r3, r7, #20
 8009e40:	4618      	mov	r0, r3
 8009e42:	f014 fe0b 	bl	801ea5c <lv_anim_init>
        lv_anim_set_var(&a, obj);
 8009e46:	f107 0314 	add.w	r3, r7, #20
 8009e4a:	68f9      	ldr	r1, [r7, #12]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fb83 	bl	8009558 <lv_anim_set_var>
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);
 8009e52:	f107 0314 	add.w	r3, r7, #20
 8009e56:	4977      	ldr	r1, [pc, #476]	; (800a034 <lv_obj_scroll_by+0x234>)
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7ff fbca 	bl	80095f2 <lv_anim_set_ready_cb>

        if(dx) {
 8009e5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d052      	beq.n	8009f0c <lv_obj_scroll_by+0x10c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 8009e66:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009e68:	f014 fcee 	bl	801e848 <lv_disp_get_hor_res>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	109b      	asrs	r3, r3, #2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	f014 fecc 	bl	801ec18 <lv_anim_speed_to_time>
 8009e80:	66f8      	str	r0, [r7, #108]	; 0x6c
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8009e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e84:	2bc7      	cmp	r3, #199	; 0xc7
 8009e86:	d801      	bhi.n	8009e8c <lv_obj_scroll_by+0x8c>
 8009e88:	23c8      	movs	r3, #200	; 0xc8
 8009e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8009e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009e92:	d902      	bls.n	8009e9a <lv_obj_scroll_by+0x9a>
 8009e94:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009e98:	66fb      	str	r3, [r7, #108]	; 0x6c
            lv_anim_set_time(&a, t);
 8009e9a:	f107 0314 	add.w	r3, r7, #20
 8009e9e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff fb75 	bl	8009590 <lv_anim_set_time>
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f7ff fcd0 	bl	800984c <lv_obj_get_scroll_x>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_anim_set_values(&a, -sx, -sx + dx);
 8009eb2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8009eb6:	4259      	negs	r1, r3
 8009eb8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009ebc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8009ec0:	1ad2      	subs	r2, r2, r3
 8009ec2:	f107 0314 	add.w	r3, r7, #20
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff fb70 	bl	80095ac <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, scroll_x_anim);
 8009ecc:	f107 0314 	add.w	r3, r7, #20
 8009ed0:	4959      	ldr	r1, [pc, #356]	; (800a038 <lv_obj_scroll_by+0x238>)
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff fb4e 	bl	8009574 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 8009ed8:	f107 0314 	add.w	r3, r7, #20
 8009edc:	4957      	ldr	r1, [pc, #348]	; (800a03c <lv_obj_scroll_by+0x23c>)
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff fb79 	bl	80095d6 <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8009ee4:	f107 0314 	add.w	r3, r7, #20
 8009ee8:	461a      	mov	r2, r3
 8009eea:	2109      	movs	r1, #9
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f7fa f9df 	bl	80042b0 <lv_event_send>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            if(res != LV_RES_OK) return;
 8009ef8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	f040 808e 	bne.w	800a01e <lv_obj_scroll_by+0x21e>
            lv_anim_start(&a);
 8009f02:	f107 0314 	add.w	r3, r7, #20
 8009f06:	4618      	mov	r0, r3
 8009f08:	f014 fdce 	bl	801eaa8 <lv_anim_start>
        }

        if(dy) {
 8009f0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 808b 	beq.w	800a02c <lv_obj_scroll_by+0x22c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 8009f16:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009f18:	f014 fcbc 	bl	801e894 <lv_disp_get_ver_res>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	109b      	asrs	r3, r3, #2
 8009f22:	4618      	mov	r0, r3
 8009f24:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	f014 fe74 	bl	801ec18 <lv_anim_speed_to_time>
 8009f30:	66b8      	str	r0, [r7, #104]	; 0x68
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8009f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f34:	2bc7      	cmp	r3, #199	; 0xc7
 8009f36:	d801      	bhi.n	8009f3c <lv_obj_scroll_by+0x13c>
 8009f38:	23c8      	movs	r3, #200	; 0xc8
 8009f3a:	66bb      	str	r3, [r7, #104]	; 0x68
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8009f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009f42:	d902      	bls.n	8009f4a <lv_obj_scroll_by+0x14a>
 8009f44:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009f48:	66bb      	str	r3, [r7, #104]	; 0x68
            lv_anim_set_time(&a, t);
 8009f4a:	f107 0314 	add.w	r3, r7, #20
 8009f4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff fb1d 	bl	8009590 <lv_anim_set_time>
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7ff fc90 	bl	800987c <lv_obj_get_scroll_y>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_anim_set_values(&a, -sy, -sy + dy);
 8009f62:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8009f66:	4259      	negs	r1, r3
 8009f68:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009f6c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8009f70:	1ad2      	subs	r2, r2, r3
 8009f72:	f107 0314 	add.w	r3, r7, #20
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fb18 	bl	80095ac <lv_anim_set_values>
            lv_anim_set_exec_cb(&a,  scroll_y_anim);
 8009f7c:	f107 0314 	add.w	r3, r7, #20
 8009f80:	492f      	ldr	r1, [pc, #188]	; (800a040 <lv_obj_scroll_by+0x240>)
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff faf6 	bl	8009574 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 8009f88:	f107 0314 	add.w	r3, r7, #20
 8009f8c:	492b      	ldr	r1, [pc, #172]	; (800a03c <lv_obj_scroll_by+0x23c>)
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7ff fb21 	bl	80095d6 <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8009f94:	f107 0314 	add.w	r3, r7, #20
 8009f98:	461a      	mov	r2, r3
 8009f9a:	2109      	movs	r1, #9
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7fa f987 	bl	80042b0 <lv_event_send>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(res != LV_RES_OK) return;
 8009fa8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d138      	bne.n	800a022 <lv_obj_scroll_by+0x222>
            lv_anim_start(&a);
 8009fb0:	f107 0314 	add.w	r3, r7, #20
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f014 fd77 	bl	801eaa8 <lv_anim_start>
 8009fba:	e037      	b.n	800a02c <lv_obj_scroll_by+0x22c>
        }
    }
    else {
        /*Remove pending animations*/
        lv_anim_del(obj, scroll_y_anim);
 8009fbc:	4920      	ldr	r1, [pc, #128]	; (800a040 <lv_obj_scroll_by+0x240>)
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f014 fdea 	bl	801eb98 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8009fc4:	491c      	ldr	r1, [pc, #112]	; (800a038 <lv_obj_scroll_by+0x238>)
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f014 fde6 	bl	801eb98 <lv_anim_del>

        lv_res_t res;
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2109      	movs	r1, #9
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7fa f96d 	bl	80042b0 <lv_event_send>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 8009fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d120      	bne.n	800a026 <lv_obj_scroll_by+0x226>

        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 8009fe4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009fe8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009fec:	4619      	mov	r1, r3
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f000 f8bb 	bl	800a16a <_lv_obj_scroll_by_raw>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 8009ffa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d113      	bne.n	800a02a <lv_obj_scroll_by+0x22a>

        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 800a002:	2200      	movs	r2, #0
 800a004:	210a      	movs	r1, #10
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7fa f952 	bl	80042b0 <lv_event_send>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800a012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a016:	2b01      	cmp	r3, #1
 800a018:	e008      	b.n	800a02c <lv_obj_scroll_by+0x22c>
    if(dx == 0 && dy == 0) return;
 800a01a:	bf00      	nop
 800a01c:	e006      	b.n	800a02c <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800a01e:	bf00      	nop
 800a020:	e004      	b.n	800a02c <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800a022:	bf00      	nop
 800a024:	e002      	b.n	800a02c <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800a026:	bf00      	nop
 800a028:	e000      	b.n	800a02c <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800a02a:	bf00      	nop
    }
}
 800a02c:	3770      	adds	r7, #112	; 0x70
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	0800af53 	.word	0x0800af53
 800a038:	0800aef3 	.word	0x0800aef3
 800a03c:	0801ecab 	.word	0x0801ecab
 800a040:	0800af23 	.word	0x0800af23

0800a044 <lv_obj_scroll_to>:

void lv_obj_scroll_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	4608      	mov	r0, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	461a      	mov	r2, r3
 800a052:	4603      	mov	r3, r0
 800a054:	817b      	strh	r3, [r7, #10]
 800a056:	460b      	mov	r3, r1
 800a058:	813b      	strh	r3, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	71fb      	strb	r3, [r7, #7]
    lv_obj_scroll_to_x(obj, x, anim_en);
 800a05e:	79fa      	ldrb	r2, [r7, #7]
 800a060:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a064:	4619      	mov	r1, r3
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 f80c 	bl	800a084 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 800a06c:	79fa      	ldrb	r2, [r7, #7]
 800a06e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a072:	4619      	mov	r1, r3
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 f829 	bl	800a0cc <lv_obj_scroll_to_y>
}
 800a07a:	bf00      	nop
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <lv_obj_scroll_to_x>:

void lv_obj_scroll_to_x(lv_obj_t * obj, lv_coord_t x, lv_anim_enable_t anim_en)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	807b      	strh	r3, [r7, #2]
 800a090:	4613      	mov	r3, r2
 800a092:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_x_anim);
 800a094:	490c      	ldr	r1, [pc, #48]	; (800a0c8 <lv_obj_scroll_to_x+0x44>)
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f014 fd7e 	bl	801eb98 <lv_anim_del>

    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7ff fbd5 	bl	800984c <lv_obj_get_scroll_x>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -x + scroll_x;
 800a0a6:	89fa      	ldrh	r2, [r7, #14]
 800a0a8:	887b      	ldrh	r3, [r7, #2]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 800a0b0:	787b      	ldrb	r3, [r7, #1]
 800a0b2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff fdd1 	bl	8009c60 <lv_obj_scroll_by_bounded>
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	0800aef3 	.word	0x0800aef3

0800a0cc <lv_obj_scroll_to_y>:

void lv_obj_scroll_to_y(lv_obj_t * obj, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	807b      	strh	r3, [r7, #2]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_y_anim);
 800a0dc:	490c      	ldr	r1, [pc, #48]	; (800a110 <lv_obj_scroll_to_y+0x44>)
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f014 fd5a 	bl	801eb98 <lv_anim_del>

    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff fbc9 	bl	800987c <lv_obj_get_scroll_y>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -y + scroll_y;
 800a0ee:	89fa      	ldrh	r2, [r7, #14]
 800a0f0:	887b      	ldrh	r3, [r7, #2]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 800a0f8:	787b      	ldrb	r3, [r7, #1]
 800a0fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a0fe:	2100      	movs	r1, #0
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fdad 	bl	8009c60 <lv_obj_scroll_by_bounded>
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	0800af23 	.word	0x0800af23

0800a114 <lv_obj_scroll_to_view_recursive>:
    lv_point_t p = {0, 0};
    scroll_area_into_view(&obj->coords, obj, &p, anim_en);
}

void lv_obj_scroll_to_view_recursive(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70fb      	strb	r3, [r7, #3]
    /*Be sure the screens layout is correct*/
    lv_obj_update_layout(obj);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7fd fe8d 	bl	8007e40 <lv_obj_update_layout>

    lv_point_t p = {0, 0};
 800a126:	2300      	movs	r3, #0
 800a128:	81bb      	strh	r3, [r7, #12]
 800a12a:	2300      	movs	r3, #0
 800a12c:	81fb      	strh	r3, [r7, #14]
    lv_obj_t * child = obj;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	617b      	str	r3, [r7, #20]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800a132:	6978      	ldr	r0, [r7, #20]
 800a134:	f002 fde6 	bl	800cd04 <lv_obj_get_parent>
 800a138:	6138      	str	r0, [r7, #16]
    while(parent) {
 800a13a:	e00e      	b.n	800a15a <lv_obj_scroll_to_view_recursive+0x46>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f103 0014 	add.w	r0, r3, #20
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	f107 020c 	add.w	r2, r7, #12
 800a148:	6979      	ldr	r1, [r7, #20]
 800a14a:	f000 ff11 	bl	800af70 <scroll_area_into_view>
        child = parent;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	617b      	str	r3, [r7, #20]
        parent = lv_obj_get_parent(parent);
 800a152:	6938      	ldr	r0, [r7, #16]
 800a154:	f002 fdd6 	bl	800cd04 <lv_obj_get_parent>
 800a158:	6138      	str	r0, [r7, #16]
    while(parent) {
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1ed      	bne.n	800a13c <lv_obj_scroll_to_view_recursive+0x28>
    }
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <_lv_obj_scroll_by_raw>:

lv_res_t _lv_obj_scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	460b      	mov	r3, r1
 800a174:	807b      	strh	r3, [r7, #2]
 800a176:	4613      	mov	r3, r2
 800a178:	803b      	strh	r3, [r7, #0]
    if(x == 0 && y == 0) return LV_RES_OK;
 800a17a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d105      	bne.n	800a18e <_lv_obj_scroll_by_raw+0x24>
 800a182:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <_lv_obj_scroll_by_raw+0x24>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e032      	b.n	800a1f4 <_lv_obj_scroll_by_raw+0x8a>

    lv_obj_allocate_spec_attr(obj);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7fb fa1c 	bl	80055cc <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	887b      	ldrh	r3, [r7, #2]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	b212      	sxth	r2, r2
 800a1aa:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	883b      	ldrh	r3, [r7, #0]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	b212      	sxth	r2, r2
 800a1c2:	825a      	strh	r2, [r3, #18]

    lv_obj_move_children_by(obj, x, y, true);
 800a1c4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a1c8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7fe faa8 	bl	8008724 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	210b      	movs	r1, #11
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7fa f869 	bl	80042b0 <lv_event_send>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73fb      	strb	r3, [r7, #15]
    if(res != LV_RES_OK) return res;
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d001      	beq.n	800a1ec <_lv_obj_scroll_by_raw+0x82>
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ea:	e003      	b.n	800a1f4 <_lv_obj_scroll_by_raw+0x8a>
    lv_obj_invalidate(obj);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7fe fc2c 	bl	8008a4a <lv_obj_invalidate>
    return LV_RES_OK;
 800a1f2:	2301      	movs	r3, #1
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <lv_obj_get_scrollbar_area>:
    lv_indev_scroll_get_snap_dist(obj, &p);
    lv_obj_scroll_by(obj, p.x, p.y, anim_en);
}

void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
{
 800a1fc:	b590      	push	{r4, r7, lr}
 800a1fe:	b095      	sub	sp, #84	; 0x54
 800a200:	af02      	add	r7, sp, #8
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
    lv_area_set(hor_area, 0, 0, -1, -1);
 800a208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a212:	2200      	movs	r2, #0
 800a214:	2100      	movs	r1, #0
 800a216:	68b8      	ldr	r0, [r7, #8]
 800a218:	f014 ff1e 	bl	801f058 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a226:	2200      	movs	r2, #0
 800a228:	2100      	movs	r1, #0
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f014 ff14 	bl	801f058 <lv_area_set>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800a230:	2110      	movs	r1, #16
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7fb f981 	bl	800553a <lv_obj_has_flag>
 800a238:	4603      	mov	r3, r0
 800a23a:	f083 0301 	eor.w	r3, r3, #1
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	f040 8591 	bne.w	800ad68 <lv_obj_get_scrollbar_area+0xb6c>

    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7ff faa8 	bl	800979c <lv_obj_get_scrollbar_mode>
 800a24c:	4603      	mov	r3, r0
 800a24e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800a252:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 8588 	beq.w	800ad6c <lv_obj_get_scrollbar_area+0xb70>

    /*If there is no indev scrolling this object but `mode==active` return*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800a25c:	2000      	movs	r0, #0
 800a25e:	f014 fb79 	bl	801e954 <lv_indev_get_next>
 800a262:	6478      	str	r0, [r7, #68]	; 0x44
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800a264:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d114      	bne.n	800a296 <lv_obj_get_scrollbar_area+0x9a>
        while(indev) {
 800a26c:	e00a      	b.n	800a284 <lv_obj_get_scrollbar_area+0x88>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800a26e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a270:	f7fa fddd 	bl	8004e2e <lv_indev_get_scroll_obj>
 800a274:	4602      	mov	r2, r0
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	4293      	cmp	r3, r2
 800a27a:	d007      	beq.n	800a28c <lv_obj_get_scrollbar_area+0x90>
            indev = lv_indev_get_next(indev);
 800a27c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a27e:	f014 fb69 	bl	801e954 <lv_indev_get_next>
 800a282:	6478      	str	r0, [r7, #68]	; 0x44
        while(indev) {
 800a284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1f1      	bne.n	800a26e <lv_obj_get_scrollbar_area+0x72>
 800a28a:	e000      	b.n	800a28e <lv_obj_get_scrollbar_area+0x92>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800a28c:	bf00      	nop
        }
        if(indev == NULL)  return;
 800a28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 856d 	beq.w	800ad70 <lv_obj_get_scrollbar_area+0xb74>
    }

    lv_coord_t st = lv_obj_get_scroll_top(obj);
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f7ff fb08 	bl	80098ac <lv_obj_get_scroll_top>
 800a29c:	4603      	mov	r3, r0
 800a29e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f7ff fb1b 	bl	80098dc <lv_obj_get_scroll_bottom>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff fb9c 	bl	80099e8 <lv_obj_get_scroll_left>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff fc3b 	bl	8009b30 <lv_obj_get_scroll_right>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	873b      	strh	r3, [r7, #56]	; 0x38

    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7ff fa82 	bl	80097c8 <lv_obj_get_scroll_dir>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool ver_draw = false;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    if((dir & LV_DIR_VER) &&
 800a2d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2d4:	f003 030c 	and.w	r3, r3, #12
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d01c      	beq.n	800a316 <lv_obj_get_scrollbar_area+0x11a>
 800a2dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d015      	beq.n	800a310 <lv_obj_get_scrollbar_area+0x114>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800a2e4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d107      	bne.n	800a2fc <lv_obj_get_scrollbar_area+0x100>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800a2ec:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	dc0d      	bgt.n	800a310 <lv_obj_get_scrollbar_area+0x114>
 800a2f4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	dc09      	bgt.n	800a310 <lv_obj_get_scrollbar_area+0x114>
 800a2fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a300:	2b02      	cmp	r3, #2
 800a302:	d108      	bne.n	800a316 <lv_obj_get_scrollbar_area+0x11a>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800a304:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a306:	f7fa fd71 	bl	8004dec <lv_indev_get_scroll_dir>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b0c      	cmp	r3, #12
 800a30e:	d102      	bne.n	800a316 <lv_obj_get_scrollbar_area+0x11a>
        ver_draw = true;
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }


    bool hor_draw = false;
 800a316:	2300      	movs	r3, #0
 800a318:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    if((dir & LV_DIR_HOR) &&
 800a31c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a320:	f003 0303 	and.w	r3, r3, #3
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01c      	beq.n	800a362 <lv_obj_get_scrollbar_area+0x166>
 800a328:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d015      	beq.n	800a35c <lv_obj_get_scrollbar_area+0x160>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800a330:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a334:	2b03      	cmp	r3, #3
 800a336:	d107      	bne.n	800a348 <lv_obj_get_scrollbar_area+0x14c>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800a338:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dc0d      	bgt.n	800a35c <lv_obj_get_scrollbar_area+0x160>
 800a340:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800a344:	2b00      	cmp	r3, #0
 800a346:	dc09      	bgt.n	800a35c <lv_obj_get_scrollbar_area+0x160>
 800a348:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d108      	bne.n	800a362 <lv_obj_get_scrollbar_area+0x166>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800a350:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a352:	f7fa fd4b 	bl	8004dec <lv_indev_get_scroll_dir>
 800a356:	4603      	mov	r3, r0
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d102      	bne.n	800a362 <lv_obj_get_scrollbar_area+0x166>
        hor_draw = true;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }

    if(!hor_draw && !ver_draw) return;
 800a362:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a366:	f083 0301 	eor.w	r3, r3, #1
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d007      	beq.n	800a380 <lv_obj_get_scrollbar_area+0x184>
 800a370:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a374:	f083 0301 	eor.w	r3, r3, #1
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f040 84fa 	bne.w	800ad74 <lv_obj_get_scrollbar_area+0xb78>

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 800a380:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f7ff f9d2 	bl	800972e <lv_obj_get_style_base_dir>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	bf0c      	ite	eq
 800a390:	2301      	moveq	r3, #1
 800a392:	2300      	movne	r3, #0
 800a394:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    lv_coord_t top_space = lv_obj_get_style_pad_top(obj, LV_PART_SCROLLBAR);
 800a398:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f7ff f948 	bl	8009632 <lv_obj_get_style_pad_top>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_coord_t bottom_space = lv_obj_get_style_pad_bottom(obj, LV_PART_SCROLLBAR);
 800a3a6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff f953 	bl	8009656 <lv_obj_get_style_pad_bottom>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t left_space = lv_obj_get_style_pad_left(obj, LV_PART_SCROLLBAR);
 800a3b4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7ff f95e 	bl	800967a <lv_obj_get_style_pad_left>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t right_space = lv_obj_get_style_pad_right(obj, LV_PART_SCROLLBAR);
 800a3c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff f969 	bl	800969e <lv_obj_get_style_pad_right>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t tickness = lv_obj_get_style_width(obj, LV_PART_SCROLLBAR);
 800a3d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff f91a 	bl	800960e <lv_obj_get_style_width>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	85bb      	strh	r3, [r7, #44]	; 0x2c

    lv_coord_t obj_h = lv_obj_get_height(obj);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7fd fd77 	bl	8007ed2 <lv_obj_get_height>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t obj_w = lv_obj_get_width(obj);
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f7fd fd64 	bl	8007eb6 <lv_obj_get_width>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	853b      	strh	r3, [r7, #40]	; 0x28

    /*Space required for the vertical and horizontal scrollbars*/
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800a3f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <lv_obj_get_scrollbar_area+0x204>
 800a3fa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a3fe:	e000      	b.n	800a402 <lv_obj_get_scrollbar_area+0x206>
 800a400:	2300      	movs	r3, #0
 800a402:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 800a404:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <lv_obj_get_scrollbar_area+0x216>
 800a40c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a410:	e000      	b.n	800a414 <lv_obj_get_scrollbar_area+0x218>
 800a412:	2300      	movs	r3, #0
 800a414:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t rem;

    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800a416:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff f951 	bl	80096c2 <lv_obj_get_style_bg_opa>
 800a420:	4603      	mov	r3, r0
 800a422:	2b01      	cmp	r3, #1
 800a424:	d808      	bhi.n	800a438 <lv_obj_get_scrollbar_area+0x23c>
       lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN) {
 800a426:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff f95b 	bl	80096e6 <lv_obj_get_style_border_opa>
 800a430:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800a432:	2b01      	cmp	r3, #1
 800a434:	f240 84a0 	bls.w	800ad78 <lv_obj_get_scrollbar_area+0xb7c>
        return;
    }

    /*Draw vertical scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_h = obj_h + st + sb;
 800a438:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a43a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a43c:	4413      	add	r3, r2
 800a43e:	b29a      	uxth	r2, r3
 800a440:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a442:	4413      	add	r3, r2
 800a444:	b29b      	uxth	r3, r3
 800a446:	847b      	strh	r3, [r7, #34]	; 0x22
    if(ver_draw && content_h) {
 800a448:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 81c3 	beq.w	800a7d8 <lv_obj_get_scrollbar_area+0x5dc>
 800a452:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 81be 	beq.w	800a7d8 <lv_obj_get_scrollbar_area+0x5dc>
        ver_area->y1 = obj->coords.y1;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	805a      	strh	r2, [r3, #2]
        ver_area->y2 = obj->coords.y2;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	80da      	strh	r2, [r3, #6]
        if(rtl) {
 800a470:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a474:	2b00      	cmp	r3, #0
 800a476:	d016      	beq.n	800a4a6 <lv_obj_get_scrollbar_area+0x2aa>
            ver_area->x1 = obj->coords.x1 + left_space;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a47e:	b29a      	uxth	r2, r3
 800a480:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a482:	4413      	add	r3, r2
 800a484:	b29b      	uxth	r3, r3
 800a486:	b21a      	sxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	801a      	strh	r2, [r3, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a492:	b29a      	uxth	r2, r3
 800a494:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a496:	4413      	add	r3, r2
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	b21a      	sxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	809a      	strh	r2, [r3, #4]
 800a4a4:	e015      	b.n	800a4d2 <lv_obj_get_scrollbar_area+0x2d6>
        }
        else {
            ver_area->x2 = obj->coords.x2 - right_space;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	b21a      	sxth	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	809a      	strh	r2, [r3, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	b21a      	sxth	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	801a      	strh	r2, [r3, #0]
        }

        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800a4d2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800a4d6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800a4da:	1ad2      	subs	r2, r2, r3
 800a4dc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a4e0:	1ad2      	subs	r2, r2, r3
 800a4e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800a4ec:	fb03 f202 	mul.w	r2, r3, r2
 800a4f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a4f4:	fb92 f3f3 	sdiv	r3, r2, r3
 800a4f8:	843b      	strh	r3, [r7, #32]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800a4fa:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800a4fe:	2000      	movs	r0, #0
 800a500:	f014 f9ee 	bl	801e8e0 <lv_disp_get_dpi>
 800a504:	4603      	mov	r3, r0
 800a506:	461a      	mov	r2, r3
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	2bef      	cmp	r3, #239	; 0xef
 800a512:	dd10      	ble.n	800a536 <lv_obj_get_scrollbar_area+0x33a>
 800a514:	2000      	movs	r0, #0
 800a516:	f014 f9e3 	bl	801e8e0 <lv_disp_get_dpi>
 800a51a:	4603      	mov	r3, r0
 800a51c:	461a      	mov	r2, r3
 800a51e:	4613      	mov	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4413      	add	r3, r2
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	3350      	adds	r3, #80	; 0x50
 800a528:	4aa7      	ldr	r2, [pc, #668]	; (800a7c8 <lv_obj_get_scrollbar_area+0x5cc>)
 800a52a:	fb82 1203 	smull	r1, r2, r2, r3
 800a52e:	1192      	asrs	r2, r2, #6
 800a530:	17db      	asrs	r3, r3, #31
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	e000      	b.n	800a538 <lv_obj_get_scrollbar_area+0x33c>
 800a536:	2301      	movs	r3, #1
 800a538:	42a3      	cmp	r3, r4
 800a53a:	db1e      	blt.n	800a57a <lv_obj_get_scrollbar_area+0x37e>
 800a53c:	2000      	movs	r0, #0
 800a53e:	f014 f9cf 	bl	801e8e0 <lv_disp_get_dpi>
 800a542:	4603      	mov	r3, r0
 800a544:	461a      	mov	r2, r3
 800a546:	4613      	mov	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	2bef      	cmp	r3, #239	; 0xef
 800a550:	dd11      	ble.n	800a576 <lv_obj_get_scrollbar_area+0x37a>
 800a552:	2000      	movs	r0, #0
 800a554:	f014 f9c4 	bl	801e8e0 <lv_disp_get_dpi>
 800a558:	4603      	mov	r3, r0
 800a55a:	461a      	mov	r2, r3
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	3350      	adds	r3, #80	; 0x50
 800a566:	4a98      	ldr	r2, [pc, #608]	; (800a7c8 <lv_obj_get_scrollbar_area+0x5cc>)
 800a568:	fb82 1203 	smull	r1, r2, r2, r3
 800a56c:	1192      	asrs	r2, r2, #6
 800a56e:	17db      	asrs	r3, r3, #31
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	b21b      	sxth	r3, r3
 800a574:	e003      	b.n	800a57e <lv_obj_get_scrollbar_area+0x382>
 800a576:	2301      	movs	r3, #1
 800a578:	e001      	b.n	800a57e <lv_obj_get_scrollbar_area+0x382>
 800a57a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a57e:	843b      	strh	r3, [r7, #32]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800a580:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a582:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	b29a      	uxth	r2, r3
 800a588:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	b29a      	uxth	r2, r3
 800a594:	8c3b      	ldrh	r3, [r7, #32]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	b29b      	uxth	r3, r3
 800a59a:	83fb      	strh	r3, [r7, #30]
              sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 800a59c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a59e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	83bb      	strh	r3, [r7, #28]
        if(scroll_h <= 0) {
 800a5a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	dc19      	bgt.n	800a5e2 <lv_obj_get_scrollbar_area+0x3e6>
            ver_area->y1 = obj->coords.y1 + top_space;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a5b8:	4413      	add	r3, r2
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	b21a      	sxth	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	b21a      	sxth	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	80da      	strh	r2, [r3, #6]
 800a5e0:	e0fa      	b.n	800a7d8 <lv_obj_get_scrollbar_area+0x5dc>
        }
        else {
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800a5e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a5e6:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800a5ea:	fb03 f202 	mul.w	r2, r3, r2
 800a5ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a5f2:	fb92 f3f3 	sdiv	r3, r2, r3
 800a5f6:	837b      	strh	r3, [r7, #26]
            sb_y = rem - sb_y;
 800a5f8:	8bfa      	ldrh	r2, [r7, #30]
 800a5fa:	8b7b      	ldrh	r3, [r7, #26]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	837b      	strh	r3, [r7, #26]

            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a608:	b29a      	uxth	r2, r3
 800a60a:	8b7b      	ldrh	r3, [r7, #26]
 800a60c:	4413      	add	r3, r2
 800a60e:	b29a      	uxth	r2, r3
 800a610:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a612:	4413      	add	r3, r2
 800a614:	b29b      	uxth	r3, r3
 800a616:	b21a      	sxth	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a622:	b29a      	uxth	r2, r3
 800a624:	8c3b      	ldrh	r3, [r7, #32]
 800a626:	4413      	add	r3, r2
 800a628:	b29b      	uxth	r3, r3
 800a62a:	3b01      	subs	r3, #1
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	b21a      	sxth	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	80da      	strh	r2, [r3, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a63a:	461a      	mov	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a642:	4619      	mov	r1, r3
 800a644:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800a648:	440b      	add	r3, r1
 800a64a:	429a      	cmp	r2, r3
 800a64c:	da57      	bge.n	800a6fe <lv_obj_get_scrollbar_area+0x502>
                ver_area->y1 = obj->coords.y1 + top_space;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a654:	b29a      	uxth	r2, r3
 800a656:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a658:	4413      	add	r3, r2
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	b21a      	sxth	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	805a      	strh	r2, [r3, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a668:	461c      	mov	r4, r3
 800a66a:	2000      	movs	r0, #0
 800a66c:	f014 f938 	bl	801e8e0 <lv_disp_get_dpi>
 800a670:	4603      	mov	r3, r0
 800a672:	461a      	mov	r2, r3
 800a674:	4613      	mov	r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	2bef      	cmp	r3, #239	; 0xef
 800a67e:	dd10      	ble.n	800a6a2 <lv_obj_get_scrollbar_area+0x4a6>
 800a680:	2000      	movs	r0, #0
 800a682:	f014 f92d 	bl	801e8e0 <lv_disp_get_dpi>
 800a686:	4603      	mov	r3, r0
 800a688:	461a      	mov	r2, r3
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	005b      	lsls	r3, r3, #1
 800a692:	3350      	adds	r3, #80	; 0x50
 800a694:	4a4c      	ldr	r2, [pc, #304]	; (800a7c8 <lv_obj_get_scrollbar_area+0x5cc>)
 800a696:	fb82 1203 	smull	r1, r2, r2, r3
 800a69a:	1192      	asrs	r2, r2, #6
 800a69c:	17db      	asrs	r3, r3, #31
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	e000      	b.n	800a6a4 <lv_obj_get_scrollbar_area+0x4a8>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	4423      	add	r3, r4
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	dd26      	ble.n	800a6fe <lv_obj_get_scrollbar_area+0x502>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a6b6:	b29c      	uxth	r4, r3
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	f014 f911 	bl	801e8e0 <lv_disp_get_dpi>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	2bef      	cmp	r3, #239	; 0xef
 800a6cc:	dd11      	ble.n	800a6f2 <lv_obj_get_scrollbar_area+0x4f6>
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	f014 f906 	bl	801e8e0 <lv_disp_get_dpi>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	3350      	adds	r3, #80	; 0x50
 800a6e2:	4a39      	ldr	r2, [pc, #228]	; (800a7c8 <lv_obj_get_scrollbar_area+0x5cc>)
 800a6e4:	fb82 1203 	smull	r1, r2, r2, r3
 800a6e8:	1192      	asrs	r2, r2, #6
 800a6ea:	17db      	asrs	r3, r3, #31
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	e000      	b.n	800a6f4 <lv_obj_get_scrollbar_area+0x4f8>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	4423      	add	r3, r4
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	b21a      	sxth	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	80da      	strh	r2, [r3, #6]
                }
            }
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a704:	4619      	mov	r1, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a70c:	461a      	mov	r2, r3
 800a70e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a712:	1ad2      	subs	r2, r2, r3
 800a714:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	4299      	cmp	r1, r3
 800a71c:	dd5c      	ble.n	800a7d8 <lv_obj_get_scrollbar_area+0x5dc>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a724:	b29a      	uxth	r2, r3
 800a726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	b29b      	uxth	r3, r3
 800a732:	b21a      	sxth	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	80da      	strh	r2, [r3, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a73e:	461c      	mov	r4, r3
 800a740:	2000      	movs	r0, #0
 800a742:	f014 f8cd 	bl	801e8e0 <lv_disp_get_dpi>
 800a746:	4603      	mov	r3, r0
 800a748:	461a      	mov	r2, r3
 800a74a:	4613      	mov	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	2bef      	cmp	r3, #239	; 0xef
 800a754:	dd10      	ble.n	800a778 <lv_obj_get_scrollbar_area+0x57c>
 800a756:	2000      	movs	r0, #0
 800a758:	f014 f8c2 	bl	801e8e0 <lv_disp_get_dpi>
 800a75c:	4603      	mov	r3, r0
 800a75e:	461a      	mov	r2, r3
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	3350      	adds	r3, #80	; 0x50
 800a76a:	4a17      	ldr	r2, [pc, #92]	; (800a7c8 <lv_obj_get_scrollbar_area+0x5cc>)
 800a76c:	fb82 1203 	smull	r1, r2, r2, r3
 800a770:	1192      	asrs	r2, r2, #6
 800a772:	17db      	asrs	r3, r3, #31
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	e000      	b.n	800a77a <lv_obj_get_scrollbar_area+0x57e>
 800a778:	2301      	movs	r3, #1
 800a77a:	1ae3      	subs	r3, r4, r3
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a782:	4293      	cmp	r3, r2
 800a784:	da28      	bge.n	800a7d8 <lv_obj_get_scrollbar_area+0x5dc>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a78c:	b29c      	uxth	r4, r3
 800a78e:	2000      	movs	r0, #0
 800a790:	f014 f8a6 	bl	801e8e0 <lv_disp_get_dpi>
 800a794:	4603      	mov	r3, r0
 800a796:	461a      	mov	r2, r3
 800a798:	4613      	mov	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	2bef      	cmp	r3, #239	; 0xef
 800a7a2:	dd13      	ble.n	800a7cc <lv_obj_get_scrollbar_area+0x5d0>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	f014 f89b 	bl	801e8e0 <lv_disp_get_dpi>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	3350      	adds	r3, #80	; 0x50
 800a7b8:	4a03      	ldr	r2, [pc, #12]	; (800a7c8 <lv_obj_get_scrollbar_area+0x5cc>)
 800a7ba:	fb82 1203 	smull	r1, r2, r2, r3
 800a7be:	1192      	asrs	r2, r2, #6
 800a7c0:	17db      	asrs	r3, r3, #31
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	e002      	b.n	800a7ce <lv_obj_get_scrollbar_area+0x5d2>
 800a7c8:	66666667 	.word	0x66666667
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	1ae3      	subs	r3, r4, r3
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	b21a      	sxth	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    /*Draw horizontal scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_w = obj_w + sl + sr;
 800a7d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a7da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a7dc:	4413      	add	r3, r2
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a7e2:	4413      	add	r3, r2
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	833b      	strh	r3, [r7, #24]
    if(hor_draw && content_w) {
 800a7e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 82c4 	beq.w	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
 800a7f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 82bf 	beq.w	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a802:	b29a      	uxth	r2, r3
 800a804:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	b29b      	uxth	r3, r3
 800a80a:	b21a      	sxth	r2, r3
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	80da      	strh	r2, [r3, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a816:	b29a      	uxth	r2, r3
 800a818:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	3301      	adds	r3, #1
 800a820:	b29b      	uxth	r3, r3
 800a822:	b21a      	sxth	r2, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	805a      	strh	r2, [r3, #2]
        hor_area->x1 = obj->coords.x1;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	801a      	strh	r2, [r3, #0]
        hor_area->x2 = obj->coords.x2;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	809a      	strh	r2, [r3, #4]

        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800a83c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800a840:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800a844:	1ad2      	subs	r2, r2, r3
 800a846:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800a856:	fb03 f202 	mul.w	r2, r3, r2
 800a85a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a85e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a862:	82fb      	strh	r3, [r7, #22]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800a864:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800a868:	2000      	movs	r0, #0
 800a86a:	f014 f839 	bl	801e8e0 <lv_disp_get_dpi>
 800a86e:	4603      	mov	r3, r0
 800a870:	461a      	mov	r2, r3
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	2bef      	cmp	r3, #239	; 0xef
 800a87c:	dd10      	ble.n	800a8a0 <lv_obj_get_scrollbar_area+0x6a4>
 800a87e:	2000      	movs	r0, #0
 800a880:	f014 f82e 	bl	801e8e0 <lv_disp_get_dpi>
 800a884:	4603      	mov	r3, r0
 800a886:	461a      	mov	r2, r3
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	3350      	adds	r3, #80	; 0x50
 800a892:	4aa7      	ldr	r2, [pc, #668]	; (800ab30 <lv_obj_get_scrollbar_area+0x934>)
 800a894:	fb82 1203 	smull	r1, r2, r2, r3
 800a898:	1192      	asrs	r2, r2, #6
 800a89a:	17db      	asrs	r3, r3, #31
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	e000      	b.n	800a8a2 <lv_obj_get_scrollbar_area+0x6a6>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	42a3      	cmp	r3, r4
 800a8a4:	db1e      	blt.n	800a8e4 <lv_obj_get_scrollbar_area+0x6e8>
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f014 f81a 	bl	801e8e0 <lv_disp_get_dpi>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	2bef      	cmp	r3, #239	; 0xef
 800a8ba:	dd11      	ble.n	800a8e0 <lv_obj_get_scrollbar_area+0x6e4>
 800a8bc:	2000      	movs	r0, #0
 800a8be:	f014 f80f 	bl	801e8e0 <lv_disp_get_dpi>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	3350      	adds	r3, #80	; 0x50
 800a8d0:	4a97      	ldr	r2, [pc, #604]	; (800ab30 <lv_obj_get_scrollbar_area+0x934>)
 800a8d2:	fb82 1203 	smull	r1, r2, r2, r3
 800a8d6:	1192      	asrs	r2, r2, #6
 800a8d8:	17db      	asrs	r3, r3, #31
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	b21b      	sxth	r3, r3
 800a8de:	e003      	b.n	800a8e8 <lv_obj_get_scrollbar_area+0x6ec>
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e001      	b.n	800a8e8 <lv_obj_get_scrollbar_area+0x6ec>
 800a8e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a8e8:	82fb      	strh	r3, [r7, #22]
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800a8ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a8ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	8afb      	ldrh	r3, [r7, #22]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	b29b      	uxth	r3, r3
 800a904:	83fb      	strh	r3, [r7, #30]
              sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800a906:	8b3a      	ldrh	r2, [r7, #24]
 800a908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	82bb      	strh	r3, [r7, #20]
        if(scroll_w <= 0) {
 800a910:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dc37      	bgt.n	800a988 <lv_obj_get_scrollbar_area+0x78c>
            if(rtl) {
 800a918:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d019      	beq.n	800a954 <lv_obj_get_scrollbar_area+0x758>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a926:	b29a      	uxth	r2, r3
 800a928:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a92a:	4413      	add	r3, r2
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a930:	4413      	add	r3, r2
 800a932:	b29b      	uxth	r3, r3
 800a934:	3b01      	subs	r3, #1
 800a936:	b29b      	uxth	r3, r3
 800a938:	b21a      	sxth	r2, r3
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a944:	b29a      	uxth	r2, r3
 800a946:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	b21a      	sxth	r2, r3
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	809a      	strh	r2, [r3, #4]
 800a952:	e212      	b.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
            }
            else {
                hor_area->x1 = obj->coords.x1 + left_space;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a95e:	4413      	add	r3, r2
 800a960:	b29b      	uxth	r3, r3
 800a962:	b21a      	sxth	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800a96e:	b29a      	uxth	r2, r3
 800a970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	b29a      	uxth	r2, r3
 800a976:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	3b01      	subs	r3, #1
 800a97e:	b29b      	uxth	r3, r3
 800a980:	b21a      	sxth	r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	809a      	strh	r2, [r3, #4]
 800a986:	e1f8      	b.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
            }
        }
        else {
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800a988:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a98c:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800a990:	fb03 f202 	mul.w	r2, r3, r2
 800a994:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a998:	fb92 f3f3 	sdiv	r3, r2, r3
 800a99c:	827b      	strh	r3, [r7, #18]
            sb_x = rem - sb_x;
 800a99e:	8bfa      	ldrh	r2, [r7, #30]
 800a9a0:	8a7b      	ldrh	r3, [r7, #18]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	827b      	strh	r3, [r7, #18]

            if(rtl) {
 800a9a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 80f1 	beq.w	800ab94 <lv_obj_get_scrollbar_area+0x998>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	8a7b      	ldrh	r3, [r7, #18]
 800a9bc:	4413      	add	r3, r2
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a9c2:	4413      	add	r3, r2
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9c8:	4413      	add	r3, r2
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	b21a      	sxth	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	8afb      	ldrh	r3, [r7, #22]
 800a9dc:	4413      	add	r3, r2
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	b21a      	sxth	r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800a9fe:	441a      	add	r2, r3
 800aa00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800aa04:	4413      	add	r3, r2
 800aa06:	4299      	cmp	r1, r3
 800aa08:	da5a      	bge.n	800aac0 <lv_obj_get_scrollbar_area+0x8c4>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aa14:	4413      	add	r3, r2
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa1a:	4413      	add	r3, r2
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	b21a      	sxth	r2, r3
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa2a:	461c      	mov	r4, r3
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f013 ff57 	bl	801e8e0 <lv_disp_get_dpi>
 800aa32:	4603      	mov	r3, r0
 800aa34:	461a      	mov	r2, r3
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	2bef      	cmp	r3, #239	; 0xef
 800aa40:	dd10      	ble.n	800aa64 <lv_obj_get_scrollbar_area+0x868>
 800aa42:	2000      	movs	r0, #0
 800aa44:	f013 ff4c 	bl	801e8e0 <lv_disp_get_dpi>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	4413      	add	r3, r2
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	3350      	adds	r3, #80	; 0x50
 800aa56:	4a36      	ldr	r2, [pc, #216]	; (800ab30 <lv_obj_get_scrollbar_area+0x934>)
 800aa58:	fb82 1203 	smull	r1, r2, r2, r3
 800aa5c:	1192      	asrs	r2, r2, #6
 800aa5e:	17db      	asrs	r3, r3, #31
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	e000      	b.n	800aa66 <lv_obj_get_scrollbar_area+0x86a>
 800aa64:	2301      	movs	r3, #1
 800aa66:	4423      	add	r3, r4
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	dd26      	ble.n	800aac0 <lv_obj_get_scrollbar_area+0x8c4>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa78:	b29c      	uxth	r4, r3
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	f013 ff30 	bl	801e8e0 <lv_disp_get_dpi>
 800aa80:	4603      	mov	r3, r0
 800aa82:	461a      	mov	r2, r3
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	2bef      	cmp	r3, #239	; 0xef
 800aa8e:	dd11      	ble.n	800aab4 <lv_obj_get_scrollbar_area+0x8b8>
 800aa90:	2000      	movs	r0, #0
 800aa92:	f013 ff25 	bl	801e8e0 <lv_disp_get_dpi>
 800aa96:	4603      	mov	r3, r0
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	005b      	lsls	r3, r3, #1
 800aaa2:	3350      	adds	r3, #80	; 0x50
 800aaa4:	4a22      	ldr	r2, [pc, #136]	; (800ab30 <lv_obj_get_scrollbar_area+0x934>)
 800aaa6:	fb82 1203 	smull	r1, r2, r2, r3
 800aaaa:	1192      	asrs	r2, r2, #6
 800aaac:	17db      	asrs	r3, r3, #31
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	e000      	b.n	800aab6 <lv_obj_get_scrollbar_area+0x8ba>
 800aab4:	2301      	movs	r3, #1
 800aab6:	4423      	add	r3, r4
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	b21a      	sxth	r2, r3
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aac6:	461a      	mov	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800aace:	4619      	mov	r1, r3
 800aad0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800aad4:	1acb      	subs	r3, r1, r3
 800aad6:	429a      	cmp	r2, r3
 800aad8:	f340 814f 	ble.w	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	b21a      	sxth	r2, r3
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aaf6:	461c      	mov	r4, r3
 800aaf8:	2000      	movs	r0, #0
 800aafa:	f013 fef1 	bl	801e8e0 <lv_disp_get_dpi>
 800aafe:	4603      	mov	r3, r0
 800ab00:	461a      	mov	r2, r3
 800ab02:	4613      	mov	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	2bef      	cmp	r3, #239	; 0xef
 800ab0c:	dd12      	ble.n	800ab34 <lv_obj_get_scrollbar_area+0x938>
 800ab0e:	2000      	movs	r0, #0
 800ab10:	f013 fee6 	bl	801e8e0 <lv_disp_get_dpi>
 800ab14:	4603      	mov	r3, r0
 800ab16:	461a      	mov	r2, r3
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	3350      	adds	r3, #80	; 0x50
 800ab22:	4a03      	ldr	r2, [pc, #12]	; (800ab30 <lv_obj_get_scrollbar_area+0x934>)
 800ab24:	fb82 1203 	smull	r1, r2, r2, r3
 800ab28:	1192      	asrs	r2, r2, #6
 800ab2a:	17db      	asrs	r3, r3, #31
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	e002      	b.n	800ab36 <lv_obj_get_scrollbar_area+0x93a>
 800ab30:	66666667 	.word	0x66666667
 800ab34:	2301      	movs	r3, #1
 800ab36:	1ae3      	subs	r3, r4, r3
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	f280 811b 	bge.w	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ab4a:	b29c      	uxth	r4, r3
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	f013 fec7 	bl	801e8e0 <lv_disp_get_dpi>
 800ab52:	4603      	mov	r3, r0
 800ab54:	461a      	mov	r2, r3
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	2bef      	cmp	r3, #239	; 0xef
 800ab60:	dd11      	ble.n	800ab86 <lv_obj_get_scrollbar_area+0x98a>
 800ab62:	2000      	movs	r0, #0
 800ab64:	f013 febc 	bl	801e8e0 <lv_disp_get_dpi>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	3350      	adds	r3, #80	; 0x50
 800ab76:	4a82      	ldr	r2, [pc, #520]	; (800ad80 <lv_obj_get_scrollbar_area+0xb84>)
 800ab78:	fb82 1203 	smull	r1, r2, r2, r3
 800ab7c:	1192      	asrs	r2, r2, #6
 800ab7e:	17db      	asrs	r3, r3, #31
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	e000      	b.n	800ab88 <lv_obj_get_scrollbar_area+0x98c>
 800ab86:	2301      	movs	r3, #1
 800ab88:	1ae3      	subs	r3, r4, r3
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	b21a      	sxth	r2, r3
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	801a      	strh	r2, [r3, #0]
 800ab92:	e0f2      	b.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
                    }
                }
            }
            else {
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	8a7b      	ldrh	r3, [r7, #18]
 800ab9e:	4413      	add	r3, r2
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aba4:	4413      	add	r3, r2
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	b21a      	sxth	r2, r3
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	8afb      	ldrh	r3, [r7, #22]
 800abb8:	4413      	add	r3, r2
 800abba:	b29b      	uxth	r3, r3
 800abbc:	3b01      	subs	r3, #1
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	b21a      	sxth	r2, r3
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abcc:	461a      	mov	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800abd4:	4619      	mov	r1, r3
 800abd6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800abda:	440b      	add	r3, r1
 800abdc:	429a      	cmp	r2, r3
 800abde:	da57      	bge.n	800ac90 <lv_obj_get_scrollbar_area+0xa94>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800abea:	4413      	add	r3, r2
 800abec:	b29b      	uxth	r3, r3
 800abee:	b21a      	sxth	r2, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abfa:	461c      	mov	r4, r3
 800abfc:	2000      	movs	r0, #0
 800abfe:	f013 fe6f 	bl	801e8e0 <lv_disp_get_dpi>
 800ac02:	4603      	mov	r3, r0
 800ac04:	461a      	mov	r2, r3
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	2bef      	cmp	r3, #239	; 0xef
 800ac10:	dd10      	ble.n	800ac34 <lv_obj_get_scrollbar_area+0xa38>
 800ac12:	2000      	movs	r0, #0
 800ac14:	f013 fe64 	bl	801e8e0 <lv_disp_get_dpi>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	3350      	adds	r3, #80	; 0x50
 800ac26:	4a56      	ldr	r2, [pc, #344]	; (800ad80 <lv_obj_get_scrollbar_area+0xb84>)
 800ac28:	fb82 1203 	smull	r1, r2, r2, r3
 800ac2c:	1192      	asrs	r2, r2, #6
 800ac2e:	17db      	asrs	r3, r3, #31
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	e000      	b.n	800ac36 <lv_obj_get_scrollbar_area+0xa3a>
 800ac34:	2301      	movs	r3, #1
 800ac36:	4423      	add	r3, r4
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	dd26      	ble.n	800ac90 <lv_obj_get_scrollbar_area+0xa94>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac48:	b29c      	uxth	r4, r3
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	f013 fe48 	bl	801e8e0 <lv_disp_get_dpi>
 800ac50:	4603      	mov	r3, r0
 800ac52:	461a      	mov	r2, r3
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	2bef      	cmp	r3, #239	; 0xef
 800ac5e:	dd11      	ble.n	800ac84 <lv_obj_get_scrollbar_area+0xa88>
 800ac60:	2000      	movs	r0, #0
 800ac62:	f013 fe3d 	bl	801e8e0 <lv_disp_get_dpi>
 800ac66:	4603      	mov	r3, r0
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	3350      	adds	r3, #80	; 0x50
 800ac74:	4a42      	ldr	r2, [pc, #264]	; (800ad80 <lv_obj_get_scrollbar_area+0xb84>)
 800ac76:	fb82 1203 	smull	r1, r2, r2, r3
 800ac7a:	1192      	asrs	r2, r2, #6
 800ac7c:	17db      	asrs	r3, r3, #31
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	e000      	b.n	800ac86 <lv_obj_get_scrollbar_area+0xa8a>
 800ac84:	2301      	movs	r3, #1
 800ac86:	4423      	add	r3, r4
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	b21a      	sxth	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac96:	4619      	mov	r1, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800aca4:	1ad2      	subs	r2, r2, r3
 800aca6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	4299      	cmp	r1, r3
 800acae:	dd64      	ble.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acba:	1ad3      	subs	r3, r2, r3
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	b21a      	sxth	r2, r3
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800acd0:	461c      	mov	r4, r3
 800acd2:	2000      	movs	r0, #0
 800acd4:	f013 fe04 	bl	801e8e0 <lv_disp_get_dpi>
 800acd8:	4603      	mov	r3, r0
 800acda:	461a      	mov	r2, r3
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	2bef      	cmp	r3, #239	; 0xef
 800ace6:	dd10      	ble.n	800ad0a <lv_obj_get_scrollbar_area+0xb0e>
 800ace8:	2000      	movs	r0, #0
 800acea:	f013 fdf9 	bl	801e8e0 <lv_disp_get_dpi>
 800acee:	4603      	mov	r3, r0
 800acf0:	461a      	mov	r2, r3
 800acf2:	4613      	mov	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	3350      	adds	r3, #80	; 0x50
 800acfc:	4a20      	ldr	r2, [pc, #128]	; (800ad80 <lv_obj_get_scrollbar_area+0xb84>)
 800acfe:	fb82 1203 	smull	r1, r2, r2, r3
 800ad02:	1192      	asrs	r2, r2, #6
 800ad04:	17db      	asrs	r3, r3, #31
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	e000      	b.n	800ad0c <lv_obj_get_scrollbar_area+0xb10>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	1ae3      	subs	r3, r4, r3
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ad14:	4293      	cmp	r3, r2
 800ad16:	da30      	bge.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ad1e:	b29c      	uxth	r4, r3
 800ad20:	2000      	movs	r0, #0
 800ad22:	f013 fddd 	bl	801e8e0 <lv_disp_get_dpi>
 800ad26:	4603      	mov	r3, r0
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	2bef      	cmp	r3, #239	; 0xef
 800ad34:	dd11      	ble.n	800ad5a <lv_obj_get_scrollbar_area+0xb5e>
 800ad36:	2000      	movs	r0, #0
 800ad38:	f013 fdd2 	bl	801e8e0 <lv_disp_get_dpi>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	461a      	mov	r2, r3
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	3350      	adds	r3, #80	; 0x50
 800ad4a:	4a0d      	ldr	r2, [pc, #52]	; (800ad80 <lv_obj_get_scrollbar_area+0xb84>)
 800ad4c:	fb82 1203 	smull	r1, r2, r2, r3
 800ad50:	1192      	asrs	r2, r2, #6
 800ad52:	17db      	asrs	r3, r3, #31
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	e000      	b.n	800ad5c <lv_obj_get_scrollbar_area+0xb60>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	1ae3      	subs	r3, r4, r3
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	b21a      	sxth	r2, r3
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	801a      	strh	r2, [r3, #0]
 800ad66:	e008      	b.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800ad68:	bf00      	nop
 800ad6a:	e006      	b.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800ad6c:	bf00      	nop
 800ad6e:	e004      	b.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
        if(indev == NULL)  return;
 800ad70:	bf00      	nop
 800ad72:	e002      	b.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
    if(!hor_draw && !ver_draw) return;
 800ad74:	bf00      	nop
 800ad76:	e000      	b.n	800ad7a <lv_obj_get_scrollbar_area+0xb7e>
        return;
 800ad78:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800ad7a:	374c      	adds	r7, #76	; 0x4c
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd90      	pop	{r4, r7, pc}
 800ad80:	66666667 	.word	0x66666667

0800ad84 <lv_obj_scrollbar_invalidate>:

void lv_obj_scrollbar_invalidate(lv_obj_t * obj)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800ad8c:	f107 0208 	add.w	r2, r7, #8
 800ad90:	f107 0310 	add.w	r3, r7, #16
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fa30 	bl	800a1fc <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800ad9c:	f107 0310 	add.w	r3, r7, #16
 800ada0:	4618      	mov	r0, r3
 800ada2:	f014 f990 	bl	801f0c6 <lv_area_get_size>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d107      	bne.n	800adbc <lv_obj_scrollbar_invalidate+0x38>
 800adac:	f107 0308 	add.w	r3, r7, #8
 800adb0:	4618      	mov	r0, r3
 800adb2:	f014 f988 	bl	801f0c6 <lv_area_get_size>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01c      	beq.n	800adf6 <lv_obj_scrollbar_invalidate+0x72>

    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800adbc:	f107 0310 	add.w	r3, r7, #16
 800adc0:	4618      	mov	r0, r3
 800adc2:	f014 f980 	bl	801f0c6 <lv_area_get_size>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <lv_obj_scrollbar_invalidate+0x54>
 800adcc:	f107 0310 	add.w	r3, r7, #16
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7fd fe04 	bl	80089e0 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800add8:	f107 0308 	add.w	r3, r7, #8
 800addc:	4618      	mov	r0, r3
 800adde:	f014 f972 	bl	801f0c6 <lv_area_get_size>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d007      	beq.n	800adf8 <lv_obj_scrollbar_invalidate+0x74>
 800ade8:	f107 0308 	add.w	r3, r7, #8
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7fd fdf6 	bl	80089e0 <lv_obj_invalidate_area>
 800adf4:	e000      	b.n	800adf8 <lv_obj_scrollbar_invalidate+0x74>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800adf6:	bf00      	nop
}
 800adf8:	3718      	adds	r7, #24
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <lv_obj_readjust_scroll>:

void lv_obj_readjust_scroll(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	460b      	mov	r3, r1
 800ae08:	70fb      	strb	r3, [r7, #3]
    /*Be sure the bottom side is not remains scrolled in*/
    /*With snapping the content can't be scrolled in*/
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7fe fd08 	bl	8009820 <lv_obj_get_scroll_snap_y>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d121      	bne.n	800ae5a <lv_obj_readjust_scroll+0x5c>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7fe fd48 	bl	80098ac <lv_obj_get_scroll_top>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	81fb      	strh	r3, [r7, #14]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7fe fd5b 	bl	80098dc <lv_obj_get_scroll_bottom>
 800ae26:	4603      	mov	r3, r0
 800ae28:	81bb      	strh	r3, [r7, #12]
        if(sb < 0 && st > 0) {
 800ae2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	da13      	bge.n	800ae5a <lv_obj_readjust_scroll+0x5c>
 800ae32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dd0f      	ble.n	800ae5a <lv_obj_readjust_scroll+0x5c>
            sb = LV_MIN(st, -sb);
 800ae3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae3e:	425a      	negs	r2, r3
 800ae40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	bfa8      	it	ge
 800ae48:	4613      	movge	r3, r2
 800ae4a:	81bb      	strh	r3, [r7, #12]
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800ae4c:	78fb      	ldrb	r3, [r7, #3]
 800ae4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ae52:	2100      	movs	r1, #0
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7fe ffd3 	bl	8009e00 <lv_obj_scroll_by>
        }
    }

    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7fe fcca 	bl	80097f4 <lv_obj_get_scroll_snap_x>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d141      	bne.n	800aeea <lv_obj_readjust_scroll+0xec>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7fe fdbe 	bl	80099e8 <lv_obj_get_scroll_left>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	817b      	strh	r3, [r7, #10]
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7fe fe5d 	bl	8009b30 <lv_obj_get_scroll_right>
 800ae76:	4603      	mov	r3, r0
 800ae78:	813b      	strh	r3, [r7, #8]
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7fe fc56 	bl	800972e <lv_obj_get_style_base_dir>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d018      	beq.n	800aeba <lv_obj_readjust_scroll+0xbc>
            /*Be sure the left side is not remains scrolled in*/
            if(sr < 0 && sl > 0) {
 800ae88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	da2c      	bge.n	800aeea <lv_obj_readjust_scroll+0xec>
 800ae90:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	dd28      	ble.n	800aeea <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sl, -sr);
 800ae98:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ae9c:	425a      	negs	r2, r3
 800ae9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aea2:	4293      	cmp	r3, r2
 800aea4:	bfa8      	it	ge
 800aea6:	4613      	movge	r3, r2
 800aea8:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800aeaa:	78fb      	ldrb	r3, [r7, #3]
 800aeac:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7fe ffa4 	bl	8009e00 <lv_obj_scroll_by>
                sr = LV_MIN(sr, -sl);
                lv_obj_scroll_by(obj, sl, 0, anim_en);
            }
        }
    }
}
 800aeb8:	e017      	b.n	800aeea <lv_obj_readjust_scroll+0xec>
            if(sl < 0 && sr > 0) {
 800aeba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	da13      	bge.n	800aeea <lv_obj_readjust_scroll+0xec>
 800aec2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dd0f      	ble.n	800aeea <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sr, -sl);
 800aeca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aece:	425a      	negs	r2, r3
 800aed0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aed4:	4293      	cmp	r3, r2
 800aed6:	bfa8      	it	ge
 800aed8:	4613      	movge	r3, r2
 800aeda:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800aedc:	78fb      	ldrb	r3, [r7, #3]
 800aede:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800aee2:	2200      	movs	r2, #0
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7fe ff8b 	bl	8009e00 <lv_obj_scroll_by>
}
 800aeea:	bf00      	nop
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <scroll_x_anim>:
 *   STATIC FUNCTIONS
 **********************/


static void scroll_x_anim(void * obj, int32_t v)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7fe fca5 	bl	800984c <lv_obj_get_scroll_x>
 800af02:	4603      	mov	r3, r0
 800af04:	b29a      	uxth	r2, r3
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	4413      	add	r3, r2
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	b21b      	sxth	r3, r3
 800af10:	2200      	movs	r2, #0
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff f928 	bl	800a16a <_lv_obj_scroll_by_raw>
}
 800af1a:	bf00      	nop
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <scroll_y_anim>:

static void scroll_y_anim(void * obj, int32_t v)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7fe fca5 	bl	800987c <lv_obj_get_scroll_y>
 800af32:	4603      	mov	r3, r0
 800af34:	b29a      	uxth	r2, r3
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	4413      	add	r3, r2
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	b21b      	sxth	r3, r3
 800af40:	461a      	mov	r2, r3
 800af42:	2100      	movs	r1, #0
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7ff f910 	bl	800a16a <_lv_obj_scroll_by_raw>
}
 800af4a:	bf00      	nop
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <scroll_anim_ready_cb>:

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b082      	sub	sp, #8
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2200      	movs	r2, #0
 800af60:	210a      	movs	r1, #10
 800af62:	4618      	mov	r0, r3
 800af64:	f7f9 f9a4 	bl	80042b0 <lv_event_send>
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b092      	sub	sp, #72	; 0x48
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800af7e:	68b8      	ldr	r0, [r7, #8]
 800af80:	f001 fec0 	bl	800cd04 <lv_obj_get_parent>
 800af84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800af86:	2110      	movs	r1, #16
 800af88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af8a:	f7fa fad6 	bl	800553a <lv_obj_has_flag>
 800af8e:	4603      	mov	r3, r0
 800af90:	f083 0301 	eor.w	r3, r3, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	f040 829f 	bne.w	800b4da <scroll_area_into_view+0x56a>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800af9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af9e:	f7fe fc13 	bl	80097c8 <lv_obj_get_scroll_dir>
 800afa2:	4603      	mov	r3, r0
 800afa4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    lv_coord_t snap_goal = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t act = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 800afb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800afb8:	f7fe fc32 	bl	8009820 <lv_obj_get_scroll_snap_y>
 800afbc:	4603      	mov	r3, r0
 800afbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800afc2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d003      	beq.n	800afd2 <scroll_area_into_view+0x62>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	3314      	adds	r3, #20
 800afce:	647b      	str	r3, [r7, #68]	; 0x44
 800afd0:	e001      	b.n	800afd6 <scroll_area_into_view+0x66>
    else area_tmp = area;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800afd6:	2100      	movs	r1, #0
 800afd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800afda:	f7fe fb96 	bl	800970a <lv_obj_get_style_border_width>
 800afde:	4603      	mov	r3, r0
 800afe0:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800afe2:	2100      	movs	r1, #0
 800afe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800afe6:	f7fe fb24 	bl	8009632 <lv_obj_get_style_pad_top>
 800afea:	4603      	mov	r3, r0
 800afec:	b29a      	uxth	r2, r3
 800afee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aff0:	4413      	add	r3, r2
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800aff6:	2100      	movs	r1, #0
 800aff8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800affa:	f7fe fb2c 	bl	8009656 <lv_obj_get_style_pad_bottom>
 800affe:	4603      	mov	r3, r0
 800b000:	b29a      	uxth	r2, r3
 800b002:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b004:	4413      	add	r3, r2
 800b006:	b29b      	uxth	r3, r3
 800b008:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800b00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b010:	b29a      	uxth	r2, r3
 800b012:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b014:	4413      	add	r3, r2
 800b016:	b29a      	uxth	r2, r3
 800b018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b01a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	b29a      	uxth	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	b29b      	uxth	r3, r3
 800b030:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b038:	b29a      	uxth	r2, r3
 800b03a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b03c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b040:	b299      	uxth	r1, r3
 800b042:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800b044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b046:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	1ac3      	subs	r3, r0, r3
 800b04e:	b29b      	uxth	r3, r3
 800b050:	440b      	add	r3, r1
 800b052:	b29b      	uxth	r3, r3
 800b054:	4413      	add	r3, r2
 800b056:	b29b      	uxth	r3, r3
 800b058:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800b05a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b05c:	f7fc ff39 	bl	8007ed2 <lv_obj_get_height>
 800b060:	4603      	mov	r3, r0
 800b062:	b29a      	uxth	r2, r3
 800b064:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	b29a      	uxth	r2, r3
 800b06a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	853b      	strh	r3, [r7, #40]	; 0x28
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800b072:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b076:	2b00      	cmp	r3, #0
 800b078:	db07      	blt.n	800b08a <scroll_area_into_view+0x11a>
 800b07a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b07e:	2b00      	cmp	r3, #0
 800b080:	db03      	blt.n	800b08a <scroll_area_into_view+0x11a>
 800b082:	2300      	movs	r3, #0
 800b084:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b088:	e02e      	b.n	800b0e8 <scroll_area_into_view+0x178>
    else if(top_diff > 0) {
 800b08a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dd12      	ble.n	800b0b8 <scroll_area_into_view+0x148>
        y_scroll = top_diff;
 800b092:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b094:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800b098:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b09a:	f7fe fc07 	bl	80098ac <lv_obj_get_scroll_top>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(st - y_scroll < 0) y_scroll = 0;
 800b0a2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800b0a6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	da1b      	bge.n	800b0e8 <scroll_area_into_view+0x178>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b0b6:	e017      	b.n	800b0e8 <scroll_area_into_view+0x178>
    }
    else if(bottom_diff > 0) {
 800b0b8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	dd13      	ble.n	800b0e8 <scroll_area_into_view+0x178>
        y_scroll = -bottom_diff;
 800b0c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b0c2:	425b      	negs	r3, r3
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800b0ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b0cc:	f7fe fc06 	bl	80098dc <lv_obj_get_scroll_bottom>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        if(sb + y_scroll < 0) y_scroll = 0;
 800b0d4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800b0d8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800b0dc:	4413      	add	r3, r2
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	da02      	bge.n	800b0e8 <scroll_area_into_view+0x178>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    switch(snap_y) {
 800b0e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d03e      	beq.n	800b16e <scroll_area_into_view+0x1fe>
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	dc6e      	bgt.n	800b1d2 <scroll_area_into_view+0x262>
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d002      	beq.n	800b0fe <scroll_area_into_view+0x18e>
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d01c      	beq.n	800b136 <scroll_area_into_view+0x1c6>
 800b0fc:	e069      	b.n	800b1d2 <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
 800b0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b100:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b104:	b29a      	uxth	r2, r3
 800b106:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b108:	4413      	add	r3, r2
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y1 + y_scroll;
 800b10e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b110:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b114:	b29a      	uxth	r2, r3
 800b116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b11a:	4413      	add	r3, r2
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800b120:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b122:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	b29a      	uxth	r2, r3
 800b128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b12c:	4413      	add	r3, r2
 800b12e:	b29b      	uxth	r3, r3
 800b130:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800b134:	e04d      	b.n	800b1d2 <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
 800b136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b138:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	b29b      	uxth	r3, r3
 800b144:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y2 + y_scroll;
 800b146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b148:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b152:	4413      	add	r3, r2
 800b154:	b29b      	uxth	r3, r3
 800b156:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800b158:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b15a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	b29a      	uxth	r2, r3
 800b160:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b164:	4413      	add	r3, r2
 800b166:	b29b      	uxth	r3, r3
 800b168:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800b16c:	e031      	b.n	800b1d2 <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800b16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b170:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b174:	b29a      	uxth	r2, r3
 800b176:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b178:	4413      	add	r3, r2
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b180:	2b00      	cmp	r3, #0
 800b182:	da00      	bge.n	800b186 <scroll_area_into_view+0x216>
 800b184:	3301      	adds	r3, #1
 800b186:	105b      	asrs	r3, r3, #1
 800b188:	b21b      	sxth	r3, r3
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	4413      	add	r3, r2
 800b18e:	b29b      	uxth	r3, r3
 800b190:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800b192:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b194:	f7fe f9c9 	bl	800952a <lv_area_get_height>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da00      	bge.n	800b1a0 <scroll_area_into_view+0x230>
 800b19e:	3301      	adds	r3, #1
 800b1a0:	105b      	asrs	r3, r3, #1
 800b1a2:	b21b      	sxth	r3, r3
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	4413      	add	r3, r2
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b1b6:	4413      	add	r3, r2
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800b1bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b1be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b1c8:	4413      	add	r3, r2
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800b1d0:	bf00      	nop
    }

    lv_coord_t x_scroll = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800b1d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1da:	f7fe fb0b 	bl	80097f4 <lv_obj_get_scroll_snap_x>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800b1e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <scroll_area_into_view+0x284>
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	3314      	adds	r3, #20
 800b1f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b1f2:	e001      	b.n	800b1f8 <scroll_area_into_view+0x288>
    else area_tmp = area;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1fc:	f7fe fa3d 	bl	800967a <lv_obj_get_style_pad_left>
 800b200:	4603      	mov	r3, r0
 800b202:	b29a      	uxth	r2, r3
 800b204:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b206:	4413      	add	r3, r2
 800b208:	b29b      	uxth	r3, r3
 800b20a:	843b      	strh	r3, [r7, #32]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800b20c:	2100      	movs	r1, #0
 800b20e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b210:	f7fe fa45 	bl	800969e <lv_obj_get_style_pad_right>
 800b214:	4603      	mov	r3, r0
 800b216:	b29a      	uxth	r2, r3
 800b218:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b21a:	4413      	add	r3, r2
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	83fb      	strh	r3, [r7, #30]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800b220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b222:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b226:	b29a      	uxth	r2, r3
 800b228:	8c3b      	ldrh	r3, [r7, #32]
 800b22a:	4413      	add	r3, r2
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b230:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b234:	b29b      	uxth	r3, r3
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	b29a      	uxth	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b240:	b29b      	uxth	r3, r3
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	b29b      	uxth	r3, r3
 800b246:	83bb      	strh	r3, [r7, #28]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b24e:	b29a      	uxth	r2, r3
 800b250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b256:	b299      	uxth	r1, r3
 800b258:	8bf8      	ldrh	r0, [r7, #30]
 800b25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b260:	b29b      	uxth	r3, r3
 800b262:	1ac3      	subs	r3, r0, r3
 800b264:	b29b      	uxth	r3, r3
 800b266:	440b      	add	r3, r1
 800b268:	b29b      	uxth	r3, r3
 800b26a:	4413      	add	r3, r2
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	837b      	strh	r3, [r7, #26]
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800b270:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b274:	2b00      	cmp	r3, #0
 800b276:	db07      	blt.n	800b288 <scroll_area_into_view+0x318>
 800b278:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	db03      	blt.n	800b288 <scroll_area_into_view+0x318>
 800b280:	2300      	movs	r3, #0
 800b282:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b286:	e02e      	b.n	800b2e6 <scroll_area_into_view+0x376>
    else if(left_diff > 0) {
 800b288:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dd12      	ble.n	800b2b6 <scroll_area_into_view+0x346>
        x_scroll = left_diff;
 800b290:	8bbb      	ldrh	r3, [r7, #28]
 800b292:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800b296:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b298:	f7fe fba6 	bl	80099e8 <lv_obj_get_scroll_left>
 800b29c:	4603      	mov	r3, r0
 800b29e:	82fb      	strh	r3, [r7, #22]
        if(sl - x_scroll < 0) x_scroll = 0;
 800b2a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b2a4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	da1b      	bge.n	800b2e6 <scroll_area_into_view+0x376>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b2b4:	e017      	b.n	800b2e6 <scroll_area_into_view+0x376>
    }
    else if(right_diff > 0) {
 800b2b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	dd13      	ble.n	800b2e6 <scroll_area_into_view+0x376>
        x_scroll = -right_diff;
 800b2be:	8b7b      	ldrh	r3, [r7, #26]
 800b2c0:	425b      	negs	r3, r3
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800b2c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2ca:	f7fe fc31 	bl	8009b30 <lv_obj_get_scroll_right>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	833b      	strh	r3, [r7, #24]
        if(sr + x_scroll < 0) x_scroll = 0;
 800b2d2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800b2d6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800b2da:	4413      	add	r3, r2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	da02      	bge.n	800b2e6 <scroll_area_into_view+0x376>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800b2e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2e8:	f7fc fde5 	bl	8007eb6 <lv_obj_get_width>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	8c3b      	ldrh	r3, [r7, #32]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	8bfb      	ldrh	r3, [r7, #30]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	82bb      	strh	r3, [r7, #20]
    switch(snap_x) {
 800b2fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b302:	2b03      	cmp	r3, #3
 800b304:	d03e      	beq.n	800b384 <scroll_area_into_view+0x414>
 800b306:	2b03      	cmp	r3, #3
 800b308:	dc6e      	bgt.n	800b3e8 <scroll_area_into_view+0x478>
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d002      	beq.n	800b314 <scroll_area_into_view+0x3a4>
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d01c      	beq.n	800b34c <scroll_area_into_view+0x3dc>
 800b312:	e069      	b.n	800b3e8 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
 800b314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b316:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	8c3b      	ldrh	r3, [r7, #32]
 800b31e:	4413      	add	r3, r2
 800b320:	b29b      	uxth	r3, r3
 800b322:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x1 + x_scroll;
 800b324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b330:	4413      	add	r3, r2
 800b332:	b29b      	uxth	r3, r3
 800b334:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800b336:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b338:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b342:	4413      	add	r3, r2
 800b344:	b29b      	uxth	r3, r3
 800b346:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800b34a:	e04d      	b.n	800b3e8 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
 800b34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b352:	b29a      	uxth	r2, r3
 800b354:	8bfb      	ldrh	r3, [r7, #30]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	b29b      	uxth	r3, r3
 800b35a:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x2 + x_scroll;
 800b35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b35e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b362:	b29a      	uxth	r2, r3
 800b364:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b368:	4413      	add	r3, r2
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800b36e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b370:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	b29a      	uxth	r2, r3
 800b376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b37a:	4413      	add	r3, r2
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800b382:	e031      	b.n	800b3e8 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800b384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b386:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	8c3b      	ldrh	r3, [r7, #32]
 800b38e:	4413      	add	r3, r2
 800b390:	b29a      	uxth	r2, r3
 800b392:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b396:	2b00      	cmp	r3, #0
 800b398:	da00      	bge.n	800b39c <scroll_area_into_view+0x42c>
 800b39a:	3301      	adds	r3, #1
 800b39c:	105b      	asrs	r3, r3, #1
 800b39e:	b21b      	sxth	r3, r3
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	4413      	add	r3, r2
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800b3a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b3aa:	f7fe f8a7 	bl	80094fc <lv_area_get_width>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	da00      	bge.n	800b3b6 <scroll_area_into_view+0x446>
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	105b      	asrs	r3, r3, #1
 800b3b8:	b21b      	sxth	r3, r3
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	4413      	add	r3, r2
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b3cc:	4413      	add	r3, r2
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800b3d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b3d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b3de:	4413      	add	r3, r2
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800b3e6:	bf00      	nop
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800b3e8:	493f      	ldr	r1, [pc, #252]	; (800b4e8 <scroll_area_into_view+0x578>)
 800b3ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3ec:	f013 fbd4 	bl	801eb98 <lv_anim_del>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	74fb      	strb	r3, [r7, #19]
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800b3f4:	493d      	ldr	r1, [pc, #244]	; (800b4ec <scroll_area_into_view+0x57c>)
 800b3f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3f8:	f013 fbce 	bl	801eb98 <lv_anim_del>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	74bb      	strb	r3, [r7, #18]
    if(y_del || x_del) {
 800b400:	7cfb      	ldrb	r3, [r7, #19]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d102      	bne.n	800b40c <scroll_area_into_view+0x49c>
 800b406:	7cbb      	ldrb	r3, [r7, #18]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <scroll_area_into_view+0x4b0>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800b40c:	2200      	movs	r2, #0
 800b40e:	210a      	movs	r1, #10
 800b410:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b412:	f7f8 ff4d 	bl	80042b0 <lv_event_send>
 800b416:	4603      	mov	r3, r0
 800b418:	747b      	strb	r3, [r7, #17]
        if(res != LV_RES_OK) return;
 800b41a:	7c7b      	ldrb	r3, [r7, #17]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d15e      	bne.n	800b4de <scroll_area_into_view+0x56e>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800b420:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d106      	bne.n	800b43a <scroll_area_into_view+0x4ca>
 800b42c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	da02      	bge.n	800b43a <scroll_area_into_view+0x4ca>
 800b434:	2300      	movs	r3, #0
 800b436:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800b43a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <scroll_area_into_view+0x4e4>
 800b446:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dd02      	ble.n	800b454 <scroll_area_into_view+0x4e4>
 800b44e:	2300      	movs	r3, #0
 800b450:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800b454:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d106      	bne.n	800b46e <scroll_area_into_view+0x4fe>
 800b460:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800b464:	2b00      	cmp	r3, #0
 800b466:	da02      	bge.n	800b46e <scroll_area_into_view+0x4fe>
 800b468:	2300      	movs	r3, #0
 800b46a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800b46e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b472:	f003 0308 	and.w	r3, r3, #8
 800b476:	2b00      	cmp	r3, #0
 800b478:	d106      	bne.n	800b488 <scroll_area_into_view+0x518>
 800b47a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dd02      	ble.n	800b488 <scroll_area_into_view+0x518>
 800b482:	2300      	movs	r3, #0
 800b484:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b48e:	b29a      	uxth	r2, r3
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <scroll_area_into_view+0x52c>
 800b496:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b49a:	e000      	b.n	800b49e <scroll_area_into_view+0x52e>
 800b49c:	2300      	movs	r3, #0
 800b49e:	4413      	add	r3, r2
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	b21a      	sxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	801a      	strh	r2, [r3, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <scroll_area_into_view+0x54c>
 800b4b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4ba:	e000      	b.n	800b4be <scroll_area_into_view+0x54e>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4413      	add	r3, r2
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	b21a      	sxth	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	805a      	strh	r2, [r3, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800b4c8:	78fb      	ldrb	r3, [r7, #3]
 800b4ca:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800b4ce:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 800b4d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b4d4:	f7fe fc94 	bl	8009e00 <lv_obj_scroll_by>
 800b4d8:	e002      	b.n	800b4e0 <scroll_area_into_view+0x570>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800b4da:	bf00      	nop
 800b4dc:	e000      	b.n	800b4e0 <scroll_area_into_view+0x570>
        if(res != LV_RES_OK) return;
 800b4de:	bf00      	nop
}
 800b4e0:	3748      	adds	r7, #72	; 0x48
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	0800af23 	.word	0x0800af23
 800b4ec:	0800aef3 	.word	0x0800aef3

0800b4f0 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	7138      	strb	r0, [r7, #4]
 800b4f8:	7039      	strb	r1, [r7, #0]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800b4fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b502:	2b00      	cmp	r3, #0
 800b504:	da01      	bge.n	800b50a <lv_color_mix+0x1a>
 800b506:	793b      	ldrb	r3, [r7, #4]
 800b508:	e000      	b.n	800b50c <lv_color_mix+0x1c>
 800b50a:	783b      	ldrb	r3, [r7, #0]
 800b50c:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 800b50e:	7b3b      	ldrb	r3, [r7, #12]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <lv_anim_set_var>:
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
    a->var = var;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	601a      	str	r2, [r3, #0]
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <lv_anim_set_exec_cb>:
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	605a      	str	r2, [r3, #4]
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <lv_anim_set_time>:
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <lv_anim_set_delay>:
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	425a      	negs	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b582:	bf00      	nop
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <lv_anim_set_values>:
{
 800b58e:	b480      	push	{r7}
 800b590:	b085      	sub	sp, #20
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b5ac:	bf00      	nop
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <lv_anim_set_path_cb>:
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	61da      	str	r2, [r3, #28]
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <lv_anim_set_start_cb>:
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	609a      	str	r2, [r3, #8]
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <lv_anim_set_ready_cb>:
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	60da      	str	r2, [r3, #12]
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <lv_anim_set_early_apply>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	70fb      	strb	r3, [r7, #3]
    a->early_apply = en;
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b61e:	78f9      	ldrb	r1, [r7, #3]
 800b620:	f361 0300 	bfi	r3, r1, #0, #1
 800b624:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <lv_style_prop_has_flag>:
 * @param prop Property ID
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	4603      	mov	r3, r0
 800b63c:	460a      	mov	r2, r1
 800b63e:	80fb      	strh	r3, [r7, #6]
 800b640:	4613      	mov	r3, r2
 800b642:	717b      	strb	r3, [r7, #5]
    return _lv_style_prop_lookup_flags(prop) & flag;
 800b644:	88fb      	ldrh	r3, [r7, #6]
 800b646:	4618      	mov	r0, r3
 800b648:	f016 f996 	bl	8021978 <_lv_style_prop_lookup_flags>
 800b64c:	4603      	mov	r3, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	797b      	ldrb	r3, [r7, #5]
 800b652:	4013      	ands	r3, r2
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	bf14      	ite	ne
 800b65a:	2301      	movne	r3, #1
 800b65c:	2300      	moveq	r3, #0
 800b65e:	b2db      	uxtb	r3, r3
}
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <lv_obj_get_style_width>:
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800b672:	2201      	movs	r2, #1
 800b674:	6839      	ldr	r1, [r7, #0]
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fa60 	bl	800bb3c <lv_obj_get_style_prop>
 800b67c:	4603      	mov	r3, r0
 800b67e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	b21b      	sxth	r3, r3
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <lv_obj_get_style_height>:
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800b696:	2204      	movs	r2, #4
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fa4e 	bl	800bb3c <lv_obj_get_style_prop>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	b21b      	sxth	r3, r3
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <lv_obj_get_style_transform_zoom>:
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800b6ba:	226c      	movs	r2, #108	; 0x6c
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fa3c 	bl	800bb3c <lv_obj_get_style_prop>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	b21b      	sxth	r3, r3
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <lv_obj_get_style_transform_angle>:
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800b6de:	226d      	movs	r2, #109	; 0x6d
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fa2a 	bl	800bb3c <lv_obj_get_style_prop>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	b21b      	sxth	r3, r3
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <lv_obj_get_style_opa>:
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800b702:	2260      	movs	r2, #96	; 0x60
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fa18 	bl	800bb3c <lv_obj_get_style_prop>
 800b70c:	4603      	mov	r3, r0
 800b70e:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	b2db      	uxtb	r3, r3
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <lv_obj_get_style_color_filter_dsc>:
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800b726:	2261      	movs	r2, #97	; 0x61
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fa06 	bl	800bb3c <lv_obj_get_style_prop>
 800b730:	4603      	mov	r3, r0
 800b732:	60fb      	str	r3, [r7, #12]
    return (const lv_color_filter_dsc_t *)v.ptr;
 800b734:	68fb      	ldr	r3, [r7, #12]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <lv_obj_get_style_color_filter_opa>:
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800b748:	2262      	movs	r2, #98	; 0x62
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f9f5 	bl	800bb3c <lv_obj_get_style_prop>
 800b752:	4603      	mov	r3, r0
 800b754:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	b2db      	uxtb	r3, r3
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <lv_obj_get_style_blend_mode>:
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b084      	sub	sp, #16
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800b76c:	2267      	movs	r2, #103	; 0x67
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f9e3 	bl	800bb3c <lv_obj_get_style_prop>
 800b776:	4603      	mov	r3, r0
 800b778:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	b2db      	uxtb	r3, r3
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
	...

0800b788 <_lv_obj_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_obj_style_init(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800b78c:	2114      	movs	r1, #20
 800b78e:	4802      	ldr	r0, [pc, #8]	; (800b798 <_lv_obj_style_init+0x10>)
 800b790:	f014 fda9 	bl	80202e6 <_lv_ll_init>
}
 800b794:	bf00      	nop
 800b796:	bd80      	pop	{r7, pc}
 800b798:	2000088c 	.word	0x2000088c

0800b79c <lv_obj_remove_style>:

    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
}

void lv_obj_remove_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08c      	sub	sp, #48	; 0x30
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
    lv_state_t state = lv_obj_style_get_selector_state(selector);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fd7d 	bl	800c2a8 <lv_obj_style_get_selector_state>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	83fb      	strh	r3, [r7, #30]
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fd84 	bl	800c2c0 <lv_obj_style_get_selector_part>
 800b7b8:	61b8      	str	r0, [r7, #24]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800b7ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7be:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <lv_obj_remove_style+0x36>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	7adb      	ldrb	r3, [r3, #11]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <lv_obj_remove_style+0x36>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint32_t i = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	62bb      	str	r3, [r7, #40]	; 0x28
    bool deleted = false;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800b7dc:	e0b9      	b.n	800b952 <lv_obj_remove_style+0x1b6>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68da      	ldr	r2, [r3, #12]
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	00db      	lsls	r3, r3, #3
 800b7e6:	4413      	add	r3, r2
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 fd5a 	bl	800c2a8 <lv_obj_style_get_selector_state>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	82fb      	strh	r3, [r7, #22]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	68da      	ldr	r2, [r3, #12]
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	4413      	add	r3, r2
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 fd59 	bl	800c2c0 <lv_obj_style_get_selector_part>
 800b80e:	6138      	str	r0, [r7, #16]
        if((state != LV_STATE_ANY && state_act != state) ||
 800b810:	8bfb      	ldrh	r3, [r7, #30]
 800b812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b816:	4293      	cmp	r3, r2
 800b818:	d003      	beq.n	800b822 <lv_obj_remove_style+0x86>
 800b81a:	8afa      	ldrh	r2, [r7, #22]
 800b81c:	8bfb      	ldrh	r3, [r7, #30]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d113      	bne.n	800b84a <lv_obj_remove_style+0xae>
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800b828:	d003      	beq.n	800b832 <lv_obj_remove_style+0x96>
           (part != LV_PART_ANY && part_act != part) ||
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d10b      	bne.n	800b84a <lv_obj_remove_style+0xae>
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00c      	beq.n	800b852 <lv_obj_remove_style+0xb6>
           (style != NULL && style != obj->styles[i].style)) {
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	68da      	ldr	r2, [r3, #12]
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	4413      	add	r3, r2
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	429a      	cmp	r2, r3
 800b848:	d003      	beq.n	800b852 <lv_obj_remove_style+0xb6>
            i++;
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	3301      	adds	r3, #1
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
            continue;
 800b850:	e07f      	b.n	800b952 <lv_obj_remove_style+0x1b6>
        }

        if(obj->styles[i].is_trans) {
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	68da      	ldr	r2, [r3, #12]
 800b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	4413      	add	r3, r2
 800b85c:	79db      	ldrb	r3, [r3, #7]
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	b2db      	uxtb	r3, r3
 800b864:	2b00      	cmp	r3, #0
 800b866:	d006      	beq.n	800b876 <lv_obj_remove_style+0xda>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800b868:	2300      	movs	r3, #0
 800b86a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b86e:	69b9      	ldr	r1, [r7, #24]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 ff05 	bl	800c680 <trans_del>
        }

        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68da      	ldr	r2, [r3, #12]
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	4413      	add	r3, r2
 800b880:	79db      	ldrb	r3, [r3, #7]
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10a      	bne.n	800b8a2 <lv_obj_remove_style+0x106>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	68da      	ldr	r2, [r3, #12]
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	4413      	add	r3, r2
 800b896:	79db      	ldrb	r3, [r3, #7]
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d018      	beq.n	800b8d4 <lv_obj_remove_style+0x138>
            lv_style_reset(obj->styles[i].style);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	68da      	ldr	r2, [r3, #12]
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	00db      	lsls	r3, r3, #3
 800b8aa:	4413      	add	r3, r2
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f015 fdfe 	bl	80214b0 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	68da      	ldr	r2, [r3, #12]
 800b8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	4413      	add	r3, r2
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f014 ffdd 	bl	8020880 <lv_mem_free>
            obj->styles[i].style = NULL;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	4413      	add	r3, r2
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]
        }

        /*Shift the styles after `i` by one*/
        uint32_t j;
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	623b      	str	r3, [r7, #32]
 800b8d8:	e012      	b.n	800b900 <lv_obj_remove_style+0x164>
            obj->styles[j] = obj->styles[j + 1];
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	18d1      	adds	r1, r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68da      	ldr	r2, [r3, #12]
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	00db      	lsls	r3, r3, #3
 800b8ee:	4413      	add	r3, r2
 800b8f0:	460a      	mov	r2, r1
 800b8f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b8f6:	e883 0003 	stmia.w	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	623b      	str	r3, [r7, #32]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b904:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	3b01      	subs	r3, #1
 800b90c:	6a3a      	ldr	r2, [r7, #32]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d3e3      	bcc.n	800b8da <lv_obj_remove_style+0x13e>
        }

        obj->style_cnt--;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b916:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	333f      	adds	r3, #63	; 0x3f
 800b91e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b922:	b2d9      	uxtb	r1, r3
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800b928:	f361 03c8 	bfi	r3, r1, #3, #6
 800b92c:	8453      	strh	r3, [r2, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68da      	ldr	r2, [r3, #12]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b936:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	4619      	mov	r1, r3
 800b940:	4610      	mov	r0, r2
 800b942:	f014 ffcb 	bl	80208dc <lv_mem_realloc>
 800b946:	4602      	mov	r2, r0
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	60da      	str	r2, [r3, #12]

        deleted = true;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b956:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	461a      	mov	r2, r3
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	4293      	cmp	r3, r2
 800b962:	f4ff af3c 	bcc.w	800b7de <lv_obj_remove_style+0x42>
        /*The style from the current `i` index is removed, so `i` points to the next style.
         *Therefore it doesn't needs to be incremented*/
    }
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800b966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d008      	beq.n	800b980 <lv_obj_remove_style+0x1e4>
 800b96e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b970:	2b00      	cmp	r3, #0
 800b972:	d005      	beq.n	800b980 <lv_obj_remove_style+0x1e4>
        lv_obj_refresh_style(obj, part, prop);
 800b974:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b976:	461a      	mov	r2, r3
 800b978:	69b9      	ldr	r1, [r7, #24]
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 f804 	bl	800b988 <lv_obj_refresh_style>
    }
}
 800b980:	bf00      	nop
 800b982:	3730      	adds	r7, #48	; 0x30
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <lv_obj_refresh_style>:
        d = lv_disp_get_next(d);
    }
}

void lv_obj_refresh_style(lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	4613      	mov	r3, r2
 800b994:	80fb      	strh	r3, [r7, #6]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!style_refr) return;
 800b996:	4b60      	ldr	r3, [pc, #384]	; (800bb18 <lv_obj_refresh_style+0x190>)
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	f083 0301 	eor.w	r3, r3, #1
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f040 80b4 	bne.w	800bb0e <lv_obj_refresh_style+0x186>

    lv_obj_invalidate(obj);
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f7fd f84f 	bl	8008a4a <lv_obj_invalidate>

    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800b9ac:	68b8      	ldr	r0, [r7, #8]
 800b9ae:	f000 fc87 	bl	800c2c0 <lv_obj_style_get_selector_part>
 800b9b2:	61f8      	str	r0, [r7, #28]

    bool is_layout_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYOUT_REFR);
 800b9b4:	88fb      	ldrh	r3, [r7, #6]
 800b9b6:	2104      	movs	r1, #4
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff fe3b 	bl	800b634 <lv_style_prop_has_flag>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	76fb      	strb	r3, [r7, #27]
    bool is_ext_draw = lv_style_prop_has_flag(prop, LV_STYLE_PROP_EXT_DRAW);
 800b9c2:	88fb      	ldrh	r3, [r7, #6]
 800b9c4:	2102      	movs	r1, #2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7ff fe34 	bl	800b634 <lv_style_prop_has_flag>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	76bb      	strb	r3, [r7, #26]
    bool is_inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800b9d0:	88fb      	ldrh	r3, [r7, #6]
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff fe2d 	bl	800b634 <lv_style_prop_has_flag>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	767b      	strb	r3, [r7, #25]
    bool is_layer_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYER_REFR);
 800b9de:	88fb      	ldrh	r3, [r7, #6]
 800b9e0:	2110      	movs	r1, #16
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff fe26 	bl	800b634 <lv_style_prop_has_flag>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	763b      	strb	r3, [r7, #24]

    if(is_layout_refr) {
 800b9ec:	7efb      	ldrb	r3, [r7, #27]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d022      	beq.n	800ba38 <lv_obj_refresh_style+0xb0>
        if(part == LV_PART_ANY ||
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800b9f8:	d016      	beq.n	800ba28 <lv_obj_refresh_style+0xa0>
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d013      	beq.n	800ba28 <lv_obj_refresh_style+0xa0>
           part == LV_PART_MAIN ||
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800ba00:	2100      	movs	r1, #0
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f7ff fe42 	bl	800b68c <lv_obj_get_style_height>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	461a      	mov	r2, r3
           part == LV_PART_MAIN ||
 800ba0c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d009      	beq.n	800ba28 <lv_obj_refresh_style+0xa0>
           lv_obj_get_style_width(obj, 0) == LV_SIZE_CONTENT) {
 800ba14:	2100      	movs	r1, #0
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f7ff fe26 	bl	800b668 <lv_obj_get_style_width>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	461a      	mov	r2, r3
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800ba20:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d107      	bne.n	800ba38 <lv_obj_refresh_style+0xb0>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800ba28:	2200      	movs	r2, #0
 800ba2a:	212a      	movs	r1, #42	; 0x2a
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f7f8 fc3f 	bl	80042b0 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7fc f9dc 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
        }
    }
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800ba3e:	d002      	beq.n	800ba46 <lv_obj_refresh_style+0xbe>
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d111      	bne.n	800ba6a <lv_obj_refresh_style+0xe2>
 800ba46:	88fb      	ldrh	r3, [r7, #6]
 800ba48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d002      	beq.n	800ba56 <lv_obj_refresh_style+0xce>
 800ba50:	7efb      	ldrb	r3, [r7, #27]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d009      	beq.n	800ba6a <lv_obj_refresh_style+0xe2>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f001 f954 	bl	800cd04 <lv_obj_get_parent>
 800ba5c:	6178      	str	r0, [r7, #20]
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <lv_obj_refresh_style+0xe2>
 800ba64:	6978      	ldr	r0, [r7, #20]
 800ba66:	f7fc f9c3 	bl	8007df0 <lv_obj_mark_layout_as_dirty>
    }

    /*Cache the layer type*/
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800ba70:	d002      	beq.n	800ba78 <lv_obj_refresh_style+0xf0>
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d126      	bne.n	800bac6 <lv_obj_refresh_style+0x13e>
 800ba78:	7e3b      	ldrb	r3, [r7, #24]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d023      	beq.n	800bac6 <lv_obj_refresh_style+0x13e>
        lv_layer_type_t layer_type = calculate_layer_type(obj);
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f001 f8c4 	bl	800cc0c <calculate_layer_type>
 800ba84:	4603      	mov	r3, r0
 800ba86:	74fb      	strb	r3, [r7, #19]
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00a      	beq.n	800baa6 <lv_obj_refresh_style+0x11e>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	689a      	ldr	r2, [r3, #8]
 800ba94:	7cfb      	ldrb	r3, [r7, #19]
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	b2d9      	uxtb	r1, r3
 800ba9c:	7e93      	ldrb	r3, [r2, #26]
 800ba9e:	f361 1387 	bfi	r3, r1, #6, #2
 800baa2:	7693      	strb	r3, [r2, #26]
 800baa4:	e00f      	b.n	800bac6 <lv_obj_refresh_style+0x13e>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800baa6:	7cfb      	ldrb	r3, [r7, #19]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00c      	beq.n	800bac6 <lv_obj_refresh_style+0x13e>
            lv_obj_allocate_spec_attr(obj);
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f7f9 fd8d 	bl	80055cc <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	689a      	ldr	r2, [r3, #8]
 800bab6:	7cfb      	ldrb	r3, [r7, #19]
 800bab8:	f003 0303 	and.w	r3, r3, #3
 800babc:	b2d9      	uxtb	r1, r3
 800babe:	7e93      	ldrb	r3, [r2, #26]
 800bac0:	f361 1387 	bfi	r3, r1, #6, #2
 800bac4:	7693      	strb	r3, [r2, #26]
        }
    }

    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800bac6:	88fb      	ldrh	r3, [r7, #6]
 800bac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bacc:	4293      	cmp	r3, r2
 800bace:	d002      	beq.n	800bad6 <lv_obj_refresh_style+0x14e>
 800bad0:	7ebb      	ldrb	r3, [r7, #26]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <lv_obj_refresh_style+0x154>
        lv_obj_refresh_ext_draw_size(obj);
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7fb fce5 	bl	80074a6 <lv_obj_refresh_ext_draw_size>
    }
    lv_obj_invalidate(obj);
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f7fc ffb4 	bl	8008a4a <lv_obj_invalidate>

    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800bae2:	88fb      	ldrh	r3, [r7, #6]
 800bae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bae8:	4293      	cmp	r3, r2
 800baea:	d008      	beq.n	800bafe <lv_obj_refresh_style+0x176>
 800baec:	7e7b      	ldrb	r3, [r7, #25]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00e      	beq.n	800bb10 <lv_obj_refresh_style+0x188>
 800baf2:	7ebb      	ldrb	r3, [r7, #26]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d102      	bne.n	800bafe <lv_obj_refresh_style+0x176>
 800baf8:	7efb      	ldrb	r3, [r7, #27]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d008      	beq.n	800bb10 <lv_obj_refresh_style+0x188>
        if(part != LV_PART_SCROLLBAR) {
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb04:	d004      	beq.n	800bb10 <lv_obj_refresh_style+0x188>
            refresh_children_style(obj);
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 fd8c 	bl	800c624 <refresh_children_style>
 800bb0c:	e000      	b.n	800bb10 <lv_obj_refresh_style+0x188>
    if(!style_refr) return;
 800bb0e:	bf00      	nop
        }
    }
}
 800bb10:	3720      	adds	r7, #32
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	2000000d 	.word	0x2000000d

0800bb1c <lv_obj_enable_style_refresh>:

void lv_obj_enable_style_refresh(bool en)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	71fb      	strb	r3, [r7, #7]
    style_refr = en;
 800bb26:	4a04      	ldr	r2, [pc, #16]	; (800bb38 <lv_obj_enable_style_refresh+0x1c>)
 800bb28:	79fb      	ldrb	r3, [r7, #7]
 800bb2a:	7013      	strb	r3, [r2, #0]
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	2000000d 	.word	0x2000000d

0800bb3c <lv_obj_get_style_prop>:

lv_style_value_t lv_obj_get_style_prop(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	4613      	mov	r3, r2
 800bb48:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value_act;
    bool inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	2101      	movs	r1, #1
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7ff fd70 	bl	800b634 <lv_style_prop_has_flag>
 800bb54:	4603      	mov	r3, r0
 800bb56:	75fb      	strb	r3, [r7, #23]
    lv_style_res_t found = LV_STYLE_RES_NOT_FOUND;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	77fb      	strb	r3, [r7, #31]
    while(obj) {
 800bb5c:	e01e      	b.n	800bb9c <lv_obj_get_style_prop+0x60>
        found = get_prop_core(obj, part, prop, &value_act);
 800bb5e:	f107 0310 	add.w	r3, r7, #16
 800bb62:	88fa      	ldrh	r2, [r7, #6]
 800bb64:	68b9      	ldr	r1, [r7, #8]
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f000 fc58 	bl	800c41c <get_prop_core>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	77fb      	strb	r3, [r7, #31]
        if(found == LV_STYLE_RES_FOUND) break;
 800bb70:	7ffb      	ldrb	r3, [r7, #31]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d016      	beq.n	800bba4 <lv_obj_get_style_prop+0x68>
        if(!inheritable) break;
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
 800bb78:	f083 0301 	eor.w	r3, r3, #1
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d112      	bne.n	800bba8 <lv_obj_get_style_prop+0x6c>

        /*If not found, check the `MAIN` style first*/
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800bb82:	7ffb      	ldrb	r3, [r7, #31]
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d005      	beq.n	800bb94 <lv_obj_get_style_prop+0x58>
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <lv_obj_get_style_prop+0x58>
            part = LV_PART_MAIN;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60bb      	str	r3, [r7, #8]
            continue;
 800bb92:	e003      	b.n	800bb9c <lv_obj_get_style_prop+0x60>
        }

        /*Check the parent too.*/
        obj = lv_obj_get_parent(obj);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f001 f8b5 	bl	800cd04 <lv_obj_get_parent>
 800bb9a:	60f8      	str	r0, [r7, #12]
    while(obj) {
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1dd      	bne.n	800bb5e <lv_obj_get_style_prop+0x22>
 800bba2:	e002      	b.n	800bbaa <lv_obj_get_style_prop+0x6e>
        if(found == LV_STYLE_RES_FOUND) break;
 800bba4:	bf00      	nop
 800bba6:	e000      	b.n	800bbaa <lv_obj_get_style_prop+0x6e>
        if(!inheritable) break;
 800bba8:	bf00      	nop
    }

    if(found != LV_STYLE_RES_FOUND) {
 800bbaa:	7ffb      	ldrb	r3, [r7, #31]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d03a      	beq.n	800bc26 <lv_obj_get_style_prop+0xea>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d131      	bne.n	800bc1a <lv_obj_get_style_prop+0xde>
 800bbb6:	88fb      	ldrh	r3, [r7, #6]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d002      	beq.n	800bbc2 <lv_obj_get_style_prop+0x86>
 800bbbc:	88fb      	ldrh	r3, [r7, #6]
 800bbbe:	2b04      	cmp	r3, #4
 800bbc0:	d12b      	bne.n	800bc1a <lv_obj_get_style_prop+0xde>
            const lv_obj_class_t * cls = obj->class_p;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800bbc8:	e010      	b.n	800bbec <lv_obj_get_style_prop+0xb0>
                if(prop == LV_STYLE_WIDTH) {
 800bbca:	88fb      	ldrh	r3, [r7, #6]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d105      	bne.n	800bbdc <lv_obj_get_style_prop+0xa0>
                    if(cls->width_def != 0) break;
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d005      	beq.n	800bbe6 <lv_obj_get_style_prop+0xaa>
 800bbda:	e00c      	b.n	800bbf6 <lv_obj_get_style_prop+0xba>
                }
                else {
                    if(cls->height_def != 0) break;
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <lv_obj_get_style_prop+0xb8>
                }
                cls = cls->base_class;
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1eb      	bne.n	800bbca <lv_obj_get_style_prop+0x8e>
 800bbf2:	e000      	b.n	800bbf6 <lv_obj_get_style_prop+0xba>
                    if(cls->height_def != 0) break;
 800bbf4:	bf00      	nop
            }

            if(cls) {
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <lv_obj_get_style_prop+0xd8>
                value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800bbfc:	88fb      	ldrh	r3, [r7, #6]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d103      	bne.n	800bc0a <lv_obj_get_style_prop+0xce>
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bc08:	e002      	b.n	800bc10 <lv_obj_get_style_prop+0xd4>
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bc10:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800bc12:	e008      	b.n	800bc26 <lv_obj_get_style_prop+0xea>
            }
            else {
                value_act.num = 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800bc18:	e005      	b.n	800bc26 <lv_obj_get_style_prop+0xea>
            }
        }
        else {
            value_act = lv_style_prop_get_default(prop);
 800bc1a:	88fb      	ldrh	r3, [r7, #6]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f015 fd6b 	bl	80216f8 <lv_style_prop_get_default>
 800bc22:	4603      	mov	r3, r0
 800bc24:	613b      	str	r3, [r7, #16]
        }
    }
    return value_act;
 800bc26:	693b      	ldr	r3, [r7, #16]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3720      	adds	r7, #32
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <_lv_obj_style_create_transition>:
    return res;
}

void _lv_obj_style_create_transition(lv_obj_t * obj, lv_part_t part, lv_state_t prev_state, lv_state_t new_state,
                                     const _lv_obj_style_transition_dsc_t * tr_dsc)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b09a      	sub	sp, #104	; 0x68
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	460b      	mov	r3, r1
 800bc40:	80fb      	strh	r3, [r7, #6]
 800bc42:	4613      	mov	r3, r2
 800bc44:	80bb      	strh	r3, [r7, #4]
    trans_t * tr;

    /*Get the previous and current values*/
    obj->skip_trans = 1;
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800bc4c:	f043 0304 	orr.w	r3, r3, #4
 800bc50:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    obj->state = prev_state;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800bc5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc5c:	891b      	ldrh	r3, [r3, #8]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f7ff ff6a 	bl	800bb3c <lv_obj_get_style_prop>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	88ba      	ldrh	r2, [r7, #4]
 800bc70:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800bc72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc74:	891b      	ldrh	r3, [r3, #8]
 800bc76:	461a      	mov	r2, r3
 800bc78:	68b9      	ldr	r1, [r7, #8]
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7ff ff5e 	bl	800bb3c <lv_obj_get_style_prop>
 800bc80:	4603      	mov	r3, r0
 800bc82:	657b      	str	r3, [r7, #84]	; 0x54
    obj->skip_trans = 0;
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800bc8a:	f36f 0382 	bfc	r3, #2, #1
 800bc8e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800bc92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d10a      	bne.n	800bcb0 <_lv_obj_style_create_transition+0x80>
 800bc9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d106      	bne.n	800bcb0 <_lv_obj_style_create_transition+0x80>
 800bca2:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800bca6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	f000 80cc 	beq.w	800be48 <_lv_obj_style_create_transition+0x218>
    obj->state = prev_state;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	88fa      	ldrh	r2, [r7, #6]
 800bcb4:	841a      	strh	r2, [r3, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800bcb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcb8:	891b      	ldrh	r3, [r3, #8]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	68b9      	ldr	r1, [r7, #8]
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff ff3c 	bl	800bb3c <lv_obj_get_style_prop>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	88ba      	ldrh	r2, [r7, #4]
 800bccc:	841a      	strh	r2, [r3, #32]

    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800bcce:	68b9      	ldr	r1, [r7, #8]
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f000 fb02 	bl	800c2da <get_trans_style>
 800bcd6:	6678      	str	r0, [r7, #100]	; 0x64
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800bcd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcda:	6818      	ldr	r0, [r3, #0]
 800bcdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcde:	891b      	ldrh	r3, [r3, #8]
 800bce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bce2:	4619      	mov	r1, r3
 800bce4:	f015 fce2 	bl	80216ac <lv_style_set_prop>

    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800bce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcea:	891b      	ldrh	r3, [r3, #8]
 800bcec:	2b0b      	cmp	r3, #11
 800bcee:	d143      	bne.n	800bd78 <_lv_obj_style_create_transition+0x148>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800bcf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcf2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d004      	beq.n	800bd04 <_lv_obj_style_create_transition+0xd4>
 800bcfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcfc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d139      	bne.n	800bd78 <_lv_obj_style_create_transition+0x148>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f7fc f8d6 	bl	8007eb6 <lv_obj_get_width>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	da00      	bge.n	800bd12 <_lv_obj_style_create_transition+0xe2>
 800bd10:	3301      	adds	r3, #1
 800bd12:	105b      	asrs	r3, r3, #1
 800bd14:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f7fc f8da 	bl	8007ed2 <lv_obj_get_height>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da00      	bge.n	800bd26 <_lv_obj_style_create_transition+0xf6>
 800bd24:	3301      	adds	r3, #1
 800bd26:	105b      	asrs	r3, r3, #1
 800bd28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800bd2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd2e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d10d      	bne.n	800bd52 <_lv_obj_style_create_transition+0x122>
 800bd36:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800bd3a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	da03      	bge.n	800bd4a <_lv_obj_style_create_transition+0x11a>
 800bd42:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800bd46:	3301      	adds	r3, #1
 800bd48:	e002      	b.n	800bd50 <_lv_obj_style_create_transition+0x120>
 800bd4a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800bd4e:	3301      	adds	r3, #1
 800bd50:	65bb      	str	r3, [r7, #88]	; 0x58
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800bd52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d10d      	bne.n	800bd78 <_lv_obj_style_create_transition+0x148>
 800bd5c:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800bd60:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800bd64:	429a      	cmp	r2, r3
 800bd66:	da03      	bge.n	800bd70 <_lv_obj_style_create_transition+0x140>
 800bd68:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	e002      	b.n	800bd76 <_lv_obj_style_create_transition+0x146>
 800bd70:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800bd74:	3301      	adds	r3, #1
 800bd76:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800bd78:	4836      	ldr	r0, [pc, #216]	; (800be54 <_lv_obj_style_create_transition+0x224>)
 800bd7a:	f014 facd 	bl	8020318 <_lv_ll_ins_head>
 800bd7e:	65f8      	str	r0, [r7, #92]	; 0x5c
    LV_ASSERT_MALLOC(tr);
 800bd80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d100      	bne.n	800bd88 <_lv_obj_style_create_transition+0x158>
 800bd86:	e7fe      	b.n	800bd86 <_lv_obj_style_create_transition+0x156>
    if(tr == NULL) return;
 800bd88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d05e      	beq.n	800be4c <_lv_obj_style_create_transition+0x21c>
    tr->start_value = v1;
 800bd8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd92:	60da      	str	r2, [r3, #12]
    tr->end_value = v2;
 800bd94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd98:	611a      	str	r2, [r3, #16]
    tr->obj = obj;
 800bd9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	601a      	str	r2, [r3, #0]
    tr->prop = tr_dsc->prop;
 800bda0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bda2:	891a      	ldrh	r2, [r3, #8]
 800bda4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bda6:	809a      	strh	r2, [r3, #4]
    tr->selector = part;
 800bda8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	609a      	str	r2, [r3, #8]

    lv_anim_t a;
    lv_anim_init(&a);
 800bdae:	f107 0310 	add.w	r3, r7, #16
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f012 fe52 	bl	801ea5c <lv_anim_init>
    lv_anim_set_var(&a, tr);
 800bdb8:	f107 0310 	add.w	r3, r7, #16
 800bdbc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff fbac 	bl	800b51c <lv_anim_set_var>
    lv_anim_set_exec_cb(&a, trans_anim_cb);
 800bdc4:	f107 0310 	add.w	r3, r7, #16
 800bdc8:	4923      	ldr	r1, [pc, #140]	; (800be58 <_lv_obj_style_create_transition+0x228>)
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7ff fbb4 	bl	800b538 <lv_anim_set_exec_cb>
    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 800bdd0:	f107 0310 	add.w	r3, r7, #16
 800bdd4:	4921      	ldr	r1, [pc, #132]	; (800be5c <_lv_obj_style_create_transition+0x22c>)
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fbfc 	bl	800b5d4 <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 800bddc:	f107 0310 	add.w	r3, r7, #16
 800bde0:	491f      	ldr	r1, [pc, #124]	; (800be60 <_lv_obj_style_create_transition+0x230>)
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff fc04 	bl	800b5f0 <lv_anim_set_ready_cb>
    lv_anim_set_values(&a, 0x00, 0xFF);
 800bde8:	f107 0310 	add.w	r3, r7, #16
 800bdec:	22ff      	movs	r2, #255	; 0xff
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7ff fbcc 	bl	800b58e <lv_anim_set_values>
    lv_anim_set_time(&a, tr_dsc->time);
 800bdf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f107 0310 	add.w	r3, r7, #16
 800be00:	4611      	mov	r1, r2
 800be02:	4618      	mov	r0, r3
 800be04:	f7ff fba6 	bl	800b554 <lv_anim_set_time>
    lv_anim_set_delay(&a, tr_dsc->delay);
 800be08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be0a:	885b      	ldrh	r3, [r3, #2]
 800be0c:	461a      	mov	r2, r3
 800be0e:	f107 0310 	add.w	r3, r7, #16
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fbab 	bl	800b570 <lv_anim_set_delay>
    lv_anim_set_path_cb(&a, tr_dsc->path_cb);
 800be1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	f107 0310 	add.w	r3, r7, #16
 800be22:	4611      	mov	r1, r2
 800be24:	4618      	mov	r0, r3
 800be26:	f7ff fbc7 	bl	800b5b8 <lv_anim_set_path_cb>
    lv_anim_set_early_apply(&a, false);
 800be2a:	f107 0310 	add.w	r3, r7, #16
 800be2e:	2100      	movs	r1, #0
 800be30:	4618      	mov	r0, r3
 800be32:	f7ff fbeb 	bl	800b60c <lv_anim_set_early_apply>
#if LV_USE_USER_DATA
    a.user_data = tr_dsc->user_data;
 800be36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    lv_anim_start(&a);
 800be3c:	f107 0310 	add.w	r3, r7, #16
 800be40:	4618      	mov	r0, r3
 800be42:	f012 fe31 	bl	801eaa8 <lv_anim_start>
 800be46:	e002      	b.n	800be4e <_lv_obj_style_create_transition+0x21e>
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800be48:	bf00      	nop
 800be4a:	e000      	b.n	800be4e <_lv_obj_style_create_transition+0x21e>
    if(tr == NULL) return;
 800be4c:	bf00      	nop
}
 800be4e:	3768      	adds	r7, #104	; 0x68
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	2000088c 	.word	0x2000088c
 800be58:	0800c785 	.word	0x0800c785
 800be5c:	0800ca65 	.word	0x0800ca65
 800be60:	0800cadd 	.word	0x0800cadd

0800be64 <_lv_obj_style_apply_color_filter>:


lv_style_value_t _lv_obj_style_apply_color_filter(const lv_obj_t * obj, uint32_t part, lv_style_value_t v)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
    if(obj == NULL) return v;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <_lv_obj_style_apply_color_filter+0x16>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	e01c      	b.n	800beb4 <_lv_obj_style_apply_color_filter+0x50>
    const lv_color_filter_dsc_t * f = lv_obj_get_style_color_filter_dsc(obj, part);
 800be7a:	68b9      	ldr	r1, [r7, #8]
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f7ff fc4d 	bl	800b71c <lv_obj_get_style_color_filter_dsc>
 800be82:	6178      	str	r0, [r7, #20]
    if(f && f->filter_cb) {
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d013      	beq.n	800beb2 <_lv_obj_style_apply_color_filter+0x4e>
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00f      	beq.n	800beb2 <_lv_obj_style_apply_color_filter+0x4e>
        lv_opa_t f_opa = lv_obj_get_style_color_filter_opa(obj, part);
 800be92:	68b9      	ldr	r1, [r7, #8]
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f7ff fc52 	bl	800b73e <lv_obj_get_style_color_filter_opa>
 800be9a:	4603      	mov	r3, r0
 800be9c:	74fb      	strb	r3, [r7, #19]
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800be9e:	7cfb      	ldrb	r3, [r7, #19]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d006      	beq.n	800beb2 <_lv_obj_style_apply_color_filter+0x4e>
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	7cfa      	ldrb	r2, [r7, #19]
 800beaa:	7939      	ldrb	r1, [r7, #4]
 800beac:	6978      	ldr	r0, [r7, #20]
 800beae:	4798      	blx	r3
 800beb0:	7138      	strb	r0, [r7, #4]
    }
    return v;
 800beb2:	687b      	ldr	r3, [r7, #4]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <_lv_obj_style_state_compare>:

_lv_style_state_cmp_t _lv_obj_style_state_compare(lv_obj_t * obj, lv_state_t state1, lv_state_t state2)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	807b      	strh	r3, [r7, #2]
 800bec8:	4613      	mov	r3, r2
 800beca:	803b      	strh	r3, [r7, #0]
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800becc:	2300      	movs	r3, #0
 800bece:	77fb      	strb	r3, [r7, #31]

    /*Are there any new styles for the new state?*/
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800bed0:	2300      	movs	r3, #0
 800bed2:	61bb      	str	r3, [r7, #24]
 800bed4:	e1d9      	b.n	800c28a <_lv_obj_style_state_compare+0x3ce>
        if(obj->styles[i].is_trans) continue;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68da      	ldr	r2, [r3, #12]
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	00db      	lsls	r3, r3, #3
 800bede:	4413      	add	r3, r2
 800bee0:	79db      	ldrb	r3, [r3, #7]
 800bee2:	f003 0302 	and.w	r3, r3, #2
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f040 81ca 	bne.w	800c282 <_lv_obj_style_state_compare+0x3c6>

        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68da      	ldr	r2, [r3, #12]
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	4413      	add	r3, r2
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 f9d2 	bl	800c2a8 <lv_obj_style_get_selector_state>
 800bf04:	4603      	mov	r3, r0
 800bf06:	82bb      	strh	r3, [r7, #20]
        /*The style is valid for a state but not the other*/
        bool valid1 = state_act & (~state1) ? false : true;
 800bf08:	8aba      	ldrh	r2, [r7, #20]
 800bf0a:	887b      	ldrh	r3, [r7, #2]
 800bf0c:	43db      	mvns	r3, r3
 800bf0e:	4013      	ands	r3, r2
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bf0c      	ite	eq
 800bf14:	2301      	moveq	r3, #1
 800bf16:	2300      	movne	r3, #0
 800bf18:	74fb      	strb	r3, [r7, #19]
        bool valid2 = state_act & (~state2) ? false : true;
 800bf1a:	8aba      	ldrh	r2, [r7, #20]
 800bf1c:	883b      	ldrh	r3, [r7, #0]
 800bf1e:	43db      	mvns	r3, r3
 800bf20:	4013      	ands	r3, r2
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	bf0c      	ite	eq
 800bf26:	2301      	moveq	r3, #1
 800bf28:	2300      	movne	r3, #0
 800bf2a:	74bb      	strb	r3, [r7, #18]
        if(valid1 != valid2) {
 800bf2c:	7cfa      	ldrb	r2, [r7, #19]
 800bf2e:	7cbb      	ldrb	r3, [r7, #18]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	f000 81a7 	beq.w	800c284 <_lv_obj_style_state_compare+0x3c8>
            lv_style_t * style = obj->styles[i].style;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68da      	ldr	r2, [r3, #12]
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	00db      	lsls	r3, r3, #3
 800bf3e:	4413      	add	r3, r2
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	60fb      	str	r3, [r7, #12]
            lv_style_value_t v;
            /*If there is layout difference on the main part, return immediately. There is no more serious difference*/
            bool layout_diff = false;
 800bf44:	2300      	movs	r3, #0
 800bf46:	75fb      	strb	r3, [r7, #23]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800bf48:	f107 0308 	add.w	r3, r7, #8
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	2110      	movs	r1, #16
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f015 fbbf 	bl	80216d4 <lv_style_get_prop>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <_lv_obj_style_state_compare+0xa6>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	75fb      	strb	r3, [r7, #23]
 800bf60:	e0db      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800bf62:	f107 0308 	add.w	r3, r7, #8
 800bf66:	461a      	mov	r2, r3
 800bf68:	2111      	movs	r1, #17
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f015 fbb2 	bl	80216d4 <lv_style_get_prop>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d002      	beq.n	800bf7c <_lv_obj_style_state_compare+0xc0>
 800bf76:	2301      	movs	r3, #1
 800bf78:	75fb      	strb	r3, [r7, #23]
 800bf7a:	e0ce      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800bf7c:	f107 0308 	add.w	r3, r7, #8
 800bf80:	461a      	mov	r2, r3
 800bf82:	2112      	movs	r1, #18
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f015 fba5 	bl	80216d4 <lv_style_get_prop>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <_lv_obj_style_state_compare+0xda>
 800bf90:	2301      	movs	r3, #1
 800bf92:	75fb      	strb	r3, [r7, #23]
 800bf94:	e0c1      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800bf96:	f107 0308 	add.w	r3, r7, #8
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	2113      	movs	r1, #19
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f015 fb98 	bl	80216d4 <lv_style_get_prop>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d002      	beq.n	800bfb0 <_lv_obj_style_state_compare+0xf4>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	75fb      	strb	r3, [r7, #23]
 800bfae:	e0b4      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800bfb0:	f107 0308 	add.w	r3, r7, #8
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	2115      	movs	r1, #21
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f015 fb8b 	bl	80216d4 <lv_style_get_prop>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <_lv_obj_style_state_compare+0x10e>
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	75fb      	strb	r3, [r7, #23]
 800bfc8:	e0a7      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800bfca:	f107 0308 	add.w	r3, r7, #8
 800bfce:	461a      	mov	r2, r3
 800bfd0:	2114      	movs	r1, #20
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f015 fb7e 	bl	80216d4 <lv_style_get_prop>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <_lv_obj_style_state_compare+0x128>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	75fb      	strb	r3, [r7, #23]
 800bfe2:	e09a      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800bfe4:	f107 0308 	add.w	r3, r7, #8
 800bfe8:	461a      	mov	r2, r3
 800bfea:	210a      	movs	r1, #10
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f015 fb71 	bl	80216d4 <lv_style_get_prop>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <_lv_obj_style_state_compare+0x142>
 800bff8:	2301      	movs	r3, #1
 800bffa:	75fb      	strb	r3, [r7, #23]
 800bffc:	e08d      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800bffe:	f107 0308 	add.w	r3, r7, #8
 800c002:	461a      	mov	r2, r3
 800c004:	216a      	movs	r1, #106	; 0x6a
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f015 fb64 	bl	80216d4 <lv_style_get_prop>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <_lv_obj_style_state_compare+0x15c>
 800c012:	2301      	movs	r3, #1
 800c014:	75fb      	strb	r3, [r7, #23]
 800c016:	e080      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800c018:	f107 0308 	add.w	r3, r7, #8
 800c01c:	461a      	mov	r2, r3
 800c01e:	216b      	movs	r1, #107	; 0x6b
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f015 fb57 	bl	80216d4 <lv_style_get_prop>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <_lv_obj_style_state_compare+0x176>
 800c02c:	2301      	movs	r3, #1
 800c02e:	75fb      	strb	r3, [r7, #23]
 800c030:	e073      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800c032:	f107 0308 	add.w	r3, r7, #8
 800c036:	461a      	mov	r2, r3
 800c038:	2101      	movs	r1, #1
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f015 fb4a 	bl	80216d4 <lv_style_get_prop>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <_lv_obj_style_state_compare+0x190>
 800c046:	2301      	movs	r3, #1
 800c048:	75fb      	strb	r3, [r7, #23]
 800c04a:	e066      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800c04c:	f107 0308 	add.w	r3, r7, #8
 800c050:	461a      	mov	r2, r3
 800c052:	2104      	movs	r1, #4
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f015 fb3d 	bl	80216d4 <lv_style_get_prop>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <_lv_obj_style_state_compare+0x1aa>
 800c060:	2301      	movs	r3, #1
 800c062:	75fb      	strb	r3, [r7, #23]
 800c064:	e059      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800c066:	f107 0308 	add.w	r3, r7, #8
 800c06a:	461a      	mov	r2, r3
 800c06c:	2102      	movs	r1, #2
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f015 fb30 	bl	80216d4 <lv_style_get_prop>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d002      	beq.n	800c080 <_lv_obj_style_state_compare+0x1c4>
 800c07a:	2301      	movs	r3, #1
 800c07c:	75fb      	strb	r3, [r7, #23]
 800c07e:	e04c      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	461a      	mov	r2, r3
 800c086:	2103      	movs	r1, #3
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f015 fb23 	bl	80216d4 <lv_style_get_prop>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <_lv_obj_style_state_compare+0x1de>
 800c094:	2301      	movs	r3, #1
 800c096:	75fb      	strb	r3, [r7, #23]
 800c098:	e03f      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800c09a:	f107 0308 	add.w	r3, r7, #8
 800c09e:	461a      	mov	r2, r3
 800c0a0:	2105      	movs	r1, #5
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f015 fb16 	bl	80216d4 <lv_style_get_prop>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <_lv_obj_style_state_compare+0x1f8>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	75fb      	strb	r3, [r7, #23]
 800c0b2:	e032      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800c0b4:	f107 0308 	add.w	r3, r7, #8
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	2106      	movs	r1, #6
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f015 fb09 	bl	80216d4 <lv_style_get_prop>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <_lv_obj_style_state_compare+0x212>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	75fb      	strb	r3, [r7, #23]
 800c0cc:	e025      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800c0ce:	f107 0308 	add.w	r3, r7, #8
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	2132      	movs	r1, #50	; 0x32
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f015 fafc 	bl	80216d4 <lv_style_get_prop>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d002      	beq.n	800c0e8 <_lv_obj_style_state_compare+0x22c>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	75fb      	strb	r3, [r7, #23]
 800c0e6:	e018      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800c0e8:	f107 0308 	add.w	r3, r7, #8
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	216d      	movs	r1, #109	; 0x6d
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f015 faef 	bl	80216d4 <lv_style_get_prop>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <_lv_obj_style_state_compare+0x246>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	75fb      	strb	r3, [r7, #23]
 800c100:	e00b      	b.n	800c11a <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800c102:	f107 0308 	add.w	r3, r7, #8
 800c106:	461a      	mov	r2, r3
 800c108:	216c      	movs	r1, #108	; 0x6c
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f015 fae2 	bl	80216d4 <lv_style_get_prop>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <_lv_obj_style_state_compare+0x25e>
 800c116:	2301      	movs	r3, #1
 800c118:	75fb      	strb	r3, [r7, #23]

            if(layout_diff) {
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <_lv_obj_style_state_compare+0x268>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	e0bd      	b.n	800c2a0 <_lv_obj_style_state_compare+0x3e4>
            }

            /*Check for draw pad changes*/
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c124:	f107 0308 	add.w	r3, r7, #8
 800c128:	461a      	mov	r2, r3
 800c12a:	2168      	movs	r1, #104	; 0x68
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f015 fad1 	bl	80216d4 <lv_style_get_prop>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <_lv_obj_style_state_compare+0x282>
 800c138:	2302      	movs	r3, #2
 800c13a:	77fb      	strb	r3, [r7, #31]
 800c13c:	e0a2      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	461a      	mov	r2, r3
 800c144:	2169      	movs	r1, #105	; 0x69
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f015 fac4 	bl	80216d4 <lv_style_get_prop>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d002      	beq.n	800c158 <_lv_obj_style_state_compare+0x29c>
 800c152:	2302      	movs	r3, #2
 800c154:	77fb      	strb	r3, [r7, #31]
 800c156:	e095      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c158:	f107 0308 	add.w	r3, r7, #8
 800c15c:	461a      	mov	r2, r3
 800c15e:	216d      	movs	r1, #109	; 0x6d
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f015 fab7 	bl	80216d4 <lv_style_get_prop>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <_lv_obj_style_state_compare+0x2b6>
 800c16c:	2302      	movs	r3, #2
 800c16e:	77fb      	strb	r3, [r7, #31]
 800c170:	e088      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c172:	f107 0308 	add.w	r3, r7, #8
 800c176:	461a      	mov	r2, r3
 800c178:	216c      	movs	r1, #108	; 0x6c
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f015 faaa 	bl	80216d4 <lv_style_get_prop>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d002      	beq.n	800c18c <_lv_obj_style_state_compare+0x2d0>
 800c186:	2302      	movs	r3, #2
 800c188:	77fb      	strb	r3, [r7, #31]
 800c18a:	e07b      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c18c:	f107 0308 	add.w	r3, r7, #8
 800c190:	461a      	mov	r2, r3
 800c192:	2137      	movs	r1, #55	; 0x37
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f015 fa9d 	bl	80216d4 <lv_style_get_prop>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <_lv_obj_style_state_compare+0x2ea>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	77fb      	strb	r3, [r7, #31]
 800c1a4:	e06e      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c1a6:	f107 0308 	add.w	r3, r7, #8
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	2138      	movs	r1, #56	; 0x38
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f015 fa90 	bl	80216d4 <lv_style_get_prop>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <_lv_obj_style_state_compare+0x304>
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	77fb      	strb	r3, [r7, #31]
 800c1be:	e061      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c1c0:	f107 0308 	add.w	r3, r7, #8
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	2135      	movs	r1, #53	; 0x35
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f015 fa83 	bl	80216d4 <lv_style_get_prop>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <_lv_obj_style_state_compare+0x31e>
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	77fb      	strb	r3, [r7, #31]
 800c1d8:	e054      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c1da:	f107 0308 	add.w	r3, r7, #8
 800c1de:	461a      	mov	r2, r3
 800c1e0:	2140      	movs	r1, #64	; 0x40
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f015 fa76 	bl	80216d4 <lv_style_get_prop>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d002      	beq.n	800c1f4 <_lv_obj_style_state_compare+0x338>
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	77fb      	strb	r3, [r7, #31]
 800c1f2:	e047      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c1f4:	f107 0308 	add.w	r3, r7, #8
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	2145      	movs	r1, #69	; 0x45
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f015 fa69 	bl	80216d4 <lv_style_get_prop>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <_lv_obj_style_state_compare+0x352>
 800c208:	2302      	movs	r3, #2
 800c20a:	77fb      	strb	r3, [r7, #31]
 800c20c:	e03a      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c20e:	f107 0308 	add.w	r3, r7, #8
 800c212:	461a      	mov	r2, r3
 800c214:	2141      	movs	r1, #65	; 0x41
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f015 fa5c 	bl	80216d4 <lv_style_get_prop>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <_lv_obj_style_state_compare+0x36c>
 800c222:	2302      	movs	r3, #2
 800c224:	77fb      	strb	r3, [r7, #31]
 800c226:	e02d      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c228:	f107 0308 	add.w	r3, r7, #8
 800c22c:	461a      	mov	r2, r3
 800c22e:	2142      	movs	r1, #66	; 0x42
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f015 fa4f 	bl	80216d4 <lv_style_get_prop>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <_lv_obj_style_state_compare+0x386>
 800c23c:	2302      	movs	r3, #2
 800c23e:	77fb      	strb	r3, [r7, #31]
 800c240:	e020      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c242:	f107 0308 	add.w	r3, r7, #8
 800c246:	461a      	mov	r2, r3
 800c248:	2143      	movs	r1, #67	; 0x43
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f015 fa42 	bl	80216d4 <lv_style_get_prop>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <_lv_obj_style_state_compare+0x3a0>
 800c256:	2302      	movs	r3, #2
 800c258:	77fb      	strb	r3, [r7, #31]
 800c25a:	e013      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800c25c:	f107 0308 	add.w	r3, r7, #8
 800c260:	461a      	mov	r2, r3
 800c262:	2149      	movs	r1, #73	; 0x49
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f015 fa35 	bl	80216d4 <lv_style_get_prop>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d002      	beq.n	800c276 <_lv_obj_style_state_compare+0x3ba>
 800c270:	2302      	movs	r3, #2
 800c272:	77fb      	strb	r3, [r7, #31]
 800c274:	e006      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800c276:	7ffb      	ldrb	r3, [r7, #31]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d103      	bne.n	800c284 <_lv_obj_style_state_compare+0x3c8>
 800c27c:	2301      	movs	r3, #1
 800c27e:	77fb      	strb	r3, [r7, #31]
 800c280:	e000      	b.n	800c284 <_lv_obj_style_state_compare+0x3c8>
        if(obj->styles[i].is_trans) continue;
 800c282:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	3301      	adds	r3, #1
 800c288:	61bb      	str	r3, [r7, #24]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c28e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c292:	b2db      	uxtb	r3, r3
 800c294:	461a      	mov	r2, r3
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	4293      	cmp	r3, r2
 800c29a:	f4ff ae1c 	bcc.w	800bed6 <_lv_obj_style_state_compare+0x1a>
        }
    }

    return res;
 800c29e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <lv_obj_style_get_selector_state>:
    lv_anim_set_delay(&a, delay);
    lv_anim_start(&a);
}

lv_state_t lv_obj_style_get_selector_state(lv_style_selector_t selector)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
    return selector & 0xFFFF;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	b29b      	uxth	r3, r3
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <lv_obj_style_get_selector_part>:

lv_part_t lv_obj_style_get_selector_part(lv_style_selector_t selector)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
    return selector & 0xFF0000;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	370c      	adds	r7, #12
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <get_trans_style>:
 * @param obj   pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the transition style
 */
static _lv_obj_style_t * get_trans_style(lv_obj_t * obj,  lv_style_selector_t selector)
{
 800c2da:	b590      	push	{r4, r7, lr}
 800c2dc:	b085      	sub	sp, #20
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	e019      	b.n	800c31e <get_trans_style+0x44>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	68da      	ldr	r2, [r3, #12]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	00db      	lsls	r3, r3, #3
 800c2f2:	4413      	add	r3, r2
 800c2f4:	79db      	ldrb	r3, [r3, #7]
 800c2f6:	f003 0302 	and.w	r3, r3, #2
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <get_trans_style+0x3e>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	4413      	add	r3, r2
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c310:	461a      	mov	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	4293      	cmp	r3, r2
 800c316:	d00c      	beq.n	800c332 <get_trans_style+0x58>
    for(i = 0; i < obj->style_cnt; i++) {
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	3301      	adds	r3, #1
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c322:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c326:	b2db      	uxtb	r3, r3
 800c328:	461a      	mov	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d3dc      	bcc.n	800c2ea <get_trans_style+0x10>
 800c330:	e000      	b.n	800c334 <get_trans_style+0x5a>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800c332:	bf00      	nop
    }

    /*Already have a transition style for it*/
    if(i != obj->style_cnt) return &obj->styles[i];
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c338:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	461a      	mov	r2, r3
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4293      	cmp	r3, r2
 800c344:	d005      	beq.n	800c352 <get_trans_style+0x78>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	68da      	ldr	r2, [r3, #12]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	00db      	lsls	r3, r3, #3
 800c34e:	4413      	add	r3, r2
 800c350:	e060      	b.n	800c414 <get_trans_style+0x13a>

    obj->style_cnt++;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c356:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	3301      	adds	r3, #1
 800c35e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c362:	b2d9      	uxtb	r1, r3
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c368:	f361 03c8 	bfi	r3, r1, #3, #6
 800c36c:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68da      	ldr	r2, [r3, #12]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c376:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	4619      	mov	r1, r3
 800c380:	4610      	mov	r0, r2
 800c382:	f014 faab 	bl	80208dc <lv_mem_realloc>
 800c386:	4602      	mov	r2, r0
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	60da      	str	r2, [r3, #12]

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c390:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c394:	b2db      	uxtb	r3, r3
 800c396:	3b01      	subs	r3, #1
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	e014      	b.n	800c3c6 <get_trans_style+0xec>
        obj->styles[i] = obj->styles[i - 1];
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68da      	ldr	r2, [r3, #12]
 800c3a0:	68f9      	ldr	r1, [r7, #12]
 800c3a2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c3a6:	440b      	add	r3, r1
 800c3a8:	00db      	lsls	r3, r3, #3
 800c3aa:	18d1      	adds	r1, r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68da      	ldr	r2, [r3, #12]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	4413      	add	r3, r2
 800c3b6:	460a      	mov	r2, r1
 800c3b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c3bc:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	60fb      	str	r3, [r7, #12]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1e7      	bne.n	800c39c <get_trans_style+0xc2>
    }

    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	2108      	movs	r1, #8
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f014 fe58 	bl	8021088 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	68dc      	ldr	r4, [r3, #12]
 800c3dc:	200c      	movs	r0, #12
 800c3de:	f014 fa1f 	bl	8020820 <lv_mem_alloc>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[0].style);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f015 f849 	bl	8021484 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68da      	ldr	r2, [r3, #12]
 800c3f6:	79d3      	ldrb	r3, [r2, #7]
 800c3f8:	f043 0302 	orr.w	r3, r3, #2
 800c3fc:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68da      	ldr	r2, [r3, #12]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800c408:	6853      	ldr	r3, [r2, #4]
 800c40a:	f361 0317 	bfi	r3, r1, #0, #24
 800c40e:	6053      	str	r3, [r2, #4]
    return &obj->styles[0];
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	68db      	ldr	r3, [r3, #12]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd90      	pop	{r4, r7, pc}

0800c41c <get_prop_core>:


static lv_style_res_t get_prop_core(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, lv_style_value_t * v)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b090      	sub	sp, #64	; 0x40
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	4613      	mov	r3, r2
 800c42a:	80fb      	strh	r3, [r7, #6]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800c42c:	88fb      	ldrh	r3, [r7, #6]
 800c42e:	4618      	mov	r0, r3
 800c430:	f015 fa8a 	bl	8021948 <_lv_style_get_prop_group>
 800c434:	4603      	mov	r3, r0
 800c436:	461a      	mov	r2, r3
 800c438:	2301      	movs	r3, #1
 800c43a:	4093      	lsls	r3, r2
 800c43c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t weight = -1;
 800c440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c444:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_state_t state = obj->state;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	8c1b      	ldrh	r3, [r3, #32]
 800c44a:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_state_t state_inv = ~state;
 800c44c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c44e:	43db      	mvns	r3, r3
 800c450:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_style_value_t value_tmp;
    bool skip_trans = obj->skip_trans;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c458:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	bf14      	ite	ne
 800c462:	2301      	movne	r3, #1
 800c464:	2300      	moveq	r3, #0
 800c466:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    uint32_t i;
    lv_style_res_t found;
    for(i = 0; i < obj->style_cnt; i++) {
 800c46a:	2300      	movs	r3, #0
 800c46c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c46e:	e04b      	b.n	800c508 <get_prop_core+0xec>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68da      	ldr	r2, [r3, #12]
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	4413      	add	r3, r2
 800c47a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(obj_style->is_trans == false) break;
 800c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47e:	79db      	ldrb	r3, [r3, #7]
 800c480:	f003 0302 	and.w	r3, r3, #2
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b00      	cmp	r3, #0
 800c488:	d048      	beq.n	800c51c <get_prop_core+0x100>
        if(skip_trans) continue;
 800c48a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d132      	bne.n	800c4f8 <get_prop_core+0xdc>

        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	00db      	lsls	r3, r3, #3
 800c49a:	4413      	add	r3, r2
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff ff0c 	bl	800c2c0 <lv_obj_style_get_selector_part>
 800c4a8:	62b8      	str	r0, [r7, #40]	; 0x28

        if(part_act != part) continue;
 800c4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d124      	bne.n	800c4fc <get_prop_core+0xe0>
        if((obj_style->style->has_group & group) == 0) continue;
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	7a9a      	ldrb	r2, [r3, #10]
 800c4b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4bc:	4013      	ands	r3, r2
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d01d      	beq.n	800c500 <get_prop_core+0xe4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f107 0214 	add.w	r2, r7, #20
 800c4cc:	88f9      	ldrh	r1, [r7, #6]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f015 f900 	bl	80216d4 <lv_style_get_prop>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(found == LV_STYLE_RES_FOUND) {
 800c4da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d104      	bne.n	800c4ec <get_prop_core+0xd0>
            *v = value_tmp;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	601a      	str	r2, [r3, #0]
            return LV_STYLE_RES_FOUND;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e097      	b.n	800c61c <get_prop_core+0x200>
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800c4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d106      	bne.n	800c502 <get_prop_core+0xe6>
            return LV_STYLE_RES_INHERIT;
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	e091      	b.n	800c61c <get_prop_core+0x200>
        if(skip_trans) continue;
 800c4f8:	bf00      	nop
 800c4fa:	e002      	b.n	800c502 <get_prop_core+0xe6>
        if(part_act != part) continue;
 800c4fc:	bf00      	nop
 800c4fe:	e000      	b.n	800c502 <get_prop_core+0xe6>
        if((obj_style->style->has_group & group) == 0) continue;
 800c500:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	3301      	adds	r3, #1
 800c506:	63bb      	str	r3, [r7, #56]	; 0x38
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c50c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c510:	b2db      	uxtb	r3, r3
 800c512:	461a      	mov	r2, r3
 800c514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c516:	4293      	cmp	r3, r2
 800c518:	d3aa      	bcc.n	800c470 <get_prop_core+0x54>
 800c51a:	e06d      	b.n	800c5f8 <get_prop_core+0x1dc>
        if(obj_style->is_trans == false) break;
 800c51c:	bf00      	nop
        }
    }

    for(; i < obj->style_cnt; i++) {
 800c51e:	e06b      	b.n	800c5f8 <get_prop_core+0x1dc>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	68da      	ldr	r2, [r3, #12]
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	00db      	lsls	r3, r3, #3
 800c528:	4413      	add	r3, r2
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	7a9a      	ldrb	r2, [r3, #10]
 800c52e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c532:	4013      	ands	r3, r2
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b00      	cmp	r3, #0
 800c538:	d054      	beq.n	800c5e4 <get_prop_core+0x1c8>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	68da      	ldr	r2, [r3, #12]
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	00db      	lsls	r3, r3, #3
 800c542:	4413      	add	r3, r2
 800c544:	623b      	str	r3, [r7, #32]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68da      	ldr	r2, [r3, #12]
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	4413      	add	r3, r2
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff feb2 	bl	800c2c0 <lv_obj_style_get_selector_part>
 800c55c:	61f8      	str	r0, [r7, #28]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	68da      	ldr	r2, [r3, #12]
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	00db      	lsls	r3, r3, #3
 800c566:	4413      	add	r3, r2
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff fe9a 	bl	800c2a8 <lv_obj_style_get_selector_state>
 800c574:	4603      	mov	r3, r0
 800c576:	837b      	strh	r3, [r7, #26]
        if(part_act != part) continue;
 800c578:	69fa      	ldr	r2, [r7, #28]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d133      	bne.n	800c5e8 <get_prop_core+0x1cc>

        /*Be sure the style not specifies other state than the requested.
         *E.g. For HOVER+PRESS object state, HOVER style only is OK, but HOVER+FOCUS style is not*/
        if((state_act & state_inv)) continue;
 800c580:	8b7a      	ldrh	r2, [r7, #26]
 800c582:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c584:	4013      	ands	r3, r2
 800c586:	b29b      	uxth	r3, r3
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d12f      	bne.n	800c5ec <get_prop_core+0x1d0>

        /*Check only better candidates*/
        if(state_act <= weight) continue;
 800c58c:	8b7b      	ldrh	r3, [r7, #26]
 800c58e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c590:	429a      	cmp	r2, r3
 800c592:	da2d      	bge.n	800c5f0 <get_prop_core+0x1d4>

        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800c594:	6a3b      	ldr	r3, [r7, #32]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f107 0214 	add.w	r2, r7, #20
 800c59c:	88f9      	ldrh	r1, [r7, #6]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f015 f898 	bl	80216d4 <lv_style_get_prop>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(found == LV_STYLE_RES_FOUND) {
 800c5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d112      	bne.n	800c5d8 <get_prop_core+0x1bc>
            if(state_act == state) {
 800c5b2:	8b7a      	ldrh	r2, [r7, #26]
 800c5b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d104      	bne.n	800c5c4 <get_prop_core+0x1a8>
                *v = value_tmp;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e02b      	b.n	800c61c <get_prop_core+0x200>
            }
            if(weight < state_act) {
 800c5c4:	8b7b      	ldrh	r3, [r7, #26]
 800c5c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	da12      	bge.n	800c5f2 <get_prop_core+0x1d6>
                weight = state_act;
 800c5cc:	8b7b      	ldrh	r3, [r7, #26]
 800c5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                *v = value_tmp;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	e00c      	b.n	800c5f2 <get_prop_core+0x1d6>
            }
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800c5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d108      	bne.n	800c5f2 <get_prop_core+0x1d6>
            return LV_STYLE_RES_INHERIT;
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	e01b      	b.n	800c61c <get_prop_core+0x200>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800c5e4:	bf00      	nop
 800c5e6:	e004      	b.n	800c5f2 <get_prop_core+0x1d6>
        if(part_act != part) continue;
 800c5e8:	bf00      	nop
 800c5ea:	e002      	b.n	800c5f2 <get_prop_core+0x1d6>
        if((state_act & state_inv)) continue;
 800c5ec:	bf00      	nop
 800c5ee:	e000      	b.n	800c5f2 <get_prop_core+0x1d6>
        if(state_act <= weight) continue;
 800c5f0:	bf00      	nop
    for(; i < obj->style_cnt; i++) {
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c5fc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c600:	b2db      	uxtb	r3, r3
 800c602:	461a      	mov	r2, r3
 800c604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c606:	4293      	cmp	r3, r2
 800c608:	d38a      	bcc.n	800c520 <get_prop_core+0x104>
        }
    }

    if(weight >= 0) {
 800c60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	db04      	blt.n	800c61a <get_prop_core+0x1fe>
        *v = value_tmp;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	601a      	str	r2, [r3, #0]
        return LV_STYLE_RES_FOUND;
 800c616:	2301      	movs	r3, #1
 800c618:	e000      	b.n	800c61c <get_prop_core+0x200>
    }
    else return LV_STYLE_RES_NOT_FOUND;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3740      	adds	r7, #64	; 0x40
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fb7a 	bl	800cd26 <lv_obj_get_child_cnt>
 800c632:	6138      	str	r0, [r7, #16]
    for(i = 0; i < child_cnt; i++) {
 800c634:	2300      	movs	r3, #0
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	e018      	b.n	800c66c <refresh_children_style+0x48>
        lv_obj_t * child = obj->spec_attr->children[i];
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4413      	add	r3, r2
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60fb      	str	r3, [r7, #12]
        lv_obj_invalidate(child);
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7fc f9fd 	bl	8008a4a <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c650:	2200      	movs	r2, #0
 800c652:	212a      	movs	r1, #42	; 0x2a
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7f7 fe2b 	bl	80042b0 <lv_event_send>
        lv_obj_invalidate(child);
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f7fc f9f5 	bl	8008a4a <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7ff ffdf 	bl	800c624 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	3301      	adds	r3, #1
 800c66a:	617b      	str	r3, [r7, #20]
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	429a      	cmp	r2, r3
 800c672:	d3e2      	bcc.n	800c63a <refresh_children_style+0x16>
    }
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop
 800c678:	3718      	adds	r7, #24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	603b      	str	r3, [r7, #0]
 800c68c:	4613      	mov	r3, r2
 800c68e:	80fb      	strh	r3, [r7, #6]
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
 800c690:	2300      	movs	r3, #0
 800c692:	76fb      	strb	r3, [r7, #27]
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800c694:	483a      	ldr	r0, [pc, #232]	; (800c780 <trans_del+0x100>)
 800c696:	f013 ff15 	bl	80204c4 <_lv_ll_get_tail>
 800c69a:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 800c69c:	e065      	b.n	800c76a <trans_del+0xea>
        if(tr == tr_limit) break;
 800c69e:	69fa      	ldr	r2, [r7, #28]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d065      	beq.n	800c772 <trans_del+0xf2>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800c6a6:	69f9      	ldr	r1, [r7, #28]
 800c6a8:	4835      	ldr	r0, [pc, #212]	; (800c780 <trans_del+0x100>)
 800c6aa:	f013 ff31 	bl	8020510 <_lv_ll_get_prev>
 800c6ae:	6138      	str	r0, [r7, #16]

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d155      	bne.n	800c766 <trans_del+0xe6>
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d003      	beq.n	800c6cc <trans_del+0x4c>
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c6ca:	d14c      	bne.n	800c766 <trans_del+0xe6>
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	889b      	ldrh	r3, [r3, #4]
 800c6d0:	88fa      	ldrh	r2, [r7, #6]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d004      	beq.n	800c6e0 <trans_del+0x60>
 800c6d6:	88fb      	ldrh	r3, [r7, #6]
 800c6d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d142      	bne.n	800c766 <trans_del+0xe6>
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	e029      	b.n	800c73a <trans_del+0xba>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	68da      	ldr	r2, [r3, #12]
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	00db      	lsls	r3, r3, #3
 800c6ee:	4413      	add	r3, r2
 800c6f0:	79db      	ldrb	r3, [r3, #7]
 800c6f2:	f003 0302 	and.w	r3, r3, #2
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d01b      	beq.n	800c734 <trans_del+0xb4>
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c702:	d00b      	beq.n	800c71c <trans_del+0x9c>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	68da      	ldr	r2, [r3, #12]
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	4413      	add	r3, r2
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c714:	461a      	mov	r2, r3
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	4293      	cmp	r3, r2
 800c71a:	d10b      	bne.n	800c734 <trans_del+0xb4>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	68da      	ldr	r2, [r3, #12]
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	00db      	lsls	r3, r3, #3
 800c724:	4413      	add	r3, r2
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	889b      	ldrh	r3, [r3, #4]
 800c72c:	4619      	mov	r1, r3
 800c72e:	4610      	mov	r0, r2
 800c730:	f014 feea 	bl	8021508 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	3301      	adds	r3, #1
 800c738:	617b      	str	r3, [r7, #20]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c73e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c742:	b2db      	uxtb	r3, r3
 800c744:	461a      	mov	r2, r3
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	4293      	cmp	r3, r2
 800c74a:	d3cc      	bcc.n	800c6e6 <trans_del+0x66>
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800c74c:	2100      	movs	r1, #0
 800c74e:	69f8      	ldr	r0, [r7, #28]
 800c750:	f012 fa22 	bl	801eb98 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800c754:	69f9      	ldr	r1, [r7, #28]
 800c756:	480a      	ldr	r0, [pc, #40]	; (800c780 <trans_del+0x100>)
 800c758:	f013 fe46 	bl	80203e8 <_lv_ll_remove>
            lv_mem_free(tr);
 800c75c:	69f8      	ldr	r0, [r7, #28]
 800c75e:	f014 f88f 	bl	8020880 <lv_mem_free>
            removed = true;
 800c762:	2301      	movs	r3, #1
 800c764:	76fb      	strb	r3, [r7, #27]

        }
        tr = tr_prev;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d196      	bne.n	800c69e <trans_del+0x1e>
 800c770:	e000      	b.n	800c774 <trans_del+0xf4>
        if(tr == tr_limit) break;
 800c772:	bf00      	nop
    }
    return removed;
 800c774:	7efb      	ldrb	r3, [r7, #27]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3720      	adds	r7, #32
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	2000088c 	.word	0x2000088c

0800c784 <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
    trans_t * tr = _tr;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	617b      	str	r3, [r7, #20]
    lv_obj_t * obj = tr->obj;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	613b      	str	r3, [r7, #16]

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800c798:	2300      	movs	r3, #0
 800c79a:	61fb      	str	r3, [r7, #28]
 800c79c:	e152      	b.n	800ca44 <trans_anim_cb+0x2c0>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	68da      	ldr	r2, [r3, #12]
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	4413      	add	r3, r2
 800c7a8:	79db      	ldrb	r3, [r3, #7]
 800c7aa:	f003 0302 	and.w	r3, r3, #2
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00c      	beq.n	800c7ce <trans_anim_cb+0x4a>
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	68da      	ldr	r2, [r3, #12]
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	4413      	add	r3, r2
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d003      	beq.n	800c7d6 <trans_anim_cb+0x52>
    for(i = 0; i < obj->style_cnt; i++) {
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	61fb      	str	r3, [r7, #28]
 800c7d4:	e136      	b.n	800ca44 <trans_anim_cb+0x2c0>

        lv_style_value_t value_final;
        switch(tr->prop) {
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	889b      	ldrh	r3, [r3, #4]
 800c7da:	3b20      	subs	r3, #32
 800c7dc:	2b47      	cmp	r3, #71	; 0x47
 800c7de:	f200 80dc 	bhi.w	800c99a <trans_anim_cb+0x216>
 800c7e2:	a201      	add	r2, pc, #4	; (adr r2, 800c7e8 <trans_anim_cb+0x64>)
 800c7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e8:	0800c96b 	.word	0x0800c96b
 800c7ec:	0800c99b 	.word	0x0800c99b
 800c7f0:	0800c99b 	.word	0x0800c99b
 800c7f4:	0800c99b 	.word	0x0800c99b
 800c7f8:	0800c99b 	.word	0x0800c99b
 800c7fc:	0800c99b 	.word	0x0800c99b
 800c800:	0800c99b 	.word	0x0800c99b
 800c804:	0800c99b 	.word	0x0800c99b
 800c808:	0800c99b 	.word	0x0800c99b
 800c80c:	0800c99b 	.word	0x0800c99b
 800c810:	0800c99b 	.word	0x0800c99b
 800c814:	0800c99b 	.word	0x0800c99b
 800c818:	0800c99b 	.word	0x0800c99b
 800c81c:	0800c99b 	.word	0x0800c99b
 800c820:	0800c99b 	.word	0x0800c99b
 800c824:	0800c99b 	.word	0x0800c99b
 800c828:	0800c96b 	.word	0x0800c96b
 800c82c:	0800c99b 	.word	0x0800c99b
 800c830:	0800c99b 	.word	0x0800c99b
 800c834:	0800c909 	.word	0x0800c909
 800c838:	0800c909 	.word	0x0800c909
 800c83c:	0800c99b 	.word	0x0800c99b
 800c840:	0800c96b 	.word	0x0800c96b
 800c844:	0800c99b 	.word	0x0800c99b
 800c848:	0800c99b 	.word	0x0800c99b
 800c84c:	0800c99b 	.word	0x0800c99b
 800c850:	0800c99b 	.word	0x0800c99b
 800c854:	0800c99b 	.word	0x0800c99b
 800c858:	0800c99b 	.word	0x0800c99b
 800c85c:	0800c99b 	.word	0x0800c99b
 800c860:	0800c99b 	.word	0x0800c99b
 800c864:	0800c99b 	.word	0x0800c99b
 800c868:	0800c99b 	.word	0x0800c99b
 800c86c:	0800c99b 	.word	0x0800c99b
 800c870:	0800c99b 	.word	0x0800c99b
 800c874:	0800c99b 	.word	0x0800c99b
 800c878:	0800c96b 	.word	0x0800c96b
 800c87c:	0800c99b 	.word	0x0800c99b
 800c880:	0800c99b 	.word	0x0800c99b
 800c884:	0800c96b 	.word	0x0800c96b
 800c888:	0800c99b 	.word	0x0800c99b
 800c88c:	0800c99b 	.word	0x0800c99b
 800c890:	0800c99b 	.word	0x0800c99b
 800c894:	0800c99b 	.word	0x0800c99b
 800c898:	0800c99b 	.word	0x0800c99b
 800c89c:	0800c99b 	.word	0x0800c99b
 800c8a0:	0800c99b 	.word	0x0800c99b
 800c8a4:	0800c99b 	.word	0x0800c99b
 800c8a8:	0800c99b 	.word	0x0800c99b
 800c8ac:	0800c99b 	.word	0x0800c99b
 800c8b0:	0800c99b 	.word	0x0800c99b
 800c8b4:	0800c99b 	.word	0x0800c99b
 800c8b8:	0800c99b 	.word	0x0800c99b
 800c8bc:	0800c96b 	.word	0x0800c96b
 800c8c0:	0800c99b 	.word	0x0800c99b
 800c8c4:	0800c91f 	.word	0x0800c91f
 800c8c8:	0800c99b 	.word	0x0800c99b
 800c8cc:	0800c99b 	.word	0x0800c99b
 800c8d0:	0800c99b 	.word	0x0800c99b
 800c8d4:	0800c99b 	.word	0x0800c99b
 800c8d8:	0800c99b 	.word	0x0800c99b
 800c8dc:	0800c99b 	.word	0x0800c99b
 800c8e0:	0800c99b 	.word	0x0800c99b
 800c8e4:	0800c99b 	.word	0x0800c99b
 800c8e8:	0800c99b 	.word	0x0800c99b
 800c8ec:	0800c935 	.word	0x0800c935
 800c8f0:	0800c99b 	.word	0x0800c99b
 800c8f4:	0800c99b 	.word	0x0800c99b
 800c8f8:	0800c99b 	.word	0x0800c99b
 800c8fc:	0800c99b 	.word	0x0800c99b
 800c900:	0800c91f 	.word	0x0800c91f
 800c904:	0800c909 	.word	0x0800c909

            case LV_STYLE_BORDER_SIDE:
            case LV_STYLE_BORDER_POST:
            case LV_STYLE_BLEND_MODE:
                if(v < 255) value_final.num = tr->start_value.num;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2bfe      	cmp	r3, #254	; 0xfe
 800c90c:	dc03      	bgt.n	800c916 <trans_anim_cb+0x192>
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	60fb      	str	r3, [r7, #12]
                else value_final.num = tr->end_value.num;
                break;
 800c914:	e05d      	b.n	800c9d2 <trans_anim_cb+0x24e>
                else value_final.num = tr->end_value.num;
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	60fb      	str	r3, [r7, #12]
                break;
 800c91c:	e059      	b.n	800c9d2 <trans_anim_cb+0x24e>
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2bfe      	cmp	r3, #254	; 0xfe
 800c922:	dc03      	bgt.n	800c92c <trans_anim_cb+0x1a8>
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	60fb      	str	r3, [r7, #12]
                else value_final.ptr = tr->end_value.ptr;
                break;
 800c92a:	e052      	b.n	800c9d2 <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	60fb      	str	r3, [r7, #12]
                break;
 800c932:	e04e      	b.n	800c9d2 <trans_anim_cb+0x24e>
            case LV_STYLE_COLOR_FILTER_DSC:
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d103      	bne.n	800c944 <trans_anim_cb+0x1c0>
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	60fb      	str	r3, [r7, #12]
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
                else value_final.ptr = tr->end_value.ptr;
                break;
 800c942:	e046      	b.n	800c9d2 <trans_anim_cb+0x24e>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	691b      	ldr	r3, [r3, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d103      	bne.n	800c954 <trans_anim_cb+0x1d0>
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	60fb      	str	r3, [r7, #12]
                break;
 800c952:	e03e      	b.n	800c9d2 <trans_anim_cb+0x24e>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	2b7f      	cmp	r3, #127	; 0x7f
 800c958:	dc03      	bgt.n	800c962 <trans_anim_cb+0x1de>
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	60fb      	str	r3, [r7, #12]
                break;
 800c960:	e037      	b.n	800c9d2 <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	60fb      	str	r3, [r7, #12]
                break;
 800c968:	e033      	b.n	800c9d2 <trans_anim_cb+0x24e>
            case LV_STYLE_BORDER_COLOR:
            case LV_STYLE_TEXT_COLOR:
            case LV_STYLE_SHADOW_COLOR:
            case LV_STYLE_OUTLINE_COLOR:
            case LV_STYLE_IMG_RECOLOR:
                if(v <= 0) value_final.color = tr->start_value.color;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	dc03      	bgt.n	800c978 <trans_anim_cb+0x1f4>
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	7b1b      	ldrb	r3, [r3, #12]
 800c974:	733b      	strb	r3, [r7, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
                break;
 800c976:	e02c      	b.n	800c9d2 <trans_anim_cb+0x24e>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	2bfe      	cmp	r3, #254	; 0xfe
 800c97c:	dd03      	ble.n	800c986 <trans_anim_cb+0x202>
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	7c1b      	ldrb	r3, [r3, #16]
 800c982:	733b      	strb	r3, [r7, #12]
                break;
 800c984:	e025      	b.n	800c9d2 <trans_anim_cb+0x24e>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	6979      	ldr	r1, [r7, #20]
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	7b09      	ldrb	r1, [r1, #12]
 800c990:	7c18      	ldrb	r0, [r3, #16]
 800c992:	f7fe fdad 	bl	800b4f0 <lv_color_mix>
 800c996:	7338      	strb	r0, [r7, #12]
                break;
 800c998:	e01b      	b.n	800c9d2 <trans_anim_cb+0x24e>

            default:
                if(v == 0) value_final.num = tr->start_value.num;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d103      	bne.n	800c9a8 <trans_anim_cb+0x224>
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	60fb      	str	r3, [r7, #12]
                else if(v == 255) value_final.num = tr->end_value.num;
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
                break;
 800c9a6:	e013      	b.n	800c9d0 <trans_anim_cb+0x24c>
                else if(v == 255) value_final.num = tr->end_value.num;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2bff      	cmp	r3, #255	; 0xff
 800c9ac:	d103      	bne.n	800c9b6 <trans_anim_cb+0x232>
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	60fb      	str	r3, [r7, #12]
                break;
 800c9b4:	e00c      	b.n	800c9d0 <trans_anim_cb+0x24c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	68da      	ldr	r2, [r3, #12]
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	6919      	ldr	r1, [r3, #16]
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	1acb      	subs	r3, r1, r3
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	fb01 f303 	mul.w	r3, r1, r3
 800c9ca:	121b      	asrs	r3, r3, #8
 800c9cc:	4413      	add	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]
                break;
 800c9d0:	bf00      	nop
        }

        lv_style_value_t old_value;
        bool refr = true;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	76fb      	strb	r3, [r7, #27]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	68da      	ldr	r2, [r3, #12]
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	00db      	lsls	r3, r3, #3
 800c9de:	4413      	add	r3, r2
 800c9e0:	6818      	ldr	r0, [r3, #0]
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	889b      	ldrh	r3, [r3, #4]
 800c9e6:	f107 0208 	add.w	r2, r7, #8
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	f014 fe72 	bl	80216d4 <lv_style_get_prop>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00d      	beq.n	800ca12 <trans_anim_cb+0x28e>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d109      	bne.n	800ca12 <trans_anim_cb+0x28e>
 800c9fe:	7b3a      	ldrb	r2, [r7, #12]
 800ca00:	7a3b      	ldrb	r3, [r7, #8]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d105      	bne.n	800ca12 <trans_anim_cb+0x28e>
               value_final.num == old_value.num) {
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	68bb      	ldr	r3, [r7, #8]
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d101      	bne.n	800ca12 <trans_anim_cb+0x28e>
                refr = false;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	76fb      	strb	r3, [r7, #27]
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	68da      	ldr	r2, [r3, #12]
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	00db      	lsls	r3, r3, #3
 800ca1a:	4413      	add	r3, r2
 800ca1c:	6818      	ldr	r0, [r3, #0]
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	889b      	ldrh	r3, [r3, #4]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	4619      	mov	r1, r3
 800ca26:	f014 fe41 	bl	80216ac <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800ca2a:	7efb      	ldrb	r3, [r7, #27]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d014      	beq.n	800ca5a <trans_anim_cb+0x2d6>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	6818      	ldr	r0, [r3, #0]
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	6899      	ldr	r1, [r3, #8]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	889b      	ldrh	r3, [r3, #4]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	f7fe ffa3 	bl	800b988 <lv_obj_refresh_style>
        break;

    }

}
 800ca42:	e00b      	b.n	800ca5c <trans_anim_cb+0x2d8>
    for(i = 0; i < obj->style_cnt; i++) {
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ca48:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	461a      	mov	r2, r3
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	4293      	cmp	r3, r2
 800ca54:	f4ff aea3 	bcc.w	800c79e <trans_anim_cb+0x1a>
}
 800ca58:	e000      	b.n	800ca5c <trans_anim_cb+0x2d8>
        break;
 800ca5a:	bf00      	nop
}
 800ca5c:	bf00      	nop
 800ca5e:	3720      	adds	r7, #32
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 800ca64:	b590      	push	{r4, r7, lr}
 800ca66:	b087      	sub	sp, #28
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	617b      	str	r3, [r7, #20]

    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff fc22 	bl	800c2c0 <lv_obj_style_get_selector_part>
 800ca7c:	6138      	str	r0, [r7, #16]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	6818      	ldr	r0, [r3, #0]
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	889b      	ldrh	r3, [r3, #4]
 800ca86:	697c      	ldr	r4, [r7, #20]
 800ca88:	461a      	mov	r2, r3
 800ca8a:	6939      	ldr	r1, [r7, #16]
 800ca8c:	f7ff f856 	bl	800bb3c <lv_obj_get_style_prop>
 800ca90:	60e0      	str	r0, [r4, #12]

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    lv_style_prop_t prop_tmp = tr->prop;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	889b      	ldrh	r3, [r3, #4]
 800ca96:	81fb      	strh	r3, [r7, #14]
    tr->prop = LV_STYLE_PROP_INV;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	809a      	strh	r2, [r3, #4]

    /*Delete the related transitions if any*/
    trans_del(tr->obj, part, prop_tmp, tr);
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	89fa      	ldrh	r2, [r7, #14]
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	6939      	ldr	r1, [r7, #16]
 800caa8:	f7ff fdea 	bl	800c680 <trans_del>

    tr->prop = prop_tmp;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	89fa      	ldrh	r2, [r7, #14]
 800cab0:	809a      	strh	r2, [r3, #4]

    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	4619      	mov	r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	f7ff fc0c 	bl	800c2da <get_trans_style>
 800cac2:	60b8      	str	r0, [r7, #8]
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	6818      	ldr	r0, [r3, #0]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	8899      	ldrh	r1, [r3, #4]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	68da      	ldr	r2, [r3, #12]
 800cad0:	f014 fdec 	bl	80216ac <lv_style_set_prop>

}
 800cad4:	bf00      	nop
 800cad6:	371c      	adds	r7, #28
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd90      	pop	{r4, r7, pc}

0800cadc <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08a      	sub	sp, #40	; 0x28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	61bb      	str	r3, [r7, #24]
    lv_obj_t * obj = tr->obj;
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	617b      	str	r3, [r7, #20]
    lv_style_prop_t prop = tr->prop;
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	889b      	ldrh	r3, [r3, #4]
 800caf4:	827b      	strh	r3, [r7, #18]

    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
 800caf6:	2300      	movs	r3, #0
 800caf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800cafc:	4842      	ldr	r0, [pc, #264]	; (800cc08 <trans_anim_ready_cb+0x12c>)
 800cafe:	f013 fcd0 	bl	80204a2 <_lv_ll_get_head>
 800cb02:	6238      	str	r0, [r7, #32]
 800cb04:	e01e      	b.n	800cb44 <trans_anim_ready_cb+0x68>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800cb06:	6a3a      	ldr	r2, [r7, #32]
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d015      	beq.n	800cb3a <trans_anim_ready_cb+0x5e>
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d10f      	bne.n	800cb3a <trans_anim_ready_cb+0x5e>
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	689a      	ldr	r2, [r3, #8]
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d109      	bne.n	800cb3a <trans_anim_ready_cb+0x5e>
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	889a      	ldrh	r2, [r3, #4]
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	889b      	ldrh	r3, [r3, #4]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d103      	bne.n	800cb3a <trans_anim_ready_cb+0x5e>
            running = true;
 800cb32:	2301      	movs	r3, #1
 800cb34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cb38:	e007      	b.n	800cb4a <trans_anim_ready_cb+0x6e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800cb3a:	6a39      	ldr	r1, [r7, #32]
 800cb3c:	4832      	ldr	r0, [pc, #200]	; (800cc08 <trans_anim_ready_cb+0x12c>)
 800cb3e:	f013 fcd2 	bl	80204e6 <_lv_ll_get_next>
 800cb42:	6238      	str	r0, [r7, #32]
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1dd      	bne.n	800cb06 <trans_anim_ready_cb+0x2a>
        }
    }

    if(!running) {
 800cb4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb4e:	f083 0301 	eor.w	r3, r3, #1
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d053      	beq.n	800cc00 <trans_anim_ready_cb+0x124>
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 800cb58:	2300      	movs	r3, #0
 800cb5a:	61fb      	str	r3, [r7, #28]
 800cb5c:	e045      	b.n	800cbea <trans_anim_ready_cb+0x10e>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	68da      	ldr	r2, [r3, #12]
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	00db      	lsls	r3, r3, #3
 800cb66:	4413      	add	r3, r2
 800cb68:	79db      	ldrb	r3, [r3, #7]
 800cb6a:	f003 0302 	and.w	r3, r3, #2
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d037      	beq.n	800cbe4 <trans_anim_ready_cb+0x108>
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	68da      	ldr	r2, [r3, #12]
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	4413      	add	r3, r2
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800cb84:	461a      	mov	r2, r3
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d12a      	bne.n	800cbe4 <trans_anim_ready_cb+0x108>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800cb8e:	69b9      	ldr	r1, [r7, #24]
 800cb90:	481d      	ldr	r0, [pc, #116]	; (800cc08 <trans_anim_ready_cb+0x12c>)
 800cb92:	f013 fc29 	bl	80203e8 <_lv_ll_remove>
                lv_mem_free(tr);
 800cb96:	69b8      	ldr	r0, [r7, #24]
 800cb98:	f013 fe72 	bl	8020880 <lv_mem_free>

                _lv_obj_style_t * obj_style = &obj->styles[i];
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	68da      	ldr	r2, [r3, #12]
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	00db      	lsls	r3, r3, #3
 800cba4:	4413      	add	r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]
                lv_style_remove_prop(obj_style->style, prop);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	8a7a      	ldrh	r2, [r7, #18]
 800cbae:	4611      	mov	r1, r2
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f014 fca9 	bl	8021508 <lv_style_remove_prop>

                if(lv_style_is_empty(obj->styles[i].style)) {
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	68da      	ldr	r2, [r3, #12]
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	4413      	add	r3, r2
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f014 fea2 	bl	802190c <lv_style_is_empty>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d017      	beq.n	800cbfe <trans_anim_ready_cb+0x122>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6819      	ldr	r1, [r3, #0]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6978      	ldr	r0, [r7, #20]
 800cbde:	f7fe fddd 	bl	800b79c <lv_obj_remove_style>

                }
                break;
 800cbe2:	e00c      	b.n	800cbfe <trans_anim_ready_cb+0x122>
        for(i = 0; i < obj->style_cnt; i++) {
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	61fb      	str	r3, [r7, #28]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cbee:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d3b0      	bcc.n	800cb5e <trans_anim_ready_cb+0x82>
            }
        }
    }
}
 800cbfc:	e000      	b.n	800cc00 <trans_anim_ready_cb+0x124>
                break;
 800cbfe:	bf00      	nop
}
 800cc00:	bf00      	nop
 800cc02:	3728      	adds	r7, #40	; 0x28
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	2000088c 	.word	0x2000088c

0800cc0c <calculate_layer_type>:

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800cc14:	2100      	movs	r1, #0
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7fe fd5c 	bl	800b6d4 <lv_obj_get_style_transform_angle>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d001      	beq.n	800cc26 <calculate_layer_type+0x1a>
 800cc22:	2302      	movs	r3, #2
 800cc24:	e01c      	b.n	800cc60 <calculate_layer_type+0x54>
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800cc26:	2100      	movs	r1, #0
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7fe fd41 	bl	800b6b0 <lv_obj_get_style_transform_zoom>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc34:	d001      	beq.n	800cc3a <calculate_layer_type+0x2e>
 800cc36:	2302      	movs	r3, #2
 800cc38:	e012      	b.n	800cc60 <calculate_layer_type+0x54>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7fe fd5b 	bl	800b6f8 <lv_obj_get_style_opa>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2bff      	cmp	r3, #255	; 0xff
 800cc46:	d001      	beq.n	800cc4c <calculate_layer_type+0x40>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e009      	b.n	800cc60 <calculate_layer_type+0x54>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7fe fd87 	bl	800b762 <lv_obj_get_style_blend_mode>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <calculate_layer_type+0x52>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e000      	b.n	800cc60 <calculate_layer_type+0x54>
#endif
    return LV_LAYER_TYPE_NONE;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <lv_obj_get_screen>:
    }
    lv_group_swap_obj(obj1, obj2);
}

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_par;

    do {
        act_par = par;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	60bb      	str	r3, [r7, #8]
        par = lv_obj_get_parent(act_par);
 800cc78:	68b8      	ldr	r0, [r7, #8]
 800cc7a:	f000 f843 	bl	800cd04 <lv_obj_get_parent>
 800cc7e:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1f6      	bne.n	800cc74 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_par;
 800cc86:	68bb      	ldr	r3, [r7, #8]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <lv_obj_get_disp>:

lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d102      	bne.n	800cca6 <lv_obj_get_disp+0x16>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	617b      	str	r3, [r7, #20]
 800cca4:	e003      	b.n	800ccae <lv_obj_get_disp+0x1e>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7ff ffde 	bl	800cc68 <lv_obj_get_screen>
 800ccac:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800ccae:	4814      	ldr	r0, [pc, #80]	; (800cd00 <lv_obj_get_disp+0x70>)
 800ccb0:	f013 fbf7 	bl	80204a2 <_lv_ll_get_head>
 800ccb4:	6138      	str	r0, [r7, #16]
 800ccb6:	e01a      	b.n	800ccee <lv_obj_get_disp+0x5e>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 800ccb8:	2300      	movs	r3, #0
 800ccba:	60fb      	str	r3, [r7, #12]
 800ccbc:	e00d      	b.n	800ccda <lv_obj_get_disp+0x4a>
            if(d->screens[i] == scr) return d;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	68da      	ldr	r2, [r3, #12]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d101      	bne.n	800ccd4 <lv_obj_get_disp+0x44>
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	e010      	b.n	800ccf6 <lv_obj_get_disp+0x66>
        for(i = 0; i < d->screen_cnt; i++) {
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d3ec      	bcc.n	800ccbe <lv_obj_get_disp+0x2e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800cce4:	6939      	ldr	r1, [r7, #16]
 800cce6:	4806      	ldr	r0, [pc, #24]	; (800cd00 <lv_obj_get_disp+0x70>)
 800cce8:	f013 fbfd 	bl	80204e6 <_lv_ll_get_next>
 800ccec:	6138      	str	r0, [r7, #16]
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1e1      	bne.n	800ccb8 <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	20000844 	.word	0x20000844

0800cd04 <lv_obj_get_parent>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d101      	bne.n	800cd16 <lv_obj_get_parent+0x12>
 800cd12:	2300      	movs	r3, #0
 800cd14:	e001      	b.n	800cd1a <lv_obj_get_parent+0x16>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	685b      	ldr	r3, [r3, #4]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <lv_obj_get_child_cnt>:
    if(idu >= obj->spec_attr->child_cnt) return NULL;
    else return obj->spec_attr->children[id];
}

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b083      	sub	sp, #12
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d101      	bne.n	800cd3a <lv_obj_get_child_cnt+0x14>
 800cd36:	2300      	movs	r3, #0
 800cd38:	e002      	b.n	800cd40 <lv_obj_get_child_cnt+0x1a>
    return obj->spec_attr->child_cnt;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	685b      	ldr	r3, [r3, #4]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <lv_area_copy>:
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	80da      	strh	r2, [r3, #6]
}
 800cd7e:	bf00      	nop
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <lv_area_get_width>:
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b083      	sub	sp, #12
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	3301      	adds	r3, #1
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	b21b      	sxth	r3, r3
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <lv_area_get_height>:
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	b21b      	sxth	r3, r3
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <lv_obj_get_style_transform_zoom>:
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b084      	sub	sp, #16
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800cdf0:	226c      	movs	r2, #108	; 0x6c
 800cdf2:	6839      	ldr	r1, [r7, #0]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7fe fea1 	bl	800bb3c <lv_obj_get_style_prop>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	b21b      	sxth	r3, r3
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <lv_obj_get_style_transform_angle>:
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b084      	sub	sp, #16
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
 800ce12:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800ce14:	226d      	movs	r2, #109	; 0x6d
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7fe fe8f 	bl	800bb3c <lv_obj_get_style_prop>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	b21b      	sxth	r3, r3
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <lv_obj_get_style_transform_pivot_x>:
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800ce38:	226e      	movs	r2, #110	; 0x6e
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7fe fe7d 	bl	800bb3c <lv_obj_get_style_prop>
 800ce42:	4603      	mov	r3, r0
 800ce44:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	b21b      	sxth	r3, r3
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <lv_obj_get_style_transform_pivot_y>:
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b084      	sub	sp, #16
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800ce5c:	226f      	movs	r2, #111	; 0x6f
 800ce5e:	6839      	ldr	r1, [r7, #0]
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7fe fe6b 	bl	800bb3c <lv_obj_get_style_prop>
 800ce66:	4603      	mov	r3, r0
 800ce68:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	b21b      	sxth	r3, r3
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <lv_obj_get_style_opa>:
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800ce80:	2260      	movs	r2, #96	; 0x60
 800ce82:	6839      	ldr	r1, [r7, #0]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7fe fe59 	bl	800bb3c <lv_obj_get_style_prop>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	b2db      	uxtb	r3, r3
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <lv_obj_get_style_blend_mode>:
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800cea4:	2267      	movs	r2, #103	; 0x67
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7fe fe47 	bl	800bb3c <lv_obj_get_style_prop>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	b2db      	uxtb	r3, r3
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 800cebe:	b480      	push	{r7}
 800cec0:	af00      	add	r7, sp, #0
    perf_monitor_init(&perf_monitor);
#endif
#if LV_USE_MEM_MONITOR
    mem_monitor_init(&mem_monitor);
#endif
}
 800cec2:	bf00      	nop
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <lv_obj_redraw>:
        }
    }
}

void lv_obj_redraw(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b08e      	sub	sp, #56	; 0x38
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_area_t clip_coords_for_obj;

    /*Truncate the clip area to `obj size + ext size` area*/
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800cedc:	f107 0310 	add.w	r3, r7, #16
 800cee0:	4619      	mov	r1, r3
 800cee2:	6838      	ldr	r0, [r7, #0]
 800cee4:	f7fa ffd8 	bl	8007e98 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800cee8:	6838      	ldr	r0, [r7, #0]
 800ceea:	f7fa fb1a 	bl	8007522 <_lv_obj_get_ext_draw_size>
 800ceee:	4603      	mov	r3, r0
 800cef0:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800cef2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800cef6:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800cefa:	f107 0310 	add.w	r3, r7, #16
 800cefe:	4618      	mov	r0, r3
 800cf00:	f012 f902 	bl	801f108 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800cf04:	f107 0210 	add.w	r2, r7, #16
 800cf08:	f107 0318 	add.w	r3, r7, #24
 800cf0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f012 f966 	bl	801f1e0 <_lv_area_intersect>
 800cf14:	4603      	mov	r3, r0
 800cf16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    /*If the object is visible on the current clip area OR has overflow visible draw it.
     *With overflow visible drawing should happen to apply the masks which might affect children */
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800cf1a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d107      	bne.n	800cf32 <lv_obj_redraw+0x66>
 800cf22:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cf26:	6838      	ldr	r0, [r7, #0]
 800cf28:	f7f8 fb07 	bl	800553a <lv_obj_has_flag>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <lv_obj_redraw+0x6a>
 800cf32:	2301      	movs	r3, #1
 800cf34:	e000      	b.n	800cf38 <lv_obj_redraw+0x6c>
 800cf36:	2300      	movs	r3, #0
 800cf38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800cf3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf40:	f003 0301 	and.w	r3, r3, #1
 800cf44:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(should_draw) {
 800cf48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d012      	beq.n	800cf76 <lv_obj_redraw+0xaa>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f107 0218 	add.w	r2, r7, #24
 800cf56:	609a      	str	r2, [r3, #8]

        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	2114      	movs	r1, #20
 800cf5c:	6838      	ldr	r0, [r7, #0]
 800cf5e:	f7f7 f9a7 	bl	80042b0 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	2115      	movs	r1, #21
 800cf66:	6838      	ldr	r0, [r7, #0]
 800cf68:	f7f7 f9a2 	bl	80042b0 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	2116      	movs	r1, #22
 800cf70:	6838      	ldr	r0, [r7, #0]
 800cf72:	f7f7 f99d 	bl	80042b0 <lv_event_send>
    }

    /*With overflow visible keep the previous clip area to let the children visible out of this object too
     *With not overflow visible limit the clip are to the object's coordinates to clip the children*/
    lv_area_t clip_coords_for_children;
    bool refr_children = true;
 800cf76:	2301      	movs	r3, #1
 800cf78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800cf7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cf80:	6838      	ldr	r0, [r7, #0]
 800cf82:	f7f8 fada 	bl	800553a <lv_obj_has_flag>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d006      	beq.n	800cf9a <lv_obj_redraw+0xce>
        clip_coords_for_children  = *clip_area_ori;
 800cf8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf8e:	f107 0308 	add.w	r3, r7, #8
 800cf92:	6810      	ldr	r0, [r2, #0]
 800cf94:	6851      	ldr	r1, [r2, #4]
 800cf96:	c303      	stmia	r3!, {r0, r1}
 800cf98:	e011      	b.n	800cfbe <lv_obj_redraw+0xf2>
    }
    else {
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	f103 0214 	add.w	r2, r3, #20
 800cfa0:	f107 0308 	add.w	r3, r7, #8
 800cfa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f012 f91a 	bl	801f1e0 <_lv_area_intersect>
 800cfac:	4603      	mov	r3, r0
 800cfae:	f083 0301 	eor.w	r3, r3, #1
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <lv_obj_redraw+0xf2>
            refr_children = false;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if(refr_children) {
 800cfbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d01d      	beq.n	800d002 <lv_obj_redraw+0x136>
        draw_ctx->clip_area = &clip_coords_for_children;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f107 0208 	add.w	r2, r7, #8
 800cfcc:	609a      	str	r2, [r3, #8]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800cfce:	6838      	ldr	r0, [r7, #0]
 800cfd0:	f7ff fea9 	bl	800cd26 <lv_obj_get_child_cnt>
 800cfd4:	6278      	str	r0, [r7, #36]	; 0x24
        for(i = 0; i < child_cnt; i++) {
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	633b      	str	r3, [r7, #48]	; 0x30
 800cfda:	e00e      	b.n	800cffa <lv_obj_redraw+0x12e>
            lv_obj_t * child = obj->spec_attr->children[i];
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	623b      	str	r3, [r7, #32]
            refr_obj(draw_ctx, child);
 800cfec:	6a39      	ldr	r1, [r7, #32]
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fef0 	bl	800ddd4 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800cff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff6:	3301      	adds	r3, #1
 800cff8:	633b      	str	r3, [r7, #48]	; 0x30
 800cffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	429a      	cmp	r2, r3
 800d000:	d3ec      	bcc.n	800cfdc <lv_obj_redraw+0x110>
        }
    }

    /*If the object was visible on the clip area call the post draw events too*/
    if(should_draw) {
 800d002:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d006:	2b00      	cmp	r3, #0
 800d008:	d012      	beq.n	800d030 <lv_obj_redraw+0x164>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f107 0218 	add.w	r2, r7, #24
 800d010:	609a      	str	r2, [r3, #8]

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	2117      	movs	r1, #23
 800d016:	6838      	ldr	r0, [r7, #0]
 800d018:	f7f7 f94a 	bl	80042b0 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	2118      	movs	r1, #24
 800d020:	6838      	ldr	r0, [r7, #0]
 800d022:	f7f7 f945 	bl	80042b0 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	2119      	movs	r1, #25
 800d02a:	6838      	ldr	r0, [r7, #0]
 800d02c:	f7f7 f940 	bl	80042b0 <lv_event_send>
    }

    draw_ctx->clip_area = clip_area_ori;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d034:	609a      	str	r2, [r3, #8]
}
 800d036:	bf00      	nop
 800d038:	3738      	adds	r7, #56	; 0x38
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b088      	sub	sp, #32
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d102      	bne.n	800d054 <_lv_inv_area+0x16>
 800d04e:	f011 fbef 	bl	801e830 <lv_disp_get_default>
 800d052:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80be 	beq.w	800d1d8 <_lv_inv_area+0x19a>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7f7 f90c 	bl	800427a <lv_disp_is_invalidation_enabled>
 800d062:	4603      	mov	r3, r0
 800d064:	f083 0301 	eor.w	r3, r3, #1
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f040 80b6 	bne.w	800d1dc <_lv_inv_area+0x19e>

    if(disp->rendering_in_progress) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d076:	f003 0304 	and.w	r3, r3, #4
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f040 80af 	bne.w	800d1e0 <_lv_inv_area+0x1a2>
        LV_LOG_ERROR("detected modifying dirty areas in render");
        return;
    }

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d104      	bne.n	800d092 <_lv_inv_area+0x54>
        disp->inv_p = 0;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        return;
 800d090:	e0ad      	b.n	800d1ee <_lv_inv_area+0x1b0>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800d092:	2300      	movs	r3, #0
 800d094:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f011 fbd4 	bl	801e848 <lv_disp_get_hor_res>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	b21b      	sxth	r3, r3
 800d0aa:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f011 fbf1 	bl	801e894 <lv_disp_get_ver_res>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	b21b      	sxth	r3, r3
 800d0bc:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800d0be:	f107 0214 	add.w	r2, r7, #20
 800d0c2:	f107 030c 	add.w	r3, r7, #12
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f012 f889 	bl	801f1e0 <_lv_area_intersect>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	777b      	strb	r3, [r7, #29]
    if(suc == false)  return; /*Out of the screen*/
 800d0d2:	7f7b      	ldrb	r3, [r7, #29]
 800d0d4:	f083 0301 	eor.w	r3, r3, #1
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f040 8082 	bne.w	800d1e4 <_lv_inv_area+0x1a6>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->driver->full_refresh) {
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	7c1b      	ldrb	r3, [r3, #16]
 800d0e6:	f003 0302 	and.w	r3, r3, #2
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d015      	beq.n	800d11c <_lv_inv_area+0xde>
        disp->inv_areas[0] = scr_area;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3330      	adds	r3, #48	; 0x30
 800d0f4:	f107 0214 	add.w	r2, r7, #20
 800d0f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0fc:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d06b      	beq.n	800d1e8 <_lv_inv_area+0x1aa>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	4618      	mov	r0, r3
 800d116:	f014 fed8 	bl	8021eca <lv_timer_resume>
        return;
 800d11a:	e065      	b.n	800d1e8 <_lv_inv_area+0x1aa>
    }

    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d008      	beq.n	800d138 <_lv_inv_area+0xfa>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	6812      	ldr	r2, [r2, #0]
 800d130:	f107 010c 	add.w	r1, r7, #12
 800d134:	4610      	mov	r0, r2
 800d136:	4798      	blx	r3

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
 800d138:	2300      	movs	r3, #0
 800d13a:	83fb      	strh	r3, [r7, #30]
 800d13c:	e010      	b.n	800d160 <_lv_inv_area+0x122>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800d13e:	8bfb      	ldrh	r3, [r7, #30]
 800d140:	3306      	adds	r3, #6
 800d142:	00db      	lsls	r3, r3, #3
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	18d1      	adds	r1, r2, r3
 800d148:	f107 030c 	add.w	r3, r7, #12
 800d14c:	2200      	movs	r2, #0
 800d14e:	4618      	mov	r0, r3
 800d150:	f012 fa2a 	bl	801f5a8 <_lv_area_is_in>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d148      	bne.n	800d1ec <_lv_inv_area+0x1ae>
    for(i = 0; i < disp->inv_p; i++) {
 800d15a:	8bfb      	ldrh	r3, [r7, #30]
 800d15c:	3301      	adds	r3, #1
 800d15e:	83fb      	strh	r3, [r7, #30]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d166:	8bfa      	ldrh	r2, [r7, #30]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d3e8      	bcc.n	800d13e <_lv_inv_area+0x100>
    }

    /*Save the area*/
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d172:	2b1f      	cmp	r3, #31
 800d174:	d80d      	bhi.n	800d192 <_lv_inv_area+0x154>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d17c:	3306      	adds	r3, #6
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	4413      	add	r3, r2
 800d184:	f107 020c 	add.w	r2, r7, #12
 800d188:	4611      	mov	r1, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7ff fdde 	bl	800cd4c <lv_area_copy>
 800d190:	e010      	b.n	800d1b4 <_lv_inv_area+0x176>
    }
    else {   /*If no place for the area add the screen*/
        disp->inv_p = 0;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d1a0:	3306      	adds	r3, #6
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f107 0214 	add.w	r2, r7, #20
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff fdcc 	bl	800cd4c <lv_area_copy>
    }
    disp->inv_p++;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d010      	beq.n	800d1ee <_lv_inv_area+0x1b0>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f014 fe7a 	bl	8021eca <lv_timer_resume>
 800d1d6:	e00a      	b.n	800d1ee <_lv_inv_area+0x1b0>
    if(!disp) return;
 800d1d8:	bf00      	nop
 800d1da:	e008      	b.n	800d1ee <_lv_inv_area+0x1b0>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800d1dc:	bf00      	nop
 800d1de:	e006      	b.n	800d1ee <_lv_inv_area+0x1b0>
        return;
 800d1e0:	bf00      	nop
 800d1e2:	e004      	b.n	800d1ee <_lv_inv_area+0x1b0>
    if(suc == false)  return; /*Out of the screen*/
 800d1e4:	bf00      	nop
 800d1e6:	e002      	b.n	800d1ee <_lv_inv_area+0x1b0>
        return;
 800d1e8:	bf00      	nop
 800d1ea:	e000      	b.n	800d1ee <_lv_inv_area+0x1b0>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800d1ec:	bf00      	nop
}
 800d1ee:	3720      	adds	r7, #32
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	af00      	add	r7, sp, #0
    return disp_refr;
 800d1f8:	4b03      	ldr	r3, [pc, #12]	; (800d208 <_lv_refr_get_disp_refreshing+0x14>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	200006fc 	.word	0x200006fc

0800d20c <_lv_disp_refr_timer>:
/**
 * Called periodically to handle the refreshing
 * @param tmr pointer to the timer itself
 */
void _lv_disp_refr_timer(lv_timer_t * tmr)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
    REFR_TRACE("begin");

    uint32_t start = lv_tick_get();
 800d214:	f011 fbce 	bl	801e9b4 <lv_tick_get>
 800d218:	60f8      	str	r0, [r7, #12]
    volatile uint32_t elaps = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	60bb      	str	r3, [r7, #8]

    if(tmr) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d007      	beq.n	800d234 <_lv_disp_refr_timer+0x28>
        disp_refr = tmr->user_data;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	4a38      	ldr	r2, [pc, #224]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d22a:	6013      	str	r3, [r2, #0]
#if LV_USE_PERF_MONITOR == 0 && LV_USE_MEM_MONITOR == 0
        /**
         * Ensure the timer does not run again automatically.
         * This is done before refreshing in case refreshing invalidates something else.
         */
        lv_timer_pause(tmr);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f014 fe3d 	bl	8021eac <lv_timer_pause>
 800d232:	e004      	b.n	800d23e <_lv_disp_refr_timer+0x32>
#endif
    }
    else {
        disp_refr = lv_disp_get_default();
 800d234:	f011 fafc 	bl	801e830 <lv_disp_get_default>
 800d238:	4603      	mov	r3, r0
 800d23a:	4a34      	ldr	r2, [pc, #208]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d23c:	6013      	str	r3, [r2, #0]
    }

    /*Refresh the screen's layout if required*/
    lv_obj_update_layout(disp_refr->act_scr);
 800d23e:	4b33      	ldr	r3, [pc, #204]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	4618      	mov	r0, r3
 800d246:	f7fa fdfb 	bl	8007e40 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800d24a:	4b30      	ldr	r3, [pc, #192]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	695b      	ldr	r3, [r3, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d005      	beq.n	800d260 <_lv_disp_refr_timer+0x54>
 800d254:	4b2d      	ldr	r3, [pc, #180]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	695b      	ldr	r3, [r3, #20]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fa fdf0 	bl	8007e40 <lv_obj_update_layout>

    lv_obj_update_layout(disp_refr->top_layer);
 800d260:	4b2a      	ldr	r3, [pc, #168]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	4618      	mov	r0, r3
 800d268:	f7fa fdea 	bl	8007e40 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800d26c:	4b27      	ldr	r3, [pc, #156]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	4618      	mov	r0, r3
 800d274:	f7fa fde4 	bl	8007e40 <lv_obj_update_layout>

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 800d278:	4b24      	ldr	r3, [pc, #144]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d105      	bne.n	800d28e <_lv_disp_refr_timer+0x82>
        disp_refr->inv_p = 0;
 800d282:	4b22      	ldr	r3, [pc, #136]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2200      	movs	r2, #0
 800d288:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        LV_LOG_WARN("there is no active screen");
        REFR_TRACE("finished");
        return;
 800d28c:	e03a      	b.n	800d304 <_lv_disp_refr_timer+0xf8>
    }

    lv_refr_join_area();
 800d28e:	f000 f841 	bl	800d314 <lv_refr_join_area>

    refr_invalid_areas();
 800d292:	f000 f8d7 	bl	800d444 <refr_invalid_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800d296:	4b1d      	ldr	r3, [pc, #116]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d02a      	beq.n	800d2f8 <_lv_disp_refr_timer+0xec>

        /*Clean up*/
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800d2a2:	4b1a      	ldr	r3, [pc, #104]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3330      	adds	r3, #48	; 0x30
 800d2a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f013 feeb 	bl	8021088 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800d2b2:	4b16      	ldr	r3, [pc, #88]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d2ba:	2120      	movs	r1, #32
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f013 fee3 	bl	8021088 <lv_memset_00>
        disp_refr->inv_p = 0;
 800d2c2:	4b12      	ldr	r3, [pc, #72]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150

        elaps = lv_tick_elaps(start);
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f011 fb8b 	bl	801e9e8 <lv_tick_elaps>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	60bb      	str	r3, [r7, #8]

        /*Call monitor cb if present*/
        if(disp_refr->driver->monitor_cb) {
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00a      	beq.n	800d2f8 <_lv_disp_refr_timer+0xec>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800d2e2:	4b0a      	ldr	r3, [pc, #40]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ea:	4a08      	ldr	r2, [pc, #32]	; (800d30c <_lv_disp_refr_timer+0x100>)
 800d2ec:	6812      	ldr	r2, [r2, #0]
 800d2ee:	6810      	ldr	r0, [r2, #0]
 800d2f0:	68b9      	ldr	r1, [r7, #8]
 800d2f2:	4a07      	ldr	r2, [pc, #28]	; (800d310 <_lv_disp_refr_timer+0x104>)
 800d2f4:	6812      	ldr	r2, [r2, #0]
 800d2f6:	4798      	blx	r3
        }
    }

    lv_mem_buf_free_all();
 800d2f8:	f013 fbec 	bl	8020ad4 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800d2fc:	f010 fed6 	bl	801e0ac <_lv_font_clean_up_fmt_txt>

#if LV_DRAW_COMPLEX
    _lv_draw_mask_cleanup();
 800d300:	f003 f94e 	bl	80105a0 <_lv_draw_mask_cleanup>
                              mon.frag_pct);
    }
#endif

    REFR_TRACE("finished");
}
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	200006fc 	.word	0x200006fc
 800d310:	200006f8 	.word	0x200006f8

0800d314 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800d314:	b5b0      	push	{r4, r5, r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800d31a:	2300      	movs	r3, #0
 800d31c:	60bb      	str	r3, [r7, #8]
 800d31e:	e080      	b.n	800d422 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800d320:	4b47      	ldr	r3, [pc, #284]	; (800d440 <lv_refr_join_area+0x12c>)
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	4413      	add	r3, r2
 800d328:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d173      	bne.n	800d41a <lv_refr_join_area+0x106>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800d332:	2300      	movs	r3, #0
 800d334:	60fb      	str	r3, [r7, #12]
 800d336:	e067      	b.n	800d408 <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800d338:	4b41      	ldr	r3, [pc, #260]	; (800d440 <lv_refr_join_area+0x12c>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	4413      	add	r3, r2
 800d340:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d158      	bne.n	800d3fc <lv_refr_join_area+0xe8>
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d054      	beq.n	800d3fc <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800d352:	4b3b      	ldr	r3, [pc, #236]	; (800d440 <lv_refr_join_area+0x12c>)
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	3306      	adds	r3, #6
 800d35a:	00db      	lsls	r3, r3, #3
 800d35c:	18d0      	adds	r0, r2, r3
 800d35e:	4b38      	ldr	r3, [pc, #224]	; (800d440 <lv_refr_join_area+0x12c>)
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3306      	adds	r3, #6
 800d366:	00db      	lsls	r3, r3, #3
 800d368:	4413      	add	r3, r2
 800d36a:	4619      	mov	r1, r3
 800d36c:	f012 f8ee 	bl	801f54c <_lv_area_is_on>
 800d370:	4603      	mov	r3, r0
 800d372:	f083 0301 	eor.w	r3, r3, #1
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d141      	bne.n	800d400 <lv_refr_join_area+0xec>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800d37c:	4b30      	ldr	r3, [pc, #192]	; (800d440 <lv_refr_join_area+0x12c>)
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	3306      	adds	r3, #6
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	18d1      	adds	r1, r2, r3
 800d388:	4b2d      	ldr	r3, [pc, #180]	; (800d440 <lv_refr_join_area+0x12c>)
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	3306      	adds	r3, #6
 800d390:	00db      	lsls	r3, r3, #3
 800d392:	441a      	add	r2, r3
 800d394:	463b      	mov	r3, r7
 800d396:	4618      	mov	r0, r3
 800d398:	f011 ff73 	bl	801f282 <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800d39c:	463b      	mov	r3, r7
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f011 fe91 	bl	801f0c6 <lv_area_get_size>
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	4b26      	ldr	r3, [pc, #152]	; (800d440 <lv_refr_join_area+0x12c>)
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	3306      	adds	r3, #6
 800d3ae:	00db      	lsls	r3, r3, #3
 800d3b0:	4413      	add	r3, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f011 fe87 	bl	801f0c6 <lv_area_get_size>
 800d3b8:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800d3ba:	4b21      	ldr	r3, [pc, #132]	; (800d440 <lv_refr_join_area+0x12c>)
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3306      	adds	r3, #6
 800d3c2:	00db      	lsls	r3, r3, #3
 800d3c4:	4413      	add	r3, r2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f011 fe7d 	bl	801f0c6 <lv_area_get_size>
 800d3cc:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800d3ce:	442b      	add	r3, r5
 800d3d0:	429c      	cmp	r4, r3
 800d3d2:	d216      	bcs.n	800d402 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800d3d4:	4b1a      	ldr	r3, [pc, #104]	; (800d440 <lv_refr_join_area+0x12c>)
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	3306      	adds	r3, #6
 800d3dc:	00db      	lsls	r3, r3, #3
 800d3de:	4413      	add	r3, r2
 800d3e0:	463a      	mov	r2, r7
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff fcb1 	bl	800cd4c <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800d3ea:	4b15      	ldr	r3, [pc, #84]	; (800d440 <lv_refr_join_area+0x12c>)
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	e002      	b.n	800d402 <lv_refr_join_area+0xee>
                continue;
 800d3fc:	bf00      	nop
 800d3fe:	e000      	b.n	800d402 <lv_refr_join_area+0xee>
                continue;
 800d400:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	3301      	adds	r3, #1
 800d406:	60fb      	str	r3, [r7, #12]
 800d408:	4b0d      	ldr	r3, [pc, #52]	; (800d440 <lv_refr_join_area+0x12c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d410:	461a      	mov	r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	4293      	cmp	r3, r2
 800d416:	d38f      	bcc.n	800d338 <lv_refr_join_area+0x24>
 800d418:	e000      	b.n	800d41c <lv_refr_join_area+0x108>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800d41a:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	3301      	adds	r3, #1
 800d420:	60bb      	str	r3, [r7, #8]
 800d422:	4b07      	ldr	r3, [pc, #28]	; (800d440 <lv_refr_join_area+0x12c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d42a:	461a      	mov	r2, r3
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	4293      	cmp	r3, r2
 800d430:	f4ff af76 	bcc.w	800d320 <lv_refr_join_area+0xc>
            }
        }
    }
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bdb0      	pop	{r4, r5, r7, pc}
 800d43e:	bf00      	nop
 800d440:	200006fc 	.word	0x200006fc

0800d444 <refr_invalid_areas>:

/**
 * Refresh the joined areas
 */
static void refr_invalid_areas(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
    px_num = 0;
 800d44a:	4b4e      	ldr	r3, [pc, #312]	; (800d584 <refr_invalid_areas+0x140>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 800d450:	4b4d      	ldr	r3, [pc, #308]	; (800d588 <refr_invalid_areas+0x144>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 808e 	beq.w	800d57a <refr_invalid_areas+0x136>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800d462:	4b49      	ldr	r3, [pc, #292]	; (800d588 <refr_invalid_areas+0x144>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d46a:	3b01      	subs	r3, #1
 800d46c:	607b      	str	r3, [r7, #4]
 800d46e:	e00e      	b.n	800d48e <refr_invalid_areas+0x4a>
        if(disp_refr->inv_area_joined[i] == 0) {
 800d470:	4b45      	ldr	r3, [pc, #276]	; (800d588 <refr_invalid_areas+0x144>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4413      	add	r3, r2
 800d478:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d102      	bne.n	800d488 <refr_invalid_areas+0x44>
            last_i = i;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	603b      	str	r3, [r7, #0]
            break;
 800d486:	e005      	b.n	800d494 <refr_invalid_areas+0x50>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	3b01      	subs	r3, #1
 800d48c:	607b      	str	r3, [r7, #4]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	daed      	bge.n	800d470 <refr_invalid_areas+0x2c>
        }
    }

    /*Notify the display driven rendering has started*/
    if(disp_refr->driver->render_start_cb) {
 800d494:	4b3c      	ldr	r3, [pc, #240]	; (800d588 <refr_invalid_areas+0x144>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d008      	beq.n	800d4b2 <refr_invalid_areas+0x6e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800d4a0:	4b39      	ldr	r3, [pc, #228]	; (800d588 <refr_invalid_areas+0x144>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a8:	4a37      	ldr	r2, [pc, #220]	; (800d588 <refr_invalid_areas+0x144>)
 800d4aa:	6812      	ldr	r2, [r2, #0]
 800d4ac:	6812      	ldr	r2, [r2, #0]
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	4798      	blx	r3
    }

    disp_refr->driver->draw_buf->last_area = 0;
 800d4b2:	4b35      	ldr	r3, [pc, #212]	; (800d588 <refr_invalid_areas+0x144>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68da      	ldr	r2, [r3, #12]
 800d4ba:	7e13      	ldrb	r3, [r2, #24]
 800d4bc:	f36f 0300 	bfc	r3, #0, #1
 800d4c0:	7613      	strb	r3, [r2, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800d4c2:	4b31      	ldr	r3, [pc, #196]	; (800d588 <refr_invalid_areas+0x144>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	7e13      	ldrb	r3, [r2, #24]
 800d4cc:	f36f 0341 	bfc	r3, #1, #1
 800d4d0:	7613      	strb	r3, [r2, #24]
    disp_refr->rendering_in_progress = true;
 800d4d2:	4b2d      	ldr	r3, [pc, #180]	; (800d588 <refr_invalid_areas+0x144>)
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d4da:	f043 0304 	orr.w	r3, r3, #4
 800d4de:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    for(i = 0; i < disp_refr->inv_p; i++) {
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	607b      	str	r3, [r7, #4]
 800d4e6:	e037      	b.n	800d558 <refr_invalid_areas+0x114>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800d4e8:	4b27      	ldr	r3, [pc, #156]	; (800d588 <refr_invalid_areas+0x144>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d12b      	bne.n	800d552 <refr_invalid_areas+0x10e>

            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d107      	bne.n	800d512 <refr_invalid_areas+0xce>
 800d502:	4b21      	ldr	r3, [pc, #132]	; (800d588 <refr_invalid_areas+0x144>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68da      	ldr	r2, [r3, #12]
 800d50a:	7e13      	ldrb	r3, [r2, #24]
 800d50c:	f043 0301 	orr.w	r3, r3, #1
 800d510:	7613      	strb	r3, [r2, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 800d512:	4b1d      	ldr	r3, [pc, #116]	; (800d588 <refr_invalid_areas+0x144>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68da      	ldr	r2, [r3, #12]
 800d51a:	7e13      	ldrb	r3, [r2, #24]
 800d51c:	f36f 0341 	bfc	r3, #1, #1
 800d520:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800d522:	4b19      	ldr	r3, [pc, #100]	; (800d588 <refr_invalid_areas+0x144>)
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	3306      	adds	r3, #6
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	4413      	add	r3, r2
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 f82c 	bl	800d58c <refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800d534:	4b14      	ldr	r3, [pc, #80]	; (800d588 <refr_invalid_areas+0x144>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	3306      	adds	r3, #6
 800d53c:	00db      	lsls	r3, r3, #3
 800d53e:	4413      	add	r3, r2
 800d540:	4618      	mov	r0, r3
 800d542:	f011 fdc0 	bl	801f0c6 <lv_area_get_size>
 800d546:	4602      	mov	r2, r0
 800d548:	4b0e      	ldr	r3, [pc, #56]	; (800d584 <refr_invalid_areas+0x140>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4413      	add	r3, r2
 800d54e:	4a0d      	ldr	r2, [pc, #52]	; (800d584 <refr_invalid_areas+0x140>)
 800d550:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	3301      	adds	r3, #1
 800d556:	607b      	str	r3, [r7, #4]
 800d558:	4b0b      	ldr	r3, [pc, #44]	; (800d588 <refr_invalid_areas+0x144>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800d560:	461a      	mov	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4293      	cmp	r3, r2
 800d566:	dbbf      	blt.n	800d4e8 <refr_invalid_areas+0xa4>
        }
    }

    disp_refr->rendering_in_progress = false;
 800d568:	4b07      	ldr	r3, [pc, #28]	; (800d588 <refr_invalid_areas+0x144>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d570:	f36f 0382 	bfc	r3, #2, #1
 800d574:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800d578:	e000      	b.n	800d57c <refr_invalid_areas+0x138>
    if(disp_refr->inv_p == 0) return;
 800d57a:	bf00      	nop
}
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200006f8 	.word	0x200006f8
 800d588:	200006fc 	.word	0x200006fc

0800d58c <refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void refr_area(const lv_area_t * area_p)
{
 800d58c:	b590      	push	{r4, r7, lr}
 800d58e:	b08f      	sub	sp, #60	; 0x3c
 800d590:	af02      	add	r7, sp, #8
 800d592:	6078      	str	r0, [r7, #4]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800d594:	4b8e      	ldr	r3, [pc, #568]	; (800d7d0 <refr_area+0x244>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59c:	62bb      	str	r3, [r7, #40]	; 0x28
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800d59e:	4b8c      	ldr	r3, [pc, #560]	; (800d7d0 <refr_area+0x244>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	689a      	ldr	r2, [r3, #8]
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	601a      	str	r2, [r3, #0]

    /*With full refresh just redraw directly into the buffer*/
    /*In direct mode draw directly on the absolute coordinates of the buffer*/
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800d5ac:	4b88      	ldr	r3, [pc, #544]	; (800d7d0 <refr_area+0x244>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	7c1b      	ldrb	r3, [r3, #16]
 800d5b4:	f003 0302 	and.w	r3, r3, #2
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d108      	bne.n	800d5d0 <refr_area+0x44>
 800d5be:	4b84      	ldr	r3, [pc, #528]	; (800d7d0 <refr_area+0x244>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	7c1b      	ldrb	r3, [r3, #16]
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d04f      	beq.n	800d670 <refr_area+0xe4>
        lv_area_t disp_area;
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800d5d0:	4b7f      	ldr	r3, [pc, #508]	; (800d7d0 <refr_area+0x244>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f011 f937 	bl	801e848 <lv_disp_get_hor_res>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	b21c      	sxth	r4, r3
 800d5e4:	4b7a      	ldr	r3, [pc, #488]	; (800d7d0 <refr_area+0x244>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f011 f953 	bl	801e894 <lv_disp_get_ver_res>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	b21b      	sxth	r3, r3
 800d5f8:	f107 000c 	add.w	r0, r7, #12
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	4623      	mov	r3, r4
 800d600:	2200      	movs	r2, #0
 800d602:	2100      	movs	r1, #0
 800d604:	f011 fd28 	bl	801f058 <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 800d608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60a:	f107 020c 	add.w	r2, r7, #12
 800d60e:	605a      	str	r2, [r3, #4]

        if(disp_refr->driver->full_refresh) {
 800d610:	4b6f      	ldr	r3, [pc, #444]	; (800d7d0 <refr_area+0x244>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	7c1b      	ldrb	r3, [r3, #16]
 800d618:	f003 0302 	and.w	r3, r3, #2
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00f      	beq.n	800d642 <refr_area+0xb6>
            disp_refr->driver->draw_buf->last_part = 1;
 800d622:	4b6b      	ldr	r3, [pc, #428]	; (800d7d0 <refr_area+0x244>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68da      	ldr	r2, [r3, #12]
 800d62a:	7e13      	ldrb	r3, [r2, #24]
 800d62c:	f043 0302 	orr.w	r3, r3, #2
 800d630:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800d632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d634:	f107 020c 	add.w	r2, r7, #12
 800d638:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800d63a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d63c:	f000 f8ca 	bl	800d7d4 <refr_area_part>
 800d640:	e0c3      	b.n	800d7ca <refr_area+0x23e>
        }
        else {
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800d642:	4b63      	ldr	r3, [pc, #396]	; (800d7d0 <refr_area+0x244>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	4a61      	ldr	r2, [pc, #388]	; (800d7d0 <refr_area+0x244>)
 800d64c:	6812      	ldr	r2, [r2, #0]
 800d64e:	6812      	ldr	r2, [r2, #0]
 800d650:	68d2      	ldr	r2, [r2, #12]
 800d652:	699b      	ldr	r3, [r3, #24]
 800d654:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d658:	b2d9      	uxtb	r1, r3
 800d65a:	7e13      	ldrb	r3, [r2, #24]
 800d65c:	f361 0341 	bfi	r3, r1, #1, #1
 800d660:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = area_p;
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800d668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d66a:	f000 f8b3 	bl	800d7d4 <refr_area_part>
 800d66e:	e0ac      	b.n	800d7ca <refr_area+0x23e>
        return;
    }

    /*Normal refresh: draw the area in parts*/
    /*Calculate the max row num*/
    lv_coord_t w = lv_area_get_width(area_p);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7ff fb8a 	bl	800cd8a <lv_area_get_width>
 800d676:	4603      	mov	r3, r0
 800d678:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h = lv_area_get_height(area_p);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff fb9c 	bl	800cdb8 <lv_area_get_height>
 800d680:	4603      	mov	r3, r0
 800d682:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800d68a:	4b51      	ldr	r3, [pc, #324]	; (800d7d0 <refr_area+0x244>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4618      	mov	r0, r3
 800d690:	f011 f900 	bl	801e894 <lv_disp_get_ver_res>
 800d694:	4603      	mov	r3, r0
 800d696:	429c      	cmp	r4, r3
 800d698:	db0a      	blt.n	800d6b0 <refr_area+0x124>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800d69a:	4b4d      	ldr	r3, [pc, #308]	; (800d7d0 <refr_area+0x244>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f011 f8f8 	bl	801e894 <lv_disp_get_ver_res>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	b29b      	uxth	r3, r3
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800d6ac:	b21b      	sxth	r3, r3
 800d6ae:	e002      	b.n	800d6b6 <refr_area+0x12a>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d6b6:	847b      	strh	r3, [r7, #34]	; 0x22

    int32_t max_row = get_max_row(disp_refr, w, h);
 800d6b8:	4b45      	ldr	r3, [pc, #276]	; (800d7d0 <refr_area+0x244>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800d6c0:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 fd59 	bl	800e17c <get_max_row>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	61fb      	str	r3, [r7, #28]

    lv_coord_t row;
    lv_coord_t row_last = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_area_t sub_area;
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	885b      	ldrh	r3, [r3, #2]
 800d6d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d6d8:	e042      	b.n	800d760 <refr_area+0x1d4>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6e0:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d6e8:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800d6ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6ec:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = row + max_row - 1;
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6f4:	4413      	add	r3, r2
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	3b01      	subs	r3, #1
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	b21b      	sxth	r3, r3
 800d6fe:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800d700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d702:	f107 0214 	add.w	r2, r7, #20
 800d706:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	f107 0214 	add.w	r2, r7, #20
 800d70e:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800d710:	4b2f      	ldr	r3, [pc, #188]	; (800d7d0 <refr_area+0x244>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	689a      	ldr	r2, [r3, #8]
 800d71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71c:	601a      	str	r2, [r3, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800d71e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d722:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800d726:	429a      	cmp	r2, r3
 800d728:	da01      	bge.n	800d72e <refr_area+0x1a2>
 800d72a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d72c:	837b      	strh	r3, [r7, #26]
        row_last = sub_area.y2;
 800d72e:	8b7b      	ldrh	r3, [r7, #26]
 800d730:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800d732:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800d736:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d107      	bne.n	800d74e <refr_area+0x1c2>
 800d73e:	4b24      	ldr	r3, [pc, #144]	; (800d7d0 <refr_area+0x244>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	7e13      	ldrb	r3, [r2, #24]
 800d748:	f043 0302 	orr.w	r3, r3, #2
 800d74c:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800d74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d750:	f000 f840 	bl	800d7d4 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	b29a      	uxth	r2, r3
 800d758:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d75a:	4413      	add	r3, r2
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d760:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	4413      	add	r3, r2
 800d768:	1e5a      	subs	r2, r3, #1
 800d76a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d76e:	429a      	cmp	r2, r3
 800d770:	ddb3      	ble.n	800d6da <refr_area+0x14e>
    }

    /*If the last y coordinates are not handled yet ...*/
    if(y2 != row_last) {
 800d772:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800d776:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d025      	beq.n	800d7ca <refr_area+0x23e>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d784:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d78c:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800d78e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d790:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = y2;
 800d792:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d794:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	f107 0214 	add.w	r2, r7, #20
 800d79c:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	f107 0214 	add.w	r2, r7, #20
 800d7a4:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800d7a6:	4b0a      	ldr	r3, [pc, #40]	; (800d7d0 <refr_area+0x244>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	689a      	ldr	r2, [r3, #8]
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	601a      	str	r2, [r3, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800d7b4:	4b06      	ldr	r3, [pc, #24]	; (800d7d0 <refr_area+0x244>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68da      	ldr	r2, [r3, #12]
 800d7bc:	7e13      	ldrb	r3, [r2, #24]
 800d7be:	f043 0302 	orr.w	r3, r3, #2
 800d7c2:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800d7c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7c6:	f000 f805 	bl	800d7d4 <refr_area_part>
    }
}
 800d7ca:	3734      	adds	r7, #52	; 0x34
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd90      	pop	{r4, r7, pc}
 800d7d0:	200006fc 	.word	0x200006fc

0800d7d4 <refr_area_part>:

static void refr_area_part(lv_draw_ctx_t * draw_ctx)
{
 800d7d4:	b590      	push	{r4, r7, lr}
 800d7d6:	b09d      	sub	sp, #116	; 0x74
 800d7d8:	af02      	add	r7, sp, #8
 800d7da:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800d7dc:	4b89      	ldr	r3, [pc, #548]	; (800da04 <refr_area_part+0x230>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f011 f8a9 	bl	801e938 <lv_disp_get_draw_buf>
 800d7e6:	65f8      	str	r0, [r7, #92]	; 0x5c

    /* Below the `area_p` area will be redrawn into the draw buffer.
     * In single buffered mode wait here until the buffer is freed.
     * In full double buffered mode wait here while the buffers are swapped and a buffer becomes available*/
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800d7e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7ea:	68da      	ldr	r2, [r3, #12]
 800d7ec:	4b85      	ldr	r3, [pc, #532]	; (800da04 <refr_area_part+0x230>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4b82      	ldr	r3, [pc, #520]	; (800da04 <refr_area_part+0x230>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d802:	fb01 f303 	mul.w	r3, r1, r3
 800d806:	429a      	cmp	r2, r3
 800d808:	bf0c      	ite	eq
 800d80a:	2301      	moveq	r3, #1
 800d80c:	2300      	movne	r3, #0
 800d80e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800d812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d003      	beq.n	800d822 <refr_area_part+0x4e>
 800d81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d01b      	beq.n	800d85a <refr_area_part+0x86>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800d822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d824:	681b      	ldr	r3, [r3, #0]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800d826:	2b00      	cmp	r3, #0
 800d828:	d01b      	beq.n	800d862 <refr_area_part+0x8e>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800d82a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d017      	beq.n	800d862 <refr_area_part+0x8e>
 800d832:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d836:	2b00      	cmp	r3, #0
 800d838:	d013      	beq.n	800d862 <refr_area_part+0x8e>
        while(draw_buf->flushing) {
 800d83a:	e00e      	b.n	800d85a <refr_area_part+0x86>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800d83c:	4b71      	ldr	r3, [pc, #452]	; (800da04 <refr_area_part+0x230>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d844:	2b00      	cmp	r3, #0
 800d846:	d008      	beq.n	800d85a <refr_area_part+0x86>
 800d848:	4b6e      	ldr	r3, [pc, #440]	; (800da04 <refr_area_part+0x230>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d850:	4a6c      	ldr	r2, [pc, #432]	; (800da04 <refr_area_part+0x230>)
 800d852:	6812      	ldr	r2, [r2, #0]
 800d854:	6812      	ldr	r2, [r2, #0]
 800d856:	4610      	mov	r0, r2
 800d858:	4798      	blx	r3
        while(draw_buf->flushing) {
 800d85a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1ec      	bne.n	800d83c <refr_area_part+0x68>
            }
        }
#endif
    }

    lv_obj_t * top_act_scr = NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	667b      	str	r3, [r7, #100]	; 0x64
    lv_obj_t * top_prev_scr = NULL;
 800d866:	2300      	movs	r3, #0
 800d868:	663b      	str	r3, [r7, #96]	; 0x60

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685c      	ldr	r4, [r3, #4]
 800d86e:	4b65      	ldr	r3, [pc, #404]	; (800da04 <refr_area_part+0x230>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4618      	mov	r0, r3
 800d874:	f7f6 fc9d 	bl	80041b2 <lv_disp_get_scr_act>
 800d878:	4603      	mov	r3, r0
 800d87a:	4619      	mov	r1, r3
 800d87c:	4620      	mov	r0, r4
 800d87e:	f000 f8fd 	bl	800da7c <lv_refr_get_top_obj>
 800d882:	6678      	str	r0, [r7, #100]	; 0x64
    if(disp_refr->prev_scr) {
 800d884:	4b5f      	ldr	r3, [pc, #380]	; (800da04 <refr_area_part+0x230>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	695b      	ldr	r3, [r3, #20]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d009      	beq.n	800d8a2 <refr_area_part+0xce>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	685a      	ldr	r2, [r3, #4]
 800d892:	4b5c      	ldr	r3, [pc, #368]	; (800da04 <refr_area_part+0x230>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	4619      	mov	r1, r3
 800d89a:	4610      	mov	r0, r2
 800d89c:	f000 f8ee 	bl	800da7c <lv_refr_get_top_obj>
 800d8a0:	6638      	str	r0, [r7, #96]	; 0x60
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800d8a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f040 8087 	bne.w	800d9b8 <refr_area_part+0x1e4>
 800d8aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f040 8083 	bne.w	800d9b8 <refr_area_part+0x1e4>
        lv_area_t a;
        lv_area_set(&a, 0, 0,
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800d8b2:	4b54      	ldr	r3, [pc, #336]	; (800da04 <refr_area_part+0x230>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f010 ffc6 	bl	801e848 <lv_disp_get_hor_res>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800d8c4:	b21c      	sxth	r4, r3
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800d8c6:	4b4f      	ldr	r3, [pc, #316]	; (800da04 <refr_area_part+0x230>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f010 ffe2 	bl	801e894 <lv_disp_get_ver_res>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800d8d8:	b21b      	sxth	r3, r3
 800d8da:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	4623      	mov	r3, r4
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	f011 fbb7 	bl	801f058 <lv_area_set>
        if(draw_ctx->draw_bg) {
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d020      	beq.n	800d934 <refr_area_part+0x160>
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800d8f2:	f107 0308 	add.w	r3, r7, #8
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f005 f91e 	bl	8012b38 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800d8fc:	4b41      	ldr	r3, [pc, #260]	; (800da04 <refr_area_part+0x230>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d902:	617b      	str	r3, [r7, #20]
            dsc.bg_img_opa = disp_refr->bg_opa;
 800d904:	4b3f      	ldr	r3, [pc, #252]	; (800da04 <refr_area_part+0x230>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d90c:	777b      	strb	r3, [r7, #29]
            dsc.bg_color = disp_refr->bg_color;
 800d90e:	4b3d      	ldr	r3, [pc, #244]	; (800da04 <refr_area_part+0x230>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800d916:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800d918:	4b3a      	ldr	r3, [pc, #232]	; (800da04 <refr_area_part+0x230>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d920:	72fb      	strb	r3, [r7, #11]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d926:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d92a:	f107 0108 	add.w	r1, r7, #8
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	4798      	blx	r3
 800d932:	e041      	b.n	800d9b8 <refr_area_part+0x1e4>
        }
        else if(disp_refr->bg_img) {
 800d934:	4b33      	ldr	r3, [pc, #204]	; (800da04 <refr_area_part+0x230>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d025      	beq.n	800d98a <refr_area_part+0x1b6>
            lv_img_header_t header;
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800d93e:	4b31      	ldr	r3, [pc, #196]	; (800da04 <refr_area_part+0x230>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d944:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d948:	4611      	mov	r1, r2
 800d94a:	4618      	mov	r0, r3
 800d94c:	f005 fb00 	bl	8012f50 <lv_img_decoder_get_info>
 800d950:	4603      	mov	r3, r0
 800d952:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if(res == LV_RES_OK) {
 800d956:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d12c      	bne.n	800d9b8 <refr_area_part+0x1e4>
                lv_draw_img_dsc_t dsc;
                lv_draw_img_dsc_init(&dsc);
 800d95e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d962:	4618      	mov	r0, r3
 800d964:	f001 f997 	bl	800ec96 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800d968:	4b26      	ldr	r3, [pc, #152]	; (800da04 <refr_area_part+0x230>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800d974:	4b23      	ldr	r3, [pc, #140]	; (800da04 <refr_area_part+0x230>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d97e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f001 f9a4 	bl	800ecd0 <lv_draw_img>
 800d988:	e016      	b.n	800d9b8 <refr_area_part+0x1e4>
                LV_LOG_WARN("Can't draw the background image");
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800d98a:	f107 0308 	add.w	r3, r7, #8
 800d98e:	4618      	mov	r0, r3
 800d990:	f005 f8d2 	bl	8012b38 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800d994:	4b1b      	ldr	r3, [pc, #108]	; (800da04 <refr_area_part+0x230>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800d99c:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800d99e:	4b19      	ldr	r3, [pc, #100]	; (800da04 <refr_area_part+0x230>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d9a6:	72fb      	strb	r3, [r7, #11]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685a      	ldr	r2, [r3, #4]
 800d9ac:	f107 0308 	add.w	r3, r7, #8
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f005 f904 	bl	8012bc0 <lv_draw_rect>
        }
    }

    if(disp_refr->draw_prev_over_act) {
 800d9b8:	4b12      	ldr	r3, [pc, #72]	; (800da04 <refr_area_part+0x230>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9c0:	f003 0301 	and.w	r3, r3, #1
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d01e      	beq.n	800da08 <refr_area_part+0x234>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800d9ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d103      	bne.n	800d9d8 <refr_area_part+0x204>
 800d9d0:	4b0c      	ldr	r3, [pc, #48]	; (800da04 <refr_area_part+0x230>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	691b      	ldr	r3, [r3, #16]
 800d9d6:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800d9d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f8b4 	bl	800db48 <refr_obj_and_children>

        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800d9e0:	4b08      	ldr	r3, [pc, #32]	; (800da04 <refr_area_part+0x230>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	695b      	ldr	r3, [r3, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d029      	beq.n	800da3e <refr_area_part+0x26a>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800d9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d103      	bne.n	800d9f8 <refr_area_part+0x224>
 800d9f0:	4b04      	ldr	r3, [pc, #16]	; (800da04 <refr_area_part+0x230>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800d9f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f8a4 	bl	800db48 <refr_obj_and_children>
 800da00:	e01d      	b.n	800da3e <refr_area_part+0x26a>
 800da02:	bf00      	nop
 800da04:	200006fc 	.word	0x200006fc
        }
    }
    else {
        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800da08:	4b1b      	ldr	r3, [pc, #108]	; (800da78 <refr_area_part+0x2a4>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00a      	beq.n	800da28 <refr_area_part+0x254>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800da12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da14:	2b00      	cmp	r3, #0
 800da16:	d103      	bne.n	800da20 <refr_area_part+0x24c>
 800da18:	4b17      	ldr	r3, [pc, #92]	; (800da78 <refr_area_part+0x2a4>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	695b      	ldr	r3, [r3, #20]
 800da1e:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800da20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f890 	bl	800db48 <refr_obj_and_children>
        }

        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800da28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d103      	bne.n	800da36 <refr_area_part+0x262>
 800da2e:	4b12      	ldr	r3, [pc, #72]	; (800da78 <refr_area_part+0x2a4>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800da36:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f885 	bl	800db48 <refr_obj_and_children>
    }

    /*Also refresh top and sys layer unconditionally*/
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800da3e:	4b0e      	ldr	r3, [pc, #56]	; (800da78 <refr_area_part+0x2a4>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4618      	mov	r0, r3
 800da44:	f7f6 fbdf 	bl	8004206 <lv_disp_get_layer_top>
 800da48:	4603      	mov	r3, r0
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f87b 	bl	800db48 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800da52:	4b09      	ldr	r3, [pc, #36]	; (800da78 <refr_area_part+0x2a4>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4618      	mov	r0, r3
 800da58:	f7f6 fbea 	bl	8004230 <lv_disp_get_layer_sys>
 800da5c:	4603      	mov	r3, r0
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f871 	bl	800db48 <refr_obj_and_children>

    draw_buf_flush(disp_refr);
 800da66:	4b04      	ldr	r3, [pc, #16]	; (800da78 <refr_area_part+0x2a4>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 ff22 	bl	800e8b4 <draw_buf_flush>
}
 800da70:	bf00      	nop
 800da72:	376c      	adds	r7, #108	; 0x6c
 800da74:	46bd      	mov	sp, r7
 800da76:	bd90      	pop	{r4, r7, pc}
 800da78:	200006fc 	.word	0x200006fc

0800da7c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800da86:	2300      	movs	r3, #0
 800da88:	61fb      	str	r3, [r7, #28]

    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	3314      	adds	r3, #20
 800da8e:	2200      	movs	r2, #0
 800da90:	4619      	mov	r1, r3
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f011 fd88 	bl	801f5a8 <_lv_area_is_in>
 800da98:	4603      	mov	r3, r0
 800da9a:	f083 0301 	eor.w	r3, r3, #1
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d001      	beq.n	800daa8 <lv_refr_get_top_obj+0x2c>
 800daa4:	2300      	movs	r3, #0
 800daa6:	e04a      	b.n	800db3e <lv_refr_get_top_obj+0xc2>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800daa8:	2101      	movs	r1, #1
 800daaa:	6838      	ldr	r0, [r7, #0]
 800daac:	f7f7 fd45 	bl	800553a <lv_obj_has_flag>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <lv_refr_get_top_obj+0x3e>
 800dab6:	2300      	movs	r3, #0
 800dab8:	e041      	b.n	800db3e <lv_refr_get_top_obj+0xc2>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800daba:	6838      	ldr	r0, [r7, #0]
 800dabc:	f7f9 fd45 	bl	800754a <_lv_obj_get_layer_type>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <lv_refr_get_top_obj+0x4e>
 800dac6:	2300      	movs	r3, #0
 800dac8:	e039      	b.n	800db3e <lv_refr_get_top_obj+0xc2>

    /*If this object is fully cover the draw area then check the children too*/
    lv_cover_check_info_t info;
    info.res = LV_COVER_RES_COVER;
 800daca:	2300      	movs	r3, #0
 800dacc:	723b      	strb	r3, [r7, #8]
    info.area = area_p;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	60fb      	str	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800dad2:	f107 0308 	add.w	r3, r7, #8
 800dad6:	461a      	mov	r2, r3
 800dad8:	2112      	movs	r1, #18
 800dada:	6838      	ldr	r0, [r7, #0]
 800dadc:	f7f6 fbe8 	bl	80042b0 <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800dae0:	7a3b      	ldrb	r3, [r7, #8]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d101      	bne.n	800daea <lv_refr_get_top_obj+0x6e>
 800dae6:	2300      	movs	r3, #0
 800dae8:	e029      	b.n	800db3e <lv_refr_get_top_obj+0xc2>

    int32_t i;
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800daea:	6838      	ldr	r0, [r7, #0]
 800daec:	f7ff f91b 	bl	800cd26 <lv_obj_get_child_cnt>
 800daf0:	4603      	mov	r3, r0
 800daf2:	617b      	str	r3, [r7, #20]
    for(i = child_cnt - 1; i >= 0; i--) {
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	3b01      	subs	r3, #1
 800daf8:	61bb      	str	r3, [r7, #24]
 800dafa:	e012      	b.n	800db22 <lv_refr_get_top_obj+0xa6>
        lv_obj_t * child = obj->spec_attr->children[i];
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	613b      	str	r3, [r7, #16]
        found_p = lv_refr_get_top_obj(area_p, child);
 800db0c:	6939      	ldr	r1, [r7, #16]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff ffb4 	bl	800da7c <lv_refr_get_top_obj>
 800db14:	61f8      	str	r0, [r7, #28]

        /*If a children is ok then break*/
        if(found_p != NULL) {
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d106      	bne.n	800db2a <lv_refr_get_top_obj+0xae>
    for(i = child_cnt - 1; i >= 0; i--) {
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	3b01      	subs	r3, #1
 800db20:	61bb      	str	r3, [r7, #24]
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	2b00      	cmp	r3, #0
 800db26:	dae9      	bge.n	800dafc <lv_refr_get_top_obj+0x80>
 800db28:	e000      	b.n	800db2c <lv_refr_get_top_obj+0xb0>
            break;
 800db2a:	bf00      	nop
        }
    }

    /*If no better children use this object*/
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d104      	bne.n	800db3c <lv_refr_get_top_obj+0xc0>
 800db32:	7a3b      	ldrb	r3, [r7, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <lv_refr_get_top_obj+0xc0>
        found_p = obj;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	61fb      	str	r3, [r7, #28]
    }

    return found_p;
 800db3c:	69fb      	ldr	r3, [r7, #28]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3720      	adds	r7, #32
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
	...

0800db48 <refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void refr_obj_and_children(lv_draw_ctx_t * draw_ctx, lv_obj_t * top_obj)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b088      	sub	sp, #32
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
    /*Normally always will be a top_obj (at least the screen)
     *but in special cases (e.g. if the screen has alpha) it won't.
     *In this case use the screen directly*/
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d105      	bne.n	800db64 <refr_obj_and_children+0x1c>
 800db58:	4b2c      	ldr	r3, [pc, #176]	; (800dc0c <refr_obj_and_children+0xc4>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7f6 fb28 	bl	80041b2 <lv_disp_get_scr_act>
 800db62:	6038      	str	r0, [r7, #0]
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d04c      	beq.n	800dc04 <refr_obj_and_children+0xbc>

    /*Refresh the top object and its children*/
    refr_obj(draw_ctx, top_obj);
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f931 	bl	800ddd4 <refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj*/
    lv_obj_t * parent;
    lv_obj_t * border_p = top_obj;
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	61bb      	str	r3, [r7, #24]

    parent = lv_obj_get_parent(top_obj);
 800db76:	6838      	ldr	r0, [r7, #0]
 800db78:	f7ff f8c4 	bl	800cd04 <lv_obj_get_parent>
 800db7c:	61f8      	str	r0, [r7, #28]

    /*Do until not reach the screen*/
    while(parent != NULL) {
 800db7e:	e03d      	b.n	800dbfc <refr_obj_and_children+0xb4>
        bool go = false;
 800db80:	2300      	movs	r3, #0
 800db82:	75fb      	strb	r3, [r7, #23]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800db84:	69f8      	ldr	r0, [r7, #28]
 800db86:	f7ff f8ce 	bl	800cd26 <lv_obj_get_child_cnt>
 800db8a:	60f8      	str	r0, [r7, #12]
        for(i = 0; i < child_cnt; i++) {
 800db8c:	2300      	movs	r3, #0
 800db8e:	613b      	str	r3, [r7, #16]
 800db90:	e01b      	b.n	800dbca <refr_obj_and_children+0x82>
            lv_obj_t * child = parent->spec_attr->children[i];
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	4413      	add	r3, r2
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	60bb      	str	r3, [r7, #8]
            if(!go) {
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
 800dba4:	f083 0301 	eor.w	r3, r3, #1
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d006      	beq.n	800dbbc <refr_obj_and_children+0x74>
                if(child == border_p) go = true;
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d106      	bne.n	800dbc4 <refr_obj_and_children+0x7c>
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	75fb      	strb	r3, [r7, #23]
 800dbba:	e003      	b.n	800dbc4 <refr_obj_and_children+0x7c>
            }
            else {
                /*Refresh the objects*/
                refr_obj(draw_ctx, child);
 800dbbc:	68b9      	ldr	r1, [r7, #8]
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 f908 	bl	800ddd4 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	613b      	str	r3, [r7, #16]
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d3df      	bcc.n	800db92 <refr_obj_and_children+0x4a>
            }
        }

        /*Call the post draw draw function of the parents of the to object*/
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	2117      	movs	r1, #23
 800dbd6:	69f8      	ldr	r0, [r7, #28]
 800dbd8:	f7f6 fb6a 	bl	80042b0 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	2118      	movs	r1, #24
 800dbe0:	69f8      	ldr	r0, [r7, #28]
 800dbe2:	f7f6 fb65 	bl	80042b0 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	2119      	movs	r1, #25
 800dbea:	69f8      	ldr	r0, [r7, #28]
 800dbec:	f7f6 fb60 	bl	80042b0 <lv_event_send>

        /*The new border will be the last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = parent;
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	61bb      	str	r3, [r7, #24]
        /*Go a level deeper*/
        parent = lv_obj_get_parent(parent);
 800dbf4:	69f8      	ldr	r0, [r7, #28]
 800dbf6:	f7ff f885 	bl	800cd04 <lv_obj_get_parent>
 800dbfa:	61f8      	str	r0, [r7, #28]
    while(parent != NULL) {
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1be      	bne.n	800db80 <refr_obj_and_children+0x38>
 800dc02:	e000      	b.n	800dc06 <refr_obj_and_children+0xbe>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800dc04:	bf00      	nop
    }
}
 800dc06:	3720      	adds	r7, #32
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	200006fc 	.word	0x200006fc

0800dc10 <layer_get_area>:


static lv_res_t layer_get_area(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj, lv_layer_type_t layer_type,
                               lv_area_t * layer_area_out)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b090      	sub	sp, #64	; 0x40
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	603b      	str	r3, [r7, #0]
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	71fb      	strb	r3, [r7, #7]
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800dc20:	68b8      	ldr	r0, [r7, #8]
 800dc22:	f7f9 fc7e 	bl	8007522 <_lv_obj_get_ext_draw_size>
 800dc26:	4603      	mov	r3, r0
 800dc28:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800dc2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dc2e:	4619      	mov	r1, r3
 800dc30:	68b8      	ldr	r0, [r7, #8]
 800dc32:	f7fa f931 	bl	8007e98 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800dc36:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800dc3a:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800dc3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dc42:	4618      	mov	r0, r3
 800dc44:	f011 fa60 	bl	801f108 <lv_area_increase>

    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800dc48:	79fb      	ldrb	r3, [r7, #7]
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	d147      	bne.n	800dcde <layer_get_area+0xce>
        /*Get the transformed area and clip it to the current clip area.
         *This area needs to be updated on the screen.*/
        lv_area_t clip_coords_for_obj;
        lv_area_t tranf_coords = obj_coords_ext;
 800dc4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc52:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800dc56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc5a:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800dc5e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800dc62:	2300      	movs	r3, #0
 800dc64:	2200      	movs	r2, #0
 800dc66:	68b8      	ldr	r0, [r7, #8]
 800dc68:	f7fa fe0a 	bl	8008880 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6899      	ldr	r1, [r3, #8]
 800dc70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dc74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f011 fab1 	bl	801f1e0 <_lv_area_intersect>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	f083 0301 	eor.w	r3, r3, #1
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <layer_get_area+0x7e>
            return LV_RES_INV;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	e046      	b.n	800dd1c <layer_get_area+0x10c>
        }

        /*Transform back (inverse) the transformed area.
         *It will tell which area of the non-transformed widget needs to be redrawn
         *in order to cover transformed area after transformation.*/
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800dc8e:	f107 031c 	add.w	r3, r7, #28
 800dc92:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800dc96:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc9a:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800dc9e:	f107 011c 	add.w	r1, r7, #28
 800dca2:	2301      	movs	r3, #1
 800dca4:	2200      	movs	r2, #0
 800dca6:	68b8      	ldr	r0, [r7, #8]
 800dca8:	f7fa fdea 	bl	8008880 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800dcac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800dcb0:	f107 011c 	add.w	r1, r7, #28
 800dcb4:	f107 031c 	add.w	r3, r7, #28
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f011 fa91 	bl	801f1e0 <_lv_area_intersect>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	f083 0301 	eor.w	r3, r3, #1
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <layer_get_area+0xbe>
            return LV_RES_INV;
 800dcca:	2300      	movs	r3, #0
 800dccc:	e026      	b.n	800dd1c <layer_get_area+0x10c>
        }

        *layer_area_out = inverse_clip_coords_for_obj;
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	f107 031c 	add.w	r3, r7, #28
 800dcd6:	cb03      	ldmia	r3!, {r0, r1}
 800dcd8:	6010      	str	r0, [r2, #0]
 800dcda:	6051      	str	r1, [r2, #4]
 800dcdc:	e01d      	b.n	800dd1a <layer_get_area+0x10a>
    }
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d118      	bne.n	800dd16 <layer_get_area+0x106>
        lv_area_t clip_coords_for_obj;
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6899      	ldr	r1, [r3, #8]
 800dce8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800dcec:	f107 0314 	add.w	r3, r7, #20
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f011 fa75 	bl	801f1e0 <_lv_area_intersect>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	f083 0301 	eor.w	r3, r3, #1
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <layer_get_area+0xf6>
            return LV_RES_INV;
 800dd02:	2300      	movs	r3, #0
 800dd04:	e00a      	b.n	800dd1c <layer_get_area+0x10c>
        }
        *layer_area_out = clip_coords_for_obj;
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	f107 0314 	add.w	r3, r7, #20
 800dd0e:	cb03      	ldmia	r3!, {r0, r1}
 800dd10:	6010      	str	r0, [r2, #0]
 800dd12:	6051      	str	r1, [r2, #4]
 800dd14:	e001      	b.n	800dd1a <layer_get_area+0x10a>
    }
    else {
        LV_LOG_WARN("Unhandled intermediate layer type");
        return LV_RES_INV;
 800dd16:	2300      	movs	r3, #0
 800dd18:	e000      	b.n	800dd1c <layer_get_area+0x10c>
    }

    return LV_RES_OK;
 800dd1a:	2301      	movs	r3, #1
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3740      	adds	r7, #64	; 0x40
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <layer_alpha_test>:

static void layer_alpha_test(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b088      	sub	sp, #32
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
 800dd30:	70fb      	strb	r3, [r7, #3]
    bool has_alpha;
    /*If globally the layer has alpha maybe this smaller section has not (e.g. not on a rounded corner)
     *If turns out that this section has no alpha renderer can choose faster algorithms*/
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800dd32:	78fb      	ldrb	r3, [r7, #3]
 800dd34:	f003 0301 	and.w	r3, r3, #1
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d031      	beq.n	800dda0 <layer_alpha_test+0x7c>
        /*Test for alpha by assuming there is no alpha. If it fails, fall back to rendering with alpha*/
        has_alpha = true;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	77fb      	strb	r3, [r7, #31]
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f103 0008 	add.w	r0, r3, #8
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	3314      	adds	r3, #20
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	f011 fc2b 	bl	801f5a8 <_lv_area_is_in>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d010      	beq.n	800dd7a <layer_alpha_test+0x56>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	753b      	strb	r3, [r7, #20]
            info.area = &layer_ctx->area_act;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	3308      	adds	r3, #8
 800dd60:	61bb      	str	r3, [r7, #24]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800dd62:	f107 0314 	add.w	r3, r7, #20
 800dd66:	461a      	mov	r2, r3
 800dd68:	2112      	movs	r1, #18
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f7f6 faa0 	bl	80042b0 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800dd70:	7d3b      	ldrb	r3, [r7, #20]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <layer_alpha_test+0x56>
 800dd76:	2300      	movs	r3, #0
 800dd78:	77fb      	strb	r3, [r7, #31]
        }

        if(has_alpha) {
 800dd7a:	7ffb      	ldrb	r3, [r7, #31]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d011      	beq.n	800dda4 <layer_alpha_test+0x80>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	4413      	add	r3, r2
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	3b01      	subs	r3, #1
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	b21a      	sxth	r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	81da      	strh	r2, [r3, #14]
 800dd9e:	e001      	b.n	800dda4 <layer_alpha_test+0x80>
        }
    }
    else {
        has_alpha = false;
 800dda0:	2300      	movs	r3, #0
 800dda2:	77fb      	strb	r3, [r7, #31]
    }

    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	dd04      	ble.n	800ddbe <layer_alpha_test+0x9a>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	81da      	strh	r2, [r3, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800ddbe:	7ffb      	ldrb	r3, [r7, #31]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	6879      	ldr	r1, [r7, #4]
 800ddc4:	68b8      	ldr	r0, [r7, #8]
 800ddc6:	f002 f9ef 	bl	80101a8 <lv_draw_layer_adjust>
}
 800ddca:	bf00      	nop
 800ddcc:	3720      	adds	r7, #32
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
	...

0800ddd4 <refr_obj>:


void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800ddd4:	b590      	push	{r4, r7, lr}
 800ddd6:	b08f      	sub	sp, #60	; 0x3c
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800ddde:	2101      	movs	r1, #1
 800dde0:	6838      	ldr	r0, [r7, #0]
 800dde2:	f7f7 fbaa 	bl	800553a <lv_obj_has_flag>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f040 81b8 	bne.w	800e15e <refr_obj+0x38a>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800ddee:	6838      	ldr	r0, [r7, #0]
 800ddf0:	f7f9 fbab 	bl	800754a <_lv_obj_get_layer_type>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800ddfa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d104      	bne.n	800de0c <refr_obj+0x38>
        lv_obj_redraw(draw_ctx, obj);
 800de02:	6839      	ldr	r1, [r7, #0]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff f861 	bl	800cecc <lv_obj_redraw>
 800de0a:	e1af      	b.n	800e16c <refr_obj+0x398>
    }
    else {
        lv_opa_t opa = lv_obj_get_style_opa(obj, 0);
 800de0c:	2100      	movs	r1, #0
 800de0e:	6838      	ldr	r0, [r7, #0]
 800de10:	f7ff f831 	bl	800ce76 <lv_obj_get_style_opa>
 800de14:	4603      	mov	r3, r0
 800de16:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(opa < LV_OPA_MIN) return;
 800de1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800de1e:	2b01      	cmp	r3, #1
 800de20:	f240 819f 	bls.w	800e162 <refr_obj+0x38e>

        lv_area_t layer_area_full;
        lv_res_t res = layer_get_area(draw_ctx, obj, layer_type, &layer_area_full);
 800de24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de28:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800de2c:	6839      	ldr	r1, [r7, #0]
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7ff feee 	bl	800dc10 <layer_get_area>
 800de34:	4603      	mov	r3, r0
 800de36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        if(res != LV_RES_OK) return;
 800de3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800de3e:	2b01      	cmp	r3, #1
 800de40:	f040 8191 	bne.w	800e166 <refr_obj+0x392>

        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800de44:	2301      	movs	r3, #1
 800de46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	f103 0114 	add.w	r1, r3, #20
 800de50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de54:	2200      	movs	r2, #0
 800de56:	4618      	mov	r0, r3
 800de58:	f011 fba6 	bl	801f5a8 <_lv_area_is_in>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d014      	beq.n	800de8c <refr_obj+0xb8>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800de62:	2300      	movs	r3, #0
 800de64:	723b      	strb	r3, [r7, #8]
            info.area = &layer_area_full;
 800de66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de6a:	60fb      	str	r3, [r7, #12]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800de6c:	f107 0308 	add.w	r3, r7, #8
 800de70:	461a      	mov	r2, r3
 800de72:	2112      	movs	r1, #18
 800de74:	6838      	ldr	r0, [r7, #0]
 800de76:	f7f6 fa1b 	bl	80042b0 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800de7a:	7a3b      	ldrb	r3, [r7, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d105      	bne.n	800de8c <refr_obj+0xb8>
 800de80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de84:	f023 0301 	bic.w	r3, r3, #1
 800de88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800de8c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800de90:	2b01      	cmp	r3, #1
 800de92:	d105      	bne.n	800dea0 <refr_obj+0xcc>
 800de94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de98:	f043 0302 	orr.w	r3, r3, #2
 800de9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800dea0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dea8:	4619      	mov	r1, r3
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f002 f926 	bl	80100fc <lv_draw_layer_create>
 800deb0:	6338      	str	r0, [r7, #48]	; 0x30
        if(layer_ctx == NULL) {
 800deb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f000 8158 	beq.w	800e16a <refr_obj+0x396>
            LV_LOG_WARN("Couldn't create a new layer context");
            return;
        }
        lv_point_t pivot = {
            .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 800deba:	2100      	movs	r1, #0
 800debc:	6838      	ldr	r0, [r7, #0]
 800debe:	f7fe ffb6 	bl	800ce2e <lv_obj_get_style_transform_pivot_x>
 800dec2:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800dec4:	84bb      	strh	r3, [r7, #36]	; 0x24
            .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800dec6:	2100      	movs	r1, #0
 800dec8:	6838      	ldr	r0, [r7, #0]
 800deca:	f7fe ffc2 	bl	800ce52 <lv_obj_get_style_transform_pivot_y>
 800dece:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800ded0:	84fb      	strh	r3, [r7, #38]	; 0x26
        };

        if(LV_COORD_IS_PCT(pivot.x)) {
 800ded2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800dedc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dee0:	d12d      	bne.n	800df3e <refr_obj+0x16a>
 800dee2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800dee6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800deea:	b21b      	sxth	r3, r3
 800deec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800def0:	dc25      	bgt.n	800df3e <refr_obj+0x16a>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800def2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800def6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800defa:	b21b      	sxth	r3, r3
 800defc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df00:	dd07      	ble.n	800df12 <refr_obj+0x13e>
 800df02:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800df06:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800df0a:	b21b      	sxth	r3, r3
 800df0c:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800df10:	e005      	b.n	800df1e <refr_obj+0x14a>
 800df12:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800df16:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800df1a:	b21b      	sxth	r3, r3
 800df1c:	461c      	mov	r4, r3
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	3314      	adds	r3, #20
 800df22:	4618      	mov	r0, r3
 800df24:	f7fe ff31 	bl	800cd8a <lv_area_get_width>
 800df28:	4603      	mov	r3, r0
 800df2a:	fb04 f303 	mul.w	r3, r4, r3
 800df2e:	4a91      	ldr	r2, [pc, #580]	; (800e174 <refr_obj+0x3a0>)
 800df30:	fb82 1203 	smull	r1, r2, r2, r3
 800df34:	1152      	asrs	r2, r2, #5
 800df36:	17db      	asrs	r3, r3, #31
 800df38:	1ad3      	subs	r3, r2, r3
 800df3a:	b21b      	sxth	r3, r3
 800df3c:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        if(LV_COORD_IS_PCT(pivot.y)) {
 800df3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df42:	b29b      	uxth	r3, r3
 800df44:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800df48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df4c:	d12d      	bne.n	800dfaa <refr_obj+0x1d6>
 800df4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df52:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800df56:	b21b      	sxth	r3, r3
 800df58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800df5c:	dc25      	bgt.n	800dfaa <refr_obj+0x1d6>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800df5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df62:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800df66:	b21b      	sxth	r3, r3
 800df68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df6c:	dd07      	ble.n	800df7e <refr_obj+0x1aa>
 800df6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df72:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800df76:	b21b      	sxth	r3, r3
 800df78:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800df7c:	e005      	b.n	800df8a <refr_obj+0x1b6>
 800df7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df82:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800df86:	b21b      	sxth	r3, r3
 800df88:	461c      	mov	r4, r3
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	3314      	adds	r3, #20
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fe ff12 	bl	800cdb8 <lv_area_get_height>
 800df94:	4603      	mov	r3, r0
 800df96:	fb04 f303 	mul.w	r3, r4, r3
 800df9a:	4a76      	ldr	r2, [pc, #472]	; (800e174 <refr_obj+0x3a0>)
 800df9c:	fb82 1203 	smull	r1, r2, r2, r3
 800dfa0:	1152      	asrs	r2, r2, #5
 800dfa2:	17db      	asrs	r3, r3, #31
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	b21b      	sxth	r3, r3
 800dfa8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        lv_draw_img_dsc_t draw_dsc;
        lv_draw_img_dsc_init(&draw_dsc);
 800dfaa:	f107 0310 	add.w	r3, r7, #16
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 fe71 	bl	800ec96 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800dfb4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800dfb8:	76bb      	strb	r3, [r7, #26]
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800dfba:	2100      	movs	r1, #0
 800dfbc:	6838      	ldr	r0, [r7, #0]
 800dfbe:	f7fe ff24 	bl	800ce0a <lv_obj_get_style_transform_angle>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	823b      	strh	r3, [r7, #16]
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800dfc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dfca:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800dfce:	dd08      	ble.n	800dfe2 <refr_obj+0x20e>
 800dfd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	b21b      	sxth	r3, r3
 800dfde:	823b      	strh	r3, [r7, #16]
 800dfe0:	e00b      	b.n	800dffa <refr_obj+0x226>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800dfe2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	da07      	bge.n	800dffa <refr_obj+0x226>
 800dfea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	b21b      	sxth	r3, r3
 800dff8:	823b      	strh	r3, [r7, #16]

        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800dffa:	2100      	movs	r1, #0
 800dffc:	6838      	ldr	r0, [r7, #0]
 800dffe:	f7fe fef2 	bl	800cde6 <lv_obj_get_style_transform_zoom>
 800e002:	4603      	mov	r3, r0
 800e004:	b29b      	uxth	r3, r3
 800e006:	827b      	strh	r3, [r7, #18]
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800e008:	2100      	movs	r1, #0
 800e00a:	6838      	ldr	r0, [r7, #0]
 800e00c:	f7fe ff45 	bl	800ce9a <lv_obj_get_style_blend_mode>
 800e010:	4603      	mov	r3, r0
 800e012:	f003 030f 	and.w	r3, r3, #15
 800e016:	b2da      	uxtb	r2, r3
 800e018:	7efb      	ldrb	r3, [r7, #27]
 800e01a:	f362 0303 	bfi	r3, r2, #0, #4
 800e01e:	76fb      	strb	r3, [r7, #27]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800e020:	4b55      	ldr	r3, [pc, #340]	; (800e178 <refr_obj+0x3a4>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	7c1b      	ldrb	r3, [r3, #16]
 800e028:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e032:	f362 0300 	bfi	r3, r2, #0, #1
 800e036:	f887 3020 	strb.w	r3, [r7, #32]

        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800e03a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e03e:	f003 0302 	and.w	r3, r3, #2
 800e042:	2b00      	cmp	r3, #0
 800e044:	d07d      	beq.n	800e142 <refr_obj+0x36e>
            layer_ctx->area_act = layer_ctx->area_full;
 800e046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e04a:	3308      	adds	r3, #8
 800e04c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e050:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800e054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e056:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e062:	b29b      	uxth	r3, r3
 800e064:	4413      	add	r3, r2
 800e066:	b29b      	uxth	r3, r3
 800e068:	3b01      	subs	r3, #1
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	b21a      	sxth	r2, r3
 800e06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e070:	81da      	strh	r2, [r3, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e07e:	429a      	cmp	r2, r3
 800e080:	dd5f      	ble.n	800e142 <refr_obj+0x36e>
 800e082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e084:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08a:	81da      	strh	r2, [r3, #14]
        }

        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800e08c:	e059      	b.n	800e142 <refr_obj+0x36e>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800e08e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e092:	f003 0302 	and.w	r3, r3, #2
 800e096:	2b00      	cmp	r3, #0
 800e098:	d006      	beq.n	800e0a8 <refr_obj+0x2d4>
                layer_alpha_test(obj, draw_ctx, layer_ctx, flags);
 800e09a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e09e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0a0:	6879      	ldr	r1, [r7, #4]
 800e0a2:	6838      	ldr	r0, [r7, #0]
 800e0a4:	f7ff fe3e 	bl	800dd24 <layer_alpha_test>
            }

            lv_obj_redraw(draw_ctx, obj);
 800e0a8:	6839      	ldr	r1, [r7, #0]
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7fe ff0e 	bl	800cecc <lv_obj_redraw>

            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	4413      	add	r3, r2
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	b21b      	sxth	r3, r3
 800e0d2:	82bb      	strh	r3, [r7, #20]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	4413      	add	r3, r2
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	1ad3      	subs	r3, r2, r3
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	b21b      	sxth	r3, r3
 800e0f6:	82fb      	strh	r3, [r7, #22]

            /*With LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE it should also go the next chunk*/
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800e0f8:	f107 0310 	add.w	r3, r7, #16
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f002 f866 	bl	80101d2 <lv_draw_layer_blend>

            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800e106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e10a:	f003 0302 	and.w	r3, r3, #2
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d01f      	beq.n	800e152 <refr_obj+0x37e>

            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e118:	b29b      	uxth	r3, r3
 800e11a:	3301      	adds	r3, #1
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	b21a      	sxth	r2, r3
 800e120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e122:	815a      	strh	r2, [r3, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800e124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e126:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e132:	b29b      	uxth	r3, r3
 800e134:	4413      	add	r3, r2
 800e136:	b29b      	uxth	r3, r3
 800e138:	3b01      	subs	r3, #1
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	b21a      	sxth	r2, r3
 800e13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e140:	81da      	strh	r2, [r3, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800e148:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800e14c:	429a      	cmp	r2, r3
 800e14e:	dd9e      	ble.n	800e08e <refr_obj+0x2ba>
 800e150:	e000      	b.n	800e154 <refr_obj+0x380>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800e152:	bf00      	nop
        }

        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800e154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f002 f84f 	bl	80101fa <lv_draw_layer_destroy>
 800e15c:	e006      	b.n	800e16c <refr_obj+0x398>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800e15e:	bf00      	nop
 800e160:	e004      	b.n	800e16c <refr_obj+0x398>
        if(opa < LV_OPA_MIN) return;
 800e162:	bf00      	nop
 800e164:	e002      	b.n	800e16c <refr_obj+0x398>
        if(res != LV_RES_OK) return;
 800e166:	bf00      	nop
 800e168:	e000      	b.n	800e16c <refr_obj+0x398>
            return;
 800e16a:	bf00      	nop
    }
}
 800e16c:	373c      	adds	r7, #60	; 0x3c
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd90      	pop	{r4, r7, pc}
 800e172:	bf00      	nop
 800e174:	51eb851f 	.word	0x51eb851f
 800e178:	200006fc 	.word	0x200006fc

0800e17c <get_max_row>:


static uint32_t get_max_row(lv_disp_t * disp, lv_coord_t area_w, lv_coord_t area_h)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	807b      	strh	r3, [r7, #2]
 800e188:	4613      	mov	r3, r2
 800e18a:	803b      	strh	r3, [r7, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	68da      	ldr	r2, [r3, #12]
 800e194:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e198:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19c:	617b      	str	r3, [r7, #20]

    if(max_row > area_h) max_row = area_h;
 800e19e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e1a2:	697a      	ldr	r2, [r7, #20]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	dd02      	ble.n	800e1ae <get_max_row+0x32>
 800e1a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e1ac:	617b      	str	r3, [r7, #20]

    /*Round down the lines of draw_buf if rounding is added*/
    if(disp_refr->driver->rounder_cb) {
 800e1ae:	4b21      	ldr	r3, [pc, #132]	; (800e234 <get_max_row+0xb8>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d037      	beq.n	800e22a <get_max_row+0xae>
        lv_area_t tmp;
        tmp.x1 = 0;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	813b      	strh	r3, [r7, #8]
        tmp.x2 = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	81bb      	strh	r3, [r7, #12]
        tmp.y1 = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	817b      	strh	r3, [r7, #10]

        lv_coord_t h_tmp = max_row;
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	827b      	strh	r3, [r7, #18]
        do {
            tmp.y2 = h_tmp - 1;
 800e1ca:	8a7b      	ldrh	r3, [r7, #18]
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	b21b      	sxth	r3, r3
 800e1d2:	81fb      	strh	r3, [r7, #14]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800e1d4:	4b17      	ldr	r3, [pc, #92]	; (800e234 <get_max_row+0xb8>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	4a15      	ldr	r2, [pc, #84]	; (800e234 <get_max_row+0xb8>)
 800e1de:	6812      	ldr	r2, [r2, #0]
 800e1e0:	6812      	ldr	r2, [r2, #0]
 800e1e2:	f107 0108 	add.w	r1, r7, #8
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	4798      	blx	r3

            /*If this height fits into `max_row` then fine*/
            if(lv_area_get_height(&tmp) <= max_row) break;
 800e1ea:	f107 0308 	add.w	r3, r7, #8
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe fde2 	bl	800cdb8 <lv_area_get_height>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	da0a      	bge.n	800e214 <get_max_row+0x98>

            /*Decrement the height of the area until it fits into `max_row` after rounding*/
            h_tmp--;
 800e1fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e202:	b29b      	uxth	r3, r3
 800e204:	3b01      	subs	r3, #1
 800e206:	b29b      	uxth	r3, r3
 800e208:	827b      	strh	r3, [r7, #18]
        } while(h_tmp > 0);
 800e20a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	dcdb      	bgt.n	800e1ca <get_max_row+0x4e>
 800e212:	e000      	b.n	800e216 <get_max_row+0x9a>
            if(lv_area_get_height(&tmp) <= max_row) break;
 800e214:	bf00      	nop

        if(h_tmp <= 0) {
 800e216:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	dc01      	bgt.n	800e222 <get_max_row+0xa6>
            LV_LOG_WARN("Can't set draw_buf height using the round function. (Wrong round_cb or to "
                        "small draw_buf)");
            return 0;
 800e21e:	2300      	movs	r3, #0
 800e220:	e004      	b.n	800e22c <get_max_row+0xb0>
        }
        else {
            max_row = tmp.y2 + 1;
 800e222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e226:	3301      	adds	r3, #1
 800e228:	617b      	str	r3, [r7, #20]
        }
    }

    return max_row;
 800e22a:	697b      	ldr	r3, [r7, #20]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3718      	adds	r7, #24
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	200006fc 	.word	0x200006fc

0800e238 <draw_buf_rotate_180>:

static void draw_buf_rotate_180(lv_disp_drv_t * drv, lv_area_t * area, lv_color_t * color_p)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08a      	sub	sp, #40	; 0x28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
    lv_coord_t area_w = lv_area_get_width(area);
 800e244:	68b8      	ldr	r0, [r7, #8]
 800e246:	f7fe fda0 	bl	800cd8a <lv_area_get_width>
 800e24a:	4603      	mov	r3, r0
 800e24c:	83fb      	strh	r3, [r7, #30]
    lv_coord_t area_h = lv_area_get_height(area);
 800e24e:	68b8      	ldr	r0, [r7, #8]
 800e250:	f7fe fdb2 	bl	800cdb8 <lv_area_get_height>
 800e254:	4603      	mov	r3, r0
 800e256:	83bb      	strh	r3, [r7, #28]
    uint32_t total = area_w * area_h;
 800e258:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e25c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800e260:	fb02 f303 	mul.w	r3, r2, r3
 800e264:	61bb      	str	r3, [r7, #24]
    /*Swap the beginning and end values*/
    lv_color_t tmp;
    uint32_t i = total - 1, j = 0;
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	3b01      	subs	r3, #1
 800e26a:	627b      	str	r3, [r7, #36]	; 0x24
 800e26c:	2300      	movs	r3, #0
 800e26e:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800e270:	e017      	b.n	800e2a2 <draw_buf_rotate_180+0x6a>
        tmp = color_p[i];
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	4413      	add	r3, r2
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	753b      	strb	r3, [r7, #20]
        color_p[i] = color_p[j];
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	441a      	add	r2, r3
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	440b      	add	r3, r1
 800e288:	7812      	ldrb	r2, [r2, #0]
 800e28a:	701a      	strb	r2, [r3, #0]
        color_p[j] = tmp;
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	6a3b      	ldr	r3, [r7, #32]
 800e290:	4413      	add	r3, r2
 800e292:	7d3a      	ldrb	r2, [r7, #20]
 800e294:	701a      	strb	r2, [r3, #0]
        i--;
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e298:	3b01      	subs	r3, #1
 800e29a:	627b      	str	r3, [r7, #36]	; 0x24
        j++;
 800e29c:	6a3b      	ldr	r3, [r7, #32]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800e2a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d8e3      	bhi.n	800e272 <draw_buf_rotate_180+0x3a>
    }
    lv_coord_t tmp_coord;
    tmp_coord = area->y2;
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	88db      	ldrh	r3, [r3, #6]
 800e2ae:	82fb      	strh	r3, [r7, #22]
    area->y2 = drv->ver_res - area->y1 - 1;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	3b01      	subs	r3, #1
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	b21a      	sxth	r2, r3
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	80da      	strh	r2, [r3, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	8afb      	ldrh	r3, [r7, #22]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	b21a      	sxth	r2, r3
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	805a      	strh	r2, [r3, #2]
    tmp_coord = area->x2;
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	889b      	ldrh	r3, [r3, #4]
 800e2ea:	82fb      	strh	r3, [r7, #22]
    area->x2 = drv->hor_res - area->x1 - 1;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	3b01      	subs	r3, #1
 800e302:	b29b      	uxth	r3, r3
 800e304:	b21a      	sxth	r2, r3
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	809a      	strh	r2, [r3, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e310:	b29a      	uxth	r2, r3
 800e312:	8afb      	ldrh	r3, [r7, #22]
 800e314:	1ad3      	subs	r3, r2, r3
 800e316:	b29b      	uxth	r3, r3
 800e318:	3b01      	subs	r3, #1
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	b21a      	sxth	r2, r3
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	801a      	strh	r2, [r3, #0]
}
 800e322:	bf00      	nop
 800e324:	3728      	adds	r7, #40	; 0x28
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <draw_buf_rotate_90>:

static LV_ATTRIBUTE_FAST_MEM void draw_buf_rotate_90(bool invert_i, lv_coord_t area_w, lv_coord_t area_h,
                                                     lv_color_t * orig_color_p, lv_color_t * rot_buf)
{
 800e32a:	b480      	push	{r7}
 800e32c:	b08b      	sub	sp, #44	; 0x2c
 800e32e:	af00      	add	r7, sp, #0
 800e330:	607b      	str	r3, [r7, #4]
 800e332:	4603      	mov	r3, r0
 800e334:	73fb      	strb	r3, [r7, #15]
 800e336:	460b      	mov	r3, r1
 800e338:	81bb      	strh	r3, [r7, #12]
 800e33a:	4613      	mov	r3, r2
 800e33c:	817b      	strh	r3, [r7, #10]

    uint32_t invert = (area_w * area_h) - 1;
 800e33e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e342:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e346:	fb02 f303 	mul.w	r3, r2, r3
 800e34a:	3b01      	subs	r3, #1
 800e34c:	61bb      	str	r3, [r7, #24]
    uint32_t initial_i = ((area_w - 1) * area_h);
 800e34e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e352:	3b01      	subs	r3, #1
 800e354:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e358:	fb02 f303 	mul.w	r3, r2, r3
 800e35c:	617b      	str	r3, [r7, #20]
    for(lv_coord_t y = 0; y < area_h; y++) {
 800e35e:	2300      	movs	r3, #0
 800e360:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e362:	e036      	b.n	800e3d2 <draw_buf_rotate_90+0xa8>
        uint32_t i = initial_i + y;
 800e364:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e368:	697a      	ldr	r2, [r7, #20]
 800e36a:	4413      	add	r3, r2
 800e36c:	623b      	str	r3, [r7, #32]
        if(invert_i)
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d003      	beq.n	800e37c <draw_buf_rotate_90+0x52>
            i = invert - i;
 800e374:	69ba      	ldr	r2, [r7, #24]
 800e376:	6a3b      	ldr	r3, [r7, #32]
 800e378:	1ad3      	subs	r3, r2, r3
 800e37a:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800e37c:	2300      	movs	r3, #0
 800e37e:	83fb      	strh	r3, [r7, #30]
 800e380:	e01b      	b.n	800e3ba <draw_buf_rotate_90+0x90>
            rot_buf[i] = *(orig_color_p++);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	607a      	str	r2, [r7, #4]
 800e388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e38a:	6a3a      	ldr	r2, [r7, #32]
 800e38c:	440a      	add	r2, r1
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	7013      	strb	r3, [r2, #0]
            if(invert_i)
 800e392:	7bfb      	ldrb	r3, [r7, #15]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d005      	beq.n	800e3a4 <draw_buf_rotate_90+0x7a>
                i += area_h;
 800e398:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e39c:	6a3a      	ldr	r2, [r7, #32]
 800e39e:	4413      	add	r3, r2
 800e3a0:	623b      	str	r3, [r7, #32]
 800e3a2:	e004      	b.n	800e3ae <draw_buf_rotate_90+0x84>
            else
                i -= area_h;
 800e3a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3a8:	6a3a      	ldr	r2, [r7, #32]
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800e3ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	83fb      	strh	r3, [r7, #30]
 800e3ba:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800e3be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	dbdd      	blt.n	800e382 <draw_buf_rotate_90+0x58>
    for(lv_coord_t y = 0; y < area_h; y++) {
 800e3c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e3d2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800e3d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	dbc2      	blt.n	800e364 <draw_buf_rotate_90+0x3a>
        }
    }
}
 800e3de:	bf00      	nop
 800e3e0:	bf00      	nop
 800e3e2:	372c      	adds	r7, #44	; 0x2c
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <draw_buf_rotate4>:

/**
 * Helper function for draw_buf_rotate_90_sqr. Given a list of four numbers, rotate the entire list to the left.
 */
static inline void draw_buf_rotate4(lv_color_t * a, lv_color_t * b, lv_color_t * c, lv_color_t * d)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b087      	sub	sp, #28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	603b      	str	r3, [r7, #0]
    lv_color_t tmp;
    tmp = *a;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	753b      	strb	r3, [r7, #20]
    *a = *b;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	68ba      	ldr	r2, [r7, #8]
 800e404:	7812      	ldrb	r2, [r2, #0]
 800e406:	701a      	strb	r2, [r3, #0]
    *b = *c;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	7812      	ldrb	r2, [r2, #0]
 800e40e:	701a      	strb	r2, [r3, #0]
    *c = *d;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	7812      	ldrb	r2, [r2, #0]
 800e416:	701a      	strb	r2, [r3, #0]
    *d = tmp;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	7d3a      	ldrb	r2, [r7, #20]
 800e41c:	701a      	strb	r2, [r3, #0]
}
 800e41e:	bf00      	nop
 800e420:	371c      	adds	r7, #28
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr

0800e42a <draw_buf_rotate_90_sqr>:
/**
 * Rotate a square image 90/270 degrees in place.
 * @note inspired by https://stackoverflow.com/a/43694906
 */
static void draw_buf_rotate_90_sqr(bool is_270, lv_coord_t w, lv_color_t * color_p)
{
 800e42a:	b590      	push	{r4, r7, lr}
 800e42c:	b085      	sub	sp, #20
 800e42e:	af00      	add	r7, sp, #0
 800e430:	4603      	mov	r3, r0
 800e432:	603a      	str	r2, [r7, #0]
 800e434:	71fb      	strb	r3, [r7, #7]
 800e436:	460b      	mov	r3, r1
 800e438:	80bb      	strh	r3, [r7, #4]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800e43a:	2300      	movs	r3, #0
 800e43c:	81fb      	strh	r3, [r7, #14]
 800e43e:	e092      	b.n	800e566 <draw_buf_rotate_90_sqr+0x13c>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800e440:	2300      	movs	r3, #0
 800e442:	81bb      	strh	r3, [r7, #12]
 800e444:	e07d      	b.n	800e542 <draw_buf_rotate_90_sqr+0x118>
            lv_coord_t inv_i = (w - 1) - i;
 800e446:	88ba      	ldrh	r2, [r7, #4]
 800e448:	89fb      	ldrh	r3, [r7, #14]
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	3b01      	subs	r3, #1
 800e450:	b29b      	uxth	r3, r3
 800e452:	817b      	strh	r3, [r7, #10]
            lv_coord_t inv_j = (w - 1) - j;
 800e454:	88ba      	ldrh	r2, [r7, #4]
 800e456:	89bb      	ldrh	r3, [r7, #12]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	3b01      	subs	r3, #1
 800e45e:	b29b      	uxth	r3, r3
 800e460:	813b      	strh	r3, [r7, #8]
            if(is_270) {
 800e462:	79fb      	ldrb	r3, [r7, #7]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d033      	beq.n	800e4d0 <draw_buf_rotate_90_sqr+0xa6>
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800e468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e46c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e470:	fb03 f202 	mul.w	r2, r3, r2
 800e474:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e478:	4413      	add	r3, r2
 800e47a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	1898      	adds	r0, r3, r2
                    &color_p[inv_j * w + i],
 800e480:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e484:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e488:	fb03 f202 	mul.w	r2, r3, r2
 800e48c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e490:	4413      	add	r3, r2
 800e492:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800e498:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e49c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e4a0:	fb03 f202 	mul.w	r2, r3, r2
 800e4a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	189c      	adds	r4, r3, r2
                    &color_p[j * w + inv_i]
 800e4b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e4b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e4b8:	fb03 f202 	mul.w	r2, r3, r2
 800e4bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	f7ff ff8f 	bl	800e3ec <draw_buf_rotate4>
 800e4ce:	e032      	b.n	800e536 <draw_buf_rotate_90_sqr+0x10c>
                );
            }
            else {
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800e4d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e4d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e4d8:	fb03 f202 	mul.w	r2, r3, r2
 800e4dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	1898      	adds	r0, r3, r2
                    &color_p[j * w + inv_i],
 800e4e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e4ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e4f0:	fb03 f202 	mul.w	r2, r3, r2
 800e4f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800e500:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e504:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e508:	fb03 f202 	mul.w	r2, r3, r2
 800e50c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e510:	4413      	add	r3, r2
 800e512:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	189c      	adds	r4, r3, r2
                    &color_p[inv_j * w + i]
 800e518:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e51c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e520:	fb03 f202 	mul.w	r2, r3, r2
 800e524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e528:	4413      	add	r3, r2
 800e52a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	4413      	add	r3, r2
 800e530:	4622      	mov	r2, r4
 800e532:	f7ff ff5b 	bl	800e3ec <draw_buf_rotate4>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800e536:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	3301      	adds	r3, #1
 800e53e:	b29b      	uxth	r3, r3
 800e540:	81bb      	strh	r3, [r7, #12]
 800e542:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e546:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e54a:	3301      	adds	r3, #1
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	da00      	bge.n	800e552 <draw_buf_rotate_90_sqr+0x128>
 800e550:	3301      	adds	r3, #1
 800e552:	105b      	asrs	r3, r3, #1
 800e554:	429a      	cmp	r2, r3
 800e556:	f6ff af76 	blt.w	800e446 <draw_buf_rotate_90_sqr+0x1c>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800e55a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e55e:	b29b      	uxth	r3, r3
 800e560:	3301      	adds	r3, #1
 800e562:	b29b      	uxth	r3, r3
 800e564:	81fb      	strh	r3, [r7, #14]
 800e566:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	da00      	bge.n	800e570 <draw_buf_rotate_90_sqr+0x146>
 800e56e:	3301      	adds	r3, #1
 800e570:	105b      	asrs	r3, r3, #1
 800e572:	b21b      	sxth	r3, r3
 800e574:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e578:	429a      	cmp	r2, r3
 800e57a:	f6ff af61 	blt.w	800e440 <draw_buf_rotate_90_sqr+0x16>
                );
            }

        }
    }
}
 800e57e:	bf00      	nop
 800e580:	bf00      	nop
 800e582:	3714      	adds	r7, #20
 800e584:	46bd      	mov	sp, r7
 800e586:	bd90      	pop	{r4, r7, pc}

0800e588 <draw_buf_rotate>:

/**
 * Rotate the draw_buf to the display's native orientation.
 */
static void draw_buf_rotate(lv_area_t * area, lv_color_t * color_p)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08a      	sub	sp, #40	; 0x28
 800e58c:	af02      	add	r7, sp, #8
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
    lv_disp_drv_t * drv = disp_refr->driver;
 800e592:	4b8e      	ldr	r3, [pc, #568]	; (800e7cc <draw_buf_rotate+0x244>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	617b      	str	r3, [r7, #20]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800e59a:	4b8c      	ldr	r3, [pc, #560]	; (800e7cc <draw_buf_rotate+0x244>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	7c1b      	ldrb	r3, [r3, #16]
 800e5a2:	f003 0302 	and.w	r3, r3, #2
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d007      	beq.n	800e5bc <draw_buf_rotate+0x34>
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	7c1b      	ldrb	r3, [r3, #16]
 800e5b0:	f003 0304 	and.w	r3, r3, #4
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f040 8178 	bne.w	800e8ac <draw_buf_rotate+0x324>
        LV_LOG_ERROR("cannot rotate a full refreshed display!");
        return;
    }
    if(drv->rotated == LV_DISP_ROT_180) {
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	7c1b      	ldrb	r3, [r3, #16]
 800e5c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	2b20      	cmp	r3, #32
 800e5c8:	d10a      	bne.n	800e5e0 <draw_buf_rotate+0x58>
        draw_buf_rotate_180(drv, area, color_p);
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	6879      	ldr	r1, [r7, #4]
 800e5ce:	6978      	ldr	r0, [r7, #20]
 800e5d0:	f7ff fe32 	bl	800e238 <draw_buf_rotate_180>
        call_flush_cb(drv, area, color_p);
 800e5d4:	683a      	ldr	r2, [r7, #0]
 800e5d6:	6879      	ldr	r1, [r7, #4]
 800e5d8:	6978      	ldr	r0, [r7, #20]
 800e5da:	f000 fa2b 	bl	800ea34 <call_flush_cb>
 800e5de:	e166      	b.n	800e8ae <draw_buf_rotate+0x326>
    }
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	7c1b      	ldrb	r3, [r3, #16]
 800e5e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	2b10      	cmp	r3, #16
 800e5ec:	d007      	beq.n	800e5fe <draw_buf_rotate+0x76>
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	7c1b      	ldrb	r3, [r3, #16]
 800e5f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	2b30      	cmp	r3, #48	; 0x30
 800e5fa:	f040 8158 	bne.w	800e8ae <draw_buf_rotate+0x326>
        /*Allocate a temporary buffer to store rotated image*/
        lv_color_t * rot_buf = NULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	61fb      	str	r3, [r7, #28]
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800e602:	4b72      	ldr	r3, [pc, #456]	; (800e7cc <draw_buf_rotate+0x244>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4618      	mov	r0, r3
 800e608:	f010 f996 	bl	801e938 <lv_disp_get_draw_buf>
 800e60c:	6138      	str	r0, [r7, #16]
        lv_coord_t area_w = lv_area_get_width(area);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7fe fbbb 	bl	800cd8a <lv_area_get_width>
 800e614:	4603      	mov	r3, r0
 800e616:	81fb      	strh	r3, [r7, #14]
        lv_coord_t area_h = lv_area_get_height(area);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7fe fbcd 	bl	800cdb8 <lv_area_get_height>
 800e61e:	4603      	mov	r3, r0
 800e620:	81bb      	strh	r3, [r7, #12]
        /*Determine the maximum number of rows that can be rotated at a time*/
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800e622:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e626:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e62e:	b21b      	sxth	r3, r3
 800e630:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e634:	4293      	cmp	r3, r2
 800e636:	bfa8      	it	ge
 800e638:	4613      	movge	r3, r2
 800e63a:	817b      	strh	r3, [r7, #10]
        lv_coord_t init_y_off;
        init_y_off = area->y1;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	885b      	ldrh	r3, [r3, #2]
 800e640:	813b      	strh	r3, [r7, #8]
        if(drv->rotated == LV_DISP_ROT_90) {
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	7c1b      	ldrb	r3, [r3, #16]
 800e646:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b10      	cmp	r3, #16
 800e64e:	d11b      	bne.n	800e688 <draw_buf_rotate+0x100>
            area->y2 = drv->ver_res - area->x1 - 1;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e656:	b29a      	uxth	r2, r3
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	b29b      	uxth	r3, r3
 800e664:	3b01      	subs	r3, #1
 800e666:	b29b      	uxth	r3, r3
 800e668:	b21a      	sxth	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	80da      	strh	r2, [r3, #6]
            area->y1 = area->y2 - area_w + 1;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e674:	b29a      	uxth	r2, r3
 800e676:	89fb      	ldrh	r3, [r7, #14]
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	3301      	adds	r3, #1
 800e67e:	b29b      	uxth	r3, r3
 800e680:	b21a      	sxth	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	805a      	strh	r2, [r3, #2]
 800e686:	e010      	b.n	800e6aa <draw_buf_rotate+0x122>
        }
        else {
            area->y1 = area->x1;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	805a      	strh	r2, [r3, #2]
            area->y2 = area->y1 + area_w - 1;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e698:	b29a      	uxth	r2, r3
 800e69a:	89fb      	ldrh	r3, [r7, #14]
 800e69c:	4413      	add	r3, r2
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	b21a      	sxth	r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	80da      	strh	r2, [r3, #6]
        }

        /*Rotate the screen in chunks, flushing after each one*/
        lv_coord_t row = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800e6ae:	e0ef      	b.n	800e890 <draw_buf_rotate+0x308>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800e6b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e6b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e6b8:	1ad2      	subs	r2, r2, r3
 800e6ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	bfa8      	it	ge
 800e6c2:	4613      	movge	r3, r2
 800e6c4:	833b      	strh	r3, [r7, #24]
            draw_buf->flushing = 1;
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	611a      	str	r2, [r3, #16]
            if((row == 0) && (area_h >= area_w)) {
 800e6cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d144      	bne.n	800e75e <draw_buf_rotate+0x1d6>
 800e6d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e6d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	db3e      	blt.n	800e75e <draw_buf_rotate+0x1d6>
                /*Rotate the initial area as a square*/
                height = area_w;
 800e6e0:	89fb      	ldrh	r3, [r7, #14]
 800e6e2:	833b      	strh	r3, [r7, #24]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	7c1b      	ldrb	r3, [r3, #16]
 800e6e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	2b30      	cmp	r3, #48	; 0x30
 800e6f0:	bf0c      	ite	eq
 800e6f2:	2301      	moveq	r3, #1
 800e6f4:	2300      	movne	r3, #0
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800e6fc:	683a      	ldr	r2, [r7, #0]
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7ff fe93 	bl	800e42a <draw_buf_rotate_90_sqr>
                if(drv->rotated == LV_DISP_ROT_90) {
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	7c1b      	ldrb	r3, [r3, #16]
 800e708:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b10      	cmp	r3, #16
 800e710:	d10c      	bne.n	800e72c <draw_buf_rotate+0x1a4>
                    area->x1 = init_y_off;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	893a      	ldrh	r2, [r7, #8]
 800e716:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800e718:	893a      	ldrh	r2, [r7, #8]
 800e71a:	89fb      	ldrh	r3, [r7, #14]
 800e71c:	4413      	add	r3, r2
 800e71e:	b29b      	uxth	r3, r3
 800e720:	3b01      	subs	r3, #1
 800e722:	b29b      	uxth	r3, r3
 800e724:	b21a      	sxth	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	809a      	strh	r2, [r3, #4]
                if(drv->rotated == LV_DISP_ROT_90) {
 800e72a:	e06c      	b.n	800e806 <draw_buf_rotate+0x27e>
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e732:	b29a      	uxth	r2, r3
 800e734:	893b      	ldrh	r3, [r7, #8]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	b29b      	uxth	r3, r3
 800e73a:	3b01      	subs	r3, #1
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	b21a      	sxth	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - area_w + 1;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	89fb      	ldrh	r3, [r7, #14]
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	b29b      	uxth	r3, r3
 800e752:	3301      	adds	r3, #1
 800e754:	b29b      	uxth	r3, r3
 800e756:	b21a      	sxth	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	801a      	strh	r2, [r3, #0]
                if(drv->rotated == LV_DISP_ROT_90) {
 800e75c:	e053      	b.n	800e806 <draw_buf_rotate+0x27e>
                }
            }
            else {
                /*Rotate other areas using a maximum buffer size*/
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d104      	bne.n	800e76e <draw_buf_rotate+0x1e6>
 800e764:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800e768:	f012 f8e4 	bl	8020934 <lv_mem_buf_get>
 800e76c:	61f8      	str	r0, [r7, #28]
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	7c1b      	ldrb	r3, [r3, #16]
 800e772:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e776:	b2db      	uxtb	r3, r3
 800e778:	2b30      	cmp	r3, #48	; 0x30
 800e77a:	bf0c      	ite	eq
 800e77c:	2301      	moveq	r3, #1
 800e77e:	2300      	movne	r3, #0
 800e780:	b2d8      	uxtb	r0, r3
 800e782:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e786:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	f7ff fdcb 	bl	800e32a <draw_buf_rotate_90>

                if(drv->rotated == LV_DISP_ROT_90) {
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	7c1b      	ldrb	r3, [r3, #16]
 800e798:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	2b10      	cmp	r3, #16
 800e7a0:	d116      	bne.n	800e7d0 <draw_buf_rotate+0x248>
                    area->x1 = init_y_off + row;
 800e7a2:	893a      	ldrh	r2, [r7, #8]
 800e7a4:	8b7b      	ldrh	r3, [r7, #26]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	b21a      	sxth	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + row + height - 1;
 800e7b0:	893a      	ldrh	r2, [r7, #8]
 800e7b2:	8b7b      	ldrh	r3, [r7, #26]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	8b3b      	ldrh	r3, [r7, #24]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	3b01      	subs	r3, #1
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	b21a      	sxth	r2, r3
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	809a      	strh	r2, [r3, #4]
 800e7c8:	e01d      	b.n	800e806 <draw_buf_rotate+0x27e>
 800e7ca:	bf00      	nop
 800e7cc:	200006fc 	.word	0x200006fc
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	893b      	ldrh	r3, [r7, #8]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	8b7b      	ldrh	r3, [r7, #26]
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	b21a      	sxth	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - height + 1;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	8b3b      	ldrh	r3, [r7, #24]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	b21a      	sxth	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	801a      	strh	r2, [r3, #0]
                }
            }

            /* The original part (chunk of the current area) were split into more parts here.
             * Set the original last_part flag on the last part of rotation. */
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800e806:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800e80a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800e80e:	441a      	add	r2, r3
 800e810:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e814:	429a      	cmp	r2, r3
 800e816:	db11      	blt.n	800e83c <draw_buf_rotate+0x2b4>
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e820:	b2db      	uxtb	r3, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00a      	beq.n	800e83c <draw_buf_rotate+0x2b4>
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	2b00      	cmp	r3, #0
 800e832:	d003      	beq.n	800e83c <draw_buf_rotate+0x2b4>
                draw_buf->flushing_last = 1;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	2201      	movs	r2, #1
 800e838:	615a      	str	r2, [r3, #20]
 800e83a:	e002      	b.n	800e842 <draw_buf_rotate+0x2ba>
            }
            else {
                draw_buf->flushing_last = 0;
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	2200      	movs	r2, #0
 800e840:	615a      	str	r2, [r3, #20]
            }

            /*Flush the completed area to the display*/
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d101      	bne.n	800e84c <draw_buf_rotate+0x2c4>
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	e000      	b.n	800e84e <draw_buf_rotate+0x2c6>
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	461a      	mov	r2, r3
 800e850:	6879      	ldr	r1, [r7, #4]
 800e852:	6978      	ldr	r0, [r7, #20]
 800e854:	f000 f8ee 	bl	800ea34 <call_flush_cb>
            /*FIXME: Rotation forces legacy behavior where rendering and flushing are done serially*/
            while(draw_buf->flushing) {
 800e858:	e007      	b.n	800e86a <draw_buf_rotate+0x2e2>
                if(drv->wait_cb) drv->wait_cb(drv);
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d003      	beq.n	800e86a <draw_buf_rotate+0x2e2>
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e866:	6978      	ldr	r0, [r7, #20]
 800e868:	4798      	blx	r3
            while(draw_buf->flushing) {
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1f3      	bne.n	800e85a <draw_buf_rotate+0x2d2>
            }
            color_p += area_w * height;
 800e872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e876:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e87a:	fb02 f303 	mul.w	r3, r2, r3
 800e87e:	461a      	mov	r2, r3
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	4413      	add	r3, r2
 800e884:	603b      	str	r3, [r7, #0]
            row += height;
 800e886:	8b7a      	ldrh	r2, [r7, #26]
 800e888:	8b3b      	ldrh	r3, [r7, #24]
 800e88a:	4413      	add	r3, r2
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800e890:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800e894:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e898:	429a      	cmp	r2, r3
 800e89a:	f6ff af09 	blt.w	800e6b0 <draw_buf_rotate+0x128>
        }
        /*Free the allocated buffer at the end if necessary*/
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d004      	beq.n	800e8ae <draw_buf_rotate+0x326>
 800e8a4:	69f8      	ldr	r0, [r7, #28]
 800e8a6:	f012 f8f1 	bl	8020a8c <lv_mem_buf_release>
 800e8aa:	e000      	b.n	800e8ae <draw_buf_rotate+0x326>
        return;
 800e8ac:	bf00      	nop
    }
}
 800e8ae:	3720      	adds	r7, #32
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800e8bc:	4b5c      	ldr	r3, [pc, #368]	; (800ea30 <draw_buf_flush+0x17c>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f010 f839 	bl	801e938 <lv_disp_get_draw_buf>
 800e8c6:	6178      	str	r0, [r7, #20]

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ce:	613b      	str	r3, [r7, #16]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <draw_buf_flush+0x2c>
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8dc:	6938      	ldr	r0, [r7, #16]
 800e8de:	4798      	blx	r3

    /* In partial double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	68da      	ldr	r2, [r3, #12]
 800e8e4:	4b52      	ldr	r3, [pc, #328]	; (800ea30 <draw_buf_flush+0x17c>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4b4f      	ldr	r3, [pc, #316]	; (800ea30 <draw_buf_flush+0x17c>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8fa:	fb01 f303 	mul.w	r3, r1, r3
 800e8fe:	429a      	cmp	r2, r3
 800e900:	bf0c      	ite	eq
 800e902:	2301      	moveq	r3, #1
 800e904:	2300      	movne	r3, #0
 800e906:	73fb      	strb	r3, [r7, #15]
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01d      	beq.n	800e94c <draw_buf_flush+0x98>
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d019      	beq.n	800e94c <draw_buf_flush+0x98>
 800e918:	7bfb      	ldrb	r3, [r7, #15]
 800e91a:	f083 0301 	eor.w	r3, r3, #1
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	2b00      	cmp	r3, #0
 800e922:	d013      	beq.n	800e94c <draw_buf_flush+0x98>
        while(draw_buf->flushing) {
 800e924:	e00e      	b.n	800e944 <draw_buf_flush+0x90>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800e926:	4b42      	ldr	r3, [pc, #264]	; (800ea30 <draw_buf_flush+0x17c>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d008      	beq.n	800e944 <draw_buf_flush+0x90>
 800e932:	4b3f      	ldr	r3, [pc, #252]	; (800ea30 <draw_buf_flush+0x17c>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e93a:	4a3d      	ldr	r2, [pc, #244]	; (800ea30 <draw_buf_flush+0x17c>)
 800e93c:	6812      	ldr	r2, [r2, #0]
 800e93e:	6812      	ldr	r2, [r2, #0]
 800e940:	4610      	mov	r0, r2
 800e942:	4798      	blx	r3
        while(draw_buf->flushing) {
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1ec      	bne.n	800e926 <draw_buf_flush+0x72>
        }
    }

    draw_buf->flushing = 1;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2201      	movs	r2, #1
 800e950:	611a      	str	r2, [r3, #16]

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800e952:	4b37      	ldr	r3, [pc, #220]	; (800ea30 <draw_buf_flush+0x17c>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00d      	beq.n	800e982 <draw_buf_flush+0xce>
 800e966:	4b32      	ldr	r3, [pc, #200]	; (800ea30 <draw_buf_flush+0x17c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	699b      	ldr	r3, [r3, #24]
 800e970:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e974:	b2db      	uxtb	r3, r3
 800e976:	2b00      	cmp	r3, #0
 800e978:	d003      	beq.n	800e982 <draw_buf_flush+0xce>
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2201      	movs	r2, #1
 800e97e:	615a      	str	r2, [r3, #20]
 800e980:	e002      	b.n	800e988 <draw_buf_flush+0xd4>
    else draw_buf->flushing_last = 0;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	2200      	movs	r2, #0
 800e986:	615a      	str	r2, [r3, #20]

    bool flushing_last = draw_buf->flushing_last;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	695b      	ldr	r3, [r3, #20]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	bf14      	ite	ne
 800e990:	2301      	movne	r3, #1
 800e992:	2300      	moveq	r3, #0
 800e994:	73bb      	strb	r3, [r7, #14]

    if(disp->driver->flush_cb) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	695b      	ldr	r3, [r3, #20]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d021      	beq.n	800e9e4 <draw_buf_flush+0x130>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	7c1b      	ldrb	r3, [r3, #16]
 800e9a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d010      	beq.n	800e9d2 <draw_buf_flush+0x11e>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	7c1b      	ldrb	r3, [r3, #16]
 800e9b6:	f003 0304 	and.w	r3, r3, #4
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d008      	beq.n	800e9d2 <draw_buf_flush+0x11e>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	4610      	mov	r0, r2
 800e9cc:	f7ff fddc 	bl	800e588 <draw_buf_rotate>
 800e9d0:	e008      	b.n	800e9e4 <draw_buf_flush+0x130>
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6818      	ldr	r0, [r3, #0]
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	6859      	ldr	r1, [r3, #4]
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	461a      	mov	r2, r3
 800e9e0:	f000 f828 	bl	800ea34 <call_flush_cb>
        }
    }

    /*If there are 2 buffers swap them. With direct mode swap only on the last area*/
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d01d      	beq.n	800ea28 <draw_buf_flush+0x174>
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d019      	beq.n	800ea28 <draw_buf_flush+0x174>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	7c1b      	ldrb	r3, [r3, #16]
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <draw_buf_flush+0x156>
 800ea04:	7bbb      	ldrb	r3, [r7, #14]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00e      	beq.n	800ea28 <draw_buf_flush+0x174>
        if(draw_buf->buf_act == draw_buf->buf1)
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	689a      	ldr	r2, [r3, #8]
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d104      	bne.n	800ea20 <draw_buf_flush+0x16c>
            draw_buf->buf_act = draw_buf->buf2;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	609a      	str	r2, [r3, #8]
        else
            draw_buf->buf_act = draw_buf->buf1;
    }
}
 800ea1e:	e003      	b.n	800ea28 <draw_buf_flush+0x174>
            draw_buf->buf_act = draw_buf->buf1;
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	609a      	str	r2, [r3, #8]
}
 800ea28:	bf00      	nop
 800ea2a:	3718      	adds	r7, #24
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	200006fc 	.word	0x200006fc

0800ea34 <call_flush_cb>:

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b086      	sub	sp, #24
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	607a      	str	r2, [r7, #4]
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea46:	b29a      	uxth	r2, r3
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	4413      	add	r3, r2
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ea56:	823b      	strh	r3, [r7, #16]
        .y1 = area->y1 + drv->offset_y,
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ea5e:	b29a      	uxth	r2, r3
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	4413      	add	r3, r2
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ea6e:	827b      	strh	r3, [r7, #18]
        .x2 = area->x2 + drv->offset_x,
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	4413      	add	r3, r2
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ea86:	82bb      	strh	r3, [r7, #20]
        .y2 = area->y2 + drv->offset_y
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	4413      	add	r3, r2
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 800ea9e:	82fb      	strh	r3, [r7, #22]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	695b      	ldr	r3, [r3, #20]
 800eaa4:	f107 0110 	add.w	r1, r7, #16
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	4798      	blx	r3
}
 800eaae:	bf00      	nop
 800eab0:	3718      	adds	r7, #24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
	...

0800eab8 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800eac0:	4a04      	ldr	r2, [pc, #16]	; (800ead4 <lv_obj_remove_style_all+0x1c>)
 800eac2:	2100      	movs	r1, #0
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7fc fe69 	bl	800b79c <lv_obj_remove_style>
}
 800eaca:	bf00      	nop
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	000fffff 	.word	0x000fffff

0800ead8 <lv_theme_get_from_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_theme_t  * lv_theme_get_from_obj(lv_obj_t * obj)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d004      	beq.n	800eaf0 <lv_theme_get_from_obj+0x18>
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7fe f8d2 	bl	800cc90 <lv_obj_get_disp>
 800eaec:	4603      	mov	r3, r0
 800eaee:	e002      	b.n	800eaf6 <lv_theme_get_from_obj+0x1e>
 800eaf0:	f00f fe9e 	bl	801e830 <lv_disp_get_default>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	60fb      	str	r3, [r7, #12]
    return lv_disp_get_theme(disp);
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7f5 fbae 	bl	800425a <lv_disp_get_theme>
 800eafe:	4603      	mov	r3, r0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff ffe1 	bl	800ead8 <lv_theme_get_from_obj>
 800eb16:	60f8      	str	r0, [r7, #12]
    if(th == NULL) return;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d007      	beq.n	800eb2e <lv_theme_apply+0x26>

    lv_obj_remove_style_all(obj);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7ff ffca 	bl	800eab8 <lv_obj_remove_style_all>

    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800eb24:	6879      	ldr	r1, [r7, #4]
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f000 f805 	bl	800eb36 <apply_theme>
 800eb2c:	e000      	b.n	800eb30 <lv_theme_apply+0x28>
    if(th == NULL) return;
 800eb2e:	bf00      	nop
}
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b082      	sub	sp, #8
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
 800eb3e:	6039      	str	r1, [r7, #0]
    if(th->parent) apply_theme(th->parent, obj);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d005      	beq.n	800eb54 <apply_theme+0x1e>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	6839      	ldr	r1, [r7, #0]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7ff fff1 	bl	800eb36 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d004      	beq.n	800eb66 <apply_theme+0x30>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	4798      	blx	r3
}
 800eb66:	bf00      	nop
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <lv_draw_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_init(void)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	af00      	add	r7, sp, #0
    /*Nothing to init now*/
}
 800eb72:	bf00      	nop
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d003      	beq.n	800eb94 <lv_draw_wait_for_finish+0x18>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	4798      	blx	r3
}
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	4603      	mov	r3, r0
 800eba4:	71fb      	strb	r3, [r7, #7]
 800eba6:	460b      	mov	r3, r1
 800eba8:	71bb      	strb	r3, [r7, #6]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800ebae:	797b      	ldrb	r3, [r7, #5]
 800ebb0:	09db      	lsrs	r3, r3, #7
 800ebb2:	b2da      	uxtb	r2, r3
 800ebb4:	79bb      	ldrb	r3, [r7, #6]
 800ebb6:	09db      	lsrs	r3, r3, #7
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	b2da      	uxtb	r2, r3
 800ebbe:	79fb      	ldrb	r3, [r7, #7]
 800ebc0:	09db      	lsrs	r3, r3, #7
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	b2db      	uxtb	r3, r3
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 800ebd8:	22ff      	movs	r2, #255	; 0xff
 800ebda:	21ff      	movs	r1, #255	; 0xff
 800ebdc:	20ff      	movs	r0, #255	; 0xff
 800ebde:	f7ff ffdd 	bl	800eb9c <lv_color_make>
 800ebe2:	4603      	mov	r3, r0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <lv_color_black>:
static inline lv_color_t lv_color_black(void)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 800ebec:	2200      	movs	r2, #0
 800ebee:	2100      	movs	r1, #0
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	f7ff ffd3 	bl	800eb9c <lv_color_make>
 800ebf6:	4603      	mov	r3, r0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	80da      	strh	r2, [r3, #6]
}
 800ec2e:	bf00      	nop
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr

0800ec3a <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800ec3a:	b480      	push	{r7}
 800ec3c:	b083      	sub	sp, #12
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	3301      	adds	r3, #1
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	b21b      	sxth	r3, r3
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	370c      	adds	r7, #12
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	3301      	adds	r3, #1
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	b21b      	sxth	r3, r3
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	370c      	adds	r7, #12
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 800ec96:	b590      	push	{r4, r7, lr}
 800ec98:	b083      	sub	sp, #12
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800ec9e:	2114      	movs	r1, #20
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f012 f9f1 	bl	8021088 <lv_memset_00>
    dsc->recolor = lv_color_black();
 800eca6:	687c      	ldr	r4, [r7, #4]
 800eca8:	f7ff ff9e 	bl	800ebe8 <lv_color_black>
 800ecac:	7220      	strb	r0, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	22ff      	movs	r2, #255	; 0xff
 800ecb2:	729a      	strb	r2, [r3, #10]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ecba:	805a      	strh	r2, [r3, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	7c13      	ldrb	r3, [r2, #16]
 800ecc0:	f36f 0300 	bfc	r3, #0, #1
 800ecc4:	7413      	strb	r3, [r2, #16]
}
 800ecc6:	bf00      	nop
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd90      	pop	{r4, r7, pc}
	...

0800ecd0 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc, const lv_area_t * coords, const void * src)
{
 800ecd0:	b590      	push	{r4, r7, lr}
 800ecd2:	b087      	sub	sp, #28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
 800ecdc:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d105      	bne.n	800ecf0 <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(draw_ctx, coords, "No\ndata");
 800ece4:	4a16      	ldr	r2, [pc, #88]	; (800ed40 <lv_draw_img+0x70>)
 800ece6:	6879      	ldr	r1, [r7, #4]
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f000 fab3 	bl	800f254 <show_error>
        return;
 800ecee:	e023      	b.n	800ed38 <lv_draw_img+0x68>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	7a9b      	ldrb	r3, [r3, #10]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d91e      	bls.n	800ed36 <lv_draw_img+0x66>

    lv_res_t res;
    if(draw_ctx->draw_img) {
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	699b      	ldr	r3, [r3, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d009      	beq.n	800ed14 <lv_draw_img+0x44>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	699c      	ldr	r4, [r3, #24]
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	68b9      	ldr	r1, [r7, #8]
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	47a0      	blx	r4
 800ed0e:	4603      	mov	r3, r0
 800ed10:	75fb      	strb	r3, [r7, #23]
 800ed12:	e007      	b.n	800ed24 <lv_draw_img+0x54>
    }
    else {
        res = decode_and_draw(draw_ctx, dsc, coords, src);
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	68b9      	ldr	r1, [r7, #8]
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	f000 f8e3 	bl	800eee6 <decode_and_draw>
 800ed20:	4603      	mov	r3, r0
 800ed22:	75fb      	strb	r3, [r7, #23]
    }

    if(res == LV_RES_INV) {
 800ed24:	7dfb      	ldrb	r3, [r7, #23]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <lv_draw_img+0x68>
        LV_LOG_WARN("Image draw error");
        show_error(draw_ctx, coords, "No\ndata");
 800ed2a:	4a05      	ldr	r2, [pc, #20]	; (800ed40 <lv_draw_img+0x70>)
 800ed2c:	6879      	ldr	r1, [r7, #4]
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f000 fa90 	bl	800f254 <show_error>
        return;
 800ed34:	e000      	b.n	800ed38 <lv_draw_img+0x68>
    if(dsc->opa <= LV_OPA_MIN) return;
 800ed36:	bf00      	nop
    }
}
 800ed38:	371c      	adds	r7, #28
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd90      	pop	{r4, r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	08023710 	.word	0x08023710

0800ed44 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b085      	sub	sp, #20
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	2b0e      	cmp	r3, #14
 800ed56:	d836      	bhi.n	800edc6 <lv_img_cf_get_px_size+0x82>
 800ed58:	a201      	add	r2, pc, #4	; (adr r2, 800ed60 <lv_img_cf_get_px_size+0x1c>)
 800ed5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5e:	bf00      	nop
 800ed60:	0800ed9d 	.word	0x0800ed9d
 800ed64:	0800ed9d 	.word	0x0800ed9d
 800ed68:	0800edc7 	.word	0x0800edc7
 800ed6c:	0800edc7 	.word	0x0800edc7
 800ed70:	0800eda3 	.word	0x0800eda3
 800ed74:	0800eda9 	.word	0x0800eda9
 800ed78:	0800eda3 	.word	0x0800eda3
 800ed7c:	0800edaf 	.word	0x0800edaf
 800ed80:	0800edb5 	.word	0x0800edb5
 800ed84:	0800edbb 	.word	0x0800edbb
 800ed88:	0800edc1 	.word	0x0800edc1
 800ed8c:	0800edaf 	.word	0x0800edaf
 800ed90:	0800edb5 	.word	0x0800edb5
 800ed94:	0800edbb 	.word	0x0800edbb
 800ed98:	0800edc1 	.word	0x0800edc1
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	73fb      	strb	r3, [r7, #15]
            break;
 800eda0:	e014      	b.n	800edcc <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 800eda2:	2308      	movs	r3, #8
 800eda4:	73fb      	strb	r3, [r7, #15]
            break;
 800eda6:	e011      	b.n	800edcc <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 800eda8:	2310      	movs	r3, #16
 800edaa:	73fb      	strb	r3, [r7, #15]
            break;
 800edac:	e00e      	b.n	800edcc <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 800edae:	2301      	movs	r3, #1
 800edb0:	73fb      	strb	r3, [r7, #15]
            break;
 800edb2:	e00b      	b.n	800edcc <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 800edb4:	2302      	movs	r3, #2
 800edb6:	73fb      	strb	r3, [r7, #15]
            break;
 800edb8:	e008      	b.n	800edcc <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 800edba:	2304      	movs	r3, #4
 800edbc:	73fb      	strb	r3, [r7, #15]
            break;
 800edbe:	e005      	b.n	800edcc <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 800edc0:	2308      	movs	r3, #8
 800edc2:	73fb      	strb	r3, [r7, #15]
            break;
 800edc4:	e002      	b.n	800edcc <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 800edc6:	2300      	movs	r3, #0
 800edc8:	73fb      	strb	r3, [r7, #15]
            break;
 800edca:	bf00      	nop
    }

    return px_size;
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3714      	adds	r7, #20
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop

0800eddc <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800ede6:	2300      	movs	r3, #0
 800ede8:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800edea:	79fb      	ldrb	r3, [r7, #7]
 800edec:	2b03      	cmp	r3, #3
 800edee:	d001      	beq.n	800edf4 <lv_img_cf_is_chroma_keyed+0x18>
 800edf0:	2b06      	cmp	r3, #6
 800edf2:	d102      	bne.n	800edfa <lv_img_cf_is_chroma_keyed+0x1e>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
            is_chroma_keyed = true;
 800edf4:	2301      	movs	r3, #1
 800edf6:	73fb      	strb	r3, [r7, #15]
            break;
 800edf8:	e002      	b.n	800ee00 <lv_img_cf_is_chroma_keyed+0x24>

        default:
            is_chroma_keyed = false;
 800edfa:	2300      	movs	r3, #0
 800edfc:	73fb      	strb	r3, [r7, #15]
            break;
 800edfe:	bf00      	nop
    }

    return is_chroma_keyed;
 800ee00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3714      	adds	r7, #20
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b085      	sub	sp, #20
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	4603      	mov	r3, r0
 800ee16:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800ee1c:	79fb      	ldrb	r3, [r7, #7]
 800ee1e:	2b0e      	cmp	r3, #14
 800ee20:	bf8c      	ite	hi
 800ee22:	2201      	movhi	r2, #1
 800ee24:	2200      	movls	r2, #0
 800ee26:	b2d2      	uxtb	r2, r2
 800ee28:	2a00      	cmp	r2, #0
 800ee2a:	d10e      	bne.n	800ee4a <lv_img_cf_has_alpha+0x3c>
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	409a      	lsls	r2, r3
 800ee30:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 800ee34:	4013      	ands	r3, r2
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	bf14      	ite	ne
 800ee3a:	2301      	movne	r3, #1
 800ee3c:	2300      	moveq	r3, #0
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <lv_img_cf_has_alpha+0x3c>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 800ee44:	2301      	movs	r3, #1
 800ee46:	73fb      	strb	r3, [r7, #15]
            break;
 800ee48:	e002      	b.n	800ee50 <lv_img_cf_has_alpha+0x42>
        default:
            has_alpha = false;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	73fb      	strb	r3, [r7, #15]
            break;
 800ee4e:	bf00      	nop
    }

    return has_alpha;
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3714      	adds	r7, #20
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800ee5e:	b480      	push	{r7}
 800ee60:	b085      	sub	sp, #20
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800ee66:	2303      	movs	r3, #3
 800ee68:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d101      	bne.n	800ee74 <lv_img_src_get_type+0x16>
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	e018      	b.n	800eea6 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b1f      	cmp	r3, #31
 800ee7e:	d907      	bls.n	800ee90 <lv_img_src_get_type+0x32>
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	b25b      	sxtb	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	db02      	blt.n	800ee90 <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	73fb      	strb	r3, [r7, #15]
 800ee8e:	e009      	b.n	800eea4 <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	b25b      	sxtb	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	da02      	bge.n	800eea0 <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800ee9a:	2302      	movs	r3, #2
 800ee9c:	73fb      	strb	r3, [r7, #15]
 800ee9e:	e001      	b.n	800eea4 <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800eea0:	2300      	movs	r3, #0
 800eea2:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3714      	adds	r7, #20
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr

0800eeb2 <lv_draw_img_decoded>:

void lv_draw_img_decoded(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc,
                         const lv_area_t * coords, const uint8_t * map_p, lv_img_cf_t color_format)
{
 800eeb2:	b590      	push	{r4, r7, lr}
 800eeb4:	b087      	sub	sp, #28
 800eeb6:	af02      	add	r7, sp, #8
 800eeb8:	60f8      	str	r0, [r7, #12]
 800eeba:	60b9      	str	r1, [r7, #8]
 800eebc:	607a      	str	r2, [r7, #4]
 800eebe:	603b      	str	r3, [r7, #0]
    if(draw_ctx->draw_img_decoded == NULL) return;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00a      	beq.n	800eede <lv_draw_img_decoded+0x2c>

    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	695c      	ldr	r4, [r3, #20]
 800eecc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	68b9      	ldr	r1, [r7, #8]
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	47a0      	blx	r4
 800eedc:	e000      	b.n	800eee0 <lv_draw_img_decoded+0x2e>
    if(draw_ctx->draw_img_decoded == NULL) return;
 800eede:	bf00      	nop
}
 800eee0:	3714      	adds	r7, #20
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd90      	pop	{r4, r7, pc}

0800eee6 <decode_and_draw>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
 800eee6:	b5b0      	push	{r4, r5, r7, lr}
 800eee8:	b09e      	sub	sp, #120	; 0x78
 800eeea:	af02      	add	r7, sp, #8
 800eeec:	60f8      	str	r0, [r7, #12]
 800eeee:	60b9      	str	r1, [r7, #8]
 800eef0:	607a      	str	r2, [r7, #4]
 800eef2:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	7a9b      	ldrb	r3, [r3, #10]
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d801      	bhi.n	800ef00 <decode_and_draw+0x1a>
 800eefc:	2301      	movs	r3, #1
 800eefe:	e1a5      	b.n	800f24c <decode_and_draw+0x366>

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	68da      	ldr	r2, [r3, #12]
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	7a19      	ldrb	r1, [r3, #8]
 800ef08:	6838      	ldr	r0, [r7, #0]
 800ef0a:	f003 ff6b 	bl	8012de4 <_lv_img_cache_open>
 800ef0e:	6638      	str	r0, [r7, #96]	; 0x60

    if(cdsc == NULL) return LV_RES_INV;
 800ef10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <decode_and_draw+0x34>
 800ef16:	2300      	movs	r3, #0
 800ef18:	e198      	b.n	800f24c <decode_and_draw+0x366>

    lv_img_cf_t cf;
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800ef1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef1c:	7d1b      	ldrb	r3, [r3, #20]
 800ef1e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7ff ff59 	bl	800eddc <lv_img_cf_is_chroma_keyed>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d003      	beq.n	800ef38 <decode_and_draw+0x52>
 800ef30:	2306      	movs	r3, #6
 800ef32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ef36:	e027      	b.n	800ef88 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 800ef38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef3a:	7d1b      	ldrb	r3, [r3, #20]
 800ef3c:	f003 031f 	and.w	r3, r3, #31
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b0e      	cmp	r3, #14
 800ef44:	d103      	bne.n	800ef4e <decode_and_draw+0x68>
 800ef46:	230e      	movs	r3, #14
 800ef48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ef4c:	e01c      	b.n	800ef88 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 800ef4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef50:	7d1b      	ldrb	r3, [r3, #20]
 800ef52:	f003 031f 	and.w	r3, r3, #31
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b14      	cmp	r3, #20
 800ef5a:	d103      	bne.n	800ef64 <decode_and_draw+0x7e>
 800ef5c:	2314      	movs	r3, #20
 800ef5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ef62:	e011      	b.n	800ef88 <decode_and_draw+0xa2>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800ef64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef66:	7d1b      	ldrb	r3, [r3, #20]
 800ef68:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff ff4d 	bl	800ee0e <lv_img_cf_has_alpha>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d003      	beq.n	800ef82 <decode_and_draw+0x9c>
 800ef7a:	2305      	movs	r3, #5
 800ef7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ef80:	e002      	b.n	800ef88 <decode_and_draw+0xa2>
    else cf = LV_IMG_CF_TRUE_COLOR;
 800ef82:	2304      	movs	r3, #4
 800ef84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if(cf == LV_IMG_CF_ALPHA_8BIT) {
 800ef88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ef8c:	2b0e      	cmp	r3, #14
 800ef8e:	d10f      	bne.n	800efb0 <decode_and_draw+0xca>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d104      	bne.n	800efa4 <decode_and_draw+0xbe>
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	885b      	ldrh	r3, [r3, #2]
 800ef9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efa2:	d005      	beq.n	800efb0 <decode_and_draw+0xca>
            /* resume normal method */
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800efa4:	2305      	movs	r3, #5
 800efa6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            cdsc->dec_dsc.img_data = NULL;
 800efaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efac:	2200      	movs	r2, #0
 800efae:	619a      	str	r2, [r3, #24]
        }
    }

    if(cdsc->dec_dsc.error_msg != NULL) {
 800efb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efb2:	6a1b      	ldr	r3, [r3, #32]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d007      	beq.n	800efc8 <decode_and_draw+0xe2>
        LV_LOG_WARN("Image draw error");

        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 800efb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efba:	6a1b      	ldr	r3, [r3, #32]
 800efbc:	461a      	mov	r2, r3
 800efbe:	6879      	ldr	r1, [r7, #4]
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f000 f947 	bl	800f254 <show_error>
 800efc6:	e13d      	b.n	800f244 <decode_and_draw+0x35e>
    }
    /*The decoder could open the image and gave the entire uncompressed image.
     *Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800efc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efca:	699b      	ldr	r3, [r3, #24]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 8087 	beq.w	800f0e0 <decode_and_draw+0x1fa>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 800efd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efd6:	6879      	ldr	r1, [r7, #4]
 800efd8:	4618      	mov	r0, r3
 800efda:	f7ff fe0f 	bl	800ebfc <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d104      	bne.n	800eff2 <decode_and_draw+0x10c>
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	885b      	ldrh	r3, [r3, #2]
 800efec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eff0:	d048      	beq.n	800f084 <decode_and_draw+0x19e>
            int32_t w = lv_area_get_width(coords);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7ff fe21 	bl	800ec3a <lv_area_get_width>
 800eff8:	4603      	mov	r3, r0
 800effa:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7ff fe33 	bl	800ec68 <lv_area_get_height>
 800f002:	4603      	mov	r3, r0
 800f004:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800f006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f008:	b219      	sxth	r1, r3
 800f00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f00c:	b21c      	sxth	r4, r3
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	885b      	ldrh	r3, [r3, #2]
 800f018:	68ba      	ldr	r2, [r7, #8]
 800f01a:	3204      	adds	r2, #4
 800f01c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f020:	9201      	str	r2, [sp, #4]
 800f022:	9300      	str	r3, [sp, #0]
 800f024:	462b      	mov	r3, r5
 800f026:	4622      	mov	r2, r4
 800f028:	f003 fe13 	bl	8012c52 <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 800f02c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800f030:	b29a      	uxth	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f038:	b29b      	uxth	r3, r3
 800f03a:	4413      	add	r3, r2
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	b21b      	sxth	r3, r3
 800f040:	863b      	strh	r3, [r7, #48]	; 0x30
            map_area_rot.y1 += coords->y1;
 800f042:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f046:	b29a      	uxth	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f04e:	b29b      	uxth	r3, r3
 800f050:	4413      	add	r3, r2
 800f052:	b29b      	uxth	r3, r3
 800f054:	b21b      	sxth	r3, r3
 800f056:	867b      	strh	r3, [r7, #50]	; 0x32
            map_area_rot.x2 += coords->x1;
 800f058:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f064:	b29b      	uxth	r3, r3
 800f066:	4413      	add	r3, r2
 800f068:	b29b      	uxth	r3, r3
 800f06a:	b21b      	sxth	r3, r3
 800f06c:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y2 += coords->y1;
 800f06e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800f072:	b29a      	uxth	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	4413      	add	r3, r2
 800f07e:	b29b      	uxth	r3, r3
 800f080:	b21b      	sxth	r3, r3
 800f082:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        lv_area_t clip_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6899      	ldr	r1, [r3, #8]
 800f088:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f08c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f090:	4618      	mov	r0, r3
 800f092:	f010 f8a5 	bl	801f1e0 <_lv_area_intersect>
 800f096:	4603      	mov	r3, r0
 800f098:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800f09c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f0a0:	f083 0301 	eor.w	r3, r3, #1
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d004      	beq.n	800f0b4 <decode_and_draw+0x1ce>
            draw_cleanup(cdsc);
 800f0aa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f0ac:	f000 f8fa 	bl	800f2a4 <draw_cleanup>
            return LV_RES_OK;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e0cb      	b.n	800f24c <decode_and_draw+0x366>
        }

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	63bb      	str	r3, [r7, #56]	; 0x38
        draw_ctx->clip_area = &clip_com;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f0c0:	609a      	str	r2, [r3, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 800f0c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0c4:	699a      	ldr	r2, [r3, #24]
 800f0c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	68b9      	ldr	r1, [r7, #8]
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f7ff feed 	bl	800eeb2 <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0dc:	609a      	str	r2, [r3, #8]
 800f0de:	e0b1      	b.n	800f244 <decode_and_draw+0x35e>
    }
    /*The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	6899      	ldr	r1, [r3, #8]
 800f0e4:	f107 0320 	add.w	r3, r7, #32
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f010 f878 	bl	801f1e0 <_lv_area_intersect>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800f0f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0fa:	f083 0301 	eor.w	r3, r3, #1
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	2b00      	cmp	r3, #0
 800f102:	d004      	beq.n	800f10e <decode_and_draw+0x228>
            draw_cleanup(cdsc);
 800f104:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f106:	f000 f8cd 	bl	800f2a4 <draw_cleanup>
            return LV_RES_OK;
 800f10a:	2301      	movs	r3, #1
 800f10c:	e09e      	b.n	800f24c <decode_and_draw+0x366>
        }

        int32_t width = lv_area_get_width(&mask_com);
 800f10e:	f107 0320 	add.w	r3, r7, #32
 800f112:	4618      	mov	r0, r3
 800f114:	f7ff fd91 	bl	800ec3a <lv_area_get_width>
 800f118:	4603      	mov	r3, r0
 800f11a:	65bb      	str	r3, [r7, #88]	; 0x58

        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800f11c:	f107 0320 	add.w	r3, r7, #32
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fd8a 	bl	800ec3a <lv_area_get_width>
 800f126:	4603      	mov	r3, r0
 800f128:	005b      	lsls	r3, r3, #1
 800f12a:	4618      	mov	r0, r3
 800f12c:	f011 fc02 	bl	8020934 <lv_mem_buf_get>
 800f130:	6578      	str	r0, [r7, #84]	; 0x54
                                        LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800f138:	f107 0220 	add.w	r2, r7, #32
 800f13c:	f107 0318 	add.w	r3, r7, #24
 800f140:	4611      	mov	r1, r2
 800f142:	4618      	mov	r0, r3
 800f144:	f7ff fd5a 	bl	800ebfc <lv_area_copy>
        lv_area_set_height(&line, 1);
 800f148:	f107 0318 	add.w	r3, r7, #24
 800f14c:	2101      	movs	r1, #1
 800f14e:	4618      	mov	r0, r3
 800f150:	f00f ffa1 	bl	801f096 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800f154:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f158:	461a      	mov	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 800f164:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f168:	461a      	mov	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	66bb      	str	r3, [r7, #104]	; 0x68
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800f174:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f178:	667b      	str	r3, [r7, #100]	; 0x64
 800f17a:	e057      	b.n	800f22c <decode_and_draw+0x346>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 800f17c:	f107 0218 	add.w	r2, r7, #24
 800f180:	f107 0310 	add.w	r3, r7, #16
 800f184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f186:	4618      	mov	r0, r3
 800f188:	f010 f82a 	bl	801f1e0 <_lv_area_intersect>
 800f18c:	4603      	mov	r3, r0
 800f18e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if(union_ok == false) continue;
 800f192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f196:	f083 0301 	eor.w	r3, r3, #1
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d141      	bne.n	800f224 <decode_and_draw+0x33e>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800f1a0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1a4:	b219      	sxth	r1, r3
 800f1a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f1a8:	b21a      	sxth	r2, r3
 800f1aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f1ac:	b21c      	sxth	r4, r3
 800f1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	4623      	mov	r3, r4
 800f1b4:	f003 ffc0 	bl	8013138 <lv_img_decoder_read_line>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 800f1be:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d00e      	beq.n	800f1e4 <decode_and_draw+0x2fe>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800f1c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f003 ffe1 	bl	8013190 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                lv_mem_buf_release(buf);
 800f1ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f1d0:	f011 fc5c 	bl	8020a8c <lv_mem_buf_release>
                draw_cleanup(cdsc);
 800f1d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f1d6:	f000 f865 	bl	800f2a4 <draw_cleanup>
                draw_ctx->clip_area = clip_area_ori;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f1de:	609a      	str	r2, [r3, #8]
                return LV_RES_INV;
 800f1e0:	2300      	movs	r3, #0
            return LV_RES_OK;
 800f1e2:	e033      	b.n	800f24c <decode_and_draw+0x366>
            }

            draw_ctx->clip_area = &mask_line;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f107 0210 	add.w	r2, r7, #16
 800f1ea:	609a      	str	r2, [r3, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 800f1ec:	f107 0218 	add.w	r2, r7, #24
 800f1f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f1f4:	9300      	str	r3, [sp, #0]
 800f1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1f8:	68b9      	ldr	r1, [r7, #8]
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f7ff fe59 	bl	800eeb2 <lv_draw_img_decoded>
            line.y1++;
 800f200:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f204:	b29b      	uxth	r3, r3
 800f206:	3301      	adds	r3, #1
 800f208:	b29b      	uxth	r3, r3
 800f20a:	b21b      	sxth	r3, r3
 800f20c:	837b      	strh	r3, [r7, #26]
            line.y2++;
 800f20e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f212:	b29b      	uxth	r3, r3
 800f214:	3301      	adds	r3, #1
 800f216:	b29b      	uxth	r3, r3
 800f218:	b21b      	sxth	r3, r3
 800f21a:	83fb      	strh	r3, [r7, #30]
            y++;
 800f21c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f21e:	3301      	adds	r3, #1
 800f220:	66bb      	str	r3, [r7, #104]	; 0x68
 800f222:	e000      	b.n	800f226 <decode_and_draw+0x340>
            if(union_ok == false) continue;
 800f224:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800f226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f228:	3301      	adds	r3, #1
 800f22a:	667b      	str	r3, [r7, #100]	; 0x64
 800f22c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f230:	461a      	mov	r2, r3
 800f232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f234:	4293      	cmp	r3, r2
 800f236:	dda1      	ble.n	800f17c <decode_and_draw+0x296>
        }
        draw_ctx->clip_area = clip_area_ori;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f23c:	609a      	str	r2, [r3, #8]
        lv_mem_buf_release(buf);
 800f23e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f240:	f011 fc24 	bl	8020a8c <lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 800f244:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f246:	f000 f82d 	bl	800f2a4 <draw_cleanup>
    return LV_RES_OK;
 800f24a:	2301      	movs	r3, #1
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3770      	adds	r7, #112	; 0x70
 800f250:	46bd      	mov	sp, r7
 800f252:	bdb0      	pop	{r4, r5, r7, pc}

0800f254 <show_error>:


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b09a      	sub	sp, #104	; 0x68
 800f258:	af02      	add	r7, sp, #8
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800f260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f264:	4618      	mov	r0, r3
 800f266:	f003 fc67 	bl	8012b38 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800f26a:	f7ff fcb3 	bl	800ebd4 <lv_color_white>
 800f26e:	f887 0034 	strb.w	r0, [r7, #52]	; 0x34
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800f272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	4619      	mov	r1, r3
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f003 fca0 	bl	8012bc0 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800f280:	f107 0310 	add.w	r3, r7, #16
 800f284:	4618      	mov	r0, r3
 800f286:	f000 f899 	bl	800f3bc <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800f28a:	f107 0110 	add.w	r1, r7, #16
 800f28e:	2300      	movs	r3, #0
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f000 f8bc 	bl	800f414 <lv_draw_label>
}
 800f29c:	bf00      	nop
 800f29e:	3760      	adds	r7, #96	; 0x60
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <draw_cleanup>:

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f003 ff6e 	bl	8013190 <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 800f2b4:	bf00      	nop
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f2ca:	b29a      	uxth	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	1ad3      	subs	r3, r2, r3
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	3301      	adds	r3, #1
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	b21b      	sxth	r3, r3
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	370c      	adds	r7, #12
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr

0800f2ea <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800f2ea:	b480      	push	{r7}
 800f2ec:	b083      	sub	sp, #12
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
 800f304:	b480      	push	{r7}
 800f306:	b087      	sub	sp, #28
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	613b      	str	r3, [r7, #16]

    while(len) {
 800f318:	e00c      	b.n	800f334 <lv_memcpy_small+0x30>
        *d8 = *s8;
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	781a      	ldrb	r2, [r3, #0]
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	701a      	strb	r2, [r3, #0]
        d8++;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	3301      	adds	r3, #1
 800f326:	617b      	str	r3, [r7, #20]
        s8++;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	3301      	adds	r3, #1
 800f32c:	613b      	str	r3, [r7, #16]
        len--;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	3b01      	subs	r3, #1
 800f332:	607b      	str	r3, [r7, #4]
    while(len) {
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d1ef      	bne.n	800f31a <lv_memcpy_small+0x16>
    }

    return dst;
 800f33a:	68fb      	ldr	r3, [r7, #12]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	371c      	adds	r7, #28
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <lv_color_make>:
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	4603      	mov	r3, r0
 800f350:	71fb      	strb	r3, [r7, #7]
 800f352:	460b      	mov	r3, r1
 800f354:	71bb      	strb	r3, [r7, #6]
 800f356:	4613      	mov	r3, r2
 800f358:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800f35a:	797b      	ldrb	r3, [r7, #5]
 800f35c:	09db      	lsrs	r3, r3, #7
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	79bb      	ldrb	r3, [r7, #6]
 800f362:	09db      	lsrs	r3, r3, #7
 800f364:	b2db      	uxtb	r3, r3
 800f366:	4313      	orrs	r3, r2
 800f368:	b2da      	uxtb	r2, r3
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	09db      	lsrs	r3, r3, #7
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	4313      	orrs	r3, r2
 800f372:	b2db      	uxtb	r3, r3
}
 800f374:	4618      	mov	r0, r3
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <lv_color_black>:
{
 800f380:	b580      	push	{r7, lr}
 800f382:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 800f384:	2200      	movs	r2, #0
 800f386:	2100      	movs	r1, #0
 800f388:	2000      	movs	r0, #0
 800f38a:	f7ff ffdd 	bl	800f348 <lv_color_make>
 800f38e:	4603      	mov	r3, r0
}
 800f390:	4618      	mov	r0, r3
 800f392:	bd80      	pop	{r7, pc}

0800f394 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 800f394:	b480      	push	{r7}
 800f396:	b085      	sub	sp, #20
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d102      	bne.n	800f3ae <lv_bidi_calculate_align+0x1a>
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	701a      	strb	r2, [r3, #0]
}
 800f3ae:	bf00      	nop
 800f3b0:	3714      	adds	r7, #20
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr
	...

0800f3bc <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800f3c4:	2120      	movs	r1, #32
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f011 fe5e 	bl	8021088 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	22ff      	movs	r2, #255	; 0xff
 800f3d0:	761a      	strb	r2, [r3, #24]
    dsc->color = lv_color_black();
 800f3d2:	687c      	ldr	r4, [r7, #4]
 800f3d4:	f7ff ffd4 	bl	800f380 <lv_color_black>
 800f3d8:	7320      	strb	r0, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4a0c      	ldr	r2, [pc, #48]	; (800f410 <lv_draw_label_dsc_init+0x54>)
 800f3de:	601a      	str	r2, [r3, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3e6:	605a      	str	r2, [r3, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3ee:	609a      	str	r2, [r3, #8]
    dsc->sel_color = lv_color_black();
 800f3f0:	687c      	ldr	r4, [r7, #4]
 800f3f2:	f7ff ffc5 	bl	800f380 <lv_color_black>
 800f3f6:	7360      	strb	r0, [r4, #13]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800f3f8:	687c      	ldr	r4, [r7, #4]
 800f3fa:	2005      	movs	r0, #5
 800f3fc:	f010 fc3e 	bl	801fc7c <lv_palette_main>
 800f400:	73a0      	strb	r0, [r4, #14]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	765a      	strb	r2, [r3, #25]
}
 800f408:	bf00      	nop
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd90      	pop	{r4, r7, pc}
 800f410:	08026df4 	.word	0x08026df4

0800f414 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 800f414:	b5b0      	push	{r4, r5, r7, lr}
 800f416:	b0c8      	sub	sp, #288	; 0x120
 800f418:	af04      	add	r7, sp, #16
 800f41a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 800f41e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 800f422:	6020      	str	r0, [r4, #0]
 800f424:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800f428:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 800f42c:	6001      	str	r1, [r0, #0]
 800f42e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800f432:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800f436:	600a      	str	r2, [r1, #0]
 800f438:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f43c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800f440:	6013      	str	r3, [r2, #0]
    if(dsc->opa <= LV_OPA_MIN) return;
 800f442:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	7e1b      	ldrb	r3, [r3, #24]
 800f44e:	2b02      	cmp	r3, #2
 800f450:	f240 85ea 	bls.w	8010028 <lv_draw_label+0xc14>
    if(dsc->font == NULL) {
 800f454:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	f000 85e3 	beq.w	801002c <lv_draw_label+0xc18>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 800f466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f46a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	69db      	ldr	r3, [r3, #28]
 800f472:	2b00      	cmp	r3, #0
 800f474:	f000 85dc 	beq.w	8010030 <lv_draw_label+0xc1c>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 800f478:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f47c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800f486:	461d      	mov	r5, r3
 800f488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f48a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f48c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const lv_font_t * font = dsc->font;
 800f494:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 800f4a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f000 85c0 	beq.w	8010034 <lv_draw_label+0xc20>
 800f4b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f000 85b7 	beq.w	8010034 <lv_draw_label+0xc20>
        return;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 800f4c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	689a      	ldr	r2, [r3, #8]
 800f4d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f4da:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800f4de:	6819      	ldr	r1, [r3, #0]
 800f4e0:	f00f fe7e 	bl	801f1e0 <_lv_area_intersect>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    if(!clip_ok) return;
 800f4ea:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800f4ee:	f083 0301 	eor.w	r3, r3, #1
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f040 859f 	bne.w	8010038 <lv_draw_label+0xc24>

    lv_text_align_t align = dsc->align;
 800f4fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	7e9b      	ldrb	r3, [r3, #26]
 800f506:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_base_dir_t base_dir = dsc->bidi_dir;
 800f50a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f50e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	7e5b      	ldrb	r3, [r3, #25]
 800f516:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    lv_bidi_calculate_align(&align, &base_dir, txt);
 800f51a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f51e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f522:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 800f526:	f107 008b 	add.w	r0, r7, #139	; 0x8b
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	f7ff ff32 	bl	800f394 <lv_bidi_calculate_align>

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800f530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	7edb      	ldrb	r3, [r3, #27]
 800f53c:	f003 0302 	and.w	r3, r3, #2
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10a      	bne.n	800f55a <lv_draw_label+0x146>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800f544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f548:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f54c:	6818      	ldr	r0, [r3, #0]
 800f54e:	f7ff feb5 	bl	800f2bc <lv_area_get_width>
 800f552:	4603      	mov	r3, r0
 800f554:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f558:	e02d      	b.n	800f5b6 <lv_draw_label+0x1a2>
    }
    else {
        /*If EXPAND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800f55a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f55e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	681c      	ldr	r4, [r3, #0]
 800f566:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f56a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 800f574:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f582:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f586:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f58a:	6812      	ldr	r2, [r2, #0]
 800f58c:	7ed2      	ldrb	r2, [r2, #27]
 800f58e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800f592:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800f596:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f59a:	9202      	str	r2, [sp, #8]
 800f59c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800f5a0:	9201      	str	r2, [sp, #4]
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	462b      	mov	r3, r5
 800f5a6:	4622      	mov	r2, r4
 800f5a8:	6809      	ldr	r1, [r1, #0]
 800f5aa:	f013 fbab 	bl	8022d04 <lv_txt_get_size>
                        dsc->flag);
        w = p.x;
 800f5ae:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800f5b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 800f5b6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800f5ba:	f7ff fe96 	bl	800f2ea <lv_font_get_line_height>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int32_t line_height = line_height_font + dsc->line_space;
 800f5c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5d8:	4413      	add	r3, r2
 800f5da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /*Init variables for the first line*/
    int32_t line_width = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    lv_point_t pos;
    pos.x = coords->x1;
 800f5e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f5f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    pos.y = coords->y1;
 800f5f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f604:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t x_ofs = 0;
 800f608:	2300      	movs	r3, #0
 800f60a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int32_t y_ofs = 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    x_ofs = dsc->ofs_x;
 800f614:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y_ofs = dsc->ofs_y;
 800f626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800f634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    pos.y += y_ofs;
 800f638:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f642:	b29b      	uxth	r3, r3
 800f644:	4413      	add	r3, r2
 800f646:	b29b      	uxth	r3, r3
 800f648:	b21b      	sxth	r3, r3
 800f64a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    uint32_t line_start     = 0;
 800f64e:	2300      	movs	r3, #0
 800f650:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    int32_t last_line_start = -1;
 800f654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f658:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800f65c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f660:	2b00      	cmp	r3, #0
 800f662:	d02c      	beq.n	800f6be <lv_draw_label+0x2aa>
 800f664:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d128      	bne.n	800f6be <lv_draw_label+0x2aa>
 800f66c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f670:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	da1f      	bge.n	800f6be <lv_draw_label+0x2aa>
        /*If the label changed too much recalculate the hint.*/
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800f67e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f688:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800f68c:	6812      	ldr	r2, [r2, #0]
 800f68e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f692:	1a9b      	subs	r3, r3, r2
 800f694:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800f698:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800f69c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	dd04      	ble.n	800f6b4 <lv_draw_label+0x2a0>
            hint->line_start = -1;
 800f6aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f6ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6b2:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800f6b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800f6be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d013      	beq.n	800f6ee <lv_draw_label+0x2da>
 800f6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	db0f      	blt.n	800f6ee <lv_draw_label+0x2da>
        line_start = last_line_start;
 800f6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        pos.y += hint->y;
 800f6d6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	4413      	add	r3, r2
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	b21b      	sxth	r3, r3
 800f6ea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f6ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f6f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f6fc:	18d0      	adds	r0, r2, r3
 800f6fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f710:	b219      	sxth	r1, r3
 800f712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	7edb      	ldrb	r3, [r3, #27]
 800f71e:	9301      	str	r3, [sp, #4]
 800f720:	2300      	movs	r3, #0
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	460b      	mov	r3, r1
 800f726:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800f72a:	f013 fc87 	bl	802303c <_lv_txt_get_next_line>
 800f72e:	4602      	mov	r2, r0
 800f730:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f734:	4413      	add	r3, r2
 800f736:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800f73a:	e06c      	b.n	800f816 <lv_draw_label+0x402>
        /*Go to next line*/
        line_start = line_end;
 800f73c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f740:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f748:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f752:	18d0      	adds	r0, r2, r3
 800f754:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f766:	b219      	sxth	r1, r3
 800f768:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	7edb      	ldrb	r3, [r3, #27]
 800f774:	9301      	str	r3, [sp, #4]
 800f776:	2300      	movs	r3, #0
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	460b      	mov	r3, r1
 800f77c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800f780:	f013 fc5c 	bl	802303c <_lv_txt_get_next_line>
 800f784:	4602      	mov	r2, r0
 800f786:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f78a:	4413      	add	r3, r2
 800f78c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        pos.y += line_height;
 800f790:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f794:	b29a      	uxth	r2, r3
 800f796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	4413      	add	r3, r2
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	b21b      	sxth	r3, r3
 800f7a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800f7a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d027      	beq.n	800f7fe <lv_draw_label+0x3ea>
 800f7ae:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f7b2:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800f7b6:	db22      	blt.n	800f7fe <lv_draw_label+0x3ea>
 800f7b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	da1d      	bge.n	800f7fe <lv_draw_label+0x3ea>
            hint->line_start = line_start;
 800f7c2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800f7c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f7ca:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800f7cc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f7e0:	1ad2      	subs	r2, r2, r3
 800f7e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f7e6:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800f7e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f7fc:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800f7fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f802:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f80c:	4413      	add	r3, r2
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	f000 8413 	beq.w	801003c <lv_draw_label+0xc28>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800f816:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800f81a:	461a      	mov	r2, r3
 800f81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f820:	4413      	add	r3, r2
 800f822:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800f826:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800f82a:	6812      	ldr	r2, [r2, #0]
 800f82c:	6892      	ldr	r2, [r2, #8]
 800f82e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f832:	4293      	cmp	r3, r2
 800f834:	db82      	blt.n	800f73c <lv_draw_label+0x328>
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
 800f836:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f83a:	2b02      	cmp	r3, #2
 800f83c:	d13d      	bne.n	800f8ba <lv_draw_label+0x4a6>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f83e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f842:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f84c:	18d0      	adds	r0, r2, r3
 800f84e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f852:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f856:	1ad1      	subs	r1, r2, r3
 800f858:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f85c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f86a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	7edb      	ldrb	r3, [r3, #27]
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	4613      	mov	r3, r2
 800f876:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800f87a:	f013 fcbd 	bl	80231f8 <lv_txt_get_width>
 800f87e:	4603      	mov	r3, r0
 800f880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800f884:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f888:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	f7ff fd15 	bl	800f2bc <lv_area_get_width>
 800f892:	4603      	mov	r3, r0
 800f894:	461a      	mov	r2, r3
 800f896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	da00      	bge.n	800f8a2 <lv_draw_label+0x48e>
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	105b      	asrs	r3, r3, #1
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	b28b      	uxth	r3, r1
 800f8ae:	4413      	add	r3, r2
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	b21b      	sxth	r3, r3
 800f8b4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800f8b8:	e03b      	b.n	800f932 <lv_draw_label+0x51e>

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 800f8ba:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f8be:	2b03      	cmp	r3, #3
 800f8c0:	d137      	bne.n	800f932 <lv_draw_label+0x51e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f8c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f8d0:	18d0      	adds	r0, r2, r3
 800f8d2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f8d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f8da:	1ad1      	subs	r1, r2, r3
 800f8dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800f8ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	7edb      	ldrb	r3, [r3, #27]
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800f8fe:	f013 fc7b 	bl	80231f8 <lv_txt_get_width>
 800f902:	4603      	mov	r3, r0
 800f904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        pos.x += lv_area_get_width(coords) - line_width;
 800f908:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f90c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f910:	6818      	ldr	r0, [r3, #0]
 800f912:	f7ff fcd3 	bl	800f2bc <lv_area_get_width>
 800f916:	4603      	mov	r3, r0
 800f918:	461a      	mov	r2, r3
 800f91a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800f924:	b292      	uxth	r2, r2
 800f926:	b29b      	uxth	r3, r3
 800f928:	4413      	add	r3, r2
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	b21b      	sxth	r3, r3
 800f92e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    }
    uint32_t sel_start = dsc->sel_start;
 800f932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    uint32_t sel_end = dsc->sel_end;
 800f942:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    if(sel_start > sel_end) {
 800f952:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d90b      	bls.n	800f976 <lv_draw_label+0x562>
        uint32_t tmp = sel_start;
 800f95e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        sel_start = sel_end;
 800f966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f96a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        sel_end = tmp;
 800f96e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f972:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800f976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f97a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	7f1b      	ldrb	r3, [r3, #28]
 800f982:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f986:	b2db      	uxtb	r3, r3
 800f988:	f003 0301 	and.w	r3, r3, #1
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10c      	bne.n	800f9aa <lv_draw_label+0x596>
 800f990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	7f1b      	ldrb	r3, [r3, #28]
 800f99c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	f003 0302 	and.w	r3, r3, #2
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d035      	beq.n	800fa16 <lv_draw_label+0x602>
        lv_draw_line_dsc_init(&line_dsc);
 800f9aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 fc79 	bl	80102a6 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800f9b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f9b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	7b1b      	ldrb	r3, [r3, #12]
 800f9c0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800f9c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f9c8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d005      	beq.n	800f9dc <lv_draw_label+0x5c8>
 800f9d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f9d4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f9d8:	b21b      	sxth	r3, r3
 800f9da:	e000      	b.n	800f9de <lv_draw_label+0x5ca>
 800f9dc:	2301      	movs	r3, #1
 800f9de:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        line_dsc.opa = dsc->opa;
 800f9e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	7e1b      	ldrb	r3, [r3, #24]
 800f9ee:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        line_dsc.blend_mode = dsc->blend_mode;
 800f9f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	7f1b      	ldrb	r3, [r3, #28]
 800f9fe:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	f003 0303 	and.w	r3, r3, #3
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800fa0e:	f362 0301 	bfi	r3, r2, #0, #2
 800fa12:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800fa16:	2300      	movs	r3, #0
 800fa18:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
    uint32_t i;
    uint32_t par_start = 0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_color_t recolor  = lv_color_black();
 800fa22:	f7ff fcad 	bl	800f380 <lv_color_black>
 800fa26:	4603      	mov	r3, r0
 800fa28:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    lv_color_t color = lv_color_black();
 800fa2c:	f7ff fca8 	bl	800f380 <lv_color_black>
 800fa30:	4603      	mov	r3, r0
 800fa32:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800fa36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f003 f87c 	bl	8012b38 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800fa40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fa44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	7b9b      	ldrb	r3, [r3, #14]
 800fa4c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    int32_t pos_x_start = pos.x;
 800fa50:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800fa54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800fa58:	e2d9      	b.n	801000e <lv_draw_label+0xbfa>
        pos.x += x_ofs;
 800fa5a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800fa5e:	b29a      	uxth	r2, r3
 800fa60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	4413      	add	r3, r2
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	b21b      	sxth	r3, r3
 800fa6c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800fa70:	2300      	movs	r3, #0
 800fa72:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
        i         = 0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	677b      	str	r3, [r7, #116]	; 0x74
#if LV_USE_BIDI
        char * bidi_txt = lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, base_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 800fa7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fa7e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fa88:	4413      	add	r3, r2
 800fa8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
#endif

        while(i < line_end - line_start) {
 800fa8e:	e154      	b.n	800fd3a <lv_draw_label+0x926>
            uint32_t logical_char_pos = 0;
 800fa90:	2300      	movs	r3, #0
 800fa92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800fa96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d013      	beq.n	800faca <lv_draw_label+0x6b6>
 800faa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800faa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faaa:	4293      	cmp	r3, r2
 800faac:	d00d      	beq.n	800faca <lv_draw_label+0x6b6>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, base_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800faae:	4ba1      	ldr	r3, [pc, #644]	; (800fd34 <lv_draw_label+0x920>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fab4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800fab8:	4411      	add	r1, r2
 800faba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800fabe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800fac2:	6810      	ldr	r0, [r2, #0]
 800fac4:	4798      	blx	r3
 800fac6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
#endif
            }

            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800faca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800face:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fad2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800fad6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800fada:	f013 fc2b 	bl	8023334 <_lv_txt_encoded_letter_next_2>
            /*Handle the re-color command*/
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800fade:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	7edb      	ldrb	r3, [r3, #27]
 800faea:	f003 0301 	and.w	r3, r3, #1
 800faee:	2b00      	cmp	r3, #0
 800faf0:	f000 8088 	beq.w	800fc04 <lv_draw_label+0x7f0>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800faf4:	2323      	movs	r3, #35	; 0x23
 800faf6:	461a      	mov	r2, r3
 800faf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d11a      	bne.n	800fb34 <lv_draw_label+0x720>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800fafe:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d106      	bne.n	800fb14 <lv_draw_label+0x700>
                        par_start = i;
 800fb06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                        cmd_state = CMD_STATE_PAR;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 800fb12:	e112      	b.n	800fd3a <lv_draw_label+0x926>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800fb14:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d103      	bne.n	800fb24 <lv_draw_label+0x710>
                        cmd_state = CMD_STATE_WAIT;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800fb22:	e007      	b.n	800fb34 <lv_draw_label+0x720>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800fb24:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d103      	bne.n	800fb34 <lv_draw_label+0x720>
                        cmd_state = CMD_STATE_WAIT;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 800fb32:	e102      	b.n	800fd3a <lv_draw_label+0x926>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800fb34:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d163      	bne.n	800fc04 <lv_draw_label+0x7f0>
                    if(letter == ' ') {
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3e:	2b20      	cmp	r3, #32
 800fb40:	f040 80fa 	bne.w	800fd38 <lv_draw_label+0x924>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800fb44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fb46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	2b07      	cmp	r3, #7
 800fb4e:	d14d      	bne.n	800fbec <lv_draw_label+0x7d8>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800fb50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fb54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fb58:	18d1      	adds	r1, r2, r3
 800fb5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb5e:	2206      	movs	r2, #6
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7ff fbcf 	bl	800f304 <lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800fb66:	2300      	movs	r3, #0
 800fb68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800fb6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb70:	4618      	mov	r0, r3
 800fb72:	f000 fa7d 	bl	8010070 <hex_char_to_num>
 800fb76:	4603      	mov	r3, r0
 800fb78:	011c      	lsls	r4, r3, #4
 800fb7a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f000 fa76 	bl	8010070 <hex_char_to_num>
 800fb84:	4603      	mov	r3, r0
 800fb86:	4423      	add	r3, r4
 800fb88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800fb8c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800fb90:	4618      	mov	r0, r3
 800fb92:	f000 fa6d 	bl	8010070 <hex_char_to_num>
 800fb96:	4603      	mov	r3, r0
 800fb98:	011c      	lsls	r4, r3, #4
 800fb9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f000 fa66 	bl	8010070 <hex_char_to_num>
 800fba4:	4603      	mov	r3, r0
 800fba6:	4423      	add	r3, r4
 800fba8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800fbac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f000 fa5d 	bl	8010070 <hex_char_to_num>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	011c      	lsls	r4, r3, #4
 800fbba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f000 fa56 	bl	8010070 <hex_char_to_num>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	4423      	add	r3, r4
 800fbc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                            recolor = lv_color_make(r, g, b);
 800fbcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fbd6:	b2d1      	uxtb	r1, r2
 800fbd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fbdc:	b2d2      	uxtb	r2, r2
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff fbb2 	bl	800f348 <lv_color_make>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800fbea:	e007      	b.n	800fbfc <lv_draw_label+0x7e8>
                        }
                        else {
                            recolor.full = dsc->color.full;
 800fbec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fbf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	7b1b      	ldrb	r3, [r3, #12]
 800fbf8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                    }
                    continue;
 800fc02:	e099      	b.n	800fd38 <lv_draw_label+0x924>
                }
            }

            color = dsc->color;
 800fc04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	7b1b      	ldrb	r3, [r3, #12]
 800fc10:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800fc14:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d103      	bne.n	800fc24 <lv_draw_label+0x810>
 800fc1c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800fc20:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800fc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc28:	4619      	mov	r1, r3
 800fc2a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800fc2e:	f00e f965 	bl	801defc <lv_font_get_glyph_width>
 800fc32:	4603      	mov	r3, r0
 800fc34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800fc38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fc3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d04c      	beq.n	800fcde <lv_draw_label+0x8ca>
 800fc44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fc48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d046      	beq.n	800fcde <lv_draw_label+0x8ca>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800fc50:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fc54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d340      	bcc.n	800fcde <lv_draw_label+0x8ca>
 800fc5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fc60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d23a      	bcs.n	800fcde <lv_draw_label+0x8ca>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800fc68:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800fc6c:	843b      	strh	r3, [r7, #32]
                    sel_coords.y1 = pos.y;
 800fc6e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800fc72:	847b      	strh	r3, [r7, #34]	; 0x22
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800fc74:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800fc78:	b29a      	uxth	r2, r3
 800fc7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	4413      	add	r3, r2
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	4413      	add	r3, r2
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	3b01      	subs	r3, #1
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	b21b      	sxth	r3, r3
 800fc9e:	84bb      	strh	r3, [r7, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
 800fca0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800fca4:	b29a      	uxth	r2, r3
 800fca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	4413      	add	r3, r2
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	b21b      	sxth	r3, r3
 800fcb6:	84fb      	strh	r3, [r7, #38]	; 0x26
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800fcb8:	f107 0220 	add.w	r2, r7, #32
 800fcbc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800fcc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fcc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcc8:	6818      	ldr	r0, [r3, #0]
 800fcca:	f002 ff79 	bl	8012bc0 <lv_draw_rect>
                    color = dsc->sel_color;
 800fcce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fcd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	7b5b      	ldrb	r3, [r3, #13]
 800fcda:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                }
            }

            dsc_mod.color = color;
 800fcde:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800fce2:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 800fce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800fcec:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800fcf0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800fcf4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fcf8:	6800      	ldr	r0, [r0, #0]
 800fcfa:	f000 f9a7 	bl	801004c <lv_draw_letter>

            if(letter_w > 0) {
 800fcfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	dd19      	ble.n	800fd3a <lv_draw_label+0x926>
                pos.x += letter_w + dsc->letter_space;
 800fd06:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800fd1a:	b299      	uxth	r1, r3
 800fd1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	440b      	add	r3, r1
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	4413      	add	r3, r2
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	b21b      	sxth	r3, r3
 800fd2c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800fd30:	e003      	b.n	800fd3a <lv_draw_label+0x926>
 800fd32:	bf00      	nop
 800fd34:	2000001c 	.word	0x2000001c
                    continue;
 800fd38:	bf00      	nop
        while(i < line_end - line_start) {
 800fd3a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800fd3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fd42:	1ad2      	subs	r2, r2, r3
 800fd44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd46:	429a      	cmp	r2, r3
 800fd48:	f63f aea2 	bhi.w	800fa90 <lv_draw_label+0x67c>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800fd4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	7f1b      	ldrb	r3, [r3, #28]
 800fd58:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	f003 0302 	and.w	r3, r3, #2
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d039      	beq.n	800fdda <lv_draw_label+0x9c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800fd66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fd6a:	b21b      	sxth	r3, r3
 800fd6c:	83bb      	strh	r3, [r7, #28]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800fd6e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	da00      	bge.n	800fd8a <lv_draw_label+0x976>
 800fd88:	3301      	adds	r3, #1
 800fd8a:	105b      	asrs	r3, r3, #1
 800fd8c:	b21b      	sxth	r3, r3
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	4413      	add	r3, r2
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	da00      	bge.n	800fd9e <lv_draw_label+0x98a>
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	105b      	asrs	r3, r3, #1
 800fda0:	b21b      	sxth	r3, r3
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	4413      	add	r3, r2
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	b21b      	sxth	r3, r3
 800fdaa:	83fb      	strh	r3, [r7, #30]
            p2.x = pos.x;
 800fdac:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800fdb0:	833b      	strh	r3, [r7, #24]
            p2.y = p1.y;
 800fdb2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fdb6:	837b      	strh	r3, [r7, #26]
            line_dsc.color = color;
 800fdb8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800fdbc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800fdc0:	f107 0318 	add.w	r3, r7, #24
 800fdc4:	f107 021c 	add.w	r2, r7, #28
 800fdc8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800fdcc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800fdd0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fdd4:	6800      	ldr	r0, [r0, #0]
 800fdd6:	f000 fa7c 	bl	80102d2 <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800fdda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	7f1b      	ldrb	r3, [r3, #28]
 800fde6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	f003 0301 	and.w	r3, r3, #1
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d044      	beq.n	800fe7e <lv_draw_label+0xa6a>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800fdf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fdf8:	b21b      	sxth	r3, r3
 800fdfa:	82bb      	strh	r3, [r7, #20]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800fdfc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	4413      	add	r3, r2
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	1ad3      	subs	r3, r2, r3
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe32:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	1ad3      	subs	r3, r2, r3
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	b21b      	sxth	r3, r3
 800fe3e:	82fb      	strh	r3, [r7, #22]
            p2.x = pos.x;
 800fe40:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800fe44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800fe4c:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 800fe4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe56:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800fe5a:	805a      	strh	r2, [r3, #2]
            line_dsc.color = color;
 800fe5c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800fe60:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800fe64:	f107 0310 	add.w	r3, r7, #16
 800fe68:	f107 0214 	add.w	r2, r7, #20
 800fe6c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800fe70:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800fe74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fe78:	6800      	ldr	r0, [r0, #0]
 800fe7a:	f000 fa2a 	bl	80102d2 <lv_draw_line>
#if LV_USE_BIDI
        lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 800fe7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fe82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fe86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fe94:	18d0      	adds	r0, r2, r3
 800fe96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800fea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fea8:	b219      	sxth	r1, r3
 800feaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800feae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	7edb      	ldrb	r3, [r3, #27]
 800feb6:	9301      	str	r3, [sp, #4]
 800feb8:	2300      	movs	r3, #0
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	460b      	mov	r3, r1
 800febe:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800fec2:	f013 f8bb 	bl	802303c <_lv_txt_get_next_line>
 800fec6:	4602      	mov	r2, r0
 800fec8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fecc:	4413      	add	r3, r2
 800fece:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        pos.x = coords->x1;
 800fed2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fee0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        /*Align to middle*/
        if(align == LV_TEXT_ALIGN_CENTER) {
 800fee4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800fee8:	2b02      	cmp	r3, #2
 800feea:	d13d      	bne.n	800ff68 <lv_draw_label+0xb54>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800feec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fef0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fefa:	18d0      	adds	r0, r2, r3
 800fefc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800ff00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ff04:	1ad1      	subs	r1, r2, r3
 800ff06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800ff14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	7edb      	ldrb	r3, [r3, #27]
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	4613      	mov	r3, r2
 800ff24:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ff28:	f013 f966 	bl	80231f8 <lv_txt_get_width>
 800ff2c:	4603      	mov	r3, r0
            line_width =
 800ff2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ff32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ff3a:	6818      	ldr	r0, [r3, #0]
 800ff3c:	f7ff f9be 	bl	800f2bc <lv_area_get_width>
 800ff40:	4603      	mov	r3, r0
 800ff42:	461a      	mov	r2, r3
 800ff44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	da00      	bge.n	800ff50 <lv_draw_label+0xb3c>
 800ff4e:	3301      	adds	r3, #1
 800ff50:	105b      	asrs	r3, r3, #1
 800ff52:	4619      	mov	r1, r3
 800ff54:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	b28b      	uxth	r3, r1
 800ff5c:	4413      	add	r3, r2
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	b21b      	sxth	r3, r3
 800ff62:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800ff66:	e03b      	b.n	800ffe0 <lv_draw_label+0xbcc>

        }
        /*Align to the right*/
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 800ff68:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ff6c:	2b03      	cmp	r3, #3
 800ff6e:	d137      	bne.n	800ffe0 <lv_draw_label+0xbcc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ff70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ff7e:	18d0      	adds	r0, r2, r3
 800ff80:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800ff84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ff88:	1ad1      	subs	r1, r2, r3
 800ff8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800ff98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	7edb      	ldrb	r3, [r3, #27]
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ffac:	f013 f924 	bl	80231f8 <lv_txt_get_width>
 800ffb0:	4603      	mov	r3, r0
            line_width =
 800ffb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            pos.x += lv_area_get_width(coords) - line_width;
 800ffb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ffba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ffbe:	6818      	ldr	r0, [r3, #0]
 800ffc0:	f7ff f97c 	bl	800f2bc <lv_area_get_width>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffcc:	1ad3      	subs	r3, r2, r3
 800ffce:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 800ffd2:	b292      	uxth	r2, r2
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	4413      	add	r3, r2
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	b21b      	sxth	r3, r3
 800ffdc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        /*Go the next line position*/
        pos.y += line_height;
 800ffe0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	4413      	add	r3, r2
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	b21b      	sxth	r3, r3
 800fff2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if(pos.y > draw_ctx->clip_area->y2) return;
 800fff6:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800fffa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	689b      	ldr	r3, [r3, #8]
 8010006:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801000a:	429a      	cmp	r2, r3
 801000c:	dc18      	bgt.n	8010040 <lv_draw_label+0xc2c>
    while(txt[line_start] != '\0') {
 801000e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010012:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801001c:	4413      	add	r3, r2
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	f47f ad1a 	bne.w	800fa5a <lv_draw_label+0x646>
 8010026:	e00c      	b.n	8010042 <lv_draw_label+0xc2e>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010028:	bf00      	nop
 801002a:	e00a      	b.n	8010042 <lv_draw_label+0xc2e>
        return;
 801002c:	bf00      	nop
 801002e:	e008      	b.n	8010042 <lv_draw_label+0xc2e>
        return;
 8010030:	bf00      	nop
 8010032:	e006      	b.n	8010042 <lv_draw_label+0xc2e>
        return;
 8010034:	bf00      	nop
 8010036:	e004      	b.n	8010042 <lv_draw_label+0xc2e>
    if(!clip_ok) return;
 8010038:	bf00      	nop
 801003a:	e002      	b.n	8010042 <lv_draw_label+0xc2e>
        if(txt[line_start] == '\0') return;
 801003c:	bf00      	nop
 801003e:	e000      	b.n	8010042 <lv_draw_label+0xc2e>
        if(pos.y > draw_ctx->clip_area->y2) return;
 8010040:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 8010042:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8010046:	46bd      	mov	sp, r7
 8010048:	bdb0      	pop	{r4, r5, r7, pc}
 801004a:	bf00      	nop

0801004c <lv_draw_letter>:

void lv_draw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                    uint32_t letter)
{
 801004c:	b590      	push	{r4, r7, lr}
 801004e:	b085      	sub	sp, #20
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
 8010058:	603b      	str	r3, [r7, #0]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	69dc      	ldr	r4, [r3, #28]
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	68b9      	ldr	r1, [r7, #8]
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	47a0      	blx	r4
}
 8010068:	bf00      	nop
 801006a:	3714      	adds	r7, #20
 801006c:	46bd      	mov	sp, r7
 801006e:	bd90      	pop	{r4, r7, pc}

08010070 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8010070:	b480      	push	{r7}
 8010072:	b085      	sub	sp, #20
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 801007a:	2300      	movs	r3, #0
 801007c:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 801007e:	79fb      	ldrb	r3, [r7, #7]
 8010080:	2b2f      	cmp	r3, #47	; 0x2f
 8010082:	d906      	bls.n	8010092 <hex_char_to_num+0x22>
 8010084:	79fb      	ldrb	r3, [r7, #7]
 8010086:	2b39      	cmp	r3, #57	; 0x39
 8010088:	d803      	bhi.n	8010092 <hex_char_to_num+0x22>
        result = hex - '0';
 801008a:	79fb      	ldrb	r3, [r7, #7]
 801008c:	3b30      	subs	r3, #48	; 0x30
 801008e:	73fb      	strb	r3, [r7, #15]
 8010090:	e02d      	b.n	80100ee <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8010092:	79fb      	ldrb	r3, [r7, #7]
 8010094:	2b60      	cmp	r3, #96	; 0x60
 8010096:	d902      	bls.n	801009e <hex_char_to_num+0x2e>
 8010098:	79fb      	ldrb	r3, [r7, #7]
 801009a:	3b20      	subs	r3, #32
 801009c:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 801009e:	79fb      	ldrb	r3, [r7, #7]
 80100a0:	3b41      	subs	r3, #65	; 0x41
 80100a2:	2b05      	cmp	r3, #5
 80100a4:	d820      	bhi.n	80100e8 <hex_char_to_num+0x78>
 80100a6:	a201      	add	r2, pc, #4	; (adr r2, 80100ac <hex_char_to_num+0x3c>)
 80100a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ac:	080100c5 	.word	0x080100c5
 80100b0:	080100cb 	.word	0x080100cb
 80100b4:	080100d1 	.word	0x080100d1
 80100b8:	080100d7 	.word	0x080100d7
 80100bc:	080100dd 	.word	0x080100dd
 80100c0:	080100e3 	.word	0x080100e3
            case 'A':
                result = 10;
 80100c4:	230a      	movs	r3, #10
 80100c6:	73fb      	strb	r3, [r7, #15]
                break;
 80100c8:	e011      	b.n	80100ee <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 80100ca:	230b      	movs	r3, #11
 80100cc:	73fb      	strb	r3, [r7, #15]
                break;
 80100ce:	e00e      	b.n	80100ee <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 80100d0:	230c      	movs	r3, #12
 80100d2:	73fb      	strb	r3, [r7, #15]
                break;
 80100d4:	e00b      	b.n	80100ee <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 80100d6:	230d      	movs	r3, #13
 80100d8:	73fb      	strb	r3, [r7, #15]
                break;
 80100da:	e008      	b.n	80100ee <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 80100dc:	230e      	movs	r3, #14
 80100de:	73fb      	strb	r3, [r7, #15]
                break;
 80100e0:	e005      	b.n	80100ee <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 80100e2:	230f      	movs	r3, #15
 80100e4:	73fb      	strb	r3, [r7, #15]
                break;
 80100e6:	e002      	b.n	80100ee <hex_char_to_num+0x7e>
            default:
                result = 0;
 80100e8:	2300      	movs	r3, #0
 80100ea:	73fb      	strb	r3, [r7, #15]
                break;
 80100ec:	bf00      	nop
        }
    }

    return result;
 80100ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3714      	adds	r7, #20
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b088      	sub	sp, #32
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	4613      	mov	r3, r2
 8010108:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_init == NULL) return NULL;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801010e:	2b00      	cmp	r3, #0
 8010110:	d101      	bne.n	8010116 <lv_draw_layer_create+0x1a>
 8010112:	2300      	movs	r3, #0
 8010114:	e044      	b.n	80101a0 <lv_draw_layer_create+0xa4>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801011a:	4618      	mov	r0, r3
 801011c:	f010 fb80 	bl	8020820 <lv_mem_alloc>
 8010120:	61f8      	str	r0, [r7, #28]
    LV_ASSERT_MALLOC(layer_ctx);
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d100      	bne.n	801012a <lv_draw_layer_create+0x2e>
 8010128:	e7fe      	b.n	8010128 <lv_draw_layer_create+0x2c>
    if(layer_ctx == NULL) {
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d101      	bne.n	8010134 <lv_draw_layer_create+0x38>
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
 8010130:	2300      	movs	r3, #0
 8010132:	e035      	b.n	80101a0 <lv_draw_layer_create+0xa4>
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010138:	4619      	mov	r1, r3
 801013a:	69f8      	ldr	r0, [r7, #28]
 801013c:	f010 ffa4 	bl	8021088 <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8010140:	f7fd f858 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8010144:	61b8      	str	r0, [r7, #24]
    layer_ctx->original.buf = draw_ctx->buf;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	621a      	str	r2, [r3, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	685a      	ldr	r2, [r3, #4]
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	61da      	str	r2, [r3, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	689a      	ldr	r2, [r3, #8]
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	619a      	str	r2, [r3, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	7c1b      	ldrb	r3, [r3, #16]
 8010164:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010168:	b2db      	uxtb	r3, r3
 801016a:	2b00      	cmp	r3, #0
 801016c:	bf14      	ite	ne
 801016e:	2301      	movne	r3, #1
 8010170:	2300      	moveq	r3, #0
 8010172:	b2da      	uxtb	r2, r3
 8010174:	69fb      	ldr	r3, [r7, #28]
 8010176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	6810      	ldr	r0, [r2, #0]
 8010180:	6851      	ldr	r1, [r2, #4]
 8010182:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010188:	79fa      	ldrb	r2, [r7, #7]
 801018a:	69f9      	ldr	r1, [r7, #28]
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	4798      	blx	r3
 8010190:	6178      	str	r0, [r7, #20]
    if(NULL == init_layer_ctx) {
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d102      	bne.n	801019e <lv_draw_layer_create+0xa2>
        lv_mem_free(layer_ctx);
 8010198:	69f8      	ldr	r0, [r7, #28]
 801019a:	f010 fb71 	bl	8020880 <lv_mem_free>
    }
    return init_layer_ctx;
 801019e:	697b      	ldr	r3, [r7, #20]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3720      	adds	r7, #32
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	4613      	mov	r3, r2
 80101b4:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d005      	beq.n	80101ca <lv_draw_layer_adjust+0x22>
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101c2:	79fa      	ldrb	r2, [r7, #7]
 80101c4:	68b9      	ldr	r1, [r7, #8]
 80101c6:	68f8      	ldr	r0, [r7, #12]
 80101c8:	4798      	blx	r3
}
 80101ca:	bf00      	nop
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b084      	sub	sp, #16
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	60f8      	str	r0, [r7, #12]
 80101da:	60b9      	str	r1, [r7, #8]
 80101dc:	607a      	str	r2, [r7, #4]
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d005      	beq.n	80101f2 <lv_draw_layer_blend+0x20>
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	68b9      	ldr	r1, [r7, #8]
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	4798      	blx	r3
}
 80101f2:	bf00      	nop
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b084      	sub	sp, #16
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
 8010202:	6039      	str	r1, [r7, #0]

    lv_draw_wait_for_finish(draw_ctx);
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f7fe fcb9 	bl	800eb7c <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	6a1a      	ldr	r2, [r3, #32]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	69da      	ldr	r2, [r3, #28]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	699a      	ldr	r2, [r3, #24]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8010222:	f7fc ffe7 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8010226:	60f8      	str	r0, [r7, #12]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8010232:	7c13      	ldrb	r3, [r2, #16]
 8010234:	f361 1386 	bfi	r3, r1, #6, #1
 8010238:	7413      	strb	r3, [r2, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801023e:	2b00      	cmp	r3, #0
 8010240:	d004      	beq.n	801024c <lv_draw_layer_destroy+0x52>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010246:	6839      	ldr	r1, [r7, #0]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 801024c:	6838      	ldr	r0, [r7, #0]
 801024e:	f010 fb17 	bl	8020880 <lv_mem_free>
}
 8010252:	bf00      	nop
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801025a:	b480      	push	{r7}
 801025c:	b083      	sub	sp, #12
 801025e:	af00      	add	r7, sp, #0
 8010260:	4603      	mov	r3, r0
 8010262:	71fb      	strb	r3, [r7, #7]
 8010264:	460b      	mov	r3, r1
 8010266:	71bb      	strb	r3, [r7, #6]
 8010268:	4613      	mov	r3, r2
 801026a:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801026c:	797b      	ldrb	r3, [r7, #5]
 801026e:	09db      	lsrs	r3, r3, #7
 8010270:	b2da      	uxtb	r2, r3
 8010272:	79bb      	ldrb	r3, [r7, #6]
 8010274:	09db      	lsrs	r3, r3, #7
 8010276:	b2db      	uxtb	r3, r3
 8010278:	4313      	orrs	r3, r2
 801027a:	b2da      	uxtb	r2, r3
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	09db      	lsrs	r3, r3, #7
 8010280:	b2db      	uxtb	r3, r3
 8010282:	4313      	orrs	r3, r2
 8010284:	b2db      	uxtb	r3, r3
}
 8010286:	4618      	mov	r0, r3
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr

08010292 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8010292:	b580      	push	{r7, lr}
 8010294:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8010296:	2200      	movs	r2, #0
 8010298:	2100      	movs	r1, #0
 801029a:	2000      	movs	r0, #0
 801029c:	f7ff ffdd 	bl	801025a <lv_color_make>
 80102a0:	4603      	mov	r3, r0
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 80102a6:	b590      	push	{r4, r7, lr}
 80102a8:	b083      	sub	sp, #12
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 80102ae:	210a      	movs	r1, #10
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f010 fee9 	bl	8021088 <lv_memset_00>
    dsc->width = 1;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2201      	movs	r2, #1
 80102ba:	805a      	strh	r2, [r3, #2]
    dsc->opa = LV_OPA_COVER;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	22ff      	movs	r2, #255	; 0xff
 80102c0:	721a      	strb	r2, [r3, #8]
    dsc->color = lv_color_black();
 80102c2:	687c      	ldr	r4, [r7, #4]
 80102c4:	f7ff ffe5 	bl	8010292 <lv_color_black>
 80102c8:	7020      	strb	r0, [r4, #0]
}
 80102ca:	bf00      	nop
 80102cc:	370c      	adds	r7, #12
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd90      	pop	{r4, r7, pc}

080102d2 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 80102d2:	b590      	push	{r4, r7, lr}
 80102d4:	b085      	sub	sp, #20
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	60f8      	str	r0, [r7, #12]
 80102da:	60b9      	str	r1, [r7, #8]
 80102dc:	607a      	str	r2, [r7, #4]
 80102de:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00b      	beq.n	8010302 <lv_draw_line+0x30>
    if(dsc->opa <= LV_OPA_MIN) return;
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	7a1b      	ldrb	r3, [r3, #8]
 80102ee:	2b02      	cmp	r3, #2
 80102f0:	d909      	bls.n	8010306 <lv_draw_line+0x34>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	6a1c      	ldr	r4, [r3, #32]
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	68b9      	ldr	r1, [r7, #8]
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	47a0      	blx	r4
 8010300:	e002      	b.n	8010308 <lv_draw_line+0x36>
    if(dsc->width == 0) return;
 8010302:	bf00      	nop
 8010304:	e000      	b.n	8010308 <lv_draw_line+0x36>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010306:	bf00      	nop
}
 8010308:	3714      	adds	r7, #20
 801030a:	46bd      	mov	sp, r7
 801030c:	bd90      	pop	{r4, r7, pc}

0801030e <lv_area_copy>:
{
 801030e:	b480      	push	{r7}
 8010310:	b083      	sub	sp, #12
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
 8010316:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	80da      	strh	r2, [r3, #6]
}
 8010340:	bf00      	nop
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <lv_area_get_width>:
{
 801034c:	b480      	push	{r7}
 801034e:	b083      	sub	sp, #12
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801035a:	b29a      	uxth	r2, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010362:	b29b      	uxth	r3, r3
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	b29b      	uxth	r3, r3
 8010368:	3301      	adds	r3, #1
 801036a:	b29b      	uxth	r3, r3
 801036c:	b21b      	sxth	r3, r3
}
 801036e:	4618      	mov	r0, r3
 8010370:	370c      	adds	r7, #12
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr

0801037a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801037a:	b480      	push	{r7}
 801037c:	b083      	sub	sp, #12
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010388:	b29a      	uxth	r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010390:	b29b      	uxth	r3, r3
 8010392:	1ad3      	subs	r3, r2, r3
 8010394:	b29b      	uxth	r3, r3
 8010396:	3301      	adds	r3, #1
 8010398:	b29b      	uxth	r3, r3
 801039a:	b21b      	sxth	r3, r3
}
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b085      	sub	sp, #20
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80103b2:	2300      	movs	r3, #0
 80103b4:	73fb      	strb	r3, [r7, #15]
 80103b6:	e008      	b.n	80103ca <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80103b8:	7bfb      	ldrb	r3, [r7, #15]
 80103ba:	4a13      	ldr	r2, [pc, #76]	; (8010408 <lv_draw_mask_add+0x60>)
 80103bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d006      	beq.n	80103d2 <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80103c4:	7bfb      	ldrb	r3, [r7, #15]
 80103c6:	3301      	adds	r3, #1
 80103c8:	73fb      	strb	r3, [r7, #15]
 80103ca:	7bfb      	ldrb	r3, [r7, #15]
 80103cc:	2b0f      	cmp	r3, #15
 80103ce:	d9f3      	bls.n	80103b8 <lv_draw_mask_add+0x10>
 80103d0:	e000      	b.n	80103d4 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80103d2:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 80103d4:	7bfb      	ldrb	r3, [r7, #15]
 80103d6:	2b0f      	cmp	r3, #15
 80103d8:	d902      	bls.n	80103e0 <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 80103da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103de:	e00c      	b.n	80103fa <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
 80103e2:	4909      	ldr	r1, [pc, #36]	; (8010408 <lv_draw_mask_add+0x60>)
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 80103ea:	7bfb      	ldrb	r3, [r7, #15]
 80103ec:	4a06      	ldr	r2, [pc, #24]	; (8010408 <lv_draw_mask_add+0x60>)
 80103ee:	00db      	lsls	r3, r3, #3
 80103f0:	4413      	add	r3, r2
 80103f2:	683a      	ldr	r2, [r7, #0]
 80103f4:	605a      	str	r2, [r3, #4]

    return i;
 80103f6:	7bfb      	ldrb	r3, [r7, #15]
 80103f8:	b21b      	sxth	r3, r3
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3714      	adds	r7, #20
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr
 8010406:	bf00      	nop
 8010408:	200009bc 	.word	0x200009bc

0801040c <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 801040c:	b590      	push	{r4, r7, lr}
 801040e:	b08b      	sub	sp, #44	; 0x2c
 8010410:	af02      	add	r7, sp, #8
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	4608      	mov	r0, r1
 8010416:	4611      	mov	r1, r2
 8010418:	461a      	mov	r2, r3
 801041a:	4603      	mov	r3, r0
 801041c:	817b      	strh	r3, [r7, #10]
 801041e:	460b      	mov	r3, r1
 8010420:	813b      	strh	r3, [r7, #8]
 8010422:	4613      	mov	r3, r2
 8010424:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 8010426:	2300      	movs	r3, #0
 8010428:	77fb      	strb	r3, [r7, #31]
    _lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 801042a:	4b19      	ldr	r3, [pc, #100]	; (8010490 <lv_draw_mask_apply+0x84>)
 801042c:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 801042e:	e021      	b.n	8010474 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 8010436:	2301      	movs	r3, #1
 8010438:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	681c      	ldr	r4, [r3, #0]
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010446:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801044a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	4603      	mov	r3, r0
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	47a0      	blx	r4
 8010456:	4603      	mov	r3, r0
 8010458:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 801045a:	7cfb      	ldrb	r3, [r7, #19]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d101      	bne.n	8010464 <lv_draw_mask_apply+0x58>
 8010460:	2300      	movs	r3, #0
 8010462:	e011      	b.n	8010488 <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8010464:	7cfb      	ldrb	r3, [r7, #19]
 8010466:	2b02      	cmp	r3, #2
 8010468:	d101      	bne.n	801046e <lv_draw_mask_apply+0x62>
 801046a:	2301      	movs	r3, #1
 801046c:	77fb      	strb	r3, [r7, #31]

        m++;
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	3308      	adds	r3, #8
 8010472:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d1d9      	bne.n	8010430 <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 801047c:	7ffb      	ldrb	r3, [r7, #31]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d001      	beq.n	8010486 <lv_draw_mask_apply+0x7a>
 8010482:	2302      	movs	r3, #2
 8010484:	e000      	b.n	8010488 <lv_draw_mask_apply+0x7c>
 8010486:	2301      	movs	r3, #1
}
 8010488:	4618      	mov	r0, r3
 801048a:	3724      	adds	r7, #36	; 0x24
 801048c:	46bd      	mov	sp, r7
 801048e:	bd90      	pop	{r4, r7, pc}
 8010490:	200009bc 	.word	0x200009bc

08010494 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	4603      	mov	r3, r0
 801049c:	80fb      	strh	r3, [r7, #6]
    _lv_draw_mask_common_dsc_t * p = NULL;
 801049e:	2300      	movs	r3, #0
 80104a0:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 80104a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104aa:	d012      	beq.n	80104d2 <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 80104ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104b0:	4a0b      	ldr	r2, [pc, #44]	; (80104e0 <lv_draw_mask_remove_id+0x4c>)
 80104b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80104b6:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 80104b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104bc:	4a08      	ldr	r2, [pc, #32]	; (80104e0 <lv_draw_mask_remove_id+0x4c>)
 80104be:	2100      	movs	r1, #0
 80104c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 80104c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104c8:	4a05      	ldr	r2, [pc, #20]	; (80104e0 <lv_draw_mask_remove_id+0x4c>)
 80104ca:	00db      	lsls	r3, r3, #3
 80104cc:	4413      	add	r3, r2
 80104ce:	2200      	movs	r2, #0
 80104d0:	605a      	str	r2, [r3, #4]
    }

    return p;
 80104d2:	68fb      	ldr	r3, [r7, #12]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3714      	adds	r7, #20
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr
 80104e0:	200009bc 	.word	0x200009bc

080104e4 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * p = NULL;
 80104ec:	2300      	movs	r3, #0
 80104ee:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80104f0:	2300      	movs	r3, #0
 80104f2:	72fb      	strb	r3, [r7, #11]
 80104f4:	e014      	b.n	8010520 <lv_draw_mask_remove_custom+0x3c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 80104f6:	7afb      	ldrb	r3, [r7, #11]
 80104f8:	4a0d      	ldr	r2, [pc, #52]	; (8010530 <lv_draw_mask_remove_custom+0x4c>)
 80104fa:	00db      	lsls	r3, r3, #3
 80104fc:	4413      	add	r3, r2
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	429a      	cmp	r2, r3
 8010504:	d109      	bne.n	801051a <lv_draw_mask_remove_custom+0x36>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8010506:	7afb      	ldrb	r3, [r7, #11]
 8010508:	4a09      	ldr	r2, [pc, #36]	; (8010530 <lv_draw_mask_remove_custom+0x4c>)
 801050a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801050e:	60fb      	str	r3, [r7, #12]
            lv_draw_mask_remove_id(i);
 8010510:	7afb      	ldrb	r3, [r7, #11]
 8010512:	b21b      	sxth	r3, r3
 8010514:	4618      	mov	r0, r3
 8010516:	f7ff ffbd 	bl	8010494 <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 801051a:	7afb      	ldrb	r3, [r7, #11]
 801051c:	3301      	adds	r3, #1
 801051e:	72fb      	strb	r3, [r7, #11]
 8010520:	7afb      	ldrb	r3, [r7, #11]
 8010522:	2b0f      	cmp	r3, #15
 8010524:	d9e7      	bls.n	80104f6 <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 8010526:	68fb      	ldr	r3, [r7, #12]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	200009bc 	.word	0x200009bc

08010534 <lv_draw_mask_free_param>:
 * Needs to be called only in special cases when the mask is not added by `lv_draw_mask_add`
 * and not removed by `lv_draw_mask_remove_id` or `lv_draw_mask_remove_custom`
 * @param p pointer to a mask parameter
 */
void lv_draw_mask_free_param(void * p)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * pdsc = p;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	617b      	str	r3, [r7, #20]
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	791b      	ldrb	r3, [r3, #4]
 8010544:	2b02      	cmp	r3, #2
 8010546:	d11c      	bne.n	8010582 <lv_draw_mask_free_param+0x4e>
        lv_draw_mask_radius_param_t * radius_p = (lv_draw_mask_radius_param_t *) p;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	60fb      	str	r3, [r7, #12]
        if(radius_p->circle) {
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	695b      	ldr	r3, [r3, #20]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d021      	beq.n	8010598 <lv_draw_mask_free_param+0x64>
            if(radius_p->circle->life < 0) {
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	695b      	ldr	r3, [r3, #20]
 8010558:	691b      	ldr	r3, [r3, #16]
 801055a:	2b00      	cmp	r3, #0
 801055c:	da0b      	bge.n	8010576 <lv_draw_mask_free_param+0x42>
                lv_mem_free(radius_p->circle->cir_opa);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	695b      	ldr	r3, [r3, #20]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	f010 f98b 	bl	8020880 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	695b      	ldr	r3, [r3, #20]
 801056e:	4618      	mov	r0, r3
 8010570:	f010 f986 	bl	8020880 <lv_mem_free>
    }
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
        lv_mem_free(poly_p->cfg.points);
    }
}
 8010574:	e010      	b.n	8010598 <lv_draw_mask_free_param+0x64>
                radius_p->circle->used_cnt--;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	695b      	ldr	r3, [r3, #20]
 801057a:	695a      	ldr	r2, [r3, #20]
 801057c:	3a01      	subs	r2, #1
 801057e:	615a      	str	r2, [r3, #20]
}
 8010580:	e00a      	b.n	8010598 <lv_draw_mask_free_param+0x64>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	791b      	ldrb	r3, [r3, #4]
 8010586:	2b05      	cmp	r3, #5
 8010588:	d106      	bne.n	8010598 <lv_draw_mask_free_param+0x64>
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	613b      	str	r3, [r7, #16]
        lv_mem_free(poly_p->cfg.points);
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	689b      	ldr	r3, [r3, #8]
 8010592:	4618      	mov	r0, r3
 8010594:	f010 f974 	bl	8020880 <lv_mem_free>
}
 8010598:	bf00      	nop
 801059a:	3718      	adds	r7, #24
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <_lv_draw_mask_cleanup>:

void _lv_draw_mask_cleanup(void)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80105a6:	2300      	movs	r3, #0
 80105a8:	71fb      	strb	r3, [r7, #7]
 80105aa:	e022      	b.n	80105f2 <_lv_draw_mask_cleanup+0x52>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 80105ac:	79fa      	ldrb	r2, [r7, #7]
 80105ae:	4915      	ldr	r1, [pc, #84]	; (8010604 <_lv_draw_mask_cleanup+0x64>)
 80105b0:	4613      	mov	r3, r2
 80105b2:	00db      	lsls	r3, r3, #3
 80105b4:	1a9b      	subs	r3, r3, r2
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	440b      	add	r3, r1
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00a      	beq.n	80105d6 <_lv_draw_mask_cleanup+0x36>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 80105c0:	79fa      	ldrb	r2, [r7, #7]
 80105c2:	4910      	ldr	r1, [pc, #64]	; (8010604 <_lv_draw_mask_cleanup+0x64>)
 80105c4:	4613      	mov	r3, r2
 80105c6:	00db      	lsls	r3, r3, #3
 80105c8:	1a9b      	subs	r3, r3, r2
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	440b      	add	r3, r1
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f010 f955 	bl	8020880 <lv_mem_free>
        }
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 80105d6:	79fa      	ldrb	r2, [r7, #7]
 80105d8:	4613      	mov	r3, r2
 80105da:	00db      	lsls	r3, r3, #3
 80105dc:	1a9b      	subs	r3, r3, r2
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	4a08      	ldr	r2, [pc, #32]	; (8010604 <_lv_draw_mask_cleanup+0x64>)
 80105e2:	4413      	add	r3, r2
 80105e4:	211c      	movs	r1, #28
 80105e6:	4618      	mov	r0, r3
 80105e8:	f010 fd4e 	bl	8021088 <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80105ec:	79fb      	ldrb	r3, [r7, #7]
 80105ee:	3301      	adds	r3, #1
 80105f0:	71fb      	strb	r3, [r7, #7]
 80105f2:	79fb      	ldrb	r3, [r7, #7]
 80105f4:	2b03      	cmp	r3, #3
 80105f6:	d9d9      	bls.n	80105ac <_lv_draw_mask_cleanup+0xc>
    }
}
 80105f8:	bf00      	nop
 80105fa:	bf00      	nop
 80105fc:	3708      	adds	r7, #8
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	2000094c 	.word	0x2000094c

08010608 <lv_draw_mask_is_any>:
    }
    return cnt;
}

bool lv_draw_mask_is_any(const lv_area_t * a)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b086      	sub	sp, #24
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d107      	bne.n	8010626 <lv_draw_mask_is_any+0x1e>
 8010616:	4b2a      	ldr	r3, [pc, #168]	; (80106c0 <lv_draw_mask_is_any+0xb8>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	bf14      	ite	ne
 801061e:	2301      	movne	r3, #1
 8010620:	2300      	moveq	r3, #0
 8010622:	b2db      	uxtb	r3, r3
 8010624:	e048      	b.n	80106b8 <lv_draw_mask_is_any+0xb0>

    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8010626:	2300      	movs	r3, #0
 8010628:	75fb      	strb	r3, [r7, #23]
 801062a:	e041      	b.n	80106b0 <lv_draw_mask_is_any+0xa8>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 801062c:	7dfb      	ldrb	r3, [r7, #23]
 801062e:	4a24      	ldr	r2, [pc, #144]	; (80106c0 <lv_draw_mask_is_any+0xb8>)
 8010630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010634:	613b      	str	r3, [r7, #16]
        if(comm_param == NULL) continue;
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d035      	beq.n	80106a8 <lv_draw_mask_is_any+0xa0>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	791b      	ldrb	r3, [r3, #4]
 8010640:	2b02      	cmp	r3, #2
 8010642:	d12f      	bne.n	80106a4 <lv_draw_mask_is_any+0x9c>
            lv_draw_mask_radius_param_t * radius_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8010644:	7dfb      	ldrb	r3, [r7, #23]
 8010646:	4a1e      	ldr	r2, [pc, #120]	; (80106c0 <lv_draw_mask_is_any+0xb8>)
 8010648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801064c:	60fb      	str	r3, [r7, #12]
            if(radius_param->cfg.outer) {
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	7c9b      	ldrb	r3, [r3, #18]
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b00      	cmp	r3, #0
 801065a:	d011      	beq.n	8010680 <lv_draw_mask_is_any+0x78>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f103 0108 	add.w	r1, r3, #8
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010668:	461a      	mov	r2, r3
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f00f f83a 	bl	801f6e4 <_lv_area_is_out>
 8010670:	4603      	mov	r3, r0
 8010672:	f083 0301 	eor.w	r3, r3, #1
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b00      	cmp	r3, #0
 801067a:	d016      	beq.n	80106aa <lv_draw_mask_is_any+0xa2>
 801067c:	2301      	movs	r3, #1
 801067e:	e01b      	b.n	80106b8 <lv_draw_mask_is_any+0xb0>
            }
            else {
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f103 0108 	add.w	r1, r3, #8
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801068c:	461a      	mov	r2, r3
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f00e ff8a 	bl	801f5a8 <_lv_area_is_in>
 8010694:	4603      	mov	r3, r0
 8010696:	f083 0301 	eor.w	r3, r3, #1
 801069a:	b2db      	uxtb	r3, r3
 801069c:	2b00      	cmp	r3, #0
 801069e:	d004      	beq.n	80106aa <lv_draw_mask_is_any+0xa2>
 80106a0:	2301      	movs	r3, #1
 80106a2:	e009      	b.n	80106b8 <lv_draw_mask_is_any+0xb0>
            }
        }
        else {
            return true;
 80106a4:	2301      	movs	r3, #1
 80106a6:	e007      	b.n	80106b8 <lv_draw_mask_is_any+0xb0>
        if(comm_param == NULL) continue;
 80106a8:	bf00      	nop
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80106aa:	7dfb      	ldrb	r3, [r7, #23]
 80106ac:	3301      	adds	r3, #1
 80106ae:	75fb      	strb	r3, [r7, #23]
 80106b0:	7dfb      	ldrb	r3, [r7, #23]
 80106b2:	2b0f      	cmp	r3, #15
 80106b4:	d9ba      	bls.n	801062c <lv_draw_mask_is_any+0x24>
        }
    }

    return false;
 80106b6:	2300      	movs	r3, #0

}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3718      	adds	r7, #24
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	200009bc 	.word	0x200009bc

080106c4 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b08a      	sub	sp, #40	; 0x28
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	4608      	mov	r0, r1
 80106ce:	4611      	mov	r1, r2
 80106d0:	461a      	mov	r2, r3
 80106d2:	4603      	mov	r3, r0
 80106d4:	817b      	strh	r3, [r7, #10]
 80106d6:	460b      	mov	r3, r1
 80106d8:	813b      	strh	r3, [r7, #8]
 80106da:	4613      	mov	r3, r2
 80106dc:	80fb      	strh	r3, [r7, #6]
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 80106de:	212c      	movs	r1, #44	; 0x2c
 80106e0:	68f8      	ldr	r0, [r7, #12]
 80106e2:	f010 fcd1 	bl	8021088 <lv_memset_00>

    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 80106e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80106ea:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d10f      	bne.n	8010712 <lv_draw_mask_line_points_init+0x4e>
 80106f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80106f6:	2b03      	cmp	r3, #3
 80106f8:	d10b      	bne.n	8010712 <lv_draw_mask_line_points_init+0x4e>
        p1y--;
 80106fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80106fe:	b29b      	uxth	r3, r3
 8010700:	3b01      	subs	r3, #1
 8010702:	b29b      	uxth	r3, r3
 8010704:	813b      	strh	r3, [r7, #8]
        p2y--;
 8010706:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801070a:	b29b      	uxth	r3, r3
 801070c:	3b01      	subs	r3, #1
 801070e:	b29b      	uxth	r3, r3
 8010710:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    if(p1y > p2y) {
 8010712:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010716:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801071a:	429a      	cmp	r2, r3
 801071c:	dd0b      	ble.n	8010736 <lv_draw_mask_line_points_init+0x72>
        lv_coord_t t;
        t = p2x;
 801071e:	88fb      	ldrh	r3, [r7, #6]
 8010720:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 8010722:	897b      	ldrh	r3, [r7, #10]
 8010724:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 8010726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010728:	817b      	strh	r3, [r7, #10]

        t = p2y;
 801072a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801072c:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 801072e:	893b      	ldrh	r3, [r7, #8]
 8010730:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 8010732:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010734:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	897a      	ldrh	r2, [r7, #10]
 801073a:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	893a      	ldrh	r2, [r7, #8]
 8010740:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	88fa      	ldrh	r2, [r7, #6]
 8010746:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801074c:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 801074e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010752:	f003 0303 	and.w	r3, r3, #3
 8010756:	b2d9      	uxtb	r1, r3
 8010758:	68fa      	ldr	r2, [r7, #12]
 801075a:	7c13      	ldrb	r3, [r2, #16]
 801075c:	f361 0301 	bfi	r3, r1, #0, #2
 8010760:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	897a      	ldrh	r2, [r7, #10]
 8010766:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	893a      	ldrh	r2, [r7, #8]
 801076c:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 801076e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010772:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801077c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010780:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8010784:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010788:	1acb      	subs	r3, r1, r3
 801078a:	2b00      	cmp	r3, #0
 801078c:	bfb8      	it	lt
 801078e:	425b      	neglt	r3, r3
 8010790:	429a      	cmp	r2, r3
 8010792:	bfcc      	ite	gt
 8010794:	2301      	movgt	r3, #1
 8010796:	2300      	movle	r3, #0
 8010798:	b2d9      	uxtb	r1, r3
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80107a0:	f361 0300 	bfi	r3, r1, #0, #1
 80107a4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2200      	movs	r2, #0
 80107ac:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2200      	movs	r2, #0
 80107b2:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	4a63      	ldr	r2, [pc, #396]	; (8010944 <lv_draw_mask_line_points_init+0x280>)
 80107b8:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 80107c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80107c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 80107cc:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80107d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80107d4:	1ad3      	subs	r3, r2, r3
 80107d6:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107de:	f003 0301 	and.w	r3, r3, #1
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d024      	beq.n	8010832 <lv_draw_mask_line_points_init+0x16e>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 80107e8:	6a3b      	ldr	r3, [r7, #32]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00c      	beq.n	8010808 <lv_draw_mask_line_points_init+0x144>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 80107ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80107f2:	6a3b      	ldr	r3, [r7, #32]
 80107f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80107f8:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	69fa      	ldr	r2, [r7, #28]
 80107fe:	fb02 f303 	mul.w	r3, r2, r3
 8010802:	129a      	asrs	r2, r3, #10
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 8010808:	69fb      	ldr	r3, [r7, #28]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00c      	beq.n	8010828 <lv_draw_mask_line_points_init+0x164>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 801080e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	fb92 f3f3 	sdiv	r3, r2, r3
 8010818:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	6a3a      	ldr	r2, [r7, #32]
 801081e:	fb02 f303 	mul.w	r3, r2, r3
 8010822:	129a      	asrs	r2, r3, #10
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	69da      	ldr	r2, [r3, #28]
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	621a      	str	r2, [r3, #32]
 8010830:	e023      	b.n	801087a <lv_draw_mask_line_points_init+0x1b6>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00c      	beq.n	8010852 <lv_draw_mask_line_points_init+0x18e>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8010838:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010842:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 8010844:	69bb      	ldr	r3, [r7, #24]
 8010846:	6a3a      	ldr	r2, [r7, #32]
 8010848:	fb02 f303 	mul.w	r3, r2, r3
 801084c:	129a      	asrs	r2, r3, #10
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 8010852:	6a3b      	ldr	r3, [r7, #32]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00c      	beq.n	8010872 <lv_draw_mask_line_points_init+0x1ae>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8010858:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801085c:	6a3b      	ldr	r3, [r7, #32]
 801085e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010862:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	69fa      	ldr	r2, [r7, #28]
 8010868:	fb02 f303 	mul.w	r3, r2, r3
 801086c:	129a      	asrs	r2, r3, #10
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	699a      	ldr	r2, [r3, #24]
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	7c1b      	ldrb	r3, [r3, #16]
 801087e:	f003 0303 	and.w	r3, r3, #3
 8010882:	b2db      	uxtb	r3, r3
 8010884:	2b00      	cmp	r3, #0
 8010886:	d107      	bne.n	8010898 <lv_draw_mask_line_points_init+0x1d4>
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801088e:	f36f 0341 	bfc	r3, #1, #1
 8010892:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8010896:	e043      	b.n	8010920 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	7c1b      	ldrb	r3, [r3, #16]
 801089c:	f003 0303 	and.w	r3, r3, #3
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d107      	bne.n	80108b6 <lv_draw_mask_line_points_init+0x1f2>
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80108ac:	f043 0302 	orr.w	r3, r3, #2
 80108b0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80108b4:	e034      	b.n	8010920 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	7c1b      	ldrb	r3, [r3, #16]
 80108ba:	f003 0303 	and.w	r3, r3, #3
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d113      	bne.n	80108ec <lv_draw_mask_line_points_init+0x228>
        if(param->steep > 0) param->inv = 1;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	dd07      	ble.n	80108dc <lv_draw_mask_line_points_init+0x218>
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80108d2:	f043 0302 	orr.w	r3, r3, #2
 80108d6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80108da:	e021      	b.n	8010920 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 0;
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80108e2:	f36f 0341 	bfc	r3, #1, #1
 80108e6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80108ea:	e019      	b.n	8010920 <lv_draw_mask_line_points_init+0x25c>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	7c1b      	ldrb	r3, [r3, #16]
 80108f0:	f003 0303 	and.w	r3, r3, #3
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	2b03      	cmp	r3, #3
 80108f8:	d112      	bne.n	8010920 <lv_draw_mask_line_points_init+0x25c>
        if(param->steep > 0) param->inv = 0;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	dd07      	ble.n	8010912 <lv_draw_mask_line_points_init+0x24e>
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8010908:	f36f 0341 	bfc	r3, #1, #1
 801090c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8010910:	e006      	b.n	8010920 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 1;
 8010912:	68fa      	ldr	r2, [r7, #12]
 8010914:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8010918:	f043 0302 	orr.w	r3, r3, #2
 801091c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6a1b      	ldr	r3, [r3, #32]
 8010924:	109a      	asrs	r2, r3, #2
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	6a1b      	ldr	r3, [r3, #32]
 801092e:	2b00      	cmp	r3, #0
 8010930:	da04      	bge.n	801093c <lv_draw_mask_line_points_init+0x278>
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010936:	425a      	negs	r2, r3
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801093c:	bf00      	nop
 801093e:	3728      	adds	r7, #40	; 0x28
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	08010d79 	.word	0x08010d79

08010948 <lv_draw_mask_line_angle_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_angle_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t py, int16_t angle,
                                  lv_draw_mask_line_side_t side)
{
 8010948:	b590      	push	{r4, r7, lr}
 801094a:	b089      	sub	sp, #36	; 0x24
 801094c:	af02      	add	r7, sp, #8
 801094e:	60f8      	str	r0, [r7, #12]
 8010950:	4608      	mov	r0, r1
 8010952:	4611      	mov	r1, r2
 8010954:	461a      	mov	r2, r3
 8010956:	4603      	mov	r3, r0
 8010958:	817b      	strh	r3, [r7, #10]
 801095a:	460b      	mov	r3, r1
 801095c:	813b      	strh	r3, [r7, #8]
 801095e:	4613      	mov	r3, r2
 8010960:	80fb      	strh	r3, [r7, #6]
    /*Find an optimal degree.
     *lv_mask_line_points_init will swap the points to keep the smaller y in p1
     *Theoretically a line with `angle` or `angle+180` is the same only the points are swapped
     *Find the degree which keeps the origo in place*/
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 8010962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010966:	2bb4      	cmp	r3, #180	; 0xb4
 8010968:	dd03      	ble.n	8010972 <lv_draw_mask_line_angle_init+0x2a>
 801096a:	88fb      	ldrh	r3, [r7, #6]
 801096c:	3bb4      	subs	r3, #180	; 0xb4
 801096e:	b29b      	uxth	r3, r3
 8010970:	80fb      	strh	r3, [r7, #6]

    int32_t p2x;
    int32_t p2y;

    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 8010972:	88fb      	ldrh	r3, [r7, #6]
 8010974:	335a      	adds	r3, #90	; 0x5a
 8010976:	b29b      	uxth	r3, r3
 8010978:	b21b      	sxth	r3, r3
 801097a:	4618      	mov	r0, r3
 801097c:	f00f fe36 	bl	80205ec <lv_trigo_sin>
 8010980:	4603      	mov	r3, r0
 8010982:	115b      	asrs	r3, r3, #5
 8010984:	b21b      	sxth	r3, r3
 8010986:	461a      	mov	r2, r3
 8010988:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801098c:	4413      	add	r3, r2
 801098e:	617b      	str	r3, [r7, #20]
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 8010990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010994:	4618      	mov	r0, r3
 8010996:	f00f fe29 	bl	80205ec <lv_trigo_sin>
 801099a:	4603      	mov	r3, r0
 801099c:	115b      	asrs	r3, r3, #5
 801099e:	b21b      	sxth	r3, r3
 80109a0:	461a      	mov	r2, r3
 80109a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80109a6:	4413      	add	r3, r2
 80109a8:	613b      	str	r3, [r7, #16]

    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	b21c      	sxth	r4, r3
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	b21b      	sxth	r3, r3
 80109b2:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80109b6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80109ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80109be:	9201      	str	r2, [sp, #4]
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	4623      	mov	r3, r4
 80109c4:	4602      	mov	r2, r0
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f7ff fe7c 	bl	80106c4 <lv_draw_mask_line_points_init>
}
 80109cc:	bf00      	nop
 80109ce:	371c      	adds	r7, #28
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd90      	pop	{r4, r7, pc}

080109d4 <lv_draw_mask_angle_init>:
 * @param start_angle start angle in degrees. 0 deg on the right, 90 deg, on the bottom
 * @param end_angle end angle
 */
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,
                             lv_coord_t start_angle, lv_coord_t end_angle)
{
 80109d4:	b590      	push	{r4, r7, lr}
 80109d6:	b089      	sub	sp, #36	; 0x24
 80109d8:	af02      	add	r7, sp, #8
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	4608      	mov	r0, r1
 80109de:	4611      	mov	r1, r2
 80109e0:	461a      	mov	r2, r3
 80109e2:	4603      	mov	r3, r0
 80109e4:	817b      	strh	r3, [r7, #10]
 80109e6:	460b      	mov	r3, r1
 80109e8:	813b      	strh	r3, [r7, #8]
 80109ea:	4613      	mov	r3, r2
 80109ec:	80fb      	strh	r3, [r7, #6]
    lv_draw_mask_line_side_t start_side;
    lv_draw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
 80109ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	da02      	bge.n	80109fc <lv_draw_mask_angle_init+0x28>
        start_angle = 0;
 80109f6:	2300      	movs	r3, #0
 80109f8:	80fb      	strh	r3, [r7, #6]
 80109fa:	e007      	b.n	8010a0c <lv_draw_mask_angle_init+0x38>
    else if(start_angle > 359)
 80109fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a00:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010a04:	db02      	blt.n	8010a0c <lv_draw_mask_angle_init+0x38>
        start_angle = 359;
 8010a06:	f240 1367 	movw	r3, #359	; 0x167
 8010a0a:	80fb      	strh	r3, [r7, #6]

    if(end_angle < 0)
 8010a0c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	da02      	bge.n	8010a1a <lv_draw_mask_angle_init+0x46>
        end_angle = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	853b      	strh	r3, [r7, #40]	; 0x28
 8010a18:	e007      	b.n	8010a2a <lv_draw_mask_angle_init+0x56>
    else if(end_angle > 359)
 8010a1a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010a1e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010a22:	db02      	blt.n	8010a2a <lv_draw_mask_angle_init+0x56>
        end_angle = 359;
 8010a24:	f240 1367 	movw	r3, #359	; 0x167
 8010a28:	853b      	strh	r3, [r7, #40]	; 0x28

    if(end_angle < start_angle) {
 8010a2a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8010a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	da0a      	bge.n	8010a4c <lv_draw_mask_angle_init+0x78>
        param->delta_deg = 360 - start_angle + end_angle;
 8010a36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010a38:	88fb      	ldrh	r3, [r7, #6]
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010a42:	b29a      	uxth	r2, r3
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010a4a:	e00b      	b.n	8010a64 <lv_draw_mask_angle_init+0x90>
    }
    else {
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8010a4c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8010a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a54:	1ad3      	subs	r3, r2, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	bfb8      	it	lt
 8010a5a:	425b      	neglt	r3, r3
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    }

    param->cfg.start_angle = start_angle;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	88fa      	ldrh	r2, [r7, #6]
 8010a68:	819a      	strh	r2, [r3, #12]
    param->cfg.end_angle = end_angle;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010a6e:	81da      	strh	r2, [r3, #14]
    param->cfg.vertex_p.x = vertex_x;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	897a      	ldrh	r2, [r7, #10]
 8010a74:	811a      	strh	r2, [r3, #8]
    param->cfg.vertex_p.y = vertex_y;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	893a      	ldrh	r2, [r7, #8]
 8010a7a:	815a      	strh	r2, [r3, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	4a2f      	ldr	r2, [pc, #188]	; (8010b3c <lv_draw_mask_angle_init+0x168>)
 8010a80:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2201      	movs	r2, #1
 8010a86:	711a      	strb	r2, [r3, #4]

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");
 8010a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	db04      	blt.n	8010a9a <lv_draw_mask_angle_init+0xc6>
 8010a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a94:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010a98:	dd00      	ble.n	8010a9c <lv_draw_mask_angle_init+0xc8>
 8010a9a:	e7fe      	b.n	8010a9a <lv_draw_mask_angle_init+0xc6>

    if(start_angle >= 0 && start_angle < 180) {
 8010a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	db06      	blt.n	8010ab2 <lv_draw_mask_angle_init+0xde>
 8010aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010aa8:	2bb3      	cmp	r3, #179	; 0xb3
 8010aaa:	dc02      	bgt.n	8010ab2 <lv_draw_mask_angle_init+0xde>
        start_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8010aac:	2300      	movs	r3, #0
 8010aae:	75fb      	strb	r3, [r7, #23]
 8010ab0:	e001      	b.n	8010ab6 <lv_draw_mask_angle_init+0xe2>
    }
    else
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	75fb      	strb	r3, [r7, #23]

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");
 8010ab6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	db04      	blt.n	8010ac8 <lv_draw_mask_angle_init+0xf4>
 8010abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ac2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010ac6:	dd00      	ble.n	8010aca <lv_draw_mask_angle_init+0xf6>
 8010ac8:	e7fe      	b.n	8010ac8 <lv_draw_mask_angle_init+0xf4>

    if(end_angle >= 0 && end_angle < 180) {
 8010aca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	db06      	blt.n	8010ae0 <lv_draw_mask_angle_init+0x10c>
 8010ad2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010ad6:	2bb3      	cmp	r3, #179	; 0xb3
 8010ad8:	dc02      	bgt.n	8010ae0 <lv_draw_mask_angle_init+0x10c>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
 8010ada:	2301      	movs	r3, #1
 8010adc:	75bb      	strb	r3, [r7, #22]
 8010ade:	e00d      	b.n	8010afc <lv_draw_mask_angle_init+0x128>
    }
    else if(end_angle >= 180 && end_angle < 360) {
 8010ae0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010ae4:	2bb3      	cmp	r3, #179	; 0xb3
 8010ae6:	dd07      	ble.n	8010af8 <lv_draw_mask_angle_init+0x124>
 8010ae8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010aec:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8010af0:	da02      	bge.n	8010af8 <lv_draw_mask_angle_init+0x124>
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8010af2:	2300      	movs	r3, #0
 8010af4:	75bb      	strb	r3, [r7, #22]
 8010af6:	e001      	b.n	8010afc <lv_draw_mask_angle_init+0x128>
    }
    else
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8010af8:	2301      	movs	r3, #1
 8010afa:	75bb      	strb	r3, [r7, #22]

    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f103 0010 	add.w	r0, r3, #16
 8010b02:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8010b06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010b0a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010b0e:	7dfb      	ldrb	r3, [r7, #23]
 8010b10:	9300      	str	r3, [sp, #0]
 8010b12:	4623      	mov	r3, r4
 8010b14:	f7ff ff18 	bl	8010948 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8010b1e:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8010b22:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010b26:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010b2a:	7dbb      	ldrb	r3, [r7, #22]
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	4623      	mov	r3, r4
 8010b30:	f7ff ff0a 	bl	8010948 <lv_draw_mask_line_angle_init>
}
 8010b34:	bf00      	nop
 8010b36:	371c      	adds	r7, #28
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd90      	pop	{r4, r7, pc}
 8010b3c:	080116f9 	.word	0x080116f9

08010b40 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b088      	sub	sp, #32
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	4611      	mov	r1, r2
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	460b      	mov	r3, r1
 8010b50:	80fb      	strh	r3, [r7, #6]
 8010b52:	4613      	mov	r3, r2
 8010b54:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 8010b56:	68b8      	ldr	r0, [r7, #8]
 8010b58:	f7ff fbf8 	bl	801034c <lv_area_get_width>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 8010b60:	68b8      	ldr	r0, [r7, #8]
 8010b62:	f7ff fc0a 	bl	801037a <lv_area_get_height>
 8010b66:	4603      	mov	r3, r0
 8010b68:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MIN(w, h);
 8010b6a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8010b6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010b72:	4293      	cmp	r3, r2
 8010b74:	bfa8      	it	ge
 8010b76:	4613      	movge	r3, r2
 8010b78:	b21b      	sxth	r3, r3
 8010b7a:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 8010b7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	105b      	asrs	r3, r3, #1
 8010b84:	429a      	cmp	r2, r3
 8010b86:	dd02      	ble.n	8010b8e <lv_draw_mask_radius_init+0x4e>
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	105b      	asrs	r3, r3, #1
 8010b8c:	80fb      	strh	r3, [r7, #6]
    if(radius < 0) radius = 0;
 8010b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	da01      	bge.n	8010b9a <lv_draw_mask_radius_init+0x5a>
 8010b96:	2300      	movs	r3, #0
 8010b98:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	3308      	adds	r3, #8
 8010b9e:	68b9      	ldr	r1, [r7, #8]
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7ff fbb4 	bl	801030e <lv_area_copy>
    param->cfg.radius = radius;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	88fa      	ldrh	r2, [r7, #6]
 8010baa:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 8010bac:	7979      	ldrb	r1, [r7, #5]
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	7c93      	ldrb	r3, [r2, #18]
 8010bb2:	f361 0300 	bfi	r3, r1, #0, #1
 8010bb6:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	4a6d      	ldr	r2, [pc, #436]	; (8010d70 <lv_draw_mask_radius_init+0x230>)
 8010bbc:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2202      	movs	r2, #2
 8010bc2:	711a      	strb	r2, [r3, #4]

    if(radius == 0) {
 8010bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d103      	bne.n	8010bd4 <lv_draw_mask_radius_init+0x94>
        param->circle = NULL;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	615a      	str	r2, [r3, #20]
        return;
 8010bd2:	e0c9      	b.n	8010d68 <lv_draw_mask_radius_init+0x228>
    }

    uint32_t i;

    /*Try to reuse a circle cache entry*/
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	61fb      	str	r3, [r7, #28]
 8010bd8:	e050      	b.n	8010c7c <lv_draw_mask_radius_init+0x13c>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 8010bda:	4966      	ldr	r1, [pc, #408]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010bdc:	69fa      	ldr	r2, [r7, #28]
 8010bde:	4613      	mov	r3, r2
 8010be0:	00db      	lsls	r3, r3, #3
 8010be2:	1a9b      	subs	r3, r3, r2
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	440b      	add	r3, r1
 8010be8:	3318      	adds	r3, #24
 8010bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d13f      	bne.n	8010c76 <lv_draw_mask_radius_init+0x136>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8010bf6:	495f      	ldr	r1, [pc, #380]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010bf8:	69fa      	ldr	r2, [r7, #28]
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	00db      	lsls	r3, r3, #3
 8010bfe:	1a9b      	subs	r3, r3, r2
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	440b      	add	r3, r1
 8010c04:	3314      	adds	r3, #20
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	1c59      	adds	r1, r3, #1
 8010c0a:	485a      	ldr	r0, [pc, #360]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010c0c:	69fa      	ldr	r2, [r7, #28]
 8010c0e:	4613      	mov	r3, r2
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	1a9b      	subs	r3, r3, r2
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	4403      	add	r3, r0
 8010c18:	3314      	adds	r3, #20
 8010c1a:	6019      	str	r1, [r3, #0]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8010c1c:	4955      	ldr	r1, [pc, #340]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010c1e:	69fa      	ldr	r2, [r7, #28]
 8010c20:	4613      	mov	r3, r2
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	1a9b      	subs	r3, r3, r2
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	440b      	add	r3, r1
 8010c2a:	3310      	adds	r3, #16
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010c32:	2a0f      	cmp	r2, #15
 8010c34:	dd04      	ble.n	8010c40 <lv_draw_mask_radius_init+0x100>
 8010c36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010c3a:	1112      	asrs	r2, r2, #4
 8010c3c:	b212      	sxth	r2, r2
 8010c3e:	e000      	b.n	8010c42 <lv_draw_mask_radius_init+0x102>
 8010c40:	2201      	movs	r2, #1
 8010c42:	4413      	add	r3, r2
 8010c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010c48:	bfa8      	it	ge
 8010c4a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8010c4e:	4619      	mov	r1, r3
 8010c50:	4848      	ldr	r0, [pc, #288]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010c52:	69fa      	ldr	r2, [r7, #28]
 8010c54:	4613      	mov	r3, r2
 8010c56:	00db      	lsls	r3, r3, #3
 8010c58:	1a9b      	subs	r3, r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4403      	add	r3, r0
 8010c5e:	3310      	adds	r3, #16
 8010c60:	6019      	str	r1, [r3, #0]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 8010c62:	69fa      	ldr	r2, [r7, #28]
 8010c64:	4613      	mov	r3, r2
 8010c66:	00db      	lsls	r3, r3, #3
 8010c68:	1a9b      	subs	r3, r3, r2
 8010c6a:	009b      	lsls	r3, r3, #2
 8010c6c:	4a41      	ldr	r2, [pc, #260]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010c6e:	441a      	add	r2, r3
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	615a      	str	r2, [r3, #20]
            return;
 8010c74:	e078      	b.n	8010d68 <lv_draw_mask_radius_init+0x228>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	3301      	adds	r3, #1
 8010c7a:	61fb      	str	r3, [r7, #28]
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	2b03      	cmp	r3, #3
 8010c80:	d9ab      	bls.n	8010bda <lv_draw_mask_radius_init+0x9a>
        }
    }

    /*If not found find a free entry with lowest life*/
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 8010c82:	2300      	movs	r3, #0
 8010c84:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8010c86:	2300      	movs	r3, #0
 8010c88:	61fb      	str	r3, [r7, #28]
 8010c8a:	e02e      	b.n	8010cea <lv_draw_mask_radius_init+0x1aa>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 8010c8c:	4939      	ldr	r1, [pc, #228]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010c8e:	69fa      	ldr	r2, [r7, #28]
 8010c90:	4613      	mov	r3, r2
 8010c92:	00db      	lsls	r3, r3, #3
 8010c94:	1a9b      	subs	r3, r3, r2
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	440b      	add	r3, r1
 8010c9a:	3314      	adds	r3, #20
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d120      	bne.n	8010ce4 <lv_draw_mask_radius_init+0x1a4>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8010ca2:	69bb      	ldr	r3, [r7, #24]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d108      	bne.n	8010cba <lv_draw_mask_radius_init+0x17a>
 8010ca8:	69fa      	ldr	r2, [r7, #28]
 8010caa:	4613      	mov	r3, r2
 8010cac:	00db      	lsls	r3, r3, #3
 8010cae:	1a9b      	subs	r3, r3, r2
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	4a30      	ldr	r2, [pc, #192]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010cb4:	4413      	add	r3, r2
 8010cb6:	61bb      	str	r3, [r7, #24]
 8010cb8:	e014      	b.n	8010ce4 <lv_draw_mask_radius_init+0x1a4>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8010cba:	492e      	ldr	r1, [pc, #184]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010cbc:	69fa      	ldr	r2, [r7, #28]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	00db      	lsls	r3, r3, #3
 8010cc2:	1a9b      	subs	r3, r3, r2
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	440b      	add	r3, r1
 8010cc8:	3310      	adds	r3, #16
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	691b      	ldr	r3, [r3, #16]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	da07      	bge.n	8010ce4 <lv_draw_mask_radius_init+0x1a4>
 8010cd4:	69fa      	ldr	r2, [r7, #28]
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	00db      	lsls	r3, r3, #3
 8010cda:	1a9b      	subs	r3, r3, r2
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4a25      	ldr	r2, [pc, #148]	; (8010d74 <lv_draw_mask_radius_init+0x234>)
 8010ce0:	4413      	add	r3, r2
 8010ce2:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	61fb      	str	r3, [r7, #28]
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	2b03      	cmp	r3, #3
 8010cee:	d9cd      	bls.n	8010c8c <lv_draw_mask_radius_init+0x14c>
        }
    }

    if(!entry) {
 8010cf0:	69bb      	ldr	r3, [r7, #24]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d110      	bne.n	8010d18 <lv_draw_mask_radius_init+0x1d8>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8010cf6:	201c      	movs	r0, #28
 8010cf8:	f00f fd92 	bl	8020820 <lv_mem_alloc>
 8010cfc:	61b8      	str	r0, [r7, #24]
        LV_ASSERT_MALLOC(entry);
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d100      	bne.n	8010d06 <lv_draw_mask_radius_init+0x1c6>
 8010d04:	e7fe      	b.n	8010d04 <lv_draw_mask_radius_init+0x1c4>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8010d06:	211c      	movs	r1, #28
 8010d08:	69b8      	ldr	r0, [r7, #24]
 8010d0a:	f010 f9bd 	bl	8021088 <lv_memset_00>
        entry->life = -1;
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d14:	611a      	str	r2, [r3, #16]
 8010d16:	e01c      	b.n	8010d52 <lv_draw_mask_radius_init+0x212>
    }
    else {
        entry->used_cnt++;
 8010d18:	69bb      	ldr	r3, [r7, #24]
 8010d1a:	695b      	ldr	r3, [r3, #20]
 8010d1c:	1c5a      	adds	r2, r3, #1
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	615a      	str	r2, [r3, #20]
        entry->life = 0;
 8010d22:	69bb      	ldr	r3, [r7, #24]
 8010d24:	2200      	movs	r2, #0
 8010d26:	611a      	str	r2, [r3, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 8010d28:	69bb      	ldr	r3, [r7, #24]
 8010d2a:	691b      	ldr	r3, [r3, #16]
 8010d2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d30:	2a0f      	cmp	r2, #15
 8010d32:	dd04      	ble.n	8010d3e <lv_draw_mask_radius_init+0x1fe>
 8010d34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d38:	1112      	asrs	r2, r2, #4
 8010d3a:	b212      	sxth	r2, r2
 8010d3c:	e000      	b.n	8010d40 <lv_draw_mask_radius_init+0x200>
 8010d3e:	2201      	movs	r2, #1
 8010d40:	4413      	add	r3, r2
 8010d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010d46:	bfa8      	it	ge
 8010d48:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	69bb      	ldr	r3, [r7, #24]
 8010d50:	611a      	str	r2, [r3, #16]
    }

    param->circle = entry;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	69ba      	ldr	r2, [r7, #24]
 8010d56:	615a      	str	r2, [r3, #20]

    circ_calc_aa4(param->circle, radius);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	695b      	ldr	r3, [r3, #20]
 8010d5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d60:	4611      	mov	r1, r2
 8010d62:	4618      	mov	r0, r3
 8010d64:	f001 fae6 	bl	8012334 <circ_calc_aa4>
}
 8010d68:	3720      	adds	r7, #32
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	08011cf9 	.word	0x08011cf9
 8010d74:	2000094c 	.word	0x2000094c

08010d78 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b08a      	sub	sp, #40	; 0x28
 8010d7c:	af02      	add	r7, sp, #8
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	4608      	mov	r0, r1
 8010d82:	4611      	mov	r1, r2
 8010d84:	461a      	mov	r2, r3
 8010d86:	4603      	mov	r3, r0
 8010d88:	817b      	strh	r3, [r7, #10]
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	813b      	strh	r3, [r7, #8]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 8010d92:	893a      	ldrh	r2, [r7, #8]
 8010d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d96:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 8010da2:	897a      	ldrh	r2, [r7, #10]
 8010da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 8010db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db4:	6a1b      	ldr	r3, [r3, #32]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f040 80a7 	bne.w	8010f0a <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 8010dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d02c      	beq.n	8010e26 <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8010dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dce:	7c1b      	ldrb	r3, [r3, #16]
 8010dd0:	f003 0303 	and.w	r3, r3, #3
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d006      	beq.n	8010de8 <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8010dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ddc:	7c1b      	ldrb	r3, [r3, #16]
 8010dde:	f003 0303 	and.w	r3, r3, #3
 8010de2:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d101      	bne.n	8010dec <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8010de8:	2301      	movs	r3, #1
 8010dea:	e0b4      	b.n	8010f56 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8010dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dee:	7c1b      	ldrb	r3, [r3, #16]
 8010df0:	f003 0303 	and.w	r3, r3, #3
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	2b02      	cmp	r3, #2
 8010df8:	d106      	bne.n	8010e08 <lv_draw_mask_line+0x90>
 8010dfa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e02:	da01      	bge.n	8010e08 <lv_draw_mask_line+0x90>
 8010e04:	2301      	movs	r3, #1
 8010e06:	e0a6      	b.n	8010f56 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8010e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0a:	7c1b      	ldrb	r3, [r3, #16]
 8010e0c:	f003 0303 	and.w	r3, r3, #3
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	2b03      	cmp	r3, #3
 8010e14:	d105      	bne.n	8010e22 <lv_draw_mask_line+0xaa>
 8010e16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	dd01      	ble.n	8010e22 <lv_draw_mask_line+0xaa>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e099      	b.n	8010f56 <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8010e22:	2300      	movs	r3, #0
 8010e24:	e097      	b.n	8010f56 <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	7c1b      	ldrb	r3, [r3, #16]
 8010e2a:	f003 0303 	and.w	r3, r3, #3
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	2b02      	cmp	r3, #2
 8010e32:	d006      	beq.n	8010e42 <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	7c1b      	ldrb	r3, [r3, #16]
 8010e38:	f003 0303 	and.w	r3, r3, #3
 8010e3c:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8010e3e:	2b03      	cmp	r3, #3
 8010e40:	d101      	bne.n	8010e46 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8010e42:	2301      	movs	r3, #1
 8010e44:	e087      	b.n	8010f56 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8010e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e48:	7c1b      	ldrb	r3, [r3, #16]
 8010e4a:	f003 0303 	and.w	r3, r3, #3
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d105      	bne.n	8010e60 <lv_draw_mask_line+0xe8>
 8010e54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	dd01      	ble.n	8010e60 <lv_draw_mask_line+0xe8>
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	e07a      	b.n	8010f56 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8010e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e62:	7c1b      	ldrb	r3, [r3, #16]
 8010e64:	f003 0303 	and.w	r3, r3, #3
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d125      	bne.n	8010eba <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8010e6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8010e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e76:	4413      	add	r3, r2
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	da01      	bge.n	8010e80 <lv_draw_mask_line+0x108>
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	e06a      	b.n	8010f56 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 8010e80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010e84:	425b      	negs	r3, r3
 8010e86:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	da01      	bge.n	8010e92 <lv_draw_mask_line+0x11a>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	e061      	b.n	8010f56 <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	db0e      	blt.n	8010eb6 <lv_draw_mask_line+0x13e>
 8010e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e9c:	697a      	ldr	r2, [r7, #20]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	da09      	bge.n	8010eb6 <lv_draw_mask_line+0x13e>
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	18d0      	adds	r0, r2, r3
 8010ea8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	f010 f8e9 	bl	8021088 <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8010eb6:	2302      	movs	r3, #2
 8010eb8:	e04d      	b.n	8010f56 <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 8010eba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8010ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	da01      	bge.n	8010ecc <lv_draw_mask_line+0x154>
 8010ec8:	2300      	movs	r3, #0
 8010eca:	e044      	b.n	8010f56 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 8010ecc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010ed0:	425b      	negs	r3, r3
 8010ed2:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	da01      	bge.n	8010ede <lv_draw_mask_line+0x166>
 8010eda:	2300      	movs	r3, #0
 8010edc:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 8010ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ee2:	69fa      	ldr	r2, [r7, #28]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	db01      	blt.n	8010eec <lv_draw_mask_line+0x174>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	e034      	b.n	8010f56 <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	db09      	blt.n	8010f06 <lv_draw_mask_line+0x18e>
 8010ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ef6:	69fa      	ldr	r2, [r7, #28]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	da04      	bge.n	8010f06 <lv_draw_mask_line+0x18e>
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	4619      	mov	r1, r3
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f010 f8c1 	bl	8021088 <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8010f06:	2302      	movs	r3, #2
 8010f08:	e025      	b.n	8010f56 <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 8010f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f10:	f003 0301 	and.w	r3, r3, #1
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00e      	beq.n	8010f38 <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 8010f1a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010f1e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010f22:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f000 f816 	bl	8010f5e <line_mask_flat>
 8010f32:	4603      	mov	r3, r0
 8010f34:	76fb      	strb	r3, [r7, #27]
 8010f36:	e00d      	b.n	8010f54 <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 8010f38:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010f3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010f40:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	4603      	mov	r3, r0
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f000 f991 	bl	8011272 <line_mask_steep>
 8010f50:	4603      	mov	r3, r0
 8010f52:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 8010f54:	7efb      	ldrb	r3, [r7, #27]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3720      	adds	r7, #32
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 8010f5e:	b590      	push	{r4, r7, lr}
 8010f60:	b08d      	sub	sp, #52	; 0x34
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	60f8      	str	r0, [r7, #12]
 8010f66:	4608      	mov	r0, r1
 8010f68:	4611      	mov	r1, r2
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	817b      	strh	r3, [r7, #10]
 8010f70:	460b      	mov	r3, r1
 8010f72:	813b      	strh	r3, [r7, #8]
 8010f74:	4613      	mov	r3, r2
 8010f76:	80fb      	strh	r3, [r7, #6]

    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8010f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f7a:	69db      	ldr	r3, [r3, #28]
 8010f7c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8010f80:	fb02 f303 	mul.w	r3, r2, r3
 8010f84:	129b      	asrs	r3, r3, #10
 8010f86:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 8010f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f8a:	69db      	ldr	r3, [r3, #28]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	dd10      	ble.n	8010fb2 <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 8010f90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010f94:	69fa      	ldr	r2, [r7, #28]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	dd1c      	ble.n	8010fd4 <line_mask_flat+0x76>
            if(p->inv) {
 8010f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fa0:	f003 0302 	and.w	r3, r3, #2
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d001      	beq.n	8010fae <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 8010faa:	2301      	movs	r3, #1
 8010fac:	e15d      	b.n	801126a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	e15b      	b.n	801126a <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 8010fb2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010fb6:	69fa      	ldr	r2, [r7, #28]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	da0b      	bge.n	8010fd4 <line_mask_flat+0x76>
            if(p->inv) {
 8010fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fc2:	f003 0302 	and.w	r3, r3, #2
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d001      	beq.n	8010fd0 <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e14c      	b.n	801126a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	e14a      	b.n	801126a <line_mask_flat+0x30c>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 8010fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fd6:	69db      	ldr	r3, [r3, #28]
 8010fd8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010fdc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010fe0:	440a      	add	r2, r1
 8010fe2:	fb02 f303 	mul.w	r3, r2, r3
 8010fe6:	129b      	asrs	r3, r3, #10
 8010fe8:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 8010fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fec:	69db      	ldr	r3, [r3, #28]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	dd10      	ble.n	8011014 <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 8010ff2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010ff6:	69fa      	ldr	r2, [r7, #28]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	da1c      	bge.n	8011036 <line_mask_flat+0xd8>
            if(p->inv) {
 8010ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011002:	f003 0302 	and.w	r3, r3, #2
 8011006:	b2db      	uxtb	r3, r3
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 801100c:	2300      	movs	r3, #0
 801100e:	e12c      	b.n	801126a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8011010:	2301      	movs	r3, #1
 8011012:	e12a      	b.n	801126a <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 8011014:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011018:	69fa      	ldr	r2, [r7, #28]
 801101a:	429a      	cmp	r2, r3
 801101c:	dd0b      	ble.n	8011036 <line_mask_flat+0xd8>
            if(p->inv) {
 801101e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011024:	f003 0302 	and.w	r3, r3, #2
 8011028:	b2db      	uxtb	r3, r3
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 801102e:	2300      	movs	r3, #0
 8011030:	e11b      	b.n	801126a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8011032:	2301      	movs	r3, #1
 8011034:	e119      	b.n	801126a <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 8011036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011038:	69db      	ldr	r3, [r3, #28]
 801103a:	2b00      	cmp	r3, #0
 801103c:	dd09      	ble.n	8011052 <line_mask_flat+0xf4>
 801103e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011042:	021b      	lsls	r3, r3, #8
 8011044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011046:	6992      	ldr	r2, [r2, #24]
 8011048:	fb02 f303 	mul.w	r3, r2, r3
 801104c:	129b      	asrs	r3, r3, #10
 801104e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011050:	e009      	b.n	8011066 <line_mask_flat+0x108>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8011052:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011056:	3301      	adds	r3, #1
 8011058:	021b      	lsls	r3, r3, #8
 801105a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801105c:	6992      	ldr	r2, [r2, #24]
 801105e:	fb02 f303 	mul.w	r3, r2, r3
 8011062:	129b      	asrs	r3, r3, #10
 8011064:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 8011066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011068:	121b      	asrs	r3, r3, #8
 801106a:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 801106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106e:	b2db      	uxtb	r3, r3
 8011070:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d102      	bne.n	801107e <line_mask_flat+0x120>
 8011078:	23ff      	movs	r3, #255	; 0xff
 801107a:	62bb      	str	r3, [r7, #40]	; 0x28
 801107c:	e00a      	b.n	8011094 <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011086:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011088:	fb02 f303 	mul.w	r3, r2, r3
 801108c:	121b      	asrs	r3, r3, #8
 801108e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011092:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 8011094:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011098:	69ba      	ldr	r2, [r7, #24]
 801109a:	1ad3      	subs	r3, r2, r3
 801109c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d06c      	beq.n	801117e <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 80110a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	db2c      	blt.n	8011104 <line_mask_flat+0x1a6>
 80110aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110b0:	429a      	cmp	r2, r3
 80110b2:	da27      	bge.n	8011104 <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80110ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110bc:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80110c0:	fb02 f303 	mul.w	r3, r2, r3
 80110c4:	125b      	asrs	r3, r3, #9
 80110c6:	b2db      	uxtb	r3, r3
 80110c8:	43db      	mvns	r3, r3
 80110ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 80110ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110d4:	f003 0302 	and.w	r3, r3, #2
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d004      	beq.n	80110e8 <line_mask_flat+0x18a>
 80110de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80110e2:	43db      	mvns	r3, r3
 80110e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80110e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	4413      	add	r3, r2
 80110ee:	7818      	ldrb	r0, [r3, #0]
 80110f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f2:	68fa      	ldr	r2, [r7, #12]
 80110f4:	18d4      	adds	r4, r2, r3
 80110f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80110fa:	4619      	mov	r1, r3
 80110fc:	f001 fc9a 	bl	8012a34 <mask_mix>
 8011100:	4603      	mov	r3, r0
 8011102:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8011104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011106:	3301      	adds	r3, #1
 8011108:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 801110a:	e038      	b.n	801117e <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110e:	2b00      	cmp	r3, #0
 8011110:	db28      	blt.n	8011164 <line_mask_flat+0x206>
 8011112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011118:	429a      	cmp	r2, r3
 801111a:	da23      	bge.n	8011164 <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 801111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111e:	b2da      	uxtb	r2, r3
 8011120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011124:	105b      	asrs	r3, r3, #1
 8011126:	b2db      	uxtb	r3, r3
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 801112e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011134:	f003 0302 	and.w	r3, r3, #2
 8011138:	b2db      	uxtb	r3, r3
 801113a:	2b00      	cmp	r3, #0
 801113c:	d004      	beq.n	8011148 <line_mask_flat+0x1ea>
 801113e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011142:	43db      	mvns	r3, r3
 8011144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8011148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	4413      	add	r3, r2
 801114e:	7818      	ldrb	r0, [r3, #0]
 8011150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	18d4      	adds	r4, r2, r3
 8011156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801115a:	4619      	mov	r1, r3
 801115c:	f001 fc6a 	bl	8012a34 <mask_mix>
 8011160:	4603      	mov	r3, r0
 8011162:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 8011164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801116a:	1ad3      	subs	r3, r2, r3
 801116c:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 801116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011170:	3301      	adds	r3, #1
 8011172:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 8011174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801117a:	429a      	cmp	r2, r3
 801117c:	da05      	bge.n	801118a <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 801117e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011184:	429a      	cmp	r2, r3
 8011186:	dcc1      	bgt.n	801110c <line_mask_flat+0x1ae>
 8011188:	e000      	b.n	801118c <line_mask_flat+0x22e>
        if(k >= len) break;
 801118a:	bf00      	nop
    }

    if(k < len && k >= 0) {
 801118c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011192:	429a      	cmp	r2, r3
 8011194:	da34      	bge.n	8011200 <line_mask_flat+0x2a2>
 8011196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011198:	2b00      	cmp	r3, #0
 801119a:	db31      	blt.n	8011200 <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 801119c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801119e:	699b      	ldr	r3, [r3, #24]
 80111a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111a2:	fb02 f303 	mul.w	r3, r2, r3
 80111a6:	129b      	asrs	r3, r3, #10
 80111a8:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 80111aa:	693b      	ldr	r3, [r7, #16]
 80111ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111ae:	fb02 f303 	mul.w	r3, r2, r3
 80111b2:	125b      	asrs	r3, r3, #9
 80111b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 80111b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111ba:	69db      	ldr	r3, [r3, #28]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	da04      	bge.n	80111ca <line_mask_flat+0x26c>
 80111c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111c4:	43db      	mvns	r3, r3
 80111c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 80111ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111d0:	f003 0302 	and.w	r3, r3, #2
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d004      	beq.n	80111e4 <line_mask_flat+0x286>
 80111da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111de:	43db      	mvns	r3, r3
 80111e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 80111e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e6:	68fa      	ldr	r2, [r7, #12]
 80111e8:	4413      	add	r3, r2
 80111ea:	7818      	ldrb	r0, [r3, #0]
 80111ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ee:	68fa      	ldr	r2, [r7, #12]
 80111f0:	18d4      	adds	r4, r2, r3
 80111f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111f6:	4619      	mov	r1, r3
 80111f8:	f001 fc1c 	bl	8012a34 <mask_mix>
 80111fc:	4603      	mov	r3, r0
 80111fe:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 8011200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011206:	f003 0302 	and.w	r3, r3, #2
 801120a:	b2db      	uxtb	r3, r3
 801120c:	2b00      	cmp	r3, #0
 801120e:	d014      	beq.n	801123a <line_mask_flat+0x2dc>
        k = xei - abs_x;
 8011210:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011214:	69ba      	ldr	r2, [r7, #24]
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 801121a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011220:	429a      	cmp	r2, r3
 8011222:	dd01      	ble.n	8011228 <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 8011224:	2300      	movs	r3, #0
 8011226:	e020      	b.n	801126a <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 8011228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122a:	2b00      	cmp	r3, #0
 801122c:	db1c      	blt.n	8011268 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[0], k);
 801122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011230:	4619      	mov	r1, r3
 8011232:	68f8      	ldr	r0, [r7, #12]
 8011234:	f00f ff28 	bl	8021088 <lv_memset_00>
 8011238:	e016      	b.n	8011268 <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 801123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123c:	3301      	adds	r3, #1
 801123e:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 8011240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011242:	2b00      	cmp	r3, #0
 8011244:	da01      	bge.n	801124a <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 8011246:	2300      	movs	r3, #0
 8011248:	e00f      	b.n	801126a <line_mask_flat+0x30c>
        }
        if(k <= len) {
 801124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801124e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011250:	429a      	cmp	r2, r3
 8011252:	dc09      	bgt.n	8011268 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[k], len - k);
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	68fa      	ldr	r2, [r7, #12]
 8011258:	18d0      	adds	r0, r2, r3
 801125a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	4619      	mov	r1, r3
 8011264:	f00f ff10 	bl	8021088 <lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8011268:	2302      	movs	r3, #2
}
 801126a:	4618      	mov	r0, r3
 801126c:	3734      	adds	r7, #52	; 0x34
 801126e:	46bd      	mov	sp, r7
 8011270:	bd90      	pop	{r4, r7, pc}

08011272 <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 8011272:	b590      	push	{r4, r7, lr}
 8011274:	b091      	sub	sp, #68	; 0x44
 8011276:	af00      	add	r7, sp, #0
 8011278:	60f8      	str	r0, [r7, #12]
 801127a:	4608      	mov	r0, r1
 801127c:	4611      	mov	r1, r2
 801127e:	461a      	mov	r2, r3
 8011280:	4603      	mov	r3, r0
 8011282:	817b      	strh	r3, [r7, #10]
 8011284:	460b      	mov	r3, r1
 8011286:	813b      	strh	r3, [r7, #8]
 8011288:	4613      	mov	r3, r2
 801128a:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /*At the beginning of the mask if the limit line is greater than the mask's y.
     *Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 801128c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801128e:	699b      	ldr	r3, [r3, #24]
 8011290:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011294:	fb02 f303 	mul.w	r3, r2, r3
 8011298:	129b      	asrs	r3, r3, #10
 801129a:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 801129c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801129e:	699b      	ldr	r3, [r3, #24]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	dd02      	ble.n	80112aa <line_mask_steep+0x38>
 80112a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a6:	3301      	adds	r3, #1
 80112a8:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 80112aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80112ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112b0:	429a      	cmp	r2, r3
 80112b2:	da0b      	bge.n	80112cc <line_mask_steep+0x5a>
        if(p->inv) {
 80112b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112ba:	f003 0302 	and.w	r3, r3, #2
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d001      	beq.n	80112c8 <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80112c4:	2301      	movs	r3, #1
 80112c6:	e213      	b.n	80116f0 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 80112c8:	2300      	movs	r3, #0
 80112ca:	e211      	b.n	80116f0 <line_mask_steep+0x47e>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 80112cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ce:	699b      	ldr	r3, [r3, #24]
 80112d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80112d4:	fb02 f303 	mul.w	r3, r2, r3
 80112d8:	129b      	asrs	r3, r3, #10
 80112da:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 80112dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80112e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112e4:	4413      	add	r3, r2
 80112e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112e8:	429a      	cmp	r2, r3
 80112ea:	dd0b      	ble.n	8011304 <line_mask_steep+0x92>
        if(p->inv) {
 80112ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112f2:	f003 0302 	and.w	r3, r3, #2
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d001      	beq.n	8011300 <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 80112fc:	2300      	movs	r3, #0
 80112fe:	e1f7      	b.n	80116f0 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 8011300:	2301      	movs	r3, #1
 8011302:	e1f5      	b.n	80116f0 <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y * 256) * p->xy_steep) >> 10;
 8011304:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011308:	021b      	lsls	r3, r3, #8
 801130a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801130c:	6992      	ldr	r2, [r2, #24]
 801130e:	fb02 f303 	mul.w	r3, r2, r3
 8011312:	129b      	asrs	r3, r3, #10
 8011314:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 8011316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011318:	121b      	asrs	r3, r3, #8
 801131a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 801131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131e:	b2db      	uxtb	r3, r3
 8011320:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8011322:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011326:	3301      	adds	r3, #1
 8011328:	021b      	lsls	r3, r3, #8
 801132a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801132c:	6992      	ldr	r2, [r2, #24]
 801132e:	fb02 f303 	mul.w	r3, r2, r3
 8011332:	129b      	asrs	r3, r3, #10
 8011334:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 8011336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011338:	121b      	asrs	r3, r3, #8
 801133a:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 801133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133e:	b2db      	uxtb	r3, r3
 8011340:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 8011342:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 801134c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	429a      	cmp	r2, r3
 8011352:	d00d      	beq.n	8011370 <line_mask_steep+0xfe>
 8011354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011356:	699b      	ldr	r3, [r3, #24]
 8011358:	2b00      	cmp	r3, #0
 801135a:	da09      	bge.n	8011370 <line_mask_steep+0xfe>
 801135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135e:	2b00      	cmp	r3, #0
 8011360:	d106      	bne.n	8011370 <line_mask_steep+0xfe>
        xsf = 0xFF;
 8011362:	23ff      	movs	r3, #255	; 0xff
 8011364:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 8011366:	6a3b      	ldr	r3, [r7, #32]
 8011368:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 801136a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801136c:	3b01      	subs	r3, #1
 801136e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 8011370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011372:	6a3b      	ldr	r3, [r7, #32]
 8011374:	429a      	cmp	r2, r3
 8011376:	d165      	bne.n	8011444 <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 8011378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137a:	2b00      	cmp	r3, #0
 801137c:	db25      	blt.n	80113ca <line_mask_steep+0x158>
 801137e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011382:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011384:	429a      	cmp	r2, r3
 8011386:	da20      	bge.n	80113ca <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 8011388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801138a:	69fb      	ldr	r3, [r7, #28]
 801138c:	4413      	add	r3, r2
 801138e:	105b      	asrs	r3, r3, #1
 8011390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 8011394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801139a:	f003 0302 	and.w	r3, r3, #2
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d004      	beq.n	80113ae <line_mask_steep+0x13c>
 80113a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113a8:	43db      	mvns	r3, r3
 80113aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80113ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b0:	68fa      	ldr	r2, [r7, #12]
 80113b2:	4413      	add	r3, r2
 80113b4:	7818      	ldrb	r0, [r3, #0]
 80113b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b8:	68fa      	ldr	r2, [r7, #12]
 80113ba:	18d4      	adds	r4, r2, r3
 80113bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113c0:	4619      	mov	r1, r3
 80113c2:	f001 fb37 	bl	8012a34 <mask_mix>
 80113c6:	4603      	mov	r3, r0
 80113c8:	7023      	strb	r3, [r4, #0]
        }
        k++;
 80113ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113cc:	3301      	adds	r3, #1
 80113ce:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 80113d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113d6:	f003 0302 	and.w	r3, r3, #2
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d015      	beq.n	801140c <line_mask_steep+0x19a>
            k = xsi - abs_x;
 80113e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80113e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113e6:	1ad3      	subs	r3, r2, r3
 80113e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 80113ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80113f0:	429a      	cmp	r2, r3
 80113f2:	db01      	blt.n	80113f8 <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 80113f4:	2300      	movs	r3, #0
 80113f6:	e17b      	b.n	80116f0 <line_mask_steep+0x47e>
            }
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 80113f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f2c0 8177 	blt.w	80116ee <line_mask_steep+0x47c>
 8011400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011402:	4619      	mov	r1, r3
 8011404:	68f8      	ldr	r0, [r7, #12]
 8011406:	f00f fe3f 	bl	8021088 <lv_memset_00>
 801140a:	e170      	b.n	80116ee <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 801140c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011412:	429a      	cmp	r2, r3
 8011414:	dd02      	ble.n	801141c <line_mask_steep+0x1aa>
 8011416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801141a:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 801141c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801141e:	2b00      	cmp	r3, #0
 8011420:	d101      	bne.n	8011426 <line_mask_steep+0x1b4>
 8011422:	2300      	movs	r3, #0
 8011424:	e164      	b.n	80116f0 <line_mask_steep+0x47e>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8011426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011428:	2b00      	cmp	r3, #0
 801142a:	f340 8160 	ble.w	80116ee <line_mask_steep+0x47c>
 801142e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	18d0      	adds	r0, r2, r3
 8011434:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	4619      	mov	r1, r3
 801143e:	f00f fe23 	bl	8021088 <lv_memset_00>
 8011442:	e154      	b.n	80116ee <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 8011444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011446:	699b      	ldr	r3, [r3, #24]
 8011448:	2b00      	cmp	r3, #0
 801144a:	f280 80a7 	bge.w	801159c <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 801144e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011450:	69db      	ldr	r3, [r3, #28]
 8011452:	425b      	negs	r3, r3
 8011454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011456:	fb02 f303 	mul.w	r3, r2, r3
 801145a:	129b      	asrs	r3, r3, #10
 801145c:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 801145e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011460:	2b00      	cmp	r3, #0
 8011462:	db26      	blt.n	80114b2 <line_mask_steep+0x240>
 8011464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801146a:	429a      	cmp	r2, r3
 801146c:	da21      	bge.n	80114b2 <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011472:	fb02 f303 	mul.w	r3, r2, r3
 8011476:	125b      	asrs	r3, r3, #9
 8011478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 801147c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801147e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011482:	f003 0302 	and.w	r3, r3, #2
 8011486:	b2db      	uxtb	r3, r3
 8011488:	2b00      	cmp	r3, #0
 801148a:	d004      	beq.n	8011496 <line_mask_steep+0x224>
 801148c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011490:	43db      	mvns	r3, r3
 8011492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8011496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	4413      	add	r3, r2
 801149c:	7818      	ldrb	r0, [r3, #0]
 801149e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114a0:	68fa      	ldr	r2, [r7, #12]
 80114a2:	18d4      	adds	r4, r2, r3
 80114a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114a8:	4619      	mov	r1, r3
 80114aa:	f001 fac3 	bl	8012a34 <mask_mix>
 80114ae:	4603      	mov	r3, r0
 80114b0:	7023      	strb	r3, [r4, #0]
            }
            k--;
 80114b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b4:	3b01      	subs	r3, #1
 80114b6:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80114be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114c0:	6992      	ldr	r2, [r2, #24]
 80114c2:	4252      	negs	r2, r2
 80114c4:	fb02 f303 	mul.w	r3, r2, r3
 80114c8:	129b      	asrs	r3, r3, #10
 80114ca:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 80114cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	db2a      	blt.n	8011528 <line_mask_steep+0x2b6>
 80114d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80114d8:	429a      	cmp	r2, r3
 80114da:	da25      	bge.n	8011528 <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80114e2:	693a      	ldr	r2, [r7, #16]
 80114e4:	fb02 f303 	mul.w	r3, r2, r3
 80114e8:	125b      	asrs	r3, r3, #9
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	43db      	mvns	r3, r3
 80114ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 80114f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114f8:	f003 0302 	and.w	r3, r3, #2
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d004      	beq.n	801150c <line_mask_steep+0x29a>
 8011502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011506:	43db      	mvns	r3, r3
 8011508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801150c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801150e:	68fa      	ldr	r2, [r7, #12]
 8011510:	4413      	add	r3, r2
 8011512:	7818      	ldrb	r0, [r3, #0]
 8011514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011516:	68fa      	ldr	r2, [r7, #12]
 8011518:	18d4      	adds	r4, r2, r3
 801151a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801151e:	4619      	mov	r1, r3
 8011520:	f001 fa88 	bl	8012a34 <mask_mix>
 8011524:	4603      	mov	r3, r0
 8011526:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 8011528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801152a:	3302      	adds	r3, #2
 801152c:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 801152e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011534:	f003 0302 	and.w	r3, r3, #2
 8011538:	b2db      	uxtb	r3, r3
 801153a:	2b00      	cmp	r3, #0
 801153c:	d018      	beq.n	8011570 <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 801153e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	3b01      	subs	r3, #1
 8011548:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 801154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801154e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011550:	429a      	cmp	r2, r3
 8011552:	dd03      	ble.n	801155c <line_mask_steep+0x2ea>
 8011554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011558:	63fb      	str	r3, [r7, #60]	; 0x3c
 801155a:	e0c8      	b.n	80116ee <line_mask_steep+0x47c>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 801155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801155e:	2b00      	cmp	r3, #0
 8011560:	f340 80c5 	ble.w	80116ee <line_mask_steep+0x47c>
 8011564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011566:	4619      	mov	r1, r3
 8011568:	68f8      	ldr	r0, [r7, #12]
 801156a:	f00f fd8d 	bl	8021088 <lv_memset_00>
 801156e:	e0be      	b.n	80116ee <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8011570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011576:	429a      	cmp	r2, r3
 8011578:	dd01      	ble.n	801157e <line_mask_steep+0x30c>
 801157a:	2301      	movs	r3, #1
 801157c:	e0b8      	b.n	80116f0 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 801157e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011580:	2b00      	cmp	r3, #0
 8011582:	f2c0 80b4 	blt.w	80116ee <line_mask_steep+0x47c>
 8011586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	18d0      	adds	r0, r2, r3
 801158c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	4619      	mov	r1, r3
 8011596:	f00f fd77 	bl	8021088 <lv_memset_00>
 801159a:	e0a8      	b.n	80116ee <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 801159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80115a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115a4:	69d2      	ldr	r2, [r2, #28]
 80115a6:	fb02 f303 	mul.w	r3, r2, r3
 80115aa:	129b      	asrs	r3, r3, #10
 80115ac:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 80115ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	db2a      	blt.n	801160a <line_mask_steep+0x398>
 80115b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80115ba:	429a      	cmp	r2, r3
 80115bc:	da25      	bge.n	801160a <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 80115be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80115c4:	69ba      	ldr	r2, [r7, #24]
 80115c6:	fb02 f303 	mul.w	r3, r2, r3
 80115ca:	125b      	asrs	r3, r3, #9
 80115cc:	b2db      	uxtb	r3, r3
 80115ce:	43db      	mvns	r3, r3
 80115d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 80115d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115da:	f003 0302 	and.w	r3, r3, #2
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d004      	beq.n	80115ee <line_mask_steep+0x37c>
 80115e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115e8:	43db      	mvns	r3, r3
 80115ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80115ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f0:	68fa      	ldr	r2, [r7, #12]
 80115f2:	4413      	add	r3, r2
 80115f4:	7818      	ldrb	r0, [r3, #0]
 80115f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f8:	68fa      	ldr	r2, [r7, #12]
 80115fa:	18d4      	adds	r4, r2, r3
 80115fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011600:	4619      	mov	r1, r3
 8011602:	f001 fa17 	bl	8012a34 <mask_mix>
 8011606:	4603      	mov	r3, r0
 8011608:	7023      	strb	r3, [r4, #0]
            }

            k++;
 801160a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801160c:	3301      	adds	r3, #1
 801160e:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8011610:	69bb      	ldr	r3, [r7, #24]
 8011612:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011616:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011618:	6992      	ldr	r2, [r2, #24]
 801161a:	fb02 f303 	mul.w	r3, r2, r3
 801161e:	129b      	asrs	r3, r3, #10
 8011620:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 8011622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011624:	2b00      	cmp	r3, #0
 8011626:	db28      	blt.n	801167a <line_mask_steep+0x408>
 8011628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801162c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801162e:	429a      	cmp	r2, r3
 8011630:	da23      	bge.n	801167a <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011638:	697a      	ldr	r2, [r7, #20]
 801163a:	fb02 f303 	mul.w	r3, r2, r3
 801163e:	125b      	asrs	r3, r3, #9
 8011640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8011644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801164a:	f003 0302 	and.w	r3, r3, #2
 801164e:	b2db      	uxtb	r3, r3
 8011650:	2b00      	cmp	r3, #0
 8011652:	d004      	beq.n	801165e <line_mask_steep+0x3ec>
 8011654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011658:	43db      	mvns	r3, r3
 801165a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801165e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011660:	68fa      	ldr	r2, [r7, #12]
 8011662:	4413      	add	r3, r2
 8011664:	7818      	ldrb	r0, [r3, #0]
 8011666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	18d4      	adds	r4, r2, r3
 801166c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011670:	4619      	mov	r1, r3
 8011672:	f001 f9df 	bl	8012a34 <mask_mix>
 8011676:	4603      	mov	r3, r0
 8011678:	7023      	strb	r3, [r4, #0]
            }
            k++;
 801167a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801167c:	3301      	adds	r3, #1
 801167e:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8011680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011686:	f003 0302 	and.w	r3, r3, #2
 801168a:	b2db      	uxtb	r3, r3
 801168c:	2b00      	cmp	r3, #0
 801168e:	d014      	beq.n	80116ba <line_mask_steep+0x448>
                k = xsi - abs_x;
 8011690:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 801169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801169e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80116a0:	429a      	cmp	r2, r3
 80116a2:	dd01      	ble.n	80116a8 <line_mask_steep+0x436>
 80116a4:	2300      	movs	r3, #0
 80116a6:	e023      	b.n	80116f0 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 80116a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	db1f      	blt.n	80116ee <line_mask_steep+0x47c>
 80116ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116b0:	4619      	mov	r1, r3
 80116b2:	68f8      	ldr	r0, [r7, #12]
 80116b4:	f00f fce8 	bl	8021088 <lv_memset_00>
 80116b8:	e019      	b.n	80116ee <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 80116ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80116c0:	429a      	cmp	r2, r3
 80116c2:	dd02      	ble.n	80116ca <line_mask_steep+0x458>
 80116c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116c8:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 80116ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d101      	bne.n	80116d4 <line_mask_steep+0x462>
 80116d0:	2300      	movs	r3, #0
 80116d2:	e00d      	b.n	80116f0 <line_mask_steep+0x47e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 80116d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	dd09      	ble.n	80116ee <line_mask_steep+0x47c>
 80116da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	18d0      	adds	r0, r2, r3
 80116e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80116e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	4619      	mov	r1, r3
 80116ea:	f00f fccd 	bl	8021088 <lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 80116ee:	2302      	movs	r3, #2
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3744      	adds	r7, #68	; 0x44
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd90      	pop	{r4, r7, pc}

080116f8 <lv_draw_mask_angle>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_angle(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                   lv_coord_t abs_y, lv_coord_t len,
                                                                   lv_draw_mask_angle_param_t * p)
{
 80116f8:	b590      	push	{r4, r7, lr}
 80116fa:	b097      	sub	sp, #92	; 0x5c
 80116fc:	af02      	add	r7, sp, #8
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	4608      	mov	r0, r1
 8011702:	4611      	mov	r1, r2
 8011704:	461a      	mov	r2, r3
 8011706:	4603      	mov	r3, r0
 8011708:	817b      	strh	r3, [r7, #10]
 801170a:	460b      	mov	r3, r1
 801170c:	813b      	strh	r3, [r7, #8]
 801170e:	4613      	mov	r3, r2
 8011710:	80fb      	strh	r3, [r7, #6]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8011712:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011718:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801171c:	1a9b      	subs	r3, r3, r2
 801171e:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8011720:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011724:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011726:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801172a:	1a9b      	subs	r3, r3, r2
 801172c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801172e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011730:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011734:	2bb3      	cmp	r3, #179	; 0xb3
 8011736:	f300 810c 	bgt.w	8011952 <lv_draw_mask_angle+0x25a>
 801173a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801173c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011740:	2bb3      	cmp	r3, #179	; 0xb3
 8011742:	f300 8106 	bgt.w	8011952 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8011746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011748:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801174c:	2b00      	cmp	r3, #0
 801174e:	f000 8100 	beq.w	8011952 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8011752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011754:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011758:	2b00      	cmp	r3, #0
 801175a:	f000 80fa 	beq.w	8011952 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle > p->cfg.end_angle) {
 801175e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011760:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8011764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011766:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 801176a:	429a      	cmp	r2, r3
 801176c:	f340 80f1 	ble.w	8011952 <lv_draw_mask_angle+0x25a>

        if(abs_y < p->cfg.vertex_p.y) {
 8011770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011772:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011776:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801177a:	429a      	cmp	r2, r3
 801177c:	da01      	bge.n	8011782 <lv_draw_mask_angle+0x8a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 801177e:	2301      	movs	r3, #1
 8011780:	e2b6      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8011782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011788:	fb02 f303 	mul.w	r3, r2, r3
 801178c:	129b      	asrs	r3, r3, #10
 801178e:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8011790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011792:	3301      	adds	r3, #1
 8011794:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011796:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8011798:	fb02 f303 	mul.w	r3, r2, r3
 801179c:	129b      	asrs	r3, r3, #10
 801179e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 80117a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80117a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80117aa:	dd0b      	ble.n	80117c4 <lv_draw_mask_angle+0xcc>
 80117ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80117b2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80117b6:	da05      	bge.n	80117c4 <lv_draw_mask_angle+0xcc>
 80117b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	da02      	bge.n	80117c4 <lv_draw_mask_angle+0xcc>
 80117be:	2300      	movs	r3, #0
 80117c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117c2:	e01f      	b.n	8011804 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 80117c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	dd0a      	ble.n	80117e4 <lv_draw_mask_angle+0xec>
 80117ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80117d4:	2b5a      	cmp	r3, #90	; 0x5a
 80117d6:	dc05      	bgt.n	80117e4 <lv_draw_mask_angle+0xec>
 80117d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117da:	2b00      	cmp	r3, #0
 80117dc:	da02      	bge.n	80117e4 <lv_draw_mask_angle+0xec>
 80117de:	2300      	movs	r3, #0
 80117e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117e2:	e00f      	b.n	8011804 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 80117e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80117ea:	2b5a      	cmp	r3, #90	; 0x5a
 80117ec:	dd0a      	ble.n	8011804 <lv_draw_mask_angle+0x10c>
 80117ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80117f4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80117f8:	da04      	bge.n	8011804 <lv_draw_mask_angle+0x10c>
 80117fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	dd01      	ble.n	8011804 <lv_draw_mask_angle+0x10c>
 8011800:	2300      	movs	r3, #0
 8011802:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8011804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801180a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801180e:	dd0b      	ble.n	8011828 <lv_draw_mask_angle+0x130>
 8011810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011812:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011816:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 801181a:	da05      	bge.n	8011828 <lv_draw_mask_angle+0x130>
 801181c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801181e:	2b00      	cmp	r3, #0
 8011820:	da02      	bge.n	8011828 <lv_draw_mask_angle+0x130>
 8011822:	2300      	movs	r3, #0
 8011824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011826:	e01f      	b.n	8011868 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8011828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801182a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801182e:	2b00      	cmp	r3, #0
 8011830:	dd0a      	ble.n	8011848 <lv_draw_mask_angle+0x150>
 8011832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011834:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011838:	2b5a      	cmp	r3, #90	; 0x5a
 801183a:	dc05      	bgt.n	8011848 <lv_draw_mask_angle+0x150>
 801183c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801183e:	2b00      	cmp	r3, #0
 8011840:	da02      	bge.n	8011848 <lv_draw_mask_angle+0x150>
 8011842:	2300      	movs	r3, #0
 8011844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011846:	e00f      	b.n	8011868 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8011848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801184a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801184e:	2b5a      	cmp	r3, #90	; 0x5a
 8011850:	dd0a      	ble.n	8011868 <lv_draw_mask_angle+0x170>
 8011852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011854:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011858:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801185c:	da04      	bge.n	8011868 <lv_draw_mask_angle+0x170>
 801185e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011860:	2b00      	cmp	r3, #0
 8011862:	dd01      	ble.n	8011868 <lv_draw_mask_angle+0x170>
 8011864:	2300      	movs	r3, #0
 8011866:	64fb      	str	r3, [r7, #76]	; 0x4c

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8011868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801186a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	105b      	asrs	r3, r3, #1
 8011870:	627b      	str	r3, [r7, #36]	; 0x24

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8011872:	2301      	movs	r3, #1
 8011874:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8011878:	2301      	movs	r3, #1
 801187a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        int32_t tmp = start_angle_last + dist - rel_x;
 801187e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011882:	441a      	add	r2, r3
 8011884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011886:	1ad3      	subs	r3, r2, r3
 8011888:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > len) tmp = len;
 801188a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801188e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011890:	429a      	cmp	r2, r3
 8011892:	dd02      	ble.n	801189a <lv_draw_mask_angle+0x1a2>
 8011894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011898:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > 0) {
 801189a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801189c:	2b00      	cmp	r3, #0
 801189e:	dd18      	ble.n	80118d2 <lv_draw_mask_angle+0x1da>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 80118a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118a2:	b218      	sxth	r0, r3
 80118a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118a6:	3310      	adds	r3, #16
 80118a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80118ac:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80118b0:	9300      	str	r3, [sp, #0]
 80118b2:	4603      	mov	r3, r0
 80118b4:	68f8      	ldr	r0, [r7, #12]
 80118b6:	f7ff fa5f 	bl	8010d78 <lv_draw_mask_line>
 80118ba:	4603      	mov	r3, r0
 80118bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 80118c0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d104      	bne.n	80118d2 <lv_draw_mask_angle+0x1da>
                lv_memset_00(&mask_buf[0], tmp);
 80118c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ca:	4619      	mov	r1, r3
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f00f fbdb 	bl	8021088 <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 80118d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118d8:	429a      	cmp	r2, r3
 80118da:	dd02      	ble.n	80118e2 <lv_draw_mask_angle+0x1ea>
 80118dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118e0:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp < 0) tmp = 0;
 80118e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	da01      	bge.n	80118ec <lv_draw_mask_angle+0x1f4>
 80118e8:	2300      	movs	r3, #0
 80118ea:	647b      	str	r3, [r7, #68]	; 0x44
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 80118ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ee:	68fa      	ldr	r2, [r7, #12]
 80118f0:	18d0      	adds	r0, r2, r3
 80118f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	897b      	ldrh	r3, [r7, #10]
 80118f8:	4413      	add	r3, r2
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	b219      	sxth	r1, r3
 80118fe:	88fa      	ldrh	r2, [r7, #6]
 8011900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011902:	b29b      	uxth	r3, r3
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	b29b      	uxth	r3, r3
 8011908:	b21c      	sxth	r4, r3
 801190a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801190c:	333c      	adds	r3, #60	; 0x3c
 801190e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	4623      	mov	r3, r4
 8011916:	f7ff fa2f 	bl	8010d78 <lv_draw_mask_line>
 801191a:	4603      	mov	r3, r0
 801191c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8011920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011924:	2b00      	cmp	r3, #0
 8011926:	d109      	bne.n	801193c <lv_draw_mask_angle+0x244>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8011928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801192a:	68fa      	ldr	r2, [r7, #12]
 801192c:	18d0      	adds	r0, r2, r3
 801192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	4619      	mov	r1, r3
 8011938:	f00f fba6 	bl	8021088 <lv_memset_00>
        }
        if(res1 == res2) return res1;
 801193c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8011940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011944:	429a      	cmp	r2, r3
 8011946:	d102      	bne.n	801194e <lv_draw_mask_angle+0x256>
 8011948:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801194c:	e1d0      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 801194e:	2302      	movs	r3, #2
 8011950:	e1ce      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
    }
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 8011952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011954:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011958:	2bb4      	cmp	r3, #180	; 0xb4
 801195a:	f340 80fc 	ble.w	8011b56 <lv_draw_mask_angle+0x45e>
 801195e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011960:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011964:	2bb4      	cmp	r3, #180	; 0xb4
 8011966:	f340 80f6 	ble.w	8011b56 <lv_draw_mask_angle+0x45e>
 801196a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801196c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8011970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011972:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011976:	429a      	cmp	r2, r3
 8011978:	f340 80ed 	ble.w	8011b56 <lv_draw_mask_angle+0x45e>

        if(abs_y > p->cfg.vertex_p.y) {
 801197c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801197e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011982:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011986:	429a      	cmp	r2, r3
 8011988:	dd01      	ble.n	801198e <lv_draw_mask_angle+0x296>
            return LV_DRAW_MASK_RES_FULL_COVER;
 801198a:	2301      	movs	r3, #1
 801198c:	e1b0      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 801198e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011994:	fb02 f303 	mul.w	r3, r2, r3
 8011998:	129b      	asrs	r3, r3, #10
 801199a:	61fb      	str	r3, [r7, #28]
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 801199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199e:	3301      	adds	r3, #1
 80119a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80119a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80119a4:	fb02 f303 	mul.w	r3, r2, r3
 80119a8:	129b      	asrs	r3, r3, #10
 80119aa:	643b      	str	r3, [r7, #64]	; 0x40

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 80119ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80119b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80119b6:	dd0b      	ble.n	80119d0 <lv_draw_mask_angle+0x2d8>
 80119b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80119be:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80119c2:	da05      	bge.n	80119d0 <lv_draw_mask_angle+0x2d8>
 80119c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	da02      	bge.n	80119d0 <lv_draw_mask_angle+0x2d8>
 80119ca:	2300      	movs	r3, #0
 80119cc:	643b      	str	r3, [r7, #64]	; 0x40
 80119ce:	e01f      	b.n	8011a10 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 80119d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	dd0a      	ble.n	80119f0 <lv_draw_mask_angle+0x2f8>
 80119da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80119e0:	2b5a      	cmp	r3, #90	; 0x5a
 80119e2:	dc05      	bgt.n	80119f0 <lv_draw_mask_angle+0x2f8>
 80119e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	da02      	bge.n	80119f0 <lv_draw_mask_angle+0x2f8>
 80119ea:	2300      	movs	r3, #0
 80119ec:	643b      	str	r3, [r7, #64]	; 0x40
 80119ee:	e00f      	b.n	8011a10 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 80119f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80119f6:	2b5a      	cmp	r3, #90	; 0x5a
 80119f8:	dd0a      	ble.n	8011a10 <lv_draw_mask_angle+0x318>
 80119fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011a00:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011a04:	da04      	bge.n	8011a10 <lv_draw_mask_angle+0x318>
 8011a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	dd01      	ble.n	8011a10 <lv_draw_mask_angle+0x318>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	643b      	str	r3, [r7, #64]	; 0x40

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8011a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011a16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011a1a:	dd0b      	ble.n	8011a34 <lv_draw_mask_angle+0x33c>
 8011a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a1e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011a22:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8011a26:	da05      	bge.n	8011a34 <lv_draw_mask_angle+0x33c>
 8011a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da02      	bge.n	8011a34 <lv_draw_mask_angle+0x33c>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	643b      	str	r3, [r7, #64]	; 0x40
 8011a32:	e01f      	b.n	8011a74 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8011a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a36:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	dd0a      	ble.n	8011a54 <lv_draw_mask_angle+0x35c>
 8011a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011a44:	2b5a      	cmp	r3, #90	; 0x5a
 8011a46:	dc05      	bgt.n	8011a54 <lv_draw_mask_angle+0x35c>
 8011a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	da02      	bge.n	8011a54 <lv_draw_mask_angle+0x35c>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	643b      	str	r3, [r7, #64]	; 0x40
 8011a52:	e00f      	b.n	8011a74 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8011a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011a5a:	2b5a      	cmp	r3, #90	; 0x5a
 8011a5c:	dd0a      	ble.n	8011a74 <lv_draw_mask_angle+0x37c>
 8011a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011a64:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011a68:	da04      	bge.n	8011a74 <lv_draw_mask_angle+0x37c>
 8011a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	dd01      	ble.n	8011a74 <lv_draw_mask_angle+0x37c>
 8011a70:	2300      	movs	r3, #0
 8011a72:	643b      	str	r3, [r7, #64]	; 0x40

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8011a74:	69fa      	ldr	r2, [r7, #28]
 8011a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a78:	1ad3      	subs	r3, r2, r3
 8011a7a:	105b      	asrs	r3, r3, #1
 8011a7c:	61bb      	str	r3, [r7, #24]

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8011a7e:	2301      	movs	r3, #1
 8011a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8011a84:	2301      	movs	r3, #1
 8011a86:	75fb      	strb	r3, [r7, #23]

        int32_t tmp = start_angle_last + dist - rel_x;
 8011a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	441a      	add	r2, r3
 8011a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a90:	1ad3      	subs	r3, r2, r3
 8011a92:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > len) tmp = len;
 8011a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	dd02      	ble.n	8011aa4 <lv_draw_mask_angle+0x3ac>
 8011a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aa2:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > 0) {
 8011aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	dd18      	ble.n	8011adc <lv_draw_mask_angle+0x3e4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 8011aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aac:	b218      	sxth	r0, r3
 8011aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ab0:	333c      	adds	r3, #60	; 0x3c
 8011ab2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011ab6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011aba:	9300      	str	r3, [sp, #0]
 8011abc:	4603      	mov	r3, r0
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f7ff f95a 	bl	8010d78 <lv_draw_mask_line>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8011aca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d104      	bne.n	8011adc <lv_draw_mask_angle+0x3e4>
                lv_memset_00(&mask_buf[0], tmp);
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	f00f fad6 	bl	8021088 <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 8011adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	dd02      	ble.n	8011aec <lv_draw_mask_angle+0x3f4>
 8011ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aea:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp < 0) tmp = 0;
 8011aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	da01      	bge.n	8011af6 <lv_draw_mask_angle+0x3fe>
 8011af2:	2300      	movs	r3, #0
 8011af4:	63bb      	str	r3, [r7, #56]	; 0x38
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 8011af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af8:	68fa      	ldr	r2, [r7, #12]
 8011afa:	18d0      	adds	r0, r2, r3
 8011afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	897b      	ldrh	r3, [r7, #10]
 8011b02:	4413      	add	r3, r2
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	b219      	sxth	r1, r3
 8011b08:	88fa      	ldrh	r2, [r7, #6]
 8011b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	1ad3      	subs	r3, r2, r3
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	b21c      	sxth	r4, r3
 8011b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b16:	3310      	adds	r3, #16
 8011b18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011b1c:	9300      	str	r3, [sp, #0]
 8011b1e:	4623      	mov	r3, r4
 8011b20:	f7ff f92a 	bl	8010d78 <lv_draw_mask_line>
 8011b24:	4603      	mov	r3, r0
 8011b26:	75fb      	strb	r3, [r7, #23]
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8011b28:	7dfb      	ldrb	r3, [r7, #23]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d109      	bne.n	8011b42 <lv_draw_mask_angle+0x44a>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8011b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	18d0      	adds	r0, r2, r3
 8011b34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	f00f faa3 	bl	8021088 <lv_memset_00>
        }
        if(res1 == res2) return res1;
 8011b42:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011b46:	7dfb      	ldrb	r3, [r7, #23]
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d102      	bne.n	8011b52 <lv_draw_mask_angle+0x45a>
 8011b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b50:	e0ce      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8011b52:	2302      	movs	r3, #2
 8011b54:	e0cc      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
    }
    else  {

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8011b56:	2301      	movs	r3, #1
 8011b58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        if(p->cfg.start_angle == 180) {
 8011b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b64:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011b68:	2bb4      	cmp	r3, #180	; 0xb4
 8011b6a:	d10e      	bne.n	8011b8a <lv_draw_mask_angle+0x492>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8011b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b6e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011b72:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	da03      	bge.n	8011b82 <lv_draw_mask_angle+0x48a>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b80:	e043      	b.n	8011c0a <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8011b82:	2303      	movs	r3, #3
 8011b84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b88:	e03f      	b.n	8011c0a <lv_draw_mask_angle+0x512>
        }
        else if(p->cfg.start_angle == 0) {
 8011b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10e      	bne.n	8011bb2 <lv_draw_mask_angle+0x4ba>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8011b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011b9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	da03      	bge.n	8011baa <lv_draw_mask_angle+0x4b2>
 8011ba2:	2303      	movs	r3, #3
 8011ba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ba8:	e02f      	b.n	8011c0a <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8011baa:	2301      	movs	r3, #1
 8011bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bb0:	e02b      	b.n	8011c0a <lv_draw_mask_angle+0x512>
        }
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8011bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bb4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011bb8:	2bb3      	cmp	r3, #179	; 0xb3
 8011bba:	dc06      	bgt.n	8011bca <lv_draw_mask_angle+0x4d2>
 8011bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011bc2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	db0b      	blt.n	8011be2 <lv_draw_mask_angle+0x4ea>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8011bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bcc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8011bd0:	2bb4      	cmp	r3, #180	; 0xb4
 8011bd2:	dd0a      	ble.n	8011bea <lv_draw_mask_angle+0x4f2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8011bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bd6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011bda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	db03      	blt.n	8011bea <lv_draw_mask_angle+0x4f2>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8011be2:	2303      	movs	r3, #3
 8011be4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011be8:	e00f      	b.n	8011c0a <lv_draw_mask_angle+0x512>
        }
        else  {
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 8011bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bec:	3310      	adds	r3, #16
 8011bee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011bf2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011bf6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011bfa:	9300      	str	r3, [sp, #0]
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f7ff f8ba 	bl	8010d78 <lv_draw_mask_line>
 8011c04:	4603      	mov	r3, r0
 8011c06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(p->cfg.end_angle == 180) {
 8011c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011c10:	2bb4      	cmp	r3, #180	; 0xb4
 8011c12:	d10e      	bne.n	8011c32 <lv_draw_mask_angle+0x53a>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8011c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c16:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011c1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	da03      	bge.n	8011c2a <lv_draw_mask_angle+0x532>
 8011c22:	2303      	movs	r3, #3
 8011c24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011c28:	e043      	b.n	8011cb2 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011c30:	e03f      	b.n	8011cb2 <lv_draw_mask_angle+0x5ba>
        }
        else if(p->cfg.end_angle == 0) {
 8011c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d10e      	bne.n	8011c5a <lv_draw_mask_angle+0x562>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8011c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c3e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011c42:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	da03      	bge.n	8011c52 <lv_draw_mask_angle+0x55a>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011c50:	e02f      	b.n	8011cb2 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8011c52:	2303      	movs	r3, #3
 8011c54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011c58:	e02b      	b.n	8011cb2 <lv_draw_mask_angle+0x5ba>
        }
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8011c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011c60:	2bb3      	cmp	r3, #179	; 0xb3
 8011c62:	dc06      	bgt.n	8011c72 <lv_draw_mask_angle+0x57a>
 8011c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011c6a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	db0b      	blt.n	8011c8a <lv_draw_mask_angle+0x592>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8011c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c74:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8011c78:	2bb4      	cmp	r3, #180	; 0xb4
 8011c7a:	dd0a      	ble.n	8011c92 <lv_draw_mask_angle+0x59a>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8011c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c7e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011c82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	db03      	blt.n	8011c92 <lv_draw_mask_angle+0x59a>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011c90:	e00f      	b.n	8011cb2 <lv_draw_mask_angle+0x5ba>
        }
        else {
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 8011c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c94:	333c      	adds	r3, #60	; 0x3c
 8011c96:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011c9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011c9e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7ff f866 	bl	8010d78 <lv_draw_mask_line>
 8011cac:	4603      	mov	r3, r0
 8011cae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        }

        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8011cb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d003      	beq.n	8011cc2 <lv_draw_mask_angle+0x5ca>
 8011cba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d101      	bne.n	8011cc6 <lv_draw_mask_angle+0x5ce>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	e014      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 8011cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cca:	2b03      	cmp	r3, #3
 8011ccc:	d105      	bne.n	8011cda <lv_draw_mask_angle+0x5e2>
 8011cce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011cd2:	2b03      	cmp	r3, #3
 8011cd4:	d101      	bne.n	8011cda <lv_draw_mask_angle+0x5e2>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	e00a      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 8011cda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d105      	bne.n	8011cee <lv_draw_mask_angle+0x5f6>
 8011ce2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011ce6:	2b01      	cmp	r3, #1
 8011ce8:	d101      	bne.n	8011cee <lv_draw_mask_angle+0x5f6>
 8011cea:	2301      	movs	r3, #1
 8011cec:	e000      	b.n	8011cf0 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8011cee:	2302      	movs	r3, #2
    }
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3754      	adds	r7, #84	; 0x54
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd90      	pop	{r4, r7, pc}

08011cf8 <lv_draw_mask_radius>:


LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 8011cf8:	b590      	push	{r4, r7, lr}
 8011cfa:	b097      	sub	sp, #92	; 0x5c
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	4608      	mov	r0, r1
 8011d02:	4611      	mov	r1, r2
 8011d04:	461a      	mov	r2, r3
 8011d06:	4603      	mov	r3, r0
 8011d08:	817b      	strh	r3, [r7, #10]
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	813b      	strh	r3, [r7, #8]
 8011d0e:	4613      	mov	r3, r2
 8011d10:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 8011d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d14:	7c9b      	ldrb	r3, [r3, #18]
 8011d16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	bf14      	ite	ne
 8011d20:	2301      	movne	r3, #1
 8011d22:	2300      	moveq	r3, #0
 8011d24:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t radius = p->cfg.radius;
 8011d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d2a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011d2e:	647b      	str	r3, [r7, #68]	; 0x44
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 8011d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d32:	f103 0208 	add.w	r2, r3, #8
 8011d36:	f107 0318 	add.w	r3, r7, #24
 8011d3a:	4611      	mov	r1, r2
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7fe fae6 	bl	801030e <lv_area_copy>

    if(outer == false) {
 8011d42:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011d46:	f083 0301 	eor.w	r3, r3, #1
 8011d4a:	b2db      	uxtb	r3, r3
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d00d      	beq.n	8011d6c <lv_draw_mask_radius+0x74>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 8011d50:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011d54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	db05      	blt.n	8011d68 <lv_draw_mask_radius+0x70>
 8011d5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011d60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	dd0f      	ble.n	8011d88 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_TRANSP;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	e266      	b.n	801223a <lv_draw_mask_radius+0x542>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8011d6c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011d70:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	db05      	blt.n	8011d84 <lv_draw_mask_radius+0x8c>
 8011d78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011d7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	dd01      	ble.n	8011d88 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8011d84:	2301      	movs	r3, #1
 8011d86:	e258      	b.n	801223a <lv_draw_mask_radius+0x542>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8011d88:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011d8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011d90:	4619      	mov	r1, r3
 8011d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d94:	440b      	add	r3, r1
 8011d96:	429a      	cmp	r2, r3
 8011d98:	db0b      	blt.n	8011db2 <lv_draw_mask_radius+0xba>
 8011d9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011da2:	441a      	add	r2, r3
 8011da4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011da8:	4619      	mov	r1, r3
 8011daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dac:	1acb      	subs	r3, r1, r3
 8011dae:	429a      	cmp	r2, r3
 8011db0:	dd12      	ble.n	8011dd8 <lv_draw_mask_radius+0xe0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8011db2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011db6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011dba:	4619      	mov	r1, r3
 8011dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dbe:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	f2c0 8082 	blt.w	8011eca <lv_draw_mask_radius+0x1d2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8011dc6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011dca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011dce:	4619      	mov	r1, r3
 8011dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dd2:	1acb      	subs	r3, r1, r3
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	dc78      	bgt.n	8011eca <lv_draw_mask_radius+0x1d2>
        if(outer == false) {
 8011dd8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011ddc:	f083 0301 	eor.w	r3, r3, #1
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d03d      	beq.n	8011e62 <lv_draw_mask_radius+0x16a>
            /*Remove the edges*/
            int32_t last = rect.x1 - abs_x;
 8011de6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011dea:	461a      	mov	r2, r3
 8011dec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011df0:	1ad3      	subs	r3, r2, r3
 8011df2:	627b      	str	r3, [r7, #36]	; 0x24
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8011df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	dd01      	ble.n	8011e02 <lv_draw_mask_radius+0x10a>
 8011dfe:	2300      	movs	r3, #0
 8011e00:	e21b      	b.n	801223a <lv_draw_mask_radius+0x542>
            if(last >= 0) {
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	db04      	blt.n	8011e12 <lv_draw_mask_radius+0x11a>
                lv_memset_00(&mask_buf[0], last);
 8011e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f00f f93b 	bl	8021088 <lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 8011e12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011e16:	461a      	mov	r2, r3
 8011e18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	3301      	adds	r3, #1
 8011e20:	623b      	str	r3, [r7, #32]
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8011e22:	6a3b      	ldr	r3, [r7, #32]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	dc01      	bgt.n	8011e2c <lv_draw_mask_radius+0x134>
 8011e28:	2300      	movs	r3, #0
 8011e2a:	e206      	b.n	801223a <lv_draw_mask_radius+0x542>
            else if(first < len) {
 8011e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e30:	6a3a      	ldr	r2, [r7, #32]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	da09      	bge.n	8011e4a <lv_draw_mask_radius+0x152>
                lv_memset_00(&mask_buf[first], len - first);
 8011e36:	6a3b      	ldr	r3, [r7, #32]
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	18d0      	adds	r0, r2, r3
 8011e3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011e40:	6a3b      	ldr	r3, [r7, #32]
 8011e42:	1ad3      	subs	r3, r2, r3
 8011e44:	4619      	mov	r1, r3
 8011e46:	f00f f91f 	bl	8021088 <lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 8011e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d106      	bne.n	8011e5e <lv_draw_mask_radius+0x166>
 8011e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e54:	6a3a      	ldr	r2, [r7, #32]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d101      	bne.n	8011e5e <lv_draw_mask_radius+0x166>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	e1ed      	b.n	801223a <lv_draw_mask_radius+0x542>
            else return LV_DRAW_MASK_RES_CHANGED;
 8011e5e:	2302      	movs	r3, #2
 8011e60:	e1eb      	b.n	801223a <lv_draw_mask_radius+0x542>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 8011e62:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011e66:	461a      	mov	r2, r3
 8011e68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	657b      	str	r3, [r7, #84]	; 0x54
            if(first < 0) first = 0;
 8011e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	da01      	bge.n	8011e7a <lv_draw_mask_radius+0x182>
 8011e76:	2300      	movs	r3, #0
 8011e78:	657b      	str	r3, [r7, #84]	; 0x54
            if(first <= len) {
 8011e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e80:	429a      	cmp	r2, r3
 8011e82:	dc20      	bgt.n	8011ec6 <lv_draw_mask_radius+0x1ce>
                int32_t last = rect.x2 - abs_x - first + 1;
 8011e84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011e88:	461a      	mov	r2, r3
 8011e8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011e8e:	1ad2      	subs	r2, r2, r3
 8011e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	3301      	adds	r3, #1
 8011e96:	653b      	str	r3, [r7, #80]	; 0x50
                if(first + last > len) last = len - first;
 8011e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e9c:	441a      	add	r2, r3
 8011e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	dd04      	ble.n	8011eb0 <lv_draw_mask_radius+0x1b8>
 8011ea6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eac:	1ad3      	subs	r3, r2, r3
 8011eae:	653b      	str	r3, [r7, #80]	; 0x50
                if(last >= 0) {
 8011eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	db07      	blt.n	8011ec6 <lv_draw_mask_radius+0x1ce>
                    lv_memset_00(&mask_buf[first], last);
 8011eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	4413      	add	r3, r2
 8011ebc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ebe:	4611      	mov	r1, r2
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f00f f8e1 	bl	8021088 <lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 8011ec6:	2302      	movs	r3, #2
 8011ec8:	e1b7      	b.n	801223a <lv_draw_mask_radius+0x542>
    //    if( abs_x == 276 && abs_x + len - 1 == 479 && abs_y == 63 && p->cfg.radius == 5 && p->cfg.outer == 1) {
    //        char x = 0;
    //    }
    //exec: x:276.. 479, y:63: r:5, inv)

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 8011eca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011ece:	461a      	mov	r2, r3
 8011ed0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011ed4:	1ad3      	subs	r3, r2, r3
 8011ed6:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t w = lv_area_get_width(&rect);
 8011ed8:	f107 0318 	add.w	r3, r7, #24
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7fe fa35 	bl	801034c <lv_area_get_width>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h = lv_area_get_height(&rect);
 8011ee6:	f107 0318 	add.w	r3, r7, #24
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fe fa45 	bl	801037a <lv_area_get_height>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	63bb      	str	r3, [r7, #56]	; 0x38
    abs_x -= rect.x1;
 8011ef4:	897a      	ldrh	r2, [r7, #10]
 8011ef6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 8011f02:	893a      	ldrh	r2, [r7, #8]
 8011f04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	1ad3      	subs	r3, r2, r3
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	813b      	strh	r3, [r7, #8]

    lv_coord_t aa_len;
    lv_coord_t x_start;
    lv_coord_t cir_y;
    if(abs_y < radius) {
 8011f10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011f14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f16:	429a      	cmp	r2, r3
 8011f18:	dd09      	ble.n	8011f2e <lv_draw_mask_radius+0x236>
        cir_y = radius - abs_y - 1;
 8011f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	893b      	ldrh	r3, [r7, #8]
 8011f20:	1ad3      	subs	r3, r2, r3
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	3b01      	subs	r3, #1
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011f2c:	e00a      	b.n	8011f44 <lv_draw_mask_radius+0x24c>
    }
    else {
        cir_y = abs_y - (h - radius);
 8011f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	b29a      	uxth	r2, r3
 8011f3a:	893b      	ldrh	r3, [r7, #8]
 8011f3c:	4413      	add	r3, r2
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 8011f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f46:	6958      	ldr	r0, [r3, #20]
 8011f48:	f107 0314 	add.w	r3, r7, #20
 8011f4c:	f107 0216 	add.w	r2, r7, #22
 8011f50:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8011f54:	f000 fd38 	bl	80129c8 <get_next_line>
 8011f58:	6378      	str	r0, [r7, #52]	; 0x34
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8011f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	4413      	add	r3, r2
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f68:	b29b      	uxth	r3, r3
 8011f6a:	1ad3      	subs	r3, r2, r3
 8011f6c:	b29a      	uxth	r2, r3
 8011f6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	4413      	add	r3, r2
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 8011f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f7c:	b29a      	uxth	r2, r3
 8011f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	4413      	add	r3, r2
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	1ad3      	subs	r3, r2, r3
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	3b01      	subs	r3, #1
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t i;

    if(outer == false) {
 8011f96:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011f9a:	f083 0301 	eor.w	r3, r3, #1
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f000 809b 	beq.w	80120dc <lv_draw_mask_radius+0x3e4>
        for(i = 0; i < aa_len; i++) {
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8011fac:	e062      	b.n	8012074 <lv_draw_mask_radius+0x37c>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 8011fae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fbe:	4413      	add	r3, r2
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8011fc6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011fca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011fce:	4413      	add	r3, r2
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	db20      	blt.n	8012016 <lv_draw_mask_radius+0x31e>
 8011fd4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011fd8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011fdc:	441a      	add	r2, r3
 8011fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	da17      	bge.n	8012016 <lv_draw_mask_radius+0x31e>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8011fe6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011fea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8011fee:	4413      	add	r3, r2
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	7819      	ldrb	r1, [r3, #0]
 8011ff8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8011ffc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012000:	4413      	add	r3, r2
 8012002:	461a      	mov	r2, r3
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	189c      	adds	r4, r3, r2
 8012008:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801200c:	4618      	mov	r0, r3
 801200e:	f000 fd11 	bl	8012a34 <mask_mix>
 8012012:	4603      	mov	r3, r0
 8012014:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8012016:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801201a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	db20      	blt.n	8012066 <lv_draw_mask_radius+0x36e>
 8012024:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8012028:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801202c:	1ad2      	subs	r2, r2, r3
 801202e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012032:	429a      	cmp	r2, r3
 8012034:	da17      	bge.n	8012066 <lv_draw_mask_radius+0x36e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8012036:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801203a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	461a      	mov	r2, r3
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	4413      	add	r3, r2
 8012046:	7819      	ldrb	r1, [r3, #0]
 8012048:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801204c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	461a      	mov	r2, r3
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	189c      	adds	r4, r3, r2
 8012058:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801205c:	4618      	mov	r0, r3
 801205e:	f000 fce9 	bl	8012a34 <mask_mix>
 8012062:	4603      	mov	r3, r0
 8012064:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 8012066:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801206a:	b29b      	uxth	r3, r3
 801206c:	3301      	adds	r3, #1
 801206e:	b29b      	uxth	r3, r3
 8012070:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8012074:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012078:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 801207c:	429a      	cmp	r2, r3
 801207e:	db96      	blt.n	8011fae <lv_draw_mask_radius+0x2b6>
            }
        }

        /*Clean the right side*/
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 8012080:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012084:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8012088:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801208c:	440b      	add	r3, r1
 801208e:	4293      	cmp	r3, r2
 8012090:	bfa8      	it	ge
 8012092:	4613      	movge	r3, r2
 8012094:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012098:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 801209a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801209e:	68fa      	ldr	r2, [r7, #12]
 80120a0:	18d0      	adds	r0, r2, r3
 80120a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120a6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80120aa:	1ad3      	subs	r3, r2, r3
 80120ac:	4619      	mov	r1, r3
 80120ae:	f00e ffeb 	bl	8021088 <lv_memset_00>

        /*Clean the left side*/
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 80120b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120b6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80120ba:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80120be:	1a5b      	subs	r3, r3, r1
 80120c0:	3301      	adds	r3, #1
 80120c2:	4293      	cmp	r3, r2
 80120c4:	bfa8      	it	ge
 80120c6:	4613      	movge	r3, r2
 80120c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80120cc:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_memset_00(&mask_buf[0], cir_x_left);
 80120ce:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80120d2:	4619      	mov	r1, r3
 80120d4:	68f8      	ldr	r0, [r7, #12]
 80120d6:	f00e ffd7 	bl	8021088 <lv_memset_00>
 80120da:	e0ad      	b.n	8012238 <lv_draw_mask_radius+0x540>
    }
    else {
        for(i = 0; i < aa_len; i++) {
 80120dc:	2300      	movs	r3, #0
 80120de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80120e2:	e063      	b.n	80121ac <lv_draw_mask_radius+0x4b4>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 80120e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80120e8:	1e5a      	subs	r2, r3, #1
 80120ea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80120ee:	1ad3      	subs	r3, r2, r3
 80120f0:	461a      	mov	r2, r3
 80120f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120f4:	4413      	add	r3, r2
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	43db      	mvns	r3, r3
 80120fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 80120fe:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8012102:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012106:	4413      	add	r3, r2
 8012108:	2b00      	cmp	r3, #0
 801210a:	db20      	blt.n	801214e <lv_draw_mask_radius+0x456>
 801210c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8012110:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012114:	441a      	add	r2, r3
 8012116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801211a:	429a      	cmp	r2, r3
 801211c:	da17      	bge.n	801214e <lv_draw_mask_radius+0x456>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 801211e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8012122:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012126:	4413      	add	r3, r2
 8012128:	461a      	mov	r2, r3
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	4413      	add	r3, r2
 801212e:	7819      	ldrb	r1, [r3, #0]
 8012130:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8012134:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012138:	4413      	add	r3, r2
 801213a:	461a      	mov	r2, r3
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	189c      	adds	r4, r3, r2
 8012140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012144:	4618      	mov	r0, r3
 8012146:	f000 fc75 	bl	8012a34 <mask_mix>
 801214a:	4603      	mov	r3, r0
 801214c:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 801214e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8012152:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	db20      	blt.n	801219e <lv_draw_mask_radius+0x4a6>
 801215c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8012160:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012164:	1ad2      	subs	r2, r2, r3
 8012166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801216a:	429a      	cmp	r2, r3
 801216c:	da17      	bge.n	801219e <lv_draw_mask_radius+0x4a6>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801216e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8012172:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012176:	1ad3      	subs	r3, r2, r3
 8012178:	461a      	mov	r2, r3
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	4413      	add	r3, r2
 801217e:	7819      	ldrb	r1, [r3, #0]
 8012180:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8012184:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8012188:	1ad3      	subs	r3, r2, r3
 801218a:	461a      	mov	r2, r3
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	189c      	adds	r4, r3, r2
 8012190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012194:	4618      	mov	r0, r3
 8012196:	f000 fc4d 	bl	8012a34 <mask_mix>
 801219a:	4603      	mov	r3, r0
 801219c:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 801219e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	3301      	adds	r3, #1
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80121ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80121b0:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 80121b4:	429a      	cmp	r2, r3
 80121b6:	db95      	blt.n	80120e4 <lv_draw_mask_radius+0x3ec>
            }
        }

        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 80121b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80121bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80121c0:	3301      	adds	r3, #1
 80121c2:	4293      	cmp	r3, r2
 80121c4:	bfa8      	it	ge
 80121c6:	4613      	movge	r3, r2
 80121c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80121cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 80121ce:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80121d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	da07      	bge.n	80121ea <lv_draw_mask_radius+0x4f2>
 80121da:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80121de:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80121e2:	1ad3      	subs	r3, r2, r3
 80121e4:	0fdb      	lsrs	r3, r3, #31
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	e006      	b.n	80121f8 <lv_draw_mask_radius+0x500>
 80121ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80121ee:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	0fdb      	lsrs	r3, r3, #31
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d001      	beq.n	8012200 <lv_draw_mask_radius+0x508>
 80121fc:	2300      	movs	r3, #0
 80121fe:	e010      	b.n	8012222 <lv_draw_mask_radius+0x52a>
 8012200:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8012204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012208:	429a      	cmp	r2, r3
 801220a:	da05      	bge.n	8012218 <lv_draw_mask_radius+0x520>
 801220c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801220e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012210:	1ad3      	subs	r3, r2, r3
 8012212:	b29b      	uxth	r3, r3
 8012214:	b21b      	sxth	r3, r3
 8012216:	e004      	b.n	8012222 <lv_draw_mask_radius+0x52a>
 8012218:	88fa      	ldrh	r2, [r7, #6]
 801221a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801221c:	1ad3      	subs	r3, r2, r3
 801221e:	b29b      	uxth	r3, r3
 8012220:	b21b      	sxth	r3, r3
 8012222:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_memset_00(&mask_buf[clr_start], clr_len);
 8012224:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8012228:	68fa      	ldr	r2, [r7, #12]
 801222a:	4413      	add	r3, r2
 801222c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8012230:	4611      	mov	r1, r2
 8012232:	4618      	mov	r0, r3
 8012234:	f00e ff28 	bl	8021088 <lv_memset_00>
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012238:	2302      	movs	r3, #2
}
 801223a:	4618      	mov	r0, r3
 801223c:	375c      	adds	r7, #92	; 0x5c
 801223e:	46bd      	mov	sp, r7
 8012240:	bd90      	pop	{r4, r7, pc}

08012242 <circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 8012242:	b480      	push	{r7}
 8012244:	b085      	sub	sp, #20
 8012246:	af00      	add	r7, sp, #0
 8012248:	60f8      	str	r0, [r7, #12]
 801224a:	60b9      	str	r1, [r7, #8]
 801224c:	4613      	mov	r3, r2
 801224e:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	88fa      	ldrh	r2, [r7, #6]
 8012254:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2200      	movs	r2, #0
 801225a:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 801225c:	88fb      	ldrh	r3, [r7, #6]
 801225e:	f1c3 0301 	rsb	r3, r3, #1
 8012262:	b29b      	uxth	r3, r3
 8012264:	b21a      	sxth	r2, r3
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	801a      	strh	r2, [r3, #0]
}
 801226a:	bf00      	nop
 801226c:	3714      	adds	r7, #20
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr

08012276 <circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
 8012276:	b480      	push	{r7}
 8012278:	b083      	sub	sp, #12
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f9b3 3000 	ldrsh.w	r3, [r3]
 801228a:	429a      	cmp	r2, r3
 801228c:	bfd4      	ite	le
 801228e:	2301      	movle	r3, #1
 8012290:	2300      	movgt	r3, #0
 8012292:	b2db      	uxtb	r3, r3
}
 8012294:	4618      	mov	r0, r3
 8012296:	370c      	adds	r7, #12
 8012298:	46bd      	mov	sp, r7
 801229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229e:	4770      	bx	lr

080122a0 <circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 80122a0:	b480      	push	{r7}
 80122a2:	b083      	sub	sp, #12
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]

    if(*tmp <= 0) {
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	dc11      	bgt.n	80122d8 <circ_next+0x38>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	005b      	lsls	r3, r3, #1
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	4413      	add	r3, r2
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	3303      	adds	r3, #3
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	b21a      	sxth	r2, r3
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	801a      	strh	r2, [r3, #0]
 80122d6:	e01e      	b.n	8012316 <circ_next+0x76>
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122de:	b29a      	uxth	r2, r3
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80122e6:	4619      	mov	r1, r3
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122ee:	1acb      	subs	r3, r1, r3
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	005b      	lsls	r3, r3, #1
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	4413      	add	r3, r2
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	3305      	adds	r3, #5
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	b21a      	sxth	r2, r3
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	801a      	strh	r2, [r3, #0]
        c->x--;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f9b3 3000 	ldrsh.w	r3, [r3]
 801230a:	b29b      	uxth	r3, r3
 801230c:	3b01      	subs	r3, #1
 801230e:	b29b      	uxth	r3, r3
 8012310:	b21a      	sxth	r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	801a      	strh	r2, [r3, #0]
    }
    c->y++;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801231c:	b29b      	uxth	r3, r3
 801231e:	3301      	adds	r3, #1
 8012320:	b29b      	uxth	r3, r3
 8012322:	b21a      	sxth	r2, r3
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	805a      	strh	r2, [r3, #2]
}
 8012328:	bf00      	nop
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <circ_calc_aa4>:

static void circ_calc_aa4(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t radius)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b096      	sub	sp, #88	; 0x58
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	460b      	mov	r3, r1
 801233e:	807b      	strh	r3, [r7, #2]
    if(radius == 0) return;
 8012340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012344:	2b00      	cmp	r3, #0
 8012346:	f000 833b 	beq.w	80129c0 <circ_calc_aa4+0x68c>
    c->radius = radius;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	887a      	ldrh	r2, [r7, #2]
 801234e:	831a      	strh	r2, [r3, #24]

    /*Allocate buffers*/
    if(c->buf) lv_mem_free(c->buf);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d004      	beq.n	8012362 <circ_calc_aa4+0x2e>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	4618      	mov	r0, r3
 801235e:	f00e fa8f 	bl	8020880 <lv_mem_free>

    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8012362:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012366:	1c5a      	adds	r2, r3, #1
 8012368:	4613      	mov	r3, r2
 801236a:	005b      	lsls	r3, r3, #1
 801236c:	4413      	add	r3, r2
 801236e:	005b      	lsls	r3, r3, #1
 8012370:	4618      	mov	r0, r3
 8012372:	f00e fa55 	bl	8020820 <lv_mem_alloc>
 8012376:	4602      	mov	r2, r0
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MALLOC(c->buf);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d100      	bne.n	8012386 <circ_calc_aa4+0x52>
 8012384:	e7fe      	b.n	8012384 <circ_calc_aa4+0x50>
    c->cir_opa = c->buf;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681a      	ldr	r2, [r3, #0]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	605a      	str	r2, [r3, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681a      	ldr	r2, [r3, #0]
 8012392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	3302      	adds	r3, #2
 801239a:	441a      	add	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	60da      	str	r2, [r3, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123a8:	009b      	lsls	r3, r3, #2
 80123aa:	3304      	adds	r3, #4
 80123ac:	441a      	add	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	609a      	str	r2, [r3, #8]

    /*Special case, handle manually*/
    if(radius == 1) {
 80123b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123b6:	2b01      	cmp	r3, #1
 80123b8:	d111      	bne.n	80123de <circ_calc_aa4+0xaa>
        c->cir_opa[0] = 180;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	22b4      	movs	r2, #180	; 0xb4
 80123c0:	701a      	strb	r2, [r3, #0]
        c->opa_start_on_y[0] = 0;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	2200      	movs	r2, #0
 80123c8:	801a      	strh	r2, [r3, #0]
        c->opa_start_on_y[1] = 1;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	68db      	ldr	r3, [r3, #12]
 80123ce:	3302      	adds	r3, #2
 80123d0:	2201      	movs	r2, #1
 80123d2:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[0] = 0;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	689b      	ldr	r3, [r3, #8]
 80123d8:	2200      	movs	r2, #0
 80123da:	801a      	strh	r2, [r3, #0]
        return;
 80123dc:	e2f1      	b.n	80129c2 <circ_calc_aa4+0x68e>
    }

    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 80123de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123e2:	3301      	adds	r3, #1
 80123e4:	00db      	lsls	r3, r3, #3
 80123e6:	4618      	mov	r0, r3
 80123e8:	f00e faa4 	bl	8020934 <lv_mem_buf_get>
 80123ec:	6438      	str	r0, [r7, #64]	; 0x40
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 80123ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123f2:	3301      	adds	r3, #1
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123f8:	4413      	add	r3, r2
 80123fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    uint32_t y_8th_cnt = 0;
 80123fc:	2300      	movs	r3, #0
 80123fe:	657b      	str	r3, [r7, #84]	; 0x54
    lv_point_t cp;
    lv_coord_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 8012400:	887b      	ldrh	r3, [r7, #2]
 8012402:	009b      	lsls	r3, r3, #2
 8012404:	b29b      	uxth	r3, r3
 8012406:	b21a      	sxth	r2, r3
 8012408:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 801240c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012410:	4618      	mov	r0, r3
 8012412:	f7ff ff16 	bl	8012242 <circ_init>
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    lv_coord_t cir_size = 0;
 8012416:	2300      	movs	r3, #0
 8012418:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    x_int[0] = cp.x >> 2;
 801241c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012420:	109b      	asrs	r3, r3, #2
 8012422:	b21b      	sxth	r3, r3
 8012424:	61fb      	str	r3, [r7, #28]
    x_fract[0] = 0;
 8012426:	2300      	movs	r3, #0
 8012428:	60fb      	str	r3, [r7, #12]

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 801242a:	e1b7      	b.n	801279c <circ_calc_aa4+0x468>
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 801242c:	2300      	movs	r3, #0
 801242e:	653b      	str	r3, [r7, #80]	; 0x50
 8012430:	e02b      	b.n	801248a <circ_calc_aa4+0x156>
            circ_next(&cp, &tmp);
 8012432:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8012436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801243a:	4611      	mov	r1, r2
 801243c:	4618      	mov	r0, r3
 801243e:	f7ff ff2f 	bl	80122a0 <circ_next>
            if(circ_cont(&cp) == false) break;
 8012442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012446:	4618      	mov	r0, r3
 8012448:	f7ff ff15 	bl	8012276 <circ_cont>
 801244c:	4603      	mov	r3, r0
 801244e:	f083 0301 	eor.w	r3, r3, #1
 8012452:	b2db      	uxtb	r3, r3
 8012454:	2b00      	cmp	r3, #0
 8012456:	d11c      	bne.n	8012492 <circ_calc_aa4+0x15e>
            x_int[i] = cp.x >> 2;
 8012458:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801245c:	109b      	asrs	r3, r3, #2
 801245e:	b21b      	sxth	r3, r3
 8012460:	461a      	mov	r2, r3
 8012462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012464:	009b      	lsls	r3, r3, #2
 8012466:	3358      	adds	r3, #88	; 0x58
 8012468:	443b      	add	r3, r7
 801246a:	f843 2c3c 	str.w	r2, [r3, #-60]
            x_fract[i] = cp.x & 0x3;
 801246e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012472:	b29b      	uxth	r3, r3
 8012474:	f003 0203 	and.w	r2, r3, #3
 8012478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801247a:	009b      	lsls	r3, r3, #2
 801247c:	3358      	adds	r3, #88	; 0x58
 801247e:	443b      	add	r3, r7
 8012480:	f843 2c4c 	str.w	r2, [r3, #-76]
        for(i = 0; i < 4; i++) {
 8012484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012486:	3301      	adds	r3, #1
 8012488:	653b      	str	r3, [r7, #80]	; 0x50
 801248a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801248c:	2b03      	cmp	r3, #3
 801248e:	ddd0      	ble.n	8012432 <circ_calc_aa4+0xfe>
 8012490:	e000      	b.n	8012494 <circ_calc_aa4+0x160>
            if(circ_cont(&cp) == false) break;
 8012492:	bf00      	nop
        }
        if(i != 4) break;
 8012494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012496:	2b04      	cmp	r3, #4
 8012498:	f040 818a 	bne.w	80127b0 <circ_calc_aa4+0x47c>

        /*All lines on the same x when downscaled*/
        if(x_int[0] == x_int[3]) {
 801249c:	69fa      	ldr	r2, [r7, #28]
 801249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d139      	bne.n	8012518 <circ_calc_aa4+0x1e4>
            cir_x[cir_size] = x_int[0];
 80124a4:	69f9      	ldr	r1, [r7, #28]
 80124a6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80124aa:	005b      	lsls	r3, r3, #1
 80124ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124ae:	4413      	add	r3, r2
 80124b0:	b20a      	sxth	r2, r1
 80124b2:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 80124b4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80124b8:	005b      	lsls	r3, r3, #1
 80124ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80124bc:	4413      	add	r3, r2
 80124be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80124c0:	b212      	sxth	r2, r2
 80124c2:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	b2da      	uxtb	r2, r3
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	4413      	add	r3, r2
 80124ce:	b2da      	uxtb	r2, r3
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	4413      	add	r3, r2
 80124d6:	b2d9      	uxtb	r1, r3
 80124d8:	69bb      	ldr	r3, [r7, #24]
 80124da:	b2da      	uxtb	r2, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6858      	ldr	r0, [r3, #4]
 80124e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80124e4:	4403      	add	r3, r0
 80124e6:	440a      	add	r2, r1
 80124e8:	b2d2      	uxtb	r2, r2
 80124ea:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	685a      	ldr	r2, [r3, #4]
 80124f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80124f4:	4413      	add	r3, r2
 80124f6:	781a      	ldrb	r2, [r3, #0]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6859      	ldr	r1, [r3, #4]
 80124fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012500:	440b      	add	r3, r1
 8012502:	0112      	lsls	r2, r2, #4
 8012504:	b2d2      	uxtb	r2, r2
 8012506:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8012508:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801250c:	b29b      	uxth	r3, r3
 801250e:	3301      	adds	r3, #1
 8012510:	b29b      	uxth	r3, r3
 8012512:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8012516:	e13e      	b.n	8012796 <circ_calc_aa4+0x462>
        }
        /*Second line on new x when downscaled*/
        else if(x_int[0] != x_int[1]) {
 8012518:	69fa      	ldr	r2, [r7, #28]
 801251a:	6a3b      	ldr	r3, [r7, #32]
 801251c:	429a      	cmp	r2, r3
 801251e:	d067      	beq.n	80125f0 <circ_calc_aa4+0x2bc>
            cir_x[cir_size] = x_int[0];
 8012520:	69f9      	ldr	r1, [r7, #28]
 8012522:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012526:	005b      	lsls	r3, r3, #1
 8012528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801252a:	4413      	add	r3, r2
 801252c:	b20a      	sxth	r2, r1
 801252e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8012530:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012534:	005b      	lsls	r3, r3, #1
 8012536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012538:	4413      	add	r3, r2
 801253a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801253c:	b212      	sxth	r2, r2
 801253e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0];
 8012540:	68f9      	ldr	r1, [r7, #12]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	685a      	ldr	r2, [r3, #4]
 8012546:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801254a:	4413      	add	r3, r2
 801254c:	b2ca      	uxtb	r2, r1
 801254e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	685a      	ldr	r2, [r3, #4]
 8012554:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012558:	4413      	add	r3, r2
 801255a:	781a      	ldrb	r2, [r3, #0]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6859      	ldr	r1, [r3, #4]
 8012560:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012564:	440b      	add	r3, r1
 8012566:	0112      	lsls	r2, r2, #4
 8012568:	b2d2      	uxtb	r2, r2
 801256a:	701a      	strb	r2, [r3, #0]
            cir_size++;
 801256c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012570:	b29b      	uxth	r3, r3
 8012572:	3301      	adds	r3, #1
 8012574:	b29b      	uxth	r3, r3
 8012576:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	b29b      	uxth	r3, r3
 801257e:	3b01      	subs	r3, #1
 8012580:	b299      	uxth	r1, r3
 8012582:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012586:	005b      	lsls	r3, r3, #1
 8012588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801258a:	4413      	add	r3, r2
 801258c:	b20a      	sxth	r2, r1
 801258e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8012590:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012594:	005b      	lsls	r3, r3, #1
 8012596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012598:	4413      	add	r3, r2
 801259a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801259c:	b212      	sxth	r2, r2
 801259e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	b2da      	uxtb	r2, r3
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	4413      	add	r3, r2
 80125aa:	b2da      	uxtb	r2, r3
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	4413      	add	r3, r2
 80125b2:	b2da      	uxtb	r2, r3
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6859      	ldr	r1, [r3, #4]
 80125b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80125bc:	440b      	add	r3, r1
 80125be:	3204      	adds	r2, #4
 80125c0:	b2d2      	uxtb	r2, r2
 80125c2:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	685a      	ldr	r2, [r3, #4]
 80125c8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80125cc:	4413      	add	r3, r2
 80125ce:	781a      	ldrb	r2, [r3, #0]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6859      	ldr	r1, [r3, #4]
 80125d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80125d8:	440b      	add	r3, r1
 80125da:	0112      	lsls	r2, r2, #4
 80125dc:	b2d2      	uxtb	r2, r2
 80125de:	701a      	strb	r2, [r3, #0]
            cir_size++;
 80125e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	3301      	adds	r3, #1
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80125ee:	e0d2      	b.n	8012796 <circ_calc_aa4+0x462>
        }
        /*Third line on new x when downscaled*/
        else if(x_int[0] != x_int[2]) {
 80125f0:	69fa      	ldr	r2, [r7, #28]
 80125f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d067      	beq.n	80126c8 <circ_calc_aa4+0x394>
            cir_x[cir_size] = x_int[0];
 80125f8:	69f9      	ldr	r1, [r7, #28]
 80125fa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80125fe:	005b      	lsls	r3, r3, #1
 8012600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012602:	4413      	add	r3, r2
 8012604:	b20a      	sxth	r2, r1
 8012606:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8012608:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801260c:	005b      	lsls	r3, r3, #1
 801260e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012610:	4413      	add	r3, r2
 8012612:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012614:	b212      	sxth	r2, r2
 8012616:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	b2d9      	uxtb	r1, r3
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	b2da      	uxtb	r2, r3
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6858      	ldr	r0, [r3, #4]
 8012624:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012628:	4403      	add	r3, r0
 801262a:	440a      	add	r2, r1
 801262c:	b2d2      	uxtb	r2, r2
 801262e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	685a      	ldr	r2, [r3, #4]
 8012634:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012638:	4413      	add	r3, r2
 801263a:	781a      	ldrb	r2, [r3, #0]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6859      	ldr	r1, [r3, #4]
 8012640:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012644:	440b      	add	r3, r1
 8012646:	0112      	lsls	r2, r2, #4
 8012648:	b2d2      	uxtb	r2, r2
 801264a:	701a      	strb	r2, [r3, #0]
            cir_size++;
 801264c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012650:	b29b      	uxth	r3, r3
 8012652:	3301      	adds	r3, #1
 8012654:	b29b      	uxth	r3, r3
 8012656:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	b29b      	uxth	r3, r3
 801265e:	3b01      	subs	r3, #1
 8012660:	b299      	uxth	r1, r3
 8012662:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012666:	005b      	lsls	r3, r3, #1
 8012668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801266a:	4413      	add	r3, r2
 801266c:	b20a      	sxth	r2, r1
 801266e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8012670:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012674:	005b      	lsls	r3, r3, #1
 8012676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012678:	4413      	add	r3, r2
 801267a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801267c:	b212      	sxth	r2, r2
 801267e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	b2da      	uxtb	r2, r3
 8012684:	69bb      	ldr	r3, [r7, #24]
 8012686:	b2db      	uxtb	r3, r3
 8012688:	4413      	add	r3, r2
 801268a:	b2da      	uxtb	r2, r3
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6859      	ldr	r1, [r3, #4]
 8012690:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012694:	440b      	add	r3, r1
 8012696:	3208      	adds	r2, #8
 8012698:	b2d2      	uxtb	r2, r2
 801269a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	685a      	ldr	r2, [r3, #4]
 80126a0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80126a4:	4413      	add	r3, r2
 80126a6:	781a      	ldrb	r2, [r3, #0]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6859      	ldr	r1, [r3, #4]
 80126ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80126b0:	440b      	add	r3, r1
 80126b2:	0112      	lsls	r2, r2, #4
 80126b4:	b2d2      	uxtb	r2, r2
 80126b6:	701a      	strb	r2, [r3, #0]
            cir_size++;
 80126b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80126bc:	b29b      	uxth	r3, r3
 80126be:	3301      	adds	r3, #1
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80126c6:	e066      	b.n	8012796 <circ_calc_aa4+0x462>
        }
        /*Forth line on new x when downscaled*/
        else {
            cir_x[cir_size] = x_int[0];
 80126c8:	69f9      	ldr	r1, [r7, #28]
 80126ca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80126ce:	005b      	lsls	r3, r3, #1
 80126d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126d2:	4413      	add	r3, r2
 80126d4:	b20a      	sxth	r2, r1
 80126d6:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 80126d8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80126dc:	005b      	lsls	r3, r3, #1
 80126de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126e0:	4413      	add	r3, r2
 80126e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80126e4:	b212      	sxth	r2, r2
 80126e6:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	b2da      	uxtb	r2, r3
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	4413      	add	r3, r2
 80126f2:	b2d9      	uxtb	r1, r3
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	b2da      	uxtb	r2, r3
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6858      	ldr	r0, [r3, #4]
 80126fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012700:	4403      	add	r3, r0
 8012702:	440a      	add	r2, r1
 8012704:	b2d2      	uxtb	r2, r2
 8012706:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	685a      	ldr	r2, [r3, #4]
 801270c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012710:	4413      	add	r3, r2
 8012712:	781a      	ldrb	r2, [r3, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6859      	ldr	r1, [r3, #4]
 8012718:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801271c:	440b      	add	r3, r1
 801271e:	0112      	lsls	r2, r2, #4
 8012720:	b2d2      	uxtb	r2, r2
 8012722:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8012724:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012728:	b29b      	uxth	r3, r3
 801272a:	3301      	adds	r3, #1
 801272c:	b29b      	uxth	r3, r3
 801272e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	b29b      	uxth	r3, r3
 8012736:	3b01      	subs	r3, #1
 8012738:	b299      	uxth	r1, r3
 801273a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801273e:	005b      	lsls	r3, r3, #1
 8012740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012742:	4413      	add	r3, r2
 8012744:	b20a      	sxth	r2, r1
 8012746:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8012748:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801274c:	005b      	lsls	r3, r3, #1
 801274e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012750:	4413      	add	r3, r2
 8012752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012754:	b212      	sxth	r2, r2
 8012756:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8012758:	69bb      	ldr	r3, [r7, #24]
 801275a:	b2da      	uxtb	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6859      	ldr	r1, [r3, #4]
 8012760:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012764:	440b      	add	r3, r1
 8012766:	320c      	adds	r2, #12
 8012768:	b2d2      	uxtb	r2, r2
 801276a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	685a      	ldr	r2, [r3, #4]
 8012770:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012774:	4413      	add	r3, r2
 8012776:	781a      	ldrb	r2, [r3, #0]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6859      	ldr	r1, [r3, #4]
 801277c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012780:	440b      	add	r3, r1
 8012782:	0112      	lsls	r2, r2, #4
 8012784:	b2d2      	uxtb	r2, r2
 8012786:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8012788:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801278c:	b29b      	uxth	r3, r3
 801278e:	3301      	adds	r3, #1
 8012790:	b29b      	uxth	r3, r3
 8012792:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        y_8th_cnt++;
 8012796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012798:	3301      	adds	r3, #1
 801279a:	657b      	str	r3, [r7, #84]	; 0x54
    while(circ_cont(&cp)) {
 801279c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7ff fd68 	bl	8012276 <circ_cont>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f47f ae3f 	bne.w	801242c <circ_calc_aa4+0xf8>
 80127ae:	e000      	b.n	80127b2 <circ_calc_aa4+0x47e>
        if(i != 4) break;
 80127b0:	bf00      	nop
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
 80127b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80127b6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80127ba:	fb02 f303 	mul.w	r3, r2, r3
 80127be:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t mid_int = mid >> 10;
 80127c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c2:	129b      	asrs	r3, r3, #10
 80127c4:	637b      	str	r3, [r7, #52]	; 0x34
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 80127c6:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80127ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80127ce:	4413      	add	r3, r2
 80127d0:	005b      	lsls	r3, r3, #1
 80127d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80127d4:	4413      	add	r3, r2
 80127d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127da:	461a      	mov	r2, r3
 80127dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127de:	4293      	cmp	r3, r2
 80127e0:	d10d      	bne.n	80127fe <circ_calc_aa4+0x4ca>
 80127e2:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80127e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80127ea:	4413      	add	r3, r2
 80127ec:	005b      	lsls	r3, r3, #1
 80127ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127f0:	4413      	add	r3, r2
 80127f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127f6:	461a      	mov	r2, r3
 80127f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d04e      	beq.n	801289c <circ_calc_aa4+0x568>
        int32_t tmp_val = mid - (mid_int << 10);
 80127fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012800:	029b      	lsls	r3, r3, #10
 8012802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012804:	1ad3      	subs	r3, r2, r3
 8012806:	64bb      	str	r3, [r7, #72]	; 0x48
        if(tmp_val <= 512) {
 8012808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801280a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801280e:	dc08      	bgt.n	8012822 <circ_calc_aa4+0x4ee>
            tmp_val = tmp_val * tmp_val * 2;
 8012810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012812:	fb03 f303 	mul.w	r3, r3, r3
 8012816:	005b      	lsls	r3, r3, #1
 8012818:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 801281a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801281c:	141b      	asrs	r3, r3, #16
 801281e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012820:	e00f      	b.n	8012842 <circ_calc_aa4+0x50e>
        }
        else {
            tmp_val = 1024 - tmp_val;
 8012822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012824:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8012828:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val * tmp_val * 2;
 801282a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801282c:	fb03 f303 	mul.w	r3, r3, r3
 8012830:	005b      	lsls	r3, r3, #1
 8012832:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8012834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012836:	141b      	asrs	r3, r3, #16
 8012838:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = 15 - tmp_val;
 801283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801283c:	f1c3 030f 	rsb	r3, r3, #15
 8012840:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        cir_x[cir_size] = mid_int;
 8012842:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012846:	005b      	lsls	r3, r3, #1
 8012848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801284a:	4413      	add	r3, r2
 801284c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801284e:	b212      	sxth	r2, r2
 8012850:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = mid_int;
 8012852:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012856:	005b      	lsls	r3, r3, #1
 8012858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801285a:	4413      	add	r3, r2
 801285c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801285e:	b212      	sxth	r2, r2
 8012860:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = tmp_val;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	685a      	ldr	r2, [r3, #4]
 8012866:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801286a:	4413      	add	r3, r2
 801286c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801286e:	b2d2      	uxtb	r2, r2
 8012870:	701a      	strb	r2, [r3, #0]
        c->cir_opa[cir_size] *= 16;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	685a      	ldr	r2, [r3, #4]
 8012876:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801287a:	4413      	add	r3, r2
 801287c:	781a      	ldrb	r2, [r3, #0]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6859      	ldr	r1, [r3, #4]
 8012882:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012886:	440b      	add	r3, r1
 8012888:	0112      	lsls	r2, r2, #4
 801288a:	b2d2      	uxtb	r2, r2
 801288c:	701a      	strb	r2, [r3, #0]
        cir_size++;
 801288e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012892:	b29b      	uxth	r3, r3
 8012894:	3301      	adds	r3, #1
 8012896:	b29b      	uxth	r3, r3
 8012898:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 801289c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80128a0:	3b02      	subs	r3, #2
 80128a2:	653b      	str	r3, [r7, #80]	; 0x50
 80128a4:	e02c      	b.n	8012900 <circ_calc_aa4+0x5cc>
        cir_x[cir_size] = cir_y[i];
 80128a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128a8:	005b      	lsls	r3, r3, #1
 80128aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128ac:	441a      	add	r2, r3
 80128ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80128b2:	005b      	lsls	r3, r3, #1
 80128b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80128b6:	440b      	add	r3, r1
 80128b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80128bc:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = cir_x[i];
 80128be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128c4:	441a      	add	r2, r3
 80128c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128ce:	440b      	add	r3, r1
 80128d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80128d4:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = c->cir_opa[i];
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	685a      	ldr	r2, [r3, #4]
 80128da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128dc:	441a      	add	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6859      	ldr	r1, [r3, #4]
 80128e2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80128e6:	440b      	add	r3, r1
 80128e8:	7812      	ldrb	r2, [r2, #0]
 80128ea:	701a      	strb	r2, [r3, #0]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 80128ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128ee:	3b01      	subs	r3, #1
 80128f0:	653b      	str	r3, [r7, #80]	; 0x50
 80128f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	3301      	adds	r3, #1
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8012900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012902:	2b00      	cmp	r3, #0
 8012904:	dacf      	bge.n	80128a6 <circ_calc_aa4+0x572>
    }

    lv_coord_t y = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    i = 0;
 801290c:	2300      	movs	r3, #0
 801290e:	653b      	str	r3, [r7, #80]	; 0x50
    c->opa_start_on_y[0] = 0;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	2200      	movs	r2, #0
 8012916:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 8012918:	e049      	b.n	80129ae <circ_calc_aa4+0x67a>
        c->opa_start_on_y[y] = i;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	68da      	ldr	r2, [r3, #12]
 801291e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012922:	005b      	lsls	r3, r3, #1
 8012924:	4413      	add	r3, r2
 8012926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012928:	b292      	uxth	r2, r2
 801292a:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[y] = cir_x[i];
 801292c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801292e:	005b      	lsls	r3, r3, #1
 8012930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012932:	4413      	add	r3, r2
 8012934:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	689a      	ldr	r2, [r3, #8]
 801293c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012940:	005b      	lsls	r3, r3, #1
 8012942:	4413      	add	r3, r2
 8012944:	b28a      	uxth	r2, r1
 8012946:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8012948:	e01b      	b.n	8012982 <circ_calc_aa4+0x64e>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 801294a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801294c:	005b      	lsls	r3, r3, #1
 801294e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012950:	4413      	add	r3, r2
 8012952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012956:	4619      	mov	r1, r3
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	689a      	ldr	r2, [r3, #8]
 801295c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012960:	005b      	lsls	r3, r3, #1
 8012962:	4413      	add	r3, r2
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	4299      	cmp	r1, r3
 8012968:	bfa8      	it	ge
 801296a:	4619      	movge	r1, r3
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	689a      	ldr	r2, [r3, #8]
 8012970:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8012974:	005b      	lsls	r3, r3, #1
 8012976:	4413      	add	r3, r2
 8012978:	b28a      	uxth	r2, r1
 801297a:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 801297c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801297e:	3301      	adds	r3, #1
 8012980:	653b      	str	r3, [r7, #80]	; 0x50
 8012982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012984:	005b      	lsls	r3, r3, #1
 8012986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012988:	4413      	add	r3, r2
 801298a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801298e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8012992:	429a      	cmp	r2, r3
 8012994:	d104      	bne.n	80129a0 <circ_calc_aa4+0x66c>
 8012996:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801299a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801299c:	429a      	cmp	r2, r3
 801299e:	dbd4      	blt.n	801294a <circ_calc_aa4+0x616>
        }
        y++;
 80129a0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	3301      	adds	r3, #1
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while(i < cir_size) {
 80129ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80129b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129b4:	429a      	cmp	r2, r3
 80129b6:	dbb0      	blt.n	801291a <circ_calc_aa4+0x5e6>
    }

    lv_mem_buf_release(cir_x);
 80129b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80129ba:	f00e f867 	bl	8020a8c <lv_mem_buf_release>
 80129be:	e000      	b.n	80129c2 <circ_calc_aa4+0x68e>
    if(radius == 0) return;
 80129c0:	bf00      	nop
}
 80129c2:	3758      	adds	r7, #88	; 0x58
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <get_next_line>:

static lv_opa_t * get_next_line(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t y, lv_coord_t * len,
                                lv_coord_t * x_start)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	607a      	str	r2, [r7, #4]
 80129d2:	603b      	str	r3, [r7, #0]
 80129d4:	460b      	mov	r3, r1
 80129d6:	817b      	strh	r3, [r7, #10]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	68da      	ldr	r2, [r3, #12]
 80129dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80129e0:	3301      	adds	r3, #1
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	4413      	add	r3, r2
 80129e6:	881a      	ldrh	r2, [r3, #0]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	68d9      	ldr	r1, [r3, #12]
 80129ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80129f0:	005b      	lsls	r3, r3, #1
 80129f2:	440b      	add	r3, r1
 80129f4:	881b      	ldrh	r3, [r3, #0]
 80129f6:	1ad3      	subs	r3, r2, r3
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	b21a      	sxth	r2, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	801a      	strh	r2, [r3, #0]
    *x_start = c->x_start_on_y[y];
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	689a      	ldr	r2, [r3, #8]
 8012a04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012a08:	005b      	lsls	r3, r3, #1
 8012a0a:	4413      	add	r3, r2
 8012a0c:	881b      	ldrh	r3, [r3, #0]
 8012a0e:	b21a      	sxth	r2, r3
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	801a      	strh	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	68d1      	ldr	r1, [r2, #12]
 8012a1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012a20:	0052      	lsls	r2, r2, #1
 8012a22:	440a      	add	r2, r1
 8012a24:	8812      	ldrh	r2, [r2, #0]
 8012a26:	4413      	add	r3, r2
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3714      	adds	r7, #20
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr

08012a34 <mask_mix>:


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b083      	sub	sp, #12
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	460a      	mov	r2, r1
 8012a3e:	71fb      	strb	r3, [r7, #7]
 8012a40:	4613      	mov	r3, r2
 8012a42:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8012a44:	79bb      	ldrb	r3, [r7, #6]
 8012a46:	2bfc      	cmp	r3, #252	; 0xfc
 8012a48:	d901      	bls.n	8012a4e <mask_mix+0x1a>
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	e010      	b.n	8012a70 <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 8012a4e:	79bb      	ldrb	r3, [r7, #6]
 8012a50:	2b02      	cmp	r3, #2
 8012a52:	d801      	bhi.n	8012a58 <mask_mix+0x24>
 8012a54:	2300      	movs	r3, #0
 8012a56:	e00b      	b.n	8012a70 <mask_mix+0x3c>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8012a58:	79fb      	ldrb	r3, [r7, #7]
 8012a5a:	79ba      	ldrb	r2, [r7, #6]
 8012a5c:	fb02 f303 	mul.w	r3, r2, r3
 8012a60:	461a      	mov	r2, r3
 8012a62:	4613      	mov	r3, r2
 8012a64:	021b      	lsls	r3, r3, #8
 8012a66:	4413      	add	r3, r2
 8012a68:	01db      	lsls	r3, r3, #7
 8012a6a:	4413      	add	r3, r2
 8012a6c:	0ddb      	lsrs	r3, r3, #23
 8012a6e:	b2db      	uxtb	r3, r3
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	370c      	adds	r7, #12
 8012a74:	46bd      	mov	sp, r7
 8012a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7a:	4770      	bx	lr

08012a7c <lv_area_get_width>:
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b083      	sub	sp, #12
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012a8a:	b29a      	uxth	r2, r3
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	3301      	adds	r3, #1
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	b21b      	sxth	r3, r3
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	370c      	adds	r7, #12
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr

08012aaa <lv_area_get_height>:
{
 8012aaa:	b480      	push	{r7}
 8012aac:	b083      	sub	sp, #12
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	1ad3      	subs	r3, r2, r3
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	b21b      	sxth	r3, r3
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <lv_color_make>:
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	4603      	mov	r3, r0
 8012ae0:	71fb      	strb	r3, [r7, #7]
 8012ae2:	460b      	mov	r3, r1
 8012ae4:	71bb      	strb	r3, [r7, #6]
 8012ae6:	4613      	mov	r3, r2
 8012ae8:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8012aea:	797b      	ldrb	r3, [r7, #5]
 8012aec:	09db      	lsrs	r3, r3, #7
 8012aee:	b2da      	uxtb	r2, r3
 8012af0:	79bb      	ldrb	r3, [r7, #6]
 8012af2:	09db      	lsrs	r3, r3, #7
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	4313      	orrs	r3, r2
 8012af8:	b2da      	uxtb	r2, r3
 8012afa:	79fb      	ldrb	r3, [r7, #7]
 8012afc:	09db      	lsrs	r3, r3, #7
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	4313      	orrs	r3, r2
 8012b02:	b2db      	uxtb	r3, r3
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <lv_color_white>:
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8012b14:	22ff      	movs	r2, #255	; 0xff
 8012b16:	21ff      	movs	r1, #255	; 0xff
 8012b18:	20ff      	movs	r0, #255	; 0xff
 8012b1a:	f7ff ffdd 	bl	8012ad8 <lv_color_make>
 8012b1e:	4603      	mov	r3, r0
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <lv_color_black>:
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8012b28:	2200      	movs	r2, #0
 8012b2a:	2100      	movs	r1, #0
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	f7ff ffd3 	bl	8012ad8 <lv_color_make>
 8012b32:	4603      	mov	r3, r0
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8012b40:	2130      	movs	r1, #48	; 0x30
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f00e faa0 	bl	8021088 <lv_memset_00>
    dsc->bg_color = lv_color_white();
 8012b48:	687c      	ldr	r4, [r7, #4]
 8012b4a:	f7ff ffe1 	bl	8012b10 <lv_color_white>
 8012b4e:	7120      	strb	r0, [r4, #4]
    dsc->bg_grad.stops[0].color = lv_color_white();
 8012b50:	687c      	ldr	r4, [r7, #4]
 8012b52:	f7ff ffdd 	bl	8012b10 <lv_color_white>
 8012b56:	7160      	strb	r0, [r4, #5]
    dsc->bg_grad.stops[1].color = lv_color_black();
 8012b58:	687c      	ldr	r4, [r7, #4]
 8012b5a:	f7ff ffe3 	bl	8012b24 <lv_color_black>
 8012b5e:	71e0      	strb	r0, [r4, #7]
    dsc->bg_grad.stops[1].frac = 0xFF;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	22ff      	movs	r2, #255	; 0xff
 8012b64:	721a      	strb	r2, [r3, #8]
    dsc->bg_grad.stops_count = 2;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2202      	movs	r2, #2
 8012b6a:	725a      	strb	r2, [r3, #9]
    dsc->border_color = lv_color_black();
 8012b6c:	687c      	ldr	r4, [r7, #4]
 8012b6e:	f7ff ffd9 	bl	8012b24 <lv_color_black>
 8012b72:	7620      	strb	r0, [r4, #24]
    dsc->shadow_color = lv_color_black();
 8012b74:	687c      	ldr	r4, [r7, #4]
 8012b76:	f7ff ffd5 	bl	8012b24 <lv_color_black>
 8012b7a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	4a0e      	ldr	r2, [pc, #56]	; (8012bbc <lv_draw_rect_dsc_init+0x84>)
 8012b82:	611a      	str	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	22ff      	movs	r2, #255	; 0xff
 8012b88:	70da      	strb	r2, [r3, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	22ff      	movs	r2, #255	; 0xff
 8012b8e:	755a      	strb	r2, [r3, #21]
    dsc->outline_opa = LV_OPA_COVER;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	22ff      	movs	r2, #255	; 0xff
 8012b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    dsc->border_opa = LV_OPA_COVER;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	22ff      	movs	r2, #255	; 0xff
 8012b9c:	771a      	strb	r2, [r3, #28]
    dsc->shadow_opa = LV_OPA_COVER;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	22ff      	movs	r2, #255	; 0xff
 8012ba2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    dsc->border_side = LV_BORDER_SIDE_FULL;
 8012ba6:	687a      	ldr	r2, [r7, #4]
 8012ba8:	7f53      	ldrb	r3, [r2, #29]
 8012baa:	210f      	movs	r1, #15
 8012bac:	f361 0345 	bfi	r3, r1, #1, #5
 8012bb0:	7753      	strb	r3, [r2, #29]
}
 8012bb2:	bf00      	nop
 8012bb4:	370c      	adds	r7, #12
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd90      	pop	{r4, r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	08026df4 	.word	0x08026df4

08012bc0 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff ff6c 	bl	8012aaa <lv_area_get_height>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	dd0c      	ble.n	8012bf2 <lv_draw_rect+0x32>
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f7ff ff4f 	bl	8012a7c <lv_area_get_width>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	dd06      	ble.n	8012bf2 <lv_draw_rect+0x32>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	68b9      	ldr	r1, [r7, #8]
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	4798      	blx	r3
 8012bf0:	e000      	b.n	8012bf4 <lv_draw_rect+0x34>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8012bf2:	bf00      	nop

    LV_ASSERT_MEM_INTEGRITY();
}
 8012bf4:	3710      	adds	r7, #16
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}

08012bfa <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 8012bfa:	b590      	push	{r4, r7, lr}
 8012bfc:	b08b      	sub	sp, #44	; 0x2c
 8012bfe:	af06      	add	r7, sp, #24
 8012c00:	60f8      	str	r0, [r7, #12]
 8012c02:	60b9      	str	r1, [r7, #8]
 8012c04:	607a      	str	r2, [r7, #4]
 8012c06:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_NULL(draw_ctx);
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d100      	bne.n	8012c10 <lv_draw_transform+0x16>
 8012c0e:	e7fe      	b.n	8012c0e <lv_draw_transform+0x14>
    if(draw_ctx->draw_transform == NULL) {
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d018      	beq.n	8012c4a <lv_draw_transform+0x50>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8012c1c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c22:	9305      	str	r3, [sp, #20]
 8012c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c26:	9304      	str	r3, [sp, #16]
 8012c28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012c2c:	9303      	str	r3, [sp, #12]
 8012c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c30:	9302      	str	r3, [sp, #8]
 8012c32:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012c36:	9301      	str	r3, [sp, #4]
 8012c38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c3c:	9300      	str	r3, [sp, #0]
 8012c3e:	4613      	mov	r3, r2
 8012c40:	687a      	ldr	r2, [r7, #4]
 8012c42:	68b9      	ldr	r1, [r7, #8]
 8012c44:	68f8      	ldr	r0, [r7, #12]
 8012c46:	47a0      	blx	r4
 8012c48:	e000      	b.n	8012c4c <lv_draw_transform+0x52>
        return;
 8012c4a:	bf00      	nop

}
 8012c4c:	3714      	adds	r7, #20
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd90      	pop	{r4, r7, pc}

08012c52 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8012c52:	b580      	push	{r7, lr}
 8012c54:	b088      	sub	sp, #32
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	60f8      	str	r0, [r7, #12]
 8012c5a:	4608      	mov	r0, r1
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	461a      	mov	r2, r3
 8012c60:	4603      	mov	r3, r0
 8012c62:	817b      	strh	r3, [r7, #10]
 8012c64:	460b      	mov	r3, r1
 8012c66:	813b      	strh	r3, [r7, #8]
 8012c68:	4613      	mov	r3, r2
 8012c6a:	80fb      	strh	r3, [r7, #6]
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 8012c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d116      	bne.n	8012ca2 <_lv_img_buf_get_transformed_area+0x50>
 8012c74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c7a:	d112      	bne.n	8012ca2 <_lv_img_buf_get_transformed_area+0x50>
        res->x1 = 0;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	2200      	movs	r2, #0
 8012c86:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 8012c88:	897b      	ldrh	r3, [r7, #10]
 8012c8a:	3b01      	subs	r3, #1
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	b21a      	sxth	r2, r3
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 8012c94:	893b      	ldrh	r3, [r7, #8]
 8012c96:	3b01      	subs	r3, #1
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	b21a      	sxth	r2, r3
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	80da      	strh	r2, [r3, #6]
 8012ca0:	e09c      	b.n	8012ddc <_lv_img_buf_get_transformed_area+0x18a>
        return;
    }

    lv_point_t p[4] = {
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	823b      	strh	r3, [r7, #16]
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	827b      	strh	r3, [r7, #18]
 8012caa:	897b      	ldrh	r3, [r7, #10]
 8012cac:	82bb      	strh	r3, [r7, #20]
 8012cae:	2300      	movs	r3, #0
 8012cb0:	82fb      	strh	r3, [r7, #22]
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	833b      	strh	r3, [r7, #24]
 8012cb6:	893b      	ldrh	r3, [r7, #8]
 8012cb8:	837b      	strh	r3, [r7, #26]
 8012cba:	897b      	ldrh	r3, [r7, #10]
 8012cbc:	83bb      	strh	r3, [r7, #28]
 8012cbe:	893b      	ldrh	r3, [r7, #8]
 8012cc0:	83fb      	strh	r3, [r7, #30]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 8012cc2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012cc6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012cc8:	f107 0010 	add.w	r0, r7, #16
 8012ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cce:	f00c fd91 	bl	801f7f4 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 8012cd2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012cd6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012cd8:	f107 0310 	add.w	r3, r7, #16
 8012cdc:	1d18      	adds	r0, r3, #4
 8012cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce0:	f00c fd88 	bl	801f7f4 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 8012ce4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012ce8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012cea:	f107 0310 	add.w	r3, r7, #16
 8012cee:	f103 0008 	add.w	r0, r3, #8
 8012cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf4:	f00c fd7e 	bl	801f7f4 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 8012cf8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012cfc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012cfe:	f107 0310 	add.w	r3, r7, #16
 8012d02:	f103 000c 	add.w	r0, r3, #12
 8012d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d08:	f00c fd74 	bl	801f7f4 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 8012d0c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8012d10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012d14:	4293      	cmp	r3, r2
 8012d16:	bfa8      	it	ge
 8012d18:	4613      	movge	r3, r2
 8012d1a:	b21a      	sxth	r2, r3
 8012d1c:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8012d20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012d24:	428b      	cmp	r3, r1
 8012d26:	bfa8      	it	ge
 8012d28:	460b      	movge	r3, r1
 8012d2a:	b21b      	sxth	r3, r3
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	bfa8      	it	ge
 8012d30:	4613      	movge	r3, r2
 8012d32:	b21b      	sxth	r3, r3
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	3b02      	subs	r3, #2
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	b21a      	sxth	r2, r3
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 8012d40:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8012d44:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	bfb8      	it	lt
 8012d4c:	4613      	movlt	r3, r2
 8012d4e:	b21a      	sxth	r2, r3
 8012d50:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8012d54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012d58:	428b      	cmp	r3, r1
 8012d5a:	bfb8      	it	lt
 8012d5c:	460b      	movlt	r3, r1
 8012d5e:	b21b      	sxth	r3, r3
 8012d60:	4293      	cmp	r3, r2
 8012d62:	bfb8      	it	lt
 8012d64:	4613      	movlt	r3, r2
 8012d66:	b21b      	sxth	r3, r3
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	3302      	adds	r3, #2
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	b21a      	sxth	r2, r3
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 8012d74:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012d78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	bfa8      	it	ge
 8012d80:	4613      	movge	r3, r2
 8012d82:	b21a      	sxth	r2, r3
 8012d84:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012d88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012d8c:	428b      	cmp	r3, r1
 8012d8e:	bfa8      	it	ge
 8012d90:	460b      	movge	r3, r1
 8012d92:	b21b      	sxth	r3, r3
 8012d94:	4293      	cmp	r3, r2
 8012d96:	bfa8      	it	ge
 8012d98:	4613      	movge	r3, r2
 8012d9a:	b21b      	sxth	r3, r3
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	3b02      	subs	r3, #2
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	b21a      	sxth	r2, r3
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 8012da8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012dac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012db0:	4293      	cmp	r3, r2
 8012db2:	bfb8      	it	lt
 8012db4:	4613      	movlt	r3, r2
 8012db6:	b21a      	sxth	r2, r3
 8012db8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012dbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012dc0:	428b      	cmp	r3, r1
 8012dc2:	bfb8      	it	lt
 8012dc4:	460b      	movlt	r3, r1
 8012dc6:	b21b      	sxth	r3, r3
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	bfb8      	it	lt
 8012dcc:	4613      	movlt	r3, r2
 8012dce:	b21b      	sxth	r3, r3
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	3302      	adds	r3, #2
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	b21a      	sxth	r2, r3
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 8012ddc:	3720      	adds	r7, #32
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
	...

08012de4 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b088      	sub	sp, #32
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	60f8      	str	r0, [r7, #12]
 8012dec:	7239      	strb	r1, [r7, #8]
 8012dee:	607a      	str	r2, [r7, #4]
    /*Is the image cached?*/
    _lv_img_cache_entry_t * cached_src = NULL;
 8012df0:	2300      	movs	r3, #0
 8012df2:	61fb      	str	r3, [r7, #28]
    }
    else {
        LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
 8012df4:	4b19      	ldr	r3, [pc, #100]	; (8012e5c <_lv_img_cache_open+0x78>)
 8012df6:	61fb      	str	r3, [r7, #28]
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 8012df8:	f00b fddc 	bl	801e9b4 <lv_tick_get>
 8012dfc:	61b8      	str	r0, [r7, #24]
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8012dfe:	69f8      	ldr	r0, [r7, #28]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	7a3a      	ldrb	r2, [r7, #8]
 8012e04:	68f9      	ldr	r1, [r7, #12]
 8012e06:	f000 f8e9 	bl	8012fdc <lv_img_decoder_open>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	75fb      	strb	r3, [r7, #23]
    if(open_res == LV_RES_INV) {
 8012e0e:	7dfb      	ldrb	r3, [r7, #23]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d109      	bne.n	8012e28 <_lv_img_cache_open+0x44>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 8012e14:	212c      	movs	r1, #44	; 0x2c
 8012e16:	69f8      	ldr	r0, [r7, #28]
 8012e18:	f00e f936 	bl	8021088 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e22:	629a      	str	r2, [r3, #40]	; 0x28
        return NULL;
 8012e24:	2300      	movs	r3, #0
 8012e26:	e014      	b.n	8012e52 <_lv_img_cache_open+0x6e>
    }

    cached_src->life = 0;
 8012e28:	69fb      	ldr	r3, [r7, #28]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	69db      	ldr	r3, [r3, #28]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d105      	bne.n	8012e42 <_lv_img_cache_open+0x5e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8012e36:	69b8      	ldr	r0, [r7, #24]
 8012e38:	f00b fdd6 	bl	801e9e8 <lv_tick_elaps>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	61da      	str	r2, [r3, #28]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8012e42:	69fb      	ldr	r3, [r7, #28]
 8012e44:	69db      	ldr	r3, [r3, #28]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d102      	bne.n	8012e50 <_lv_img_cache_open+0x6c>
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	61da      	str	r2, [r3, #28]

    return cached_src;
 8012e50:	69fb      	ldr	r3, [r7, #28]
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3720      	adds	r7, #32
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	2000089c 	.word	0x2000089c

08012e60 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 8012e68:	bf00      	nop
 8012e6a:	370c      	adds	r7, #12
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <lv_memcpy_small>:
{
 8012e74:	b480      	push	{r7}
 8012e76:	b087      	sub	sp, #28
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	60f8      	str	r0, [r7, #12]
 8012e7c:	60b9      	str	r1, [r7, #8]
 8012e7e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	613b      	str	r3, [r7, #16]
    while(len) {
 8012e88:	e00c      	b.n	8012ea4 <lv_memcpy_small+0x30>
        *d8 = *s8;
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	781a      	ldrb	r2, [r3, #0]
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	701a      	strb	r2, [r3, #0]
        d8++;
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	3301      	adds	r3, #1
 8012e96:	617b      	str	r3, [r7, #20]
        s8++;
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	3301      	adds	r3, #1
 8012e9c:	613b      	str	r3, [r7, #16]
        len--;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	3b01      	subs	r3, #1
 8012ea2:	607b      	str	r3, [r7, #4]
    while(len) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d1ef      	bne.n	8012e8a <lv_memcpy_small+0x16>
    return dst;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	371c      	adds	r7, #28
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb6:	4770      	bx	lr

08012eb8 <lv_color_make>:
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b083      	sub	sp, #12
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	71fb      	strb	r3, [r7, #7]
 8012ec2:	460b      	mov	r3, r1
 8012ec4:	71bb      	strb	r3, [r7, #6]
 8012ec6:	4613      	mov	r3, r2
 8012ec8:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8012eca:	797b      	ldrb	r3, [r7, #5]
 8012ecc:	09db      	lsrs	r3, r3, #7
 8012ece:	b2da      	uxtb	r2, r3
 8012ed0:	79bb      	ldrb	r3, [r7, #6]
 8012ed2:	09db      	lsrs	r3, r3, #7
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	4313      	orrs	r3, r2
 8012ed8:	b2da      	uxtb	r2, r3
 8012eda:	79fb      	ldrb	r3, [r7, #7]
 8012edc:	09db      	lsrs	r3, r3, #7
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	4313      	orrs	r3, r2
 8012ee2:	b2db      	uxtb	r3, r3
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	370c      	adds	r7, #12
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr

08012ef0 <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 */
void _lv_img_decoder_init(void)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 8012ef6:	2114      	movs	r1, #20
 8012ef8:	4810      	ldr	r0, [pc, #64]	; (8012f3c <_lv_img_decoder_init+0x4c>)
 8012efa:	f00d f9f4 	bl	80202e6 <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 8012efe:	f000 f96d 	bl	80131dc <lv_img_decoder_create>
 8012f02:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d100      	bne.n	8012f0c <_lv_img_decoder_init+0x1c>
 8012f0a:	e7fe      	b.n	8012f0a <_lv_img_decoder_init+0x1a>
    if(decoder == NULL) {
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d010      	beq.n	8012f34 <_lv_img_decoder_init+0x44>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8012f12:	490b      	ldr	r1, [pc, #44]	; (8012f40 <_lv_img_decoder_init+0x50>)
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 f97d 	bl	8013214 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 8012f1a:	490a      	ldr	r1, [pc, #40]	; (8012f44 <_lv_img_decoder_init+0x54>)
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f000 f987 	bl	8013230 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8012f22:	4909      	ldr	r1, [pc, #36]	; (8012f48 <_lv_img_decoder_init+0x58>)
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 f991 	bl	801324c <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 8012f2a:	4908      	ldr	r1, [pc, #32]	; (8012f4c <_lv_img_decoder_init+0x5c>)
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f000 f99b 	bl	8013268 <lv_img_decoder_set_close_cb>
 8012f32:	e000      	b.n	8012f36 <_lv_img_decoder_init+0x46>
        return;
 8012f34:	bf00      	nop
}
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	20000880 	.word	0x20000880
 8012f40:	08013285 	.word	0x08013285
 8012f44:	080133d5 	.word	0x080133d5
 8012f48:	08013699 	.word	0x08013699
 8012f4c:	080137bd 	.word	0x080137bd

08012f50 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const void * src, lv_img_header_t * header)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
    lv_memset_00(header, sizeof(lv_img_header_t));
 8012f5a:	2104      	movs	r1, #4
 8012f5c:	6838      	ldr	r0, [r7, #0]
 8012f5e:	f00e f893 	bl	8021088 <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d101      	bne.n	8012f6c <lv_img_decoder_get_info+0x1c>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	e030      	b.n	8012fce <lv_img_decoder_get_info+0x7e>

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7fb ff76 	bl	800ee5e <lv_img_src_get_type>
 8012f72:	4603      	mov	r3, r0
 8012f74:	73fb      	strb	r3, [r7, #15]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8012f76:	7bfb      	ldrb	r3, [r7, #15]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d107      	bne.n	8012f8c <lv_img_decoder_get_info+0x3c>
        const lv_img_dsc_t * img_dsc = src;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	60bb      	str	r3, [r7, #8]
        if(img_dsc->data == NULL) return LV_RES_INV;
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	689b      	ldr	r3, [r3, #8]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d101      	bne.n	8012f8c <lv_img_decoder_get_info+0x3c>
 8012f88:	2300      	movs	r3, #0
 8012f8a:	e020      	b.n	8012fce <lv_img_decoder_get_info+0x7e>
    }

    lv_res_t res = LV_RES_INV;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	75fb      	strb	r3, [r7, #23]
    lv_img_decoder_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8012f90:	4811      	ldr	r0, [pc, #68]	; (8012fd8 <lv_img_decoder_get_info+0x88>)
 8012f92:	f00d fa86 	bl	80204a2 <_lv_ll_get_head>
 8012f96:	6138      	str	r0, [r7, #16]
 8012f98:	e013      	b.n	8012fc2 <lv_img_decoder_get_info+0x72>
        if(d->info_cb) {
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00a      	beq.n	8012fb8 <lv_img_decoder_get_info+0x68>
            res = d->info_cb(d, src, header);
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	683a      	ldr	r2, [r7, #0]
 8012fa8:	6879      	ldr	r1, [r7, #4]
 8012faa:	6938      	ldr	r0, [r7, #16]
 8012fac:	4798      	blx	r3
 8012fae:	4603      	mov	r3, r0
 8012fb0:	75fb      	strb	r3, [r7, #23]
            if(res == LV_RES_OK) break;
 8012fb2:	7dfb      	ldrb	r3, [r7, #23]
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d008      	beq.n	8012fca <lv_img_decoder_get_info+0x7a>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8012fb8:	6939      	ldr	r1, [r7, #16]
 8012fba:	4807      	ldr	r0, [pc, #28]	; (8012fd8 <lv_img_decoder_get_info+0x88>)
 8012fbc:	f00d fa93 	bl	80204e6 <_lv_ll_get_next>
 8012fc0:	6138      	str	r0, [r7, #16]
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d1e8      	bne.n	8012f9a <lv_img_decoder_get_info+0x4a>
 8012fc8:	e000      	b.n	8012fcc <lv_img_decoder_get_info+0x7c>
            if(res == LV_RES_OK) break;
 8012fca:	bf00      	nop
        }
    }

    return res;
 8012fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3718      	adds	r7, #24
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	20000880 	.word	0x20000880

08012fdc <lv_img_decoder_open>:

lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color, int32_t frame_id)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b08a      	sub	sp, #40	; 0x28
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	713a      	strb	r2, [r7, #4]
 8012fe8:	603b      	str	r3, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 8012fea:	2128      	movs	r1, #40	; 0x28
 8012fec:	68f8      	ldr	r0, [r7, #12]
 8012fee:	f00e f84b 	bl	8021088 <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d101      	bne.n	8012ffc <lv_img_decoder_open+0x20>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	e096      	b.n	801312a <lv_img_decoder_open+0x14e>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8012ffc:	68b8      	ldr	r0, [r7, #8]
 8012ffe:	f7fb ff2e 	bl	800ee5e <lv_img_src_get_type>
 8013002:	4603      	mov	r3, r0
 8013004:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8013006:	7ffb      	ldrb	r3, [r7, #31]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d107      	bne.n	801301c <lv_img_decoder_open+0x40>
        const lv_img_dsc_t * img_dsc = src;
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	61bb      	str	r3, [r7, #24]
        if(img_dsc->data == NULL) return LV_RES_INV;
 8013010:	69bb      	ldr	r3, [r7, #24]
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d101      	bne.n	801301c <lv_img_decoder_open+0x40>
 8013018:	2300      	movs	r3, #0
 801301a:	e086      	b.n	801312a <lv_img_decoder_open+0x14e>
    }

    dsc->color    = color;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	793a      	ldrb	r2, [r7, #4]
 8013020:	721a      	strb	r2, [r3, #8]
    dsc->src_type = src_type;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	7ffa      	ldrb	r2, [r7, #31]
 8013026:	741a      	strb	r2, [r3, #16]
    dsc->frame_id = frame_id;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	683a      	ldr	r2, [r7, #0]
 801302c:	60da      	str	r2, [r3, #12]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	7c1b      	ldrb	r3, [r3, #16]
 8013032:	2b01      	cmp	r3, #1
 8013034:	d11d      	bne.n	8013072 <lv_img_decoder_open+0x96>
        size_t fnlen = strlen(src);
 8013036:	68b8      	ldr	r0, [r7, #8]
 8013038:	f7ed f908 	bl	800024c <strlen>
 801303c:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	3301      	adds	r3, #1
 8013042:	4618      	mov	r0, r3
 8013044:	f00d fbec 	bl	8020820 <lv_mem_alloc>
 8013048:	4602      	mov	r2, r0
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MALLOC(dsc->src);
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d100      	bne.n	8013058 <lv_img_decoder_open+0x7c>
 8013056:	e7fe      	b.n	8013056 <lv_img_decoder_open+0x7a>
        if(dsc->src == NULL) {
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d101      	bne.n	8013064 <lv_img_decoder_open+0x88>
            LV_LOG_WARN("lv_img_decoder_open: out of memory");
            return LV_RES_INV;
 8013060:	2300      	movs	r3, #0
 8013062:	e062      	b.n	801312a <lv_img_decoder_open+0x14e>
        }
        strcpy((char *)dsc->src, src);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	68b9      	ldr	r1, [r7, #8]
 801306a:	4618      	mov	r0, r3
 801306c:	f010 fb3a 	bl	80236e4 <strcpy>
 8013070:	e002      	b.n	8013078 <lv_img_decoder_open+0x9c>
    }
    else {
        dsc->src = src;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	68ba      	ldr	r2, [r7, #8]
 8013076:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 8013078:	2300      	movs	r3, #0
 801307a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    lv_img_decoder_t * decoder;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 801307e:	482d      	ldr	r0, [pc, #180]	; (8013134 <lv_img_decoder_open+0x158>)
 8013080:	f00d fa0f 	bl	80204a2 <_lv_ll_get_head>
 8013084:	6238      	str	r0, [r7, #32]
 8013086:	e042      	b.n	801310e <lv_img_decoder_open+0x132>
        /*Info and Open callbacks are required*/
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 8013088:	6a3b      	ldr	r3, [r7, #32]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d036      	beq.n	80130fe <lv_img_decoder_open+0x122>
 8013090:	6a3b      	ldr	r3, [r7, #32]
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d032      	beq.n	80130fe <lv_img_decoder_open+0x122>

        res = decoder->info_cb(decoder, src, &dsc->header);
 8013098:	6a3b      	ldr	r3, [r7, #32]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	68fa      	ldr	r2, [r7, #12]
 801309e:	3214      	adds	r2, #20
 80130a0:	68b9      	ldr	r1, [r7, #8]
 80130a2:	6a38      	ldr	r0, [r7, #32]
 80130a4:	4798      	blx	r3
 80130a6:	4603      	mov	r3, r0
 80130a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(res != LV_RES_OK) continue;
 80130ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d126      	bne.n	8013102 <lv_img_decoder_open+0x126>

        dsc->decoder = decoder;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	6a3a      	ldr	r2, [r7, #32]
 80130b8:	601a      	str	r2, [r3, #0]
        res = decoder->open_cb(decoder, dsc);
 80130ba:	6a3b      	ldr	r3, [r7, #32]
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	68f9      	ldr	r1, [r7, #12]
 80130c0:	6a38      	ldr	r0, [r7, #32]
 80130c2:	4798      	blx	r3
 80130c4:	4603      	mov	r3, r0
 80130c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /*Opened successfully. It is a good decoder for this image source*/
        if(res == LV_RES_OK) return res;
 80130ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	d102      	bne.n	80130d8 <lv_img_decoder_open+0xfc>
 80130d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130d6:	e028      	b.n	801312a <lv_img_decoder_open+0x14e>

        /*Prepare for the next loop*/
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	3314      	adds	r3, #20
 80130dc:	2104      	movs	r1, #4
 80130de:	4618      	mov	r0, r3
 80130e0:	f00d ffd2 	bl	8021088 <lv_memset_00>

        dsc->error_msg = NULL;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2200      	movs	r2, #0
 80130e8:	621a      	str	r2, [r3, #32]
        dsc->img_data  = NULL;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2200      	movs	r2, #0
 80130ee:	619a      	str	r2, [r3, #24]
        dsc->user_data = NULL;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2200      	movs	r2, #0
 80130f4:	625a      	str	r2, [r3, #36]	; 0x24
        dsc->time_to_open = 0;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2200      	movs	r2, #0
 80130fa:	61da      	str	r2, [r3, #28]
 80130fc:	e002      	b.n	8013104 <lv_img_decoder_open+0x128>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 80130fe:	bf00      	nop
 8013100:	e000      	b.n	8013104 <lv_img_decoder_open+0x128>
        if(res != LV_RES_OK) continue;
 8013102:	bf00      	nop
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8013104:	6a39      	ldr	r1, [r7, #32]
 8013106:	480b      	ldr	r0, [pc, #44]	; (8013134 <lv_img_decoder_open+0x158>)
 8013108:	f00d f9ed 	bl	80204e6 <_lv_ll_get_next>
 801310c:	6238      	str	r0, [r7, #32]
 801310e:	6a3b      	ldr	r3, [r7, #32]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d1b9      	bne.n	8013088 <lv_img_decoder_open+0xac>
    }

    if(dsc->src_type == LV_IMG_SRC_FILE)
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	7c1b      	ldrb	r3, [r3, #16]
 8013118:	2b01      	cmp	r3, #1
 801311a:	d104      	bne.n	8013126 <lv_img_decoder_open+0x14a>
        lv_mem_free((void *)dsc->src);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	4618      	mov	r0, r3
 8013122:	f00d fbad 	bl	8020880 <lv_mem_free>

    return res;
 8013126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801312a:	4618      	mov	r0, r3
 801312c:	3728      	adds	r7, #40	; 0x28
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	20000880 	.word	0x20000880

08013138 <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8013138:	b590      	push	{r4, r7, lr}
 801313a:	b089      	sub	sp, #36	; 0x24
 801313c:	af02      	add	r7, sp, #8
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	4608      	mov	r0, r1
 8013142:	4611      	mov	r1, r2
 8013144:	461a      	mov	r2, r3
 8013146:	4603      	mov	r3, r0
 8013148:	817b      	strh	r3, [r7, #10]
 801314a:	460b      	mov	r3, r1
 801314c:	813b      	strh	r3, [r7, #8]
 801314e:	4613      	mov	r3, r2
 8013150:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8013152:	2300      	movs	r3, #0
 8013154:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	689b      	ldr	r3, [r3, #8]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d012      	beq.n	8013186 <lv_img_decoder_read_line+0x4e>
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	689c      	ldr	r4, [r3, #8]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	6818      	ldr	r0, [r3, #0]
 801316a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801316e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013174:	9301      	str	r3, [sp, #4]
 8013176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	460b      	mov	r3, r1
 801317e:	68f9      	ldr	r1, [r7, #12]
 8013180:	47a0      	blx	r4
 8013182:	4603      	mov	r3, r0
 8013184:	75fb      	strb	r3, [r7, #23]

    return res;
 8013186:	7dfb      	ldrb	r3, [r7, #23]
}
 8013188:	4618      	mov	r0, r3
 801318a:	371c      	adds	r7, #28
 801318c:	46bd      	mov	sp, r7
 801318e:	bd90      	pop	{r4, r7, pc}

08013190 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d018      	beq.n	80131d2 <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d007      	beq.n	80131ba <lv_img_decoder_close+0x2a>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	68db      	ldr	r3, [r3, #12]
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	6812      	ldr	r2, [r2, #0]
 80131b4:	6879      	ldr	r1, [r7, #4]
 80131b6:	4610      	mov	r0, r2
 80131b8:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	7c1b      	ldrb	r3, [r3, #16]
 80131be:	2b01      	cmp	r3, #1
 80131c0:	d107      	bne.n	80131d2 <lv_img_decoder_close+0x42>
            lv_mem_free((void *)dsc->src);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	4618      	mov	r0, r3
 80131c8:	f00d fb5a 	bl	8020880 <lv_mem_free>
            dsc->src = NULL;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2200      	movs	r2, #0
 80131d0:	605a      	str	r2, [r3, #4]
        }
    }
}
 80131d2:	bf00      	nop
 80131d4:	3708      	adds	r7, #8
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
	...

080131dc <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 80131e2:	480b      	ldr	r0, [pc, #44]	; (8013210 <lv_img_decoder_create+0x34>)
 80131e4:	f00d f898 	bl	8020318 <_lv_ll_ins_head>
 80131e8:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d100      	bne.n	80131f2 <lv_img_decoder_create+0x16>
 80131f0:	e7fe      	b.n	80131f0 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d101      	bne.n	80131fc <lv_img_decoder_create+0x20>
 80131f8:	2300      	movs	r3, #0
 80131fa:	e004      	b.n	8013206 <lv_img_decoder_create+0x2a>

    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80131fc:	2114      	movs	r1, #20
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f00d ff42 	bl	8021088 <lv_memset_00>

    return decoder;
 8013204:	687b      	ldr	r3, [r7, #4]
}
 8013206:	4618      	mov	r0, r3
 8013208:	3708      	adds	r7, #8
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	20000880 	.word	0x20000880

08013214 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8013214:	b480      	push	{r7}
 8013216:	b083      	sub	sp, #12
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	683a      	ldr	r2, [r7, #0]
 8013222:	601a      	str	r2, [r3, #0]
}
 8013224:	bf00      	nop
 8013226:	370c      	adds	r7, #12
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8013230:	b480      	push	{r7}
 8013232:	b083      	sub	sp, #12
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	683a      	ldr	r2, [r7, #0]
 801323e:	605a      	str	r2, [r3, #4]
}
 8013240:	bf00      	nop
 8013242:	370c      	adds	r7, #12
 8013244:	46bd      	mov	sp, r7
 8013246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324a:	4770      	bx	lr

0801324c <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 801324c:	b480      	push	{r7}
 801324e:	b083      	sub	sp, #12
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	683a      	ldr	r2, [r7, #0]
 801325a:	609a      	str	r2, [r3, #8]
}
 801325c:	bf00      	nop
 801325e:	370c      	adds	r7, #12
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr

08013268 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8013268:	b480      	push	{r7}
 801326a:	b083      	sub	sp, #12
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	683a      	ldr	r2, [r7, #0]
 8013276:	60da      	str	r2, [r3, #12]
}
 8013278:	bf00      	nop
 801327a:	370c      	adds	r7, #12
 801327c:	46bd      	mov	sp, r7
 801327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013282:	4770      	bx	lr

08013284 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b08a      	sub	sp, #40	; 0x28
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8013290:	68b8      	ldr	r0, [r7, #8]
 8013292:	f7fb fde4 	bl	800ee5e <lv_img_src_get_type>
 8013296:	4603      	mov	r3, r0
 8013298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801329c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d12f      	bne.n	8013304 <lv_img_decoder_built_in_info+0x80>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80132ac:	b2db      	uxtb	r3, r3
 80132ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80132b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80132b6:	2b03      	cmp	r3, #3
 80132b8:	d903      	bls.n	80132c2 <lv_img_decoder_built_in_info+0x3e>
 80132ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80132be:	2b14      	cmp	r3, #20
 80132c0:	d901      	bls.n	80132c6 <lv_img_decoder_built_in_info+0x42>
 80132c2:	2300      	movs	r3, #0
 80132c4:	e080      	b.n	80133c8 <lv_img_decoder_built_in_info+0x144>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80132ce:	b299      	uxth	r1, r3
 80132d0:	687a      	ldr	r2, [r7, #4]
 80132d2:	6813      	ldr	r3, [r2, #0]
 80132d4:	f361 2394 	bfi	r3, r1, #10, #11
 80132d8:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	885b      	ldrh	r3, [r3, #2]
 80132de:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80132e2:	b299      	uxth	r1, r3
 80132e4:	687a      	ldr	r2, [r7, #4]
 80132e6:	8853      	ldrh	r3, [r2, #2]
 80132e8:	f361 134f 	bfi	r3, r1, #5, #11
 80132ec:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80132f6:	b2d9      	uxtb	r1, r3
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	7813      	ldrb	r3, [r2, #0]
 80132fc:	f361 0304 	bfi	r3, r1, #0, #5
 8013300:	7013      	strb	r3, [r2, #0]
 8013302:	e060      	b.n	80133c6 <lv_img_decoder_built_in_info+0x142>
    }
    else if(src_type == LV_IMG_SRC_FILE) {
 8013304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013308:	2b01      	cmp	r3, #1
 801330a:	d143      	bne.n	8013394 <lv_img_decoder_built_in_info+0x110>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 801330c:	68b8      	ldr	r0, [r7, #8]
 801330e:	f00c ffa5 	bl	802025c <lv_fs_get_ext>
 8013312:	4603      	mov	r3, r0
 8013314:	492e      	ldr	r1, [pc, #184]	; (80133d0 <lv_img_decoder_built_in_info+0x14c>)
 8013316:	4618      	mov	r0, r3
 8013318:	f7ec ff8e 	bl	8000238 <strcmp>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d001      	beq.n	8013326 <lv_img_decoder_built_in_info+0xa2>
 8013322:	2300      	movs	r3, #0
 8013324:	e050      	b.n	80133c8 <lv_img_decoder_built_in_info+0x144>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8013326:	f107 0318 	add.w	r3, r7, #24
 801332a:	2202      	movs	r2, #2
 801332c:	68b9      	ldr	r1, [r7, #8]
 801332e:	4618      	mov	r0, r3
 8013330:	f00c fcc4 	bl	801fcbc <lv_fs_open>
 8013334:	4603      	mov	r3, r0
 8013336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if(res == LV_FS_RES_OK) {
 801333a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801333e:	2b00      	cmp	r3, #0
 8013340:	d118      	bne.n	8013374 <lv_img_decoder_built_in_info+0xf0>
            uint32_t rn;
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8013342:	f107 0314 	add.w	r3, r7, #20
 8013346:	f107 0018 	add.w	r0, r7, #24
 801334a:	2204      	movs	r2, #4
 801334c:	6879      	ldr	r1, [r7, #4]
 801334e:	f00c fe73 	bl	8020038 <lv_fs_read>
 8013352:	4603      	mov	r3, r0
 8013354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            lv_fs_close(&f);
 8013358:	f107 0318 	add.w	r3, r7, #24
 801335c:	4618      	mov	r0, r3
 801335e:	f00c fd1a 	bl	801fd96 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8013362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013366:	2b00      	cmp	r3, #0
 8013368:	d102      	bne.n	8013370 <lv_img_decoder_built_in_info+0xec>
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	2b04      	cmp	r3, #4
 801336e:	d001      	beq.n	8013374 <lv_img_decoder_built_in_info+0xf0>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 8013370:	2300      	movs	r3, #0
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8013372:	e029      	b.n	80133c8 <lv_img_decoder_built_in_info+0x144>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801337c:	b2db      	uxtb	r3, r3
 801337e:	2b03      	cmp	r3, #3
 8013380:	d906      	bls.n	8013390 <lv_img_decoder_built_in_info+0x10c>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	781b      	ldrb	r3, [r3, #0]
 8013386:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b14      	cmp	r3, #20
 801338e:	d91a      	bls.n	80133c6 <lv_img_decoder_built_in_info+0x142>
 8013390:	2300      	movs	r3, #0
 8013392:	e019      	b.n	80133c8 <lv_img_decoder_built_in_info+0x144>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8013394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013398:	2b02      	cmp	r3, #2
 801339a:	d112      	bne.n	80133c2 <lv_img_decoder_built_in_info+0x13e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         *function*/
        header->w = 1;
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	6813      	ldr	r3, [r2, #0]
 80133a0:	2101      	movs	r1, #1
 80133a2:	f361 2394 	bfi	r3, r1, #10, #11
 80133a6:	6013      	str	r3, [r2, #0]
        header->h = 1;
 80133a8:	687a      	ldr	r2, [r7, #4]
 80133aa:	8853      	ldrh	r3, [r2, #2]
 80133ac:	2101      	movs	r1, #1
 80133ae:	f361 134f 	bfi	r3, r1, #5, #11
 80133b2:	8053      	strh	r3, [r2, #2]
        /*Symbols always have transparent parts. Important because of cover check in the draw
         *function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	7813      	ldrb	r3, [r2, #0]
 80133b8:	210b      	movs	r1, #11
 80133ba:	f361 0304 	bfi	r3, r1, #0, #5
 80133be:	7013      	strb	r3, [r2, #0]
 80133c0:	e001      	b.n	80133c6 <lv_img_decoder_built_in_info+0x142>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 80133c2:	2300      	movs	r3, #0
 80133c4:	e000      	b.n	80133c8 <lv_img_decoder_built_in_info+0x144>
    }
    return LV_RES_OK;
 80133c6:	2301      	movs	r3, #1
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	3728      	adds	r7, #40	; 0x28
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	08023718 	.word	0x08023718

080133d4 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `color` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80133d4:	b5b0      	push	{r4, r5, r7, lr}
 80133d6:	b08e      	sub	sp, #56	; 0x38
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	7c1b      	ldrb	r3, [r3, #16]
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d14a      	bne.n	801347c <lv_img_decoder_built_in_open+0xa8>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f00c ff36 	bl	802025c <lv_fs_get_ext>
 80133f0:	4603      	mov	r3, r0
 80133f2:	499c      	ldr	r1, [pc, #624]	; (8013664 <lv_img_decoder_built_in_open+0x290>)
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7ec ff1f 	bl	8000238 <strcmp>
 80133fa:	4603      	mov	r3, r0
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d001      	beq.n	8013404 <lv_img_decoder_built_in_open+0x30>
 8013400:	2300      	movs	r3, #0
 8013402:	e144      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	6859      	ldr	r1, [r3, #4]
 8013408:	f107 030c 	add.w	r3, r7, #12
 801340c:	2202      	movs	r2, #2
 801340e:	4618      	mov	r0, r3
 8013410:	f00c fc54 	bl	801fcbc <lv_fs_open>
 8013414:	4603      	mov	r3, r0
 8013416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 801341a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801341e:	2b00      	cmp	r3, #0
 8013420:	d001      	beq.n	8013426 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 8013422:	2300      	movs	r3, #0
 8013424:	e133      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801342a:	2b00      	cmp	r3, #0
 801342c:	d11b      	bne.n	8013466 <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 801342e:	2014      	movs	r0, #20
 8013430:	f00d f9f6 	bl	8020820 <lv_mem_alloc>
 8013434:	4602      	mov	r2, r0
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801343e:	2b00      	cmp	r3, #0
 8013440:	d100      	bne.n	8013444 <lv_img_decoder_built_in_open+0x70>
 8013442:	e7fe      	b.n	8013442 <lv_img_decoder_built_in_open+0x6e>
            if(dsc->user_data == NULL) {
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013448:	2b00      	cmp	r3, #0
 801344a:	d106      	bne.n	801345a <lv_img_decoder_built_in_open+0x86>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_fs_close(&f);
 801344c:	f107 030c 	add.w	r3, r7, #12
 8013450:	4618      	mov	r0, r3
 8013452:	f00c fca0 	bl	801fd96 <lv_fs_close>
                return LV_RES_INV;
 8013456:	2300      	movs	r3, #0
 8013458:	e119      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801345e:	2114      	movs	r1, #20
 8013460:	4618      	mov	r0, r3
 8013462:	f00d fe11 	bl	8021088 <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801346a:	62bb      	str	r3, [r7, #40]	; 0x28
        lv_memcpy_small(&user_data->f, &f, sizeof(f));
 801346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346e:	f107 010c 	add.w	r1, r7, #12
 8013472:	220c      	movs	r2, #12
 8013474:	4618      	mov	r0, r3
 8013476:	f7ff fcfd 	bl	8012e74 <lv_memcpy_small>
 801347a:	e00a      	b.n	8013492 <lv_img_decoder_built_in_open+0xbe>
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	7c1b      	ldrb	r3, [r3, #16]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d106      	bne.n	8013492 <lv_img_decoder_built_in_open+0xbe>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	689b      	ldr	r3, [r3, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d101      	bne.n	8013492 <lv_img_decoder_built_in_open+0xbe>
            return LV_RES_INV;
 801348e:	2300      	movs	r3, #0
 8013490:	e0fd      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	7d1b      	ldrb	r3, [r3, #20]
 8013496:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801349a:	b2db      	uxtb	r3, r3
 801349c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80134a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134a4:	2b04      	cmp	r3, #4
 80134a6:	d00f      	beq.n	80134c8 <lv_img_decoder_built_in_open+0xf4>
 80134a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134ac:	2b05      	cmp	r3, #5
 80134ae:	d00b      	beq.n	80134c8 <lv_img_decoder_built_in_open+0xf4>
 80134b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134b4:	2b06      	cmp	r3, #6
 80134b6:	d007      	beq.n	80134c8 <lv_img_decoder_built_in_open+0xf4>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 80134b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134bc:	2b14      	cmp	r3, #20
 80134be:	d003      	beq.n	80134c8 <lv_img_decoder_built_in_open+0xf4>
 80134c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134c4:	2b0e      	cmp	r3, #14
 80134c6:	d10c      	bne.n	80134e2 <lv_img_decoder_built_in_open+0x10e>
       cf == LV_IMG_CF_ALPHA_8BIT) {
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	7c1b      	ldrb	r3, [r3, #16]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d106      	bne.n	80134de <lv_img_decoder_built_in_open+0x10a>
            /*In case of uncompressed formats the image stored in the ROM/RAM.
             *So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	689a      	ldr	r2, [r3, #8]
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	619a      	str	r2, [r3, #24]
            return LV_RES_OK;
 80134da:	2301      	movs	r3, #1
 80134dc:	e0d7      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            return LV_RES_OK;
 80134de:	2301      	movs	r3, #1
 80134e0:	e0d5      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80134e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134e6:	2b07      	cmp	r3, #7
 80134e8:	d00c      	beq.n	8013504 <lv_img_decoder_built_in_open+0x130>
 80134ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134ee:	2b08      	cmp	r3, #8
 80134f0:	d008      	beq.n	8013504 <lv_img_decoder_built_in_open+0x130>
 80134f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134f6:	2b09      	cmp	r3, #9
 80134f8:	d004      	beq.n	8013504 <lv_img_decoder_built_in_open+0x130>
 80134fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134fe:	2b0a      	cmp	r3, #10
 8013500:	f040 80b2 	bne.w	8013668 <lv_img_decoder_built_in_open+0x294>
            cf == LV_IMG_CF_INDEXED_8BIT) {
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8013504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013508:	4618      	mov	r0, r3
 801350a:	f7fb fc1b 	bl	800ed44 <lv_img_cf_get_px_size>
 801350e:	4603      	mov	r3, r0
 8013510:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 8013514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013518:	2201      	movs	r2, #1
 801351a:	fa02 f303 	lsl.w	r3, r2, r3
 801351e:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013524:	2b00      	cmp	r3, #0
 8013526:	d116      	bne.n	8013556 <lv_img_decoder_built_in_open+0x182>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8013528:	2014      	movs	r0, #20
 801352a:	f00d f979 	bl	8020820 <lv_mem_alloc>
 801352e:	4602      	mov	r2, r0
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013538:	2b00      	cmp	r3, #0
 801353a:	d100      	bne.n	801353e <lv_img_decoder_built_in_open+0x16a>
 801353c:	e7fe      	b.n	801353c <lv_img_decoder_built_in_open+0x168>
            if(dsc->user_data == NULL) {
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013542:	2b00      	cmp	r3, #0
 8013544:	d101      	bne.n	801354a <lv_img_decoder_built_in_open+0x176>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 8013546:	2300      	movs	r3, #0
 8013548:	e0a1      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801354e:	2114      	movs	r1, #20
 8013550:	4618      	mov	r0, r3
 8013552:	f00d fd99 	bl	8021088 <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801355a:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 801355c:	6a38      	ldr	r0, [r7, #32]
 801355e:	f00d f95f 	bl	8020820 <lv_mem_alloc>
 8013562:	4602      	mov	r2, r0
 8013564:	69fb      	ldr	r3, [r7, #28]
 8013566:	60da      	str	r2, [r3, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d100      	bne.n	8013572 <lv_img_decoder_built_in_open+0x19e>
 8013570:	e7fe      	b.n	8013570 <lv_img_decoder_built_in_open+0x19c>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8013572:	6a38      	ldr	r0, [r7, #32]
 8013574:	f00d f954 	bl	8020820 <lv_mem_alloc>
 8013578:	4602      	mov	r2, r0
 801357a:	69fb      	ldr	r3, [r7, #28]
 801357c:	611a      	str	r2, [r3, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	691b      	ldr	r3, [r3, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d100      	bne.n	8013588 <lv_img_decoder_built_in_open+0x1b4>
 8013586:	e7fe      	b.n	8013586 <lv_img_decoder_built_in_open+0x1b2>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8013588:	69fb      	ldr	r3, [r7, #28]
 801358a:	68db      	ldr	r3, [r3, #12]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d003      	beq.n	8013598 <lv_img_decoder_built_in_open+0x1c4>
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	691b      	ldr	r3, [r3, #16]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d105      	bne.n	80135a4 <lv_img_decoder_built_in_open+0x1d0>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8013598:	6839      	ldr	r1, [r7, #0]
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f000 f90e 	bl	80137bc <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 80135a0:	2300      	movs	r3, #0
 80135a2:	e074      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	7c1b      	ldrb	r3, [r3, #16]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d129      	bne.n	8013600 <lv_img_decoder_built_in_open+0x22c>
            /*Read the palette from file*/
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 80135ac:	69fb      	ldr	r3, [r7, #28]
 80135ae:	2200      	movs	r2, #0
 80135b0:	2104      	movs	r1, #4
 80135b2:	4618      	mov	r0, r3
 80135b4:	f00c fd85 	bl	80200c2 <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 80135b8:	2300      	movs	r3, #0
 80135ba:	637b      	str	r3, [r7, #52]	; 0x34
 80135bc:	e01b      	b.n	80135f6 <lv_img_decoder_built_in_open+0x222>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 80135be:	69f8      	ldr	r0, [r7, #28]
 80135c0:	f107 0108 	add.w	r1, r7, #8
 80135c4:	2300      	movs	r3, #0
 80135c6:	2204      	movs	r2, #4
 80135c8:	f00c fd36 	bl	8020038 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 80135cc:	7ab8      	ldrb	r0, [r7, #10]
 80135ce:	7a79      	ldrb	r1, [r7, #9]
 80135d0:	7a3d      	ldrb	r5, [r7, #8]
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	68da      	ldr	r2, [r3, #12]
 80135d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d8:	18d4      	adds	r4, r2, r3
 80135da:	462a      	mov	r2, r5
 80135dc:	f7ff fc6c 	bl	8012eb8 <lv_color_make>
 80135e0:	4603      	mov	r3, r0
 80135e2:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	691a      	ldr	r2, [r3, #16]
 80135e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ea:	4413      	add	r3, r2
 80135ec:	7afa      	ldrb	r2, [r7, #11]
 80135ee:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 80135f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135f2:	3301      	adds	r3, #1
 80135f4:	637b      	str	r3, [r7, #52]	; 0x34
 80135f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135f8:	6a3b      	ldr	r3, [r7, #32]
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d3df      	bcc.n	80135be <lv_img_decoder_built_in_open+0x1ea>
 80135fe:	e02f      	b.n	8013660 <lv_img_decoder_built_in_open+0x28c>
            }
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	689b      	ldr	r3, [r3, #8]
 8013606:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8013608:	2300      	movs	r3, #0
 801360a:	633b      	str	r3, [r7, #48]	; 0x30
 801360c:	e024      	b.n	8013658 <lv_img_decoder_built_in_open+0x284>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 801360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013610:	009b      	lsls	r3, r3, #2
 8013612:	69ba      	ldr	r2, [r7, #24]
 8013614:	4413      	add	r3, r2
 8013616:	7898      	ldrb	r0, [r3, #2]
 8013618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361a:	009b      	lsls	r3, r3, #2
 801361c:	69ba      	ldr	r2, [r7, #24]
 801361e:	4413      	add	r3, r2
 8013620:	7859      	ldrb	r1, [r3, #1]
 8013622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013624:	009b      	lsls	r3, r3, #2
 8013626:	69ba      	ldr	r2, [r7, #24]
 8013628:	4413      	add	r3, r2
 801362a:	781d      	ldrb	r5, [r3, #0]
 801362c:	69fb      	ldr	r3, [r7, #28]
 801362e:	68da      	ldr	r2, [r3, #12]
 8013630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013632:	18d4      	adds	r4, r2, r3
 8013634:	462a      	mov	r2, r5
 8013636:	f7ff fc3f 	bl	8012eb8 <lv_color_make>
 801363a:	4603      	mov	r3, r0
 801363c:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	009b      	lsls	r3, r3, #2
 8013642:	69ba      	ldr	r2, [r7, #24]
 8013644:	441a      	add	r2, r3
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	6919      	ldr	r1, [r3, #16]
 801364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364c:	440b      	add	r3, r1
 801364e:	78d2      	ldrb	r2, [r2, #3]
 8013650:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	3301      	adds	r3, #1
 8013656:	633b      	str	r3, [r7, #48]	; 0x30
 8013658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801365a:	6a3b      	ldr	r3, [r7, #32]
 801365c:	429a      	cmp	r2, r3
 801365e:	d3d6      	bcc.n	801360e <lv_img_decoder_built_in_open+0x23a>
            }
        }

        return LV_RES_OK;
 8013660:	2301      	movs	r3, #1
 8013662:	e014      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
 8013664:	08023718 	.word	0x08023718
    }
    /*Alpha indexed images.*/
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 8013668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801366c:	2b0b      	cmp	r3, #11
 801366e:	d007      	beq.n	8013680 <lv_img_decoder_built_in_open+0x2ac>
 8013670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013674:	2b0c      	cmp	r3, #12
 8013676:	d003      	beq.n	8013680 <lv_img_decoder_built_in_open+0x2ac>
 8013678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801367c:	2b0d      	cmp	r3, #13
 801367e:	d101      	bne.n	8013684 <lv_img_decoder_built_in_open+0x2b0>
        return LV_RES_OK; /*Nothing to process*/
 8013680:	2301      	movs	r3, #1
 8013682:	e004      	b.n	801368e <lv_img_decoder_built_in_open+0x2ba>
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8013684:	6839      	ldr	r1, [r7, #0]
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f000 f898 	bl	80137bc <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format");
        return LV_RES_INV;
 801368c:	2300      	movs	r3, #0
    }
}
 801368e:	4618      	mov	r0, r3
 8013690:	3738      	adds	r7, #56	; 0x38
 8013692:	46bd      	mov	sp, r7
 8013694:	bdb0      	pop	{r4, r5, r7, pc}
 8013696:	bf00      	nop

08013698 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b088      	sub	sp, #32
 801369c:	af02      	add	r7, sp, #8
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	4611      	mov	r1, r2
 80136a4:	461a      	mov	r2, r3
 80136a6:	460b      	mov	r3, r1
 80136a8:	80fb      	strh	r3, [r7, #6]
 80136aa:	4613      	mov	r3, r2
 80136ac:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_res_t res = LV_RES_INV;
 80136ae:	2300      	movs	r3, #0
 80136b0:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	7d1b      	ldrb	r3, [r3, #20]
 80136b6:	f003 031f 	and.w	r3, r3, #31
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	2b04      	cmp	r3, #4
 80136be:	d00d      	beq.n	80136dc <lv_img_decoder_built_in_read_line+0x44>
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	7d1b      	ldrb	r3, [r3, #20]
 80136c4:	f003 031f 	and.w	r3, r3, #31
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	2b05      	cmp	r3, #5
 80136cc:	d006      	beq.n	80136dc <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	7d1b      	ldrb	r3, [r3, #20]
 80136d2:	f003 031f 	and.w	r3, r3, #31
 80136d6:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80136d8:	2b06      	cmp	r3, #6
 80136da:	d112      	bne.n	8013702 <lv_img_decoder_built_in_read_line+0x6a>
        /*For TRUE_COLOR images read line required only for files.
         *For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	7c1b      	ldrb	r3, [r3, #16]
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d166      	bne.n	80137b2 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 80136e4:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80136e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80136ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80136f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	4603      	mov	r3, r0
 80136f6:	68b8      	ldr	r0, [r7, #8]
 80136f8:	f000 f88f 	bl	801381a <lv_img_decoder_built_in_line_true_color>
 80136fc:	4603      	mov	r3, r0
 80136fe:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013700:	e057      	b.n	80137b2 <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	7d1b      	ldrb	r3, [r3, #20]
 8013706:	f003 031f 	and.w	r3, r3, #31
 801370a:	b2db      	uxtb	r3, r3
 801370c:	2b0b      	cmp	r3, #11
 801370e:	d014      	beq.n	801373a <lv_img_decoder_built_in_read_line+0xa2>
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	7d1b      	ldrb	r3, [r3, #20]
 8013714:	f003 031f 	and.w	r3, r3, #31
 8013718:	b2db      	uxtb	r3, r3
 801371a:	2b0c      	cmp	r3, #12
 801371c:	d00d      	beq.n	801373a <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	7d1b      	ldrb	r3, [r3, #20]
 8013722:	f003 031f 	and.w	r3, r3, #31
 8013726:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8013728:	2b0d      	cmp	r3, #13
 801372a:	d006      	beq.n	801373a <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	7d1b      	ldrb	r3, [r3, #20]
 8013730:	f003 031f 	and.w	r3, r3, #31
 8013734:	b2db      	uxtb	r3, r3
 8013736:	2b0e      	cmp	r3, #14
 8013738:	d10e      	bne.n	8013758 <lv_img_decoder_built_in_read_line+0xc0>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 801373a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801373e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013742:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8013746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013748:	9300      	str	r3, [sp, #0]
 801374a:	4603      	mov	r3, r0
 801374c:	68b8      	ldr	r0, [r7, #8]
 801374e:	f000 f8c3 	bl	80138d8 <lv_img_decoder_built_in_line_alpha>
 8013752:	4603      	mov	r3, r0
 8013754:	75fb      	strb	r3, [r7, #23]
 8013756:	e02c      	b.n	80137b2 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	7d1b      	ldrb	r3, [r3, #20]
 801375c:	f003 031f 	and.w	r3, r3, #31
 8013760:	b2db      	uxtb	r3, r3
 8013762:	2b07      	cmp	r3, #7
 8013764:	d014      	beq.n	8013790 <lv_img_decoder_built_in_read_line+0xf8>
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	7d1b      	ldrb	r3, [r3, #20]
 801376a:	f003 031f 	and.w	r3, r3, #31
 801376e:	b2db      	uxtb	r3, r3
 8013770:	2b08      	cmp	r3, #8
 8013772:	d00d      	beq.n	8013790 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	7d1b      	ldrb	r3, [r3, #20]
 8013778:	f003 031f 	and.w	r3, r3, #31
 801377c:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 801377e:	2b09      	cmp	r3, #9
 8013780:	d006      	beq.n	8013790 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	7d1b      	ldrb	r3, [r3, #20]
 8013786:	f003 031f 	and.w	r3, r3, #31
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b0a      	cmp	r3, #10
 801378e:	d10e      	bne.n	80137ae <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8013790:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8013794:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8013798:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379e:	9300      	str	r3, [sp, #0]
 80137a0:	4603      	mov	r3, r0
 80137a2:	68b8      	ldr	r0, [r7, #8]
 80137a4:	f000 fa0a 	bl	8013bbc <lv_img_decoder_built_in_line_indexed>
 80137a8:	4603      	mov	r3, r0
 80137aa:	75fb      	strb	r3, [r7, #23]
 80137ac:	e001      	b.n	80137b2 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 80137ae:	2300      	movs	r3, #0
 80137b0:	e000      	b.n	80137b4 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 80137b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3718      	adds	r7, #24
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137ca:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d01f      	beq.n	8013812 <lv_img_decoder_built_in_close+0x56>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	7c1b      	ldrb	r3, [r3, #16]
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d103      	bne.n	80137e2 <lv_img_decoder_built_in_close+0x26>
            lv_fs_close(&user_data->f);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	4618      	mov	r0, r3
 80137de:	f00c fada 	bl	801fd96 <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	68db      	ldr	r3, [r3, #12]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d004      	beq.n	80137f4 <lv_img_decoder_built_in_close+0x38>
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	68db      	ldr	r3, [r3, #12]
 80137ee:	4618      	mov	r0, r3
 80137f0:	f00d f846 	bl	8020880 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	691b      	ldr	r3, [r3, #16]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d004      	beq.n	8013806 <lv_img_decoder_built_in_close+0x4a>
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	691b      	ldr	r3, [r3, #16]
 8013800:	4618      	mov	r0, r3
 8013802:	f00d f83d 	bl	8020880 <lv_mem_free>

        lv_mem_free(user_data);
 8013806:	68f8      	ldr	r0, [r7, #12]
 8013808:	f00d f83a 	bl	8020880 <lv_mem_free>
        dsc->user_data = NULL;
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	2200      	movs	r2, #0
 8013810:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8013812:	bf00      	nop
 8013814:	3710      	adds	r7, #16
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}

0801381a <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 801381a:	b580      	push	{r7, lr}
 801381c:	b08a      	sub	sp, #40	; 0x28
 801381e:	af00      	add	r7, sp, #0
 8013820:	60f8      	str	r0, [r7, #12]
 8013822:	4608      	mov	r0, r1
 8013824:	4611      	mov	r1, r2
 8013826:	461a      	mov	r2, r3
 8013828:	4603      	mov	r3, r0
 801382a:	817b      	strh	r3, [r7, #10]
 801382c:	460b      	mov	r3, r1
 801382e:	813b      	strh	r3, [r7, #8]
 8013830:	4613      	mov	r3, r2
 8013832:	80fb      	strh	r3, [r7, #6]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013838:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	7d1b      	ldrb	r3, [r3, #20]
 801383e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8013842:	b2db      	uxtb	r3, r3
 8013844:	4618      	mov	r0, r3
 8013846:	f7fb fa7d 	bl	800ed44 <lv_img_cf_get_px_size>
 801384a:	4603      	mov	r3, r0
 801384c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8013850:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	6952      	ldr	r2, [r2, #20]
 8013858:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801385c:	b292      	uxth	r2, r2
 801385e:	fb03 f202 	mul.w	r2, r3, r2
 8013862:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013866:	4413      	add	r3, r2
 8013868:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801386c:	fb02 f303 	mul.w	r3, r2, r3
 8013870:	10db      	asrs	r3, r3, #3
 8013872:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	3304      	adds	r3, #4
 8013878:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 801387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387c:	2200      	movs	r2, #0
 801387e:	69f9      	ldr	r1, [r7, #28]
 8013880:	4618      	mov	r0, r3
 8013882:	f00c fc1e 	bl	80200c2 <lv_fs_seek>
 8013886:	4603      	mov	r3, r0
 8013888:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 801388a:	7efb      	ldrb	r3, [r7, #27]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d001      	beq.n	8013894 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8013890:	2300      	movs	r3, #0
 8013892:	e01d      	b.n	80138d0 <lv_img_decoder_built_in_line_true_color+0xb6>
    }
    uint32_t btr = len * (px_size >> 3);
 8013894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013898:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 801389c:	08d2      	lsrs	r2, r2, #3
 801389e:	b2d2      	uxtb	r2, r2
 80138a0:	fb02 f303 	mul.w	r3, r2, r3
 80138a4:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 80138a6:	2300      	movs	r3, #0
 80138a8:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 80138aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138ac:	f107 0310 	add.w	r3, r7, #16
 80138b0:	697a      	ldr	r2, [r7, #20]
 80138b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80138b4:	f00c fbc0 	bl	8020038 <lv_fs_read>
 80138b8:	4603      	mov	r3, r0
 80138ba:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 80138bc:	7efb      	ldrb	r3, [r7, #27]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d103      	bne.n	80138ca <lv_img_decoder_built_in_line_true_color+0xb0>
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	697a      	ldr	r2, [r7, #20]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d001      	beq.n	80138ce <lv_img_decoder_built_in_line_true_color+0xb4>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 80138ca:	2300      	movs	r3, #0
 80138cc:	e000      	b.n	80138d0 <lv_img_decoder_built_in_line_true_color+0xb6>
    }

    return LV_RES_OK;
 80138ce:	2301      	movs	r3, #1
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3728      	adds	r7, #40	; 0x28
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 80138d8:	b590      	push	{r4, r7, lr}
 80138da:	b097      	sub	sp, #92	; 0x5c
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	4608      	mov	r0, r1
 80138e2:	4611      	mov	r1, r2
 80138e4:	461a      	mov	r2, r3
 80138e6:	4603      	mov	r3, r0
 80138e8:	817b      	strh	r3, [r7, #10]
 80138ea:	460b      	mov	r3, r1
 80138ec:	813b      	strh	r3, [r7, #8]
 80138ee:	4613      	mov	r3, r2
 80138f0:	80fb      	strh	r3, [r7, #6]
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80138f2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80138f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80138f8:	4bae      	ldr	r3, [pc, #696]	; (8013bb4 <lv_img_decoder_built_in_line_alpha+0x2dc>)
 80138fa:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80138fc:	4bae      	ldr	r3, [pc, #696]	; (8013bb8 <lv_img_decoder_built_in_line_alpha+0x2e0>)
 80138fe:	f107 0418 	add.w	r4, r7, #24
 8013902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	7a1b      	ldrb	r3, [r3, #8]
 801390c:	753b      	strb	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 801390e:	2300      	movs	r3, #0
 8013910:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013914:	e00e      	b.n	8013934 <lv_img_decoder_built_in_line_alpha+0x5c>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
 8013916:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801391a:	005b      	lsls	r3, r3, #1
 801391c:	461a      	mov	r2, r3
 801391e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013920:	4413      	add	r3, r2
 8013922:	7d3a      	ldrb	r2, [r7, #20]
 8013924:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8013926:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801392a:	b29b      	uxth	r3, r3
 801392c:	3301      	adds	r3, #1
 801392e:	b29b      	uxth	r3, r3
 8013930:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013934:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8013938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801393c:	429a      	cmp	r2, r3
 801393e:	dbea      	blt.n	8013916 <lv_img_decoder_built_in_line_alpha+0x3e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8013940:	2300      	movs	r3, #0
 8013942:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	7d1b      	ldrb	r3, [r3, #20]
 8013948:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801394c:	b2db      	uxtb	r3, r3
 801394e:	4618      	mov	r0, r3
 8013950:	f7fb f9f8 	bl	800ed44 <lv_img_cf_get_px_size>
 8013954:	4603      	mov	r3, r0
 8013956:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801395a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801395e:	2201      	movs	r2, #1
 8013960:	fa02 f303 	lsl.w	r3, r2, r3
 8013964:	b29b      	uxth	r3, r3
 8013966:	3b01      	subs	r3, #1
 8013968:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 801396a:	2300      	movs	r3, #0
 801396c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 8013970:	2300      	movs	r3, #0
 8013972:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8013974:	2300      	movs	r3, #0
 8013976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	7d1b      	ldrb	r3, [r3, #20]
 801397e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8013982:	b2db      	uxtb	r3, r3
 8013984:	3b0b      	subs	r3, #11
 8013986:	2b03      	cmp	r3, #3
 8013988:	f200 8094 	bhi.w	8013ab4 <lv_img_decoder_built_in_line_alpha+0x1dc>
 801398c:	a201      	add	r2, pc, #4	; (adr r2, 8013994 <lv_img_decoder_built_in_line_alpha+0xbc>)
 801398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013992:	bf00      	nop
 8013994:	080139a5 	.word	0x080139a5
 8013998:	080139ed 	.word	0x080139ed
 801399c:	08013a39 	.word	0x08013a39
 80139a0:	08013a85 	.word	0x08013a85
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	695b      	ldr	r3, [r3, #20]
 80139a8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	3307      	adds	r3, #7
 80139b0:	10db      	asrs	r3, r3, #3
 80139b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 80139b6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80139ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80139be:	fb02 f303 	mul.w	r3, r2, r3
 80139c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80139c6:	10d2      	asrs	r2, r2, #3
 80139c8:	b212      	sxth	r2, r2
 80139ca:	4413      	add	r3, r2
 80139cc:	461a      	mov	r2, r3
 80139ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139d0:	4413      	add	r3, r2
 80139d2:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 7 - (x & 0x7);
 80139d4:	897b      	ldrh	r3, [r7, #10]
 80139d6:	b25b      	sxtb	r3, r3
 80139d8:	43db      	mvns	r3, r3
 80139da:	b25b      	sxtb	r3, r3
 80139dc:	f003 0307 	and.w	r3, r3, #7
 80139e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 80139e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80139e8:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 80139ea:	e063      	b.n	8013ab4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	695b      	ldr	r3, [r3, #20]
 80139f0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	3303      	adds	r3, #3
 80139f8:	109b      	asrs	r3, r3, #2
 80139fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 80139fe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a02:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013a06:	fb02 f303 	mul.w	r3, r2, r3
 8013a0a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013a0e:	1092      	asrs	r2, r2, #2
 8013a10:	b212      	sxth	r2, r2
 8013a12:	4413      	add	r3, r2
 8013a14:	461a      	mov	r2, r3
 8013a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a18:	4413      	add	r3, r2
 8013a1a:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 6 - (x & 0x3) * 2;
 8013a1c:	897b      	ldrh	r3, [r7, #10]
 8013a1e:	43db      	mvns	r3, r3
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	f003 0303 	and.w	r3, r3, #3
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	005b      	lsls	r3, r3, #1
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 8013a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013a34:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8013a36:	e03d      	b.n	8013ab4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	695b      	ldr	r3, [r3, #20]
 8013a3c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	3301      	adds	r3, #1
 8013a44:	105b      	asrs	r3, r3, #1
 8013a46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 8013a4a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a4e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013a52:	fb02 f303 	mul.w	r3, r2, r3
 8013a56:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013a5a:	1052      	asrs	r2, r2, #1
 8013a5c:	b212      	sxth	r2, r2
 8013a5e:	4413      	add	r3, r2
 8013a60:	461a      	mov	r2, r3
 8013a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a64:	4413      	add	r3, r2
 8013a66:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 4 - (x & 0x1) * 4;
 8013a68:	897b      	ldrh	r3, [r7, #10]
 8013a6a:	f003 0301 	and.w	r3, r3, #1
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d101      	bne.n	8013a76 <lv_img_decoder_built_in_line_alpha+0x19e>
 8013a72:	2304      	movs	r3, #4
 8013a74:	e000      	b.n	8013a78 <lv_img_decoder_built_in_line_alpha+0x1a0>
 8013a76:	2300      	movs	r3, #0
 8013a78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 8013a7c:	f107 0318 	add.w	r3, r7, #24
 8013a80:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8013a82:	e017      	b.n	8013ab4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	695b      	ldr	r3, [r3, #20]
 8013a88:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013a8c:	b29b      	uxth	r3, r3
 8013a8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 8013a92:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013a9a:	fb03 f202 	mul.w	r2, r3, r2
 8013a9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013aa8:	4413      	add	r3, r2
 8013aaa:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 8013aac:	2300      	movs	r3, #0
 8013aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8013ab2:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ab8:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8013aba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f00c ff38 	bl	8020934 <lv_mem_buf_get>
 8013ac4:	6378      	str	r0, [r7, #52]	; 0x34
    if(fs_buf == NULL) return LV_RES_INV;
 8013ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <lv_img_decoder_built_in_line_alpha+0x1f8>
 8013acc:	2300      	movs	r3, #0
 8013ace:	e06d      	b.n	8013bac <lv_img_decoder_built_in_line_alpha+0x2d4>

    const uint8_t * data_tmp = NULL;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	7c1b      	ldrb	r3, [r3, #16]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d108      	bne.n	8013aee <lv_img_decoder_built_in_line_alpha+0x216>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	685b      	ldr	r3, [r3, #4]
 8013ae0:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 8013ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae4:	689a      	ldr	r2, [r3, #8]
 8013ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ae8:	4413      	add	r3, r2
 8013aea:	643b      	str	r3, [r7, #64]	; 0x40
 8013aec:	e00f      	b.n	8013b0e <lv_img_decoder_built_in_line_alpha+0x236>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8013aee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013af2:	3304      	adds	r3, #4
 8013af4:	2200      	movs	r2, #0
 8013af6:	4619      	mov	r1, r3
 8013af8:	f00c fae3 	bl	80200c2 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8013afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013afe:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8013b02:	2300      	movs	r3, #0
 8013b04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013b06:	f00c fa97 	bl	8020038 <lv_fs_read>
        data_tmp = fs_buf;
 8013b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    for(i = 0; i < len; i++) {
 8013b0e:	2300      	movs	r3, #0
 8013b10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013b14:	e040      	b.n	8013b98 <lv_img_decoder_built_in_line_alpha+0x2c0>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8013b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	461a      	mov	r2, r3
 8013b1c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8013b20:	fa42 f303 	asr.w	r3, r2, r3
 8013b24:	b25a      	sxtb	r2, r3
 8013b26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b28:	b25b      	sxtb	r3, r3
 8013b2a:	4013      	ands	r3, r2
 8013b2c:	b25b      	sxtb	r3, r3
 8013b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	7d1b      	ldrb	r3, [r3, #20]
 8013b36:	f003 031f 	and.w	r3, r3, #31
 8013b3a:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8013b3c:	2b0e      	cmp	r3, #14
 8013b3e:	d005      	beq.n	8013b4c <lv_img_decoder_built_in_line_alpha+0x274>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8013b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b46:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	e001      	b.n	8013b50 <lv_img_decoder_built_in_line_alpha+0x278>
 8013b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b50:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8013b54:	0052      	lsls	r2, r2, #1
 8013b56:	3201      	adds	r2, #1
 8013b58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013b5a:	440a      	add	r2, r1
 8013b5c:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 8013b5e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8013b62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013b66:	1ad3      	subs	r3, r2, r3
 8013b68:	b2db      	uxtb	r3, r3
 8013b6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 8013b6e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	da09      	bge.n	8013b8a <lv_img_decoder_built_in_line_alpha+0x2b2>
            pos = 8 - px_size;
 8013b76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013b7a:	f1c3 0308 	rsb	r3, r3, #8
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 8013b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b86:	3301      	adds	r3, #1
 8013b88:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 8013b8a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	3301      	adds	r3, #1
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013b98:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8013b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	dbb8      	blt.n	8013b16 <lv_img_decoder_built_in_line_alpha+0x23e>
        }
    }
    lv_mem_buf_release(fs_buf);
 8013ba4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ba6:	f00c ff71 	bl	8020a8c <lv_mem_buf_release>
    return LV_RES_OK;
 8013baa:	2301      	movs	r3, #1
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	375c      	adds	r7, #92	; 0x5c
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd90      	pop	{r4, r7, pc}
 8013bb4:	ffaa5500 	.word	0xffaa5500
 8013bb8:	0802371c 	.word	0x0802371c

08013bbc <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b08e      	sub	sp, #56	; 0x38
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	60f8      	str	r0, [r7, #12]
 8013bc4:	4608      	mov	r0, r1
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	461a      	mov	r2, r3
 8013bca:	4603      	mov	r3, r0
 8013bcc:	817b      	strh	r3, [r7, #10]
 8013bce:	460b      	mov	r3, r1
 8013bd0:	813b      	strh	r3, [r7, #8]
 8013bd2:	4613      	mov	r3, r2
 8013bd4:	80fb      	strh	r3, [r7, #6]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	7d1b      	ldrb	r3, [r3, #20]
 8013bda:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8013bde:	b2db      	uxtb	r3, r3
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7fb f8af 	bl	800ed44 <lv_img_cf_get_px_size>
 8013be6:	4603      	mov	r3, r0
 8013be8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8013bec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	3b01      	subs	r3, #1
 8013bfa:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 8013c00:	2300      	movs	r3, #0
 8013c02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 8013c06:	2300      	movs	r3, #0
 8013c08:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	7d1b      	ldrb	r3, [r3, #20]
 8013c0e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	3b07      	subs	r3, #7
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	f200 8094 	bhi.w	8013d44 <lv_img_decoder_built_in_line_indexed+0x188>
 8013c1c:	a201      	add	r2, pc, #4	; (adr r2, 8013c24 <lv_img_decoder_built_in_line_indexed+0x68>)
 8013c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c22:	bf00      	nop
 8013c24:	08013c35 	.word	0x08013c35
 8013c28:	08013c7b 	.word	0x08013c7b
 8013c2c:	08013cc5 	.word	0x08013cc5
 8013c30:	08013d0f 	.word	0x08013d0f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	695b      	ldr	r3, [r3, #20]
 8013c38:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	3307      	adds	r3, #7
 8013c40:	10db      	asrs	r3, r3, #3
 8013c42:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 8013c44:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013c48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013c4c:	fb02 f303 	mul.w	r3, r2, r3
 8013c50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013c54:	10d2      	asrs	r2, r2, #3
 8013c56:	b212      	sxth	r2, r2
 8013c58:	4413      	add	r3, r2
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c5e:	4413      	add	r3, r2
 8013c60:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 8013c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c64:	3308      	adds	r3, #8
 8013c66:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 8013c68:	897b      	ldrh	r3, [r7, #10]
 8013c6a:	b25b      	sxtb	r3, r3
 8013c6c:	43db      	mvns	r3, r3
 8013c6e:	b25b      	sxtb	r3, r3
 8013c70:	f003 0307 	and.w	r3, r3, #7
 8013c74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013c78:	e064      	b.n	8013d44 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	695b      	ldr	r3, [r3, #20]
 8013c7e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	3303      	adds	r3, #3
 8013c86:	109b      	asrs	r3, r3, #2
 8013c88:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 8013c8a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013c8e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013c92:	fb02 f303 	mul.w	r3, r2, r3
 8013c96:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013c9a:	1092      	asrs	r2, r2, #2
 8013c9c:	b212      	sxth	r2, r2
 8013c9e:	4413      	add	r3, r2
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca4:	4413      	add	r3, r2
 8013ca6:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 8013ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013caa:	3310      	adds	r3, #16
 8013cac:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - (x & 0x3) * 2;
 8013cae:	897b      	ldrh	r3, [r7, #10]
 8013cb0:	43db      	mvns	r3, r3
 8013cb2:	b2db      	uxtb	r3, r3
 8013cb4:	f003 0303 	and.w	r3, r3, #3
 8013cb8:	b2db      	uxtb	r3, r3
 8013cba:	005b      	lsls	r3, r3, #1
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013cc2:	e03f      	b.n	8013d44 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	695b      	ldr	r3, [r3, #20]
 8013cc8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	3301      	adds	r3, #1
 8013cd0:	105b      	asrs	r3, r3, #1
 8013cd2:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 8013cd4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013cd8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013cdc:	fb02 f303 	mul.w	r3, r2, r3
 8013ce0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013ce4:	1052      	asrs	r2, r2, #1
 8013ce6:	b212      	sxth	r2, r2
 8013ce8:	4413      	add	r3, r2
 8013cea:	461a      	mov	r2, r3
 8013cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cee:	4413      	add	r3, r2
 8013cf0:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 8013cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf4:	3340      	adds	r3, #64	; 0x40
 8013cf6:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - (x & 0x1) * 4;
 8013cf8:	897b      	ldrh	r3, [r7, #10]
 8013cfa:	f003 0301 	and.w	r3, r3, #1
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d101      	bne.n	8013d06 <lv_img_decoder_built_in_line_indexed+0x14a>
 8013d02:	2304      	movs	r3, #4
 8013d04:	e000      	b.n	8013d08 <lv_img_decoder_built_in_line_indexed+0x14c>
 8013d06:	2300      	movs	r3, #0
 8013d08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013d0c:	e01a      	b.n	8013d44 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	695b      	ldr	r3, [r3, #20]
 8013d12:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 8013d1a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013d1e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013d22:	fb03 f202 	mul.w	r2, r3, r2
 8013d26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013d2a:	4413      	add	r3, r2
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d30:	4413      	add	r3, r2
 8013d32:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 8013d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013d3a:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013d42:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d48:	623b      	str	r3, [r7, #32]

    uint8_t * fs_buf = lv_mem_buf_get(w);
 8013d4a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f00c fdf0 	bl	8020934 <lv_mem_buf_get>
 8013d54:	61f8      	str	r0, [r7, #28]
    if(fs_buf == NULL) return LV_RES_INV;
 8013d56:	69fb      	ldr	r3, [r7, #28]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d101      	bne.n	8013d60 <lv_img_decoder_built_in_line_indexed+0x1a4>
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	e06e      	b.n	8013e3e <lv_img_decoder_built_in_line_indexed+0x282>
    const uint8_t * data_tmp = NULL;
 8013d60:	2300      	movs	r3, #0
 8013d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	7c1b      	ldrb	r3, [r3, #16]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d108      	bne.n	8013d7e <lv_img_decoder_built_in_line_indexed+0x1c2>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	685b      	ldr	r3, [r3, #4]
 8013d70:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 8013d72:	69bb      	ldr	r3, [r7, #24]
 8013d74:	689a      	ldr	r2, [r3, #8]
 8013d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d78:	4413      	add	r3, r2
 8013d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d7c:	e00f      	b.n	8013d9e <lv_img_decoder_built_in_line_indexed+0x1e2>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8013d7e:	6a38      	ldr	r0, [r7, #32]
 8013d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d82:	3304      	adds	r3, #4
 8013d84:	2200      	movs	r2, #0
 8013d86:	4619      	mov	r1, r3
 8013d88:	f00c f99b 	bl	80200c2 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8013d8c:	6a38      	ldr	r0, [r7, #32]
 8013d8e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8013d92:	2300      	movs	r3, #0
 8013d94:	69f9      	ldr	r1, [r7, #28]
 8013d96:	f00c f94f 	bl	8020038 <lv_fs_read>
        data_tmp = fs_buf;
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8013d9e:	2300      	movs	r3, #0
 8013da0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013da2:	e042      	b.n	8013e2a <lv_img_decoder_built_in_line_indexed+0x26e>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8013da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	461a      	mov	r2, r3
 8013daa:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8013dae:	fa42 f303 	asr.w	r3, r2, r3
 8013db2:	b25a      	sxtb	r2, r3
 8013db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013db6:	b25b      	sxtb	r3, r3
 8013db8:	4013      	ands	r3, r2
 8013dba:	b25b      	sxtb	r3, r3
 8013dbc:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 8013dbe:	6a3b      	ldr	r3, [r7, #32]
 8013dc0:	68da      	ldr	r2, [r3, #12]
 8013dc2:	7dfb      	ldrb	r3, [r7, #23]
 8013dc4:	4413      	add	r3, r2
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	753b      	strb	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
 8013dca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8013dce:	005b      	lsls	r3, r3, #1
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dd4:	4413      	add	r3, r2
 8013dd6:	7d3a      	ldrb	r2, [r7, #20]
 8013dd8:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8013dda:	6a3b      	ldr	r3, [r7, #32]
 8013ddc:	691a      	ldr	r2, [r3, #16]
 8013dde:	7dfb      	ldrb	r3, [r7, #23]
 8013de0:	441a      	add	r2, r3
 8013de2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8013de6:	005b      	lsls	r3, r3, #1
 8013de8:	3301      	adds	r3, #1
 8013dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013dec:	440b      	add	r3, r1
 8013dee:	7812      	ldrb	r2, [r2, #0]
 8013df0:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 8013df2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8013df6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8013dfa:	1ad3      	subs	r3, r2, r3
 8013dfc:	b2db      	uxtb	r3, r3
 8013dfe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 8013e02:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	da09      	bge.n	8013e1e <lv_img_decoder_built_in_line_indexed+0x262>
            pos = 8 - px_size;
 8013e0a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8013e0e:	f1c3 0308 	rsb	r3, r3, #8
 8013e12:	b2db      	uxtb	r3, r3
 8013e14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 8013e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1a:	3301      	adds	r3, #1
 8013e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 8013e1e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	3301      	adds	r3, #1
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013e2a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	dbb6      	blt.n	8013da4 <lv_img_decoder_built_in_line_indexed+0x1e8>
        }
    }
    lv_mem_buf_release(fs_buf);
 8013e36:	69f8      	ldr	r0, [r7, #28]
 8013e38:	f00c fe28 	bl	8020a8c <lv_mem_buf_release>
    return LV_RES_OK;
 8013e3c:	2301      	movs	r3, #1
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3738      	adds	r7, #56	; 0x38
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop

08013e48 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013e56:	b29a      	uxth	r2, r3
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	1ad3      	subs	r3, r2, r3
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	3301      	adds	r3, #1
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	b21b      	sxth	r3, r3
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	370c      	adds	r7, #12
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e74:	4770      	bx	lr
	...

08013e78 <lv_draw_sw_init_ctx>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init_ctx(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
    LV_UNUSED(drv);

    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	60fb      	str	r3, [r7, #12]
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 8013e86:	2154      	movs	r1, #84	; 0x54
 8013e88:	68f8      	ldr	r0, [r7, #12]
 8013e8a:	f00d f8fd 	bl	8021088 <lv_memset_00>

    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	4a19      	ldr	r2, [pc, #100]	; (8013ef8 <lv_draw_sw_init_ctx+0x80>)
 8013e92:	611a      	str	r2, [r3, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	4a19      	ldr	r2, [pc, #100]	; (8013efc <lv_draw_sw_init_ctx+0x84>)
 8013e98:	60da      	str	r2, [r3, #12]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	4a18      	ldr	r2, [pc, #96]	; (8013f00 <lv_draw_sw_init_ctx+0x88>)
 8013e9e:	62da      	str	r2, [r3, #44]	; 0x2c
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	4a18      	ldr	r2, [pc, #96]	; (8013f04 <lv_draw_sw_init_ctx+0x8c>)
 8013ea4:	61da      	str	r2, [r3, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	4a17      	ldr	r2, [pc, #92]	; (8013f08 <lv_draw_sw_init_ctx+0x90>)
 8013eaa:	615a      	str	r2, [r3, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	4a17      	ldr	r2, [pc, #92]	; (8013f0c <lv_draw_sw_init_ctx+0x94>)
 8013eb0:	621a      	str	r2, [r3, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	4a16      	ldr	r2, [pc, #88]	; (8013f10 <lv_draw_sw_init_ctx+0x98>)
 8013eb6:	625a      	str	r2, [r3, #36]	; 0x24
#if LV_DRAW_COMPLEX
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	4a16      	ldr	r2, [pc, #88]	; (8013f14 <lv_draw_sw_init_ctx+0x9c>)
 8013ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	4a15      	ldr	r2, [pc, #84]	; (8013f18 <lv_draw_sw_init_ctx+0xa0>)
 8013ec2:	631a      	str	r2, [r3, #48]	; 0x30
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	4a15      	ldr	r2, [pc, #84]	; (8013f1c <lv_draw_sw_init_ctx+0xa4>)
 8013ec8:	635a      	str	r2, [r3, #52]	; 0x34
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	4a14      	ldr	r2, [pc, #80]	; (8013f20 <lv_draw_sw_init_ctx+0xa8>)
 8013ece:	639a      	str	r2, [r3, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4a14      	ldr	r2, [pc, #80]	; (8013f24 <lv_draw_sw_init_ctx+0xac>)
 8013ed4:	63da      	str	r2, [r3, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	4a13      	ldr	r2, [pc, #76]	; (8013f28 <lv_draw_sw_init_ctx+0xb0>)
 8013eda:	641a      	str	r2, [r3, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	4a13      	ldr	r2, [pc, #76]	; (8013f2c <lv_draw_sw_init_ctx+0xb4>)
 8013ee0:	645a      	str	r2, [r3, #68]	; 0x44
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	4a12      	ldr	r2, [pc, #72]	; (8013f30 <lv_draw_sw_init_ctx+0xb8>)
 8013ee6:	651a      	str	r2, [r3, #80]	; 0x50
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 8013ee8:	683b      	ldr	r3, [r7, #0]
 8013eea:	222c      	movs	r2, #44	; 0x2c
 8013eec:	649a      	str	r2, [r3, #72]	; 0x48
}
 8013eee:	bf00      	nop
 8013ef0:	3710      	adds	r7, #16
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
 8013ef6:	bf00      	nop
 8013ef8:	08014099 	.word	0x08014099
 8013efc:	0801a0eb 	.word	0x0801a0eb
 8013f00:	0801a131 	.word	0x0801a131
 8013f04:	080183cd 	.word	0x080183cd
 8013f08:	08017871 	.word	0x08017871
 8013f0c:	08018b3b 	.word	0x08018b3b
 8013f10:	08019ad9 	.word	0x08019ad9
 8013f14:	0801d335 	.word	0x0801d335
 8013f18:	08013f35 	.word	0x08013f35
 8013f1c:	08013f49 	.word	0x08013f49
 8013f20:	08018007 	.word	0x08018007
 8013f24:	080181eb 	.word	0x080181eb
 8013f28:	0801827b 	.word	0x0801827b
 8013f2c:	08018345 	.word	0x08018345
 8013f30:	08015c01 	.word	0x08015c01

08013f34 <lv_draw_sw_wait_for_finish>:
    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
}

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 8013f34:	b480      	push	{r7}
 8013f36:	b083      	sub	sp, #12
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 8013f3c:	bf00      	nop
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b088      	sub	sp, #32
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	60f8      	str	r0, [r7, #12]
 8013f50:	60b9      	str	r1, [r7, #8]
 8013f52:	603b      	str	r3, [r7, #0]
 8013f54:	4613      	mov	r3, r2
 8013f56:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(draw_ctx);

    lv_color_t * dest_bufc =  dest_buf;
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	61fb      	str	r3, [r7, #28]
    lv_color_t * src_bufc =  src_buf;
 8013f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5e:	61bb      	str	r3, [r7, #24]

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 8013f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f64:	683a      	ldr	r2, [r7, #0]
 8013f66:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013f6a:	fb02 f303 	mul.w	r3, r2, r3
 8013f6e:	461a      	mov	r2, r3
 8013f70:	69fb      	ldr	r3, [r7, #28]
 8013f72:	4413      	add	r3, r2
 8013f74:	61fb      	str	r3, [r7, #28]
    dest_bufc += dest_area->x1;
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	4413      	add	r3, r2
 8013f82:	61fb      	str	r3, [r7, #28]

    src_bufc += src_stride * src_area->y1;
 8013f84:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f8a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013f8e:	fb02 f303 	mul.w	r3, r2, r3
 8013f92:	461a      	mov	r2, r3
 8013f94:	69bb      	ldr	r3, [r7, #24]
 8013f96:	4413      	add	r3, r2
 8013f98:	61bb      	str	r3, [r7, #24]
    src_bufc += src_area->x1;
 8013f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	69bb      	ldr	r3, [r7, #24]
 8013fa4:	4413      	add	r3, r2
 8013fa6:	61bb      	str	r3, [r7, #24]

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 8013fa8:	6838      	ldr	r0, [r7, #0]
 8013faa:	f7ff ff4d 	bl	8013e48 <lv_area_get_width>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	613b      	str	r3, [r7, #16]
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	885b      	ldrh	r3, [r3, #2]
 8013fb6:	82fb      	strh	r3, [r7, #22]
 8013fb8:	e014      	b.n	8013fe4 <lv_draw_sw_buffer_copy+0x9c>
        lv_memcpy(dest_bufc, src_bufc, line_length);
 8013fba:	693a      	ldr	r2, [r7, #16]
 8013fbc:	69b9      	ldr	r1, [r7, #24]
 8013fbe:	69f8      	ldr	r0, [r7, #28]
 8013fc0:	f00c fdbc 	bl	8020b3c <lv_memcpy>
        dest_bufc += dest_stride;
 8013fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013fc8:	69fa      	ldr	r2, [r7, #28]
 8013fca:	4413      	add	r3, r2
 8013fcc:	61fb      	str	r3, [r7, #28]
        src_bufc += src_stride;
 8013fce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013fd2:	69ba      	ldr	r2, [r7, #24]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	61bb      	str	r3, [r7, #24]
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8013fd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	3301      	adds	r3, #1
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	82fb      	strh	r3, [r7, #22]
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013fea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	dde3      	ble.n	8013fba <lv_draw_sw_buffer_copy+0x72>
    }
}
 8013ff2:	bf00      	nop
 8013ff4:	bf00      	nop
 8013ff6:	3720      	adds	r7, #32
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b083      	sub	sp, #12
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	f9b3 2000 	ldrsh.w	r2, [r3]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	80da      	strh	r2, [r3, #6]
}
 801402e:	bf00      	nop
 8014030:	370c      	adds	r7, #12
 8014032:	46bd      	mov	sp, r7
 8014034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014038:	4770      	bx	lr

0801403a <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801403a:	b480      	push	{r7}
 801403c:	b083      	sub	sp, #12
 801403e:	af00      	add	r7, sp, #0
 8014040:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014048:	b29a      	uxth	r2, r3
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014050:	b29b      	uxth	r3, r3
 8014052:	1ad3      	subs	r3, r2, r3
 8014054:	b29b      	uxth	r3, r3
 8014056:	3301      	adds	r3, #1
 8014058:	b29b      	uxth	r3, r3
 801405a:	b21b      	sxth	r3, r3
}
 801405c:	4618      	mov	r0, r3
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8014068:	b480      	push	{r7}
 801406a:	b083      	sub	sp, #12
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014076:	b29a      	uxth	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801407e:	b29b      	uxth	r3, r3
 8014080:	1ad3      	subs	r3, r2, r3
 8014082:	b29b      	uxth	r3, r3
 8014084:	3301      	adds	r3, #1
 8014086:	b29b      	uxth	r3, r3
 8014088:	b21b      	sxth	r3, r3
}
 801408a:	4618      	mov	r0, r3
 801408c:	370c      	adds	r7, #12
 801408e:	46bd      	mov	sp, r7
 8014090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014094:	4770      	bx	lr
	...

08014098 <lv_draw_sw_arc>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                    uint16_t start_angle, uint16_t end_angle)
{
 8014098:	b590      	push	{r4, r7, lr}
 801409a:	b0d5      	sub	sp, #340	; 0x154
 801409c:	af02      	add	r7, sp, #8
 801409e:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80140a2:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 80140a6:	6020      	str	r0, [r4, #0]
 80140a8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80140ac:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80140b0:	6001      	str	r1, [r0, #0]
 80140b2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80140b6:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80140ba:	600a      	str	r2, [r1, #0]
 80140bc:	461a      	mov	r2, r3
 80140be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80140c2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80140c6:	801a      	strh	r2, [r3, #0]
#if LV_DRAW_COMPLEX
    if(dsc->opa <= LV_OPA_MIN) return;
 80140c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80140cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	7b1b      	ldrb	r3, [r3, #12]
 80140d4:	2b02      	cmp	r3, #2
 80140d6:	f240 83e4 	bls.w	80148a2 <lv_draw_sw_arc+0x80a>
    if(dsc->width == 0) return;
 80140da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80140de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f000 83dc 	beq.w	80148a6 <lv_draw_sw_arc+0x80e>
    if(start_angle == end_angle) return;
 80140ee:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80140f2:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80140f6:	429a      	cmp	r2, r3
 80140f8:	f000 83d7 	beq.w	80148aa <lv_draw_sw_arc+0x812>

    lv_coord_t width = dsc->width;
 80140fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014100:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	885b      	ldrh	r3, [r3, #2]
 8014108:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if(width > radius) width = radius;
 801410c:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 8014110:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014114:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8014118:	881b      	ldrh	r3, [r3, #0]
 801411a:	429a      	cmp	r2, r3
 801411c:	dd06      	ble.n	801412c <lv_draw_sw_arc+0x94>
 801411e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014122:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    lv_draw_rect_dsc_t cir_dsc;
    lv_draw_rect_dsc_init(&cir_dsc);
 801412c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8014130:	4618      	mov	r0, r3
 8014132:	f7fe fd01 	bl	8012b38 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 8014136:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801413a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	7b5b      	ldrb	r3, [r3, #13]
 8014142:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8014146:	b2db      	uxtb	r3, r3
 8014148:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
    if(dsc->img_src) {
 801414c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014150:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	689b      	ldr	r3, [r3, #8]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d013      	beq.n	8014184 <lv_draw_sw_arc+0xec>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 801415c:	2300      	movs	r3, #0
 801415e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_img_src = dsc->img_src;
 8014162:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014166:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	689b      	ldr	r3, [r3, #8]
 801416e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        cir_dsc.bg_img_opa = dsc->opa;
 8014172:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014176:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	7b1b      	ldrb	r3, [r3, #12]
 801417e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8014182:	e00f      	b.n	80141a4 <lv_draw_sw_arc+0x10c>
    }
    else {
        cir_dsc.bg_opa = dsc->opa;
 8014184:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014188:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	7b1b      	ldrb	r3, [r3, #12]
 8014190:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_color = dsc->color;
 8014194:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014198:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    }

    lv_area_t area_out;
    area_out.x1 = center->x - radius;
 80141a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80141a8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141b2:	b29a      	uxth	r2, r3
 80141b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80141b8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	1ad3      	subs	r3, r2, r3
 80141c0:	b29b      	uxth	r3, r3
 80141c2:	b21b      	sxth	r3, r3
 80141c4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    area_out.y1 = center->y - radius;
 80141c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80141cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80141dc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80141e0:	881b      	ldrh	r3, [r3, #0]
 80141e2:	1ad3      	subs	r3, r2, r3
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	b21b      	sxth	r3, r3
 80141e8:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80141ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80141f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141fa:	b29a      	uxth	r2, r3
 80141fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014200:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8014204:	881b      	ldrh	r3, [r3, #0]
 8014206:	4413      	add	r3, r2
 8014208:	b29b      	uxth	r3, r3
 801420a:	3b01      	subs	r3, #1
 801420c:	b29b      	uxth	r3, r3
 801420e:	b21b      	sxth	r3, r3
 8014210:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
    area_out.y2 = center->y + radius - 1;
 8014214:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014218:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014222:	b29a      	uxth	r2, r3
 8014224:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014228:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 801422c:	881b      	ldrh	r3, [r3, #0]
 801422e:	4413      	add	r3, r2
 8014230:	b29b      	uxth	r3, r3
 8014232:	3b01      	subs	r3, #1
 8014234:	b29b      	uxth	r3, r3
 8014236:	b21b      	sxth	r3, r3
 8014238:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    lv_area_t area_in;
    lv_area_copy(&area_in, &area_out);
 801423c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8014240:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8014244:	4611      	mov	r1, r2
 8014246:	4618      	mov	r0, r3
 8014248:	f7ff fed8 	bl	8013ffc <lv_area_copy>
    area_in.x1 += dsc->width;
 801424c:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
 8014250:	b29a      	uxth	r2, r3
 8014252:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014256:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014260:	b29b      	uxth	r3, r3
 8014262:	4413      	add	r3, r2
 8014264:	b29b      	uxth	r3, r3
 8014266:	b21b      	sxth	r3, r3
 8014268:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
    area_in.y1 += dsc->width;
 801426c:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	; 0xf2
 8014270:	b29a      	uxth	r2, r3
 8014272:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014276:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014280:	b29b      	uxth	r3, r3
 8014282:	4413      	add	r3, r2
 8014284:	b29b      	uxth	r3, r3
 8014286:	b21b      	sxth	r3, r3
 8014288:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    area_in.x2 -= dsc->width;
 801428c:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 8014290:	b29a      	uxth	r2, r3
 8014292:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014296:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	1ad3      	subs	r3, r2, r3
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	b21b      	sxth	r3, r3
 80142a8:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
    area_in.y2 -= dsc->width;
 80142ac:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80142b0:	b29a      	uxth	r2, r3
 80142b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80142b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	1ad3      	subs	r3, r2, r3
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	b21b      	sxth	r3, r3
 80142c8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

    /*Create inner the mask*/
    int16_t mask_in_id = LV_MASK_ID_INV;
 80142cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142d0:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    lv_draw_mask_radius_param_t mask_in_param;
    bool mask_in_param_valid = false;
 80142d4:	2300      	movs	r3, #0
 80142d6:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 80142da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80142de:	4618      	mov	r0, r3
 80142e0:	f7ff feab 	bl	801403a <lv_area_get_width>
 80142e4:	4603      	mov	r3, r0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	dd1c      	ble.n	8014324 <lv_draw_sw_arc+0x28c>
 80142ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7ff feba 	bl	8014068 <lv_area_get_height>
 80142f4:	4603      	mov	r3, r0
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	dd14      	ble.n	8014324 <lv_draw_sw_arc+0x28c>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 80142fa:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80142fe:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8014302:	2301      	movs	r3, #1
 8014304:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014308:	f7fc fc1a 	bl	8010b40 <lv_draw_mask_radius_init>
        mask_in_param_valid = true;
 801430c:	2301      	movs	r3, #1
 801430e:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 8014312:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8014316:	2100      	movs	r1, #0
 8014318:	4618      	mov	r0, r3
 801431a:	f7fc f845 	bl	80103a8 <lv_draw_mask_add>
 801431e:	4603      	mov	r3, r0
 8014320:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    }

    lv_draw_mask_radius_param_t mask_out_param;
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8014324:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8014328:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 801432c:	2300      	movs	r3, #0
 801432e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014332:	f7fc fc05 	bl	8010b40 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8014336:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801433a:	2100      	movs	r1, #0
 801433c:	4618      	mov	r0, r3
 801433e:	f7fc f833 	bl	80103a8 <lv_draw_mask_add>
 8014342:	4603      	mov	r3, r0
 8014344:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

    /*Draw a full ring*/
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 8014348:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 801434c:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8014350:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8014354:	429a      	cmp	r2, r3
 8014356:	d007      	beq.n	8014368 <lv_draw_sw_arc+0x2d0>
 8014358:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 801435c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8014360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014364:	429a      	cmp	r2, r3
 8014366:	d133      	bne.n	80143d0 <lv_draw_sw_arc+0x338>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8014368:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801436c:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8014370:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8014374:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8014378:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801437c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8014380:	6818      	ldr	r0, [r3, #0]
 8014382:	f7fe fc1d 	bl	8012bc0 <lv_draw_rect>

        lv_draw_mask_remove_id(mask_out_id);
 8014386:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 801438a:	4618      	mov	r0, r3
 801438c:	f7fc f882 	bl	8010494 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8014390:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8014394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014398:	d004      	beq.n	80143a4 <lv_draw_sw_arc+0x30c>
 801439a:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fc f878 	bl	8010494 <lv_draw_mask_remove_id>

        lv_draw_mask_free_param(&mask_out_param);
 80143a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fc f8c3 	bl	8010534 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 80143ae:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	f000 827b 	beq.w	80148ae <lv_draw_sw_arc+0x816>
            lv_draw_mask_free_param(&mask_in_param);
 80143b8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80143bc:	4618      	mov	r0, r3
 80143be:	f7fc f8b9 	bl	8010534 <lv_draw_mask_free_param>
        }

        return;
 80143c2:	e274      	b.n	80148ae <lv_draw_sw_arc+0x816>
    }

    while(start_angle >= 360) start_angle -= 360;
 80143c4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80143c8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80143cc:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 80143d0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80143d4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80143d8:	d2f4      	bcs.n	80143c4 <lv_draw_sw_arc+0x32c>
    while(end_angle >= 360) end_angle -= 360;
 80143da:	e005      	b.n	80143e8 <lv_draw_sw_arc+0x350>
 80143dc:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80143e0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80143e4:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 80143e8:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80143ec:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80143f0:	d2f4      	bcs.n	80143dc <lv_draw_sw_arc+0x344>

    lv_draw_mask_angle_param_t mask_angle_param;
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 80143f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80143f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014400:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014404:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801440e:	f9b7 4158 	ldrsh.w	r4, [r7, #344]	; 0x158
 8014412:	f9b7 315c 	ldrsh.w	r3, [r7, #348]	; 0x15c
 8014416:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	4623      	mov	r3, r4
 801441e:	f7fc fad9 	bl	80109d4 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 8014422:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014426:	2100      	movs	r1, #0
 8014428:	4618      	mov	r0, r3
 801442a:	f7fb ffbd 	bl	80103a8 <lv_draw_mask_add>
 801442e:	4603      	mov	r3, r0
 8014430:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

    int32_t angle_gap;
    if(end_angle > start_angle) {
 8014434:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8014438:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 801443c:	429a      	cmp	r2, r3
 801443e:	d909      	bls.n	8014454 <lv_draw_sw_arc+0x3bc>
        angle_gap = 360 - (end_angle - start_angle);
 8014440:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8014444:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8014448:	1ad3      	subs	r3, r2, r3
 801444a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801444e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8014452:	e006      	b.n	8014462 <lv_draw_sw_arc+0x3ca>
    }
    else {
        angle_gap = start_angle - end_angle;
 8014454:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8014458:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 801445c:	1ad3      	subs	r3, r2, r3
 801445e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8014462:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014466:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	689b      	ldr	r3, [r3, #8]
 801446e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8014472:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8014476:	2b3c      	cmp	r3, #60	; 0x3c
 8014478:	f340 8080 	ble.w	801457c <lv_draw_sw_arc+0x4e4>
 801447c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014480:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8014484:	881b      	ldrh	r3, [r3, #0]
 8014486:	2b0a      	cmp	r3, #10
 8014488:	d978      	bls.n	801457c <lv_draw_sw_arc+0x4e4>
        /*Handle each quarter individually and skip which is empty*/
        quarter_draw_dsc_t q_dsc;
        q_dsc.center = center;
 801448a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801448e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014492:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8014496:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 801449a:	6812      	ldr	r2, [r2, #0]
 801449c:	601a      	str	r2, [r3, #0]
        q_dsc.radius = radius;
 801449e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80144a2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80144a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80144aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80144ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80144b2:	809a      	strh	r2, [r3, #4]
        q_dsc.start_angle = start_angle;
 80144b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80144b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80144bc:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80144c0:	80da      	strh	r2, [r3, #6]
        q_dsc.end_angle = end_angle;
 80144c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80144c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80144ca:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80144ce:	811a      	strh	r2, [r3, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 80144d0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80144d4:	085b      	lsrs	r3, r3, #1
 80144d6:	4a28      	ldr	r2, [pc, #160]	; (8014578 <lv_draw_sw_arc+0x4e0>)
 80144d8:	fba2 2303 	umull	r2, r3, r2, r3
 80144dc:	095b      	lsrs	r3, r3, #5
 80144de:	b29b      	uxth	r3, r3
 80144e0:	f003 0303 	and.w	r3, r3, #3
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80144ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80144ee:	815a      	strh	r2, [r3, #10]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 80144f0:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80144f4:	085b      	lsrs	r3, r3, #1
 80144f6:	4a20      	ldr	r2, [pc, #128]	; (8014578 <lv_draw_sw_arc+0x4e0>)
 80144f8:	fba2 2303 	umull	r2, r3, r2, r3
 80144fc:	095b      	lsrs	r3, r3, #5
 80144fe:	b29b      	uxth	r3, r3
 8014500:	f003 0303 	and.w	r3, r3, #3
 8014504:	b29a      	uxth	r2, r3
 8014506:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801450a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801450e:	819a      	strh	r2, [r3, #12]
        q_dsc.width = width;
 8014510:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014514:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014518:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 801451c:	81da      	strh	r2, [r3, #14]
        q_dsc.draw_dsc = &cir_dsc;
 801451e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014522:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014526:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801452a:	611a      	str	r2, [r3, #16]
        q_dsc.draw_area = &area_out;
 801452c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014530:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014534:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8014538:	615a      	str	r2, [r3, #20]
        q_dsc.draw_ctx = draw_ctx;
 801453a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801453e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8014542:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8014546:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 801454a:	6812      	ldr	r2, [r2, #0]
 801454c:	619a      	str	r2, [r3, #24]

        draw_quarter_0(&q_dsc);
 801454e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014552:	4618      	mov	r0, r3
 8014554:	f000 f9b0 	bl	80148b8 <draw_quarter_0>
        draw_quarter_1(&q_dsc);
 8014558:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801455c:	4618      	mov	r0, r3
 801455e:	f000 fb9d 	bl	8014c9c <draw_quarter_1>
        draw_quarter_2(&q_dsc);
 8014562:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014566:	4618      	mov	r0, r3
 8014568:	f000 fd92 	bl	8015090 <draw_quarter_2>
        draw_quarter_3(&q_dsc);
 801456c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014570:	4618      	mov	r0, r3
 8014572:	f000 ff90 	bl	8015496 <draw_quarter_3>
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8014576:	e00c      	b.n	8014592 <lv_draw_sw_arc+0x4fa>
 8014578:	b60b60b7 	.word	0xb60b60b7
    }
    else {
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 801457c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8014580:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8014584:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014588:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801458c:	6818      	ldr	r0, [r3, #0]
 801458e:	f7fe fb17 	bl	8012bc0 <lv_draw_rect>
    }

    lv_draw_mask_free_param(&mask_angle_param);
 8014592:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014596:	4618      	mov	r0, r3
 8014598:	f7fb ffcc 	bl	8010534 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 801459c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fb ffc7 	bl	8010534 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 80145a6:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d004      	beq.n	80145b8 <lv_draw_sw_arc+0x520>
        lv_draw_mask_free_param(&mask_in_param);
 80145ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fb ffbe 	bl	8010534 <lv_draw_mask_free_param>
    }

    lv_draw_mask_remove_id(mask_angle_id);
 80145b8:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	; 0x138
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fb ff69 	bl	8010494 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 80145c2:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7fb ff64 	bl	8010494 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 80145cc:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 80145d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145d4:	d004      	beq.n	80145e0 <lv_draw_sw_arc+0x548>
 80145d6:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 80145da:	4618      	mov	r0, r3
 80145dc:	f7fb ff5a 	bl	8010494 <lv_draw_mask_remove_id>

    if(dsc->rounded) {
 80145e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80145e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	7b5b      	ldrb	r3, [r3, #13]
 80145ec:	f003 0304 	and.w	r3, r3, #4
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f000 815c 	beq.w	80148b0 <lv_draw_sw_arc+0x818>

        lv_draw_mask_radius_param_t mask_end_param;

        lv_area_t round_area;
        get_rounded_area(start_angle, radius, width, &round_area);
 80145f8:	f9b7 0158 	ldrsh.w	r0, [r7, #344]	; 0x158
 80145fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014600:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8014604:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014608:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 801460c:	b2da      	uxtb	r2, r3
 801460e:	f107 0318 	add.w	r3, r7, #24
 8014612:	f001 f93a 	bl	801588a <get_rounded_area>
        round_area.x1 += center->x;
 8014616:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801461a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801461e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014622:	b29a      	uxth	r2, r3
 8014624:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014628:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014632:	b29b      	uxth	r3, r3
 8014634:	4413      	add	r3, r2
 8014636:	b29b      	uxth	r3, r3
 8014638:	b21a      	sxth	r2, r3
 801463a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801463e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014642:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8014644:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801464c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014650:	b29a      	uxth	r2, r3
 8014652:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014656:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014660:	b29b      	uxth	r3, r3
 8014662:	4413      	add	r3, r2
 8014664:	b29b      	uxth	r3, r3
 8014666:	b21a      	sxth	r2, r3
 8014668:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801466c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014670:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8014672:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801467a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801467e:	b29a      	uxth	r2, r3
 8014680:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014684:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801468e:	b29b      	uxth	r3, r3
 8014690:	4413      	add	r3, r2
 8014692:	b29b      	uxth	r3, r3
 8014694:	b21a      	sxth	r2, r3
 8014696:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801469a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801469e:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 80146a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80146a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80146b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80146bc:	b29b      	uxth	r3, r3
 80146be:	4413      	add	r3, r2
 80146c0:	b29b      	uxth	r3, r3
 80146c2:	b21a      	sxth	r2, r3
 80146c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80146c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146cc:	80da      	strh	r2, [r3, #6]
        lv_area_t clip_area2;
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 80146ce:	f107 0218 	add.w	r2, r7, #24
 80146d2:	f107 0310 	add.w	r3, r7, #16
 80146d6:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80146da:	4618      	mov	r0, r3
 80146dc:	f00a fd80 	bl	801f1e0 <_lv_area_intersect>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d02e      	beq.n	8014744 <lv_draw_sw_arc+0x6ac>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 80146e6:	f107 0118 	add.w	r1, r7, #24
 80146ea:	f107 0020 	add.w	r0, r7, #32
 80146ee:	2300      	movs	r3, #0
 80146f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80146f4:	f7fc fa24 	bl	8010b40 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 80146f8:	f107 0320 	add.w	r3, r7, #32
 80146fc:	2100      	movs	r1, #0
 80146fe:	4618      	mov	r0, r3
 8014700:	f7fb fe52 	bl	80103a8 <lv_draw_mask_add>
 8014704:	4603      	mov	r3, r0
 8014706:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132

            draw_ctx->clip_area = &clip_area2;
 801470a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801470e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	f107 0210 	add.w	r2, r7, #16
 8014718:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 801471a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801471e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8014722:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014726:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801472a:	6818      	ldr	r0, [r3, #0]
 801472c:	f7fe fa48 	bl	8012bc0 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8014730:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8014734:	4618      	mov	r0, r3
 8014736:	f7fb fead 	bl	8010494 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 801473a:	f107 0320 	add.w	r3, r7, #32
 801473e:	4618      	mov	r0, r3
 8014740:	f7fb fef8 	bl	8010534 <lv_draw_mask_free_param>
        }

        get_rounded_area(end_angle, radius, width, &round_area);
 8014744:	f9b7 015c 	ldrsh.w	r0, [r7, #348]	; 0x15c
 8014748:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801474c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8014750:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014754:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8014758:	b2da      	uxtb	r2, r3
 801475a:	f107 0318 	add.w	r3, r7, #24
 801475e:	f001 f894 	bl	801588a <get_rounded_area>
        round_area.x1 += center->x;
 8014762:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801476a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801476e:	b29a      	uxth	r2, r3
 8014770:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014774:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801477e:	b29b      	uxth	r3, r3
 8014780:	4413      	add	r3, r2
 8014782:	b29b      	uxth	r3, r3
 8014784:	b21a      	sxth	r2, r3
 8014786:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801478a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801478e:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8014790:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014798:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801479c:	b29a      	uxth	r2, r3
 801479e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80147a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	4413      	add	r3, r2
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	b21a      	sxth	r2, r3
 80147b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80147b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147bc:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 80147be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80147c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80147ca:	b29a      	uxth	r2, r3
 80147cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80147d0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80147da:	b29b      	uxth	r3, r3
 80147dc:	4413      	add	r3, r2
 80147de:	b29b      	uxth	r3, r3
 80147e0:	b21a      	sxth	r2, r3
 80147e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80147e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147ea:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 80147ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80147f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80147f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80147f8:	b29a      	uxth	r2, r3
 80147fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80147fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014808:	b29b      	uxth	r3, r3
 801480a:	4413      	add	r3, r2
 801480c:	b29b      	uxth	r3, r3
 801480e:	b21a      	sxth	r2, r3
 8014810:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014818:	80da      	strh	r2, [r3, #6]
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 801481a:	f107 0218 	add.w	r2, r7, #24
 801481e:	f107 0310 	add.w	r3, r7, #16
 8014822:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8014826:	4618      	mov	r0, r3
 8014828:	f00a fcda 	bl	801f1e0 <_lv_area_intersect>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d02e      	beq.n	8014890 <lv_draw_sw_arc+0x7f8>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8014832:	f107 0118 	add.w	r1, r7, #24
 8014836:	f107 0020 	add.w	r0, r7, #32
 801483a:	2300      	movs	r3, #0
 801483c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014840:	f7fc f97e 	bl	8010b40 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8014844:	f107 0320 	add.w	r3, r7, #32
 8014848:	2100      	movs	r1, #0
 801484a:	4618      	mov	r0, r3
 801484c:	f7fb fdac 	bl	80103a8 <lv_draw_mask_add>
 8014850:	4603      	mov	r3, r0
 8014852:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

            draw_ctx->clip_area = &clip_area2;
 8014856:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801485a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	f107 0210 	add.w	r2, r7, #16
 8014864:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8014866:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801486a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 801486e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014872:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8014876:	6818      	ldr	r0, [r3, #0]
 8014878:	f7fe f9a2 	bl	8012bc0 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 801487c:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8014880:	4618      	mov	r0, r3
 8014882:	f7fb fe07 	bl	8010494 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8014886:	f107 0320 	add.w	r3, r7, #32
 801488a:	4618      	mov	r0, r3
 801488c:	f7fb fe52 	bl	8010534 <lv_draw_mask_free_param>
        }
        draw_ctx->clip_area = clip_area_ori;
 8014890:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014894:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801489e:	609a      	str	r2, [r3, #8]
 80148a0:	e006      	b.n	80148b0 <lv_draw_sw_arc+0x818>
    if(dsc->opa <= LV_OPA_MIN) return;
 80148a2:	bf00      	nop
 80148a4:	e004      	b.n	80148b0 <lv_draw_sw_arc+0x818>
    if(dsc->width == 0) return;
 80148a6:	bf00      	nop
 80148a8:	e002      	b.n	80148b0 <lv_draw_sw_arc+0x818>
    if(start_angle == end_angle) return;
 80148aa:	bf00      	nop
 80148ac:	e000      	b.n	80148b0 <lv_draw_sw_arc+0x818>
        return;
 80148ae:	bf00      	nop
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_COMPLEX*/
}
 80148b0:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd90      	pop	{r4, r7, pc}

080148b8 <draw_quarter_0>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_DRAW_COMPLEX
static void draw_quarter_0(quarter_draw_dsc_t * q)
{
 80148b8:	b590      	push	{r4, r7, lr}
 80148ba:	b087      	sub	sp, #28
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	699b      	ldr	r3, [r3, #24]
 80148c4:	689b      	ldr	r3, [r3, #8]
 80148c6:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	895b      	ldrh	r3, [r3, #10]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f040 8097 	bne.w	8014a00 <draw_quarter_0+0x148>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	899b      	ldrh	r3, [r3, #12]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	f040 8092 	bne.w	8014a00 <draw_quarter_0+0x148>
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	88da      	ldrh	r2, [r3, #6]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	891b      	ldrh	r3, [r3, #8]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	f080 808b 	bcs.w	8014a00 <draw_quarter_0+0x148>
        /*Small arc here*/
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80148f2:	b29c      	uxth	r4, r3
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	88db      	ldrh	r3, [r3, #6]
 80148f8:	b21b      	sxth	r3, r3
 80148fa:	4618      	mov	r0, r3
 80148fc:	f00b fe76 	bl	80205ec <lv_trigo_sin>
 8014900:	4603      	mov	r3, r0
 8014902:	461a      	mov	r2, r3
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801490a:	4619      	mov	r1, r3
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014912:	1acb      	subs	r3, r1, r3
 8014914:	fb02 f303 	mul.w	r3, r2, r3
 8014918:	13db      	asrs	r3, r3, #15
 801491a:	b29b      	uxth	r3, r3
 801491c:	4423      	add	r3, r4
 801491e:	b29b      	uxth	r3, r3
 8014920:	b21b      	sxth	r3, r3
 8014922:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	f9b3 3000 	ldrsh.w	r3, [r3]
 801492c:	b29c      	uxth	r4, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	88db      	ldrh	r3, [r3, #6]
 8014932:	335a      	adds	r3, #90	; 0x5a
 8014934:	b29b      	uxth	r3, r3
 8014936:	b21b      	sxth	r3, r3
 8014938:	4618      	mov	r0, r3
 801493a:	f00b fe57 	bl	80205ec <lv_trigo_sin>
 801493e:	4603      	mov	r3, r0
 8014940:	461a      	mov	r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014948:	fb02 f303 	mul.w	r3, r2, r3
 801494c:	13db      	asrs	r3, r3, #15
 801494e:	b29b      	uxth	r3, r3
 8014950:	4423      	add	r3, r4
 8014952:	b29b      	uxth	r3, r3
 8014954:	b21b      	sxth	r3, r3
 8014956:	81bb      	strh	r3, [r7, #12]

        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014960:	b29c      	uxth	r4, r3
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	891b      	ldrh	r3, [r3, #8]
 8014966:	b21b      	sxth	r3, r3
 8014968:	4618      	mov	r0, r3
 801496a:	f00b fe3f 	bl	80205ec <lv_trigo_sin>
 801496e:	4603      	mov	r3, r0
 8014970:	461a      	mov	r2, r3
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014978:	fb02 f303 	mul.w	r3, r2, r3
 801497c:	13db      	asrs	r3, r3, #15
 801497e:	b29b      	uxth	r3, r3
 8014980:	4423      	add	r3, r4
 8014982:	b29b      	uxth	r3, r3
 8014984:	b21b      	sxth	r3, r3
 8014986:	81fb      	strh	r3, [r7, #14]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014990:	b29c      	uxth	r4, r3
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	891b      	ldrh	r3, [r3, #8]
 8014996:	335a      	adds	r3, #90	; 0x5a
 8014998:	b29b      	uxth	r3, r3
 801499a:	b21b      	sxth	r3, r3
 801499c:	4618      	mov	r0, r3
 801499e:	f00b fe25 	bl	80205ec <lv_trigo_sin>
 80149a2:	4603      	mov	r3, r0
 80149a4:	461a      	mov	r2, r3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80149ac:	4619      	mov	r1, r3
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80149b4:	1acb      	subs	r3, r1, r3
 80149b6:	fb02 f303 	mul.w	r3, r2, r3
 80149ba:	13db      	asrs	r3, r3, #15
 80149bc:	b29b      	uxth	r3, r3
 80149be:	4423      	add	r3, r4
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	b21b      	sxth	r3, r3
 80149c4:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80149c6:	f107 0108 	add.w	r1, r7, #8
 80149ca:	f107 0308 	add.w	r3, r7, #8
 80149ce:	697a      	ldr	r2, [r7, #20]
 80149d0:	4618      	mov	r0, r3
 80149d2:	f00a fc05 	bl	801f1e0 <_lv_area_intersect>
 80149d6:	4603      	mov	r3, r0
 80149d8:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80149da:	7cfb      	ldrb	r3, [r7, #19]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	f000 8152 	beq.w	8014c86 <draw_quarter_0+0x3ce>
            q->draw_ctx->clip_area = &quarter_area;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	699b      	ldr	r3, [r3, #24]
 80149e6:	f107 0208 	add.w	r2, r7, #8
 80149ea:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6998      	ldr	r0, [r3, #24]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6919      	ldr	r1, [r3, #16]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	695b      	ldr	r3, [r3, #20]
 80149f8:	461a      	mov	r2, r3
 80149fa:	f7fe f8e1 	bl	8012bc0 <lv_draw_rect>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80149fe:	e142      	b.n	8014c86 <draw_quarter_0+0x3ce>
        }
    }
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	895b      	ldrh	r3, [r3, #10]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d004      	beq.n	8014a12 <draw_quarter_0+0x15a>
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	899b      	ldrh	r3, [r3, #12]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f040 80d2 	bne.w	8014bb6 <draw_quarter_0+0x2fe>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 0) {
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	895b      	ldrh	r3, [r3, #10]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d163      	bne.n	8014ae2 <draw_quarter_0+0x22a>
            quarter_area.x1 = q->center->x;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a22:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + q->radius;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014a2c:	b29a      	uxth	r2, r3
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a34:	b29b      	uxth	r3, r3
 8014a36:	4413      	add	r3, r2
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	b21b      	sxth	r3, r3
 8014a3c:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014a46:	b29c      	uxth	r4, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	88db      	ldrh	r3, [r3, #6]
 8014a4c:	b21b      	sxth	r3, r3
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f00b fdcc 	bl	80205ec <lv_trigo_sin>
 8014a54:	4603      	mov	r3, r0
 8014a56:	461a      	mov	r2, r3
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a5e:	4619      	mov	r1, r3
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014a66:	1acb      	subs	r3, r1, r3
 8014a68:	fb02 f303 	mul.w	r3, r2, r3
 8014a6c:	13db      	asrs	r3, r3, #15
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	4423      	add	r3, r4
 8014a72:	b29b      	uxth	r3, r3
 8014a74:	b21b      	sxth	r3, r3
 8014a76:	817b      	strh	r3, [r7, #10]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a80:	b29c      	uxth	r4, r3
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	88db      	ldrh	r3, [r3, #6]
 8014a86:	335a      	adds	r3, #90	; 0x5a
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	b21b      	sxth	r3, r3
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f00b fdad 	bl	80205ec <lv_trigo_sin>
 8014a92:	4603      	mov	r3, r0
 8014a94:	461a      	mov	r2, r3
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a9c:	fb02 f303 	mul.w	r3, r2, r3
 8014aa0:	13db      	asrs	r3, r3, #15
 8014aa2:	b29b      	uxth	r3, r3
 8014aa4:	4423      	add	r3, r4
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	b21b      	sxth	r3, r3
 8014aaa:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014aac:	f107 0108 	add.w	r1, r7, #8
 8014ab0:	f107 0308 	add.w	r3, r7, #8
 8014ab4:	697a      	ldr	r2, [r7, #20]
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f00a fb92 	bl	801f1e0 <_lv_area_intersect>
 8014abc:	4603      	mov	r3, r0
 8014abe:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8014ac0:	7c7b      	ldrb	r3, [r7, #17]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d00d      	beq.n	8014ae2 <draw_quarter_0+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	699b      	ldr	r3, [r3, #24]
 8014aca:	f107 0208 	add.w	r2, r7, #8
 8014ace:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6998      	ldr	r0, [r3, #24]
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	6919      	ldr	r1, [r3, #16]
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	695b      	ldr	r3, [r3, #20]
 8014adc:	461a      	mov	r2, r3
 8014ade:	f7fe f86f 	bl	8012bc0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 0) {
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	899b      	ldrh	r3, [r3, #12]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	f040 80cf 	bne.w	8014c8a <draw_quarter_0+0x3d2>
            quarter_area.x2 = q->center->x + q->radius;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014af4:	b29a      	uxth	r2, r3
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014afc:	b29b      	uxth	r3, r3
 8014afe:	4413      	add	r3, r2
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	b21b      	sxth	r3, r3
 8014b04:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014b0e:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014b18:	b29c      	uxth	r4, r3
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	891b      	ldrh	r3, [r3, #8]
 8014b1e:	b21b      	sxth	r3, r3
 8014b20:	4618      	mov	r0, r3
 8014b22:	f00b fd63 	bl	80205ec <lv_trigo_sin>
 8014b26:	4603      	mov	r3, r0
 8014b28:	461a      	mov	r2, r3
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014b30:	fb02 f303 	mul.w	r3, r2, r3
 8014b34:	13db      	asrs	r3, r3, #15
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	4423      	add	r3, r4
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	b21b      	sxth	r3, r3
 8014b3e:	81fb      	strh	r3, [r7, #14]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b48:	b29c      	uxth	r4, r3
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	891b      	ldrh	r3, [r3, #8]
 8014b4e:	335a      	adds	r3, #90	; 0x5a
 8014b50:	b29b      	uxth	r3, r3
 8014b52:	b21b      	sxth	r3, r3
 8014b54:	4618      	mov	r0, r3
 8014b56:	f00b fd49 	bl	80205ec <lv_trigo_sin>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014b64:	4619      	mov	r1, r3
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014b6c:	1acb      	subs	r3, r1, r3
 8014b6e:	fb02 f303 	mul.w	r3, r2, r3
 8014b72:	13db      	asrs	r3, r3, #15
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	4423      	add	r3, r4
 8014b78:	b29b      	uxth	r3, r3
 8014b7a:	b21b      	sxth	r3, r3
 8014b7c:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014b7e:	f107 0108 	add.w	r1, r7, #8
 8014b82:	f107 0308 	add.w	r3, r7, #8
 8014b86:	697a      	ldr	r2, [r7, #20]
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f00a fb29 	bl	801f1e0 <_lv_area_intersect>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8014b92:	7c3b      	ldrb	r3, [r7, #16]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d078      	beq.n	8014c8a <draw_quarter_0+0x3d2>
                q->draw_ctx->clip_area = &quarter_area;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	699b      	ldr	r3, [r3, #24]
 8014b9c:	f107 0208 	add.w	r2, r7, #8
 8014ba0:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6998      	ldr	r0, [r3, #24]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6919      	ldr	r1, [r3, #16]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	695b      	ldr	r3, [r3, #20]
 8014bae:	461a      	mov	r2, r3
 8014bb0:	f7fe f806 	bl	8012bc0 <lv_draw_rect>
        if(q->end_quarter == 0) {
 8014bb4:	e069      	b.n	8014c8a <draw_quarter_0+0x3d2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	895a      	ldrh	r2, [r3, #10]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	899b      	ldrh	r3, [r3, #12]
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	d109      	bne.n	8014bd6 <draw_quarter_0+0x31e>
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	895b      	ldrh	r3, [r3, #10]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d005      	beq.n	8014bd6 <draw_quarter_0+0x31e>
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	891a      	ldrh	r2, [r3, #8]
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	88db      	ldrh	r3, [r3, #6]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d317      	bcc.n	8014c06 <draw_quarter_0+0x34e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8014bda:	2b02      	cmp	r3, #2
 8014bdc:	d103      	bne.n	8014be6 <draw_quarter_0+0x32e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	899b      	ldrh	r3, [r3, #12]
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d00f      	beq.n	8014c06 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8014bea:	2b03      	cmp	r3, #3
 8014bec:	d103      	bne.n	8014bf6 <draw_quarter_0+0x33e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	899b      	ldrh	r3, [r3, #12]
 8014bf2:	2b02      	cmp	r3, #2
 8014bf4:	d007      	beq.n	8014c06 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 8014bfa:	2b03      	cmp	r3, #3
 8014bfc:	d146      	bne.n	8014c8c <draw_quarter_0+0x3d4>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	899b      	ldrh	r3, [r3, #12]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d142      	bne.n	8014c8c <draw_quarter_0+0x3d4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c0e:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014c18:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	4413      	add	r3, r2
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	b21b      	sxth	r3, r3
 8014c32:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014c3c:	b29a      	uxth	r2, r3
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	4413      	add	r3, r2
 8014c48:	b29b      	uxth	r3, r3
 8014c4a:	b21b      	sxth	r3, r3
 8014c4c:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014c4e:	f107 0108 	add.w	r1, r7, #8
 8014c52:	f107 0308 	add.w	r3, r7, #8
 8014c56:	697a      	ldr	r2, [r7, #20]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f00a fac1 	bl	801f1e0 <_lv_area_intersect>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8014c62:	7cbb      	ldrb	r3, [r7, #18]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d011      	beq.n	8014c8c <draw_quarter_0+0x3d4>
            q->draw_ctx->clip_area = &quarter_area;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	699b      	ldr	r3, [r3, #24]
 8014c6c:	f107 0208 	add.w	r2, r7, #8
 8014c70:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6998      	ldr	r0, [r3, #24]
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6919      	ldr	r1, [r3, #16]
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	695b      	ldr	r3, [r3, #20]
 8014c7e:	461a      	mov	r2, r3
 8014c80:	f7fd ff9e 	bl	8012bc0 <lv_draw_rect>
 8014c84:	e002      	b.n	8014c8c <draw_quarter_0+0x3d4>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8014c86:	bf00      	nop
 8014c88:	e000      	b.n	8014c8c <draw_quarter_0+0x3d4>
        if(q->end_quarter == 0) {
 8014c8a:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	699b      	ldr	r3, [r3, #24]
 8014c90:	697a      	ldr	r2, [r7, #20]
 8014c92:	609a      	str	r2, [r3, #8]
}
 8014c94:	bf00      	nop
 8014c96:	371c      	adds	r7, #28
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd90      	pop	{r4, r7, pc}

08014c9c <draw_quarter_1>:

static void draw_quarter_1(quarter_draw_dsc_t * q)
{
 8014c9c:	b590      	push	{r4, r7, lr}
 8014c9e:	b087      	sub	sp, #28
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	699b      	ldr	r3, [r3, #24]
 8014ca8:	689b      	ldr	r3, [r3, #8]
 8014caa:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	895b      	ldrh	r3, [r3, #10]
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	f040 8097 	bne.w	8014de4 <draw_quarter_1+0x148>
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	899b      	ldrh	r3, [r3, #12]
 8014cba:	2b01      	cmp	r3, #1
 8014cbc:	f040 8092 	bne.w	8014de4 <draw_quarter_1+0x148>
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	88da      	ldrh	r2, [r3, #6]
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	891b      	ldrh	r3, [r3, #8]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	f080 808b 	bcs.w	8014de4 <draw_quarter_1+0x148>
        /*Small arc here*/
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cd6:	b29c      	uxth	r4, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	88db      	ldrh	r3, [r3, #6]
 8014cdc:	b21b      	sxth	r3, r3
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f00b fc84 	bl	80205ec <lv_trigo_sin>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014cee:	fb02 f303 	mul.w	r3, r2, r3
 8014cf2:	13db      	asrs	r3, r3, #15
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	4423      	add	r3, r4
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	b21b      	sxth	r3, r3
 8014cfc:	81fb      	strh	r3, [r7, #14]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d06:	b29c      	uxth	r4, r3
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	88db      	ldrh	r3, [r3, #6]
 8014d0c:	335a      	adds	r3, #90	; 0x5a
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	b21b      	sxth	r3, r3
 8014d12:	4618      	mov	r0, r3
 8014d14:	f00b fc6a 	bl	80205ec <lv_trigo_sin>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d22:	4619      	mov	r1, r3
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014d2a:	1acb      	subs	r3, r1, r3
 8014d2c:	fb02 f303 	mul.w	r3, r2, r3
 8014d30:	13db      	asrs	r3, r3, #15
 8014d32:	b29b      	uxth	r3, r3
 8014d34:	4423      	add	r3, r4
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	b21b      	sxth	r3, r3
 8014d3a:	81bb      	strh	r3, [r7, #12]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014d44:	b29c      	uxth	r4, r3
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	891b      	ldrh	r3, [r3, #8]
 8014d4a:	b21b      	sxth	r3, r3
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f00b fc4d 	bl	80205ec <lv_trigo_sin>
 8014d52:	4603      	mov	r3, r0
 8014d54:	461a      	mov	r2, r3
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d5c:	4619      	mov	r1, r3
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014d64:	1acb      	subs	r3, r1, r3
 8014d66:	fb02 f303 	mul.w	r3, r2, r3
 8014d6a:	13db      	asrs	r3, r3, #15
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	4423      	add	r3, r4
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	b21b      	sxth	r3, r3
 8014d74:	817b      	strh	r3, [r7, #10]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d7e:	b29c      	uxth	r4, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	891b      	ldrh	r3, [r3, #8]
 8014d84:	335a      	adds	r3, #90	; 0x5a
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	b21b      	sxth	r3, r3
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f00b fc2e 	bl	80205ec <lv_trigo_sin>
 8014d90:	4603      	mov	r3, r0
 8014d92:	461a      	mov	r2, r3
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014d9a:	fb02 f303 	mul.w	r3, r2, r3
 8014d9e:	13db      	asrs	r3, r3, #15
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	4423      	add	r3, r4
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	b21b      	sxth	r3, r3
 8014da8:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014daa:	f107 0108 	add.w	r1, r7, #8
 8014dae:	f107 0308 	add.w	r3, r7, #8
 8014db2:	697a      	ldr	r2, [r7, #20]
 8014db4:	4618      	mov	r0, r3
 8014db6:	f00a fa13 	bl	801f1e0 <_lv_area_intersect>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8014dbe:	7cfb      	ldrb	r3, [r7, #19]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 815a 	beq.w	801507a <draw_quarter_1+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	699b      	ldr	r3, [r3, #24]
 8014dca:	f107 0208 	add.w	r2, r7, #8
 8014dce:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6998      	ldr	r0, [r3, #24]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6919      	ldr	r1, [r3, #16]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	695b      	ldr	r3, [r3, #20]
 8014ddc:	461a      	mov	r2, r3
 8014dde:	f7fd feef 	bl	8012bc0 <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8014de2:	e14a      	b.n	801507a <draw_quarter_1+0x3de>
        }
    }
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	895b      	ldrh	r3, [r3, #10]
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d004      	beq.n	8014df6 <draw_quarter_1+0x15a>
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	899b      	ldrh	r3, [r3, #12]
 8014df0:	2b01      	cmp	r3, #1
 8014df2:	f040 80d6 	bne.w	8014fa2 <draw_quarter_1+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 1) {
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	895b      	ldrh	r3, [r3, #10]
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d163      	bne.n	8014ec6 <draw_quarter_1+0x22a>
            quarter_area.x1 = q->center->x - q->radius;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	1ad3      	subs	r3, r2, r3
 8014e12:	b29b      	uxth	r3, r3
 8014e14:	b21b      	sxth	r3, r3
 8014e16:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e20:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014e2a:	b29c      	uxth	r4, r3
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	88db      	ldrh	r3, [r3, #6]
 8014e30:	b21b      	sxth	r3, r3
 8014e32:	4618      	mov	r0, r3
 8014e34:	f00b fbda 	bl	80205ec <lv_trigo_sin>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e42:	fb02 f303 	mul.w	r3, r2, r3
 8014e46:	13db      	asrs	r3, r3, #15
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	4423      	add	r3, r4
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	b21b      	sxth	r3, r3
 8014e50:	81fb      	strh	r3, [r7, #14]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e5a:	b29c      	uxth	r4, r3
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	88db      	ldrh	r3, [r3, #6]
 8014e60:	335a      	adds	r3, #90	; 0x5a
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	b21b      	sxth	r3, r3
 8014e66:	4618      	mov	r0, r3
 8014e68:	f00b fbc0 	bl	80205ec <lv_trigo_sin>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	461a      	mov	r2, r3
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014e76:	4619      	mov	r1, r3
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014e7e:	1acb      	subs	r3, r1, r3
 8014e80:	fb02 f303 	mul.w	r3, r2, r3
 8014e84:	13db      	asrs	r3, r3, #15
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	4423      	add	r3, r4
 8014e8a:	b29b      	uxth	r3, r3
 8014e8c:	b21b      	sxth	r3, r3
 8014e8e:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014e90:	f107 0108 	add.w	r1, r7, #8
 8014e94:	f107 0308 	add.w	r3, r7, #8
 8014e98:	697a      	ldr	r2, [r7, #20]
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f00a f9a0 	bl	801f1e0 <_lv_area_intersect>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8014ea4:	7c7b      	ldrb	r3, [r7, #17]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d00d      	beq.n	8014ec6 <draw_quarter_1+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	699b      	ldr	r3, [r3, #24]
 8014eae:	f107 0208 	add.w	r2, r7, #8
 8014eb2:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6998      	ldr	r0, [r3, #24]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6919      	ldr	r1, [r3, #16]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	695b      	ldr	r3, [r3, #20]
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	f7fd fe7d 	bl	8012bc0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 1) {
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	899b      	ldrh	r3, [r3, #12]
 8014eca:	2b01      	cmp	r3, #1
 8014ecc:	f040 80d7 	bne.w	801507e <draw_quarter_1+0x3e2>
            quarter_area.x2 = q->center->x - 1;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	3b01      	subs	r3, #1
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	b21b      	sxth	r3, r3
 8014ee0:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + q->radius;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014eea:	b29a      	uxth	r2, r3
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014ef2:	b29b      	uxth	r3, r3
 8014ef4:	4413      	add	r3, r2
 8014ef6:	b29b      	uxth	r3, r3
 8014ef8:	b21b      	sxth	r3, r3
 8014efa:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014f04:	b29c      	uxth	r4, r3
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	891b      	ldrh	r3, [r3, #8]
 8014f0a:	b21b      	sxth	r3, r3
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f00b fb6d 	bl	80205ec <lv_trigo_sin>
 8014f12:	4603      	mov	r3, r0
 8014f14:	461a      	mov	r2, r3
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014f24:	1acb      	subs	r3, r1, r3
 8014f26:	fb02 f303 	mul.w	r3, r2, r3
 8014f2a:	13db      	asrs	r3, r3, #15
 8014f2c:	b29b      	uxth	r3, r3
 8014f2e:	4423      	add	r3, r4
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	b21b      	sxth	r3, r3
 8014f34:	817b      	strh	r3, [r7, #10]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f3e:	b29c      	uxth	r4, r3
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	891b      	ldrh	r3, [r3, #8]
 8014f44:	335a      	adds	r3, #90	; 0x5a
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	b21b      	sxth	r3, r3
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f00b fb4e 	bl	80205ec <lv_trigo_sin>
 8014f50:	4603      	mov	r3, r0
 8014f52:	461a      	mov	r2, r3
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014f5a:	fb02 f303 	mul.w	r3, r2, r3
 8014f5e:	13db      	asrs	r3, r3, #15
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	4423      	add	r3, r4
 8014f64:	b29b      	uxth	r3, r3
 8014f66:	b21b      	sxth	r3, r3
 8014f68:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8014f6a:	f107 0108 	add.w	r1, r7, #8
 8014f6e:	f107 0308 	add.w	r3, r7, #8
 8014f72:	697a      	ldr	r2, [r7, #20]
 8014f74:	4618      	mov	r0, r3
 8014f76:	f00a f933 	bl	801f1e0 <_lv_area_intersect>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8014f7e:	7c3b      	ldrb	r3, [r7, #16]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d07c      	beq.n	801507e <draw_quarter_1+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	699b      	ldr	r3, [r3, #24]
 8014f88:	f107 0208 	add.w	r2, r7, #8
 8014f8c:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6998      	ldr	r0, [r3, #24]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6919      	ldr	r1, [r3, #16]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	695b      	ldr	r3, [r3, #20]
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	f7fd fe10 	bl	8012bc0 <lv_draw_rect>
        if(q->end_quarter == 1) {
 8014fa0:	e06d      	b.n	801507e <draw_quarter_1+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	895a      	ldrh	r2, [r3, #10]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	899b      	ldrh	r3, [r3, #12]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d109      	bne.n	8014fc2 <draw_quarter_1+0x326>
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	895b      	ldrh	r3, [r3, #10]
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d005      	beq.n	8014fc2 <draw_quarter_1+0x326>
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	891a      	ldrh	r2, [r3, #8]
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	88db      	ldrh	r3, [r3, #6]
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d317      	bcc.n	8014ff2 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d103      	bne.n	8014fd2 <draw_quarter_1+0x336>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	899b      	ldrh	r3, [r3, #12]
 8014fce:	2b02      	cmp	r3, #2
 8014fd0:	d00f      	beq.n	8014ff2 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d103      	bne.n	8014fe2 <draw_quarter_1+0x346>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	899b      	ldrh	r3, [r3, #12]
 8014fde:	2b03      	cmp	r3, #3
 8014fe0:	d007      	beq.n	8014ff2 <draw_quarter_1+0x356>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8014fe6:	2b03      	cmp	r3, #3
 8014fe8:	d14a      	bne.n	8015080 <draw_quarter_1+0x3e4>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	899b      	ldrh	r3, [r3, #12]
 8014fee:	2b02      	cmp	r3, #2
 8014ff0:	d146      	bne.n	8015080 <draw_quarter_1+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ffa:	b29a      	uxth	r2, r3
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015002:	b29b      	uxth	r3, r3
 8015004:	1ad3      	subs	r3, r2, r3
 8015006:	b29b      	uxth	r3, r3
 8015008:	b21b      	sxth	r3, r3
 801500a:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015014:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801501e:	b29b      	uxth	r3, r3
 8015020:	3b01      	subs	r3, #1
 8015022:	b29b      	uxth	r3, r3
 8015024:	b21b      	sxth	r3, r3
 8015026:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015030:	b29a      	uxth	r2, r3
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015038:	b29b      	uxth	r3, r3
 801503a:	4413      	add	r3, r2
 801503c:	b29b      	uxth	r3, r3
 801503e:	b21b      	sxth	r3, r3
 8015040:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015042:	f107 0108 	add.w	r1, r7, #8
 8015046:	f107 0308 	add.w	r3, r7, #8
 801504a:	697a      	ldr	r2, [r7, #20]
 801504c:	4618      	mov	r0, r3
 801504e:	f00a f8c7 	bl	801f1e0 <_lv_area_intersect>
 8015052:	4603      	mov	r3, r0
 8015054:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8015056:	7cbb      	ldrb	r3, [r7, #18]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d011      	beq.n	8015080 <draw_quarter_1+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	699b      	ldr	r3, [r3, #24]
 8015060:	f107 0208 	add.w	r2, r7, #8
 8015064:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	6998      	ldr	r0, [r3, #24]
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6919      	ldr	r1, [r3, #16]
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	695b      	ldr	r3, [r3, #20]
 8015072:	461a      	mov	r2, r3
 8015074:	f7fd fda4 	bl	8012bc0 <lv_draw_rect>
 8015078:	e002      	b.n	8015080 <draw_quarter_1+0x3e4>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801507a:	bf00      	nop
 801507c:	e000      	b.n	8015080 <draw_quarter_1+0x3e4>
        if(q->end_quarter == 1) {
 801507e:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	699b      	ldr	r3, [r3, #24]
 8015084:	697a      	ldr	r2, [r7, #20]
 8015086:	609a      	str	r2, [r3, #8]
}
 8015088:	bf00      	nop
 801508a:	371c      	adds	r7, #28
 801508c:	46bd      	mov	sp, r7
 801508e:	bd90      	pop	{r4, r7, pc}

08015090 <draw_quarter_2>:

static void draw_quarter_2(quarter_draw_dsc_t * q)
{
 8015090:	b590      	push	{r4, r7, lr}
 8015092:	b087      	sub	sp, #28
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	699b      	ldr	r3, [r3, #24]
 801509c:	689b      	ldr	r3, [r3, #8]
 801509e:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	895b      	ldrh	r3, [r3, #10]
 80150a4:	2b02      	cmp	r3, #2
 80150a6:	f040 8097 	bne.w	80151d8 <draw_quarter_2+0x148>
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	899b      	ldrh	r3, [r3, #12]
 80150ae:	2b02      	cmp	r3, #2
 80150b0:	f040 8092 	bne.w	80151d8 <draw_quarter_2+0x148>
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	88da      	ldrh	r2, [r3, #6]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	891b      	ldrh	r3, [r3, #8]
 80150bc:	429a      	cmp	r2, r3
 80150be:	f080 808b 	bcs.w	80151d8 <draw_quarter_2+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150ca:	b29c      	uxth	r4, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	88db      	ldrh	r3, [r3, #6]
 80150d0:	335a      	adds	r3, #90	; 0x5a
 80150d2:	b29b      	uxth	r3, r3
 80150d4:	b21b      	sxth	r3, r3
 80150d6:	4618      	mov	r0, r3
 80150d8:	f00b fa88 	bl	80205ec <lv_trigo_sin>
 80150dc:	4603      	mov	r3, r0
 80150de:	461a      	mov	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80150e6:	fb02 f303 	mul.w	r3, r2, r3
 80150ea:	13db      	asrs	r3, r3, #15
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	4423      	add	r3, r4
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	b21b      	sxth	r3, r3
 80150f4:	813b      	strh	r3, [r7, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80150fe:	b29c      	uxth	r4, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	88db      	ldrh	r3, [r3, #6]
 8015104:	b21b      	sxth	r3, r3
 8015106:	4618      	mov	r0, r3
 8015108:	f00b fa70 	bl	80205ec <lv_trigo_sin>
 801510c:	4603      	mov	r3, r0
 801510e:	461a      	mov	r2, r3
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015116:	4619      	mov	r1, r3
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801511e:	1acb      	subs	r3, r1, r3
 8015120:	fb02 f303 	mul.w	r3, r2, r3
 8015124:	13db      	asrs	r3, r3, #15
 8015126:	b29b      	uxth	r3, r3
 8015128:	4423      	add	r3, r4
 801512a:	b29b      	uxth	r3, r3
 801512c:	b21b      	sxth	r3, r3
 801512e:	81fb      	strh	r3, [r7, #14]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015138:	b29c      	uxth	r4, r3
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	891b      	ldrh	r3, [r3, #8]
 801513e:	b21b      	sxth	r3, r3
 8015140:	4618      	mov	r0, r3
 8015142:	f00b fa53 	bl	80205ec <lv_trigo_sin>
 8015146:	4603      	mov	r3, r0
 8015148:	461a      	mov	r2, r3
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015150:	fb02 f303 	mul.w	r3, r2, r3
 8015154:	13db      	asrs	r3, r3, #15
 8015156:	b29b      	uxth	r3, r3
 8015158:	4423      	add	r3, r4
 801515a:	b29b      	uxth	r3, r3
 801515c:	b21b      	sxth	r3, r3
 801515e:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015168:	b29c      	uxth	r4, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	891b      	ldrh	r3, [r3, #8]
 801516e:	335a      	adds	r3, #90	; 0x5a
 8015170:	b29b      	uxth	r3, r3
 8015172:	b21b      	sxth	r3, r3
 8015174:	4618      	mov	r0, r3
 8015176:	f00b fa39 	bl	80205ec <lv_trigo_sin>
 801517a:	4603      	mov	r3, r0
 801517c:	461a      	mov	r2, r3
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015184:	4619      	mov	r1, r3
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801518c:	1acb      	subs	r3, r1, r3
 801518e:	fb02 f303 	mul.w	r3, r2, r3
 8015192:	13db      	asrs	r3, r3, #15
 8015194:	b29b      	uxth	r3, r3
 8015196:	4423      	add	r3, r4
 8015198:	b29b      	uxth	r3, r3
 801519a:	b21b      	sxth	r3, r3
 801519c:	81bb      	strh	r3, [r7, #12]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801519e:	f107 0108 	add.w	r1, r7, #8
 80151a2:	f107 0308 	add.w	r3, r7, #8
 80151a6:	697a      	ldr	r2, [r7, #20]
 80151a8:	4618      	mov	r0, r3
 80151aa:	f00a f819 	bl	801f1e0 <_lv_area_intersect>
 80151ae:	4603      	mov	r3, r0
 80151b0:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80151b2:	7cfb      	ldrb	r3, [r7, #19]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	f000 8163 	beq.w	8015480 <draw_quarter_2+0x3f0>
            q->draw_ctx->clip_area = &quarter_area;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	699b      	ldr	r3, [r3, #24]
 80151be:	f107 0208 	add.w	r2, r7, #8
 80151c2:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6998      	ldr	r0, [r3, #24]
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	6919      	ldr	r1, [r3, #16]
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	695b      	ldr	r3, [r3, #20]
 80151d0:	461a      	mov	r2, r3
 80151d2:	f7fd fcf5 	bl	8012bc0 <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80151d6:	e153      	b.n	8015480 <draw_quarter_2+0x3f0>
        }
    }
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	895b      	ldrh	r3, [r3, #10]
 80151dc:	2b02      	cmp	r3, #2
 80151de:	d004      	beq.n	80151ea <draw_quarter_2+0x15a>
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	899b      	ldrh	r3, [r3, #12]
 80151e4:	2b02      	cmp	r3, #2
 80151e6:	f040 80db 	bne.w	80153a0 <draw_quarter_2+0x310>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 2) {
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	895b      	ldrh	r3, [r3, #10]
 80151ee:	2b02      	cmp	r3, #2
 80151f0:	d167      	bne.n	80152c2 <draw_quarter_2+0x232>
            quarter_area.x2 = q->center->x - 1;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	3b01      	subs	r3, #1
 80151fe:	b29b      	uxth	r3, r3
 8015200:	b21b      	sxth	r3, r3
 8015202:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y - q->radius;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801520c:	b29a      	uxth	r2, r3
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015214:	b29b      	uxth	r3, r3
 8015216:	1ad3      	subs	r3, r2, r3
 8015218:	b29b      	uxth	r3, r3
 801521a:	b21b      	sxth	r3, r3
 801521c:	817b      	strh	r3, [r7, #10]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015226:	b29c      	uxth	r4, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	88db      	ldrh	r3, [r3, #6]
 801522c:	335a      	adds	r3, #90	; 0x5a
 801522e:	b29b      	uxth	r3, r3
 8015230:	b21b      	sxth	r3, r3
 8015232:	4618      	mov	r0, r3
 8015234:	f00b f9da 	bl	80205ec <lv_trigo_sin>
 8015238:	4603      	mov	r3, r0
 801523a:	461a      	mov	r2, r3
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015242:	fb02 f303 	mul.w	r3, r2, r3
 8015246:	13db      	asrs	r3, r3, #15
 8015248:	b29b      	uxth	r3, r3
 801524a:	4423      	add	r3, r4
 801524c:	b29b      	uxth	r3, r3
 801524e:	b21b      	sxth	r3, r3
 8015250:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801525a:	b29c      	uxth	r4, r3
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	88db      	ldrh	r3, [r3, #6]
 8015260:	b21b      	sxth	r3, r3
 8015262:	4618      	mov	r0, r3
 8015264:	f00b f9c2 	bl	80205ec <lv_trigo_sin>
 8015268:	4603      	mov	r3, r0
 801526a:	461a      	mov	r2, r3
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015272:	4619      	mov	r1, r3
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801527a:	1acb      	subs	r3, r1, r3
 801527c:	fb02 f303 	mul.w	r3, r2, r3
 8015280:	13db      	asrs	r3, r3, #15
 8015282:	b29b      	uxth	r3, r3
 8015284:	4423      	add	r3, r4
 8015286:	b29b      	uxth	r3, r3
 8015288:	b21b      	sxth	r3, r3
 801528a:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801528c:	f107 0108 	add.w	r1, r7, #8
 8015290:	f107 0308 	add.w	r3, r7, #8
 8015294:	697a      	ldr	r2, [r7, #20]
 8015296:	4618      	mov	r0, r3
 8015298:	f009 ffa2 	bl	801f1e0 <_lv_area_intersect>
 801529c:	4603      	mov	r3, r0
 801529e:	747b      	strb	r3, [r7, #17]
            if(ok) {
 80152a0:	7c7b      	ldrb	r3, [r7, #17]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d00d      	beq.n	80152c2 <draw_quarter_2+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	699b      	ldr	r3, [r3, #24]
 80152aa:	f107 0208 	add.w	r2, r7, #8
 80152ae:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6998      	ldr	r0, [r3, #24]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6919      	ldr	r1, [r3, #16]
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	695b      	ldr	r3, [r3, #20]
 80152bc:	461a      	mov	r2, r3
 80152be:	f7fd fc7f 	bl	8012bc0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 2) {
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	899b      	ldrh	r3, [r3, #12]
 80152c6:	2b02      	cmp	r3, #2
 80152c8:	f040 80dc 	bne.w	8015484 <draw_quarter_2+0x3f4>
            quarter_area.x1 = q->center->x - q->radius;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152d4:	b29a      	uxth	r2, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80152dc:	b29b      	uxth	r3, r3
 80152de:	1ad3      	subs	r3, r2, r3
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	b21b      	sxth	r3, r3
 80152e4:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y - 1;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80152ee:	b29b      	uxth	r3, r3
 80152f0:	3b01      	subs	r3, #1
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	b21b      	sxth	r3, r3
 80152f6:	81fb      	strh	r3, [r7, #14]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015300:	b29c      	uxth	r4, r3
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	891b      	ldrh	r3, [r3, #8]
 8015306:	335a      	adds	r3, #90	; 0x5a
 8015308:	b29b      	uxth	r3, r3
 801530a:	b21b      	sxth	r3, r3
 801530c:	4618      	mov	r0, r3
 801530e:	f00b f96d 	bl	80205ec <lv_trigo_sin>
 8015312:	4603      	mov	r3, r0
 8015314:	461a      	mov	r2, r3
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801531c:	4619      	mov	r1, r3
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015324:	1acb      	subs	r3, r1, r3
 8015326:	fb02 f303 	mul.w	r3, r2, r3
 801532a:	13db      	asrs	r3, r3, #15
 801532c:	b29b      	uxth	r3, r3
 801532e:	4423      	add	r3, r4
 8015330:	b29b      	uxth	r3, r3
 8015332:	b21b      	sxth	r3, r3
 8015334:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801533e:	b29c      	uxth	r4, r3
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	891b      	ldrh	r3, [r3, #8]
 8015344:	b21b      	sxth	r3, r3
 8015346:	4618      	mov	r0, r3
 8015348:	f00b f950 	bl	80205ec <lv_trigo_sin>
 801534c:	4603      	mov	r3, r0
 801534e:	461a      	mov	r2, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015356:	fb02 f303 	mul.w	r3, r2, r3
 801535a:	13db      	asrs	r3, r3, #15
 801535c:	b29b      	uxth	r3, r3
 801535e:	4423      	add	r3, r4
 8015360:	b29b      	uxth	r3, r3
 8015362:	b21b      	sxth	r3, r3
 8015364:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015366:	f107 0108 	add.w	r1, r7, #8
 801536a:	f107 0308 	add.w	r3, r7, #8
 801536e:	697a      	ldr	r2, [r7, #20]
 8015370:	4618      	mov	r0, r3
 8015372:	f009 ff35 	bl	801f1e0 <_lv_area_intersect>
 8015376:	4603      	mov	r3, r0
 8015378:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801537a:	7c3b      	ldrb	r3, [r7, #16]
 801537c:	2b00      	cmp	r3, #0
 801537e:	f000 8081 	beq.w	8015484 <draw_quarter_2+0x3f4>
                q->draw_ctx->clip_area = &quarter_area;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	699b      	ldr	r3, [r3, #24]
 8015386:	f107 0208 	add.w	r2, r7, #8
 801538a:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6998      	ldr	r0, [r3, #24]
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	6919      	ldr	r1, [r3, #16]
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	695b      	ldr	r3, [r3, #20]
 8015398:	461a      	mov	r2, r3
 801539a:	f7fd fc11 	bl	8012bc0 <lv_draw_rect>
        if(q->end_quarter == 2) {
 801539e:	e071      	b.n	8015484 <draw_quarter_2+0x3f4>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	895a      	ldrh	r2, [r3, #10]
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	899b      	ldrh	r3, [r3, #12]
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d109      	bne.n	80153c0 <draw_quarter_2+0x330>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	895b      	ldrh	r3, [r3, #10]
 80153b0:	2b02      	cmp	r3, #2
 80153b2:	d005      	beq.n	80153c0 <draw_quarter_2+0x330>
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	891a      	ldrh	r2, [r3, #8]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	88db      	ldrh	r3, [r3, #6]
 80153bc:	429a      	cmp	r2, r3
 80153be:	d317      	bcc.n	80153f0 <draw_quarter_2+0x360>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d103      	bne.n	80153d0 <draw_quarter_2+0x340>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	899b      	ldrh	r3, [r3, #12]
 80153cc:	2b03      	cmp	r3, #3
 80153ce:	d00f      	beq.n	80153f0 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80153d4:	2b01      	cmp	r3, #1
 80153d6:	d103      	bne.n	80153e0 <draw_quarter_2+0x350>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	899b      	ldrh	r3, [r3, #12]
 80153dc:	2b03      	cmp	r3, #3
 80153de:	d007      	beq.n	80153f0 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	d14e      	bne.n	8015486 <draw_quarter_2+0x3f6>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	899b      	ldrh	r3, [r3, #12]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d14a      	bne.n	8015486 <draw_quarter_2+0x3f6>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153f8:	b29a      	uxth	r2, r3
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015400:	b29b      	uxth	r3, r3
 8015402:	1ad3      	subs	r3, r2, r3
 8015404:	b29b      	uxth	r3, r3
 8015406:	b21b      	sxth	r3, r3
 8015408:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015412:	b29a      	uxth	r2, r3
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801541a:	b29b      	uxth	r3, r3
 801541c:	1ad3      	subs	r3, r2, r3
 801541e:	b29b      	uxth	r3, r3
 8015420:	b21b      	sxth	r3, r3
 8015422:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	f9b3 3000 	ldrsh.w	r3, [r3]
 801542c:	b29b      	uxth	r3, r3
 801542e:	3b01      	subs	r3, #1
 8015430:	b29b      	uxth	r3, r3
 8015432:	b21b      	sxth	r3, r3
 8015434:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801543e:	b29b      	uxth	r3, r3
 8015440:	3b01      	subs	r3, #1
 8015442:	b29b      	uxth	r3, r3
 8015444:	b21b      	sxth	r3, r3
 8015446:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015448:	f107 0108 	add.w	r1, r7, #8
 801544c:	f107 0308 	add.w	r3, r7, #8
 8015450:	697a      	ldr	r2, [r7, #20]
 8015452:	4618      	mov	r0, r3
 8015454:	f009 fec4 	bl	801f1e0 <_lv_area_intersect>
 8015458:	4603      	mov	r3, r0
 801545a:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 801545c:	7cbb      	ldrb	r3, [r7, #18]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d011      	beq.n	8015486 <draw_quarter_2+0x3f6>
            q->draw_ctx->clip_area = &quarter_area;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	699b      	ldr	r3, [r3, #24]
 8015466:	f107 0208 	add.w	r2, r7, #8
 801546a:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6998      	ldr	r0, [r3, #24]
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6919      	ldr	r1, [r3, #16]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	695b      	ldr	r3, [r3, #20]
 8015478:	461a      	mov	r2, r3
 801547a:	f7fd fba1 	bl	8012bc0 <lv_draw_rect>
 801547e:	e002      	b.n	8015486 <draw_quarter_2+0x3f6>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8015480:	bf00      	nop
 8015482:	e000      	b.n	8015486 <draw_quarter_2+0x3f6>
        if(q->end_quarter == 2) {
 8015484:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	699b      	ldr	r3, [r3, #24]
 801548a:	697a      	ldr	r2, [r7, #20]
 801548c:	609a      	str	r2, [r3, #8]
}
 801548e:	bf00      	nop
 8015490:	371c      	adds	r7, #28
 8015492:	46bd      	mov	sp, r7
 8015494:	bd90      	pop	{r4, r7, pc}

08015496 <draw_quarter_3>:

static void draw_quarter_3(quarter_draw_dsc_t * q)
{
 8015496:	b590      	push	{r4, r7, lr}
 8015498:	b087      	sub	sp, #28
 801549a:	af00      	add	r7, sp, #0
 801549c:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	699b      	ldr	r3, [r3, #24]
 80154a2:	689b      	ldr	r3, [r3, #8]
 80154a4:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	895b      	ldrh	r3, [r3, #10]
 80154aa:	2b03      	cmp	r3, #3
 80154ac:	f040 8097 	bne.w	80155de <draw_quarter_3+0x148>
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	899b      	ldrh	r3, [r3, #12]
 80154b4:	2b03      	cmp	r3, #3
 80154b6:	f040 8092 	bne.w	80155de <draw_quarter_3+0x148>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	88da      	ldrh	r2, [r3, #6]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	891b      	ldrh	r3, [r3, #8]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	f080 808b 	bcs.w	80155de <draw_quarter_3+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154d0:	b29c      	uxth	r4, r3
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	88db      	ldrh	r3, [r3, #6]
 80154d6:	335a      	adds	r3, #90	; 0x5a
 80154d8:	b29b      	uxth	r3, r3
 80154da:	b21b      	sxth	r3, r3
 80154dc:	4618      	mov	r0, r3
 80154de:	f00b f885 	bl	80205ec <lv_trigo_sin>
 80154e2:	4603      	mov	r3, r0
 80154e4:	461a      	mov	r2, r3
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154ec:	4619      	mov	r1, r3
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80154f4:	1acb      	subs	r3, r1, r3
 80154f6:	fb02 f303 	mul.w	r3, r2, r3
 80154fa:	13db      	asrs	r3, r3, #15
 80154fc:	b29b      	uxth	r3, r3
 80154fe:	4423      	add	r3, r4
 8015500:	b29b      	uxth	r3, r3
 8015502:	b21b      	sxth	r3, r3
 8015504:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801550e:	b29c      	uxth	r4, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	88db      	ldrh	r3, [r3, #6]
 8015514:	b21b      	sxth	r3, r3
 8015516:	4618      	mov	r0, r3
 8015518:	f00b f868 	bl	80205ec <lv_trigo_sin>
 801551c:	4603      	mov	r3, r0
 801551e:	461a      	mov	r2, r3
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015526:	fb02 f303 	mul.w	r3, r2, r3
 801552a:	13db      	asrs	r3, r3, #15
 801552c:	b29b      	uxth	r3, r3
 801552e:	4423      	add	r3, r4
 8015530:	b29b      	uxth	r3, r3
 8015532:	b21b      	sxth	r3, r3
 8015534:	817b      	strh	r3, [r7, #10]

        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801553e:	b29c      	uxth	r4, r3
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	891b      	ldrh	r3, [r3, #8]
 8015544:	335a      	adds	r3, #90	; 0x5a
 8015546:	b29b      	uxth	r3, r3
 8015548:	b21b      	sxth	r3, r3
 801554a:	4618      	mov	r0, r3
 801554c:	f00b f84e 	bl	80205ec <lv_trigo_sin>
 8015550:	4603      	mov	r3, r0
 8015552:	461a      	mov	r2, r3
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801555a:	fb02 f303 	mul.w	r3, r2, r3
 801555e:	13db      	asrs	r3, r3, #15
 8015560:	b29b      	uxth	r3, r3
 8015562:	4423      	add	r3, r4
 8015564:	b29b      	uxth	r3, r3
 8015566:	b21b      	sxth	r3, r3
 8015568:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015572:	b29c      	uxth	r4, r3
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	891b      	ldrh	r3, [r3, #8]
 8015578:	b21b      	sxth	r3, r3
 801557a:	4618      	mov	r0, r3
 801557c:	f00b f836 	bl	80205ec <lv_trigo_sin>
 8015580:	4603      	mov	r3, r0
 8015582:	461a      	mov	r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801558a:	4619      	mov	r1, r3
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015592:	1acb      	subs	r3, r1, r3
 8015594:	fb02 f303 	mul.w	r3, r2, r3
 8015598:	13db      	asrs	r3, r3, #15
 801559a:	b29b      	uxth	r3, r3
 801559c:	4423      	add	r3, r4
 801559e:	b29b      	uxth	r3, r3
 80155a0:	b21b      	sxth	r3, r3
 80155a2:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80155a4:	f107 0108 	add.w	r1, r7, #8
 80155a8:	f107 0308 	add.w	r3, r7, #8
 80155ac:	697a      	ldr	r2, [r7, #20]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f009 fe16 	bl	801f1e0 <_lv_area_intersect>
 80155b4:	4603      	mov	r3, r0
 80155b6:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80155b8:	7cfb      	ldrb	r3, [r7, #19]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	f000 815a 	beq.w	8015874 <draw_quarter_3+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	699b      	ldr	r3, [r3, #24]
 80155c4:	f107 0208 	add.w	r2, r7, #8
 80155c8:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6998      	ldr	r0, [r3, #24]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6919      	ldr	r1, [r3, #16]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	695b      	ldr	r3, [r3, #20]
 80155d6:	461a      	mov	r2, r3
 80155d8:	f7fd faf2 	bl	8012bc0 <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80155dc:	e14a      	b.n	8015874 <draw_quarter_3+0x3de>
        }
    }
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	895b      	ldrh	r3, [r3, #10]
 80155e2:	2b03      	cmp	r3, #3
 80155e4:	d004      	beq.n	80155f0 <draw_quarter_3+0x15a>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	899b      	ldrh	r3, [r3, #12]
 80155ea:	2b03      	cmp	r3, #3
 80155ec:	f040 80d6 	bne.w	801579c <draw_quarter_3+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 3) {
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	895b      	ldrh	r3, [r3, #10]
 80155f4:	2b03      	cmp	r3, #3
 80155f6:	d167      	bne.n	80156c8 <draw_quarter_3+0x232>
            quarter_area.x2 = q->center->x + q->radius;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015600:	b29a      	uxth	r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015608:	b29b      	uxth	r3, r3
 801560a:	4413      	add	r3, r2
 801560c:	b29b      	uxth	r3, r3
 801560e:	b21b      	sxth	r3, r3
 8015610:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y - 1;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801561a:	b29b      	uxth	r3, r3
 801561c:	3b01      	subs	r3, #1
 801561e:	b29b      	uxth	r3, r3
 8015620:	b21b      	sxth	r3, r3
 8015622:	81fb      	strh	r3, [r7, #14]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	f9b3 3000 	ldrsh.w	r3, [r3]
 801562c:	b29c      	uxth	r4, r3
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	88db      	ldrh	r3, [r3, #6]
 8015632:	335a      	adds	r3, #90	; 0x5a
 8015634:	b29b      	uxth	r3, r3
 8015636:	b21b      	sxth	r3, r3
 8015638:	4618      	mov	r0, r3
 801563a:	f00a ffd7 	bl	80205ec <lv_trigo_sin>
 801563e:	4603      	mov	r3, r0
 8015640:	461a      	mov	r2, r3
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015648:	4619      	mov	r1, r3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015650:	1acb      	subs	r3, r1, r3
 8015652:	fb02 f303 	mul.w	r3, r2, r3
 8015656:	13db      	asrs	r3, r3, #15
 8015658:	b29b      	uxth	r3, r3
 801565a:	4423      	add	r3, r4
 801565c:	b29b      	uxth	r3, r3
 801565e:	b21b      	sxth	r3, r3
 8015660:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801566a:	b29c      	uxth	r4, r3
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	88db      	ldrh	r3, [r3, #6]
 8015670:	b21b      	sxth	r3, r3
 8015672:	4618      	mov	r0, r3
 8015674:	f00a ffba 	bl	80205ec <lv_trigo_sin>
 8015678:	4603      	mov	r3, r0
 801567a:	461a      	mov	r2, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015682:	fb02 f303 	mul.w	r3, r2, r3
 8015686:	13db      	asrs	r3, r3, #15
 8015688:	b29b      	uxth	r3, r3
 801568a:	4423      	add	r3, r4
 801568c:	b29b      	uxth	r3, r3
 801568e:	b21b      	sxth	r3, r3
 8015690:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015692:	f107 0108 	add.w	r1, r7, #8
 8015696:	f107 0308 	add.w	r3, r7, #8
 801569a:	697a      	ldr	r2, [r7, #20]
 801569c:	4618      	mov	r0, r3
 801569e:	f009 fd9f 	bl	801f1e0 <_lv_area_intersect>
 80156a2:	4603      	mov	r3, r0
 80156a4:	747b      	strb	r3, [r7, #17]
            if(ok) {
 80156a6:	7c7b      	ldrb	r3, [r7, #17]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d00d      	beq.n	80156c8 <draw_quarter_3+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	699b      	ldr	r3, [r3, #24]
 80156b0:	f107 0208 	add.w	r2, r7, #8
 80156b4:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6998      	ldr	r0, [r3, #24]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	6919      	ldr	r1, [r3, #16]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	695b      	ldr	r3, [r3, #20]
 80156c2:	461a      	mov	r2, r3
 80156c4:	f7fd fa7c 	bl	8012bc0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 3) {
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	899b      	ldrh	r3, [r3, #12]
 80156cc:	2b03      	cmp	r3, #3
 80156ce:	f040 80d3 	bne.w	8015878 <draw_quarter_3+0x3e2>
            quarter_area.x1 = q->center->x;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156da:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y - q->radius;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80156e4:	b29a      	uxth	r2, r3
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80156ec:	b29b      	uxth	r3, r3
 80156ee:	1ad3      	subs	r3, r2, r3
 80156f0:	b29b      	uxth	r3, r3
 80156f2:	b21b      	sxth	r3, r3
 80156f4:	817b      	strh	r3, [r7, #10]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156fe:	b29c      	uxth	r4, r3
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	891b      	ldrh	r3, [r3, #8]
 8015704:	335a      	adds	r3, #90	; 0x5a
 8015706:	b29b      	uxth	r3, r3
 8015708:	b21b      	sxth	r3, r3
 801570a:	4618      	mov	r0, r3
 801570c:	f00a ff6e 	bl	80205ec <lv_trigo_sin>
 8015710:	4603      	mov	r3, r0
 8015712:	461a      	mov	r2, r3
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801571a:	fb02 f303 	mul.w	r3, r2, r3
 801571e:	13db      	asrs	r3, r3, #15
 8015720:	b29b      	uxth	r3, r3
 8015722:	4423      	add	r3, r4
 8015724:	b29b      	uxth	r3, r3
 8015726:	b21b      	sxth	r3, r3
 8015728:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015732:	b29c      	uxth	r4, r3
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	891b      	ldrh	r3, [r3, #8]
 8015738:	b21b      	sxth	r3, r3
 801573a:	4618      	mov	r0, r3
 801573c:	f00a ff56 	bl	80205ec <lv_trigo_sin>
 8015740:	4603      	mov	r3, r0
 8015742:	461a      	mov	r2, r3
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801574a:	4619      	mov	r1, r3
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015752:	1acb      	subs	r3, r1, r3
 8015754:	fb02 f303 	mul.w	r3, r2, r3
 8015758:	13db      	asrs	r3, r3, #15
 801575a:	b29b      	uxth	r3, r3
 801575c:	4423      	add	r3, r4
 801575e:	b29b      	uxth	r3, r3
 8015760:	b21b      	sxth	r3, r3
 8015762:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8015764:	f107 0108 	add.w	r1, r7, #8
 8015768:	f107 0308 	add.w	r3, r7, #8
 801576c:	697a      	ldr	r2, [r7, #20]
 801576e:	4618      	mov	r0, r3
 8015770:	f009 fd36 	bl	801f1e0 <_lv_area_intersect>
 8015774:	4603      	mov	r3, r0
 8015776:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8015778:	7c3b      	ldrb	r3, [r7, #16]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d07c      	beq.n	8015878 <draw_quarter_3+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	699b      	ldr	r3, [r3, #24]
 8015782:	f107 0208 	add.w	r2, r7, #8
 8015786:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	6998      	ldr	r0, [r3, #24]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6919      	ldr	r1, [r3, #16]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	695b      	ldr	r3, [r3, #20]
 8015794:	461a      	mov	r2, r3
 8015796:	f7fd fa13 	bl	8012bc0 <lv_draw_rect>
        if(q->end_quarter == 3) {
 801579a:	e06d      	b.n	8015878 <draw_quarter_3+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	895a      	ldrh	r2, [r3, #10]
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	899b      	ldrh	r3, [r3, #12]
 80157a4:	429a      	cmp	r2, r3
 80157a6:	d109      	bne.n	80157bc <draw_quarter_3+0x326>
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	895b      	ldrh	r3, [r3, #10]
 80157ac:	2b03      	cmp	r3, #3
 80157ae:	d005      	beq.n	80157bc <draw_quarter_3+0x326>
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	891a      	ldrh	r2, [r3, #8]
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	88db      	ldrh	r3, [r3, #6]
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d317      	bcc.n	80157ec <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 80157c0:	2b02      	cmp	r3, #2
 80157c2:	d103      	bne.n	80157cc <draw_quarter_3+0x336>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	899b      	ldrh	r3, [r3, #12]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d00f      	beq.n	80157ec <draw_quarter_3+0x356>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 80157d0:	2b01      	cmp	r3, #1
 80157d2:	d103      	bne.n	80157dc <draw_quarter_3+0x346>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	899b      	ldrh	r3, [r3, #12]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d007      	beq.n	80157ec <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 80157e0:	2b02      	cmp	r3, #2
 80157e2:	d14a      	bne.n	801587a <draw_quarter_3+0x3e4>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	899b      	ldrh	r3, [r3, #12]
 80157e8:	2b01      	cmp	r3, #1
 80157ea:	d146      	bne.n	801587a <draw_quarter_3+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157f4:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80157fe:	b29a      	uxth	r2, r3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015806:	b29b      	uxth	r3, r3
 8015808:	1ad3      	subs	r3, r2, r3
 801580a:	b29b      	uxth	r3, r3
 801580c:	b21b      	sxth	r3, r3
 801580e:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015818:	b29a      	uxth	r2, r3
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015820:	b29b      	uxth	r3, r3
 8015822:	4413      	add	r3, r2
 8015824:	b29b      	uxth	r3, r3
 8015826:	b21b      	sxth	r3, r3
 8015828:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015832:	b29b      	uxth	r3, r3
 8015834:	3b01      	subs	r3, #1
 8015836:	b29b      	uxth	r3, r3
 8015838:	b21b      	sxth	r3, r3
 801583a:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801583c:	f107 0108 	add.w	r1, r7, #8
 8015840:	f107 0308 	add.w	r3, r7, #8
 8015844:	697a      	ldr	r2, [r7, #20]
 8015846:	4618      	mov	r0, r3
 8015848:	f009 fcca 	bl	801f1e0 <_lv_area_intersect>
 801584c:	4603      	mov	r3, r0
 801584e:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8015850:	7cbb      	ldrb	r3, [r7, #18]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d011      	beq.n	801587a <draw_quarter_3+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	699b      	ldr	r3, [r3, #24]
 801585a:	f107 0208 	add.w	r2, r7, #8
 801585e:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	6998      	ldr	r0, [r3, #24]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6919      	ldr	r1, [r3, #16]
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	695b      	ldr	r3, [r3, #20]
 801586c:	461a      	mov	r2, r3
 801586e:	f7fd f9a7 	bl	8012bc0 <lv_draw_rect>
 8015872:	e002      	b.n	801587a <draw_quarter_3+0x3e4>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8015874:	bf00      	nop
 8015876:	e000      	b.n	801587a <draw_quarter_3+0x3e4>
        if(q->end_quarter == 3) {
 8015878:	bf00      	nop
        }
    }

    q->draw_ctx->clip_area = clip_area_ori;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	699b      	ldr	r3, [r3, #24]
 801587e:	697a      	ldr	r2, [r7, #20]
 8015880:	609a      	str	r2, [r3, #8]
}
 8015882:	bf00      	nop
 8015884:	371c      	adds	r7, #28
 8015886:	46bd      	mov	sp, r7
 8015888:	bd90      	pop	{r4, r7, pc}

0801588a <get_rounded_area>:

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 801588a:	b590      	push	{r4, r7, lr}
 801588c:	b08b      	sub	sp, #44	; 0x2c
 801588e:	af00      	add	r7, sp, #0
 8015890:	607b      	str	r3, [r7, #4]
 8015892:	4603      	mov	r3, r0
 8015894:	81fb      	strh	r3, [r7, #14]
 8015896:	460b      	mov	r3, r1
 8015898:	81bb      	strh	r3, [r7, #12]
 801589a:	4613      	mov	r3, r2
 801589c:	72fb      	strb	r3, [r7, #11]
    const uint8_t ps = 8;
 801589e:	2308      	movs	r3, #8
 80158a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t pa = 127;
 80158a4:	237f      	movs	r3, #127	; 0x7f
 80158a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    int32_t thick_half = thickness / 2;
 80158aa:	7afb      	ldrb	r3, [r7, #11]
 80158ac:	085b      	lsrs	r3, r3, #1
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	623b      	str	r3, [r7, #32]
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 80158b2:	7afb      	ldrb	r3, [r7, #11]
 80158b4:	f003 0301 	and.w	r3, r3, #1
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	bf0c      	ite	eq
 80158bc:	2301      	moveq	r3, #1
 80158be:	2300      	movne	r3, #0
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	77fb      	strb	r3, [r7, #31]

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80158c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80158c8:	6a3b      	ldr	r3, [r7, #32]
 80158ca:	1ad4      	subs	r4, r2, r3
 80158cc:	89fb      	ldrh	r3, [r7, #14]
 80158ce:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	b21b      	sxth	r3, r3
 80158d6:	4618      	mov	r0, r3
 80158d8:	f00a fe88 	bl	80205ec <lv_trigo_sin>
 80158dc:	4603      	mov	r3, r0
 80158de:	fb03 f204 	mul.w	r2, r3, r4
 80158e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158e6:	f1c3 030f 	rsb	r3, r3, #15
 80158ea:	fa42 f303 	asr.w	r3, r2, r3
 80158ee:	61bb      	str	r3, [r7, #24]
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 80158f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80158f4:	6a3b      	ldr	r3, [r7, #32]
 80158f6:	1ad4      	subs	r4, r2, r3
 80158f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80158fc:	4618      	mov	r0, r3
 80158fe:	f00a fe75 	bl	80205ec <lv_trigo_sin>
 8015902:	4603      	mov	r3, r0
 8015904:	fb03 f204 	mul.w	r2, r3, r4
 8015908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801590c:	f1c3 030f 	rsb	r3, r3, #15
 8015910:	fa42 f303 	asr.w	r3, r2, r3
 8015914:	617b      	str	r3, [r7, #20]

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 8015916:	69bb      	ldr	r3, [r7, #24]
 8015918:	2b00      	cmp	r3, #0
 801591a:	dd1f      	ble.n	801595c <get_rounded_area+0xd2>
        cir_x = (cir_x - pa) >> ps;
 801591c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015920:	69ba      	ldr	r2, [r7, #24]
 8015922:	1ad2      	subs	r2, r2, r3
 8015924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015928:	fa42 f303 	asr.w	r3, r2, r3
 801592c:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half + thick_corr;
 801592e:	69bb      	ldr	r3, [r7, #24]
 8015930:	b29a      	uxth	r2, r3
 8015932:	6a3b      	ldr	r3, [r7, #32]
 8015934:	b29b      	uxth	r3, r3
 8015936:	1ad3      	subs	r3, r2, r3
 8015938:	b29a      	uxth	r2, r3
 801593a:	7ffb      	ldrb	r3, [r7, #31]
 801593c:	b29b      	uxth	r3, r3
 801593e:	4413      	add	r3, r2
 8015940:	b29b      	uxth	r3, r3
 8015942:	b21a      	sxth	r2, r3
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half;
 8015948:	69bb      	ldr	r3, [r7, #24]
 801594a:	b29a      	uxth	r2, r3
 801594c:	6a3b      	ldr	r3, [r7, #32]
 801594e:	b29b      	uxth	r3, r3
 8015950:	4413      	add	r3, r2
 8015952:	b29b      	uxth	r3, r3
 8015954:	b21a      	sxth	r2, r3
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	809a      	strh	r2, [r3, #4]
 801595a:	e01e      	b.n	801599a <get_rounded_area+0x110>
    }
    else {
        cir_x = (cir_x + pa) >> ps;
 801595c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015960:	69bb      	ldr	r3, [r7, #24]
 8015962:	441a      	add	r2, r3
 8015964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015968:	fa42 f303 	asr.w	r3, r2, r3
 801596c:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half;
 801596e:	69bb      	ldr	r3, [r7, #24]
 8015970:	b29a      	uxth	r2, r3
 8015972:	6a3b      	ldr	r3, [r7, #32]
 8015974:	b29b      	uxth	r3, r3
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	b29b      	uxth	r3, r3
 801597a:	b21a      	sxth	r2, r3
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 8015980:	69bb      	ldr	r3, [r7, #24]
 8015982:	b29a      	uxth	r2, r3
 8015984:	6a3b      	ldr	r3, [r7, #32]
 8015986:	b29b      	uxth	r3, r3
 8015988:	4413      	add	r3, r2
 801598a:	b29a      	uxth	r2, r3
 801598c:	7ffb      	ldrb	r3, [r7, #31]
 801598e:	b29b      	uxth	r3, r3
 8015990:	1ad3      	subs	r3, r2, r3
 8015992:	b29b      	uxth	r3, r3
 8015994:	b21a      	sxth	r2, r3
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	809a      	strh	r2, [r3, #4]
    }

    if(cir_y > 0) {
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	2b00      	cmp	r3, #0
 801599e:	dd1f      	ble.n	80159e0 <get_rounded_area+0x156>
        cir_y = (cir_y - pa) >> ps;
 80159a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159a4:	697a      	ldr	r2, [r7, #20]
 80159a6:	1ad2      	subs	r2, r2, r3
 80159a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ac:	fa42 f303 	asr.w	r3, r2, r3
 80159b0:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half + thick_corr;
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	b29a      	uxth	r2, r3
 80159b6:	6a3b      	ldr	r3, [r7, #32]
 80159b8:	b29b      	uxth	r3, r3
 80159ba:	1ad3      	subs	r3, r2, r3
 80159bc:	b29a      	uxth	r2, r3
 80159be:	7ffb      	ldrb	r3, [r7, #31]
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	4413      	add	r3, r2
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	b21a      	sxth	r2, r3
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half;
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	b29a      	uxth	r2, r3
 80159d0:	6a3b      	ldr	r3, [r7, #32]
 80159d2:	b29b      	uxth	r3, r3
 80159d4:	4413      	add	r3, r2
 80159d6:	b29b      	uxth	r3, r3
 80159d8:	b21a      	sxth	r2, r3
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	80da      	strh	r2, [r3, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 80159de:	e01e      	b.n	8015a1e <get_rounded_area+0x194>
        cir_y = (cir_y + pa) >> ps;
 80159e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80159e4:	697b      	ldr	r3, [r7, #20]
 80159e6:	441a      	add	r2, r3
 80159e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ec:	fa42 f303 	asr.w	r3, r2, r3
 80159f0:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half;
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	b29a      	uxth	r2, r3
 80159f6:	6a3b      	ldr	r3, [r7, #32]
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	1ad3      	subs	r3, r2, r3
 80159fc:	b29b      	uxth	r3, r3
 80159fe:	b21a      	sxth	r2, r3
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	b29a      	uxth	r2, r3
 8015a08:	6a3b      	ldr	r3, [r7, #32]
 8015a0a:	b29b      	uxth	r3, r3
 8015a0c:	4413      	add	r3, r2
 8015a0e:	b29a      	uxth	r2, r3
 8015a10:	7ffb      	ldrb	r3, [r7, #31]
 8015a12:	b29b      	uxth	r3, r3
 8015a14:	1ad3      	subs	r3, r2, r3
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	b21a      	sxth	r2, r3
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	80da      	strh	r2, [r3, #6]
}
 8015a1e:	bf00      	nop
 8015a20:	372c      	adds	r7, #44	; 0x2c
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd90      	pop	{r4, r7, pc}

08015a26 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8015a26:	b480      	push	{r7}
 8015a28:	b085      	sub	sp, #20
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	7138      	strb	r0, [r7, #4]
 8015a2e:	7039      	strb	r1, [r7, #0]
 8015a30:	4613      	mov	r3, r2
 8015a32:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 8015a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	da01      	bge.n	8015a40 <lv_color_mix+0x1a>
 8015a3c:	793b      	ldrb	r3, [r7, #4]
 8015a3e:	e000      	b.n	8015a42 <lv_color_mix+0x1c>
 8015a40:	783b      	ldrb	r3, [r7, #0]
 8015a42:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8015a44:	7b3b      	ldrb	r3, [r7, #12]
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3714      	adds	r7, #20
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr

08015a52 <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 8015a52:	b480      	push	{r7}
 8015a54:	b083      	sub	sp, #12
 8015a56:	af00      	add	r7, sp, #0
 8015a58:	7138      	strb	r0, [r7, #4]
 8015a5a:	460b      	mov	r3, r1
 8015a5c:	603a      	str	r2, [r7, #0]
 8015a5e:	71fb      	strb	r3, [r7, #7]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
#else
    (void) mix;
    /*Pre-multiplication can't be used with 1 bpp*/
    out[0] = LV_COLOR_GET_R(c);
 8015a60:	793b      	ldrb	r3, [r7, #4]
 8015a62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015a66:	b2db      	uxtb	r3, r3
 8015a68:	b29a      	uxth	r2, r3
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 8015a6e:	793b      	ldrb	r3, [r7, #4]
 8015a70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015a74:	b2da      	uxtb	r2, r3
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	3302      	adds	r3, #2
 8015a7a:	b292      	uxth	r2, r2
 8015a7c:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 8015a7e:	793b      	ldrb	r3, [r7, #4]
 8015a80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015a84:	b2da      	uxtb	r2, r3
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	3304      	adds	r3, #4
 8015a8a:	b292      	uxth	r2, r2
 8015a8c:	801a      	strh	r2, [r3, #0]
#endif

}
 8015a8e:	bf00      	nop
 8015a90:	370c      	adds	r7, #12
 8015a92:	46bd      	mov	sp, r7
 8015a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a98:	4770      	bx	lr

08015a9a <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 8015a9a:	b480      	push	{r7}
 8015a9c:	b085      	sub	sp, #20
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6078      	str	r0, [r7, #4]
 8015aa2:	7039      	strb	r1, [r7, #0]
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    /*Restore color1*/
    lv_color_t c1;
    LV_COLOR_SET_R(c1, premult_c1[0]);
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	881b      	ldrh	r3, [r3, #0]
 8015aac:	f003 0301 	and.w	r3, r3, #1
 8015ab0:	b2da      	uxtb	r2, r3
 8015ab2:	7a3b      	ldrb	r3, [r7, #8]
 8015ab4:	f362 0300 	bfi	r3, r2, #0, #1
 8015ab8:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	3302      	adds	r3, #2
 8015abe:	881b      	ldrh	r3, [r3, #0]
 8015ac0:	f003 0301 	and.w	r3, r3, #1
 8015ac4:	b2da      	uxtb	r2, r3
 8015ac6:	7a3b      	ldrb	r3, [r7, #8]
 8015ac8:	f362 0300 	bfi	r3, r2, #0, #1
 8015acc:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	3304      	adds	r3, #4
 8015ad2:	881b      	ldrh	r3, [r3, #0]
 8015ad4:	f003 0301 	and.w	r3, r3, #1
 8015ad8:	b2da      	uxtb	r2, r3
 8015ada:	7a3b      	ldrb	r3, [r7, #8]
 8015adc:	f362 0300 	bfi	r3, r2, #0, #1
 8015ae0:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8015ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	da01      	bge.n	8015aee <lv_color_mix_premult+0x54>
 8015aea:	783b      	ldrb	r3, [r7, #0]
 8015aec:	e000      	b.n	8015af0 <lv_color_mix_premult+0x56>
 8015aee:	7a3b      	ldrb	r3, [r7, #8]
 8015af0:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8015af2:	7b3b      	ldrb	r3, [r7, #12]
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3714      	adds	r7, #20
 8015af8:	46bd      	mov	sp, r7
 8015afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afe:	4770      	bx	lr

08015b00 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8015b00:	b480      	push	{r7}
 8015b02:	b083      	sub	sp, #12
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	4603      	mov	r3, r0
 8015b08:	71fb      	strb	r3, [r7, #7]
 8015b0a:	460b      	mov	r3, r1
 8015b0c:	71bb      	strb	r3, [r7, #6]
 8015b0e:	4613      	mov	r3, r2
 8015b10:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8015b12:	797b      	ldrb	r3, [r7, #5]
 8015b14:	09db      	lsrs	r3, r3, #7
 8015b16:	b2da      	uxtb	r2, r3
 8015b18:	79bb      	ldrb	r3, [r7, #6]
 8015b1a:	09db      	lsrs	r3, r3, #7
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	4313      	orrs	r3, r2
 8015b20:	b2da      	uxtb	r2, r3
 8015b22:	79fb      	ldrb	r3, [r7, #7]
 8015b24:	09db      	lsrs	r3, r3, #7
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	4313      	orrs	r3, r2
 8015b2a:	b2db      	uxtb	r3, r3
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	370c      	adds	r7, #12
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr

08015b38 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	2100      	movs	r1, #0
 8015b40:	2000      	movs	r0, #0
 8015b42:	f7ff ffdd 	bl	8015b00 <lv_color_make>
 8015b46:	4603      	mov	r3, r0
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <lv_area_get_width>:
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	b083      	sub	sp, #12
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b5a:	b29a      	uxth	r2, r3
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	1ad3      	subs	r3, r2, r3
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	3301      	adds	r3, #1
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	b21b      	sxth	r3, r3
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	370c      	adds	r7, #12
 8015b72:	46bd      	mov	sp, r7
 8015b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b78:	4770      	bx	lr

08015b7a <lv_area_get_height>:
{
 8015b7a:	b480      	push	{r7}
 8015b7c:	b083      	sub	sp, #12
 8015b7e:	af00      	add	r7, sp, #0
 8015b80:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015b88:	b29a      	uxth	r2, r3
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015b90:	b29b      	uxth	r3, r3
 8015b92:	1ad3      	subs	r3, r2, r3
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	3301      	adds	r3, #1
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	b21b      	sxth	r3, r3
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	370c      	adds	r7, #12
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr

08015ba8 <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
 8015bb0:	6039      	str	r1, [r7, #0]
    /*Do not draw transparent things*/
    if(dsc->opa <= LV_OPA_MIN) return;
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	7e1b      	ldrb	r3, [r3, #24]
 8015bb6:	2b02      	cmp	r3, #2
 8015bb8:	d91c      	bls.n	8015bf4 <lv_draw_sw_blend+0x4c>

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	6819      	ldr	r1, [r3, #0]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	689a      	ldr	r2, [r3, #8]
 8015bc2:	f107 0308 	add.w	r3, r7, #8
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f009 fb0a 	bl	801f1e0 <_lv_area_intersect>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	f083 0301 	eor.w	r3, r3, #1
 8015bd2:	b2db      	uxtb	r3, r3
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d10f      	bne.n	8015bf8 <lv_draw_sw_blend+0x50>

    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d003      	beq.n	8015be8 <lv_draw_sw_blend+0x40>
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	4798      	blx	r3

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bec:	6839      	ldr	r1, [r7, #0]
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	4798      	blx	r3
 8015bf2:	e002      	b.n	8015bfa <lv_draw_sw_blend+0x52>
    if(dsc->opa <= LV_OPA_MIN) return;
 8015bf4:	bf00      	nop
 8015bf6:	e000      	b.n	8015bfa <lv_draw_sw_blend+0x52>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8015bf8:	bf00      	nop
}
 8015bfa:	3710      	adds	r7, #16
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <lv_draw_sw_blend_basic>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8015c00:	b590      	push	{r4, r7, lr}
 8015c02:	b095      	sub	sp, #84	; 0x54
 8015c04:	af06      	add	r7, sp, #24
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
    lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	68db      	ldr	r3, [r3, #12]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d101      	bne.n	8015c16 <lv_draw_sw_blend_basic+0x16>
 8015c12:	2300      	movs	r3, #0
 8015c14:	637b      	str	r3, [r7, #52]	; 0x34
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8015c16:	683b      	ldr	r3, [r7, #0]
 8015c18:	68db      	ldr	r3, [r3, #12]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d004      	beq.n	8015c28 <lv_draw_sw_blend_basic+0x28>
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	7c1b      	ldrb	r3, [r3, #16]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	f000 8191 	beq.w	8015f4a <lv_draw_sw_blend_basic+0x34a>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	7c1b      	ldrb	r3, [r3, #16]
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d102      	bne.n	8015c36 <lv_draw_sw_blend_basic+0x36>
 8015c30:	2300      	movs	r3, #0
 8015c32:	637b      	str	r3, [r7, #52]	; 0x34
 8015c34:	e002      	b.n	8015c3c <lv_draw_sw_blend_basic+0x3c>
    else mask = dsc->mask_buf;
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	68db      	ldr	r3, [r3, #12]
 8015c3a:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	685b      	ldr	r3, [r3, #4]
 8015c40:	4618      	mov	r0, r3
 8015c42:	f7ff ff83 	bl	8015b4c <lv_area_get_width>
 8015c46:	4603      	mov	r3, r0
 8015c48:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	6819      	ldr	r1, [r3, #0]
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	689a      	ldr	r2, [r3, #8]
 8015c52:	f107 030c 	add.w	r3, r7, #12
 8015c56:	4618      	mov	r0, r3
 8015c58:	f009 fac2 	bl	801f1e0 <_lv_area_intersect>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	f083 0301 	eor.w	r3, r3, #1
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	f040 8172 	bne.w	8015f4e <lv_draw_sw_blend_basic+0x34e>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8015c6a:	f7f7 fac3 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8015c6e:	61f8      	str	r0, [r7, #28]
    lv_color_t * dest_buf = draw_ctx->buf;
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	633b      	str	r3, [r7, #48]	; 0x30
    if(disp->driver->set_px_cb == NULL) {
 8015c76:	69fb      	ldr	r3, [r7, #28]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	69db      	ldr	r3, [r3, #28]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d143      	bne.n	8015d08 <lv_draw_sw_blend_basic+0x108>
        if(disp->driver->screen_transp == 0) {
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	7c1b      	ldrb	r3, [r3, #16]
 8015c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c8a:	b2db      	uxtb	r3, r3
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d119      	bne.n	8015cc4 <lv_draw_sw_blend_basic+0xc4>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8015c90:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015c98:	4611      	mov	r1, r2
 8015c9a:	687a      	ldr	r2, [r7, #4]
 8015c9c:	6852      	ldr	r2, [r2, #4]
 8015c9e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015ca2:	1a8a      	subs	r2, r1, r2
 8015ca4:	fb03 f202 	mul.w	r2, r3, r2
 8015ca8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015cac:	4619      	mov	r1, r3
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cb6:	1acb      	subs	r3, r1, r3
 8015cb8:	4413      	add	r3, r2
 8015cba:	461a      	mov	r2, r3
 8015cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cbe:	4413      	add	r3, r2
 8015cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8015cc2:	e021      	b.n	8015d08 <lv_draw_sw_blend_basic+0x108>
        }
        else {
            /*With LV_COLOR_DEPTH 16 it means ARGB8565 (3 bytes format)*/
            uint8_t * dest_buf8 = (uint8_t *) dest_buf;
 8015cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc6:	61bb      	str	r3, [r7, #24]
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8015cc8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015ccc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015cd0:	4611      	mov	r1, r2
 8015cd2:	687a      	ldr	r2, [r7, #4]
 8015cd4:	6852      	ldr	r2, [r2, #4]
 8015cd6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015cda:	1a8a      	subs	r2, r1, r2
 8015cdc:	fb02 f303 	mul.w	r3, r2, r3
 8015ce0:	005b      	lsls	r3, r3, #1
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	69bb      	ldr	r3, [r7, #24]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	61bb      	str	r3, [r7, #24]
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8015cea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015cee:	461a      	mov	r2, r3
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	685b      	ldr	r3, [r3, #4]
 8015cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cf8:	1ad3      	subs	r3, r2, r3
 8015cfa:	005b      	lsls	r3, r3, #1
 8015cfc:	461a      	mov	r2, r3
 8015cfe:	69bb      	ldr	r3, [r7, #24]
 8015d00:	4413      	add	r3, r2
 8015d02:	61bb      	str	r3, [r7, #24]
            dest_buf = (lv_color_t *)dest_buf8;
 8015d04:	69bb      	ldr	r3, [r7, #24]
 8015d06:	633b      	str	r3, [r7, #48]	; 0x30
        }
    }

    const lv_color_t * src_buf = dsc->src_buf;
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	685b      	ldr	r3, [r3, #4]
 8015d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t src_stride;
    if(src_buf) {
 8015d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d020      	beq.n	8015d56 <lv_draw_sw_blend_basic+0x156>
        src_stride = lv_area_get_width(dsc->blend_area);
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7ff ff17 	bl	8015b4c <lv_area_get_width>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	857b      	strh	r3, [r7, #42]	; 0x2a
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 8015d22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015d26:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015d2a:	4611      	mov	r1, r2
 8015d2c:	683a      	ldr	r2, [r7, #0]
 8015d2e:	6812      	ldr	r2, [r2, #0]
 8015d30:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015d34:	1a8a      	subs	r2, r1, r2
 8015d36:	fb03 f202 	mul.w	r2, r3, r2
 8015d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015d3e:	4619      	mov	r1, r3
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d48:	1acb      	subs	r3, r1, r3
 8015d4a:	4413      	add	r3, r2
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d50:	4413      	add	r3, r2
 8015d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d54:	e001      	b.n	8015d5a <lv_draw_sw_blend_basic+0x15a>
    }
    else {
        src_stride = 0;
 8015d56:	2300      	movs	r3, #0
 8015d58:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    lv_coord_t mask_stride;
    if(mask) {
 8015d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d047      	beq.n	8015df0 <lv_draw_sw_blend_basic+0x1f0>
        /*Round the values in the mask if anti-aliasing is disabled*/
        if(disp->driver->antialiasing == 0) {
 8015d60:	69fb      	ldr	r3, [r7, #28]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	7c1b      	ldrb	r3, [r3, #16]
 8015d66:	f003 0308 	and.w	r3, r3, #8
 8015d6a:	b2db      	uxtb	r3, r3
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d11e      	bne.n	8015dae <lv_draw_sw_blend_basic+0x1ae>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	695b      	ldr	r3, [r3, #20]
 8015d74:	4618      	mov	r0, r3
 8015d76:	f009 f9a6 	bl	801f0c6 <lv_area_get_size>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	617b      	str	r3, [r7, #20]
            int32_t i;
            for(i = 0; i < mask_size; i++) {
 8015d7e:	2300      	movs	r3, #0
 8015d80:	627b      	str	r3, [r7, #36]	; 0x24
 8015d82:	e010      	b.n	8015da6 <lv_draw_sw_blend_basic+0x1a6>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8015d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d88:	4413      	add	r3, r2
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	2b80      	cmp	r3, #128	; 0x80
 8015d8e:	d901      	bls.n	8015d94 <lv_draw_sw_blend_basic+0x194>
 8015d90:	21ff      	movs	r1, #255	; 0xff
 8015d92:	e000      	b.n	8015d96 <lv_draw_sw_blend_basic+0x196>
 8015d94:	2100      	movs	r1, #0
 8015d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d9a:	4413      	add	r3, r2
 8015d9c:	460a      	mov	r2, r1
 8015d9e:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 8015da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da2:	3301      	adds	r3, #1
 8015da4:	627b      	str	r3, [r7, #36]	; 0x24
 8015da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	429a      	cmp	r2, r3
 8015dac:	dbea      	blt.n	8015d84 <lv_draw_sw_blend_basic+0x184>
            }
        }

        mask_stride = lv_area_get_width(dsc->mask_area);
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	695b      	ldr	r3, [r3, #20]
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7ff feca 	bl	8015b4c <lv_area_get_width>
 8015db8:	4603      	mov	r3, r0
 8015dba:	853b      	strh	r3, [r7, #40]	; 0x28
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 8015dbc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8015dc0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015dc4:	4611      	mov	r1, r2
 8015dc6:	683a      	ldr	r2, [r7, #0]
 8015dc8:	6952      	ldr	r2, [r2, #20]
 8015dca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8015dce:	1a8a      	subs	r2, r1, r2
 8015dd0:	fb03 f202 	mul.w	r2, r3, r2
 8015dd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015dd8:	4619      	mov	r1, r3
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	695b      	ldr	r3, [r3, #20]
 8015dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015de2:	1acb      	subs	r3, r1, r3
 8015de4:	4413      	add	r3, r2
 8015de6:	461a      	mov	r2, r3
 8015de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dea:	4413      	add	r3, r2
 8015dec:	637b      	str	r3, [r7, #52]	; 0x34
 8015dee:	e001      	b.n	8015df4 <lv_draw_sw_blend_basic+0x1f4>

    }
    else {
        mask_stride = 0;
 8015df0:	2300      	movs	r3, #0
 8015df2:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	425b      	negs	r3, r3
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	b219      	sxth	r1, r3
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	425b      	negs	r3, r3
 8015e10:	b29b      	uxth	r3, r3
 8015e12:	b21a      	sxth	r2, r3
 8015e14:	f107 030c 	add.w	r3, r7, #12
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f009 f9ab 	bl	801f174 <lv_area_move>


    if(disp->driver->set_px_cb) {
 8015e1e:	69fb      	ldr	r3, [r7, #28]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	69db      	ldr	r3, [r3, #28]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d02c      	beq.n	8015e82 <lv_draw_sw_blend_basic+0x282>
        if(dsc->src_buf == NULL) {
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d113      	bne.n	8015e58 <lv_draw_sw_blend_basic+0x258>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	7e1a      	ldrb	r2, [r3, #24]
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 8015e3a:	f107 000c 	add.w	r0, r7, #12
 8015e3e:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8015e42:	9102      	str	r1, [sp, #8]
 8015e44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015e46:	9101      	str	r1, [sp, #4]
 8015e48:	9200      	str	r2, [sp, #0]
 8015e4a:	7a1b      	ldrb	r3, [r3, #8]
 8015e4c:	4622      	mov	r2, r4
 8015e4e:	4601      	mov	r1, r0
 8015e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e52:	f000 f880 	bl	8015f56 <fill_set_px>
 8015e56:	e07b      	b.n	8015f50 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	7e1b      	ldrb	r3, [r3, #24]
 8015e5c:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8015e60:	f107 010c 	add.w	r1, r7, #12
 8015e64:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8015e68:	9203      	str	r2, [sp, #12]
 8015e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e6c:	9202      	str	r2, [sp, #8]
 8015e6e:	9301      	str	r3, [sp, #4]
 8015e70:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015e74:	9300      	str	r3, [sp, #0]
 8015e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e78:	4602      	mov	r2, r0
 8015e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e7c:	f000 fc02 	bl	8016684 <map_set_px>
 8015e80:	e066      	b.n	8015f50 <lv_draw_sw_blend_basic+0x350>
        else {
            map_argb(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
        }
    }
#endif
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	7e5b      	ldrb	r3, [r3, #25]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d12c      	bne.n	8015ee4 <lv_draw_sw_blend_basic+0x2e4>
        if(dsc->src_buf == NULL) {
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d113      	bne.n	8015eba <lv_draw_sw_blend_basic+0x2ba>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	7e1a      	ldrb	r2, [r3, #24]
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 8015e9c:	f107 000c 	add.w	r0, r7, #12
 8015ea0:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8015ea4:	9102      	str	r1, [sp, #8]
 8015ea6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015ea8:	9101      	str	r1, [sp, #4]
 8015eaa:	9200      	str	r2, [sp, #0]
 8015eac:	7a1b      	ldrb	r3, [r3, #8]
 8015eae:	4622      	mov	r2, r4
 8015eb0:	4601      	mov	r1, r0
 8015eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015eb4:	f000 f8ec 	bl	8016090 <fill_normal>
 8015eb8:	e04a      	b.n	8015f50 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	7e1b      	ldrb	r3, [r3, #24]
 8015ebe:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8015ec2:	f107 010c 	add.w	r1, r7, #12
 8015ec6:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8015eca:	9203      	str	r2, [sp, #12]
 8015ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015ece:	9202      	str	r2, [sp, #8]
 8015ed0:	9301      	str	r3, [sp, #4]
 8015ed2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015ed6:	9300      	str	r3, [sp, #0]
 8015ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eda:	4602      	mov	r2, r0
 8015edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ede:	f000 fc83 	bl	80167e8 <map_normal>
 8015ee2:	e035      	b.n	8015f50 <lv_draw_sw_blend_basic+0x350>
        }
    }
    else {
#if LV_DRAW_COMPLEX
        if(dsc->src_buf == NULL) {
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	685b      	ldr	r3, [r3, #4]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d116      	bne.n	8015f1a <lv_draw_sw_blend_basic+0x31a>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	7e1a      	ldrb	r2, [r3, #24]
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	7e59      	ldrb	r1, [r3, #25]
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 8015efa:	f107 000c 	add.w	r0, r7, #12
 8015efe:	9103      	str	r1, [sp, #12]
 8015f00:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8015f04:	9102      	str	r1, [sp, #8]
 8015f06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f08:	9101      	str	r1, [sp, #4]
 8015f0a:	9200      	str	r2, [sp, #0]
 8015f0c:	7a1b      	ldrb	r3, [r3, #8]
 8015f0e:	4622      	mov	r2, r4
 8015f10:	4601      	mov	r1, r0
 8015f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f14:	f000 fabc 	bl	8016490 <fill_blended>
 8015f18:	e01a      	b.n	8015f50 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	7e1b      	ldrb	r3, [r3, #24]
 8015f1e:	683a      	ldr	r2, [r7, #0]
 8015f20:	7e52      	ldrb	r2, [r2, #25]
 8015f22:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8015f26:	f107 010c 	add.w	r1, r7, #12
 8015f2a:	9204      	str	r2, [sp, #16]
 8015f2c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8015f30:	9203      	str	r2, [sp, #12]
 8015f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f34:	9202      	str	r2, [sp, #8]
 8015f36:	9301      	str	r3, [sp, #4]
 8015f38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f40:	4602      	mov	r2, r0
 8015f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f44:	f000 fe78 	bl	8016c38 <map_blended>
 8015f48:	e002      	b.n	8015f50 <lv_draw_sw_blend_basic+0x350>
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8015f4a:	bf00      	nop
 8015f4c:	e000      	b.n	8015f50 <lv_draw_sw_blend_basic+0x350>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8015f4e:	bf00      	nop
        }
#endif
    }
}
 8015f50:	373c      	adds	r7, #60	; 0x3c
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd90      	pop	{r4, r7, pc}

08015f56 <fill_set_px>:
 *   STATIC FUNCTIONS
 **********************/

static void fill_set_px(lv_color_t * dest_buf, const lv_area_t * blend_area, lv_coord_t dest_stride,
                        lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stide)
{
 8015f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f58:	b08f      	sub	sp, #60	; 0x3c
 8015f5a:	af04      	add	r7, sp, #16
 8015f5c:	60f8      	str	r0, [r7, #12]
 8015f5e:	60b9      	str	r1, [r7, #8]
 8015f60:	713b      	strb	r3, [r7, #4]
 8015f62:	4613      	mov	r3, r2
 8015f64:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8015f66:	f7f7 f945 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8015f6a:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8015f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d134      	bne.n	8015fdc <fill_set_px+0x86>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8015f72:	68bb      	ldr	r3, [r7, #8]
 8015f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f78:	623b      	str	r3, [r7, #32]
 8015f7a:	e027      	b.n	8015fcc <fill_set_px+0x76>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f82:	627b      	str	r3, [r7, #36]	; 0x24
 8015f84:	e018      	b.n	8015fb8 <fill_set_px+0x62>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 8015f86:	69fb      	ldr	r3, [r7, #28]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	69dc      	ldr	r4, [r3, #28]
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	6818      	ldr	r0, [r3, #0]
 8015f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f92:	b21d      	sxth	r5, r3
 8015f94:	6a3b      	ldr	r3, [r7, #32]
 8015f96:	b21b      	sxth	r3, r3
 8015f98:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015f9c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8015fa0:	9202      	str	r2, [sp, #8]
 8015fa2:	793a      	ldrb	r2, [r7, #4]
 8015fa4:	f88d 2004 	strb.w	r2, [sp, #4]
 8015fa8:	9300      	str	r3, [sp, #0]
 8015faa:	462b      	mov	r3, r5
 8015fac:	460a      	mov	r2, r1
 8015fae:	68f9      	ldr	r1, [r7, #12]
 8015fb0:	47a0      	blx	r4
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8015fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb4:	3301      	adds	r3, #1
 8015fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015fbe:	461a      	mov	r2, r3
 8015fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc2:	4293      	cmp	r3, r2
 8015fc4:	dddf      	ble.n	8015f86 <fill_set_px+0x30>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8015fc6:	6a3b      	ldr	r3, [r7, #32]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	623b      	str	r3, [r7, #32]
 8015fcc:	68bb      	ldr	r3, [r7, #8]
 8015fce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015fd2:	461a      	mov	r2, r3
 8015fd4:	6a3b      	ldr	r3, [r7, #32]
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	ddd0      	ble.n	8015f7c <fill_set_px+0x26>
                }
            }
            mask += mask_stide;
        }
    }
}
 8015fda:	e055      	b.n	8016088 <fill_set_px+0x132>
        int32_t w = lv_area_get_width(blend_area);
 8015fdc:	68b8      	ldr	r0, [r7, #8]
 8015fde:	f7ff fdb5 	bl	8015b4c <lv_area_get_width>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	61bb      	str	r3, [r7, #24]
        int32_t h = lv_area_get_height(blend_area);
 8015fe6:	68b8      	ldr	r0, [r7, #8]
 8015fe8:	f7ff fdc7 	bl	8015b7a <lv_area_get_height>
 8015fec:	4603      	mov	r3, r0
 8015fee:	617b      	str	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	623b      	str	r3, [r7, #32]
 8015ff4:	e044      	b.n	8016080 <fill_set_px+0x12a>
            for(x = 0; x < w; x++) {
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8015ffa:	e035      	b.n	8016068 <fill_set_px+0x112>
                if(mask[x]) {
 8015ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016000:	4413      	add	r3, r2
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d02c      	beq.n	8016062 <fill_set_px+0x10c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8016008:	69fb      	ldr	r3, [r7, #28]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	69dc      	ldr	r4, [r3, #28]
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	681d      	ldr	r5, [r3, #0]
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016018:	b29a      	uxth	r2, r3
 801601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601c:	b29b      	uxth	r3, r3
 801601e:	4413      	add	r3, r2
 8016020:	b29b      	uxth	r3, r3
 8016022:	b21e      	sxth	r6, r3
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801602a:	b29a      	uxth	r2, r3
 801602c:	6a3b      	ldr	r3, [r7, #32]
 801602e:	b29b      	uxth	r3, r3
 8016030:	4413      	add	r3, r2
 8016032:	b29b      	uxth	r3, r3
 8016034:	b21b      	sxth	r3, r3
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8016036:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801603a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801603c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801603e:	4401      	add	r1, r0
 8016040:	7809      	ldrb	r1, [r1, #0]
 8016042:	fb01 f202 	mul.w	r2, r1, r2
 8016046:	0a12      	lsrs	r2, r2, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8016048:	b2d2      	uxtb	r2, r2
 801604a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801604e:	9202      	str	r2, [sp, #8]
 8016050:	793a      	ldrb	r2, [r7, #4]
 8016052:	f88d 2004 	strb.w	r2, [sp, #4]
 8016056:	9300      	str	r3, [sp, #0]
 8016058:	4633      	mov	r3, r6
 801605a:	460a      	mov	r2, r1
 801605c:	68f9      	ldr	r1, [r7, #12]
 801605e:	4628      	mov	r0, r5
 8016060:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8016062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016064:	3301      	adds	r3, #1
 8016066:	627b      	str	r3, [r7, #36]	; 0x24
 8016068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801606a:	69bb      	ldr	r3, [r7, #24]
 801606c:	429a      	cmp	r2, r3
 801606e:	dbc5      	blt.n	8015ffc <fill_set_px+0xa6>
            mask += mask_stide;
 8016070:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8016074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016076:	4413      	add	r3, r2
 8016078:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 801607a:	6a3b      	ldr	r3, [r7, #32]
 801607c:	3301      	adds	r3, #1
 801607e:	623b      	str	r3, [r7, #32]
 8016080:	6a3a      	ldr	r2, [r7, #32]
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	429a      	cmp	r2, r3
 8016086:	dbb6      	blt.n	8015ff6 <fill_set_px+0xa0>
}
 8016088:	bf00      	nop
 801608a:	372c      	adds	r7, #44	; 0x2c
 801608c:	46bd      	mov	sp, r7
 801608e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016090 <fill_normal>:

LV_ATTRIBUTE_FAST_MEM static void fill_normal(lv_color_t * dest_buf, const lv_area_t * dest_area,
                                              lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b092      	sub	sp, #72	; 0x48
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	713b      	strb	r3, [r7, #4]
 801609c:	4613      	mov	r3, r2
 801609e:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 80160a0:	68b8      	ldr	r0, [r7, #8]
 80160a2:	f7ff fd53 	bl	8015b4c <lv_area_get_width>
 80160a6:	4603      	mov	r3, r0
 80160a8:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h = lv_area_get_height(dest_area);
 80160aa:	68b8      	ldr	r0, [r7, #8]
 80160ac:	f7ff fd65 	bl	8015b7a <lv_area_get_height>
 80160b0:	4603      	mov	r3, r0
 80160b2:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t x;
    int32_t y;

    /*No mask*/
    if(mask == NULL) {
 80160b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d171      	bne.n	801619e <fill_normal+0x10e>
        if(opa >= LV_OPA_MAX) {
 80160ba:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80160be:	2bfc      	cmp	r3, #252	; 0xfc
 80160c0:	d915      	bls.n	80160ee <fill_normal+0x5e>
            for(y = 0; y < h; y++) {
 80160c2:	2300      	movs	r3, #0
 80160c4:	643b      	str	r3, [r7, #64]	; 0x40
 80160c6:	e00d      	b.n	80160e4 <fill_normal+0x54>
                lv_color_fill(dest_buf, color, w);
 80160c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ca:	461a      	mov	r2, r3
 80160cc:	7939      	ldrb	r1, [r7, #4]
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	f009 fd52 	bl	801fb78 <lv_color_fill>
                dest_buf += dest_stride;
 80160d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	4413      	add	r3, r2
 80160dc:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 80160de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160e0:	3301      	adds	r3, #1
 80160e2:	643b      	str	r3, [r7, #64]	; 0x40
 80160e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80160e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160e8:	429a      	cmp	r2, r3
 80160ea:	dbed      	blt.n	80160c8 <fill_normal+0x38>
                dest_buf += dest_stride;
                mask += (mask_stride - w);
            }
        }
    }
}
 80160ec:	e1cc      	b.n	8016488 <fill_normal+0x3f8>
            lv_color_t last_dest_color = lv_color_black();
 80160ee:	f7ff fd23 	bl	8015b38 <lv_color_black>
 80160f2:	4603      	mov	r3, r0
 80160f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 80160f8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80160fc:	461a      	mov	r2, r3
 80160fe:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8016102:	7938      	ldrb	r0, [r7, #4]
 8016104:	f7ff fc8f 	bl	8015a26 <lv_color_mix>
 8016108:	4603      	mov	r3, r0
 801610a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            lv_color_premult(color, opa, color_premult);
 801610e:	f107 021c 	add.w	r2, r7, #28
 8016112:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8016116:	4619      	mov	r1, r3
 8016118:	7938      	ldrb	r0, [r7, #4]
 801611a:	f7ff fc9a 	bl	8015a52 <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 801611e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8016122:	43db      	mvns	r3, r3
 8016124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            for(y = 0; y < h; y++) {
 8016128:	2300      	movs	r3, #0
 801612a:	643b      	str	r3, [r7, #64]	; 0x40
 801612c:	e032      	b.n	8016194 <fill_normal+0x104>
                for(x = 0; x < w; x++) {
 801612e:	2300      	movs	r3, #0
 8016130:	647b      	str	r3, [r7, #68]	; 0x44
 8016132:	e023      	b.n	801617c <fill_normal+0xec>
                    if(last_dest_color.full != dest_buf[x].full) {
 8016134:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801613a:	68f9      	ldr	r1, [r7, #12]
 801613c:	440b      	add	r3, r1
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	429a      	cmp	r2, r3
 8016142:	d012      	beq.n	801616a <fill_normal+0xda>
                        last_dest_color = dest_buf[x];
 8016144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016146:	68fa      	ldr	r2, [r7, #12]
 8016148:	4413      	add	r3, r2
 801614a:	781b      	ldrb	r3, [r3, #0]
 801614c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        last_res_color = lv_color_mix_premult(color_premult, dest_buf[x], opa_inv);
 8016150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016152:	68fa      	ldr	r2, [r7, #12]
 8016154:	4413      	add	r3, r2
 8016156:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801615a:	f107 001c 	add.w	r0, r7, #28
 801615e:	7819      	ldrb	r1, [r3, #0]
 8016160:	f7ff fc9b 	bl	8015a9a <lv_color_mix_premult>
 8016164:	4603      	mov	r3, r0
 8016166:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    dest_buf[x] = last_res_color;
 801616a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801616c:	68fa      	ldr	r2, [r7, #12]
 801616e:	4413      	add	r3, r2
 8016170:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8016174:	701a      	strb	r2, [r3, #0]
                for(x = 0; x < w; x++) {
 8016176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016178:	3301      	adds	r3, #1
 801617a:	647b      	str	r3, [r7, #68]	; 0x44
 801617c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016180:	429a      	cmp	r2, r3
 8016182:	dbd7      	blt.n	8016134 <fill_normal+0xa4>
                dest_buf += dest_stride;
 8016184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016188:	68fa      	ldr	r2, [r7, #12]
 801618a:	4413      	add	r3, r2
 801618c:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 801618e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016190:	3301      	adds	r3, #1
 8016192:	643b      	str	r3, [r7, #64]	; 0x40
 8016194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016198:	429a      	cmp	r2, r3
 801619a:	dbc8      	blt.n	801612e <fill_normal+0x9e>
}
 801619c:	e174      	b.n	8016488 <fill_normal+0x3f8>
        if(opa >= LV_OPA_MAX) {
 801619e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80161a2:	2bfc      	cmp	r3, #252	; 0xfc
 80161a4:	f240 80f7 	bls.w	8016396 <fill_normal+0x306>
            int32_t x_end4 = w - 4;
 80161a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161aa:	3b04      	subs	r3, #4
 80161ac:	633b      	str	r3, [r7, #48]	; 0x30
            for(y = 0; y < h; y++) {
 80161ae:	2300      	movs	r3, #0
 80161b0:	643b      	str	r3, [r7, #64]	; 0x40
 80161b2:	e0ea      	b.n	801638a <fill_normal+0x2fa>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80161b4:	2300      	movs	r3, #0
 80161b6:	647b      	str	r3, [r7, #68]	; 0x44
 80161b8:	e01a      	b.n	80161f0 <fill_normal+0x160>
                    FILL_NORMAL_MASK_PX(color)
 80161ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	2bff      	cmp	r3, #255	; 0xff
 80161c0:	d103      	bne.n	80161ca <fill_normal+0x13a>
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	793a      	ldrb	r2, [r7, #4]
 80161c6:	701a      	strb	r2, [r3, #0]
 80161c8:	e009      	b.n	80161de <fill_normal+0x14e>
 80161ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161cc:	781a      	ldrb	r2, [r3, #0]
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	7819      	ldrb	r1, [r3, #0]
 80161d2:	7938      	ldrb	r0, [r7, #4]
 80161d4:	f7ff fc27 	bl	8015a26 <lv_color_mix>
 80161d8:	4602      	mov	r2, r0
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	701a      	strb	r2, [r3, #0]
 80161de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161e0:	3301      	adds	r3, #1
 80161e2:	657b      	str	r3, [r7, #84]	; 0x54
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	3301      	adds	r3, #1
 80161e8:	60fb      	str	r3, [r7, #12]
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80161ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161ec:	3301      	adds	r3, #1
 80161ee:	647b      	str	r3, [r7, #68]	; 0x44
 80161f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80161f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f4:	429a      	cmp	r2, r3
 80161f6:	f280 8090 	bge.w	801631a <fill_normal+0x28a>
 80161fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161fc:	f003 0303 	and.w	r3, r3, #3
 8016200:	2b00      	cmp	r3, #0
 8016202:	d1da      	bne.n	80161ba <fill_normal+0x12a>
                for(; x <= x_end4; x += 4) {
 8016204:	e089      	b.n	801631a <fill_normal+0x28a>
                    uint32_t mask32 = *((uint32_t *)mask);
 8016206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if(mask32 == 0xFFFFFFFF) {
 801620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016212:	d115      	bne.n	8016240 <fill_normal+0x1b0>
                        dest_buf[0] = color;
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	793a      	ldrb	r2, [r7, #4]
 8016218:	701a      	strb	r2, [r3, #0]
                        dest_buf[1] = color;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	3301      	adds	r3, #1
 801621e:	793a      	ldrb	r2, [r7, #4]
 8016220:	701a      	strb	r2, [r3, #0]
                        dest_buf[2] = color;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	3302      	adds	r3, #2
 8016226:	793a      	ldrb	r2, [r7, #4]
 8016228:	701a      	strb	r2, [r3, #0]
                        dest_buf[3] = color;
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	3303      	adds	r3, #3
 801622e:	793a      	ldrb	r2, [r7, #4]
 8016230:	701a      	strb	r2, [r3, #0]
                        dest_buf += 4;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	3304      	adds	r3, #4
 8016236:	60fb      	str	r3, [r7, #12]
                        mask += 4;
 8016238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801623a:	3304      	adds	r3, #4
 801623c:	657b      	str	r3, [r7, #84]	; 0x54
 801623e:	e069      	b.n	8016314 <fill_normal+0x284>
                    else if(mask32) {
 8016240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016242:	2b00      	cmp	r3, #0
 8016244:	d060      	beq.n	8016308 <fill_normal+0x278>
                        FILL_NORMAL_MASK_PX(color)
 8016246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	2bff      	cmp	r3, #255	; 0xff
 801624c:	d103      	bne.n	8016256 <fill_normal+0x1c6>
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	793a      	ldrb	r2, [r7, #4]
 8016252:	701a      	strb	r2, [r3, #0]
 8016254:	e009      	b.n	801626a <fill_normal+0x1da>
 8016256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016258:	781a      	ldrb	r2, [r3, #0]
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	7819      	ldrb	r1, [r3, #0]
 801625e:	7938      	ldrb	r0, [r7, #4]
 8016260:	f7ff fbe1 	bl	8015a26 <lv_color_mix>
 8016264:	4602      	mov	r2, r0
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	701a      	strb	r2, [r3, #0]
 801626a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801626c:	3301      	adds	r3, #1
 801626e:	657b      	str	r3, [r7, #84]	; 0x54
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	3301      	adds	r3, #1
 8016274:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8016276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	2bff      	cmp	r3, #255	; 0xff
 801627c:	d103      	bne.n	8016286 <fill_normal+0x1f6>
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	793a      	ldrb	r2, [r7, #4]
 8016282:	701a      	strb	r2, [r3, #0]
 8016284:	e009      	b.n	801629a <fill_normal+0x20a>
 8016286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016288:	781a      	ldrb	r2, [r3, #0]
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	7819      	ldrb	r1, [r3, #0]
 801628e:	7938      	ldrb	r0, [r7, #4]
 8016290:	f7ff fbc9 	bl	8015a26 <lv_color_mix>
 8016294:	4602      	mov	r2, r0
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	701a      	strb	r2, [r3, #0]
 801629a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801629c:	3301      	adds	r3, #1
 801629e:	657b      	str	r3, [r7, #84]	; 0x54
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	3301      	adds	r3, #1
 80162a4:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 80162a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162a8:	781b      	ldrb	r3, [r3, #0]
 80162aa:	2bff      	cmp	r3, #255	; 0xff
 80162ac:	d103      	bne.n	80162b6 <fill_normal+0x226>
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	793a      	ldrb	r2, [r7, #4]
 80162b2:	701a      	strb	r2, [r3, #0]
 80162b4:	e009      	b.n	80162ca <fill_normal+0x23a>
 80162b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162b8:	781a      	ldrb	r2, [r3, #0]
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	7819      	ldrb	r1, [r3, #0]
 80162be:	7938      	ldrb	r0, [r7, #4]
 80162c0:	f7ff fbb1 	bl	8015a26 <lv_color_mix>
 80162c4:	4602      	mov	r2, r0
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	701a      	strb	r2, [r3, #0]
 80162ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162cc:	3301      	adds	r3, #1
 80162ce:	657b      	str	r3, [r7, #84]	; 0x54
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	3301      	adds	r3, #1
 80162d4:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 80162d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162d8:	781b      	ldrb	r3, [r3, #0]
 80162da:	2bff      	cmp	r3, #255	; 0xff
 80162dc:	d103      	bne.n	80162e6 <fill_normal+0x256>
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	793a      	ldrb	r2, [r7, #4]
 80162e2:	701a      	strb	r2, [r3, #0]
 80162e4:	e009      	b.n	80162fa <fill_normal+0x26a>
 80162e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162e8:	781a      	ldrb	r2, [r3, #0]
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	7819      	ldrb	r1, [r3, #0]
 80162ee:	7938      	ldrb	r0, [r7, #4]
 80162f0:	f7ff fb99 	bl	8015a26 <lv_color_mix>
 80162f4:	4602      	mov	r2, r0
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	701a      	strb	r2, [r3, #0]
 80162fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162fc:	3301      	adds	r3, #1
 80162fe:	657b      	str	r3, [r7, #84]	; 0x54
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	3301      	adds	r3, #1
 8016304:	60fb      	str	r3, [r7, #12]
 8016306:	e005      	b.n	8016314 <fill_normal+0x284>
                        mask += 4;
 8016308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801630a:	3304      	adds	r3, #4
 801630c:	657b      	str	r3, [r7, #84]	; 0x54
                        dest_buf += 4;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	3304      	adds	r3, #4
 8016312:	60fb      	str	r3, [r7, #12]
                for(; x <= x_end4; x += 4) {
 8016314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016316:	3304      	adds	r3, #4
 8016318:	647b      	str	r3, [r7, #68]	; 0x44
 801631a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631e:	429a      	cmp	r2, r3
 8016320:	f77f af71 	ble.w	8016206 <fill_normal+0x176>
                for(; x < w ; x++) {
 8016324:	e01a      	b.n	801635c <fill_normal+0x2cc>
                    FILL_NORMAL_MASK_PX(color)
 8016326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	2bff      	cmp	r3, #255	; 0xff
 801632c:	d103      	bne.n	8016336 <fill_normal+0x2a6>
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	793a      	ldrb	r2, [r7, #4]
 8016332:	701a      	strb	r2, [r3, #0]
 8016334:	e009      	b.n	801634a <fill_normal+0x2ba>
 8016336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016338:	781a      	ldrb	r2, [r3, #0]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	7819      	ldrb	r1, [r3, #0]
 801633e:	7938      	ldrb	r0, [r7, #4]
 8016340:	f7ff fb71 	bl	8015a26 <lv_color_mix>
 8016344:	4602      	mov	r2, r0
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	701a      	strb	r2, [r3, #0]
 801634a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801634c:	3301      	adds	r3, #1
 801634e:	657b      	str	r3, [r7, #84]	; 0x54
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	3301      	adds	r3, #1
 8016354:	60fb      	str	r3, [r7, #12]
                for(; x < w ; x++) {
 8016356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016358:	3301      	adds	r3, #1
 801635a:	647b      	str	r3, [r7, #68]	; 0x44
 801635c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016360:	429a      	cmp	r2, r3
 8016362:	dbe0      	blt.n	8016326 <fill_normal+0x296>
                dest_buf += (dest_stride - w);
 8016364:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801636a:	1ad3      	subs	r3, r2, r3
 801636c:	461a      	mov	r2, r3
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	4413      	add	r3, r2
 8016372:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8016374:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8016378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801637a:	1ad3      	subs	r3, r2, r3
 801637c:	461a      	mov	r2, r3
 801637e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016380:	4413      	add	r3, r2
 8016382:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 8016384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016386:	3301      	adds	r3, #1
 8016388:	643b      	str	r3, [r7, #64]	; 0x40
 801638a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801638e:	429a      	cmp	r2, r3
 8016390:	f6ff af10 	blt.w	80161b4 <fill_normal+0x124>
}
 8016394:	e078      	b.n	8016488 <fill_normal+0x3f8>
            lv_opa_t last_mask = LV_OPA_TRANSP;
 8016396:	2300      	movs	r3, #0
 8016398:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            last_dest_color.full = dest_buf[0].full;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	781b      	ldrb	r3, [r3, #0]
 80163a0:	763b      	strb	r3, [r7, #24]
            last_res_color.full = dest_buf[0].full;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	753b      	strb	r3, [r7, #20]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 80163a8:	2300      	movs	r3, #0
 80163aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            for(y = 0; y < h; y++) {
 80163ae:	2300      	movs	r3, #0
 80163b0:	643b      	str	r3, [r7, #64]	; 0x40
 80163b2:	e065      	b.n	8016480 <fill_normal+0x3f0>
                for(x = 0; x < w; x++) {
 80163b4:	2300      	movs	r3, #0
 80163b6:	647b      	str	r3, [r7, #68]	; 0x44
 80163b8:	e04e      	b.n	8016458 <fill_normal+0x3c8>
                    if(*mask) {
 80163ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d044      	beq.n	801644c <fill_normal+0x3bc>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80163c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163c4:	781b      	ldrb	r3, [r3, #0]
 80163c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d011      	beq.n	80163f2 <fill_normal+0x362>
 80163ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163d0:	781b      	ldrb	r3, [r3, #0]
 80163d2:	2bff      	cmp	r3, #255	; 0xff
 80163d4:	d009      	beq.n	80163ea <fill_normal+0x35a>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 80163d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	461a      	mov	r2, r3
 80163dc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80163e0:	fb02 f303 	mul.w	r3, r2, r3
 80163e4:	0a1b      	lsrs	r3, r3, #8
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	e001      	b.n	80163ee <fill_normal+0x35e>
 80163ea:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80163ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 80163f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d106      	bne.n	801640c <fill_normal+0x37c>
 80163fe:	7e3a      	ldrb	r2, [r7, #24]
 8016400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016402:	68f9      	ldr	r1, [r7, #12]
 8016404:	440b      	add	r3, r1
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	429a      	cmp	r2, r3
 801640a:	d01a      	beq.n	8016442 <fill_normal+0x3b2>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 801640c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016410:	2bff      	cmp	r3, #255	; 0xff
 8016412:	d102      	bne.n	801641a <fill_normal+0x38a>
 8016414:	793b      	ldrb	r3, [r7, #4]
 8016416:	753b      	strb	r3, [r7, #20]
 8016418:	e00a      	b.n	8016430 <fill_normal+0x3a0>
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 801641a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801641c:	68fa      	ldr	r2, [r7, #12]
 801641e:	4413      	add	r3, r2
 8016420:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8016424:	7819      	ldrb	r1, [r3, #0]
 8016426:	7938      	ldrb	r0, [r7, #4]
 8016428:	f7ff fafd 	bl	8015a26 <lv_color_mix>
 801642c:	4603      	mov	r3, r0
 801642e:	753b      	strb	r3, [r7, #20]
                            last_mask = *mask;
 8016430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016432:	781b      	ldrb	r3, [r3, #0]
 8016434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                            last_dest_color.full = dest_buf[x].full;
 8016438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801643a:	68fa      	ldr	r2, [r7, #12]
 801643c:	4413      	add	r3, r2
 801643e:	781b      	ldrb	r3, [r3, #0]
 8016440:	763b      	strb	r3, [r7, #24]
                        dest_buf[x] = last_res_color;
 8016442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016444:	68fa      	ldr	r2, [r7, #12]
 8016446:	4413      	add	r3, r2
 8016448:	7d3a      	ldrb	r2, [r7, #20]
 801644a:	701a      	strb	r2, [r3, #0]
                    mask++;
 801644c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801644e:	3301      	adds	r3, #1
 8016450:	657b      	str	r3, [r7, #84]	; 0x54
                for(x = 0; x < w; x++) {
 8016452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016454:	3301      	adds	r3, #1
 8016456:	647b      	str	r3, [r7, #68]	; 0x44
 8016458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645c:	429a      	cmp	r2, r3
 801645e:	dbac      	blt.n	80163ba <fill_normal+0x32a>
                dest_buf += dest_stride;
 8016460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016464:	68fa      	ldr	r2, [r7, #12]
 8016466:	4413      	add	r3, r2
 8016468:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 801646a:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 801646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016470:	1ad3      	subs	r3, r2, r3
 8016472:	461a      	mov	r2, r3
 8016474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016476:	4413      	add	r3, r2
 8016478:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 801647a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801647c:	3301      	adds	r3, #1
 801647e:	643b      	str	r3, [r7, #64]	; 0x40
 8016480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016484:	429a      	cmp	r2, r3
 8016486:	db95      	blt.n	80163b4 <fill_normal+0x324>
}
 8016488:	bf00      	nop
 801648a:	3748      	adds	r7, #72	; 0x48
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}

08016490 <fill_blended>:

#if LV_DRAW_COMPLEX
static void fill_blended(lv_color_t * dest_buf, const lv_area_t * dest_area,
                         lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride,
                         lv_blend_mode_t blend_mode)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b08e      	sub	sp, #56	; 0x38
 8016494:	af00      	add	r7, sp, #0
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	60b9      	str	r1, [r7, #8]
 801649a:	713b      	strb	r3, [r7, #4]
 801649c:	4613      	mov	r3, r2
 801649e:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 80164a0:	68b8      	ldr	r0, [r7, #8]
 80164a2:	f7ff fb53 	bl	8015b4c <lv_area_get_width>
 80164a6:	4603      	mov	r3, r0
 80164a8:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 80164aa:	68b8      	ldr	r0, [r7, #8]
 80164ac:	f7ff fb65 	bl	8015b7a <lv_area_get_height>
 80164b0:	4603      	mov	r3, r0
 80164b2:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 80164b4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80164b8:	2b03      	cmp	r3, #3
 80164ba:	d00d      	beq.n	80164d8 <fill_blended+0x48>
 80164bc:	2b03      	cmp	r3, #3
 80164be:	f300 80d6 	bgt.w	801666e <fill_blended+0x1de>
 80164c2:	2b01      	cmp	r3, #1
 80164c4:	d002      	beq.n	80164cc <fill_blended+0x3c>
 80164c6:	2b02      	cmp	r3, #2
 80164c8:	d003      	beq.n	80164d2 <fill_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 80164ca:	e0d0      	b.n	801666e <fill_blended+0x1de>
            blend_fp = color_blend_true_color_additive;
 80164cc:	4b6a      	ldr	r3, [pc, #424]	; (8016678 <fill_blended+0x1e8>)
 80164ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80164d0:	e005      	b.n	80164de <fill_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 80164d2:	4b6a      	ldr	r3, [pc, #424]	; (801667c <fill_blended+0x1ec>)
 80164d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80164d6:	e002      	b.n	80164de <fill_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 80164d8:	4b69      	ldr	r3, [pc, #420]	; (8016680 <fill_blended+0x1f0>)
 80164da:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80164dc:	bf00      	nop
    }

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 80164de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d141      	bne.n	8016568 <fill_blended+0xd8>
        lv_color_t last_dest_color = dest_buf[0];
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	781b      	ldrb	r3, [r3, #0]
 80164e8:	773b      	strb	r3, [r7, #28]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 80164ea:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80164ee:	68f9      	ldr	r1, [r7, #12]
 80164f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f2:	7809      	ldrb	r1, [r1, #0]
 80164f4:	7938      	ldrb	r0, [r7, #4]
 80164f6:	4798      	blx	r3
 80164f8:	4603      	mov	r3, r0
 80164fa:	763b      	strb	r3, [r7, #24]
        for(y = 0; y < h; y++) {
 80164fc:	2300      	movs	r3, #0
 80164fe:	633b      	str	r3, [r7, #48]	; 0x30
 8016500:	e02d      	b.n	801655e <fill_blended+0xce>
            for(x = 0; x < w; x++) {
 8016502:	2300      	movs	r3, #0
 8016504:	637b      	str	r3, [r7, #52]	; 0x34
 8016506:	e01e      	b.n	8016546 <fill_blended+0xb6>
                if(last_dest_color.full != dest_buf[x].full) {
 8016508:	7f3a      	ldrb	r2, [r7, #28]
 801650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801650c:	68f9      	ldr	r1, [r7, #12]
 801650e:	440b      	add	r3, r1
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	429a      	cmp	r2, r3
 8016514:	d00f      	beq.n	8016536 <fill_blended+0xa6>
                    last_dest_color = dest_buf[x];
 8016516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016518:	68fa      	ldr	r2, [r7, #12]
 801651a:	4413      	add	r3, r2
 801651c:	781b      	ldrb	r3, [r3, #0]
 801651e:	773b      	strb	r3, [r7, #28]
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 8016520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016522:	68fa      	ldr	r2, [r7, #12]
 8016524:	18d1      	adds	r1, r2, r3
 8016526:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652c:	7809      	ldrb	r1, [r1, #0]
 801652e:	7938      	ldrb	r0, [r7, #4]
 8016530:	4798      	blx	r3
 8016532:	4603      	mov	r3, r0
 8016534:	763b      	strb	r3, [r7, #24]
                }
                dest_buf[x] = last_res_color;
 8016536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016538:	68fa      	ldr	r2, [r7, #12]
 801653a:	4413      	add	r3, r2
 801653c:	7e3a      	ldrb	r2, [r7, #24]
 801653e:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 8016540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016542:	3301      	adds	r3, #1
 8016544:	637b      	str	r3, [r7, #52]	; 0x34
 8016546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654a:	429a      	cmp	r2, r3
 801654c:	dbdc      	blt.n	8016508 <fill_blended+0x78>
            }
            dest_buf += dest_stride;
 801654e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016552:	68fa      	ldr	r2, [r7, #12]
 8016554:	4413      	add	r3, r2
 8016556:	60fb      	str	r3, [r7, #12]
        for(y = 0; y < h; y++) {
 8016558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801655a:	3301      	adds	r3, #1
 801655c:	633b      	str	r3, [r7, #48]	; 0x30
 801655e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016560:	6a3b      	ldr	r3, [r7, #32]
 8016562:	429a      	cmp	r2, r3
 8016564:	dbcd      	blt.n	8016502 <fill_blended+0x72>
 8016566:	e083      	b.n	8016670 <fill_blended+0x1e0>
    /*Masked*/
    else {
        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8016568:	2300      	movs	r3, #0
 801656a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        last_dest_color = dest_buf[0];
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	753b      	strb	r3, [r7, #20]
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 8016574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016576:	781b      	ldrb	r3, [r3, #0]
 8016578:	2bfc      	cmp	r3, #252	; 0xfc
 801657a:	d809      	bhi.n	8016590 <fill_blended+0x100>
 801657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	461a      	mov	r2, r3
 8016582:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016586:	fb02 f303 	mul.w	r3, r2, r3
 801658a:	0a1b      	lsrs	r3, r3, #8
 801658c:	b2db      	uxtb	r3, r3
 801658e:	e001      	b.n	8016594 <fill_blended+0x104>
 8016590:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016594:	77fb      	strb	r3, [r7, #31]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8016596:	7ffa      	ldrb	r2, [r7, #31]
 8016598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801659a:	7d39      	ldrb	r1, [r7, #20]
 801659c:	7938      	ldrb	r0, [r7, #4]
 801659e:	4798      	blx	r3
 80165a0:	4603      	mov	r3, r0
 80165a2:	743b      	strb	r3, [r7, #16]

        for(y = 0; y < h; y++) {
 80165a4:	2300      	movs	r3, #0
 80165a6:	633b      	str	r3, [r7, #48]	; 0x30
 80165a8:	e05c      	b.n	8016664 <fill_blended+0x1d4>
            for(x = 0; x < w; x++) {
 80165aa:	2300      	movs	r3, #0
 80165ac:	637b      	str	r3, [r7, #52]	; 0x34
 80165ae:	e048      	b.n	8016642 <fill_blended+0x1b2>
                if(mask[x] == 0) continue;
 80165b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165b4:	4413      	add	r3, r2
 80165b6:	781b      	ldrb	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d03e      	beq.n	801663a <fill_blended+0x1aa>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 80165bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165c0:	4413      	add	r3, r2
 80165c2:	781b      	ldrb	r3, [r3, #0]
 80165c4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80165c8:	429a      	cmp	r2, r3
 80165ca:	d106      	bne.n	80165da <fill_blended+0x14a>
 80165cc:	7d3a      	ldrb	r2, [r7, #20]
 80165ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165d0:	68f9      	ldr	r1, [r7, #12]
 80165d2:	440b      	add	r3, r1
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d029      	beq.n	801662e <fill_blended+0x19e>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 80165da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165de:	4413      	add	r3, r2
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	2bfc      	cmp	r3, #252	; 0xfc
 80165e4:	d80b      	bhi.n	80165fe <fill_blended+0x16e>
 80165e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165ea:	4413      	add	r3, r2
 80165ec:	781b      	ldrb	r3, [r3, #0]
 80165ee:	461a      	mov	r2, r3
 80165f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80165f4:	fb02 f303 	mul.w	r3, r2, r3
 80165f8:	0a1b      	lsrs	r3, r3, #8
 80165fa:	b2db      	uxtb	r3, r3
 80165fc:	e001      	b.n	8016602 <fill_blended+0x172>
 80165fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016602:	77fb      	strb	r3, [r7, #31]

                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8016604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016606:	68fa      	ldr	r2, [r7, #12]
 8016608:	18d1      	adds	r1, r2, r3
 801660a:	7ffa      	ldrb	r2, [r7, #31]
 801660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660e:	7809      	ldrb	r1, [r1, #0]
 8016610:	7938      	ldrb	r0, [r7, #4]
 8016612:	4798      	blx	r3
 8016614:	4603      	mov	r3, r0
 8016616:	743b      	strb	r3, [r7, #16]
                    last_mask = mask[x];
 8016618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801661a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801661c:	4413      	add	r3, r2
 801661e:	781b      	ldrb	r3, [r3, #0]
 8016620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_dest_color.full = dest_buf[x].full;
 8016624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016626:	68fa      	ldr	r2, [r7, #12]
 8016628:	4413      	add	r3, r2
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 801662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016630:	68fa      	ldr	r2, [r7, #12]
 8016632:	4413      	add	r3, r2
 8016634:	7c3a      	ldrb	r2, [r7, #16]
 8016636:	701a      	strb	r2, [r3, #0]
 8016638:	e000      	b.n	801663c <fill_blended+0x1ac>
                if(mask[x] == 0) continue;
 801663a:	bf00      	nop
            for(x = 0; x < w; x++) {
 801663c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801663e:	3301      	adds	r3, #1
 8016640:	637b      	str	r3, [r7, #52]	; 0x34
 8016642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016646:	429a      	cmp	r2, r3
 8016648:	dbb2      	blt.n	80165b0 <fill_blended+0x120>
            }
            dest_buf += dest_stride;
 801664a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801664e:	68fa      	ldr	r2, [r7, #12]
 8016650:	4413      	add	r3, r2
 8016652:	60fb      	str	r3, [r7, #12]
            mask += mask_stride;
 8016654:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8016658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801665a:	4413      	add	r3, r2
 801665c:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 801665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016660:	3301      	adds	r3, #1
 8016662:	633b      	str	r3, [r7, #48]	; 0x30
 8016664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016666:	6a3b      	ldr	r3, [r7, #32]
 8016668:	429a      	cmp	r2, r3
 801666a:	db9e      	blt.n	80165aa <fill_blended+0x11a>
 801666c:	e000      	b.n	8016670 <fill_blended+0x1e0>
            return;
 801666e:	bf00      	nop
        }
    }
}
 8016670:	3738      	adds	r7, #56	; 0x38
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	08016e5d 	.word	0x08016e5d
 801667c:	08016ead 	.word	0x08016ead
 8016680:	08016f63 	.word	0x08016f63

08016684 <map_set_px>:
#endif

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8016684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016686:	b08f      	sub	sp, #60	; 0x3c
 8016688:	af04      	add	r7, sp, #16
 801668a:	60f8      	str	r0, [r7, #12]
 801668c:	60b9      	str	r1, [r7, #8]
 801668e:	603b      	str	r3, [r7, #0]
 8016690:	4613      	mov	r3, r2
 8016692:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8016694:	f7f6 fdae 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8016698:	61f8      	str	r0, [r7, #28]

    int32_t w = lv_area_get_width(dest_area);
 801669a:	68b8      	ldr	r0, [r7, #8]
 801669c:	f7ff fa56 	bl	8015b4c <lv_area_get_width>
 80166a0:	4603      	mov	r3, r0
 80166a2:	61bb      	str	r3, [r7, #24]
    int32_t h = lv_area_get_height(dest_area);
 80166a4:	68b8      	ldr	r0, [r7, #8]
 80166a6:	f7ff fa68 	bl	8015b7a <lv_area_get_height>
 80166aa:	4603      	mov	r3, r0
 80166ac:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 80166ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d140      	bne.n	8016736 <map_set_px+0xb2>
        for(y = 0; y < h; y++) {
 80166b4:	2300      	movs	r3, #0
 80166b6:	623b      	str	r3, [r7, #32]
 80166b8:	e038      	b.n	801672c <map_set_px+0xa8>
            for(x = 0; x < w; x++) {
 80166ba:	2300      	movs	r3, #0
 80166bc:	627b      	str	r3, [r7, #36]	; 0x24
 80166be:	e029      	b.n	8016714 <map_set_px+0x90>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 80166c0:	69fb      	ldr	r3, [r7, #28]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	69dc      	ldr	r4, [r3, #28]
 80166c6:	69fb      	ldr	r3, [r7, #28]
 80166c8:	6818      	ldr	r0, [r3, #0]
 80166ca:	68bb      	ldr	r3, [r7, #8]
 80166cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166d0:	b29a      	uxth	r2, r3
 80166d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d4:	b29b      	uxth	r3, r3
 80166d6:	4413      	add	r3, r2
 80166d8:	b29b      	uxth	r3, r3
 80166da:	b21e      	sxth	r6, r3
 80166dc:	68bb      	ldr	r3, [r7, #8]
 80166de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	6a3b      	ldr	r3, [r7, #32]
 80166e6:	b29b      	uxth	r3, r3
 80166e8:	4413      	add	r3, r2
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	b21b      	sxth	r3, r3
 80166ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166f0:	6839      	ldr	r1, [r7, #0]
 80166f2:	440a      	add	r2, r1
 80166f4:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 80166f8:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80166fc:	9102      	str	r1, [sp, #8]
 80166fe:	7812      	ldrb	r2, [r2, #0]
 8016700:	f88d 2004 	strb.w	r2, [sp, #4]
 8016704:	9300      	str	r3, [sp, #0]
 8016706:	4633      	mov	r3, r6
 8016708:	462a      	mov	r2, r5
 801670a:	68f9      	ldr	r1, [r7, #12]
 801670c:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 801670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016710:	3301      	adds	r3, #1
 8016712:	627b      	str	r3, [r7, #36]	; 0x24
 8016714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016716:	69bb      	ldr	r3, [r7, #24]
 8016718:	429a      	cmp	r2, r3
 801671a:	dbd1      	blt.n	80166c0 <map_set_px+0x3c>
                                        opa);
            }
            src_buf += src_stride;
 801671c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8016720:	683a      	ldr	r2, [r7, #0]
 8016722:	4413      	add	r3, r2
 8016724:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8016726:	6a3b      	ldr	r3, [r7, #32]
 8016728:	3301      	adds	r3, #1
 801672a:	623b      	str	r3, [r7, #32]
 801672c:	6a3a      	ldr	r2, [r7, #32]
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	429a      	cmp	r2, r3
 8016732:	dbc2      	blt.n	80166ba <map_set_px+0x36>
            }
            mask += mask_stride;
            src_buf += src_stride;
        }
    }
}
 8016734:	e054      	b.n	80167e0 <map_set_px+0x15c>
        for(y = 0; y < h; y++) {
 8016736:	2300      	movs	r3, #0
 8016738:	623b      	str	r3, [r7, #32]
 801673a:	e04d      	b.n	80167d8 <map_set_px+0x154>
            for(x = 0; x < w; x++) {
 801673c:	2300      	movs	r3, #0
 801673e:	627b      	str	r3, [r7, #36]	; 0x24
 8016740:	e039      	b.n	80167b6 <map_set_px+0x132>
                if(mask[x]) {
 8016742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016746:	4413      	add	r3, r2
 8016748:	781b      	ldrb	r3, [r3, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d030      	beq.n	80167b0 <map_set_px+0x12c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 801674e:	69fb      	ldr	r3, [r7, #28]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	69dc      	ldr	r4, [r3, #28]
 8016754:	69fb      	ldr	r3, [r7, #28]
 8016756:	681e      	ldr	r6, [r3, #0]
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801675e:	b29a      	uxth	r2, r3
 8016760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016762:	b29b      	uxth	r3, r3
 8016764:	4413      	add	r3, r2
 8016766:	b29b      	uxth	r3, r3
 8016768:	fa0f fc83 	sxth.w	ip, r3
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016772:	b29a      	uxth	r2, r3
 8016774:	6a3b      	ldr	r3, [r7, #32]
 8016776:	b29b      	uxth	r3, r3
 8016778:	4413      	add	r3, r2
 801677a:	b29b      	uxth	r3, r3
 801677c:	b21b      	sxth	r3, r3
 801677e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016780:	6839      	ldr	r1, [r7, #0]
 8016782:	440a      	add	r2, r1
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8016784:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8016788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801678a:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 801678c:	4428      	add	r0, r5
 801678e:	7800      	ldrb	r0, [r0, #0]
 8016790:	fb00 f101 	mul.w	r1, r0, r1
 8016794:	0a09      	lsrs	r1, r1, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8016796:	b2c9      	uxtb	r1, r1
 8016798:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801679c:	9102      	str	r1, [sp, #8]
 801679e:	7812      	ldrb	r2, [r2, #0]
 80167a0:	f88d 2004 	strb.w	r2, [sp, #4]
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	4663      	mov	r3, ip
 80167a8:	4602      	mov	r2, r0
 80167aa:	68f9      	ldr	r1, [r7, #12]
 80167ac:	4630      	mov	r0, r6
 80167ae:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 80167b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b2:	3301      	adds	r3, #1
 80167b4:	627b      	str	r3, [r7, #36]	; 0x24
 80167b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167b8:	69bb      	ldr	r3, [r7, #24]
 80167ba:	429a      	cmp	r2, r3
 80167bc:	dbc1      	blt.n	8016742 <map_set_px+0xbe>
            mask += mask_stride;
 80167be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80167c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80167c4:	4413      	add	r3, r2
 80167c6:	64bb      	str	r3, [r7, #72]	; 0x48
            src_buf += src_stride;
 80167c8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80167cc:	683a      	ldr	r2, [r7, #0]
 80167ce:	4413      	add	r3, r2
 80167d0:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 80167d2:	6a3b      	ldr	r3, [r7, #32]
 80167d4:	3301      	adds	r3, #1
 80167d6:	623b      	str	r3, [r7, #32]
 80167d8:	6a3a      	ldr	r2, [r7, #32]
 80167da:	697b      	ldr	r3, [r7, #20]
 80167dc:	429a      	cmp	r2, r3
 80167de:	dbad      	blt.n	801673c <map_set_px+0xb8>
}
 80167e0:	bf00      	nop
 80167e2:	372c      	adds	r7, #44	; 0x2c
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080167e8 <map_normal>:

LV_ATTRIBUTE_FAST_MEM static void map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 80167e8:	b5b0      	push	{r4, r5, r7, lr}
 80167ea:	b08c      	sub	sp, #48	; 0x30
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	60b9      	str	r1, [r7, #8]
 80167f2:	603b      	str	r3, [r7, #0]
 80167f4:	4613      	mov	r3, r2
 80167f6:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 80167f8:	68b8      	ldr	r0, [r7, #8]
 80167fa:	f7ff f9a7 	bl	8015b4c <lv_area_get_width>
 80167fe:	4603      	mov	r3, r0
 8016800:	61fb      	str	r3, [r7, #28]
    int32_t h = lv_area_get_height(dest_area);
 8016802:	68b8      	ldr	r0, [r7, #8]
 8016804:	f7ff f9b9 	bl	8015b7a <lv_area_get_height>
 8016808:	4603      	mov	r3, r0
 801680a:	61bb      	str	r3, [r7, #24]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 801680c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801680e:	2b00      	cmp	r3, #0
 8016810:	d14e      	bne.n	80168b0 <map_normal+0xc8>
        if(opa >= LV_OPA_MAX) {
 8016812:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016816:	2bfc      	cmp	r3, #252	; 0xfc
 8016818:	d91a      	bls.n	8016850 <map_normal+0x68>
            for(y = 0; y < h; y++) {
 801681a:	2300      	movs	r3, #0
 801681c:	62bb      	str	r3, [r7, #40]	; 0x28
 801681e:	e012      	b.n	8016846 <map_normal+0x5e>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	461a      	mov	r2, r3
 8016824:	6839      	ldr	r1, [r7, #0]
 8016826:	68f8      	ldr	r0, [r7, #12]
 8016828:	f00a f988 	bl	8020b3c <lv_memcpy>
                dest_buf += dest_stride;
 801682c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016830:	68fa      	ldr	r2, [r7, #12]
 8016832:	4413      	add	r3, r2
 8016834:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8016836:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801683a:	683a      	ldr	r2, [r7, #0]
 801683c:	4413      	add	r3, r2
 801683e:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8016840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016842:	3301      	adds	r3, #1
 8016844:	62bb      	str	r3, [r7, #40]	; 0x28
 8016846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016848:	69bb      	ldr	r3, [r7, #24]
 801684a:	429a      	cmp	r2, r3
 801684c:	dbe8      	blt.n	8016820 <map_normal+0x38>
                src_buf += src_stride;
                mask += mask_stride;
            }
        }
    }
}
 801684e:	e1ee      	b.n	8016c2e <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8016850:	2300      	movs	r3, #0
 8016852:	62bb      	str	r3, [r7, #40]	; 0x28
 8016854:	e027      	b.n	80168a6 <map_normal+0xbe>
                for(x = 0; x < w; x++) {
 8016856:	2300      	movs	r3, #0
 8016858:	62fb      	str	r3, [r7, #44]	; 0x2c
 801685a:	e013      	b.n	8016884 <map_normal+0x9c>
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 801685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685e:	683a      	ldr	r2, [r7, #0]
 8016860:	4413      	add	r3, r2
 8016862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016864:	68f9      	ldr	r1, [r7, #12]
 8016866:	4411      	add	r1, r2
 8016868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801686a:	68f8      	ldr	r0, [r7, #12]
 801686c:	1884      	adds	r4, r0, r2
 801686e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016872:	7809      	ldrb	r1, [r1, #0]
 8016874:	7818      	ldrb	r0, [r3, #0]
 8016876:	f7ff f8d6 	bl	8015a26 <lv_color_mix>
 801687a:	4603      	mov	r3, r0
 801687c:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 801687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016880:	3301      	adds	r3, #1
 8016882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016886:	69fb      	ldr	r3, [r7, #28]
 8016888:	429a      	cmp	r2, r3
 801688a:	dbe7      	blt.n	801685c <map_normal+0x74>
                dest_buf += dest_stride;
 801688c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016890:	68fa      	ldr	r2, [r7, #12]
 8016892:	4413      	add	r3, r2
 8016894:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8016896:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801689a:	683a      	ldr	r2, [r7, #0]
 801689c:	4413      	add	r3, r2
 801689e:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 80168a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a2:	3301      	adds	r3, #1
 80168a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80168a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168a8:	69bb      	ldr	r3, [r7, #24]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	dbd3      	blt.n	8016856 <map_normal+0x6e>
}
 80168ae:	e1be      	b.n	8016c2e <map_normal+0x446>
        if(opa > LV_OPA_MAX) {
 80168b0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80168b4:	2bfd      	cmp	r3, #253	; 0xfd
 80168b6:	f240 816d 	bls.w	8016b94 <map_normal+0x3ac>
            int32_t x_end4 = w - 4;
 80168ba:	69fb      	ldr	r3, [r7, #28]
 80168bc:	3b04      	subs	r3, #4
 80168be:	613b      	str	r3, [r7, #16]
            for(y = 0; y < h; y++) {
 80168c0:	2300      	movs	r3, #0
 80168c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80168c4:	e160      	b.n	8016b88 <map_normal+0x3a0>
                const lv_opa_t * mask_tmp_x = mask;
 80168c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168c8:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80168ca:	2300      	movs	r3, #0
 80168cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80168ce:	e028      	b.n	8016922 <map_normal+0x13a>
                    MAP_NORMAL_MASK_PX(x)
 80168d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d01e      	beq.n	8016916 <map_normal+0x12e>
 80168d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168da:	781b      	ldrb	r3, [r3, #0]
 80168dc:	2bff      	cmp	r3, #255	; 0xff
 80168de:	d108      	bne.n	80168f2 <map_normal+0x10a>
 80168e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e2:	683a      	ldr	r2, [r7, #0]
 80168e4:	441a      	add	r2, r3
 80168e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e8:	68f9      	ldr	r1, [r7, #12]
 80168ea:	440b      	add	r3, r1
 80168ec:	7812      	ldrb	r2, [r2, #0]
 80168ee:	701a      	strb	r2, [r3, #0]
 80168f0:	e011      	b.n	8016916 <map_normal+0x12e>
 80168f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f4:	683a      	ldr	r2, [r7, #0]
 80168f6:	4413      	add	r3, r2
 80168f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168fa:	68f9      	ldr	r1, [r7, #12]
 80168fc:	4411      	add	r1, r2
 80168fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016900:	7815      	ldrb	r5, [r2, #0]
 8016902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016904:	68f8      	ldr	r0, [r7, #12]
 8016906:	1884      	adds	r4, r0, r2
 8016908:	462a      	mov	r2, r5
 801690a:	7809      	ldrb	r1, [r1, #0]
 801690c:	7818      	ldrb	r0, [r3, #0]
 801690e:	f7ff f88a 	bl	8015a26 <lv_color_mix>
 8016912:	4603      	mov	r3, r0
 8016914:	7023      	strb	r3, [r4, #0]
 8016916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016918:	3301      	adds	r3, #1
 801691a:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 801691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691e:	3301      	adds	r3, #1
 8016920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016924:	69fb      	ldr	r3, [r7, #28]
 8016926:	429a      	cmp	r2, r3
 8016928:	da04      	bge.n	8016934 <map_normal+0x14c>
 801692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692c:	f003 0303 	and.w	r3, r3, #3
 8016930:	2b00      	cmp	r3, #0
 8016932:	d1cd      	bne.n	80168d0 <map_normal+0xe8>
                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
 8016934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016936:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8016938:	e0df      	b.n	8016afa <map_normal+0x312>
                    if(*mask32) {
 801693a:	6a3b      	ldr	r3, [r7, #32]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	2b00      	cmp	r3, #0
 8016940:	f000 80d5 	beq.w	8016aee <map_normal+0x306>
                        if((*mask32) == 0xFFFFFFFF) {
 8016944:	6a3b      	ldr	r3, [r7, #32]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801694c:	d126      	bne.n	801699c <map_normal+0x1b4>
                            dest_buf[x] = src_buf[x];
 801694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016950:	683a      	ldr	r2, [r7, #0]
 8016952:	441a      	add	r2, r3
 8016954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016956:	68f9      	ldr	r1, [r7, #12]
 8016958:	440b      	add	r3, r1
 801695a:	7812      	ldrb	r2, [r2, #0]
 801695c:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 801695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016960:	3301      	adds	r3, #1
 8016962:	683a      	ldr	r2, [r7, #0]
 8016964:	441a      	add	r2, r3
 8016966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016968:	3301      	adds	r3, #1
 801696a:	68f9      	ldr	r1, [r7, #12]
 801696c:	440b      	add	r3, r1
 801696e:	7812      	ldrb	r2, [r2, #0]
 8016970:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 2] = src_buf[x + 2];
 8016972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016974:	3302      	adds	r3, #2
 8016976:	683a      	ldr	r2, [r7, #0]
 8016978:	441a      	add	r2, r3
 801697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801697c:	3302      	adds	r3, #2
 801697e:	68f9      	ldr	r1, [r7, #12]
 8016980:	440b      	add	r3, r1
 8016982:	7812      	ldrb	r2, [r2, #0]
 8016984:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 3] = src_buf[x + 3];
 8016986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016988:	3303      	adds	r3, #3
 801698a:	683a      	ldr	r2, [r7, #0]
 801698c:	441a      	add	r2, r3
 801698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016990:	3303      	adds	r3, #3
 8016992:	68f9      	ldr	r1, [r7, #12]
 8016994:	440b      	add	r3, r1
 8016996:	7812      	ldrb	r2, [r2, #0]
 8016998:	701a      	strb	r2, [r3, #0]
 801699a:	e0a8      	b.n	8016aee <map_normal+0x306>
                            mask_tmp_x = (const lv_opa_t *)mask32;
 801699c:	6a3b      	ldr	r3, [r7, #32]
 801699e:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x)
 80169a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a2:	781b      	ldrb	r3, [r3, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d01e      	beq.n	80169e6 <map_normal+0x1fe>
 80169a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169aa:	781b      	ldrb	r3, [r3, #0]
 80169ac:	2bff      	cmp	r3, #255	; 0xff
 80169ae:	d108      	bne.n	80169c2 <map_normal+0x1da>
 80169b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b2:	683a      	ldr	r2, [r7, #0]
 80169b4:	441a      	add	r2, r3
 80169b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b8:	68f9      	ldr	r1, [r7, #12]
 80169ba:	440b      	add	r3, r1
 80169bc:	7812      	ldrb	r2, [r2, #0]
 80169be:	701a      	strb	r2, [r3, #0]
 80169c0:	e011      	b.n	80169e6 <map_normal+0x1fe>
 80169c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169c4:	683a      	ldr	r2, [r7, #0]
 80169c6:	4413      	add	r3, r2
 80169c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169ca:	68f9      	ldr	r1, [r7, #12]
 80169cc:	4411      	add	r1, r2
 80169ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169d0:	7815      	ldrb	r5, [r2, #0]
 80169d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169d4:	68f8      	ldr	r0, [r7, #12]
 80169d6:	1884      	adds	r4, r0, r2
 80169d8:	462a      	mov	r2, r5
 80169da:	7809      	ldrb	r1, [r1, #0]
 80169dc:	7818      	ldrb	r0, [r3, #0]
 80169de:	f7ff f822 	bl	8015a26 <lv_color_mix>
 80169e2:	4603      	mov	r3, r0
 80169e4:	7023      	strb	r3, [r4, #0]
 80169e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e8:	3301      	adds	r3, #1
 80169ea:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 1)
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d023      	beq.n	8016a3c <map_normal+0x254>
 80169f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	2bff      	cmp	r3, #255	; 0xff
 80169fa:	d10a      	bne.n	8016a12 <map_normal+0x22a>
 80169fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169fe:	3301      	adds	r3, #1
 8016a00:	683a      	ldr	r2, [r7, #0]
 8016a02:	441a      	add	r2, r3
 8016a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a06:	3301      	adds	r3, #1
 8016a08:	68f9      	ldr	r1, [r7, #12]
 8016a0a:	440b      	add	r3, r1
 8016a0c:	7812      	ldrb	r2, [r2, #0]
 8016a0e:	701a      	strb	r2, [r3, #0]
 8016a10:	e014      	b.n	8016a3c <map_normal+0x254>
 8016a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a14:	3301      	adds	r3, #1
 8016a16:	683a      	ldr	r2, [r7, #0]
 8016a18:	4413      	add	r3, r2
 8016a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a1c:	3201      	adds	r2, #1
 8016a1e:	68f9      	ldr	r1, [r7, #12]
 8016a20:	4411      	add	r1, r2
 8016a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a24:	7815      	ldrb	r5, [r2, #0]
 8016a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a28:	3201      	adds	r2, #1
 8016a2a:	68f8      	ldr	r0, [r7, #12]
 8016a2c:	1884      	adds	r4, r0, r2
 8016a2e:	462a      	mov	r2, r5
 8016a30:	7809      	ldrb	r1, [r1, #0]
 8016a32:	7818      	ldrb	r0, [r3, #0]
 8016a34:	f7fe fff7 	bl	8015a26 <lv_color_mix>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	7023      	strb	r3, [r4, #0]
 8016a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3e:	3301      	adds	r3, #1
 8016a40:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 2)
 8016a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d023      	beq.n	8016a92 <map_normal+0x2aa>
 8016a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	2bff      	cmp	r3, #255	; 0xff
 8016a50:	d10a      	bne.n	8016a68 <map_normal+0x280>
 8016a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a54:	3302      	adds	r3, #2
 8016a56:	683a      	ldr	r2, [r7, #0]
 8016a58:	441a      	add	r2, r3
 8016a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a5c:	3302      	adds	r3, #2
 8016a5e:	68f9      	ldr	r1, [r7, #12]
 8016a60:	440b      	add	r3, r1
 8016a62:	7812      	ldrb	r2, [r2, #0]
 8016a64:	701a      	strb	r2, [r3, #0]
 8016a66:	e014      	b.n	8016a92 <map_normal+0x2aa>
 8016a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a6a:	3302      	adds	r3, #2
 8016a6c:	683a      	ldr	r2, [r7, #0]
 8016a6e:	4413      	add	r3, r2
 8016a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a72:	3202      	adds	r2, #2
 8016a74:	68f9      	ldr	r1, [r7, #12]
 8016a76:	4411      	add	r1, r2
 8016a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a7a:	7815      	ldrb	r5, [r2, #0]
 8016a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a7e:	3202      	adds	r2, #2
 8016a80:	68f8      	ldr	r0, [r7, #12]
 8016a82:	1884      	adds	r4, r0, r2
 8016a84:	462a      	mov	r2, r5
 8016a86:	7809      	ldrb	r1, [r1, #0]
 8016a88:	7818      	ldrb	r0, [r3, #0]
 8016a8a:	f7fe ffcc 	bl	8015a26 <lv_color_mix>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	7023      	strb	r3, [r4, #0]
 8016a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a94:	3301      	adds	r3, #1
 8016a96:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 3)
 8016a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a9a:	781b      	ldrb	r3, [r3, #0]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d023      	beq.n	8016ae8 <map_normal+0x300>
 8016aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	2bff      	cmp	r3, #255	; 0xff
 8016aa6:	d10a      	bne.n	8016abe <map_normal+0x2d6>
 8016aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aaa:	3303      	adds	r3, #3
 8016aac:	683a      	ldr	r2, [r7, #0]
 8016aae:	441a      	add	r2, r3
 8016ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab2:	3303      	adds	r3, #3
 8016ab4:	68f9      	ldr	r1, [r7, #12]
 8016ab6:	440b      	add	r3, r1
 8016ab8:	7812      	ldrb	r2, [r2, #0]
 8016aba:	701a      	strb	r2, [r3, #0]
 8016abc:	e014      	b.n	8016ae8 <map_normal+0x300>
 8016abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac0:	3303      	adds	r3, #3
 8016ac2:	683a      	ldr	r2, [r7, #0]
 8016ac4:	4413      	add	r3, r2
 8016ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ac8:	3203      	adds	r2, #3
 8016aca:	68f9      	ldr	r1, [r7, #12]
 8016acc:	4411      	add	r1, r2
 8016ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ad0:	7815      	ldrb	r5, [r2, #0]
 8016ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ad4:	3203      	adds	r2, #3
 8016ad6:	68f8      	ldr	r0, [r7, #12]
 8016ad8:	1884      	adds	r4, r0, r2
 8016ada:	462a      	mov	r2, r5
 8016adc:	7809      	ldrb	r1, [r1, #0]
 8016ade:	7818      	ldrb	r0, [r3, #0]
 8016ae0:	f7fe ffa1 	bl	8015a26 <lv_color_mix>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	7023      	strb	r3, [r4, #0]
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aea:	3301      	adds	r3, #1
 8016aec:	627b      	str	r3, [r7, #36]	; 0x24
                    mask32++;
 8016aee:	6a3b      	ldr	r3, [r7, #32]
 8016af0:	3304      	adds	r3, #4
 8016af2:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8016af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af6:	3304      	adds	r3, #4
 8016af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	f6ff af1b 	blt.w	801693a <map_normal+0x152>
                mask_tmp_x = (const lv_opa_t *)mask32;
 8016b04:	6a3b      	ldr	r3, [r7, #32]
 8016b06:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 8016b08:	e028      	b.n	8016b5c <map_normal+0x374>
                    MAP_NORMAL_MASK_PX(x)
 8016b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d01e      	beq.n	8016b50 <map_normal+0x368>
 8016b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	2bff      	cmp	r3, #255	; 0xff
 8016b18:	d108      	bne.n	8016b2c <map_normal+0x344>
 8016b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1c:	683a      	ldr	r2, [r7, #0]
 8016b1e:	441a      	add	r2, r3
 8016b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b22:	68f9      	ldr	r1, [r7, #12]
 8016b24:	440b      	add	r3, r1
 8016b26:	7812      	ldrb	r2, [r2, #0]
 8016b28:	701a      	strb	r2, [r3, #0]
 8016b2a:	e011      	b.n	8016b50 <map_normal+0x368>
 8016b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b2e:	683a      	ldr	r2, [r7, #0]
 8016b30:	4413      	add	r3, r2
 8016b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b34:	68f9      	ldr	r1, [r7, #12]
 8016b36:	4411      	add	r1, r2
 8016b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b3a:	7815      	ldrb	r5, [r2, #0]
 8016b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b3e:	68f8      	ldr	r0, [r7, #12]
 8016b40:	1884      	adds	r4, r0, r2
 8016b42:	462a      	mov	r2, r5
 8016b44:	7809      	ldrb	r1, [r1, #0]
 8016b46:	7818      	ldrb	r0, [r3, #0]
 8016b48:	f7fe ff6d 	bl	8015a26 <lv_color_mix>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	7023      	strb	r3, [r4, #0]
 8016b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b52:	3301      	adds	r3, #1
 8016b54:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 8016b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b58:	3301      	adds	r3, #1
 8016b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b5e:	69fb      	ldr	r3, [r7, #28]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	dbd2      	blt.n	8016b0a <map_normal+0x322>
                dest_buf += dest_stride;
 8016b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b68:	68fa      	ldr	r2, [r7, #12]
 8016b6a:	4413      	add	r3, r2
 8016b6c:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8016b6e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8016b72:	683a      	ldr	r2, [r7, #0]
 8016b74:	4413      	add	r3, r2
 8016b76:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 8016b78:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8016b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016b7e:	4413      	add	r3, r2
 8016b80:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 8016b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b84:	3301      	adds	r3, #1
 8016b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b8a:	69bb      	ldr	r3, [r7, #24]
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	f6ff ae9a 	blt.w	80168c6 <map_normal+0xde>
}
 8016b92:	e04c      	b.n	8016c2e <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8016b94:	2300      	movs	r3, #0
 8016b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b98:	e045      	b.n	8016c26 <map_normal+0x43e>
                for(x = 0; x < w; x++) {
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b9e:	e02c      	b.n	8016bfa <map_normal+0x412>
                    if(mask[x]) {
 8016ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016ba4:	4413      	add	r3, r2
 8016ba6:	781b      	ldrb	r3, [r3, #0]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d023      	beq.n	8016bf4 <map_normal+0x40c>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8016bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bb0:	4413      	add	r3, r2
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	2bfc      	cmp	r3, #252	; 0xfc
 8016bb6:	d80a      	bhi.n	8016bce <map_normal+0x3e6>
 8016bb8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016bc0:	440a      	add	r2, r1
 8016bc2:	7812      	ldrb	r2, [r2, #0]
 8016bc4:	fb02 f303 	mul.w	r3, r2, r3
 8016bc8:	121b      	asrs	r3, r3, #8
 8016bca:	b2db      	uxtb	r3, r3
 8016bcc:	e001      	b.n	8016bd2 <map_normal+0x3ea>
 8016bce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016bd2:	75fb      	strb	r3, [r7, #23]
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 8016bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd6:	683a      	ldr	r2, [r7, #0]
 8016bd8:	4413      	add	r3, r2
 8016bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bdc:	68f9      	ldr	r1, [r7, #12]
 8016bde:	4411      	add	r1, r2
 8016be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016be2:	68f8      	ldr	r0, [r7, #12]
 8016be4:	1884      	adds	r4, r0, r2
 8016be6:	7dfa      	ldrb	r2, [r7, #23]
 8016be8:	7809      	ldrb	r1, [r1, #0]
 8016bea:	7818      	ldrb	r0, [r3, #0]
 8016bec:	f7fe ff1b 	bl	8015a26 <lv_color_mix>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 8016bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf6:	3301      	adds	r3, #1
 8016bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bfc:	69fb      	ldr	r3, [r7, #28]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	dbce      	blt.n	8016ba0 <map_normal+0x3b8>
                dest_buf += dest_stride;
 8016c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c06:	68fa      	ldr	r2, [r7, #12]
 8016c08:	4413      	add	r3, r2
 8016c0a:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8016c0c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8016c10:	683a      	ldr	r2, [r7, #0]
 8016c12:	4413      	add	r3, r2
 8016c14:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 8016c16:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8016c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c1c:	4413      	add	r3, r2
 8016c1e:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 8016c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c22:	3301      	adds	r3, #1
 8016c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c28:	69bb      	ldr	r3, [r7, #24]
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	dbb5      	blt.n	8016b9a <map_normal+0x3b2>
}
 8016c2e:	bf00      	nop
 8016c30:	3730      	adds	r7, #48	; 0x30
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016c38 <map_blended>:

#if LV_DRAW_COMPLEX
static void map_blended(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                        const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa,
                        const lv_opa_t * mask, lv_coord_t mask_stride, lv_blend_mode_t blend_mode)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b08e      	sub	sp, #56	; 0x38
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	60f8      	str	r0, [r7, #12]
 8016c40:	60b9      	str	r1, [r7, #8]
 8016c42:	603b      	str	r3, [r7, #0]
 8016c44:	4613      	mov	r3, r2
 8016c46:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 8016c48:	68b8      	ldr	r0, [r7, #8]
 8016c4a:	f7fe ff7f 	bl	8015b4c <lv_area_get_width>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 8016c52:	68b8      	ldr	r0, [r7, #8]
 8016c54:	f7fe ff91 	bl	8015b7a <lv_area_get_height>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 8016c5c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8016c60:	2b03      	cmp	r3, #3
 8016c62:	d00d      	beq.n	8016c80 <map_blended+0x48>
 8016c64:	2b03      	cmp	r3, #3
 8016c66:	f300 80ef 	bgt.w	8016e48 <map_blended+0x210>
 8016c6a:	2b01      	cmp	r3, #1
 8016c6c:	d002      	beq.n	8016c74 <map_blended+0x3c>
 8016c6e:	2b02      	cmp	r3, #2
 8016c70:	d003      	beq.n	8016c7a <map_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 8016c72:	e0e9      	b.n	8016e48 <map_blended+0x210>
            blend_fp = color_blend_true_color_additive;
 8016c74:	4b76      	ldr	r3, [pc, #472]	; (8016e50 <map_blended+0x218>)
 8016c76:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8016c78:	e005      	b.n	8016c86 <map_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 8016c7a:	4b76      	ldr	r3, [pc, #472]	; (8016e54 <map_blended+0x21c>)
 8016c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8016c7e:	e002      	b.n	8016c86 <map_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 8016c80:	4b75      	ldr	r3, [pc, #468]	; (8016e58 <map_blended+0x220>)
 8016c82:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8016c84:	bf00      	nop
    }

    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8016c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d151      	bne.n	8016d30 <map_blended+0xf8>
        last_dest_color = dest_buf[0];
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	781b      	ldrb	r3, [r3, #0]
 8016c90:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	763b      	strb	r3, [r7, #24]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8016c98:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9e:	7f39      	ldrb	r1, [r7, #28]
 8016ca0:	7e38      	ldrb	r0, [r7, #24]
 8016ca2:	4798      	blx	r3
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	753b      	strb	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 8016ca8:	2300      	movs	r3, #0
 8016caa:	633b      	str	r3, [r7, #48]	; 0x30
 8016cac:	e03b      	b.n	8016d26 <map_blended+0xee>
            for(x = 0; x < w; x++) {
 8016cae:	2300      	movs	r3, #0
 8016cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8016cb2:	e027      	b.n	8016d04 <map_blended+0xcc>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 8016cb4:	7e3a      	ldrb	r2, [r7, #24]
 8016cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cb8:	6839      	ldr	r1, [r7, #0]
 8016cba:	440b      	add	r3, r1
 8016cbc:	781b      	ldrb	r3, [r3, #0]
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d106      	bne.n	8016cd0 <map_blended+0x98>
 8016cc2:	7f3a      	ldrb	r2, [r7, #28]
 8016cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cc6:	68f9      	ldr	r1, [r7, #12]
 8016cc8:	440b      	add	r3, r1
 8016cca:	781b      	ldrb	r3, [r3, #0]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d011      	beq.n	8016cf4 <map_blended+0xbc>
                    last_dest_color = dest_buf[x];
 8016cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cd2:	68fa      	ldr	r2, [r7, #12]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	781b      	ldrb	r3, [r3, #0]
 8016cd8:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 8016cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cdc:	683a      	ldr	r2, [r7, #0]
 8016cde:	4413      	add	r3, r2
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	763b      	strb	r3, [r7, #24]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8016ce4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cea:	7f39      	ldrb	r1, [r7, #28]
 8016cec:	7e38      	ldrb	r0, [r7, #24]
 8016cee:	4798      	blx	r3
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 8016cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cf6:	68fa      	ldr	r2, [r7, #12]
 8016cf8:	4413      	add	r3, r2
 8016cfa:	7d3a      	ldrb	r2, [r7, #20]
 8016cfc:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 8016cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d00:	3301      	adds	r3, #1
 8016d02:	637b      	str	r3, [r7, #52]	; 0x34
 8016d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	dbd3      	blt.n	8016cb4 <map_blended+0x7c>
            }
            dest_buf += dest_stride;
 8016d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016d10:	68fa      	ldr	r2, [r7, #12]
 8016d12:	4413      	add	r3, r2
 8016d14:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 8016d16:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8016d1a:	683a      	ldr	r2, [r7, #0]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8016d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d22:	3301      	adds	r3, #1
 8016d24:	633b      	str	r3, [r7, #48]	; 0x30
 8016d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d28:	6a3b      	ldr	r3, [r7, #32]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	dbbf      	blt.n	8016cae <map_blended+0x76>
 8016d2e:	e08c      	b.n	8016e4a <map_blended+0x212>
        }
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	763b      	strb	r3, [r7, #24]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 8016d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d3e:	781b      	ldrb	r3, [r3, #0]
 8016d40:	2bfc      	cmp	r3, #252	; 0xfc
 8016d42:	d808      	bhi.n	8016d56 <map_blended+0x11e>
 8016d44:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d4a:	7812      	ldrb	r2, [r2, #0]
 8016d4c:	fb02 f303 	mul.w	r3, r2, r3
 8016d50:	121b      	asrs	r3, r3, #8
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	e001      	b.n	8016d5a <map_blended+0x122>
 8016d56:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8016d5e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8016d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d64:	7f39      	ldrb	r1, [r7, #28]
 8016d66:	7e38      	ldrb	r0, [r7, #24]
 8016d68:	4798      	blx	r3
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	743b      	strb	r3, [r7, #16]
        for(y = 0; y < h; y++) {
 8016d6e:	2300      	movs	r3, #0
 8016d70:	633b      	str	r3, [r7, #48]	; 0x30
 8016d72:	e064      	b.n	8016e3e <map_blended+0x206>
            for(x = 0; x < w; x++) {
 8016d74:	2300      	movs	r3, #0
 8016d76:	637b      	str	r3, [r7, #52]	; 0x34
 8016d78:	e04b      	b.n	8016e12 <map_blended+0x1da>
                if(mask[x] == 0) continue;
 8016d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d7e:	4413      	add	r3, r2
 8016d80:	781b      	ldrb	r3, [r3, #0]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d041      	beq.n	8016e0a <map_blended+0x1d2>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8016d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d8a:	4413      	add	r3, r2
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	2bfc      	cmp	r3, #252	; 0xfc
 8016d90:	d80a      	bhi.n	8016da8 <map_blended+0x170>
 8016d92:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d98:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016d9a:	440a      	add	r2, r1
 8016d9c:	7812      	ldrb	r2, [r2, #0]
 8016d9e:	fb02 f303 	mul.w	r3, r2, r3
 8016da2:	121b      	asrs	r3, r3, #8
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	e001      	b.n	8016dac <map_blended+0x174>
 8016da8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016dac:	77fb      	strb	r3, [r7, #31]
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8016dae:	7e3a      	ldrb	r2, [r7, #24]
 8016db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016db2:	6839      	ldr	r1, [r7, #0]
 8016db4:	440b      	add	r3, r1
 8016db6:	781b      	ldrb	r3, [r3, #0]
 8016db8:	429a      	cmp	r2, r3
 8016dba:	d10b      	bne.n	8016dd4 <map_blended+0x19c>
 8016dbc:	7f3a      	ldrb	r2, [r7, #28]
 8016dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dc0:	68f9      	ldr	r1, [r7, #12]
 8016dc2:	440b      	add	r3, r1
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	d104      	bne.n	8016dd4 <map_blended+0x19c>
 8016dca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8016dce:	7ffb      	ldrb	r3, [r7, #31]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d014      	beq.n	8016dfe <map_blended+0x1c6>
                    last_dest_color = dest_buf[x];
 8016dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dd6:	68fa      	ldr	r2, [r7, #12]
 8016dd8:	4413      	add	r3, r2
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 8016dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016de0:	683a      	ldr	r2, [r7, #0]
 8016de2:	4413      	add	r3, r2
 8016de4:	781b      	ldrb	r3, [r3, #0]
 8016de6:	763b      	strb	r3, [r7, #24]
                    last_opa = opa_tmp;
 8016de8:	7ffb      	ldrb	r3, [r7, #31]
 8016dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8016dee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8016df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016df4:	7f39      	ldrb	r1, [r7, #28]
 8016df6:	7e38      	ldrb	r0, [r7, #24]
 8016df8:	4798      	blx	r3
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	743b      	strb	r3, [r7, #16]
                }
                dest_buf[x] = last_res_color;
 8016dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e00:	68fa      	ldr	r2, [r7, #12]
 8016e02:	4413      	add	r3, r2
 8016e04:	7c3a      	ldrb	r2, [r7, #16]
 8016e06:	701a      	strb	r2, [r3, #0]
 8016e08:	e000      	b.n	8016e0c <map_blended+0x1d4>
                if(mask[x] == 0) continue;
 8016e0a:	bf00      	nop
            for(x = 0; x < w; x++) {
 8016e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e0e:	3301      	adds	r3, #1
 8016e10:	637b      	str	r3, [r7, #52]	; 0x34
 8016e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e16:	429a      	cmp	r2, r3
 8016e18:	dbaf      	blt.n	8016d7a <map_blended+0x142>
            }
            dest_buf += dest_stride;
 8016e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e1e:	68fa      	ldr	r2, [r7, #12]
 8016e20:	4413      	add	r3, r2
 8016e22:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 8016e24:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8016e28:	683a      	ldr	r2, [r7, #0]
 8016e2a:	4413      	add	r3, r2
 8016e2c:	603b      	str	r3, [r7, #0]
            mask += mask_stride;
 8016e2e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8016e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016e34:	4413      	add	r3, r2
 8016e36:	64bb      	str	r3, [r7, #72]	; 0x48
        for(y = 0; y < h; y++) {
 8016e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8016e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e40:	6a3b      	ldr	r3, [r7, #32]
 8016e42:	429a      	cmp	r2, r3
 8016e44:	db96      	blt.n	8016d74 <map_blended+0x13c>
 8016e46:	e000      	b.n	8016e4a <map_blended+0x212>
            return;
 8016e48:	bf00      	nop
        }
    }
}
 8016e4a:	3738      	adds	r7, #56	; 0x38
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}
 8016e50:	08016e5d 	.word	0x08016e5d
 8016e54:	08016ead 	.word	0x08016ead
 8016e58:	08016f63 	.word	0x08016f63

08016e5c <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b084      	sub	sp, #16
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	7138      	strb	r0, [r7, #4]
 8016e64:	7039      	strb	r1, [r7, #0]
 8016e66:	4613      	mov	r3, r2
 8016e68:	70fb      	strb	r3, [r7, #3]

    if(opa <= LV_OPA_MIN) return bg;
 8016e6a:	78fb      	ldrb	r3, [r7, #3]
 8016e6c:	2b02      	cmp	r3, #2
 8016e6e:	d801      	bhi.n	8016e74 <color_blend_true_color_additive+0x18>
 8016e70:	783b      	ldrb	r3, [r7, #0]
 8016e72:	e017      	b.n	8016ea4 <color_blend_true_color_additive+0x48>

    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
 8016e74:	783b      	ldrb	r3, [r7, #0]
 8016e76:	461a      	mov	r2, r3
 8016e78:	793b      	ldrb	r3, [r7, #4]
 8016e7a:	4413      	add	r3, r2
 8016e7c:	60fb      	str	r3, [r7, #12]
    fg.full = LV_MIN(tmp, 1);
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	bf14      	ite	ne
 8016e84:	2301      	movne	r3, #1
 8016e86:	2300      	moveq	r3, #0
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	713b      	strb	r3, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 8016e8c:	78fb      	ldrb	r3, [r7, #3]
 8016e8e:	2bff      	cmp	r3, #255	; 0xff
 8016e90:	d101      	bne.n	8016e96 <color_blend_true_color_additive+0x3a>
 8016e92:	793b      	ldrb	r3, [r7, #4]
 8016e94:	e006      	b.n	8016ea4 <color_blend_true_color_additive+0x48>

    return lv_color_mix(fg, bg, opa);
 8016e96:	78fb      	ldrb	r3, [r7, #3]
 8016e98:	461a      	mov	r2, r3
 8016e9a:	7839      	ldrb	r1, [r7, #0]
 8016e9c:	7938      	ldrb	r0, [r7, #4]
 8016e9e:	f7fe fdc2 	bl	8015a26 <lv_color_mix>
 8016ea2:	4603      	mov	r3, r0
}
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	3710      	adds	r7, #16
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}

08016eac <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b084      	sub	sp, #16
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	7138      	strb	r0, [r7, #4]
 8016eb4:	7039      	strb	r1, [r7, #0]
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 8016eba:	78fb      	ldrb	r3, [r7, #3]
 8016ebc:	2b02      	cmp	r3, #2
 8016ebe:	d801      	bhi.n	8016ec4 <color_blend_true_color_subtractive+0x18>
 8016ec0:	783b      	ldrb	r3, [r7, #0]
 8016ec2:	e04a      	b.n	8016f5a <color_blend_true_color_subtractive+0xae>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 8016ec4:	783b      	ldrb	r3, [r7, #0]
 8016ec6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016eca:	b2db      	uxtb	r3, r3
 8016ecc:	461a      	mov	r2, r3
 8016ece:	793b      	ldrb	r3, [r7, #4]
 8016ed0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	1ad3      	subs	r3, r2, r3
 8016ed8:	60fb      	str	r3, [r7, #12]
    fg.ch.red = LV_MAX(tmp, 0);
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ee0:	f003 0301 	and.w	r3, r3, #1
 8016ee4:	b2da      	uxtb	r2, r3
 8016ee6:	793b      	ldrb	r3, [r7, #4]
 8016ee8:	f362 0300 	bfi	r3, r2, #0, #1
 8016eec:	713b      	strb	r3, [r7, #4]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 8016eee:	783b      	ldrb	r3, [r7, #0]
 8016ef0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016ef4:	b2db      	uxtb	r3, r3
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	793b      	ldrb	r3, [r7, #4]
 8016efa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	1ad3      	subs	r3, r2, r3
 8016f02:	60fb      	str	r3, [r7, #12]
    fg.ch.green = LV_MAX(tmp, 0);
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f0a:	f003 0301 	and.w	r3, r3, #1
 8016f0e:	b2da      	uxtb	r2, r3
 8016f10:	793b      	ldrb	r3, [r7, #4]
 8016f12:	f362 0300 	bfi	r3, r2, #0, #1
 8016f16:	713b      	strb	r3, [r7, #4]
    tmp = LV_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 8016f18:	783b      	ldrb	r3, [r7, #0]
 8016f1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016f1e:	b2db      	uxtb	r3, r3
 8016f20:	461a      	mov	r2, r3
 8016f22:	793b      	ldrb	r3, [r7, #4]
 8016f24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016f28:	b2db      	uxtb	r3, r3
 8016f2a:	1ad3      	subs	r3, r2, r3
 8016f2c:	60fb      	str	r3, [r7, #12]
    fg.ch.blue = LV_MAX(tmp, 0);
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f34:	f003 0301 	and.w	r3, r3, #1
 8016f38:	b2da      	uxtb	r2, r3
 8016f3a:	793b      	ldrb	r3, [r7, #4]
 8016f3c:	f362 0300 	bfi	r3, r2, #0, #1
 8016f40:	713b      	strb	r3, [r7, #4]

    if(opa == LV_OPA_COVER) return fg;
 8016f42:	78fb      	ldrb	r3, [r7, #3]
 8016f44:	2bff      	cmp	r3, #255	; 0xff
 8016f46:	d101      	bne.n	8016f4c <color_blend_true_color_subtractive+0xa0>
 8016f48:	793b      	ldrb	r3, [r7, #4]
 8016f4a:	e006      	b.n	8016f5a <color_blend_true_color_subtractive+0xae>

    return lv_color_mix(fg, bg, opa);
 8016f4c:	78fb      	ldrb	r3, [r7, #3]
 8016f4e:	461a      	mov	r2, r3
 8016f50:	7839      	ldrb	r1, [r7, #0]
 8016f52:	7938      	ldrb	r0, [r7, #4]
 8016f54:	f7fe fd67 	bl	8015a26 <lv_color_mix>
 8016f58:	4603      	mov	r3, r0
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	3710      	adds	r7, #16
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bd80      	pop	{r7, pc}

08016f62 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8016f62:	b580      	push	{r7, lr}
 8016f64:	b082      	sub	sp, #8
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	7138      	strb	r0, [r7, #4]
 8016f6a:	7039      	strb	r1, [r7, #0]
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 8016f70:	78fb      	ldrb	r3, [r7, #3]
 8016f72:	2b02      	cmp	r3, #2
 8016f74:	d801      	bhi.n	8016f7a <color_blend_true_color_multiply+0x18>
 8016f76:	783b      	ldrb	r3, [r7, #0]
 8016f78:	e00b      	b.n	8016f92 <color_blend_true_color_multiply+0x30>
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 8016f7a:	78fb      	ldrb	r3, [r7, #3]
 8016f7c:	2bff      	cmp	r3, #255	; 0xff
 8016f7e:	d101      	bne.n	8016f84 <color_blend_true_color_multiply+0x22>
 8016f80:	793b      	ldrb	r3, [r7, #4]
 8016f82:	e006      	b.n	8016f92 <color_blend_true_color_multiply+0x30>

    return lv_color_mix(fg, bg, opa);
 8016f84:	78fb      	ldrb	r3, [r7, #3]
 8016f86:	461a      	mov	r2, r3
 8016f88:	7839      	ldrb	r1, [r7, #0]
 8016f8a:	7938      	ldrb	r0, [r7, #4]
 8016f8c:	f7fe fd4b 	bl	8015a26 <lv_color_mix>
 8016f90:	4603      	mov	r3, r0
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	3708      	adds	r7, #8
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}

08016f9a <lv_color_to32>:
{
 8016f9a:	b480      	push	{r7}
 8016f9c:	b083      	sub	sp, #12
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	7138      	strb	r0, [r7, #4]
    if(color.full == 0)
 8016fa2:	793b      	ldrb	r3, [r7, #4]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d102      	bne.n	8016fae <lv_color_to32+0x14>
        return 0xFF000000;
 8016fa8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8016fac:	e001      	b.n	8016fb2 <lv_color_to32+0x18>
        return 0xFFFFFFFF;
 8016fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	370c      	adds	r7, #12
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbc:	4770      	bx	lr

08016fbe <compute_key>:
    const void * ptr;
    const uint32_t value;
};

static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
{
 8016fbe:	b480      	push	{r7}
 8016fc0:	b085      	sub	sp, #20
 8016fc2:	af00      	add	r7, sp, #0
 8016fc4:	6078      	str	r0, [r7, #4]
 8016fc6:	460b      	mov	r3, r1
 8016fc8:	807b      	strh	r3, [r7, #2]
 8016fca:	4613      	mov	r3, r2
 8016fcc:	803b      	strh	r3, [r7, #0]
    union void_cast v;
    v.ptr = g;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	60fb      	str	r3, [r7, #12]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8016fd2:	68fa      	ldr	r2, [r7, #12]
 8016fd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016fd8:	4053      	eors	r3, r2
 8016fda:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016fde:	1052      	asrs	r2, r2, #1
 8016fe0:	b212      	sxth	r2, r2
 8016fe2:	4053      	eors	r3, r2
}
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	3714      	adds	r7, #20
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fee:	4770      	bx	lr

08016ff0 <get_cache_item_size>:

static size_t get_cache_item_size(lv_grad_t * c)
{
 8016ff0:	b480      	push	{r7}
 8016ff2:	b085      	sub	sp, #20
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016ffe:	3303      	adds	r3, #3
 8017000:	f023 0303 	bic.w	r3, r3, #3
 8017004:	3310      	adds	r3, #16
 8017006:	60fb      	str	r3, [r7, #12]
    s += ALIGN(c->size * sizeof(lv_color32_t));
#if LV_DITHER_ERROR_DIFFUSION == 1
    s += ALIGN(c->w * sizeof(lv_scolor24_t));
#endif
#endif
    return s;
 8017008:	68fb      	ldr	r3, [r7, #12]
}
 801700a:	4618      	mov	r0, r3
 801700c:	3714      	adds	r7, #20
 801700e:	46bd      	mov	sp, r7
 8017010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017014:	4770      	bx	lr
	...

08017018 <next_in_cache>:

static lv_grad_t * next_in_cache(lv_grad_t * item)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b084      	sub	sp, #16
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
    if(grad_cache_size == 0) return NULL;
 8017020:	4b0f      	ldr	r3, [pc, #60]	; (8017060 <next_in_cache+0x48>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d101      	bne.n	801702c <next_in_cache+0x14>
 8017028:	2300      	movs	r3, #0
 801702a:	e015      	b.n	8017058 <next_in_cache+0x40>

    if(item == NULL)
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d102      	bne.n	8017038 <next_in_cache+0x20>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 8017032:	4b0c      	ldr	r3, [pc, #48]	; (8017064 <next_in_cache+0x4c>)
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	e00f      	b.n	8017058 <next_in_cache+0x40>

    size_t s = get_cache_item_size(item);
 8017038:	6878      	ldr	r0, [r7, #4]
 801703a:	f7ff ffd9 	bl	8016ff0 <get_cache_item_size>
 801703e:	60f8      	str	r0, [r7, #12]
    /*Compute the size for this cache item*/
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8017040:	687a      	ldr	r2, [r7, #4]
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	441a      	add	r2, r3
 8017046:	4b08      	ldr	r3, [pc, #32]	; (8017068 <next_in_cache+0x50>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	429a      	cmp	r2, r3
 801704c:	d301      	bcc.n	8017052 <next_in_cache+0x3a>
 801704e:	2300      	movs	r3, #0
 8017050:	e002      	b.n	8017058 <next_in_cache+0x40>
    else return (lv_grad_t *)((uint8_t *)item + s);
 8017052:	687a      	ldr	r2, [r7, #4]
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	4413      	add	r3, r2
}
 8017058:	4618      	mov	r0, r3
 801705a:	3710      	adds	r7, #16
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	20000700 	.word	0x20000700
 8017064:	20000a3c 	.word	0x20000a3c
 8017068:	20000704 	.word	0x20000704

0801706c <iterate_cache>:

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b086      	sub	sp, #24
 8017070:	af00      	add	r7, sp, #0
 8017072:	60f8      	str	r0, [r7, #12]
 8017074:	60b9      	str	r1, [r7, #8]
 8017076:	607a      	str	r2, [r7, #4]
    lv_grad_t * first = next_in_cache(NULL);
 8017078:	2000      	movs	r0, #0
 801707a:	f7ff ffcd 	bl	8017018 <next_in_cache>
 801707e:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 8017080:	e012      	b.n	80170a8 <iterate_cache+0x3c>
        if((*func)(first, ctx) == LV_RES_OK) {
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	68b9      	ldr	r1, [r7, #8]
 8017086:	6978      	ldr	r0, [r7, #20]
 8017088:	4798      	blx	r3
 801708a:	4603      	mov	r3, r0
 801708c:	2b01      	cmp	r3, #1
 801708e:	d107      	bne.n	80170a0 <iterate_cache+0x34>
            if(out != NULL) *out = first;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d002      	beq.n	801709c <iterate_cache+0x30>
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	697a      	ldr	r2, [r7, #20]
 801709a:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 801709c:	2301      	movs	r3, #1
 801709e:	e00d      	b.n	80170bc <iterate_cache+0x50>
        }
        first = next_in_cache(first);
 80170a0:	6978      	ldr	r0, [r7, #20]
 80170a2:	f7ff ffb9 	bl	8017018 <next_in_cache>
 80170a6:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 80170a8:	697b      	ldr	r3, [r7, #20]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d005      	beq.n	80170ba <iterate_cache+0x4e>
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	685b      	ldr	r3, [r3, #4]
 80170b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d1e3      	bne.n	8017082 <iterate_cache+0x16>
    }
    return LV_RES_INV;
 80170ba:	2300      	movs	r3, #0
}
 80170bc:	4618      	mov	r0, r3
 80170be:	3718      	adds	r7, #24
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <find_oldest_item_life>:

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
 80170c4:	b480      	push	{r7}
 80170c6:	b085      	sub	sp, #20
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	60fb      	str	r3, [r7, #12]
    if(c->life < *min_life) *min_life = c->life;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80170da:	461a      	mov	r2, r3
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	429a      	cmp	r2, r3
 80170e2:	d206      	bcs.n	80170f2 <find_oldest_item_life+0x2e>
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80170ec:	461a      	mov	r2, r3
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	601a      	str	r2, [r3, #0]
    return LV_RES_INV;
 80170f2:	2300      	movs	r3, #0
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	3714      	adds	r7, #20
 80170f8:	46bd      	mov	sp, r7
 80170fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fe:	4770      	bx	lr

08017100 <free_item>:

static void free_item(lv_grad_t * c)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b086      	sub	sp, #24
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
    size_t size = get_cache_item_size(c);
 8017108:	6878      	ldr	r0, [r7, #4]
 801710a:	f7ff ff71 	bl	8016ff0 <get_cache_item_size>
 801710e:	6178      	str	r0, [r7, #20]
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8017110:	4b1d      	ldr	r3, [pc, #116]	; (8017188 <free_item+0x88>)
 8017112:	681a      	ldr	r2, [r3, #0]
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	1ad3      	subs	r3, r2, r3
 8017118:	461a      	mov	r2, r3
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	1ad3      	subs	r3, r2, r3
 801711e:	613b      	str	r3, [r7, #16]
    grad_cache_end -= size;
 8017120:	4b19      	ldr	r3, [pc, #100]	; (8017188 <free_item+0x88>)
 8017122:	681a      	ldr	r2, [r3, #0]
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	425b      	negs	r3, r3
 8017128:	4413      	add	r3, r2
 801712a:	4a17      	ldr	r2, [pc, #92]	; (8017188 <free_item+0x88>)
 801712c:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 801712e:	693b      	ldr	r3, [r7, #16]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d024      	beq.n	801717e <free_item+0x7e>
        uint8_t * old = (uint8_t *)c;
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	60fb      	str	r3, [r7, #12]
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 8017138:	687a      	ldr	r2, [r7, #4]
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	4413      	add	r3, r2
 801713e:	693a      	ldr	r2, [r7, #16]
 8017140:	4619      	mov	r1, r3
 8017142:	6878      	ldr	r0, [r7, #4]
 8017144:	f009 fcfa 	bl	8020b3c <lv_memcpy>
        /* Then need to fix all internal pointers too */
        while((uint8_t *)c != grad_cache_end) {
 8017148:	e00d      	b.n	8017166 <free_item+0x66>
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	689a      	ldr	r2, [r3, #8]
 801714e:	697b      	ldr	r3, [r7, #20]
 8017150:	425b      	negs	r3, r3
 8017152:	441a      	add	r2, r3
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	609a      	str	r2, [r3, #8]
            c->hmap = (lv_color32_t *)(((uint8_t *)c->hmap) - size);
#if LV_DITHER_ERROR_DIFFUSION == 1
            c->error_acc = (lv_scolor24_t *)(((uint8_t *)c->error_acc) - size);
#endif
#endif
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 8017158:	6878      	ldr	r0, [r7, #4]
 801715a:	f7ff ff49 	bl	8016ff0 <get_cache_item_size>
 801715e:	4602      	mov	r2, r0
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	4413      	add	r3, r2
 8017164:	607b      	str	r3, [r7, #4]
        while((uint8_t *)c != grad_cache_end) {
 8017166:	4b08      	ldr	r3, [pc, #32]	; (8017188 <free_item+0x88>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	687a      	ldr	r2, [r7, #4]
 801716c:	429a      	cmp	r2, r3
 801716e:	d1ec      	bne.n	801714a <free_item+0x4a>
        }
        lv_memset_00(old + next_items_size, size);
 8017170:	68fa      	ldr	r2, [r7, #12]
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	4413      	add	r3, r2
 8017176:	6979      	ldr	r1, [r7, #20]
 8017178:	4618      	mov	r0, r3
 801717a:	f009 ff85 	bl	8021088 <lv_memset_00>
    }
}
 801717e:	bf00      	nop
 8017180:	3718      	adds	r7, #24
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}
 8017186:	bf00      	nop
 8017188:	20000704 	.word	0x20000704

0801718c <kill_oldest_item>:

static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b084      	sub	sp, #16
 8017190:	af00      	add	r7, sp, #0
 8017192:	6078      	str	r0, [r7, #4]
 8017194:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	60fb      	str	r3, [r7, #12]
    if(c->life == *min_life) {
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	685b      	ldr	r3, [r3, #4]
 801719e:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80171a2:	461a      	mov	r2, r3
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	429a      	cmp	r2, r3
 80171aa:	d104      	bne.n	80171b6 <kill_oldest_item+0x2a>
        /*Found, let's kill it*/
        free_item(c);
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f7ff ffa7 	bl	8017100 <free_item>
        return LV_RES_OK;
 80171b2:	2301      	movs	r3, #1
 80171b4:	e000      	b.n	80171b8 <kill_oldest_item+0x2c>
    }
    return LV_RES_INV;
 80171b6:	2300      	movs	r3, #0
}
 80171b8:	4618      	mov	r0, r3
 80171ba:	3710      	adds	r7, #16
 80171bc:	46bd      	mov	sp, r7
 80171be:	bd80      	pop	{r7, pc}

080171c0 <find_item>:

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
 80171c0:	b480      	push	{r7}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
    uint32_t * k = (uint32_t *)ctx;
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	60fb      	str	r3, [r7, #12]
    if(c->key == *k) return LV_RES_OK;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	681a      	ldr	r2, [r3, #0]
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d101      	bne.n	80171de <find_item+0x1e>
 80171da:	2301      	movs	r3, #1
 80171dc:	e000      	b.n	80171e0 <find_item+0x20>
    return LV_RES_INV;
 80171de:	2300      	movs	r3, #0
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	3714      	adds	r7, #20
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr

080171ec <allocate_item>:

static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b088      	sub	sp, #32
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	460b      	mov	r3, r1
 80171f6:	807b      	strh	r3, [r7, #2]
 80171f8:	4613      	mov	r3, r2
 80171fa:	803b      	strh	r3, [r7, #0]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	795b      	ldrb	r3, [r3, #5]
 8017200:	f003 0307 	and.w	r3, r3, #7
 8017204:	b2db      	uxtb	r3, r3
 8017206:	2b02      	cmp	r3, #2
 8017208:	d102      	bne.n	8017210 <allocate_item+0x24>
 801720a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801720e:	e001      	b.n	8017214 <allocate_item+0x28>
 8017210:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017214:	82fb      	strh	r3, [r7, #22]
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 8017216:	f9b7 2000 	ldrsh.w	r2, [r7]
 801721a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801721e:	4293      	cmp	r3, r2
 8017220:	bfb8      	it	lt
 8017222:	4613      	movlt	r3, r2
 8017224:	82bb      	strh	r3, [r7, #20]
                                           no dithering is selected where it's used vertically */

    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8017226:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801722a:	3303      	adds	r3, #3
 801722c:	f023 0303 	bic.w	r3, r3, #3
 8017230:	3310      	adds	r3, #16
 8017232:	613b      	str	r3, [r7, #16]
#if LV_DITHER_ERROR_DIFFUSION == 1
    req_size += ALIGN(w * sizeof(lv_scolor24_t));
#endif
#endif

    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8017234:	4b49      	ldr	r3, [pc, #292]	; (801735c <allocate_item+0x170>)
 8017236:	681a      	ldr	r2, [r3, #0]
 8017238:	4b49      	ldr	r3, [pc, #292]	; (8017360 <allocate_item+0x174>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	1ad3      	subs	r3, r2, r3
 801723e:	61fb      	str	r3, [r7, #28]
    lv_grad_t * item = NULL;
 8017240:	2300      	movs	r3, #0
 8017242:	61bb      	str	r3, [r7, #24]
    if(req_size + act_size < grad_cache_size) {
 8017244:	693a      	ldr	r2, [r7, #16]
 8017246:	69fb      	ldr	r3, [r7, #28]
 8017248:	441a      	add	r2, r3
 801724a:	4b46      	ldr	r3, [pc, #280]	; (8017364 <allocate_item+0x178>)
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	429a      	cmp	r2, r3
 8017250:	d208      	bcs.n	8017264 <allocate_item+0x78>
        item = (lv_grad_t *)grad_cache_end;
 8017252:	4b42      	ldr	r3, [pc, #264]	; (801735c <allocate_item+0x170>)
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	61bb      	str	r3, [r7, #24]
        item->not_cached = 0;
 8017258:	69ba      	ldr	r2, [r7, #24]
 801725a:	79d3      	ldrb	r3, [r2, #7]
 801725c:	f36f 13c7 	bfc	r3, #7, #1
 8017260:	71d3      	strb	r3, [r2, #7]
 8017262:	e03e      	b.n	80172e2 <allocate_item+0xf6>
    }
    else {
        /*Need to evict items from cache until we find enough space to allocate this one */
        if(req_size <= grad_cache_size) {
 8017264:	4b3f      	ldr	r3, [pc, #252]	; (8017364 <allocate_item+0x178>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	693a      	ldr	r2, [r7, #16]
 801726a:	429a      	cmp	r2, r3
 801726c:	d827      	bhi.n	80172be <allocate_item+0xd2>
            while(act_size + req_size > grad_cache_size) {
 801726e:	e016      	b.n	801729e <allocate_item+0xb2>
                uint32_t oldest_life = UINT32_MAX;
 8017270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017274:	60bb      	str	r3, [r7, #8]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8017276:	f107 0308 	add.w	r3, r7, #8
 801727a:	2200      	movs	r2, #0
 801727c:	4619      	mov	r1, r3
 801727e:	483a      	ldr	r0, [pc, #232]	; (8017368 <allocate_item+0x17c>)
 8017280:	f7ff fef4 	bl	801706c <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8017284:	f107 0308 	add.w	r3, r7, #8
 8017288:	2200      	movs	r2, #0
 801728a:	4619      	mov	r1, r3
 801728c:	4837      	ldr	r0, [pc, #220]	; (801736c <allocate_item+0x180>)
 801728e:	f7ff feed 	bl	801706c <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8017292:	4b32      	ldr	r3, [pc, #200]	; (801735c <allocate_item+0x170>)
 8017294:	681a      	ldr	r2, [r3, #0]
 8017296:	4b32      	ldr	r3, [pc, #200]	; (8017360 <allocate_item+0x174>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	1ad3      	subs	r3, r2, r3
 801729c:	61fb      	str	r3, [r7, #28]
            while(act_size + req_size > grad_cache_size) {
 801729e:	69fa      	ldr	r2, [r7, #28]
 80172a0:	693b      	ldr	r3, [r7, #16]
 80172a2:	441a      	add	r2, r3
 80172a4:	4b2f      	ldr	r3, [pc, #188]	; (8017364 <allocate_item+0x178>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d8e1      	bhi.n	8017270 <allocate_item+0x84>
            }
            item = (lv_grad_t *)grad_cache_end;
 80172ac:	4b2b      	ldr	r3, [pc, #172]	; (801735c <allocate_item+0x170>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	61bb      	str	r3, [r7, #24]
            item->not_cached = 0;
 80172b2:	69ba      	ldr	r2, [r7, #24]
 80172b4:	79d3      	ldrb	r3, [r2, #7]
 80172b6:	f36f 13c7 	bfc	r3, #7, #1
 80172ba:	71d3      	strb	r3, [r2, #7]
 80172bc:	e011      	b.n	80172e2 <allocate_item+0xf6>
        }
        else {
            /*The cache is too small. Allocate the item manually and free it later.*/
            item = lv_mem_alloc(req_size);
 80172be:	6938      	ldr	r0, [r7, #16]
 80172c0:	f009 faae 	bl	8020820 <lv_mem_alloc>
 80172c4:	61b8      	str	r0, [r7, #24]
            LV_ASSERT_MALLOC(item);
 80172c6:	69bb      	ldr	r3, [r7, #24]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d100      	bne.n	80172ce <allocate_item+0xe2>
 80172cc:	e7fe      	b.n	80172cc <allocate_item+0xe0>
            if(item == NULL) return NULL;
 80172ce:	69bb      	ldr	r3, [r7, #24]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d101      	bne.n	80172d8 <allocate_item+0xec>
 80172d4:	2300      	movs	r3, #0
 80172d6:	e03c      	b.n	8017352 <allocate_item+0x166>
            item->not_cached = 1;
 80172d8:	69ba      	ldr	r2, [r7, #24]
 80172da:	79d3      	ldrb	r3, [r2, #7]
 80172dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172e0:	71d3      	strb	r3, [r2, #7]
        }
    }

    item->key = compute_key(g, size, w);
 80172e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80172e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80172ea:	4619      	mov	r1, r3
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f7ff fe66 	bl	8016fbe <compute_key>
 80172f2:	4602      	mov	r2, r0
 80172f4:	69bb      	ldr	r3, [r7, #24]
 80172f6:	601a      	str	r2, [r3, #0]
    item->life = 1;
 80172f8:	69ba      	ldr	r2, [r7, #24]
 80172fa:	6853      	ldr	r3, [r2, #4]
 80172fc:	2101      	movs	r1, #1
 80172fe:	f361 031d 	bfi	r3, r1, #0, #30
 8017302:	6053      	str	r3, [r2, #4]
    item->filled = 0;
 8017304:	69ba      	ldr	r2, [r7, #24]
 8017306:	79d3      	ldrb	r3, [r2, #7]
 8017308:	f36f 1386 	bfc	r3, #6, #1
 801730c:	71d3      	strb	r3, [r2, #7]
    item->alloc_size = map_size;
 801730e:	69bb      	ldr	r3, [r7, #24]
 8017310:	8aba      	ldrh	r2, [r7, #20]
 8017312:	819a      	strh	r2, [r3, #12]
    item->size = size;
 8017314:	69bb      	ldr	r3, [r7, #24]
 8017316:	8afa      	ldrh	r2, [r7, #22]
 8017318:	81da      	strh	r2, [r3, #14]
    if(item->not_cached) {
 801731a:	69bb      	ldr	r3, [r7, #24]
 801731c:	79db      	ldrb	r3, [r3, #7]
 801731e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017322:	b2db      	uxtb	r3, r3
 8017324:	2b00      	cmp	r3, #0
 8017326:	d007      	beq.n	8017338 <allocate_item+0x14c>
        uint8_t * p = (uint8_t *)item;
 8017328:	69bb      	ldr	r3, [r7, #24]
 801732a:	60fb      	str	r3, [r7, #12]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	f103 0210 	add.w	r2, r3, #16
 8017332:	69bb      	ldr	r3, [r7, #24]
 8017334:	609a      	str	r2, [r3, #8]
 8017336:	e00b      	b.n	8017350 <allocate_item+0x164>
        item->w = w;
#endif
#endif
    }
    else {
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8017338:	4b08      	ldr	r3, [pc, #32]	; (801735c <allocate_item+0x170>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	f103 0210 	add.w	r2, r3, #16
 8017340:	69bb      	ldr	r3, [r7, #24]
 8017342:	609a      	str	r2, [r3, #8]
        item->error_acc = (lv_scolor24_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_grad_color_t)) +
                                            ALIGN(map_size * sizeof(lv_color_t)));
        item->w = w;
#endif
#endif
        grad_cache_end += req_size;
 8017344:	4b05      	ldr	r3, [pc, #20]	; (801735c <allocate_item+0x170>)
 8017346:	681a      	ldr	r2, [r3, #0]
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	4413      	add	r3, r2
 801734c:	4a03      	ldr	r2, [pc, #12]	; (801735c <allocate_item+0x170>)
 801734e:	6013      	str	r3, [r2, #0]
    }
    return item;
 8017350:	69bb      	ldr	r3, [r7, #24]
}
 8017352:	4618      	mov	r0, r3
 8017354:	3720      	adds	r7, #32
 8017356:	46bd      	mov	sp, r7
 8017358:	bd80      	pop	{r7, pc}
 801735a:	bf00      	nop
 801735c:	20000704 	.word	0x20000704
 8017360:	20000a3c 	.word	0x20000a3c
 8017364:	20000700 	.word	0x20000700
 8017368:	080170c5 	.word	0x080170c5
 801736c:	0801718d 	.word	0x0801718d

08017370 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8017378:	4b10      	ldr	r3, [pc, #64]	; (80173bc <lv_gradient_set_cache_size+0x4c>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	4618      	mov	r0, r3
 801737e:	f009 fa7f 	bl	8020880 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 8017382:	6878      	ldr	r0, [r7, #4]
 8017384:	f009 fa4c 	bl	8020820 <lv_mem_alloc>
 8017388:	4603      	mov	r3, r0
 801738a:	4a0c      	ldr	r2, [pc, #48]	; (80173bc <lv_gradient_set_cache_size+0x4c>)
 801738c:	6013      	str	r3, [r2, #0]
 801738e:	4b0b      	ldr	r3, [pc, #44]	; (80173bc <lv_gradient_set_cache_size+0x4c>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	4a0b      	ldr	r2, [pc, #44]	; (80173c0 <lv_gradient_set_cache_size+0x50>)
 8017394:	6013      	str	r3, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8017396:	4b09      	ldr	r3, [pc, #36]	; (80173bc <lv_gradient_set_cache_size+0x4c>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d100      	bne.n	80173a0 <lv_gradient_set_cache_size+0x30>
 801739e:	e7fe      	b.n	801739e <lv_gradient_set_cache_size+0x2e>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 80173a0:	4b06      	ldr	r3, [pc, #24]	; (80173bc <lv_gradient_set_cache_size+0x4c>)
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	6879      	ldr	r1, [r7, #4]
 80173a6:	4618      	mov	r0, r3
 80173a8:	f009 fe6e 	bl	8021088 <lv_memset_00>
    grad_cache_size = max_bytes;
 80173ac:	4a05      	ldr	r2, [pc, #20]	; (80173c4 <lv_gradient_set_cache_size+0x54>)
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	6013      	str	r3, [r2, #0]
}
 80173b2:	bf00      	nop
 80173b4:	3708      	adds	r7, #8
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
 80173ba:	bf00      	nop
 80173bc:	20000a3c 	.word	0x20000a3c
 80173c0:	20000704 	.word	0x20000704
 80173c4:	20000700 	.word	0x20000700

080173c8 <lv_gradient_get>:

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 80173c8:	b590      	push	{r4, r7, lr}
 80173ca:	b087      	sub	sp, #28
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
 80173d0:	460b      	mov	r3, r1
 80173d2:	807b      	strh	r3, [r7, #2]
 80173d4:	4613      	mov	r3, r2
 80173d6:	803b      	strh	r3, [r7, #0]
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	795b      	ldrb	r3, [r3, #5]
 80173dc:	f003 0307 	and.w	r3, r3, #7
 80173e0:	b2db      	uxtb	r3, r3
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d101      	bne.n	80173ea <lv_gradient_get+0x22>
 80173e6:	2300      	movs	r3, #0
 80173e8:	e06d      	b.n	80174c6 <lv_gradient_get+0xfe>

    /* Step 0: Check if the cache exist (else create it) */
    static bool inited = false;
    if(!inited) {
 80173ea:	4b39      	ldr	r3, [pc, #228]	; (80174d0 <lv_gradient_get+0x108>)
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	f083 0301 	eor.w	r3, r3, #1
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d005      	beq.n	8017404 <lv_gradient_get+0x3c>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 80173f8:	2000      	movs	r0, #0
 80173fa:	f7ff ffb9 	bl	8017370 <lv_gradient_set_cache_size>
        inited = true;
 80173fe:	4b34      	ldr	r3, [pc, #208]	; (80174d0 <lv_gradient_get+0x108>)
 8017400:	2201      	movs	r2, #1
 8017402:	701a      	strb	r2, [r3, #0]
    }

    /* Step 1: Search cache for the given key */
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	795b      	ldrb	r3, [r3, #5]
 8017408:	f003 0307 	and.w	r3, r3, #7
 801740c:	b2db      	uxtb	r3, r3
 801740e:	2b02      	cmp	r3, #2
 8017410:	d102      	bne.n	8017418 <lv_gradient_get+0x50>
 8017412:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017416:	e001      	b.n	801741c <lv_gradient_get+0x54>
 8017418:	f9b7 3000 	ldrsh.w	r3, [r7]
 801741c:	82bb      	strh	r3, [r7, #20]
    uint32_t key = compute_key(g, size, w);
 801741e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017422:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017426:	4619      	mov	r1, r3
 8017428:	6878      	ldr	r0, [r7, #4]
 801742a:	f7ff fdc8 	bl	8016fbe <compute_key>
 801742e:	4603      	mov	r3, r0
 8017430:	613b      	str	r3, [r7, #16]
    lv_grad_t * item = NULL;
 8017432:	2300      	movs	r3, #0
 8017434:	60fb      	str	r3, [r7, #12]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8017436:	f107 020c 	add.w	r2, r7, #12
 801743a:	f107 0310 	add.w	r3, r7, #16
 801743e:	4619      	mov	r1, r3
 8017440:	4824      	ldr	r0, [pc, #144]	; (80174d4 <lv_gradient_get+0x10c>)
 8017442:	f7ff fe13 	bl	801706c <iterate_cache>
 8017446:	4603      	mov	r3, r0
 8017448:	2b01      	cmp	r3, #1
 801744a:	d10c      	bne.n	8017466 <lv_gradient_get+0x9e>
        item->life++; /* Don't forget to bump the counter */
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	685a      	ldr	r2, [r3, #4]
 8017450:	f3c2 021d 	ubfx	r2, r2, #0, #30
 8017454:	1c51      	adds	r1, r2, #1
 8017456:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 801745a:	685a      	ldr	r2, [r3, #4]
 801745c:	f361 021d 	bfi	r2, r1, #0, #30
 8017460:	605a      	str	r2, [r3, #4]
        return item;
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	e02f      	b.n	80174c6 <lv_gradient_get+0xfe>
    }

    /* Step 2: Need to allocate an item for it */
    item = allocate_item(g, w, h);
 8017466:	f9b7 2000 	ldrsh.w	r2, [r7]
 801746a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801746e:	4619      	mov	r1, r3
 8017470:	6878      	ldr	r0, [r7, #4]
 8017472:	f7ff febb 	bl	80171ec <allocate_item>
 8017476:	4603      	mov	r3, r0
 8017478:	60fb      	str	r3, [r7, #12]
    if(item == NULL) {
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d101      	bne.n	8017484 <lv_gradient_get+0xbc>
        LV_LOG_WARN("Faild to allcoate item for teh gradient");
        return item;
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	e020      	b.n	80174c6 <lv_gradient_get+0xfe>
    }
#if LV_DITHER_ERROR_DIFFUSION == 1
    lv_memset_00(item->error_acc, w * sizeof(lv_scolor24_t));
#endif
#else
    for(lv_coord_t i = 0; i < item->size; i++) {
 8017484:	2300      	movs	r3, #0
 8017486:	82fb      	strh	r3, [r7, #22]
 8017488:	e015      	b.n	80174b6 <lv_gradient_get+0xee>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	689a      	ldr	r2, [r3, #8]
 8017494:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017498:	18d4      	adds	r4, r2, r3
 801749a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801749e:	461a      	mov	r2, r3
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f000 f819 	bl	80174d8 <lv_gradient_calculate>
 80174a6:	4603      	mov	r3, r0
 80174a8:	7023      	strb	r3, [r4, #0]
    for(lv_coord_t i = 0; i < item->size; i++) {
 80174aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	3301      	adds	r3, #1
 80174b2:	b29b      	uxth	r3, r3
 80174b4:	82fb      	strh	r3, [r7, #22]
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80174bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80174c0:	429a      	cmp	r2, r3
 80174c2:	dbe2      	blt.n	801748a <lv_gradient_get+0xc2>
    }
#endif

    return item;
 80174c4:	68fb      	ldr	r3, [r7, #12]
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	371c      	adds	r7, #28
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd90      	pop	{r4, r7, pc}
 80174ce:	bf00      	nop
 80174d0:	20000708 	.word	0x20000708
 80174d4:	080171c1 	.word	0x080171c1

080174d8 <lv_gradient_calculate>:

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b08c      	sub	sp, #48	; 0x30
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
 80174e0:	460b      	mov	r3, r1
 80174e2:	807b      	strh	r3, [r7, #2]
 80174e4:	4613      	mov	r3, r2
 80174e6:	803b      	strh	r3, [r7, #0]
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	785b      	ldrb	r3, [r3, #1]
 80174ec:	461a      	mov	r2, r3
 80174ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80174f2:	fb02 f303 	mul.w	r3, r2, r3
 80174f6:	121b      	asrs	r3, r3, #8
 80174f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(frac <= min) {
 80174fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80174fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017500:	429a      	cmp	r2, r3
 8017502:	db04      	blt.n	801750e <lv_gradient_calculate+0x36>
        GRAD_CONV(tmp, dsc->stops[0].color);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	763b      	strb	r3, [r7, #24]
        return tmp;
 801750a:	7e3b      	ldrb	r3, [r7, #24]
 801750c:	e0c6      	b.n	801769c <lv_gradient_calculate+0x1c4>
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	791b      	ldrb	r3, [r3, #4]
 8017512:	3b01      	subs	r3, #1
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	005b      	lsls	r3, r3, #1
 8017518:	4413      	add	r3, r2
 801751a:	785b      	ldrb	r3, [r3, #1]
 801751c:	461a      	mov	r2, r3
 801751e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017522:	fb02 f303 	mul.w	r3, r2, r3
 8017526:	121b      	asrs	r3, r3, #8
 8017528:	623b      	str	r3, [r7, #32]
    if(frac >= max) {
 801752a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801752e:	6a3a      	ldr	r2, [r7, #32]
 8017530:	429a      	cmp	r2, r3
 8017532:	dc08      	bgt.n	8017546 <lv_gradient_calculate+0x6e>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	791b      	ldrb	r3, [r3, #4]
 8017538:	1e5a      	subs	r2, r3, #1
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8017540:	763b      	strb	r3, [r7, #24]
        return tmp;
 8017542:	7e3b      	ldrb	r3, [r7, #24]
 8017544:	e0aa      	b.n	801769c <lv_gradient_calculate+0x1c4>
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
 8017546:	2300      	movs	r3, #0
 8017548:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 801754a:	2301      	movs	r3, #1
 801754c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017550:	e049      	b.n	80175e6 <lv_gradient_calculate+0x10e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 8017552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017556:	687a      	ldr	r2, [r7, #4]
 8017558:	005b      	lsls	r3, r3, #1
 801755a:	4413      	add	r3, r2
 801755c:	785b      	ldrb	r3, [r3, #1]
 801755e:	461a      	mov	r2, r3
 8017560:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017564:	fb02 f303 	mul.w	r3, r2, r3
 8017568:	121b      	asrs	r3, r3, #8
 801756a:	61fb      	str	r3, [r7, #28]
        if(frac <= cur) {
 801756c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017570:	69fa      	ldr	r2, [r7, #28]
 8017572:	429a      	cmp	r2, r3
 8017574:	db32      	blt.n	80175dc <lv_gradient_calculate+0x104>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 8017576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801757a:	1e5a      	subs	r2, r3, #1
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017582:	f7ff fd0a 	bl	8016f9a <lv_color_to32>
 8017586:	4603      	mov	r3, r0
 8017588:	617b      	str	r3, [r7, #20]
            two.full = lv_color_to32(dsc->stops[i].color);
 801758a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017594:	f7ff fd01 	bl	8016f9a <lv_color_to32>
 8017598:	4603      	mov	r3, r0
 801759a:	613b      	str	r3, [r7, #16]
            min = (dsc->stops[i - 1].frac * range) >> 8;
 801759c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175a0:	3b01      	subs	r3, #1
 80175a2:	687a      	ldr	r2, [r7, #4]
 80175a4:	005b      	lsls	r3, r3, #1
 80175a6:	4413      	add	r3, r2
 80175a8:	785b      	ldrb	r3, [r3, #1]
 80175aa:	461a      	mov	r2, r3
 80175ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80175b0:	fb02 f303 	mul.w	r3, r2, r3
 80175b4:	121b      	asrs	r3, r3, #8
 80175b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            max = (dsc->stops[i].frac * range) >> 8;
 80175b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175bc:	687a      	ldr	r2, [r7, #4]
 80175be:	005b      	lsls	r3, r3, #1
 80175c0:	4413      	add	r3, r2
 80175c2:	785b      	ldrb	r3, [r3, #1]
 80175c4:	461a      	mov	r2, r3
 80175c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80175ca:	fb02 f303 	mul.w	r3, r2, r3
 80175ce:	121b      	asrs	r3, r3, #8
 80175d0:	623b      	str	r3, [r7, #32]
            d = max - min;
 80175d2:	6a3a      	ldr	r2, [r7, #32]
 80175d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d6:	1ad3      	subs	r3, r2, r3
 80175d8:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 80175da:	e00a      	b.n	80175f2 <lv_gradient_calculate+0x11a>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 80175dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175e0:	3301      	adds	r3, #1
 80175e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	791b      	ldrb	r3, [r3, #4]
 80175ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d3af      	bcc.n	8017552 <lv_gradient_calculate+0x7a>
        }
    }

    LV_ASSERT(d != 0);
 80175f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d100      	bne.n	80175fa <lv_gradient_calculate+0x122>
 80175f8:	e7fe      	b.n	80175f8 <lv_gradient_calculate+0x120>

    /*Then interpolate*/
    frac -= min;
 80175fa:	883a      	ldrh	r2, [r7, #0]
 80175fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175fe:	b29b      	uxth	r3, r3
 8017600:	1ad3      	subs	r3, r2, r3
 8017602:	b29b      	uxth	r3, r3
 8017604:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (frac * 255) / d;
 8017606:	f9b7 2000 	ldrsh.w	r2, [r7]
 801760a:	4613      	mov	r3, r2
 801760c:	021b      	lsls	r3, r3, #8
 801760e:	1a9a      	subs	r2, r3, r2
 8017610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017612:	fb92 f3f3 	sdiv	r3, r2, r3
 8017616:	76fb      	strb	r3, [r7, #27]
    lv_opa_t imix = 255 - mix;
 8017618:	7efb      	ldrb	r3, [r7, #27]
 801761a:	43db      	mvns	r3, r3
 801761c:	76bb      	strb	r3, [r7, #26]

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 801761e:	7c3b      	ldrb	r3, [r7, #16]
 8017620:	461a      	mov	r2, r3
 8017622:	7efb      	ldrb	r3, [r7, #27]
 8017624:	fb03 f202 	mul.w	r2, r3, r2
 8017628:	7d3b      	ldrb	r3, [r7, #20]
 801762a:	4619      	mov	r1, r3
 801762c:	7ebb      	ldrb	r3, [r7, #26]
 801762e:	fb01 f303 	mul.w	r3, r1, r3
 8017632:	4413      	add	r3, r2
 8017634:	461a      	mov	r2, r3
 8017636:	4613      	mov	r3, r2
 8017638:	021b      	lsls	r3, r3, #8
 801763a:	4413      	add	r3, r2
 801763c:	01db      	lsls	r3, r3, #7
 801763e:	4413      	add	r3, r2
 8017640:	0f9b      	lsrs	r3, r3, #30
 8017642:	b2d9      	uxtb	r1, r3
 8017644:	7c7b      	ldrb	r3, [r7, #17]
 8017646:	461a      	mov	r2, r3
 8017648:	7efb      	ldrb	r3, [r7, #27]
 801764a:	fb03 f202 	mul.w	r2, r3, r2
 801764e:	7d7b      	ldrb	r3, [r7, #21]
 8017650:	4618      	mov	r0, r3
 8017652:	7ebb      	ldrb	r3, [r7, #26]
 8017654:	fb00 f303 	mul.w	r3, r0, r3
 8017658:	4413      	add	r3, r2
 801765a:	461a      	mov	r2, r3
 801765c:	4613      	mov	r3, r2
 801765e:	021b      	lsls	r3, r3, #8
 8017660:	4413      	add	r3, r2
 8017662:	01db      	lsls	r3, r3, #7
 8017664:	4413      	add	r3, r2
 8017666:	0f9b      	lsrs	r3, r3, #30
 8017668:	b2db      	uxtb	r3, r3
 801766a:	430b      	orrs	r3, r1
 801766c:	b2d9      	uxtb	r1, r3
 801766e:	7cbb      	ldrb	r3, [r7, #18]
 8017670:	461a      	mov	r2, r3
 8017672:	7efb      	ldrb	r3, [r7, #27]
 8017674:	fb03 f202 	mul.w	r2, r3, r2
 8017678:	7dbb      	ldrb	r3, [r7, #22]
 801767a:	4618      	mov	r0, r3
 801767c:	7ebb      	ldrb	r3, [r7, #26]
 801767e:	fb00 f303 	mul.w	r3, r0, r3
 8017682:	4413      	add	r3, r2
 8017684:	461a      	mov	r2, r3
 8017686:	4613      	mov	r3, r2
 8017688:	021b      	lsls	r3, r3, #8
 801768a:	4413      	add	r3, r2
 801768c:	01db      	lsls	r3, r3, #7
 801768e:	4413      	add	r3, r2
 8017690:	0f9b      	lsrs	r3, r3, #30
 8017692:	b2db      	uxtb	r3, r3
 8017694:	430b      	orrs	r3, r1
 8017696:	b2db      	uxtb	r3, r3
 8017698:	733b      	strb	r3, [r7, #12]
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
 801769a:	7b3b      	ldrb	r3, [r7, #12]
}
 801769c:	4618      	mov	r0, r3
 801769e:	3730      	adds	r7, #48	; 0x30
 80176a0:	46bd      	mov	sp, r7
 80176a2:	bd80      	pop	{r7, pc}

080176a4 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b082      	sub	sp, #8
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
    if(grad->not_cached) {
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	79db      	ldrb	r3, [r3, #7]
 80176b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80176b4:	b2db      	uxtb	r3, r3
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d002      	beq.n	80176c0 <lv_gradient_cleanup+0x1c>
        lv_mem_free(grad);
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f009 f8e0 	bl	8020880 <lv_mem_free>
    }
}
 80176c0:	bf00      	nop
 80176c2:	3708      	adds	r7, #8
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}

080176c8 <lv_color_premult>:
{
 80176c8:	b480      	push	{r7}
 80176ca:	b083      	sub	sp, #12
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	7138      	strb	r0, [r7, #4]
 80176d0:	460b      	mov	r3, r1
 80176d2:	603a      	str	r2, [r7, #0]
 80176d4:	71fb      	strb	r3, [r7, #7]
    out[0] = LV_COLOR_GET_R(c);
 80176d6:	793b      	ldrb	r3, [r7, #4]
 80176d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80176dc:	b2db      	uxtb	r3, r3
 80176de:	b29a      	uxth	r2, r3
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 80176e4:	793b      	ldrb	r3, [r7, #4]
 80176e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80176ea:	b2da      	uxtb	r2, r3
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	3302      	adds	r3, #2
 80176f0:	b292      	uxth	r2, r2
 80176f2:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 80176f4:	793b      	ldrb	r3, [r7, #4]
 80176f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80176fa:	b2da      	uxtb	r2, r3
 80176fc:	683b      	ldr	r3, [r7, #0]
 80176fe:	3304      	adds	r3, #4
 8017700:	b292      	uxth	r2, r2
 8017702:	801a      	strh	r2, [r3, #0]
}
 8017704:	bf00      	nop
 8017706:	370c      	adds	r7, #12
 8017708:	46bd      	mov	sp, r7
 801770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770e:	4770      	bx	lr

08017710 <lv_color_mix_premult>:
{
 8017710:	b480      	push	{r7}
 8017712:	b085      	sub	sp, #20
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	7039      	strb	r1, [r7, #0]
 801771a:	4613      	mov	r3, r2
 801771c:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_R(c1, premult_c1[0]);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	881b      	ldrh	r3, [r3, #0]
 8017722:	f003 0301 	and.w	r3, r3, #1
 8017726:	b2da      	uxtb	r2, r3
 8017728:	7a3b      	ldrb	r3, [r7, #8]
 801772a:	f362 0300 	bfi	r3, r2, #0, #1
 801772e:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	3302      	adds	r3, #2
 8017734:	881b      	ldrh	r3, [r3, #0]
 8017736:	f003 0301 	and.w	r3, r3, #1
 801773a:	b2da      	uxtb	r2, r3
 801773c:	7a3b      	ldrb	r3, [r7, #8]
 801773e:	f362 0300 	bfi	r3, r2, #0, #1
 8017742:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	3304      	adds	r3, #4
 8017748:	881b      	ldrh	r3, [r3, #0]
 801774a:	f003 0301 	and.w	r3, r3, #1
 801774e:	b2da      	uxtb	r2, r3
 8017750:	7a3b      	ldrb	r3, [r7, #8]
 8017752:	f362 0300 	bfi	r3, r2, #0, #1
 8017756:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8017758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801775c:	2b00      	cmp	r3, #0
 801775e:	da01      	bge.n	8017764 <lv_color_mix_premult+0x54>
 8017760:	783b      	ldrb	r3, [r7, #0]
 8017762:	e000      	b.n	8017766 <lv_color_mix_premult+0x56>
 8017764:	7a3b      	ldrb	r3, [r7, #8]
 8017766:	733b      	strb	r3, [r7, #12]
    return ret;
 8017768:	7b3b      	ldrb	r3, [r7, #12]
}
 801776a:	4618      	mov	r0, r3
 801776c:	3714      	adds	r7, #20
 801776e:	46bd      	mov	sp, r7
 8017770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017774:	4770      	bx	lr

08017776 <lv_color_make>:
{
 8017776:	b480      	push	{r7}
 8017778:	b083      	sub	sp, #12
 801777a:	af00      	add	r7, sp, #0
 801777c:	4603      	mov	r3, r0
 801777e:	71fb      	strb	r3, [r7, #7]
 8017780:	460b      	mov	r3, r1
 8017782:	71bb      	strb	r3, [r7, #6]
 8017784:	4613      	mov	r3, r2
 8017786:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8017788:	797b      	ldrb	r3, [r7, #5]
 801778a:	09db      	lsrs	r3, r3, #7
 801778c:	b2da      	uxtb	r2, r3
 801778e:	79bb      	ldrb	r3, [r7, #6]
 8017790:	09db      	lsrs	r3, r3, #7
 8017792:	b2db      	uxtb	r3, r3
 8017794:	4313      	orrs	r3, r2
 8017796:	b2da      	uxtb	r2, r3
 8017798:	79fb      	ldrb	r3, [r7, #7]
 801779a:	09db      	lsrs	r3, r3, #7
 801779c:	b2db      	uxtb	r3, r3
 801779e:	4313      	orrs	r3, r2
 80177a0:	b2db      	uxtb	r3, r3
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	370c      	adds	r7, #12
 80177a6:	46bd      	mov	sp, r7
 80177a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ac:	4770      	bx	lr

080177ae <lv_color_hex>:
{
 80177ae:	b580      	push	{r7, lr}
 80177b0:	b082      	sub	sp, #8
 80177b2:	af00      	add	r7, sp, #0
 80177b4:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	0c1b      	lsrs	r3, r3, #16
 80177ba:	b2d8      	uxtb	r0, r3
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	0a1b      	lsrs	r3, r3, #8
 80177c0:	b2db      	uxtb	r3, r3
 80177c2:	687a      	ldr	r2, [r7, #4]
 80177c4:	b2d2      	uxtb	r2, r2
 80177c6:	4619      	mov	r1, r3
 80177c8:	f7ff ffd5 	bl	8017776 <lv_color_make>
 80177cc:	4603      	mov	r3, r0
}
 80177ce:	4618      	mov	r0, r3
 80177d0:	3708      	adds	r7, #8
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bd80      	pop	{r7, pc}

080177d6 <lv_area_copy>:
{
 80177d6:	b480      	push	{r7}
 80177d8:	b083      	sub	sp, #12
 80177da:	af00      	add	r7, sp, #0
 80177dc:	6078      	str	r0, [r7, #4]
 80177de:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80177e0:	683b      	ldr	r3, [r7, #0]
 80177e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 80177f4:	683b      	ldr	r3, [r7, #0]
 80177f6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	80da      	strh	r2, [r3, #6]
}
 8017808:	bf00      	nop
 801780a:	370c      	adds	r7, #12
 801780c:	46bd      	mov	sp, r7
 801780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017812:	4770      	bx	lr

08017814 <lv_area_get_width>:
{
 8017814:	b480      	push	{r7}
 8017816:	b083      	sub	sp, #12
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017822:	b29a      	uxth	r2, r3
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f9b3 3000 	ldrsh.w	r3, [r3]
 801782a:	b29b      	uxth	r3, r3
 801782c:	1ad3      	subs	r3, r2, r3
 801782e:	b29b      	uxth	r3, r3
 8017830:	3301      	adds	r3, #1
 8017832:	b29b      	uxth	r3, r3
 8017834:	b21b      	sxth	r3, r3
}
 8017836:	4618      	mov	r0, r3
 8017838:	370c      	adds	r7, #12
 801783a:	46bd      	mov	sp, r7
 801783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017840:	4770      	bx	lr

08017842 <lv_area_get_height>:
{
 8017842:	b480      	push	{r7}
 8017844:	b083      	sub	sp, #12
 8017846:	af00      	add	r7, sp, #0
 8017848:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017850:	b29a      	uxth	r2, r3
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017858:	b29b      	uxth	r3, r3
 801785a:	1ad3      	subs	r3, r2, r3
 801785c:	b29b      	uxth	r3, r3
 801785e:	3301      	adds	r3, #1
 8017860:	b29b      	uxth	r3, r3
 8017862:	b21b      	sxth	r3, r3
}
 8017864:	4618      	mov	r0, r3
 8017866:	370c      	adds	r7, #12
 8017868:	46bd      	mov	sp, r7
 801786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786e:	4770      	bx	lr

08017870 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 8017870:	b590      	push	{r4, r7, lr}
 8017872:	b0ad      	sub	sp, #180	; 0xb4
 8017874:	af06      	add	r7, sp, #24
 8017876:	60f8      	str	r0, [r7, #12]
 8017878:	60b9      	str	r1, [r7, #8]
 801787a:	607a      	str	r2, [r7, #4]
 801787c:	603b      	str	r3, [r7, #0]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	689a      	ldr	r2, [r3, #8]
 8017882:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017886:	4611      	mov	r1, r2
 8017888:	4618      	mov	r0, r3
 801788a:	f7ff ffa4 	bl	80177d6 <lv_area_copy>

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 801788e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017892:	4618      	mov	r0, r3
 8017894:	f7f8 feb8 	bl	8010608 <lv_draw_mask_is_any>
 8017898:	4603      	mov	r3, r0
 801789a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 801789e:	68bb      	ldr	r3, [r7, #8]
 80178a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d104      	bne.n	80178b2 <lv_draw_sw_img_decoded+0x42>
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	885b      	ldrh	r3, [r3, #2]
 80178ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80178b0:	d001      	beq.n	80178b6 <lv_draw_sw_img_decoded+0x46>
 80178b2:	2301      	movs	r3, #1
 80178b4:	e000      	b.n	80178b8 <lv_draw_sw_img_decoded+0x48>
 80178b6:	2300      	movs	r3, #0
 80178b8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80178bc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80178c0:	f003 0301 	and.w	r3, r3, #1
 80178c4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 80178c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80178cc:	211c      	movs	r1, #28
 80178ce:	4618      	mov	r0, r3
 80178d0:	f009 fbda 	bl	8021088 <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	7a9b      	ldrb	r3, [r3, #10]
 80178d8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 80178dc:	68bb      	ldr	r3, [r7, #8]
 80178de:	7adb      	ldrb	r3, [r3, #11]
 80178e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80178e4:	b2db      	uxtb	r3, r3
 80178e6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    blend_dsc.blend_area = &blend_area;
 80178ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80178ee:	633b      	str	r3, [r7, #48]	; 0x30

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 80178f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80178f4:	f083 0301 	eor.w	r3, r3, #1
 80178f8:	b2db      	uxtb	r3, r3
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d019      	beq.n	8017932 <lv_draw_sw_img_decoded+0xc2>
 80178fe:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8017902:	f083 0301 	eor.w	r3, r3, #1
 8017906:	b2db      	uxtb	r3, r3
 8017908:	2b00      	cmp	r3, #0
 801790a:	d012      	beq.n	8017932 <lv_draw_sw_img_decoded+0xc2>
 801790c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8017910:	2b04      	cmp	r3, #4
 8017912:	d10e      	bne.n	8017932 <lv_draw_sw_img_decoded+0xc2>
 8017914:	68bb      	ldr	r3, [r7, #8]
 8017916:	7a5b      	ldrb	r3, [r3, #9]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d10a      	bne.n	8017932 <lv_draw_sw_img_decoded+0xc2>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	637b      	str	r3, [r7, #52]	; 0x34

        blend_dsc.blend_area = coords;
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8017924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017928:	4619      	mov	r1, r3
 801792a:	68f8      	ldr	r0, [r7, #12]
 801792c:	f7fe f93c 	bl	8015ba8 <lv_draw_sw_blend>
 8017930:	e1c6      	b.n	8017cc0 <lv_draw_sw_img_decoded+0x450>
    }
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8017932:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8017936:	f083 0301 	eor.w	r3, r3, #1
 801793a:	b2db      	uxtb	r3, r3
 801793c:	2b00      	cmp	r3, #0
 801793e:	d02f      	beq.n	80179a0 <lv_draw_sw_img_decoded+0x130>
 8017940:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8017944:	f083 0301 	eor.w	r3, r3, #1
 8017948:	b2db      	uxtb	r3, r3
 801794a:	2b00      	cmp	r3, #0
 801794c:	d028      	beq.n	80179a0 <lv_draw_sw_img_decoded+0x130>
 801794e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8017952:	2b0e      	cmp	r3, #14
 8017954:	d124      	bne.n	80179a0 <lv_draw_sw_img_decoded+0x130>
        lv_area_t clipped_coords;
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	689a      	ldr	r2, [r3, #8]
 801795a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801795e:	6879      	ldr	r1, [r7, #4]
 8017960:	4618      	mov	r0, r3
 8017962:	f007 fc3d 	bl	801f1e0 <_lv_area_intersect>
 8017966:	4603      	mov	r3, r0
 8017968:	f083 0301 	eor.w	r3, r3, #1
 801796c:	b2db      	uxtb	r3, r3
 801796e:	2b00      	cmp	r3, #0
 8017970:	f040 81a6 	bne.w	8017cc0 <lv_draw_sw_img_decoded+0x450>

        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = coords;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.src_buf = NULL;
 801797c:	2300      	movs	r3, #0
 801797e:	637b      	str	r3, [r7, #52]	; 0x34
        blend_dsc.color = draw_dsc->recolor;
 8017980:	68bb      	ldr	r3, [r7, #8]
 8017982:	7a1b      	ldrb	r3, [r3, #8]
 8017984:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8017988:	2302      	movs	r3, #2
 801798a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        blend_dsc.blend_area = coords;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8017992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017996:	4619      	mov	r1, r3
 8017998:	68f8      	ldr	r0, [r7, #12]
 801799a:	f7fe f905 	bl	8015ba8 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 801799e:	e18f      	b.n	8017cc0 <lv_draw_sw_img_decoded+0x450>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	689b      	ldr	r3, [r3, #8]
 80179a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80179a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        blend_area.x2 = draw_ctx->clip_area->x2;
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	689b      	ldr	r3, [r3, #8]
 80179b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80179b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        blend_area.y1 = draw_ctx->clip_area->y1;
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	689b      	ldr	r3, [r3, #8]
 80179bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80179c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        blend_area.y2 = draw_ctx->clip_area->y2;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	689b      	ldr	r3, [r3, #8]
 80179c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80179cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_coord_t src_w = lv_area_get_width(coords);
 80179d0:	6878      	ldr	r0, [r7, #4]
 80179d2:	f7ff ff1f 	bl	8017814 <lv_area_get_width>
 80179d6:	4603      	mov	r3, r0
 80179d8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t src_h = lv_area_get_height(coords);
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f7ff ff30 	bl	8017842 <lv_area_get_height>
 80179e2:	4603      	mov	r3, r0
 80179e4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
 80179e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7ff ff28 	bl	8017842 <lv_area_get_height>
 80179f2:	4603      	mov	r3, r0
 80179f4:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        lv_coord_t blend_w = lv_area_get_width(&blend_area);
 80179f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7ff ff09 	bl	8017814 <lv_area_get_width>
 8017a02:	4603      	mov	r3, r0
 8017a04:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        uint32_t max_buf_size = MAX_BUF_SIZE;
 8017a08:	f7f5 fbf4 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f006 ff1a 	bl	801e848 <lv_disp_get_hor_res>
 8017a14:	4603      	mov	r3, r0
 8017a16:	67bb      	str	r3, [r7, #120]	; 0x78
        uint32_t blend_size = lv_area_get_size(&blend_area);
 8017a18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f007 fb52 	bl	801f0c6 <lv_area_get_size>
 8017a22:	6778      	str	r0, [r7, #116]	; 0x74
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
 8017a24:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8017a28:	673b      	str	r3, [r7, #112]	; 0x70
        if(blend_size <= max_buf_size) {
 8017a2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d804      	bhi.n	8017a3c <lv_draw_sw_img_decoded+0x1cc>
            buf_h = blend_h;
 8017a32:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8017a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017a3a:	e006      	b.n	8017a4a <lv_draw_sw_img_decoded+0x1da>
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 8017a3c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8017a40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8017a46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 8017a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017a50:	fb02 f303 	mul.w	r3, r2, r3
 8017a54:	66fb      	str	r3, [r7, #108]	; 0x6c

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 8017a56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017a58:	f008 ff6c 	bl	8020934 <lv_mem_buf_get>
 8017a5c:	66b8      	str	r0, [r7, #104]	; 0x68
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 8017a5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017a60:	f008 ff68 	bl	8020934 <lv_mem_buf_get>
 8017a64:	6678      	str	r0, [r7, #100]	; 0x64
        blend_dsc.mask_buf = mask_buf;
 8017a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = &blend_area;
 8017a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017a6e:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8017a70:	2302      	movs	r3, #2
 8017a72:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        blend_dsc.src_buf = rgb_buf;
 8017a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017a78:	637b      	str	r3, [r7, #52]	; 0x34
        lv_coord_t y_last = blend_area.y2;
 8017a7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8017a7e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 8017a82:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017a86:	b29a      	uxth	r2, r3
 8017a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017a8c:	b29b      	uxth	r3, r3
 8017a8e:	4413      	add	r3, r2
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	3b01      	subs	r3, #1
 8017a94:	b29b      	uxth	r3, r3
 8017a96:	b21b      	sxth	r3, r3
 8017a98:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8017a9c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8017aa0:	2b04      	cmp	r3, #4
 8017aa2:	d109      	bne.n	8017ab8 <lv_draw_sw_img_decoded+0x248>
 8017aa4:	68bb      	ldr	r3, [r7, #8]
 8017aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d104      	bne.n	8017ab8 <lv_draw_sw_img_decoded+0x248>
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	885b      	ldrh	r3, [r3, #2]
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8017ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017ab6:	d001      	beq.n	8017abc <lv_draw_sw_img_decoded+0x24c>
 8017ab8:	2302      	movs	r3, #2
 8017aba:	e000      	b.n	8017abe <lv_draw_sw_img_decoded+0x24e>
 8017abc:	2301      	movs	r3, #1
 8017abe:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 8017ac2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8017ac6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        while(blend_area.y1 <= y_last) {
 8017aca:	e0ec      	b.n	8017ca6 <lv_draw_sw_img_decoded+0x436>
            /*Apply transformations if any or separate the channels*/
            lv_area_t transform_area;
            lv_area_copy(&transform_area, &blend_area);
 8017acc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017ad0:	f107 0320 	add.w	r3, r7, #32
 8017ad4:	4611      	mov	r1, r2
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7ff fe7d 	bl	80177d6 <lv_area_copy>
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ae2:	b29b      	uxth	r3, r3
 8017ae4:	425b      	negs	r3, r3
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	b219      	sxth	r1, r3
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	425b      	negs	r3, r3
 8017af4:	b29b      	uxth	r3, r3
 8017af6:	b21a      	sxth	r2, r3
 8017af8:	f107 0320 	add.w	r3, r7, #32
 8017afc:	4618      	mov	r0, r3
 8017afe:	f007 fb39 	bl	801f174 <lv_area_move>
            if(transform) {
 8017b02:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d018      	beq.n	8017b3c <lv_draw_sw_img_decoded+0x2cc>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 8017b0a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8017b0e:	f107 0120 	add.w	r1, r7, #32
 8017b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b14:	9305      	str	r3, [sp, #20]
 8017b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b18:	9304      	str	r3, [sp, #16]
 8017b1a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8017b1e:	9303      	str	r3, [sp, #12]
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	9302      	str	r3, [sp, #8]
 8017b24:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8017b28:	9301      	str	r3, [sp, #4]
 8017b2a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8017b2e:	9300      	str	r3, [sp, #0]
 8017b30:	4613      	mov	r3, r2
 8017b32:	683a      	ldr	r2, [r7, #0]
 8017b34:	68f8      	ldr	r0, [r7, #12]
 8017b36:	f7fb f860 	bl	8012bfa <lv_draw_transform>
 8017b3a:	e015      	b.n	8017b68 <lv_draw_sw_img_decoded+0x2f8>
                                  draw_dsc, cf, rgb_buf, mask_buf);
            }
            else {
                convert_cb(&transform_area, src_buf, src_w, src_h, src_w, draw_dsc, cf, rgb_buf, mask_buf);
 8017b3c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8017b40:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8017b44:	f107 0020 	add.w	r0, r7, #32
 8017b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b4a:	9304      	str	r3, [sp, #16]
 8017b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b4e:	9303      	str	r3, [sp, #12]
 8017b50:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8017b54:	9302      	str	r3, [sp, #8]
 8017b56:	68bb      	ldr	r3, [r7, #8]
 8017b58:	9301      	str	r3, [sp, #4]
 8017b5a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8017b5e:	9300      	str	r3, [sp, #0]
 8017b60:	460b      	mov	r3, r1
 8017b62:	6839      	ldr	r1, [r7, #0]
 8017b64:	f000 f8af 	bl	8017cc6 <convert_cb>
            }

            /*Apply recolor*/
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 8017b68:	68bb      	ldr	r3, [r7, #8]
 8017b6a:	7a5b      	ldrb	r3, [r3, #9]
 8017b6c:	2b02      	cmp	r3, #2
 8017b6e:	d932      	bls.n	8017bd6 <lv_draw_sw_img_decoded+0x366>
                uint16_t premult_v[3];
                lv_opa_t recolor_opa = draw_dsc->recolor_opa;
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	7a5b      	ldrb	r3, [r3, #9]
 8017b74:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                lv_color_t recolor = draw_dsc->recolor;
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	7a1b      	ldrb	r3, [r3, #8]
 8017b7c:	753b      	strb	r3, [r7, #20]
                lv_color_premult(recolor, recolor_opa, premult_v);
 8017b7e:	f107 0218 	add.w	r2, r7, #24
 8017b82:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017b86:	4619      	mov	r1, r3
 8017b88:	7d38      	ldrb	r0, [r7, #20]
 8017b8a:	f7ff fd9d 	bl	80176c8 <lv_color_premult>
                recolor_opa = 255 - recolor_opa;
 8017b8e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017b92:	43db      	mvns	r3, r3
 8017b94:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                uint32_t i;
                for(i = 0; i < buf_size; i++) {
 8017b98:	2300      	movs	r3, #0
 8017b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017b9e:	e015      	b.n	8017bcc <lv_draw_sw_img_decoded+0x35c>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8017ba0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017ba6:	4413      	add	r3, r2
 8017ba8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017baa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017bae:	188c      	adds	r4, r1, r2
 8017bb0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8017bb4:	f107 0018 	add.w	r0, r7, #24
 8017bb8:	7819      	ldrb	r1, [r3, #0]
 8017bba:	f7ff fda9 	bl	8017710 <lv_color_mix_premult>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	7023      	strb	r3, [r4, #0]
                for(i = 0; i < buf_size; i++) {
 8017bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017bcc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d3e4      	bcc.n	8017ba0 <lv_draw_sw_img_decoded+0x330>
                }
            }
#if LV_DRAW_COMPLEX
            /*Apply the masks if any*/
            if(mask_any) {
 8017bd6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d03e      	beq.n	8017c5c <lv_draw_sw_img_decoded+0x3ec>
                lv_coord_t y;
                lv_opa_t * mask_buf_tmp = mask_buf;
 8017bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8017be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017be8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8017bec:	e030      	b.n	8017c50 <lv_draw_sw_img_decoded+0x3e0>
                    lv_draw_mask_res_t mask_res_line;
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 8017bee:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 8017bf2:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8017bf6:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8017bfa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017bfe:	f7f8 fc05 	bl	801040c <lv_draw_mask_apply>
 8017c02:	4603      	mov	r3, r0
 8017c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 8017c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d10a      	bne.n	8017c26 <lv_draw_sw_img_decoded+0x3b6>
                        lv_memset_00(mask_buf_tmp, blend_w);
 8017c10:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8017c14:	4619      	mov	r1, r3
 8017c16:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017c1a:	f009 fa35 	bl	8021088 <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8017c1e:	2302      	movs	r3, #2
 8017c20:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8017c24:	e006      	b.n	8017c34 <lv_draw_sw_img_decoded+0x3c4>
                    }
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 8017c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017c2a:	2b02      	cmp	r3, #2
 8017c2c:	d102      	bne.n	8017c34 <lv_draw_sw_img_decoded+0x3c4>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8017c2e:	2302      	movs	r3, #2
 8017c30:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                    }
                    mask_buf_tmp += blend_w;
 8017c34:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8017c38:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017c3c:	4413      	add	r3, r2
 8017c3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8017c42:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8017c46:	b29b      	uxth	r3, r3
 8017c48:	3301      	adds	r3, #1
 8017c4a:	b29b      	uxth	r3, r3
 8017c4c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8017c50:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8017c54:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	ddc8      	ble.n	8017bee <lv_draw_sw_img_decoded+0x37e>
                }
            }
#endif

            /*Blend*/
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8017c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017c60:	4619      	mov	r1, r3
 8017c62:	68f8      	ldr	r0, [r7, #12]
 8017c64:	f7fd ffa0 	bl	8015ba8 <lv_draw_sw_blend>

            /*Go the the next lines*/
            blend_area.y1 = blend_area.y2 + 1;
 8017c68:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	3301      	adds	r3, #1
 8017c70:	b29b      	uxth	r3, r3
 8017c72:	b21b      	sxth	r3, r3
 8017c74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 8017c78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017c7c:	b29a      	uxth	r2, r3
 8017c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017c82:	b29b      	uxth	r3, r3
 8017c84:	4413      	add	r3, r2
 8017c86:	b29b      	uxth	r3, r3
 8017c88:	3b01      	subs	r3, #1
 8017c8a:	b29b      	uxth	r3, r3
 8017c8c:	b21b      	sxth	r3, r3
 8017c8e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 8017c92:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8017c96:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	da03      	bge.n	8017ca6 <lv_draw_sw_img_decoded+0x436>
 8017c9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8017ca2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        while(blend_area.y1 <= y_last) {
 8017ca6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017caa:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	f6bf af0c 	bge.w	8017acc <lv_draw_sw_img_decoded+0x25c>
        }

        lv_mem_buf_release(mask_buf);
 8017cb4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8017cb6:	f008 fee9 	bl	8020a8c <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 8017cba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017cbc:	f008 fee6 	bl	8020a8c <lv_mem_buf_release>
    }
}
 8017cc0:	379c      	adds	r7, #156	; 0x9c
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd90      	pop	{r4, r7, pc}

08017cc6 <convert_cb>:
 **********************/

/* Separate the image channels to RGB and Alpha to match LV_COLOR_DEPTH settings*/
static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 8017cc6:	b590      	push	{r4, r7, lr}
 8017cc8:	b093      	sub	sp, #76	; 0x4c
 8017cca:	af00      	add	r7, sp, #0
 8017ccc:	60f8      	str	r0, [r7, #12]
 8017cce:	60b9      	str	r1, [r7, #8]
 8017cd0:	4611      	mov	r1, r2
 8017cd2:	461a      	mov	r2, r3
 8017cd4:	460b      	mov	r3, r1
 8017cd6:	80fb      	strh	r3, [r7, #6]
 8017cd8:	4613      	mov	r3, r2
 8017cda:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(draw_dsc);
    LV_UNUSED(src_h);
    LV_UNUSED(src_w);

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	647b      	str	r3, [r7, #68]	; 0x44
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8017ce0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017ce4:	2b04      	cmp	r3, #4
 8017ce6:	d003      	beq.n	8017cf0 <convert_cb+0x2a>
 8017ce8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017cec:	2b06      	cmp	r3, #6
 8017cee:	d169      	bne.n	8017dc4 <convert_cb+0xfe>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 8017cf0:	68f8      	ldr	r0, [r7, #12]
 8017cf2:	f007 f9e8 	bl	801f0c6 <lv_area_get_size>
 8017cf6:	6278      	str	r0, [r7, #36]	; 0x24
        lv_memset_ff(abuf, px_cnt);
 8017cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017cfa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017cfc:	f009 fa45 	bl	802118a <lv_memset_ff>

        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8017d00:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8017d04:	68fa      	ldr	r2, [r7, #12]
 8017d06:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017d0a:	fb02 f303 	mul.w	r3, r2, r3
 8017d0e:	461a      	mov	r2, r3
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d16:	4413      	add	r3, r2
 8017d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d1a:	4413      	add	r3, r2
 8017d1c:	647b      	str	r3, [r7, #68]	; 0x44
        uint32_t dest_w = lv_area_get_width(dest_area);
 8017d1e:	68f8      	ldr	r0, [r7, #12]
 8017d20:	f7ff fd78 	bl	8017814 <lv_area_get_width>
 8017d24:	4603      	mov	r3, r0
 8017d26:	623b      	str	r3, [r7, #32]
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 8017d28:	6a3b      	ldr	r3, [r7, #32]
 8017d2a:	61fb      	str	r3, [r7, #28]

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8017d2c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8017d30:	837b      	strh	r3, [r7, #26]
        lv_color_t * cbuf_tmp = cbuf;
 8017d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	885b      	ldrh	r3, [r3, #2]
 8017d3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017d3e:	e014      	b.n	8017d6a <convert_cb+0xa4>
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 8017d40:	69fa      	ldr	r2, [r7, #28]
 8017d42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017d44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017d46:	f008 fef9 	bl	8020b3c <lv_memcpy>
            src_tmp8 += src_stride_byte;
 8017d4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d50:	4413      	add	r3, r2
 8017d52:	647b      	str	r3, [r7, #68]	; 0x44
            cbuf_tmp += dest_w;
 8017d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017d56:	6a3b      	ldr	r3, [r7, #32]
 8017d58:	4413      	add	r3, r2
 8017d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8017d5c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8017d60:	b29b      	uxth	r3, r3
 8017d62:	3301      	adds	r3, #1
 8017d64:	b29b      	uxth	r3, r3
 8017d66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017d70:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017d74:	429a      	cmp	r2, r3
 8017d76:	dde3      	ble.n	8017d40 <convert_cb+0x7a>
        }

        /*Make "holes" for with Chroma keying*/
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8017d78:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017d7c:	2b06      	cmp	r3, #6
 8017d7e:	f040 810f 	bne.w	8017fa0 <convert_cb+0x2da>
            uint32_t i;
            lv_color_t chk = LV_COLOR_CHROMA_KEY;
 8017d82:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8017d86:	f7ff fd12 	bl	80177ae <lv_color_hex>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	743b      	strb	r3, [r7, #16]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
            uint8_t * cbuf_uint = (uint8_t *)cbuf;
 8017d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017d90:	617b      	str	r3, [r7, #20]
            uint8_t chk_v = chk.full;
 8017d92:	7c3b      	ldrb	r3, [r7, #16]
 8017d94:	74fb      	strb	r3, [r7, #19]
            uint16_t chk_v = chk.full;
#elif LV_COLOR_DEPTH == 32
            uint32_t * cbuf_uint = (uint32_t *)cbuf;
            uint32_t chk_v = chk.full;
#endif
            for(i = 0; i < px_cnt; i++) {
 8017d96:	2300      	movs	r3, #0
 8017d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8017d9a:	e00e      	b.n	8017dba <convert_cb+0xf4>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 8017d9c:	697a      	ldr	r2, [r7, #20]
 8017d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017da0:	4413      	add	r3, r2
 8017da2:	781b      	ldrb	r3, [r3, #0]
 8017da4:	7cfa      	ldrb	r2, [r7, #19]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d104      	bne.n	8017db4 <convert_cb+0xee>
 8017daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dae:	4413      	add	r3, r2
 8017db0:	2200      	movs	r2, #0
 8017db2:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < px_cnt; i++) {
 8017db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017db6:	3301      	adds	r3, #1
 8017db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8017dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d3ec      	bcc.n	8017d9c <convert_cb+0xd6>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8017dc2:	e0ed      	b.n	8017fa0 <convert_cb+0x2da>
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8017dc4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017dc8:	2b05      	cmp	r3, #5
 8017dca:	d16a      	bne.n	8017ea2 <convert_cb+0x1dc>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8017dcc:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8017dd0:	68fa      	ldr	r2, [r7, #12]
 8017dd2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017dd6:	fb02 f303 	mul.w	r3, r2, r3
 8017dda:	68fa      	ldr	r2, [r7, #12]
 8017ddc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017de0:	4413      	add	r3, r2
 8017de2:	005b      	lsls	r3, r3, #1
 8017de4:	461a      	mov	r2, r3
 8017de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017de8:	4413      	add	r3, r2
 8017dea:	647b      	str	r3, [r7, #68]	; 0x44

        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 8017dec:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8017df0:	68f8      	ldr	r0, [r7, #12]
 8017df2:	f7ff fd0f 	bl	8017814 <lv_area_get_width>
 8017df6:	4603      	mov	r3, r0
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	1ae3      	subs	r3, r4, r3
 8017dfc:	b29b      	uxth	r3, r3
 8017dfe:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8017e00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017e02:	005b      	lsls	r3, r3, #1
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	85fb      	strh	r3, [r7, #46]	; 0x2e

        lv_coord_t dest_h = lv_area_get_height(dest_area);
 8017e08:	68f8      	ldr	r0, [r7, #12]
 8017e0a:	f7ff fd1a 	bl	8017842 <lv_area_get_height>
 8017e0e:	4603      	mov	r3, r0
 8017e10:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 8017e12:	68f8      	ldr	r0, [r7, #12]
 8017e14:	f7ff fcfe 	bl	8017814 <lv_area_get_width>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(y = 0; y < dest_h; y++) {
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017e22:	e037      	b.n	8017e94 <convert_cb+0x1ce>
            for(x = 0; x < dest_w; x++) {
 8017e24:	2300      	movs	r3, #0
 8017e26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017e2a:	e017      	b.n	8017e5c <convert_cb+0x196>
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8017e2c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017e30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017e32:	4413      	add	r3, r2
 8017e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e36:	7852      	ldrb	r2, [r2, #1]
 8017e38:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                cbuf[x].full = *src_tmp8;
 8017e3a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017e3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017e40:	4413      	add	r3, r2
 8017e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e44:	7812      	ldrb	r2, [r2, #0]
 8017e46:	701a      	strb	r2, [r3, #0]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
#elif LV_COLOR_DEPTH == 32
                cbuf[x] = *((lv_color_t *) src_tmp8);
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 8017e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e4a:	3302      	adds	r3, #2
 8017e4c:	647b      	str	r3, [r7, #68]	; 0x44
            for(x = 0; x < dest_w; x++) {
 8017e4e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017e52:	b29b      	uxth	r3, r3
 8017e54:	3301      	adds	r3, #1
 8017e56:	b29b      	uxth	r3, r3
 8017e58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017e5c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8017e60:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017e64:	429a      	cmp	r2, r3
 8017e66:	dbe1      	blt.n	8017e2c <convert_cb+0x166>

            }
            cbuf += dest_w;
 8017e68:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017e6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017e6e:	4413      	add	r3, r2
 8017e70:	667b      	str	r3, [r7, #100]	; 0x64
            abuf += dest_w;
 8017e72:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017e76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017e78:	4413      	add	r3, r2
 8017e7a:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_new_line_step_byte;
 8017e7c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8017e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e82:	4413      	add	r3, r2
 8017e84:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8017e86:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8017e8a:	b29b      	uxth	r3, r3
 8017e8c:	3301      	adds	r3, #1
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017e94:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017e98:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	dbc1      	blt.n	8017e24 <convert_cb+0x15e>
            lv_memcpy(abuf, src_tmp8, dest_w);
            abuf += dest_w;
            src_tmp8 += src_stride;
        }
    }
}
 8017ea0:	e07f      	b.n	8017fa2 <convert_cb+0x2dc>
    else if(cf == LV_IMG_CF_RGB565A8) {
 8017ea2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8017ea6:	2b14      	cmp	r3, #20
 8017ea8:	d17b      	bne.n	8017fa2 <convert_cb+0x2dc>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8017eaa:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8017eae:	68fa      	ldr	r2, [r7, #12]
 8017eb0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017eb4:	fb02 f303 	mul.w	r3, r2, r3
 8017eb8:	461a      	mov	r2, r3
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ec0:	4413      	add	r3, r2
 8017ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ec4:	4413      	add	r3, r2
 8017ec6:	647b      	str	r3, [r7, #68]	; 0x44
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8017ec8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8017ecc:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t dest_h = lv_area_get_height(dest_area);
 8017ece:	68f8      	ldr	r0, [r7, #12]
 8017ed0:	f7ff fcb7 	bl	8017842 <lv_area_get_height>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 8017ed8:	68f8      	ldr	r0, [r7, #12]
 8017eda:	f7ff fc9b 	bl	8017814 <lv_area_get_width>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	867b      	strh	r3, [r7, #50]	; 0x32
        for(y = 0; y < dest_h; y++) {
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017ee8:	e017      	b.n	8017f1a <convert_cb+0x254>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 8017eea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8017eee:	461a      	mov	r2, r3
 8017ef0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017ef2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8017ef4:	f008 fe22 	bl	8020b3c <lv_memcpy>
            cbuf += dest_w;
 8017ef8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8017efc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017efe:	4413      	add	r3, r2
 8017f00:	667b      	str	r3, [r7, #100]	; 0x64
            src_tmp8 += src_stride_byte;
 8017f02:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8017f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f08:	4413      	add	r3, r2
 8017f0a:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8017f0c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	3301      	adds	r3, #1
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017f1a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017f1e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8017f22:	429a      	cmp	r2, r3
 8017f24:	dbe1      	blt.n	8017eea <convert_cb+0x224>
        src_tmp8 = (const uint8_t *)src_buf;
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 8017f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017f2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8017f32:	fb02 f303 	mul.w	r3, r2, r3
 8017f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f38:	4413      	add	r3, r2
 8017f3a:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 8017f3c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8017f40:	68fa      	ldr	r2, [r7, #12]
 8017f42:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017f46:	fb02 f303 	mul.w	r3, r2, r3
 8017f4a:	68fa      	ldr	r2, [r7, #12]
 8017f4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017f50:	4413      	add	r3, r2
 8017f52:	461a      	mov	r2, r3
 8017f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f56:	4413      	add	r3, r2
 8017f58:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017f60:	e017      	b.n	8017f92 <convert_cb+0x2cc>
            lv_memcpy(abuf, src_tmp8, dest_w);
 8017f62:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8017f66:	461a      	mov	r2, r3
 8017f68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017f6a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017f6c:	f008 fde6 	bl	8020b3c <lv_memcpy>
            abuf += dest_w;
 8017f70:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8017f74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017f76:	4413      	add	r3, r2
 8017f78:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_stride;
 8017f7a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8017f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f80:	4413      	add	r3, r2
 8017f82:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8017f84:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	3301      	adds	r3, #1
 8017f8c:	b29b      	uxth	r3, r3
 8017f8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017f92:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8017f96:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	dbe1      	blt.n	8017f62 <convert_cb+0x29c>
}
 8017f9e:	e000      	b.n	8017fa2 <convert_cb+0x2dc>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8017fa0:	bf00      	nop
}
 8017fa2:	bf00      	nop
 8017fa4:	374c      	adds	r7, #76	; 0x4c
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bd90      	pop	{r4, r7, pc}

08017faa <lv_area_get_width>:
{
 8017faa:	b480      	push	{r7}
 8017fac:	b083      	sub	sp, #12
 8017fae:	af00      	add	r7, sp, #0
 8017fb0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017fb8:	b29a      	uxth	r2, r3
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017fc0:	b29b      	uxth	r3, r3
 8017fc2:	1ad3      	subs	r3, r2, r3
 8017fc4:	b29b      	uxth	r3, r3
 8017fc6:	3301      	adds	r3, #1
 8017fc8:	b29b      	uxth	r3, r3
 8017fca:	b21b      	sxth	r3, r3
}
 8017fcc:	4618      	mov	r0, r3
 8017fce:	370c      	adds	r7, #12
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd6:	4770      	bx	lr

08017fd8 <lv_area_get_height>:
{
 8017fd8:	b480      	push	{r7}
 8017fda:	b083      	sub	sp, #12
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017fe6:	b29a      	uxth	r2, r3
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017fee:	b29b      	uxth	r3, r3
 8017ff0:	1ad3      	subs	r3, r2, r3
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	3301      	adds	r3, #1
 8017ff6:	b29b      	uxth	r3, r3
 8017ff8:	b21b      	sxth	r3, r3
}
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	370c      	adds	r7, #12
 8017ffe:	46bd      	mov	sp, r7
 8018000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018004:	4770      	bx	lr

08018006 <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 8018006:	b580      	push	{r7, lr}
 8018008:	b08a      	sub	sp, #40	; 0x28
 801800a:	af00      	add	r7, sp, #0
 801800c:	60f8      	str	r0, [r7, #12]
 801800e:	60b9      	str	r1, [r7, #8]
 8018010:	4613      	mov	r3, r2
 8018012:	71fb      	strb	r3, [r7, #7]
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8018014:	79fb      	ldrb	r3, [r7, #7]
 8018016:	f003 0301 	and.w	r3, r3, #1
 801801a:	2b00      	cmp	r3, #0
 801801c:	d001      	beq.n	8018022 <lv_draw_sw_layer_create+0x1c>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 801801e:	2300      	movs	r3, #0
 8018020:	e0df      	b.n	80181e2 <lv_draw_sw_layer_create+0x1dc>
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 8018022:	68bb      	ldr	r3, [r7, #8]
 8018024:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8018026:	79fb      	ldrb	r3, [r7, #7]
 8018028:	f003 0301 	and.w	r3, r3, #1
 801802c:	2b00      	cmp	r3, #0
 801802e:	d001      	beq.n	8018034 <lv_draw_sw_layer_create+0x2e>
 8018030:	2302      	movs	r3, #2
 8018032:	e000      	b.n	8018036 <lv_draw_sw_layer_create+0x30>
 8018034:	2301      	movs	r3, #1
 8018036:	623b      	str	r3, [r7, #32]
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8018038:	79fb      	ldrb	r3, [r7, #7]
 801803a:	f003 0302 	and.w	r3, r3, #2
 801803e:	2b00      	cmp	r3, #0
 8018040:	d074      	beq.n	801812c <lv_draw_sw_layer_create+0x126>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8018042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018044:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8018046:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 801804a:	f361 031e 	bfi	r3, r1, #0, #31
 801804e:	6293      	str	r3, [r2, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8018050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018052:	4618      	mov	r0, r3
 8018054:	f007 f837 	bl	801f0c6 <lv_area_get_size>
 8018058:	4602      	mov	r2, r0
 801805a:	6a3b      	ldr	r3, [r7, #32]
 801805c:	fb02 f303 	mul.w	r3, r2, r3
 8018060:	61bb      	str	r3, [r7, #24]
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8018062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018066:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801806a:	461a      	mov	r2, r3
 801806c:	69bb      	ldr	r3, [r7, #24]
 801806e:	4293      	cmp	r3, r2
 8018070:	d207      	bcs.n	8018082 <lv_draw_sw_layer_create+0x7c>
 8018072:	69bb      	ldr	r3, [r7, #24]
 8018074:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801807a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801807c:	f361 031e 	bfi	r3, r1, #0, #31
 8018080:	6293      	str	r3, [r2, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8018082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018086:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801808a:	4618      	mov	r0, r3
 801808c:	f008 fbc8 	bl	8020820 <lv_mem_alloc>
 8018090:	4602      	mov	r2, r0
 8018092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018094:	615a      	str	r2, [r3, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8018096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018098:	695b      	ldr	r3, [r3, #20]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d116      	bne.n	80180cc <lv_draw_sw_layer_create+0xc6>
            LV_LOG_WARN("Cannot allocate %"LV_PRIu32" bytes for layer buffer. Allocating %"LV_PRIu32" bytes instead. (Reduced performance)",
                        (uint32_t)layer_sw_ctx->buf_size_bytes, (uint32_t)LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE * px_size);
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 801809e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80180a2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80180a6:	f361 031e 	bfi	r3, r1, #0, #31
 80180aa:	6293      	str	r3, [r2, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 80180ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180b0:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80180b4:	4618      	mov	r0, r3
 80180b6:	f008 fbb3 	bl	8020820 <lv_mem_alloc>
 80180ba:	4602      	mov	r2, r0
 80180bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180be:	615a      	str	r2, [r3, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 80180c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c2:	695b      	ldr	r3, [r3, #20]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d101      	bne.n	80180cc <lv_draw_sw_layer_create+0xc6>
                return NULL;
 80180c8:	2300      	movs	r3, #0
 80180ca:	e08a      	b.n	80181e2 <lv_draw_sw_layer_create+0x1dc>
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 80180cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180d0:	3308      	adds	r3, #8
 80180d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80180d6:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 80180da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80180e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e2:	81da      	strh	r2, [r3, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
 80180e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e6:	3308      	adds	r3, #8
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7ff ff5e 	bl	8017faa <lv_area_get_width>
 80180ee:	4603      	mov	r3, r0
 80180f0:	82fb      	strh	r3, [r7, #22]
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 80180f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180f6:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80180fa:	461a      	mov	r2, r3
 80180fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018100:	fb92 f3f3 	sdiv	r3, r2, r3
 8018104:	2b00      	cmp	r3, #0
 8018106:	da00      	bge.n	801810a <lv_draw_sw_layer_create+0x104>
 8018108:	3301      	adds	r3, #1
 801810a:	105b      	asrs	r3, r3, #1
 801810c:	b21a      	sxth	r2, r3
 801810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018110:	821a      	strh	r2, [r3, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8018112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018116:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801811a:	461a      	mov	r2, r3
 801811c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018120:	fb92 f3f3 	sdiv	r3, r2, r3
 8018124:	b21a      	sxth	r2, r3
 8018126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018128:	825a      	strh	r2, [r3, #18]
 801812a:	e059      	b.n	80181e0 <lv_draw_sw_layer_create+0x1da>
    }
    else {
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 801812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018130:	3308      	adds	r3, #8
 8018132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018136:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 801813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801813c:	4618      	mov	r0, r3
 801813e:	f006 ffc2 	bl	801f0c6 <lv_area_get_size>
 8018142:	4603      	mov	r3, r0
 8018144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018148:	6a3a      	ldr	r2, [r7, #32]
 801814a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801814e:	fb03 f202 	mul.w	r2, r3, r2
 8018152:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8018156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018158:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801815a:	f362 031e 	bfi	r3, r2, #0, #31
 801815e:	628b      	str	r3, [r1, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8018160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018164:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8018168:	4618      	mov	r0, r3
 801816a:	f008 fb59 	bl	8020820 <lv_mem_alloc>
 801816e:	4602      	mov	r2, r0
 8018170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018172:	615a      	str	r2, [r3, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8018174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018176:	695a      	ldr	r2, [r3, #20]
 8018178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801817c:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8018180:	4619      	mov	r1, r3
 8018182:	4610      	mov	r0, r2
 8018184:	f008 ff80 	bl	8021088 <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8018188:	79fb      	ldrb	r3, [r7, #7]
 801818a:	f003 0301 	and.w	r3, r3, #1
 801818e:	b2d9      	uxtb	r1, r3
 8018190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018192:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8018196:	f361 13c7 	bfi	r3, r1, #7, #1
 801819a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 801819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a0:	695b      	ldr	r3, [r3, #20]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d101      	bne.n	80181aa <lv_draw_sw_layer_create+0x1a4>
            return NULL;
 80181a6:	2300      	movs	r3, #0
 80181a8:	e01b      	b.n	80181e2 <lv_draw_sw_layer_create+0x1dc>
        }

        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 80181aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ac:	695a      	ldr	r2, [r3, #20]
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	601a      	str	r2, [r3, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 80181b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b4:	f103 0208 	add.w	r2, r3, #8
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 80181bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181be:	f103 0208 	add.w	r2, r3, #8
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	609a      	str	r2, [r3, #8]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80181c6:	f7f5 f815 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 80181ca:	61f8      	str	r0, [r7, #28]
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 80181cc:	69fb      	ldr	r3, [r7, #28]
 80181ce:	681a      	ldr	r2, [r3, #0]
 80181d0:	79fb      	ldrb	r3, [r7, #7]
 80181d2:	f003 0301 	and.w	r3, r3, #1
 80181d6:	b2d9      	uxtb	r1, r3
 80181d8:	7c13      	ldrb	r3, [r2, #16]
 80181da:	f361 1386 	bfi	r3, r1, #6, #1
 80181de:	7413      	strb	r3, [r2, #16]
    }

    return layer_ctx;
 80181e0:	68bb      	ldr	r3, [r7, #8]
}
 80181e2:	4618      	mov	r0, r3
 80181e4:	3728      	adds	r7, #40	; 0x28
 80181e6:	46bd      	mov	sp, r7
 80181e8:	bd80      	pop	{r7, pc}

080181ea <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 80181ea:	b580      	push	{r7, lr}
 80181ec:	b086      	sub	sp, #24
 80181ee:	af00      	add	r7, sp, #0
 80181f0:	60f8      	str	r0, [r7, #12]
 80181f2:	60b9      	str	r1, [r7, #8]
 80181f4:	4613      	mov	r3, r2
 80181f6:	71fb      	strb	r3, [r7, #7]

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 80181f8:	68bb      	ldr	r3, [r7, #8]
 80181fa:	617b      	str	r3, [r7, #20]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80181fc:	f7f4 fffa 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8018200:	6138      	str	r0, [r7, #16]
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8018202:	79fb      	ldrb	r3, [r7, #7]
 8018204:	f003 0301 	and.w	r3, r3, #1
 8018208:	2b00      	cmp	r3, #0
 801820a:	d017      	beq.n	801823c <lv_draw_sw_layer_adjust+0x52>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	695a      	ldr	r2, [r3, #20]
 8018210:	697b      	ldr	r3, [r7, #20]
 8018212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018214:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8018218:	4619      	mov	r1, r3
 801821a:	4610      	mov	r0, r2
 801821c:	f008 ff34 	bl	8021088 <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 8018220:	697a      	ldr	r2, [r7, #20]
 8018222:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8018226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801822a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 801822e:	693b      	ldr	r3, [r7, #16]
 8018230:	681a      	ldr	r2, [r3, #0]
 8018232:	7c13      	ldrb	r3, [r2, #16]
 8018234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018238:	7413      	strb	r3, [r2, #16]
 801823a:	e00c      	b.n	8018256 <lv_draw_sw_layer_adjust+0x6c>
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 801823c:	697a      	ldr	r2, [r7, #20]
 801823e:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8018242:	f36f 13c7 	bfc	r3, #7, #1
 8018246:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	681a      	ldr	r2, [r3, #0]
 801824e:	7c13      	ldrb	r3, [r2, #16]
 8018250:	f36f 1386 	bfc	r3, #6, #1
 8018254:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	695a      	ldr	r2, [r3, #20]
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 801825e:	68bb      	ldr	r3, [r7, #8]
 8018260:	f103 0208 	add.w	r2, r3, #8
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	f103 0208 	add.w	r2, r3, #8
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	609a      	str	r2, [r3, #8]
}
 8018272:	bf00      	nop
 8018274:	3718      	adds	r7, #24
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}

0801827a <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 801827a:	b580      	push	{r7, lr}
 801827c:	b08a      	sub	sp, #40	; 0x28
 801827e:	af00      	add	r7, sp, #0
 8018280:	60f8      	str	r0, [r7, #12]
 8018282:	60b9      	str	r1, [r7, #8]
 8018284:	607a      	str	r2, [r7, #4]
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	627b      	str	r3, [r7, #36]	; 0x24

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	61fb      	str	r3, [r7, #28]
    img.header.always_zero = 0;
 8018290:	7d3b      	ldrb	r3, [r7, #20]
 8018292:	f36f 1347 	bfc	r3, #5, #3
 8018296:	753b      	strb	r3, [r7, #20]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	685b      	ldr	r3, [r3, #4]
 801829c:	4618      	mov	r0, r3
 801829e:	f7ff fe84 	bl	8017faa <lv_area_get_width>
 80182a2:	4603      	mov	r3, r0
 80182a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80182a8:	b29a      	uxth	r2, r3
 80182aa:	697b      	ldr	r3, [r7, #20]
 80182ac:	f362 2394 	bfi	r3, r2, #10, #11
 80182b0:	617b      	str	r3, [r7, #20]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	685b      	ldr	r3, [r3, #4]
 80182b6:	4618      	mov	r0, r3
 80182b8:	f7ff fe8e 	bl	8017fd8 <lv_area_get_height>
 80182bc:	4603      	mov	r3, r0
 80182be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	8afb      	ldrh	r3, [r7, #22]
 80182c6:	f362 134f 	bfi	r3, r2, #5, #11
 80182ca:	82fb      	strh	r3, [r7, #22]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 80182cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80182d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80182d6:	b2db      	uxtb	r3, r3
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d001      	beq.n	80182e0 <lv_draw_sw_layer_blend+0x66>
 80182dc:	2205      	movs	r2, #5
 80182de:	e000      	b.n	80182e2 <lv_draw_sw_layer_blend+0x68>
 80182e0:	2204      	movs	r2, #4
 80182e2:	7d3b      	ldrb	r3, [r7, #20]
 80182e4:	f362 0304 	bfi	r3, r2, #0, #5
 80182e8:	753b      	strb	r3, [r7, #20]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	6a1a      	ldr	r2, [r3, #32]
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	69da      	ldr	r2, [r3, #28]
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 80182fa:	68bb      	ldr	r3, [r7, #8]
 80182fc:	699a      	ldr	r2, [r3, #24]
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8018302:	f7f4 ff77 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8018306:	6238      	str	r0, [r7, #32]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8018308:	6a3b      	ldr	r3, [r7, #32]
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	68bb      	ldr	r3, [r7, #8]
 801830e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8018312:	7c13      	ldrb	r3, [r2, #16]
 8018314:	f361 1386 	bfi	r3, r1, #6, #1
 8018318:	7413      	strb	r3, [r2, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 801831a:	68bb      	ldr	r3, [r7, #8]
 801831c:	f103 0208 	add.w	r2, r3, #8
 8018320:	f107 0314 	add.w	r3, r7, #20
 8018324:	6879      	ldr	r1, [r7, #4]
 8018326:	68f8      	ldr	r0, [r7, #12]
 8018328:	f7f6 fcd2 	bl	800ecd0 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 801832c:	68f8      	ldr	r0, [r7, #12]
 801832e:	f7f6 fc25 	bl	800eb7c <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 8018332:	f107 0314 	add.w	r3, r7, #20
 8018336:	4618      	mov	r0, r3
 8018338:	f7fa fd92 	bl	8012e60 <lv_img_cache_invalidate_src>
}
 801833c:	bf00      	nop
 801833e:	3728      	adds	r7, #40	; 0x28
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}

08018344 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b082      	sub	sp, #8
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	695b      	ldr	r3, [r3, #20]
 8018352:	4618      	mov	r0, r3
 8018354:	f008 fa94 	bl	8020880 <lv_mem_free>
}
 8018358:	bf00      	nop
 801835a:	3708      	adds	r7, #8
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}

08018360 <lv_area_copy>:
{
 8018360:	b480      	push	{r7}
 8018362:	b083      	sub	sp, #12
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8018374:	683b      	ldr	r3, [r7, #0]
 8018376:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801837e:	683b      	ldr	r3, [r7, #0]
 8018380:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	80da      	strh	r2, [r3, #6]
}
 8018392:	bf00      	nop
 8018394:	370c      	adds	r7, #12
 8018396:	46bd      	mov	sp, r7
 8018398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839c:	4770      	bx	lr

0801839e <lv_area_get_width>:
{
 801839e:	b480      	push	{r7}
 80183a0:	b083      	sub	sp, #12
 80183a2:	af00      	add	r7, sp, #0
 80183a4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80183ac:	b29a      	uxth	r2, r3
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	1ad3      	subs	r3, r2, r3
 80183b8:	b29b      	uxth	r3, r3
 80183ba:	3301      	adds	r3, #1
 80183bc:	b29b      	uxth	r3, r3
 80183be:	b21b      	sxth	r3, r3
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	370c      	adds	r7, #12
 80183c4:	46bd      	mov	sp, r7
 80183c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ca:	4770      	bx	lr

080183cc <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 80183cc:	b590      	push	{r4, r7, lr}
 80183ce:	b09d      	sub	sp, #116	; 0x74
 80183d0:	af02      	add	r7, sp, #8
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
 80183d8:	603b      	str	r3, [r7, #0]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	6818      	ldr	r0, [r3, #0]
 80183de:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80183e2:	2300      	movs	r3, #0
 80183e4:	683a      	ldr	r2, [r7, #0]
 80183e6:	f005 fcfc 	bl	801dde2 <lv_font_get_glyph_dsc>
 80183ea:	4603      	mov	r3, r0
 80183ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(g_ret == false) {
 80183f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80183f4:	f083 0301 	eor.w	r3, r3, #1
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d05c      	beq.n	80184b8 <lv_draw_sw_letter+0xec>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 80183fe:	683b      	ldr	r3, [r7, #0]
 8018400:	2b1f      	cmp	r3, #31
 8018402:	f240 80cf 	bls.w	80185a4 <lv_draw_sw_letter+0x1d8>
 8018406:	683b      	ldr	r3, [r7, #0]
 8018408:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801840c:	4293      	cmp	r3, r2
 801840e:	f000 80c9 	beq.w	80185a4 <lv_draw_sw_letter+0x1d8>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	f242 020c 	movw	r2, #8204	; 0x200c
 8018418:	4293      	cmp	r3, r2
 801841a:	f000 80c3 	beq.w	80185a4 <lv_draw_sw_letter+0x1d8>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018424:	b29a      	uxth	r2, r3
 8018426:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801842a:	b29b      	uxth	r3, r3
 801842c:	4413      	add	r3, r2
 801842e:	b29b      	uxth	r3, r3
 8018430:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801843a:	b29a      	uxth	r2, r3
 801843c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8018440:	b29b      	uxth	r3, r3
 8018442:	4413      	add	r3, r2
 8018444:	b29b      	uxth	r3, r3
 8018446:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 801844a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 801844e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8018452:	4413      	add	r3, r2
 8018454:	b29b      	uxth	r3, r3
 8018456:	b21c      	sxth	r4, r3
 8018458:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801845c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8018460:	4413      	add	r3, r2
 8018462:	b29b      	uxth	r3, r3
 8018464:	b21b      	sxth	r3, r3
 8018466:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 801846a:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 801846e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8018472:	9300      	str	r3, [sp, #0]
 8018474:	4623      	mov	r3, r4
 8018476:	f006 fdef 	bl	801f058 <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 801847a:	f107 0310 	add.w	r3, r7, #16
 801847e:	4618      	mov	r0, r3
 8018480:	f7fa fb5a 	bl	8012b38 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8018484:	2302      	movs	r3, #2
 8018486:	74fb      	strb	r3, [r7, #19]
            glyph_dsc.outline_opa = LV_OPA_MIN;
 8018488:	2302      	movs	r3, #2
 801848a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 801848e:	2302      	movs	r3, #2
 8018490:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8018494:	2302      	movs	r3, #2
 8018496:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            glyph_dsc.border_color = dsc->color;
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	7b1b      	ldrb	r3, [r3, #12]
 801849e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            glyph_dsc.border_width = 1;
 80184a2:	2301      	movs	r3, #1
 80184a4:	857b      	strh	r3, [r7, #42]	; 0x2a
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	68db      	ldr	r3, [r3, #12]
 80184aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80184ae:	f107 0110 	add.w	r1, r7, #16
 80184b2:	68f8      	ldr	r0, [r7, #12]
 80184b4:	4798      	blx	r3
#endif
        }
        return;
 80184b6:	e075      	b.n	80185a4 <lv_draw_sw_letter+0x1d8>
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 80184b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d073      	beq.n	80185a8 <lv_draw_sw_letter+0x1dc>
 80184c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d06f      	beq.n	80185a8 <lv_draw_sw_letter+0x1dc>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80184ce:	b29a      	uxth	r2, r3
 80184d0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80184d4:	b29b      	uxth	r3, r3
 80184d6:	4413      	add	r3, r2
 80184d8:	b29b      	uxth	r3, r3
 80184da:	b21b      	sxth	r3, r3
 80184dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80184e6:	b29a      	uxth	r2, r3
 80184e8:	68bb      	ldr	r3, [r7, #8]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80184f0:	b299      	uxth	r1, r3
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80184fa:	b29b      	uxth	r3, r3
 80184fc:	1acb      	subs	r3, r1, r3
 80184fe:	b29b      	uxth	r3, r3
 8018500:	4413      	add	r3, r2
 8018502:	b29a      	uxth	r2, r3
 8018504:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8018508:	1ad3      	subs	r3, r2, r3
 801850a:	b29a      	uxth	r2, r3
 801850c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8018510:	b29b      	uxth	r3, r3
 8018512:	1ad3      	subs	r3, r2, r3
 8018514:	b29b      	uxth	r3, r3
 8018516:	b21b      	sxth	r3, r3
 8018518:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 801851c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8018520:	461a      	mov	r2, r3
 8018522:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8018526:	4413      	add	r3, r2
 8018528:	68fa      	ldr	r2, [r7, #12]
 801852a:	6892      	ldr	r2, [r2, #8]
 801852c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018530:	4293      	cmp	r3, r2
 8018532:	db3b      	blt.n	80185ac <lv_draw_sw_letter+0x1e0>
       gpos.x > draw_ctx->clip_area->x2 ||
 8018534:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	689b      	ldr	r3, [r3, #8]
 801853c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8018540:	429a      	cmp	r2, r3
 8018542:	dc33      	bgt.n	80185ac <lv_draw_sw_letter+0x1e0>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8018544:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8018548:	461a      	mov	r2, r3
 801854a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801854e:	4413      	add	r3, r2
 8018550:	68fa      	ldr	r2, [r7, #12]
 8018552:	6892      	ldr	r2, [r2, #8]
 8018554:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 8018558:	4293      	cmp	r3, r2
 801855a:	db27      	blt.n	80185ac <lv_draw_sw_letter+0x1e0>
       gpos.y > draw_ctx->clip_area->y2)  {
 801855c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	689b      	ldr	r3, [r3, #8]
 8018564:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8018568:	429a      	cmp	r2, r3
 801856a:	dc1f      	bgt.n	80185ac <lv_draw_sw_letter+0x1e0>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 801856c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801856e:	6839      	ldr	r1, [r7, #0]
 8018570:	4618      	mov	r0, r3
 8018572:	f005 fc23 	bl	801ddbc <lv_font_get_glyph_bitmap>
 8018576:	6638      	str	r0, [r7, #96]	; 0x60
    if(map_p == NULL) {
 8018578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801857a:	2b00      	cmp	r3, #0
 801857c:	d018      	beq.n	80185b0 <lv_draw_sw_letter+0x1e4>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 801857e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018580:	7b1b      	ldrb	r3, [r3, #12]
 8018582:	f003 0303 	and.w	r3, r3, #3
 8018586:	b2db      	uxtb	r3, r3
 8018588:	2b00      	cmp	r3, #0
 801858a:	d112      	bne.n	80185b2 <lv_draw_sw_letter+0x1e6>
#else
        LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
 801858c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8018590:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018596:	9300      	str	r3, [sp, #0]
 8018598:	460b      	mov	r3, r1
 801859a:	68b9      	ldr	r1, [r7, #8]
 801859c:	68f8      	ldr	r0, [r7, #12]
 801859e:	f000 f80b 	bl	80185b8 <draw_letter_normal>
 80185a2:	e006      	b.n	80185b2 <lv_draw_sw_letter+0x1e6>
        return;
 80185a4:	bf00      	nop
 80185a6:	e004      	b.n	80185b2 <lv_draw_sw_letter+0x1e6>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 80185a8:	bf00      	nop
 80185aa:	e002      	b.n	80185b2 <lv_draw_sw_letter+0x1e6>
        return;
 80185ac:	bf00      	nop
 80185ae:	e000      	b.n	80185b2 <lv_draw_sw_letter+0x1e6>
        return;
 80185b0:	bf00      	nop
    }
}
 80185b2:	376c      	adds	r7, #108	; 0x6c
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd90      	pop	{r4, r7, pc}

080185b8 <draw_letter_normal>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                                     const lv_point_t * pos, lv_font_glyph_dsc_t * g, const uint8_t * map_p)
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b0aa      	sub	sp, #168	; 0xa8
 80185bc:	af00      	add	r7, sp, #0
 80185be:	60f8      	str	r0, [r7, #12]
 80185c0:	60b9      	str	r1, [r7, #8]
 80185c2:	607a      	str	r2, [r7, #4]
 80185c4:	603b      	str	r3, [r7, #0]

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 80185c6:	683b      	ldr	r3, [r7, #0]
 80185c8:	7b9b      	ldrb	r3, [r3, #14]
 80185ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80185ce:	b2db      	uxtb	r3, r3
 80185d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    lv_opa_t opa = dsc->opa;
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	7e1b      	ldrb	r3, [r3, #24]
 80185d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 80185dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80185e0:	2b03      	cmp	r3, #3
 80185e2:	d102      	bne.n	80185ea <draw_letter_normal+0x32>
 80185e4:	2304      	movs	r3, #4
 80185e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 80185ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80185ee:	3b01      	subs	r3, #1
 80185f0:	2b07      	cmp	r3, #7
 80185f2:	f200 8287 	bhi.w	8018b04 <draw_letter_normal+0x54c>
 80185f6:	a201      	add	r2, pc, #4	; (adr r2, 80185fc <draw_letter_normal+0x44>)
 80185f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185fc:	0801861d 	.word	0x0801861d
 8018600:	08018631 	.word	0x08018631
 8018604:	08018b05 	.word	0x08018b05
 8018608:	08018645 	.word	0x08018645
 801860c:	08018b05 	.word	0x08018b05
 8018610:	08018b05 	.word	0x08018b05
 8018614:	08018b05 	.word	0x08018b05
 8018618:	08018659 	.word	0x08018659
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 801861c:	4b6a      	ldr	r3, [pc, #424]	; (80187c8 <draw_letter_normal+0x210>)
 801861e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0x80;
 8018622:	2380      	movs	r3, #128	; 0x80
 8018624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 2;
 8018628:	2302      	movs	r3, #2
 801862a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 801862e:	e01e      	b.n	801866e <draw_letter_normal+0xb6>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 8018630:	4b66      	ldr	r3, [pc, #408]	; (80187cc <draw_letter_normal+0x214>)
 8018632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xC0;
 8018636:	23c0      	movs	r3, #192	; 0xc0
 8018638:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 4;
 801863c:	2304      	movs	r3, #4
 801863e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8018642:	e014      	b.n	801866e <draw_letter_normal+0xb6>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8018644:	4b62      	ldr	r3, [pc, #392]	; (80187d0 <draw_letter_normal+0x218>)
 8018646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xF0;
 801864a:	23f0      	movs	r3, #240	; 0xf0
 801864c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 16;
 8018650:	2310      	movs	r3, #16
 8018652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8018656:	e00a      	b.n	801866e <draw_letter_normal+0xb6>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 8018658:	4b5e      	ldr	r3, [pc, #376]	; (80187d4 <draw_letter_normal+0x21c>)
 801865a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xFF;
 801865e:	23ff      	movs	r3, #255	; 0xff
 8018660:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 256;
 8018664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;       /*No opa table, pixel value will be used directly*/
 801866c:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 801866e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8018672:	2bfc      	cmp	r3, #252	; 0xfc
 8018674:	d842      	bhi.n	80186fc <draw_letter_normal+0x144>
        if(prev_opa != opa || prev_bpp != bpp) {
 8018676:	4b58      	ldr	r3, [pc, #352]	; (80187d8 <draw_letter_normal+0x220>)
 8018678:	781b      	ldrb	r3, [r3, #0]
 801867a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 801867e:	429a      	cmp	r2, r3
 8018680:	d105      	bne.n	801868e <draw_letter_normal+0xd6>
 8018682:	4b56      	ldr	r3, [pc, #344]	; (80187dc <draw_letter_normal+0x224>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801868a:	429a      	cmp	r2, r3
 801868c:	d02b      	beq.n	80186e6 <draw_letter_normal+0x12e>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 801868e:	2300      	movs	r3, #0
 8018690:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018694:	e021      	b.n	80186da <draw_letter_normal+0x122>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 8018696:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801869a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801869e:	4413      	add	r3, r2
 80186a0:	781b      	ldrb	r3, [r3, #0]
 80186a2:	2bff      	cmp	r3, #255	; 0xff
 80186a4:	d00d      	beq.n	80186c2 <draw_letter_normal+0x10a>
 80186a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80186aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80186ae:	4413      	add	r3, r2
 80186b0:	781b      	ldrb	r3, [r3, #0]
 80186b2:	461a      	mov	r2, r3
 80186b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80186b8:	fb02 f303 	mul.w	r3, r2, r3
 80186bc:	121b      	asrs	r3, r3, #8
 80186be:	b2db      	uxtb	r3, r3
 80186c0:	e001      	b.n	80186c6 <draw_letter_normal+0x10e>
 80186c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80186c6:	4946      	ldr	r1, [pc, #280]	; (80187e0 <draw_letter_normal+0x228>)
 80186c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80186cc:	440a      	add	r2, r1
 80186ce:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 80186d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80186d4:	3301      	adds	r3, #1
 80186d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80186da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80186de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80186e2:	429a      	cmp	r2, r3
 80186e4:	d3d7      	bcc.n	8018696 <draw_letter_normal+0xde>
            }
        }
        bpp_opa_table_p = opa_table;
 80186e6:	4b3e      	ldr	r3, [pc, #248]	; (80187e0 <draw_letter_normal+0x228>)
 80186e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        prev_opa = opa;
 80186ec:	4a3a      	ldr	r2, [pc, #232]	; (80187d8 <draw_letter_normal+0x220>)
 80186ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80186f2:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 80186f4:	4a39      	ldr	r2, [pc, #228]	; (80187dc <draw_letter_normal+0x224>)
 80186f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80186fa:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 80186fc:	683b      	ldr	r3, [r7, #0]
 80186fe:	88db      	ldrh	r3, [r3, #6]
 8018700:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t box_h = g->box_h;
 8018702:	683b      	ldr	r3, [r7, #0]
 8018704:	891b      	ldrh	r3, [r3, #8]
 8018706:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8018708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801870a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801870e:	fb02 f303 	mul.w	r3, r2, r3
 8018712:	673b      	str	r3, [r7, #112]	; 0x70

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	f9b3 2000 	ldrsh.w	r2, [r3]
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	689b      	ldr	r3, [r3, #8]
 801871e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018722:	429a      	cmp	r2, r3
 8018724:	da09      	bge.n	801873a <draw_letter_normal+0x182>
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	689b      	ldr	r3, [r3, #8]
 801872a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801872e:	461a      	mov	r2, r3
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018736:	1ad3      	subs	r3, r2, r3
 8018738:	e000      	b.n	801873c <draw_letter_normal+0x184>
 801873a:	2300      	movs	r3, #0
 801873c:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018744:	461a      	mov	r2, r3
 8018746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018748:	4413      	add	r3, r2
 801874a:	68fa      	ldr	r2, [r7, #12]
 801874c:	6892      	ldr	r2, [r2, #8]
 801874e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8018752:	4293      	cmp	r3, r2
 8018754:	dd0a      	ble.n	801876c <draw_letter_normal+0x1b4>
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	689b      	ldr	r3, [r3, #8]
 801875a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801875e:	461a      	mov	r2, r3
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018766:	1ad3      	subs	r3, r2, r3
 8018768:	3301      	adds	r3, #1
 801876a:	e000      	b.n	801876e <draw_letter_normal+0x1b6>
 801876c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801876e:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	689b      	ldr	r3, [r3, #8]
 801877a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801877e:	429a      	cmp	r2, r3
 8018780:	da09      	bge.n	8018796 <draw_letter_normal+0x1de>
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	689b      	ldr	r3, [r3, #8]
 8018786:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801878a:	461a      	mov	r2, r3
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018792:	1ad3      	subs	r3, r2, r3
 8018794:	e000      	b.n	8018798 <draw_letter_normal+0x1e0>
 8018796:	2300      	movs	r3, #0
 8018798:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80187a0:	461a      	mov	r2, r3
 80187a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80187a4:	4413      	add	r3, r2
 80187a6:	68fa      	ldr	r2, [r7, #12]
 80187a8:	6892      	ldr	r2, [r2, #8]
 80187aa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80187ae:	4293      	cmp	r3, r2
 80187b0:	dd18      	ble.n	80187e4 <draw_letter_normal+0x22c>
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	689b      	ldr	r3, [r3, #8]
 80187b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80187ba:	461a      	mov	r2, r3
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80187c2:	1ad3      	subs	r3, r2, r3
 80187c4:	3301      	adds	r3, #1
 80187c6:	e00e      	b.n	80187e6 <draw_letter_normal+0x22e>
 80187c8:	0802378c 	.word	0x0802378c
 80187cc:	08023790 	.word	0x08023790
 80187d0:	08023794 	.word	0x08023794
 80187d4:	080237a4 	.word	0x080237a4
 80187d8:	20000709 	.word	0x20000709
 80187dc:	2000070c 	.word	0x2000070c
 80187e0:	20000710 	.word	0x20000710
 80187e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80187e6:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80187e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80187ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80187ec:	fb02 f303 	mul.w	r3, r2, r3
 80187f0:	4619      	mov	r1, r3
 80187f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80187f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80187f8:	fb02 f303 	mul.w	r3, r2, r3
 80187fc:	440b      	add	r3, r1
 80187fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    map_p += bit_ofs >> 3;
 8018800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018802:	08db      	lsrs	r3, r3, #3
 8018804:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018808:	4413      	add	r3, r2
 801880a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 801880e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018810:	f003 0307 	and.w	r3, r3, #7
 8018814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8018818:	f107 0320 	add.w	r3, r7, #32
 801881c:	211c      	movs	r1, #28
 801881e:	4618      	mov	r0, r3
 8018820:	f008 fc32 	bl	8021088 <lv_memset_00>
    blend_dsc.color = dsc->color;
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	7b1b      	ldrb	r3, [r3, #12]
 8018828:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    blend_dsc.opa = dsc->opa;
 801882c:	68bb      	ldr	r3, [r7, #8]
 801882e:	7e1b      	ldrb	r3, [r3, #24]
 8018830:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    blend_dsc.blend_mode = dsc->blend_mode;
 8018834:	68bb      	ldr	r3, [r7, #8]
 8018836:	7f1b      	ldrb	r3, [r3, #28]
 8018838:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801883c:	b2db      	uxtb	r3, r3
 801883e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8018842:	f7f4 fcd7 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 8018846:	4603      	mov	r3, r0
 8018848:	4618      	mov	r0, r3
 801884a:	f005 fffd 	bl	801e848 <lv_disp_get_hor_res>
 801884e:	4603      	mov	r3, r0
 8018850:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8018854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018856:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018858:	fb03 f202 	mul.w	r2, r3, r2
 801885c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8018860:	4293      	cmp	r3, r2
 8018862:	bfa8      	it	ge
 8018864:	4613      	movge	r3, r2
 8018866:	657b      	str	r3, [r7, #84]	; 0x54
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8018868:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801886a:	f008 f863 	bl	8020934 <lv_mem_buf_get>
 801886e:	6538      	str	r0, [r7, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 8018870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018872:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 8018874:	2300      	movs	r3, #0
 8018876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018880:	b29a      	uxth	r2, r3
 8018882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018884:	b29b      	uxth	r3, r3
 8018886:	4413      	add	r3, r2
 8018888:	b29b      	uxth	r3, r3
 801888a:	b21b      	sxth	r3, r3
 801888c:	833b      	strh	r3, [r7, #24]
    fill_area.x2 = col_end  + pos->x - 1;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018894:	b29a      	uxth	r2, r3
 8018896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018898:	b29b      	uxth	r3, r3
 801889a:	4413      	add	r3, r2
 801889c:	b29b      	uxth	r3, r3
 801889e:	3b01      	subs	r3, #1
 80188a0:	b29b      	uxth	r3, r3
 80188a2:	b21b      	sxth	r3, r3
 80188a4:	83bb      	strh	r3, [r7, #28]
    fill_area.y1 = row_start + pos->y;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80188ac:	b29a      	uxth	r2, r3
 80188ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80188b0:	b29b      	uxth	r3, r3
 80188b2:	4413      	add	r3, r2
 80188b4:	b29b      	uxth	r3, r3
 80188b6:	b21b      	sxth	r3, r3
 80188b8:	837b      	strh	r3, [r7, #26]
    fill_area.y2 = fill_area.y1;
 80188ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80188be:	83fb      	strh	r3, [r7, #30]
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
 80188c0:	f107 0318 	add.w	r3, r7, #24
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7ff fd6a 	bl	801839e <lv_area_get_width>
 80188ca:	4603      	mov	r3, r0
 80188cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
 80188d0:	f107 0218 	add.w	r2, r7, #24
 80188d4:	f107 0310 	add.w	r3, r7, #16
 80188d8:	4611      	mov	r1, r2
 80188da:	4618      	mov	r0, r3
 80188dc:	f7ff fd40 	bl	8018360 <lv_area_copy>
    mask_area.y2 = mask_area.y1 + row_end;
 80188e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80188e4:	b29a      	uxth	r2, r3
 80188e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80188e8:	b29b      	uxth	r3, r3
 80188ea:	4413      	add	r3, r2
 80188ec:	b29b      	uxth	r3, r3
 80188ee:	b21b      	sxth	r3, r3
 80188f0:	82fb      	strh	r3, [r7, #22]
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 80188f2:	f107 0310 	add.w	r3, r7, #16
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7f7 fe86 	bl	8010608 <lv_draw_mask_is_any>
 80188fc:	4603      	mov	r3, r0
 80188fe:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
#endif
    blend_dsc.blend_area = &fill_area;
 8018902:	f107 0318 	add.w	r3, r7, #24
 8018906:	623b      	str	r3, [r7, #32]
    blend_dsc.mask_area = &fill_area;
 8018908:	f107 0318 	add.w	r3, r7, #24
 801890c:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t col_bit_max = 8 - bpp;
 801890e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018912:	f1c3 0308 	rsb	r3, r3, #8
 8018916:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8018918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801891a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801891c:	441a      	add	r2, r3
 801891e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018920:	1ad3      	subs	r3, r2, r3
 8018922:	461a      	mov	r2, r3
 8018924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018928:	fb02 f303 	mul.w	r3, r2, r3
 801892c:	647b      	str	r3, [r7, #68]	; 0x44

    for(row = row_start ; row < row_end; row++) {
 801892e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018934:	e0c3      	b.n	8018abe <draw_letter_normal+0x506>
#if LV_DRAW_COMPLEX
        int32_t mask_p_start = mask_p;
 8018936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801893a:	643b      	str	r3, [r7, #64]	; 0x40
#endif
        bitmask = bitmask_init >> col_bit;
 801893c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8018940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018944:	fa22 f303 	lsr.w	r3, r2, r3
 8018948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        for(col = col_start; col < col_end; col++) {
 801894c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801894e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8018952:	e04f      	b.n	80189f4 <draw_letter_normal+0x43c>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 8018954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018958:	781b      	ldrb	r3, [r3, #0]
 801895a:	461a      	mov	r2, r3
 801895c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018960:	401a      	ands	r2, r3
 8018962:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018968:	1acb      	subs	r3, r1, r3
 801896a:	fa22 f303 	lsr.w	r3, r2, r3
 801896e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(letter_px) {
 8018972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018976:	2b00      	cmp	r3, #0
 8018978:	d00b      	beq.n	8018992 <draw_letter_normal+0x3da>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 801897a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801897e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018982:	441a      	add	r2, r3
 8018984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018988:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801898a:	440b      	add	r3, r1
 801898c:	7812      	ldrb	r2, [r2, #0]
 801898e:	701a      	strb	r2, [r3, #0]
 8018990:	e005      	b.n	801899e <draw_letter_normal+0x3e6>
            }
            else {
                mask_buf[mask_p] = 0;
 8018992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018998:	4413      	add	r3, r2
 801899a:	2200      	movs	r2, #0
 801899c:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 801899e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80189a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189a4:	429a      	cmp	r2, r3
 80189a6:	d20f      	bcs.n	80189c8 <draw_letter_normal+0x410>
                col_bit += bpp;
 80189a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80189ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80189b0:	4413      	add	r3, r2
 80189b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask >> bpp;
 80189b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80189ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80189be:	fa22 f303 	lsr.w	r3, r2, r3
 80189c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80189c6:	e00b      	b.n	80189e0 <draw_letter_normal+0x428>
            }
            else {
                col_bit = 0;
 80189c8:	2300      	movs	r3, #0
 80189ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask_init;
 80189ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80189d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                map_p++;
 80189d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80189da:	3301      	adds	r3, #1
 80189dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            }

            /*Next mask byte*/
            mask_p++;
 80189e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80189e4:	3301      	adds	r3, #1
 80189e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        for(col = col_start; col < col_end; col++) {
 80189ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80189ee:	3301      	adds	r3, #1
 80189f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80189f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80189f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80189fa:	429a      	cmp	r2, r3
 80189fc:	dbaa      	blt.n	8018954 <draw_letter_normal+0x39c>
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 80189fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d01a      	beq.n	8018a3c <draw_letter_normal+0x484>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 8018a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018a0a:	18d0      	adds	r0, r2, r3
 8018a0c:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8018a10:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8018a14:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018a18:	f7f7 fcf8 	bl	801040c <lv_draw_mask_apply>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                                    fill_w);
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8018a22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d108      	bne.n	8018a3c <draw_letter_normal+0x484>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 8018a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018a2e:	4413      	add	r3, r2
 8018a30:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8018a34:	4611      	mov	r1, r2
 8018a36:	4618      	mov	r0, r3
 8018a38:	f008 fb26 	bl	8021088 <lv_memset_00>
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8018a3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a40:	1ad3      	subs	r3, r2, r3
 8018a42:	461a      	mov	r2, r3
 8018a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018a48:	4413      	add	r3, r2
 8018a4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018a4c:	429a      	cmp	r2, r3
 8018a4e:	d907      	bls.n	8018a60 <draw_letter_normal+0x4a8>
            fill_area.y2 ++;
 8018a50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018a54:	b29b      	uxth	r3, r3
 8018a56:	3301      	adds	r3, #1
 8018a58:	b29b      	uxth	r3, r3
 8018a5a:	b21b      	sxth	r3, r3
 8018a5c:	83fb      	strh	r3, [r7, #30]
 8018a5e:	e015      	b.n	8018a8c <draw_letter_normal+0x4d4>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8018a60:	2302      	movs	r3, #2
 8018a62:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018a66:	f107 0320 	add.w	r3, r7, #32
 8018a6a:	4619      	mov	r1, r3
 8018a6c:	68f8      	ldr	r0, [r7, #12]
 8018a6e:	f7fd f89b 	bl	8015ba8 <lv_draw_sw_blend>

            fill_area.y1 = fill_area.y2 + 1;
 8018a72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018a76:	b29b      	uxth	r3, r3
 8018a78:	3301      	adds	r3, #1
 8018a7a:	b29b      	uxth	r3, r3
 8018a7c:	b21b      	sxth	r3, r3
 8018a7e:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = fill_area.y1;
 8018a80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8018a84:	83fb      	strh	r3, [r7, #30]
            mask_p = 0;
 8018a86:	2300      	movs	r3, #0
 8018a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }

        col_bit += col_bit_row_ofs;
 8018a8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a92:	4413      	add	r3, r2
 8018a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        map_p += (col_bit >> 3);
 8018a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018a9c:	08db      	lsrs	r3, r3, #3
 8018a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018aa2:	4413      	add	r3, r2
 8018aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 8018aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018aac:	f003 0307 	and.w	r3, r3, #7
 8018ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
 8018ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018ab8:	3301      	adds	r3, #1
 8018aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018abe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	f6ff af36 	blt.w	8018936 <draw_letter_normal+0x37e>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8018aca:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8018ace:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	d012      	beq.n	8018afc <draw_letter_normal+0x544>
        fill_area.y2--;
 8018ad6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018ada:	b29b      	uxth	r3, r3
 8018adc:	3b01      	subs	r3, #1
 8018ade:	b29b      	uxth	r3, r3
 8018ae0:	b21b      	sxth	r3, r3
 8018ae2:	83fb      	strh	r3, [r7, #30]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8018ae4:	2302      	movs	r3, #2
 8018ae6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018aea:	f107 0320 	add.w	r3, r7, #32
 8018aee:	4619      	mov	r1, r3
 8018af0:	68f8      	ldr	r0, [r7, #12]
 8018af2:	f7fd f859 	bl	8015ba8 <lv_draw_sw_blend>
        mask_p = 0;
 8018af6:	2300      	movs	r3, #0
 8018af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    lv_mem_buf_release(mask_buf);
 8018afc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8018afe:	f007 ffc5 	bl	8020a8c <lv_mem_buf_release>
 8018b02:	e000      	b.n	8018b06 <draw_letter_normal+0x54e>
            return; /*Invalid bpp. Can't render the letter*/
 8018b04:	bf00      	nop
}
 8018b06:	37a8      	adds	r7, #168	; 0xa8
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	bd80      	pop	{r7, pc}

08018b0c <lv_area_get_width>:
{
 8018b0c:	b480      	push	{r7}
 8018b0e:	b083      	sub	sp, #12
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018b1a:	b29a      	uxth	r2, r3
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	1ad3      	subs	r3, r2, r3
 8018b26:	b29b      	uxth	r3, r3
 8018b28:	3301      	adds	r3, #1
 8018b2a:	b29b      	uxth	r3, r3
 8018b2c:	b21b      	sxth	r3, r3
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	370c      	adds	r7, #12
 8018b32:	46bd      	mov	sp, r7
 8018b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b38:	4770      	bx	lr

08018b3a <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 8018b3a:	b580      	push	{r7, lr}
 8018b3c:	b098      	sub	sp, #96	; 0x60
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	60f8      	str	r0, [r7, #12]
 8018b42:	60b9      	str	r1, [r7, #8]
 8018b44:	607a      	str	r2, [r7, #4]
 8018b46:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 8018b48:	68bb      	ldr	r3, [r7, #8]
 8018b4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	f000 8172 	beq.w	8018e38 <lv_draw_sw_line+0x2fe>
    if(dsc->opa <= LV_OPA_MIN) return;
 8018b54:	68bb      	ldr	r3, [r7, #8]
 8018b56:	7a1b      	ldrb	r3, [r3, #8]
 8018b58:	2b02      	cmp	r3, #2
 8018b5a:	f240 816f 	bls.w	8018e3c <lv_draw_sw_line+0x302>

    if(point1->x == point2->x && point1->y == point2->y) return;
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b64:	683b      	ldr	r3, [r7, #0]
 8018b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b6a:	429a      	cmp	r2, r3
 8018b6c:	d108      	bne.n	8018b80 <lv_draw_sw_line+0x46>
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018b74:	683b      	ldr	r3, [r7, #0]
 8018b76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	f000 8160 	beq.w	8018e40 <lv_draw_sw_line+0x306>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 8018b80:	683b      	ldr	r3, [r7, #0]
 8018b82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b8c:	4293      	cmp	r3, r2
 8018b8e:	bfa8      	it	ge
 8018b90:	4613      	movge	r3, r2
 8018b92:	b21b      	sxth	r3, r3
 8018b94:	b29a      	uxth	r2, r3
 8018b96:	68bb      	ldr	r3, [r7, #8]
 8018b98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	da00      	bge.n	8018ba2 <lv_draw_sw_line+0x68>
 8018ba0:	3301      	adds	r3, #1
 8018ba2:	105b      	asrs	r3, r3, #1
 8018ba4:	b21b      	sxth	r3, r3
 8018ba6:	b29b      	uxth	r3, r3
 8018ba8:	1ad3      	subs	r3, r2, r3
 8018baa:	b29b      	uxth	r3, r3
 8018bac:	b21b      	sxth	r3, r3
 8018bae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bbe:	4293      	cmp	r3, r2
 8018bc0:	bfb8      	it	lt
 8018bc2:	4613      	movlt	r3, r2
 8018bc4:	b21b      	sxth	r3, r3
 8018bc6:	b29a      	uxth	r2, r3
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	da00      	bge.n	8018bd4 <lv_draw_sw_line+0x9a>
 8018bd2:	3301      	adds	r3, #1
 8018bd4:	105b      	asrs	r3, r3, #1
 8018bd6:	b21b      	sxth	r3, r3
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	4413      	add	r3, r2
 8018bdc:	b29b      	uxth	r3, r3
 8018bde:	b21b      	sxth	r3, r3
 8018be0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 8018be4:	683b      	ldr	r3, [r7, #0]
 8018be6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018bf0:	4293      	cmp	r3, r2
 8018bf2:	bfa8      	it	ge
 8018bf4:	4613      	movge	r3, r2
 8018bf6:	b21b      	sxth	r3, r3
 8018bf8:	b29a      	uxth	r2, r3
 8018bfa:	68bb      	ldr	r3, [r7, #8]
 8018bfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	da00      	bge.n	8018c06 <lv_draw_sw_line+0xcc>
 8018c04:	3301      	adds	r3, #1
 8018c06:	105b      	asrs	r3, r3, #1
 8018c08:	b21b      	sxth	r3, r3
 8018c0a:	b29b      	uxth	r3, r3
 8018c0c:	1ad3      	subs	r3, r2, r3
 8018c0e:	b29b      	uxth	r3, r3
 8018c10:	b21b      	sxth	r3, r3
 8018c12:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018c22:	4293      	cmp	r3, r2
 8018c24:	bfb8      	it	lt
 8018c26:	4613      	movlt	r3, r2
 8018c28:	b21b      	sxth	r3, r3
 8018c2a:	b29a      	uxth	r2, r3
 8018c2c:	68bb      	ldr	r3, [r7, #8]
 8018c2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	da00      	bge.n	8018c38 <lv_draw_sw_line+0xfe>
 8018c36:	3301      	adds	r3, #1
 8018c38:	105b      	asrs	r3, r3, #1
 8018c3a:	b21b      	sxth	r3, r3
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	4413      	add	r3, r2
 8018c40:	b29b      	uxth	r3, r3
 8018c42:	b21b      	sxth	r3, r3
 8018c44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	689a      	ldr	r2, [r3, #8]
 8018c4c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018c50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018c54:	4618      	mov	r0, r3
 8018c56:	f006 fac3 	bl	801f1e0 <_lv_area_intersect>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(!is_common) return;
 8018c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018c64:	f083 0301 	eor.w	r3, r3, #1
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	f040 80ea 	bne.w	8018e44 <lv_draw_sw_line+0x30a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	689b      	ldr	r3, [r3, #8]
 8018c74:	65bb      	str	r3, [r7, #88]	; 0x58
    draw_ctx->clip_area = &clip_line;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018c7c:	609a      	str	r2, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	d106      	bne.n	8018c9c <lv_draw_sw_line+0x162>
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	687a      	ldr	r2, [r7, #4]
 8018c92:	68b9      	ldr	r1, [r7, #8]
 8018c94:	68f8      	ldr	r0, [r7, #12]
 8018c96:	f000 f8d9 	bl	8018e4c <draw_line_hor>
 8018c9a:	e014      	b.n	8018cc6 <lv_draw_sw_line+0x18c>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ca2:	683b      	ldr	r3, [r7, #0]
 8018ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ca8:	429a      	cmp	r2, r3
 8018caa:	d106      	bne.n	8018cba <lv_draw_sw_line+0x180>
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	687a      	ldr	r2, [r7, #4]
 8018cb0:	68b9      	ldr	r1, [r7, #8]
 8018cb2:	68f8      	ldr	r0, [r7, #12]
 8018cb4:	f000 fa2b 	bl	801910e <draw_line_ver>
 8018cb8:	e005      	b.n	8018cc6 <lv_draw_sw_line+0x18c>
    else draw_line_skew(draw_ctx, dsc, point1, point2);
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	687a      	ldr	r2, [r7, #4]
 8018cbe:	68b9      	ldr	r1, [r7, #8]
 8018cc0:	68f8      	ldr	r0, [r7, #12]
 8018cc2:	f000 fb55 	bl	8019370 <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	7a5b      	ldrb	r3, [r3, #9]
 8018cca:	f003 0308 	and.w	r3, r3, #8
 8018cce:	b2db      	uxtb	r3, r3
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d107      	bne.n	8018ce4 <lv_draw_sw_line+0x1aa>
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	7a5b      	ldrb	r3, [r3, #9]
 8018cd8:	f003 0304 	and.w	r3, r3, #4
 8018cdc:	b2db      	uxtb	r3, r3
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	f000 80a6 	beq.w	8018e30 <lv_draw_sw_line+0x2f6>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 8018ce4:	f107 0310 	add.w	r3, r7, #16
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f7f9 ff25 	bl	8012b38 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 8018cee:	68bb      	ldr	r3, [r7, #8]
 8018cf0:	781b      	ldrb	r3, [r3, #0]
 8018cf2:	753b      	strb	r3, [r7, #20]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8018cf4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018cf8:	823b      	strh	r3, [r7, #16]
        cir_dsc.bg_opa = dsc->opa;
 8018cfa:	68bb      	ldr	r3, [r7, #8]
 8018cfc:	7a1b      	ldrb	r3, [r3, #8]
 8018cfe:	74fb      	strb	r3, [r7, #19]

        int32_t r = (dsc->width >> 1);
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d06:	105b      	asrs	r3, r3, #1
 8018d08:	b21b      	sxth	r3, r3
 8018d0a:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 8018d0c:	68bb      	ldr	r3, [r7, #8]
 8018d0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	f003 0301 	and.w	r3, r3, #1
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	bf0c      	ite	eq
 8018d1c:	2301      	moveq	r3, #1
 8018d1e:	2300      	movne	r3, #0
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t cir_area;

        if(dsc->round_start) {
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	7a5b      	ldrb	r3, [r3, #9]
 8018d28:	f003 0304 	and.w	r3, r3, #4
 8018d2c:	b2db      	uxtb	r3, r3
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d03b      	beq.n	8018daa <lv_draw_sw_line+0x270>
            cir_area.x1 = point1->x - r;
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d38:	b29a      	uxth	r2, r3
 8018d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d3c:	b29b      	uxth	r3, r3
 8018d3e:	1ad3      	subs	r3, r2, r3
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	b21b      	sxth	r3, r3
 8018d44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point1->y - r;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d4e:	b29a      	uxth	r2, r3
 8018d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d52:	b29b      	uxth	r3, r3
 8018d54:	1ad3      	subs	r3, r2, r3
 8018d56:	b29b      	uxth	r3, r3
 8018d58:	b21b      	sxth	r3, r3
 8018d5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point1->x + r - r_corr;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d64:	b29a      	uxth	r2, r3
 8018d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d68:	b29b      	uxth	r3, r3
 8018d6a:	4413      	add	r3, r2
 8018d6c:	b29a      	uxth	r2, r3
 8018d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d70:	b29b      	uxth	r3, r3
 8018d72:	1ad3      	subs	r3, r2, r3
 8018d74:	b29b      	uxth	r3, r3
 8018d76:	b21b      	sxth	r3, r3
 8018d78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point1->y + r - r_corr ;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d82:	b29a      	uxth	r2, r3
 8018d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d86:	b29b      	uxth	r3, r3
 8018d88:	4413      	add	r3, r2
 8018d8a:	b29a      	uxth	r2, r3
 8018d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d8e:	b29b      	uxth	r3, r3
 8018d90:	1ad3      	subs	r3, r2, r3
 8018d92:	b29b      	uxth	r3, r3
 8018d94:	b21b      	sxth	r3, r3
 8018d96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 8018d9a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018d9e:	f107 0310 	add.w	r3, r7, #16
 8018da2:	4619      	mov	r1, r3
 8018da4:	68f8      	ldr	r0, [r7, #12]
 8018da6:	f7f9 ff0b 	bl	8012bc0 <lv_draw_rect>
        }

        if(dsc->round_end) {
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	7a5b      	ldrb	r3, [r3, #9]
 8018dae:	f003 0308 	and.w	r3, r3, #8
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d03b      	beq.n	8018e30 <lv_draw_sw_line+0x2f6>
            cir_area.x1 = point2->x - r;
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018dbe:	b29a      	uxth	r2, r3
 8018dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018dc2:	b29b      	uxth	r3, r3
 8018dc4:	1ad3      	subs	r3, r2, r3
 8018dc6:	b29b      	uxth	r3, r3
 8018dc8:	b21b      	sxth	r3, r3
 8018dca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point2->y - r;
 8018dce:	683b      	ldr	r3, [r7, #0]
 8018dd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018dd4:	b29a      	uxth	r2, r3
 8018dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	1ad3      	subs	r3, r2, r3
 8018ddc:	b29b      	uxth	r3, r3
 8018dde:	b21b      	sxth	r3, r3
 8018de0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point2->x + r - r_corr;
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018dea:	b29a      	uxth	r2, r3
 8018dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018dee:	b29b      	uxth	r3, r3
 8018df0:	4413      	add	r3, r2
 8018df2:	b29a      	uxth	r2, r3
 8018df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018df6:	b29b      	uxth	r3, r3
 8018df8:	1ad3      	subs	r3, r2, r3
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	b21b      	sxth	r3, r3
 8018dfe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point2->y + r - r_corr ;
 8018e02:	683b      	ldr	r3, [r7, #0]
 8018e04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018e08:	b29a      	uxth	r2, r3
 8018e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018e0c:	b29b      	uxth	r3, r3
 8018e0e:	4413      	add	r3, r2
 8018e10:	b29a      	uxth	r2, r3
 8018e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	1ad3      	subs	r3, r2, r3
 8018e18:	b29b      	uxth	r3, r3
 8018e1a:	b21b      	sxth	r3, r3
 8018e1c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 8018e20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018e24:	f107 0310 	add.w	r3, r7, #16
 8018e28:	4619      	mov	r1, r3
 8018e2a:	68f8      	ldr	r0, [r7, #12]
 8018e2c:	f7f9 fec8 	bl	8012bc0 <lv_draw_rect>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018e34:	609a      	str	r2, [r3, #8]
 8018e36:	e006      	b.n	8018e46 <lv_draw_sw_line+0x30c>
    if(dsc->width == 0) return;
 8018e38:	bf00      	nop
 8018e3a:	e004      	b.n	8018e46 <lv_draw_sw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 8018e3c:	bf00      	nop
 8018e3e:	e002      	b.n	8018e46 <lv_draw_sw_line+0x30c>
    if(point1->x == point2->x && point1->y == point2->y) return;
 8018e40:	bf00      	nop
 8018e42:	e000      	b.n	8018e46 <lv_draw_sw_line+0x30c>
    if(!is_common) return;
 8018e44:	bf00      	nop
}
 8018e46:	3760      	adds	r7, #96	; 0x60
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}

08018e4c <draw_line_hor>:
 **********************/


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b098      	sub	sp, #96	; 0x60
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	60f8      	str	r0, [r7, #12]
 8018e54:	60b9      	str	r1, [r7, #8]
 8018e56:	607a      	str	r2, [r7, #4]
 8018e58:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 8018e5a:	68bb      	ldr	r3, [r7, #8]
 8018e5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018e60:	3b01      	subs	r3, #1
 8018e62:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 8018e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e66:	105b      	asrs	r3, r3, #1
 8018e68:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8018e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e6c:	f003 0301 	and.w	r3, r3, #1
 8018e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018e72:	4413      	add	r3, r2
 8018e74:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e82:	4293      	cmp	r3, r2
 8018e84:	bfa8      	it	ge
 8018e86:	4613      	movge	r3, r2
 8018e88:	b21b      	sxth	r3, r3
 8018e8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e98:	4293      	cmp	r3, r2
 8018e9a:	bfb8      	it	lt
 8018e9c:	4613      	movlt	r3, r2
 8018e9e:	b21b      	sxth	r3, r3
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	3b01      	subs	r3, #1
 8018ea4:	b29b      	uxth	r3, r3
 8018ea6:	b21b      	sxth	r3, r3
 8018ea8:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.y1 = point1->y - w_half1;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018eb0:	b29a      	uxth	r2, r3
 8018eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018eb4:	b29b      	uxth	r3, r3
 8018eb6:	1ad3      	subs	r3, r2, r3
 8018eb8:	b29b      	uxth	r3, r3
 8018eba:	b21b      	sxth	r3, r3
 8018ebc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    blend_area.y2 = point1->y + w_half0;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018ec4:	b29a      	uxth	r2, r3
 8018ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ec8:	b29b      	uxth	r3, r3
 8018eca:	4413      	add	r3, r2
 8018ecc:	b29b      	uxth	r3, r3
 8018ece:	b21b      	sxth	r3, r3
 8018ed0:	867b      	strh	r3, [r7, #50]	; 0x32

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	689a      	ldr	r2, [r3, #8]
 8018ed6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8018eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f006 f97e 	bl	801f1e0 <_lv_area_intersect>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 8018eea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018eee:	f083 0301 	eor.w	r3, r3, #1
 8018ef2:	b2db      	uxtb	r3, r3
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	f040 8106 	bne.w	8019106 <draw_line_hor+0x2ba>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8018efa:	68bb      	ldr	r3, [r7, #8]
 8018efc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d006      	beq.n	8018f12 <draw_line_hor+0xc6>
 8018f04:	68bb      	ldr	r3, [r7, #8]
 8018f06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d001      	beq.n	8018f12 <draw_line_hor+0xc6>
 8018f0e:	2301      	movs	r3, #1
 8018f10:	e000      	b.n	8018f14 <draw_line_hor+0xc8>
 8018f12:	2300      	movs	r3, #0
 8018f14:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8018f18:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8018f1c:	f003 0301 	and.w	r3, r3, #1
 8018f20:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 8018f24:	2301      	movs	r3, #1
 8018f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8018f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7f7 fb6a 	bl	8010608 <lv_draw_mask_is_any>
 8018f34:	4603      	mov	r3, r0
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d003      	beq.n	8018f42 <draw_line_hor+0xf6>
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018f40:	e006      	b.n	8018f50 <draw_line_hor+0x104>
    else if(dashed) simple_mode = false;
 8018f42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d002      	beq.n	8018f50 <draw_line_hor+0x104>
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8018f50:	f107 0310 	add.w	r3, r7, #16
 8018f54:	211c      	movs	r1, #28
 8018f56:	4618      	mov	r0, r3
 8018f58:	f008 f896 	bl	8021088 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8018f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018f60:	613b      	str	r3, [r7, #16]
    blend_dsc.color = dsc->color;
 8018f62:	68bb      	ldr	r3, [r7, #8]
 8018f64:	781b      	ldrb	r3, [r3, #0]
 8018f66:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = dsc->opa;
 8018f68:	68bb      	ldr	r3, [r7, #8]
 8018f6a:	7a1b      	ldrb	r3, [r3, #8]
 8018f6c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8018f70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d006      	beq.n	8018f86 <draw_line_hor+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8018f78:	f107 0310 	add.w	r3, r7, #16
 8018f7c:	4619      	mov	r1, r3
 8018f7e:	68f8      	ldr	r0, [r7, #12]
 8018f80:	f7fc fe12 	bl	8015ba8 <lv_draw_sw_blend>
 8018f84:	e0c0      	b.n	8019108 <draw_line_hor+0x2bc>
    }
#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {

        int32_t blend_area_w = lv_area_get_width(&blend_area);
 8018f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f7ff fdbe 	bl	8018b0c <lv_area_get_width>
 8018f90:	4603      	mov	r3, r0
 8018f92:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 8018f94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018f96:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 8018f98:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8018f9c:	867b      	strh	r3, [r7, #50]	; 0x32

        lv_coord_t dash_start = 0;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 8018fa4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d011      	beq.n	8018fd0 <draw_line_hor+0x184>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8018fac:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8018fb0:	461a      	mov	r2, r3
 8018fb2:	68bb      	ldr	r3, [r7, #8]
 8018fb4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018fb8:	4619      	mov	r1, r3
 8018fba:	68bb      	ldr	r3, [r7, #8]
 8018fbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018fc0:	440b      	add	r3, r1
 8018fc2:	fb92 f1f3 	sdiv	r1, r2, r3
 8018fc6:	fb01 f303 	mul.w	r3, r1, r3
 8018fca:	1ad3      	subs	r3, r2, r3
 8018fcc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 8018fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f007 fcae 	bl	8020934 <lv_mem_buf_get>
 8018fd8:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 8018fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fdc:	61fb      	str	r3, [r7, #28]
        blend_dsc.mask_area = &blend_area;
 8018fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018fe2:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 8018fe4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8018fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8018fea:	e082      	b.n	80190f2 <draw_line_hor+0x2a6>
            lv_memset_ff(mask_buf, blend_area_w);
 8018fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018fee:	4619      	mov	r1, r3
 8018ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018ff2:	f008 f8ca 	bl	802118a <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 8018ff6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8018ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018ffc:	b21a      	sxth	r2, r3
 8018ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019000:	b21b      	sxth	r3, r3
 8019002:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019004:	f7f7 fa02 	bl	801040c <lv_draw_mask_apply>
 8019008:	4603      	mov	r3, r0
 801900a:	f887 3020 	strb.w	r3, [r7, #32]

            if(dashed) {
 801900e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019012:	2b00      	cmp	r3, #0
 8019014:	d056      	beq.n	80190c4 <draw_line_hor+0x278>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8019016:	f897 3020 	ldrb.w	r3, [r7, #32]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d052      	beq.n	80190c4 <draw_line_hor+0x278>
                    lv_coord_t dash_cnt = dash_start;
 801901e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019022:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    lv_coord_t i;
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8019026:	2300      	movs	r3, #0
 8019028:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801902c:	e042      	b.n	80190b4 <draw_line_hor+0x268>
                        if(dash_cnt <= dsc->dash_width) {
 801902e:	68bb      	ldr	r3, [r7, #8]
 8019030:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019034:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8019038:	429a      	cmp	r2, r3
 801903a:	dc17      	bgt.n	801906c <draw_line_hor+0x220>
                            int16_t diff = dsc->dash_width - dash_cnt;
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019042:	b29a      	uxth	r2, r3
 8019044:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8019048:	1ad3      	subs	r3, r2, r3
 801904a:	b29b      	uxth	r3, r3
 801904c:	86fb      	strh	r3, [r7, #54]	; 0x36
                            i += diff;
 801904e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8019052:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019054:	4413      	add	r3, r2
 8019056:	b29b      	uxth	r3, r3
 8019058:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                            dash_cnt += diff;
 801905c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8019060:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019062:	4413      	add	r3, r2
 8019064:	b29b      	uxth	r3, r3
 8019066:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801906a:	e015      	b.n	8019098 <draw_line_hor+0x24c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801906c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019076:	4619      	mov	r1, r3
 8019078:	68bb      	ldr	r3, [r7, #8]
 801907a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801907e:	440b      	add	r3, r1
 8019080:	429a      	cmp	r2, r3
 8019082:	db03      	blt.n	801908c <draw_line_hor+0x240>
                            dash_cnt = 0;
 8019084:	2300      	movs	r3, #0
 8019086:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801908a:	e005      	b.n	8019098 <draw_line_hor+0x24c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 801908c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8019090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019092:	4413      	add	r3, r2
 8019094:	2200      	movs	r2, #0
 8019096:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8019098:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801909c:	b29b      	uxth	r3, r3
 801909e:	3301      	adds	r3, #1
 80190a0:	b29b      	uxth	r3, r3
 80190a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80190a6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80190aa:	b29b      	uxth	r3, r3
 80190ac:	3301      	adds	r3, #1
 80190ae:	b29b      	uxth	r3, r3
 80190b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80190b4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80190b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80190ba:	429a      	cmp	r2, r3
 80190bc:	dcb7      	bgt.n	801902e <draw_line_hor+0x1e2>
                        }
                    }

                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80190be:	2302      	movs	r3, #2
 80190c0:	f887 3020 	strb.w	r3, [r7, #32]
                }
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80190c4:	f107 0310 	add.w	r3, r7, #16
 80190c8:	4619      	mov	r1, r3
 80190ca:	68f8      	ldr	r0, [r7, #12]
 80190cc:	f7fc fd6c 	bl	8015ba8 <lv_draw_sw_blend>

            blend_area.y1++;
 80190d0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80190d4:	b29b      	uxth	r3, r3
 80190d6:	3301      	adds	r3, #1
 80190d8:	b29b      	uxth	r3, r3
 80190da:	b21b      	sxth	r3, r3
 80190dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
            blend_area.y2++;
 80190de:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80190e2:	b29b      	uxth	r3, r3
 80190e4:	3301      	adds	r3, #1
 80190e6:	b29b      	uxth	r3, r3
 80190e8:	b21b      	sxth	r3, r3
 80190ea:	867b      	strh	r3, [r7, #50]	; 0x32
        for(h = blend_area.y1; h <= y2; h++) {
 80190ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80190ee:	3301      	adds	r3, #1
 80190f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80190f2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80190f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80190f8:	429a      	cmp	r2, r3
 80190fa:	f77f af77 	ble.w	8018fec <draw_line_hor+0x1a0>
        }
        lv_mem_buf_release(mask_buf);
 80190fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019100:	f007 fcc4 	bl	8020a8c <lv_mem_buf_release>
 8019104:	e000      	b.n	8019108 <draw_line_hor+0x2bc>
    if(!is_common) return;
 8019106:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 8019108:	3760      	adds	r7, #96	; 0x60
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}

0801910e <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801910e:	b580      	push	{r7, lr}
 8019110:	b098      	sub	sp, #96	; 0x60
 8019112:	af00      	add	r7, sp, #0
 8019114:	60f8      	str	r0, [r7, #12]
 8019116:	60b9      	str	r1, [r7, #8]
 8019118:	607a      	str	r2, [r7, #4]
 801911a:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019122:	3b01      	subs	r3, #1
 8019124:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 8019126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019128:	105b      	asrs	r3, r3, #1
 801912a:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801912c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801912e:	f003 0301 	and.w	r3, r3, #1
 8019132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019134:	4413      	add	r3, r2
 8019136:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = point1->x - w_half1;
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801913e:	b29a      	uxth	r2, r3
 8019140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019142:	b29b      	uxth	r3, r3
 8019144:	1ad3      	subs	r3, r2, r3
 8019146:	b29b      	uxth	r3, r3
 8019148:	b21b      	sxth	r3, r3
 801914a:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.x2 = point1->x + w_half0;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019152:	b29a      	uxth	r2, r3
 8019154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019156:	b29b      	uxth	r3, r3
 8019158:	4413      	add	r3, r2
 801915a:	b29b      	uxth	r3, r3
 801915c:	b21b      	sxth	r3, r3
 801915e:	86bb      	strh	r3, [r7, #52]	; 0x34
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 8019160:	683b      	ldr	r3, [r7, #0]
 8019162:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801916c:	4293      	cmp	r3, r2
 801916e:	bfa8      	it	ge
 8019170:	4613      	movge	r3, r2
 8019172:	b21b      	sxth	r3, r3
 8019174:	867b      	strh	r3, [r7, #50]	; 0x32
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 8019176:	683b      	ldr	r3, [r7, #0]
 8019178:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019182:	4293      	cmp	r3, r2
 8019184:	bfb8      	it	lt
 8019186:	4613      	movlt	r3, r2
 8019188:	b21b      	sxth	r3, r3
 801918a:	b29b      	uxth	r3, r3
 801918c:	3b01      	subs	r3, #1
 801918e:	b29b      	uxth	r3, r3
 8019190:	b21b      	sxth	r3, r3
 8019192:	86fb      	strh	r3, [r7, #54]	; 0x36

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	689a      	ldr	r2, [r3, #8]
 8019198:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801919c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80191a0:	4618      	mov	r0, r3
 80191a2:	f006 f81d 	bl	801f1e0 <_lv_area_intersect>
 80191a6:	4603      	mov	r3, r0
 80191a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 80191ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80191b0:	f083 0301 	eor.w	r3, r3, #1
 80191b4:	b2db      	uxtb	r3, r3
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	f040 80d6 	bne.w	8019368 <draw_line_ver+0x25a>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80191bc:	68bb      	ldr	r3, [r7, #8]
 80191be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d006      	beq.n	80191d4 <draw_line_ver+0xc6>
 80191c6:	68bb      	ldr	r3, [r7, #8]
 80191c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d001      	beq.n	80191d4 <draw_line_ver+0xc6>
 80191d0:	2301      	movs	r3, #1
 80191d2:	e000      	b.n	80191d6 <draw_line_ver+0xc8>
 80191d4:	2300      	movs	r3, #0
 80191d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80191da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80191de:	f003 0301 	and.w	r3, r3, #1
 80191e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 80191e6:	2301      	movs	r3, #1
 80191e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 80191ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80191f0:	4618      	mov	r0, r3
 80191f2:	f7f7 fa09 	bl	8010608 <lv_draw_mask_is_any>
 80191f6:	4603      	mov	r3, r0
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d003      	beq.n	8019204 <draw_line_ver+0xf6>
 80191fc:	2300      	movs	r3, #0
 80191fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8019202:	e006      	b.n	8019212 <draw_line_ver+0x104>
    else if(dashed) simple_mode = false;
 8019204:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019208:	2b00      	cmp	r3, #0
 801920a:	d002      	beq.n	8019212 <draw_line_ver+0x104>
 801920c:	2300      	movs	r3, #0
 801920e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8019212:	f107 0314 	add.w	r3, r7, #20
 8019216:	211c      	movs	r1, #28
 8019218:	4618      	mov	r0, r3
 801921a:	f007 ff35 	bl	8021088 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801921e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019222:	617b      	str	r3, [r7, #20]
    blend_dsc.color = dsc->color;
 8019224:	68bb      	ldr	r3, [r7, #8]
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->opa;
 801922a:	68bb      	ldr	r3, [r7, #8]
 801922c:	7a1b      	ldrb	r3, [r3, #8]
 801922e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8019232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019236:	2b00      	cmp	r3, #0
 8019238:	d006      	beq.n	8019248 <draw_line_ver+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801923a:	f107 0314 	add.w	r3, r7, #20
 801923e:	4619      	mov	r1, r3
 8019240:	68f8      	ldr	r0, [r7, #12]
 8019242:	f7fc fcb1 	bl	8015ba8 <lv_draw_sw_blend>
 8019246:	e090      	b.n	801936a <draw_line_ver+0x25c>
    }

#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {
        int32_t draw_area_w = lv_area_get_width(&blend_area);
 8019248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801924c:	4618      	mov	r0, r3
 801924e:	f7ff fc5d 	bl	8018b0c <lv_area_get_width>
 8019252:	4603      	mov	r3, r0
 8019254:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 8019256:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019258:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801925a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801925e:	86fb      	strh	r3, [r7, #54]	; 0x36

        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 8019260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019262:	4618      	mov	r0, r3
 8019264:	f007 fb66 	bl	8020934 <lv_mem_buf_get>
 8019268:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801926c:	623b      	str	r3, [r7, #32]
        blend_dsc.mask_area = &blend_area;
 801926e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019272:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_coord_t dash_start = 0;
 8019274:	2300      	movs	r3, #0
 8019276:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801927a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801927e:	2b00      	cmp	r3, #0
 8019280:	d011      	beq.n	80192a6 <draw_line_ver+0x198>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 8019282:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8019286:	461a      	mov	r2, r3
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801928e:	4619      	mov	r1, r3
 8019290:	68bb      	ldr	r3, [r7, #8]
 8019292:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019296:	440b      	add	r3, r1
 8019298:	fb92 f1f3 	sdiv	r1, r2, r3
 801929c:	fb01 f303 	mul.w	r3, r1, r3
 80192a0:	1ad3      	subs	r3, r2, r3
 80192a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_coord_t dash_cnt = dash_start;
 80192a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80192aa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 80192ae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80192b2:	657b      	str	r3, [r7, #84]	; 0x54
 80192b4:	e04f      	b.n	8019356 <draw_line_ver+0x248>
            lv_memset_ff(mask_buf, draw_area_w);
 80192b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192b8:	4619      	mov	r1, r3
 80192ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80192bc:	f007 ff65 	bl	802118a <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 80192c0:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 80192c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192c6:	b21a      	sxth	r2, r3
 80192c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192ca:	b21b      	sxth	r3, r3
 80192cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80192ce:	f7f7 f89d 	bl	801040c <lv_draw_mask_apply>
 80192d2:	4603      	mov	r3, r0
 80192d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if(dashed) {
 80192d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d023      	beq.n	8019328 <draw_line_ver+0x21a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 80192e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d018      	beq.n	801931a <draw_line_ver+0x20c>
                    if(dash_cnt > dsc->dash_width) {
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80192ee:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80192f2:	429a      	cmp	r2, r3
 80192f4:	dd02      	ble.n	80192fc <draw_line_ver+0x1ee>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 80192f6:	2300      	movs	r3, #0
 80192f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 80192fc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8019300:	68bb      	ldr	r3, [r7, #8]
 8019302:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019306:	4619      	mov	r1, r3
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801930e:	440b      	add	r3, r1
 8019310:	429a      	cmp	r2, r3
 8019312:	db02      	blt.n	801931a <draw_line_ver+0x20c>
                        dash_cnt = 0;
 8019314:	2300      	movs	r3, #0
 8019316:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    }
                }
                dash_cnt ++;
 801931a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801931e:	b29b      	uxth	r3, r3
 8019320:	3301      	adds	r3, #1
 8019322:	b29b      	uxth	r3, r3
 8019324:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019328:	f107 0314 	add.w	r3, r7, #20
 801932c:	4619      	mov	r1, r3
 801932e:	68f8      	ldr	r0, [r7, #12]
 8019330:	f7fc fc3a 	bl	8015ba8 <lv_draw_sw_blend>

            blend_area.y1++;
 8019334:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8019338:	b29b      	uxth	r3, r3
 801933a:	3301      	adds	r3, #1
 801933c:	b29b      	uxth	r3, r3
 801933e:	b21b      	sxth	r3, r3
 8019340:	867b      	strh	r3, [r7, #50]	; 0x32
            blend_area.y2++;
 8019342:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019346:	b29b      	uxth	r3, r3
 8019348:	3301      	adds	r3, #1
 801934a:	b29b      	uxth	r3, r3
 801934c:	b21b      	sxth	r3, r3
 801934e:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(h = blend_area.y1; h <= y2; h++) {
 8019350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019352:	3301      	adds	r3, #1
 8019354:	657b      	str	r3, [r7, #84]	; 0x54
 8019356:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801935a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801935c:	429a      	cmp	r2, r3
 801935e:	ddaa      	ble.n	80192b6 <draw_line_ver+0x1a8>
        }
        lv_mem_buf_release(mask_buf);
 8019360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019362:	f007 fb93 	bl	8020a8c <lv_mem_buf_release>
 8019366:	e000      	b.n	801936a <draw_line_ver+0x25c>
    if(!is_common) return;
 8019368:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801936a:	3760      	adds	r7, #96	; 0x60
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}

08019370 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                 const lv_point_t * point1, const lv_point_t * point2)
{
 8019370:	b5b0      	push	{r4, r5, r7, lr}
 8019372:	b0ce      	sub	sp, #312	; 0x138
 8019374:	af02      	add	r7, sp, #8
 8019376:	f507 7498 	add.w	r4, r7, #304	; 0x130
 801937a:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 801937e:	6020      	str	r0, [r4, #0]
 8019380:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8019384:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8019388:	6001      	str	r1, [r0, #0]
 801938a:	f507 7198 	add.w	r1, r7, #304	; 0x130
 801938e:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8019392:	600a      	str	r2, [r1, #0]
 8019394:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8019398:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 801939c:	6013      	str	r3, [r2, #0]
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 801939e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80193a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80193ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80193b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	da24      	bge.n	8019408 <draw_line_skew+0x98>
        p1.y = point1->y;
 80193be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80193c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80193cc:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point2->y;
 80193d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80193d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80193de:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point1->x;
 80193e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80193e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193f0:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point2->x;
 80193f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80193f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019402:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8019406:	e023      	b.n	8019450 <draw_line_skew+0xe0>
    }
    else {
        p1.y = point2->y;
 8019408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801940c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019416:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point1->y;
 801941a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801941e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019428:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point2->x;
 801942c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f9b3 3000 	ldrsh.w	r3, [r3]
 801943a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point1->x;
 801943e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	f9b3 3000 	ldrsh.w	r3, [r3]
 801944c:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    }

    int32_t xdiff = p2.x - p1.x;
 8019450:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 8019454:	461a      	mov	r2, r3
 8019456:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801945a:	1ad3      	subs	r3, r2, r3
 801945c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 8019460:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8019464:	461a      	mov	r2, r3
 8019466:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801946a:	1ad3      	subs	r3, r2, r3
 801946c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 8019470:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019474:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8019478:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801947c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8019480:	2b00      	cmp	r3, #0
 8019482:	bfb8      	it	lt
 8019484:	425b      	neglt	r3, r3
 8019486:	429a      	cmp	r2, r3
 8019488:	bfcc      	ite	gt
 801948a:	2301      	movgt	r3, #1
 801948c:	2300      	movle	r3, #0
 801948e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 8019492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019496:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80194a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 80194a4:	2300      	movs	r3, #0
 80194a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 80194aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d00f      	beq.n	80194d2 <draw_line_skew+0x162>
 80194b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	bfb8      	it	lt
 80194ba:	425b      	neglt	r3, r3
 80194bc:	015a      	lsls	r2, r3, #5
 80194be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	bfb8      	it	lt
 80194c6:	425b      	neglt	r3, r3
 80194c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80194cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80194d0:	e00e      	b.n	80194f0 <draw_line_skew+0x180>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 80194d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	bfb8      	it	lt
 80194da:	425b      	neglt	r3, r3
 80194dc:	015a      	lsls	r2, r3, #5
 80194de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	bfb8      	it	lt
 80194e6:	425b      	neglt	r3, r3
 80194e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80194ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 80194f0:	4a7f      	ldr	r2, [pc, #508]	; (80196f0 <draw_line_skew+0x380>)
 80194f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80194f6:	4413      	add	r3, r2
 80194f8:	781b      	ldrb	r3, [r3, #0]
 80194fa:	461a      	mov	r2, r3
 80194fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019500:	fb02 f303 	mul.w	r3, r2, r3
 8019504:	333f      	adds	r3, #63	; 0x3f
 8019506:	11db      	asrs	r3, r3, #7
 8019508:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 801950c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019510:	105b      	asrs	r3, r3, #1
 8019512:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8019516:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801951a:	f003 0301 	and.w	r3, r3, #1
 801951e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8019522:	4413      	add	r3, r2
 8019524:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 8019528:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801952c:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8019530:	4293      	cmp	r3, r2
 8019532:	bfa8      	it	ge
 8019534:	4613      	movge	r3, r2
 8019536:	b21b      	sxth	r3, r3
 8019538:	b29a      	uxth	r2, r3
 801953a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801953e:	b29b      	uxth	r3, r3
 8019540:	1ad3      	subs	r3, r2, r3
 8019542:	b29b      	uxth	r3, r3
 8019544:	b21b      	sxth	r3, r3
 8019546:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 801954a:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801954e:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8019552:	4293      	cmp	r3, r2
 8019554:	bfb8      	it	lt
 8019556:	4613      	movlt	r3, r2
 8019558:	b21b      	sxth	r3, r3
 801955a:	b29a      	uxth	r2, r3
 801955c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019560:	b29b      	uxth	r3, r3
 8019562:	4413      	add	r3, r2
 8019564:	b29b      	uxth	r3, r3
 8019566:	b21b      	sxth	r3, r3
 8019568:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 801956c:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 8019570:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8019574:	4293      	cmp	r3, r2
 8019576:	bfa8      	it	ge
 8019578:	4613      	movge	r3, r2
 801957a:	b21b      	sxth	r3, r3
 801957c:	b29a      	uxth	r2, r3
 801957e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019582:	b29b      	uxth	r3, r3
 8019584:	1ad3      	subs	r3, r2, r3
 8019586:	b29b      	uxth	r3, r3
 8019588:	b21b      	sxth	r3, r3
 801958a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 801958e:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 8019592:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8019596:	4293      	cmp	r3, r2
 8019598:	bfb8      	it	lt
 801959a:	4613      	movlt	r3, r2
 801959c:	b21b      	sxth	r3, r3
 801959e:	b29a      	uxth	r2, r3
 80195a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80195a4:	b29b      	uxth	r3, r3
 80195a6:	4413      	add	r3, r2
 80195a8:	b29b      	uxth	r3, r3
 80195aa:	b21b      	sxth	r3, r3
 80195ac:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 80195b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80195b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	689a      	ldr	r2, [r3, #8]
 80195bc:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80195c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80195c4:	4618      	mov	r0, r3
 80195c6:	f005 fe0b 	bl	801f1e0 <_lv_area_intersect>
 80195ca:	4603      	mov	r3, r0
 80195cc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 80195d0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80195d4:	f083 0301 	eor.w	r3, r3, #1
 80195d8:	b2db      	uxtb	r3, r3
 80195da:	2b00      	cmp	r3, #0
 80195dc:	f040 8276 	bne.w	8019acc <draw_line_skew+0x75c>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 80195e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	f000 8085 	beq.w	80196f4 <draw_line_skew+0x384>
        if(xdiff > 0) {
 80195ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	dd3e      	ble.n	8019670 <draw_line_skew+0x300>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 80195f2:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 80195f6:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 80195fa:	b29a      	uxth	r2, r3
 80195fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8019600:	b29b      	uxth	r3, r3
 8019602:	1ad3      	subs	r3, r2, r3
 8019604:	b29b      	uxth	r3, r3
 8019606:	b21c      	sxth	r4, r3
 8019608:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801960c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8019610:	b29a      	uxth	r2, r3
 8019612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8019616:	b29b      	uxth	r3, r3
 8019618:	1ad3      	subs	r3, r2, r3
 801961a:	b29b      	uxth	r3, r3
 801961c:	b21b      	sxth	r3, r3
 801961e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8019622:	2200      	movs	r2, #0
 8019624:	9201      	str	r2, [sp, #4]
 8019626:	9300      	str	r3, [sp, #0]
 8019628:	462b      	mov	r3, r5
 801962a:	4622      	mov	r2, r4
 801962c:	f7f7 f84a 	bl	80106c4 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8019630:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 8019634:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8019638:	b29a      	uxth	r2, r3
 801963a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801963e:	b29b      	uxth	r3, r3
 8019640:	4413      	add	r3, r2
 8019642:	b29b      	uxth	r3, r3
 8019644:	b21c      	sxth	r4, r3
 8019646:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801964a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801964e:	b29a      	uxth	r2, r3
 8019650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8019654:	b29b      	uxth	r3, r3
 8019656:	4413      	add	r3, r2
 8019658:	b29b      	uxth	r3, r3
 801965a:	b21b      	sxth	r3, r3
 801965c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8019660:	2201      	movs	r2, #1
 8019662:	9201      	str	r2, [sp, #4]
 8019664:	9300      	str	r3, [sp, #0]
 8019666:	462b      	mov	r3, r5
 8019668:	4622      	mov	r2, r4
 801966a:	f7f7 f82b 	bl	80106c4 <lv_draw_mask_line_points_init>
 801966e:	e07f      	b.n	8019770 <draw_line_skew+0x400>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8019670:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 8019674:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 8019678:	b29a      	uxth	r2, r3
 801967a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801967e:	b29b      	uxth	r3, r3
 8019680:	4413      	add	r3, r2
 8019682:	b29b      	uxth	r3, r3
 8019684:	b21c      	sxth	r4, r3
 8019686:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801968a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801968e:	b29a      	uxth	r2, r3
 8019690:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8019694:	b29b      	uxth	r3, r3
 8019696:	4413      	add	r3, r2
 8019698:	b29b      	uxth	r3, r3
 801969a:	b21b      	sxth	r3, r3
 801969c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80196a0:	2200      	movs	r2, #0
 80196a2:	9201      	str	r2, [sp, #4]
 80196a4:	9300      	str	r3, [sp, #0]
 80196a6:	462b      	mov	r3, r5
 80196a8:	4622      	mov	r2, r4
 80196aa:	f7f7 f80b 	bl	80106c4 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 80196ae:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 80196b2:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 80196b6:	b29a      	uxth	r2, r3
 80196b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80196bc:	b29b      	uxth	r3, r3
 80196be:	1ad3      	subs	r3, r2, r3
 80196c0:	b29b      	uxth	r3, r3
 80196c2:	b21c      	sxth	r4, r3
 80196c4:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 80196c8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80196d2:	b29b      	uxth	r3, r3
 80196d4:	1ad3      	subs	r3, r2, r3
 80196d6:	b29b      	uxth	r3, r3
 80196d8:	b21b      	sxth	r3, r3
 80196da:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80196de:	2201      	movs	r2, #1
 80196e0:	9201      	str	r2, [sp, #4]
 80196e2:	9300      	str	r3, [sp, #0]
 80196e4:	462b      	mov	r3, r5
 80196e6:	4622      	mov	r2, r4
 80196e8:	f7f6 ffec 	bl	80106c4 <lv_draw_mask_line_points_init>
 80196ec:	e040      	b.n	8019770 <draw_line_skew+0x400>
 80196ee:	bf00      	nop
 80196f0:	080238a4 	.word	0x080238a4
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 80196f4:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 80196f8:	b29a      	uxth	r2, r3
 80196fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80196fe:	b29b      	uxth	r3, r3
 8019700:	4413      	add	r3, r2
 8019702:	b29b      	uxth	r3, r3
 8019704:	b219      	sxth	r1, r3
 8019706:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801970a:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801970e:	b29a      	uxth	r2, r3
 8019710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8019714:	b29b      	uxth	r3, r3
 8019716:	4413      	add	r3, r2
 8019718:	b29b      	uxth	r3, r3
 801971a:	b21a      	sxth	r2, r3
 801971c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8019720:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8019724:	2500      	movs	r5, #0
 8019726:	9501      	str	r5, [sp, #4]
 8019728:	9300      	str	r3, [sp, #0]
 801972a:	4613      	mov	r3, r2
 801972c:	4622      	mov	r2, r4
 801972e:	f7f6 ffc9 	bl	80106c4 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 8019732:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8019736:	b29a      	uxth	r2, r3
 8019738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801973c:	b29b      	uxth	r3, r3
 801973e:	1ad3      	subs	r3, r2, r3
 8019740:	b29b      	uxth	r3, r3
 8019742:	b219      	sxth	r1, r3
 8019744:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 8019748:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801974c:	b29a      	uxth	r2, r3
 801974e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8019752:	b29b      	uxth	r3, r3
 8019754:	1ad3      	subs	r3, r2, r3
 8019756:	b29b      	uxth	r3, r3
 8019758:	b21a      	sxth	r2, r3
 801975a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801975e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8019762:	2501      	movs	r5, #1
 8019764:	9501      	str	r5, [sp, #4]
 8019766:	9300      	str	r3, [sp, #0]
 8019768:	4613      	mov	r3, r2
 801976a:	4622      	mov	r2, r4
 801976c:	f7f6 ffaa 	bl	80106c4 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 8019770:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019774:	2100      	movs	r1, #0
 8019776:	4618      	mov	r0, r3
 8019778:	f7f6 fe16 	bl	80103a8 <lv_draw_mask_add>
 801977c:	4603      	mov	r3, r0
 801977e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8019782:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019786:	2100      	movs	r1, #0
 8019788:	4618      	mov	r0, r3
 801978a:	f7f6 fe0d 	bl	80103a8 <lv_draw_mask_add>
 801978e:	4603      	mov	r3, r0
 8019790:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 8019794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019798:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 801979c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80197a0:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 80197a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80197a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	7a5b      	ldrb	r3, [r3, #9]
 80197b0:	f003 0310 	and.w	r3, r3, #16
 80197b4:	b2db      	uxtb	r3, r3
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d14f      	bne.n	801985a <draw_line_skew+0x4ea>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 80197ba:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 80197be:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 80197c2:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 80197c6:	b29a      	uxth	r2, r3
 80197c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	1ad3      	subs	r3, r2, r3
 80197d0:	b29b      	uxth	r3, r3
 80197d2:	b21d      	sxth	r5, r3
 80197d4:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 80197d8:	b29a      	uxth	r2, r3
 80197da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80197de:	b29b      	uxth	r3, r3
 80197e0:	4413      	add	r3, r2
 80197e2:	b29b      	uxth	r3, r3
 80197e4:	b21b      	sxth	r3, r3
 80197e6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80197ea:	2203      	movs	r2, #3
 80197ec:	9201      	str	r2, [sp, #4]
 80197ee:	9300      	str	r3, [sp, #0]
 80197f0:	462b      	mov	r3, r5
 80197f2:	4622      	mov	r2, r4
 80197f4:	f7f6 ff66 	bl	80106c4 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 80197f8:	f9b7 10e4 	ldrsh.w	r1, [r7, #228]	; 0xe4
 80197fc:	f9b7 40e6 	ldrsh.w	r4, [r7, #230]	; 0xe6
 8019800:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 8019804:	b29a      	uxth	r2, r3
 8019806:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801980a:	b29b      	uxth	r3, r3
 801980c:	1ad3      	subs	r3, r2, r3
 801980e:	b29b      	uxth	r3, r3
 8019810:	b21d      	sxth	r5, r3
 8019812:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8019816:	b29a      	uxth	r2, r3
 8019818:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801981c:	b29b      	uxth	r3, r3
 801981e:	4413      	add	r3, r2
 8019820:	b29b      	uxth	r3, r3
 8019822:	b21b      	sxth	r3, r3
 8019824:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019828:	2202      	movs	r2, #2
 801982a:	9201      	str	r2, [sp, #4]
 801982c:	9300      	str	r3, [sp, #0]
 801982e:	462b      	mov	r3, r5
 8019830:	4622      	mov	r2, r4
 8019832:	f7f6 ff47 	bl	80106c4 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 8019836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801983a:	2100      	movs	r1, #0
 801983c:	4618      	mov	r0, r3
 801983e:	f7f6 fdb3 	bl	80103a8 <lv_draw_mask_add>
 8019842:	4603      	mov	r3, r0
 8019844:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 8019848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801984c:	2100      	movs	r1, #0
 801984e:	4618      	mov	r0, r3
 8019850:	f7f6 fdaa 	bl	80103a8 <lv_draw_mask_add>
 8019854:	4603      	mov	r3, r0
 8019856:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    /*The real draw area is around the line.
     *It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);
 801985a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801985e:	4618      	mov	r0, r3
 8019860:	f7ff f954 	bl	8018b0c <lv_area_get_width>
 8019864:	4603      	mov	r3, r0
 8019866:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 801986a:	f7f3 fcc3 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 801986e:	4603      	mov	r3, r0
 8019870:	4618      	mov	r0, r3
 8019872:	f004 ffe9 	bl	801e848 <lv_disp_get_hor_res>
 8019876:	4603      	mov	r3, r0
 8019878:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 801987c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8019880:	4618      	mov	r0, r3
 8019882:	f005 fc20 	bl	801f0c6 <lv_area_get_size>
 8019886:	4602      	mov	r2, r0
 8019888:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801988c:	4293      	cmp	r3, r2
 801988e:	d906      	bls.n	801989e <draw_line_skew+0x52e>
 8019890:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8019894:	4618      	mov	r0, r3
 8019896:	f005 fc16 	bl	801f0c6 <lv_area_get_size>
 801989a:	4603      	mov	r3, r0
 801989c:	e001      	b.n	80198a2 <draw_line_skew+0x532>
 801989e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80198a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 80198a6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80198aa:	f007 f843 	bl	8020934 <lv_mem_buf_get>
 80198ae:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

    lv_coord_t y2 = blend_area.y2;
 80198b2:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80198b6:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    blend_area.y2 = blend_area.y1;
 80198ba:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 80198be:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    uint32_t mask_p = 0;
 80198c2:	2300      	movs	r3, #0
 80198c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    lv_memset_ff(mask_buf, mask_buf_size);
 80198c8:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80198cc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80198d0:	f007 fc5b 	bl	802118a <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 80198d4:	f107 0310 	add.w	r3, r7, #16
 80198d8:	211c      	movs	r1, #28
 80198da:	4618      	mov	r0, r3
 80198dc:	f007 fbd4 	bl	8021088 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 80198e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80198e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80198e8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80198ec:	601a      	str	r2, [r3, #0]
    blend_dsc.color = dsc->color;
 80198ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80198f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80198f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80198fa:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80198fe:	6812      	ldr	r2, [r2, #0]
 8019900:	7812      	ldrb	r2, [r2, #0]
 8019902:	721a      	strb	r2, [r3, #8]
    blend_dsc.opa = dsc->opa;
 8019904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019908:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	7a1a      	ldrb	r2, [r3, #8]
 8019910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019914:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019918:	761a      	strb	r2, [r3, #24]
    blend_dsc.mask_buf = mask_buf;
 801991a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801991e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019922:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8019926:	60da      	str	r2, [r3, #12]
    blend_dsc.mask_area = &blend_area;
 8019928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801992c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019930:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8019934:	615a      	str	r2, [r3, #20]

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 8019936:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801993a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801993e:	e06a      	b.n	8019a16 <draw_line_skew+0x6a6>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 8019940:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8019944:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019948:	18d0      	adds	r0, r2, r3
 801994a:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 801994e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8019952:	b21a      	sxth	r2, r3
 8019954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019958:	b21b      	sxth	r3, r3
 801995a:	f7f6 fd57 	bl	801040c <lv_draw_mask_apply>
 801995e:	4603      	mov	r3, r0
 8019960:	461a      	mov	r2, r3
 8019962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019966:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801996a:	741a      	strb	r2, [r3, #16]
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801996c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019970:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019974:	7c1b      	ldrb	r3, [r3, #16]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d10a      	bne.n	8019990 <draw_line_skew+0x620>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 801997a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801997e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019982:	4413      	add	r3, r2
 8019984:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8019988:	4611      	mov	r1, r2
 801998a:	4618      	mov	r0, r3
 801998c:	f007 fb7c 	bl	8021088 <lv_memset_00>
        }

        mask_p += draw_area_w;
 8019990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8019994:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8019998:	4413      	add	r3, r2
 801999a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 801999e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80199a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80199a6:	4413      	add	r3, r2
 80199a8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80199ac:	429a      	cmp	r2, r3
 80199ae:	d908      	bls.n	80199c2 <draw_line_skew+0x652>
            blend_area.y2 ++;
 80199b0:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 80199b4:	b29b      	uxth	r3, r3
 80199b6:	3301      	adds	r3, #1
 80199b8:	b29b      	uxth	r3, r3
 80199ba:	b21b      	sxth	r3, r3
 80199bc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 80199c0:	e024      	b.n	8019a0c <draw_line_skew+0x69c>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80199c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80199c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80199ca:	2202      	movs	r2, #2
 80199cc:	741a      	strb	r2, [r3, #16]
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80199ce:	f107 0210 	add.w	r2, r7, #16
 80199d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80199d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80199da:	4611      	mov	r1, r2
 80199dc:	6818      	ldr	r0, [r3, #0]
 80199de:	f7fc f8e3 	bl	8015ba8 <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 80199e2:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 80199e6:	b29b      	uxth	r3, r3
 80199e8:	3301      	adds	r3, #1
 80199ea:	b29b      	uxth	r3, r3
 80199ec:	b21b      	sxth	r3, r3
 80199ee:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
            blend_area.y2 = blend_area.y1;
 80199f2:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 80199f6:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
            mask_p = 0;
 80199fa:	2300      	movs	r3, #0
 80199fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            lv_memset_ff(mask_buf, mask_buf_size);
 8019a00:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8019a04:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8019a08:	f007 fbbf 	bl	802118a <lv_memset_ff>
    for(h = blend_area.y1; h <= y2; h++) {
 8019a0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8019a10:	3301      	adds	r3, #1
 8019a12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8019a16:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 8019a1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019a1e:	429a      	cmp	r2, r3
 8019a20:	dd8e      	ble.n	8019940 <draw_line_skew+0x5d0>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 8019a22:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
 8019a26:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 8019a2a:	429a      	cmp	r2, r3
 8019a2c:	d017      	beq.n	8019a5e <draw_line_skew+0x6ee>
        blend_area.y2--;
 8019a2e:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 8019a32:	b29b      	uxth	r3, r3
 8019a34:	3b01      	subs	r3, #1
 8019a36:	b29b      	uxth	r3, r3
 8019a38:	b21b      	sxth	r3, r3
 8019a3a:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019a42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8019a46:	2202      	movs	r2, #2
 8019a48:	741a      	strb	r2, [r3, #16]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019a4a:	f107 0210 	add.w	r2, r7, #16
 8019a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019a52:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8019a56:	4611      	mov	r1, r2
 8019a58:	6818      	ldr	r0, [r3, #0]
 8019a5a:	f7fc f8a5 	bl	8015ba8 <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 8019a5e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8019a62:	f007 f813 	bl	8020a8c <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 8019a66:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7f6 fd62 	bl	8010534 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 8019a70:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019a74:	4618      	mov	r0, r3
 8019a76:	f7f6 fd5d 	bl	8010534 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 8019a7a:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 8019a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019a82:	d004      	beq.n	8019a8e <draw_line_skew+0x71e>
 8019a84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019a88:	4618      	mov	r0, r3
 8019a8a:	f7f6 fd53 	bl	8010534 <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 8019a8e:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 8019a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019a96:	d004      	beq.n	8019aa2 <draw_line_skew+0x732>
 8019a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	f7f6 fd49 	bl	8010534 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 8019aa2:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7f6 fcf4 	bl	8010494 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 8019aac:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	f7f6 fcef 	bl	8010494 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 8019ab6:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 8019aba:	4618      	mov	r0, r3
 8019abc:	f7f6 fcea 	bl	8010494 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 8019ac0:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f7f6 fce5 	bl	8010494 <lv_draw_mask_remove_id>
 8019aca:	e000      	b.n	8019ace <draw_line_skew+0x75e>
    if(is_common == false) return;
 8019acc:	bf00      	nop
    LV_UNUSED(point2);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw skewed line with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 8019ace:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8019ad6:	bf00      	nop

08019ad8 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 8019ad8:	b590      	push	{r4, r7, lr}
 8019ada:	b09b      	sub	sp, #108	; 0x6c
 8019adc:	af02      	add	r7, sp, #8
 8019ade:	60f8      	str	r0, [r7, #12]
 8019ae0:	60b9      	str	r1, [r7, #8]
 8019ae2:	607a      	str	r2, [r7, #4]
 8019ae4:	807b      	strh	r3, [r7, #2]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 8019ae6:	887b      	ldrh	r3, [r7, #2]
 8019ae8:	2b02      	cmp	r3, #2
 8019aea:	f240 82a9 	bls.w	801a040 <lv_draw_sw_polygon+0x568>
    if(points == NULL) return;
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	f000 82a7 	beq.w	801a044 <lv_draw_sw_polygon+0x56c>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 8019af6:	887b      	ldrh	r3, [r7, #2]
 8019af8:	009b      	lsls	r3, r3, #2
 8019afa:	4618      	mov	r0, r3
 8019afc:	f006 ff1a 	bl	8020934 <lv_mem_buf_get>
 8019b00:	63b8      	str	r0, [r7, #56]	; 0x38
    if(p == NULL) return;
 8019b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	f000 829f 	beq.w	801a048 <lv_draw_sw_polygon+0x570>
    uint16_t i;
    uint16_t pcnt = 0;
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    p[0] = points[0];
 8019b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	6013      	str	r3, [r2, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 8019b18:	2300      	movs	r3, #0
 8019b1a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019b1e:	e039      	b.n	8019b94 <lv_draw_sw_polygon+0xbc>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 8019b20:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019b24:	009b      	lsls	r3, r3, #2
 8019b26:	687a      	ldr	r2, [r7, #4]
 8019b28:	4413      	add	r3, r2
 8019b2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019b2e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019b32:	3301      	adds	r3, #1
 8019b34:	009b      	lsls	r3, r3, #2
 8019b36:	6879      	ldr	r1, [r7, #4]
 8019b38:	440b      	add	r3, r1
 8019b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b3e:	429a      	cmp	r2, r3
 8019b40:	d110      	bne.n	8019b64 <lv_draw_sw_polygon+0x8c>
 8019b42:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019b46:	009b      	lsls	r3, r3, #2
 8019b48:	687a      	ldr	r2, [r7, #4]
 8019b4a:	4413      	add	r3, r2
 8019b4c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019b50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019b54:	3301      	adds	r3, #1
 8019b56:	009b      	lsls	r3, r3, #2
 8019b58:	6879      	ldr	r1, [r7, #4]
 8019b5a:	440b      	add	r3, r1
 8019b5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019b60:	429a      	cmp	r2, r3
 8019b62:	d012      	beq.n	8019b8a <lv_draw_sw_polygon+0xb2>
            p[pcnt] = points[i];
 8019b64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019b68:	009b      	lsls	r3, r3, #2
 8019b6a:	687a      	ldr	r2, [r7, #4]
 8019b6c:	18d1      	adds	r1, r2, r3
 8019b6e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019b72:	009b      	lsls	r3, r3, #2
 8019b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019b76:	4413      	add	r3, r2
 8019b78:	461a      	mov	r2, r3
 8019b7a:	460b      	mov	r3, r1
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	6013      	str	r3, [r2, #0]
            pcnt++;
 8019b80:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019b84:	3301      	adds	r3, #1
 8019b86:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    for(i = 0; i < point_cnt - 1; i++) {
 8019b8a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019b8e:	3301      	adds	r3, #1
 8019b90:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019b94:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8019b98:	887b      	ldrh	r3, [r7, #2]
 8019b9a:	3b01      	subs	r3, #1
 8019b9c:	429a      	cmp	r2, r3
 8019b9e:	dbbf      	blt.n	8019b20 <lv_draw_sw_polygon+0x48>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ba6:	8879      	ldrh	r1, [r7, #2]
 8019ba8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8019bac:	440b      	add	r3, r1
 8019bae:	009b      	lsls	r3, r3, #2
 8019bb0:	6879      	ldr	r1, [r7, #4]
 8019bb2:	440b      	add	r3, r1
 8019bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bb8:	429a      	cmp	r2, r3
 8019bba:	d10d      	bne.n	8019bd8 <lv_draw_sw_polygon+0x100>
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019bc2:	8879      	ldrh	r1, [r7, #2]
 8019bc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8019bc8:	440b      	add	r3, r1
 8019bca:	009b      	lsls	r3, r3, #2
 8019bcc:	6879      	ldr	r1, [r7, #4]
 8019bce:	440b      	add	r3, r1
 8019bd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019bd4:	429a      	cmp	r2, r3
 8019bd6:	d014      	beq.n	8019c02 <lv_draw_sw_polygon+0x12a>
        p[pcnt] = points[point_cnt - 1];
 8019bd8:	887a      	ldrh	r2, [r7, #2]
 8019bda:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8019bde:	4413      	add	r3, r2
 8019be0:	009b      	lsls	r3, r3, #2
 8019be2:	687a      	ldr	r2, [r7, #4]
 8019be4:	18d1      	adds	r1, r2, r3
 8019be6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019bea:	009b      	lsls	r3, r3, #2
 8019bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019bee:	4413      	add	r3, r2
 8019bf0:	461a      	mov	r2, r3
 8019bf2:	460b      	mov	r3, r1
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	6013      	str	r3, [r2, #0]
        pcnt++;
 8019bf8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019bfc:	3301      	adds	r3, #1
 8019bfe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    point_cnt = pcnt;
 8019c02:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019c06:	807b      	strh	r3, [r7, #2]
    if(point_cnt < 3) {
 8019c08:	887b      	ldrh	r3, [r7, #2]
 8019c0a:	2b02      	cmp	r3, #2
 8019c0c:	d803      	bhi.n	8019c16 <lv_draw_sw_polygon+0x13e>
        lv_mem_buf_release(p);
 8019c0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019c10:	f006 ff3c 	bl	8020a8c <lv_mem_buf_release>
        return;
 8019c14:	e219      	b.n	801a04a <lv_draw_sw_polygon+0x572>
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 8019c16:	4a9a      	ldr	r2, [pc, #616]	; (8019e80 <lv_draw_sw_polygon+0x3a8>)
 8019c18:	f107 031c 	add.w	r3, r7, #28
 8019c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c20:	e883 0003 	stmia.w	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 8019c24:	2300      	movs	r3, #0
 8019c26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019c2a:	e03c      	b.n	8019ca6 <lv_draw_sw_polygon+0x1ce>
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 8019c2c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019c30:	009b      	lsls	r3, r3, #2
 8019c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019c34:	4413      	add	r3, r2
 8019c36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019c3e:	4293      	cmp	r3, r2
 8019c40:	bfa8      	it	ge
 8019c42:	4613      	movge	r3, r2
 8019c44:	b21b      	sxth	r3, r3
 8019c46:	83bb      	strh	r3, [r7, #28]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 8019c48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019c4c:	009b      	lsls	r3, r3, #2
 8019c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019c50:	4413      	add	r3, r2
 8019c52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019c56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019c5a:	4293      	cmp	r3, r2
 8019c5c:	bfa8      	it	ge
 8019c5e:	4613      	movge	r3, r2
 8019c60:	b21b      	sxth	r3, r3
 8019c62:	83fb      	strh	r3, [r7, #30]
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 8019c64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019c68:	009b      	lsls	r3, r3, #2
 8019c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019c6c:	4413      	add	r3, r2
 8019c6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019c76:	4293      	cmp	r3, r2
 8019c78:	bfb8      	it	lt
 8019c7a:	4613      	movlt	r3, r2
 8019c7c:	b21b      	sxth	r3, r3
 8019c7e:	843b      	strh	r3, [r7, #32]
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 8019c80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019c84:	009b      	lsls	r3, r3, #2
 8019c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019c88:	4413      	add	r3, r2
 8019c8a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019c8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019c92:	4293      	cmp	r3, r2
 8019c94:	bfb8      	it	lt
 8019c96:	4613      	movlt	r3, r2
 8019c98:	b21b      	sxth	r3, r3
 8019c9a:	847b      	strh	r3, [r7, #34]	; 0x22
    for(i = 0; i < point_cnt; i++) {
 8019c9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019ca0:	3301      	adds	r3, #1
 8019ca2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019ca6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8019caa:	887b      	ldrh	r3, [r7, #2]
 8019cac:	429a      	cmp	r2, r3
 8019cae:	d3bd      	bcc.n	8019c2c <lv_draw_sw_polygon+0x154>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	689a      	ldr	r2, [r3, #8]
 8019cb4:	f107 011c 	add.w	r1, r7, #28
 8019cb8:	f107 0314 	add.w	r3, r7, #20
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	f005 fa8f 	bl	801f1e0 <_lv_area_intersect>
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(!is_common) {
 8019cc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019ccc:	f083 0301 	eor.w	r3, r3, #1
 8019cd0:	b2db      	uxtb	r3, r3
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d003      	beq.n	8019cde <lv_draw_sw_polygon+0x206>
        lv_mem_buf_release(p);
 8019cd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019cd8:	f006 fed8 	bl	8020a8c <lv_mem_buf_release>
        return;
 8019cdc:	e1b5      	b.n	801a04a <lv_draw_sw_polygon+0x572>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	689b      	ldr	r3, [r3, #8]
 8019ce2:	633b      	str	r3, [r7, #48]	; 0x30
    draw_ctx->clip_area = &clip_area;
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	f107 0214 	add.w	r2, r7, #20
 8019cea:	609a      	str	r2, [r3, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 8019cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cee:	885b      	ldrh	r3, [r3, #2]
 8019cf0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    int16_t y_min_i = 0;
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    for(i = 1; i < point_cnt; i++) {
 8019cfa:	2301      	movs	r3, #1
 8019cfc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019d00:	e01b      	b.n	8019d3a <lv_draw_sw_polygon+0x262>
        if(p[i].y < y_min) {
 8019d02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019d06:	009b      	lsls	r3, r3, #2
 8019d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019d0a:	4413      	add	r3, r2
 8019d0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019d10:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8019d14:	429a      	cmp	r2, r3
 8019d16:	dd0b      	ble.n	8019d30 <lv_draw_sw_polygon+0x258>
            y_min = p[i].y;
 8019d18:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019d1c:	009b      	lsls	r3, r3, #2
 8019d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019d20:	4413      	add	r3, r2
 8019d22:	885b      	ldrh	r3, [r3, #2]
 8019d24:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            y_min_i = i;
 8019d28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019d2c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    for(i = 1; i < point_cnt; i++) {
 8019d30:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019d34:	3301      	adds	r3, #1
 8019d36:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019d3a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8019d3e:	887b      	ldrh	r3, [r7, #2]
 8019d40:	429a      	cmp	r2, r3
 8019d42:	d3de      	bcc.n	8019d02 <lv_draw_sw_polygon+0x22a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 8019d44:	887b      	ldrh	r3, [r7, #2]
 8019d46:	222c      	movs	r2, #44	; 0x2c
 8019d48:	fb02 f303 	mul.w	r3, r2, r3
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	f006 fdf1 	bl	8020934 <lv_mem_buf_get>
 8019d52:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_draw_mask_line_param_t * mp_next = mp;
 8019d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d56:	657b      	str	r3, [r7, #84]	; 0x54

    int32_t i_prev_left = y_min_i;
 8019d58:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019d5c:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t i_prev_right = y_min_i;
 8019d5e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019d62:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t i_next_left;
    int32_t i_next_right;
    uint32_t mask_cnt = 0;
 8019d64:	2300      	movs	r3, #0
 8019d66:	643b      	str	r3, [r7, #64]	; 0x40

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
 8019d68:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019d6c:	3b01      	subs	r3, #1
 8019d6e:	64bb      	str	r3, [r7, #72]	; 0x48
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 8019d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	da03      	bge.n	8019d7e <lv_draw_sw_polygon+0x2a6>
 8019d76:	887b      	ldrh	r3, [r7, #2]
 8019d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019d7a:	4413      	add	r3, r2
 8019d7c:	64bb      	str	r3, [r7, #72]	; 0x48

    i_next_right = y_min_i + 1;
 8019d7e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019d82:	3301      	adds	r3, #1
 8019d84:	647b      	str	r3, [r7, #68]	; 0x44
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 8019d86:	887b      	ldrh	r3, [r7, #2]
 8019d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	db01      	blt.n	8019d92 <lv_draw_sw_polygon+0x2ba>
 8019d8e:	2300      	movs	r3, #0
 8019d90:	647b      	str	r3, [r7, #68]	; 0x44
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 8019d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d94:	009b      	lsls	r3, r3, #2
 8019d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019d98:	4413      	add	r3, r2
 8019d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d9e:	b29a      	uxth	r2, r3
 8019da0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019da4:	009b      	lsls	r3, r3, #2
 8019da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019da8:	440b      	add	r3, r1
 8019daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019dae:	b29b      	uxth	r3, r3
 8019db0:	1ad3      	subs	r3, r2, r3
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 8019db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019db8:	009b      	lsls	r3, r3, #2
 8019dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019dbc:	4413      	add	r3, r2
 8019dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019dc2:	b29a      	uxth	r2, r3
 8019dc4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019dc8:	009b      	lsls	r3, r3, #2
 8019dca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019dcc:	440b      	add	r3, r1
 8019dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019dd2:	b29b      	uxth	r3, r3
 8019dd4:	1ad3      	subs	r3, r2, r3
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	853b      	strh	r3, [r7, #40]	; 0x28
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 8019dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ddc:	009b      	lsls	r3, r3, #2
 8019dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019de0:	4413      	add	r3, r2
 8019de2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019de6:	b29a      	uxth	r2, r3
 8019de8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019dec:	009b      	lsls	r3, r3, #2
 8019dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019df0:	440b      	add	r3, r1
 8019df2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019df6:	b29b      	uxth	r3, r3
 8019df8:	1ad3      	subs	r3, r2, r3
 8019dfa:	b29b      	uxth	r3, r3
 8019dfc:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 8019dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e00:	009b      	lsls	r3, r3, #2
 8019e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019e04:	4413      	add	r3, r2
 8019e06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019e0a:	b29a      	uxth	r2, r3
 8019e0c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019e10:	009b      	lsls	r3, r3, #2
 8019e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019e14:	440b      	add	r3, r1
 8019e16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	1ad3      	subs	r3, r2, r3
 8019e1e:	b29b      	uxth	r3, r3
 8019e20:	84bb      	strh	r3, [r7, #36]	; 0x24

    bool inv = false;
 8019e22:	2300      	movs	r3, #0
 8019e24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(dyl * dxr < dyr * dxl) inv = true;
 8019e28:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019e2c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8019e30:	fb03 f202 	mul.w	r2, r3, r2
 8019e34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019e38:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8019e3c:	fb01 f303 	mul.w	r3, r1, r3
 8019e40:	429a      	cmp	r2, r3
 8019e42:	da02      	bge.n	8019e4a <lv_draw_sw_polygon+0x372>
 8019e44:	2301      	movs	r3, #1
 8019e46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    do {
        if(!inv) {
 8019e4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019e4e:	f083 0301 	eor.w	r3, r3, #1
 8019e52:	b2db      	uxtb	r3, r3
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d015      	beq.n	8019e84 <lv_draw_sw_polygon+0x3ac>
            i_next_left = i_prev_left - 1;
 8019e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e5a:	3b01      	subs	r3, #1
 8019e5c:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 8019e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	da03      	bge.n	8019e6c <lv_draw_sw_polygon+0x394>
 8019e64:	887b      	ldrh	r3, [r7, #2]
 8019e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019e68:	4413      	add	r3, r2
 8019e6a:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right + 1;
 8019e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e6e:	3301      	adds	r3, #1
 8019e70:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 8019e72:	887b      	ldrh	r3, [r7, #2]
 8019e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019e76:	429a      	cmp	r2, r3
 8019e78:	db17      	blt.n	8019eaa <lv_draw_sw_polygon+0x3d2>
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8019e7e:	e014      	b.n	8019eaa <lv_draw_sw_polygon+0x3d2>
 8019e80:	0802372c 	.word	0x0802372c
        }
        else {
            i_next_left = i_prev_left + 1;
 8019e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e86:	3301      	adds	r3, #1
 8019e88:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 8019e8a:	887b      	ldrh	r3, [r7, #2]
 8019e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019e8e:	429a      	cmp	r2, r3
 8019e90:	db01      	blt.n	8019e96 <lv_draw_sw_polygon+0x3be>
 8019e92:	2300      	movs	r3, #0
 8019e94:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right - 1;
 8019e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e98:	3b01      	subs	r3, #1
 8019e9a:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 8019e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	da03      	bge.n	8019eaa <lv_draw_sw_polygon+0x3d2>
 8019ea2:	887b      	ldrh	r3, [r7, #2]
 8019ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019ea6:	4413      	add	r3, r2
 8019ea8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
 8019eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019eac:	009b      	lsls	r3, r3, #2
 8019eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019eb0:	4413      	add	r3, r2
 8019eb2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019eb8:	009b      	lsls	r3, r3, #2
 8019eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019ebc:	440b      	add	r3, r1
 8019ebe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019ec2:	429a      	cmp	r2, r3
 8019ec4:	db47      	blt.n	8019f56 <lv_draw_sw_polygon+0x47e>
            if(p[i_next_left].y != p[i_prev_left].y &&
 8019ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ec8:	009b      	lsls	r3, r3, #2
 8019eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ecc:	4413      	add	r3, r2
 8019ece:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ed4:	009b      	lsls	r3, r3, #2
 8019ed6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019ed8:	440b      	add	r3, r1
 8019eda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019ede:	429a      	cmp	r2, r3
 8019ee0:	d034      	beq.n	8019f4c <lv_draw_sw_polygon+0x474>
               p[i_next_left].x != p[i_prev_left].x) {
 8019ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ee4:	009b      	lsls	r3, r3, #2
 8019ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ee8:	4413      	add	r3, r2
 8019eea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ef0:	009b      	lsls	r3, r3, #2
 8019ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019ef4:	440b      	add	r3, r1
 8019ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_left].y != p[i_prev_left].y &&
 8019efa:	429a      	cmp	r2, r3
 8019efc:	d026      	beq.n	8019f4c <lv_draw_sw_polygon+0x474>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 8019efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f00:	009b      	lsls	r3, r3, #2
 8019f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f04:	4413      	add	r3, r2
 8019f06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f0c:	009b      	lsls	r3, r3, #2
 8019f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f10:	4413      	add	r3, r2
 8019f12:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_left].x, p[i_next_left].y,
 8019f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f18:	009b      	lsls	r3, r3, #2
 8019f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f1c:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 8019f1e:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_left].x, p[i_next_left].y,
 8019f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f24:	009b      	lsls	r3, r3, #2
 8019f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f28:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 8019f2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019f2e:	2201      	movs	r2, #1
 8019f30:	9201      	str	r2, [sp, #4]
 8019f32:	9300      	str	r3, [sp, #0]
 8019f34:	4623      	mov	r3, r4
 8019f36:	4602      	mov	r2, r0
 8019f38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019f3a:	f7f6 fbc3 	bl	80106c4 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
 8019f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019f40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019f42:	f7f6 fa31 	bl	80103a8 <lv_draw_mask_add>
                mp_next++;
 8019f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f48:	332c      	adds	r3, #44	; 0x2c
 8019f4a:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 8019f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f4e:	3301      	adds	r3, #1
 8019f50:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_left = i_next_left;
 8019f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f54:	653b      	str	r3, [r7, #80]	; 0x50
        }

        if(mask_cnt == point_cnt) break;
 8019f56:	887b      	ldrh	r3, [r7, #2]
 8019f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019f5a:	429a      	cmp	r2, r3
 8019f5c:	d05b      	beq.n	801a016 <lv_draw_sw_polygon+0x53e>

        if(p[i_next_right].y >= p[i_prev_right].y) {
 8019f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f60:	009b      	lsls	r3, r3, #2
 8019f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f64:	4413      	add	r3, r2
 8019f66:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f6c:	009b      	lsls	r3, r3, #2
 8019f6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019f70:	440b      	add	r3, r1
 8019f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019f76:	429a      	cmp	r2, r3
 8019f78:	db47      	blt.n	801a00a <lv_draw_sw_polygon+0x532>
            if(p[i_next_right].y != p[i_prev_right].y &&
 8019f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f7c:	009b      	lsls	r3, r3, #2
 8019f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f80:	4413      	add	r3, r2
 8019f82:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f88:	009b      	lsls	r3, r3, #2
 8019f8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019f8c:	440b      	add	r3, r1
 8019f8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019f92:	429a      	cmp	r2, r3
 8019f94:	d034      	beq.n	801a000 <lv_draw_sw_polygon+0x528>
               p[i_next_right].x != p[i_prev_right].x) {
 8019f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f98:	009b      	lsls	r3, r3, #2
 8019f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019f9c:	4413      	add	r3, r2
 8019f9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fa4:	009b      	lsls	r3, r3, #2
 8019fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019fa8:	440b      	add	r3, r1
 8019faa:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_right].y != p[i_prev_right].y &&
 8019fae:	429a      	cmp	r2, r3
 8019fb0:	d026      	beq.n	801a000 <lv_draw_sw_polygon+0x528>

                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 8019fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fb4:	009b      	lsls	r3, r3, #2
 8019fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019fb8:	4413      	add	r3, r2
 8019fba:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fc0:	009b      	lsls	r3, r3, #2
 8019fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019fc4:	4413      	add	r3, r2
 8019fc6:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_right].x, p[i_next_right].y,
 8019fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019fcc:	009b      	lsls	r3, r3, #2
 8019fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019fd0:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 8019fd2:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_right].x, p[i_next_right].y,
 8019fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019fd8:	009b      	lsls	r3, r3, #2
 8019fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019fdc:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 8019fde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	9201      	str	r2, [sp, #4]
 8019fe6:	9300      	str	r3, [sp, #0]
 8019fe8:	4623      	mov	r3, r4
 8019fea:	4602      	mov	r2, r0
 8019fec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019fee:	f7f6 fb69 	bl	80106c4 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
 8019ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019ff4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019ff6:	f7f6 f9d7 	bl	80103a8 <lv_draw_mask_add>
                mp_next++;
 8019ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ffc:	332c      	adds	r3, #44	; 0x2c
 8019ffe:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801a000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a002:	3301      	adds	r3, #1
 801a004:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_right = i_next_right;
 801a006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a008:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

    } while(mask_cnt < point_cnt);
 801a00a:	887b      	ldrh	r3, [r7, #2]
 801a00c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a00e:	429a      	cmp	r2, r3
 801a010:	f4ff af1b 	bcc.w	8019e4a <lv_draw_sw_polygon+0x372>
 801a014:	e000      	b.n	801a018 <lv_draw_sw_polygon+0x540>
        if(mask_cnt == point_cnt) break;
 801a016:	bf00      	nop

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 801a018:	f107 031c 	add.w	r3, r7, #28
 801a01c:	461a      	mov	r2, r3
 801a01e:	68b9      	ldr	r1, [r7, #8]
 801a020:	68f8      	ldr	r0, [r7, #12]
 801a022:	f7f8 fdcd 	bl	8012bc0 <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 801a026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a028:	f7f6 fa5c 	bl	80104e4 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 801a02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a02e:	f006 fd2d 	bl	8020a8c <lv_mem_buf_release>
    lv_mem_buf_release(p);
 801a032:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a034:	f006 fd2a 	bl	8020a8c <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a03c:	609a      	str	r2, [r3, #8]
 801a03e:	e004      	b.n	801a04a <lv_draw_sw_polygon+0x572>
    if(point_cnt < 3) return;
 801a040:	bf00      	nop
 801a042:	e002      	b.n	801a04a <lv_draw_sw_polygon+0x572>
    if(points == NULL) return;
 801a044:	bf00      	nop
 801a046:	e000      	b.n	801a04a <lv_draw_sw_polygon+0x572>
    if(p == NULL) return;
 801a048:	bf00      	nop
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801a04a:	3764      	adds	r7, #100	; 0x64
 801a04c:	46bd      	mov	sp, r7
 801a04e:	bd90      	pop	{r4, r7, pc}

0801a050 <lv_area_copy>:
{
 801a050:	b480      	push	{r7}
 801a052:	b083      	sub	sp, #12
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
 801a058:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 801a064:	683b      	ldr	r3, [r7, #0]
 801a066:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801a06e:	683b      	ldr	r3, [r7, #0]
 801a070:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	80da      	strh	r2, [r3, #6]
}
 801a082:	bf00      	nop
 801a084:	370c      	adds	r7, #12
 801a086:	46bd      	mov	sp, r7
 801a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a08c:	4770      	bx	lr

0801a08e <lv_area_get_width>:
{
 801a08e:	b480      	push	{r7}
 801a090:	b083      	sub	sp, #12
 801a092:	af00      	add	r7, sp, #0
 801a094:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a09c:	b29a      	uxth	r2, r3
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0a4:	b29b      	uxth	r3, r3
 801a0a6:	1ad3      	subs	r3, r2, r3
 801a0a8:	b29b      	uxth	r3, r3
 801a0aa:	3301      	adds	r3, #1
 801a0ac:	b29b      	uxth	r3, r3
 801a0ae:	b21b      	sxth	r3, r3
}
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	370c      	adds	r7, #12
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ba:	4770      	bx	lr

0801a0bc <lv_area_get_height>:
{
 801a0bc:	b480      	push	{r7}
 801a0be:	b083      	sub	sp, #12
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a0ca:	b29a      	uxth	r2, r3
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0d2:	b29b      	uxth	r3, r3
 801a0d4:	1ad3      	subs	r3, r2, r3
 801a0d6:	b29b      	uxth	r3, r3
 801a0d8:	3301      	adds	r3, #1
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	b21b      	sxth	r3, r3
}
 801a0de:	4618      	mov	r0, r3
 801a0e0:	370c      	adds	r7, #12
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e8:	4770      	bx	lr

0801a0ea <lv_draw_sw_rect>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801a0ea:	b580      	push	{r7, lr}
 801a0ec:	b084      	sub	sp, #16
 801a0ee:	af00      	add	r7, sp, #0
 801a0f0:	60f8      	str	r0, [r7, #12]
 801a0f2:	60b9      	str	r1, [r7, #8]
 801a0f4:	607a      	str	r2, [r7, #4]
#if LV_DRAW_COMPLEX
    draw_shadow(draw_ctx, dsc, coords);
 801a0f6:	687a      	ldr	r2, [r7, #4]
 801a0f8:	68b9      	ldr	r1, [r7, #8]
 801a0fa:	68f8      	ldr	r0, [r7, #12]
 801a0fc:	f000 fdd1 	bl	801aca2 <draw_shadow>
#endif

    draw_bg(draw_ctx, dsc, coords);
 801a100:	687a      	ldr	r2, [r7, #4]
 801a102:	68b9      	ldr	r1, [r7, #8]
 801a104:	68f8      	ldr	r0, [r7, #12]
 801a106:	f000 f827 	bl	801a158 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801a10a:	687a      	ldr	r2, [r7, #4]
 801a10c:	68b9      	ldr	r1, [r7, #8]
 801a10e:	68f8      	ldr	r0, [r7, #12]
 801a110:	f000 fb1b 	bl	801a74a <draw_bg_img>

    draw_border(draw_ctx, dsc, coords);
 801a114:	687a      	ldr	r2, [r7, #4]
 801a116:	68b9      	ldr	r1, [r7, #8]
 801a118:	68f8      	ldr	r0, [r7, #12]
 801a11a:	f000 fcd2 	bl	801aac2 <draw_border>

    draw_outline(draw_ctx, dsc, coords);
 801a11e:	687a      	ldr	r2, [r7, #4]
 801a120:	68b9      	ldr	r1, [r7, #8]
 801a122:	68f8      	ldr	r0, [r7, #12]
 801a124:	f002 fb61 	bl	801c7ea <draw_outline>

    LV_ASSERT_MEM_INTEGRITY();
}
 801a128:	bf00      	nop
 801a12a:	3710      	adds	r7, #16
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}

0801a130 <lv_draw_sw_bg>:

void lv_draw_sw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b084      	sub	sp, #16
 801a134:	af00      	add	r7, sp, #0
 801a136:	60f8      	str	r0, [r7, #12]
 801a138:	60b9      	str	r1, [r7, #8]
 801a13a:	607a      	str	r2, [r7, #4]
#if LV_COLOR_SCREEN_TRANSP && LV_COLOR_DEPTH == 32
    lv_memset_00(draw_ctx->buf, lv_area_get_size(draw_ctx->buf_area) * sizeof(lv_color_t));
#endif

    draw_bg(draw_ctx, dsc, coords);
 801a13c:	687a      	ldr	r2, [r7, #4]
 801a13e:	68b9      	ldr	r1, [r7, #8]
 801a140:	68f8      	ldr	r0, [r7, #12]
 801a142:	f000 f809 	bl	801a158 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801a146:	687a      	ldr	r2, [r7, #4]
 801a148:	68b9      	ldr	r1, [r7, #8]
 801a14a:	68f8      	ldr	r0, [r7, #12]
 801a14c:	f000 fafd 	bl	801a74a <draw_bg_img>
}
 801a150:	bf00      	nop
 801a152:	3710      	adds	r7, #16
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}

0801a158 <draw_bg>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void draw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b0a6      	sub	sp, #152	; 0x98
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	60f8      	str	r0, [r7, #12]
 801a160:	60b9      	str	r1, [r7, #8]
 801a162:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801a164:	68bb      	ldr	r3, [r7, #8]
 801a166:	78db      	ldrb	r3, [r3, #3]
 801a168:	2b02      	cmp	r3, #2
 801a16a:	f240 82e8 	bls.w	801a73e <draw_bg+0x5e6>

    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 801a16e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a172:	6879      	ldr	r1, [r7, #4]
 801a174:	4618      	mov	r0, r3
 801a176:	f7ff ff6b 	bl	801a050 <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 801a17a:	68bb      	ldr	r3, [r7, #8]
 801a17c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801a180:	2b01      	cmp	r3, #1
 801a182:	dd4f      	ble.n	801a224 <draw_bg+0xcc>
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	7f1b      	ldrb	r3, [r3, #28]
 801a188:	2bfc      	cmp	r3, #252	; 0xfc
 801a18a:	d94b      	bls.n	801a224 <draw_bg+0xcc>
 801a18c:	68bb      	ldr	r3, [r7, #8]
 801a18e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d046      	beq.n	801a224 <draw_bg+0xcc>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 801a196:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801a19a:	b29a      	uxth	r2, r3
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	7f5b      	ldrb	r3, [r3, #29]
 801a1a0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801a1a4:	b2db      	uxtb	r3, r3
 801a1a6:	109b      	asrs	r3, r3, #2
 801a1a8:	b29b      	uxth	r3, r3
 801a1aa:	f003 0301 	and.w	r3, r3, #1
 801a1ae:	b29b      	uxth	r3, r3
 801a1b0:	4413      	add	r3, r2
 801a1b2:	b29b      	uxth	r3, r3
 801a1b4:	b21b      	sxth	r3, r3
 801a1b6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 801a1ba:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a1be:	b29a      	uxth	r2, r3
 801a1c0:	68bb      	ldr	r3, [r7, #8]
 801a1c2:	7f5b      	ldrb	r3, [r3, #29]
 801a1c4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801a1c8:	b2db      	uxtb	r3, r3
 801a1ca:	105b      	asrs	r3, r3, #1
 801a1cc:	b29b      	uxth	r3, r3
 801a1ce:	f003 0301 	and.w	r3, r3, #1
 801a1d2:	b29b      	uxth	r3, r3
 801a1d4:	4413      	add	r3, r2
 801a1d6:	b29b      	uxth	r3, r3
 801a1d8:	b21b      	sxth	r3, r3
 801a1da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 801a1de:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801a1e2:	b29a      	uxth	r2, r3
 801a1e4:	68bb      	ldr	r3, [r7, #8]
 801a1e6:	7f5b      	ldrb	r3, [r3, #29]
 801a1e8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801a1ec:	b2db      	uxtb	r3, r3
 801a1ee:	10db      	asrs	r3, r3, #3
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	f003 0301 	and.w	r3, r3, #1
 801a1f6:	b29b      	uxth	r3, r3
 801a1f8:	1ad3      	subs	r3, r2, r3
 801a1fa:	b29b      	uxth	r3, r3
 801a1fc:	b21b      	sxth	r3, r3
 801a1fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 801a202:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801a206:	b29a      	uxth	r2, r3
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	7f5b      	ldrb	r3, [r3, #29]
 801a20c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801a210:	b2db      	uxtb	r3, r3
 801a212:	b29b      	uxth	r3, r3
 801a214:	f003 0301 	and.w	r3, r3, #1
 801a218:	b29b      	uxth	r3, r3
 801a21a:	1ad3      	subs	r3, r2, r3
 801a21c:	b29b      	uxth	r3, r3
 801a21e:	b21b      	sxth	r3, r3
 801a220:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    }

    lv_area_t clipped_coords;
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	689a      	ldr	r2, [r3, #8]
 801a228:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801a22c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a230:	4618      	mov	r0, r3
 801a232:	f004 ffd5 	bl	801f1e0 <_lv_area_intersect>
 801a236:	4603      	mov	r3, r0
 801a238:	f083 0301 	eor.w	r3, r3, #1
 801a23c:	b2db      	uxtb	r3, r3
 801a23e:	2b00      	cmp	r3, #0
 801a240:	f040 827f 	bne.w	801a742 <draw_bg+0x5ea>

    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	7a9b      	ldrb	r3, [r3, #10]
 801a248:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801a24c:	b2db      	uxtb	r3, r3
 801a24e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 801a252:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a256:	2b00      	cmp	r3, #0
 801a258:	d104      	bne.n	801a264 <draw_bg+0x10c>
 801a25a:	68bb      	ldr	r3, [r7, #8]
 801a25c:	791b      	ldrb	r3, [r3, #4]
 801a25e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801a262:	e003      	b.n	801a26c <draw_bg+0x114>
 801a264:	68bb      	ldr	r3, [r7, #8]
 801a266:	795b      	ldrb	r3, [r3, #5]
 801a268:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 801a26c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801a270:	68bb      	ldr	r3, [r7, #8]
 801a272:	79db      	ldrb	r3, [r3, #7]
 801a274:	429a      	cmp	r2, r3
 801a276:	d102      	bne.n	801a27e <draw_bg+0x126>
 801a278:	2300      	movs	r3, #0
 801a27a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 801a27e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a282:	4618      	mov	r0, r3
 801a284:	f7f6 f9c0 	bl	8010608 <lv_draw_mask_is_any>
 801a288:	4603      	mov	r3, r0
 801a28a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 801a28e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a292:	2200      	movs	r2, #0
 801a294:	601a      	str	r2, [r3, #0]
 801a296:	605a      	str	r2, [r3, #4]
 801a298:	609a      	str	r2, [r3, #8]
 801a29a:	60da      	str	r2, [r3, #12]
 801a29c:	611a      	str	r2, [r3, #16]
 801a29e:	615a      	str	r2, [r3, #20]
 801a2a0:	619a      	str	r2, [r3, #24]
    blend_dsc.blend_mode = dsc->blend_mode;
 801a2a2:	68bb      	ldr	r3, [r7, #8]
 801a2a4:	789b      	ldrb	r3, [r3, #2]
 801a2a6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    blend_dsc.color = bg_color;
 801a2aa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a2ae:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    /*Most simple case: just a plain rectangle*/
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 801a2b2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801a2b6:	f083 0301 	eor.w	r3, r3, #1
 801a2ba:	b2db      	uxtb	r3, r3
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d016      	beq.n	801a2ee <draw_bg+0x196>
 801a2c0:	68bb      	ldr	r3, [r7, #8]
 801a2c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d111      	bne.n	801a2ee <draw_bg+0x196>
 801a2ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d10d      	bne.n	801a2ee <draw_bg+0x196>
        blend_dsc.blend_area = &bg_coords;
 801a2d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a2d6:	63bb      	str	r3, [r7, #56]	; 0x38
        blend_dsc.opa = dsc->bg_opa;
 801a2d8:	68bb      	ldr	r3, [r7, #8]
 801a2da:	78db      	ldrb	r3, [r3, #3]
 801a2dc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a2e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a2e4:	4619      	mov	r1, r3
 801a2e6:	68f8      	ldr	r0, [r7, #12]
 801a2e8:	f7fb fc5e 	bl	8015ba8 <lv_draw_sw_blend>
        return;
 801a2ec:	e22a      	b.n	801a744 <draw_bg+0x5ec>

    /*Complex case: there is gradient, mask, or radius*/
#if LV_DRAW_COMPLEX == 0
    LV_LOG_WARN("Can't draw complex rectangle because LV_DRAW_COMPLEX = 0");
#else
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 801a2ee:	68bb      	ldr	r3, [r7, #8]
 801a2f0:	78db      	ldrb	r3, [r3, #3]
 801a2f2:	2bfc      	cmp	r3, #252	; 0xfc
 801a2f4:	d802      	bhi.n	801a2fc <draw_bg+0x1a4>
 801a2f6:	68bb      	ldr	r3, [r7, #8]
 801a2f8:	78db      	ldrb	r3, [r3, #3]
 801a2fa:	e000      	b.n	801a2fe <draw_bg+0x1a6>
 801a2fc:	23ff      	movs	r3, #255	; 0xff
 801a2fe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius. Can't be larger than the half of the shortest side */
    lv_coord_t coords_bg_w = lv_area_get_width(&bg_coords);
 801a302:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a306:	4618      	mov	r0, r3
 801a308:	f7ff fec1 	bl	801a08e <lv_area_get_width>
 801a30c:	4603      	mov	r3, r0
 801a30e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    lv_coord_t coords_bg_h = lv_area_get_height(&bg_coords);
 801a312:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801a316:	4618      	mov	r0, r3
 801a318:	f7ff fed0 	bl	801a0bc <lv_area_get_height>
 801a31c:	4603      	mov	r3, r0
 801a31e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 801a322:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801a326:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801a32a:	4293      	cmp	r3, r2
 801a32c:	bfa8      	it	ge
 801a32e:	4613      	movge	r3, r2
 801a330:	b21b      	sxth	r3, r3
 801a332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 801a336:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a33a:	105b      	asrs	r3, r3, #1
 801a33c:	68ba      	ldr	r2, [r7, #8]
 801a33e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a342:	4293      	cmp	r3, r2
 801a344:	bfa8      	it	ge
 801a346:	4613      	movge	r3, r2
 801a348:	67fb      	str	r3, [r7, #124]	; 0x7c

    /*Add a radius mask if there is radius*/
    int32_t clipped_w = lv_area_get_width(&clipped_coords);
 801a34a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a34e:	4618      	mov	r0, r3
 801a350:	f7ff fe9d 	bl	801a08e <lv_area_get_width>
 801a354:	4603      	mov	r3, r0
 801a356:	67bb      	str	r3, [r7, #120]	; 0x78
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801a358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a35c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    lv_opa_t * mask_buf = NULL;
 801a360:	2300      	movs	r3, #0
 801a362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0 || mask_any) {
 801a366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a368:	2b00      	cmp	r3, #0
 801a36a:	dc03      	bgt.n	801a374 <draw_bg+0x21c>
 801a36c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801a370:	2b00      	cmp	r3, #0
 801a372:	d017      	beq.n	801a3a4 <draw_bg+0x24c>
        mask_buf = lv_mem_buf_get(clipped_w);
 801a374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a376:	4618      	mov	r0, r3
 801a378:	f006 fadc 	bl	8020934 <lv_mem_buf_get>
 801a37c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 801a380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a382:	b21a      	sxth	r2, r3
 801a384:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801a388:	f107 0020 	add.w	r0, r7, #32
 801a38c:	2300      	movs	r3, #0
 801a38e:	f7f6 fbd7 	bl	8010b40 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801a392:	f107 0320 	add.w	r3, r7, #32
 801a396:	2100      	movs	r1, #0
 801a398:	4618      	mov	r0, r3
 801a39a:	f7f6 f805 	bl	80103a8 <lv_draw_mask_add>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    }

    int32_t h;

    lv_area_t blend_area;
    blend_area.x1 = clipped_coords.x1;
 801a3a4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801a3a8:	833b      	strh	r3, [r7, #24]
    blend_area.x2 = clipped_coords.x2;
 801a3aa:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801a3ae:	83bb      	strh	r3, [r7, #28]

    blend_dsc.mask_buf = mask_buf;
 801a3b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a3b4:	647b      	str	r3, [r7, #68]	; 0x44
    blend_dsc.blend_area = &blend_area;
 801a3b6:	f107 0318 	add.w	r3, r7, #24
 801a3ba:	63bb      	str	r3, [r7, #56]	; 0x38
    blend_dsc.mask_area = &blend_area;
 801a3bc:	f107 0318 	add.w	r3, r7, #24
 801a3c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    blend_dsc.opa = LV_OPA_COVER;
 801a3c2:	23ff      	movs	r3, #255	; 0xff
 801a3c4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50


    /*Get gradient if appropriate*/
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	3305      	adds	r3, #5
 801a3cc:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801a3d0:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801a3d4:	4618      	mov	r0, r3
 801a3d6:	f7fc fff7 	bl	80173c8 <lv_gradient_get>
 801a3da:	6778      	str	r0, [r7, #116]	; 0x74
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 801a3dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d00d      	beq.n	801a3fe <draw_bg+0x2a6>
 801a3e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a3e6:	2b02      	cmp	r3, #2
 801a3e8:	d109      	bne.n	801a3fe <draw_bg+0x2a6>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 801a3ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a3ec:	689a      	ldr	r2, [r3, #8]
 801a3ee:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801a3f2:	4619      	mov	r1, r3
 801a3f4:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801a3f8:	1acb      	subs	r3, r1, r3
 801a3fa:	4413      	add	r3, r2
 801a3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
#endif
#endif

    /*There is another mask too. Draw line by line. */
    if(mask_any) {
 801a3fe:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801a402:	2b00      	cmp	r3, #0
 801a404:	d04c      	beq.n	801a4a0 <draw_bg+0x348>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801a406:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801a40a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a40e:	e03f      	b.n	801a490 <draw_bg+0x338>
            blend_area.y1 = h;
 801a410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a414:	b21b      	sxth	r3, r3
 801a416:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801a418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a41c:	b21b      	sxth	r3, r3
 801a41e:	83fb      	strh	r3, [r7, #30]

            /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
             * It saves calculating the final opa in lv_draw_sw_blend*/
            lv_memset(mask_buf, opa, clipped_w);
 801a420:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a422:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801a426:	4619      	mov	r1, r3
 801a428:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a42c:	f006 fd9e 	bl	8020f6c <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801a430:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801a434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a438:	b21a      	sxth	r2, r3
 801a43a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a43c:	b21b      	sxth	r3, r3
 801a43e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a442:	f7f5 ffe3 	bl	801040c <lv_draw_mask_apply>
 801a446:	4603      	mov	r3, r0
 801a448:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801a44c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801a450:	2b01      	cmp	r3, #1
 801a452:	d102      	bne.n	801a45a <draw_bg+0x302>
 801a454:	2302      	movs	r3, #2
 801a456:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801a45a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a45e:	2b01      	cmp	r3, #1
 801a460:	d10b      	bne.n	801a47a <draw_bg+0x322>
 801a462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a464:	689b      	ldr	r3, [r3, #8]
 801a466:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801a46a:	4611      	mov	r1, r2
 801a46c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a470:	1a52      	subs	r2, r2, r1
 801a472:	4413      	add	r3, r2
 801a474:	781b      	ldrb	r3, [r3, #0]
 801a476:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a47a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a47e:	4619      	mov	r1, r3
 801a480:	68f8      	ldr	r0, [r7, #12]
 801a482:	f7fb fb91 	bl	8015ba8 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801a486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a48a:	3301      	adds	r3, #1
 801a48c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a490:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801a494:	461a      	mov	r2, r3
 801a496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a49a:	4293      	cmp	r3, r2
 801a49c:	ddb8      	ble.n	801a410 <draw_bg+0x2b8>
        }
        goto bg_clean_up;
 801a49e:	e130      	b.n	801a702 <draw_bg+0x5aa>
    }


    /* Draw the top of the rectangle line by line and mirror it to the bottom. */
    for(h = 0; h < rout; h++) {
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a4a6:	e084      	b.n	801a5b2 <draw_bg+0x45a>
        lv_coord_t top_y = bg_coords.y1 + h;
 801a4a8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a4ac:	b29a      	uxth	r2, r3
 801a4ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	4413      	add	r3, r2
 801a4b6:	b29b      	uxth	r3, r3
 801a4b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t bottom_y = bg_coords.y2 - h;
 801a4bc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	1ad3      	subs	r3, r2, r3
 801a4ca:	b29b      	uxth	r3, r3
 801a4cc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801a4d0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801a4d4:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801a4d8:	429a      	cmp	r2, r3
 801a4da:	da05      	bge.n	801a4e8 <draw_bg+0x390>
 801a4dc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801a4e0:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801a4e4:	429a      	cmp	r2, r3
 801a4e6:	dc5e      	bgt.n	801a5a6 <draw_bg+0x44e>

        /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
         * It saves calculating the final opa in lv_draw_sw_blend*/
        lv_memset(mask_buf, opa, clipped_w);
 801a4e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a4ea:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801a4ee:	4619      	mov	r1, r3
 801a4f0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a4f4:	f006 fd3a 	bl	8020f6c <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 801a4f8:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801a4fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a4fe:	b21b      	sxth	r3, r3
 801a500:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801a504:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a508:	f7f5 ff80 	bl	801040c <lv_draw_mask_apply>
 801a50c:	4603      	mov	r3, r0
 801a50e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801a512:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801a516:	2b01      	cmp	r3, #1
 801a518:	d102      	bne.n	801a520 <draw_bg+0x3c8>
 801a51a:	2302      	movs	r3, #2
 801a51c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(top_y >= clipped_coords.y1) {
 801a520:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801a524:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801a528:	429a      	cmp	r2, r3
 801a52a:	db1a      	blt.n	801a562 <draw_bg+0x40a>
            blend_area.y1 = top_y;
 801a52c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801a530:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = top_y;
 801a532:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801a536:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  top_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 801a538:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a53c:	2b01      	cmp	r3, #1
 801a53e:	d10a      	bne.n	801a556 <draw_bg+0x3fe>
 801a540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a542:	689b      	ldr	r3, [r3, #8]
 801a544:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801a548:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801a54c:	1a52      	subs	r2, r2, r1
 801a54e:	4413      	add	r3, r2
 801a550:	781b      	ldrb	r3, [r3, #0]
 801a552:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a556:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a55a:	4619      	mov	r1, r3
 801a55c:	68f8      	ldr	r0, [r7, #12]
 801a55e:	f7fb fb23 	bl	8015ba8 <lv_draw_sw_blend>
        }

        if(bottom_y <= clipped_coords.y2) {
 801a562:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801a566:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801a56a:	429a      	cmp	r2, r3
 801a56c:	dc1c      	bgt.n	801a5a8 <draw_bg+0x450>
            blend_area.y1 = bottom_y;
 801a56e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801a572:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = bottom_y;
 801a574:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801a578:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  bottom_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 801a57a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a57e:	2b01      	cmp	r3, #1
 801a580:	d10a      	bne.n	801a598 <draw_bg+0x440>
 801a582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a584:	689b      	ldr	r3, [r3, #8]
 801a586:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801a58a:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801a58e:	1a52      	subs	r2, r2, r1
 801a590:	4413      	add	r3, r2
 801a592:	781b      	ldrb	r3, [r3, #0]
 801a594:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a598:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a59c:	4619      	mov	r1, r3
 801a59e:	68f8      	ldr	r0, [r7, #12]
 801a5a0:	f7fb fb02 	bl	8015ba8 <lv_draw_sw_blend>
 801a5a4:	e000      	b.n	801a5a8 <draw_bg+0x450>
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801a5a6:	bf00      	nop
    for(h = 0; h < rout; h++) {
 801a5a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a5ac:	3301      	adds	r3, #1
 801a5ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a5b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a5b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	f6ff af75 	blt.w	801a4a8 <draw_bg+0x350>

    /* Draw the center of the rectangle.*/

    /*If no other masks and no gradient, the center is a simple rectangle*/
    lv_area_t center_coords;
    center_coords.x1 = bg_coords.x1;
 801a5be:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801a5c2:	823b      	strh	r3, [r7, #16]
    center_coords.x2 = bg_coords.x2;
 801a5c4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801a5c8:	82bb      	strh	r3, [r7, #20]
    center_coords.y1 = bg_coords.y1 + rout;
 801a5ca:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a5ce:	b29a      	uxth	r2, r3
 801a5d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	4413      	add	r3, r2
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	b21b      	sxth	r3, r3
 801a5da:	827b      	strh	r3, [r7, #18]
    center_coords.y2 = bg_coords.y2 - rout;
 801a5dc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801a5e0:	b29a      	uxth	r2, r3
 801a5e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a5e4:	b29b      	uxth	r3, r3
 801a5e6:	1ad3      	subs	r3, r2, r3
 801a5e8:	b29b      	uxth	r3, r3
 801a5ea:	b21b      	sxth	r3, r3
 801a5ec:	82fb      	strh	r3, [r7, #22]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 801a5ee:	f107 0310 	add.w	r3, r7, #16
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7f6 f808 	bl	8010608 <lv_draw_mask_is_any>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 801a5fe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801a602:	f083 0301 	eor.w	r3, r3, #1
 801a606:	b2db      	uxtb	r3, r3
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d022      	beq.n	801a652 <draw_bg+0x4fa>
 801a60c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a610:	2b00      	cmp	r3, #0
 801a612:	d11e      	bne.n	801a652 <draw_bg+0x4fa>
        blend_area.y1 = bg_coords.y1 + rout;
 801a614:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a618:	b29a      	uxth	r2, r3
 801a61a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a61c:	b29b      	uxth	r3, r3
 801a61e:	4413      	add	r3, r2
 801a620:	b29b      	uxth	r3, r3
 801a622:	b21b      	sxth	r3, r3
 801a624:	837b      	strh	r3, [r7, #26]
        blend_area.y2 = bg_coords.y2 - rout;
 801a626:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801a62a:	b29a      	uxth	r2, r3
 801a62c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a62e:	b29b      	uxth	r3, r3
 801a630:	1ad3      	subs	r3, r2, r3
 801a632:	b29b      	uxth	r3, r3
 801a634:	b21b      	sxth	r3, r3
 801a636:	83fb      	strh	r3, [r7, #30]
        blend_dsc.opa = opa;
 801a638:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801a63c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_buf = NULL;
 801a640:	2300      	movs	r3, #0
 801a642:	647b      	str	r3, [r7, #68]	; 0x44
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a648:	4619      	mov	r1, r3
 801a64a:	68f8      	ldr	r0, [r7, #12]
 801a64c:	f7fb faac 	bl	8015ba8 <lv_draw_sw_blend>
 801a650:	e057      	b.n	801a702 <draw_bg+0x5aa>
    }
    /*With gradient and/or mask draw line by line*/
    else {
        blend_dsc.opa = opa;
 801a652:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801a656:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801a65a:	2301      	movs	r3, #1
 801a65c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        int32_t h_end = bg_coords.y2 - rout;
 801a660:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801a664:	461a      	mov	r2, r3
 801a666:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a668:	1ad3      	subs	r3, r2, r3
 801a66a:	66fb      	str	r3, [r7, #108]	; 0x6c
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801a66c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801a670:	461a      	mov	r2, r3
 801a672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a674:	4413      	add	r3, r2
 801a676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a67a:	e03c      	b.n	801a6f6 <draw_bg+0x59e>
            /*If there is no other mask do not apply mask as in the center there is no radius to mask*/
            if(mask_any_center) {
 801a67c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801a680:	2b00      	cmp	r3, #0
 801a682:	d015      	beq.n	801a6b0 <draw_bg+0x558>
                lv_memset(mask_buf, opa, clipped_w);
 801a684:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a686:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801a68a:	4619      	mov	r1, r3
 801a68c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a690:	f006 fc6c 	bl	8020f6c <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801a694:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801a698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a69c:	b21a      	sxth	r2, r3
 801a69e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a6a0:	b21b      	sxth	r3, r3
 801a6a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a6a6:	f7f5 feb1 	bl	801040c <lv_draw_mask_apply>
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            blend_area.y1 = h;
 801a6b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a6b4:	b21b      	sxth	r3, r3
 801a6b6:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801a6b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a6bc:	b21b      	sxth	r3, r3
 801a6be:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801a6c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801a6c4:	2b01      	cmp	r3, #1
 801a6c6:	d10b      	bne.n	801a6e0 <draw_bg+0x588>
 801a6c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a6ca:	689b      	ldr	r3, [r3, #8]
 801a6cc:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801a6d0:	4611      	mov	r1, r2
 801a6d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a6d6:	1a52      	subs	r2, r2, r1
 801a6d8:	4413      	add	r3, r2
 801a6da:	781b      	ldrb	r3, [r3, #0]
 801a6dc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a6e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a6e4:	4619      	mov	r1, r3
 801a6e6:	68f8      	ldr	r0, [r7, #12]
 801a6e8:	f7fb fa5e 	bl	8015ba8 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801a6ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a6f0:	3301      	adds	r3, #1
 801a6f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a6f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	ddbd      	ble.n	801a67c <draw_bg+0x524>
        }
    }


bg_clean_up:
 801a700:	bf00      	nop
    if(mask_buf) lv_mem_buf_release(mask_buf);
 801a702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a706:	2b00      	cmp	r3, #0
 801a708:	d003      	beq.n	801a712 <draw_bg+0x5ba>
 801a70a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801a70e:	f006 f9bd 	bl	8020a8c <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 801a712:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801a716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a71a:	d009      	beq.n	801a730 <draw_bg+0x5d8>
        lv_draw_mask_remove_id(mask_rout_id);
 801a71c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801a720:	4618      	mov	r0, r3
 801a722:	f7f5 feb7 	bl	8010494 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 801a726:	f107 0320 	add.w	r3, r7, #32
 801a72a:	4618      	mov	r0, r3
 801a72c:	f7f5 ff02 	bl	8010534 <lv_draw_mask_free_param>
    }
    if(grad) {
 801a730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a732:	2b00      	cmp	r3, #0
 801a734:	d006      	beq.n	801a744 <draw_bg+0x5ec>
        lv_gradient_cleanup(grad);
 801a736:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801a738:	f7fc ffb4 	bl	80176a4 <lv_gradient_cleanup>
 801a73c:	e002      	b.n	801a744 <draw_bg+0x5ec>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801a73e:	bf00      	nop
 801a740:	e000      	b.n	801a744 <draw_bg+0x5ec>
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801a742:	bf00      	nop
    }

#endif
}
 801a744:	3798      	adds	r7, #152	; 0x98
 801a746:	46bd      	mov	sp, r7
 801a748:	bd80      	pop	{r7, pc}

0801a74a <draw_bg_img>:

static void draw_bg_img(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801a74a:	b590      	push	{r4, r7, lr}
 801a74c:	b0a3      	sub	sp, #140	; 0x8c
 801a74e:	af04      	add	r7, sp, #16
 801a750:	60f8      	str	r0, [r7, #12]
 801a752:	60b9      	str	r1, [r7, #8]
 801a754:	607a      	str	r2, [r7, #4]
    if(dsc->bg_img_src == NULL) return;
 801a756:	68bb      	ldr	r3, [r7, #8]
 801a758:	68db      	ldr	r3, [r3, #12]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	f000 81a9 	beq.w	801aab2 <draw_bg_img+0x368>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801a760:	68bb      	ldr	r3, [r7, #8]
 801a762:	7d5b      	ldrb	r3, [r3, #21]
 801a764:	2b02      	cmp	r3, #2
 801a766:	f240 81a6 	bls.w	801aab6 <draw_bg_img+0x36c>

    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	689a      	ldr	r2, [r3, #8]
 801a76e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a772:	6879      	ldr	r1, [r7, #4]
 801a774:	4618      	mov	r0, r3
 801a776:	f004 fd33 	bl	801f1e0 <_lv_area_intersect>
 801a77a:	4603      	mov	r3, r0
 801a77c:	f083 0301 	eor.w	r3, r3, #1
 801a780:	b2db      	uxtb	r3, r3
 801a782:	2b00      	cmp	r3, #0
 801a784:	f040 8199 	bne.w	801aaba <draw_bg_img+0x370>
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	689b      	ldr	r3, [r3, #8]
 801a78c:	677b      	str	r3, [r7, #116]	; 0x74
    draw_ctx->clip_area = &clip_area;
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801a794:	609a      	str	r2, [r3, #8]

    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	68db      	ldr	r3, [r3, #12]
 801a79a:	4618      	mov	r0, r3
 801a79c:	f7f4 fb5f 	bl	800ee5e <lv_img_src_get_type>
 801a7a0:	4603      	mov	r3, r0
 801a7a2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(src_type == LV_IMG_SRC_SYMBOL) {
 801a7a6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801a7aa:	2b02      	cmp	r3, #2
 801a7ac:	d17f      	bne.n	801a8ae <draw_bg_img+0x164>
        lv_point_t size;
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801a7ae:	68bb      	ldr	r3, [r7, #8]
 801a7b0:	68d9      	ldr	r1, [r3, #12]
 801a7b2:	68bb      	ldr	r3, [r7, #8]
 801a7b4:	691a      	ldr	r2, [r3, #16]
 801a7b6:	f107 0064 	add.w	r0, r7, #100	; 0x64
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	9302      	str	r3, [sp, #8]
 801a7be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801a7c2:	9301      	str	r3, [sp, #4]
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	9300      	str	r3, [sp, #0]
 801a7c8:	2300      	movs	r3, #0
 801a7ca:	f008 fa9b 	bl	8022d04 <lv_txt_get_size>
        lv_area_t a;
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a7d4:	b29c      	uxth	r4, r3
 801a7d6:	6878      	ldr	r0, [r7, #4]
 801a7d8:	f7ff fc59 	bl	801a08e <lv_area_get_width>
 801a7dc:	4603      	mov	r3, r0
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	da00      	bge.n	801a7e4 <draw_bg_img+0x9a>
 801a7e2:	3301      	adds	r3, #1
 801a7e4:	105b      	asrs	r3, r3, #1
 801a7e6:	b21b      	sxth	r3, r3
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	4423      	add	r3, r4
 801a7ec:	b29a      	uxth	r2, r3
 801a7ee:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	da00      	bge.n	801a7f8 <draw_bg_img+0xae>
 801a7f6:	3301      	adds	r3, #1
 801a7f8:	105b      	asrs	r3, r3, #1
 801a7fa:	b21b      	sxth	r3, r3
 801a7fc:	b29b      	uxth	r3, r3
 801a7fe:	1ad3      	subs	r3, r2, r3
 801a800:	b29b      	uxth	r3, r3
 801a802:	b21b      	sxth	r3, r3
 801a804:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        a.x2 = a.x1 + size.x - 1;
 801a808:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801a80c:	b29a      	uxth	r2, r3
 801a80e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801a812:	b29b      	uxth	r3, r3
 801a814:	4413      	add	r3, r2
 801a816:	b29b      	uxth	r3, r3
 801a818:	3b01      	subs	r3, #1
 801a81a:	b29b      	uxth	r3, r3
 801a81c:	b21b      	sxth	r3, r3
 801a81e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a828:	b29c      	uxth	r4, r3
 801a82a:	6878      	ldr	r0, [r7, #4]
 801a82c:	f7ff fc46 	bl	801a0bc <lv_area_get_height>
 801a830:	4603      	mov	r3, r0
 801a832:	2b00      	cmp	r3, #0
 801a834:	da00      	bge.n	801a838 <draw_bg_img+0xee>
 801a836:	3301      	adds	r3, #1
 801a838:	105b      	asrs	r3, r3, #1
 801a83a:	b21b      	sxth	r3, r3
 801a83c:	b29b      	uxth	r3, r3
 801a83e:	4423      	add	r3, r4
 801a840:	b29a      	uxth	r2, r3
 801a842:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801a846:	2b00      	cmp	r3, #0
 801a848:	da00      	bge.n	801a84c <draw_bg_img+0x102>
 801a84a:	3301      	adds	r3, #1
 801a84c:	105b      	asrs	r3, r3, #1
 801a84e:	b21b      	sxth	r3, r3
 801a850:	b29b      	uxth	r3, r3
 801a852:	1ad3      	subs	r3, r2, r3
 801a854:	b29b      	uxth	r3, r3
 801a856:	b21b      	sxth	r3, r3
 801a858:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        a.y2 = a.y1 + size.y - 1;
 801a85c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801a860:	b29a      	uxth	r2, r3
 801a862:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801a866:	b29b      	uxth	r3, r3
 801a868:	4413      	add	r3, r2
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	3b01      	subs	r3, #1
 801a86e:	b29b      	uxth	r3, r3
 801a870:	b21b      	sxth	r3, r3
 801a872:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        lv_draw_label_dsc_t label_draw_dsc;
        lv_draw_label_dsc_init(&label_draw_dsc);
 801a876:	f107 0314 	add.w	r3, r7, #20
 801a87a:	4618      	mov	r0, r3
 801a87c:	f7f4 fd9e 	bl	800f3bc <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	691b      	ldr	r3, [r3, #16]
 801a884:	617b      	str	r3, [r7, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 801a886:	68bb      	ldr	r3, [r7, #8]
 801a888:	7d1b      	ldrb	r3, [r3, #20]
 801a88a:	f887 3020 	strb.w	r3, [r7, #32]
        label_draw_dsc.opa = dsc->bg_img_opa;
 801a88e:	68bb      	ldr	r3, [r7, #8]
 801a890:	7d5b      	ldrb	r3, [r3, #21]
 801a892:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 801a896:	68bb      	ldr	r3, [r7, #8]
 801a898:	68db      	ldr	r3, [r3, #12]
 801a89a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801a89e:	f107 0114 	add.w	r1, r7, #20
 801a8a2:	2000      	movs	r0, #0
 801a8a4:	9000      	str	r0, [sp, #0]
 801a8a6:	68f8      	ldr	r0, [r7, #12]
 801a8a8:	f7f4 fdb4 	bl	800f414 <lv_draw_label>
 801a8ac:	e0fd      	b.n	801aaaa <draw_bg_img+0x360>
    }
    else {
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 801a8ae:	68bb      	ldr	r3, [r7, #8]
 801a8b0:	68db      	ldr	r3, [r3, #12]
 801a8b2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801a8b6:	4611      	mov	r1, r2
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	f7f8 fb49 	bl	8012f50 <lv_img_decoder_get_info>
 801a8be:	4603      	mov	r3, r0
 801a8c0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if(res == LV_RES_OK) {
 801a8c4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801a8c8:	2b01      	cmp	r3, #1
 801a8ca:	f040 80ee 	bne.w	801aaaa <draw_bg_img+0x360>
            lv_draw_img_dsc_t img_dsc;
            lv_draw_img_dsc_init(&img_dsc);
 801a8ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	f7f4 f9df 	bl	800ec96 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	789b      	ldrb	r3, [r3, #2]
 801a8dc:	f003 030f 	and.w	r3, r3, #15
 801a8e0:	b2da      	uxtb	r2, r3
 801a8e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a8e6:	f362 0303 	bfi	r3, r2, #0, #4
 801a8ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            img_dsc.recolor = dsc->bg_img_recolor;
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	7d1b      	ldrb	r3, [r3, #20]
 801a8f2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 801a8f6:	68bb      	ldr	r3, [r7, #8]
 801a8f8:	7d9b      	ldrb	r3, [r3, #22]
 801a8fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            img_dsc.opa = dsc->bg_img_opa;
 801a8fe:	68bb      	ldr	r3, [r7, #8]
 801a900:	7d5b      	ldrb	r3, [r3, #21]
 801a902:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

            /*Center align*/
            if(dsc->bg_img_tiled == false) {
 801a906:	68bb      	ldr	r3, [r7, #8]
 801a908:	7ddb      	ldrb	r3, [r3, #23]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d163      	bne.n	801a9d6 <draw_bg_img+0x28c>
                lv_area_t area;
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a914:	b29c      	uxth	r4, r3
 801a916:	6878      	ldr	r0, [r7, #4]
 801a918:	f7ff fbb9 	bl	801a08e <lv_area_get_width>
 801a91c:	4603      	mov	r3, r0
 801a91e:	2b00      	cmp	r3, #0
 801a920:	da00      	bge.n	801a924 <draw_bg_img+0x1da>
 801a922:	3301      	adds	r3, #1
 801a924:	105b      	asrs	r3, r3, #1
 801a926:	b21b      	sxth	r3, r3
 801a928:	b29b      	uxth	r3, r3
 801a92a:	4423      	add	r3, r4
 801a92c:	b29a      	uxth	r2, r3
 801a92e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a930:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801a934:	b29b      	uxth	r3, r3
 801a936:	2b00      	cmp	r3, #0
 801a938:	da00      	bge.n	801a93c <draw_bg_img+0x1f2>
 801a93a:	3301      	adds	r3, #1
 801a93c:	105b      	asrs	r3, r3, #1
 801a93e:	425b      	negs	r3, r3
 801a940:	b29b      	uxth	r3, r3
 801a942:	4413      	add	r3, r2
 801a944:	b29b      	uxth	r3, r3
 801a946:	b21b      	sxth	r3, r3
 801a948:	87bb      	strh	r3, [r7, #60]	; 0x3c
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a950:	b29c      	uxth	r4, r3
 801a952:	6878      	ldr	r0, [r7, #4]
 801a954:	f7ff fbb2 	bl	801a0bc <lv_area_get_height>
 801a958:	4603      	mov	r3, r0
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	da00      	bge.n	801a960 <draw_bg_img+0x216>
 801a95e:	3301      	adds	r3, #1
 801a960:	105b      	asrs	r3, r3, #1
 801a962:	b21b      	sxth	r3, r3
 801a964:	b29b      	uxth	r3, r3
 801a966:	4423      	add	r3, r4
 801a968:	b29a      	uxth	r2, r3
 801a96a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801a96e:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801a972:	b29b      	uxth	r3, r3
 801a974:	2b00      	cmp	r3, #0
 801a976:	da00      	bge.n	801a97a <draw_bg_img+0x230>
 801a978:	3301      	adds	r3, #1
 801a97a:	105b      	asrs	r3, r3, #1
 801a97c:	425b      	negs	r3, r3
 801a97e:	b29b      	uxth	r3, r3
 801a980:	4413      	add	r3, r2
 801a982:	b29b      	uxth	r3, r3
 801a984:	b21b      	sxth	r3, r3
 801a986:	87fb      	strh	r3, [r7, #62]	; 0x3e
                area.x2 = area.x1 + header.w - 1;
 801a988:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801a98c:	b29b      	uxth	r3, r3
 801a98e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a990:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801a994:	b292      	uxth	r2, r2
 801a996:	4413      	add	r3, r2
 801a998:	b29b      	uxth	r3, r3
 801a99a:	3b01      	subs	r3, #1
 801a99c:	b29b      	uxth	r3, r3
 801a99e:	b21b      	sxth	r3, r3
 801a9a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                area.y2 = area.y1 + header.h - 1;
 801a9a4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801a9a8:	b29b      	uxth	r3, r3
 801a9aa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801a9ae:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801a9b2:	b292      	uxth	r2, r2
 801a9b4:	4413      	add	r3, r2
 801a9b6:	b29b      	uxth	r3, r3
 801a9b8:	3b01      	subs	r3, #1
 801a9ba:	b29b      	uxth	r3, r3
 801a9bc:	b21b      	sxth	r3, r3
 801a9be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801a9c2:	68bb      	ldr	r3, [r7, #8]
 801a9c4:	68db      	ldr	r3, [r3, #12]
 801a9c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801a9ca:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801a9ce:	68f8      	ldr	r0, [r7, #12]
 801a9d0:	f7f4 f97e 	bl	800ecd0 <lv_draw_img>
 801a9d4:	e069      	b.n	801aaaa <draw_bg_img+0x360>
            }
            else {
                lv_area_t area;
                area.y1 = coords->y1;
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a9dc:	86fb      	strh	r3, [r7, #54]	; 0x36
                area.y2 = area.y1 + header.h - 1;
 801a9de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801a9e2:	b29b      	uxth	r3, r3
 801a9e4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801a9e8:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801a9ec:	b292      	uxth	r2, r2
 801a9ee:	4413      	add	r3, r2
 801a9f0:	b29b      	uxth	r3, r3
 801a9f2:	3b01      	subs	r3, #1
 801a9f4:	b29b      	uxth	r3, r3
 801a9f6:	b21b      	sxth	r3, r3
 801a9f8:	877b      	strh	r3, [r7, #58]	; 0x3a

                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801a9fa:	e04f      	b.n	801aa9c <draw_bg_img+0x352>

                    area.x1 = coords->x1;
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa02:	86bb      	strh	r3, [r7, #52]	; 0x34
                    area.x2 = area.x1 + header.w - 1;
 801aa04:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801aa08:	b29b      	uxth	r3, r3
 801aa0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801aa0c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801aa10:	b292      	uxth	r2, r2
 801aa12:	4413      	add	r3, r2
 801aa14:	b29b      	uxth	r3, r3
 801aa16:	3b01      	subs	r3, #1
 801aa18:	b29b      	uxth	r3, r3
 801aa1a:	b21b      	sxth	r3, r3
 801aa1c:	873b      	strh	r3, [r7, #56]	; 0x38
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801aa1e:	e01e      	b.n	801aa5e <draw_bg_img+0x314>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	68db      	ldr	r3, [r3, #12]
 801aa24:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801aa28:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801aa2c:	68f8      	ldr	r0, [r7, #12]
 801aa2e:	f7f4 f94f 	bl	800ecd0 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801aa32:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801aa36:	b29b      	uxth	r3, r3
 801aa38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801aa3a:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801aa3e:	b292      	uxth	r2, r2
 801aa40:	4413      	add	r3, r2
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	b21b      	sxth	r3, r3
 801aa46:	86bb      	strh	r3, [r7, #52]	; 0x34
 801aa48:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801aa4c:	b29b      	uxth	r3, r3
 801aa4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801aa50:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801aa54:	b292      	uxth	r2, r2
 801aa56:	4413      	add	r3, r2
 801aa58:	b29b      	uxth	r3, r3
 801aa5a:	b21b      	sxth	r3, r3
 801aa5c:	873b      	strh	r3, [r7, #56]	; 0x38
 801aa5e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aa68:	429a      	cmp	r2, r3
 801aa6a:	ddd9      	ble.n	801aa20 <draw_bg_img+0x2d6>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801aa6c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801aa70:	b29b      	uxth	r3, r3
 801aa72:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801aa76:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801aa7a:	b292      	uxth	r2, r2
 801aa7c:	4413      	add	r3, r2
 801aa7e:	b29b      	uxth	r3, r3
 801aa80:	b21b      	sxth	r3, r3
 801aa82:	86fb      	strh	r3, [r7, #54]	; 0x36
 801aa84:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801aa88:	b29b      	uxth	r3, r3
 801aa8a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801aa8e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801aa92:	b292      	uxth	r2, r2
 801aa94:	4413      	add	r3, r2
 801aa96:	b29b      	uxth	r3, r3
 801aa98:	b21b      	sxth	r3, r3
 801aa9a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801aa9c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aaa6:	429a      	cmp	r2, r3
 801aaa8:	dda8      	ble.n	801a9fc <draw_bg_img+0x2b2>
        else {
            LV_LOG_WARN("Couldn't read the background image");
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801aaae:	609a      	str	r2, [r3, #8]
 801aab0:	e004      	b.n	801aabc <draw_bg_img+0x372>
    if(dsc->bg_img_src == NULL) return;
 801aab2:	bf00      	nop
 801aab4:	e002      	b.n	801aabc <draw_bg_img+0x372>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801aab6:	bf00      	nop
 801aab8:	e000      	b.n	801aabc <draw_bg_img+0x372>
        return;
 801aaba:	bf00      	nop
}
 801aabc:	377c      	adds	r7, #124	; 0x7c
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd90      	pop	{r4, r7, pc}

0801aac2 <draw_border>:

static void draw_border(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801aac2:	b580      	push	{r7, lr}
 801aac4:	b090      	sub	sp, #64	; 0x40
 801aac6:	af04      	add	r7, sp, #16
 801aac8:	60f8      	str	r0, [r7, #12]
 801aaca:	60b9      	str	r1, [r7, #8]
 801aacc:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801aace:	68bb      	ldr	r3, [r7, #8]
 801aad0:	7f1b      	ldrb	r3, [r3, #28]
 801aad2:	2b02      	cmp	r3, #2
 801aad4:	f240 80db 	bls.w	801ac8e <draw_border+0x1cc>
    if(dsc->border_width == 0) return;
 801aad8:	68bb      	ldr	r3, [r7, #8]
 801aada:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	f000 80d7 	beq.w	801ac92 <draw_border+0x1d0>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	7f5b      	ldrb	r3, [r3, #29]
 801aae8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801aaec:	b2db      	uxtb	r3, r3
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	f000 80d1 	beq.w	801ac96 <draw_border+0x1d4>
    if(dsc->border_post) return;
 801aaf4:	68bb      	ldr	r3, [r7, #8]
 801aaf6:	7f5b      	ldrb	r3, [r3, #29]
 801aaf8:	f003 0301 	and.w	r3, r3, #1
 801aafc:	b2db      	uxtb	r3, r3
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	f040 80cb 	bne.w	801ac9a <draw_border+0x1d8>

    int32_t coords_w = lv_area_get_width(coords);
 801ab04:	6878      	ldr	r0, [r7, #4]
 801ab06:	f7ff fac2 	bl	801a08e <lv_area_get_width>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t coords_h = lv_area_get_height(coords);
 801ab0e:	6878      	ldr	r0, [r7, #4]
 801ab10:	f7ff fad4 	bl	801a0bc <lv_area_get_height>
 801ab14:	4603      	mov	r3, r0
 801ab16:	623b      	str	r3, [r7, #32]
    int32_t rout = dsc->radius;
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t short_side = LV_MIN(coords_w, coords_h);
 801ab20:	6a3a      	ldr	r2, [r7, #32]
 801ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab24:	4293      	cmp	r3, r2
 801ab26:	bfa8      	it	ge
 801ab28:	4613      	movge	r3, r2
 801ab2a:	61fb      	str	r3, [r7, #28]
    if(rout > short_side >> 1) rout = short_side >> 1;
 801ab2c:	69fb      	ldr	r3, [r7, #28]
 801ab2e:	105b      	asrs	r3, r3, #1
 801ab30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab32:	429a      	cmp	r2, r3
 801ab34:	dd02      	ble.n	801ab3c <draw_border+0x7a>
 801ab36:	69fb      	ldr	r3, [r7, #28]
 801ab38:	105b      	asrs	r3, r3, #1
 801ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801ab3c:	f107 0314 	add.w	r3, r7, #20
 801ab40:	6879      	ldr	r1, [r7, #4]
 801ab42:	4618      	mov	r0, r3
 801ab44:	f7ff fa84 	bl	801a050 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801ab48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ab4c:	b29a      	uxth	r2, r3
 801ab4e:	68bb      	ldr	r3, [r7, #8]
 801ab50:	7f5b      	ldrb	r3, [r3, #29]
 801ab52:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801ab56:	b2db      	uxtb	r3, r3
 801ab58:	f003 0304 	and.w	r3, r3, #4
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d004      	beq.n	801ab6a <draw_border+0xa8>
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801ab66:	b29b      	uxth	r3, r3
 801ab68:	e009      	b.n	801ab7e <draw_border+0xbc>
 801ab6a:	68bb      	ldr	r3, [r7, #8]
 801ab6c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801ab70:	b299      	uxth	r1, r3
 801ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab74:	b29b      	uxth	r3, r3
 801ab76:	440b      	add	r3, r1
 801ab78:	b29b      	uxth	r3, r3
 801ab7a:	425b      	negs	r3, r3
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	4413      	add	r3, r2
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	b21b      	sxth	r3, r3
 801ab84:	82bb      	strh	r3, [r7, #20]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 801ab86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801ab8a:	b29a      	uxth	r2, r3
 801ab8c:	68bb      	ldr	r3, [r7, #8]
 801ab8e:	7f5b      	ldrb	r3, [r3, #29]
 801ab90:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801ab94:	b2db      	uxtb	r3, r3
 801ab96:	f003 0308 	and.w	r3, r3, #8
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d004      	beq.n	801aba8 <draw_border+0xe6>
 801ab9e:	68bb      	ldr	r3, [r7, #8]
 801aba0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801aba4:	b29b      	uxth	r3, r3
 801aba6:	e009      	b.n	801abbc <draw_border+0xfa>
 801aba8:	68bb      	ldr	r3, [r7, #8]
 801abaa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801abae:	b299      	uxth	r1, r3
 801abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abb2:	b29b      	uxth	r3, r3
 801abb4:	440b      	add	r3, r1
 801abb6:	b29b      	uxth	r3, r3
 801abb8:	425b      	negs	r3, r3
 801abba:	b29b      	uxth	r3, r3
 801abbc:	1ad3      	subs	r3, r2, r3
 801abbe:	b29b      	uxth	r3, r3
 801abc0:	b21b      	sxth	r3, r3
 801abc2:	833b      	strh	r3, [r7, #24]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 801abc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801abc8:	b29a      	uxth	r2, r3
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	7f5b      	ldrb	r3, [r3, #29]
 801abce:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801abd2:	b2db      	uxtb	r3, r3
 801abd4:	f003 0302 	and.w	r3, r3, #2
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d004      	beq.n	801abe6 <draw_border+0x124>
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801abe2:	b29b      	uxth	r3, r3
 801abe4:	e009      	b.n	801abfa <draw_border+0x138>
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801abec:	b299      	uxth	r1, r3
 801abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abf0:	b29b      	uxth	r3, r3
 801abf2:	440b      	add	r3, r1
 801abf4:	b29b      	uxth	r3, r3
 801abf6:	425b      	negs	r3, r3
 801abf8:	b29b      	uxth	r3, r3
 801abfa:	4413      	add	r3, r2
 801abfc:	b29b      	uxth	r3, r3
 801abfe:	b21b      	sxth	r3, r3
 801ac00:	82fb      	strh	r3, [r7, #22]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 801ac02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801ac06:	b29a      	uxth	r2, r3
 801ac08:	68bb      	ldr	r3, [r7, #8]
 801ac0a:	7f5b      	ldrb	r3, [r3, #29]
 801ac0c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801ac10:	b2db      	uxtb	r3, r3
 801ac12:	f003 0301 	and.w	r3, r3, #1
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d004      	beq.n	801ac24 <draw_border+0x162>
 801ac1a:	68bb      	ldr	r3, [r7, #8]
 801ac1c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801ac20:	b29b      	uxth	r3, r3
 801ac22:	e009      	b.n	801ac38 <draw_border+0x176>
 801ac24:	68bb      	ldr	r3, [r7, #8]
 801ac26:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801ac2a:	b299      	uxth	r1, r3
 801ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac2e:	b29b      	uxth	r3, r3
 801ac30:	440b      	add	r3, r1
 801ac32:	b29b      	uxth	r3, r3
 801ac34:	425b      	negs	r3, r3
 801ac36:	b29b      	uxth	r3, r3
 801ac38:	1ad3      	subs	r3, r2, r3
 801ac3a:	b29b      	uxth	r3, r3
 801ac3c:	b21b      	sxth	r3, r3
 801ac3e:	837b      	strh	r3, [r7, #26]

    lv_coord_t rin = rout - dsc->border_width;
 801ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac42:	b29a      	uxth	r2, r3
 801ac44:	68bb      	ldr	r3, [r7, #8]
 801ac46:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	1ad3      	subs	r3, r2, r3
 801ac4e:	b29b      	uxth	r3, r3
 801ac50:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(rin < 0) rin = 0;
 801ac52:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	da01      	bge.n	801ac5e <draw_border+0x19c>
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	857b      	strh	r3, [r7, #42]	; 0x2a

    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 801ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac60:	b218      	sxth	r0, r3
 801ac62:	68bb      	ldr	r3, [r7, #8]
 801ac64:	7f1b      	ldrb	r3, [r3, #28]
 801ac66:	68ba      	ldr	r2, [r7, #8]
 801ac68:	7892      	ldrb	r2, [r2, #2]
 801ac6a:	f107 0114 	add.w	r1, r7, #20
 801ac6e:	9203      	str	r2, [sp, #12]
 801ac70:	9302      	str	r3, [sp, #8]
 801ac72:	68bb      	ldr	r3, [r7, #8]
 801ac74:	7e1b      	ldrb	r3, [r3, #24]
 801ac76:	f88d 3004 	strb.w	r3, [sp, #4]
 801ac7a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801ac7e:	9300      	str	r3, [sp, #0]
 801ac80:	4603      	mov	r3, r0
 801ac82:	460a      	mov	r2, r1
 801ac84:	6879      	ldr	r1, [r7, #4]
 801ac86:	68f8      	ldr	r0, [r7, #12]
 801ac88:	f001 fe78 	bl	801c97c <draw_border_generic>
 801ac8c:	e006      	b.n	801ac9c <draw_border+0x1da>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801ac8e:	bf00      	nop
 801ac90:	e004      	b.n	801ac9c <draw_border+0x1da>
    if(dsc->border_width == 0) return;
 801ac92:	bf00      	nop
 801ac94:	e002      	b.n	801ac9c <draw_border+0x1da>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801ac96:	bf00      	nop
 801ac98:	e000      	b.n	801ac9c <draw_border+0x1da>
    if(dsc->border_post) return;
 801ac9a:	bf00      	nop

}
 801ac9c:	3730      	adds	r7, #48	; 0x30
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	bd80      	pop	{r7, pc}

0801aca2 <draw_shadow>:

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc,
                                              const lv_area_t * coords)
{
 801aca2:	b590      	push	{r4, r7, lr}
 801aca4:	b0b3      	sub	sp, #204	; 0xcc
 801aca6:	af00      	add	r7, sp, #0
 801aca8:	60f8      	str	r0, [r7, #12]
 801acaa:	60b9      	str	r1, [r7, #8]
 801acac:	607a      	str	r2, [r7, #4]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 801acae:	68bb      	ldr	r3, [r7, #8]
 801acb0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	f001 82ab 	beq.w	801c210 <draw_shadow+0x156e>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801acba:	68bb      	ldr	r3, [r7, #8]
 801acbc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801acc0:	2b02      	cmp	r3, #2
 801acc2:	f241 82a7 	bls.w	801c214 <draw_shadow+0x1572>

    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801acc6:	68bb      	ldr	r3, [r7, #8]
 801acc8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801accc:	2b01      	cmp	r3, #1
 801acce:	d10f      	bne.n	801acf0 <draw_shadow+0x4e>
 801acd0:	68bb      	ldr	r3, [r7, #8]
 801acd2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	dc0a      	bgt.n	801acf0 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801acda:	68bb      	ldr	r3, [r7, #8]
 801acdc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d105      	bne.n	801acf0 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801acea:	2b00      	cmp	r3, #0
 801acec:	f001 8294 	beq.w	801c218 <draw_shadow+0x1576>
        return;
    }

    /*Calculate the rectangle which is blurred to get the shadow in `shadow_area`*/
    lv_area_t core_area;
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801acf6:	b29a      	uxth	r2, r3
 801acf8:	68bb      	ldr	r3, [r7, #8]
 801acfa:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801acfe:	b29b      	uxth	r3, r3
 801ad00:	4413      	add	r3, r2
 801ad02:	b29a      	uxth	r2, r3
 801ad04:	68bb      	ldr	r3, [r7, #8]
 801ad06:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801ad0a:	b29b      	uxth	r3, r3
 801ad0c:	1ad3      	subs	r3, r2, r3
 801ad0e:	b29b      	uxth	r3, r3
 801ad10:	b21b      	sxth	r3, r3
 801ad12:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad1c:	b29a      	uxth	r2, r3
 801ad1e:	68bb      	ldr	r3, [r7, #8]
 801ad20:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	4413      	add	r3, r2
 801ad28:	b29a      	uxth	r2, r3
 801ad2a:	68bb      	ldr	r3, [r7, #8]
 801ad2c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801ad30:	b29b      	uxth	r3, r3
 801ad32:	4413      	add	r3, r2
 801ad34:	b29b      	uxth	r3, r3
 801ad36:	b21b      	sxth	r3, r3
 801ad38:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ad42:	b29a      	uxth	r2, r3
 801ad44:	68bb      	ldr	r3, [r7, #8]
 801ad46:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	4413      	add	r3, r2
 801ad4e:	b29a      	uxth	r2, r3
 801ad50:	68bb      	ldr	r3, [r7, #8]
 801ad52:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801ad56:	b29b      	uxth	r3, r3
 801ad58:	1ad3      	subs	r3, r2, r3
 801ad5a:	b29b      	uxth	r3, r3
 801ad5c:	b21b      	sxth	r3, r3
 801ad5e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ad68:	b29a      	uxth	r2, r3
 801ad6a:	68bb      	ldr	r3, [r7, #8]
 801ad6c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801ad70:	b29b      	uxth	r3, r3
 801ad72:	4413      	add	r3, r2
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	68bb      	ldr	r3, [r7, #8]
 801ad78:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801ad7c:	b29b      	uxth	r3, r3
 801ad7e:	4413      	add	r3, r2
 801ad80:	b29b      	uxth	r3, r3
 801ad82:	b21b      	sxth	r3, r3
 801ad84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    /*Calculate the bounding box of the shadow*/
    lv_area_t shadow_area;
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 801ad88:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801ad8c:	b29a      	uxth	r2, r3
 801ad8e:	68bb      	ldr	r3, [r7, #8]
 801ad90:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	da00      	bge.n	801ad9a <draw_shadow+0xf8>
 801ad98:	3301      	adds	r3, #1
 801ad9a:	105b      	asrs	r3, r3, #1
 801ad9c:	b21b      	sxth	r3, r3
 801ad9e:	b29b      	uxth	r3, r3
 801ada0:	1ad3      	subs	r3, r2, r3
 801ada2:	b29b      	uxth	r3, r3
 801ada4:	3b01      	subs	r3, #1
 801ada6:	b29b      	uxth	r3, r3
 801ada8:	b21b      	sxth	r3, r3
 801adaa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 801adae:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801adb2:	b29a      	uxth	r2, r3
 801adb4:	68bb      	ldr	r3, [r7, #8]
 801adb6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801adba:	2b00      	cmp	r3, #0
 801adbc:	da00      	bge.n	801adc0 <draw_shadow+0x11e>
 801adbe:	3301      	adds	r3, #1
 801adc0:	105b      	asrs	r3, r3, #1
 801adc2:	b21b      	sxth	r3, r3
 801adc4:	b29b      	uxth	r3, r3
 801adc6:	4413      	add	r3, r2
 801adc8:	b29b      	uxth	r3, r3
 801adca:	3301      	adds	r3, #1
 801adcc:	b29b      	uxth	r3, r3
 801adce:	b21b      	sxth	r3, r3
 801add0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 801add4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801add8:	b29a      	uxth	r2, r3
 801adda:	68bb      	ldr	r3, [r7, #8]
 801addc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	da00      	bge.n	801ade6 <draw_shadow+0x144>
 801ade4:	3301      	adds	r3, #1
 801ade6:	105b      	asrs	r3, r3, #1
 801ade8:	b21b      	sxth	r3, r3
 801adea:	b29b      	uxth	r3, r3
 801adec:	1ad3      	subs	r3, r2, r3
 801adee:	b29b      	uxth	r3, r3
 801adf0:	3b01      	subs	r3, #1
 801adf2:	b29b      	uxth	r3, r3
 801adf4:	b21b      	sxth	r3, r3
 801adf6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 801adfa:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801adfe:	b29a      	uxth	r2, r3
 801ae00:	68bb      	ldr	r3, [r7, #8]
 801ae02:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	da00      	bge.n	801ae0c <draw_shadow+0x16a>
 801ae0a:	3301      	adds	r3, #1
 801ae0c:	105b      	asrs	r3, r3, #1
 801ae0e:	b21b      	sxth	r3, r3
 801ae10:	b29b      	uxth	r3, r3
 801ae12:	4413      	add	r3, r2
 801ae14:	b29b      	uxth	r3, r3
 801ae16:	3301      	adds	r3, #1
 801ae18:	b29b      	uxth	r3, r3
 801ae1a:	b21b      	sxth	r3, r3
 801ae1c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_opa_t opa = dsc->shadow_opa;
 801ae20:	68bb      	ldr	r3, [r7, #8]
 801ae22:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ae26:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801ae2a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801ae2e:	2bfd      	cmp	r3, #253	; 0xfd
 801ae30:	d902      	bls.n	801ae38 <draw_shadow+0x196>
 801ae32:	23ff      	movs	r3, #255	; 0xff
 801ae34:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `shadow_area`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	689a      	ldr	r2, [r3, #8]
 801ae3c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801ae40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ae44:	4618      	mov	r0, r3
 801ae46:	f004 f9cb 	bl	801f1e0 <_lv_area_intersect>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	f083 0301 	eor.w	r3, r3, #1
 801ae50:	b2db      	uxtb	r3, r3
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	f041 81e2 	bne.w	801c21c <draw_shadow+0x157a>

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_area;
    lv_area_copy(&bg_area, coords);
 801ae58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ae5c:	6879      	ldr	r1, [r7, #4]
 801ae5e:	4618      	mov	r0, r3
 801ae60:	f7ff f8f6 	bl	801a050 <lv_area_copy>
    lv_area_increase(&bg_area, -1, -1);
 801ae64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ae68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ae6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ae70:	4618      	mov	r0, r3
 801ae72:	f004 f949 	bl	801f108 <lv_area_increase>

    /*Get the clamped radius*/
    int32_t r_bg = dsc->radius;
 801ae76:	68bb      	ldr	r3, [r7, #8]
 801ae78:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    lv_coord_t short_side = LV_MIN(lv_area_get_width(&bg_area), lv_area_get_height(&bg_area));
 801ae80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ae84:	4618      	mov	r0, r3
 801ae86:	f7ff f902 	bl	801a08e <lv_area_get_width>
 801ae8a:	4603      	mov	r3, r0
 801ae8c:	461c      	mov	r4, r3
 801ae8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ae92:	4618      	mov	r0, r3
 801ae94:	f7ff f912 	bl	801a0bc <lv_area_get_height>
 801ae98:	4603      	mov	r3, r0
 801ae9a:	429c      	cmp	r4, r3
 801ae9c:	da06      	bge.n	801aeac <draw_shadow+0x20a>
 801ae9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801aea2:	4618      	mov	r0, r3
 801aea4:	f7ff f8f3 	bl	801a08e <lv_area_get_width>
 801aea8:	4603      	mov	r3, r0
 801aeaa:	e005      	b.n	801aeb8 <draw_shadow+0x216>
 801aeac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	f7ff f903 	bl	801a0bc <lv_area_get_height>
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 801aebc:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801aec0:	105b      	asrs	r3, r3, #1
 801aec2:	b21b      	sxth	r3, r3
 801aec4:	461a      	mov	r2, r3
 801aec6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801aeca:	4293      	cmp	r3, r2
 801aecc:	dd05      	ble.n	801aeda <draw_shadow+0x238>
 801aece:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801aed2:	105b      	asrs	r3, r3, #1
 801aed4:	b21b      	sxth	r3, r3
 801aed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /*Get the clamped radius*/
    int32_t r_sh = dsc->radius;
 801aeda:	68bb      	ldr	r3, [r7, #8]
 801aedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    short_side = LV_MIN(lv_area_get_width(&core_area), lv_area_get_height(&core_area));
 801aee4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801aee8:	4618      	mov	r0, r3
 801aeea:	f7ff f8d0 	bl	801a08e <lv_area_get_width>
 801aeee:	4603      	mov	r3, r0
 801aef0:	461c      	mov	r4, r3
 801aef2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801aef6:	4618      	mov	r0, r3
 801aef8:	f7ff f8e0 	bl	801a0bc <lv_area_get_height>
 801aefc:	4603      	mov	r3, r0
 801aefe:	429c      	cmp	r4, r3
 801af00:	da06      	bge.n	801af10 <draw_shadow+0x26e>
 801af02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801af06:	4618      	mov	r0, r3
 801af08:	f7ff f8c1 	bl	801a08e <lv_area_get_width>
 801af0c:	4603      	mov	r3, r0
 801af0e:	e005      	b.n	801af1c <draw_shadow+0x27a>
 801af10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801af14:	4618      	mov	r0, r3
 801af16:	f7ff f8d1 	bl	801a0bc <lv_area_get_height>
 801af1a:	4603      	mov	r3, r0
 801af1c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 801af20:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801af24:	105b      	asrs	r3, r3, #1
 801af26:	b21b      	sxth	r3, r3
 801af28:	461a      	mov	r2, r3
 801af2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801af2e:	4293      	cmp	r3, r2
 801af30:	dd05      	ble.n	801af3e <draw_shadow+0x29c>
 801af32:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801af36:	105b      	asrs	r3, r3, #1
 801af38:	b21b      	sxth	r3, r3
 801af3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


    /*Get how many pixels are affected by the blur on the corners*/
    int32_t corner_size = dsc->shadow_width  + r_sh;
 801af3e:	68bb      	ldr	r3, [r7, #8]
 801af40:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801af44:	461a      	mov	r2, r3
 801af46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801af4a:	4413      	add	r3, r2
 801af4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 801af50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801af54:	fb03 f303 	mul.w	r3, r3, r3
 801af58:	005b      	lsls	r3, r3, #1
 801af5a:	4618      	mov	r0, r3
 801af5c:	f005 fcea 	bl	8020934 <lv_mem_buf_get>
 801af60:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 801af64:	68bb      	ldr	r3, [r7, #8]
 801af66:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 801af6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801af6e:	b21b      	sxth	r3, r3
 801af70:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801af74:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801af78:	f001 f954 	bl	801c224 <shadow_draw_corner_buf>
#endif

    /*Skip a lot of masking if the background will cover the shadow that would be masked out*/
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 801af7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801af80:	4618      	mov	r0, r3
 801af82:	f7f5 fb41 	bl	8010608 <lv_draw_mask_is_any>
 801af86:	4603      	mov	r3, r0
 801af88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool simple = true;
 801af8c:	2301      	movs	r3, #1
 801af8e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 801af92:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801af96:	2b00      	cmp	r3, #0
 801af98:	d107      	bne.n	801afaa <draw_shadow+0x308>
 801af9a:	68bb      	ldr	r3, [r7, #8]
 801af9c:	78db      	ldrb	r3, [r3, #3]
 801af9e:	2bff      	cmp	r3, #255	; 0xff
 801afa0:	d103      	bne.n	801afaa <draw_shadow+0x308>
 801afa2:	68bb      	ldr	r3, [r7, #8]
 801afa4:	789b      	ldrb	r3, [r3, #2]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d002      	beq.n	801afb0 <draw_shadow+0x30e>
 801afaa:	2300      	movs	r3, #0
 801afac:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

    /*Create a radius mask to clip remove shadow on the bg area*/

    lv_draw_mask_radius_param_t mask_rout_param;
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801afb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801afb4:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    if(!simple) {
 801afb8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801afbc:	f083 0301 	eor.w	r3, r3, #1
 801afc0:	b2db      	uxtb	r3, r3
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d012      	beq.n	801afec <draw_shadow+0x34a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 801afc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801afca:	b21a      	sxth	r2, r3
 801afcc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801afd0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801afd4:	2301      	movs	r3, #1
 801afd6:	f7f5 fdb3 	bl	8010b40 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801afda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801afde:	2100      	movs	r1, #0
 801afe0:	4618      	mov	r0, r3
 801afe2:	f7f5 f9e1 	bl	80103a8 <lv_draw_mask_add>
 801afe6:	4603      	mov	r3, r0
 801afe8:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    }
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 801afec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801aff0:	4618      	mov	r0, r3
 801aff2:	f7ff f84c 	bl	801a08e <lv_area_get_width>
 801aff6:	4603      	mov	r3, r0
 801aff8:	4618      	mov	r0, r3
 801affa:	f005 fc9b 	bl	8020934 <lv_mem_buf_get>
 801affe:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_opa_t * sh_buf_tmp;
    lv_coord_t y;
    bool simple_sub;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801b002:	f107 0314 	add.w	r3, r7, #20
 801b006:	211c      	movs	r1, #28
 801b008:	4618      	mov	r0, r3
 801b00a:	f006 f83d 	bl	8021088 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801b00e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b012:	617b      	str	r3, [r7, #20]
    blend_dsc.mask_area = &blend_area;
 801b014:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b018:	62bb      	str	r3, [r7, #40]	; 0x28
    blend_dsc.mask_buf = mask_buf;
 801b01a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b01e:	623b      	str	r3, [r7, #32]
    blend_dsc.color = dsc->shadow_color;
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b026:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->shadow_opa;
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801b02e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    blend_dsc.blend_mode = dsc->blend_mode;
 801b032:	68bb      	ldr	r3, [r7, #8]
 801b034:	789b      	ldrb	r3, [r3, #2]
 801b036:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 801b03a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b03e:	b29c      	uxth	r4, r3
 801b040:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b044:	4618      	mov	r0, r3
 801b046:	f7ff f822 	bl	801a08e <lv_area_get_width>
 801b04a:	4603      	mov	r3, r0
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	da00      	bge.n	801b052 <draw_shadow+0x3b0>
 801b050:	3301      	adds	r3, #1
 801b052:	105b      	asrs	r3, r3, #1
 801b054:	b21b      	sxth	r3, r3
 801b056:	b29b      	uxth	r3, r3
 801b058:	4423      	add	r3, r4
 801b05a:	b29b      	uxth	r3, r3
 801b05c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 801b060:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b064:	b29c      	uxth	r4, r3
 801b066:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b06a:	4618      	mov	r0, r3
 801b06c:	f7ff f826 	bl	801a0bc <lv_area_get_height>
 801b070:	4603      	mov	r3, r0
 801b072:	2b00      	cmp	r3, #0
 801b074:	da00      	bge.n	801b078 <draw_shadow+0x3d6>
 801b076:	3301      	adds	r3, #1
 801b078:	105b      	asrs	r3, r3, #1
 801b07a:	b21b      	sxth	r3, r3
 801b07c:	b29b      	uxth	r3, r3
 801b07e:	4423      	add	r3, r4
 801b080:	b29b      	uxth	r3, r3
 801b082:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    /*Draw the corners if they are on the current clip area and not fully covered by the bg*/

    /*Top right corner*/
    blend_area.x2 = shadow_area.x2;
 801b086:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b08a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801b08c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b090:	b29a      	uxth	r2, r3
 801b092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b096:	b29b      	uxth	r3, r3
 801b098:	1ad3      	subs	r3, r2, r3
 801b09a:	b29b      	uxth	r3, r3
 801b09c:	3301      	adds	r3, #1
 801b09e:	b29b      	uxth	r3, r3
 801b0a0:	b21b      	sxth	r3, r3
 801b0a2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y1;
 801b0a4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b0a8:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801b0aa:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b0ae:	b29a      	uxth	r2, r3
 801b0b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b0b4:	b29b      	uxth	r3, r3
 801b0b6:	4413      	add	r3, r2
 801b0b8:	b29b      	uxth	r3, r3
 801b0ba:	3b01      	subs	r3, #1
 801b0bc:	b29b      	uxth	r3, r3
 801b0be:	b21b      	sxth	r3, r3
 801b0c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other top corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801b0c2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801b0c6:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801b0ca:	4293      	cmp	r3, r2
 801b0cc:	bfb8      	it	lt
 801b0ce:	4613      	movlt	r3, r2
 801b0d0:	b21b      	sxth	r3, r3
 801b0d2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801b0d4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b0d8:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b0dc:	4293      	cmp	r3, r2
 801b0de:	bfa8      	it	ge
 801b0e0:	4613      	movge	r3, r2
 801b0e2:	b21b      	sxth	r3, r3
 801b0e4:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	689a      	ldr	r2, [r3, #8]
 801b0ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b0ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f004 f874 	bl	801f1e0 <_lv_area_intersect>
 801b0f8:	4603      	mov	r3, r0
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	f000 80b3 	beq.w	801b266 <draw_shadow+0x5c4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b104:	b21a      	sxth	r2, r3
 801b106:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b10a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b10e:	4618      	mov	r0, r3
 801b110:	f004 fa4a 	bl	801f5a8 <_lv_area_is_in>
 801b114:	4603      	mov	r3, r0
 801b116:	f083 0301 	eor.w	r3, r3, #1
 801b11a:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	f000 80a2 	beq.w	801b266 <draw_shadow+0x5c4>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b126:	4618      	mov	r0, r3
 801b128:	f7fe ffb1 	bl	801a08e <lv_area_get_width>
 801b12c:	4603      	mov	r3, r0
 801b12e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        sh_buf_tmp = sh_buf;
 801b132:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 801b13a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b13e:	461a      	mov	r2, r3
 801b140:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b144:	1ad3      	subs	r3, r2, r3
 801b146:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b14a:	fb02 f303 	mul.w	r3, r2, r3
 801b14e:	461a      	mov	r2, r3
 801b150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b154:	4413      	add	r3, r2
 801b156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801b15a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b15e:	461a      	mov	r2, r3
 801b160:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b164:	4619      	mov	r1, r3
 801b166:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b16a:	1acb      	subs	r3, r1, r3
 801b16c:	3301      	adds	r3, #1
 801b16e:	1ad3      	subs	r3, r2, r3
 801b170:	461a      	mov	r2, r3
 801b172:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b176:	4413      	add	r3, r2
 801b178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b17c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b180:	2b00      	cmp	r3, #0
 801b182:	d010      	beq.n	801b1a6 <draw_shadow+0x504>
 801b184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b188:	b21a      	sxth	r2, r3
 801b18a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b18e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b192:	4618      	mov	r0, r3
 801b194:	f004 faa6 	bl	801f6e4 <_lv_area_is_out>
 801b198:	4603      	mov	r3, r0
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d003      	beq.n	801b1a6 <draw_shadow+0x504>
 801b19e:	2301      	movs	r3, #1
 801b1a0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b1a4:	e003      	b.n	801b1ae <draw_shadow+0x50c>
        else simple_sub = simple;
 801b1a6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b1aa:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        if(w > 0) {
 801b1ae:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	dd57      	ble.n	801b266 <draw_shadow+0x5c4>
            blend_dsc.mask_buf = mask_buf;
 801b1b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b1ba:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801b1bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b1c0:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b1c2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b1c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801b1c8:	2302      	movs	r3, #2
 801b1ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b1ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b1d0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b1d4:	e041      	b.n	801b25a <draw_shadow+0x5b8>
                blend_area.y1 = y;
 801b1d6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b1da:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b1dc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b1e0:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801b1e2:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b1e6:	f083 0301 	eor.w	r3, r3, #1
 801b1ea:	b2db      	uxtb	r3, r3
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d01d      	beq.n	801b22c <draw_shadow+0x58a>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801b1f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b1f4:	461a      	mov	r2, r3
 801b1f6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801b1fa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b1fe:	f005 fc9d 	bl	8020b3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b202:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b206:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801b20a:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b20e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b212:	f7f5 f8fb 	bl	801040c <lv_draw_mask_apply>
 801b216:	4603      	mov	r3, r0
 801b218:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b21c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b220:	2b01      	cmp	r3, #1
 801b222:	d106      	bne.n	801b232 <draw_shadow+0x590>
 801b224:	2302      	movs	r3, #2
 801b226:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801b22a:	e002      	b.n	801b232 <draw_shadow+0x590>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801b22c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b230:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b232:	f107 0314 	add.w	r3, r7, #20
 801b236:	4619      	mov	r1, r3
 801b238:	68f8      	ldr	r0, [r7, #12]
 801b23a:	f7fa fcb5 	bl	8015ba8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801b23e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b246:	4413      	add	r3, r2
 801b248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b24c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b250:	b29b      	uxth	r3, r3
 801b252:	3301      	adds	r3, #1
 801b254:	b29b      	uxth	r3, r3
 801b256:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b25a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b25e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b262:	429a      	cmp	r2, r3
 801b264:	ddb7      	ble.n	801b1d6 <draw_shadow+0x534>
        }
    }

    /*Bottom right corner.
     *Almost the same as top right just read the lines of `sh_buf` from then end*/
    blend_area.x2 = shadow_area.x2;
 801b266:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b26a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801b26c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b270:	b29a      	uxth	r2, r3
 801b272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b276:	b29b      	uxth	r3, r3
 801b278:	1ad3      	subs	r3, r2, r3
 801b27a:	b29b      	uxth	r3, r3
 801b27c:	3301      	adds	r3, #1
 801b27e:	b29b      	uxth	r3, r3
 801b280:	b21b      	sxth	r3, r3
 801b282:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801b284:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b288:	b29a      	uxth	r2, r3
 801b28a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b28e:	b29b      	uxth	r3, r3
 801b290:	1ad3      	subs	r3, r2, r3
 801b292:	b29b      	uxth	r3, r3
 801b294:	3301      	adds	r3, #1
 801b296:	b29b      	uxth	r3, r3
 801b298:	b21b      	sxth	r3, r3
 801b29a:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801b29c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b2a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801b2a2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801b2a6:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801b2aa:	4293      	cmp	r3, r2
 801b2ac:	bfb8      	it	lt
 801b2ae:	4613      	movlt	r3, r2
 801b2b0:	b21b      	sxth	r3, r3
 801b2b2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801b2b4:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801b2b8:	3301      	adds	r3, #1
 801b2ba:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801b2be:	4293      	cmp	r3, r2
 801b2c0:	bfb8      	it	lt
 801b2c2:	4613      	movlt	r3, r2
 801b2c4:	b21b      	sxth	r3, r3
 801b2c6:	877b      	strh	r3, [r7, #58]	; 0x3a

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	689a      	ldr	r2, [r3, #8]
 801b2cc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b2d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	f003 ff83 	bl	801f1e0 <_lv_area_intersect>
 801b2da:	4603      	mov	r3, r0
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	f000 80b3 	beq.w	801b448 <draw_shadow+0x7a6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b2e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b2e6:	b21a      	sxth	r2, r3
 801b2e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b2ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f004 f959 	bl	801f5a8 <_lv_area_is_in>
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	f083 0301 	eor.w	r3, r3, #1
 801b2fc:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	f000 80a2 	beq.w	801b448 <draw_shadow+0x7a6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b308:	4618      	mov	r0, r3
 801b30a:	f7fe fec0 	bl	801a08e <lv_area_get_width>
 801b30e:	4603      	mov	r3, r0
 801b310:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        sh_buf_tmp = sh_buf;
 801b314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801b31c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b320:	461a      	mov	r2, r3
 801b322:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b326:	1ad3      	subs	r3, r2, r3
 801b328:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b32c:	fb02 f303 	mul.w	r3, r2, r3
 801b330:	461a      	mov	r2, r3
 801b332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b336:	4413      	add	r3, r2
 801b338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801b33c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b340:	461a      	mov	r2, r3
 801b342:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b346:	4619      	mov	r1, r3
 801b348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b34c:	1acb      	subs	r3, r1, r3
 801b34e:	3301      	adds	r3, #1
 801b350:	1ad3      	subs	r3, r2, r3
 801b352:	461a      	mov	r2, r3
 801b354:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b358:	4413      	add	r3, r2
 801b35a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b35e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b362:	2b00      	cmp	r3, #0
 801b364:	d010      	beq.n	801b388 <draw_shadow+0x6e6>
 801b366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b36a:	b21a      	sxth	r2, r3
 801b36c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b374:	4618      	mov	r0, r3
 801b376:	f004 f9b5 	bl	801f6e4 <_lv_area_is_out>
 801b37a:	4603      	mov	r3, r0
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d003      	beq.n	801b388 <draw_shadow+0x6e6>
 801b380:	2301      	movs	r3, #1
 801b382:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b386:	e003      	b.n	801b390 <draw_shadow+0x6ee>
        else simple_sub = simple;
 801b388:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b38c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801b390:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801b394:	2b00      	cmp	r3, #0
 801b396:	dd57      	ble.n	801b448 <draw_shadow+0x7a6>
            blend_dsc.mask_buf = mask_buf;
 801b398:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b39c:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801b39e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b3a2:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b3a4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b3a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801b3aa:	2302      	movs	r3, #2
 801b3ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801b3b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b3b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b3b6:	e041      	b.n	801b43c <draw_shadow+0x79a>
                blend_area.y1 = y;
 801b3b8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b3bc:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b3be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b3c2:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801b3c4:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b3c8:	f083 0301 	eor.w	r3, r3, #1
 801b3cc:	b2db      	uxtb	r3, r3
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d01d      	beq.n	801b40e <draw_shadow+0x76c>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801b3d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b3d6:	461a      	mov	r2, r3
 801b3d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801b3dc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b3e0:	f005 fbac 	bl	8020b3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b3e4:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b3e8:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801b3ec:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b3f0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b3f4:	f7f5 f80a 	bl	801040c <lv_draw_mask_apply>
 801b3f8:	4603      	mov	r3, r0
 801b3fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b3fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b402:	2b01      	cmp	r3, #1
 801b404:	d106      	bne.n	801b414 <draw_shadow+0x772>
 801b406:	2302      	movs	r3, #2
 801b408:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801b40c:	e002      	b.n	801b414 <draw_shadow+0x772>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801b40e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b412:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b414:	f107 0314 	add.w	r3, r7, #20
 801b418:	4619      	mov	r1, r3
 801b41a:	68f8      	ldr	r0, [r7, #12]
 801b41c:	f7fa fbc4 	bl	8015ba8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801b420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b424:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b428:	4413      	add	r3, r2
 801b42a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801b42e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b432:	b29b      	uxth	r3, r3
 801b434:	3b01      	subs	r3, #1
 801b436:	b29b      	uxth	r3, r3
 801b438:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b43c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b440:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b444:	429a      	cmp	r2, r3
 801b446:	dab7      	bge.n	801b3b8 <draw_shadow+0x716>
            }
        }
    }

    /*Top side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801b448:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b44c:	b29a      	uxth	r2, r3
 801b44e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b452:	b29b      	uxth	r3, r3
 801b454:	4413      	add	r3, r2
 801b456:	b29b      	uxth	r3, r3
 801b458:	b21b      	sxth	r3, r3
 801b45a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801b45c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b460:	b29a      	uxth	r2, r3
 801b462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b466:	b29b      	uxth	r3, r3
 801b468:	1ad3      	subs	r3, r2, r3
 801b46a:	b29b      	uxth	r3, r3
 801b46c:	b21b      	sxth	r3, r3
 801b46e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801b470:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b474:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801b476:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b47a:	b29a      	uxth	r2, r3
 801b47c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b480:	b29b      	uxth	r3, r3
 801b482:	4413      	add	r3, r2
 801b484:	b29b      	uxth	r3, r3
 801b486:	3b01      	subs	r3, #1
 801b488:	b29b      	uxth	r3, r3
 801b48a:	b21b      	sxth	r3, r3
 801b48c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801b48e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b492:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b496:	4293      	cmp	r3, r2
 801b498:	bfa8      	it	ge
 801b49a:	4613      	movge	r3, r2
 801b49c:	b21b      	sxth	r3, r3
 801b49e:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	689a      	ldr	r2, [r3, #8]
 801b4a4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b4a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	f003 fe97 	bl	801f1e0 <_lv_area_intersect>
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	f000 80c2 	beq.w	801b63e <draw_shadow+0x99c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b4ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b4be:	b21a      	sxth	r2, r3
 801b4c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b4c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	f004 f86d 	bl	801f5a8 <_lv_area_is_in>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	f083 0301 	eor.w	r3, r3, #1
 801b4d4:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	f000 80b1 	beq.w	801b63e <draw_shadow+0x99c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b4dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f7fe fdd4 	bl	801a08e <lv_area_get_width>
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        sh_buf_tmp = sh_buf;
 801b4ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801b4f4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b4f8:	461a      	mov	r2, r3
 801b4fa:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801b4fe:	1ad3      	subs	r3, r2, r3
 801b500:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b504:	fb02 f303 	mul.w	r3, r2, r3
 801b508:	461a      	mov	r2, r3
 801b50a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b50e:	4413      	add	r3, r2
 801b510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b514:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d010      	beq.n	801b53e <draw_shadow+0x89c>
 801b51c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b520:	b21a      	sxth	r2, r3
 801b522:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b52a:	4618      	mov	r0, r3
 801b52c:	f004 f8da 	bl	801f6e4 <_lv_area_is_out>
 801b530:	4603      	mov	r3, r0
 801b532:	2b00      	cmp	r3, #0
 801b534:	d003      	beq.n	801b53e <draw_shadow+0x89c>
 801b536:	2301      	movs	r3, #1
 801b538:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b53c:	e003      	b.n	801b546 <draw_shadow+0x8a4>
        else simple_sub = simple;
 801b53e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b542:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801b546:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	dd77      	ble.n	801b63e <draw_shadow+0x99c>
            if(!simple_sub) {
 801b54e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b552:	f083 0301 	eor.w	r3, r3, #1
 801b556:	b2db      	uxtb	r3, r3
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d003      	beq.n	801b564 <draw_shadow+0x8c2>
                blend_dsc.mask_buf = mask_buf;
 801b55c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b560:	623b      	str	r3, [r7, #32]
 801b562:	e001      	b.n	801b568 <draw_shadow+0x8c6>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801b564:	2300      	movs	r3, #0
 801b566:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801b568:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b56c:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b56e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b572:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b574:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b576:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b57a:	e05a      	b.n	801b632 <draw_shadow+0x990>
                blend_area.y1 = y;
 801b57c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b580:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b582:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b586:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801b588:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b58c:	f083 0301 	eor.w	r3, r3, #1
 801b590:	b2db      	uxtb	r3, r3
 801b592:	2b00      	cmp	r3, #0
 801b594:	d024      	beq.n	801b5e0 <draw_shadow+0x93e>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801b596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b59a:	781b      	ldrb	r3, [r3, #0]
 801b59c:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801b5a0:	4619      	mov	r1, r3
 801b5a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b5a6:	f005 fce1 	bl	8020f6c <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b5aa:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b5ae:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801b5b2:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b5b6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b5ba:	f7f4 ff27 	bl	801040c <lv_draw_mask_apply>
 801b5be:	4603      	mov	r3, r0
 801b5c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b5c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b5c8:	2b01      	cmp	r3, #1
 801b5ca:	d102      	bne.n	801b5d2 <draw_shadow+0x930>
 801b5cc:	2302      	movs	r3, #2
 801b5ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b5d2:	f107 0314 	add.w	r3, r7, #20
 801b5d6:	4619      	mov	r1, r3
 801b5d8:	68f8      	ldr	r0, [r7, #12]
 801b5da:	f7fa fae5 	bl	8015ba8 <lv_draw_sw_blend>
 801b5de:	e01a      	b.n	801b616 <draw_shadow+0x974>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801b5e0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801b5e4:	2bff      	cmp	r3, #255	; 0xff
 801b5e6:	d103      	bne.n	801b5f0 <draw_shadow+0x94e>
 801b5e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b5ec:	781b      	ldrb	r3, [r3, #0]
 801b5ee:	e00a      	b.n	801b606 <draw_shadow+0x964>
 801b5f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b5f4:	781b      	ldrb	r3, [r3, #0]
 801b5f6:	461a      	mov	r2, r3
 801b5f8:	68bb      	ldr	r3, [r7, #8]
 801b5fa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801b5fe:	fb02 f303 	mul.w	r3, r2, r3
 801b602:	121b      	asrs	r3, r3, #8
 801b604:	b2db      	uxtb	r3, r3
 801b606:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b60a:	f107 0314 	add.w	r3, r7, #20
 801b60e:	4619      	mov	r1, r3
 801b610:	68f8      	ldr	r0, [r7, #12]
 801b612:	f7fa fac9 	bl	8015ba8 <lv_draw_sw_blend>
                }
                sh_buf_tmp += corner_size;
 801b616:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b61a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b61e:	4413      	add	r3, r2
 801b620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b624:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b628:	b29b      	uxth	r3, r3
 801b62a:	3301      	adds	r3, #1
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b632:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b636:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b63a:	429a      	cmp	r2, r3
 801b63c:	dd9e      	ble.n	801b57c <draw_shadow+0x8da>
            }
        }
    }
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801b63e:	68bb      	ldr	r3, [r7, #8]
 801b640:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801b644:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Bottom side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801b648:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801b64c:	b29a      	uxth	r2, r3
 801b64e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b652:	b29b      	uxth	r3, r3
 801b654:	4413      	add	r3, r2
 801b656:	b29b      	uxth	r3, r3
 801b658:	b21b      	sxth	r3, r3
 801b65a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801b65c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b660:	b29a      	uxth	r2, r3
 801b662:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b666:	b29b      	uxth	r3, r3
 801b668:	1ad3      	subs	r3, r2, r3
 801b66a:	b29b      	uxth	r3, r3
 801b66c:	b21b      	sxth	r3, r3
 801b66e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801b670:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b674:	b29a      	uxth	r2, r3
 801b676:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b67a:	b29b      	uxth	r3, r3
 801b67c:	1ad3      	subs	r3, r2, r3
 801b67e:	b29b      	uxth	r3, r3
 801b680:	3301      	adds	r3, #1
 801b682:	b29b      	uxth	r3, r3
 801b684:	b21b      	sxth	r3, r3
 801b686:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801b688:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b68c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801b68e:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801b692:	3301      	adds	r3, #1
 801b694:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801b698:	4293      	cmp	r3, r2
 801b69a:	bfb8      	it	lt
 801b69c:	4613      	movlt	r3, r2
 801b69e:	b21b      	sxth	r3, r3
 801b6a0:	877b      	strh	r3, [r7, #58]	; 0x3a


    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	689a      	ldr	r2, [r3, #8]
 801b6a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b6aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	f003 fd96 	bl	801f1e0 <_lv_area_intersect>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	f000 80dc 	beq.w	801b874 <draw_shadow+0xbd2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b6bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b6c0:	b21a      	sxth	r2, r3
 801b6c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b6c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f003 ff6c 	bl	801f5a8 <_lv_area_is_in>
 801b6d0:	4603      	mov	r3, r0
 801b6d2:	f083 0301 	eor.w	r3, r3, #1
 801b6d6:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	f000 80cb 	beq.w	801b874 <draw_shadow+0xbd2>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b6de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7fe fcd3 	bl	801a08e <lv_area_get_width>
 801b6e8:	4603      	mov	r3, r0
 801b6ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        sh_buf_tmp = sh_buf;
 801b6ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b6f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801b6f6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b6fa:	461a      	mov	r2, r3
 801b6fc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b700:	1ad3      	subs	r3, r2, r3
 801b702:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b706:	fb02 f303 	mul.w	r3, r2, r3
 801b70a:	461a      	mov	r2, r3
 801b70c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b710:	4413      	add	r3, r2
 801b712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        if(w > 0) {
 801b716:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	f340 80aa 	ble.w	801b874 <draw_shadow+0xbd2>
            /*Do not mask if out of the bg*/
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b720:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b724:	2b00      	cmp	r3, #0
 801b726:	d010      	beq.n	801b74a <draw_shadow+0xaa8>
 801b728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b72c:	b21a      	sxth	r2, r3
 801b72e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b736:	4618      	mov	r0, r3
 801b738:	f003 ffd4 	bl	801f6e4 <_lv_area_is_out>
 801b73c:	4603      	mov	r3, r0
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d003      	beq.n	801b74a <draw_shadow+0xaa8>
 801b742:	2301      	movs	r3, #1
 801b744:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b748:	e003      	b.n	801b752 <draw_shadow+0xab0>
            else simple_sub = simple;
 801b74a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b74e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

            if(!simple_sub) {
 801b752:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b756:	f083 0301 	eor.w	r3, r3, #1
 801b75a:	b2db      	uxtb	r3, r3
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d003      	beq.n	801b768 <draw_shadow+0xac6>
                blend_dsc.mask_buf = mask_buf;
 801b760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b764:	623b      	str	r3, [r7, #32]
 801b766:	e001      	b.n	801b76c <draw_shadow+0xaca>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801b768:	2300      	movs	r3, #0
 801b76a:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801b76c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b770:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b772:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b776:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801b778:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b77a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b77e:	e073      	b.n	801b868 <draw_shadow+0xbc6>
                blend_area.y1 = y;
 801b780:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b784:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801b786:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b78a:	87fb      	strh	r3, [r7, #62]	; 0x3e

                /*Do not mask if out of the bg*/
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b78c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b790:	2b00      	cmp	r3, #0
 801b792:	d010      	beq.n	801b7b6 <draw_shadow+0xb14>
 801b794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b798:	b21a      	sxth	r2, r3
 801b79a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b79e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	f003 ff9e 	bl	801f6e4 <_lv_area_is_out>
 801b7a8:	4603      	mov	r3, r0
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d003      	beq.n	801b7b6 <draw_shadow+0xb14>
 801b7ae:	2301      	movs	r3, #1
 801b7b0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b7b4:	e003      	b.n	801b7be <draw_shadow+0xb1c>
                else simple_sub = simple;
 801b7b6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b7ba:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

                if(!simple_sub) {
 801b7be:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b7c2:	f083 0301 	eor.w	r3, r3, #1
 801b7c6:	b2db      	uxtb	r3, r3
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d024      	beq.n	801b816 <draw_shadow+0xb74>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801b7cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b7d0:	781b      	ldrb	r3, [r3, #0]
 801b7d2:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801b7d6:	4619      	mov	r1, r3
 801b7d8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b7dc:	f005 fbc6 	bl	8020f6c <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801b7e0:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801b7e4:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801b7e8:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b7ec:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b7f0:	f7f4 fe0c 	bl	801040c <lv_draw_mask_apply>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b7fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b7fe:	2b01      	cmp	r3, #1
 801b800:	d102      	bne.n	801b808 <draw_shadow+0xb66>
 801b802:	2302      	movs	r3, #2
 801b804:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b808:	f107 0314 	add.w	r3, r7, #20
 801b80c:	4619      	mov	r1, r3
 801b80e:	68f8      	ldr	r0, [r7, #12]
 801b810:	f7fa f9ca 	bl	8015ba8 <lv_draw_sw_blend>
 801b814:	e01a      	b.n	801b84c <draw_shadow+0xbaa>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801b816:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801b81a:	2bff      	cmp	r3, #255	; 0xff
 801b81c:	d103      	bne.n	801b826 <draw_shadow+0xb84>
 801b81e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b822:	781b      	ldrb	r3, [r3, #0]
 801b824:	e00a      	b.n	801b83c <draw_shadow+0xb9a>
 801b826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	461a      	mov	r2, r3
 801b82e:	68bb      	ldr	r3, [r7, #8]
 801b830:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801b834:	fb02 f303 	mul.w	r3, r2, r3
 801b838:	121b      	asrs	r3, r3, #8
 801b83a:	b2db      	uxtb	r3, r3
 801b83c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b840:	f107 0314 	add.w	r3, r7, #20
 801b844:	4619      	mov	r1, r3
 801b846:	68f8      	ldr	r0, [r7, #12]
 801b848:	f7fa f9ae 	bl	8015ba8 <lv_draw_sw_blend>

                }
                sh_buf_tmp += corner_size;
 801b84c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b850:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b854:	4413      	add	r3, r2
 801b856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801b85a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801b85e:	b29b      	uxth	r3, r3
 801b860:	3b01      	subs	r3, #1
 801b862:	b29b      	uxth	r3, r3
 801b864:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b868:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b86c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801b870:	429a      	cmp	r2, r3
 801b872:	da85      	bge.n	801b780 <draw_shadow+0xade>
            }
        }
    }

    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801b874:	68bb      	ldr	r3, [r7, #8]
 801b876:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801b87a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Right side*/
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801b87e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b882:	b29a      	uxth	r2, r3
 801b884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b888:	b29b      	uxth	r3, r3
 801b88a:	1ad3      	subs	r3, r2, r3
 801b88c:	b29b      	uxth	r3, r3
 801b88e:	3301      	adds	r3, #1
 801b890:	b29b      	uxth	r3, r3
 801b892:	b21b      	sxth	r3, r3
 801b894:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2;
 801b896:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b89a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801b89c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801b8a0:	b29a      	uxth	r2, r3
 801b8a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b8a6:	b29b      	uxth	r3, r3
 801b8a8:	4413      	add	r3, r2
 801b8aa:	b29b      	uxth	r3, r3
 801b8ac:	b21b      	sxth	r3, r3
 801b8ae:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801b8b0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801b8b4:	b29a      	uxth	r2, r3
 801b8b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b8ba:	b29b      	uxth	r3, r3
 801b8bc:	1ad3      	subs	r3, r2, r3
 801b8be:	b29b      	uxth	r3, r3
 801b8c0:	b21b      	sxth	r3, r3
 801b8c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801b8c4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801b8c8:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b8cc:	429a      	cmp	r2, r3
 801b8ce:	db02      	blt.n	801b8d6 <draw_shadow+0xc34>
 801b8d0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801b8d4:	e004      	b.n	801b8e0 <draw_shadow+0xc3e>
 801b8d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801b8da:	3301      	adds	r3, #1
 801b8dc:	b29b      	uxth	r3, r3
 801b8de:	b21b      	sxth	r3, r3
 801b8e0:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801b8e2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801b8e6:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801b8ea:	4293      	cmp	r3, r2
 801b8ec:	bfb8      	it	lt
 801b8ee:	4613      	movlt	r3, r2
 801b8f0:	b21b      	sxth	r3, r3
 801b8f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801b8f4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801b8f8:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801b8fc:	4293      	cmp	r3, r2
 801b8fe:	bfb8      	it	lt
 801b900:	4613      	movlt	r3, r2
 801b902:	b21b      	sxth	r3, r3
 801b904:	873b      	strh	r3, [r7, #56]	; 0x38

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	689a      	ldr	r2, [r3, #8]
 801b90a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b90e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b912:	4618      	mov	r0, r3
 801b914:	f003 fc64 	bl	801f1e0 <_lv_area_intersect>
 801b918:	4603      	mov	r3, r0
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	f000 80ac 	beq.w	801ba78 <draw_shadow+0xdd6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801b920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b924:	b21a      	sxth	r2, r3
 801b926:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b92a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b92e:	4618      	mov	r0, r3
 801b930:	f003 fe3a 	bl	801f5a8 <_lv_area_is_in>
 801b934:	4603      	mov	r3, r0
 801b936:	f083 0301 	eor.w	r3, r3, #1
 801b93a:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	f000 809b 	beq.w	801ba78 <draw_shadow+0xdd6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801b942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b946:	4618      	mov	r0, r3
 801b948:	f7fe fba1 	bl	801a08e <lv_area_get_width>
 801b94c:	4603      	mov	r3, r0
 801b94e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        sh_buf_tmp = sh_buf;
 801b952:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801b95a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b95e:	3b01      	subs	r3, #1
 801b960:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b964:	fb02 f303 	mul.w	r3, r2, r3
 801b968:	461a      	mov	r2, r3
 801b96a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b96e:	4413      	add	r3, r2
 801b970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801b974:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b978:	461a      	mov	r2, r3
 801b97a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801b97e:	4619      	mov	r1, r3
 801b980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b984:	1acb      	subs	r3, r1, r3
 801b986:	3301      	adds	r3, #1
 801b988:	1ad3      	subs	r3, r2, r3
 801b98a:	461a      	mov	r2, r3
 801b98c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b990:	4413      	add	r3, r2
 801b992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801b996:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d010      	beq.n	801b9c0 <draw_shadow+0xd1e>
 801b99e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b9a2:	b21a      	sxth	r2, r3
 801b9a4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b9a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	f003 fe99 	bl	801f6e4 <_lv_area_is_out>
 801b9b2:	4603      	mov	r3, r0
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d003      	beq.n	801b9c0 <draw_shadow+0xd1e>
 801b9b8:	2301      	movs	r3, #1
 801b9ba:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801b9be:	e003      	b.n	801b9c8 <draw_shadow+0xd26>
        else simple_sub = simple;
 801b9c0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801b9c4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801b9c8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d002      	beq.n	801b9d6 <draw_shadow+0xd34>
 801b9d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801b9d4:	e001      	b.n	801b9da <draw_shadow+0xd38>
 801b9d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b9da:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801b9dc:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	dd49      	ble.n	801ba78 <draw_shadow+0xdd6>
            blend_area.x1 = clip_area_sub.x1;
 801b9e4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801b9e8:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801b9ea:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b9ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801b9f0:	2302      	movs	r3, #2
 801b9f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801b9f6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b9f8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b9fc:	e036      	b.n	801ba6c <draw_shadow+0xdca>
                blend_area.y1 = y;
 801b9fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ba02:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801ba04:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ba08:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801ba0a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ba0e:	f083 0301 	eor.w	r3, r3, #1
 801ba12:	b2db      	uxtb	r3, r3
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d01c      	beq.n	801ba52 <draw_shadow+0xdb0>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801ba18:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801ba1c:	461a      	mov	r2, r3
 801ba1e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801ba22:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ba26:	f005 f889 	bl	8020b3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ba2a:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ba2e:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801ba32:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ba36:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ba3a:	f7f4 fce7 	bl	801040c <lv_draw_mask_apply>
 801ba3e:	4603      	mov	r3, r0
 801ba40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ba44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ba48:	2b01      	cmp	r3, #1
 801ba4a:	d102      	bne.n	801ba52 <draw_shadow+0xdb0>
 801ba4c:	2302      	movs	r3, #2
 801ba4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ba52:	f107 0314 	add.w	r3, r7, #20
 801ba56:	4619      	mov	r1, r3
 801ba58:	68f8      	ldr	r0, [r7, #12]
 801ba5a:	f7fa f8a5 	bl	8015ba8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801ba5e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801ba62:	b29b      	uxth	r3, r3
 801ba64:	3301      	adds	r3, #1
 801ba66:	b29b      	uxth	r3, r3
 801ba68:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ba6c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801ba70:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ba74:	429a      	cmp	r2, r3
 801ba76:	ddc2      	ble.n	801b9fe <draw_shadow+0xd5c>
            }
        }
    }

    /*Mirror the shadow corner buffer horizontally*/
    sh_buf_tmp = sh_buf ;
 801ba78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ba7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801ba80:	2300      	movs	r3, #0
 801ba82:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ba86:	e047      	b.n	801bb18 <draw_shadow+0xe76>
        int32_t x;
        lv_opa_t * start = sh_buf_tmp;
 801ba88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ba8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 801ba90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ba94:	3b01      	subs	r3, #1
 801ba96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801ba9a:	4413      	add	r3, r2
 801ba9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801baa0:	2300      	movs	r3, #0
 801baa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801baa6:	e01e      	b.n	801bae6 <draw_shadow+0xe44>
            lv_opa_t tmp = *start;
 801baa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801baac:	781b      	ldrb	r3, [r3, #0]
 801baae:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
            *start = *end;
 801bab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bab6:	781a      	ldrb	r2, [r3, #0]
 801bab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801babc:	701a      	strb	r2, [r3, #0]
            *end = tmp;
 801babe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bac2:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 801bac6:	701a      	strb	r2, [r3, #0]

            start++;
 801bac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801bacc:	3301      	adds	r3, #1
 801bace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            end--;
 801bad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bad6:	3b01      	subs	r3, #1
 801bad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801badc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bae0:	3301      	adds	r3, #1
 801bae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801bae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801baea:	2b00      	cmp	r3, #0
 801baec:	da00      	bge.n	801baf0 <draw_shadow+0xe4e>
 801baee:	3301      	adds	r3, #1
 801baf0:	105b      	asrs	r3, r3, #1
 801baf2:	461a      	mov	r2, r3
 801baf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801baf8:	4293      	cmp	r3, r2
 801bafa:	dbd5      	blt.n	801baa8 <draw_shadow+0xe06>
        }
        sh_buf_tmp += corner_size;
 801bafc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bb00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801bb04:	4413      	add	r3, r2
 801bb06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801bb0a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801bb0e:	b29b      	uxth	r3, r3
 801bb10:	3301      	adds	r3, #1
 801bb12:	b29b      	uxth	r3, r3
 801bb14:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801bb18:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801bb1c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801bb20:	429a      	cmp	r2, r3
 801bb22:	dcb1      	bgt.n	801ba88 <draw_shadow+0xde6>
    }

    /*Left side*/
    blend_area.x1 = shadow_area.x1;
 801bb24:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801bb28:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801bb2a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801bb2e:	b29a      	uxth	r2, r3
 801bb30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bb34:	b29b      	uxth	r3, r3
 801bb36:	4413      	add	r3, r2
 801bb38:	b29b      	uxth	r3, r3
 801bb3a:	3b01      	subs	r3, #1
 801bb3c:	b29b      	uxth	r3, r3
 801bb3e:	b21b      	sxth	r3, r3
 801bb40:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801bb42:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801bb46:	b29a      	uxth	r2, r3
 801bb48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bb4c:	b29b      	uxth	r3, r3
 801bb4e:	4413      	add	r3, r2
 801bb50:	b29b      	uxth	r3, r3
 801bb52:	b21b      	sxth	r3, r3
 801bb54:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801bb56:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801bb5a:	b29a      	uxth	r2, r3
 801bb5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bb60:	b29b      	uxth	r3, r3
 801bb62:	1ad3      	subs	r3, r2, r3
 801bb64:	b29b      	uxth	r3, r3
 801bb66:	b21b      	sxth	r3, r3
 801bb68:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801bb6a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801bb6e:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801bb72:	429a      	cmp	r2, r3
 801bb74:	db02      	blt.n	801bb7c <draw_shadow+0xeda>
 801bb76:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801bb7a:	e004      	b.n	801bb86 <draw_shadow+0xee4>
 801bb7c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801bb80:	3301      	adds	r3, #1
 801bb82:	b29b      	uxth	r3, r3
 801bb84:	b21b      	sxth	r3, r3
 801bb86:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801bb88:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801bb8c:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801bb90:	4293      	cmp	r3, r2
 801bb92:	bfb8      	it	lt
 801bb94:	4613      	movlt	r3, r2
 801bb96:	b21b      	sxth	r3, r3
 801bb98:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801bb9a:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801bb9e:	3b01      	subs	r3, #1
 801bba0:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801bba4:	4293      	cmp	r3, r2
 801bba6:	bfa8      	it	ge
 801bba8:	4613      	movge	r3, r2
 801bbaa:	b21b      	sxth	r3, r3
 801bbac:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801bbae:	68fb      	ldr	r3, [r7, #12]
 801bbb0:	689a      	ldr	r2, [r3, #8]
 801bbb2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801bbb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bbba:	4618      	mov	r0, r3
 801bbbc:	f003 fb10 	bl	801f1e0 <_lv_area_intersect>
 801bbc0:	4603      	mov	r3, r0
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	f000 80a7 	beq.w	801bd16 <draw_shadow+0x1074>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801bbc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bbcc:	b21a      	sxth	r2, r3
 801bbce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801bbd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	f003 fce6 	bl	801f5a8 <_lv_area_is_in>
 801bbdc:	4603      	mov	r3, r0
 801bbde:	f083 0301 	eor.w	r3, r3, #1
 801bbe2:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	f000 8096 	beq.w	801bd16 <draw_shadow+0x1074>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801bbea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bbee:	4618      	mov	r0, r3
 801bbf0:	f7fe fa4d 	bl	801a08e <lv_area_get_width>
 801bbf4:	4603      	mov	r3, r0
 801bbf6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        sh_buf_tmp = sh_buf;
 801bbfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bbfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801bc02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bc06:	3b01      	subs	r3, #1
 801bc08:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801bc0c:	fb02 f303 	mul.w	r3, r2, r3
 801bc10:	461a      	mov	r2, r3
 801bc12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bc16:	4413      	add	r3, r2
 801bc18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801bc1c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801bc20:	461a      	mov	r2, r3
 801bc22:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801bc26:	1ad3      	subs	r3, r2, r3
 801bc28:	461a      	mov	r2, r3
 801bc2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bc2e:	4413      	add	r3, r2
 801bc30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801bc34:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d010      	beq.n	801bc5e <draw_shadow+0xfbc>
 801bc3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bc40:	b21a      	sxth	r2, r3
 801bc42:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801bc46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	f003 fd4a 	bl	801f6e4 <_lv_area_is_out>
 801bc50:	4603      	mov	r3, r0
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d003      	beq.n	801bc5e <draw_shadow+0xfbc>
 801bc56:	2301      	movs	r3, #1
 801bc58:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801bc5c:	e003      	b.n	801bc66 <draw_shadow+0xfc4>
        else simple_sub = simple;
 801bc5e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801bc62:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801bc66:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d002      	beq.n	801bc74 <draw_shadow+0xfd2>
 801bc6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bc72:	e001      	b.n	801bc78 <draw_shadow+0xfd6>
 801bc74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bc78:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801bc7a:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	dd49      	ble.n	801bd16 <draw_shadow+0x1074>
            blend_area.x1 = clip_area_sub.x1;
 801bc82:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801bc86:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801bc88:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801bc8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801bc8e:	2302      	movs	r3, #2
 801bc90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801bc94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801bc96:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801bc9a:	e036      	b.n	801bd0a <draw_shadow+0x1068>
                blend_area.y1 = y;
 801bc9c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801bca0:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801bca2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801bca6:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801bca8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801bcac:	f083 0301 	eor.w	r3, r3, #1
 801bcb0:	b2db      	uxtb	r3, r3
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d01c      	beq.n	801bcf0 <draw_shadow+0x104e>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801bcb6:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801bcba:	461a      	mov	r2, r3
 801bcbc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801bcc0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bcc4:	f004 ff3a 	bl	8020b3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801bcc8:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801bccc:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801bcd0:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801bcd4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bcd8:	f7f4 fb98 	bl	801040c <lv_draw_mask_apply>
 801bcdc:	4603      	mov	r3, r0
 801bcde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801bce2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801bce6:	2b01      	cmp	r3, #1
 801bce8:	d102      	bne.n	801bcf0 <draw_shadow+0x104e>
 801bcea:	2302      	movs	r3, #2
 801bcec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bcf0:	f107 0314 	add.w	r3, r7, #20
 801bcf4:	4619      	mov	r1, r3
 801bcf6:	68f8      	ldr	r0, [r7, #12]
 801bcf8:	f7f9 ff56 	bl	8015ba8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801bcfc:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801bd00:	b29b      	uxth	r3, r3
 801bd02:	3301      	adds	r3, #1
 801bd04:	b29b      	uxth	r3, r3
 801bd06:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801bd0a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801bd0e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801bd12:	429a      	cmp	r2, r3
 801bd14:	ddc2      	ble.n	801bc9c <draw_shadow+0xffa>
            }
        }
    }

    /*Top left corner*/
    blend_area.x1 = shadow_area.x1;
 801bd16:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801bd1a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801bd1c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801bd20:	b29a      	uxth	r2, r3
 801bd22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bd26:	b29b      	uxth	r3, r3
 801bd28:	4413      	add	r3, r2
 801bd2a:	b29b      	uxth	r3, r3
 801bd2c:	3b01      	subs	r3, #1
 801bd2e:	b29b      	uxth	r3, r3
 801bd30:	b21b      	sxth	r3, r3
 801bd32:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801bd34:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801bd38:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801bd3a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801bd3e:	b29a      	uxth	r2, r3
 801bd40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bd44:	b29b      	uxth	r3, r3
 801bd46:	4413      	add	r3, r2
 801bd48:	b29b      	uxth	r3, r3
 801bd4a:	3b01      	subs	r3, #1
 801bd4c:	b29b      	uxth	r3, r3
 801bd4e:	b21b      	sxth	r3, r3
 801bd50:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801bd52:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801bd56:	3b01      	subs	r3, #1
 801bd58:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801bd5c:	4293      	cmp	r3, r2
 801bd5e:	bfa8      	it	ge
 801bd60:	4613      	movge	r3, r2
 801bd62:	b21b      	sxth	r3, r3
 801bd64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801bd66:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801bd6a:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801bd6e:	4293      	cmp	r3, r2
 801bd70:	bfa8      	it	ge
 801bd72:	4613      	movge	r3, r2
 801bd74:	b21b      	sxth	r3, r3
 801bd76:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	689a      	ldr	r2, [r3, #8]
 801bd7c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801bd80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bd84:	4618      	mov	r0, r3
 801bd86:	f003 fa2b 	bl	801f1e0 <_lv_area_intersect>
 801bd8a:	4603      	mov	r3, r0
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	f000 80ae 	beq.w	801beee <draw_shadow+0x124c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801bd92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bd96:	b21a      	sxth	r2, r3
 801bd98:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801bd9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bda0:	4618      	mov	r0, r3
 801bda2:	f003 fc01 	bl	801f5a8 <_lv_area_is_in>
 801bda6:	4603      	mov	r3, r0
 801bda8:	f083 0301 	eor.w	r3, r3, #1
 801bdac:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	f000 809d 	beq.w	801beee <draw_shadow+0x124c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801bdb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bdb8:	4618      	mov	r0, r3
 801bdba:	f7fe f968 	bl	801a08e <lv_area_get_width>
 801bdbe:	4603      	mov	r3, r0
 801bdc0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        sh_buf_tmp = sh_buf;
 801bdc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bdc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801bdcc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801bdd0:	461a      	mov	r2, r3
 801bdd2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801bdd6:	1ad3      	subs	r3, r2, r3
 801bdd8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801bddc:	fb02 f303 	mul.w	r3, r2, r3
 801bde0:	461a      	mov	r2, r3
 801bde2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bde6:	4413      	add	r3, r2
 801bde8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801bdec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801bdf0:	461a      	mov	r2, r3
 801bdf2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801bdf6:	1ad3      	subs	r3, r2, r3
 801bdf8:	461a      	mov	r2, r3
 801bdfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bdfe:	4413      	add	r3, r2
 801be00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801be04:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d010      	beq.n	801be2e <draw_shadow+0x118c>
 801be0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801be10:	b21a      	sxth	r2, r3
 801be12:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801be16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801be1a:	4618      	mov	r0, r3
 801be1c:	f003 fc62 	bl	801f6e4 <_lv_area_is_out>
 801be20:	4603      	mov	r3, r0
 801be22:	2b00      	cmp	r3, #0
 801be24:	d003      	beq.n	801be2e <draw_shadow+0x118c>
 801be26:	2301      	movs	r3, #1
 801be28:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801be2c:	e003      	b.n	801be36 <draw_shadow+0x1194>
        else simple_sub = simple;
 801be2e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801be32:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801be36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801be3a:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801be3c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801be40:	2b00      	cmp	r3, #0
 801be42:	dd54      	ble.n	801beee <draw_shadow+0x124c>
            blend_area.x1 = clip_area_sub.x1;
 801be44:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801be48:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801be4a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801be4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801be50:	2302      	movs	r3, #2
 801be52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801be56:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801be58:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801be5c:	e041      	b.n	801bee2 <draw_shadow+0x1240>
                blend_area.y1 = y;
 801be5e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801be62:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801be64:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801be68:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801be6a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801be6e:	f083 0301 	eor.w	r3, r3, #1
 801be72:	b2db      	uxtb	r3, r3
 801be74:	2b00      	cmp	r3, #0
 801be76:	d01d      	beq.n	801beb4 <draw_shadow+0x1212>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801be78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801be7c:	461a      	mov	r2, r3
 801be7e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801be82:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801be86:	f004 fe59 	bl	8020b3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801be8a:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801be8e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801be92:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801be96:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801be9a:	f7f4 fab7 	bl	801040c <lv_draw_mask_apply>
 801be9e:	4603      	mov	r3, r0
 801bea0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801bea4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801bea8:	2b01      	cmp	r3, #1
 801beaa:	d106      	bne.n	801beba <draw_shadow+0x1218>
 801beac:	2302      	movs	r3, #2
 801beae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801beb2:	e002      	b.n	801beba <draw_shadow+0x1218>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801beb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801beb8:	623b      	str	r3, [r7, #32]
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801beba:	f107 0314 	add.w	r3, r7, #20
 801bebe:	4619      	mov	r1, r3
 801bec0:	68f8      	ldr	r0, [r7, #12]
 801bec2:	f7f9 fe71 	bl	8015ba8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801bec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801beca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801bece:	4413      	add	r3, r2
 801bed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801bed4:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801bed8:	b29b      	uxth	r3, r3
 801beda:	3301      	adds	r3, #1
 801bedc:	b29b      	uxth	r3, r3
 801bede:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801bee2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801bee6:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801beea:	429a      	cmp	r2, r3
 801beec:	ddb7      	ble.n	801be5e <draw_shadow+0x11bc>
        }
    }

    /*Bottom left corner.
     *Almost the same as bottom right just read the lines of `sh_buf` from then end*/
    blend_area.x1 = shadow_area.x1 ;
 801beee:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801bef2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801bef4:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801bef8:	b29a      	uxth	r2, r3
 801befa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801befe:	b29b      	uxth	r3, r3
 801bf00:	4413      	add	r3, r2
 801bf02:	b29b      	uxth	r3, r3
 801bf04:	3b01      	subs	r3, #1
 801bf06:	b29b      	uxth	r3, r3
 801bf08:	b21b      	sxth	r3, r3
 801bf0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801bf0c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801bf10:	b29a      	uxth	r2, r3
 801bf12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bf16:	b29b      	uxth	r3, r3
 801bf18:	1ad3      	subs	r3, r2, r3
 801bf1a:	b29b      	uxth	r3, r3
 801bf1c:	3301      	adds	r3, #1
 801bf1e:	b29b      	uxth	r3, r3
 801bf20:	b21b      	sxth	r3, r3
 801bf22:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801bf24:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801bf28:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801bf2a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801bf2e:	3301      	adds	r3, #1
 801bf30:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801bf34:	4293      	cmp	r3, r2
 801bf36:	bfb8      	it	lt
 801bf38:	4613      	movlt	r3, r2
 801bf3a:	b21b      	sxth	r3, r3
 801bf3c:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801bf3e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801bf42:	3b01      	subs	r3, #1
 801bf44:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801bf48:	4293      	cmp	r3, r2
 801bf4a:	bfa8      	it	ge
 801bf4c:	4613      	movge	r3, r2
 801bf4e:	b21b      	sxth	r3, r3
 801bf50:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	689a      	ldr	r2, [r3, #8]
 801bf56:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801bf5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bf5e:	4618      	mov	r0, r3
 801bf60:	f003 f93e 	bl	801f1e0 <_lv_area_intersect>
 801bf64:	4603      	mov	r3, r0
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	f000 80ae 	beq.w	801c0c8 <draw_shadow+0x1426>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801bf6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bf70:	b21a      	sxth	r2, r3
 801bf72:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801bf76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	f003 fb14 	bl	801f5a8 <_lv_area_is_in>
 801bf80:	4603      	mov	r3, r0
 801bf82:	f083 0301 	eor.w	r3, r3, #1
 801bf86:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	f000 809d 	beq.w	801c0c8 <draw_shadow+0x1426>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801bf8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bf92:	4618      	mov	r0, r3
 801bf94:	f7fe f87b 	bl	801a08e <lv_area_get_width>
 801bf98:	4603      	mov	r3, r0
 801bf9a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        sh_buf_tmp = sh_buf;
 801bf9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bfa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801bfa6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801bfaa:	461a      	mov	r2, r3
 801bfac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801bfb0:	1ad3      	subs	r3, r2, r3
 801bfb2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801bfb6:	fb02 f303 	mul.w	r3, r2, r3
 801bfba:	461a      	mov	r2, r3
 801bfbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bfc0:	4413      	add	r3, r2
 801bfc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801bfc6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801bfca:	461a      	mov	r2, r3
 801bfcc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801bfd0:	1ad3      	subs	r3, r2, r3
 801bfd2:	461a      	mov	r2, r3
 801bfd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bfd8:	4413      	add	r3, r2
 801bfda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801bfde:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d010      	beq.n	801c008 <draw_shadow+0x1366>
 801bfe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bfea:	b21a      	sxth	r2, r3
 801bfec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801bff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bff4:	4618      	mov	r0, r3
 801bff6:	f003 fb75 	bl	801f6e4 <_lv_area_is_out>
 801bffa:	4603      	mov	r3, r0
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d003      	beq.n	801c008 <draw_shadow+0x1366>
 801c000:	2301      	movs	r3, #1
 801c002:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801c006:	e003      	b.n	801c010 <draw_shadow+0x136e>
        else simple_sub = simple;
 801c008:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c00c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801c010:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c014:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801c016:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	dd54      	ble.n	801c0c8 <draw_shadow+0x1426>
            blend_area.x1 = clip_area_sub.x1;
 801c01e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c022:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801c024:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c028:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801c02a:	2302      	movs	r3, #2
 801c02c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801c030:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c032:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c036:	e041      	b.n	801c0bc <draw_shadow+0x141a>
                blend_area.y1 = y;
 801c038:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c03c:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801c03e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c042:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801c044:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801c048:	f083 0301 	eor.w	r3, r3, #1
 801c04c:	b2db      	uxtb	r3, r3
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d01d      	beq.n	801c08e <draw_shadow+0x13ec>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801c052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c056:	461a      	mov	r2, r3
 801c058:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801c05c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c060:	f004 fd6c 	bl	8020b3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801c064:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801c068:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801c06c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c070:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c074:	f7f4 f9ca 	bl	801040c <lv_draw_mask_apply>
 801c078:	4603      	mov	r3, r0
 801c07a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c07e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c082:	2b01      	cmp	r3, #1
 801c084:	d106      	bne.n	801c094 <draw_shadow+0x13f2>
 801c086:	2302      	movs	r3, #2
 801c088:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801c08c:	e002      	b.n	801c094 <draw_shadow+0x13f2>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801c08e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c092:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c094:	f107 0314 	add.w	r3, r7, #20
 801c098:	4619      	mov	r1, r3
 801c09a:	68f8      	ldr	r0, [r7, #12]
 801c09c:	f7f9 fd84 	bl	8015ba8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801c0a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c0a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c0a8:	4413      	add	r3, r2
 801c0aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801c0ae:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801c0b2:	b29b      	uxth	r3, r3
 801c0b4:	3b01      	subs	r3, #1
 801c0b6:	b29b      	uxth	r3, r3
 801c0b8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c0bc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c0c0:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c0c4:	429a      	cmp	r2, r3
 801c0c6:	dab7      	bge.n	801c038 <draw_shadow+0x1396>
            }
        }
    }

    /*Draw the center rectangle.*/
    blend_area.x1 = shadow_area.x1 + corner_size ;
 801c0c8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801c0cc:	b29a      	uxth	r2, r3
 801c0ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c0d2:	b29b      	uxth	r3, r3
 801c0d4:	4413      	add	r3, r2
 801c0d6:	b29b      	uxth	r3, r3
 801c0d8:	b21b      	sxth	r3, r3
 801c0da:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801c0dc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c0e0:	b29a      	uxth	r2, r3
 801c0e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	1ad3      	subs	r3, r2, r3
 801c0ea:	b29b      	uxth	r3, r3
 801c0ec:	b21b      	sxth	r3, r3
 801c0ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801c0f0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c0f4:	b29a      	uxth	r2, r3
 801c0f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c0fa:	b29b      	uxth	r3, r3
 801c0fc:	4413      	add	r3, r2
 801c0fe:	b29b      	uxth	r3, r3
 801c100:	b21b      	sxth	r3, r3
 801c102:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801c104:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801c108:	b29a      	uxth	r2, r3
 801c10a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c10e:	b29b      	uxth	r3, r3
 801c110:	1ad3      	subs	r3, r2, r3
 801c112:	b29b      	uxth	r3, r3
 801c114:	b21b      	sxth	r3, r3
 801c116:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_dsc.mask_buf = mask_buf;
 801c118:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c11c:	623b      	str	r3, [r7, #32]

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	689a      	ldr	r2, [r3, #8]
 801c122:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c12a:	4618      	mov	r0, r3
 801c12c:	f003 f858 	bl	801f1e0 <_lv_area_intersect>
 801c130:	4603      	mov	r3, r0
 801c132:	2b00      	cmp	r3, #0
 801c134:	d052      	beq.n	801c1dc <draw_shadow+0x153a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801c136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c13a:	b21a      	sxth	r2, r3
 801c13c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c144:	4618      	mov	r0, r3
 801c146:	f003 fa2f 	bl	801f5a8 <_lv_area_is_in>
 801c14a:	4603      	mov	r3, r0
 801c14c:	f083 0301 	eor.w	r3, r3, #1
 801c150:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c152:	2b00      	cmp	r3, #0
 801c154:	d042      	beq.n	801c1dc <draw_shadow+0x153a>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801c156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c15a:	4618      	mov	r0, r3
 801c15c:	f7fd ff97 	bl	801a08e <lv_area_get_width>
 801c160:	4603      	mov	r3, r0
 801c162:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        if(w > 0) {
 801c166:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	dd36      	ble.n	801c1dc <draw_shadow+0x153a>
            blend_area.x1 = clip_area_sub.x1;
 801c16e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c172:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801c174:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c178:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801c17a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801c17c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c180:	e026      	b.n	801c1d0 <draw_shadow+0x152e>
                blend_area.y1 = y;
 801c182:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c186:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801c188:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c18c:	87fb      	strh	r3, [r7, #62]	; 0x3e

                lv_memset_ff(mask_buf, w);
 801c18e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801c192:	4619      	mov	r1, r3
 801c194:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c198:	f004 fff7 	bl	802118a <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801c19c:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801c1a0:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801c1a4:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c1a8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c1ac:	f7f4 f92e 	bl	801040c <lv_draw_mask_apply>
 801c1b0:	4603      	mov	r3, r0
 801c1b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c1b6:	f107 0314 	add.w	r3, r7, #20
 801c1ba:	4619      	mov	r1, r3
 801c1bc:	68f8      	ldr	r0, [r7, #12]
 801c1be:	f7f9 fcf3 	bl	8015ba8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801c1c2:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801c1c6:	b29b      	uxth	r3, r3
 801c1c8:	3301      	adds	r3, #1
 801c1ca:	b29b      	uxth	r3, r3
 801c1cc:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c1d0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c1d4:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c1d8:	429a      	cmp	r2, r3
 801c1da:	ddd2      	ble.n	801c182 <draw_shadow+0x14e0>
            }
        }
    }

    if(!simple) {
 801c1dc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c1e0:	f083 0301 	eor.w	r3, r3, #1
 801c1e4:	b2db      	uxtb	r3, r3
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d009      	beq.n	801c1fe <draw_shadow+0x155c>
        lv_draw_mask_free_param(&mask_rout_param);
 801c1ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c1ee:	4618      	mov	r0, r3
 801c1f0:	f7f4 f9a0 	bl	8010534 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 801c1f4:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	f7f4 f94b 	bl	8010494 <lv_draw_mask_remove_id>
    }
    lv_mem_buf_release(sh_buf);
 801c1fe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801c202:	f004 fc43 	bl	8020a8c <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 801c206:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c20a:	f004 fc3f 	bl	8020a8c <lv_mem_buf_release>
 801c20e:	e006      	b.n	801c21e <draw_shadow+0x157c>
    if(dsc->shadow_width == 0) return;
 801c210:	bf00      	nop
 801c212:	e004      	b.n	801c21e <draw_shadow+0x157c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801c214:	bf00      	nop
 801c216:	e002      	b.n	801c21e <draw_shadow+0x157c>
        return;
 801c218:	bf00      	nop
 801c21a:	e000      	b.n	801c21e <draw_shadow+0x157c>
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801c21c:	bf00      	nop
}
 801c21e:	37cc      	adds	r7, #204	; 0xcc
 801c220:	46bd      	mov	sp, r7
 801c222:	bd90      	pop	{r4, r7, pc}

0801c224 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 801c224:	b590      	push	{r4, r7, lr}
 801c226:	b09d      	sub	sp, #116	; 0x74
 801c228:	af02      	add	r7, sp, #8
 801c22a:	60f8      	str	r0, [r7, #12]
 801c22c:	60b9      	str	r1, [r7, #8]
 801c22e:	4611      	mov	r1, r2
 801c230:	461a      	mov	r2, r3
 801c232:	460b      	mov	r3, r1
 801c234:	80fb      	strh	r3, [r7, #6]
 801c236:	4613      	mov	r3, r2
 801c238:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 801c23a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c23e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 801c240:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801c244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c246:	4413      	add	r3, r2
 801c248:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 801c24a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c24e:	68f9      	ldr	r1, [r7, #12]
 801c250:	4618      	mov	r0, r3
 801c252:	f7fd fefd 	bl	801a050 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 801c256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	da00      	bge.n	801c260 <shadow_draw_corner_buf+0x3c>
 801c25e:	3301      	adds	r3, #1
 801c260:	105b      	asrs	r3, r3, #1
 801c262:	b21b      	sxth	r3, r3
 801c264:	b29a      	uxth	r2, r3
 801c266:	88bb      	ldrh	r3, [r7, #4]
 801c268:	4413      	add	r3, r2
 801c26a:	b29a      	uxth	r2, r3
 801c26c:	88fb      	ldrh	r3, [r7, #6]
 801c26e:	f003 0301 	and.w	r3, r3, #1
 801c272:	2b00      	cmp	r3, #0
 801c274:	bf0c      	ite	eq
 801c276:	2301      	moveq	r3, #1
 801c278:	2300      	movne	r3, #0
 801c27a:	b2db      	uxtb	r3, r3
 801c27c:	b29b      	uxth	r3, r3
 801c27e:	1ad3      	subs	r3, r2, r3
 801c280:	b29b      	uxth	r3, r3
 801c282:	3b01      	subs	r3, #1
 801c284:	b29b      	uxth	r3, r3
 801c286:	b21b      	sxth	r3, r3
 801c288:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y1 = sw / 2 + 1;
 801c28a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	da00      	bge.n	801c294 <shadow_draw_corner_buf+0x70>
 801c292:	3301      	adds	r3, #1
 801c294:	105b      	asrs	r3, r3, #1
 801c296:	b21b      	sxth	r3, r3
 801c298:	b29b      	uxth	r3, r3
 801c29a:	3301      	adds	r3, #1
 801c29c:	b29b      	uxth	r3, r3
 801c29e:	b21b      	sxth	r3, r3
 801c2a0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 801c2a2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c2a6:	b29c      	uxth	r4, r3
 801c2a8:	68f8      	ldr	r0, [r7, #12]
 801c2aa:	f7fd fef0 	bl	801a08e <lv_area_get_width>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	b29b      	uxth	r3, r3
 801c2b2:	1ae3      	subs	r3, r4, r3
 801c2b4:	b29b      	uxth	r3, r3
 801c2b6:	b21b      	sxth	r3, r3
 801c2b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 801c2ba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801c2be:	b29c      	uxth	r4, r3
 801c2c0:	68f8      	ldr	r0, [r7, #12]
 801c2c2:	f7fd fefb 	bl	801a0bc <lv_area_get_height>
 801c2c6:	4603      	mov	r3, r0
 801c2c8:	b29b      	uxth	r3, r3
 801c2ca:	4423      	add	r3, r4
 801c2cc:	b29b      	uxth	r3, r3
 801c2ce:	b21b      	sxth	r3, r3
 801c2d0:	867b      	strh	r3, [r7, #50]	; 0x32

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 801c2d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801c2d6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801c2da:	f107 0014 	add.w	r0, r7, #20
 801c2de:	2300      	movs	r3, #0
 801c2e0:	f7f4 fc2e 	bl	8010b40 <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 801c2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2e6:	2b01      	cmp	r3, #1
 801c2e8:	d102      	bne.n	801c2f0 <shadow_draw_corner_buf+0xcc>
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	80fb      	strh	r3, [r7, #6]
 801c2ee:	e002      	b.n	801c2f6 <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 801c2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2f2:	105b      	asrs	r3, r3, #1
 801c2f4:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 801c2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	f004 fb1b 	bl	8020934 <lv_mem_buf_get>
 801c2fe:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 801c300:	68bb      	ldr	r3, [r7, #8]
 801c302:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801c304:	2300      	movs	r3, #0
 801c306:	667b      	str	r3, [r7, #100]	; 0x64
 801c308:	e062      	b.n	801c3d0 <shadow_draw_corner_buf+0x1ac>
        lv_memset_ff(mask_line, size);
 801c30a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c30c:	4619      	mov	r1, r3
 801c30e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c310:	f004 ff3b 	bl	802118a <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 801c314:	697c      	ldr	r4, [r7, #20]
 801c316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c318:	b21a      	sxth	r2, r3
 801c31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c31c:	b219      	sxth	r1, r3
 801c31e:	f107 0314 	add.w	r3, r7, #20
 801c322:	9300      	str	r3, [sp, #0]
 801c324:	460b      	mov	r3, r1
 801c326:	2100      	movs	r1, #0
 801c328:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c32a:	47a0      	blx	r4
 801c32c:	4603      	mov	r3, r0
 801c32e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801c332:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c336:	2b00      	cmp	r3, #0
 801c338:	d106      	bne.n	801c348 <shadow_draw_corner_buf+0x124>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 801c33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c33c:	005b      	lsls	r3, r3, #1
 801c33e:	4619      	mov	r1, r3
 801c340:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801c342:	f004 fea1 	bl	8021088 <lv_memset_00>
 801c346:	e03b      	b.n	801c3c0 <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 801c348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c34a:	781b      	ldrb	r3, [r3, #0]
 801c34c:	019a      	lsls	r2, r3, #6
 801c34e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c352:	fb92 f3f3 	sdiv	r3, r2, r3
 801c356:	b29a      	uxth	r2, r3
 801c358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c35a:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801c35c:	2301      	movs	r3, #1
 801c35e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c360:	e02a      	b.n	801c3b8 <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 801c362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c366:	4413      	add	r3, r2
 801c368:	781a      	ldrb	r2, [r3, #0]
 801c36a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c36c:	3b01      	subs	r3, #1
 801c36e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c370:	440b      	add	r3, r1
 801c372:	781b      	ldrb	r3, [r3, #0]
 801c374:	429a      	cmp	r2, r3
 801c376:	d10d      	bne.n	801c394 <shadow_draw_corner_buf+0x170>
 801c378:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c37a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c37e:	4413      	add	r3, r2
 801c380:	005b      	lsls	r3, r3, #1
 801c382:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c384:	441a      	add	r2, r3
 801c386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c388:	005b      	lsls	r3, r3, #1
 801c38a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c38c:	440b      	add	r3, r1
 801c38e:	8812      	ldrh	r2, [r2, #0]
 801c390:	801a      	strh	r2, [r3, #0]
 801c392:	e00e      	b.n	801c3b2 <shadow_draw_corner_buf+0x18e>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801c394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c398:	4413      	add	r3, r2
 801c39a:	781b      	ldrb	r3, [r3, #0]
 801c39c:	019a      	lsls	r2, r3, #6
 801c39e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c3a2:	fb92 f1f3 	sdiv	r1, r2, r3
 801c3a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c3a8:	005b      	lsls	r3, r3, #1
 801c3aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c3ac:	4413      	add	r3, r2
 801c3ae:	b28a      	uxth	r2, r1
 801c3b0:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801c3b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c3b4:	3301      	adds	r3, #1
 801c3b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c3b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c3ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3bc:	429a      	cmp	r2, r3
 801c3be:	dbd0      	blt.n	801c362 <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 801c3c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3c2:	005b      	lsls	r3, r3, #1
 801c3c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c3c6:	4413      	add	r3, r2
 801c3c8:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801c3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c3cc:	3301      	adds	r3, #1
 801c3ce:	667b      	str	r3, [r7, #100]	; 0x64
 801c3d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c3d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	db98      	blt.n	801c30a <shadow_draw_corner_buf+0xe6>
    }
    lv_mem_buf_release(mask_line);
 801c3d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c3da:	f004 fb57 	bl	8020a8c <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_param);
 801c3de:	f107 0314 	add.w	r3, r7, #20
 801c3e2:	4618      	mov	r0, r3
 801c3e4:	f7f4 f8a6 	bl	8010534 <lv_draw_mask_free_param>

    if(sw == 1) {
 801c3e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c3ec:	2b01      	cmp	r3, #1
 801c3ee:	d11a      	bne.n	801c426 <shadow_draw_corner_buf+0x202>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	63bb      	str	r3, [r7, #56]	; 0x38
        for(i = 0; i < size * size; i++) {
 801c3f4:	2300      	movs	r3, #0
 801c3f6:	65bb      	str	r3, [r7, #88]	; 0x58
 801c3f8:	e00e      	b.n	801c418 <shadow_draw_corner_buf+0x1f4>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 801c3fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c3fc:	005b      	lsls	r3, r3, #1
 801c3fe:	68ba      	ldr	r2, [r7, #8]
 801c400:	4413      	add	r3, r2
 801c402:	881b      	ldrh	r3, [r3, #0]
 801c404:	099b      	lsrs	r3, r3, #6
 801c406:	b299      	uxth	r1, r3
 801c408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c40a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c40c:	4413      	add	r3, r2
 801c40e:	b2ca      	uxtb	r2, r1
 801c410:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 801c412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c414:	3301      	adds	r3, #1
 801c416:	65bb      	str	r3, [r7, #88]	; 0x58
 801c418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c41a:	fb03 f303 	mul.w	r3, r3, r3
 801c41e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c420:	429a      	cmp	r2, r3
 801c422:	dbea      	blt.n	801c3fa <shadow_draw_corner_buf+0x1d6>
        }
        return;
 801c424:	e070      	b.n	801c508 <shadow_draw_corner_buf+0x2e4>
    }

    shadow_blur_corner(size, sw, sh_buf);
 801c426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c428:	b21b      	sxth	r3, r3
 801c42a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801c42e:	68ba      	ldr	r2, [r7, #8]
 801c430:	4618      	mov	r0, r3
 801c432:	f000 f86c 	bl	801c50e <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 801c436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c438:	b29b      	uxth	r3, r3
 801c43a:	f003 0301 	and.w	r3, r3, #1
 801c43e:	b29a      	uxth	r2, r3
 801c440:	88fb      	ldrh	r3, [r7, #6]
 801c442:	4413      	add	r3, r2
 801c444:	b29b      	uxth	r3, r3
 801c446:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 801c448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c44c:	2b01      	cmp	r3, #1
 801c44e:	dd43      	ble.n	801c4d8 <shadow_draw_corner_buf+0x2b4>
        uint32_t i;
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 801c450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c454:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801c458:	fb92 f3f3 	sdiv	r3, r2, r3
 801c45c:	643b      	str	r3, [r7, #64]	; 0x40
        for(i = 0; i < (uint32_t)size * size; i++) {
 801c45e:	2300      	movs	r3, #0
 801c460:	657b      	str	r3, [r7, #84]	; 0x54
 801c462:	e02a      	b.n	801c4ba <shadow_draw_corner_buf+0x296>
            if(sh_buf[i] == 0) continue;
 801c464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c466:	005b      	lsls	r3, r3, #1
 801c468:	68ba      	ldr	r2, [r7, #8]
 801c46a:	4413      	add	r3, r2
 801c46c:	881b      	ldrh	r3, [r3, #0]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d01f      	beq.n	801c4b2 <shadow_draw_corner_buf+0x28e>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 801c472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c474:	005b      	lsls	r3, r3, #1
 801c476:	68ba      	ldr	r2, [r7, #8]
 801c478:	4413      	add	r3, r2
 801c47a:	881b      	ldrh	r3, [r3, #0]
 801c47c:	2bff      	cmp	r3, #255	; 0xff
 801c47e:	d107      	bne.n	801c490 <shadow_draw_corner_buf+0x26c>
 801c480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c482:	005b      	lsls	r3, r3, #1
 801c484:	68ba      	ldr	r2, [r7, #8]
 801c486:	4413      	add	r3, r2
 801c488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c48a:	b292      	uxth	r2, r2
 801c48c:	801a      	strh	r2, [r3, #0]
 801c48e:	e011      	b.n	801c4b4 <shadow_draw_corner_buf+0x290>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801c490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c492:	005b      	lsls	r3, r3, #1
 801c494:	68ba      	ldr	r2, [r7, #8]
 801c496:	4413      	add	r3, r2
 801c498:	881b      	ldrh	r3, [r3, #0]
 801c49a:	019a      	lsls	r2, r3, #6
 801c49c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c4a0:	fb92 f1f3 	sdiv	r1, r2, r3
 801c4a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4a6:	005b      	lsls	r3, r3, #1
 801c4a8:	68ba      	ldr	r2, [r7, #8]
 801c4aa:	4413      	add	r3, r2
 801c4ac:	b28a      	uxth	r2, r1
 801c4ae:	801a      	strh	r2, [r3, #0]
 801c4b0:	e000      	b.n	801c4b4 <shadow_draw_corner_buf+0x290>
            if(sh_buf[i] == 0) continue;
 801c4b2:	bf00      	nop
        for(i = 0; i < (uint32_t)size * size; i++) {
 801c4b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4b6:	3301      	adds	r3, #1
 801c4b8:	657b      	str	r3, [r7, #84]	; 0x54
 801c4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c4bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c4be:	fb02 f303 	mul.w	r3, r2, r3
 801c4c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c4c4:	429a      	cmp	r2, r3
 801c4c6:	d3cd      	bcc.n	801c464 <shadow_draw_corner_buf+0x240>
        }

        shadow_blur_corner(size, sw, sh_buf);
 801c4c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c4ca:	b21b      	sxth	r3, r3
 801c4cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801c4d0:	68ba      	ldr	r2, [r7, #8]
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f000 f81b 	bl	801c50e <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801c4d8:	68bb      	ldr	r3, [r7, #8]
 801c4da:	63fb      	str	r3, [r7, #60]	; 0x3c
    for(x = 0; x < size * size; x++) {
 801c4dc:	2300      	movs	r3, #0
 801c4de:	653b      	str	r3, [r7, #80]	; 0x50
 801c4e0:	e00c      	b.n	801c4fc <shadow_draw_corner_buf+0x2d8>
        res_buf[x] = sh_buf[x];
 801c4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4e4:	005b      	lsls	r3, r3, #1
 801c4e6:	68ba      	ldr	r2, [r7, #8]
 801c4e8:	4413      	add	r3, r2
 801c4ea:	8819      	ldrh	r1, [r3, #0]
 801c4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c4f0:	4413      	add	r3, r2
 801c4f2:	b2ca      	uxtb	r2, r1
 801c4f4:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 801c4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4f8:	3301      	adds	r3, #1
 801c4fa:	653b      	str	r3, [r7, #80]	; 0x50
 801c4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c4fe:	fb03 f303 	mul.w	r3, r3, r3
 801c502:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c504:	429a      	cmp	r2, r3
 801c506:	dbec      	blt.n	801c4e2 <shadow_draw_corner_buf+0x2be>
    }
#endif

}
 801c508:	376c      	adds	r7, #108	; 0x6c
 801c50a:	46bd      	mov	sp, r7
 801c50c:	bd90      	pop	{r4, r7, pc}

0801c50e <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 801c50e:	b580      	push	{r7, lr}
 801c510:	b092      	sub	sp, #72	; 0x48
 801c512:	af00      	add	r7, sp, #0
 801c514:	4603      	mov	r3, r0
 801c516:	603a      	str	r2, [r7, #0]
 801c518:	80fb      	strh	r3, [r7, #6]
 801c51a:	460b      	mov	r3, r1
 801c51c:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 801c51e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801c522:	105b      	asrs	r3, r3, #1
 801c524:	b21b      	sxth	r3, r3
 801c526:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t s_right = (sw >> 1);
 801c528:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801c52c:	105b      	asrs	r3, r3, #1
 801c52e:	b21b      	sxth	r3, r3
 801c530:	61bb      	str	r3, [r7, #24]
    if((sw & 1) == 0) s_left--;
 801c532:	88bb      	ldrh	r3, [r7, #4]
 801c534:	f003 0301 	and.w	r3, r3, #1
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d102      	bne.n	801c542 <shadow_blur_corner+0x34>
 801c53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c53e:	3b01      	subs	r3, #1
 801c540:	647b      	str	r3, [r7, #68]	; 0x44

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 801c542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c546:	005b      	lsls	r3, r3, #1
 801c548:	4618      	mov	r0, r3
 801c54a:	f004 f9f3 	bl	8020934 <lv_mem_buf_get>
 801c54e:	6178      	str	r0, [r7, #20]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 801c550:	683b      	ldr	r3, [r7, #0]
 801c552:	63bb      	str	r3, [r7, #56]	; 0x38

    for(y = 0; y < size; y++) {
 801c554:	2300      	movs	r3, #0
 801c556:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c558:	e05f      	b.n	801c61a <shadow_blur_corner+0x10c>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 801c55a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801c55e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c562:	4413      	add	r3, r2
 801c564:	005b      	lsls	r3, r3, #1
 801c566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c568:	4413      	add	r3, r2
 801c56a:	881b      	ldrh	r3, [r3, #0]
 801c56c:	461a      	mov	r2, r3
 801c56e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801c572:	fb02 f303 	mul.w	r3, r2, r3
 801c576:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801c578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c57c:	3b01      	subs	r3, #1
 801c57e:	643b      	str	r3, [r7, #64]	; 0x40
 801c580:	e037      	b.n	801c5f2 <shadow_blur_corner+0xe4>
            sh_ups_blur_buf[x] = v;
 801c582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c584:	005b      	lsls	r3, r3, #1
 801c586:	697a      	ldr	r2, [r7, #20]
 801c588:	4413      	add	r3, r2
 801c58a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c58c:	b292      	uxth	r2, r2
 801c58e:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 801c590:	2300      	movs	r3, #0
 801c592:	633b      	str	r3, [r7, #48]	; 0x30
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 801c594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c596:	69bb      	ldr	r3, [r7, #24]
 801c598:	441a      	add	r2, r3
 801c59a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c59e:	429a      	cmp	r2, r3
 801c5a0:	da07      	bge.n	801c5b2 <shadow_blur_corner+0xa4>
 801c5a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c5a4:	69bb      	ldr	r3, [r7, #24]
 801c5a6:	4413      	add	r3, r2
 801c5a8:	005b      	lsls	r3, r3, #1
 801c5aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c5ac:	4413      	add	r3, r2
 801c5ae:	881b      	ldrh	r3, [r3, #0]
 801c5b0:	633b      	str	r3, [r7, #48]	; 0x30
            v -= right_val;
 801c5b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c5b6:	1ad3      	subs	r3, r2, r3
 801c5b8:	637b      	str	r3, [r7, #52]	; 0x34

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 801c5ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c5bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c5be:	1ad3      	subs	r3, r2, r3
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	dc03      	bgt.n	801c5cc <shadow_blur_corner+0xbe>
 801c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5c6:	881b      	ldrh	r3, [r3, #0]
 801c5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c5ca:	e00b      	b.n	801c5e4 <shadow_blur_corner+0xd6>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 801c5cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c5d0:	1ad3      	subs	r3, r2, r3
 801c5d2:	461a      	mov	r2, r3
 801c5d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c5d8:	4413      	add	r3, r2
 801c5da:	005b      	lsls	r3, r3, #1
 801c5dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c5de:	4413      	add	r3, r2
 801c5e0:	881b      	ldrh	r3, [r3, #0]
 801c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            v += left_val;
 801c5e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5e8:	4413      	add	r3, r2
 801c5ea:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801c5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c5ee:	3b01      	subs	r3, #1
 801c5f0:	643b      	str	r3, [r7, #64]	; 0x40
 801c5f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	dac4      	bge.n	801c582 <shadow_blur_corner+0x74>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 801c5f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c5fc:	005b      	lsls	r3, r3, #1
 801c5fe:	461a      	mov	r2, r3
 801c600:	6979      	ldr	r1, [r7, #20]
 801c602:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c604:	f004 fa9a 	bl	8020b3c <lv_memcpy>
        sh_ups_tmp_buf += size;
 801c608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c60c:	005b      	lsls	r3, r3, #1
 801c60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c610:	4413      	add	r3, r2
 801c612:	63bb      	str	r3, [r7, #56]	; 0x38
    for(y = 0; y < size; y++) {
 801c614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c616:	3301      	adds	r3, #1
 801c618:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c61a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c61e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c620:	429a      	cmp	r2, r3
 801c622:	db9a      	blt.n	801c55a <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
 801c624:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801c628:	613b      	str	r3, [r7, #16]
    uint32_t max_v_div = max_v / sw;
 801c62a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801c62e:	693a      	ldr	r2, [r7, #16]
 801c630:	fbb2 f3f3 	udiv	r3, r2, r3
 801c634:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (uint32_t)size * size; i++) {
 801c636:	2300      	movs	r3, #0
 801c638:	62bb      	str	r3, [r7, #40]	; 0x28
 801c63a:	e02c      	b.n	801c696 <shadow_blur_corner+0x188>
        if(sh_ups_buf[i] == 0) continue;
 801c63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c63e:	005b      	lsls	r3, r3, #1
 801c640:	683a      	ldr	r2, [r7, #0]
 801c642:	4413      	add	r3, r2
 801c644:	881b      	ldrh	r3, [r3, #0]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d021      	beq.n	801c68e <shadow_blur_corner+0x180>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 801c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c64c:	005b      	lsls	r3, r3, #1
 801c64e:	683a      	ldr	r2, [r7, #0]
 801c650:	4413      	add	r3, r2
 801c652:	881b      	ldrh	r3, [r3, #0]
 801c654:	461a      	mov	r2, r3
 801c656:	693b      	ldr	r3, [r7, #16]
 801c658:	4293      	cmp	r3, r2
 801c65a:	d107      	bne.n	801c66c <shadow_blur_corner+0x15e>
 801c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c65e:	005b      	lsls	r3, r3, #1
 801c660:	683a      	ldr	r2, [r7, #0]
 801c662:	4413      	add	r3, r2
 801c664:	68fa      	ldr	r2, [r7, #12]
 801c666:	b292      	uxth	r2, r2
 801c668:	801a      	strh	r2, [r3, #0]
 801c66a:	e011      	b.n	801c690 <shadow_blur_corner+0x182>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 801c66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c66e:	005b      	lsls	r3, r3, #1
 801c670:	683a      	ldr	r2, [r7, #0]
 801c672:	4413      	add	r3, r2
 801c674:	881b      	ldrh	r3, [r3, #0]
 801c676:	461a      	mov	r2, r3
 801c678:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801c67c:	fb92 f1f3 	sdiv	r1, r2, r3
 801c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c682:	005b      	lsls	r3, r3, #1
 801c684:	683a      	ldr	r2, [r7, #0]
 801c686:	4413      	add	r3, r2
 801c688:	b28a      	uxth	r2, r1
 801c68a:	801a      	strh	r2, [r3, #0]
 801c68c:	e000      	b.n	801c690 <shadow_blur_corner+0x182>
        if(sh_ups_buf[i] == 0) continue;
 801c68e:	bf00      	nop
    for(i = 0; i < (uint32_t)size * size; i++) {
 801c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c692:	3301      	adds	r3, #1
 801c694:	62bb      	str	r3, [r7, #40]	; 0x28
 801c696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c69a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801c69e:	fb02 f303 	mul.w	r3, r2, r3
 801c6a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c6a4:	429a      	cmp	r2, r3
 801c6a6:	d3c9      	bcc.n	801c63c <shadow_blur_corner+0x12e>
    }

    for(x = 0; x < size; x++) {
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	643b      	str	r3, [r7, #64]	; 0x40
 801c6ac:	e090      	b.n	801c7d0 <shadow_blur_corner+0x2c2>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801c6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c6b0:	005b      	lsls	r3, r3, #1
 801c6b2:	683a      	ldr	r2, [r7, #0]
 801c6b4:	4413      	add	r3, r2
 801c6b6:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t v = sh_ups_tmp_buf[0] * sw;
 801c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6ba:	881b      	ldrh	r3, [r3, #0]
 801c6bc:	461a      	mov	r2, r3
 801c6be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801c6c2:	fb02 f303 	mul.w	r3, r2, r3
 801c6c6:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c6cc:	e05b      	b.n	801c786 <shadow_blur_corner+0x278>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 801c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	db03      	blt.n	801c6dc <shadow_blur_corner+0x1ce>
 801c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6d6:	119b      	asrs	r3, r3, #6
 801c6d8:	b299      	uxth	r1, r3
 801c6da:	e000      	b.n	801c6de <shadow_blur_corner+0x1d0>
 801c6dc:	2100      	movs	r1, #0
 801c6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c6e0:	005b      	lsls	r3, r3, #1
 801c6e2:	697a      	ldr	r2, [r7, #20]
 801c6e4:	4413      	add	r3, r2
 801c6e6:	460a      	mov	r2, r1
 801c6e8:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 801c6ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c6ec:	69bb      	ldr	r3, [r7, #24]
 801c6ee:	1ad3      	subs	r3, r2, r3
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	dc03      	bgt.n	801c6fc <shadow_blur_corner+0x1ee>
 801c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6f6:	881b      	ldrh	r3, [r3, #0]
 801c6f8:	623b      	str	r3, [r7, #32]
 801c6fa:	e00d      	b.n	801c718 <shadow_blur_corner+0x20a>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 801c6fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c6fe:	69bb      	ldr	r3, [r7, #24]
 801c700:	1ad3      	subs	r3, r2, r3
 801c702:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801c706:	fb03 f202 	mul.w	r2, r3, r2
 801c70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c70c:	4413      	add	r3, r2
 801c70e:	005b      	lsls	r3, r3, #1
 801c710:	683a      	ldr	r2, [r7, #0]
 801c712:	4413      	add	r3, r2
 801c714:	881b      	ldrh	r3, [r3, #0]
 801c716:	623b      	str	r3, [r7, #32]
            v -= top_val;
 801c718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c71a:	6a3b      	ldr	r3, [r7, #32]
 801c71c:	1ad3      	subs	r3, r2, r3
 801c71e:	627b      	str	r3, [r7, #36]	; 0x24

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 801c720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c724:	4413      	add	r3, r2
 801c726:	1c5a      	adds	r2, r3, #1
 801c728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c72c:	429a      	cmp	r2, r3
 801c72e:	da0f      	bge.n	801c750 <shadow_blur_corner+0x242>
 801c730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c734:	4413      	add	r3, r2
 801c736:	3301      	adds	r3, #1
 801c738:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801c73c:	fb03 f202 	mul.w	r2, r3, r2
 801c740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c742:	4413      	add	r3, r2
 801c744:	005b      	lsls	r3, r3, #1
 801c746:	683a      	ldr	r2, [r7, #0]
 801c748:	4413      	add	r3, r2
 801c74a:	881b      	ldrh	r3, [r3, #0]
 801c74c:	61fb      	str	r3, [r7, #28]
 801c74e:	e00d      	b.n	801c76c <shadow_blur_corner+0x25e>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 801c750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c754:	3b01      	subs	r3, #1
 801c756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801c75a:	fb03 f202 	mul.w	r2, r3, r2
 801c75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c760:	4413      	add	r3, r2
 801c762:	005b      	lsls	r3, r3, #1
 801c764:	683a      	ldr	r2, [r7, #0]
 801c766:	4413      	add	r3, r2
 801c768:	881b      	ldrh	r3, [r3, #0]
 801c76a:	61fb      	str	r3, [r7, #28]
            v += bottom_val;
 801c76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c76e:	69fb      	ldr	r3, [r7, #28]
 801c770:	4413      	add	r3, r2
 801c772:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801c774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c776:	3301      	adds	r3, #1
 801c778:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c77a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c77e:	005b      	lsls	r3, r3, #1
 801c780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c782:	4413      	add	r3, r2
 801c784:	63bb      	str	r3, [r7, #56]	; 0x38
 801c786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c78a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c78c:	429a      	cmp	r2, r3
 801c78e:	db9e      	blt.n	801c6ce <shadow_blur_corner+0x1c0>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801c790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c792:	005b      	lsls	r3, r3, #1
 801c794:	683a      	ldr	r2, [r7, #0]
 801c796:	4413      	add	r3, r2
 801c798:	63bb      	str	r3, [r7, #56]	; 0x38
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801c79a:	2300      	movs	r3, #0
 801c79c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c79e:	e00f      	b.n	801c7c0 <shadow_blur_corner+0x2b2>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 801c7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7a2:	005b      	lsls	r3, r3, #1
 801c7a4:	697a      	ldr	r2, [r7, #20]
 801c7a6:	4413      	add	r3, r2
 801c7a8:	881a      	ldrh	r2, [r3, #0]
 801c7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7ac:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801c7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c7b0:	3301      	adds	r3, #1
 801c7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c7b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c7b8:	005b      	lsls	r3, r3, #1
 801c7ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c7bc:	4413      	add	r3, r2
 801c7be:	63bb      	str	r3, [r7, #56]	; 0x38
 801c7c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c7c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c7c6:	429a      	cmp	r2, r3
 801c7c8:	dbea      	blt.n	801c7a0 <shadow_blur_corner+0x292>
    for(x = 0; x < size; x++) {
 801c7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c7cc:	3301      	adds	r3, #1
 801c7ce:	643b      	str	r3, [r7, #64]	; 0x40
 801c7d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c7d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c7d6:	429a      	cmp	r2, r3
 801c7d8:	f6ff af69 	blt.w	801c6ae <shadow_blur_corner+0x1a0>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 801c7dc:	6978      	ldr	r0, [r7, #20]
 801c7de:	f004 f955 	bl	8020a8c <lv_mem_buf_release>
}
 801c7e2:	bf00      	nop
 801c7e4:	3748      	adds	r7, #72	; 0x48
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bd80      	pop	{r7, pc}

0801c7ea <draw_outline>:
#endif

static void draw_outline(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801c7ea:	b5b0      	push	{r4, r5, r7, lr}
 801c7ec:	b092      	sub	sp, #72	; 0x48
 801c7ee:	af04      	add	r7, sp, #16
 801c7f0:	60f8      	str	r0, [r7, #12]
 801c7f2:	60b9      	str	r1, [r7, #8]
 801c7f4:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801c7f6:	68bb      	ldr	r3, [r7, #8]
 801c7f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c7fc:	2b02      	cmp	r3, #2
 801c7fe:	f240 80b7 	bls.w	801c970 <draw_outline+0x186>
    if(dsc->outline_width == 0) return;
 801c802:	68bb      	ldr	r3, [r7, #8]
 801c804:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	f000 80b3 	beq.w	801c974 <draw_outline+0x18a>

    lv_opa_t opa = dsc->outline_opa;
 801c80e:	68bb      	ldr	r3, [r7, #8]
 801c810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801c818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801c81c:	2bfd      	cmp	r3, #253	; 0xfd
 801c81e:	d902      	bls.n	801c826 <draw_outline+0x3c>
 801c820:	23ff      	movs	r3, #255	; 0xff
 801c822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801c826:	f107 0318 	add.w	r3, r7, #24
 801c82a:	6879      	ldr	r1, [r7, #4]
 801c82c:	4618      	mov	r0, r3
 801c82e:	f7fd fc0f 	bl	801a050 <lv_area_copy>

    /*Bring the outline closer to make sure there is no color bleeding with pad=0*/
    lv_coord_t pad = dsc->outline_pad - 1;
 801c832:	68bb      	ldr	r3, [r7, #8]
 801c834:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801c838:	b29b      	uxth	r3, r3
 801c83a:	3b01      	subs	r3, #1
 801c83c:	b29b      	uxth	r3, r3
 801c83e:	863b      	strh	r3, [r7, #48]	; 0x30
    area_inner.x1 -= pad;
 801c840:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801c844:	b29a      	uxth	r2, r3
 801c846:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c848:	1ad3      	subs	r3, r2, r3
 801c84a:	b29b      	uxth	r3, r3
 801c84c:	b21b      	sxth	r3, r3
 801c84e:	833b      	strh	r3, [r7, #24]
    area_inner.y1 -= pad;
 801c850:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c854:	b29a      	uxth	r2, r3
 801c856:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c858:	1ad3      	subs	r3, r2, r3
 801c85a:	b29b      	uxth	r3, r3
 801c85c:	b21b      	sxth	r3, r3
 801c85e:	837b      	strh	r3, [r7, #26]
    area_inner.x2 += pad;
 801c860:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801c864:	b29a      	uxth	r2, r3
 801c866:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c868:	4413      	add	r3, r2
 801c86a:	b29b      	uxth	r3, r3
 801c86c:	b21b      	sxth	r3, r3
 801c86e:	83bb      	strh	r3, [r7, #28]
    area_inner.y2 += pad;
 801c870:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c874:	b29a      	uxth	r2, r3
 801c876:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c878:	4413      	add	r3, r2
 801c87a:	b29b      	uxth	r3, r3
 801c87c:	b21b      	sxth	r3, r3
 801c87e:	83fb      	strh	r3, [r7, #30]

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 801c880:	f107 0218 	add.w	r2, r7, #24
 801c884:	f107 0310 	add.w	r3, r7, #16
 801c888:	4611      	mov	r1, r2
 801c88a:	4618      	mov	r0, r3
 801c88c:	f7fd fbe0 	bl	801a050 <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 801c890:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801c894:	b29a      	uxth	r2, r3
 801c896:	68bb      	ldr	r3, [r7, #8]
 801c898:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c89c:	b29b      	uxth	r3, r3
 801c89e:	1ad3      	subs	r3, r2, r3
 801c8a0:	b29b      	uxth	r3, r3
 801c8a2:	b21b      	sxth	r3, r3
 801c8a4:	823b      	strh	r3, [r7, #16]
    area_outer.x2 += dsc->outline_width;
 801c8a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c8aa:	b29a      	uxth	r2, r3
 801c8ac:	68bb      	ldr	r3, [r7, #8]
 801c8ae:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	4413      	add	r3, r2
 801c8b6:	b29b      	uxth	r3, r3
 801c8b8:	b21b      	sxth	r3, r3
 801c8ba:	82bb      	strh	r3, [r7, #20]
    area_outer.y1 -= dsc->outline_width;
 801c8bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c8c0:	b29a      	uxth	r2, r3
 801c8c2:	68bb      	ldr	r3, [r7, #8]
 801c8c4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c8c8:	b29b      	uxth	r3, r3
 801c8ca:	1ad3      	subs	r3, r2, r3
 801c8cc:	b29b      	uxth	r3, r3
 801c8ce:	b21b      	sxth	r3, r3
 801c8d0:	827b      	strh	r3, [r7, #18]
    area_outer.y2 += dsc->outline_width;
 801c8d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c8d6:	b29a      	uxth	r2, r3
 801c8d8:	68bb      	ldr	r3, [r7, #8]
 801c8da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c8de:	b29b      	uxth	r3, r3
 801c8e0:	4413      	add	r3, r2
 801c8e2:	b29b      	uxth	r3, r3
 801c8e4:	b21b      	sxth	r3, r3
 801c8e6:	82fb      	strh	r3, [r7, #22]


    int32_t inner_w = lv_area_get_width(&area_inner);
 801c8e8:	f107 0318 	add.w	r3, r7, #24
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	f7fd fbce 	bl	801a08e <lv_area_get_width>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t inner_h = lv_area_get_height(&area_inner);
 801c8f6:	f107 0318 	add.w	r3, r7, #24
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	f7fd fbde 	bl	801a0bc <lv_area_get_height>
 801c900:	4603      	mov	r3, r0
 801c902:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t rin = dsc->radius;
 801c904:	68bb      	ldr	r3, [r7, #8]
 801c906:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c90a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t short_side = LV_MIN(inner_w, inner_h);
 801c90c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c910:	4293      	cmp	r3, r2
 801c912:	bfa8      	it	ge
 801c914:	4613      	movge	r3, r2
 801c916:	627b      	str	r3, [r7, #36]	; 0x24
    if(rin > short_side >> 1) rin = short_side >> 1;
 801c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c91a:	105b      	asrs	r3, r3, #1
 801c91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c91e:	429a      	cmp	r2, r3
 801c920:	dd02      	ble.n	801c928 <draw_outline+0x13e>
 801c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c924:	105b      	asrs	r3, r3, #1
 801c926:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t rout = rin + dsc->outline_width;
 801c928:	68bb      	ldr	r3, [r7, #8]
 801c92a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801c92e:	b29a      	uxth	r2, r3
 801c930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c932:	b29b      	uxth	r3, r3
 801c934:	4413      	add	r3, r2
 801c936:	b29b      	uxth	r3, r3
 801c938:	847b      	strh	r3, [r7, #34]	; 0x22

    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 801c93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c93c:	b21b      	sxth	r3, r3
 801c93e:	68ba      	ldr	r2, [r7, #8]
 801c940:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801c944:	68b9      	ldr	r1, [r7, #8]
 801c946:	7889      	ldrb	r1, [r1, #2]
 801c948:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 801c94c:	f107 0418 	add.w	r4, r7, #24
 801c950:	f107 0010 	add.w	r0, r7, #16
 801c954:	9103      	str	r1, [sp, #12]
 801c956:	9202      	str	r2, [sp, #8]
 801c958:	68ba      	ldr	r2, [r7, #8]
 801c95a:	7f92      	ldrb	r2, [r2, #30]
 801c95c:	f88d 2004 	strb.w	r2, [sp, #4]
 801c960:	9300      	str	r3, [sp, #0]
 801c962:	462b      	mov	r3, r5
 801c964:	4622      	mov	r2, r4
 801c966:	4601      	mov	r1, r0
 801c968:	68f8      	ldr	r0, [r7, #12]
 801c96a:	f000 f807 	bl	801c97c <draw_border_generic>
 801c96e:	e002      	b.n	801c976 <draw_outline+0x18c>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801c970:	bf00      	nop
 801c972:	e000      	b.n	801c976 <draw_outline+0x18c>
    if(dsc->outline_width == 0) return;
 801c974:	bf00      	nop
                        dsc->blend_mode);
}
 801c976:	3738      	adds	r7, #56	; 0x38
 801c978:	46bd      	mov	sp, r7
 801c97a:	bdb0      	pop	{r4, r5, r7, pc}

0801c97c <draw_border_generic>:

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b0a8      	sub	sp, #160	; 0xa0
 801c980:	af02      	add	r7, sp, #8
 801c982:	60f8      	str	r0, [r7, #12]
 801c984:	60b9      	str	r1, [r7, #8]
 801c986:	607a      	str	r2, [r7, #4]
 801c988:	807b      	strh	r3, [r7, #2]
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 801c98a:	68b8      	ldr	r0, [r7, #8]
 801c98c:	f7f3 fe3c 	bl	8010608 <lv_draw_mask_is_any>
 801c990:	4603      	mov	r3, r0
 801c992:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 801c996:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801c99a:	f083 0301 	eor.w	r3, r3, #1
 801c99e:	b2db      	uxtb	r3, r3
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d012      	beq.n	801c9ca <draw_border_generic+0x4e>
 801c9a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d10e      	bne.n	801c9ca <draw_border_generic+0x4e>
 801c9ac:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d10a      	bne.n	801c9ca <draw_border_generic+0x4e>
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 801c9b4:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801c9b8:	9300      	str	r3, [sp, #0]
 801c9ba:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801c9be:	687a      	ldr	r2, [r7, #4]
 801c9c0:	68b9      	ldr	r1, [r7, #8]
 801c9c2:	68f8      	ldr	r0, [r7, #12]
 801c9c4:	f000 fbb0 	bl	801d128 <draw_border_simple>
        return;
 801c9c8:	e3ab      	b.n	801d122 <draw_border_generic+0x7a6>
    }

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `coords`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	689a      	ldr	r2, [r3, #8]
 801c9ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c9d2:	68b9      	ldr	r1, [r7, #8]
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	f002 fc03 	bl	801f1e0 <_lv_area_intersect>
 801c9da:	4603      	mov	r3, r0
 801c9dc:	f083 0301 	eor.w	r3, r3, #1
 801c9e0:	b2db      	uxtb	r3, r3
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	f040 839c 	bne.w	801d120 <draw_border_generic+0x7a4>
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 801c9e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c9ec:	4618      	mov	r0, r3
 801c9ee:	f7fd fb4e 	bl	801a08e <lv_area_get_width>
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801c9f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c9fc:	211c      	movs	r1, #28
 801c9fe:	4618      	mov	r0, r3
 801ca00:	f004 fb42 	bl	8021088 <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 801ca04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f003 ff93 	bl	8020934 <lv_mem_buf_get>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	663b      	str	r3, [r7, #96]	; 0x60


    /*Create mask for the outer area*/
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801ca12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ca16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0) {
 801ca1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	dd10      	ble.n	801ca44 <draw_border_generic+0xc8>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 801ca22:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801ca26:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	68b9      	ldr	r1, [r7, #8]
 801ca2e:	f7f4 f887 	bl	8010b40 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801ca32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ca36:	2100      	movs	r1, #0
 801ca38:	4618      	mov	r0, r3
 801ca3a:	f7f3 fcb5 	bl	80103a8 <lv_draw_mask_add>
 801ca3e:	4603      	mov	r3, r0
 801ca40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    }

    /*Create mask for the inner mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 801ca44:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	; 0xa0
 801ca48:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ca4c:	2301      	movs	r3, #1
 801ca4e:	6879      	ldr	r1, [r7, #4]
 801ca50:	f7f4 f876 	bl	8010b40 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 801ca54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ca58:	2100      	movs	r1, #0
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	f7f3 fca4 	bl	80103a8 <lv_draw_mask_add>
 801ca60:	4603      	mov	r3, r0
 801ca62:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t h;
    lv_area_t blend_area;
    blend_dsc.blend_area = &blend_area;
 801ca66:	f107 031c 	add.w	r3, r7, #28
 801ca6a:	657b      	str	r3, [r7, #84]	; 0x54
    blend_dsc.mask_area = &blend_area;
 801ca6c:	f107 031c 	add.w	r3, r7, #28
 801ca70:	66bb      	str	r3, [r7, #104]	; 0x68
    blend_dsc.color = color;
 801ca72:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801ca76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    blend_dsc.opa = opa;
 801ca7a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801ca7e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    blend_dsc.blend_mode = blend_mode;
 801ca82:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 801ca86:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

    /*Calculate the x and y coordinates where the straight parts area*/
    lv_area_t core_area;
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ca90:	461a      	mov	r2, r3
 801ca92:	68bb      	ldr	r3, [r7, #8]
 801ca94:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ca98:	4619      	mov	r1, r3
 801ca9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ca9e:	440b      	add	r3, r1
 801caa0:	4293      	cmp	r3, r2
 801caa2:	bfb8      	it	lt
 801caa4:	4613      	movlt	r3, r2
 801caa6:	b21b      	sxth	r3, r3
 801caa8:	82bb      	strh	r3, [r7, #20]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cab0:	461a      	mov	r2, r3
 801cab2:	68bb      	ldr	r3, [r7, #8]
 801cab4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cab8:	4619      	mov	r1, r3
 801caba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cabe:	1acb      	subs	r3, r1, r3
 801cac0:	4293      	cmp	r3, r2
 801cac2:	bfa8      	it	ge
 801cac4:	4613      	movge	r3, r2
 801cac6:	b21b      	sxth	r3, r3
 801cac8:	833b      	strh	r3, [r7, #24]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cad0:	461a      	mov	r2, r3
 801cad2:	68bb      	ldr	r3, [r7, #8]
 801cad4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cad8:	4619      	mov	r1, r3
 801cada:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cade:	440b      	add	r3, r1
 801cae0:	4293      	cmp	r3, r2
 801cae2:	bfb8      	it	lt
 801cae4:	4613      	movlt	r3, r2
 801cae6:	b21b      	sxth	r3, r3
 801cae8:	82fb      	strh	r3, [r7, #22]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801caf0:	461a      	mov	r2, r3
 801caf2:	68bb      	ldr	r3, [r7, #8]
 801caf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801caf8:	4619      	mov	r1, r3
 801cafa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cafe:	1acb      	subs	r3, r1, r3
 801cb00:	4293      	cmp	r3, r2
 801cb02:	bfa8      	it	ge
 801cb04:	4613      	movge	r3, r2
 801cb06:	b21b      	sxth	r3, r3
 801cb08:	837b      	strh	r3, [r7, #26]
    lv_coord_t core_w = lv_area_get_width(&core_area);
 801cb0a:	f107 0314 	add.w	r3, r7, #20
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f7fd fabd 	bl	801a08e <lv_area_get_width>
 801cb14:	4603      	mov	r3, r0
 801cb16:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801cb1a:	68bb      	ldr	r3, [r7, #8]
 801cb1c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cb26:	429a      	cmp	r2, r3
 801cb28:	bfd4      	ite	le
 801cb2a:	2301      	movle	r3, #1
 801cb2c:	2300      	movgt	r3, #0
 801cb2e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801cb32:	68bb      	ldr	r3, [r7, #8]
 801cb34:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801cb3e:	429a      	cmp	r2, r3
 801cb40:	bfac      	ite	ge
 801cb42:	2301      	movge	r3, #1
 801cb44:	2300      	movlt	r3, #0
 801cb46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

    /*If there is other masks, need to draw line by line*/
    if(mask_any) {
 801cb4a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d077      	beq.n	801cc42 <draw_border_generic+0x2c6>
        blend_area.x1 = draw_area.x1;
 801cb52:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801cb56:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801cb58:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801cb5c:	843b      	strh	r3, [r7, #32]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801cb5e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801cb62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cb66:	e045      	b.n	801cbf4 <draw_border_generic+0x278>
            if(!top_side && h < core_area.y1) continue;
 801cb68:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cb6c:	f083 0301 	eor.w	r3, r3, #1
 801cb70:	b2db      	uxtb	r3, r3
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d006      	beq.n	801cb84 <draw_border_generic+0x208>
 801cb76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801cb7a:	461a      	mov	r2, r3
 801cb7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cb80:	4293      	cmp	r3, r2
 801cb82:	db31      	blt.n	801cbe8 <draw_border_generic+0x26c>
            if(!bottom_side && h > core_area.y2) break;
 801cb84:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cb88:	f083 0301 	eor.w	r3, r3, #1
 801cb8c:	b2db      	uxtb	r3, r3
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d006      	beq.n	801cba0 <draw_border_generic+0x224>
 801cb92:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801cb96:	461a      	mov	r2, r3
 801cb98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cb9c:	4293      	cmp	r3, r2
 801cb9e:	dc31      	bgt.n	801cc04 <draw_border_generic+0x288>

            blend_area.y1 = h;
 801cba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cba4:	b21b      	sxth	r3, r3
 801cba6:	83fb      	strh	r3, [r7, #30]
            blend_area.y2 = h;
 801cba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cbac:	b21b      	sxth	r3, r3
 801cbae:	847b      	strh	r3, [r7, #34]	; 0x22

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801cbb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cbb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801cbb6:	4611      	mov	r1, r2
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f004 fae6 	bl	802118a <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 801cbbe:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801cbc0:	f9b7 1070 	ldrsh.w	r1, [r7, #112]	; 0x70
 801cbc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cbc8:	b21a      	sxth	r2, r3
 801cbca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801cbce:	b21b      	sxth	r3, r3
 801cbd0:	f7f3 fc1c 	bl	801040c <lv_draw_mask_apply>
 801cbd4:	4603      	mov	r3, r0
 801cbd6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cbda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cbde:	4619      	mov	r1, r3
 801cbe0:	68f8      	ldr	r0, [r7, #12]
 801cbe2:	f7f8 ffe1 	bl	8015ba8 <lv_draw_sw_blend>
 801cbe6:	e000      	b.n	801cbea <draw_border_generic+0x26e>
            if(!top_side && h < core_area.y1) continue;
 801cbe8:	bf00      	nop
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801cbea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cbee:	3301      	adds	r3, #1
 801cbf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cbf4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801cbf8:	461a      	mov	r2, r3
 801cbfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cbfe:	4293      	cmp	r3, r2
 801cc00:	ddb2      	ble.n	801cb68 <draw_border_generic+0x1ec>
 801cc02:	e000      	b.n	801cc06 <draw_border_generic+0x28a>
            if(!bottom_side && h > core_area.y2) break;
 801cc04:	bf00      	nop
        }

        lv_draw_mask_free_param(&mask_rin_param);
 801cc06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	f7f3 fc92 	bl	8010534 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 801cc10:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801cc14:	4618      	mov	r0, r3
 801cc16:	f7f3 fc3d 	bl	8010494 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 801cc1a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801cc1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cc22:	d009      	beq.n	801cc38 <draw_border_generic+0x2bc>
            lv_draw_mask_free_param(&mask_rout_param);
 801cc24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801cc28:	4618      	mov	r0, r3
 801cc2a:	f7f3 fc83 	bl	8010534 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 801cc2e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801cc32:	4618      	mov	r0, r3
 801cc34:	f7f3 fc2e 	bl	8010494 <lv_draw_mask_remove_id>
        }
        lv_mem_buf_release(blend_dsc.mask_buf);
 801cc38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	f003 ff26 	bl	8020a8c <lv_mem_buf_release>
        return;
 801cc40:	e26f      	b.n	801d122 <draw_border_generic+0x7a6>
    }

    /*No masks*/
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801cc42:	68bb      	ldr	r3, [r7, #8]
 801cc44:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cc4e:	429a      	cmp	r2, r3
 801cc50:	bfd4      	ite	le
 801cc52:	2301      	movle	r3, #1
 801cc54:	2300      	movgt	r3, #0
 801cc56:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801cc5a:	68bb      	ldr	r3, [r7, #8]
 801cc5c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cc66:	429a      	cmp	r2, r3
 801cc68:	bfac      	ite	ge
 801cc6a:	2301      	movge	r3, #1
 801cc6c:	2300      	movlt	r3, #0
 801cc6e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    bool split_hor = true;
 801cc72:	2301      	movs	r3, #1
 801cc74:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    if(left_side && right_side && top_side && bottom_side &&
 801cc78:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d012      	beq.n	801cca6 <draw_border_generic+0x32a>
 801cc80:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d00e      	beq.n	801cca6 <draw_border_generic+0x32a>
 801cc88:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d00a      	beq.n	801cca6 <draw_border_generic+0x32a>
 801cc90:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d006      	beq.n	801cca6 <draw_border_generic+0x32a>
 801cc98:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801cc9c:	2b31      	cmp	r3, #49	; 0x31
 801cc9e:	dc02      	bgt.n	801cca6 <draw_border_generic+0x32a>
       core_w < SPLIT_LIMIT) {
        split_hor = false;
 801cca0:	2300      	movs	r3, #0
 801cca2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801cca6:	2301      	movs	r3, #1
 801cca8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    /*Draw the straight lines first if they are long enough*/
    if(top_side && split_hor) {
 801ccac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d01b      	beq.n	801ccec <draw_border_generic+0x370>
 801ccb4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d017      	beq.n	801ccec <draw_border_generic+0x370>
        blend_area.x1 = core_area.x1;
 801ccbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ccc0:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801ccc2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801ccc6:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = outer_area->y1;
 801ccc8:	68bb      	ldr	r3, [r7, #8]
 801ccca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ccce:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = inner_area->y1 - 1;
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ccd6:	b29b      	uxth	r3, r3
 801ccd8:	3b01      	subs	r3, #1
 801ccda:	b29b      	uxth	r3, r3
 801ccdc:	b21b      	sxth	r3, r3
 801ccde:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cce0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cce4:	4619      	mov	r1, r3
 801cce6:	68f8      	ldr	r0, [r7, #12]
 801cce8:	f7f8 ff5e 	bl	8015ba8 <lv_draw_sw_blend>
    }

    if(bottom_side && split_hor) {
 801ccec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d01b      	beq.n	801cd2c <draw_border_generic+0x3b0>
 801ccf4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d017      	beq.n	801cd2c <draw_border_generic+0x3b0>
        blend_area.x1 = core_area.x1;
 801ccfc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cd00:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801cd02:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801cd06:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = inner_area->y2 + 1;
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801cd0e:	b29b      	uxth	r3, r3
 801cd10:	3301      	adds	r3, #1
 801cd12:	b29b      	uxth	r3, r3
 801cd14:	b21b      	sxth	r3, r3
 801cd16:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = outer_area->y2;
 801cd18:	68bb      	ldr	r3, [r7, #8]
 801cd1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801cd1e:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cd20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cd24:	4619      	mov	r1, r3
 801cd26:	68f8      	ldr	r0, [r7, #12]
 801cd28:	f7f8 ff3e 	bl	8015ba8 <lv_draw_sw_blend>
    }

    if(left_side) {
 801cd2c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	d017      	beq.n	801cd64 <draw_border_generic+0x3e8>
        blend_area.x1 = outer_area->x1;
 801cd34:	68bb      	ldr	r3, [r7, #8]
 801cd36:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cd3a:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = inner_area->x1 - 1;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cd42:	b29b      	uxth	r3, r3
 801cd44:	3b01      	subs	r3, #1
 801cd46:	b29b      	uxth	r3, r3
 801cd48:	b21b      	sxth	r3, r3
 801cd4a:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801cd4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801cd50:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801cd52:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801cd56:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cd58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cd5c:	4619      	mov	r1, r3
 801cd5e:	68f8      	ldr	r0, [r7, #12]
 801cd60:	f7f8 ff22 	bl	8015ba8 <lv_draw_sw_blend>
    }

    if(right_side) {
 801cd64:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d017      	beq.n	801cd9c <draw_border_generic+0x420>
        blend_area.x1 = inner_area->x2 + 1;
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cd72:	b29b      	uxth	r3, r3
 801cd74:	3301      	adds	r3, #1
 801cd76:	b29b      	uxth	r3, r3
 801cd78:	b21b      	sxth	r3, r3
 801cd7a:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = outer_area->x2;
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cd82:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801cd84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801cd88:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801cd8a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801cd8e:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cd90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cd94:	4619      	mov	r1, r3
 801cd96:	68f8      	ldr	r0, [r7, #12]
 801cd98:	f7f8 ff06 	bl	8015ba8 <lv_draw_sw_blend>

    /*Draw the corners*/
    lv_coord_t blend_w;

    /*Left and right corner together if they are close to each other*/
    if(!split_hor) {
 801cd9c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801cda0:	f083 0301 	eor.w	r3, r3, #1
 801cda4:	b2db      	uxtb	r3, r3
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	f000 8081 	beq.w	801ceae <draw_border_generic+0x532>
        /*Calculate the top corner and mirror it to the bottom*/
        blend_area.x1 = draw_area.x1;
 801cdac:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801cdb0:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801cdb2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801cdb6:	843b      	strh	r3, [r7, #32]
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cdbe:	461a      	mov	r2, r3
 801cdc0:	68bb      	ldr	r3, [r7, #8]
 801cdc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cdc6:	1ad2      	subs	r2, r2, r3
 801cdc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cdcc:	4293      	cmp	r3, r2
 801cdce:	bfb8      	it	lt
 801cdd0:	4613      	movlt	r3, r2
 801cdd2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        for(h = 0; h < max_h; h++) {
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cddc:	e060      	b.n	801cea0 <draw_border_generic+0x524>
            lv_coord_t top_y = outer_area->y1 + h;
 801cdde:	68bb      	ldr	r3, [r7, #8]
 801cde0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cde4:	b29a      	uxth	r2, r3
 801cde6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cdea:	b29b      	uxth	r3, r3
 801cdec:	4413      	add	r3, r2
 801cdee:	b29b      	uxth	r3, r3
 801cdf0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            lv_coord_t bottom_y = outer_area->y2 - h;
 801cdf4:	68bb      	ldr	r3, [r7, #8]
 801cdf6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801cdfa:	b29a      	uxth	r2, r3
 801cdfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ce00:	b29b      	uxth	r3, r3
 801ce02:	1ad3      	subs	r3, r2, r3
 801ce04:	b29b      	uxth	r3, r3
 801ce06:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801ce0a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801ce0e:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801ce12:	429a      	cmp	r2, r3
 801ce14:	da05      	bge.n	801ce22 <draw_border_generic+0x4a6>
 801ce16:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801ce1a:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801ce1e:	429a      	cmp	r2, r3
 801ce20:	dc38      	bgt.n	801ce94 <draw_border_generic+0x518>

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801ce22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ce24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801ce28:	4611      	mov	r1, r2
 801ce2a:	4618      	mov	r0, r3
 801ce2c:	f004 f9ad 	bl	802118a <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 801ce30:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801ce32:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801ce36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ce3a:	b21b      	sxth	r3, r3
 801ce3c:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801ce40:	f7f3 fae4 	bl	801040c <lv_draw_mask_apply>
 801ce44:	4603      	mov	r3, r0
 801ce46:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if(top_y >= draw_area.y1) {
 801ce4a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801ce4e:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801ce52:	429a      	cmp	r2, r3
 801ce54:	db0b      	blt.n	801ce6e <draw_border_generic+0x4f2>
                blend_area.y1 = top_y;
 801ce56:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801ce5a:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = top_y;
 801ce5c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801ce60:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ce62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ce66:	4619      	mov	r1, r3
 801ce68:	68f8      	ldr	r0, [r7, #12]
 801ce6a:	f7f8 fe9d 	bl	8015ba8 <lv_draw_sw_blend>
            }

            if(bottom_y <= draw_area.y2) {
 801ce6e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801ce72:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801ce76:	429a      	cmp	r2, r3
 801ce78:	dc0d      	bgt.n	801ce96 <draw_border_generic+0x51a>
                blend_area.y1 = bottom_y;
 801ce7a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801ce7e:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = bottom_y;
 801ce80:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801ce84:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ce86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ce8a:	4619      	mov	r1, r3
 801ce8c:	68f8      	ldr	r0, [r7, #12]
 801ce8e:	f7f8 fe8b 	bl	8015ba8 <lv_draw_sw_blend>
 801ce92:	e000      	b.n	801ce96 <draw_border_generic+0x51a>
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801ce94:	bf00      	nop
        for(h = 0; h < max_h; h++) {
 801ce96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ce9a:	3301      	adds	r3, #1
 801ce9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cea0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801cea4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801cea8:	429a      	cmp	r2, r3
 801ceaa:	db98      	blt.n	801cdde <draw_border_generic+0x462>
 801ceac:	e11f      	b.n	801d0ee <draw_border_generic+0x772>
            }
        }
    }
    else {
        /*Left corners*/
        blend_area.x1 = draw_area.x1;
 801ceae:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801ceb2:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 801ceb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ceb8:	3b01      	subs	r3, #1
 801ceba:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 801cebe:	4293      	cmp	r3, r2
 801cec0:	bfa8      	it	ge
 801cec2:	4613      	movge	r3, r2
 801cec4:	b21b      	sxth	r3, r3
 801cec6:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801cec8:	f107 031c 	add.w	r3, r7, #28
 801cecc:	4618      	mov	r0, r3
 801cece:	f7fd f8de 	bl	801a08e <lv_area_get_width>
 801ced2:	4603      	mov	r3, r0
 801ced4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(blend_w > 0) {
 801ced8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801cedc:	2b00      	cmp	r3, #0
 801cede:	dd76      	ble.n	801cfce <draw_border_generic+0x652>
            if(left_side || top_side) {
 801cee0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d103      	bne.n	801cef0 <draw_border_generic+0x574>
 801cee8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d032      	beq.n	801cf56 <draw_border_generic+0x5da>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801cef0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801cef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cef8:	e026      	b.n	801cf48 <draw_border_generic+0x5cc>
                    blend_area.y1 = h;
 801cefa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cefe:	b21b      	sxth	r3, r3
 801cf00:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801cf02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf06:	b21b      	sxth	r3, r3
 801cf08:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801cf0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cf0c:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801cf10:	4611      	mov	r1, r2
 801cf12:	4618      	mov	r0, r3
 801cf14:	f004 f939 	bl	802118a <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801cf18:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801cf1a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801cf1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf22:	b21a      	sxth	r2, r3
 801cf24:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801cf28:	f7f3 fa70 	bl	801040c <lv_draw_mask_apply>
 801cf2c:	4603      	mov	r3, r0
 801cf2e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cf32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cf36:	4619      	mov	r1, r3
 801cf38:	68f8      	ldr	r0, [r7, #12]
 801cf3a:	f7f8 fe35 	bl	8015ba8 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801cf3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf42:	3301      	adds	r3, #1
 801cf44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cf48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801cf4c:	461a      	mov	r2, r3
 801cf4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf52:	4293      	cmp	r3, r2
 801cf54:	dbd1      	blt.n	801cefa <draw_border_generic+0x57e>
                }
            }

            if(left_side || bottom_side) {
 801cf56:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d103      	bne.n	801cf66 <draw_border_generic+0x5ea>
 801cf5e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d033      	beq.n	801cfce <draw_border_generic+0x652>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801cf66:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801cf6a:	3301      	adds	r3, #1
 801cf6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cf70:	e026      	b.n	801cfc0 <draw_border_generic+0x644>
                    blend_area.y1 = h;
 801cf72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf76:	b21b      	sxth	r3, r3
 801cf78:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801cf7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf7e:	b21b      	sxth	r3, r3
 801cf80:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801cf82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cf84:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801cf88:	4611      	mov	r1, r2
 801cf8a:	4618      	mov	r0, r3
 801cf8c:	f004 f8fd 	bl	802118a <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801cf90:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801cf92:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801cf96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf9a:	b21a      	sxth	r2, r3
 801cf9c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801cfa0:	f7f3 fa34 	bl	801040c <lv_draw_mask_apply>
 801cfa4:	4603      	mov	r3, r0
 801cfa6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cfaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cfae:	4619      	mov	r1, r3
 801cfb0:	68f8      	ldr	r0, [r7, #12]
 801cfb2:	f7f8 fdf9 	bl	8015ba8 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801cfb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cfba:	3301      	adds	r3, #1
 801cfbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cfc0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801cfc4:	461a      	mov	r2, r3
 801cfc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cfca:	4293      	cmp	r3, r2
 801cfcc:	ddd1      	ble.n	801cf72 <draw_border_generic+0x5f6>
                }
            }
        }

        /*Right corners*/
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 801cfce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801cfd2:	3301      	adds	r3, #1
 801cfd4:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 801cfd8:	4293      	cmp	r3, r2
 801cfda:	bfb8      	it	lt
 801cfdc:	4613      	movlt	r3, r2
 801cfde:	b21b      	sxth	r3, r3
 801cfe0:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801cfe2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801cfe6:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801cfe8:	f107 031c 	add.w	r3, r7, #28
 801cfec:	4618      	mov	r0, r3
 801cfee:	f7fd f84e 	bl	801a08e <lv_area_get_width>
 801cff2:	4603      	mov	r3, r0
 801cff4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if(blend_w > 0) {
 801cff8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	dd76      	ble.n	801d0ee <draw_border_generic+0x772>
            if(right_side || top_side) {
 801d000:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801d004:	2b00      	cmp	r3, #0
 801d006:	d103      	bne.n	801d010 <draw_border_generic+0x694>
 801d008:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d032      	beq.n	801d076 <draw_border_generic+0x6fa>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801d010:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801d014:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d018:	e026      	b.n	801d068 <draw_border_generic+0x6ec>
                    blend_area.y1 = h;
 801d01a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d01e:	b21b      	sxth	r3, r3
 801d020:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801d022:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d026:	b21b      	sxth	r3, r3
 801d028:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801d02a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d02c:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801d030:	4611      	mov	r1, r2
 801d032:	4618      	mov	r0, r3
 801d034:	f004 f8a9 	bl	802118a <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801d038:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d03a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801d03e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d042:	b21a      	sxth	r2, r3
 801d044:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d048:	f7f3 f9e0 	bl	801040c <lv_draw_mask_apply>
 801d04c:	4603      	mov	r3, r0
 801d04e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d052:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d056:	4619      	mov	r1, r3
 801d058:	68f8      	ldr	r0, [r7, #12]
 801d05a:	f7f8 fda5 	bl	8015ba8 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801d05e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d062:	3301      	adds	r3, #1
 801d064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d068:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d06c:	461a      	mov	r2, r3
 801d06e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d072:	4293      	cmp	r3, r2
 801d074:	dbd1      	blt.n	801d01a <draw_border_generic+0x69e>
                }
            }

            if(right_side || bottom_side) {
 801d076:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d103      	bne.n	801d086 <draw_border_generic+0x70a>
 801d07e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d082:	2b00      	cmp	r3, #0
 801d084:	d033      	beq.n	801d0ee <draw_border_generic+0x772>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801d086:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801d08a:	3301      	adds	r3, #1
 801d08c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d090:	e026      	b.n	801d0e0 <draw_border_generic+0x764>
                    blend_area.y1 = h;
 801d092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d096:	b21b      	sxth	r3, r3
 801d098:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801d09a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d09e:	b21b      	sxth	r3, r3
 801d0a0:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801d0a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d0a4:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801d0a8:	4611      	mov	r1, r2
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	f004 f86d 	bl	802118a <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801d0b0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d0b2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801d0b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d0ba:	b21a      	sxth	r2, r3
 801d0bc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d0c0:	f7f3 f9a4 	bl	801040c <lv_draw_mask_apply>
 801d0c4:	4603      	mov	r3, r0
 801d0c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d0ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d0ce:	4619      	mov	r1, r3
 801d0d0:	68f8      	ldr	r0, [r7, #12]
 801d0d2:	f7f8 fd69 	bl	8015ba8 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801d0d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d0da:	3301      	adds	r3, #1
 801d0dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d0e0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801d0e4:	461a      	mov	r2, r3
 801d0e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d0ea:	4293      	cmp	r3, r2
 801d0ec:	ddd1      	ble.n	801d092 <draw_border_generic+0x716>
                }
            }
        }
    }

    lv_draw_mask_free_param(&mask_rin_param);
 801d0ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	f7f3 fa1e 	bl	8010534 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 801d0f8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	f7f3 f9c9 	bl	8010494 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 801d102:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d106:	4618      	mov	r0, r3
 801d108:	f7f3 fa14 	bl	8010534 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 801d10c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801d110:	4618      	mov	r0, r3
 801d112:	f7f3 f9bf 	bl	8010494 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 801d116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d118:	4618      	mov	r0, r3
 801d11a:	f003 fcb7 	bl	8020a8c <lv_mem_buf_release>
 801d11e:	e000      	b.n	801d122 <draw_border_generic+0x7a6>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801d120:	bf00      	nop
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
        return;
    }

#endif /*LV_DRAW_COMPLEX*/
}
 801d122:	3798      	adds	r7, #152	; 0x98
 801d124:	46bd      	mov	sp, r7
 801d126:	bd80      	pop	{r7, pc}

0801d128 <draw_border_simple>:
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 801d128:	b580      	push	{r7, lr}
 801d12a:	b08e      	sub	sp, #56	; 0x38
 801d12c:	af00      	add	r7, sp, #0
 801d12e:	60f8      	str	r0, [r7, #12]
 801d130:	60b9      	str	r1, [r7, #8]
 801d132:	607a      	str	r2, [r7, #4]
 801d134:	703b      	strb	r3, [r7, #0]
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 801d136:	f107 0310 	add.w	r3, r7, #16
 801d13a:	211c      	movs	r1, #28
 801d13c:	4618      	mov	r0, r3
 801d13e:	f003 ffa3 	bl	8021088 <lv_memset_00>
    blend_dsc.blend_area = &a;
 801d142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d146:	613b      	str	r3, [r7, #16]
    blend_dsc.color = color;
 801d148:	783b      	ldrb	r3, [r7, #0]
 801d14a:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = opa;
 801d14c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801d150:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801d154:	68bb      	ldr	r3, [r7, #8]
 801d156:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d160:	429a      	cmp	r2, r3
 801d162:	bfd4      	ite	le
 801d164:	2301      	movle	r3, #1
 801d166:	2300      	movgt	r3, #0
 801d168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801d16c:	68bb      	ldr	r3, [r7, #8]
 801d16e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d178:	429a      	cmp	r2, r3
 801d17a:	bfac      	ite	ge
 801d17c:	2301      	movge	r3, #1
 801d17e:	2300      	movlt	r3, #0
 801d180:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801d184:	68bb      	ldr	r3, [r7, #8]
 801d186:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d190:	429a      	cmp	r2, r3
 801d192:	bfd4      	ite	le
 801d194:	2301      	movle	r3, #1
 801d196:	2300      	movgt	r3, #0
 801d198:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801d19c:	68bb      	ldr	r3, [r7, #8]
 801d19e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d1a8:	429a      	cmp	r2, r3
 801d1aa:	bfac      	ite	ge
 801d1ac:	2301      	movge	r3, #1
 801d1ae:	2300      	movlt	r3, #0
 801d1b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34


    /*Top*/
    a.x1 = outer_area->x1;
 801d1b4:	68bb      	ldr	r3, [r7, #8]
 801d1b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d1ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801d1bc:	68bb      	ldr	r3, [r7, #8]
 801d1be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d1c2:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = outer_area->y1;
 801d1c4:	68bb      	ldr	r3, [r7, #8]
 801d1c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d1ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = inner_area->y1 - 1;
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d1d2:	b29b      	uxth	r3, r3
 801d1d4:	3b01      	subs	r3, #1
 801d1d6:	b29b      	uxth	r3, r3
 801d1d8:	b21b      	sxth	r3, r3
 801d1da:	867b      	strh	r3, [r7, #50]	; 0x32
    if(top_side) {
 801d1dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d005      	beq.n	801d1f0 <draw_border_simple+0xc8>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d1e4:	f107 0310 	add.w	r3, r7, #16
 801d1e8:	4619      	mov	r1, r3
 801d1ea:	68f8      	ldr	r0, [r7, #12]
 801d1ec:	f7f8 fcdc 	bl	8015ba8 <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d1f6:	b29b      	uxth	r3, r3
 801d1f8:	3301      	adds	r3, #1
 801d1fa:	b29b      	uxth	r3, r3
 801d1fc:	b21b      	sxth	r3, r3
 801d1fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = outer_area->y2;
 801d200:	68bb      	ldr	r3, [r7, #8]
 801d202:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d206:	867b      	strh	r3, [r7, #50]	; 0x32
    if(bottom_side) {
 801d208:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d005      	beq.n	801d21c <draw_border_simple+0xf4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d210:	f107 0310 	add.w	r3, r7, #16
 801d214:	4619      	mov	r1, r3
 801d216:	68f8      	ldr	r0, [r7, #12]
 801d218:	f7f8 fcc6 	bl	8015ba8 <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
 801d21c:	68bb      	ldr	r3, [r7, #8]
 801d21e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d222:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = inner_area->x1 - 1;
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d22a:	b29b      	uxth	r3, r3
 801d22c:	3b01      	subs	r3, #1
 801d22e:	b29b      	uxth	r3, r3
 801d230:	b21b      	sxth	r3, r3
 801d232:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 801d234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d003      	beq.n	801d244 <draw_border_simple+0x11c>
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d242:	e002      	b.n	801d24a <draw_border_simple+0x122>
 801d244:	68bb      	ldr	r3, [r7, #8]
 801d246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d24a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 801d24c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801d250:	2b00      	cmp	r3, #0
 801d252:	d003      	beq.n	801d25c <draw_border_simple+0x134>
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d25a:	e002      	b.n	801d262 <draw_border_simple+0x13a>
 801d25c:	68bb      	ldr	r3, [r7, #8]
 801d25e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d262:	867b      	strh	r3, [r7, #50]	; 0x32
    if(left_side) {
 801d264:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d005      	beq.n	801d278 <draw_border_simple+0x150>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d26c:	f107 0310 	add.w	r3, r7, #16
 801d270:	4619      	mov	r1, r3
 801d272:	68f8      	ldr	r0, [r7, #12]
 801d274:	f7f8 fc98 	bl	8015ba8 <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d27e:	b29b      	uxth	r3, r3
 801d280:	3301      	adds	r3, #1
 801d282:	b29b      	uxth	r3, r3
 801d284:	b21b      	sxth	r3, r3
 801d286:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801d288:	68bb      	ldr	r3, [r7, #8]
 801d28a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d28e:	863b      	strh	r3, [r7, #48]	; 0x30
    if(right_side) {
 801d290:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801d294:	2b00      	cmp	r3, #0
 801d296:	d005      	beq.n	801d2a4 <draw_border_simple+0x17c>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d298:	f107 0310 	add.w	r3, r7, #16
 801d29c:	4619      	mov	r1, r3
 801d29e:	68f8      	ldr	r0, [r7, #12]
 801d2a0:	f7f8 fc82 	bl	8015ba8 <lv_draw_sw_blend>
    }
}
 801d2a4:	bf00      	nop
 801d2a6:	3738      	adds	r7, #56	; 0x38
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	bd80      	pop	{r7, pc}

0801d2ac <lv_color_mix>:
{
 801d2ac:	b480      	push	{r7}
 801d2ae:	b085      	sub	sp, #20
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	7138      	strb	r0, [r7, #4]
 801d2b4:	7039      	strb	r1, [r7, #0]
 801d2b6:	4613      	mov	r3, r2
 801d2b8:	70fb      	strb	r3, [r7, #3]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 801d2ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	da01      	bge.n	801d2c6 <lv_color_mix+0x1a>
 801d2c2:	793b      	ldrb	r3, [r7, #4]
 801d2c4:	e000      	b.n	801d2c8 <lv_color_mix+0x1c>
 801d2c6:	783b      	ldrb	r3, [r7, #0]
 801d2c8:	733b      	strb	r3, [r7, #12]
    return ret;
 801d2ca:	7b3b      	ldrb	r3, [r7, #12]
}
 801d2cc:	4618      	mov	r0, r3
 801d2ce:	3714      	adds	r7, #20
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2d6:	4770      	bx	lr

0801d2d8 <lv_area_get_width>:
{
 801d2d8:	b480      	push	{r7}
 801d2da:	b083      	sub	sp, #12
 801d2dc:	af00      	add	r7, sp, #0
 801d2de:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d2e6:	b29a      	uxth	r2, r3
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d2ee:	b29b      	uxth	r3, r3
 801d2f0:	1ad3      	subs	r3, r2, r3
 801d2f2:	b29b      	uxth	r3, r3
 801d2f4:	3301      	adds	r3, #1
 801d2f6:	b29b      	uxth	r3, r3
 801d2f8:	b21b      	sxth	r3, r3
}
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	370c      	adds	r7, #12
 801d2fe:	46bd      	mov	sp, r7
 801d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d304:	4770      	bx	lr

0801d306 <lv_area_get_height>:
{
 801d306:	b480      	push	{r7}
 801d308:	b083      	sub	sp, #12
 801d30a:	af00      	add	r7, sp, #0
 801d30c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d314:	b29a      	uxth	r2, r3
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d31c:	b29b      	uxth	r3, r3
 801d31e:	1ad3      	subs	r3, r2, r3
 801d320:	b29b      	uxth	r3, r3
 801d322:	3301      	adds	r3, #1
 801d324:	b29b      	uxth	r3, r3
 801d326:	b21b      	sxth	r3, r3
}
 801d328:	4618      	mov	r0, r3
 801d32a:	370c      	adds	r7, #12
 801d32c:	46bd      	mov	sp, r7
 801d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d332:	4770      	bx	lr

0801d334 <lv_draw_sw_transform>:
 **********************/

void lv_draw_sw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf,
                          lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                          const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801d334:	b590      	push	{r4, r7, lr}
 801d336:	b0ab      	sub	sp, #172	; 0xac
 801d338:	af08      	add	r7, sp, #32
 801d33a:	60f8      	str	r0, [r7, #12]
 801d33c:	60b9      	str	r1, [r7, #8]
 801d33e:	607a      	str	r2, [r7, #4]
 801d340:	807b      	strh	r3, [r7, #2]
    LV_UNUSED(draw_ctx);

    point_transform_dsc_t tr_dsc;
    tr_dsc.angle = -draw_dsc->angle;
 801d342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d346:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d34a:	425b      	negs	r3, r3
 801d34c:	63fb      	str	r3, [r7, #60]	; 0x3c
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 801d34e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d352:	885b      	ldrh	r3, [r3, #2]
 801d354:	461a      	mov	r2, r3
 801d356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801d35a:	fb93 f3f2 	sdiv	r3, r3, r2
 801d35e:	63bb      	str	r3, [r7, #56]	; 0x38
    tr_dsc.pivot = draw_dsc->pivot;
 801d360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d364:	685b      	ldr	r3, [r3, #4]
 801d366:	64bb      	str	r3, [r7, #72]	; 0x48

    int32_t angle_low = tr_dsc.angle / 10;
 801d368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d36a:	4aaf      	ldr	r2, [pc, #700]	; (801d628 <lv_draw_sw_transform+0x2f4>)
 801d36c:	fb82 1203 	smull	r1, r2, r2, r3
 801d370:	1092      	asrs	r2, r2, #2
 801d372:	17db      	asrs	r3, r3, #31
 801d374:	1ad3      	subs	r3, r2, r3
 801d376:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t angle_high = angle_low + 1;
 801d378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d37a:	3301      	adds	r3, #1
 801d37c:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 801d37e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d382:	f06f 0109 	mvn.w	r1, #9
 801d386:	fb01 f303 	mul.w	r3, r1, r3
 801d38a:	4413      	add	r3, r2
 801d38c:	673b      	str	r3, [r7, #112]	; 0x70

    int32_t s1 = lv_trigo_sin(angle_low);
 801d38e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d390:	b21b      	sxth	r3, r3
 801d392:	4618      	mov	r0, r3
 801d394:	f003 f92a 	bl	80205ec <lv_trigo_sin>
 801d398:	4603      	mov	r3, r0
 801d39a:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t s2 = lv_trigo_sin(angle_high);
 801d39c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d39e:	b21b      	sxth	r3, r3
 801d3a0:	4618      	mov	r0, r3
 801d3a2:	f003 f923 	bl	80205ec <lv_trigo_sin>
 801d3a6:	4603      	mov	r3, r0
 801d3a8:	66bb      	str	r3, [r7, #104]	; 0x68

    int32_t c1 = lv_trigo_sin(angle_low + 90);
 801d3aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d3ac:	b29b      	uxth	r3, r3
 801d3ae:	335a      	adds	r3, #90	; 0x5a
 801d3b0:	b29b      	uxth	r3, r3
 801d3b2:	b21b      	sxth	r3, r3
 801d3b4:	4618      	mov	r0, r3
 801d3b6:	f003 f919 	bl	80205ec <lv_trigo_sin>
 801d3ba:	4603      	mov	r3, r0
 801d3bc:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 801d3be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d3c0:	b29b      	uxth	r3, r3
 801d3c2:	335a      	adds	r3, #90	; 0x5a
 801d3c4:	b29b      	uxth	r3, r3
 801d3c6:	b21b      	sxth	r3, r3
 801d3c8:	4618      	mov	r0, r3
 801d3ca:	f003 f90f 	bl	80205ec <lv_trigo_sin>
 801d3ce:	4603      	mov	r3, r0
 801d3d0:	663b      	str	r3, [r7, #96]	; 0x60

    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801d3d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3d4:	f1c3 030a 	rsb	r3, r3, #10
 801d3d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d3da:	fb03 f202 	mul.w	r2, r3, r2
 801d3de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d3e0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d3e2:	fb01 f303 	mul.w	r3, r1, r3
 801d3e6:	4413      	add	r3, r2
 801d3e8:	4a8f      	ldr	r2, [pc, #572]	; (801d628 <lv_draw_sw_transform+0x2f4>)
 801d3ea:	fb82 1203 	smull	r1, r2, r2, r3
 801d3ee:	1092      	asrs	r2, r2, #2
 801d3f0:	17db      	asrs	r3, r3, #31
 801d3f2:	1ad3      	subs	r3, r2, r3
 801d3f4:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801d3f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3f8:	f1c3 030a 	rsb	r3, r3, #10
 801d3fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d3fe:	fb03 f202 	mul.w	r2, r3, r2
 801d402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d404:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d406:	fb01 f303 	mul.w	r3, r1, r3
 801d40a:	4413      	add	r3, r2
 801d40c:	4a86      	ldr	r2, [pc, #536]	; (801d628 <lv_draw_sw_transform+0x2f4>)
 801d40e:	fb82 1203 	smull	r1, r2, r2, r3
 801d412:	1092      	asrs	r2, r2, #2
 801d414:	17db      	asrs	r3, r3, #31
 801d416:	1ad3      	subs	r3, r2, r3
 801d418:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 801d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d41c:	115b      	asrs	r3, r3, #5
 801d41e:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 801d420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d422:	115b      	asrs	r3, r3, #5
 801d424:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 801d426:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801d42a:	021b      	lsls	r3, r3, #8
 801d42c:	643b      	str	r3, [r7, #64]	; 0x40
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 801d42e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801d432:	021b      	lsls	r3, r3, #8
 801d434:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t dest_w = lv_area_get_width(dest_area);
 801d436:	68b8      	ldr	r0, [r7, #8]
 801d438:	f7ff ff4e 	bl	801d2d8 <lv_area_get_width>
 801d43c:	4603      	mov	r3, r0
 801d43e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_coord_t dest_h = lv_area_get_height(dest_area);
 801d442:	68b8      	ldr	r0, [r7, #8]
 801d444:	f7ff ff5f 	bl	801d306 <lv_area_get_height>
 801d448:	4603      	mov	r3, r0
 801d44a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_coord_t y;
    for(y = 0; y < dest_h; y++) {
 801d44e:	2300      	movs	r3, #0
 801d450:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801d454:	e0db      	b.n	801d60e <lv_draw_sw_transform+0x2da>
        int32_t xs1_ups, ys1_ups, xs2_ups, ys2_ups;

        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 801d456:	68bb      	ldr	r3, [r7, #8]
 801d458:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d45c:	461c      	mov	r4, r3
 801d45e:	68bb      	ldr	r3, [r7, #8]
 801d460:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d464:	461a      	mov	r2, r3
 801d466:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801d46a:	441a      	add	r2, r3
 801d46c:	f107 011c 	add.w	r1, r7, #28
 801d470:	f107 0020 	add.w	r0, r7, #32
 801d474:	f107 0318 	add.w	r3, r7, #24
 801d478:	9300      	str	r3, [sp, #0]
 801d47a:	460b      	mov	r3, r1
 801d47c:	4621      	mov	r1, r4
 801d47e:	f000 fbff 	bl	801dc80 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 801d482:	68bb      	ldr	r3, [r7, #8]
 801d484:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d488:	461c      	mov	r4, r3
 801d48a:	68bb      	ldr	r3, [r7, #8]
 801d48c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d490:	461a      	mov	r2, r3
 801d492:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801d496:	441a      	add	r2, r3
 801d498:	f107 0114 	add.w	r1, r7, #20
 801d49c:	f107 0020 	add.w	r0, r7, #32
 801d4a0:	f107 0310 	add.w	r3, r7, #16
 801d4a4:	9300      	str	r3, [sp, #0]
 801d4a6:	460b      	mov	r3, r1
 801d4a8:	4621      	mov	r1, r4
 801d4aa:	f000 fbe9 	bl	801dc80 <transform_point_upscaled>

        int32_t xs_diff = xs2_ups - xs1_ups;
 801d4ae:	697a      	ldr	r2, [r7, #20]
 801d4b0:	69fb      	ldr	r3, [r7, #28]
 801d4b2:	1ad3      	subs	r3, r2, r3
 801d4b4:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_diff = ys2_ups - ys1_ups;
 801d4b6:	693a      	ldr	r2, [r7, #16]
 801d4b8:	69bb      	ldr	r3, [r7, #24]
 801d4ba:	1ad3      	subs	r3, r2, r3
 801d4bc:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t xs_step_256 = 0;
 801d4be:	2300      	movs	r3, #0
 801d4c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ys_step_256 = 0;
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(dest_w > 1) {
 801d4c8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d4cc:	2b01      	cmp	r3, #1
 801d4ce:	dd10      	ble.n	801d4f2 <lv_draw_sw_transform+0x1be>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 801d4d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d4d2:	021a      	lsls	r2, r3, #8
 801d4d4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d4d8:	3b01      	subs	r3, #1
 801d4da:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 801d4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d4e4:	021a      	lsls	r2, r3, #8
 801d4e6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d4ea:	3b01      	subs	r3, #1
 801d4ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4f0:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        int32_t xs_ups = xs1_ups + 0x80;
 801d4f2:	69fb      	ldr	r3, [r7, #28]
 801d4f4:	3380      	adds	r3, #128	; 0x80
 801d4f6:	653b      	str	r3, [r7, #80]	; 0x50
        int32_t ys_ups = ys1_ups + 0x80;
 801d4f8:	69bb      	ldr	r3, [r7, #24]
 801d4fa:	3380      	adds	r3, #128	; 0x80
 801d4fc:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(draw_dsc->antialias == 0) {
 801d4fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d502:	7c1b      	ldrb	r3, [r3, #16]
 801d504:	f003 0301 	and.w	r3, r3, #1
 801d508:	b2db      	uxtb	r3, r3
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d148      	bne.n	801d5a0 <lv_draw_sw_transform+0x26c>
            switch(cf) {
 801d50e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801d512:	2b06      	cmp	r3, #6
 801d514:	d023      	beq.n	801d55e <lv_draw_sw_transform+0x22a>
 801d516:	2b06      	cmp	r3, #6
 801d518:	dc63      	bgt.n	801d5e2 <lv_draw_sw_transform+0x2ae>
 801d51a:	2b04      	cmp	r3, #4
 801d51c:	d01f      	beq.n	801d55e <lv_draw_sw_transform+0x22a>
 801d51e:	2b05      	cmp	r3, #5
 801d520:	d15f      	bne.n	801d5e2 <lv_draw_sw_transform+0x2ae>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    argb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf);
 801d522:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d526:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801d52a:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801d52e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801d532:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d536:	9206      	str	r2, [sp, #24]
 801d538:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801d53c:	9205      	str	r2, [sp, #20]
 801d53e:	9304      	str	r3, [sp, #16]
 801d540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d542:	9303      	str	r3, [sp, #12]
 801d544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d548:	9302      	str	r3, [sp, #8]
 801d54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d54c:	9301      	str	r3, [sp, #4]
 801d54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d550:	9300      	str	r3, [sp, #0]
 801d552:	4623      	mov	r3, r4
 801d554:	4602      	mov	r2, r0
 801d556:	6878      	ldr	r0, [r7, #4]
 801d558:	f000 f8ee 	bl	801d738 <argb_no_aa>
                    break;
 801d55c:	e042      	b.n	801d5e4 <lv_draw_sw_transform+0x2b0>
                case LV_IMG_CF_TRUE_COLOR:
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    rgb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801d55e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d562:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801d566:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801d56a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801d56e:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801d572:	9207      	str	r2, [sp, #28]
 801d574:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d578:	9206      	str	r2, [sp, #24]
 801d57a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801d57e:	9205      	str	r2, [sp, #20]
 801d580:	9304      	str	r3, [sp, #16]
 801d582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d584:	9303      	str	r3, [sp, #12]
 801d586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d58a:	9302      	str	r3, [sp, #8]
 801d58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d58e:	9301      	str	r3, [sp, #4]
 801d590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d592:	9300      	str	r3, [sp, #0]
 801d594:	4623      	mov	r3, r4
 801d596:	4602      	mov	r2, r0
 801d598:	6878      	ldr	r0, [r7, #4]
 801d59a:	f000 f847 	bl	801d62c <rgb_no_aa>
                    break;
 801d59e:	e021      	b.n	801d5e4 <lv_draw_sw_transform+0x2b0>
                default:
                    break;
            }
        }
        else {
            argb_and_rgb_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801d5a0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d5a4:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801d5a8:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801d5ac:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801d5b0:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801d5b4:	9207      	str	r2, [sp, #28]
 801d5b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d5ba:	9206      	str	r2, [sp, #24]
 801d5bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801d5c0:	9205      	str	r2, [sp, #20]
 801d5c2:	9304      	str	r3, [sp, #16]
 801d5c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d5c6:	9303      	str	r3, [sp, #12]
 801d5c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d5cc:	9302      	str	r3, [sp, #8]
 801d5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5d0:	9301      	str	r3, [sp, #4]
 801d5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d5d4:	9300      	str	r3, [sp, #0]
 801d5d6:	4623      	mov	r3, r4
 801d5d8:	4602      	mov	r2, r0
 801d5da:	6878      	ldr	r0, [r7, #4]
 801d5dc:	f000 f91d 	bl	801d81a <argb_and_rgb_aa>
 801d5e0:	e000      	b.n	801d5e4 <lv_draw_sw_transform+0x2b0>
                    break;
 801d5e2:	bf00      	nop
        }

        cbuf += dest_w;
 801d5e4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d5e8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801d5ec:	4413      	add	r3, r2
 801d5ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        abuf += dest_w;
 801d5f2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d5f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d5fa:	4413      	add	r3, r2
 801d5fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for(y = 0; y < dest_h; y++) {
 801d600:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801d604:	b29b      	uxth	r3, r3
 801d606:	3301      	adds	r3, #1
 801d608:	b29b      	uxth	r3, r3
 801d60a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801d60e:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801d612:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801d616:	429a      	cmp	r2, r3
 801d618:	f6ff af1d 	blt.w	801d456 <lv_draw_sw_transform+0x122>
    }
}
 801d61c:	bf00      	nop
 801d61e:	bf00      	nop
 801d620:	378c      	adds	r7, #140	; 0x8c
 801d622:	46bd      	mov	sp, r7
 801d624:	bd90      	pop	{r4, r7, pc}
 801d626:	bf00      	nop
 801d628:	66666667 	.word	0x66666667

0801d62c <rgb_no_aa>:
 **********************/

static void rgb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                      int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                      int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b08c      	sub	sp, #48	; 0x30
 801d630:	af00      	add	r7, sp, #0
 801d632:	60f8      	str	r0, [r7, #12]
 801d634:	4608      	mov	r0, r1
 801d636:	4611      	mov	r1, r2
 801d638:	461a      	mov	r2, r3
 801d63a:	4603      	mov	r3, r0
 801d63c:	817b      	strh	r3, [r7, #10]
 801d63e:	460b      	mov	r3, r1
 801d640:	813b      	strh	r3, [r7, #8]
 801d642:	4613      	mov	r3, r2
 801d644:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801d646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d648:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t ys_ups_start = ys_ups;
 801d64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d64c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801d64e:	f7ef fdd1 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 801d652:	6238      	str	r0, [r7, #32]
    lv_color_t ck = d->driver->color_chroma_key;
 801d654:	6a3b      	ldr	r3, [r7, #32]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801d65c:	743b      	strb	r3, [r7, #16]

    lv_memset_ff(abuf, x_end);
 801d65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d660:	4619      	mov	r1, r3
 801d662:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801d664:	f003 fd91 	bl	802118a <lv_memset_ff>

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801d668:	2300      	movs	r3, #0
 801d66a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d66c:	e05a      	b.n	801d724 <rgb_no_aa+0xf8>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801d66e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d672:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d674:	fb02 f303 	mul.w	r3, r2, r3
 801d678:	121b      	asrs	r3, r3, #8
 801d67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d67c:	4413      	add	r3, r2
 801d67e:	63bb      	str	r3, [r7, #56]	; 0x38
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801d680:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d686:	fb02 f303 	mul.w	r3, r2, r3
 801d68a:	121b      	asrs	r3, r3, #8
 801d68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d68e:	4413      	add	r3, r2
 801d690:	63fb      	str	r3, [r7, #60]	; 0x3c

        int32_t xs_int = xs_ups >> 8;
 801d692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d694:	121b      	asrs	r3, r3, #8
 801d696:	61fb      	str	r3, [r7, #28]
        int32_t ys_int = ys_ups >> 8;
 801d698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d69a:	121b      	asrs	r3, r3, #8
 801d69c:	61bb      	str	r3, [r7, #24]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801d69e:	69fb      	ldr	r3, [r7, #28]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	db0c      	blt.n	801d6be <rgb_no_aa+0x92>
 801d6a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d6a8:	69fa      	ldr	r2, [r7, #28]
 801d6aa:	429a      	cmp	r2, r3
 801d6ac:	da07      	bge.n	801d6be <rgb_no_aa+0x92>
 801d6ae:	69bb      	ldr	r3, [r7, #24]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	db04      	blt.n	801d6be <rgb_no_aa+0x92>
 801d6b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d6b8:	69ba      	ldr	r2, [r7, #24]
 801d6ba:	429a      	cmp	r2, r3
 801d6bc:	db06      	blt.n	801d6cc <rgb_no_aa+0xa0>
            abuf[x] = 0x00;
 801d6be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d6c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d6c4:	4413      	add	r3, r2
 801d6c6:	2200      	movs	r2, #0
 801d6c8:	701a      	strb	r2, [r3, #0]
 801d6ca:	e013      	b.n	801d6f4 <rgb_no_aa+0xc8>
        }
        else {

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            const uint8_t * src_tmp = src;
 801d6cc:	68fb      	ldr	r3, [r7, #12]
 801d6ce:	617b      	str	r3, [r7, #20]
            src_tmp += ys_int * src_stride + xs_int;
 801d6d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d6d4:	69ba      	ldr	r2, [r7, #24]
 801d6d6:	fb03 f202 	mul.w	r2, r3, r2
 801d6da:	69fb      	ldr	r3, [r7, #28]
 801d6dc:	4413      	add	r3, r2
 801d6de:	461a      	mov	r2, r3
 801d6e0:	697b      	ldr	r3, [r7, #20]
 801d6e2:	4413      	add	r3, r2
 801d6e4:	617b      	str	r3, [r7, #20]
            cbuf[x].full = src_tmp[0];
 801d6e6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d6ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d6ec:	4413      	add	r3, r2
 801d6ee:	697a      	ldr	r2, [r7, #20]
 801d6f0:	7812      	ldrb	r2, [r2, #0]
 801d6f2:	701a      	strb	r2, [r3, #0]
            const uint8_t * src_tmp = src;
            src_tmp += (ys_int * src_stride * sizeof(lv_color_t)) + xs_int * sizeof(lv_color_t);
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
        }
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 801d6f4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801d6f8:	2b06      	cmp	r3, #6
 801d6fa:	d10d      	bne.n	801d718 <rgb_no_aa+0xec>
 801d6fc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d702:	4413      	add	r3, r2
 801d704:	781a      	ldrb	r2, [r3, #0]
 801d706:	7c3b      	ldrb	r3, [r7, #16]
 801d708:	429a      	cmp	r2, r3
 801d70a:	d105      	bne.n	801d718 <rgb_no_aa+0xec>
            abuf[x] = 0x00;
 801d70c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d712:	4413      	add	r3, r2
 801d714:	2200      	movs	r2, #0
 801d716:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801d718:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d71c:	b29b      	uxth	r3, r3
 801d71e:	3301      	adds	r3, #1
 801d720:	b29b      	uxth	r3, r3
 801d722:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d724:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d72a:	429a      	cmp	r2, r3
 801d72c:	dc9f      	bgt.n	801d66e <rgb_no_aa+0x42>
        }
    }
}
 801d72e:	bf00      	nop
 801d730:	bf00      	nop
 801d732:	3730      	adds	r7, #48	; 0x30
 801d734:	46bd      	mov	sp, r7
 801d736:	bd80      	pop	{r7, pc}

0801d738 <argb_no_aa>:

static void argb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                       int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                       int32_t x_end, lv_color_t * cbuf, uint8_t * abuf)
{
 801d738:	b480      	push	{r7}
 801d73a:	b08b      	sub	sp, #44	; 0x2c
 801d73c:	af00      	add	r7, sp, #0
 801d73e:	60f8      	str	r0, [r7, #12]
 801d740:	4608      	mov	r0, r1
 801d742:	4611      	mov	r1, r2
 801d744:	461a      	mov	r2, r3
 801d746:	4603      	mov	r3, r0
 801d748:	817b      	strh	r3, [r7, #10]
 801d74a:	460b      	mov	r3, r1
 801d74c:	813b      	strh	r3, [r7, #8]
 801d74e:	4613      	mov	r3, r2
 801d750:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801d752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d754:	623b      	str	r3, [r7, #32]
    int32_t ys_ups_start = ys_ups;
 801d756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d758:	61fb      	str	r3, [r7, #28]

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801d75a:	2300      	movs	r3, #0
 801d75c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801d75e:	e050      	b.n	801d802 <argb_no_aa+0xca>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801d760:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d766:	fb02 f303 	mul.w	r3, r2, r3
 801d76a:	121b      	asrs	r3, r3, #8
 801d76c:	6a3a      	ldr	r2, [r7, #32]
 801d76e:	4413      	add	r3, r2
 801d770:	633b      	str	r3, [r7, #48]	; 0x30
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801d772:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d778:	fb02 f303 	mul.w	r3, r2, r3
 801d77c:	121b      	asrs	r3, r3, #8
 801d77e:	69fa      	ldr	r2, [r7, #28]
 801d780:	4413      	add	r3, r2
 801d782:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t xs_int = xs_ups >> 8;
 801d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d786:	121b      	asrs	r3, r3, #8
 801d788:	61bb      	str	r3, [r7, #24]
        int32_t ys_int = ys_ups >> 8;
 801d78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d78c:	121b      	asrs	r3, r3, #8
 801d78e:	617b      	str	r3, [r7, #20]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801d790:	69bb      	ldr	r3, [r7, #24]
 801d792:	2b00      	cmp	r3, #0
 801d794:	db0c      	blt.n	801d7b0 <argb_no_aa+0x78>
 801d796:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d79a:	69ba      	ldr	r2, [r7, #24]
 801d79c:	429a      	cmp	r2, r3
 801d79e:	da07      	bge.n	801d7b0 <argb_no_aa+0x78>
 801d7a0:	697b      	ldr	r3, [r7, #20]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	db04      	blt.n	801d7b0 <argb_no_aa+0x78>
 801d7a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d7aa:	697a      	ldr	r2, [r7, #20]
 801d7ac:	429a      	cmp	r2, r3
 801d7ae:	db06      	blt.n	801d7be <argb_no_aa+0x86>
            abuf[x] = 0;
 801d7b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d7b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d7b6:	4413      	add	r3, r2
 801d7b8:	2200      	movs	r2, #0
 801d7ba:	701a      	strb	r2, [r3, #0]
 801d7bc:	e01b      	b.n	801d7f6 <argb_no_aa+0xbe>
        }
        else {
            const uint8_t * src_tmp = src;
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	613b      	str	r3, [r7, #16]
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801d7c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d7c6:	697a      	ldr	r2, [r7, #20]
 801d7c8:	fb03 f202 	mul.w	r2, r3, r2
 801d7cc:	69bb      	ldr	r3, [r7, #24]
 801d7ce:	4413      	add	r3, r2
 801d7d0:	005b      	lsls	r3, r3, #1
 801d7d2:	461a      	mov	r2, r3
 801d7d4:	693b      	ldr	r3, [r7, #16]
 801d7d6:	4413      	add	r3, r2
 801d7d8:	613b      	str	r3, [r7, #16]

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801d7da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d7de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d7e0:	4413      	add	r3, r2
 801d7e2:	693a      	ldr	r2, [r7, #16]
 801d7e4:	7812      	ldrb	r2, [r2, #0]
 801d7e6:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 16
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801d7e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d7ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d7ee:	4413      	add	r3, r2
 801d7f0:	693a      	ldr	r2, [r7, #16]
 801d7f2:	7852      	ldrb	r2, [r2, #1]
 801d7f4:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801d7f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d7fa:	b29b      	uxth	r3, r3
 801d7fc:	3301      	adds	r3, #1
 801d7fe:	b29b      	uxth	r3, r3
 801d800:	84fb      	strh	r3, [r7, #38]	; 0x26
 801d802:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d808:	429a      	cmp	r2, r3
 801d80a:	dca9      	bgt.n	801d760 <argb_no_aa+0x28>
        }
    }
}
 801d80c:	bf00      	nop
 801d80e:	bf00      	nop
 801d810:	372c      	adds	r7, #44	; 0x2c
 801d812:	46bd      	mov	sp, r7
 801d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d818:	4770      	bx	lr

0801d81a <argb_and_rgb_aa>:


static void argb_and_rgb_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                            int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                            int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801d81a:	b590      	push	{r4, r7, lr}
 801d81c:	b09b      	sub	sp, #108	; 0x6c
 801d81e:	af00      	add	r7, sp, #0
 801d820:	60f8      	str	r0, [r7, #12]
 801d822:	4608      	mov	r0, r1
 801d824:	4611      	mov	r1, r2
 801d826:	461a      	mov	r2, r3
 801d828:	4603      	mov	r3, r0
 801d82a:	817b      	strh	r3, [r7, #10]
 801d82c:	460b      	mov	r3, r1
 801d82e:	813b      	strh	r3, [r7, #8]
 801d830:	4613      	mov	r3, r2
 801d832:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801d834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d836:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t ys_ups_start = ys_ups;
 801d838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d83a:	643b      	str	r3, [r7, #64]	; 0x40
    bool has_alpha;
    int32_t px_size;
    lv_color_t ck = {0};
 801d83c:	2300      	movs	r3, #0
 801d83e:	f887 3020 	strb.w	r3, [r7, #32]
    switch(cf) {
 801d842:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801d846:	2b06      	cmp	r3, #6
 801d848:	d013      	beq.n	801d872 <argb_and_rgb_aa+0x58>
 801d84a:	2b06      	cmp	r3, #6
 801d84c:	f300 8214 	bgt.w	801dc78 <argb_and_rgb_aa+0x45e>
 801d850:	2b04      	cmp	r3, #4
 801d852:	d002      	beq.n	801d85a <argb_and_rgb_aa+0x40>
 801d854:	2b05      	cmp	r3, #5
 801d856:	d006      	beq.n	801d866 <argb_and_rgb_aa+0x4c>
            has_alpha = true;
            px_size = sizeof(lv_color_t);
            break;
#endif
        default:
            return;
 801d858:	e20e      	b.n	801dc78 <argb_and_rgb_aa+0x45e>
            has_alpha = false;
 801d85a:	2300      	movs	r3, #0
 801d85c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = sizeof(lv_color_t);
 801d860:	2301      	movs	r3, #1
 801d862:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801d864:	e014      	b.n	801d890 <argb_and_rgb_aa+0x76>
            has_alpha = true;
 801d866:	2301      	movs	r3, #1
 801d868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 801d86c:	2302      	movs	r3, #2
 801d86e:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801d870:	e00e      	b.n	801d890 <argb_and_rgb_aa+0x76>
                has_alpha = true;
 801d872:	2301      	movs	r3, #1
 801d874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                px_size = sizeof(lv_color_t);
 801d878:	2301      	movs	r3, #1
 801d87a:	663b      	str	r3, [r7, #96]	; 0x60
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801d87c:	f7ef fcba 	bl	800d1f4 <_lv_refr_get_disp_refreshing>
 801d880:	63f8      	str	r0, [r7, #60]	; 0x3c
                ck = d->driver->color_chroma_key;
 801d882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801d88a:	f887 3020 	strb.w	r3, [r7, #32]
                break;
 801d88e:	bf00      	nop
    }

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801d890:	2300      	movs	r3, #0
 801d892:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d896:	e1e7      	b.n	801dc68 <argb_and_rgb_aa+0x44e>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801d898:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d89c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801d8a0:	fb02 f303 	mul.w	r3, r2, r3
 801d8a4:	121b      	asrs	r3, r3, #8
 801d8a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d8a8:	4413      	add	r3, r2
 801d8aa:	67bb      	str	r3, [r7, #120]	; 0x78
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801d8ac:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d8b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d8b4:	fb02 f303 	mul.w	r3, r2, r3
 801d8b8:	121b      	asrs	r3, r3, #8
 801d8ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d8bc:	4413      	add	r3, r2
 801d8be:	67fb      	str	r3, [r7, #124]	; 0x7c

        int32_t xs_int = xs_ups >> 8;
 801d8c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d8c2:	121b      	asrs	r3, r3, #8
 801d8c4:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t ys_int = ys_ups >> 8;
 801d8c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d8c8:	121b      	asrs	r3, r3, #8
 801d8ca:	637b      	str	r3, [r7, #52]	; 0x34

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	db0c      	blt.n	801d8ec <argb_and_rgb_aa+0xd2>
 801d8d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801d8d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d8d8:	429a      	cmp	r2, r3
 801d8da:	da07      	bge.n	801d8ec <argb_and_rgb_aa+0xd2>
 801d8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	db04      	blt.n	801d8ec <argb_and_rgb_aa+0xd2>
 801d8e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d8e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d8e8:	429a      	cmp	r2, r3
 801d8ea:	db07      	blt.n	801d8fc <argb_and_rgb_aa+0xe2>
            abuf[x] = 0x00;
 801d8ec:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801d8f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d8f4:	4413      	add	r3, r2
 801d8f6:	2200      	movs	r2, #0
 801d8f8:	701a      	strb	r2, [r3, #0]
            continue;
 801d8fa:	e1ae      	b.n	801dc5a <argb_and_rgb_aa+0x440>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 801d8fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d8fe:	b2db      	uxtb	r3, r3
 801d900:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_fract = ys_ups & 0xFF;
 801d902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d904:	b2db      	uxtb	r3, r3
 801d906:	657b      	str	r3, [r7, #84]	; 0x54

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 801d908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d90a:	2b7f      	cmp	r3, #127	; 0x7f
 801d90c:	dc08      	bgt.n	801d920 <argb_and_rgb_aa+0x106>
            x_next = -1;
 801d90e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d912:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (0x7F - xs_fract) * 2;
 801d914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d916:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801d91a:	005b      	lsls	r3, r3, #1
 801d91c:	65bb      	str	r3, [r7, #88]	; 0x58
 801d91e:	e005      	b.n	801d92c <argb_and_rgb_aa+0x112>
        }
        else {
            x_next = 1;
 801d920:	2301      	movs	r3, #1
 801d922:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (xs_fract - 0x80) * 2;
 801d924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d926:	3b80      	subs	r3, #128	; 0x80
 801d928:	005b      	lsls	r3, r3, #1
 801d92a:	65bb      	str	r3, [r7, #88]	; 0x58
        }
        if(ys_fract < 0x80) {
 801d92c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d92e:	2b7f      	cmp	r3, #127	; 0x7f
 801d930:	dc08      	bgt.n	801d944 <argb_and_rgb_aa+0x12a>
            y_next = -1;
 801d932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d936:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (0x7F - ys_fract) * 2;
 801d938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d93a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801d93e:	005b      	lsls	r3, r3, #1
 801d940:	657b      	str	r3, [r7, #84]	; 0x54
 801d942:	e005      	b.n	801d950 <argb_and_rgb_aa+0x136>
        }
        else {
            y_next = 1;
 801d944:	2301      	movs	r3, #1
 801d946:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (ys_fract - 0x80) * 2;
 801d948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d94a:	3b80      	subs	r3, #128	; 0x80
 801d94c:	005b      	lsls	r3, r3, #1
 801d94e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        const uint8_t * src_tmp = src;
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	633b      	str	r3, [r7, #48]	; 0x30
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 801d954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d95a:	fb02 f303 	mul.w	r3, r2, r3
 801d95e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d960:	fb03 f202 	mul.w	r2, r3, r2
 801d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d966:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d968:	fb01 f303 	mul.w	r3, r1, r3
 801d96c:	4413      	add	r3, r2
 801d96e:	461a      	mov	r2, r3
 801d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d972:	4413      	add	r3, r2
 801d974:	633b      	str	r3, [r7, #48]	; 0x30


        if(xs_int + x_next >= 0 &&
 801d976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d97a:	4413      	add	r3, r2
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	f2c0 80fe 	blt.w	801db7e <argb_and_rgb_aa+0x364>
           xs_int + x_next <= src_w - 1 &&
 801d982:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801d986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d98a:	440b      	add	r3, r1
        if(xs_int + x_next >= 0 &&
 801d98c:	429a      	cmp	r2, r3
 801d98e:	f340 80f6 	ble.w	801db7e <argb_and_rgb_aa+0x364>
           ys_int + y_next >= 0 &&
 801d992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d996:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 801d998:	2b00      	cmp	r3, #0
 801d99a:	f2c0 80f0 	blt.w	801db7e <argb_and_rgb_aa+0x364>
           ys_int + y_next <= src_h - 1) {
 801d99e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801d9a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9a6:	440b      	add	r3, r1
           ys_int + y_next >= 0 &&
 801d9a8:	429a      	cmp	r2, r3
 801d9aa:	f340 80e8 	ble.w	801db7e <argb_and_rgb_aa+0x364>

            const uint8_t * px_base = src_tmp;
 801d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 801d9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d9b6:	fb02 f303 	mul.w	r3, r2, r3
 801d9ba:	461a      	mov	r2, r3
 801d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9be:	4413      	add	r3, r2
 801d9c0:	62bb      	str	r3, [r7, #40]	; 0x28
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 801d9c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d9c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d9c8:	fb02 f303 	mul.w	r3, r2, r3
 801d9cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801d9ce:	fb02 f303 	mul.w	r3, r2, r3
 801d9d2:	461a      	mov	r2, r3
 801d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9d6:	4413      	add	r3, r2
 801d9d8:	627b      	str	r3, [r7, #36]	; 0x24
            lv_color_t c_base;
            lv_color_t c_ver;
            lv_color_t c_hor;

            if(has_alpha) {
 801d9da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	f000 808e 	beq.w	801db00 <argb_and_rgb_aa+0x2e6>
                lv_opa_t a_base;
                lv_opa_t a_ver;
                lv_opa_t a_hor;
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801d9e4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801d9e8:	2b05      	cmp	r3, #5
 801d9ea:	d10c      	bne.n	801da06 <argb_and_rgb_aa+0x1ec>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9ee:	785b      	ldrb	r3, [r3, #1]
 801d9f0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9f6:	785b      	ldrb	r3, [r3, #1]
 801d9f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9fe:	785b      	ldrb	r3, [r3, #1]
 801da00:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801da04:	e030      	b.n	801da68 <argb_and_rgb_aa+0x24e>
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
                }
#endif
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801da06:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801da0a:	2b06      	cmp	r3, #6
 801da0c:	d123      	bne.n	801da56 <argb_and_rgb_aa+0x23c>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da10:	781a      	ldrb	r2, [r3, #0]
 801da12:	f897 3020 	ldrb.w	r3, [r7, #32]
 801da16:	429a      	cmp	r2, r3
 801da18:	d00b      	beq.n	801da32 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da1c:	781a      	ldrb	r2, [r3, #0]
 801da1e:	f897 3020 	ldrb.w	r3, [r7, #32]
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801da22:	429a      	cmp	r2, r3
 801da24:	d005      	beq.n	801da32 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_hor)->full == ck.full) {
 801da26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da28:	781a      	ldrb	r2, [r3, #0]
 801da2a:	f897 3020 	ldrb.w	r3, [r7, #32]
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801da2e:	429a      	cmp	r2, r3
 801da30:	d107      	bne.n	801da42 <argb_and_rgb_aa+0x228>
                        abuf[x] = 0x00;
 801da32:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801da36:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801da3a:	4413      	add	r3, r2
 801da3c:	2200      	movs	r2, #0
 801da3e:	701a      	strb	r2, [r3, #0]
                        continue;
 801da40:	e10b      	b.n	801dc5a <argb_and_rgb_aa+0x440>
                    }
                    else {
                        a_base = 0xff;
 801da42:	23ff      	movs	r3, #255	; 0xff
 801da44:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                        a_ver = 0xff;
 801da48:	23ff      	movs	r3, #255	; 0xff
 801da4a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                        a_hor = 0xff;
 801da4e:	23ff      	movs	r3, #255	; 0xff
 801da50:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801da54:	e008      	b.n	801da68 <argb_and_rgb_aa+0x24e>
                    }
                }
                else {
                    a_base = 0xff;
 801da56:	23ff      	movs	r3, #255	; 0xff
 801da58:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = 0xff;
 801da5c:	23ff      	movs	r3, #255	; 0xff
 801da5e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = 0xff;
 801da62:	23ff      	movs	r3, #255	; 0xff
 801da64:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                }

                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 801da68:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801da6c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801da70:	429a      	cmp	r2, r3
 801da72:	d00f      	beq.n	801da94 <argb_and_rgb_aa+0x27a>
 801da74:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801da78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801da7a:	fb03 f202 	mul.w	r2, r3, r2
 801da7e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801da82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801da84:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801da88:	fb01 f303 	mul.w	r3, r1, r3
 801da8c:	4413      	add	r3, r2
 801da8e:	121b      	asrs	r3, r3, #8
 801da90:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 801da94:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 801da98:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801da9c:	429a      	cmp	r2, r3
 801da9e:	d00f      	beq.n	801dac0 <argb_and_rgb_aa+0x2a6>
 801daa0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801daa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801daa6:	fb03 f202 	mul.w	r2, r3, r2
 801daaa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801daae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801dab0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801dab4:	fb01 f303 	mul.w	r3, r1, r3
 801dab8:	4413      	add	r3, r2
 801daba:	121b      	asrs	r3, r3, #8
 801dabc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                abuf[x] = (a_ver + a_hor) >> 1;
 801dac0:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801dac4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801dac8:	4413      	add	r3, r2
 801daca:	1059      	asrs	r1, r3, #1
 801dacc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dad0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801dad4:	4413      	add	r3, r2
 801dad6:	b2ca      	uxtb	r2, r1
 801dad8:	701a      	strb	r2, [r3, #0]

                if(abuf[x] == 0x00) continue;
 801dada:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dade:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801dae2:	4413      	add	r3, r2
 801dae4:	781b      	ldrb	r3, [r3, #0]
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	f000 80b6 	beq.w	801dc58 <argb_and_rgb_aa+0x43e>

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
                c_base.full = px_base[0];
 801daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daee:	781b      	ldrb	r3, [r3, #0]
 801daf0:	773b      	strb	r3, [r7, #28]
                c_ver.full = px_ver[0];
 801daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daf4:	781b      	ldrb	r3, [r3, #0]
 801daf6:	763b      	strb	r3, [r7, #24]
                c_hor.full = px_hor[0];
 801daf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dafa:	781b      	ldrb	r3, [r3, #0]
 801dafc:	753b      	strb	r3, [r7, #20]
 801dafe:	e00f      	b.n	801db20 <argb_and_rgb_aa+0x306>
                c_hor.full = *((uint32_t *)px_hor);
#endif
            }
            /*No alpha channel -> RGB*/
            else {
                c_base = *((const lv_color_t *) px_base);
 801db00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db02:	781b      	ldrb	r3, [r3, #0]
 801db04:	773b      	strb	r3, [r7, #28]
                c_hor = *((const lv_color_t *) px_hor);
 801db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db08:	781b      	ldrb	r3, [r3, #0]
 801db0a:	753b      	strb	r3, [r7, #20]
                c_ver = *((const lv_color_t *) px_ver);
 801db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db0e:	781b      	ldrb	r3, [r3, #0]
 801db10:	763b      	strb	r3, [r7, #24]
                abuf[x] = 0xff;
 801db12:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801db16:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801db1a:	4413      	add	r3, r2
 801db1c:	22ff      	movs	r2, #255	; 0xff
 801db1e:	701a      	strb	r2, [r3, #0]
            }

            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 801db20:	7f3a      	ldrb	r2, [r7, #28]
 801db22:	7e3b      	ldrb	r3, [r7, #24]
 801db24:	429a      	cmp	r2, r3
 801db26:	d10b      	bne.n	801db40 <argb_and_rgb_aa+0x326>
 801db28:	7f3a      	ldrb	r2, [r7, #28]
 801db2a:	7d3b      	ldrb	r3, [r7, #20]
 801db2c:	429a      	cmp	r2, r3
 801db2e:	d107      	bne.n	801db40 <argb_and_rgb_aa+0x326>
                cbuf[x] = c_base;
 801db30:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801db34:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801db38:	4413      	add	r3, r2
 801db3a:	7f3a      	ldrb	r2, [r7, #28]
 801db3c:	701a      	strb	r2, [r3, #0]
           ys_int + y_next <= src_h - 1) {
 801db3e:	e08c      	b.n	801dc5a <argb_and_rgb_aa+0x440>
            }
            else {
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 801db40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db42:	b2db      	uxtb	r3, r3
 801db44:	461a      	mov	r2, r3
 801db46:	7f39      	ldrb	r1, [r7, #28]
 801db48:	7e38      	ldrb	r0, [r7, #24]
 801db4a:	f7ff fbaf 	bl	801d2ac <lv_color_mix>
 801db4e:	4603      	mov	r3, r0
 801db50:	763b      	strb	r3, [r7, #24]
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 801db52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801db54:	b2db      	uxtb	r3, r3
 801db56:	461a      	mov	r2, r3
 801db58:	7f39      	ldrb	r1, [r7, #28]
 801db5a:	7d38      	ldrb	r0, [r7, #20]
 801db5c:	f7ff fba6 	bl	801d2ac <lv_color_mix>
 801db60:	4603      	mov	r3, r0
 801db62:	753b      	strb	r3, [r7, #20]
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 801db64:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801db68:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801db6c:	18d4      	adds	r4, r2, r3
 801db6e:	227f      	movs	r2, #127	; 0x7f
 801db70:	7e39      	ldrb	r1, [r7, #24]
 801db72:	7d38      	ldrb	r0, [r7, #20]
 801db74:	f7ff fb9a 	bl	801d2ac <lv_color_mix>
 801db78:	4603      	mov	r3, r0
 801db7a:	7023      	strb	r3, [r4, #0]
           ys_int + y_next <= src_h - 1) {
 801db7c:	e06d      	b.n	801dc5a <argb_and_rgb_aa+0x440>
            }
        }
        /*Partially out of the image*/
        else {
#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801db7e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801db82:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801db86:	4413      	add	r3, r2
 801db88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db8a:	7812      	ldrb	r2, [r2, #0]
 801db8c:	701a      	strb	r2, [r3, #0]
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            lv_opa_t a;
            switch(cf) {
 801db8e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801db92:	2b05      	cmp	r3, #5
 801db94:	d002      	beq.n	801db9c <argb_and_rgb_aa+0x382>
 801db96:	2b06      	cmp	r3, #6
 801db98:	d005      	beq.n	801dba6 <argb_and_rgb_aa+0x38c>
 801db9a:	e014      	b.n	801dbc6 <argb_and_rgb_aa+0x3ac>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db9e:	785b      	ldrb	r3, [r3, #1]
 801dba0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801dba4:	e012      	b.n	801dbcc <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 801dba6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dbaa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801dbae:	4413      	add	r3, r2
 801dbb0:	781a      	ldrb	r2, [r3, #0]
 801dbb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dbb6:	429a      	cmp	r2, r3
 801dbb8:	d101      	bne.n	801dbbe <argb_and_rgb_aa+0x3a4>
 801dbba:	2300      	movs	r3, #0
 801dbbc:	e000      	b.n	801dbc0 <argb_and_rgb_aa+0x3a6>
 801dbbe:	23ff      	movs	r3, #255	; 0xff
 801dbc0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801dbc4:	e002      	b.n	801dbcc <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_RGB565A8:
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
                    break;
#endif
                default:
                    a = 0xff;
 801dbc6:	23ff      	movs	r3, #255	; 0xff
 801dbc8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d102      	bne.n	801dbd8 <argb_and_rgb_aa+0x3be>
 801dbd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	db08      	blt.n	801dbea <argb_and_rgb_aa+0x3d0>
 801dbd8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801dbdc:	3b01      	subs	r3, #1
 801dbde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dbe0:	429a      	cmp	r2, r3
 801dbe2:	d112      	bne.n	801dc0a <argb_and_rgb_aa+0x3f0>
 801dbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	dd0f      	ble.n	801dc0a <argb_and_rgb_aa+0x3f0>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 801dbea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801dbee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801dbf0:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801dbf4:	fb02 f303 	mul.w	r3, r2, r3
 801dbf8:	1219      	asrs	r1, r3, #8
 801dbfa:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dbfe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801dc02:	4413      	add	r3, r2
 801dc04:	b2ca      	uxtb	r2, r1
 801dc06:	701a      	strb	r2, [r3, #0]
 801dc08:	e027      	b.n	801dc5a <argb_and_rgb_aa+0x440>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 801dc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d102      	bne.n	801dc16 <argb_and_rgb_aa+0x3fc>
 801dc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	db08      	blt.n	801dc28 <argb_and_rgb_aa+0x40e>
 801dc16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801dc1a:	3b01      	subs	r3, #1
 801dc1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dc1e:	429a      	cmp	r2, r3
 801dc20:	d112      	bne.n	801dc48 <argb_and_rgb_aa+0x42e>
 801dc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	dd0f      	ble.n	801dc48 <argb_and_rgb_aa+0x42e>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 801dc28:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801dc2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801dc2e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801dc32:	fb02 f303 	mul.w	r3, r2, r3
 801dc36:	1219      	asrs	r1, r3, #8
 801dc38:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dc3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801dc40:	4413      	add	r3, r2
 801dc42:	b2ca      	uxtb	r2, r1
 801dc44:	701a      	strb	r2, [r3, #0]
 801dc46:	e008      	b.n	801dc5a <argb_and_rgb_aa+0x440>
            }
            else {
                abuf[x] = 0x00;
 801dc48:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dc4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801dc50:	4413      	add	r3, r2
 801dc52:	2200      	movs	r2, #0
 801dc54:	701a      	strb	r2, [r3, #0]
 801dc56:	e000      	b.n	801dc5a <argb_and_rgb_aa+0x440>
                if(abuf[x] == 0x00) continue;
 801dc58:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 801dc5a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dc5e:	b29b      	uxth	r3, r3
 801dc60:	3301      	adds	r3, #1
 801dc62:	b29b      	uxth	r3, r3
 801dc64:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801dc68:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dc6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801dc70:	429a      	cmp	r2, r3
 801dc72:	f73f ae11 	bgt.w	801d898 <argb_and_rgb_aa+0x7e>
 801dc76:	e000      	b.n	801dc7a <argb_and_rgb_aa+0x460>
            return;
 801dc78:	bf00      	nop
            }
        }
    }
}
 801dc7a:	376c      	adds	r7, #108	; 0x6c
 801dc7c:	46bd      	mov	sp, r7
 801dc7e:	bd90      	pop	{r4, r7, pc}

0801dc80 <transform_point_upscaled>:

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 801dc80:	b480      	push	{r7}
 801dc82:	b085      	sub	sp, #20
 801dc84:	af00      	add	r7, sp, #0
 801dc86:	60f8      	str	r0, [r7, #12]
 801dc88:	60b9      	str	r1, [r7, #8]
 801dc8a:	607a      	str	r2, [r7, #4]
 801dc8c:	603b      	str	r3, [r7, #0]
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 801dc8e:	68fb      	ldr	r3, [r7, #12]
 801dc90:	69db      	ldr	r3, [r3, #28]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d10d      	bne.n	801dcb2 <transform_point_upscaled+0x32>
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	699b      	ldr	r3, [r3, #24]
 801dc9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dc9e:	d108      	bne.n	801dcb2 <transform_point_upscaled+0x32>
        *xout = xin * 256;
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	021a      	lsls	r2, r3, #8
 801dca4:	683b      	ldr	r3, [r7, #0]
 801dca6:	601a      	str	r2, [r3, #0]
        *yout = yin * 256;
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	021a      	lsls	r2, r3, #8
 801dcac:	69bb      	ldr	r3, [r7, #24]
 801dcae:	601a      	str	r2, [r3, #0]
        return;
 801dcb0:	e078      	b.n	801dda4 <transform_point_upscaled+0x124>
    }

    xin -= t->pivot.x;
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801dcb8:	461a      	mov	r2, r3
 801dcba:	68bb      	ldr	r3, [r7, #8]
 801dcbc:	1a9b      	subs	r3, r3, r2
 801dcbe:	60bb      	str	r3, [r7, #8]
    yin -= t->pivot.y;
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801dcc6:	461a      	mov	r2, r3
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	1a9b      	subs	r3, r3, r2
 801dccc:	607b      	str	r3, [r7, #4]

    if(t->angle == 0) {
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	69db      	ldr	r3, [r3, #28]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d114      	bne.n	801dd00 <transform_point_upscaled+0x80>
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 801dcd6:	68fb      	ldr	r3, [r7, #12]
 801dcd8:	699b      	ldr	r3, [r3, #24]
 801dcda:	68ba      	ldr	r2, [r7, #8]
 801dcdc:	fb03 f202 	mul.w	r2, r3, r2
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	6a1b      	ldr	r3, [r3, #32]
 801dce4:	441a      	add	r2, r3
 801dce6:	683b      	ldr	r3, [r7, #0]
 801dce8:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 801dcea:	68fb      	ldr	r3, [r7, #12]
 801dcec:	699b      	ldr	r3, [r3, #24]
 801dcee:	687a      	ldr	r2, [r7, #4]
 801dcf0:	fb03 f202 	mul.w	r2, r3, r2
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcf8:	441a      	add	r2, r3
 801dcfa:	69bb      	ldr	r3, [r7, #24]
 801dcfc:	601a      	str	r2, [r3, #0]
 801dcfe:	e051      	b.n	801dda4 <transform_point_upscaled+0x124>
    }
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	699b      	ldr	r3, [r3, #24]
 801dd04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dd08:	d122      	bne.n	801dd50 <transform_point_upscaled+0xd0>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	695b      	ldr	r3, [r3, #20]
 801dd0e:	68ba      	ldr	r2, [r7, #8]
 801dd10:	fb03 f202 	mul.w	r2, r3, r2
 801dd14:	68fb      	ldr	r3, [r7, #12]
 801dd16:	691b      	ldr	r3, [r3, #16]
 801dd18:	6879      	ldr	r1, [r7, #4]
 801dd1a:	fb01 f303 	mul.w	r3, r1, r3
 801dd1e:	1ad3      	subs	r3, r2, r3
 801dd20:	109a      	asrs	r2, r3, #2
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	6a1b      	ldr	r3, [r3, #32]
 801dd26:	441a      	add	r2, r3
 801dd28:	683b      	ldr	r3, [r7, #0]
 801dd2a:	601a      	str	r2, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 801dd2c:	68fb      	ldr	r3, [r7, #12]
 801dd2e:	691b      	ldr	r3, [r3, #16]
 801dd30:	68ba      	ldr	r2, [r7, #8]
 801dd32:	fb03 f202 	mul.w	r2, r3, r2
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	695b      	ldr	r3, [r3, #20]
 801dd3a:	6879      	ldr	r1, [r7, #4]
 801dd3c:	fb01 f303 	mul.w	r3, r1, r3
 801dd40:	4413      	add	r3, r2
 801dd42:	109a      	asrs	r2, r3, #2
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd48:	441a      	add	r2, r3
 801dd4a:	69bb      	ldr	r3, [r7, #24]
 801dd4c:	601a      	str	r2, [r3, #0]
 801dd4e:	e029      	b.n	801dda4 <transform_point_upscaled+0x124>
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 801dd50:	68fb      	ldr	r3, [r7, #12]
 801dd52:	695b      	ldr	r3, [r3, #20]
 801dd54:	68ba      	ldr	r2, [r7, #8]
 801dd56:	fb03 f202 	mul.w	r2, r3, r2
 801dd5a:	68fb      	ldr	r3, [r7, #12]
 801dd5c:	691b      	ldr	r3, [r3, #16]
 801dd5e:	6879      	ldr	r1, [r7, #4]
 801dd60:	fb01 f303 	mul.w	r3, r1, r3
 801dd64:	1ad3      	subs	r3, r2, r3
 801dd66:	68fa      	ldr	r2, [r7, #12]
 801dd68:	6992      	ldr	r2, [r2, #24]
 801dd6a:	fb02 f303 	mul.w	r3, r2, r3
 801dd6e:	129a      	asrs	r2, r3, #10
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	6a1b      	ldr	r3, [r3, #32]
 801dd74:	441a      	add	r2, r3
 801dd76:	683b      	ldr	r3, [r7, #0]
 801dd78:	601a      	str	r2, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 801dd7a:	68fb      	ldr	r3, [r7, #12]
 801dd7c:	691b      	ldr	r3, [r3, #16]
 801dd7e:	68ba      	ldr	r2, [r7, #8]
 801dd80:	fb03 f202 	mul.w	r2, r3, r2
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	695b      	ldr	r3, [r3, #20]
 801dd88:	6879      	ldr	r1, [r7, #4]
 801dd8a:	fb01 f303 	mul.w	r3, r1, r3
 801dd8e:	4413      	add	r3, r2
 801dd90:	68fa      	ldr	r2, [r7, #12]
 801dd92:	6992      	ldr	r2, [r2, #24]
 801dd94:	fb02 f303 	mul.w	r3, r2, r3
 801dd98:	129a      	asrs	r2, r3, #10
 801dd9a:	68fb      	ldr	r3, [r7, #12]
 801dd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd9e:	441a      	add	r2, r3
 801dda0:	69bb      	ldr	r3, [r7, #24]
 801dda2:	601a      	str	r2, [r3, #0]
    }
}
 801dda4:	3714      	adds	r7, #20
 801dda6:	46bd      	mov	sp, r7
 801dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddac:	4770      	bx	lr

0801ddae <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 801ddae:	b480      	push	{r7}
 801ddb0:	af00      	add	r7, sp, #0
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 801ddb2:	bf00      	nop
 801ddb4:	46bd      	mov	sp, r7
 801ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddba:	4770      	bx	lr

0801ddbc <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 801ddbc:	b580      	push	{r7, lr}
 801ddbe:	b082      	sub	sp, #8
 801ddc0:	af00      	add	r7, sp, #0
 801ddc2:	6078      	str	r0, [r7, #4]
 801ddc4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_NULL(font_p);
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d100      	bne.n	801ddce <lv_font_get_glyph_bitmap+0x12>
 801ddcc:	e7fe      	b.n	801ddcc <lv_font_get_glyph_bitmap+0x10>
    return font_p->get_glyph_bitmap(font_p, letter);
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	685b      	ldr	r3, [r3, #4]
 801ddd2:	6839      	ldr	r1, [r7, #0]
 801ddd4:	6878      	ldr	r0, [r7, #4]
 801ddd6:	4798      	blx	r3
 801ddd8:	4603      	mov	r3, r0
}
 801ddda:	4618      	mov	r0, r3
 801dddc:	3708      	adds	r7, #8
 801ddde:	46bd      	mov	sp, r7
 801dde0:	bd80      	pop	{r7, pc}

0801dde2 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 801dde2:	b590      	push	{r4, r7, lr}
 801dde4:	b089      	sub	sp, #36	; 0x24
 801dde6:	af00      	add	r7, sp, #0
 801dde8:	60f8      	str	r0, [r7, #12]
 801ddea:	60b9      	str	r1, [r7, #8]
 801ddec:	607a      	str	r2, [r7, #4]
 801ddee:	603b      	str	r3, [r7, #0]

    LV_ASSERT_NULL(font_p);
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d100      	bne.n	801ddf8 <lv_font_get_glyph_dsc+0x16>
 801ddf6:	e7fe      	b.n	801ddf6 <lv_font_get_glyph_dsc+0x14>
    LV_ASSERT_NULL(dsc_out);
 801ddf8:	68bb      	ldr	r3, [r7, #8]
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d100      	bne.n	801de00 <lv_font_get_glyph_dsc+0x1e>
 801ddfe:	e7fe      	b.n	801ddfe <lv_font_get_glyph_dsc+0x1c>

#if LV_USE_FONT_PLACEHOLDER
    const lv_font_t * placeholder_font = NULL;
 801de00:	2300      	movs	r3, #0
 801de02:	61fb      	str	r3, [r7, #28]
#endif

    const lv_font_t * f = font_p;
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	61bb      	str	r3, [r7, #24]

    dsc_out->resolved_font = NULL;
 801de08:	68bb      	ldr	r3, [r7, #8]
 801de0a:	2200      	movs	r2, #0
 801de0c:	601a      	str	r2, [r3, #0]

    while(f) {
 801de0e:	e01f      	b.n	801de50 <lv_font_get_glyph_dsc+0x6e>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 801de10:	69bb      	ldr	r3, [r7, #24]
 801de12:	681c      	ldr	r4, [r3, #0]
 801de14:	683b      	ldr	r3, [r7, #0]
 801de16:	687a      	ldr	r2, [r7, #4]
 801de18:	68b9      	ldr	r1, [r7, #8]
 801de1a:	69b8      	ldr	r0, [r7, #24]
 801de1c:	47a0      	blx	r4
 801de1e:	4603      	mov	r3, r0
 801de20:	75fb      	strb	r3, [r7, #23]
        if(found) {
 801de22:	7dfb      	ldrb	r3, [r7, #23]
 801de24:	2b00      	cmp	r3, #0
 801de26:	d010      	beq.n	801de4a <lv_font_get_glyph_dsc+0x68>
            if(!dsc_out->is_placeholder) {
 801de28:	68bb      	ldr	r3, [r7, #8]
 801de2a:	7b9b      	ldrb	r3, [r3, #14]
 801de2c:	f003 0310 	and.w	r3, r3, #16
 801de30:	b2db      	uxtb	r3, r3
 801de32:	2b00      	cmp	r3, #0
 801de34:	d104      	bne.n	801de40 <lv_font_get_glyph_dsc+0x5e>
                dsc_out->resolved_font = f;
 801de36:	68bb      	ldr	r3, [r7, #8]
 801de38:	69ba      	ldr	r2, [r7, #24]
 801de3a:	601a      	str	r2, [r3, #0]
                return true;
 801de3c:	2301      	movs	r3, #1
 801de3e:	e059      	b.n	801def4 <lv_font_get_glyph_dsc+0x112>
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 801de40:	69fb      	ldr	r3, [r7, #28]
 801de42:	2b00      	cmp	r3, #0
 801de44:	d101      	bne.n	801de4a <lv_font_get_glyph_dsc+0x68>
                placeholder_font = f;
 801de46:	69bb      	ldr	r3, [r7, #24]
 801de48:	61fb      	str	r3, [r7, #28]
            }
#endif
        }
        f = f->fallback;
 801de4a:	69bb      	ldr	r3, [r7, #24]
 801de4c:	695b      	ldr	r3, [r3, #20]
 801de4e:	61bb      	str	r3, [r7, #24]
    while(f) {
 801de50:	69bb      	ldr	r3, [r7, #24]
 801de52:	2b00      	cmp	r3, #0
 801de54:	d1dc      	bne.n	801de10 <lv_font_get_glyph_dsc+0x2e>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 801de56:	69fb      	ldr	r3, [r7, #28]
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d00b      	beq.n	801de74 <lv_font_get_glyph_dsc+0x92>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 801de5c:	69fb      	ldr	r3, [r7, #28]
 801de5e:	681c      	ldr	r4, [r3, #0]
 801de60:	683b      	ldr	r3, [r7, #0]
 801de62:	687a      	ldr	r2, [r7, #4]
 801de64:	68b9      	ldr	r1, [r7, #8]
 801de66:	69f8      	ldr	r0, [r7, #28]
 801de68:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 801de6a:	68bb      	ldr	r3, [r7, #8]
 801de6c:	69fa      	ldr	r2, [r7, #28]
 801de6e:	601a      	str	r2, [r3, #0]
        return true;
 801de70:	2301      	movs	r3, #1
 801de72:	e03f      	b.n	801def4 <lv_font_get_glyph_dsc+0x112>
    }
#endif

    if(letter < 0x20 ||
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	2b1f      	cmp	r3, #31
 801de78:	d909      	bls.n	801de8e <lv_font_get_glyph_dsc+0xac>
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801de80:	4293      	cmp	r3, r2
 801de82:	d004      	beq.n	801de8e <lv_font_get_glyph_dsc+0xac>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	f242 020c 	movw	r2, #8204	; 0x200c
 801de8a:	4293      	cmp	r3, r2
 801de8c:	d106      	bne.n	801de9c <lv_font_get_glyph_dsc+0xba>
       letter == 0x200c) { /*ZERO WIDTH NON-JOINER*/
        dsc_out->box_w = 0;
 801de8e:	68bb      	ldr	r3, [r7, #8]
 801de90:	2200      	movs	r2, #0
 801de92:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = 0;
 801de94:	68bb      	ldr	r3, [r7, #8]
 801de96:	2200      	movs	r2, #0
 801de98:	809a      	strh	r2, [r3, #4]
 801de9a:	e010      	b.n	801debe <lv_font_get_glyph_dsc+0xdc>
    }
    else {
#if LV_USE_FONT_PLACEHOLDER
        dsc_out->box_w = font_p->line_height / 2;
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	da00      	bge.n	801dea8 <lv_font_get_glyph_dsc+0xc6>
 801dea6:	3301      	adds	r3, #1
 801dea8:	105b      	asrs	r3, r3, #1
 801deaa:	b21b      	sxth	r3, r3
 801deac:	b29a      	uxth	r2, r3
 801deae:	68bb      	ldr	r3, [r7, #8]
 801deb0:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 801deb2:	68bb      	ldr	r3, [r7, #8]
 801deb4:	88db      	ldrh	r3, [r3, #6]
 801deb6:	3302      	adds	r3, #2
 801deb8:	b29a      	uxth	r2, r3
 801deba:	68bb      	ldr	r3, [r7, #8]
 801debc:	809a      	strh	r2, [r3, #4]
        dsc_out->box_w = 0;
        dsc_out->adv_w = 0;
#endif
    }

    dsc_out->resolved_font = NULL;
 801debe:	68bb      	ldr	r3, [r7, #8]
 801dec0:	2200      	movs	r2, #0
 801dec2:	601a      	str	r2, [r3, #0]
    dsc_out->box_h = font_p->line_height;
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801deca:	b29a      	uxth	r2, r3
 801decc:	68bb      	ldr	r3, [r7, #8]
 801dece:	811a      	strh	r2, [r3, #8]
    dsc_out->ofs_x = 0;
 801ded0:	68bb      	ldr	r3, [r7, #8]
 801ded2:	2200      	movs	r2, #0
 801ded4:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = 0;
 801ded6:	68bb      	ldr	r3, [r7, #8]
 801ded8:	2200      	movs	r2, #0
 801deda:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = 1;
 801dedc:	68ba      	ldr	r2, [r7, #8]
 801dede:	7b93      	ldrb	r3, [r2, #14]
 801dee0:	2101      	movs	r1, #1
 801dee2:	f361 0303 	bfi	r3, r1, #0, #4
 801dee6:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = true;
 801dee8:	68ba      	ldr	r2, [r7, #8]
 801deea:	7b93      	ldrb	r3, [r2, #14]
 801deec:	f043 0310 	orr.w	r3, r3, #16
 801def0:	7393      	strb	r3, [r2, #14]

    return false;
 801def2:	2300      	movs	r3, #0
}
 801def4:	4618      	mov	r0, r3
 801def6:	3724      	adds	r7, #36	; 0x24
 801def8:	46bd      	mov	sp, r7
 801defa:	bd90      	pop	{r4, r7, pc}

0801defc <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b088      	sub	sp, #32
 801df00:	af00      	add	r7, sp, #0
 801df02:	60f8      	str	r0, [r7, #12]
 801df04:	60b9      	str	r1, [r7, #8]
 801df06:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(font);
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d100      	bne.n	801df10 <lv_font_get_glyph_width+0x14>
 801df0e:	e7fe      	b.n	801df0e <lv_font_get_glyph_width+0x12>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 801df10:	f107 0110 	add.w	r1, r7, #16
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	68ba      	ldr	r2, [r7, #8]
 801df18:	68f8      	ldr	r0, [r7, #12]
 801df1a:	f7ff ff62 	bl	801dde2 <lv_font_get_glyph_dsc>
    return g.adv_w;
 801df1e:	8abb      	ldrh	r3, [r7, #20]
}
 801df20:	4618      	mov	r0, r3
 801df22:	3720      	adds	r7, #32
 801df24:	46bd      	mov	sp, r7
 801df26:	bd80      	pop	{r7, pc}

0801df28 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter a unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 801df28:	b580      	push	{r7, lr}
 801df2a:	b086      	sub	sp, #24
 801df2c:	af00      	add	r7, sp, #0
 801df2e:	6078      	str	r0, [r7, #4]
 801df30:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 801df32:	683b      	ldr	r3, [r7, #0]
 801df34:	2b09      	cmp	r3, #9
 801df36:	d101      	bne.n	801df3c <lv_font_get_bitmap_fmt_txt+0x14>
 801df38:	2320      	movs	r3, #32
 801df3a:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	691b      	ldr	r3, [r3, #16]
 801df40:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801df42:	6839      	ldr	r1, [r7, #0]
 801df44:	6878      	ldr	r0, [r7, #4]
 801df46:	f000 f8b9 	bl	801e0bc <get_glyph_dsc_id>
 801df4a:	6138      	str	r0, [r7, #16]
    if(!gid) return NULL;
 801df4c:	693b      	ldr	r3, [r7, #16]
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d101      	bne.n	801df56 <lv_font_get_bitmap_fmt_txt+0x2e>
 801df52:	2300      	movs	r3, #0
 801df54:	e015      	b.n	801df82 <lv_font_get_bitmap_fmt_txt+0x5a>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801df56:	697b      	ldr	r3, [r7, #20]
 801df58:	685a      	ldr	r2, [r3, #4]
 801df5a:	693b      	ldr	r3, [r7, #16]
 801df5c:	00db      	lsls	r3, r3, #3
 801df5e:	4413      	add	r3, r2
 801df60:	60fb      	str	r3, [r7, #12]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 801df62:	697b      	ldr	r3, [r7, #20]
 801df64:	7cdb      	ldrb	r3, [r3, #19]
 801df66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801df6a:	b2db      	uxtb	r3, r3
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	d107      	bne.n	801df80 <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801df70:	697b      	ldr	r3, [r7, #20]
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	68fa      	ldr	r2, [r7, #12]
 801df76:	6812      	ldr	r2, [r2, #0]
 801df78:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801df7c:	4413      	add	r3, r2
 801df7e:	e000      	b.n	801df82 <lv_font_get_bitmap_fmt_txt+0x5a>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
                   (uint8_t)fdsc->bpp, prefilter);
        return LV_GC_ROOT(_lv_font_decompr_buf);
#else /*!LV_USE_FONT_COMPRESSED*/
        LV_LOG_WARN("Compressed fonts is used but LV_USE_FONT_COMPRESSED is not enabled in lv_conf.h");
        return NULL;
 801df80:	2300      	movs	r3, #0
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 801df82:	4618      	mov	r0, r3
 801df84:	3718      	adds	r7, #24
 801df86:	46bd      	mov	sp, r7
 801df88:	bd80      	pop	{r7, pc}

0801df8a <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 801df8a:	b580      	push	{r7, lr}
 801df8c:	b08c      	sub	sp, #48	; 0x30
 801df8e:	af00      	add	r7, sp, #0
 801df90:	60f8      	str	r0, [r7, #12]
 801df92:	60b9      	str	r1, [r7, #8]
 801df94:	607a      	str	r2, [r7, #4]
 801df96:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 801df98:	2300      	movs	r3, #0
 801df9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	2b09      	cmp	r3, #9
 801dfa2:	d104      	bne.n	801dfae <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 801dfa4:	2320      	movs	r3, #32
 801dfa6:	607b      	str	r3, [r7, #4]
        is_tab = true;
 801dfa8:	2301      	movs	r3, #1
 801dfaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801dfae:	68fb      	ldr	r3, [r7, #12]
 801dfb0:	691b      	ldr	r3, [r3, #16]
 801dfb2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801dfb4:	6879      	ldr	r1, [r7, #4]
 801dfb6:	68f8      	ldr	r0, [r7, #12]
 801dfb8:	f000 f880 	bl	801e0bc <get_glyph_dsc_id>
 801dfbc:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 801dfbe:	6a3b      	ldr	r3, [r7, #32]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d101      	bne.n	801dfc8 <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 801dfc4:	2300      	movs	r3, #0
 801dfc6:	e06d      	b.n	801e0a4 <lv_font_get_glyph_dsc_fmt_txt+0x11a>

    int8_t kvalue = 0;
 801dfc8:	2300      	movs	r3, #0
 801dfca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 801dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfd0:	68db      	ldr	r3, [r3, #12]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d00f      	beq.n	801dff6 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 801dfd6:	6839      	ldr	r1, [r7, #0]
 801dfd8:	68f8      	ldr	r0, [r7, #12]
 801dfda:	f000 f86f 	bl	801e0bc <get_glyph_dsc_id>
 801dfde:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 801dfe0:	69fb      	ldr	r3, [r7, #28]
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	d007      	beq.n	801dff6 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 801dfe6:	69fa      	ldr	r2, [r7, #28]
 801dfe8:	6a39      	ldr	r1, [r7, #32]
 801dfea:	68f8      	ldr	r0, [r7, #12]
 801dfec:	f000 f9aa 	bl	801e344 <get_kern_value>
 801dff0:	4603      	mov	r3, r0
 801dff2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dff8:	685a      	ldr	r2, [r3, #4]
 801dffa:	6a3b      	ldr	r3, [r7, #32]
 801dffc:	00db      	lsls	r3, r3, #3
 801dffe:	4413      	add	r3, r2
 801e000:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801e002:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801e006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e008:	8a12      	ldrh	r2, [r2, #16]
 801e00a:	fb02 f303 	mul.w	r3, r2, r3
 801e00e:	111b      	asrs	r3, r3, #4
 801e010:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 801e012:	69bb      	ldr	r3, [r7, #24]
 801e014:	885b      	ldrh	r3, [r3, #2]
 801e016:	f3c3 130b 	ubfx	r3, r3, #4, #12
 801e01a:	b29b      	uxth	r3, r3
 801e01c:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 801e01e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e022:	2b00      	cmp	r3, #0
 801e024:	d002      	beq.n	801e02c <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 801e026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e028:	005b      	lsls	r3, r3, #1
 801e02a:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 801e02c:	697b      	ldr	r3, [r7, #20]
 801e02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e030:	4413      	add	r3, r2
 801e032:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e036:	3308      	adds	r3, #8
 801e038:	091b      	lsrs	r3, r3, #4
 801e03a:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 801e03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e03e:	b29a      	uxth	r2, r3
 801e040:	68bb      	ldr	r3, [r7, #8]
 801e042:	809a      	strh	r2, [r3, #4]
    dsc_out->box_h = gdsc->box_h;
 801e044:	69bb      	ldr	r3, [r7, #24]
 801e046:	795b      	ldrb	r3, [r3, #5]
 801e048:	b29a      	uxth	r2, r3
 801e04a:	68bb      	ldr	r3, [r7, #8]
 801e04c:	811a      	strh	r2, [r3, #8]
    dsc_out->box_w = gdsc->box_w;
 801e04e:	69bb      	ldr	r3, [r7, #24]
 801e050:	791b      	ldrb	r3, [r3, #4]
 801e052:	b29a      	uxth	r2, r3
 801e054:	68bb      	ldr	r3, [r7, #8]
 801e056:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 801e058:	69bb      	ldr	r3, [r7, #24]
 801e05a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 801e05e:	b21a      	sxth	r2, r3
 801e060:	68bb      	ldr	r3, [r7, #8]
 801e062:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 801e064:	69bb      	ldr	r3, [r7, #24]
 801e066:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801e06a:	b21a      	sxth	r2, r3
 801e06c:	68bb      	ldr	r3, [r7, #8]
 801e06e:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e072:	7cdb      	ldrb	r3, [r3, #19]
 801e074:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801e078:	b2d9      	uxtb	r1, r3
 801e07a:	68ba      	ldr	r2, [r7, #8]
 801e07c:	7b93      	ldrb	r3, [r2, #14]
 801e07e:	f361 0303 	bfi	r3, r1, #0, #4
 801e082:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = false;
 801e084:	68ba      	ldr	r2, [r7, #8]
 801e086:	7b93      	ldrb	r3, [r2, #14]
 801e088:	f36f 1304 	bfc	r3, #4, #1
 801e08c:	7393      	strb	r3, [r2, #14]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 801e08e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e092:	2b00      	cmp	r3, #0
 801e094:	d005      	beq.n	801e0a2 <lv_font_get_glyph_dsc_fmt_txt+0x118>
 801e096:	68bb      	ldr	r3, [r7, #8]
 801e098:	88db      	ldrh	r3, [r3, #6]
 801e09a:	005b      	lsls	r3, r3, #1
 801e09c:	b29a      	uxth	r2, r3
 801e09e:	68bb      	ldr	r3, [r7, #8]
 801e0a0:	80da      	strh	r2, [r3, #6]

    return true;
 801e0a2:	2301      	movs	r3, #1
}
 801e0a4:	4618      	mov	r0, r3
 801e0a6:	3730      	adds	r7, #48	; 0x30
 801e0a8:	46bd      	mov	sp, r7
 801e0aa:	bd80      	pop	{r7, pc}

0801e0ac <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 801e0ac:	b480      	push	{r7}
 801e0ae:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
    }
#endif
}
 801e0b0:	bf00      	nop
 801e0b2:	46bd      	mov	sp, r7
 801e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0b8:	4770      	bx	lr
	...

0801e0bc <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 801e0bc:	b590      	push	{r4, r7, lr}
 801e0be:	b091      	sub	sp, #68	; 0x44
 801e0c0:	af02      	add	r7, sp, #8
 801e0c2:	6078      	str	r0, [r7, #4]
 801e0c4:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 801e0c6:	683b      	ldr	r3, [r7, #0]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d101      	bne.n	801e0d0 <get_glyph_dsc_id+0x14>
 801e0cc:	2300      	movs	r3, #0
 801e0ce:	e133      	b.n	801e338 <get_glyph_dsc_id+0x27c>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801e0d0:	687b      	ldr	r3, [r7, #4]
 801e0d2:	691b      	ldr	r3, [r3, #16]
 801e0d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801e0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0d8:	695b      	ldr	r3, [r3, #20]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d009      	beq.n	801e0f2 <get_glyph_dsc_id+0x36>
 801e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0e0:	695b      	ldr	r3, [r3, #20]
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	683a      	ldr	r2, [r7, #0]
 801e0e6:	429a      	cmp	r2, r3
 801e0e8:	d103      	bne.n	801e0f2 <get_glyph_dsc_id+0x36>
 801e0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0ec:	695b      	ldr	r3, [r3, #20]
 801e0ee:	685b      	ldr	r3, [r3, #4]
 801e0f0:	e122      	b.n	801e338 <get_glyph_dsc_id+0x27c>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 801e0f2:	2300      	movs	r3, #0
 801e0f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 801e0f6:	e108      	b.n	801e30a <get_glyph_dsc_id+0x24e>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0fa:	6899      	ldr	r1, [r3, #8]
 801e0fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e0fe:	4613      	mov	r3, r2
 801e100:	009b      	lsls	r3, r3, #2
 801e102:	4413      	add	r3, r2
 801e104:	009b      	lsls	r3, r3, #2
 801e106:	440b      	add	r3, r1
 801e108:	681b      	ldr	r3, [r3, #0]
 801e10a:	683a      	ldr	r2, [r7, #0]
 801e10c:	1ad3      	subs	r3, r2, r3
 801e10e:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e112:	6899      	ldr	r1, [r3, #8]
 801e114:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e116:	4613      	mov	r3, r2
 801e118:	009b      	lsls	r3, r3, #2
 801e11a:	4413      	add	r3, r2
 801e11c:	009b      	lsls	r3, r3, #2
 801e11e:	440b      	add	r3, r1
 801e120:	889b      	ldrh	r3, [r3, #4]
 801e122:	461a      	mov	r2, r3
 801e124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e126:	4293      	cmp	r3, r2
 801e128:	d903      	bls.n	801e132 <get_glyph_dsc_id+0x76>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801e12a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801e12c:	3301      	adds	r3, #1
 801e12e:	86fb      	strh	r3, [r7, #54]	; 0x36
 801e130:	e0eb      	b.n	801e30a <get_glyph_dsc_id+0x24e>
        uint32_t glyph_id = 0;
 801e132:	2300      	movs	r3, #0
 801e134:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801e136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e138:	6899      	ldr	r1, [r3, #8]
 801e13a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e13c:	4613      	mov	r3, r2
 801e13e:	009b      	lsls	r3, r3, #2
 801e140:	4413      	add	r3, r2
 801e142:	009b      	lsls	r3, r3, #2
 801e144:	440b      	add	r3, r1
 801e146:	7c9b      	ldrb	r3, [r3, #18]
 801e148:	2b02      	cmp	r3, #2
 801e14a:	d10d      	bne.n	801e168 <get_glyph_dsc_id+0xac>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e14e:	6899      	ldr	r1, [r3, #8]
 801e150:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e152:	4613      	mov	r3, r2
 801e154:	009b      	lsls	r3, r3, #2
 801e156:	4413      	add	r3, r2
 801e158:	009b      	lsls	r3, r3, #2
 801e15a:	440b      	add	r3, r1
 801e15c:	88db      	ldrh	r3, [r3, #6]
 801e15e:	461a      	mov	r2, r3
 801e160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e162:	4413      	add	r3, r2
 801e164:	633b      	str	r3, [r7, #48]	; 0x30
 801e166:	e0c2      	b.n	801e2ee <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801e168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e16a:	6899      	ldr	r1, [r3, #8]
 801e16c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e16e:	4613      	mov	r3, r2
 801e170:	009b      	lsls	r3, r3, #2
 801e172:	4413      	add	r3, r2
 801e174:	009b      	lsls	r3, r3, #2
 801e176:	440b      	add	r3, r1
 801e178:	7c9b      	ldrb	r3, [r3, #18]
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d11a      	bne.n	801e1b4 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e180:	6899      	ldr	r1, [r3, #8]
 801e182:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e184:	4613      	mov	r3, r2
 801e186:	009b      	lsls	r3, r3, #2
 801e188:	4413      	add	r3, r2
 801e18a:	009b      	lsls	r3, r3, #2
 801e18c:	440b      	add	r3, r1
 801e18e:	68db      	ldr	r3, [r3, #12]
 801e190:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e194:	6899      	ldr	r1, [r3, #8]
 801e196:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e198:	4613      	mov	r3, r2
 801e19a:	009b      	lsls	r3, r3, #2
 801e19c:	4413      	add	r3, r2
 801e19e:	009b      	lsls	r3, r3, #2
 801e1a0:	440b      	add	r3, r1
 801e1a2:	88db      	ldrh	r3, [r3, #6]
 801e1a4:	4619      	mov	r1, r3
 801e1a6:	693a      	ldr	r2, [r7, #16]
 801e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1aa:	4413      	add	r3, r2
 801e1ac:	781b      	ldrb	r3, [r3, #0]
 801e1ae:	440b      	add	r3, r1
 801e1b0:	633b      	str	r3, [r7, #48]	; 0x30
 801e1b2:	e09c      	b.n	801e2ee <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1b6:	6899      	ldr	r1, [r3, #8]
 801e1b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e1ba:	4613      	mov	r3, r2
 801e1bc:	009b      	lsls	r3, r3, #2
 801e1be:	4413      	add	r3, r2
 801e1c0:	009b      	lsls	r3, r3, #2
 801e1c2:	440b      	add	r3, r1
 801e1c4:	7c9b      	ldrb	r3, [r3, #18]
 801e1c6:	2b03      	cmp	r3, #3
 801e1c8:	d13c      	bne.n	801e244 <get_glyph_dsc_id+0x188>
            uint16_t key = rcp;
 801e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1cc:	b29b      	uxth	r3, r3
 801e1ce:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1d2:	6899      	ldr	r1, [r3, #8]
 801e1d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e1d6:	4613      	mov	r3, r2
 801e1d8:	009b      	lsls	r3, r3, #2
 801e1da:	4413      	add	r3, r2
 801e1dc:	009b      	lsls	r3, r3, #2
 801e1de:	440b      	add	r3, r1
 801e1e0:	689c      	ldr	r4, [r3, #8]
 801e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1e4:	6899      	ldr	r1, [r3, #8]
 801e1e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e1e8:	4613      	mov	r3, r2
 801e1ea:	009b      	lsls	r3, r3, #2
 801e1ec:	4413      	add	r3, r2
 801e1ee:	009b      	lsls	r3, r3, #2
 801e1f0:	440b      	add	r3, r1
 801e1f2:	8a1b      	ldrh	r3, [r3, #16]
 801e1f4:	461a      	mov	r2, r3
 801e1f6:	f107 000e 	add.w	r0, r7, #14
 801e1fa:	4b51      	ldr	r3, [pc, #324]	; (801e340 <get_glyph_dsc_id+0x284>)
 801e1fc:	9300      	str	r3, [sp, #0]
 801e1fe:	2302      	movs	r3, #2
 801e200:	4621      	mov	r1, r4
 801e202:	f005 f9f5 	bl	80235f0 <_lv_utils_bsearch>
 801e206:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801e208:	69bb      	ldr	r3, [r7, #24]
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	d06f      	beq.n	801e2ee <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801e20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e210:	6899      	ldr	r1, [r3, #8]
 801e212:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e214:	4613      	mov	r3, r2
 801e216:	009b      	lsls	r3, r3, #2
 801e218:	4413      	add	r3, r2
 801e21a:	009b      	lsls	r3, r3, #2
 801e21c:	440b      	add	r3, r1
 801e21e:	689b      	ldr	r3, [r3, #8]
 801e220:	69ba      	ldr	r2, [r7, #24]
 801e222:	1ad3      	subs	r3, r2, r3
 801e224:	105b      	asrs	r3, r3, #1
 801e226:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e22a:	6899      	ldr	r1, [r3, #8]
 801e22c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e22e:	4613      	mov	r3, r2
 801e230:	009b      	lsls	r3, r3, #2
 801e232:	4413      	add	r3, r2
 801e234:	009b      	lsls	r3, r3, #2
 801e236:	440b      	add	r3, r1
 801e238:	88db      	ldrh	r3, [r3, #6]
 801e23a:	461a      	mov	r2, r3
 801e23c:	697b      	ldr	r3, [r7, #20]
 801e23e:	4413      	add	r3, r2
 801e240:	633b      	str	r3, [r7, #48]	; 0x30
 801e242:	e054      	b.n	801e2ee <get_glyph_dsc_id+0x232>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 801e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e246:	6899      	ldr	r1, [r3, #8]
 801e248:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e24a:	4613      	mov	r3, r2
 801e24c:	009b      	lsls	r3, r3, #2
 801e24e:	4413      	add	r3, r2
 801e250:	009b      	lsls	r3, r3, #2
 801e252:	440b      	add	r3, r1
 801e254:	7c9b      	ldrb	r3, [r3, #18]
 801e256:	2b01      	cmp	r3, #1
 801e258:	d149      	bne.n	801e2ee <get_glyph_dsc_id+0x232>
            uint16_t key = rcp;
 801e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e25c:	b29b      	uxth	r3, r3
 801e25e:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e262:	6899      	ldr	r1, [r3, #8]
 801e264:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e266:	4613      	mov	r3, r2
 801e268:	009b      	lsls	r3, r3, #2
 801e26a:	4413      	add	r3, r2
 801e26c:	009b      	lsls	r3, r3, #2
 801e26e:	440b      	add	r3, r1
 801e270:	689c      	ldr	r4, [r3, #8]
 801e272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e274:	6899      	ldr	r1, [r3, #8]
 801e276:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e278:	4613      	mov	r3, r2
 801e27a:	009b      	lsls	r3, r3, #2
 801e27c:	4413      	add	r3, r2
 801e27e:	009b      	lsls	r3, r3, #2
 801e280:	440b      	add	r3, r1
 801e282:	8a1b      	ldrh	r3, [r3, #16]
 801e284:	461a      	mov	r2, r3
 801e286:	f107 000c 	add.w	r0, r7, #12
 801e28a:	4b2d      	ldr	r3, [pc, #180]	; (801e340 <get_glyph_dsc_id+0x284>)
 801e28c:	9300      	str	r3, [sp, #0]
 801e28e:	2302      	movs	r3, #2
 801e290:	4621      	mov	r1, r4
 801e292:	f005 f9ad 	bl	80235f0 <_lv_utils_bsearch>
 801e296:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801e298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d027      	beq.n	801e2ee <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2a0:	6899      	ldr	r1, [r3, #8]
 801e2a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e2a4:	4613      	mov	r3, r2
 801e2a6:	009b      	lsls	r3, r3, #2
 801e2a8:	4413      	add	r3, r2
 801e2aa:	009b      	lsls	r3, r3, #2
 801e2ac:	440b      	add	r3, r1
 801e2ae:	689b      	ldr	r3, [r3, #8]
 801e2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e2b2:	1ad3      	subs	r3, r2, r3
 801e2b4:	105b      	asrs	r3, r3, #1
 801e2b6:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 801e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2ba:	6899      	ldr	r1, [r3, #8]
 801e2bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e2be:	4613      	mov	r3, r2
 801e2c0:	009b      	lsls	r3, r3, #2
 801e2c2:	4413      	add	r3, r2
 801e2c4:	009b      	lsls	r3, r3, #2
 801e2c6:	440b      	add	r3, r1
 801e2c8:	68db      	ldr	r3, [r3, #12]
 801e2ca:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801e2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2ce:	6899      	ldr	r1, [r3, #8]
 801e2d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801e2d2:	4613      	mov	r3, r2
 801e2d4:	009b      	lsls	r3, r3, #2
 801e2d6:	4413      	add	r3, r2
 801e2d8:	009b      	lsls	r3, r3, #2
 801e2da:	440b      	add	r3, r1
 801e2dc:	88db      	ldrh	r3, [r3, #6]
 801e2de:	4619      	mov	r1, r3
 801e2e0:	6a3b      	ldr	r3, [r7, #32]
 801e2e2:	005b      	lsls	r3, r3, #1
 801e2e4:	69fa      	ldr	r2, [r7, #28]
 801e2e6:	4413      	add	r3, r2
 801e2e8:	881b      	ldrh	r3, [r3, #0]
 801e2ea:	440b      	add	r3, r1
 801e2ec:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        if(fdsc->cache) {
 801e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2f0:	695b      	ldr	r3, [r3, #20]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d007      	beq.n	801e306 <get_glyph_dsc_id+0x24a>
            fdsc->cache->last_letter = letter;
 801e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2f8:	695b      	ldr	r3, [r3, #20]
 801e2fa:	683a      	ldr	r2, [r7, #0]
 801e2fc:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 801e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e300:	695b      	ldr	r3, [r3, #20]
 801e302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e304:	605a      	str	r2, [r3, #4]
        }
        return glyph_id;
 801e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e308:	e016      	b.n	801e338 <get_glyph_dsc_id+0x27c>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801e30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e30c:	8a5b      	ldrh	r3, [r3, #18]
 801e30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e312:	b29b      	uxth	r3, r3
 801e314:	461a      	mov	r2, r3
 801e316:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801e318:	4293      	cmp	r3, r2
 801e31a:	f4ff aeed 	bcc.w	801e0f8 <get_glyph_dsc_id+0x3c>
    }

    if(fdsc->cache) {
 801e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e320:	695b      	ldr	r3, [r3, #20]
 801e322:	2b00      	cmp	r3, #0
 801e324:	d007      	beq.n	801e336 <get_glyph_dsc_id+0x27a>
        fdsc->cache->last_letter = letter;
 801e326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e328:	695b      	ldr	r3, [r3, #20]
 801e32a:	683a      	ldr	r2, [r7, #0]
 801e32c:	601a      	str	r2, [r3, #0]
        fdsc->cache->last_glyph_id = 0;
 801e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e330:	695b      	ldr	r3, [r3, #20]
 801e332:	2200      	movs	r2, #0
 801e334:	605a      	str	r2, [r3, #4]
    }
    return 0;
 801e336:	2300      	movs	r3, #0

}
 801e338:	4618      	mov	r0, r3
 801e33a:	373c      	adds	r7, #60	; 0x3c
 801e33c:	46bd      	mov	sp, r7
 801e33e:	bd90      	pop	{r4, r7, pc}
 801e340:	0801e525 	.word	0x0801e525

0801e344 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 801e344:	b580      	push	{r7, lr}
 801e346:	b094      	sub	sp, #80	; 0x50
 801e348:	af02      	add	r7, sp, #8
 801e34a:	60f8      	str	r0, [r7, #12]
 801e34c:	60b9      	str	r1, [r7, #8]
 801e34e:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	691b      	ldr	r3, [r3, #16]
 801e354:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 801e356:	2300      	movs	r3, #0
 801e358:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 801e35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e35e:	7cdb      	ldrb	r3, [r3, #19]
 801e360:	f003 0320 	and.w	r3, r3, #32
 801e364:	b2db      	uxtb	r3, r3
 801e366:	2b00      	cmp	r3, #0
 801e368:	d160      	bne.n	801e42c <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 801e36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e36c:	68db      	ldr	r3, [r3, #12]
 801e36e:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 801e370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e372:	7adb      	ldrb	r3, [r3, #11]
 801e374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801e378:	b2db      	uxtb	r3, r3
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d129      	bne.n	801e3d2 <get_kern_value+0x8e>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
 801e37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	b29b      	uxth	r3, r3
 801e388:	021b      	lsls	r3, r3, #8
 801e38a:	b29a      	uxth	r2, r3
 801e38c:	68bb      	ldr	r3, [r7, #8]
 801e38e:	b29b      	uxth	r3, r3
 801e390:	4413      	add	r3, r2
 801e392:	b29b      	uxth	r3, r3
 801e394:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801e396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e398:	689b      	ldr	r3, [r3, #8]
 801e39a:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801e39e:	461a      	mov	r2, r3
 801e3a0:	f107 001a 	add.w	r0, r7, #26
 801e3a4:	4b39      	ldr	r3, [pc, #228]	; (801e48c <get_kern_value+0x148>)
 801e3a6:	9300      	str	r3, [sp, #0]
 801e3a8:	2302      	movs	r3, #2
 801e3aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e3ac:	f005 f920 	bl	80235f0 <_lv_utils_bsearch>
 801e3b0:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801e3b2:	6a3b      	ldr	r3, [r7, #32]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d063      	beq.n	801e480 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801e3b8:	6a3a      	ldr	r2, [r7, #32]
 801e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3bc:	1ad3      	subs	r3, r2, r3
 801e3be:	105b      	asrs	r3, r3, #1
 801e3c0:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 801e3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3c4:	685a      	ldr	r2, [r3, #4]
 801e3c6:	69fb      	ldr	r3, [r7, #28]
 801e3c8:	4413      	add	r3, r2
 801e3ca:	781b      	ldrb	r3, [r3, #0]
 801e3cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801e3d0:	e056      	b.n	801e480 <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 801e3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3d4:	7adb      	ldrb	r3, [r3, #11]
 801e3d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801e3da:	b2db      	uxtb	r3, r3
 801e3dc:	2b40      	cmp	r3, #64	; 0x40
 801e3de:	d14f      	bne.n	801e480 <get_kern_value+0x13c>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint32_t * g_ids = kdsc->glyph_ids;
 801e3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3e2:	681b      	ldr	r3, [r3, #0]
 801e3e4:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	041a      	lsls	r2, r3, #16
 801e3ea:	68bb      	ldr	r3, [r7, #8]
 801e3ec:	4413      	add	r3, r2
 801e3ee:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801e3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3f2:	689b      	ldr	r3, [r3, #8]
 801e3f4:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801e3f8:	461a      	mov	r2, r3
 801e3fa:	f107 0014 	add.w	r0, r7, #20
 801e3fe:	4b24      	ldr	r3, [pc, #144]	; (801e490 <get_kern_value+0x14c>)
 801e400:	9300      	str	r3, [sp, #0]
 801e402:	2304      	movs	r3, #4
 801e404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e406:	f005 f8f3 	bl	80235f0 <_lv_utils_bsearch>
 801e40a:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e40e:	2b00      	cmp	r3, #0
 801e410:	d036      	beq.n	801e480 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801e412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e416:	1ad3      	subs	r3, r2, r3
 801e418:	109b      	asrs	r3, r3, #2
 801e41a:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 801e41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e41e:	685a      	ldr	r2, [r3, #4]
 801e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e422:	4413      	add	r3, r2
 801e424:	781b      	ldrb	r3, [r3, #0]
 801e426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801e42a:	e029      	b.n	801e480 <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 801e42c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e42e:	68db      	ldr	r3, [r3, #12]
 801e430:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 801e432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e434:	685a      	ldr	r2, [r3, #4]
 801e436:	68bb      	ldr	r3, [r7, #8]
 801e438:	4413      	add	r3, r2
 801e43a:	781b      	ldrb	r3, [r3, #0]
 801e43c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801e440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e442:	689a      	ldr	r2, [r3, #8]
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	4413      	add	r3, r2
 801e448:	781b      	ldrb	r3, [r3, #0]
 801e44a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 801e44e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801e452:	2b00      	cmp	r3, #0
 801e454:	d014      	beq.n	801e480 <get_kern_value+0x13c>
 801e456:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d010      	beq.n	801e480 <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 801e45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801e466:	3a01      	subs	r2, #1
 801e468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e46a:	7b49      	ldrb	r1, [r1, #13]
 801e46c:	fb02 f101 	mul.w	r1, r2, r1
 801e470:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801e474:	3a01      	subs	r2, #1
 801e476:	440a      	add	r2, r1
 801e478:	4413      	add	r3, r2
 801e47a:	781b      	ldrb	r3, [r3, #0]
 801e47c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 801e480:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801e484:	4618      	mov	r0, r3
 801e486:	3748      	adds	r7, #72	; 0x48
 801e488:	46bd      	mov	sp, r7
 801e48a:	bd80      	pop	{r7, pc}
 801e48c:	0801e495 	.word	0x0801e495
 801e490:	0801e4dd 	.word	0x0801e4dd

0801e494 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 801e494:	b480      	push	{r7}
 801e496:	b085      	sub	sp, #20
 801e498:	af00      	add	r7, sp, #0
 801e49a:	6078      	str	r0, [r7, #4]
 801e49c:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 801e4a2:	683b      	ldr	r3, [r7, #0]
 801e4a4:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	781a      	ldrb	r2, [r3, #0]
 801e4aa:	68bb      	ldr	r3, [r7, #8]
 801e4ac:	781b      	ldrb	r3, [r3, #0]
 801e4ae:	429a      	cmp	r2, r3
 801e4b0:	d006      	beq.n	801e4c0 <kern_pair_8_compare+0x2c>
 801e4b2:	68fb      	ldr	r3, [r7, #12]
 801e4b4:	781b      	ldrb	r3, [r3, #0]
 801e4b6:	461a      	mov	r2, r3
 801e4b8:	68bb      	ldr	r3, [r7, #8]
 801e4ba:	781b      	ldrb	r3, [r3, #0]
 801e4bc:	1ad3      	subs	r3, r2, r3
 801e4be:	e007      	b.n	801e4d0 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 801e4c0:	68fb      	ldr	r3, [r7, #12]
 801e4c2:	3301      	adds	r3, #1
 801e4c4:	781b      	ldrb	r3, [r3, #0]
 801e4c6:	461a      	mov	r2, r3
 801e4c8:	68bb      	ldr	r3, [r7, #8]
 801e4ca:	3301      	adds	r3, #1
 801e4cc:	781b      	ldrb	r3, [r3, #0]
 801e4ce:	1ad3      	subs	r3, r2, r3

}
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	3714      	adds	r7, #20
 801e4d4:	46bd      	mov	sp, r7
 801e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4da:	4770      	bx	lr

0801e4dc <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 801e4dc:	b480      	push	{r7}
 801e4de:	b085      	sub	sp, #20
 801e4e0:	af00      	add	r7, sp, #0
 801e4e2:	6078      	str	r0, [r7, #4]
 801e4e4:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 801e4ea:	683b      	ldr	r3, [r7, #0]
 801e4ec:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801e4ee:	68fb      	ldr	r3, [r7, #12]
 801e4f0:	881a      	ldrh	r2, [r3, #0]
 801e4f2:	68bb      	ldr	r3, [r7, #8]
 801e4f4:	881b      	ldrh	r3, [r3, #0]
 801e4f6:	429a      	cmp	r2, r3
 801e4f8:	d006      	beq.n	801e508 <kern_pair_16_compare+0x2c>
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	881b      	ldrh	r3, [r3, #0]
 801e4fe:	461a      	mov	r2, r3
 801e500:	68bb      	ldr	r3, [r7, #8]
 801e502:	881b      	ldrh	r3, [r3, #0]
 801e504:	1ad3      	subs	r3, r2, r3
 801e506:	e007      	b.n	801e518 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	3302      	adds	r3, #2
 801e50c:	881b      	ldrh	r3, [r3, #0]
 801e50e:	461a      	mov	r2, r3
 801e510:	68bb      	ldr	r3, [r7, #8]
 801e512:	3302      	adds	r3, #2
 801e514:	881b      	ldrh	r3, [r3, #0]
 801e516:	1ad3      	subs	r3, r2, r3
}
 801e518:	4618      	mov	r0, r3
 801e51a:	3714      	adds	r7, #20
 801e51c:	46bd      	mov	sp, r7
 801e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e522:	4770      	bx	lr

0801e524 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 801e524:	b480      	push	{r7}
 801e526:	b083      	sub	sp, #12
 801e528:	af00      	add	r7, sp, #0
 801e52a:	6078      	str	r0, [r7, #4]
 801e52c:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	881b      	ldrh	r3, [r3, #0]
 801e532:	461a      	mov	r2, r3
 801e534:	683b      	ldr	r3, [r7, #0]
 801e536:	881b      	ldrh	r3, [r3, #0]
 801e538:	1ad3      	subs	r3, r2, r3
}
 801e53a:	4618      	mov	r0, r3
 801e53c:	370c      	adds	r7, #12
 801e53e:	46bd      	mov	sp, r7
 801e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e544:	4770      	bx	lr

0801e546 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801e546:	b480      	push	{r7}
 801e548:	b083      	sub	sp, #12
 801e54a:	af00      	add	r7, sp, #0
 801e54c:	4603      	mov	r3, r0
 801e54e:	71fb      	strb	r3, [r7, #7]
 801e550:	460b      	mov	r3, r1
 801e552:	71bb      	strb	r3, [r7, #6]
 801e554:	4613      	mov	r3, r2
 801e556:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e558:	797b      	ldrb	r3, [r7, #5]
 801e55a:	09db      	lsrs	r3, r3, #7
 801e55c:	b2da      	uxtb	r2, r3
 801e55e:	79bb      	ldrb	r3, [r7, #6]
 801e560:	09db      	lsrs	r3, r3, #7
 801e562:	b2db      	uxtb	r3, r3
 801e564:	4313      	orrs	r3, r2
 801e566:	b2da      	uxtb	r2, r3
 801e568:	79fb      	ldrb	r3, [r7, #7]
 801e56a:	09db      	lsrs	r3, r3, #7
 801e56c:	b2db      	uxtb	r3, r3
 801e56e:	4313      	orrs	r3, r2
 801e570:	b2db      	uxtb	r3, r3
}
 801e572:	4618      	mov	r0, r3
 801e574:	370c      	adds	r7, #12
 801e576:	46bd      	mov	sp, r7
 801e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e57c:	4770      	bx	lr

0801e57e <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 801e57e:	b580      	push	{r7, lr}
 801e580:	b082      	sub	sp, #8
 801e582:	af00      	add	r7, sp, #0
 801e584:	6078      	str	r0, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    lv_color_t r;
    r.full = c | 0xFF000000;
    return r;
#else /*LV_COLOR_DEPTH == 8*/
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	0c1b      	lsrs	r3, r3, #16
 801e58a:	b2d8      	uxtb	r0, r3
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	0a1b      	lsrs	r3, r3, #8
 801e590:	b2db      	uxtb	r3, r3
 801e592:	687a      	ldr	r2, [r7, #4]
 801e594:	b2d2      	uxtb	r2, r2
 801e596:	4619      	mov	r1, r3
 801e598:	f7ff ffd5 	bl	801e546 <lv_color_make>
 801e59c:	4603      	mov	r3, r0
#endif
}
 801e59e:	4618      	mov	r0, r3
 801e5a0:	3708      	adds	r7, #8
 801e5a2:	46bd      	mov	sp, r7
 801e5a4:	bd80      	pop	{r7, pc}

0801e5a6 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 801e5a6:	b580      	push	{r7, lr}
 801e5a8:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 801e5aa:	22ff      	movs	r2, #255	; 0xff
 801e5ac:	21ff      	movs	r1, #255	; 0xff
 801e5ae:	20ff      	movs	r0, #255	; 0xff
 801e5b0:	f7ff ffc9 	bl	801e546 <lv_color_make>
 801e5b4:	4603      	mov	r3, r0
}
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	bd80      	pop	{r7, pc}
	...

0801e5bc <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 801e5bc:	b580      	push	{r7, lr}
 801e5be:	b082      	sub	sp, #8
 801e5c0:	af00      	add	r7, sp, #0
 801e5c2:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 801e5c4:	4a04      	ldr	r2, [pc, #16]	; (801e5d8 <lv_obj_remove_style_all+0x1c>)
 801e5c6:	2100      	movs	r1, #0
 801e5c8:	6878      	ldr	r0, [r7, #4]
 801e5ca:	f7ed f8e7 	bl	800b79c <lv_obj_remove_style>
}
 801e5ce:	bf00      	nop
 801e5d0:	3708      	adds	r7, #8
 801e5d2:	46bd      	mov	sp, r7
 801e5d4:	bd80      	pop	{r7, pc}
 801e5d6:	bf00      	nop
 801e5d8:	000fffff 	.word	0x000fffff

0801e5dc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801e5dc:	b590      	push	{r4, r7, lr}
 801e5de:	b083      	sub	sp, #12
 801e5e0:	af00      	add	r7, sp, #0
 801e5e2:	6078      	str	r0, [r7, #4]
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 801e5e4:	2150      	movs	r1, #80	; 0x50
 801e5e6:	6878      	ldr	r0, [r7, #4]
 801e5e8:	f002 fd4e 	bl	8021088 <lv_memset_00>

    driver->hor_res          = 320;
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801e5f2:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = 240;
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	22f0      	movs	r2, #240	; 0xf0
 801e5f8:	805a      	strh	r2, [r3, #2]
    driver->physical_hor_res = -1;
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e600:	809a      	strh	r2, [r3, #4]
    driver->physical_ver_res = -1;
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e608:	80da      	strh	r2, [r3, #6]
    driver->offset_x         = 0;
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	2200      	movs	r2, #0
 801e60e:	811a      	strh	r2, [r3, #8]
    driver->offset_y         = 0;
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	2200      	movs	r2, #0
 801e614:	815a      	strh	r2, [r3, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801e616:	687a      	ldr	r2, [r7, #4]
 801e618:	7c13      	ldrb	r3, [r2, #16]
 801e61a:	f36f 03c3 	bfc	r3, #3, #1
 801e61e:	7413      	strb	r3, [r2, #16]
    driver->screen_transp    = 0;
 801e620:	687a      	ldr	r2, [r7, #4]
 801e622:	7c13      	ldrb	r3, [r2, #16]
 801e624:	f36f 1386 	bfc	r3, #6, #1
 801e628:	7413      	strb	r3, [r2, #16]
    driver->dpi              = LV_DPI_DEF;
 801e62a:	687a      	ldr	r2, [r7, #4]
 801e62c:	6913      	ldr	r3, [r2, #16]
 801e62e:	2182      	movs	r1, #130	; 0x82
 801e630:	f361 13d0 	bfi	r3, r1, #7, #10
 801e634:	6113      	str	r3, [r2, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 801e636:	687c      	ldr	r4, [r7, #4]
 801e638:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 801e63c:	f7ff ff9f 	bl	801e57e <lv_color_hex>
 801e640:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	4a06      	ldr	r2, [pc, #24]	; (801e660 <lv_disp_drv_init+0x84>)
 801e648:	641a      	str	r2, [r3, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	4a04      	ldr	r2, [pc, #16]	; (801e660 <lv_disp_drv_init+0x84>)
 801e64e:	645a      	str	r2, [r3, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	2254      	movs	r2, #84	; 0x54
 801e654:	649a      	str	r2, [r3, #72]	; 0x48
#endif

}
 801e656:	bf00      	nop
 801e658:	370c      	adds	r7, #12
 801e65a:	46bd      	mov	sp, r7
 801e65c:	bd90      	pop	{r4, r7, pc}
 801e65e:	bf00      	nop
 801e660:	08013e79 	.word	0x08013e79

0801e664 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801e664:	b580      	push	{r7, lr}
 801e666:	b084      	sub	sp, #16
 801e668:	af00      	add	r7, sp, #0
 801e66a:	60f8      	str	r0, [r7, #12]
 801e66c:	60b9      	str	r1, [r7, #8]
 801e66e:	607a      	str	r2, [r7, #4]
 801e670:	603b      	str	r3, [r7, #0]
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 801e672:	211c      	movs	r1, #28
 801e674:	68f8      	ldr	r0, [r7, #12]
 801e676:	f002 fd07 	bl	8021088 <lv_memset_00>

    draw_buf->buf1    = buf1;
 801e67a:	68fb      	ldr	r3, [r7, #12]
 801e67c:	68ba      	ldr	r2, [r7, #8]
 801e67e:	601a      	str	r2, [r3, #0]
    draw_buf->buf2    = buf2;
 801e680:	68fb      	ldr	r3, [r7, #12]
 801e682:	687a      	ldr	r2, [r7, #4]
 801e684:	605a      	str	r2, [r3, #4]
    draw_buf->buf_act = draw_buf->buf1;
 801e686:	68fb      	ldr	r3, [r7, #12]
 801e688:	681a      	ldr	r2, [r3, #0]
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	609a      	str	r2, [r3, #8]
    draw_buf->size    = size_in_px_cnt;
 801e68e:	68fb      	ldr	r3, [r7, #12]
 801e690:	683a      	ldr	r2, [r7, #0]
 801e692:	60da      	str	r2, [r3, #12]
}
 801e694:	bf00      	nop
 801e696:	3710      	adds	r7, #16
 801e698:	46bd      	mov	sp, r7
 801e69a:	bd80      	pop	{r7, pc}

0801e69c <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 801e69c:	b590      	push	{r4, r7, lr}
 801e69e:	b087      	sub	sp, #28
 801e6a0:	af00      	add	r7, sp, #0
 801e6a2:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801e6a4:	485f      	ldr	r0, [pc, #380]	; (801e824 <lv_disp_drv_register+0x188>)
 801e6a6:	f001 fe37 	bl	8020318 <_lv_ll_ins_head>
 801e6aa:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(disp);
 801e6ac:	697b      	ldr	r3, [r7, #20]
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d100      	bne.n	801e6b4 <lv_disp_drv_register+0x18>
 801e6b2:	e7fe      	b.n	801e6b2 <lv_disp_drv_register+0x16>
    if(!disp) {
 801e6b4:	697b      	ldr	r3, [r7, #20]
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d101      	bne.n	801e6be <lv_disp_drv_register+0x22>
        return NULL;
 801e6ba:	2300      	movs	r3, #0
 801e6bc:	e0ae      	b.n	801e81c <lv_disp_drv_register+0x180>
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d116      	bne.n	801e6f4 <lv_disp_drv_register+0x58>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e6ca:	4618      	mov	r0, r3
 801e6cc:	f002 f8a8 	bl	8020820 <lv_mem_alloc>
 801e6d0:	6138      	str	r0, [r7, #16]
        LV_ASSERT_MALLOC(draw_ctx);
 801e6d2:	693b      	ldr	r3, [r7, #16]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d100      	bne.n	801e6da <lv_disp_drv_register+0x3e>
 801e6d8:	e7fe      	b.n	801e6d8 <lv_disp_drv_register+0x3c>
        if(draw_ctx == NULL) return NULL;
 801e6da:	693b      	ldr	r3, [r7, #16]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d101      	bne.n	801e6e4 <lv_disp_drv_register+0x48>
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	e09b      	b.n	801e81c <lv_disp_drv_register+0x180>
        driver->draw_ctx_init(driver, draw_ctx);
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e6e8:	6939      	ldr	r1, [r7, #16]
 801e6ea:	6878      	ldr	r0, [r7, #4]
 801e6ec:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	693a      	ldr	r2, [r7, #16]
 801e6f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 801e6f4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801e6f8:	6978      	ldr	r0, [r7, #20]
 801e6fa:	f002 fcc5 	bl	8021088 <lv_memset_00>

    disp->driver = driver;
 801e6fe:	697b      	ldr	r3, [r7, #20]
 801e700:	687a      	ldr	r2, [r7, #4]
 801e702:	601a      	str	r2, [r3, #0]

    disp->inv_en_cnt = 1;
 801e704:	697b      	ldr	r3, [r7, #20]
 801e706:	2201      	movs	r2, #1
 801e708:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

    lv_disp_t * disp_def_tmp = disp_def;
 801e70c:	4b46      	ldr	r3, [pc, #280]	; (801e828 <lv_disp_drv_register+0x18c>)
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	60fb      	str	r3, [r7, #12]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801e712:	4a45      	ldr	r2, [pc, #276]	; (801e828 <lv_disp_drv_register+0x18c>)
 801e714:	697b      	ldr	r3, [r7, #20]
 801e716:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 801e718:	697a      	ldr	r2, [r7, #20]
 801e71a:	211e      	movs	r1, #30
 801e71c:	4843      	ldr	r0, [pc, #268]	; (801e82c <lv_disp_drv_register+0x190>)
 801e71e:	f003 fb77 	bl	8021e10 <lv_timer_create>
 801e722:	4602      	mov	r2, r0
 801e724:	697b      	ldr	r3, [r7, #20]
 801e726:	605a      	str	r2, [r3, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 801e728:	697b      	ldr	r3, [r7, #20]
 801e72a:	685b      	ldr	r3, [r3, #4]
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d100      	bne.n	801e732 <lv_disp_drv_register+0x96>
 801e730:	e7fe      	b.n	801e730 <lv_disp_drv_register+0x94>
    if(disp->refr_timer == NULL) {
 801e732:	697b      	ldr	r3, [r7, #20]
 801e734:	685b      	ldr	r3, [r3, #4]
 801e736:	2b00      	cmp	r3, #0
 801e738:	d104      	bne.n	801e744 <lv_disp_drv_register+0xa8>
        lv_mem_free(disp);
 801e73a:	6978      	ldr	r0, [r7, #20]
 801e73c:	f002 f8a0 	bl	8020880 <lv_mem_free>
        return NULL;
 801e740:	2300      	movs	r3, #0
 801e742:	e06b      	b.n	801e81c <lv_disp_drv_register+0x180>
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	7c1b      	ldrb	r3, [r3, #16]
 801e748:	f003 0302 	and.w	r3, r3, #2
 801e74c:	b2db      	uxtb	r3, r3
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d012      	beq.n	801e778 <lv_disp_drv_register+0xdc>
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	68db      	ldr	r3, [r3, #12]
 801e756:	68da      	ldr	r2, [r3, #12]
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e75e:	4619      	mov	r1, r3
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e766:	fb01 f303 	mul.w	r3, r1, r3
 801e76a:	429a      	cmp	r2, r3
 801e76c:	d204      	bcs.n	801e778 <lv_disp_drv_register+0xdc>
        driver->full_refresh = 0;
 801e76e:	687a      	ldr	r2, [r7, #4]
 801e770:	7c13      	ldrb	r3, [r2, #16]
 801e772:	f36f 0341 	bfc	r3, #1, #1
 801e776:	7413      	strb	r3, [r2, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 801e778:	697c      	ldr	r4, [r7, #20]
 801e77a:	f7ff ff14 	bl	801e5a6 <lv_color_white>
 801e77e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801e782:	697b      	ldr	r3, [r7, #20]
 801e784:	22ff      	movs	r2, #255	; 0xff
 801e786:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 801e78a:	2000      	movs	r0, #0
 801e78c:	f7e6 fe30 	bl	80053f0 <lv_obj_create>
 801e790:	4602      	mov	r2, r0
 801e792:	697b      	ldr	r3, [r7, #20]
 801e794:	611a      	str	r2, [r3, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 801e796:	2000      	movs	r0, #0
 801e798:	f7e6 fe2a 	bl	80053f0 <lv_obj_create>
 801e79c:	4602      	mov	r2, r0
 801e79e:	697b      	ldr	r3, [r7, #20]
 801e7a0:	61da      	str	r2, [r3, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 801e7a2:	2000      	movs	r0, #0
 801e7a4:	f7e6 fe24 	bl	80053f0 <lv_obj_create>
 801e7a8:	4602      	mov	r2, r0
 801e7aa:	697b      	ldr	r3, [r7, #20]
 801e7ac:	621a      	str	r2, [r3, #32]
    lv_obj_remove_style_all(disp->top_layer);
 801e7ae:	697b      	ldr	r3, [r7, #20]
 801e7b0:	69db      	ldr	r3, [r3, #28]
 801e7b2:	4618      	mov	r0, r3
 801e7b4:	f7ff ff02 	bl	801e5bc <lv_obj_remove_style_all>
    lv_obj_remove_style_all(disp->sys_layer);
 801e7b8:	697b      	ldr	r3, [r7, #20]
 801e7ba:	6a1b      	ldr	r3, [r3, #32]
 801e7bc:	4618      	mov	r0, r3
 801e7be:	f7ff fefd 	bl	801e5bc <lv_obj_remove_style_all>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 801e7c2:	697b      	ldr	r3, [r7, #20]
 801e7c4:	69db      	ldr	r3, [r3, #28]
 801e7c6:	2102      	movs	r1, #2
 801e7c8:	4618      	mov	r0, r3
 801e7ca:	f7e6 fe25 	bl	8005418 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 801e7ce:	697b      	ldr	r3, [r7, #20]
 801e7d0:	6a1b      	ldr	r3, [r3, #32]
 801e7d2:	2102      	movs	r1, #2
 801e7d4:	4618      	mov	r0, r3
 801e7d6:	f7e6 fe1f 	bl	8005418 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 801e7da:	697b      	ldr	r3, [r7, #20]
 801e7dc:	69db      	ldr	r3, [r3, #28]
 801e7de:	2100      	movs	r1, #0
 801e7e0:	4618      	mov	r0, r3
 801e7e2:	f7ea ffb6 	bl	8009752 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 801e7e6:	697b      	ldr	r3, [r7, #20]
 801e7e8:	6a1b      	ldr	r3, [r3, #32]
 801e7ea:	2100      	movs	r1, #0
 801e7ec:	4618      	mov	r0, r3
 801e7ee:	f7ea ffb0 	bl	8009752 <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 801e7f2:	697b      	ldr	r3, [r7, #20]
 801e7f4:	691b      	ldr	r3, [r3, #16]
 801e7f6:	4618      	mov	r0, r3
 801e7f8:	f7ea f927 	bl	8008a4a <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801e7fc:	4a0a      	ldr	r2, [pc, #40]	; (801e828 <lv_disp_drv_register+0x18c>)
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	6013      	str	r3, [r2, #0]
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 801e802:	4b09      	ldr	r3, [pc, #36]	; (801e828 <lv_disp_drv_register+0x18c>)
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	2b00      	cmp	r3, #0
 801e808:	d102      	bne.n	801e810 <lv_disp_drv_register+0x174>
 801e80a:	4a07      	ldr	r2, [pc, #28]	; (801e828 <lv_disp_drv_register+0x18c>)
 801e80c:	697b      	ldr	r3, [r7, #20]
 801e80e:	6013      	str	r3, [r2, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 801e810:	697b      	ldr	r3, [r7, #20]
 801e812:	685b      	ldr	r3, [r3, #4]
 801e814:	4618      	mov	r0, r3
 801e816:	f003 fb67 	bl	8021ee8 <lv_timer_ready>

    return disp;
 801e81a:	697b      	ldr	r3, [r7, #20]
}
 801e81c:	4618      	mov	r0, r3
 801e81e:	371c      	adds	r7, #28
 801e820:	46bd      	mov	sp, r7
 801e822:	bd90      	pop	{r4, r7, pc}
 801e824:	20000844 	.word	0x20000844
 801e828:	20000818 	.word	0x20000818
 801e82c:	0800d20d 	.word	0x0800d20d

0801e830 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 801e830:	b480      	push	{r7}
 801e832:	af00      	add	r7, sp, #0
    return disp_def;
 801e834:	4b03      	ldr	r3, [pc, #12]	; (801e844 <lv_disp_get_default+0x14>)
 801e836:	681b      	ldr	r3, [r3, #0]
}
 801e838:	4618      	mov	r0, r3
 801e83a:	46bd      	mov	sp, r7
 801e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e840:	4770      	bx	lr
 801e842:	bf00      	nop
 801e844:	20000818 	.word	0x20000818

0801e848 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801e848:	b580      	push	{r7, lr}
 801e84a:	b082      	sub	sp, #8
 801e84c:	af00      	add	r7, sp, #0
 801e84e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	2b00      	cmp	r3, #0
 801e854:	d102      	bne.n	801e85c <lv_disp_get_hor_res+0x14>
 801e856:	f7ff ffeb 	bl	801e830 <lv_disp_get_default>
 801e85a:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d101      	bne.n	801e866 <lv_disp_get_hor_res+0x1e>
        return 0;
 801e862:	2300      	movs	r3, #0
 801e864:	e012      	b.n	801e88c <lv_disp_get_hor_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	7c1b      	ldrb	r3, [r3, #16]
 801e86c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e870:	b2db      	uxtb	r3, r3
 801e872:	2b01      	cmp	r3, #1
 801e874:	d001      	beq.n	801e87a <lv_disp_get_hor_res+0x32>
 801e876:	2b03      	cmp	r3, #3
 801e878:	d104      	bne.n	801e884 <lv_disp_get_hor_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e882:	e003      	b.n	801e88c <lv_disp_get_hor_res+0x44>
            default:
                return disp->driver->hor_res;
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	f9b3 3000 	ldrsh.w	r3, [r3]
        }
    }
}
 801e88c:	4618      	mov	r0, r3
 801e88e:	3708      	adds	r7, #8
 801e890:	46bd      	mov	sp, r7
 801e892:	bd80      	pop	{r7, pc}

0801e894 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801e894:	b580      	push	{r7, lr}
 801e896:	b082      	sub	sp, #8
 801e898:	af00      	add	r7, sp, #0
 801e89a:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d102      	bne.n	801e8a8 <lv_disp_get_ver_res+0x14>
 801e8a2:	f7ff ffc5 	bl	801e830 <lv_disp_get_default>
 801e8a6:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d101      	bne.n	801e8b2 <lv_disp_get_ver_res+0x1e>
        return 0;
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	e012      	b.n	801e8d8 <lv_disp_get_ver_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	681b      	ldr	r3, [r3, #0]
 801e8b6:	7c1b      	ldrb	r3, [r3, #16]
 801e8b8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e8bc:	b2db      	uxtb	r3, r3
 801e8be:	2b01      	cmp	r3, #1
 801e8c0:	d001      	beq.n	801e8c6 <lv_disp_get_ver_res+0x32>
 801e8c2:	2b03      	cmp	r3, #3
 801e8c4:	d104      	bne.n	801e8d0 <lv_disp_get_ver_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 801e8c6:	687b      	ldr	r3, [r7, #4]
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e8ce:	e003      	b.n	801e8d8 <lv_disp_get_ver_res+0x44>
            default:
                return disp->driver->ver_res;
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        }
    }
}
 801e8d8:	4618      	mov	r0, r3
 801e8da:	3708      	adds	r7, #8
 801e8dc:	46bd      	mov	sp, r7
 801e8de:	bd80      	pop	{r7, pc}

0801e8e0 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 801e8e0:	b580      	push	{r7, lr}
 801e8e2:	b082      	sub	sp, #8
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d102      	bne.n	801e8f4 <lv_disp_get_dpi+0x14>
 801e8ee:	f7ff ff9f 	bl	801e830 <lv_disp_get_default>
 801e8f2:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d101      	bne.n	801e8fe <lv_disp_get_dpi+0x1e>
 801e8fa:	2382      	movs	r3, #130	; 0x82
 801e8fc:	e006      	b.n	801e90c <lv_disp_get_dpi+0x2c>
    return disp->driver->dpi;
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	691b      	ldr	r3, [r3, #16]
 801e904:	f3c3 13c9 	ubfx	r3, r3, #7, #10
 801e908:	b29b      	uxth	r3, r3
 801e90a:	b21b      	sxth	r3, r3
}
 801e90c:	4618      	mov	r0, r3
 801e90e:	3708      	adds	r7, #8
 801e910:	46bd      	mov	sp, r7
 801e912:	bd80      	pop	{r7, pc}

0801e914 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 801e914:	b480      	push	{r7}
 801e916:	b083      	sub	sp, #12
 801e918:	af00      	add	r7, sp, #0
 801e91a:	6078      	str	r0, [r7, #4]
    disp_drv->draw_buf->flushing = 0;
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	68db      	ldr	r3, [r3, #12]
 801e920:	2200      	movs	r2, #0
 801e922:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	68db      	ldr	r3, [r3, #12]
 801e928:	2200      	movs	r2, #0
 801e92a:	615a      	str	r2, [r3, #20]
}
 801e92c:	bf00      	nop
 801e92e:	370c      	adds	r7, #12
 801e930:	46bd      	mov	sp, r7
 801e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e936:	4770      	bx	lr

0801e938 <lv_disp_get_draw_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
 801e938:	b480      	push	{r7}
 801e93a:	b083      	sub	sp, #12
 801e93c:	af00      	add	r7, sp, #0
 801e93e:	6078      	str	r0, [r7, #4]
    return disp->driver->draw_buf;
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	68db      	ldr	r3, [r3, #12]
}
 801e946:	4618      	mov	r0, r3
 801e948:	370c      	adds	r7, #12
 801e94a:	46bd      	mov	sp, r7
 801e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e950:	4770      	bx	lr
	...

0801e954 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 801e954:	b580      	push	{r7, lr}
 801e956:	b082      	sub	sp, #8
 801e958:	af00      	add	r7, sp, #0
 801e95a:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d104      	bne.n	801e96c <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801e962:	4807      	ldr	r0, [pc, #28]	; (801e980 <lv_indev_get_next+0x2c>)
 801e964:	f001 fd9d 	bl	80204a2 <_lv_ll_get_head>
 801e968:	4603      	mov	r3, r0
 801e96a:	e004      	b.n	801e976 <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801e96c:	6879      	ldr	r1, [r7, #4]
 801e96e:	4804      	ldr	r0, [pc, #16]	; (801e980 <lv_indev_get_next+0x2c>)
 801e970:	f001 fdb9 	bl	80204e6 <_lv_ll_get_next>
 801e974:	4603      	mov	r3, r0
}
 801e976:	4618      	mov	r0, r3
 801e978:	3708      	adds	r7, #8
 801e97a:	46bd      	mov	sp, r7
 801e97c:	bd80      	pop	{r7, pc}
 801e97e:	bf00      	nop
 801e980:	20000850 	.word	0x20000850

0801e984 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 801e984:	b480      	push	{r7}
 801e986:	b083      	sub	sp, #12
 801e988:	af00      	add	r7, sp, #0
 801e98a:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 801e98c:	4b07      	ldr	r3, [pc, #28]	; (801e9ac <lv_tick_inc+0x28>)
 801e98e:	2200      	movs	r2, #0
 801e990:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801e992:	4b07      	ldr	r3, [pc, #28]	; (801e9b0 <lv_tick_inc+0x2c>)
 801e994:	681a      	ldr	r2, [r3, #0]
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	4413      	add	r3, r2
 801e99a:	4a05      	ldr	r2, [pc, #20]	; (801e9b0 <lv_tick_inc+0x2c>)
 801e99c:	6013      	str	r3, [r2, #0]
}
 801e99e:	bf00      	nop
 801e9a0:	370c      	adds	r7, #12
 801e9a2:	46bd      	mov	sp, r7
 801e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9a8:	4770      	bx	lr
 801e9aa:	bf00      	nop
 801e9ac:	20000820 	.word	0x20000820
 801e9b0:	2000081c 	.word	0x2000081c

0801e9b4 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 801e9b4:	b480      	push	{r7}
 801e9b6:	b083      	sub	sp, #12
 801e9b8:	af00      	add	r7, sp, #0
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801e9ba:	4b09      	ldr	r3, [pc, #36]	; (801e9e0 <lv_tick_get+0x2c>)
 801e9bc:	2201      	movs	r2, #1
 801e9be:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 801e9c0:	4b08      	ldr	r3, [pc, #32]	; (801e9e4 <lv_tick_get+0x30>)
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 801e9c6:	4b06      	ldr	r3, [pc, #24]	; (801e9e0 <lv_tick_get+0x2c>)
 801e9c8:	781b      	ldrb	r3, [r3, #0]
 801e9ca:	b2db      	uxtb	r3, r3
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d0f4      	beq.n	801e9ba <lv_tick_get+0x6>

    return result;
 801e9d0:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801e9d2:	4618      	mov	r0, r3
 801e9d4:	370c      	adds	r7, #12
 801e9d6:	46bd      	mov	sp, r7
 801e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9dc:	4770      	bx	lr
 801e9de:	bf00      	nop
 801e9e0:	20000820 	.word	0x20000820
 801e9e4:	2000081c 	.word	0x2000081c

0801e9e8 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801e9e8:	b580      	push	{r7, lr}
 801e9ea:	b084      	sub	sp, #16
 801e9ec:	af00      	add	r7, sp, #0
 801e9ee:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801e9f0:	f7ff ffe0 	bl	801e9b4 <lv_tick_get>
 801e9f4:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 801e9f6:	68fa      	ldr	r2, [r7, #12]
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	429a      	cmp	r2, r3
 801e9fc:	d304      	bcc.n	801ea08 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801e9fe:	68fa      	ldr	r2, [r7, #12]
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	1ad3      	subs	r3, r2, r3
 801ea04:	607b      	str	r3, [r7, #4]
 801ea06:	e006      	b.n	801ea16 <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	425b      	negs	r3, r3
 801ea0c:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801ea0e:	687a      	ldr	r2, [r7, #4]
 801ea10:	68fb      	ldr	r3, [r7, #12]
 801ea12:	4413      	add	r3, r2
 801ea14:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 801ea16:	687b      	ldr	r3, [r7, #4]
}
 801ea18:	4618      	mov	r0, r3
 801ea1a:	3710      	adds	r7, #16
 801ea1c:	46bd      	mov	sp, r7
 801ea1e:	bd80      	pop	{r7, pc}

0801ea20 <_lv_anim_core_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_anim_core_init(void)
{
 801ea20:	b580      	push	{r7, lr}
 801ea22:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801ea24:	2144      	movs	r1, #68	; 0x44
 801ea26:	4809      	ldr	r0, [pc, #36]	; (801ea4c <_lv_anim_core_init+0x2c>)
 801ea28:	f001 fc5d 	bl	80202e6 <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 801ea2c:	2200      	movs	r2, #0
 801ea2e:	211e      	movs	r1, #30
 801ea30:	4807      	ldr	r0, [pc, #28]	; (801ea50 <_lv_anim_core_init+0x30>)
 801ea32:	f003 f9ed 	bl	8021e10 <lv_timer_create>
 801ea36:	4603      	mov	r3, r0
 801ea38:	4a06      	ldr	r2, [pc, #24]	; (801ea54 <_lv_anim_core_init+0x34>)
 801ea3a:	6013      	str	r3, [r2, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 801ea3c:	f000 fac0 	bl	801efc0 <anim_mark_list_change>
    anim_list_changed = false;
 801ea40:	4b05      	ldr	r3, [pc, #20]	; (801ea58 <_lv_anim_core_init+0x38>)
 801ea42:	2200      	movs	r2, #0
 801ea44:	701a      	strb	r2, [r3, #0]
}
 801ea46:	bf00      	nop
 801ea48:	bd80      	pop	{r7, pc}
 801ea4a:	bf00      	nop
 801ea4c:	20000868 	.word	0x20000868
 801ea50:	0801ed15 	.word	0x0801ed15
 801ea54:	2000082c 	.word	0x2000082c
 801ea58:	20000828 	.word	0x20000828

0801ea5c <lv_anim_init>:

void lv_anim_init(lv_anim_t * a)
{
 801ea5c:	b580      	push	{r7, lr}
 801ea5e:	b082      	sub	sp, #8
 801ea60:	af00      	add	r7, sp, #0
 801ea62:	6078      	str	r0, [r7, #4]
    lv_memset_00(a, sizeof(lv_anim_t));
 801ea64:	2144      	movs	r1, #68	; 0x44
 801ea66:	6878      	ldr	r0, [r7, #4]
 801ea68:	f002 fb0e 	bl	8021088 <lv_memset_00>
    a->time = 500;
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801ea72:	62da      	str	r2, [r3, #44]	; 0x2c
    a->start_value = 0;
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	2200      	movs	r2, #0
 801ea78:	621a      	str	r2, [r3, #32]
    a->end_value = 100;
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	2264      	movs	r2, #100	; 0x64
 801ea7e:	629a      	str	r2, [r3, #40]	; 0x28
    a->repeat_cnt = 1;
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	2201      	movs	r2, #1
 801ea84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	4a06      	ldr	r2, [pc, #24]	; (801eaa4 <lv_anim_init+0x48>)
 801ea8c:	61da      	str	r2, [r3, #28]
    a->early_apply = 1;
 801ea8e:	687a      	ldr	r2, [r7, #4]
 801ea90:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801ea94:	f043 0301 	orr.w	r3, r3, #1
 801ea98:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 801ea9c:	bf00      	nop
 801ea9e:	3708      	adds	r7, #8
 801eaa0:	46bd      	mov	sp, r7
 801eaa2:	bd80      	pop	{r7, pc}
 801eaa4:	0801ec5f 	.word	0x0801ec5f

0801eaa8 <lv_anim_start>:

lv_anim_t * lv_anim_start(const lv_anim_t * a)
{
 801eaa8:	b580      	push	{r7, lr}
 801eaaa:	b084      	sub	sp, #16
 801eaac:	af00      	add	r7, sp, #0
 801eaae:	6078      	str	r0, [r7, #4]
    TRACE_ANIM("begin");

    /*Do not let two animations for the same 'var' with the same 'exec_cb'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	685b      	ldr	r3, [r3, #4]
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	d007      	beq.n	801eac8 <lv_anim_start+0x20>
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	681a      	ldr	r2, [r3, #0]
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	685b      	ldr	r3, [r3, #4]
 801eac0:	4619      	mov	r1, r3
 801eac2:	4610      	mov	r0, r2
 801eac4:	f000 f868 	bl	801eb98 <lv_anim_del>

    /*If the list is empty the anim timer was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 801eac8:	4830      	ldr	r0, [pc, #192]	; (801eb8c <lv_anim_start+0xe4>)
 801eaca:	f001 fd35 	bl	8020538 <_lv_ll_is_empty>
 801eace:	4603      	mov	r3, r0
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d004      	beq.n	801eade <lv_anim_start+0x36>
        last_timer_run = lv_tick_get();
 801ead4:	f7ff ff6e 	bl	801e9b4 <lv_tick_get>
 801ead8:	4603      	mov	r3, r0
 801eada:	4a2d      	ldr	r2, [pc, #180]	; (801eb90 <lv_anim_start+0xe8>)
 801eadc:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801eade:	482b      	ldr	r0, [pc, #172]	; (801eb8c <lv_anim_start+0xe4>)
 801eae0:	f001 fc1a 	bl	8020318 <_lv_ll_ins_head>
 801eae4:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(new_anim);
 801eae6:	68fb      	ldr	r3, [r7, #12]
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	d100      	bne.n	801eaee <lv_anim_start+0x46>
 801eaec:	e7fe      	b.n	801eaec <lv_anim_start+0x44>
    if(new_anim == NULL) return NULL;
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d101      	bne.n	801eaf8 <lv_anim_start+0x50>
 801eaf4:	2300      	movs	r3, #0
 801eaf6:	e045      	b.n	801eb84 <lv_anim_start+0xdc>

    /*Initialize the animation descriptor*/
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 801eaf8:	2244      	movs	r2, #68	; 0x44
 801eafa:	6879      	ldr	r1, [r7, #4]
 801eafc:	68f8      	ldr	r0, [r7, #12]
 801eafe:	f002 f81d 	bl	8020b3c <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	687a      	ldr	r2, [r7, #4]
 801eb08:	429a      	cmp	r2, r3
 801eb0a:	d102      	bne.n	801eb12 <lv_anim_start+0x6a>
 801eb0c:	68fb      	ldr	r3, [r7, #12]
 801eb0e:	68fa      	ldr	r2, [r7, #12]
 801eb10:	601a      	str	r2, [r3, #0]
    new_anim->run_round = anim_run_round;
 801eb12:	4b20      	ldr	r3, [pc, #128]	; (801eb94 <lv_anim_start+0xec>)
 801eb14:	7819      	ldrb	r1, [r3, #0]
 801eb16:	68fa      	ldr	r2, [r7, #12]
 801eb18:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801eb1c:	f361 0382 	bfi	r3, r1, #2, #1
 801eb20:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

    /*Set the start value*/
    if(new_anim->early_apply) {
 801eb24:	68fb      	ldr	r3, [r7, #12]
 801eb26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eb2a:	f003 0301 	and.w	r3, r3, #1
 801eb2e:	b2db      	uxtb	r3, r3
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	d024      	beq.n	801eb7e <lv_anim_start+0xd6>
        if(new_anim->get_value_cb) {
 801eb34:	68fb      	ldr	r3, [r7, #12]
 801eb36:	695b      	ldr	r3, [r3, #20]
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d010      	beq.n	801eb5e <lv_anim_start+0xb6>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 801eb3c:	68fb      	ldr	r3, [r7, #12]
 801eb3e:	695b      	ldr	r3, [r3, #20]
 801eb40:	68f8      	ldr	r0, [r7, #12]
 801eb42:	4798      	blx	r3
 801eb44:	60b8      	str	r0, [r7, #8]
            new_anim->start_value += v_ofs;
 801eb46:	68fb      	ldr	r3, [r7, #12]
 801eb48:	6a1a      	ldr	r2, [r3, #32]
 801eb4a:	68bb      	ldr	r3, [r7, #8]
 801eb4c:	441a      	add	r2, r3
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	621a      	str	r2, [r3, #32]
            new_anim->end_value += v_ofs;
 801eb52:	68fb      	ldr	r3, [r7, #12]
 801eb54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801eb56:	68bb      	ldr	r3, [r7, #8]
 801eb58:	441a      	add	r2, r3
 801eb5a:	68fb      	ldr	r3, [r7, #12]
 801eb5c:	629a      	str	r2, [r3, #40]	; 0x28
        }

        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	685b      	ldr	r3, [r3, #4]
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	d00b      	beq.n	801eb7e <lv_anim_start+0xd6>
 801eb66:	68fb      	ldr	r3, [r7, #12]
 801eb68:	681b      	ldr	r3, [r3, #0]
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	d007      	beq.n	801eb7e <lv_anim_start+0xd6>
 801eb6e:	68fb      	ldr	r3, [r7, #12]
 801eb70:	685b      	ldr	r3, [r3, #4]
 801eb72:	68fa      	ldr	r2, [r7, #12]
 801eb74:	6810      	ldr	r0, [r2, #0]
 801eb76:	68fa      	ldr	r2, [r7, #12]
 801eb78:	6a12      	ldr	r2, [r2, #32]
 801eb7a:	4611      	mov	r1, r2
 801eb7c:	4798      	blx	r3
    }

    /*Creating an animation changed the linked list.
     *It's important if it happens in a ready callback. (see `anim_timer`)*/
    anim_mark_list_change();
 801eb7e:	f000 fa1f 	bl	801efc0 <anim_mark_list_change>

    TRACE_ANIM("finished");
    return new_anim;
 801eb82:	68fb      	ldr	r3, [r7, #12]
}
 801eb84:	4618      	mov	r0, r3
 801eb86:	3710      	adds	r7, #16
 801eb88:	46bd      	mov	sp, r7
 801eb8a:	bd80      	pop	{r7, pc}
 801eb8c:	20000868 	.word	0x20000868
 801eb90:	20000824 	.word	0x20000824
 801eb94:	20000829 	.word	0x20000829

0801eb98 <lv_anim_del>:

    return playtime;
}

bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 801eb98:	b580      	push	{r7, lr}
 801eb9a:	b086      	sub	sp, #24
 801eb9c:	af00      	add	r7, sp, #0
 801eb9e:	6078      	str	r0, [r7, #4]
 801eba0:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 801eba2:	2300      	movs	r3, #0
 801eba4:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801eba6:	481b      	ldr	r0, [pc, #108]	; (801ec14 <lv_anim_del+0x7c>)
 801eba8:	f001 fc7b 	bl	80204a2 <_lv_ll_get_head>
 801ebac:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801ebae:	e029      	b.n	801ec04 <lv_anim_del+0x6c>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801ebb0:	6979      	ldr	r1, [r7, #20]
 801ebb2:	4818      	ldr	r0, [pc, #96]	; (801ec14 <lv_anim_del+0x7c>)
 801ebb4:	f001 fc97 	bl	80204e6 <_lv_ll_get_next>
 801ebb8:	60f8      	str	r0, [r7, #12]

        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801ebba:	697b      	ldr	r3, [r7, #20]
 801ebbc:	681b      	ldr	r3, [r3, #0]
 801ebbe:	687a      	ldr	r2, [r7, #4]
 801ebc0:	429a      	cmp	r2, r3
 801ebc2:	d002      	beq.n	801ebca <lv_anim_del+0x32>
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d11a      	bne.n	801ec00 <lv_anim_del+0x68>
 801ebca:	697b      	ldr	r3, [r7, #20]
 801ebcc:	685b      	ldr	r3, [r3, #4]
 801ebce:	683a      	ldr	r2, [r7, #0]
 801ebd0:	429a      	cmp	r2, r3
 801ebd2:	d002      	beq.n	801ebda <lv_anim_del+0x42>
 801ebd4:	683b      	ldr	r3, [r7, #0]
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d112      	bne.n	801ec00 <lv_anim_del+0x68>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801ebda:	6979      	ldr	r1, [r7, #20]
 801ebdc:	480d      	ldr	r0, [pc, #52]	; (801ec14 <lv_anim_del+0x7c>)
 801ebde:	f001 fc03 	bl	80203e8 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 801ebe2:	697b      	ldr	r3, [r7, #20]
 801ebe4:	691b      	ldr	r3, [r3, #16]
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d003      	beq.n	801ebf2 <lv_anim_del+0x5a>
 801ebea:	697b      	ldr	r3, [r7, #20]
 801ebec:	691b      	ldr	r3, [r3, #16]
 801ebee:	6978      	ldr	r0, [r7, #20]
 801ebf0:	4798      	blx	r3
            lv_mem_free(a);
 801ebf2:	6978      	ldr	r0, [r7, #20]
 801ebf4:	f001 fe44 	bl	8020880 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 801ebf8:	f000 f9e2 	bl	801efc0 <anim_mark_list_change>
                                       the linked list*/
            del = true;
 801ebfc:	2301      	movs	r3, #1
 801ebfe:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 801ec00:	68fb      	ldr	r3, [r7, #12]
 801ec02:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 801ec04:	697b      	ldr	r3, [r7, #20]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d1d2      	bne.n	801ebb0 <lv_anim_del+0x18>
    }

    return del;
 801ec0a:	7cfb      	ldrb	r3, [r7, #19]
}
 801ec0c:	4618      	mov	r0, r3
 801ec0e:	3718      	adds	r7, #24
 801ec10:	46bd      	mov	sp, r7
 801ec12:	bd80      	pop	{r7, pc}
 801ec14:	20000868 	.word	0x20000868

0801ec18 <lv_anim_speed_to_time>:

    return cnt;
}

uint32_t lv_anim_speed_to_time(uint32_t speed, int32_t start, int32_t end)
{
 801ec18:	b480      	push	{r7}
 801ec1a:	b087      	sub	sp, #28
 801ec1c:	af00      	add	r7, sp, #0
 801ec1e:	60f8      	str	r0, [r7, #12]
 801ec20:	60b9      	str	r1, [r7, #8]
 801ec22:	607a      	str	r2, [r7, #4]
    uint32_t d    = LV_ABS(start - end);
 801ec24:	68ba      	ldr	r2, [r7, #8]
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	1ad3      	subs	r3, r2, r3
 801ec2a:	2b00      	cmp	r3, #0
 801ec2c:	bfb8      	it	lt
 801ec2e:	425b      	neglt	r3, r3
 801ec30:	613b      	str	r3, [r7, #16]
    uint32_t time = (d * 1000) / speed;
 801ec32:	693b      	ldr	r3, [r7, #16]
 801ec34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ec38:	fb03 f202 	mul.w	r2, r3, r2
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ec42:	617b      	str	r3, [r7, #20]

    if(time == 0) {
 801ec44:	697b      	ldr	r3, [r7, #20]
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	d102      	bne.n	801ec50 <lv_anim_speed_to_time+0x38>
        time++;
 801ec4a:	697b      	ldr	r3, [r7, #20]
 801ec4c:	3301      	adds	r3, #1
 801ec4e:	617b      	str	r3, [r7, #20]
    }

    return time;
 801ec50:	697b      	ldr	r3, [r7, #20]
}
 801ec52:	4618      	mov	r0, r3
 801ec54:	371c      	adds	r7, #28
 801ec56:	46bd      	mov	sp, r7
 801ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec5c:	4770      	bx	lr

0801ec5e <lv_anim_path_linear>:
{
    anim_timer(NULL);
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
 801ec5e:	b580      	push	{r7, lr}
 801ec60:	b086      	sub	sp, #24
 801ec62:	af02      	add	r7, sp, #8
 801ec64:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec72:	9300      	str	r3, [sp, #0]
 801ec74:	2300      	movs	r3, #0
 801ec76:	2100      	movs	r1, #0
 801ec78:	f001 fd7a 	bl	8020770 <lv_map>
 801ec7c:	60f8      	str	r0, [r7, #12]

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	6a1b      	ldr	r3, [r3, #32]
 801ec86:	1ad2      	subs	r2, r2, r3
 801ec88:	68fb      	ldr	r3, [r7, #12]
 801ec8a:	fb02 f303 	mul.w	r3, r2, r3
 801ec8e:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 801ec90:	68bb      	ldr	r3, [r7, #8]
 801ec92:	129b      	asrs	r3, r3, #10
 801ec94:	60bb      	str	r3, [r7, #8]
    new_value += a->start_value;
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	6a1b      	ldr	r3, [r3, #32]
 801ec9a:	68ba      	ldr	r2, [r7, #8]
 801ec9c:	4413      	add	r3, r2
 801ec9e:	60bb      	str	r3, [r7, #8]

    return new_value;
 801eca0:	68bb      	ldr	r3, [r7, #8]
}
 801eca2:	4618      	mov	r0, r3
 801eca4:	3710      	adds	r7, #16
 801eca6:	46bd      	mov	sp, r7
 801eca8:	bd80      	pop	{r7, pc}

0801ecaa <lv_anim_path_ease_out>:

    return new_value;
}

int32_t lv_anim_path_ease_out(const lv_anim_t * a)
{
 801ecaa:	b580      	push	{r7, lr}
 801ecac:	b088      	sub	sp, #32
 801ecae:	af02      	add	r7, sp, #8
 801ecb0:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ecba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ecbe:	9300      	str	r3, [sp, #0]
 801ecc0:	2300      	movs	r3, #0
 801ecc2:	2100      	movs	r1, #0
 801ecc4:	f001 fd54 	bl	8020770 <lv_map>
 801ecc8:	4603      	mov	r3, r0
 801ecca:	617b      	str	r3, [r7, #20]
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 801eccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ecd0:	9300      	str	r3, [sp, #0]
 801ecd2:	f240 33b6 	movw	r3, #950	; 0x3b6
 801ecd6:	f44f 7261 	mov.w	r2, #900	; 0x384
 801ecda:	2100      	movs	r1, #0
 801ecdc:	6978      	ldr	r0, [r7, #20]
 801ecde:	f001 fcf5 	bl	80206cc <lv_bezier3>
 801ece2:	4603      	mov	r3, r0
 801ece4:	613b      	str	r3, [r7, #16]

    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	6a1b      	ldr	r3, [r3, #32]
 801ecee:	1ad2      	subs	r2, r2, r3
 801ecf0:	693b      	ldr	r3, [r7, #16]
 801ecf2:	fb02 f303 	mul.w	r3, r2, r3
 801ecf6:	60fb      	str	r3, [r7, #12]
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 801ecf8:	68fb      	ldr	r3, [r7, #12]
 801ecfa:	129b      	asrs	r3, r3, #10
 801ecfc:	60fb      	str	r3, [r7, #12]
    new_value += a->start_value;
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	6a1b      	ldr	r3, [r3, #32]
 801ed02:	68fa      	ldr	r2, [r7, #12]
 801ed04:	4413      	add	r3, r2
 801ed06:	60fb      	str	r3, [r7, #12]

    return new_value;
 801ed08:	68fb      	ldr	r3, [r7, #12]
}
 801ed0a:	4618      	mov	r0, r3
 801ed0c:	3718      	adds	r7, #24
 801ed0e:	46bd      	mov	sp, r7
 801ed10:	bd80      	pop	{r7, pc}
	...

0801ed14 <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 801ed14:	b580      	push	{r7, lr}
 801ed16:	b088      	sub	sp, #32
 801ed18:	af00      	add	r7, sp, #0
 801ed1a:	6078      	str	r0, [r7, #4]
    LV_UNUSED(param);

    uint32_t elaps = lv_tick_elaps(last_timer_run);
 801ed1c:	4b5d      	ldr	r3, [pc, #372]	; (801ee94 <anim_timer+0x180>)
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	4618      	mov	r0, r3
 801ed22:	f7ff fe61 	bl	801e9e8 <lv_tick_elaps>
 801ed26:	61b8      	str	r0, [r7, #24]

    /*Flip the run round*/
    anim_run_round = anim_run_round ? false : true;
 801ed28:	4b5b      	ldr	r3, [pc, #364]	; (801ee98 <anim_timer+0x184>)
 801ed2a:	781b      	ldrb	r3, [r3, #0]
 801ed2c:	f083 0301 	eor.w	r3, r3, #1
 801ed30:	b2da      	uxtb	r2, r3
 801ed32:	4b59      	ldr	r3, [pc, #356]	; (801ee98 <anim_timer+0x184>)
 801ed34:	701a      	strb	r2, [r3, #0]

    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801ed36:	4859      	ldr	r0, [pc, #356]	; (801ee9c <anim_timer+0x188>)
 801ed38:	f001 fbb3 	bl	80204a2 <_lv_ll_get_head>
 801ed3c:	61f8      	str	r0, [r7, #28]

    while(a != NULL) {
 801ed3e:	e09c      	b.n	801ee7a <anim_timer+0x166>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 801ed40:	4b57      	ldr	r3, [pc, #348]	; (801eea0 <anim_timer+0x18c>)
 801ed42:	2200      	movs	r2, #0
 801ed44:	701a      	strb	r2, [r3, #0]

        if(a->run_round != anim_run_round) {
 801ed46:	69fb      	ldr	r3, [r7, #28]
 801ed48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ed4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ed50:	b2da      	uxtb	r2, r3
 801ed52:	4b51      	ldr	r3, [pc, #324]	; (801ee98 <anim_timer+0x184>)
 801ed54:	781b      	ldrb	r3, [r3, #0]
 801ed56:	429a      	cmp	r2, r3
 801ed58:	f000 8081 	beq.w	801ee5e <anim_timer+0x14a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 801ed5c:	4b4e      	ldr	r3, [pc, #312]	; (801ee98 <anim_timer+0x184>)
 801ed5e:	7819      	ldrb	r1, [r3, #0]
 801ed60:	69fa      	ldr	r2, [r7, #28]
 801ed62:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801ed66:	f361 0382 	bfi	r3, r1, #2, #1
 801ed6a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 801ed6e:	69fb      	ldr	r3, [r7, #28]
 801ed70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ed72:	461a      	mov	r2, r3
 801ed74:	69bb      	ldr	r3, [r7, #24]
 801ed76:	4413      	add	r3, r2
 801ed78:	617b      	str	r3, [r7, #20]
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 801ed7a:	69fb      	ldr	r3, [r7, #28]
 801ed7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ed80:	f003 0308 	and.w	r3, r3, #8
 801ed84:	b2db      	uxtb	r3, r3
 801ed86:	2b00      	cmp	r3, #0
 801ed88:	d132      	bne.n	801edf0 <anim_timer+0xdc>
 801ed8a:	69fb      	ldr	r3, [r7, #28]
 801ed8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	dc2e      	bgt.n	801edf0 <anim_timer+0xdc>
 801ed92:	697b      	ldr	r3, [r7, #20]
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	db2b      	blt.n	801edf0 <anim_timer+0xdc>
                if(a->early_apply == 0 && a->get_value_cb) {
 801ed98:	69fb      	ldr	r3, [r7, #28]
 801ed9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ed9e:	f003 0301 	and.w	r3, r3, #1
 801eda2:	b2db      	uxtb	r3, r3
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d114      	bne.n	801edd2 <anim_timer+0xbe>
 801eda8:	69fb      	ldr	r3, [r7, #28]
 801edaa:	695b      	ldr	r3, [r3, #20]
 801edac:	2b00      	cmp	r3, #0
 801edae:	d010      	beq.n	801edd2 <anim_timer+0xbe>
                    int32_t v_ofs = a->get_value_cb(a);
 801edb0:	69fb      	ldr	r3, [r7, #28]
 801edb2:	695b      	ldr	r3, [r3, #20]
 801edb4:	69f8      	ldr	r0, [r7, #28]
 801edb6:	4798      	blx	r3
 801edb8:	6138      	str	r0, [r7, #16]
                    a->start_value += v_ofs;
 801edba:	69fb      	ldr	r3, [r7, #28]
 801edbc:	6a1a      	ldr	r2, [r3, #32]
 801edbe:	693b      	ldr	r3, [r7, #16]
 801edc0:	441a      	add	r2, r3
 801edc2:	69fb      	ldr	r3, [r7, #28]
 801edc4:	621a      	str	r2, [r3, #32]
                    a->end_value += v_ofs;
 801edc6:	69fb      	ldr	r3, [r7, #28]
 801edc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801edca:	693b      	ldr	r3, [r7, #16]
 801edcc:	441a      	add	r2, r3
 801edce:	69fb      	ldr	r3, [r7, #28]
 801edd0:	629a      	str	r2, [r3, #40]	; 0x28
                }
                if(a->start_cb) a->start_cb(a);
 801edd2:	69fb      	ldr	r3, [r7, #28]
 801edd4:	689b      	ldr	r3, [r3, #8]
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d003      	beq.n	801ede2 <anim_timer+0xce>
 801edda:	69fb      	ldr	r3, [r7, #28]
 801eddc:	689b      	ldr	r3, [r3, #8]
 801edde:	69f8      	ldr	r0, [r7, #28]
 801ede0:	4798      	blx	r3
                a->start_cb_called = 1;
 801ede2:	69fa      	ldr	r2, [r7, #28]
 801ede4:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801ede8:	f043 0308 	orr.w	r3, r3, #8
 801edec:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
            a->act_time += elaps;
 801edf0:	69fb      	ldr	r3, [r7, #28]
 801edf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801edf4:	461a      	mov	r2, r3
 801edf6:	69bb      	ldr	r3, [r7, #24]
 801edf8:	4413      	add	r3, r2
 801edfa:	461a      	mov	r2, r3
 801edfc:	69fb      	ldr	r3, [r7, #28]
 801edfe:	631a      	str	r2, [r3, #48]	; 0x30
            if(a->act_time >= 0) {
 801ee00:	69fb      	ldr	r3, [r7, #28]
 801ee02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	db2a      	blt.n	801ee5e <anim_timer+0x14a>
                if(a->act_time > a->time) a->act_time = a->time;
 801ee08:	69fb      	ldr	r3, [r7, #28]
 801ee0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ee0c:	69fb      	ldr	r3, [r7, #28]
 801ee0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee10:	429a      	cmp	r2, r3
 801ee12:	dd03      	ble.n	801ee1c <anim_timer+0x108>
 801ee14:	69fb      	ldr	r3, [r7, #28]
 801ee16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ee18:	69fb      	ldr	r3, [r7, #28]
 801ee1a:	631a      	str	r2, [r3, #48]	; 0x30

                int32_t new_value;
                new_value = a->path_cb(a);
 801ee1c:	69fb      	ldr	r3, [r7, #28]
 801ee1e:	69db      	ldr	r3, [r3, #28]
 801ee20:	69f8      	ldr	r0, [r7, #28]
 801ee22:	4798      	blx	r3
 801ee24:	60f8      	str	r0, [r7, #12]

                if(new_value != a->current_value) {
 801ee26:	69fb      	ldr	r3, [r7, #28]
 801ee28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee2a:	68fa      	ldr	r2, [r7, #12]
 801ee2c:	429a      	cmp	r2, r3
 801ee2e:	d00d      	beq.n	801ee4c <anim_timer+0x138>
                    a->current_value = new_value;
 801ee30:	69fb      	ldr	r3, [r7, #28]
 801ee32:	68fa      	ldr	r2, [r7, #12]
 801ee34:	625a      	str	r2, [r3, #36]	; 0x24
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801ee36:	69fb      	ldr	r3, [r7, #28]
 801ee38:	685b      	ldr	r3, [r3, #4]
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d006      	beq.n	801ee4c <anim_timer+0x138>
 801ee3e:	69fb      	ldr	r3, [r7, #28]
 801ee40:	685b      	ldr	r3, [r3, #4]
 801ee42:	69fa      	ldr	r2, [r7, #28]
 801ee44:	6812      	ldr	r2, [r2, #0]
 801ee46:	68f9      	ldr	r1, [r7, #12]
 801ee48:	4610      	mov	r0, r2
 801ee4a:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 801ee4c:	69fb      	ldr	r3, [r7, #28]
 801ee4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ee50:	69fb      	ldr	r3, [r7, #28]
 801ee52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee54:	429a      	cmp	r2, r3
 801ee56:	db02      	blt.n	801ee5e <anim_timer+0x14a>
                    anim_ready_handler(a);
 801ee58:	69f8      	ldr	r0, [r7, #28]
 801ee5a:	f000 f823 	bl	801eea4 <anim_ready_handler>
            }
        }

        /*If the linked list changed due to anim. delete then it's not safe to continue
         *the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 801ee5e:	4b10      	ldr	r3, [pc, #64]	; (801eea0 <anim_timer+0x18c>)
 801ee60:	781b      	ldrb	r3, [r3, #0]
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d004      	beq.n	801ee70 <anim_timer+0x15c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801ee66:	480d      	ldr	r0, [pc, #52]	; (801ee9c <anim_timer+0x188>)
 801ee68:	f001 fb1b 	bl	80204a2 <_lv_ll_get_head>
 801ee6c:	61f8      	str	r0, [r7, #28]
 801ee6e:	e004      	b.n	801ee7a <anim_timer+0x166>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801ee70:	69f9      	ldr	r1, [r7, #28]
 801ee72:	480a      	ldr	r0, [pc, #40]	; (801ee9c <anim_timer+0x188>)
 801ee74:	f001 fb37 	bl	80204e6 <_lv_ll_get_next>
 801ee78:	61f8      	str	r0, [r7, #28]
    while(a != NULL) {
 801ee7a:	69fb      	ldr	r3, [r7, #28]
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	f47f af5f 	bne.w	801ed40 <anim_timer+0x2c>
    }

    last_timer_run = lv_tick_get();
 801ee82:	f7ff fd97 	bl	801e9b4 <lv_tick_get>
 801ee86:	4603      	mov	r3, r0
 801ee88:	4a02      	ldr	r2, [pc, #8]	; (801ee94 <anim_timer+0x180>)
 801ee8a:	6013      	str	r3, [r2, #0]
}
 801ee8c:	bf00      	nop
 801ee8e:	3720      	adds	r7, #32
 801ee90:	46bd      	mov	sp, r7
 801ee92:	bd80      	pop	{r7, pc}
 801ee94:	20000824 	.word	0x20000824
 801ee98:	20000829 	.word	0x20000829
 801ee9c:	20000868 	.word	0x20000868
 801eea0:	20000828 	.word	0x20000828

0801eea4 <anim_ready_handler>:
 * Called when an animation is ready to do the necessary thinks
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 */
static void anim_ready_handler(lv_anim_t * a)
{
 801eea4:	b580      	push	{r7, lr}
 801eea6:	b084      	sub	sp, #16
 801eea8:	af00      	add	r7, sp, #0
 801eeaa:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eeb2:	f003 0302 	and.w	r3, r3, #2
 801eeb6:	b2db      	uxtb	r3, r3
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d113      	bne.n	801eee4 <anim_ready_handler+0x40>
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d00e      	beq.n	801eee4 <anim_ready_handler+0x40>
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801eecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801eed0:	4293      	cmp	r3, r2
 801eed2:	d007      	beq.n	801eee4 <anim_ready_handler+0x40>
        a->repeat_cnt--;
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801eeda:	3b01      	subs	r3, #1
 801eedc:	b29a      	uxth	r2, r3
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready*/
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d125      	bne.n	801ef3a <anim_ready_handler+0x96>
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d007      	beq.n	801ef06 <anim_ready_handler+0x62>
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eefc:	f003 0302 	and.w	r3, r3, #2
 801ef00:	b2db      	uxtb	r3, r3
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d019      	beq.n	801ef3a <anim_ready_handler+0x96>

        /*Delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801ef06:	6879      	ldr	r1, [r7, #4]
 801ef08:	482c      	ldr	r0, [pc, #176]	; (801efbc <anim_ready_handler+0x118>)
 801ef0a:	f001 fa6d 	bl	80203e8 <_lv_ll_remove>
        /*Flag that the list has changed*/
        anim_mark_list_change();
 801ef0e:	f000 f857 	bl	801efc0 <anim_mark_list_change>

        /*Call the callback function at the end*/
        if(a->ready_cb != NULL) a->ready_cb(a);
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	68db      	ldr	r3, [r3, #12]
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d003      	beq.n	801ef22 <anim_ready_handler+0x7e>
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	68db      	ldr	r3, [r3, #12]
 801ef1e:	6878      	ldr	r0, [r7, #4]
 801ef20:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	691b      	ldr	r3, [r3, #16]
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d003      	beq.n	801ef32 <anim_ready_handler+0x8e>
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	691b      	ldr	r3, [r3, #16]
 801ef2e:	6878      	ldr	r0, [r7, #4]
 801ef30:	4798      	blx	r3
        lv_mem_free(a);
 801ef32:	6878      	ldr	r0, [r7, #4]
 801ef34:	f001 fca4 	bl	8020880 <lv_mem_free>
            tmp = a->time;
            a->time = a->playback_time;
            a->playback_time = tmp;
        }
    }
}
 801ef38:	e03c      	b.n	801efb4 <anim_ready_handler+0x110>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ef3e:	425a      	negs	r2, r3
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	631a      	str	r2, [r3, #48]	; 0x30
        if(a->playback_time != 0) {
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d033      	beq.n	801efb4 <anim_ready_handler+0x110>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ef52:	f003 0302 	and.w	r3, r3, #2
 801ef56:	b2db      	uxtb	r3, r3
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d104      	bne.n	801ef66 <anim_ready_handler+0xc2>
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ef60:	425a      	negs	r2, r3
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	631a      	str	r2, [r3, #48]	; 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ef6c:	f003 0302 	and.w	r3, r3, #2
 801ef70:	b2db      	uxtb	r3, r3
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	bf0c      	ite	eq
 801ef76:	2301      	moveq	r3, #1
 801ef78:	2300      	movne	r3, #0
 801ef7a:	b2d9      	uxtb	r1, r3
 801ef7c:	687a      	ldr	r2, [r7, #4]
 801ef7e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 801ef82:	f361 0341 	bfi	r3, r1, #1, #1
 801ef86:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            int32_t tmp    = a->start_value;
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	6a1b      	ldr	r3, [r3, #32]
 801ef8e:	60fb      	str	r3, [r7, #12]
            a->start_value = a->end_value;
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	621a      	str	r2, [r3, #32]
            a->end_value   = tmp;
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	68fa      	ldr	r2, [r7, #12]
 801ef9c:	629a      	str	r2, [r3, #40]	; 0x28
            tmp = a->time;
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801efa2:	60fb      	str	r3, [r7, #12]
            a->time = a->playback_time;
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801efa8:	461a      	mov	r2, r3
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	62da      	str	r2, [r3, #44]	; 0x2c
            a->playback_time = tmp;
 801efae:	68fa      	ldr	r2, [r7, #12]
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	639a      	str	r2, [r3, #56]	; 0x38
}
 801efb4:	bf00      	nop
 801efb6:	3710      	adds	r7, #16
 801efb8:	46bd      	mov	sp, r7
 801efba:	bd80      	pop	{r7, pc}
 801efbc:	20000868 	.word	0x20000868

0801efc0 <anim_mark_list_change>:

static void anim_mark_list_change(void)
{
 801efc0:	b580      	push	{r7, lr}
 801efc2:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 801efc4:	4b0a      	ldr	r3, [pc, #40]	; (801eff0 <anim_mark_list_change+0x30>)
 801efc6:	2201      	movs	r2, #1
 801efc8:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801efca:	480a      	ldr	r0, [pc, #40]	; (801eff4 <anim_mark_list_change+0x34>)
 801efcc:	f001 fa69 	bl	80204a2 <_lv_ll_get_head>
 801efd0:	4603      	mov	r3, r0
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d105      	bne.n	801efe2 <anim_mark_list_change+0x22>
        lv_timer_pause(_lv_anim_tmr);
 801efd6:	4b08      	ldr	r3, [pc, #32]	; (801eff8 <anim_mark_list_change+0x38>)
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	4618      	mov	r0, r3
 801efdc:	f002 ff66 	bl	8021eac <lv_timer_pause>
    else
        lv_timer_resume(_lv_anim_tmr);
}
 801efe0:	e004      	b.n	801efec <anim_mark_list_change+0x2c>
        lv_timer_resume(_lv_anim_tmr);
 801efe2:	4b05      	ldr	r3, [pc, #20]	; (801eff8 <anim_mark_list_change+0x38>)
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	4618      	mov	r0, r3
 801efe8:	f002 ff6f 	bl	8021eca <lv_timer_resume>
}
 801efec:	bf00      	nop
 801efee:	bd80      	pop	{r7, pc}
 801eff0:	20000828 	.word	0x20000828
 801eff4:	20000868 	.word	0x20000868
 801eff8:	2000082c 	.word	0x2000082c

0801effc <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801effc:	b480      	push	{r7}
 801effe:	b083      	sub	sp, #12
 801f000:	af00      	add	r7, sp, #0
 801f002:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f00a:	b29a      	uxth	r2, r3
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f012:	b29b      	uxth	r3, r3
 801f014:	1ad3      	subs	r3, r2, r3
 801f016:	b29b      	uxth	r3, r3
 801f018:	3301      	adds	r3, #1
 801f01a:	b29b      	uxth	r3, r3
 801f01c:	b21b      	sxth	r3, r3
}
 801f01e:	4618      	mov	r0, r3
 801f020:	370c      	adds	r7, #12
 801f022:	46bd      	mov	sp, r7
 801f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f028:	4770      	bx	lr

0801f02a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801f02a:	b480      	push	{r7}
 801f02c:	b083      	sub	sp, #12
 801f02e:	af00      	add	r7, sp, #0
 801f030:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f038:	b29a      	uxth	r2, r3
 801f03a:	687b      	ldr	r3, [r7, #4]
 801f03c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f040:	b29b      	uxth	r3, r3
 801f042:	1ad3      	subs	r3, r2, r3
 801f044:	b29b      	uxth	r3, r3
 801f046:	3301      	adds	r3, #1
 801f048:	b29b      	uxth	r3, r3
 801f04a:	b21b      	sxth	r3, r3
}
 801f04c:	4618      	mov	r0, r3
 801f04e:	370c      	adds	r7, #12
 801f050:	46bd      	mov	sp, r7
 801f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f056:	4770      	bx	lr

0801f058 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 801f058:	b480      	push	{r7}
 801f05a:	b085      	sub	sp, #20
 801f05c:	af00      	add	r7, sp, #0
 801f05e:	60f8      	str	r0, [r7, #12]
 801f060:	4608      	mov	r0, r1
 801f062:	4611      	mov	r1, r2
 801f064:	461a      	mov	r2, r3
 801f066:	4603      	mov	r3, r0
 801f068:	817b      	strh	r3, [r7, #10]
 801f06a:	460b      	mov	r3, r1
 801f06c:	813b      	strh	r3, [r7, #8]
 801f06e:	4613      	mov	r3, r2
 801f070:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 801f072:	68fb      	ldr	r3, [r7, #12]
 801f074:	897a      	ldrh	r2, [r7, #10]
 801f076:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	893a      	ldrh	r2, [r7, #8]
 801f07c:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 801f07e:	68fb      	ldr	r3, [r7, #12]
 801f080:	88fa      	ldrh	r2, [r7, #6]
 801f082:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 801f084:	68fb      	ldr	r3, [r7, #12]
 801f086:	8b3a      	ldrh	r2, [r7, #24]
 801f088:	80da      	strh	r2, [r3, #6]
}
 801f08a:	bf00      	nop
 801f08c:	3714      	adds	r7, #20
 801f08e:	46bd      	mov	sp, r7
 801f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f094:	4770      	bx	lr

0801f096 <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 801f096:	b480      	push	{r7}
 801f098:	b083      	sub	sp, #12
 801f09a:	af00      	add	r7, sp, #0
 801f09c:	6078      	str	r0, [r7, #4]
 801f09e:	460b      	mov	r3, r1
 801f0a0:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f0a8:	b29a      	uxth	r2, r3
 801f0aa:	887b      	ldrh	r3, [r7, #2]
 801f0ac:	4413      	add	r3, r2
 801f0ae:	b29b      	uxth	r3, r3
 801f0b0:	3b01      	subs	r3, #1
 801f0b2:	b29b      	uxth	r3, r3
 801f0b4:	b21a      	sxth	r2, r3
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	80da      	strh	r2, [r3, #6]
}
 801f0ba:	bf00      	nop
 801f0bc:	370c      	adds	r7, #12
 801f0be:	46bd      	mov	sp, r7
 801f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0c4:	4770      	bx	lr

0801f0c6 <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 801f0c6:	b480      	push	{r7}
 801f0c8:	b085      	sub	sp, #20
 801f0ca:	af00      	add	r7, sp, #0
 801f0cc:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f0d4:	461a      	mov	r2, r3
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f0dc:	1ad3      	subs	r3, r2, r3
 801f0de:	3301      	adds	r3, #1
 801f0e0:	461a      	mov	r2, r3
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f0e8:	4619      	mov	r1, r3
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f0f0:	1acb      	subs	r3, r1, r3
 801f0f2:	3301      	adds	r3, #1
 801f0f4:	fb02 f303 	mul.w	r3, r2, r3
 801f0f8:	60fb      	str	r3, [r7, #12]

    return size;
 801f0fa:	68fb      	ldr	r3, [r7, #12]
}
 801f0fc:	4618      	mov	r0, r3
 801f0fe:	3714      	adds	r7, #20
 801f100:	46bd      	mov	sp, r7
 801f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f106:	4770      	bx	lr

0801f108 <lv_area_increase>:

void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra)
{
 801f108:	b480      	push	{r7}
 801f10a:	b083      	sub	sp, #12
 801f10c:	af00      	add	r7, sp, #0
 801f10e:	6078      	str	r0, [r7, #4]
 801f110:	460b      	mov	r3, r1
 801f112:	807b      	strh	r3, [r7, #2]
 801f114:	4613      	mov	r3, r2
 801f116:	803b      	strh	r3, [r7, #0]
    area->x1 -= w_extra;
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f11e:	b29a      	uxth	r2, r3
 801f120:	887b      	ldrh	r3, [r7, #2]
 801f122:	1ad3      	subs	r3, r2, r3
 801f124:	b29b      	uxth	r3, r3
 801f126:	b21a      	sxth	r2, r3
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	801a      	strh	r2, [r3, #0]
    area->x2 += w_extra;
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f132:	b29a      	uxth	r2, r3
 801f134:	887b      	ldrh	r3, [r7, #2]
 801f136:	4413      	add	r3, r2
 801f138:	b29b      	uxth	r3, r3
 801f13a:	b21a      	sxth	r2, r3
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	809a      	strh	r2, [r3, #4]
    area->y1 -= h_extra;
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f146:	b29a      	uxth	r2, r3
 801f148:	883b      	ldrh	r3, [r7, #0]
 801f14a:	1ad3      	subs	r3, r2, r3
 801f14c:	b29b      	uxth	r3, r3
 801f14e:	b21a      	sxth	r2, r3
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	805a      	strh	r2, [r3, #2]
    area->y2 += h_extra;
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f15a:	b29a      	uxth	r2, r3
 801f15c:	883b      	ldrh	r3, [r7, #0]
 801f15e:	4413      	add	r3, r2
 801f160:	b29b      	uxth	r3, r3
 801f162:	b21a      	sxth	r2, r3
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	80da      	strh	r2, [r3, #6]
}
 801f168:	bf00      	nop
 801f16a:	370c      	adds	r7, #12
 801f16c:	46bd      	mov	sp, r7
 801f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f172:	4770      	bx	lr

0801f174 <lv_area_move>:

void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 801f174:	b480      	push	{r7}
 801f176:	b083      	sub	sp, #12
 801f178:	af00      	add	r7, sp, #0
 801f17a:	6078      	str	r0, [r7, #4]
 801f17c:	460b      	mov	r3, r1
 801f17e:	807b      	strh	r3, [r7, #2]
 801f180:	4613      	mov	r3, r2
 801f182:	803b      	strh	r3, [r7, #0]
    area->x1 += x_ofs;
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f18a:	b29a      	uxth	r2, r3
 801f18c:	887b      	ldrh	r3, [r7, #2]
 801f18e:	4413      	add	r3, r2
 801f190:	b29b      	uxth	r3, r3
 801f192:	b21a      	sxth	r2, r3
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	801a      	strh	r2, [r3, #0]
    area->x2 += x_ofs;
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f19e:	b29a      	uxth	r2, r3
 801f1a0:	887b      	ldrh	r3, [r7, #2]
 801f1a2:	4413      	add	r3, r2
 801f1a4:	b29b      	uxth	r3, r3
 801f1a6:	b21a      	sxth	r2, r3
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	809a      	strh	r2, [r3, #4]
    area->y1 += y_ofs;
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f1b2:	b29a      	uxth	r2, r3
 801f1b4:	883b      	ldrh	r3, [r7, #0]
 801f1b6:	4413      	add	r3, r2
 801f1b8:	b29b      	uxth	r3, r3
 801f1ba:	b21a      	sxth	r2, r3
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	805a      	strh	r2, [r3, #2]
    area->y2 += y_ofs;
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f1c6:	b29a      	uxth	r2, r3
 801f1c8:	883b      	ldrh	r3, [r7, #0]
 801f1ca:	4413      	add	r3, r2
 801f1cc:	b29b      	uxth	r3, r3
 801f1ce:	b21a      	sxth	r2, r3
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	80da      	strh	r2, [r3, #6]
}
 801f1d4:	bf00      	nop
 801f1d6:	370c      	adds	r7, #12
 801f1d8:	46bd      	mov	sp, r7
 801f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1de:	4770      	bx	lr

0801f1e0 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801f1e0:	b480      	push	{r7}
 801f1e2:	b087      	sub	sp, #28
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	60f8      	str	r0, [r7, #12]
 801f1e8:	60b9      	str	r1, [r7, #8]
 801f1ea:	607a      	str	r2, [r7, #4]
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f1f2:	68bb      	ldr	r3, [r7, #8]
 801f1f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f1f8:	4293      	cmp	r3, r2
 801f1fa:	bfb8      	it	lt
 801f1fc:	4613      	movlt	r3, r2
 801f1fe:	b21a      	sxth	r2, r3
 801f200:	68fb      	ldr	r3, [r7, #12]
 801f202:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f20a:	68bb      	ldr	r3, [r7, #8]
 801f20c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f210:	4293      	cmp	r3, r2
 801f212:	bfb8      	it	lt
 801f214:	4613      	movlt	r3, r2
 801f216:	b21a      	sxth	r2, r3
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f222:	68bb      	ldr	r3, [r7, #8]
 801f224:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f228:	4293      	cmp	r3, r2
 801f22a:	bfa8      	it	ge
 801f22c:	4613      	movge	r3, r2
 801f22e:	b21a      	sxth	r2, r3
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f23a:	68bb      	ldr	r3, [r7, #8]
 801f23c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f240:	4293      	cmp	r3, r2
 801f242:	bfa8      	it	ge
 801f244:	4613      	movge	r3, r2
 801f246:	b21a      	sxth	r2, r3
 801f248:	68fb      	ldr	r3, [r7, #12]
 801f24a:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 801f24c:	2301      	movs	r3, #1
 801f24e:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f25c:	429a      	cmp	r2, r3
 801f25e:	dc07      	bgt.n	801f270 <_lv_area_intersect+0x90>
 801f260:	68fb      	ldr	r3, [r7, #12]
 801f262:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f26c:	429a      	cmp	r2, r3
 801f26e:	dd01      	ble.n	801f274 <_lv_area_intersect+0x94>
        union_ok = false;
 801f270:	2300      	movs	r3, #0
 801f272:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 801f274:	7dfb      	ldrb	r3, [r7, #23]
}
 801f276:	4618      	mov	r0, r3
 801f278:	371c      	adds	r7, #28
 801f27a:	46bd      	mov	sp, r7
 801f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f280:	4770      	bx	lr

0801f282 <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801f282:	b480      	push	{r7}
 801f284:	b085      	sub	sp, #20
 801f286:	af00      	add	r7, sp, #0
 801f288:	60f8      	str	r0, [r7, #12]
 801f28a:	60b9      	str	r1, [r7, #8]
 801f28c:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f294:	68bb      	ldr	r3, [r7, #8]
 801f296:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f29a:	4293      	cmp	r3, r2
 801f29c:	bfa8      	it	ge
 801f29e:	4613      	movge	r3, r2
 801f2a0:	b21a      	sxth	r2, r3
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f2ac:	68bb      	ldr	r3, [r7, #8]
 801f2ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f2b2:	4293      	cmp	r3, r2
 801f2b4:	bfa8      	it	ge
 801f2b6:	4613      	movge	r3, r2
 801f2b8:	b21a      	sxth	r2, r3
 801f2ba:	68fb      	ldr	r3, [r7, #12]
 801f2bc:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f2c4:	68bb      	ldr	r3, [r7, #8]
 801f2c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f2ca:	4293      	cmp	r3, r2
 801f2cc:	bfb8      	it	lt
 801f2ce:	4613      	movlt	r3, r2
 801f2d0:	b21a      	sxth	r2, r3
 801f2d2:	68fb      	ldr	r3, [r7, #12]
 801f2d4:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f2dc:	68bb      	ldr	r3, [r7, #8]
 801f2de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f2e2:	4293      	cmp	r3, r2
 801f2e4:	bfb8      	it	lt
 801f2e6:	4613      	movlt	r3, r2
 801f2e8:	b21a      	sxth	r2, r3
 801f2ea:	68fb      	ldr	r3, [r7, #12]
 801f2ec:	80da      	strh	r2, [r3, #6]
}
 801f2ee:	bf00      	nop
 801f2f0:	3714      	adds	r7, #20
 801f2f2:	46bd      	mov	sp, r7
 801f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2f8:	4770      	bx	lr

0801f2fa <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 801f2fa:	b580      	push	{r7, lr}
 801f2fc:	b088      	sub	sp, #32
 801f2fe:	af00      	add	r7, sp, #0
 801f300:	60f8      	str	r0, [r7, #12]
 801f302:	60b9      	str	r1, [r7, #8]
 801f304:	4613      	mov	r3, r2
 801f306:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 801f308:	2300      	movs	r3, #0
 801f30a:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801f30c:	68bb      	ldr	r3, [r7, #8]
 801f30e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f312:	68fb      	ldr	r3, [r7, #12]
 801f314:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f318:	429a      	cmp	r2, r3
 801f31a:	db19      	blt.n	801f350 <_lv_area_is_point_on+0x56>
 801f31c:	68bb      	ldr	r3, [r7, #8]
 801f31e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f328:	429a      	cmp	r2, r3
 801f32a:	dc11      	bgt.n	801f350 <_lv_area_is_point_on+0x56>
 801f32c:	68bb      	ldr	r3, [r7, #8]
 801f32e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f332:	68fb      	ldr	r3, [r7, #12]
 801f334:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f338:	429a      	cmp	r2, r3
 801f33a:	db09      	blt.n	801f350 <_lv_area_is_point_on+0x56>
 801f33c:	68bb      	ldr	r3, [r7, #8]
 801f33e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f342:	68fb      	ldr	r3, [r7, #12]
 801f344:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f348:	429a      	cmp	r2, r3
 801f34a:	dc01      	bgt.n	801f350 <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 801f34c:	2301      	movs	r3, #1
 801f34e:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 801f350:	7ffb      	ldrb	r3, [r7, #31]
 801f352:	f083 0301 	eor.w	r3, r3, #1
 801f356:	b2db      	uxtb	r3, r3
 801f358:	2b00      	cmp	r3, #0
 801f35a:	d001      	beq.n	801f360 <_lv_area_is_point_on+0x66>
        return false;
 801f35c:	2300      	movs	r3, #0
 801f35e:	e0f1      	b.n	801f544 <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 801f360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f364:	2b00      	cmp	r3, #0
 801f366:	dc01      	bgt.n	801f36c <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 801f368:	2301      	movs	r3, #1
 801f36a:	e0eb      	b.n	801f544 <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 801f36c:	68f8      	ldr	r0, [r7, #12]
 801f36e:	f7ff fe45 	bl	801effc <lv_area_get_width>
 801f372:	4603      	mov	r3, r0
 801f374:	2b00      	cmp	r3, #0
 801f376:	da00      	bge.n	801f37a <_lv_area_is_point_on+0x80>
 801f378:	3301      	adds	r3, #1
 801f37a:	105b      	asrs	r3, r3, #1
 801f37c:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 801f37e:	68f8      	ldr	r0, [r7, #12]
 801f380:	f7ff fe53 	bl	801f02a <lv_area_get_height>
 801f384:	4603      	mov	r3, r0
 801f386:	2b00      	cmp	r3, #0
 801f388:	da00      	bge.n	801f38c <_lv_area_is_point_on+0x92>
 801f38a:	3301      	adds	r3, #1
 801f38c:	105b      	asrs	r3, r3, #1
 801f38e:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MIN(w, h);
 801f390:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801f394:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801f398:	4293      	cmp	r3, r2
 801f39a:	bfa8      	it	ge
 801f39c:	4613      	movge	r3, r2
 801f39e:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 801f3a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f3a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801f3a8:	429a      	cmp	r2, r3
 801f3aa:	dd01      	ble.n	801f3b0 <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 801f3ac:	8b3b      	ldrh	r3, [r7, #24]
 801f3ae:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f3b6:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f3be:	b29a      	uxth	r2, r3
 801f3c0:	88fb      	ldrh	r3, [r7, #6]
 801f3c2:	4413      	add	r3, r2
 801f3c4:	b29b      	uxth	r3, r3
 801f3c6:	b21b      	sxth	r3, r3
 801f3c8:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f3d0:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f3d8:	b29a      	uxth	r2, r3
 801f3da:	88fb      	ldrh	r3, [r7, #6]
 801f3dc:	4413      	add	r3, r2
 801f3de:	b29b      	uxth	r3, r3
 801f3e0:	b21b      	sxth	r3, r3
 801f3e2:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801f3e4:	f107 0310 	add.w	r3, r7, #16
 801f3e8:	2200      	movs	r2, #0
 801f3ea:	68b9      	ldr	r1, [r7, #8]
 801f3ec:	4618      	mov	r0, r3
 801f3ee:	f7ff ff84 	bl	801f2fa <_lv_area_is_point_on>
 801f3f2:	4603      	mov	r3, r0
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d017      	beq.n	801f428 <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 801f3f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f3fc:	b29a      	uxth	r2, r3
 801f3fe:	88fb      	ldrh	r3, [r7, #6]
 801f400:	4413      	add	r3, r2
 801f402:	b29b      	uxth	r3, r3
 801f404:	b21b      	sxth	r3, r3
 801f406:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 801f408:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801f40c:	b29a      	uxth	r2, r3
 801f40e:	88fb      	ldrh	r3, [r7, #6]
 801f410:	4413      	add	r3, r2
 801f412:	b29b      	uxth	r3, r3
 801f414:	b21b      	sxth	r3, r3
 801f416:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801f418:	f107 0310 	add.w	r3, r7, #16
 801f41c:	68b9      	ldr	r1, [r7, #8]
 801f41e:	4618      	mov	r0, r3
 801f420:	f000 fb30 	bl	801fa84 <lv_point_within_circle>
 801f424:	4603      	mov	r3, r0
 801f426:	e08d      	b.n	801f544 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 801f428:	68fb      	ldr	r3, [r7, #12]
 801f42a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f42e:	b29a      	uxth	r2, r3
 801f430:	88fb      	ldrh	r3, [r7, #6]
 801f432:	1ad3      	subs	r3, r2, r3
 801f434:	b29b      	uxth	r3, r3
 801f436:	b21b      	sxth	r3, r3
 801f438:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 801f43a:	68fb      	ldr	r3, [r7, #12]
 801f43c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f440:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801f442:	f107 0310 	add.w	r3, r7, #16
 801f446:	2200      	movs	r2, #0
 801f448:	68b9      	ldr	r1, [r7, #8]
 801f44a:	4618      	mov	r0, r3
 801f44c:	f7ff ff55 	bl	801f2fa <_lv_area_is_point_on>
 801f450:	4603      	mov	r3, r0
 801f452:	2b00      	cmp	r3, #0
 801f454:	d017      	beq.n	801f486 <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 801f456:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f45a:	b29a      	uxth	r2, r3
 801f45c:	88fb      	ldrh	r3, [r7, #6]
 801f45e:	4413      	add	r3, r2
 801f460:	b29b      	uxth	r3, r3
 801f462:	b21b      	sxth	r3, r3
 801f464:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 801f466:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f46a:	b29a      	uxth	r2, r3
 801f46c:	88fb      	ldrh	r3, [r7, #6]
 801f46e:	1ad3      	subs	r3, r2, r3
 801f470:	b29b      	uxth	r3, r3
 801f472:	b21b      	sxth	r3, r3
 801f474:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801f476:	f107 0310 	add.w	r3, r7, #16
 801f47a:	68b9      	ldr	r1, [r7, #8]
 801f47c:	4618      	mov	r0, r3
 801f47e:	f000 fb01 	bl	801fa84 <lv_point_within_circle>
 801f482:	4603      	mov	r3, r0
 801f484:	e05e      	b.n	801f544 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 801f486:	68fb      	ldr	r3, [r7, #12]
 801f488:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f48c:	b29a      	uxth	r2, r3
 801f48e:	88fb      	ldrh	r3, [r7, #6]
 801f490:	1ad3      	subs	r3, r2, r3
 801f492:	b29b      	uxth	r3, r3
 801f494:	b21b      	sxth	r3, r3
 801f496:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 801f498:	68fb      	ldr	r3, [r7, #12]
 801f49a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f49e:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801f4a0:	f107 0310 	add.w	r3, r7, #16
 801f4a4:	2200      	movs	r2, #0
 801f4a6:	68b9      	ldr	r1, [r7, #8]
 801f4a8:	4618      	mov	r0, r3
 801f4aa:	f7ff ff26 	bl	801f2fa <_lv_area_is_point_on>
 801f4ae:	4603      	mov	r3, r0
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d017      	beq.n	801f4e4 <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 801f4b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801f4b8:	b29a      	uxth	r2, r3
 801f4ba:	88fb      	ldrh	r3, [r7, #6]
 801f4bc:	1ad3      	subs	r3, r2, r3
 801f4be:	b29b      	uxth	r3, r3
 801f4c0:	b21b      	sxth	r3, r3
 801f4c2:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 801f4c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f4c8:	b29a      	uxth	r2, r3
 801f4ca:	88fb      	ldrh	r3, [r7, #6]
 801f4cc:	1ad3      	subs	r3, r2, r3
 801f4ce:	b29b      	uxth	r3, r3
 801f4d0:	b21b      	sxth	r3, r3
 801f4d2:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801f4d4:	f107 0310 	add.w	r3, r7, #16
 801f4d8:	68b9      	ldr	r1, [r7, #8]
 801f4da:	4618      	mov	r0, r3
 801f4dc:	f000 fad2 	bl	801fa84 <lv_point_within_circle>
 801f4e0:	4603      	mov	r3, r0
 801f4e2:	e02f      	b.n	801f544 <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 801f4e4:	68fb      	ldr	r3, [r7, #12]
 801f4e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f4ea:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801f4ec:	68fb      	ldr	r3, [r7, #12]
 801f4ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f4f2:	b29a      	uxth	r2, r3
 801f4f4:	88fb      	ldrh	r3, [r7, #6]
 801f4f6:	4413      	add	r3, r2
 801f4f8:	b29b      	uxth	r3, r3
 801f4fa:	b21b      	sxth	r3, r3
 801f4fc:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801f4fe:	f107 0310 	add.w	r3, r7, #16
 801f502:	2200      	movs	r2, #0
 801f504:	68b9      	ldr	r1, [r7, #8]
 801f506:	4618      	mov	r0, r3
 801f508:	f7ff fef7 	bl	801f2fa <_lv_area_is_point_on>
 801f50c:	4603      	mov	r3, r0
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d017      	beq.n	801f542 <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 801f512:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801f516:	b29a      	uxth	r2, r3
 801f518:	88fb      	ldrh	r3, [r7, #6]
 801f51a:	1ad3      	subs	r3, r2, r3
 801f51c:	b29b      	uxth	r3, r3
 801f51e:	b21b      	sxth	r3, r3
 801f520:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 801f522:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801f526:	b29a      	uxth	r2, r3
 801f528:	88fb      	ldrh	r3, [r7, #6]
 801f52a:	4413      	add	r3, r2
 801f52c:	b29b      	uxth	r3, r3
 801f52e:	b21b      	sxth	r3, r3
 801f530:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801f532:	f107 0310 	add.w	r3, r7, #16
 801f536:	68b9      	ldr	r1, [r7, #8]
 801f538:	4618      	mov	r0, r3
 801f53a:	f000 faa3 	bl	801fa84 <lv_point_within_circle>
 801f53e:	4603      	mov	r3, r0
 801f540:	e000      	b.n	801f544 <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 801f542:	2301      	movs	r3, #1
}
 801f544:	4618      	mov	r0, r3
 801f546:	3720      	adds	r7, #32
 801f548:	46bd      	mov	sp, r7
 801f54a:	bd80      	pop	{r7, pc}

0801f54c <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801f54c:	b480      	push	{r7}
 801f54e:	b083      	sub	sp, #12
 801f550:	af00      	add	r7, sp, #0
 801f552:	6078      	str	r0, [r7, #4]
 801f554:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f55c:	683b      	ldr	r3, [r7, #0]
 801f55e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f562:	429a      	cmp	r2, r3
 801f564:	dc19      	bgt.n	801f59a <_lv_area_is_on+0x4e>
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f56c:	683b      	ldr	r3, [r7, #0]
 801f56e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f572:	429a      	cmp	r2, r3
 801f574:	db11      	blt.n	801f59a <_lv_area_is_on+0x4e>
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f57c:	683b      	ldr	r3, [r7, #0]
 801f57e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f582:	429a      	cmp	r2, r3
 801f584:	dc09      	bgt.n	801f59a <_lv_area_is_on+0x4e>
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f58c:	683b      	ldr	r3, [r7, #0]
 801f58e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f592:	429a      	cmp	r2, r3
 801f594:	db01      	blt.n	801f59a <_lv_area_is_on+0x4e>
        return true;
 801f596:	2301      	movs	r3, #1
 801f598:	e000      	b.n	801f59c <_lv_area_is_on+0x50>
    }
    else {
        return false;
 801f59a:	2300      	movs	r3, #0
    }
}
 801f59c:	4618      	mov	r0, r3
 801f59e:	370c      	adds	r7, #12
 801f5a0:	46bd      	mov	sp, r7
 801f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5a6:	4770      	bx	lr

0801f5a8 <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 801f5a8:	b580      	push	{r7, lr}
 801f5aa:	b086      	sub	sp, #24
 801f5ac:	af00      	add	r7, sp, #0
 801f5ae:	60f8      	str	r0, [r7, #12]
 801f5b0:	60b9      	str	r1, [r7, #8]
 801f5b2:	4613      	mov	r3, r2
 801f5b4:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801f5ba:	68fb      	ldr	r3, [r7, #12]
 801f5bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f5c0:	68bb      	ldr	r3, [r7, #8]
 801f5c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f5c6:	429a      	cmp	r2, r3
 801f5c8:	db19      	blt.n	801f5fe <_lv_area_is_in+0x56>
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f5d0:	68bb      	ldr	r3, [r7, #8]
 801f5d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f5d6:	429a      	cmp	r2, r3
 801f5d8:	db11      	blt.n	801f5fe <_lv_area_is_in+0x56>
 801f5da:	68fb      	ldr	r3, [r7, #12]
 801f5dc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f5e0:	68bb      	ldr	r3, [r7, #8]
 801f5e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f5e6:	429a      	cmp	r2, r3
 801f5e8:	dc09      	bgt.n	801f5fe <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 801f5ea:	68fb      	ldr	r3, [r7, #12]
 801f5ec:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f5f0:	68bb      	ldr	r3, [r7, #8]
 801f5f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801f5f6:	429a      	cmp	r2, r3
 801f5f8:	dc01      	bgt.n	801f5fe <_lv_area_is_in+0x56>
        is_in = true;
 801f5fa:	2301      	movs	r3, #1
 801f5fc:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 801f5fe:	7dfb      	ldrb	r3, [r7, #23]
 801f600:	f083 0301 	eor.w	r3, r3, #1
 801f604:	b2db      	uxtb	r3, r3
 801f606:	2b00      	cmp	r3, #0
 801f608:	d001      	beq.n	801f60e <_lv_area_is_in+0x66>
 801f60a:	2300      	movs	r3, #0
 801f60c:	e066      	b.n	801f6dc <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 801f60e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f612:	2b00      	cmp	r3, #0
 801f614:	d101      	bne.n	801f61a <_lv_area_is_in+0x72>
 801f616:	2301      	movs	r3, #1
 801f618:	e060      	b.n	801f6dc <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 801f61a:	68fb      	ldr	r3, [r7, #12]
 801f61c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f620:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801f622:	68fb      	ldr	r3, [r7, #12]
 801f624:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f628:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801f62a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f62e:	f107 0310 	add.w	r3, r7, #16
 801f632:	4619      	mov	r1, r3
 801f634:	68b8      	ldr	r0, [r7, #8]
 801f636:	f7ff fe60 	bl	801f2fa <_lv_area_is_point_on>
 801f63a:	4603      	mov	r3, r0
 801f63c:	f083 0301 	eor.w	r3, r3, #1
 801f640:	b2db      	uxtb	r3, r3
 801f642:	2b00      	cmp	r3, #0
 801f644:	d001      	beq.n	801f64a <_lv_area_is_in+0xa2>
 801f646:	2300      	movs	r3, #0
 801f648:	e048      	b.n	801f6dc <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801f64a:	68fb      	ldr	r3, [r7, #12]
 801f64c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f650:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801f652:	68fb      	ldr	r3, [r7, #12]
 801f654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f658:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801f65a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f65e:	f107 0310 	add.w	r3, r7, #16
 801f662:	4619      	mov	r1, r3
 801f664:	68b8      	ldr	r0, [r7, #8]
 801f666:	f7ff fe48 	bl	801f2fa <_lv_area_is_point_on>
 801f66a:	4603      	mov	r3, r0
 801f66c:	f083 0301 	eor.w	r3, r3, #1
 801f670:	b2db      	uxtb	r3, r3
 801f672:	2b00      	cmp	r3, #0
 801f674:	d001      	beq.n	801f67a <_lv_area_is_in+0xd2>
 801f676:	2300      	movs	r3, #0
 801f678:	e030      	b.n	801f6dc <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f680:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f688:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801f68a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f68e:	f107 0310 	add.w	r3, r7, #16
 801f692:	4619      	mov	r1, r3
 801f694:	68b8      	ldr	r0, [r7, #8]
 801f696:	f7ff fe30 	bl	801f2fa <_lv_area_is_point_on>
 801f69a:	4603      	mov	r3, r0
 801f69c:	f083 0301 	eor.w	r3, r3, #1
 801f6a0:	b2db      	uxtb	r3, r3
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d001      	beq.n	801f6aa <_lv_area_is_in+0x102>
 801f6a6:	2300      	movs	r3, #0
 801f6a8:	e018      	b.n	801f6dc <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801f6aa:	68fb      	ldr	r3, [r7, #12]
 801f6ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f6b0:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f6b8:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801f6ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f6be:	f107 0310 	add.w	r3, r7, #16
 801f6c2:	4619      	mov	r1, r3
 801f6c4:	68b8      	ldr	r0, [r7, #8]
 801f6c6:	f7ff fe18 	bl	801f2fa <_lv_area_is_point_on>
 801f6ca:	4603      	mov	r3, r0
 801f6cc:	f083 0301 	eor.w	r3, r3, #1
 801f6d0:	b2db      	uxtb	r3, r3
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d001      	beq.n	801f6da <_lv_area_is_in+0x132>
 801f6d6:	2300      	movs	r3, #0
 801f6d8:	e000      	b.n	801f6dc <_lv_area_is_in+0x134>

    return true;
 801f6da:	2301      	movs	r3, #1
}
 801f6dc:	4618      	mov	r0, r3
 801f6de:	3718      	adds	r7, #24
 801f6e0:	46bd      	mov	sp, r7
 801f6e2:	bd80      	pop	{r7, pc}

0801f6e4 <_lv_area_is_out>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `aout_p` is fully outside `aholder_p`
 */
bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 801f6e4:	b580      	push	{r7, lr}
 801f6e6:	b086      	sub	sp, #24
 801f6e8:	af00      	add	r7, sp, #0
 801f6ea:	60f8      	str	r0, [r7, #12]
 801f6ec:	60b9      	str	r1, [r7, #8]
 801f6ee:	4613      	mov	r3, r2
 801f6f0:	80fb      	strh	r3, [r7, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 801f6f2:	68fb      	ldr	r3, [r7, #12]
 801f6f4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f6f8:	68bb      	ldr	r3, [r7, #8]
 801f6fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f6fe:	429a      	cmp	r2, r3
 801f700:	db17      	blt.n	801f732 <_lv_area_is_out+0x4e>
 801f702:	68fb      	ldr	r3, [r7, #12]
 801f704:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f708:	68bb      	ldr	r3, [r7, #8]
 801f70a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f70e:	429a      	cmp	r2, r3
 801f710:	db0f      	blt.n	801f732 <_lv_area_is_out+0x4e>
 801f712:	68fb      	ldr	r3, [r7, #12]
 801f714:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f718:	68bb      	ldr	r3, [r7, #8]
 801f71a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f71e:	429a      	cmp	r2, r3
 801f720:	dc07      	bgt.n	801f732 <_lv_area_is_out+0x4e>
       aout_p->y1 > aholder_p->y2) {
 801f722:	68fb      	ldr	r3, [r7, #12]
 801f724:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801f728:	68bb      	ldr	r3, [r7, #8]
 801f72a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 801f72e:	429a      	cmp	r2, r3
 801f730:	dd01      	ble.n	801f736 <_lv_area_is_out+0x52>
        return true;
 801f732:	2301      	movs	r3, #1
 801f734:	e05a      	b.n	801f7ec <_lv_area_is_out+0x108>
    }

    if(radius == 0) return false;
 801f736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	d101      	bne.n	801f742 <_lv_area_is_out+0x5e>
 801f73e:	2300      	movs	r3, #0
 801f740:	e054      	b.n	801f7ec <_lv_area_is_out+0x108>

    /*Check if the corner points are outside the radius or not*/
    lv_point_t p;

    p.x = aout_p->x1;
 801f742:	68fb      	ldr	r3, [r7, #12]
 801f744:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f748:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 801f74a:	68fb      	ldr	r3, [r7, #12]
 801f74c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f750:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801f752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f756:	f107 0314 	add.w	r3, r7, #20
 801f75a:	4619      	mov	r1, r3
 801f75c:	68b8      	ldr	r0, [r7, #8]
 801f75e:	f7ff fdcc 	bl	801f2fa <_lv_area_is_point_on>
 801f762:	4603      	mov	r3, r0
 801f764:	2b00      	cmp	r3, #0
 801f766:	d001      	beq.n	801f76c <_lv_area_is_out+0x88>
 801f768:	2300      	movs	r3, #0
 801f76a:	e03f      	b.n	801f7ec <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 801f76c:	68fb      	ldr	r3, [r7, #12]
 801f76e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f772:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f77a:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801f77c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f780:	f107 0314 	add.w	r3, r7, #20
 801f784:	4619      	mov	r1, r3
 801f786:	68b8      	ldr	r0, [r7, #8]
 801f788:	f7ff fdb7 	bl	801f2fa <_lv_area_is_point_on>
 801f78c:	4603      	mov	r3, r0
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d001      	beq.n	801f796 <_lv_area_is_out+0xb2>
 801f792:	2300      	movs	r3, #0
 801f794:	e02a      	b.n	801f7ec <_lv_area_is_out+0x108>

    p.x = aout_p->x1;
 801f796:	68fb      	ldr	r3, [r7, #12]
 801f798:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f79c:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 801f79e:	68fb      	ldr	r3, [r7, #12]
 801f7a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f7a4:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801f7a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f7aa:	f107 0314 	add.w	r3, r7, #20
 801f7ae:	4619      	mov	r1, r3
 801f7b0:	68b8      	ldr	r0, [r7, #8]
 801f7b2:	f7ff fda2 	bl	801f2fa <_lv_area_is_point_on>
 801f7b6:	4603      	mov	r3, r0
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d001      	beq.n	801f7c0 <_lv_area_is_out+0xdc>
 801f7bc:	2300      	movs	r3, #0
 801f7be:	e015      	b.n	801f7ec <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 801f7c0:	68fb      	ldr	r3, [r7, #12]
 801f7c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f7c6:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 801f7c8:	68fb      	ldr	r3, [r7, #12]
 801f7ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f7ce:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801f7d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801f7d4:	f107 0314 	add.w	r3, r7, #20
 801f7d8:	4619      	mov	r1, r3
 801f7da:	68b8      	ldr	r0, [r7, #8]
 801f7dc:	f7ff fd8d 	bl	801f2fa <_lv_area_is_point_on>
 801f7e0:	4603      	mov	r3, r0
 801f7e2:	2b00      	cmp	r3, #0
 801f7e4:	d001      	beq.n	801f7ea <_lv_area_is_out+0x106>
 801f7e6:	2300      	movs	r3, #0
 801f7e8:	e000      	b.n	801f7ec <_lv_area_is_out+0x108>

    return true;
 801f7ea:	2301      	movs	r3, #1
}
 801f7ec:	4618      	mov	r0, r3
 801f7ee:	3718      	adds	r7, #24
 801f7f0:	46bd      	mov	sp, r7
 801f7f2:	bd80      	pop	{r7, pc}

0801f7f4 <lv_point_transform>:
    to_align->y2 = to_align->y1 + h - 1;
}

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot)
{
 801f7f4:	b580      	push	{r7, lr}
 801f7f6:	b08e      	sub	sp, #56	; 0x38
 801f7f8:	af00      	add	r7, sp, #0
 801f7fa:	60f8      	str	r0, [r7, #12]
 801f7fc:	60b9      	str	r1, [r7, #8]
 801f7fe:	607a      	str	r2, [r7, #4]
 801f800:	603b      	str	r3, [r7, #0]
    if(angle == 0 && zoom == 256) {
 801f802:	68bb      	ldr	r3, [r7, #8]
 801f804:	2b00      	cmp	r3, #0
 801f806:	d104      	bne.n	801f812 <lv_point_transform+0x1e>
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f80e:	f000 812c 	beq.w	801fa6a <lv_point_transform+0x276>
        return;
    }

    p->x -= pivot->x;
 801f812:	68fb      	ldr	r3, [r7, #12]
 801f814:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f818:	b29a      	uxth	r2, r3
 801f81a:	683b      	ldr	r3, [r7, #0]
 801f81c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f820:	b29b      	uxth	r3, r3
 801f822:	1ad3      	subs	r3, r2, r3
 801f824:	b29b      	uxth	r3, r3
 801f826:	b21a      	sxth	r2, r3
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	801a      	strh	r2, [r3, #0]
    p->y -= pivot->y;
 801f82c:	68fb      	ldr	r3, [r7, #12]
 801f82e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f832:	b29a      	uxth	r2, r3
 801f834:	683b      	ldr	r3, [r7, #0]
 801f836:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f83a:	b29b      	uxth	r3, r3
 801f83c:	1ad3      	subs	r3, r2, r3
 801f83e:	b29b      	uxth	r3, r3
 801f840:	b21a      	sxth	r2, r3
 801f842:	68fb      	ldr	r3, [r7, #12]
 801f844:	805a      	strh	r2, [r3, #2]

    if(angle == 0) {
 801f846:	68bb      	ldr	r3, [r7, #8]
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d124      	bne.n	801f896 <lv_point_transform+0xa2>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f852:	461a      	mov	r2, r3
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	fb02 f303 	mul.w	r3, r2, r3
 801f85a:	121b      	asrs	r3, r3, #8
 801f85c:	b29a      	uxth	r2, r3
 801f85e:	683b      	ldr	r3, [r7, #0]
 801f860:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f864:	b29b      	uxth	r3, r3
 801f866:	4413      	add	r3, r2
 801f868:	b29b      	uxth	r3, r3
 801f86a:	b21a      	sxth	r2, r3
 801f86c:	68fb      	ldr	r3, [r7, #12]
 801f86e:	801a      	strh	r2, [r3, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 801f870:	68fb      	ldr	r3, [r7, #12]
 801f872:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f876:	461a      	mov	r2, r3
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	fb02 f303 	mul.w	r3, r2, r3
 801f87e:	121b      	asrs	r3, r3, #8
 801f880:	b29a      	uxth	r2, r3
 801f882:	683b      	ldr	r3, [r7, #0]
 801f884:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f888:	b29b      	uxth	r3, r3
 801f88a:	4413      	add	r3, r2
 801f88c:	b29b      	uxth	r3, r3
 801f88e:	b21a      	sxth	r2, r3
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	805a      	strh	r2, [r3, #2]
        return;
 801f894:	e0ea      	b.n	801fa6c <lv_point_transform+0x278>
    }

    static int32_t angle_prev = INT32_MIN;
    static int32_t sinma;
    static int32_t cosma;
    if(angle_prev != angle) {
 801f896:	4b77      	ldr	r3, [pc, #476]	; (801fa74 <lv_point_transform+0x280>)
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	68ba      	ldr	r2, [r7, #8]
 801f89c:	429a      	cmp	r2, r3
 801f89e:	d078      	beq.n	801f992 <lv_point_transform+0x19e>
        int32_t angle_limited = angle;
 801f8a0:	68bb      	ldr	r3, [r7, #8]
 801f8a2:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited > 3600) angle_limited -= 3600;
 801f8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8a6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801f8aa:	dd03      	ble.n	801f8b4 <lv_point_transform+0xc0>
 801f8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8ae:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801f8b2:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited < 0) angle_limited += 3600;
 801f8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	da03      	bge.n	801f8c2 <lv_point_transform+0xce>
 801f8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8bc:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 801f8c0:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t angle_low = angle_limited / 10;
 801f8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8c4:	4a6c      	ldr	r2, [pc, #432]	; (801fa78 <lv_point_transform+0x284>)
 801f8c6:	fb82 1203 	smull	r1, r2, r2, r3
 801f8ca:	1092      	asrs	r2, r2, #2
 801f8cc:	17db      	asrs	r3, r3, #31
 801f8ce:	1ad3      	subs	r3, r2, r3
 801f8d0:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t angle_high = angle_low + 1;
 801f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8d4:	3301      	adds	r3, #1
 801f8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 801f8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8da:	f06f 0209 	mvn.w	r2, #9
 801f8de:	fb02 f303 	mul.w	r3, r2, r3
 801f8e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f8e4:	4413      	add	r3, r2
 801f8e6:	62bb      	str	r3, [r7, #40]	; 0x28

        int32_t s1 = lv_trigo_sin(angle_low);
 801f8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8ea:	b21b      	sxth	r3, r3
 801f8ec:	4618      	mov	r0, r3
 801f8ee:	f000 fe7d 	bl	80205ec <lv_trigo_sin>
 801f8f2:	4603      	mov	r3, r0
 801f8f4:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t s2 = lv_trigo_sin(angle_high);
 801f8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f8f8:	b21b      	sxth	r3, r3
 801f8fa:	4618      	mov	r0, r3
 801f8fc:	f000 fe76 	bl	80205ec <lv_trigo_sin>
 801f900:	4603      	mov	r3, r0
 801f902:	623b      	str	r3, [r7, #32]

        int32_t c1 = lv_trigo_sin(angle_low + 90);
 801f904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f906:	b29b      	uxth	r3, r3
 801f908:	335a      	adds	r3, #90	; 0x5a
 801f90a:	b29b      	uxth	r3, r3
 801f90c:	b21b      	sxth	r3, r3
 801f90e:	4618      	mov	r0, r3
 801f910:	f000 fe6c 	bl	80205ec <lv_trigo_sin>
 801f914:	4603      	mov	r3, r0
 801f916:	61fb      	str	r3, [r7, #28]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 801f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f91a:	b29b      	uxth	r3, r3
 801f91c:	335a      	adds	r3, #90	; 0x5a
 801f91e:	b29b      	uxth	r3, r3
 801f920:	b21b      	sxth	r3, r3
 801f922:	4618      	mov	r0, r3
 801f924:	f000 fe62 	bl	80205ec <lv_trigo_sin>
 801f928:	4603      	mov	r3, r0
 801f92a:	61bb      	str	r3, [r7, #24]

        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801f92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f92e:	f1c3 030a 	rsb	r3, r3, #10
 801f932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f934:	fb03 f202 	mul.w	r2, r3, r2
 801f938:	6a3b      	ldr	r3, [r7, #32]
 801f93a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f93c:	fb01 f303 	mul.w	r3, r1, r3
 801f940:	4413      	add	r3, r2
 801f942:	4a4d      	ldr	r2, [pc, #308]	; (801fa78 <lv_point_transform+0x284>)
 801f944:	fb82 1203 	smull	r1, r2, r2, r3
 801f948:	1092      	asrs	r2, r2, #2
 801f94a:	17db      	asrs	r3, r3, #31
 801f94c:	1ad3      	subs	r3, r2, r3
 801f94e:	4a4b      	ldr	r2, [pc, #300]	; (801fa7c <lv_point_transform+0x288>)
 801f950:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801f952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f954:	f1c3 030a 	rsb	r3, r3, #10
 801f958:	69fa      	ldr	r2, [r7, #28]
 801f95a:	fb03 f202 	mul.w	r2, r3, r2
 801f95e:	69bb      	ldr	r3, [r7, #24]
 801f960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f962:	fb01 f303 	mul.w	r3, r1, r3
 801f966:	4413      	add	r3, r2
 801f968:	4a43      	ldr	r2, [pc, #268]	; (801fa78 <lv_point_transform+0x284>)
 801f96a:	fb82 1203 	smull	r1, r2, r2, r3
 801f96e:	1092      	asrs	r2, r2, #2
 801f970:	17db      	asrs	r3, r3, #31
 801f972:	1ad3      	subs	r3, r2, r3
 801f974:	4a42      	ldr	r2, [pc, #264]	; (801fa80 <lv_point_transform+0x28c>)
 801f976:	6013      	str	r3, [r2, #0]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801f978:	4b40      	ldr	r3, [pc, #256]	; (801fa7c <lv_point_transform+0x288>)
 801f97a:	681b      	ldr	r3, [r3, #0]
 801f97c:	115b      	asrs	r3, r3, #5
 801f97e:	4a3f      	ldr	r2, [pc, #252]	; (801fa7c <lv_point_transform+0x288>)
 801f980:	6013      	str	r3, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801f982:	4b3f      	ldr	r3, [pc, #252]	; (801fa80 <lv_point_transform+0x28c>)
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	115b      	asrs	r3, r3, #5
 801f988:	4a3d      	ldr	r2, [pc, #244]	; (801fa80 <lv_point_transform+0x28c>)
 801f98a:	6013      	str	r3, [r2, #0]
        angle_prev = angle;
 801f98c:	4a39      	ldr	r2, [pc, #228]	; (801fa74 <lv_point_transform+0x280>)
 801f98e:	68bb      	ldr	r3, [r7, #8]
 801f990:	6013      	str	r3, [r2, #0]
    }
    int32_t x = p->x;
 801f992:	68fb      	ldr	r3, [r7, #12]
 801f994:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f998:	617b      	str	r3, [r7, #20]
    int32_t y = p->y;
 801f99a:	68fb      	ldr	r3, [r7, #12]
 801f99c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f9a0:	613b      	str	r3, [r7, #16]
    if(zoom == 256) {
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f9a8:	d12c      	bne.n	801fa04 <lv_point_transform+0x210>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801f9aa:	4b35      	ldr	r3, [pc, #212]	; (801fa80 <lv_point_transform+0x28c>)
 801f9ac:	681b      	ldr	r3, [r3, #0]
 801f9ae:	697a      	ldr	r2, [r7, #20]
 801f9b0:	fb03 f202 	mul.w	r2, r3, r2
 801f9b4:	4b31      	ldr	r3, [pc, #196]	; (801fa7c <lv_point_transform+0x288>)
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	6939      	ldr	r1, [r7, #16]
 801f9ba:	fb01 f303 	mul.w	r3, r1, r3
 801f9be:	1ad3      	subs	r3, r2, r3
 801f9c0:	129b      	asrs	r3, r3, #10
 801f9c2:	b29a      	uxth	r2, r3
 801f9c4:	683b      	ldr	r3, [r7, #0]
 801f9c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f9ca:	b29b      	uxth	r3, r3
 801f9cc:	4413      	add	r3, r2
 801f9ce:	b29b      	uxth	r3, r3
 801f9d0:	b21a      	sxth	r2, r3
 801f9d2:	68fb      	ldr	r3, [r7, #12]
 801f9d4:	801a      	strh	r2, [r3, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801f9d6:	4b29      	ldr	r3, [pc, #164]	; (801fa7c <lv_point_transform+0x288>)
 801f9d8:	681b      	ldr	r3, [r3, #0]
 801f9da:	697a      	ldr	r2, [r7, #20]
 801f9dc:	fb03 f202 	mul.w	r2, r3, r2
 801f9e0:	4b27      	ldr	r3, [pc, #156]	; (801fa80 <lv_point_transform+0x28c>)
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	6939      	ldr	r1, [r7, #16]
 801f9e6:	fb01 f303 	mul.w	r3, r1, r3
 801f9ea:	4413      	add	r3, r2
 801f9ec:	129b      	asrs	r3, r3, #10
 801f9ee:	b29a      	uxth	r2, r3
 801f9f0:	683b      	ldr	r3, [r7, #0]
 801f9f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f9f6:	b29b      	uxth	r3, r3
 801f9f8:	4413      	add	r3, r2
 801f9fa:	b29b      	uxth	r3, r3
 801f9fc:	b21a      	sxth	r2, r3
 801f9fe:	68fb      	ldr	r3, [r7, #12]
 801fa00:	805a      	strh	r2, [r3, #2]
 801fa02:	e033      	b.n	801fa6c <lv_point_transform+0x278>
    }
    else {
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 801fa04:	4b1e      	ldr	r3, [pc, #120]	; (801fa80 <lv_point_transform+0x28c>)
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	697a      	ldr	r2, [r7, #20]
 801fa0a:	fb03 f202 	mul.w	r2, r3, r2
 801fa0e:	4b1b      	ldr	r3, [pc, #108]	; (801fa7c <lv_point_transform+0x288>)
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	6939      	ldr	r1, [r7, #16]
 801fa14:	fb01 f303 	mul.w	r3, r1, r3
 801fa18:	1ad3      	subs	r3, r2, r3
 801fa1a:	687a      	ldr	r2, [r7, #4]
 801fa1c:	fb02 f303 	mul.w	r3, r2, r3
 801fa20:	149b      	asrs	r3, r3, #18
 801fa22:	b29a      	uxth	r2, r3
 801fa24:	683b      	ldr	r3, [r7, #0]
 801fa26:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fa2a:	b29b      	uxth	r3, r3
 801fa2c:	4413      	add	r3, r2
 801fa2e:	b29b      	uxth	r3, r3
 801fa30:	b21a      	sxth	r2, r3
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	801a      	strh	r2, [r3, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 801fa36:	4b11      	ldr	r3, [pc, #68]	; (801fa7c <lv_point_transform+0x288>)
 801fa38:	681b      	ldr	r3, [r3, #0]
 801fa3a:	697a      	ldr	r2, [r7, #20]
 801fa3c:	fb03 f202 	mul.w	r2, r3, r2
 801fa40:	4b0f      	ldr	r3, [pc, #60]	; (801fa80 <lv_point_transform+0x28c>)
 801fa42:	681b      	ldr	r3, [r3, #0]
 801fa44:	6939      	ldr	r1, [r7, #16]
 801fa46:	fb01 f303 	mul.w	r3, r1, r3
 801fa4a:	4413      	add	r3, r2
 801fa4c:	687a      	ldr	r2, [r7, #4]
 801fa4e:	fb02 f303 	mul.w	r3, r2, r3
 801fa52:	149b      	asrs	r3, r3, #18
 801fa54:	b29a      	uxth	r2, r3
 801fa56:	683b      	ldr	r3, [r7, #0]
 801fa58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fa5c:	b29b      	uxth	r3, r3
 801fa5e:	4413      	add	r3, r2
 801fa60:	b29b      	uxth	r3, r3
 801fa62:	b21a      	sxth	r2, r3
 801fa64:	68fb      	ldr	r3, [r7, #12]
 801fa66:	805a      	strh	r2, [r3, #2]
 801fa68:	e000      	b.n	801fa6c <lv_point_transform+0x278>
        return;
 801fa6a:	bf00      	nop
    }
}
 801fa6c:	3738      	adds	r7, #56	; 0x38
 801fa6e:	46bd      	mov	sp, r7
 801fa70:	bd80      	pop	{r7, pc}
 801fa72:	bf00      	nop
 801fa74:	20000010 	.word	0x20000010
 801fa78:	66666667 	.word	0x66666667
 801fa7c:	20000830 	.word	0x20000830
 801fa80:	20000834 	.word	0x20000834

0801fa84 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 801fa84:	b480      	push	{r7}
 801fa86:	b089      	sub	sp, #36	; 0x24
 801fa88:	af00      	add	r7, sp, #0
 801fa8a:	6078      	str	r0, [r7, #4]
 801fa8c:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801fa94:	461a      	mov	r2, r3
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fa9c:	1ad3      	subs	r3, r2, r3
 801fa9e:	2b00      	cmp	r3, #0
 801faa0:	da00      	bge.n	801faa4 <lv_point_within_circle+0x20>
 801faa2:	3301      	adds	r3, #1
 801faa4:	105b      	asrs	r3, r3, #1
 801faa6:	83fb      	strh	r3, [r7, #30]

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801faae:	b29a      	uxth	r2, r3
 801fab0:	8bfb      	ldrh	r3, [r7, #30]
 801fab2:	4413      	add	r3, r2
 801fab4:	b29b      	uxth	r3, r3
 801fab6:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fabe:	b29a      	uxth	r2, r3
 801fac0:	8bfb      	ldrh	r3, [r7, #30]
 801fac2:	4413      	add	r3, r2
 801fac4:	b29b      	uxth	r3, r3
 801fac6:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 801fac8:	683b      	ldr	r3, [r7, #0]
 801faca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801face:	b29a      	uxth	r2, r3
 801fad0:	8bbb      	ldrh	r3, [r7, #28]
 801fad2:	1ad3      	subs	r3, r2, r3
 801fad4:	b29b      	uxth	r3, r3
 801fad6:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 801fad8:	683b      	ldr	r3, [r7, #0]
 801fada:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fade:	b29a      	uxth	r2, r3
 801fae0:	8b7b      	ldrh	r3, [r7, #26]
 801fae2:	1ad3      	subs	r3, r2, r3
 801fae4:	b29b      	uxth	r3, r3
 801fae6:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 801fae8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801faec:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801faf0:	fb02 f303 	mul.w	r3, r2, r3
 801faf4:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 801faf6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801fafa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801fafe:	fb03 f202 	mul.w	r2, r3, r2
 801fb02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801fb06:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801fb0a:	fb01 f303 	mul.w	r3, r1, r3
 801fb0e:	4413      	add	r3, r2
 801fb10:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 801fb12:	68fa      	ldr	r2, [r7, #12]
 801fb14:	693b      	ldr	r3, [r7, #16]
 801fb16:	429a      	cmp	r2, r3
 801fb18:	d801      	bhi.n	801fb1e <lv_point_within_circle+0x9a>
        return true;
 801fb1a:	2301      	movs	r3, #1
 801fb1c:	e000      	b.n	801fb20 <lv_point_within_circle+0x9c>
    else
        return false;
 801fb1e:	2300      	movs	r3, #0
}
 801fb20:	4618      	mov	r0, r3
 801fb22:	3724      	adds	r7, #36	; 0x24
 801fb24:	46bd      	mov	sp, r7
 801fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb2a:	4770      	bx	lr

0801fb2c <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801fb2c:	b480      	push	{r7}
 801fb2e:	b083      	sub	sp, #12
 801fb30:	af00      	add	r7, sp, #0
 801fb32:	4603      	mov	r3, r0
 801fb34:	71fb      	strb	r3, [r7, #7]
 801fb36:	460b      	mov	r3, r1
 801fb38:	71bb      	strb	r3, [r7, #6]
 801fb3a:	4613      	mov	r3, r2
 801fb3c:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801fb3e:	797b      	ldrb	r3, [r7, #5]
 801fb40:	09db      	lsrs	r3, r3, #7
 801fb42:	b2da      	uxtb	r2, r3
 801fb44:	79bb      	ldrb	r3, [r7, #6]
 801fb46:	09db      	lsrs	r3, r3, #7
 801fb48:	b2db      	uxtb	r3, r3
 801fb4a:	4313      	orrs	r3, r2
 801fb4c:	b2da      	uxtb	r2, r3
 801fb4e:	79fb      	ldrb	r3, [r7, #7]
 801fb50:	09db      	lsrs	r3, r3, #7
 801fb52:	b2db      	uxtb	r3, r3
 801fb54:	4313      	orrs	r3, r2
 801fb56:	b2db      	uxtb	r3, r3
}
 801fb58:	4618      	mov	r0, r3
 801fb5a:	370c      	adds	r7, #12
 801fb5c:	46bd      	mov	sp, r7
 801fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb62:	4770      	bx	lr

0801fb64 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 801fb64:	b580      	push	{r7, lr}
 801fb66:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801fb68:	2200      	movs	r2, #0
 801fb6a:	2100      	movs	r1, #0
 801fb6c:	2000      	movs	r0, #0
 801fb6e:	f7ff ffdd 	bl	801fb2c <lv_color_make>
 801fb72:	4603      	mov	r3, r0
}
 801fb74:	4618      	mov	r0, r3
 801fb76:	bd80      	pop	{r7, pc}

0801fb78 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 801fb78:	b480      	push	{r7}
 801fb7a:	b085      	sub	sp, #20
 801fb7c:	af00      	add	r7, sp, #0
 801fb7e:	60f8      	str	r0, [r7, #12]
 801fb80:	7239      	strb	r1, [r7, #8]
 801fb82:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num--;
    }
#else
    while(px_num > 16) {
 801fb84:	e062      	b.n	801fc4c <lv_color_fill+0xd4>
        *buf = color;
 801fb86:	68fb      	ldr	r3, [r7, #12]
 801fb88:	7a3a      	ldrb	r2, [r7, #8]
 801fb8a:	701a      	strb	r2, [r3, #0]
        buf++;
 801fb8c:	68fb      	ldr	r3, [r7, #12]
 801fb8e:	3301      	adds	r3, #1
 801fb90:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fb92:	68fb      	ldr	r3, [r7, #12]
 801fb94:	7a3a      	ldrb	r2, [r7, #8]
 801fb96:	701a      	strb	r2, [r3, #0]
        buf++;
 801fb98:	68fb      	ldr	r3, [r7, #12]
 801fb9a:	3301      	adds	r3, #1
 801fb9c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fb9e:	68fb      	ldr	r3, [r7, #12]
 801fba0:	7a3a      	ldrb	r2, [r7, #8]
 801fba2:	701a      	strb	r2, [r3, #0]
        buf++;
 801fba4:	68fb      	ldr	r3, [r7, #12]
 801fba6:	3301      	adds	r3, #1
 801fba8:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fbaa:	68fb      	ldr	r3, [r7, #12]
 801fbac:	7a3a      	ldrb	r2, [r7, #8]
 801fbae:	701a      	strb	r2, [r3, #0]
        buf++;
 801fbb0:	68fb      	ldr	r3, [r7, #12]
 801fbb2:	3301      	adds	r3, #1
 801fbb4:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801fbb6:	68fb      	ldr	r3, [r7, #12]
 801fbb8:	7a3a      	ldrb	r2, [r7, #8]
 801fbba:	701a      	strb	r2, [r3, #0]
        buf++;
 801fbbc:	68fb      	ldr	r3, [r7, #12]
 801fbbe:	3301      	adds	r3, #1
 801fbc0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fbc2:	68fb      	ldr	r3, [r7, #12]
 801fbc4:	7a3a      	ldrb	r2, [r7, #8]
 801fbc6:	701a      	strb	r2, [r3, #0]
        buf++;
 801fbc8:	68fb      	ldr	r3, [r7, #12]
 801fbca:	3301      	adds	r3, #1
 801fbcc:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fbce:	68fb      	ldr	r3, [r7, #12]
 801fbd0:	7a3a      	ldrb	r2, [r7, #8]
 801fbd2:	701a      	strb	r2, [r3, #0]
        buf++;
 801fbd4:	68fb      	ldr	r3, [r7, #12]
 801fbd6:	3301      	adds	r3, #1
 801fbd8:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fbda:	68fb      	ldr	r3, [r7, #12]
 801fbdc:	7a3a      	ldrb	r2, [r7, #8]
 801fbde:	701a      	strb	r2, [r3, #0]
        buf++;
 801fbe0:	68fb      	ldr	r3, [r7, #12]
 801fbe2:	3301      	adds	r3, #1
 801fbe4:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801fbe6:	68fb      	ldr	r3, [r7, #12]
 801fbe8:	7a3a      	ldrb	r2, [r7, #8]
 801fbea:	701a      	strb	r2, [r3, #0]
        buf++;
 801fbec:	68fb      	ldr	r3, [r7, #12]
 801fbee:	3301      	adds	r3, #1
 801fbf0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fbf2:	68fb      	ldr	r3, [r7, #12]
 801fbf4:	7a3a      	ldrb	r2, [r7, #8]
 801fbf6:	701a      	strb	r2, [r3, #0]
        buf++;
 801fbf8:	68fb      	ldr	r3, [r7, #12]
 801fbfa:	3301      	adds	r3, #1
 801fbfc:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fbfe:	68fb      	ldr	r3, [r7, #12]
 801fc00:	7a3a      	ldrb	r2, [r7, #8]
 801fc02:	701a      	strb	r2, [r3, #0]
        buf++;
 801fc04:	68fb      	ldr	r3, [r7, #12]
 801fc06:	3301      	adds	r3, #1
 801fc08:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fc0a:	68fb      	ldr	r3, [r7, #12]
 801fc0c:	7a3a      	ldrb	r2, [r7, #8]
 801fc0e:	701a      	strb	r2, [r3, #0]
        buf++;
 801fc10:	68fb      	ldr	r3, [r7, #12]
 801fc12:	3301      	adds	r3, #1
 801fc14:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801fc16:	68fb      	ldr	r3, [r7, #12]
 801fc18:	7a3a      	ldrb	r2, [r7, #8]
 801fc1a:	701a      	strb	r2, [r3, #0]
        buf++;
 801fc1c:	68fb      	ldr	r3, [r7, #12]
 801fc1e:	3301      	adds	r3, #1
 801fc20:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fc22:	68fb      	ldr	r3, [r7, #12]
 801fc24:	7a3a      	ldrb	r2, [r7, #8]
 801fc26:	701a      	strb	r2, [r3, #0]
        buf++;
 801fc28:	68fb      	ldr	r3, [r7, #12]
 801fc2a:	3301      	adds	r3, #1
 801fc2c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fc2e:	68fb      	ldr	r3, [r7, #12]
 801fc30:	7a3a      	ldrb	r2, [r7, #8]
 801fc32:	701a      	strb	r2, [r3, #0]
        buf++;
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	3301      	adds	r3, #1
 801fc38:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801fc3a:	68fb      	ldr	r3, [r7, #12]
 801fc3c:	7a3a      	ldrb	r2, [r7, #8]
 801fc3e:	701a      	strb	r2, [r3, #0]
        buf++;
 801fc40:	68fb      	ldr	r3, [r7, #12]
 801fc42:	3301      	adds	r3, #1
 801fc44:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	3b10      	subs	r3, #16
 801fc4a:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	2b10      	cmp	r3, #16
 801fc50:	d899      	bhi.n	801fb86 <lv_color_fill+0xe>
    }
    while(px_num) {
 801fc52:	e008      	b.n	801fc66 <lv_color_fill+0xee>
        *buf = color;
 801fc54:	68fb      	ldr	r3, [r7, #12]
 801fc56:	7a3a      	ldrb	r2, [r7, #8]
 801fc58:	701a      	strb	r2, [r3, #0]
        buf++;
 801fc5a:	68fb      	ldr	r3, [r7, #12]
 801fc5c:	3301      	adds	r3, #1
 801fc5e:	60fb      	str	r3, [r7, #12]
        px_num--;
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	3b01      	subs	r3, #1
 801fc64:	607b      	str	r3, [r7, #4]
    while(px_num) {
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d1f3      	bne.n	801fc54 <lv_color_fill+0xdc>
    }
#endif
}
 801fc6c:	bf00      	nop
 801fc6e:	bf00      	nop
 801fc70:	3714      	adds	r7, #20
 801fc72:	46bd      	mov	sp, r7
 801fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc78:	4770      	bx	lr
	...

0801fc7c <lv_palette_main>:
    color32.full = lv_color_to32(color);
    return lv_color_rgb_to_hsv(color32.ch.red, color32.ch.green, color32.ch.blue);
}

lv_color_t lv_palette_main(lv_palette_t p)
{
 801fc7c:	b580      	push	{r7, lr}
 801fc7e:	b082      	sub	sp, #8
 801fc80:	af00      	add	r7, sp, #0
 801fc82:	4603      	mov	r3, r0
 801fc84:	71fb      	strb	r3, [r7, #7]
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 801fc86:	79fb      	ldrb	r3, [r7, #7]
 801fc88:	2b12      	cmp	r3, #18
 801fc8a:	d903      	bls.n	801fc94 <lv_palette_main+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
 801fc8c:	f7ff ff6a 	bl	801fb64 <lv_color_black>
 801fc90:	4603      	mov	r3, r0
 801fc92:	e002      	b.n	801fc9a <lv_palette_main+0x1e>
    }

    return colors[p];
 801fc94:	79fb      	ldrb	r3, [r7, #7]
 801fc96:	4a03      	ldr	r2, [pc, #12]	; (801fca4 <lv_palette_main+0x28>)
 801fc98:	5cd3      	ldrb	r3, [r2, r3]

}
 801fc9a:	4618      	mov	r0, r3
 801fc9c:	3708      	adds	r7, #8
 801fc9e:	46bd      	mov	sp, r7
 801fca0:	bd80      	pop	{r7, pc}
 801fca2:	bf00      	nop
 801fca4:	08026e10 	.word	0x08026e10

0801fca8 <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 801fca8:	b580      	push	{r7, lr}
 801fcaa:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 801fcac:	2104      	movs	r1, #4
 801fcae:	4802      	ldr	r0, [pc, #8]	; (801fcb8 <_lv_fs_init+0x10>)
 801fcb0:	f000 fb19 	bl	80202e6 <_lv_ll_init>
}
 801fcb4:	bf00      	nop
 801fcb6:	bd80      	pop	{r7, pc}
 801fcb8:	2000085c 	.word	0x2000085c

0801fcbc <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 801fcbc:	b580      	push	{r7, lr}
 801fcbe:	b088      	sub	sp, #32
 801fcc0:	af00      	add	r7, sp, #0
 801fcc2:	60f8      	str	r0, [r7, #12]
 801fcc4:	60b9      	str	r1, [r7, #8]
 801fcc6:	4613      	mov	r3, r2
 801fcc8:	71fb      	strb	r3, [r7, #7]
    if(path == NULL) {
 801fcca:	68bb      	ldr	r3, [r7, #8]
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d101      	bne.n	801fcd4 <lv_fs_open+0x18>
        LV_LOG_WARN("Can't open file: path is NULL");
        return LV_FS_RES_INV_PARAM;
 801fcd0:	230b      	movs	r3, #11
 801fcd2:	e05c      	b.n	801fd8e <lv_fs_open+0xd2>
    }

    char letter = path[0];
 801fcd4:	68bb      	ldr	r3, [r7, #8]
 801fcd6:	781b      	ldrb	r3, [r3, #0]
 801fcd8:	77fb      	strb	r3, [r7, #31]
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 801fcda:	7ffb      	ldrb	r3, [r7, #31]
 801fcdc:	4618      	mov	r0, r3
 801fcde:	f000 fa9b 	bl	8020218 <lv_fs_get_drv>
 801fce2:	61b8      	str	r0, [r7, #24]

    if(drv == NULL) {
 801fce4:	69bb      	ldr	r3, [r7, #24]
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	d101      	bne.n	801fcee <lv_fs_open+0x32>
        LV_LOG_WARN("Can't open file (%s): unknown driver letter", path);
        return LV_FS_RES_NOT_EX;
 801fcea:	2303      	movs	r3, #3
 801fcec:	e04f      	b.n	801fd8e <lv_fs_open+0xd2>
    }

    if(drv->ready_cb) {
 801fcee:	69bb      	ldr	r3, [r7, #24]
 801fcf0:	685b      	ldr	r3, [r3, #4]
 801fcf2:	2b00      	cmp	r3, #0
 801fcf4:	d00b      	beq.n	801fd0e <lv_fs_open+0x52>
        if(drv->ready_cb(drv) == false) {
 801fcf6:	69bb      	ldr	r3, [r7, #24]
 801fcf8:	685b      	ldr	r3, [r3, #4]
 801fcfa:	69b8      	ldr	r0, [r7, #24]
 801fcfc:	4798      	blx	r3
 801fcfe:	4603      	mov	r3, r0
 801fd00:	f083 0301 	eor.w	r3, r3, #1
 801fd04:	b2db      	uxtb	r3, r3
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d001      	beq.n	801fd0e <lv_fs_open+0x52>
            LV_LOG_WARN("Can't open file (%s): driver not ready", path);
            return LV_FS_RES_HW_ERR;
 801fd0a:	2301      	movs	r3, #1
 801fd0c:	e03f      	b.n	801fd8e <lv_fs_open+0xd2>
        }
    }

    if(drv->open_cb == NULL) {
 801fd0e:	69bb      	ldr	r3, [r7, #24]
 801fd10:	689b      	ldr	r3, [r3, #8]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d101      	bne.n	801fd1a <lv_fs_open+0x5e>
        LV_LOG_WARN("Can't open file (%s): open function not exists", path);
        return LV_FS_RES_NOT_IMP;
 801fd16:	2309      	movs	r3, #9
 801fd18:	e039      	b.n	801fd8e <lv_fs_open+0xd2>
    }

    const char * real_path = lv_fs_get_real_path(path);
 801fd1a:	68b8      	ldr	r0, [r7, #8]
 801fd1c:	f000 face 	bl	80202bc <lv_fs_get_real_path>
 801fd20:	6178      	str	r0, [r7, #20]
    void * file_d = drv->open_cb(drv, real_path, mode);
 801fd22:	69bb      	ldr	r3, [r7, #24]
 801fd24:	689b      	ldr	r3, [r3, #8]
 801fd26:	79fa      	ldrb	r2, [r7, #7]
 801fd28:	6979      	ldr	r1, [r7, #20]
 801fd2a:	69b8      	ldr	r0, [r7, #24]
 801fd2c:	4798      	blx	r3
 801fd2e:	6138      	str	r0, [r7, #16]

    if(file_d == NULL || file_d == (void *)(-1)) {
 801fd30:	693b      	ldr	r3, [r7, #16]
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	d003      	beq.n	801fd3e <lv_fs_open+0x82>
 801fd36:	693b      	ldr	r3, [r7, #16]
 801fd38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fd3c:	d101      	bne.n	801fd42 <lv_fs_open+0x86>
        return LV_FS_RES_UNKNOWN;
 801fd3e:	230c      	movs	r3, #12
 801fd40:	e025      	b.n	801fd8e <lv_fs_open+0xd2>
    }

    file_p->drv = drv;
 801fd42:	68fb      	ldr	r3, [r7, #12]
 801fd44:	69ba      	ldr	r2, [r7, #24]
 801fd46:	605a      	str	r2, [r3, #4]
    file_p->file_d = file_d;
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	693a      	ldr	r2, [r7, #16]
 801fd4c:	601a      	str	r2, [r3, #0]

    if(drv->cache_size) {
 801fd4e:	69bb      	ldr	r3, [r7, #24]
 801fd50:	885b      	ldrh	r3, [r3, #2]
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	d01a      	beq.n	801fd8c <lv_fs_open+0xd0>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 801fd56:	2010      	movs	r0, #16
 801fd58:	f000 fd62 	bl	8020820 <lv_mem_alloc>
 801fd5c:	4602      	mov	r2, r0
 801fd5e:	68fb      	ldr	r3, [r7, #12]
 801fd60:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	689b      	ldr	r3, [r3, #8]
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d100      	bne.n	801fd6c <lv_fs_open+0xb0>
 801fd6a:	e7fe      	b.n	801fd6a <lv_fs_open+0xae>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 801fd6c:	68fb      	ldr	r3, [r7, #12]
 801fd6e:	689b      	ldr	r3, [r3, #8]
 801fd70:	2110      	movs	r1, #16
 801fd72:	4618      	mov	r0, r3
 801fd74:	f001 f988 	bl	8021088 <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 801fd78:	68fb      	ldr	r3, [r7, #12]
 801fd7a:	689b      	ldr	r3, [r3, #8]
 801fd7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fd80:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 801fd82:	68fb      	ldr	r3, [r7, #12]
 801fd84:	689b      	ldr	r3, [r3, #8]
 801fd86:	f06f 0201 	mvn.w	r2, #1
 801fd8a:	605a      	str	r2, [r3, #4]
    }

    return LV_FS_RES_OK;
 801fd8c:	2300      	movs	r3, #0
}
 801fd8e:	4618      	mov	r0, r3
 801fd90:	3720      	adds	r7, #32
 801fd92:	46bd      	mov	sp, r7
 801fd94:	bd80      	pop	{r7, pc}

0801fd96 <lv_fs_close>:

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 801fd96:	b580      	push	{r7, lr}
 801fd98:	b084      	sub	sp, #16
 801fd9a:	af00      	add	r7, sp, #0
 801fd9c:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	685b      	ldr	r3, [r3, #4]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d101      	bne.n	801fdaa <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 801fda6:	230b      	movs	r3, #11
 801fda8:	e034      	b.n	801fe14 <lv_fs_close+0x7e>
    }

    if(file_p->drv->close_cb == NULL) {
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	685b      	ldr	r3, [r3, #4]
 801fdae:	68db      	ldr	r3, [r3, #12]
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	d101      	bne.n	801fdb8 <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 801fdb4:	2309      	movs	r3, #9
 801fdb6:	e02d      	b.n	801fe14 <lv_fs_close+0x7e>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	685b      	ldr	r3, [r3, #4]
 801fdbc:	68db      	ldr	r3, [r3, #12]
 801fdbe:	687a      	ldr	r2, [r7, #4]
 801fdc0:	6850      	ldr	r0, [r2, #4]
 801fdc2:	687a      	ldr	r2, [r7, #4]
 801fdc4:	6812      	ldr	r2, [r2, #0]
 801fdc6:	4611      	mov	r1, r2
 801fdc8:	4798      	blx	r3
 801fdca:	4603      	mov	r3, r0
 801fdcc:	73fb      	strb	r3, [r7, #15]

    if(file_p->drv->cache_size && file_p->cache) {
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	685b      	ldr	r3, [r3, #4]
 801fdd2:	885b      	ldrh	r3, [r3, #2]
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d013      	beq.n	801fe00 <lv_fs_close+0x6a>
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	689b      	ldr	r3, [r3, #8]
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d00f      	beq.n	801fe00 <lv_fs_close+0x6a>
        if(file_p->cache->buffer) {
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	689b      	ldr	r3, [r3, #8]
 801fde4:	68db      	ldr	r3, [r3, #12]
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	d005      	beq.n	801fdf6 <lv_fs_close+0x60>
            lv_mem_free(file_p->cache->buffer);
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	689b      	ldr	r3, [r3, #8]
 801fdee:	68db      	ldr	r3, [r3, #12]
 801fdf0:	4618      	mov	r0, r3
 801fdf2:	f000 fd45 	bl	8020880 <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	689b      	ldr	r3, [r3, #8]
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	f000 fd40 	bl	8020880 <lv_mem_free>
    }

    file_p->file_d = NULL;
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	2200      	movs	r2, #0
 801fe04:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	2200      	movs	r2, #0
 801fe0a:	605a      	str	r2, [r3, #4]
    file_p->cache  = NULL;
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	2200      	movs	r2, #0
 801fe10:	609a      	str	r2, [r3, #8]

    return res;
 801fe12:	7bfb      	ldrb	r3, [r7, #15]
}
 801fe14:	4618      	mov	r0, r3
 801fe16:	3710      	adds	r7, #16
 801fe18:	46bd      	mov	sp, r7
 801fe1a:	bd80      	pop	{r7, pc}

0801fe1c <lv_fs_read_cached>:

static lv_fs_res_t lv_fs_read_cached(lv_fs_file_t * file_p, char * buf, uint32_t btr, uint32_t * br)
{
 801fe1c:	b5b0      	push	{r4, r5, r7, lr}
 801fe1e:	b090      	sub	sp, #64	; 0x40
 801fe20:	af02      	add	r7, sp, #8
 801fe22:	60f8      	str	r0, [r7, #12]
 801fe24:	60b9      	str	r1, [r7, #8]
 801fe26:	607a      	str	r2, [r7, #4]
 801fe28:	603b      	str	r3, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 801fe2a:	2300      	movs	r3, #0
 801fe2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t file_position = file_p->cache->file_position;
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	689b      	ldr	r3, [r3, #8]
 801fe34:	689b      	ldr	r3, [r3, #8]
 801fe36:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t start = file_p->cache->start;
 801fe38:	68fb      	ldr	r3, [r7, #12]
 801fe3a:	689b      	ldr	r3, [r3, #8]
 801fe3c:	681b      	ldr	r3, [r3, #0]
 801fe3e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t end = file_p->cache->end;
 801fe40:	68fb      	ldr	r3, [r7, #12]
 801fe42:	689b      	ldr	r3, [r3, #8]
 801fe44:	685b      	ldr	r3, [r3, #4]
 801fe46:	627b      	str	r3, [r7, #36]	; 0x24
    char * buffer = file_p->cache->buffer;
 801fe48:	68fb      	ldr	r3, [r7, #12]
 801fe4a:	689b      	ldr	r3, [r3, #8]
 801fe4c:	68db      	ldr	r3, [r3, #12]
 801fe4e:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t buffer_size = file_p->drv->cache_size;
 801fe50:	68fb      	ldr	r3, [r7, #12]
 801fe52:	685b      	ldr	r3, [r3, #4]
 801fe54:	885b      	ldrh	r3, [r3, #2]
 801fe56:	847b      	strh	r3, [r7, #34]	; 0x22

    if(start <= file_position && file_position < end) {
 801fe58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fe5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe5c:	429a      	cmp	r2, r3
 801fe5e:	f200 8082 	bhi.w	801ff66 <lv_fs_read_cached+0x14a>
 801fe62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fe64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe66:	429a      	cmp	r2, r3
 801fe68:	d27d      	bcs.n	801ff66 <lv_fs_read_cached+0x14a>
        /* Data can be read from cache buffer */
        uint16_t buffer_offset = file_position - start;
 801fe6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe6c:	b29a      	uxth	r2, r3
 801fe6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe70:	b29b      	uxth	r3, r3
 801fe72:	1ad3      	subs	r3, r2, r3
 801fe74:	843b      	strh	r3, [r7, #32]
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 801fe76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe7a:	1ad2      	subs	r2, r2, r3
 801fe7c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 801fe7e:	8c3b      	ldrh	r3, [r7, #32]
 801fe80:	1acb      	subs	r3, r1, r3
 801fe82:	4293      	cmp	r3, r2
 801fe84:	bf28      	it	cs
 801fe86:	4613      	movcs	r3, r2
 801fe88:	61fb      	str	r3, [r7, #28]

        if(btr <= buffer_remaining_length) {
 801fe8a:	687a      	ldr	r2, [r7, #4]
 801fe8c:	69fb      	ldr	r3, [r7, #28]
 801fe8e:	429a      	cmp	r2, r3
 801fe90:	d80b      	bhi.n	801feaa <lv_fs_read_cached+0x8e>
            /*Data is in cache buffer, and buffer end not reached, no need to read from FS*/
            lv_memcpy(buf, buffer + buffer_offset, btr);
 801fe92:	8c3b      	ldrh	r3, [r7, #32]
 801fe94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fe96:	4413      	add	r3, r2
 801fe98:	687a      	ldr	r2, [r7, #4]
 801fe9a:	4619      	mov	r1, r3
 801fe9c:	68b8      	ldr	r0, [r7, #8]
 801fe9e:	f000 fe4d 	bl	8020b3c <lv_memcpy>
            *br = btr;
 801fea2:	683b      	ldr	r3, [r7, #0]
 801fea4:	687a      	ldr	r2, [r7, #4]
 801fea6:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 801fea8:	e0b3      	b.n	8020012 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*First part of data is in cache buffer, but we need to read rest of data from FS*/
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 801feaa:	8c3b      	ldrh	r3, [r7, #32]
 801feac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801feae:	4413      	add	r3, r2
 801feb0:	69fa      	ldr	r2, [r7, #28]
 801feb2:	4619      	mov	r1, r3
 801feb4:	68b8      	ldr	r0, [r7, #8]
 801feb6:	f000 fe41 	bl	8020b3c <lv_memcpy>

            uint32_t bytes_read_to_buffer = 0;
 801feba:	2300      	movs	r3, #0
 801febc:	617b      	str	r3, [r7, #20]
            if(btr > buffer_size) {
 801febe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fec0:	687a      	ldr	r2, [r7, #4]
 801fec2:	429a      	cmp	r2, r3
 801fec4:	d916      	bls.n	801fef4 <lv_fs_read_cached+0xd8>
                /*If remaining data chuck is bigger than buffer size, then do not use cache, instead read it directly from FS*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 801fec6:	68fb      	ldr	r3, [r7, #12]
 801fec8:	685b      	ldr	r3, [r3, #4]
 801feca:	691c      	ldr	r4, [r3, #16]
 801fecc:	68fb      	ldr	r3, [r7, #12]
 801fece:	6858      	ldr	r0, [r3, #4]
 801fed0:	68fb      	ldr	r3, [r7, #12]
 801fed2:	6819      	ldr	r1, [r3, #0]
 801fed4:	68ba      	ldr	r2, [r7, #8]
 801fed6:	69fb      	ldr	r3, [r7, #28]
 801fed8:	18d5      	adds	r5, r2, r3
 801feda:	687a      	ldr	r2, [r7, #4]
 801fedc:	69fb      	ldr	r3, [r7, #28]
 801fede:	1ad2      	subs	r2, r2, r3
 801fee0:	f107 0314 	add.w	r3, r7, #20
 801fee4:	9300      	str	r3, [sp, #0]
 801fee6:	4613      	mov	r3, r2
 801fee8:	462a      	mov	r2, r5
 801feea:	47a0      	blx	r4
 801feec:	4603      	mov	r3, r0
 801feee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801fef2:	e02e      	b.n	801ff52 <lv_fs_read_cached+0x136>
                                           btr - buffer_remaining_length, &bytes_read_to_buffer);
            }
            else {
                /*If remaining data chunk is smaller than buffer size, then read into cache buffer*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 801fef4:	68fb      	ldr	r3, [r7, #12]
 801fef6:	685b      	ldr	r3, [r3, #4]
 801fef8:	691c      	ldr	r4, [r3, #16]
 801fefa:	68fb      	ldr	r3, [r7, #12]
 801fefc:	6858      	ldr	r0, [r3, #4]
 801fefe:	68fb      	ldr	r3, [r7, #12]
 801ff00:	6819      	ldr	r1, [r3, #0]
 801ff02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ff04:	f107 0314 	add.w	r3, r7, #20
 801ff08:	9300      	str	r3, [sp, #0]
 801ff0a:	4613      	mov	r3, r2
 801ff0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ff0e:	47a0      	blx	r4
 801ff10:	4603      	mov	r3, r0
 801ff12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                file_p->cache->start = file_p->cache->end;
 801ff16:	68fb      	ldr	r3, [r7, #12]
 801ff18:	689a      	ldr	r2, [r3, #8]
 801ff1a:	68fb      	ldr	r3, [r7, #12]
 801ff1c:	689b      	ldr	r3, [r3, #8]
 801ff1e:	6852      	ldr	r2, [r2, #4]
 801ff20:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 801ff22:	68fb      	ldr	r3, [r7, #12]
 801ff24:	689b      	ldr	r3, [r3, #8]
 801ff26:	6819      	ldr	r1, [r3, #0]
 801ff28:	697a      	ldr	r2, [r7, #20]
 801ff2a:	68fb      	ldr	r3, [r7, #12]
 801ff2c:	689b      	ldr	r3, [r3, #8]
 801ff2e:	440a      	add	r2, r1
 801ff30:	605a      	str	r2, [r3, #4]

                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 801ff32:	687a      	ldr	r2, [r7, #4]
 801ff34:	69fb      	ldr	r3, [r7, #28]
 801ff36:	1ad2      	subs	r2, r2, r3
 801ff38:	697b      	ldr	r3, [r7, #20]
 801ff3a:	4293      	cmp	r3, r2
 801ff3c:	bf28      	it	cs
 801ff3e:	4613      	movcs	r3, r2
 801ff40:	837b      	strh	r3, [r7, #26]
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 801ff42:	68ba      	ldr	r2, [r7, #8]
 801ff44:	69fb      	ldr	r3, [r7, #28]
 801ff46:	4413      	add	r3, r2
 801ff48:	8b7a      	ldrh	r2, [r7, #26]
 801ff4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ff4c:	4618      	mov	r0, r3
 801ff4e:	f000 fdf5 	bl	8020b3c <lv_memcpy>
            }
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 801ff52:	697a      	ldr	r2, [r7, #20]
 801ff54:	69fb      	ldr	r3, [r7, #28]
 801ff56:	441a      	add	r2, r3
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	429a      	cmp	r2, r3
 801ff5c:	bf28      	it	cs
 801ff5e:	461a      	movcs	r2, r3
 801ff60:	683b      	ldr	r3, [r7, #0]
 801ff62:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 801ff64:	e055      	b.n	8020012 <lv_fs_read_cached+0x1f6>
        }
    }
    else {
        /*Data is not in cache buffer*/
        if(btr > buffer_size) {
 801ff66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ff68:	687a      	ldr	r2, [r7, #4]
 801ff6a:	429a      	cmp	r2, r3
 801ff6c:	d90f      	bls.n	801ff8e <lv_fs_read_cached+0x172>
            /*If bigger data is requested, then do not use cache, instead read it directly*/
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 801ff6e:	68fb      	ldr	r3, [r7, #12]
 801ff70:	685b      	ldr	r3, [r3, #4]
 801ff72:	691c      	ldr	r4, [r3, #16]
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	6858      	ldr	r0, [r3, #4]
 801ff78:	68fb      	ldr	r3, [r7, #12]
 801ff7a:	6819      	ldr	r1, [r3, #0]
 801ff7c:	683b      	ldr	r3, [r7, #0]
 801ff7e:	9300      	str	r3, [sp, #0]
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	68ba      	ldr	r2, [r7, #8]
 801ff84:	47a0      	blx	r4
 801ff86:	4603      	mov	r3, r0
 801ff88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801ff8c:	e041      	b.n	8020012 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*If small data is requested, then read from FS into cache buffer*/
            if(buffer == NULL) {
 801ff8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	d111      	bne.n	801ffb8 <lv_fs_read_cached+0x19c>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 801ff94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	689c      	ldr	r4, [r3, #8]
 801ff9a:	4610      	mov	r0, r2
 801ff9c:	f000 fc40 	bl	8020820 <lv_mem_alloc>
 801ffa0:	4603      	mov	r3, r0
 801ffa2:	60e3      	str	r3, [r4, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 801ffa4:	68fb      	ldr	r3, [r7, #12]
 801ffa6:	689b      	ldr	r3, [r3, #8]
 801ffa8:	68db      	ldr	r3, [r3, #12]
 801ffaa:	2b00      	cmp	r3, #0
 801ffac:	d100      	bne.n	801ffb0 <lv_fs_read_cached+0x194>
 801ffae:	e7fe      	b.n	801ffae <lv_fs_read_cached+0x192>
                buffer = file_p->cache->buffer;
 801ffb0:	68fb      	ldr	r3, [r7, #12]
 801ffb2:	689b      	ldr	r3, [r3, #8]
 801ffb4:	68db      	ldr	r3, [r3, #12]
 801ffb6:	633b      	str	r3, [r7, #48]	; 0x30
            }

            uint32_t bytes_read_to_buffer = 0;
 801ffb8:	2300      	movs	r3, #0
 801ffba:	613b      	str	r3, [r7, #16]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 801ffbc:	68fb      	ldr	r3, [r7, #12]
 801ffbe:	685b      	ldr	r3, [r3, #4]
 801ffc0:	691c      	ldr	r4, [r3, #16]
 801ffc2:	68fb      	ldr	r3, [r7, #12]
 801ffc4:	6858      	ldr	r0, [r3, #4]
 801ffc6:	68fb      	ldr	r3, [r7, #12]
 801ffc8:	6819      	ldr	r1, [r3, #0]
 801ffca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ffcc:	f107 0310 	add.w	r3, r7, #16
 801ffd0:	9300      	str	r3, [sp, #0]
 801ffd2:	4613      	mov	r3, r2
 801ffd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ffd6:	47a0      	blx	r4
 801ffd8:	4603      	mov	r3, r0
 801ffda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            file_p->cache->start = file_position;
 801ffde:	68fb      	ldr	r3, [r7, #12]
 801ffe0:	689b      	ldr	r3, [r3, #8]
 801ffe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ffe4:	601a      	str	r2, [r3, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 801ffe6:	68fb      	ldr	r3, [r7, #12]
 801ffe8:	689b      	ldr	r3, [r3, #8]
 801ffea:	6819      	ldr	r1, [r3, #0]
 801ffec:	693a      	ldr	r2, [r7, #16]
 801ffee:	68fb      	ldr	r3, [r7, #12]
 801fff0:	689b      	ldr	r3, [r3, #8]
 801fff2:	440a      	add	r2, r1
 801fff4:	605a      	str	r2, [r3, #4]

            *br = LV_MIN(btr, bytes_read_to_buffer);
 801fff6:	693a      	ldr	r2, [r7, #16]
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	429a      	cmp	r2, r3
 801fffc:	bf28      	it	cs
 801fffe:	461a      	movcs	r2, r3
 8020000:	683b      	ldr	r3, [r7, #0]
 8020002:	601a      	str	r2, [r3, #0]
            lv_memcpy(buf, buffer, *br);
 8020004:	683b      	ldr	r3, [r7, #0]
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	461a      	mov	r2, r3
 802000a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802000c:	68b8      	ldr	r0, [r7, #8]
 802000e:	f000 fd95 	bl	8020b3c <lv_memcpy>

        }
    }

    if(res == LV_FS_RES_OK) {
 8020012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8020016:	2b00      	cmp	r3, #0
 8020018:	d108      	bne.n	802002c <lv_fs_read_cached+0x210>
        file_p->cache->file_position += *br;
 802001a:	68fb      	ldr	r3, [r7, #12]
 802001c:	689b      	ldr	r3, [r3, #8]
 802001e:	6899      	ldr	r1, [r3, #8]
 8020020:	683b      	ldr	r3, [r7, #0]
 8020022:	681a      	ldr	r2, [r3, #0]
 8020024:	68fb      	ldr	r3, [r7, #12]
 8020026:	689b      	ldr	r3, [r3, #8]
 8020028:	440a      	add	r2, r1
 802002a:	609a      	str	r2, [r3, #8]
    }

    return res;
 802002c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8020030:	4618      	mov	r0, r3
 8020032:	3738      	adds	r7, #56	; 0x38
 8020034:	46bd      	mov	sp, r7
 8020036:	bdb0      	pop	{r4, r5, r7, pc}

08020038 <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8020038:	b590      	push	{r4, r7, lr}
 802003a:	b089      	sub	sp, #36	; 0x24
 802003c:	af02      	add	r7, sp, #8
 802003e:	60f8      	str	r0, [r7, #12]
 8020040:	60b9      	str	r1, [r7, #8]
 8020042:	607a      	str	r2, [r7, #4]
 8020044:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 8020046:	683b      	ldr	r3, [r7, #0]
 8020048:	2b00      	cmp	r3, #0
 802004a:	d002      	beq.n	8020052 <lv_fs_read+0x1a>
 802004c:	683b      	ldr	r3, [r7, #0]
 802004e:	2200      	movs	r2, #0
 8020050:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8020052:	68fb      	ldr	r3, [r7, #12]
 8020054:	685b      	ldr	r3, [r3, #4]
 8020056:	2b00      	cmp	r3, #0
 8020058:	d101      	bne.n	802005e <lv_fs_read+0x26>
 802005a:	230b      	movs	r3, #11
 802005c:	e02d      	b.n	80200ba <lv_fs_read+0x82>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 802005e:	68fb      	ldr	r3, [r7, #12]
 8020060:	685b      	ldr	r3, [r3, #4]
 8020062:	691b      	ldr	r3, [r3, #16]
 8020064:	2b00      	cmp	r3, #0
 8020066:	d101      	bne.n	802006c <lv_fs_read+0x34>
 8020068:	2309      	movs	r3, #9
 802006a:	e026      	b.n	80200ba <lv_fs_read+0x82>

    uint32_t br_tmp = 0;
 802006c:	2300      	movs	r3, #0
 802006e:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 8020070:	68fb      	ldr	r3, [r7, #12]
 8020072:	685b      	ldr	r3, [r3, #4]
 8020074:	885b      	ldrh	r3, [r3, #2]
 8020076:	2b00      	cmp	r3, #0
 8020078:	d009      	beq.n	802008e <lv_fs_read+0x56>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 802007a:	f107 0310 	add.w	r3, r7, #16
 802007e:	687a      	ldr	r2, [r7, #4]
 8020080:	68b9      	ldr	r1, [r7, #8]
 8020082:	68f8      	ldr	r0, [r7, #12]
 8020084:	f7ff feca 	bl	801fe1c <lv_fs_read_cached>
 8020088:	4603      	mov	r3, r0
 802008a:	75fb      	strb	r3, [r7, #23]
 802008c:	e00e      	b.n	80200ac <lv_fs_read+0x74>
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 802008e:	68fb      	ldr	r3, [r7, #12]
 8020090:	685b      	ldr	r3, [r3, #4]
 8020092:	691c      	ldr	r4, [r3, #16]
 8020094:	68fb      	ldr	r3, [r7, #12]
 8020096:	6858      	ldr	r0, [r3, #4]
 8020098:	68fb      	ldr	r3, [r7, #12]
 802009a:	6819      	ldr	r1, [r3, #0]
 802009c:	f107 0310 	add.w	r3, r7, #16
 80200a0:	9300      	str	r3, [sp, #0]
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	68ba      	ldr	r2, [r7, #8]
 80200a6:	47a0      	blx	r4
 80200a8:	4603      	mov	r3, r0
 80200aa:	75fb      	strb	r3, [r7, #23]
    }

    if(br != NULL) *br = br_tmp;
 80200ac:	683b      	ldr	r3, [r7, #0]
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	d002      	beq.n	80200b8 <lv_fs_read+0x80>
 80200b2:	693a      	ldr	r2, [r7, #16]
 80200b4:	683b      	ldr	r3, [r7, #0]
 80200b6:	601a      	str	r2, [r3, #0]

    return res;
 80200b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80200ba:	4618      	mov	r0, r3
 80200bc:	371c      	adds	r7, #28
 80200be:	46bd      	mov	sp, r7
 80200c0:	bd90      	pop	{r4, r7, pc}

080200c2 <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 80200c2:	b590      	push	{r4, r7, lr}
 80200c4:	b087      	sub	sp, #28
 80200c6:	af00      	add	r7, sp, #0
 80200c8:	60f8      	str	r0, [r7, #12]
 80200ca:	60b9      	str	r1, [r7, #8]
 80200cc:	4613      	mov	r3, r2
 80200ce:	71fb      	strb	r3, [r7, #7]
    if(file_p->drv == NULL) {
 80200d0:	68fb      	ldr	r3, [r7, #12]
 80200d2:	685b      	ldr	r3, [r3, #4]
 80200d4:	2b00      	cmp	r3, #0
 80200d6:	d101      	bne.n	80200dc <lv_fs_seek+0x1a>
        return LV_FS_RES_INV_PARAM;
 80200d8:	230b      	movs	r3, #11
 80200da:	e098      	b.n	802020e <lv_fs_seek+0x14c>
    }

    if(file_p->drv->seek_cb == NULL) {
 80200dc:	68fb      	ldr	r3, [r7, #12]
 80200de:	685b      	ldr	r3, [r3, #4]
 80200e0:	699b      	ldr	r3, [r3, #24]
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d101      	bne.n	80200ea <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 80200e6:	2309      	movs	r3, #9
 80200e8:	e091      	b.n	802020e <lv_fs_seek+0x14c>
    }

    lv_fs_res_t res = LV_FS_RES_OK;
 80200ea:	2300      	movs	r3, #0
 80200ec:	75fb      	strb	r3, [r7, #23]
    if(file_p->drv->cache_size) {
 80200ee:	68fb      	ldr	r3, [r7, #12]
 80200f0:	685b      	ldr	r3, [r3, #4]
 80200f2:	885b      	ldrh	r3, [r3, #2]
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	d077      	beq.n	80201e8 <lv_fs_seek+0x126>
        switch(whence) {
 80200f8:	79fb      	ldrb	r3, [r7, #7]
 80200fa:	2b02      	cmp	r3, #2
 80200fc:	d051      	beq.n	80201a2 <lv_fs_seek+0xe0>
 80200fe:	2b02      	cmp	r3, #2
 8020100:	f300 8084 	bgt.w	802020c <lv_fs_seek+0x14a>
 8020104:	2b00      	cmp	r3, #0
 8020106:	d002      	beq.n	802010e <lv_fs_seek+0x4c>
 8020108:	2b01      	cmp	r3, #1
 802010a:	d023      	beq.n	8020154 <lv_fs_seek+0x92>
 802010c:	e07e      	b.n	802020c <lv_fs_seek+0x14a>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 802010e:	68fb      	ldr	r3, [r7, #12]
 8020110:	689b      	ldr	r3, [r3, #8]
 8020112:	68ba      	ldr	r2, [r7, #8]
 8020114:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8020116:	68fb      	ldr	r3, [r7, #12]
 8020118:	689b      	ldr	r3, [r3, #8]
 802011a:	689a      	ldr	r2, [r3, #8]
 802011c:	68fb      	ldr	r3, [r7, #12]
 802011e:	689b      	ldr	r3, [r3, #8]
 8020120:	681b      	ldr	r3, [r3, #0]
 8020122:	429a      	cmp	r2, r3
 8020124:	d307      	bcc.n	8020136 <lv_fs_seek+0x74>
 8020126:	68fb      	ldr	r3, [r7, #12]
 8020128:	689b      	ldr	r3, [r3, #8]
 802012a:	689a      	ldr	r2, [r3, #8]
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	689b      	ldr	r3, [r3, #8]
 8020130:	685b      	ldr	r3, [r3, #4]
 8020132:	429a      	cmp	r2, r3
 8020134:	d965      	bls.n	8020202 <lv_fs_seek+0x140>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8020136:	68fb      	ldr	r3, [r7, #12]
 8020138:	685b      	ldr	r3, [r3, #4]
 802013a:	699c      	ldr	r4, [r3, #24]
 802013c:	68fb      	ldr	r3, [r7, #12]
 802013e:	6858      	ldr	r0, [r3, #4]
 8020140:	68fb      	ldr	r3, [r7, #12]
 8020142:	6819      	ldr	r1, [r3, #0]
 8020144:	68fb      	ldr	r3, [r7, #12]
 8020146:	689b      	ldr	r3, [r3, #8]
 8020148:	689a      	ldr	r2, [r3, #8]
 802014a:	2300      	movs	r3, #0
 802014c:	47a0      	blx	r4
 802014e:	4603      	mov	r3, r0
 8020150:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 8020152:	e056      	b.n	8020202 <lv_fs_seek+0x140>
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 8020154:	68fb      	ldr	r3, [r7, #12]
 8020156:	689b      	ldr	r3, [r3, #8]
 8020158:	6899      	ldr	r1, [r3, #8]
 802015a:	68fb      	ldr	r3, [r7, #12]
 802015c:	689b      	ldr	r3, [r3, #8]
 802015e:	68ba      	ldr	r2, [r7, #8]
 8020160:	440a      	add	r2, r1
 8020162:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8020164:	68fb      	ldr	r3, [r7, #12]
 8020166:	689b      	ldr	r3, [r3, #8]
 8020168:	689a      	ldr	r2, [r3, #8]
 802016a:	68fb      	ldr	r3, [r7, #12]
 802016c:	689b      	ldr	r3, [r3, #8]
 802016e:	681b      	ldr	r3, [r3, #0]
 8020170:	429a      	cmp	r2, r3
 8020172:	d307      	bcc.n	8020184 <lv_fs_seek+0xc2>
 8020174:	68fb      	ldr	r3, [r7, #12]
 8020176:	689b      	ldr	r3, [r3, #8]
 8020178:	689a      	ldr	r2, [r3, #8]
 802017a:	68fb      	ldr	r3, [r7, #12]
 802017c:	689b      	ldr	r3, [r3, #8]
 802017e:	685b      	ldr	r3, [r3, #4]
 8020180:	429a      	cmp	r2, r3
 8020182:	d940      	bls.n	8020206 <lv_fs_seek+0x144>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8020184:	68fb      	ldr	r3, [r7, #12]
 8020186:	685b      	ldr	r3, [r3, #4]
 8020188:	699c      	ldr	r4, [r3, #24]
 802018a:	68fb      	ldr	r3, [r7, #12]
 802018c:	6858      	ldr	r0, [r3, #4]
 802018e:	68fb      	ldr	r3, [r7, #12]
 8020190:	6819      	ldr	r1, [r3, #0]
 8020192:	68fb      	ldr	r3, [r7, #12]
 8020194:	689b      	ldr	r3, [r3, #8]
 8020196:	689a      	ldr	r2, [r3, #8]
 8020198:	2300      	movs	r3, #0
 802019a:	47a0      	blx	r4
 802019c:	4603      	mov	r3, r0
 802019e:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 80201a0:	e031      	b.n	8020206 <lv_fs_seek+0x144>
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80201a2:	68fb      	ldr	r3, [r7, #12]
 80201a4:	685b      	ldr	r3, [r3, #4]
 80201a6:	699c      	ldr	r4, [r3, #24]
 80201a8:	68fb      	ldr	r3, [r7, #12]
 80201aa:	6858      	ldr	r0, [r3, #4]
 80201ac:	68fb      	ldr	r3, [r7, #12]
 80201ae:	6819      	ldr	r1, [r3, #0]
 80201b0:	79fb      	ldrb	r3, [r7, #7]
 80201b2:	68ba      	ldr	r2, [r7, #8]
 80201b4:	47a0      	blx	r4
 80201b6:	4603      	mov	r3, r0
 80201b8:	75fb      	strb	r3, [r7, #23]
                    if(res == LV_FS_RES_OK) {
 80201ba:	7dfb      	ldrb	r3, [r7, #23]
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d124      	bne.n	802020a <lv_fs_seek+0x148>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 80201c0:	68fb      	ldr	r3, [r7, #12]
 80201c2:	685b      	ldr	r3, [r3, #4]
 80201c4:	69db      	ldr	r3, [r3, #28]
 80201c6:	68fa      	ldr	r2, [r7, #12]
 80201c8:	6850      	ldr	r0, [r2, #4]
 80201ca:	68fa      	ldr	r2, [r7, #12]
 80201cc:	6811      	ldr	r1, [r2, #0]
 80201ce:	f107 0210 	add.w	r2, r7, #16
 80201d2:	4798      	blx	r3
 80201d4:	4603      	mov	r3, r0
 80201d6:	75fb      	strb	r3, [r7, #23]

                        if(res == LV_FS_RES_OK) {
 80201d8:	7dfb      	ldrb	r3, [r7, #23]
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d115      	bne.n	802020a <lv_fs_seek+0x148>
                            file_p->cache->file_position = tmp_position;
 80201de:	68fb      	ldr	r3, [r7, #12]
 80201e0:	689b      	ldr	r3, [r3, #8]
 80201e2:	693a      	ldr	r2, [r7, #16]
 80201e4:	609a      	str	r2, [r3, #8]
                        }
                    }
                    break;
 80201e6:	e010      	b.n	802020a <lv_fs_seek+0x148>
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80201e8:	68fb      	ldr	r3, [r7, #12]
 80201ea:	685b      	ldr	r3, [r3, #4]
 80201ec:	699c      	ldr	r4, [r3, #24]
 80201ee:	68fb      	ldr	r3, [r7, #12]
 80201f0:	6858      	ldr	r0, [r3, #4]
 80201f2:	68fb      	ldr	r3, [r7, #12]
 80201f4:	6819      	ldr	r1, [r3, #0]
 80201f6:	79fb      	ldrb	r3, [r7, #7]
 80201f8:	68ba      	ldr	r2, [r7, #8]
 80201fa:	47a0      	blx	r4
 80201fc:	4603      	mov	r3, r0
 80201fe:	75fb      	strb	r3, [r7, #23]
 8020200:	e004      	b.n	802020c <lv_fs_seek+0x14a>
                    break;
 8020202:	bf00      	nop
 8020204:	e002      	b.n	802020c <lv_fs_seek+0x14a>
                    break;
 8020206:	bf00      	nop
 8020208:	e000      	b.n	802020c <lv_fs_seek+0x14a>
                    break;
 802020a:	bf00      	nop
    }

    return res;
 802020c:	7dfb      	ldrb	r3, [r7, #23]
}
 802020e:	4618      	mov	r0, r3
 8020210:	371c      	adds	r7, #28
 8020212:	46bd      	mov	sp, r7
 8020214:	bd90      	pop	{r4, r7, pc}
	...

08020218 <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 8020218:	b580      	push	{r7, lr}
 802021a:	b084      	sub	sp, #16
 802021c:	af00      	add	r7, sp, #0
 802021e:	4603      	mov	r3, r0
 8020220:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8020222:	480d      	ldr	r0, [pc, #52]	; (8020258 <lv_fs_get_drv+0x40>)
 8020224:	f000 f93d 	bl	80204a2 <_lv_ll_get_head>
 8020228:	60f8      	str	r0, [r7, #12]
 802022a:	e00d      	b.n	8020248 <lv_fs_get_drv+0x30>
        if((*drv)->letter == letter) {
 802022c:	68fb      	ldr	r3, [r7, #12]
 802022e:	681b      	ldr	r3, [r3, #0]
 8020230:	781b      	ldrb	r3, [r3, #0]
 8020232:	79fa      	ldrb	r2, [r7, #7]
 8020234:	429a      	cmp	r2, r3
 8020236:	d102      	bne.n	802023e <lv_fs_get_drv+0x26>
            return *drv;
 8020238:	68fb      	ldr	r3, [r7, #12]
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	e008      	b.n	8020250 <lv_fs_get_drv+0x38>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 802023e:	68f9      	ldr	r1, [r7, #12]
 8020240:	4805      	ldr	r0, [pc, #20]	; (8020258 <lv_fs_get_drv+0x40>)
 8020242:	f000 f950 	bl	80204e6 <_lv_ll_get_next>
 8020246:	60f8      	str	r0, [r7, #12]
 8020248:	68fb      	ldr	r3, [r7, #12]
 802024a:	2b00      	cmp	r3, #0
 802024c:	d1ee      	bne.n	802022c <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 802024e:	2300      	movs	r3, #0
}
 8020250:	4618      	mov	r0, r3
 8020252:	3710      	adds	r7, #16
 8020254:	46bd      	mov	sp, r7
 8020256:	bd80      	pop	{r7, pc}
 8020258:	2000085c 	.word	0x2000085c

0802025c <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 802025c:	b580      	push	{r7, lr}
 802025e:	b084      	sub	sp, #16
 8020260:	af00      	add	r7, sp, #0
 8020262:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 8020264:	6878      	ldr	r0, [r7, #4]
 8020266:	f7df fff1 	bl	800024c <strlen>
 802026a:	60f8      	str	r0, [r7, #12]
 802026c:	e01b      	b.n	80202a6 <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 802026e:	687a      	ldr	r2, [r7, #4]
 8020270:	68fb      	ldr	r3, [r7, #12]
 8020272:	4413      	add	r3, r2
 8020274:	781b      	ldrb	r3, [r3, #0]
 8020276:	2b2e      	cmp	r3, #46	; 0x2e
 8020278:	d104      	bne.n	8020284 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 802027a:	68fb      	ldr	r3, [r7, #12]
 802027c:	3301      	adds	r3, #1
 802027e:	687a      	ldr	r2, [r7, #4]
 8020280:	4413      	add	r3, r2
 8020282:	e014      	b.n	80202ae <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 8020284:	687a      	ldr	r2, [r7, #4]
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	4413      	add	r3, r2
 802028a:	781b      	ldrb	r3, [r3, #0]
 802028c:	2b2f      	cmp	r3, #47	; 0x2f
 802028e:	d005      	beq.n	802029c <lv_fs_get_ext+0x40>
 8020290:	687a      	ldr	r2, [r7, #4]
 8020292:	68fb      	ldr	r3, [r7, #12]
 8020294:	4413      	add	r3, r2
 8020296:	781b      	ldrb	r3, [r3, #0]
 8020298:	2b5c      	cmp	r3, #92	; 0x5c
 802029a:	d101      	bne.n	80202a0 <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 802029c:	4b06      	ldr	r3, [pc, #24]	; (80202b8 <lv_fs_get_ext+0x5c>)
 802029e:	e006      	b.n	80202ae <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 80202a0:	68fb      	ldr	r3, [r7, #12]
 80202a2:	3b01      	subs	r3, #1
 80202a4:	60fb      	str	r3, [r7, #12]
 80202a6:	68fb      	ldr	r3, [r7, #12]
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	d1e0      	bne.n	802026e <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
 80202ac:	4b02      	ldr	r3, [pc, #8]	; (80202b8 <lv_fs_get_ext+0x5c>)
}
 80202ae:	4618      	mov	r0, r3
 80202b0:	3710      	adds	r7, #16
 80202b2:	46bd      	mov	sp, r7
 80202b4:	bd80      	pop	{r7, pc}
 80202b6:	bf00      	nop
 80202b8:	08023734 	.word	0x08023734

080202bc <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 80202bc:	b480      	push	{r7}
 80202be:	b083      	sub	sp, #12
 80202c0:	af00      	add	r7, sp, #0
 80202c2:	6078      	str	r0, [r7, #4]
    path++; /*Ignore the driver letter*/
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	3301      	adds	r3, #1
 80202c8:	607b      	str	r3, [r7, #4]
    if(*path == ':') path++;
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	781b      	ldrb	r3, [r3, #0]
 80202ce:	2b3a      	cmp	r3, #58	; 0x3a
 80202d0:	d102      	bne.n	80202d8 <lv_fs_get_real_path+0x1c>
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	3301      	adds	r3, #1
 80202d6:	607b      	str	r3, [r7, #4]

    return path;
 80202d8:	687b      	ldr	r3, [r7, #4]
}
 80202da:	4618      	mov	r0, r3
 80202dc:	370c      	adds	r7, #12
 80202de:	46bd      	mov	sp, r7
 80202e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202e4:	4770      	bx	lr

080202e6 <_lv_ll_init>:
 * Initialize linked list
 * @param ll_p pointer to lv_ll_t variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 80202e6:	b480      	push	{r7}
 80202e8:	b083      	sub	sp, #12
 80202ea:	af00      	add	r7, sp, #0
 80202ec:	6078      	str	r0, [r7, #4]
 80202ee:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	2200      	movs	r2, #0
 80202f4:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	2200      	movs	r2, #0
 80202fa:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 80202fc:	683b      	ldr	r3, [r7, #0]
 80202fe:	3303      	adds	r3, #3
 8020300:	f023 0303 	bic.w	r3, r3, #3
 8020304:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	683a      	ldr	r2, [r7, #0]
 802030a:	601a      	str	r2, [r3, #0]
}
 802030c:	bf00      	nop
 802030e:	370c      	adds	r7, #12
 8020310:	46bd      	mov	sp, r7
 8020312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020316:	4770      	bx	lr

08020318 <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 8020318:	b580      	push	{r7, lr}
 802031a:	b084      	sub	sp, #16
 802031c:	af00      	add	r7, sp, #0
 802031e:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	681b      	ldr	r3, [r3, #0]
 8020324:	3308      	adds	r3, #8
 8020326:	4618      	mov	r0, r3
 8020328:	f000 fa7a 	bl	8020820 <lv_mem_alloc>
 802032c:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	2b00      	cmp	r3, #0
 8020332:	d020      	beq.n	8020376 <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8020334:	2200      	movs	r2, #0
 8020336:	68f9      	ldr	r1, [r7, #12]
 8020338:	6878      	ldr	r0, [r7, #4]
 802033a:	f000 f917 	bl	802056c <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	685b      	ldr	r3, [r3, #4]
 8020342:	461a      	mov	r2, r3
 8020344:	68f9      	ldr	r1, [r7, #12]
 8020346:	6878      	ldr	r0, [r7, #4]
 8020348:	f000 f92f 	bl	80205aa <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	685b      	ldr	r3, [r3, #4]
 8020350:	2b00      	cmp	r3, #0
 8020352:	d006      	beq.n	8020362 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	685b      	ldr	r3, [r3, #4]
 8020358:	68fa      	ldr	r2, [r7, #12]
 802035a:	4619      	mov	r1, r3
 802035c:	6878      	ldr	r0, [r7, #4]
 802035e:	f000 f905 	bl	802056c <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	68fa      	ldr	r2, [r7, #12]
 8020366:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	689b      	ldr	r3, [r3, #8]
 802036c:	2b00      	cmp	r3, #0
 802036e:	d102      	bne.n	8020376 <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	68fa      	ldr	r2, [r7, #12]
 8020374:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 8020376:	68fb      	ldr	r3, [r7, #12]
}
 8020378:	4618      	mov	r0, r3
 802037a:	3710      	adds	r7, #16
 802037c:	46bd      	mov	sp, r7
 802037e:	bd80      	pop	{r7, pc}

08020380 <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 8020380:	b580      	push	{r7, lr}
 8020382:	b084      	sub	sp, #16
 8020384:	af00      	add	r7, sp, #0
 8020386:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	3308      	adds	r3, #8
 802038e:	4618      	mov	r0, r3
 8020390:	f000 fa46 	bl	8020820 <lv_mem_alloc>
 8020394:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8020396:	68fb      	ldr	r3, [r7, #12]
 8020398:	2b00      	cmp	r3, #0
 802039a:	d020      	beq.n	80203de <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 802039c:	2200      	movs	r2, #0
 802039e:	68f9      	ldr	r1, [r7, #12]
 80203a0:	6878      	ldr	r0, [r7, #4]
 80203a2:	f000 f902 	bl	80205aa <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	689b      	ldr	r3, [r3, #8]
 80203aa:	461a      	mov	r2, r3
 80203ac:	68f9      	ldr	r1, [r7, #12]
 80203ae:	6878      	ldr	r0, [r7, #4]
 80203b0:	f000 f8dc 	bl	802056c <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	689b      	ldr	r3, [r3, #8]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d006      	beq.n	80203ca <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	689b      	ldr	r3, [r3, #8]
 80203c0:	68fa      	ldr	r2, [r7, #12]
 80203c2:	4619      	mov	r1, r3
 80203c4:	6878      	ldr	r0, [r7, #4]
 80203c6:	f000 f8f0 	bl	80205aa <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	68fa      	ldr	r2, [r7, #12]
 80203ce:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	685b      	ldr	r3, [r3, #4]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d102      	bne.n	80203de <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 80203d8:	687b      	ldr	r3, [r7, #4]
 80203da:	68fa      	ldr	r2, [r7, #12]
 80203dc:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 80203de:	68fb      	ldr	r3, [r7, #12]
}
 80203e0:	4618      	mov	r0, r3
 80203e2:	3710      	adds	r7, #16
 80203e4:	46bd      	mov	sp, r7
 80203e6:	bd80      	pop	{r7, pc}

080203e8 <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 80203e8:	b580      	push	{r7, lr}
 80203ea:	b084      	sub	sp, #16
 80203ec:	af00      	add	r7, sp, #0
 80203ee:	6078      	str	r0, [r7, #4]
 80203f0:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return;
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d050      	beq.n	802049a <_lv_ll_remove+0xb2>

    if(_lv_ll_get_head(ll_p) == node_p) {
 80203f8:	6878      	ldr	r0, [r7, #4]
 80203fa:	f000 f852 	bl	80204a2 <_lv_ll_get_head>
 80203fe:	4602      	mov	r2, r0
 8020400:	683b      	ldr	r3, [r7, #0]
 8020402:	4293      	cmp	r3, r2
 8020404:	d116      	bne.n	8020434 <_lv_ll_remove+0x4c>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8020406:	6839      	ldr	r1, [r7, #0]
 8020408:	6878      	ldr	r0, [r7, #4]
 802040a:	f000 f86c 	bl	80204e6 <_lv_ll_get_next>
 802040e:	4602      	mov	r2, r0
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	685b      	ldr	r3, [r3, #4]
 8020418:	2b00      	cmp	r3, #0
 802041a:	d103      	bne.n	8020424 <_lv_ll_remove+0x3c>
            ll_p->tail = NULL;
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	2200      	movs	r2, #0
 8020420:	609a      	str	r2, [r3, #8]
 8020422:	e03b      	b.n	802049c <_lv_ll_remove+0xb4>
        }
        else {
            node_set_prev(ll_p, ll_p->head, NULL);
 8020424:	687b      	ldr	r3, [r7, #4]
 8020426:	685b      	ldr	r3, [r3, #4]
 8020428:	2200      	movs	r2, #0
 802042a:	4619      	mov	r1, r3
 802042c:	6878      	ldr	r0, [r7, #4]
 802042e:	f000 f89d 	bl	802056c <node_set_prev>
 8020432:	e033      	b.n	802049c <_lv_ll_remove+0xb4>
        }
    }
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8020434:	6878      	ldr	r0, [r7, #4]
 8020436:	f000 f845 	bl	80204c4 <_lv_ll_get_tail>
 802043a:	4602      	mov	r2, r0
 802043c:	683b      	ldr	r3, [r7, #0]
 802043e:	4293      	cmp	r3, r2
 8020440:	d116      	bne.n	8020470 <_lv_ll_remove+0x88>
        /*The new tail will be the node before 'n_act'*/
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8020442:	6839      	ldr	r1, [r7, #0]
 8020444:	6878      	ldr	r0, [r7, #4]
 8020446:	f000 f863 	bl	8020510 <_lv_ll_get_prev>
 802044a:	4602      	mov	r2, r0
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	689b      	ldr	r3, [r3, #8]
 8020454:	2b00      	cmp	r3, #0
 8020456:	d103      	bne.n	8020460 <_lv_ll_remove+0x78>
            ll_p->head = NULL;
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	2200      	movs	r2, #0
 802045c:	605a      	str	r2, [r3, #4]
 802045e:	e01d      	b.n	802049c <_lv_ll_remove+0xb4>
        }
        else {
            node_set_next(ll_p, ll_p->tail, NULL);
 8020460:	687b      	ldr	r3, [r7, #4]
 8020462:	689b      	ldr	r3, [r3, #8]
 8020464:	2200      	movs	r2, #0
 8020466:	4619      	mov	r1, r3
 8020468:	6878      	ldr	r0, [r7, #4]
 802046a:	f000 f89e 	bl	80205aa <node_set_next>
 802046e:	e015      	b.n	802049c <_lv_ll_remove+0xb4>
        }
    }
    else {
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 8020470:	6839      	ldr	r1, [r7, #0]
 8020472:	6878      	ldr	r0, [r7, #4]
 8020474:	f000 f84c 	bl	8020510 <_lv_ll_get_prev>
 8020478:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 802047a:	6839      	ldr	r1, [r7, #0]
 802047c:	6878      	ldr	r0, [r7, #4]
 802047e:	f000 f832 	bl	80204e6 <_lv_ll_get_next>
 8020482:	60b8      	str	r0, [r7, #8]

        node_set_next(ll_p, n_prev, n_next);
 8020484:	68ba      	ldr	r2, [r7, #8]
 8020486:	68f9      	ldr	r1, [r7, #12]
 8020488:	6878      	ldr	r0, [r7, #4]
 802048a:	f000 f88e 	bl	80205aa <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 802048e:	68fa      	ldr	r2, [r7, #12]
 8020490:	68b9      	ldr	r1, [r7, #8]
 8020492:	6878      	ldr	r0, [r7, #4]
 8020494:	f000 f86a 	bl	802056c <node_set_prev>
 8020498:	e000      	b.n	802049c <_lv_ll_remove+0xb4>
    if(ll_p == NULL) return;
 802049a:	bf00      	nop
    }
}
 802049c:	3710      	adds	r7, #16
 802049e:	46bd      	mov	sp, r7
 80204a0:	bd80      	pop	{r7, pc}

080204a2 <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 80204a2:	b480      	push	{r7}
 80204a4:	b083      	sub	sp, #12
 80204a6:	af00      	add	r7, sp, #0
 80204a8:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d101      	bne.n	80204b4 <_lv_ll_get_head+0x12>
 80204b0:	2300      	movs	r3, #0
 80204b2:	e001      	b.n	80204b8 <_lv_ll_get_head+0x16>
    return ll_p->head;
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	685b      	ldr	r3, [r3, #4]
}
 80204b8:	4618      	mov	r0, r3
 80204ba:	370c      	adds	r7, #12
 80204bc:	46bd      	mov	sp, r7
 80204be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c2:	4770      	bx	lr

080204c4 <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the tail of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 80204c4:	b480      	push	{r7}
 80204c6:	b083      	sub	sp, #12
 80204c8:	af00      	add	r7, sp, #0
 80204ca:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 80204cc:	687b      	ldr	r3, [r7, #4]
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d101      	bne.n	80204d6 <_lv_ll_get_tail+0x12>
 80204d2:	2300      	movs	r3, #0
 80204d4:	e001      	b.n	80204da <_lv_ll_get_tail+0x16>
    return ll_p->tail;
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	689b      	ldr	r3, [r3, #8]
}
 80204da:	4618      	mov	r0, r3
 80204dc:	370c      	adds	r7, #12
 80204de:	46bd      	mov	sp, r7
 80204e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204e4:	4770      	bx	lr

080204e6 <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 80204e6:	b480      	push	{r7}
 80204e8:	b085      	sub	sp, #20
 80204ea:	af00      	add	r7, sp, #0
 80204ec:	6078      	str	r0, [r7, #4]
 80204ee:	6039      	str	r1, [r7, #0]
    /*Pointer to the next node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 80204f0:	683b      	ldr	r3, [r7, #0]
 80204f2:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	3304      	adds	r3, #4
 80204fa:	68fa      	ldr	r2, [r7, #12]
 80204fc:	4413      	add	r3, r2
 80204fe:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8020500:	68fb      	ldr	r3, [r7, #12]
 8020502:	681b      	ldr	r3, [r3, #0]
}
 8020504:	4618      	mov	r0, r3
 8020506:	3714      	adds	r7, #20
 8020508:	46bd      	mov	sp, r7
 802050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802050e:	4770      	bx	lr

08020510 <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 8020510:	b480      	push	{r7}
 8020512:	b085      	sub	sp, #20
 8020514:	af00      	add	r7, sp, #0
 8020516:	6078      	str	r0, [r7, #4]
 8020518:	6039      	str	r1, [r7, #0]
    /*Pointer to the prev. node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 802051a:	683b      	ldr	r3, [r7, #0]
 802051c:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	68fa      	ldr	r2, [r7, #12]
 8020524:	4413      	add	r3, r2
 8020526:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8020528:	68fb      	ldr	r3, [r7, #12]
 802052a:	681b      	ldr	r3, [r3, #0]
}
 802052c:	4618      	mov	r0, r3
 802052e:	3714      	adds	r7, #20
 8020530:	46bd      	mov	sp, r7
 8020532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020536:	4770      	bx	lr

08020538 <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 8020538:	b480      	push	{r7}
 802053a:	b083      	sub	sp, #12
 802053c:	af00      	add	r7, sp, #0
 802053e:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	2b00      	cmp	r3, #0
 8020544:	d101      	bne.n	802054a <_lv_ll_is_empty+0x12>
 8020546:	2301      	movs	r3, #1
 8020548:	e00a      	b.n	8020560 <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	685b      	ldr	r3, [r3, #4]
 802054e:	2b00      	cmp	r3, #0
 8020550:	d105      	bne.n	802055e <_lv_ll_is_empty+0x26>
 8020552:	687b      	ldr	r3, [r7, #4]
 8020554:	689b      	ldr	r3, [r3, #8]
 8020556:	2b00      	cmp	r3, #0
 8020558:	d101      	bne.n	802055e <_lv_ll_is_empty+0x26>
 802055a:	2301      	movs	r3, #1
 802055c:	e000      	b.n	8020560 <_lv_ll_is_empty+0x28>

    return false;
 802055e:	2300      	movs	r3, #0
}
 8020560:	4618      	mov	r0, r3
 8020562:	370c      	adds	r7, #12
 8020564:	46bd      	mov	sp, r7
 8020566:	f85d 7b04 	ldr.w	r7, [sp], #4
 802056a:	4770      	bx	lr

0802056c <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 802056c:	b480      	push	{r7}
 802056e:	b089      	sub	sp, #36	; 0x24
 8020570:	af00      	add	r7, sp, #0
 8020572:	60f8      	str	r0, [r7, #12]
 8020574:	60b9      	str	r1, [r7, #8]
 8020576:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8020578:	68bb      	ldr	r3, [r7, #8]
 802057a:	2b00      	cmp	r3, #0
 802057c:	d00f      	beq.n	802059e <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *)act;
 802057e:	68bb      	ldr	r3, [r7, #8]
 8020580:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	69fa      	ldr	r2, [r7, #28]
 8020588:	4413      	add	r3, r2
 802058a:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 802058c:	69fb      	ldr	r3, [r7, #28]
 802058e:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 8020590:	1d3b      	adds	r3, r7, #4
 8020592:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 8020594:	697b      	ldr	r3, [r7, #20]
 8020596:	681a      	ldr	r2, [r3, #0]
 8020598:	69bb      	ldr	r3, [r7, #24]
 802059a:	601a      	str	r2, [r3, #0]
 802059c:	e000      	b.n	80205a0 <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 802059e:	bf00      	nop
}
 80205a0:	3724      	adds	r7, #36	; 0x24
 80205a2:	46bd      	mov	sp, r7
 80205a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a8:	4770      	bx	lr

080205aa <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 80205aa:	b480      	push	{r7}
 80205ac:	b089      	sub	sp, #36	; 0x24
 80205ae:	af00      	add	r7, sp, #0
 80205b0:	60f8      	str	r0, [r7, #12]
 80205b2:	60b9      	str	r1, [r7, #8]
 80205b4:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 80205b6:	68bb      	ldr	r3, [r7, #8]
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	d010      	beq.n	80205de <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *)act;
 80205bc:	68bb      	ldr	r3, [r7, #8]
 80205be:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 80205c0:	68fb      	ldr	r3, [r7, #12]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	3304      	adds	r3, #4
 80205c6:	69fa      	ldr	r2, [r7, #28]
 80205c8:	4413      	add	r3, r2
 80205ca:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 80205cc:	69fb      	ldr	r3, [r7, #28]
 80205ce:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 80205d0:	1d3b      	adds	r3, r7, #4
 80205d2:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 80205d4:	697b      	ldr	r3, [r7, #20]
 80205d6:	681a      	ldr	r2, [r3, #0]
 80205d8:	69bb      	ldr	r3, [r7, #24]
 80205da:	601a      	str	r2, [r3, #0]
 80205dc:	e000      	b.n	80205e0 <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 80205de:	bf00      	nop
}
 80205e0:	3724      	adds	r7, #36	; 0x24
 80205e2:	46bd      	mov	sp, r7
 80205e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205e8:	4770      	bx	lr
	...

080205ec <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
 80205ec:	b480      	push	{r7}
 80205ee:	b085      	sub	sp, #20
 80205f0:	af00      	add	r7, sp, #0
 80205f2:	4603      	mov	r3, r0
 80205f4:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 80205f6:	2300      	movs	r3, #0
 80205f8:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 80205fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80205fe:	4a31      	ldr	r2, [pc, #196]	; (80206c4 <lv_trigo_sin+0xd8>)
 8020600:	fb82 1203 	smull	r1, r2, r2, r3
 8020604:	441a      	add	r2, r3
 8020606:	1211      	asrs	r1, r2, #8
 8020608:	17da      	asrs	r2, r3, #31
 802060a:	1a8a      	subs	r2, r1, r2
 802060c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8020610:	fb01 f202 	mul.w	r2, r1, r2
 8020614:	1a9b      	subs	r3, r3, r2
 8020616:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 8020618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802061c:	2b00      	cmp	r3, #0
 802061e:	da04      	bge.n	802062a <lv_trigo_sin+0x3e>
 8020620:	88fb      	ldrh	r3, [r7, #6]
 8020622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8020626:	b29b      	uxth	r3, r3
 8020628:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 802062a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802062e:	2b59      	cmp	r3, #89	; 0x59
 8020630:	dc06      	bgt.n	8020640 <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 8020632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020636:	4a24      	ldr	r2, [pc, #144]	; (80206c8 <lv_trigo_sin+0xdc>)
 8020638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802063c:	81fb      	strh	r3, [r7, #14]
 802063e:	e038      	b.n	80206b2 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 8020640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020644:	2b59      	cmp	r3, #89	; 0x59
 8020646:	dd0f      	ble.n	8020668 <lv_trigo_sin+0x7c>
 8020648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802064c:	2bb3      	cmp	r3, #179	; 0xb3
 802064e:	dc0b      	bgt.n	8020668 <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 8020650:	88fb      	ldrh	r3, [r7, #6]
 8020652:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8020656:	b29b      	uxth	r3, r3
 8020658:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 802065a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802065e:	4a1a      	ldr	r2, [pc, #104]	; (80206c8 <lv_trigo_sin+0xdc>)
 8020660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020664:	81fb      	strh	r3, [r7, #14]
 8020666:	e024      	b.n	80206b2 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 8020668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802066c:	2bb3      	cmp	r3, #179	; 0xb3
 802066e:	dd12      	ble.n	8020696 <lv_trigo_sin+0xaa>
 8020670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020674:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8020678:	da0d      	bge.n	8020696 <lv_trigo_sin+0xaa>
        angle = angle - 180;
 802067a:	88fb      	ldrh	r3, [r7, #6]
 802067c:	3bb4      	subs	r3, #180	; 0xb4
 802067e:	b29b      	uxth	r3, r3
 8020680:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8020682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020686:	4a10      	ldr	r2, [pc, #64]	; (80206c8 <lv_trigo_sin+0xdc>)
 8020688:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 802068c:	b29b      	uxth	r3, r3
 802068e:	425b      	negs	r3, r3
 8020690:	b29b      	uxth	r3, r3
 8020692:	81fb      	strh	r3, [r7, #14]
 8020694:	e00d      	b.n	80206b2 <lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8020696:	88fb      	ldrh	r3, [r7, #6]
 8020698:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 802069c:	b29b      	uxth	r3, r3
 802069e:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 80206a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80206a4:	4a08      	ldr	r2, [pc, #32]	; (80206c8 <lv_trigo_sin+0xdc>)
 80206a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80206aa:	b29b      	uxth	r3, r3
 80206ac:	425b      	negs	r3, r3
 80206ae:	b29b      	uxth	r3, r3
 80206b0:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 80206b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80206b6:	4618      	mov	r0, r3
 80206b8:	3714      	adds	r7, #20
 80206ba:	46bd      	mov	sp, r7
 80206bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206c0:	4770      	bx	lr
 80206c2:	bf00      	nop
 80206c4:	b60b60b7 	.word	0xb60b60b7
 80206c8:	08026e24 	.word	0x08026e24

080206cc <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 80206cc:	b480      	push	{r7}
 80206ce:	b08f      	sub	sp, #60	; 0x3c
 80206d0:	af00      	add	r7, sp, #0
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	60b9      	str	r1, [r7, #8]
 80206d6:	607a      	str	r2, [r7, #4]
 80206d8:	603b      	str	r3, [r7, #0]
    uint32_t t_rem  = 1024 - t;
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80206e0:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 80206e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80206e4:	fb03 f303 	mul.w	r3, r3, r3
 80206e8:	0a9b      	lsrs	r3, r3, #10
 80206ea:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 80206ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80206f0:	fb02 f303 	mul.w	r3, r2, r3
 80206f4:	0a9b      	lsrs	r3, r3, #10
 80206f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t t2     = (t * t) >> 10;
 80206f8:	68fb      	ldr	r3, [r7, #12]
 80206fa:	fb03 f303 	mul.w	r3, r3, r3
 80206fe:	0a9b      	lsrs	r3, r3, #10
 8020700:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t t3     = (t2 * t) >> 10;
 8020702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020704:	68fa      	ldr	r2, [r7, #12]
 8020706:	fb02 f303 	mul.w	r3, r2, r3
 802070a:	0a9b      	lsrs	r3, r3, #10
 802070c:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t v1 = (t_rem3 * u0) >> 10;
 802070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020710:	68ba      	ldr	r2, [r7, #8]
 8020712:	fb02 f303 	mul.w	r3, r2, r3
 8020716:	0a9b      	lsrs	r3, r3, #10
 8020718:	623b      	str	r3, [r7, #32]
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 802071a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802071c:	68fa      	ldr	r2, [r7, #12]
 802071e:	fb02 f303 	mul.w	r3, r2, r3
 8020722:	687a      	ldr	r2, [r7, #4]
 8020724:	fb03 f202 	mul.w	r2, r3, r2
 8020728:	4613      	mov	r3, r2
 802072a:	005b      	lsls	r3, r3, #1
 802072c:	4413      	add	r3, r2
 802072e:	0d1b      	lsrs	r3, r3, #20
 8020730:	61fb      	str	r3, [r7, #28]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8020732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020736:	fb02 f303 	mul.w	r3, r2, r3
 802073a:	683a      	ldr	r2, [r7, #0]
 802073c:	fb03 f202 	mul.w	r2, r3, r2
 8020740:	4613      	mov	r3, r2
 8020742:	005b      	lsls	r3, r3, #1
 8020744:	4413      	add	r3, r2
 8020746:	0d1b      	lsrs	r3, r3, #20
 8020748:	61bb      	str	r3, [r7, #24]
    uint32_t v4 = (t3 * u3) >> 10;
 802074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802074c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802074e:	fb02 f303 	mul.w	r3, r2, r3
 8020752:	0a9b      	lsrs	r3, r3, #10
 8020754:	617b      	str	r3, [r7, #20]

    return v1 + v2 + v3 + v4;
 8020756:	6a3a      	ldr	r2, [r7, #32]
 8020758:	69fb      	ldr	r3, [r7, #28]
 802075a:	441a      	add	r2, r3
 802075c:	69bb      	ldr	r3, [r7, #24]
 802075e:	441a      	add	r2, r3
 8020760:	697b      	ldr	r3, [r7, #20]
 8020762:	4413      	add	r3, r2
}
 8020764:	4618      	mov	r0, r3
 8020766:	373c      	adds	r7, #60	; 0x3c
 8020768:	46bd      	mov	sp, r7
 802076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802076e:	4770      	bx	lr

08020770 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8020770:	b480      	push	{r7}
 8020772:	b087      	sub	sp, #28
 8020774:	af00      	add	r7, sp, #0
 8020776:	60f8      	str	r0, [r7, #12]
 8020778:	60b9      	str	r1, [r7, #8]
 802077a:	607a      	str	r2, [r7, #4]
 802077c:	603b      	str	r3, [r7, #0]
    if(max_in >= min_in && x >= max_in) return max_out;
 802077e:	687a      	ldr	r2, [r7, #4]
 8020780:	68bb      	ldr	r3, [r7, #8]
 8020782:	429a      	cmp	r2, r3
 8020784:	db05      	blt.n	8020792 <lv_map+0x22>
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	429a      	cmp	r2, r3
 802078c:	db01      	blt.n	8020792 <lv_map+0x22>
 802078e:	6a3b      	ldr	r3, [r7, #32]
 8020790:	e030      	b.n	80207f4 <lv_map+0x84>
    if(max_in >= min_in && x <= min_in) return min_out;
 8020792:	687a      	ldr	r2, [r7, #4]
 8020794:	68bb      	ldr	r3, [r7, #8]
 8020796:	429a      	cmp	r2, r3
 8020798:	db05      	blt.n	80207a6 <lv_map+0x36>
 802079a:	68fa      	ldr	r2, [r7, #12]
 802079c:	68bb      	ldr	r3, [r7, #8]
 802079e:	429a      	cmp	r2, r3
 80207a0:	dc01      	bgt.n	80207a6 <lv_map+0x36>
 80207a2:	683b      	ldr	r3, [r7, #0]
 80207a4:	e026      	b.n	80207f4 <lv_map+0x84>

    if(max_in <= min_in && x <= max_in) return max_out;
 80207a6:	687a      	ldr	r2, [r7, #4]
 80207a8:	68bb      	ldr	r3, [r7, #8]
 80207aa:	429a      	cmp	r2, r3
 80207ac:	dc05      	bgt.n	80207ba <lv_map+0x4a>
 80207ae:	68fa      	ldr	r2, [r7, #12]
 80207b0:	687b      	ldr	r3, [r7, #4]
 80207b2:	429a      	cmp	r2, r3
 80207b4:	dc01      	bgt.n	80207ba <lv_map+0x4a>
 80207b6:	6a3b      	ldr	r3, [r7, #32]
 80207b8:	e01c      	b.n	80207f4 <lv_map+0x84>
    if(max_in <= min_in && x >= min_in) return min_out;
 80207ba:	687a      	ldr	r2, [r7, #4]
 80207bc:	68bb      	ldr	r3, [r7, #8]
 80207be:	429a      	cmp	r2, r3
 80207c0:	dc05      	bgt.n	80207ce <lv_map+0x5e>
 80207c2:	68fa      	ldr	r2, [r7, #12]
 80207c4:	68bb      	ldr	r3, [r7, #8]
 80207c6:	429a      	cmp	r2, r3
 80207c8:	db01      	blt.n	80207ce <lv_map+0x5e>
 80207ca:	683b      	ldr	r3, [r7, #0]
 80207cc:	e012      	b.n	80207f4 <lv_map+0x84>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 80207ce:	687a      	ldr	r2, [r7, #4]
 80207d0:	68bb      	ldr	r3, [r7, #8]
 80207d2:	1ad3      	subs	r3, r2, r3
 80207d4:	617b      	str	r3, [r7, #20]
    int32_t delta_out = max_out - min_out;
 80207d6:	6a3a      	ldr	r2, [r7, #32]
 80207d8:	683b      	ldr	r3, [r7, #0]
 80207da:	1ad3      	subs	r3, r2, r3
 80207dc:	613b      	str	r3, [r7, #16]

    return ((x - min_in) * delta_out) / delta_in + min_out;
 80207de:	68fa      	ldr	r2, [r7, #12]
 80207e0:	68bb      	ldr	r3, [r7, #8]
 80207e2:	1ad3      	subs	r3, r2, r3
 80207e4:	693a      	ldr	r2, [r7, #16]
 80207e6:	fb03 f202 	mul.w	r2, r3, r2
 80207ea:	697b      	ldr	r3, [r7, #20]
 80207ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80207f0:	683b      	ldr	r3, [r7, #0]
 80207f2:	4413      	add	r3, r2
}
 80207f4:	4618      	mov	r0, r3
 80207f6:	371c      	adds	r7, #28
 80207f8:	46bd      	mov	sp, r7
 80207fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207fe:	4770      	bx	lr

08020800 <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8020800:	b580      	push	{r7, lr}
 8020802:	af00      	add	r7, sp, #0
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8020804:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8020808:	4803      	ldr	r0, [pc, #12]	; (8020818 <lv_mem_init+0x18>)
 802080a:	f002 f950 	bl	8022aae <lv_tlsf_create_with_pool>
 802080e:	4603      	mov	r3, r0
 8020810:	4a02      	ldr	r2, [pc, #8]	; (802081c <lv_mem_init+0x1c>)
 8020812:	6013      	str	r3, [r2, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 8020814:	bf00      	nop
 8020816:	bd80      	pop	{r7, pc}
 8020818:	20000a50 	.word	0x20000a50
 802081c:	20000a44 	.word	0x20000a44

08020820 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8020820:	b580      	push	{r7, lr}
 8020822:	b084      	sub	sp, #16
 8020824:	af00      	add	r7, sp, #0
 8020826:	6078      	str	r0, [r7, #4]
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	2b00      	cmp	r3, #0
 802082c:	d101      	bne.n	8020832 <lv_mem_alloc+0x12>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 802082e:	4b10      	ldr	r3, [pc, #64]	; (8020870 <lv_mem_alloc+0x50>)
 8020830:	e019      	b.n	8020866 <lv_mem_alloc+0x46>
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8020832:	4b10      	ldr	r3, [pc, #64]	; (8020874 <lv_mem_alloc+0x54>)
 8020834:	681b      	ldr	r3, [r3, #0]
 8020836:	6879      	ldr	r1, [r7, #4]
 8020838:	4618      	mov	r0, r3
 802083a:	f002 f955 	bl	8022ae8 <lv_tlsf_malloc>
 802083e:	60f8      	str	r0, [r7, #12]
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 8020840:	68fb      	ldr	r3, [r7, #12]
 8020842:	2b00      	cmp	r3, #0
 8020844:	d00e      	beq.n	8020864 <lv_mem_alloc+0x44>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 8020846:	4b0c      	ldr	r3, [pc, #48]	; (8020878 <lv_mem_alloc+0x58>)
 8020848:	681a      	ldr	r2, [r3, #0]
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	4413      	add	r3, r2
 802084e:	4a0a      	ldr	r2, [pc, #40]	; (8020878 <lv_mem_alloc+0x58>)
 8020850:	6013      	str	r3, [r2, #0]
        max_used = LV_MAX(cur_used, max_used);
 8020852:	4b0a      	ldr	r3, [pc, #40]	; (802087c <lv_mem_alloc+0x5c>)
 8020854:	681a      	ldr	r2, [r3, #0]
 8020856:	4b08      	ldr	r3, [pc, #32]	; (8020878 <lv_mem_alloc+0x58>)
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	4293      	cmp	r3, r2
 802085c:	bf38      	it	cc
 802085e:	4613      	movcc	r3, r2
 8020860:	4a06      	ldr	r2, [pc, #24]	; (802087c <lv_mem_alloc+0x5c>)
 8020862:	6013      	str	r3, [r2, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
 8020864:	68fb      	ldr	r3, [r7, #12]
}
 8020866:	4618      	mov	r0, r3
 8020868:	3710      	adds	r7, #16
 802086a:	46bd      	mov	sp, r7
 802086c:	bd80      	pop	{r7, pc}
 802086e:	bf00      	nop
 8020870:	20000014 	.word	0x20000014
 8020874:	20000a44 	.word	0x20000a44
 8020878:	20000a48 	.word	0x20000a48
 802087c:	20000a4c 	.word	0x20000a4c

08020880 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 8020880:	b580      	push	{r7, lr}
 8020882:	b084      	sub	sp, #16
 8020884:	af00      	add	r7, sp, #0
 8020886:	6078      	str	r0, [r7, #4]
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	4a11      	ldr	r2, [pc, #68]	; (80208d0 <lv_mem_free+0x50>)
 802088c:	4293      	cmp	r3, r2
 802088e:	d019      	beq.n	80208c4 <lv_mem_free+0x44>
    if(data == NULL) return;
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	2b00      	cmp	r3, #0
 8020894:	d018      	beq.n	80208c8 <lv_mem_free+0x48>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8020896:	4b0f      	ldr	r3, [pc, #60]	; (80208d4 <lv_mem_free+0x54>)
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	6879      	ldr	r1, [r7, #4]
 802089c:	4618      	mov	r0, r3
 802089e:	f002 f93e 	bl	8022b1e <lv_tlsf_free>
 80208a2:	60f8      	str	r0, [r7, #12]
    if(cur_used > size) cur_used -= size;
 80208a4:	4b0c      	ldr	r3, [pc, #48]	; (80208d8 <lv_mem_free+0x58>)
 80208a6:	681b      	ldr	r3, [r3, #0]
 80208a8:	68fa      	ldr	r2, [r7, #12]
 80208aa:	429a      	cmp	r2, r3
 80208ac:	d206      	bcs.n	80208bc <lv_mem_free+0x3c>
 80208ae:	4b0a      	ldr	r3, [pc, #40]	; (80208d8 <lv_mem_free+0x58>)
 80208b0:	681a      	ldr	r2, [r3, #0]
 80208b2:	68fb      	ldr	r3, [r7, #12]
 80208b4:	1ad3      	subs	r3, r2, r3
 80208b6:	4a08      	ldr	r2, [pc, #32]	; (80208d8 <lv_mem_free+0x58>)
 80208b8:	6013      	str	r3, [r2, #0]
 80208ba:	e006      	b.n	80208ca <lv_mem_free+0x4a>
    else cur_used = 0;
 80208bc:	4b06      	ldr	r3, [pc, #24]	; (80208d8 <lv_mem_free+0x58>)
 80208be:	2200      	movs	r2, #0
 80208c0:	601a      	str	r2, [r3, #0]
 80208c2:	e002      	b.n	80208ca <lv_mem_free+0x4a>
    if(data == &zero_mem) return;
 80208c4:	bf00      	nop
 80208c6:	e000      	b.n	80208ca <lv_mem_free+0x4a>
    if(data == NULL) return;
 80208c8:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 80208ca:	3710      	adds	r7, #16
 80208cc:	46bd      	mov	sp, r7
 80208ce:	bd80      	pop	{r7, pc}
 80208d0:	20000014 	.word	0x20000014
 80208d4:	20000a44 	.word	0x20000a44
 80208d8:	20000a48 	.word	0x20000a48

080208dc <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 80208dc:	b580      	push	{r7, lr}
 80208de:	b084      	sub	sp, #16
 80208e0:	af00      	add	r7, sp, #0
 80208e2:	6078      	str	r0, [r7, #4]
 80208e4:	6039      	str	r1, [r7, #0]
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 80208e6:	683b      	ldr	r3, [r7, #0]
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	d104      	bne.n	80208f6 <lv_mem_realloc+0x1a>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
 80208ec:	6878      	ldr	r0, [r7, #4]
 80208ee:	f7ff ffc7 	bl	8020880 <lv_mem_free>
        return &zero_mem;
 80208f2:	4b0e      	ldr	r3, [pc, #56]	; (802092c <lv_mem_realloc+0x50>)
 80208f4:	e016      	b.n	8020924 <lv_mem_realloc+0x48>
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80208f6:	687b      	ldr	r3, [r7, #4]
 80208f8:	4a0c      	ldr	r2, [pc, #48]	; (802092c <lv_mem_realloc+0x50>)
 80208fa:	4293      	cmp	r3, r2
 80208fc:	d104      	bne.n	8020908 <lv_mem_realloc+0x2c>
 80208fe:	6838      	ldr	r0, [r7, #0]
 8020900:	f7ff ff8e 	bl	8020820 <lv_mem_alloc>
 8020904:	4603      	mov	r3, r0
 8020906:	e00d      	b.n	8020924 <lv_mem_realloc+0x48>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8020908:	4b09      	ldr	r3, [pc, #36]	; (8020930 <lv_mem_realloc+0x54>)
 802090a:	681b      	ldr	r3, [r3, #0]
 802090c:	683a      	ldr	r2, [r7, #0]
 802090e:	6879      	ldr	r1, [r7, #4]
 8020910:	4618      	mov	r0, r3
 8020912:	f002 f934 	bl	8022b7e <lv_tlsf_realloc>
 8020916:	60f8      	str	r0, [r7, #12]
#else
    void * new_p = LV_MEM_CUSTOM_REALLOC(data_p, new_size);
#endif
    if(new_p == NULL) {
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	2b00      	cmp	r3, #0
 802091c:	d101      	bne.n	8020922 <lv_mem_realloc+0x46>
        LV_LOG_ERROR("couldn't allocate memory");
        return NULL;
 802091e:	2300      	movs	r3, #0
 8020920:	e000      	b.n	8020924 <lv_mem_realloc+0x48>
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
 8020922:	68fb      	ldr	r3, [r7, #12]
}
 8020924:	4618      	mov	r0, r3
 8020926:	3710      	adds	r7, #16
 8020928:	46bd      	mov	sp, r7
 802092a:	bd80      	pop	{r7, pc}
 802092c:	20000014 	.word	0x20000014
 8020930:	20000a44 	.word	0x20000a44

08020934 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 8020934:	b580      	push	{r7, lr}
 8020936:	b084      	sub	sp, #16
 8020938:	af00      	add	r7, sp, #0
 802093a:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	2b00      	cmp	r3, #0
 8020940:	d101      	bne.n	8020946 <lv_mem_buf_get+0x12>
 8020942:	2300      	movs	r3, #0
 8020944:	e09c      	b.n	8020a80 <lv_mem_buf_get+0x14c>

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 8020946:	23ff      	movs	r3, #255	; 0xff
 8020948:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802094a:	2300      	movs	r3, #0
 802094c:	73bb      	strb	r3, [r7, #14]
 802094e:	e041      	b.n	80209d4 <lv_mem_buf_get+0xa0>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8020950:	7bbb      	ldrb	r3, [r7, #14]
 8020952:	4a4d      	ldr	r2, [pc, #308]	; (8020a88 <lv_mem_buf_get+0x154>)
 8020954:	00db      	lsls	r3, r3, #3
 8020956:	4413      	add	r3, r2
 8020958:	799b      	ldrb	r3, [r3, #6]
 802095a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 802095e:	b2db      	uxtb	r3, r3
 8020960:	2b00      	cmp	r3, #0
 8020962:	d134      	bne.n	80209ce <lv_mem_buf_get+0x9a>
 8020964:	7bbb      	ldrb	r3, [r7, #14]
 8020966:	4a48      	ldr	r2, [pc, #288]	; (8020a88 <lv_mem_buf_get+0x154>)
 8020968:	00db      	lsls	r3, r3, #3
 802096a:	4413      	add	r3, r2
 802096c:	889b      	ldrh	r3, [r3, #4]
 802096e:	461a      	mov	r2, r3
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	4293      	cmp	r3, r2
 8020974:	d82b      	bhi.n	80209ce <lv_mem_buf_get+0x9a>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8020976:	7bbb      	ldrb	r3, [r7, #14]
 8020978:	4a43      	ldr	r2, [pc, #268]	; (8020a88 <lv_mem_buf_get+0x154>)
 802097a:	00db      	lsls	r3, r3, #3
 802097c:	4413      	add	r3, r2
 802097e:	889b      	ldrh	r3, [r3, #4]
 8020980:	461a      	mov	r2, r3
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	4293      	cmp	r3, r2
 8020986:	d10c      	bne.n	80209a2 <lv_mem_buf_get+0x6e>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8020988:	7bbb      	ldrb	r3, [r7, #14]
 802098a:	4a3f      	ldr	r2, [pc, #252]	; (8020a88 <lv_mem_buf_get+0x154>)
 802098c:	00db      	lsls	r3, r3, #3
 802098e:	4413      	add	r3, r2
 8020990:	799a      	ldrb	r2, [r3, #6]
 8020992:	f042 0201 	orr.w	r2, r2, #1
 8020996:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8020998:	7bbb      	ldrb	r3, [r7, #14]
 802099a:	4a3b      	ldr	r2, [pc, #236]	; (8020a88 <lv_mem_buf_get+0x154>)
 802099c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80209a0:	e06e      	b.n	8020a80 <lv_mem_buf_get+0x14c>
            }
            else if(i_guess < 0) {
 80209a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80209a6:	2b00      	cmp	r3, #0
 80209a8:	da02      	bge.n	80209b0 <lv_mem_buf_get+0x7c>
                i_guess = i;
 80209aa:	7bbb      	ldrb	r3, [r7, #14]
 80209ac:	73fb      	strb	r3, [r7, #15]
 80209ae:	e00e      	b.n	80209ce <lv_mem_buf_get+0x9a>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 80209b0:	7bbb      	ldrb	r3, [r7, #14]
 80209b2:	4a35      	ldr	r2, [pc, #212]	; (8020a88 <lv_mem_buf_get+0x154>)
 80209b4:	00db      	lsls	r3, r3, #3
 80209b6:	4413      	add	r3, r2
 80209b8:	889a      	ldrh	r2, [r3, #4]
 80209ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80209be:	4932      	ldr	r1, [pc, #200]	; (8020a88 <lv_mem_buf_get+0x154>)
 80209c0:	00db      	lsls	r3, r3, #3
 80209c2:	440b      	add	r3, r1
 80209c4:	889b      	ldrh	r3, [r3, #4]
 80209c6:	429a      	cmp	r2, r3
 80209c8:	d201      	bcs.n	80209ce <lv_mem_buf_get+0x9a>
                i_guess = i;
 80209ca:	7bbb      	ldrb	r3, [r7, #14]
 80209cc:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80209ce:	7bbb      	ldrb	r3, [r7, #14]
 80209d0:	3301      	adds	r3, #1
 80209d2:	73bb      	strb	r3, [r7, #14]
 80209d4:	7bbb      	ldrb	r3, [r7, #14]
 80209d6:	2b0f      	cmp	r3, #15
 80209d8:	d9ba      	bls.n	8020950 <lv_mem_buf_get+0x1c>
            }
        }
    }

    if(i_guess >= 0) {
 80209da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80209de:	2b00      	cmp	r3, #0
 80209e0:	db0e      	blt.n	8020a00 <lv_mem_buf_get+0xcc>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 80209e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80209e6:	4a28      	ldr	r2, [pc, #160]	; (8020a88 <lv_mem_buf_get+0x154>)
 80209e8:	00db      	lsls	r3, r3, #3
 80209ea:	4413      	add	r3, r2
 80209ec:	799a      	ldrb	r2, [r3, #6]
 80209ee:	f042 0201 	orr.w	r2, r2, #1
 80209f2:	719a      	strb	r2, [r3, #6]
        MEM_TRACE("returning already allocated buffer (buffer id: %d, address: %p)", i_guess,
                  LV_GC_ROOT(lv_mem_buf[i_guess]).p);
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 80209f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80209f8:	4a23      	ldr	r2, [pc, #140]	; (8020a88 <lv_mem_buf_get+0x154>)
 80209fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80209fe:	e03f      	b.n	8020a80 <lv_mem_buf_get+0x14c>
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020a00:	2300      	movs	r3, #0
 8020a02:	737b      	strb	r3, [r7, #13]
 8020a04:	e038      	b.n	8020a78 <lv_mem_buf_get+0x144>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8020a06:	7b7b      	ldrb	r3, [r7, #13]
 8020a08:	4a1f      	ldr	r2, [pc, #124]	; (8020a88 <lv_mem_buf_get+0x154>)
 8020a0a:	00db      	lsls	r3, r3, #3
 8020a0c:	4413      	add	r3, r2
 8020a0e:	799b      	ldrb	r3, [r3, #6]
 8020a10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8020a14:	b2db      	uxtb	r3, r3
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d12b      	bne.n	8020a72 <lv_mem_buf_get+0x13e>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8020a1a:	7b7b      	ldrb	r3, [r7, #13]
 8020a1c:	4a1a      	ldr	r2, [pc, #104]	; (8020a88 <lv_mem_buf_get+0x154>)
 8020a1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020a22:	6879      	ldr	r1, [r7, #4]
 8020a24:	4618      	mov	r0, r3
 8020a26:	f7ff ff59 	bl	80208dc <lv_mem_realloc>
 8020a2a:	60b8      	str	r0, [r7, #8]
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8020a2c:	68bb      	ldr	r3, [r7, #8]
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d100      	bne.n	8020a34 <lv_mem_buf_get+0x100>
 8020a32:	e7fe      	b.n	8020a32 <lv_mem_buf_get+0xfe>
            if(buf == NULL) return NULL;
 8020a34:	68bb      	ldr	r3, [r7, #8]
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d101      	bne.n	8020a3e <lv_mem_buf_get+0x10a>
 8020a3a:	2300      	movs	r3, #0
 8020a3c:	e020      	b.n	8020a80 <lv_mem_buf_get+0x14c>

            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8020a3e:	7b7b      	ldrb	r3, [r7, #13]
 8020a40:	4a11      	ldr	r2, [pc, #68]	; (8020a88 <lv_mem_buf_get+0x154>)
 8020a42:	00db      	lsls	r3, r3, #3
 8020a44:	4413      	add	r3, r2
 8020a46:	799a      	ldrb	r2, [r3, #6]
 8020a48:	f042 0201 	orr.w	r2, r2, #1
 8020a4c:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8020a4e:	7b7b      	ldrb	r3, [r7, #13]
 8020a50:	687a      	ldr	r2, [r7, #4]
 8020a52:	b291      	uxth	r1, r2
 8020a54:	4a0c      	ldr	r2, [pc, #48]	; (8020a88 <lv_mem_buf_get+0x154>)
 8020a56:	00db      	lsls	r3, r3, #3
 8020a58:	4413      	add	r3, r2
 8020a5a:	460a      	mov	r2, r1
 8020a5c:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8020a5e:	7b7b      	ldrb	r3, [r7, #13]
 8020a60:	4909      	ldr	r1, [pc, #36]	; (8020a88 <lv_mem_buf_get+0x154>)
 8020a62:	68ba      	ldr	r2, [r7, #8]
 8020a64:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            MEM_TRACE("allocated (buffer id: %d, address: %p)", i, LV_GC_ROOT(lv_mem_buf[i]).p);
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8020a68:	7b7b      	ldrb	r3, [r7, #13]
 8020a6a:	4a07      	ldr	r2, [pc, #28]	; (8020a88 <lv_mem_buf_get+0x154>)
 8020a6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020a70:	e006      	b.n	8020a80 <lv_mem_buf_get+0x14c>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020a72:	7b7b      	ldrb	r3, [r7, #13]
 8020a74:	3301      	adds	r3, #1
 8020a76:	737b      	strb	r3, [r7, #13]
 8020a78:	7b7b      	ldrb	r3, [r7, #13]
 8020a7a:	2b0f      	cmp	r3, #15
 8020a7c:	d9c3      	bls.n	8020a06 <lv_mem_buf_get+0xd2>
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8020a7e:	e7fe      	b.n	8020a7e <lv_mem_buf_get+0x14a>
    return NULL;
}
 8020a80:	4618      	mov	r0, r3
 8020a82:	3710      	adds	r7, #16
 8020a84:	46bd      	mov	sp, r7
 8020a86:	bd80      	pop	{r7, pc}
 8020a88:	200008cc 	.word	0x200008cc

08020a8c <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 8020a8c:	b480      	push	{r7}
 8020a8e:	b085      	sub	sp, #20
 8020a90:	af00      	add	r7, sp, #0
 8020a92:	6078      	str	r0, [r7, #4]
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020a94:	2300      	movs	r3, #0
 8020a96:	73fb      	strb	r3, [r7, #15]
 8020a98:	e012      	b.n	8020ac0 <lv_mem_buf_release+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8020a9a:	7bfb      	ldrb	r3, [r7, #15]
 8020a9c:	4a0c      	ldr	r2, [pc, #48]	; (8020ad0 <lv_mem_buf_release+0x44>)
 8020a9e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020aa2:	687a      	ldr	r2, [r7, #4]
 8020aa4:	429a      	cmp	r2, r3
 8020aa6:	d108      	bne.n	8020aba <lv_mem_buf_release+0x2e>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8020aa8:	7bfb      	ldrb	r3, [r7, #15]
 8020aaa:	4a09      	ldr	r2, [pc, #36]	; (8020ad0 <lv_mem_buf_release+0x44>)
 8020aac:	00db      	lsls	r3, r3, #3
 8020aae:	4413      	add	r3, r2
 8020ab0:	799a      	ldrb	r2, [r3, #6]
 8020ab2:	f36f 0200 	bfc	r2, #0, #1
 8020ab6:	719a      	strb	r2, [r3, #6]
            return;
 8020ab8:	e005      	b.n	8020ac6 <lv_mem_buf_release+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020aba:	7bfb      	ldrb	r3, [r7, #15]
 8020abc:	3301      	adds	r3, #1
 8020abe:	73fb      	strb	r3, [r7, #15]
 8020ac0:	7bfb      	ldrb	r3, [r7, #15]
 8020ac2:	2b0f      	cmp	r3, #15
 8020ac4:	d9e9      	bls.n	8020a9a <lv_mem_buf_release+0xe>
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 8020ac6:	3714      	adds	r7, #20
 8020ac8:	46bd      	mov	sp, r7
 8020aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ace:	4770      	bx	lr
 8020ad0:	200008cc 	.word	0x200008cc

08020ad4 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b082      	sub	sp, #8
 8020ad8:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020ada:	2300      	movs	r3, #0
 8020adc:	71fb      	strb	r3, [r7, #7]
 8020ade:	e022      	b.n	8020b26 <lv_mem_buf_free_all+0x52>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8020ae0:	79fb      	ldrb	r3, [r7, #7]
 8020ae2:	4a15      	ldr	r2, [pc, #84]	; (8020b38 <lv_mem_buf_free_all+0x64>)
 8020ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d019      	beq.n	8020b20 <lv_mem_buf_free_all+0x4c>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8020aec:	79fb      	ldrb	r3, [r7, #7]
 8020aee:	4a12      	ldr	r2, [pc, #72]	; (8020b38 <lv_mem_buf_free_all+0x64>)
 8020af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020af4:	4618      	mov	r0, r3
 8020af6:	f7ff fec3 	bl	8020880 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8020afa:	79fb      	ldrb	r3, [r7, #7]
 8020afc:	4a0e      	ldr	r2, [pc, #56]	; (8020b38 <lv_mem_buf_free_all+0x64>)
 8020afe:	2100      	movs	r1, #0
 8020b00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8020b04:	79fb      	ldrb	r3, [r7, #7]
 8020b06:	4a0c      	ldr	r2, [pc, #48]	; (8020b38 <lv_mem_buf_free_all+0x64>)
 8020b08:	00db      	lsls	r3, r3, #3
 8020b0a:	4413      	add	r3, r2
 8020b0c:	799a      	ldrb	r2, [r3, #6]
 8020b0e:	f36f 0200 	bfc	r2, #0, #1
 8020b12:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8020b14:	79fb      	ldrb	r3, [r7, #7]
 8020b16:	4a08      	ldr	r2, [pc, #32]	; (8020b38 <lv_mem_buf_free_all+0x64>)
 8020b18:	00db      	lsls	r3, r3, #3
 8020b1a:	4413      	add	r3, r2
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8020b20:	79fb      	ldrb	r3, [r7, #7]
 8020b22:	3301      	adds	r3, #1
 8020b24:	71fb      	strb	r3, [r7, #7]
 8020b26:	79fb      	ldrb	r3, [r7, #7]
 8020b28:	2b0f      	cmp	r3, #15
 8020b2a:	d9d9      	bls.n	8020ae0 <lv_mem_buf_free_all+0xc>
        }
    }
}
 8020b2c:	bf00      	nop
 8020b2e:	bf00      	nop
 8020b30:	3708      	adds	r7, #8
 8020b32:	46bd      	mov	sp, r7
 8020b34:	bd80      	pop	{r7, pc}
 8020b36:	bf00      	nop
 8020b38:	200008cc 	.word	0x200008cc

08020b3c <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 8020b3c:	b480      	push	{r7}
 8020b3e:	b08b      	sub	sp, #44	; 0x2c
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	60f8      	str	r0, [r7, #12]
 8020b44:	60b9      	str	r1, [r7, #8]
 8020b46:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 8020b48:	68fb      	ldr	r3, [r7, #12]
 8020b4a:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 8020b4c:	68bb      	ldr	r3, [r7, #8]
 8020b4e:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8020b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b52:	f003 0303 	and.w	r3, r3, #3
 8020b56:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8020b58:	6a3b      	ldr	r3, [r7, #32]
 8020b5a:	f003 0303 	and.w	r3, r3, #3
 8020b5e:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 8020b60:	693a      	ldr	r2, [r7, #16]
 8020b62:	69fb      	ldr	r3, [r7, #28]
 8020b64:	429a      	cmp	r2, r3
 8020b66:	f000 815b 	beq.w	8020e20 <lv_memcpy+0x2e4>
        while(len > 32) {
 8020b6a:	e142      	b.n	8020df2 <lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 8020b6c:	6a3b      	ldr	r3, [r7, #32]
 8020b6e:	781a      	ldrb	r2, [r3, #0]
 8020b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b72:	701a      	strb	r2, [r3, #0]
 8020b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b76:	3301      	adds	r3, #1
 8020b78:	627b      	str	r3, [r7, #36]	; 0x24
 8020b7a:	6a3b      	ldr	r3, [r7, #32]
 8020b7c:	3301      	adds	r3, #1
 8020b7e:	623b      	str	r3, [r7, #32]
 8020b80:	6a3b      	ldr	r3, [r7, #32]
 8020b82:	781a      	ldrb	r2, [r3, #0]
 8020b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b86:	701a      	strb	r2, [r3, #0]
 8020b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b8a:	3301      	adds	r3, #1
 8020b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8020b8e:	6a3b      	ldr	r3, [r7, #32]
 8020b90:	3301      	adds	r3, #1
 8020b92:	623b      	str	r3, [r7, #32]
 8020b94:	6a3b      	ldr	r3, [r7, #32]
 8020b96:	781a      	ldrb	r2, [r3, #0]
 8020b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b9a:	701a      	strb	r2, [r3, #0]
 8020b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b9e:	3301      	adds	r3, #1
 8020ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8020ba2:	6a3b      	ldr	r3, [r7, #32]
 8020ba4:	3301      	adds	r3, #1
 8020ba6:	623b      	str	r3, [r7, #32]
 8020ba8:	6a3b      	ldr	r3, [r7, #32]
 8020baa:	781a      	ldrb	r2, [r3, #0]
 8020bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bae:	701a      	strb	r2, [r3, #0]
 8020bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bb2:	3301      	adds	r3, #1
 8020bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8020bb6:	6a3b      	ldr	r3, [r7, #32]
 8020bb8:	3301      	adds	r3, #1
 8020bba:	623b      	str	r3, [r7, #32]
 8020bbc:	6a3b      	ldr	r3, [r7, #32]
 8020bbe:	781a      	ldrb	r2, [r3, #0]
 8020bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bc2:	701a      	strb	r2, [r3, #0]
 8020bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bc6:	3301      	adds	r3, #1
 8020bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8020bca:	6a3b      	ldr	r3, [r7, #32]
 8020bcc:	3301      	adds	r3, #1
 8020bce:	623b      	str	r3, [r7, #32]
 8020bd0:	6a3b      	ldr	r3, [r7, #32]
 8020bd2:	781a      	ldrb	r2, [r3, #0]
 8020bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bd6:	701a      	strb	r2, [r3, #0]
 8020bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bda:	3301      	adds	r3, #1
 8020bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8020bde:	6a3b      	ldr	r3, [r7, #32]
 8020be0:	3301      	adds	r3, #1
 8020be2:	623b      	str	r3, [r7, #32]
 8020be4:	6a3b      	ldr	r3, [r7, #32]
 8020be6:	781a      	ldrb	r2, [r3, #0]
 8020be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bea:	701a      	strb	r2, [r3, #0]
 8020bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bee:	3301      	adds	r3, #1
 8020bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8020bf2:	6a3b      	ldr	r3, [r7, #32]
 8020bf4:	3301      	adds	r3, #1
 8020bf6:	623b      	str	r3, [r7, #32]
 8020bf8:	6a3b      	ldr	r3, [r7, #32]
 8020bfa:	781a      	ldrb	r2, [r3, #0]
 8020bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bfe:	701a      	strb	r2, [r3, #0]
 8020c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c02:	3301      	adds	r3, #1
 8020c04:	627b      	str	r3, [r7, #36]	; 0x24
 8020c06:	6a3b      	ldr	r3, [r7, #32]
 8020c08:	3301      	adds	r3, #1
 8020c0a:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8020c0c:	6a3b      	ldr	r3, [r7, #32]
 8020c0e:	781a      	ldrb	r2, [r3, #0]
 8020c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c12:	701a      	strb	r2, [r3, #0]
 8020c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c16:	3301      	adds	r3, #1
 8020c18:	627b      	str	r3, [r7, #36]	; 0x24
 8020c1a:	6a3b      	ldr	r3, [r7, #32]
 8020c1c:	3301      	adds	r3, #1
 8020c1e:	623b      	str	r3, [r7, #32]
 8020c20:	6a3b      	ldr	r3, [r7, #32]
 8020c22:	781a      	ldrb	r2, [r3, #0]
 8020c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c26:	701a      	strb	r2, [r3, #0]
 8020c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c2a:	3301      	adds	r3, #1
 8020c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8020c2e:	6a3b      	ldr	r3, [r7, #32]
 8020c30:	3301      	adds	r3, #1
 8020c32:	623b      	str	r3, [r7, #32]
 8020c34:	6a3b      	ldr	r3, [r7, #32]
 8020c36:	781a      	ldrb	r2, [r3, #0]
 8020c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c3a:	701a      	strb	r2, [r3, #0]
 8020c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c3e:	3301      	adds	r3, #1
 8020c40:	627b      	str	r3, [r7, #36]	; 0x24
 8020c42:	6a3b      	ldr	r3, [r7, #32]
 8020c44:	3301      	adds	r3, #1
 8020c46:	623b      	str	r3, [r7, #32]
 8020c48:	6a3b      	ldr	r3, [r7, #32]
 8020c4a:	781a      	ldrb	r2, [r3, #0]
 8020c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c4e:	701a      	strb	r2, [r3, #0]
 8020c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c52:	3301      	adds	r3, #1
 8020c54:	627b      	str	r3, [r7, #36]	; 0x24
 8020c56:	6a3b      	ldr	r3, [r7, #32]
 8020c58:	3301      	adds	r3, #1
 8020c5a:	623b      	str	r3, [r7, #32]
 8020c5c:	6a3b      	ldr	r3, [r7, #32]
 8020c5e:	781a      	ldrb	r2, [r3, #0]
 8020c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c62:	701a      	strb	r2, [r3, #0]
 8020c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c66:	3301      	adds	r3, #1
 8020c68:	627b      	str	r3, [r7, #36]	; 0x24
 8020c6a:	6a3b      	ldr	r3, [r7, #32]
 8020c6c:	3301      	adds	r3, #1
 8020c6e:	623b      	str	r3, [r7, #32]
 8020c70:	6a3b      	ldr	r3, [r7, #32]
 8020c72:	781a      	ldrb	r2, [r3, #0]
 8020c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c76:	701a      	strb	r2, [r3, #0]
 8020c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c7a:	3301      	adds	r3, #1
 8020c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8020c7e:	6a3b      	ldr	r3, [r7, #32]
 8020c80:	3301      	adds	r3, #1
 8020c82:	623b      	str	r3, [r7, #32]
 8020c84:	6a3b      	ldr	r3, [r7, #32]
 8020c86:	781a      	ldrb	r2, [r3, #0]
 8020c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c8a:	701a      	strb	r2, [r3, #0]
 8020c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c8e:	3301      	adds	r3, #1
 8020c90:	627b      	str	r3, [r7, #36]	; 0x24
 8020c92:	6a3b      	ldr	r3, [r7, #32]
 8020c94:	3301      	adds	r3, #1
 8020c96:	623b      	str	r3, [r7, #32]
 8020c98:	6a3b      	ldr	r3, [r7, #32]
 8020c9a:	781a      	ldrb	r2, [r3, #0]
 8020c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c9e:	701a      	strb	r2, [r3, #0]
 8020ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ca2:	3301      	adds	r3, #1
 8020ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8020ca6:	6a3b      	ldr	r3, [r7, #32]
 8020ca8:	3301      	adds	r3, #1
 8020caa:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8020cac:	6a3b      	ldr	r3, [r7, #32]
 8020cae:	781a      	ldrb	r2, [r3, #0]
 8020cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cb2:	701a      	strb	r2, [r3, #0]
 8020cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cb6:	3301      	adds	r3, #1
 8020cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8020cba:	6a3b      	ldr	r3, [r7, #32]
 8020cbc:	3301      	adds	r3, #1
 8020cbe:	623b      	str	r3, [r7, #32]
 8020cc0:	6a3b      	ldr	r3, [r7, #32]
 8020cc2:	781a      	ldrb	r2, [r3, #0]
 8020cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cc6:	701a      	strb	r2, [r3, #0]
 8020cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cca:	3301      	adds	r3, #1
 8020ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8020cce:	6a3b      	ldr	r3, [r7, #32]
 8020cd0:	3301      	adds	r3, #1
 8020cd2:	623b      	str	r3, [r7, #32]
 8020cd4:	6a3b      	ldr	r3, [r7, #32]
 8020cd6:	781a      	ldrb	r2, [r3, #0]
 8020cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cda:	701a      	strb	r2, [r3, #0]
 8020cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cde:	3301      	adds	r3, #1
 8020ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8020ce2:	6a3b      	ldr	r3, [r7, #32]
 8020ce4:	3301      	adds	r3, #1
 8020ce6:	623b      	str	r3, [r7, #32]
 8020ce8:	6a3b      	ldr	r3, [r7, #32]
 8020cea:	781a      	ldrb	r2, [r3, #0]
 8020cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cee:	701a      	strb	r2, [r3, #0]
 8020cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cf2:	3301      	adds	r3, #1
 8020cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8020cf6:	6a3b      	ldr	r3, [r7, #32]
 8020cf8:	3301      	adds	r3, #1
 8020cfa:	623b      	str	r3, [r7, #32]
 8020cfc:	6a3b      	ldr	r3, [r7, #32]
 8020cfe:	781a      	ldrb	r2, [r3, #0]
 8020d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d02:	701a      	strb	r2, [r3, #0]
 8020d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d06:	3301      	adds	r3, #1
 8020d08:	627b      	str	r3, [r7, #36]	; 0x24
 8020d0a:	6a3b      	ldr	r3, [r7, #32]
 8020d0c:	3301      	adds	r3, #1
 8020d0e:	623b      	str	r3, [r7, #32]
 8020d10:	6a3b      	ldr	r3, [r7, #32]
 8020d12:	781a      	ldrb	r2, [r3, #0]
 8020d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d16:	701a      	strb	r2, [r3, #0]
 8020d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d1a:	3301      	adds	r3, #1
 8020d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8020d1e:	6a3b      	ldr	r3, [r7, #32]
 8020d20:	3301      	adds	r3, #1
 8020d22:	623b      	str	r3, [r7, #32]
 8020d24:	6a3b      	ldr	r3, [r7, #32]
 8020d26:	781a      	ldrb	r2, [r3, #0]
 8020d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d2a:	701a      	strb	r2, [r3, #0]
 8020d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d2e:	3301      	adds	r3, #1
 8020d30:	627b      	str	r3, [r7, #36]	; 0x24
 8020d32:	6a3b      	ldr	r3, [r7, #32]
 8020d34:	3301      	adds	r3, #1
 8020d36:	623b      	str	r3, [r7, #32]
 8020d38:	6a3b      	ldr	r3, [r7, #32]
 8020d3a:	781a      	ldrb	r2, [r3, #0]
 8020d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d3e:	701a      	strb	r2, [r3, #0]
 8020d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d42:	3301      	adds	r3, #1
 8020d44:	627b      	str	r3, [r7, #36]	; 0x24
 8020d46:	6a3b      	ldr	r3, [r7, #32]
 8020d48:	3301      	adds	r3, #1
 8020d4a:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8020d4c:	6a3b      	ldr	r3, [r7, #32]
 8020d4e:	781a      	ldrb	r2, [r3, #0]
 8020d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d52:	701a      	strb	r2, [r3, #0]
 8020d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d56:	3301      	adds	r3, #1
 8020d58:	627b      	str	r3, [r7, #36]	; 0x24
 8020d5a:	6a3b      	ldr	r3, [r7, #32]
 8020d5c:	3301      	adds	r3, #1
 8020d5e:	623b      	str	r3, [r7, #32]
 8020d60:	6a3b      	ldr	r3, [r7, #32]
 8020d62:	781a      	ldrb	r2, [r3, #0]
 8020d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d66:	701a      	strb	r2, [r3, #0]
 8020d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d6a:	3301      	adds	r3, #1
 8020d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8020d6e:	6a3b      	ldr	r3, [r7, #32]
 8020d70:	3301      	adds	r3, #1
 8020d72:	623b      	str	r3, [r7, #32]
 8020d74:	6a3b      	ldr	r3, [r7, #32]
 8020d76:	781a      	ldrb	r2, [r3, #0]
 8020d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d7a:	701a      	strb	r2, [r3, #0]
 8020d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d7e:	3301      	adds	r3, #1
 8020d80:	627b      	str	r3, [r7, #36]	; 0x24
 8020d82:	6a3b      	ldr	r3, [r7, #32]
 8020d84:	3301      	adds	r3, #1
 8020d86:	623b      	str	r3, [r7, #32]
 8020d88:	6a3b      	ldr	r3, [r7, #32]
 8020d8a:	781a      	ldrb	r2, [r3, #0]
 8020d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d8e:	701a      	strb	r2, [r3, #0]
 8020d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d92:	3301      	adds	r3, #1
 8020d94:	627b      	str	r3, [r7, #36]	; 0x24
 8020d96:	6a3b      	ldr	r3, [r7, #32]
 8020d98:	3301      	adds	r3, #1
 8020d9a:	623b      	str	r3, [r7, #32]
 8020d9c:	6a3b      	ldr	r3, [r7, #32]
 8020d9e:	781a      	ldrb	r2, [r3, #0]
 8020da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020da2:	701a      	strb	r2, [r3, #0]
 8020da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020da6:	3301      	adds	r3, #1
 8020da8:	627b      	str	r3, [r7, #36]	; 0x24
 8020daa:	6a3b      	ldr	r3, [r7, #32]
 8020dac:	3301      	adds	r3, #1
 8020dae:	623b      	str	r3, [r7, #32]
 8020db0:	6a3b      	ldr	r3, [r7, #32]
 8020db2:	781a      	ldrb	r2, [r3, #0]
 8020db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020db6:	701a      	strb	r2, [r3, #0]
 8020db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dba:	3301      	adds	r3, #1
 8020dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8020dbe:	6a3b      	ldr	r3, [r7, #32]
 8020dc0:	3301      	adds	r3, #1
 8020dc2:	623b      	str	r3, [r7, #32]
 8020dc4:	6a3b      	ldr	r3, [r7, #32]
 8020dc6:	781a      	ldrb	r2, [r3, #0]
 8020dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dca:	701a      	strb	r2, [r3, #0]
 8020dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dce:	3301      	adds	r3, #1
 8020dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8020dd2:	6a3b      	ldr	r3, [r7, #32]
 8020dd4:	3301      	adds	r3, #1
 8020dd6:	623b      	str	r3, [r7, #32]
 8020dd8:	6a3b      	ldr	r3, [r7, #32]
 8020dda:	781a      	ldrb	r2, [r3, #0]
 8020ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dde:	701a      	strb	r2, [r3, #0]
 8020de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020de2:	3301      	adds	r3, #1
 8020de4:	627b      	str	r3, [r7, #36]	; 0x24
 8020de6:	6a3b      	ldr	r3, [r7, #32]
 8020de8:	3301      	adds	r3, #1
 8020dea:	623b      	str	r3, [r7, #32]
            len -= 32;
 8020dec:	687b      	ldr	r3, [r7, #4]
 8020dee:	3b20      	subs	r3, #32
 8020df0:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 8020df2:	687b      	ldr	r3, [r7, #4]
 8020df4:	2b20      	cmp	r3, #32
 8020df6:	f63f aeb9 	bhi.w	8020b6c <lv_memcpy+0x30>
        }
        while(len) {
 8020dfa:	e00c      	b.n	8020e16 <lv_memcpy+0x2da>
            COPY8
 8020dfc:	6a3b      	ldr	r3, [r7, #32]
 8020dfe:	781a      	ldrb	r2, [r3, #0]
 8020e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e02:	701a      	strb	r2, [r3, #0]
 8020e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e06:	3301      	adds	r3, #1
 8020e08:	627b      	str	r3, [r7, #36]	; 0x24
 8020e0a:	6a3b      	ldr	r3, [r7, #32]
 8020e0c:	3301      	adds	r3, #1
 8020e0e:	623b      	str	r3, [r7, #32]
            len--;
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	3b01      	subs	r3, #1
 8020e14:	607b      	str	r3, [r7, #4]
        while(len) {
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d1ef      	bne.n	8020dfc <lv_memcpy+0x2c0>
        }
        return dst;
 8020e1c:	68fb      	ldr	r3, [r7, #12]
 8020e1e:	e09f      	b.n	8020f60 <lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 8020e20:	69fb      	ldr	r3, [r7, #28]
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d01a      	beq.n	8020e5c <lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 8020e26:	69fb      	ldr	r3, [r7, #28]
 8020e28:	f1c3 0304 	rsb	r3, r3, #4
 8020e2c:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 8020e2e:	e00f      	b.n	8020e50 <lv_memcpy+0x314>
            COPY8;
 8020e30:	6a3b      	ldr	r3, [r7, #32]
 8020e32:	781a      	ldrb	r2, [r3, #0]
 8020e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e36:	701a      	strb	r2, [r3, #0]
 8020e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e3a:	3301      	adds	r3, #1
 8020e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8020e3e:	6a3b      	ldr	r3, [r7, #32]
 8020e40:	3301      	adds	r3, #1
 8020e42:	623b      	str	r3, [r7, #32]
            d_align--;
 8020e44:	69fb      	ldr	r3, [r7, #28]
 8020e46:	3b01      	subs	r3, #1
 8020e48:	61fb      	str	r3, [r7, #28]
            len--;
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	3b01      	subs	r3, #1
 8020e4e:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 8020e50:	69fb      	ldr	r3, [r7, #28]
 8020e52:	2b00      	cmp	r3, #0
 8020e54:	d002      	beq.n	8020e5c <lv_memcpy+0x320>
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d1e9      	bne.n	8020e30 <lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 8020e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e5e:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 8020e60:	6a3b      	ldr	r3, [r7, #32]
 8020e62:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 8020e64:	e052      	b.n	8020f0c <lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 8020e66:	697b      	ldr	r3, [r7, #20]
 8020e68:	681a      	ldr	r2, [r3, #0]
 8020e6a:	69bb      	ldr	r3, [r7, #24]
 8020e6c:	601a      	str	r2, [r3, #0]
 8020e6e:	69bb      	ldr	r3, [r7, #24]
 8020e70:	3304      	adds	r3, #4
 8020e72:	61bb      	str	r3, [r7, #24]
 8020e74:	697b      	ldr	r3, [r7, #20]
 8020e76:	3304      	adds	r3, #4
 8020e78:	617b      	str	r3, [r7, #20]
 8020e7a:	697b      	ldr	r3, [r7, #20]
 8020e7c:	681a      	ldr	r2, [r3, #0]
 8020e7e:	69bb      	ldr	r3, [r7, #24]
 8020e80:	601a      	str	r2, [r3, #0]
 8020e82:	69bb      	ldr	r3, [r7, #24]
 8020e84:	3304      	adds	r3, #4
 8020e86:	61bb      	str	r3, [r7, #24]
 8020e88:	697b      	ldr	r3, [r7, #20]
 8020e8a:	3304      	adds	r3, #4
 8020e8c:	617b      	str	r3, [r7, #20]
 8020e8e:	697b      	ldr	r3, [r7, #20]
 8020e90:	681a      	ldr	r2, [r3, #0]
 8020e92:	69bb      	ldr	r3, [r7, #24]
 8020e94:	601a      	str	r2, [r3, #0]
 8020e96:	69bb      	ldr	r3, [r7, #24]
 8020e98:	3304      	adds	r3, #4
 8020e9a:	61bb      	str	r3, [r7, #24]
 8020e9c:	697b      	ldr	r3, [r7, #20]
 8020e9e:	3304      	adds	r3, #4
 8020ea0:	617b      	str	r3, [r7, #20]
 8020ea2:	697b      	ldr	r3, [r7, #20]
 8020ea4:	681a      	ldr	r2, [r3, #0]
 8020ea6:	69bb      	ldr	r3, [r7, #24]
 8020ea8:	601a      	str	r2, [r3, #0]
 8020eaa:	69bb      	ldr	r3, [r7, #24]
 8020eac:	3304      	adds	r3, #4
 8020eae:	61bb      	str	r3, [r7, #24]
 8020eb0:	697b      	ldr	r3, [r7, #20]
 8020eb2:	3304      	adds	r3, #4
 8020eb4:	617b      	str	r3, [r7, #20]
 8020eb6:	697b      	ldr	r3, [r7, #20]
 8020eb8:	681a      	ldr	r2, [r3, #0]
 8020eba:	69bb      	ldr	r3, [r7, #24]
 8020ebc:	601a      	str	r2, [r3, #0]
 8020ebe:	69bb      	ldr	r3, [r7, #24]
 8020ec0:	3304      	adds	r3, #4
 8020ec2:	61bb      	str	r3, [r7, #24]
 8020ec4:	697b      	ldr	r3, [r7, #20]
 8020ec6:	3304      	adds	r3, #4
 8020ec8:	617b      	str	r3, [r7, #20]
 8020eca:	697b      	ldr	r3, [r7, #20]
 8020ecc:	681a      	ldr	r2, [r3, #0]
 8020ece:	69bb      	ldr	r3, [r7, #24]
 8020ed0:	601a      	str	r2, [r3, #0]
 8020ed2:	69bb      	ldr	r3, [r7, #24]
 8020ed4:	3304      	adds	r3, #4
 8020ed6:	61bb      	str	r3, [r7, #24]
 8020ed8:	697b      	ldr	r3, [r7, #20]
 8020eda:	3304      	adds	r3, #4
 8020edc:	617b      	str	r3, [r7, #20]
 8020ede:	697b      	ldr	r3, [r7, #20]
 8020ee0:	681a      	ldr	r2, [r3, #0]
 8020ee2:	69bb      	ldr	r3, [r7, #24]
 8020ee4:	601a      	str	r2, [r3, #0]
 8020ee6:	69bb      	ldr	r3, [r7, #24]
 8020ee8:	3304      	adds	r3, #4
 8020eea:	61bb      	str	r3, [r7, #24]
 8020eec:	697b      	ldr	r3, [r7, #20]
 8020eee:	3304      	adds	r3, #4
 8020ef0:	617b      	str	r3, [r7, #20]
 8020ef2:	697b      	ldr	r3, [r7, #20]
 8020ef4:	681a      	ldr	r2, [r3, #0]
 8020ef6:	69bb      	ldr	r3, [r7, #24]
 8020ef8:	601a      	str	r2, [r3, #0]
 8020efa:	69bb      	ldr	r3, [r7, #24]
 8020efc:	3304      	adds	r3, #4
 8020efe:	61bb      	str	r3, [r7, #24]
 8020f00:	697b      	ldr	r3, [r7, #20]
 8020f02:	3304      	adds	r3, #4
 8020f04:	617b      	str	r3, [r7, #20]
        len -= 32;
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	3b20      	subs	r3, #32
 8020f0a:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	2b20      	cmp	r3, #32
 8020f10:	d8a9      	bhi.n	8020e66 <lv_memcpy+0x32a>
    }

    while(len > 4) {
 8020f12:	e00c      	b.n	8020f2e <lv_memcpy+0x3f2>
        COPY32;
 8020f14:	697b      	ldr	r3, [r7, #20]
 8020f16:	681a      	ldr	r2, [r3, #0]
 8020f18:	69bb      	ldr	r3, [r7, #24]
 8020f1a:	601a      	str	r2, [r3, #0]
 8020f1c:	69bb      	ldr	r3, [r7, #24]
 8020f1e:	3304      	adds	r3, #4
 8020f20:	61bb      	str	r3, [r7, #24]
 8020f22:	697b      	ldr	r3, [r7, #20]
 8020f24:	3304      	adds	r3, #4
 8020f26:	617b      	str	r3, [r7, #20]
        len -= 4;
 8020f28:	687b      	ldr	r3, [r7, #4]
 8020f2a:	3b04      	subs	r3, #4
 8020f2c:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	2b04      	cmp	r3, #4
 8020f32:	d8ef      	bhi.n	8020f14 <lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 8020f34:	69bb      	ldr	r3, [r7, #24]
 8020f36:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 8020f38:	697b      	ldr	r3, [r7, #20]
 8020f3a:	623b      	str	r3, [r7, #32]
    while(len) {
 8020f3c:	e00c      	b.n	8020f58 <lv_memcpy+0x41c>
        COPY8
 8020f3e:	6a3b      	ldr	r3, [r7, #32]
 8020f40:	781a      	ldrb	r2, [r3, #0]
 8020f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f44:	701a      	strb	r2, [r3, #0]
 8020f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f48:	3301      	adds	r3, #1
 8020f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8020f4c:	6a3b      	ldr	r3, [r7, #32]
 8020f4e:	3301      	adds	r3, #1
 8020f50:	623b      	str	r3, [r7, #32]
        len--;
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	3b01      	subs	r3, #1
 8020f56:	607b      	str	r3, [r7, #4]
    while(len) {
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d1ef      	bne.n	8020f3e <lv_memcpy+0x402>
    }

    return dst;
 8020f5e:	68fb      	ldr	r3, [r7, #12]
}
 8020f60:	4618      	mov	r0, r3
 8020f62:	372c      	adds	r7, #44	; 0x2c
 8020f64:	46bd      	mov	sp, r7
 8020f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f6a:	4770      	bx	lr

08020f6c <lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset(void * dst, uint8_t v, size_t len)
{
 8020f6c:	b480      	push	{r7}
 8020f6e:	b089      	sub	sp, #36	; 0x24
 8020f70:	af00      	add	r7, sp, #0
 8020f72:	60f8      	str	r0, [r7, #12]
 8020f74:	460b      	mov	r3, r1
 8020f76:	607a      	str	r2, [r7, #4]
 8020f78:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *)dst;
 8020f7a:	68fb      	ldr	r3, [r7, #12]
 8020f7c:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8020f7e:	69fb      	ldr	r3, [r7, #28]
 8020f80:	f003 0303 	and.w	r3, r3, #3
 8020f84:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 8020f86:	69bb      	ldr	r3, [r7, #24]
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	d016      	beq.n	8020fba <lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 8020f8c:	69bb      	ldr	r3, [r7, #24]
 8020f8e:	f1c3 0304 	rsb	r3, r3, #4
 8020f92:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 8020f94:	e00b      	b.n	8020fae <lv_memset+0x42>
            SET8(v);
 8020f96:	69fb      	ldr	r3, [r7, #28]
 8020f98:	7afa      	ldrb	r2, [r7, #11]
 8020f9a:	701a      	strb	r2, [r3, #0]
 8020f9c:	69fb      	ldr	r3, [r7, #28]
 8020f9e:	3301      	adds	r3, #1
 8020fa0:	61fb      	str	r3, [r7, #28]
            len--;
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	3b01      	subs	r3, #1
 8020fa6:	607b      	str	r3, [r7, #4]
            d_align--;
 8020fa8:	69bb      	ldr	r3, [r7, #24]
 8020faa:	3b01      	subs	r3, #1
 8020fac:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 8020fae:	69bb      	ldr	r3, [r7, #24]
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d002      	beq.n	8020fba <lv_memset+0x4e>
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d1ed      	bne.n	8020f96 <lv_memset+0x2a>
        }
    }

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 8020fba:	7afa      	ldrb	r2, [r7, #11]
 8020fbc:	7afb      	ldrb	r3, [r7, #11]
 8020fbe:	021b      	lsls	r3, r3, #8
 8020fc0:	441a      	add	r2, r3
 8020fc2:	7afb      	ldrb	r3, [r7, #11]
 8020fc4:	041b      	lsls	r3, r3, #16
 8020fc6:	441a      	add	r2, r3
 8020fc8:	7afb      	ldrb	r3, [r7, #11]
 8020fca:	061b      	lsls	r3, r3, #24
 8020fcc:	4413      	add	r3, r2
 8020fce:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 8020fd0:	69fb      	ldr	r3, [r7, #28]
 8020fd2:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 8020fd4:	e032      	b.n	802103c <lv_memset+0xd0>
        REPEAT8(SET32(v32));
 8020fd6:	697b      	ldr	r3, [r7, #20]
 8020fd8:	693a      	ldr	r2, [r7, #16]
 8020fda:	601a      	str	r2, [r3, #0]
 8020fdc:	697b      	ldr	r3, [r7, #20]
 8020fde:	3304      	adds	r3, #4
 8020fe0:	617b      	str	r3, [r7, #20]
 8020fe2:	697b      	ldr	r3, [r7, #20]
 8020fe4:	693a      	ldr	r2, [r7, #16]
 8020fe6:	601a      	str	r2, [r3, #0]
 8020fe8:	697b      	ldr	r3, [r7, #20]
 8020fea:	3304      	adds	r3, #4
 8020fec:	617b      	str	r3, [r7, #20]
 8020fee:	697b      	ldr	r3, [r7, #20]
 8020ff0:	693a      	ldr	r2, [r7, #16]
 8020ff2:	601a      	str	r2, [r3, #0]
 8020ff4:	697b      	ldr	r3, [r7, #20]
 8020ff6:	3304      	adds	r3, #4
 8020ff8:	617b      	str	r3, [r7, #20]
 8020ffa:	697b      	ldr	r3, [r7, #20]
 8020ffc:	693a      	ldr	r2, [r7, #16]
 8020ffe:	601a      	str	r2, [r3, #0]
 8021000:	697b      	ldr	r3, [r7, #20]
 8021002:	3304      	adds	r3, #4
 8021004:	617b      	str	r3, [r7, #20]
 8021006:	697b      	ldr	r3, [r7, #20]
 8021008:	693a      	ldr	r2, [r7, #16]
 802100a:	601a      	str	r2, [r3, #0]
 802100c:	697b      	ldr	r3, [r7, #20]
 802100e:	3304      	adds	r3, #4
 8021010:	617b      	str	r3, [r7, #20]
 8021012:	697b      	ldr	r3, [r7, #20]
 8021014:	693a      	ldr	r2, [r7, #16]
 8021016:	601a      	str	r2, [r3, #0]
 8021018:	697b      	ldr	r3, [r7, #20]
 802101a:	3304      	adds	r3, #4
 802101c:	617b      	str	r3, [r7, #20]
 802101e:	697b      	ldr	r3, [r7, #20]
 8021020:	693a      	ldr	r2, [r7, #16]
 8021022:	601a      	str	r2, [r3, #0]
 8021024:	697b      	ldr	r3, [r7, #20]
 8021026:	3304      	adds	r3, #4
 8021028:	617b      	str	r3, [r7, #20]
 802102a:	697b      	ldr	r3, [r7, #20]
 802102c:	693a      	ldr	r2, [r7, #16]
 802102e:	601a      	str	r2, [r3, #0]
 8021030:	697b      	ldr	r3, [r7, #20]
 8021032:	3304      	adds	r3, #4
 8021034:	617b      	str	r3, [r7, #20]
        len -= 32;
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	3b20      	subs	r3, #32
 802103a:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	2b20      	cmp	r3, #32
 8021040:	d8c9      	bhi.n	8020fd6 <lv_memset+0x6a>
    }

    while(len > 4) {
 8021042:	e008      	b.n	8021056 <lv_memset+0xea>
        SET32(v32);
 8021044:	697b      	ldr	r3, [r7, #20]
 8021046:	693a      	ldr	r2, [r7, #16]
 8021048:	601a      	str	r2, [r3, #0]
 802104a:	697b      	ldr	r3, [r7, #20]
 802104c:	3304      	adds	r3, #4
 802104e:	617b      	str	r3, [r7, #20]
        len -= 4;
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	3b04      	subs	r3, #4
 8021054:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 8021056:	687b      	ldr	r3, [r7, #4]
 8021058:	2b04      	cmp	r3, #4
 802105a:	d8f3      	bhi.n	8021044 <lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 802105c:	697b      	ldr	r3, [r7, #20]
 802105e:	61fb      	str	r3, [r7, #28]
    while(len) {
 8021060:	e008      	b.n	8021074 <lv_memset+0x108>
        SET8(v);
 8021062:	69fb      	ldr	r3, [r7, #28]
 8021064:	7afa      	ldrb	r2, [r7, #11]
 8021066:	701a      	strb	r2, [r3, #0]
 8021068:	69fb      	ldr	r3, [r7, #28]
 802106a:	3301      	adds	r3, #1
 802106c:	61fb      	str	r3, [r7, #28]
        len--;
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	3b01      	subs	r3, #1
 8021072:	607b      	str	r3, [r7, #4]
    while(len) {
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	2b00      	cmp	r3, #0
 8021078:	d1f3      	bne.n	8021062 <lv_memset+0xf6>
    }
}
 802107a:	bf00      	nop
 802107c:	bf00      	nop
 802107e:	3724      	adds	r7, #36	; 0x24
 8021080:	46bd      	mov	sp, r7
 8021082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021086:	4770      	bx	lr

08021088 <lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_00(void * dst, size_t len)
{
 8021088:	b480      	push	{r7}
 802108a:	b087      	sub	sp, #28
 802108c:	af00      	add	r7, sp, #0
 802108e:	6078      	str	r0, [r7, #4]
 8021090:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8021096:	697b      	ldr	r3, [r7, #20]
 8021098:	f003 0303 	and.w	r3, r3, #3
 802109c:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 802109e:	693b      	ldr	r3, [r7, #16]
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d016      	beq.n	80210d2 <lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 80210a4:	693b      	ldr	r3, [r7, #16]
 80210a6:	f1c3 0304 	rsb	r3, r3, #4
 80210aa:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 80210ac:	e00b      	b.n	80210c6 <lv_memset_00+0x3e>
            SET8(0);
 80210ae:	697b      	ldr	r3, [r7, #20]
 80210b0:	2200      	movs	r2, #0
 80210b2:	701a      	strb	r2, [r3, #0]
 80210b4:	697b      	ldr	r3, [r7, #20]
 80210b6:	3301      	adds	r3, #1
 80210b8:	617b      	str	r3, [r7, #20]
            len--;
 80210ba:	683b      	ldr	r3, [r7, #0]
 80210bc:	3b01      	subs	r3, #1
 80210be:	603b      	str	r3, [r7, #0]
            d_align--;
 80210c0:	693b      	ldr	r3, [r7, #16]
 80210c2:	3b01      	subs	r3, #1
 80210c4:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 80210c6:	693b      	ldr	r3, [r7, #16]
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d002      	beq.n	80210d2 <lv_memset_00+0x4a>
 80210cc:	683b      	ldr	r3, [r7, #0]
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	d1ed      	bne.n	80210ae <lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80210d2:	697b      	ldr	r3, [r7, #20]
 80210d4:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 80210d6:	e032      	b.n	802113e <lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 80210d8:	68fb      	ldr	r3, [r7, #12]
 80210da:	2200      	movs	r2, #0
 80210dc:	601a      	str	r2, [r3, #0]
 80210de:	68fb      	ldr	r3, [r7, #12]
 80210e0:	3304      	adds	r3, #4
 80210e2:	60fb      	str	r3, [r7, #12]
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	2200      	movs	r2, #0
 80210e8:	601a      	str	r2, [r3, #0]
 80210ea:	68fb      	ldr	r3, [r7, #12]
 80210ec:	3304      	adds	r3, #4
 80210ee:	60fb      	str	r3, [r7, #12]
 80210f0:	68fb      	ldr	r3, [r7, #12]
 80210f2:	2200      	movs	r2, #0
 80210f4:	601a      	str	r2, [r3, #0]
 80210f6:	68fb      	ldr	r3, [r7, #12]
 80210f8:	3304      	adds	r3, #4
 80210fa:	60fb      	str	r3, [r7, #12]
 80210fc:	68fb      	ldr	r3, [r7, #12]
 80210fe:	2200      	movs	r2, #0
 8021100:	601a      	str	r2, [r3, #0]
 8021102:	68fb      	ldr	r3, [r7, #12]
 8021104:	3304      	adds	r3, #4
 8021106:	60fb      	str	r3, [r7, #12]
 8021108:	68fb      	ldr	r3, [r7, #12]
 802110a:	2200      	movs	r2, #0
 802110c:	601a      	str	r2, [r3, #0]
 802110e:	68fb      	ldr	r3, [r7, #12]
 8021110:	3304      	adds	r3, #4
 8021112:	60fb      	str	r3, [r7, #12]
 8021114:	68fb      	ldr	r3, [r7, #12]
 8021116:	2200      	movs	r2, #0
 8021118:	601a      	str	r2, [r3, #0]
 802111a:	68fb      	ldr	r3, [r7, #12]
 802111c:	3304      	adds	r3, #4
 802111e:	60fb      	str	r3, [r7, #12]
 8021120:	68fb      	ldr	r3, [r7, #12]
 8021122:	2200      	movs	r2, #0
 8021124:	601a      	str	r2, [r3, #0]
 8021126:	68fb      	ldr	r3, [r7, #12]
 8021128:	3304      	adds	r3, #4
 802112a:	60fb      	str	r3, [r7, #12]
 802112c:	68fb      	ldr	r3, [r7, #12]
 802112e:	2200      	movs	r2, #0
 8021130:	601a      	str	r2, [r3, #0]
 8021132:	68fb      	ldr	r3, [r7, #12]
 8021134:	3304      	adds	r3, #4
 8021136:	60fb      	str	r3, [r7, #12]
        len -= 32;
 8021138:	683b      	ldr	r3, [r7, #0]
 802113a:	3b20      	subs	r3, #32
 802113c:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 802113e:	683b      	ldr	r3, [r7, #0]
 8021140:	2b20      	cmp	r3, #32
 8021142:	d8c9      	bhi.n	80210d8 <lv_memset_00+0x50>
    }

    while(len > 4) {
 8021144:	e008      	b.n	8021158 <lv_memset_00+0xd0>
        SET32(0);
 8021146:	68fb      	ldr	r3, [r7, #12]
 8021148:	2200      	movs	r2, #0
 802114a:	601a      	str	r2, [r3, #0]
 802114c:	68fb      	ldr	r3, [r7, #12]
 802114e:	3304      	adds	r3, #4
 8021150:	60fb      	str	r3, [r7, #12]
        len -= 4;
 8021152:	683b      	ldr	r3, [r7, #0]
 8021154:	3b04      	subs	r3, #4
 8021156:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 8021158:	683b      	ldr	r3, [r7, #0]
 802115a:	2b04      	cmp	r3, #4
 802115c:	d8f3      	bhi.n	8021146 <lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 802115e:	68fb      	ldr	r3, [r7, #12]
 8021160:	617b      	str	r3, [r7, #20]
    while(len) {
 8021162:	e008      	b.n	8021176 <lv_memset_00+0xee>
        SET8(0);
 8021164:	697b      	ldr	r3, [r7, #20]
 8021166:	2200      	movs	r2, #0
 8021168:	701a      	strb	r2, [r3, #0]
 802116a:	697b      	ldr	r3, [r7, #20]
 802116c:	3301      	adds	r3, #1
 802116e:	617b      	str	r3, [r7, #20]
        len--;
 8021170:	683b      	ldr	r3, [r7, #0]
 8021172:	3b01      	subs	r3, #1
 8021174:	603b      	str	r3, [r7, #0]
    while(len) {
 8021176:	683b      	ldr	r3, [r7, #0]
 8021178:	2b00      	cmp	r3, #0
 802117a:	d1f3      	bne.n	8021164 <lv_memset_00+0xdc>
    }
}
 802117c:	bf00      	nop
 802117e:	bf00      	nop
 8021180:	371c      	adds	r7, #28
 8021182:	46bd      	mov	sp, r7
 8021184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021188:	4770      	bx	lr

0802118a <lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_ff(void * dst, size_t len)
{
 802118a:	b480      	push	{r7}
 802118c:	b087      	sub	sp, #28
 802118e:	af00      	add	r7, sp, #0
 8021190:	6078      	str	r0, [r7, #4]
 8021192:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8021198:	697b      	ldr	r3, [r7, #20]
 802119a:	f003 0303 	and.w	r3, r3, #3
 802119e:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 80211a0:	693b      	ldr	r3, [r7, #16]
 80211a2:	2b00      	cmp	r3, #0
 80211a4:	d016      	beq.n	80211d4 <lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 80211a6:	693b      	ldr	r3, [r7, #16]
 80211a8:	f1c3 0304 	rsb	r3, r3, #4
 80211ac:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 80211ae:	e00b      	b.n	80211c8 <lv_memset_ff+0x3e>
            SET8(0xFF);
 80211b0:	697b      	ldr	r3, [r7, #20]
 80211b2:	22ff      	movs	r2, #255	; 0xff
 80211b4:	701a      	strb	r2, [r3, #0]
 80211b6:	697b      	ldr	r3, [r7, #20]
 80211b8:	3301      	adds	r3, #1
 80211ba:	617b      	str	r3, [r7, #20]
            len--;
 80211bc:	683b      	ldr	r3, [r7, #0]
 80211be:	3b01      	subs	r3, #1
 80211c0:	603b      	str	r3, [r7, #0]
            d_align--;
 80211c2:	693b      	ldr	r3, [r7, #16]
 80211c4:	3b01      	subs	r3, #1
 80211c6:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 80211c8:	693b      	ldr	r3, [r7, #16]
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d002      	beq.n	80211d4 <lv_memset_ff+0x4a>
 80211ce:	683b      	ldr	r3, [r7, #0]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d1ed      	bne.n	80211b0 <lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80211d4:	697b      	ldr	r3, [r7, #20]
 80211d6:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 80211d8:	e03a      	b.n	8021250 <lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 80211da:	68fb      	ldr	r3, [r7, #12]
 80211dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80211e0:	601a      	str	r2, [r3, #0]
 80211e2:	68fb      	ldr	r3, [r7, #12]
 80211e4:	3304      	adds	r3, #4
 80211e6:	60fb      	str	r3, [r7, #12]
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80211ee:	601a      	str	r2, [r3, #0]
 80211f0:	68fb      	ldr	r3, [r7, #12]
 80211f2:	3304      	adds	r3, #4
 80211f4:	60fb      	str	r3, [r7, #12]
 80211f6:	68fb      	ldr	r3, [r7, #12]
 80211f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80211fc:	601a      	str	r2, [r3, #0]
 80211fe:	68fb      	ldr	r3, [r7, #12]
 8021200:	3304      	adds	r3, #4
 8021202:	60fb      	str	r3, [r7, #12]
 8021204:	68fb      	ldr	r3, [r7, #12]
 8021206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802120a:	601a      	str	r2, [r3, #0]
 802120c:	68fb      	ldr	r3, [r7, #12]
 802120e:	3304      	adds	r3, #4
 8021210:	60fb      	str	r3, [r7, #12]
 8021212:	68fb      	ldr	r3, [r7, #12]
 8021214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021218:	601a      	str	r2, [r3, #0]
 802121a:	68fb      	ldr	r3, [r7, #12]
 802121c:	3304      	adds	r3, #4
 802121e:	60fb      	str	r3, [r7, #12]
 8021220:	68fb      	ldr	r3, [r7, #12]
 8021222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021226:	601a      	str	r2, [r3, #0]
 8021228:	68fb      	ldr	r3, [r7, #12]
 802122a:	3304      	adds	r3, #4
 802122c:	60fb      	str	r3, [r7, #12]
 802122e:	68fb      	ldr	r3, [r7, #12]
 8021230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021234:	601a      	str	r2, [r3, #0]
 8021236:	68fb      	ldr	r3, [r7, #12]
 8021238:	3304      	adds	r3, #4
 802123a:	60fb      	str	r3, [r7, #12]
 802123c:	68fb      	ldr	r3, [r7, #12]
 802123e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021242:	601a      	str	r2, [r3, #0]
 8021244:	68fb      	ldr	r3, [r7, #12]
 8021246:	3304      	adds	r3, #4
 8021248:	60fb      	str	r3, [r7, #12]
        len -= 32;
 802124a:	683b      	ldr	r3, [r7, #0]
 802124c:	3b20      	subs	r3, #32
 802124e:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 8021250:	683b      	ldr	r3, [r7, #0]
 8021252:	2b20      	cmp	r3, #32
 8021254:	d8c1      	bhi.n	80211da <lv_memset_ff+0x50>
    }

    while(len > 4) {
 8021256:	e009      	b.n	802126c <lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 8021258:	68fb      	ldr	r3, [r7, #12]
 802125a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802125e:	601a      	str	r2, [r3, #0]
 8021260:	68fb      	ldr	r3, [r7, #12]
 8021262:	3304      	adds	r3, #4
 8021264:	60fb      	str	r3, [r7, #12]
        len -= 4;
 8021266:	683b      	ldr	r3, [r7, #0]
 8021268:	3b04      	subs	r3, #4
 802126a:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 802126c:	683b      	ldr	r3, [r7, #0]
 802126e:	2b04      	cmp	r3, #4
 8021270:	d8f2      	bhi.n	8021258 <lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 8021272:	68fb      	ldr	r3, [r7, #12]
 8021274:	617b      	str	r3, [r7, #20]
    while(len) {
 8021276:	e008      	b.n	802128a <lv_memset_ff+0x100>
        SET8(0xFF);
 8021278:	697b      	ldr	r3, [r7, #20]
 802127a:	22ff      	movs	r2, #255	; 0xff
 802127c:	701a      	strb	r2, [r3, #0]
 802127e:	697b      	ldr	r3, [r7, #20]
 8021280:	3301      	adds	r3, #1
 8021282:	617b      	str	r3, [r7, #20]
        len--;
 8021284:	683b      	ldr	r3, [r7, #0]
 8021286:	3b01      	subs	r3, #1
 8021288:	603b      	str	r3, [r7, #0]
    while(len) {
 802128a:	683b      	ldr	r3, [r7, #0]
 802128c:	2b00      	cmp	r3, #0
 802128e:	d1f3      	bne.n	8021278 <lv_memset_ff+0xee>
    }
}
 8021290:	bf00      	nop
 8021292:	bf00      	nop
 8021294:	371c      	adds	r7, #28
 8021296:	46bd      	mov	sp, r7
 8021298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802129c:	4770      	bx	lr

0802129e <lv_color_make>:
{
 802129e:	b480      	push	{r7}
 80212a0:	b083      	sub	sp, #12
 80212a2:	af00      	add	r7, sp, #0
 80212a4:	4603      	mov	r3, r0
 80212a6:	71fb      	strb	r3, [r7, #7]
 80212a8:	460b      	mov	r3, r1
 80212aa:	71bb      	strb	r3, [r7, #6]
 80212ac:	4613      	mov	r3, r2
 80212ae:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80212b0:	797b      	ldrb	r3, [r7, #5]
 80212b2:	09db      	lsrs	r3, r3, #7
 80212b4:	b2da      	uxtb	r2, r3
 80212b6:	79bb      	ldrb	r3, [r7, #6]
 80212b8:	09db      	lsrs	r3, r3, #7
 80212ba:	b2db      	uxtb	r3, r3
 80212bc:	4313      	orrs	r3, r2
 80212be:	b2da      	uxtb	r2, r3
 80212c0:	79fb      	ldrb	r3, [r7, #7]
 80212c2:	09db      	lsrs	r3, r3, #7
 80212c4:	b2db      	uxtb	r3, r3
 80212c6:	4313      	orrs	r3, r2
 80212c8:	b2db      	uxtb	r3, r3
}
 80212ca:	4618      	mov	r0, r3
 80212cc:	370c      	adds	r7, #12
 80212ce:	46bd      	mov	sp, r7
 80212d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d4:	4770      	bx	lr

080212d6 <lv_color_white>:
{
 80212d6:	b580      	push	{r7, lr}
 80212d8:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 80212da:	22ff      	movs	r2, #255	; 0xff
 80212dc:	21ff      	movs	r1, #255	; 0xff
 80212de:	20ff      	movs	r0, #255	; 0xff
 80212e0:	f7ff ffdd 	bl	802129e <lv_color_make>
 80212e4:	4603      	mov	r3, r0
}
 80212e6:	4618      	mov	r0, r3
 80212e8:	bd80      	pop	{r7, pc}

080212ea <lv_color_black>:
{
 80212ea:	b580      	push	{r7, lr}
 80212ec:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80212ee:	2200      	movs	r2, #0
 80212f0:	2100      	movs	r1, #0
 80212f2:	2000      	movs	r0, #0
 80212f4:	f7ff ffd3 	bl	802129e <lv_color_make>
 80212f8:	4603      	mov	r3, r0
}
 80212fa:	4618      	mov	r0, r3
 80212fc:	bd80      	pop	{r7, pc}

080212fe <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 80212fe:	b580      	push	{r7, lr}
 8021300:	b08c      	sub	sp, #48	; 0x30
 8021302:	af00      	add	r7, sp, #0
 8021304:	60f8      	str	r0, [r7, #12]
 8021306:	460b      	mov	r3, r1
 8021308:	607a      	str	r2, [r7, #4]
 802130a:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 802130c:	68fb      	ldr	r3, [r7, #12]
 802130e:	891b      	ldrh	r3, [r3, #8]
 8021310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021314:	4293      	cmp	r3, r2
 8021316:	d137      	bne.n	8021388 <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8021318:	2300      	movs	r3, #0
 802131a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802131c:	e02c      	b.n	8021378 <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 802131e:	68fb      	ldr	r3, [r7, #12]
 8021320:	685a      	ldr	r2, [r3, #4]
 8021322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021324:	00db      	lsls	r3, r3, #3
 8021326:	4413      	add	r3, r2
 8021328:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 802132a:	697b      	ldr	r3, [r7, #20]
 802132c:	881b      	ldrh	r3, [r3, #0]
 802132e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8021332:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8021334:	8a7a      	ldrh	r2, [r7, #18]
 8021336:	897b      	ldrh	r3, [r7, #10]
 8021338:	429a      	cmp	r2, r3
 802133a:	d11a      	bne.n	8021372 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 802133c:	697b      	ldr	r3, [r7, #20]
 802133e:	881b      	ldrh	r3, [r3, #0]
 8021340:	b21b      	sxth	r3, r3
 8021342:	2b00      	cmp	r3, #0
 8021344:	da01      	bge.n	802134a <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 8021346:	2302      	movs	r3, #2
 8021348:	e098      	b.n	802147c <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 802134a:	697b      	ldr	r3, [r7, #20]
 802134c:	881b      	ldrh	r3, [r3, #0]
 802134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021352:	2b00      	cmp	r3, #0
 8021354:	d007      	beq.n	8021366 <lv_style_get_prop_inlined+0x68>
 8021356:	8a7b      	ldrh	r3, [r7, #18]
 8021358:	4618      	mov	r0, r3
 802135a:	f000 f9cd 	bl	80216f8 <lv_style_prop_get_default>
 802135e:	4602      	mov	r2, r0
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	601a      	str	r2, [r3, #0]
 8021364:	e003      	b.n	802136e <lv_style_get_prop_inlined+0x70>
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	697a      	ldr	r2, [r7, #20]
 802136a:	6852      	ldr	r2, [r2, #4]
 802136c:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 802136e:	2301      	movs	r3, #1
 8021370:	e084      	b.n	802147c <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8021372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021374:	3301      	adds	r3, #1
 8021376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021378:	68fb      	ldr	r3, [r7, #12]
 802137a:	7adb      	ldrb	r3, [r3, #11]
 802137c:	461a      	mov	r2, r3
 802137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021380:	4293      	cmp	r3, r2
 8021382:	d3cc      	bcc.n	802131e <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 8021384:	2300      	movs	r3, #0
 8021386:	e079      	b.n	802147c <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8021388:	68fb      	ldr	r3, [r7, #12]
 802138a:	7adb      	ldrb	r3, [r3, #11]
 802138c:	2b00      	cmp	r3, #0
 802138e:	d101      	bne.n	8021394 <lv_style_get_prop_inlined+0x96>
 8021390:	2300      	movs	r3, #0
 8021392:	e073      	b.n	802147c <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 8021394:	68fb      	ldr	r3, [r7, #12]
 8021396:	7adb      	ldrb	r3, [r3, #11]
 8021398:	2b01      	cmp	r3, #1
 802139a:	d948      	bls.n	802142e <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802139c:	68fb      	ldr	r3, [r7, #12]
 802139e:	685a      	ldr	r2, [r3, #4]
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	7adb      	ldrb	r3, [r3, #11]
 80213a4:	009b      	lsls	r3, r3, #2
 80213a6:	4413      	add	r3, r2
 80213a8:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 80213aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213ac:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80213ae:	2300      	movs	r3, #0
 80213b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80213b2:	e035      	b.n	8021420 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 80213b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213b6:	005b      	lsls	r3, r3, #1
 80213b8:	6a3a      	ldr	r2, [r7, #32]
 80213ba:	4413      	add	r3, r2
 80213bc:	881b      	ldrh	r3, [r3, #0]
 80213be:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80213c2:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 80213c4:	8bfa      	ldrh	r2, [r7, #30]
 80213c6:	897b      	ldrh	r3, [r7, #10]
 80213c8:	429a      	cmp	r2, r3
 80213ca:	d126      	bne.n	802141a <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 80213cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213ce:	005b      	lsls	r3, r3, #1
 80213d0:	6a3a      	ldr	r2, [r7, #32]
 80213d2:	4413      	add	r3, r2
 80213d4:	881b      	ldrh	r3, [r3, #0]
 80213d6:	b21b      	sxth	r3, r3
 80213d8:	2b00      	cmp	r3, #0
 80213da:	da01      	bge.n	80213e0 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 80213dc:	2302      	movs	r3, #2
 80213de:	e04d      	b.n	802147c <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 80213e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213e2:	005b      	lsls	r3, r3, #1
 80213e4:	6a3a      	ldr	r2, [r7, #32]
 80213e6:	4413      	add	r3, r2
 80213e8:	881b      	ldrh	r3, [r3, #0]
 80213ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d007      	beq.n	8021402 <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 80213f2:	8bfb      	ldrh	r3, [r7, #30]
 80213f4:	4618      	mov	r0, r3
 80213f6:	f000 f97f 	bl	80216f8 <lv_style_prop_get_default>
 80213fa:	4602      	mov	r2, r0
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	601a      	str	r2, [r3, #0]
 8021400:	e009      	b.n	8021416 <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8021402:	68fb      	ldr	r3, [r7, #12]
 8021404:	685b      	ldr	r3, [r3, #4]
 8021406:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 8021408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802140a:	009b      	lsls	r3, r3, #2
 802140c:	69ba      	ldr	r2, [r7, #24]
 802140e:	441a      	add	r2, r3
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	6812      	ldr	r2, [r2, #0]
 8021414:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 8021416:	2301      	movs	r3, #1
 8021418:	e030      	b.n	802147c <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 802141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802141c:	3301      	adds	r3, #1
 802141e:	62bb      	str	r3, [r7, #40]	; 0x28
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	7adb      	ldrb	r3, [r3, #11]
 8021424:	461a      	mov	r2, r3
 8021426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021428:	4293      	cmp	r3, r2
 802142a:	d3c3      	bcc.n	80213b4 <lv_style_get_prop_inlined+0xb6>
 802142c:	e025      	b.n	802147a <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 802142e:	68fb      	ldr	r3, [r7, #12]
 8021430:	891b      	ldrh	r3, [r3, #8]
 8021432:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8021436:	897b      	ldrh	r3, [r7, #10]
 8021438:	429a      	cmp	r2, r3
 802143a:	d11e      	bne.n	802147a <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 802143c:	68fb      	ldr	r3, [r7, #12]
 802143e:	891b      	ldrh	r3, [r3, #8]
 8021440:	b21b      	sxth	r3, r3
 8021442:	2b00      	cmp	r3, #0
 8021444:	da01      	bge.n	802144a <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 8021446:	2302      	movs	r3, #2
 8021448:	e018      	b.n	802147c <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 802144a:	68fb      	ldr	r3, [r7, #12]
 802144c:	891b      	ldrh	r3, [r3, #8]
 802144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021452:	2b00      	cmp	r3, #0
 8021454:	d00b      	beq.n	802146e <lv_style_get_prop_inlined+0x170>
 8021456:	68fb      	ldr	r3, [r7, #12]
 8021458:	891b      	ldrh	r3, [r3, #8]
 802145a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802145e:	b29b      	uxth	r3, r3
 8021460:	4618      	mov	r0, r3
 8021462:	f000 f949 	bl	80216f8 <lv_style_prop_get_default>
 8021466:	4602      	mov	r2, r0
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	601a      	str	r2, [r3, #0]
 802146c:	e003      	b.n	8021476 <lv_style_get_prop_inlined+0x178>
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	68fa      	ldr	r2, [r7, #12]
 8021472:	6852      	ldr	r2, [r2, #4]
 8021474:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 8021476:	2301      	movs	r3, #1
 8021478:	e000      	b.n	802147c <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 802147a:	2300      	movs	r3, #0
}
 802147c:	4618      	mov	r0, r3
 802147e:	3730      	adds	r7, #48	; 0x30
 8021480:	46bd      	mov	sp, r7
 8021482:	bd80      	pop	{r7, pc}

08021484 <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b082      	sub	sp, #8
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]
#if LV_USE_ASSERT_STYLE
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	681b      	ldr	r3, [r3, #0]
 8021490:	4a06      	ldr	r2, [pc, #24]	; (80214ac <lv_style_init+0x28>)
 8021492:	4293      	cmp	r3, r2
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8021494:	210c      	movs	r1, #12
 8021496:	6878      	ldr	r0, [r7, #4]
 8021498:	f7ff fdf6 	bl	8021088 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	4a03      	ldr	r2, [pc, #12]	; (80214ac <lv_style_init+0x28>)
 80214a0:	601a      	str	r2, [r3, #0]
#endif
}
 80214a2:	bf00      	nop
 80214a4:	3708      	adds	r7, #8
 80214a6:	46bd      	mov	sp, r7
 80214a8:	bd80      	pop	{r7, pc}
 80214aa:	bf00      	nop
 80214ac:	aabbccdd 	.word	0xaabbccdd

080214b0 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
 80214b0:	b580      	push	{r7, lr}
 80214b2:	b082      	sub	sp, #8
 80214b4:	af00      	add	r7, sp, #0
 80214b6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	d100      	bne.n	80214c0 <lv_style_reset+0x10>
 80214be:	e7fe      	b.n	80214be <lv_style_reset+0xe>
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	681b      	ldr	r3, [r3, #0]
 80214c4:	4a0f      	ldr	r2, [pc, #60]	; (8021504 <lv_style_reset+0x54>)
 80214c6:	4293      	cmp	r3, r2
 80214c8:	d000      	beq.n	80214cc <lv_style_reset+0x1c>
 80214ca:	e7fe      	b.n	80214ca <lv_style_reset+0x1a>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	891b      	ldrh	r3, [r3, #8]
 80214d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80214d4:	4293      	cmp	r3, r2
 80214d6:	d010      	beq.n	80214fa <lv_style_reset+0x4a>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	7adb      	ldrb	r3, [r3, #11]
 80214dc:	2b01      	cmp	r3, #1
 80214de:	d904      	bls.n	80214ea <lv_style_reset+0x3a>
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	685b      	ldr	r3, [r3, #4]
 80214e4:	4618      	mov	r0, r3
 80214e6:	f7ff f9cb 	bl	8020880 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 80214ea:	210c      	movs	r1, #12
 80214ec:	6878      	ldr	r0, [r7, #4]
 80214ee:	f7ff fdcb 	bl	8021088 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 80214f2:	687b      	ldr	r3, [r7, #4]
 80214f4:	4a03      	ldr	r2, [pc, #12]	; (8021504 <lv_style_reset+0x54>)
 80214f6:	601a      	str	r2, [r3, #0]
 80214f8:	e000      	b.n	80214fc <lv_style_reset+0x4c>
        return;
 80214fa:	bf00      	nop
#endif
}
 80214fc:	3708      	adds	r7, #8
 80214fe:	46bd      	mov	sp, r7
 8021500:	bd80      	pop	{r7, pc}
 8021502:	bf00      	nop
 8021504:	aabbccdd 	.word	0xaabbccdd

08021508 <lv_style_remove_prop>:
{
    return last_custom_prop_id - _LV_STYLE_LAST_BUILT_IN_PROP;
}

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8021508:	b580      	push	{r7, lr}
 802150a:	b08c      	sub	sp, #48	; 0x30
 802150c:	af00      	add	r7, sp, #0
 802150e:	6078      	str	r0, [r7, #4]
 8021510:	460b      	mov	r3, r1
 8021512:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d100      	bne.n	802151c <lv_style_remove_prop+0x14>
 802151a:	e7fe      	b.n	802151a <lv_style_remove_prop+0x12>
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	4a61      	ldr	r2, [pc, #388]	; (80216a8 <lv_style_remove_prop+0x1a0>)
 8021522:	4293      	cmp	r3, r2
 8021524:	d000      	beq.n	8021528 <lv_style_remove_prop+0x20>
 8021526:	e7fe      	b.n	8021526 <lv_style_remove_prop+0x1e>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	891b      	ldrh	r3, [r3, #8]
 802152c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021530:	4293      	cmp	r3, r2
 8021532:	d101      	bne.n	8021538 <lv_style_remove_prop+0x30>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
 8021534:	2300      	movs	r3, #0
 8021536:	e0b2      	b.n	802169e <lv_style_remove_prop+0x196>
    }

    if(style->prop_cnt == 0)  return false;
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	7adb      	ldrb	r3, [r3, #11]
 802153c:	2b00      	cmp	r3, #0
 802153e:	d101      	bne.n	8021544 <lv_style_remove_prop+0x3c>
 8021540:	2300      	movs	r3, #0
 8021542:	e0ac      	b.n	802169e <lv_style_remove_prop+0x196>

    if(style->prop_cnt == 1) {
 8021544:	687b      	ldr	r3, [r7, #4]
 8021546:	7adb      	ldrb	r3, [r3, #11]
 8021548:	2b01      	cmp	r3, #1
 802154a:	d110      	bne.n	802156e <lv_style_remove_prop+0x66>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 802154c:	687b      	ldr	r3, [r7, #4]
 802154e:	891b      	ldrh	r3, [r3, #8]
 8021550:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8021554:	887b      	ldrh	r3, [r7, #2]
 8021556:	429a      	cmp	r2, r3
 8021558:	d107      	bne.n	802156a <lv_style_remove_prop+0x62>
            style->prop1 = LV_STYLE_PROP_INV;
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	2200      	movs	r2, #0
 802155e:	811a      	strh	r2, [r3, #8]
            style->prop_cnt = 0;
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	2200      	movs	r2, #0
 8021564:	72da      	strb	r2, [r3, #11]
            return true;
 8021566:	2301      	movs	r3, #1
 8021568:	e099      	b.n	802169e <lv_style_remove_prop+0x196>
        }
        return false;
 802156a:	2300      	movs	r3, #0
 802156c:	e097      	b.n	802169e <lv_style_remove_prop+0x196>
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	685a      	ldr	r2, [r3, #4]
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	7adb      	ldrb	r3, [r3, #11]
 8021576:	009b      	lsls	r3, r3, #2
 8021578:	4413      	add	r3, r2
 802157a:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t * old_props = (uint16_t *)tmp;
 802157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802157e:	623b      	str	r3, [r7, #32]
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
 8021580:	2300      	movs	r3, #0
 8021582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021584:	e083      	b.n	802168e <lv_style_remove_prop+0x186>
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8021586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021588:	005b      	lsls	r3, r3, #1
 802158a:	6a3a      	ldr	r2, [r7, #32]
 802158c:	4413      	add	r3, r2
 802158e:	881b      	ldrh	r3, [r3, #0]
 8021590:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8021594:	887b      	ldrh	r3, [r7, #2]
 8021596:	429a      	cmp	r2, r3
 8021598:	d176      	bne.n	8021688 <lv_style_remove_prop+0x180>
            lv_style_value_t * old_values = (lv_style_value_t *)style->v_p.values_and_props;
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	685b      	ldr	r3, [r3, #4]
 802159e:	61fb      	str	r3, [r7, #28]

            if(style->prop_cnt == 2) {
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	7adb      	ldrb	r3, [r3, #11]
 80215a4:	2b02      	cmp	r3, #2
 80215a6:	d119      	bne.n	80215dc <lv_style_remove_prop+0xd4>
                style->prop_cnt = 1;
 80215a8:	687b      	ldr	r3, [r7, #4]
 80215aa:	2201      	movs	r2, #1
 80215ac:	72da      	strb	r2, [r3, #11]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 80215ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	d102      	bne.n	80215ba <lv_style_remove_prop+0xb2>
 80215b4:	6a3b      	ldr	r3, [r7, #32]
 80215b6:	885b      	ldrh	r3, [r3, #2]
 80215b8:	e001      	b.n	80215be <lv_style_remove_prop+0xb6>
 80215ba:	6a3b      	ldr	r3, [r7, #32]
 80215bc:	881b      	ldrh	r3, [r3, #0]
 80215be:	687a      	ldr	r2, [r7, #4]
 80215c0:	8113      	strh	r3, [r2, #8]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 80215c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d104      	bne.n	80215d2 <lv_style_remove_prop+0xca>
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	69fa      	ldr	r2, [r7, #28]
 80215cc:	6852      	ldr	r2, [r2, #4]
 80215ce:	605a      	str	r2, [r3, #4]
 80215d0:	e055      	b.n	802167e <lv_style_remove_prop+0x176>
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	69fa      	ldr	r2, [r7, #28]
 80215d6:	6812      	ldr	r2, [r2, #0]
 80215d8:	605a      	str	r2, [r3, #4]
 80215da:	e050      	b.n	802167e <lv_style_remove_prop+0x176>
            }
            else {
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	7adb      	ldrb	r3, [r3, #11]
 80215e0:	3b01      	subs	r3, #1
 80215e2:	461a      	mov	r2, r3
 80215e4:	4613      	mov	r3, r2
 80215e6:	005b      	lsls	r3, r3, #1
 80215e8:	4413      	add	r3, r2
 80215ea:	005b      	lsls	r3, r3, #1
 80215ec:	61bb      	str	r3, [r7, #24]
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 80215ee:	69b8      	ldr	r0, [r7, #24]
 80215f0:	f7ff f916 	bl	8020820 <lv_mem_alloc>
 80215f4:	6178      	str	r0, [r7, #20]
                if(new_values_and_props == NULL) return false;
 80215f6:	697b      	ldr	r3, [r7, #20]
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d101      	bne.n	8021600 <lv_style_remove_prop+0xf8>
 80215fc:	2300      	movs	r3, #0
 80215fe:	e04e      	b.n	802169e <lv_style_remove_prop+0x196>
                style->v_p.values_and_props = new_values_and_props;
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	697a      	ldr	r2, [r7, #20]
 8021604:	605a      	str	r2, [r3, #4]
                style->prop_cnt--;
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	7adb      	ldrb	r3, [r3, #11]
 802160a:	3b01      	subs	r3, #1
 802160c:	b2da      	uxtb	r2, r3
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	72da      	strb	r2, [r3, #11]

                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	7adb      	ldrb	r3, [r3, #11]
 8021616:	009b      	lsls	r3, r3, #2
 8021618:	697a      	ldr	r2, [r7, #20]
 802161a:	4413      	add	r3, r2
 802161c:	627b      	str	r3, [r7, #36]	; 0x24
                uint16_t * new_props = (uint16_t *)tmp;
 802161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021620:	613b      	str	r3, [r7, #16]
                lv_style_value_t * new_values = (lv_style_value_t *)new_values_and_props;
 8021622:	697b      	ldr	r3, [r7, #20]
 8021624:	60fb      	str	r3, [r7, #12]

                uint32_t j;
                for(i = j = 0; j <= style->prop_cnt;
 8021626:	2300      	movs	r3, #0
 8021628:	62bb      	str	r3, [r7, #40]	; 0x28
 802162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802162c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802162e:	e020      	b.n	8021672 <lv_style_remove_prop+0x16a>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
                    if(old_props[j] != prop) {
 8021630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021632:	005b      	lsls	r3, r3, #1
 8021634:	6a3a      	ldr	r2, [r7, #32]
 8021636:	4413      	add	r3, r2
 8021638:	881b      	ldrh	r3, [r3, #0]
 802163a:	887a      	ldrh	r2, [r7, #2]
 802163c:	429a      	cmp	r2, r3
 802163e:	d015      	beq.n	802166c <lv_style_remove_prop+0x164>
                        new_values[i] = old_values[j];
 8021640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021642:	009b      	lsls	r3, r3, #2
 8021644:	69fa      	ldr	r2, [r7, #28]
 8021646:	441a      	add	r2, r3
 8021648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802164a:	009b      	lsls	r3, r3, #2
 802164c:	68f9      	ldr	r1, [r7, #12]
 802164e:	440b      	add	r3, r1
 8021650:	6812      	ldr	r2, [r2, #0]
 8021652:	601a      	str	r2, [r3, #0]
                        new_props[i++] = old_props[j];
 8021654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021656:	005b      	lsls	r3, r3, #1
 8021658:	6a3a      	ldr	r2, [r7, #32]
 802165a:	441a      	add	r2, r3
 802165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802165e:	1c59      	adds	r1, r3, #1
 8021660:	62f9      	str	r1, [r7, #44]	; 0x2c
 8021662:	005b      	lsls	r3, r3, #1
 8021664:	6939      	ldr	r1, [r7, #16]
 8021666:	440b      	add	r3, r1
 8021668:	8812      	ldrh	r2, [r2, #0]
 802166a:	801a      	strh	r2, [r3, #0]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 802166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802166e:	3301      	adds	r3, #1
 8021670:	62bb      	str	r3, [r7, #40]	; 0x28
                for(i = j = 0; j <= style->prop_cnt;
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	7adb      	ldrb	r3, [r3, #11]
 8021676:	461a      	mov	r2, r3
 8021678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802167a:	4293      	cmp	r3, r2
 802167c:	d9d8      	bls.n	8021630 <lv_style_remove_prop+0x128>
                    }
                }
            }

            lv_mem_free(old_values);
 802167e:	69f8      	ldr	r0, [r7, #28]
 8021680:	f7ff f8fe 	bl	8020880 <lv_mem_free>
            return true;
 8021684:	2301      	movs	r3, #1
 8021686:	e00a      	b.n	802169e <lv_style_remove_prop+0x196>
    for(i = 0; i < style->prop_cnt; i++) {
 8021688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802168a:	3301      	adds	r3, #1
 802168c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	7adb      	ldrb	r3, [r3, #11]
 8021692:	461a      	mov	r2, r3
 8021694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021696:	4293      	cmp	r3, r2
 8021698:	f4ff af75 	bcc.w	8021586 <lv_style_remove_prop+0x7e>
        }
    }

    return false;
 802169c:	2300      	movs	r3, #0
}
 802169e:	4618      	mov	r0, r3
 80216a0:	3730      	adds	r7, #48	; 0x30
 80216a2:	46bd      	mov	sp, r7
 80216a4:	bd80      	pop	{r7, pc}
 80216a6:	bf00      	nop
 80216a8:	aabbccdd 	.word	0xaabbccdd

080216ac <lv_style_set_prop>:

void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
{
 80216ac:	b580      	push	{r7, lr}
 80216ae:	b084      	sub	sp, #16
 80216b0:	af00      	add	r7, sp, #0
 80216b2:	60f8      	str	r0, [r7, #12]
 80216b4:	460b      	mov	r3, r1
 80216b6:	607a      	str	r2, [r7, #4]
 80216b8:	817b      	strh	r3, [r7, #10]
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 80216ba:	8979      	ldrh	r1, [r7, #10]
 80216bc:	4b04      	ldr	r3, [pc, #16]	; (80216d0 <lv_style_set_prop+0x24>)
 80216be:	687a      	ldr	r2, [r7, #4]
 80216c0:	68f8      	ldr	r0, [r7, #12]
 80216c2:	f000 f9a5 	bl	8021a10 <lv_style_set_prop_internal>
}
 80216c6:	bf00      	nop
 80216c8:	3710      	adds	r7, #16
 80216ca:	46bd      	mov	sp, r7
 80216cc:	bd80      	pop	{r7, pc}
 80216ce:	bf00      	nop
 80216d0:	080219e9 	.word	0x080219e9

080216d4 <lv_style_get_prop>:
{
    lv_style_set_prop_internal(style, prop | meta, null_style_value, lv_style_set_prop_meta_helper);
}

lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 80216d4:	b580      	push	{r7, lr}
 80216d6:	b084      	sub	sp, #16
 80216d8:	af00      	add	r7, sp, #0
 80216da:	60f8      	str	r0, [r7, #12]
 80216dc:	460b      	mov	r3, r1
 80216de:	607a      	str	r2, [r7, #4]
 80216e0:	817b      	strh	r3, [r7, #10]
    return lv_style_get_prop_inlined(style, prop, value);
 80216e2:	897b      	ldrh	r3, [r7, #10]
 80216e4:	687a      	ldr	r2, [r7, #4]
 80216e6:	4619      	mov	r1, r3
 80216e8:	68f8      	ldr	r0, [r7, #12]
 80216ea:	f7ff fe08 	bl	80212fe <lv_style_get_prop_inlined>
 80216ee:	4603      	mov	r3, r0
}
 80216f0:	4618      	mov	r0, r3
 80216f2:	3710      	adds	r7, #16
 80216f4:	46bd      	mov	sp, r7
 80216f6:	bd80      	pop	{r7, pc}

080216f8 <lv_style_prop_get_default>:
    LV_UNUSED(user_data);
#endif
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
 80216f8:	b580      	push	{r7, lr}
 80216fa:	b084      	sub	sp, #16
 80216fc:	af00      	add	r7, sp, #0
 80216fe:	4603      	mov	r3, r0
 8021700:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value;
    switch(prop) {
 8021702:	88fb      	ldrh	r3, [r7, #6]
 8021704:	3b03      	subs	r3, #3
 8021706:	2b69      	cmp	r3, #105	; 0x69
 8021708:	f200 80f4 	bhi.w	80218f4 <lv_style_prop_get_default+0x1fc>
 802170c:	a201      	add	r2, pc, #4	; (adr r2, 8021714 <lv_style_prop_get_default+0x1c>)
 802170e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021712:	bf00      	nop
 8021714:	080218ed 	.word	0x080218ed
 8021718:	080218f5 	.word	0x080218f5
 802171c:	080218f5 	.word	0x080218f5
 8021720:	080218ed 	.word	0x080218ed
 8021724:	080218f5 	.word	0x080218f5
 8021728:	080218f5 	.word	0x080218f5
 802172c:	080218f5 	.word	0x080218f5
 8021730:	080218f5 	.word	0x080218f5
 8021734:	080218f5 	.word	0x080218f5
 8021738:	080218f5 	.word	0x080218f5
 802173c:	080218f5 	.word	0x080218f5
 8021740:	080218f5 	.word	0x080218f5
 8021744:	080218f5 	.word	0x080218f5
 8021748:	080218f5 	.word	0x080218f5
 802174c:	080218f5 	.word	0x080218f5
 8021750:	080218f5 	.word	0x080218f5
 8021754:	080218f5 	.word	0x080218f5
 8021758:	080218f5 	.word	0x080218f5
 802175c:	080218f5 	.word	0x080218f5
 8021760:	080218f5 	.word	0x080218f5
 8021764:	080218f5 	.word	0x080218f5
 8021768:	080218f5 	.word	0x080218f5
 802176c:	080218f5 	.word	0x080218f5
 8021770:	080218f5 	.word	0x080218f5
 8021774:	080218f5 	.word	0x080218f5
 8021778:	080218f5 	.word	0x080218f5
 802177c:	080218f5 	.word	0x080218f5
 8021780:	080218f5 	.word	0x080218f5
 8021784:	080218f5 	.word	0x080218f5
 8021788:	080218c5 	.word	0x080218c5
 802178c:	080218f5 	.word	0x080218f5
 8021790:	080218cd 	.word	0x080218cd
 8021794:	080218f5 	.word	0x080218f5
 8021798:	080218f5 	.word	0x080218f5
 802179c:	080218db 	.word	0x080218db
 80217a0:	080218f5 	.word	0x080218f5
 80217a4:	080218f5 	.word	0x080218f5
 80217a8:	080218f5 	.word	0x080218f5
 80217ac:	080218d5 	.word	0x080218d5
 80217b0:	080218f5 	.word	0x080218f5
 80217b4:	080218f5 	.word	0x080218f5
 80217b8:	080218f5 	.word	0x080218f5
 80217bc:	080218f5 	.word	0x080218f5
 80217c0:	080218f5 	.word	0x080218f5
 80217c4:	080218f5 	.word	0x080218f5
 80217c8:	080218cd 	.word	0x080218cd
 80217cc:	080218d5 	.word	0x080218d5
 80217d0:	080218f5 	.word	0x080218f5
 80217d4:	080218e1 	.word	0x080218e1
 80217d8:	080218f5 	.word	0x080218f5
 80217dc:	080218f5 	.word	0x080218f5
 80217e0:	080218cd 	.word	0x080218cd
 80217e4:	080218d5 	.word	0x080218d5
 80217e8:	080218f5 	.word	0x080218f5
 80217ec:	080218f5 	.word	0x080218f5
 80217f0:	080218f5 	.word	0x080218f5
 80217f4:	080218f5 	.word	0x080218f5
 80217f8:	080218f5 	.word	0x080218f5
 80217fc:	080218f5 	.word	0x080218f5
 8021800:	080218f5 	.word	0x080218f5
 8021804:	080218f5 	.word	0x080218f5
 8021808:	080218f5 	.word	0x080218f5
 802180c:	080218f5 	.word	0x080218f5
 8021810:	080218f5 	.word	0x080218f5
 8021814:	080218f5 	.word	0x080218f5
 8021818:	080218cd 	.word	0x080218cd
 802181c:	080218d5 	.word	0x080218d5
 8021820:	080218d5 	.word	0x080218d5
 8021824:	080218cd 	.word	0x080218cd
 8021828:	080218f5 	.word	0x080218f5
 802182c:	080218f5 	.word	0x080218f5
 8021830:	080218f5 	.word	0x080218f5
 8021834:	080218f5 	.word	0x080218f5
 8021838:	080218f5 	.word	0x080218f5
 802183c:	080218cd 	.word	0x080218cd
 8021840:	080218d5 	.word	0x080218d5
 8021844:	080218f5 	.word	0x080218f5
 8021848:	080218f5 	.word	0x080218f5
 802184c:	080218f5 	.word	0x080218f5
 8021850:	080218cd 	.word	0x080218cd
 8021854:	080218d5 	.word	0x080218d5
 8021858:	080218f5 	.word	0x080218f5
 802185c:	080218cd 	.word	0x080218cd
 8021860:	080218d5 	.word	0x080218d5
 8021864:	080218e7 	.word	0x080218e7
 8021868:	080218f5 	.word	0x080218f5
 802186c:	080218f5 	.word	0x080218f5
 8021870:	080218f5 	.word	0x080218f5
 8021874:	080218f5 	.word	0x080218f5
 8021878:	080218f5 	.word	0x080218f5
 802187c:	080218f5 	.word	0x080218f5
 8021880:	080218f5 	.word	0x080218f5
 8021884:	080218f5 	.word	0x080218f5
 8021888:	080218d5 	.word	0x080218d5
 802188c:	080218f5 	.word	0x080218f5
 8021890:	080218f5 	.word	0x080218f5
 8021894:	080218f5 	.word	0x080218f5
 8021898:	080218f5 	.word	0x080218f5
 802189c:	080218f5 	.word	0x080218f5
 80218a0:	080218f5 	.word	0x080218f5
 80218a4:	080218f5 	.word	0x080218f5
 80218a8:	080218f5 	.word	0x080218f5
 80218ac:	080218f5 	.word	0x080218f5
 80218b0:	080218f5 	.word	0x080218f5
 80218b4:	080218f5 	.word	0x080218f5
 80218b8:	080218bd 	.word	0x080218bd
        case LV_STYLE_TRANSFORM_ZOOM:
            value.num = LV_IMG_ZOOM_NONE;
 80218bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80218c0:	60fb      	str	r3, [r7, #12]
            break;
 80218c2:	e01c      	b.n	80218fe <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_COLOR:
            value.color = lv_color_white();
 80218c4:	f7ff fd07 	bl	80212d6 <lv_color_white>
 80218c8:	7338      	strb	r0, [r7, #12]
            break;
 80218ca:	e018      	b.n	80218fe <lv_style_prop_get_default+0x206>
        case LV_STYLE_OUTLINE_COLOR:
        case LV_STYLE_ARC_COLOR:
        case LV_STYLE_LINE_COLOR:
        case LV_STYLE_TEXT_COLOR:
        case LV_STYLE_IMG_RECOLOR:
            value.color = lv_color_black();
 80218cc:	f7ff fd0d 	bl	80212ea <lv_color_black>
 80218d0:	7338      	strb	r0, [r7, #12]
            break;
 80218d2:	e014      	b.n	80218fe <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 80218d4:	23ff      	movs	r3, #255	; 0xff
 80218d6:	60fb      	str	r3, [r7, #12]
            break;
 80218d8:	e011      	b.n	80218fe <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_GRAD_STOP:
            value.num = 255;
 80218da:	23ff      	movs	r3, #255	; 0xff
 80218dc:	60fb      	str	r3, [r7, #12]
            break;
 80218de:	e00e      	b.n	80218fe <lv_style_prop_get_default+0x206>
        case LV_STYLE_BORDER_SIDE:
            value.num = LV_BORDER_SIDE_FULL;
 80218e0:	230f      	movs	r3, #15
 80218e2:	60fb      	str	r3, [r7, #12]
            break;
 80218e4:	e00b      	b.n	80218fe <lv_style_prop_get_default+0x206>
        case LV_STYLE_TEXT_FONT:
            value.ptr = LV_FONT_DEFAULT;
 80218e6:	4b08      	ldr	r3, [pc, #32]	; (8021908 <lv_style_prop_get_default+0x210>)
 80218e8:	60fb      	str	r3, [r7, #12]
            break;
 80218ea:	e008      	b.n	80218fe <lv_style_prop_get_default+0x206>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
 80218ec:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80218f0:	60fb      	str	r3, [r7, #12]
            break;
 80218f2:	e004      	b.n	80218fe <lv_style_prop_get_default+0x206>
        default:
            value.ptr = NULL;
 80218f4:	2300      	movs	r3, #0
 80218f6:	60fb      	str	r3, [r7, #12]
            value.num = 0;
 80218f8:	2300      	movs	r3, #0
 80218fa:	60fb      	str	r3, [r7, #12]
            break;
 80218fc:	bf00      	nop
    }

    return value;
 80218fe:	68fb      	ldr	r3, [r7, #12]
}
 8021900:	4618      	mov	r0, r3
 8021902:	3710      	adds	r7, #16
 8021904:	46bd      	mov	sp, r7
 8021906:	bd80      	pop	{r7, pc}
 8021908:	08026df4 	.word	0x08026df4

0802190c <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
 802190c:	b480      	push	{r7}
 802190e:	b083      	sub	sp, #12
 8021910:	af00      	add	r7, sp, #0
 8021912:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8021914:	687b      	ldr	r3, [r7, #4]
 8021916:	2b00      	cmp	r3, #0
 8021918:	d100      	bne.n	802191c <lv_style_is_empty+0x10>
 802191a:	e7fe      	b.n	802191a <lv_style_is_empty+0xe>
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	4a08      	ldr	r2, [pc, #32]	; (8021944 <lv_style_is_empty+0x38>)
 8021922:	4293      	cmp	r3, r2
 8021924:	d000      	beq.n	8021928 <lv_style_is_empty+0x1c>
 8021926:	e7fe      	b.n	8021926 <lv_style_is_empty+0x1a>

    return style->prop_cnt == 0 ? true : false;
 8021928:	687b      	ldr	r3, [r7, #4]
 802192a:	7adb      	ldrb	r3, [r3, #11]
 802192c:	2b00      	cmp	r3, #0
 802192e:	bf0c      	ite	eq
 8021930:	2301      	moveq	r3, #1
 8021932:	2300      	movne	r3, #0
 8021934:	b2db      	uxtb	r3, r3
}
 8021936:	4618      	mov	r0, r3
 8021938:	370c      	adds	r7, #12
 802193a:	46bd      	mov	sp, r7
 802193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021940:	4770      	bx	lr
 8021942:	bf00      	nop
 8021944:	aabbccdd 	.word	0xaabbccdd

08021948 <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
 8021948:	b480      	push	{r7}
 802194a:	b085      	sub	sp, #20
 802194c:	af00      	add	r7, sp, #0
 802194e:	4603      	mov	r3, r0
 8021950:	80fb      	strh	r3, [r7, #6]
    uint16_t group = (prop & 0x1FF) >> 4;
 8021952:	88fb      	ldrh	r3, [r7, #6]
 8021954:	111b      	asrs	r3, r3, #4
 8021956:	b29b      	uxth	r3, r3
 8021958:	f003 031f 	and.w	r3, r3, #31
 802195c:	81fb      	strh	r3, [r7, #14]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 802195e:	89fb      	ldrh	r3, [r7, #14]
 8021960:	2b07      	cmp	r3, #7
 8021962:	d901      	bls.n	8021968 <_lv_style_get_prop_group+0x20>
 8021964:	2307      	movs	r3, #7
 8021966:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)group;
 8021968:	89fb      	ldrh	r3, [r7, #14]
 802196a:	b2db      	uxtb	r3, r3
}
 802196c:	4618      	mov	r0, r3
 802196e:	3714      	adds	r7, #20
 8021970:	46bd      	mov	sp, r7
 8021972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021976:	4770      	bx	lr

08021978 <_lv_style_prop_lookup_flags>:

uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop)
{
 8021978:	b480      	push	{r7}
 802197a:	b083      	sub	sp, #12
 802197c:	af00      	add	r7, sp, #0
 802197e:	4603      	mov	r3, r0
 8021980:	80fb      	strh	r3, [r7, #6]
    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    extern uint32_t _lv_style_custom_prop_flag_lookup_table_size;
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8021982:	88fb      	ldrh	r3, [r7, #6]
 8021984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021988:	4293      	cmp	r3, r2
 802198a:	d101      	bne.n	8021990 <_lv_style_prop_lookup_flags+0x18>
 802198c:	231f      	movs	r3, #31
 802198e:	e01e      	b.n	80219ce <_lv_style_prop_lookup_flags+0x56>
    if(prop == LV_STYLE_PROP_INV) return 0;
 8021990:	88fb      	ldrh	r3, [r7, #6]
 8021992:	2b00      	cmp	r3, #0
 8021994:	d101      	bne.n	802199a <_lv_style_prop_lookup_flags+0x22>
 8021996:	2300      	movs	r3, #0
 8021998:	e019      	b.n	80219ce <_lv_style_prop_lookup_flags+0x56>

    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 802199a:	88fb      	ldrh	r3, [r7, #6]
 802199c:	2b6f      	cmp	r3, #111	; 0x6f
 802199e:	d803      	bhi.n	80219a8 <_lv_style_prop_lookup_flags+0x30>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 80219a0:	88fb      	ldrh	r3, [r7, #6]
 80219a2:	4a0e      	ldr	r2, [pc, #56]	; (80219dc <_lv_style_prop_lookup_flags+0x64>)
 80219a4:	5cd3      	ldrb	r3, [r2, r3]
 80219a6:	e012      	b.n	80219ce <_lv_style_prop_lookup_flags+0x56>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 80219a8:	88fb      	ldrh	r3, [r7, #6]
 80219aa:	3b70      	subs	r3, #112	; 0x70
 80219ac:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 80219ae:	4b0c      	ldr	r3, [pc, #48]	; (80219e0 <_lv_style_prop_lookup_flags+0x68>)
 80219b0:	681b      	ldr	r3, [r3, #0]
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	d00a      	beq.n	80219cc <_lv_style_prop_lookup_flags+0x54>
 80219b6:	88fa      	ldrh	r2, [r7, #6]
 80219b8:	4b0a      	ldr	r3, [pc, #40]	; (80219e4 <_lv_style_prop_lookup_flags+0x6c>)
 80219ba:	681b      	ldr	r3, [r3, #0]
 80219bc:	429a      	cmp	r2, r3
 80219be:	d205      	bcs.n	80219cc <_lv_style_prop_lookup_flags+0x54>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 80219c0:	4b07      	ldr	r3, [pc, #28]	; (80219e0 <_lv_style_prop_lookup_flags+0x68>)
 80219c2:	681a      	ldr	r2, [r3, #0]
 80219c4:	88fb      	ldrh	r3, [r7, #6]
 80219c6:	4413      	add	r3, r2
 80219c8:	781b      	ldrb	r3, [r3, #0]
 80219ca:	e000      	b.n	80219ce <_lv_style_prop_lookup_flags+0x56>
    return 0;
 80219cc:	2300      	movs	r3, #0
}
 80219ce:	4618      	mov	r0, r3
 80219d0:	370c      	adds	r7, #12
 80219d2:	46bd      	mov	sp, r7
 80219d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219d8:	4770      	bx	lr
 80219da:	bf00      	nop
 80219dc:	08026edc 	.word	0x08026edc
 80219e0:	20000a40 	.word	0x20000a40
 80219e4:	2000ca50 	.word	0x2000ca50

080219e8 <lv_style_set_prop_helper>:
 *   STATIC FUNCTIONS
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
 80219e8:	b480      	push	{r7}
 80219ea:	b085      	sub	sp, #20
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	60b9      	str	r1, [r7, #8]
 80219f0:	607a      	str	r2, [r7, #4]
 80219f2:	603b      	str	r3, [r7, #0]
 80219f4:	4603      	mov	r3, r0
 80219f6:	81fb      	strh	r3, [r7, #14]
    *prop_storage = prop;
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	89fa      	ldrh	r2, [r7, #14]
 80219fc:	801a      	strh	r2, [r3, #0]
    *value_storage = value;
 80219fe:	683b      	ldr	r3, [r7, #0]
 8021a00:	68ba      	ldr	r2, [r7, #8]
 8021a02:	601a      	str	r2, [r3, #0]
}
 8021a04:	bf00      	nop
 8021a06:	3714      	adds	r7, #20
 8021a08:	46bd      	mov	sp, r7
 8021a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a0e:	4770      	bx	lr

08021a10 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 8021a10:	b590      	push	{r4, r7, lr}
 8021a12:	b095      	sub	sp, #84	; 0x54
 8021a14:	af00      	add	r7, sp, #0
 8021a16:	60f8      	str	r0, [r7, #12]
 8021a18:	607a      	str	r2, [r7, #4]
 8021a1a:	603b      	str	r3, [r7, #0]
 8021a1c:	460b      	mov	r3, r1
 8021a1e:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);
 8021a20:	68fb      	ldr	r3, [r7, #12]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d100      	bne.n	8021a28 <lv_style_set_prop_internal+0x18>
 8021a26:	e7fe      	b.n	8021a26 <lv_style_set_prop_internal+0x16>
 8021a28:	68fb      	ldr	r3, [r7, #12]
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	4a8b      	ldr	r2, [pc, #556]	; (8021c5c <lv_style_set_prop_internal+0x24c>)
 8021a2e:	4293      	cmp	r3, r2
 8021a30:	d000      	beq.n	8021a34 <lv_style_set_prop_internal+0x24>
 8021a32:	e7fe      	b.n	8021a32 <lv_style_set_prop_internal+0x22>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8021a34:	68fb      	ldr	r3, [r7, #12]
 8021a36:	891b      	ldrh	r3, [r3, #8]
 8021a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021a3c:	4293      	cmp	r3, r2
 8021a3e:	f000 8104 	beq.w	8021c4a <lv_style_set_prop_internal+0x23a>
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8021a42:	897b      	ldrh	r3, [r7, #10]
 8021a44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8021a48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    if(style->prop_cnt > 1) {
 8021a4c:	68fb      	ldr	r3, [r7, #12]
 8021a4e:	7adb      	ldrb	r3, [r3, #11]
 8021a50:	2b01      	cmp	r3, #1
 8021a52:	f240 808d 	bls.w	8021b70 <lv_style_set_prop_internal+0x160>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8021a56:	68fb      	ldr	r3, [r7, #12]
 8021a58:	685a      	ldr	r2, [r3, #4]
 8021a5a:	68fb      	ldr	r3, [r7, #12]
 8021a5c:	7adb      	ldrb	r3, [r3, #11]
 8021a5e:	009b      	lsls	r3, r3, #2
 8021a60:	4413      	add	r3, r2
 8021a62:	633b      	str	r3, [r7, #48]	; 0x30
        uint16_t * props = (uint16_t *)tmp;
 8021a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8021a68:	68fb      	ldr	r3, [r7, #12]
 8021a6a:	7adb      	ldrb	r3, [r3, #11]
 8021a6c:	3b01      	subs	r3, #1
 8021a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021a70:	e01e      	b.n	8021ab0 <lv_style_set_prop_internal+0xa0>
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8021a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021a74:	005b      	lsls	r3, r3, #1
 8021a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021a78:	4413      	add	r3, r2
 8021a7a:	881b      	ldrh	r3, [r3, #0]
 8021a7c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8021a80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8021a84:	429a      	cmp	r2, r3
 8021a86:	d110      	bne.n	8021aaa <lv_style_set_prop_internal+0x9a>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8021a88:	68fb      	ldr	r3, [r7, #12]
 8021a8a:	685b      	ldr	r3, [r3, #4]
 8021a8c:	61fb      	str	r3, [r7, #28]
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8021a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021a90:	005b      	lsls	r3, r3, #1
 8021a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021a94:	18d1      	adds	r1, r2, r3
 8021a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021a98:	009b      	lsls	r3, r3, #2
 8021a9a:	69fa      	ldr	r2, [r7, #28]
 8021a9c:	4413      	add	r3, r2
 8021a9e:	8978      	ldrh	r0, [r7, #10]
 8021aa0:	683c      	ldr	r4, [r7, #0]
 8021aa2:	460a      	mov	r2, r1
 8021aa4:	6879      	ldr	r1, [r7, #4]
 8021aa6:	47a0      	blx	r4
                return;
 8021aa8:	e0d4      	b.n	8021c54 <lv_style_set_prop_internal+0x244>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8021aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021aac:	3b01      	subs	r3, #1
 8021aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	dadd      	bge.n	8021a72 <lv_style_set_prop_internal+0x62>
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8021ab6:	68fb      	ldr	r3, [r7, #12]
 8021ab8:	7adb      	ldrb	r3, [r3, #11]
 8021aba:	3301      	adds	r3, #1
 8021abc:	461a      	mov	r2, r3
 8021abe:	4613      	mov	r3, r2
 8021ac0:	005b      	lsls	r3, r3, #1
 8021ac2:	4413      	add	r3, r2
 8021ac4:	005b      	lsls	r3, r3, #1
 8021ac6:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8021ac8:	68fb      	ldr	r3, [r7, #12]
 8021aca:	685b      	ldr	r3, [r3, #4]
 8021acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021ace:	4618      	mov	r0, r3
 8021ad0:	f7fe ff04 	bl	80208dc <lv_mem_realloc>
 8021ad4:	6278      	str	r0, [r7, #36]	; 0x24
        if(values_and_props == NULL) return;
 8021ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	f000 80b8 	beq.w	8021c4e <lv_style_set_prop_internal+0x23e>
        style->v_p.values_and_props = values_and_props;
 8021ade:	68fb      	ldr	r3, [r7, #12]
 8021ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021ae2:	605a      	str	r2, [r3, #4]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8021ae4:	68fb      	ldr	r3, [r7, #12]
 8021ae6:	7adb      	ldrb	r3, [r3, #11]
 8021ae8:	009b      	lsls	r3, r3, #2
 8021aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021aec:	4413      	add	r3, r2
 8021aee:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 8021af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8021af4:	68fb      	ldr	r3, [r7, #12]
 8021af6:	7adb      	ldrb	r3, [r3, #11]
 8021af8:	3b01      	subs	r3, #1
 8021afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021afc:	e00d      	b.n	8021b1a <lv_style_set_prop_internal+0x10a>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8021afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021b00:	005b      	lsls	r3, r3, #1
 8021b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021b04:	441a      	add	r2, r3
 8021b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021b08:	3302      	adds	r3, #2
 8021b0a:	005b      	lsls	r3, r3, #1
 8021b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021b0e:	440b      	add	r3, r1
 8021b10:	8812      	ldrh	r2, [r2, #0]
 8021b12:	801a      	strh	r2, [r3, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8021b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021b16:	3b01      	subs	r3, #1
 8021b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021b1c:	2b00      	cmp	r3, #0
 8021b1e:	daee      	bge.n	8021afe <lv_style_set_prop_internal+0xee>
        }
        style->prop_cnt++;
 8021b20:	68fb      	ldr	r3, [r7, #12]
 8021b22:	7adb      	ldrb	r3, [r3, #11]
 8021b24:	3301      	adds	r3, #1
 8021b26:	b2da      	uxtb	r2, r3
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	72da      	strb	r2, [r3, #11]

        /*Go to the new position wit the props*/
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8021b2c:	68fb      	ldr	r3, [r7, #12]
 8021b2e:	7adb      	ldrb	r3, [r3, #11]
 8021b30:	009b      	lsls	r3, r3, #2
 8021b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021b34:	4413      	add	r3, r2
 8021b36:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 8021b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 8021b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b3e:	623b      	str	r3, [r7, #32]

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8021b40:	68fb      	ldr	r3, [r7, #12]
 8021b42:	7adb      	ldrb	r3, [r3, #11]
 8021b44:	461a      	mov	r2, r3
 8021b46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021b4a:	4413      	add	r3, r2
 8021b4c:	005b      	lsls	r3, r3, #1
 8021b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021b50:	18d1      	adds	r1, r2, r3
 8021b52:	68fb      	ldr	r3, [r7, #12]
 8021b54:	7adb      	ldrb	r3, [r3, #11]
 8021b56:	461a      	mov	r2, r3
 8021b58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8021b5c:	4413      	add	r3, r2
 8021b5e:	009b      	lsls	r3, r3, #2
 8021b60:	6a3a      	ldr	r2, [r7, #32]
 8021b62:	4413      	add	r3, r2
 8021b64:	8978      	ldrh	r0, [r7, #10]
 8021b66:	683c      	ldr	r4, [r7, #0]
 8021b68:	460a      	mov	r2, r1
 8021b6a:	6879      	ldr	r1, [r7, #4]
 8021b6c:	47a0      	blx	r4
 8021b6e:	e057      	b.n	8021c20 <lv_style_set_prop_internal+0x210>
    }
    else if(style->prop_cnt == 1) {
 8021b70:	68fb      	ldr	r3, [r7, #12]
 8021b72:	7adb      	ldrb	r3, [r3, #11]
 8021b74:	2b01      	cmp	r3, #1
 8021b76:	d147      	bne.n	8021c08 <lv_style_set_prop_internal+0x1f8>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 8021b78:	68fb      	ldr	r3, [r7, #12]
 8021b7a:	891b      	ldrh	r3, [r3, #8]
 8021b7c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8021b80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8021b84:	429a      	cmp	r2, r3
 8021b86:	d109      	bne.n	8021b9c <lv_style_set_prop_internal+0x18c>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8021b88:	68fb      	ldr	r3, [r7, #12]
 8021b8a:	f103 0208 	add.w	r2, r3, #8
 8021b8e:	68fb      	ldr	r3, [r7, #12]
 8021b90:	3304      	adds	r3, #4
 8021b92:	8978      	ldrh	r0, [r7, #10]
 8021b94:	683c      	ldr	r4, [r7, #0]
 8021b96:	6879      	ldr	r1, [r7, #4]
 8021b98:	47a0      	blx	r4
            return;
 8021b9a:	e05b      	b.n	8021c54 <lv_style_set_prop_internal+0x244>
        }
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8021b9c:	68fb      	ldr	r3, [r7, #12]
 8021b9e:	7adb      	ldrb	r3, [r3, #11]
 8021ba0:	3301      	adds	r3, #1
 8021ba2:	461a      	mov	r2, r3
 8021ba4:	4613      	mov	r3, r2
 8021ba6:	005b      	lsls	r3, r3, #1
 8021ba8:	4413      	add	r3, r2
 8021baa:	005b      	lsls	r3, r3, #1
 8021bac:	647b      	str	r3, [r7, #68]	; 0x44
        uint8_t * values_and_props = lv_mem_alloc(size);
 8021bae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8021bb0:	f7fe fe36 	bl	8020820 <lv_mem_alloc>
 8021bb4:	6438      	str	r0, [r7, #64]	; 0x40
        if(values_and_props == NULL) return;
 8021bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021bb8:	2b00      	cmp	r3, #0
 8021bba:	d04a      	beq.n	8021c52 <lv_style_set_prop_internal+0x242>
        lv_style_value_t value_tmp = style->v_p.value1;
 8021bbc:	68fb      	ldr	r3, [r7, #12]
 8021bbe:	685b      	ldr	r3, [r3, #4]
 8021bc0:	617b      	str	r3, [r7, #20]
        style->v_p.values_and_props = values_and_props;
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021bc6:	605a      	str	r2, [r3, #4]
        style->prop_cnt++;
 8021bc8:	68fb      	ldr	r3, [r7, #12]
 8021bca:	7adb      	ldrb	r3, [r3, #11]
 8021bcc:	3301      	adds	r3, #1
 8021bce:	b2da      	uxtb	r2, r3
 8021bd0:	68fb      	ldr	r3, [r7, #12]
 8021bd2:	72da      	strb	r2, [r3, #11]

        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8021bd4:	68fb      	ldr	r3, [r7, #12]
 8021bd6:	7adb      	ldrb	r3, [r3, #11]
 8021bd8:	009b      	lsls	r3, r3, #2
 8021bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021bdc:	4413      	add	r3, r2
 8021bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint16_t * props = (uint16_t *)tmp;
 8021be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021be2:	63bb      	str	r3, [r7, #56]	; 0x38
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 8021be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021be6:	637b      	str	r3, [r7, #52]	; 0x34
        props[0] = style->prop1;
 8021be8:	68fb      	ldr	r3, [r7, #12]
 8021bea:	891a      	ldrh	r2, [r3, #8]
 8021bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021bee:	801a      	strh	r2, [r3, #0]
        values[0] = value_tmp;
 8021bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021bf2:	697a      	ldr	r2, [r7, #20]
 8021bf4:	601a      	str	r2, [r3, #0]
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8021bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021bf8:	1c9a      	adds	r2, r3, #2
 8021bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021bfc:	3304      	adds	r3, #4
 8021bfe:	8978      	ldrh	r0, [r7, #10]
 8021c00:	683c      	ldr	r4, [r7, #0]
 8021c02:	6879      	ldr	r1, [r7, #4]
 8021c04:	47a0      	blx	r4
 8021c06:	e00b      	b.n	8021c20 <lv_style_set_prop_internal+0x210>
    }
    else {
        style->prop_cnt = 1;
 8021c08:	68fb      	ldr	r3, [r7, #12]
 8021c0a:	2201      	movs	r2, #1
 8021c0c:	72da      	strb	r2, [r3, #11]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8021c0e:	68fb      	ldr	r3, [r7, #12]
 8021c10:	f103 0208 	add.w	r2, r3, #8
 8021c14:	68fb      	ldr	r3, [r7, #12]
 8021c16:	3304      	adds	r3, #4
 8021c18:	8978      	ldrh	r0, [r7, #10]
 8021c1a:	683c      	ldr	r4, [r7, #0]
 8021c1c:	6879      	ldr	r1, [r7, #4]
 8021c1e:	47a0      	blx	r4
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 8021c20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8021c24:	4618      	mov	r0, r3
 8021c26:	f7ff fe8f 	bl	8021948 <_lv_style_get_prop_group>
 8021c2a:	4603      	mov	r3, r0
 8021c2c:	76fb      	strb	r3, [r7, #27]
    style->has_group |= 1 << group;
 8021c2e:	68fb      	ldr	r3, [r7, #12]
 8021c30:	7a9b      	ldrb	r3, [r3, #10]
 8021c32:	b25a      	sxtb	r2, r3
 8021c34:	7efb      	ldrb	r3, [r7, #27]
 8021c36:	2101      	movs	r1, #1
 8021c38:	fa01 f303 	lsl.w	r3, r1, r3
 8021c3c:	b25b      	sxtb	r3, r3
 8021c3e:	4313      	orrs	r3, r2
 8021c40:	b25b      	sxtb	r3, r3
 8021c42:	b2da      	uxtb	r2, r3
 8021c44:	68fb      	ldr	r3, [r7, #12]
 8021c46:	729a      	strb	r2, [r3, #10]
 8021c48:	e004      	b.n	8021c54 <lv_style_set_prop_internal+0x244>
        return;
 8021c4a:	bf00      	nop
 8021c4c:	e002      	b.n	8021c54 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8021c4e:	bf00      	nop
 8021c50:	e000      	b.n	8021c54 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8021c52:	bf00      	nop
}
 8021c54:	3754      	adds	r7, #84	; 0x54
 8021c56:	46bd      	mov	sp, r7
 8021c58:	bd90      	pop	{r4, r7, pc}
 8021c5a:	bf00      	nop
 8021c5c:	aabbccdd 	.word	0xaabbccdd

08021c60 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8021c60:	b580      	push	{r7, lr}
 8021c62:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8021c64:	2118      	movs	r1, #24
 8021c66:	4804      	ldr	r0, [pc, #16]	; (8021c78 <_lv_timer_core_init+0x18>)
 8021c68:	f7fe fb3d 	bl	80202e6 <_lv_ll_init>

    /*Initially enable the lv_timer handling*/
    lv_timer_enable(true);
 8021c6c:	2001      	movs	r0, #1
 8021c6e:	f000 f94d 	bl	8021f0c <lv_timer_enable>
}
 8021c72:	bf00      	nop
 8021c74:	bd80      	pop	{r7, pc}
 8021c76:	bf00      	nop
 8021c78:	20000838 	.word	0x20000838

08021c7c <lv_timer_handler>:
/**
 * Call it periodically to handle lv_timers.
 * @return the time after which it must be called again
 */
LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler(void)
{
 8021c7c:	b580      	push	{r7, lr}
 8021c7e:	b086      	sub	sp, #24
 8021c80:	af00      	add	r7, sp, #0
    TIMER_TRACE("begin");

    /*Avoid concurrent running of the timer handler*/
    static bool already_running = false;
    if(already_running) {
 8021c82:	4b59      	ldr	r3, [pc, #356]	; (8021de8 <lv_timer_handler+0x16c>)
 8021c84:	781b      	ldrb	r3, [r3, #0]
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d001      	beq.n	8021c8e <lv_timer_handler+0x12>
        TIMER_TRACE("already running, concurrent calls are not allow, returning");
        return 1;
 8021c8a:	2301      	movs	r3, #1
 8021c8c:	e0a7      	b.n	8021dde <lv_timer_handler+0x162>
    }
    already_running = true;
 8021c8e:	4b56      	ldr	r3, [pc, #344]	; (8021de8 <lv_timer_handler+0x16c>)
 8021c90:	2201      	movs	r2, #1
 8021c92:	701a      	strb	r2, [r3, #0]

    if(lv_timer_run == false) {
 8021c94:	4b55      	ldr	r3, [pc, #340]	; (8021dec <lv_timer_handler+0x170>)
 8021c96:	781b      	ldrb	r3, [r3, #0]
 8021c98:	f083 0301 	eor.w	r3, r3, #1
 8021c9c:	b2db      	uxtb	r3, r3
 8021c9e:	2b00      	cmp	r3, #0
 8021ca0:	d004      	beq.n	8021cac <lv_timer_handler+0x30>
        already_running = false; /*Release mutex*/
 8021ca2:	4b51      	ldr	r3, [pc, #324]	; (8021de8 <lv_timer_handler+0x16c>)
 8021ca4:	2200      	movs	r2, #0
 8021ca6:	701a      	strb	r2, [r3, #0]
        return 1;
 8021ca8:	2301      	movs	r3, #1
 8021caa:	e098      	b.n	8021dde <lv_timer_handler+0x162>
    }

    static uint32_t idle_period_start = 0;
    static uint32_t busy_time         = 0;

    uint32_t handler_start = lv_tick_get();
 8021cac:	f7fc fe82 	bl	801e9b4 <lv_tick_get>
 8021cb0:	60f8      	str	r0, [r7, #12]

    if(handler_start == 0) {
 8021cb2:	68fb      	ldr	r3, [r7, #12]
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	d10b      	bne.n	8021cd0 <lv_timer_handler+0x54>
        static uint32_t run_cnt = 0;
        run_cnt++;
 8021cb8:	4b4d      	ldr	r3, [pc, #308]	; (8021df0 <lv_timer_handler+0x174>)
 8021cba:	681b      	ldr	r3, [r3, #0]
 8021cbc:	3301      	adds	r3, #1
 8021cbe:	4a4c      	ldr	r2, [pc, #304]	; (8021df0 <lv_timer_handler+0x174>)
 8021cc0:	6013      	str	r3, [r2, #0]
        if(run_cnt > 100) {
 8021cc2:	4b4b      	ldr	r3, [pc, #300]	; (8021df0 <lv_timer_handler+0x174>)
 8021cc4:	681b      	ldr	r3, [r3, #0]
 8021cc6:	2b64      	cmp	r3, #100	; 0x64
 8021cc8:	d902      	bls.n	8021cd0 <lv_timer_handler+0x54>
            run_cnt = 0;
 8021cca:	4b49      	ldr	r3, [pc, #292]	; (8021df0 <lv_timer_handler+0x174>)
 8021ccc:	2200      	movs	r2, #0
 8021cce:	601a      	str	r2, [r3, #0]
    }

    /*Run all timer from the list*/
    lv_timer_t * next;
    do {
        timer_deleted             = false;
 8021cd0:	4b48      	ldr	r3, [pc, #288]	; (8021df4 <lv_timer_handler+0x178>)
 8021cd2:	2200      	movs	r2, #0
 8021cd4:	701a      	strb	r2, [r3, #0]
        timer_created             = false;
 8021cd6:	4b48      	ldr	r3, [pc, #288]	; (8021df8 <lv_timer_handler+0x17c>)
 8021cd8:	2200      	movs	r2, #0
 8021cda:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8021cdc:	4847      	ldr	r0, [pc, #284]	; (8021dfc <lv_timer_handler+0x180>)
 8021cde:	f7fe fbe0 	bl	80204a2 <_lv_ll_get_head>
 8021ce2:	4603      	mov	r3, r0
 8021ce4:	4a46      	ldr	r2, [pc, #280]	; (8021e00 <lv_timer_handler+0x184>)
 8021ce6:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8021ce8:	e019      	b.n	8021d1e <lv_timer_handler+0xa2>
            /*The timer might be deleted if it runs only once ('repeat_count = 1')
             *So get next element until the current is surely valid*/
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8021cea:	4b45      	ldr	r3, [pc, #276]	; (8021e00 <lv_timer_handler+0x184>)
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	4619      	mov	r1, r3
 8021cf0:	4842      	ldr	r0, [pc, #264]	; (8021dfc <lv_timer_handler+0x180>)
 8021cf2:	f7fe fbf8 	bl	80204e6 <_lv_ll_get_next>
 8021cf6:	6178      	str	r0, [r7, #20]

            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8021cf8:	4b41      	ldr	r3, [pc, #260]	; (8021e00 <lv_timer_handler+0x184>)
 8021cfa:	681b      	ldr	r3, [r3, #0]
 8021cfc:	4618      	mov	r0, r3
 8021cfe:	f000 f915 	bl	8021f2c <lv_timer_exec>
 8021d02:	4603      	mov	r3, r0
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	d007      	beq.n	8021d18 <lv_timer_handler+0x9c>
                /*If a timer was created or deleted then this or the next item might be corrupted*/
                if(timer_created || timer_deleted) {
 8021d08:	4b3b      	ldr	r3, [pc, #236]	; (8021df8 <lv_timer_handler+0x17c>)
 8021d0a:	781b      	ldrb	r3, [r3, #0]
 8021d0c:	2b00      	cmp	r3, #0
 8021d0e:	d10a      	bne.n	8021d26 <lv_timer_handler+0xaa>
 8021d10:	4b38      	ldr	r3, [pc, #224]	; (8021df4 <lv_timer_handler+0x178>)
 8021d12:	781b      	ldrb	r3, [r3, #0]
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	d106      	bne.n	8021d26 <lv_timer_handler+0xaa>
                    TIMER_TRACE("Start from the first timer again because a timer was created or deleted");
                    break;
                }
            }

            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 8021d18:	4a39      	ldr	r2, [pc, #228]	; (8021e00 <lv_timer_handler+0x184>)
 8021d1a:	697b      	ldr	r3, [r7, #20]
 8021d1c:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8021d1e:	4b38      	ldr	r3, [pc, #224]	; (8021e00 <lv_timer_handler+0x184>)
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d1e1      	bne.n	8021cea <lv_timer_handler+0x6e>
        }
    } while(LV_GC_ROOT(_lv_timer_act));
 8021d26:	4b36      	ldr	r3, [pc, #216]	; (8021e00 <lv_timer_handler+0x184>)
 8021d28:	681b      	ldr	r3, [r3, #0]
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d1d0      	bne.n	8021cd0 <lv_timer_handler+0x54>

    uint32_t time_till_next = LV_NO_TIMER_READY;
 8021d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021d32:	613b      	str	r3, [r7, #16]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8021d34:	4831      	ldr	r0, [pc, #196]	; (8021dfc <lv_timer_handler+0x180>)
 8021d36:	f7fe fbb4 	bl	80204a2 <_lv_ll_get_head>
 8021d3a:	6178      	str	r0, [r7, #20]
    while(next) {
 8021d3c:	e015      	b.n	8021d6a <lv_timer_handler+0xee>
        if(!next->paused) {
 8021d3e:	697b      	ldr	r3, [r7, #20]
 8021d40:	7d1b      	ldrb	r3, [r3, #20]
 8021d42:	f003 0301 	and.w	r3, r3, #1
 8021d46:	b2db      	uxtb	r3, r3
 8021d48:	2b00      	cmp	r3, #0
 8021d4a:	d109      	bne.n	8021d60 <lv_timer_handler+0xe4>
            uint32_t delay = lv_timer_time_remaining(next);
 8021d4c:	6978      	ldr	r0, [r7, #20]
 8021d4e:	f000 f935 	bl	8021fbc <lv_timer_time_remaining>
 8021d52:	6078      	str	r0, [r7, #4]
            if(delay < time_till_next)
 8021d54:	687a      	ldr	r2, [r7, #4]
 8021d56:	693b      	ldr	r3, [r7, #16]
 8021d58:	429a      	cmp	r2, r3
 8021d5a:	d201      	bcs.n	8021d60 <lv_timer_handler+0xe4>
                time_till_next = delay;
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	613b      	str	r3, [r7, #16]
        }

        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8021d60:	6979      	ldr	r1, [r7, #20]
 8021d62:	4826      	ldr	r0, [pc, #152]	; (8021dfc <lv_timer_handler+0x180>)
 8021d64:	f7fe fbbf 	bl	80204e6 <_lv_ll_get_next>
 8021d68:	6178      	str	r0, [r7, #20]
    while(next) {
 8021d6a:	697b      	ldr	r3, [r7, #20]
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d1e6      	bne.n	8021d3e <lv_timer_handler+0xc2>
    }

    busy_time += lv_tick_elaps(handler_start);
 8021d70:	68f8      	ldr	r0, [r7, #12]
 8021d72:	f7fc fe39 	bl	801e9e8 <lv_tick_elaps>
 8021d76:	4602      	mov	r2, r0
 8021d78:	4b22      	ldr	r3, [pc, #136]	; (8021e04 <lv_timer_handler+0x188>)
 8021d7a:	681b      	ldr	r3, [r3, #0]
 8021d7c:	4413      	add	r3, r2
 8021d7e:	4a21      	ldr	r2, [pc, #132]	; (8021e04 <lv_timer_handler+0x188>)
 8021d80:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8021d82:	4b21      	ldr	r3, [pc, #132]	; (8021e08 <lv_timer_handler+0x18c>)
 8021d84:	681b      	ldr	r3, [r3, #0]
 8021d86:	4618      	mov	r0, r3
 8021d88:	f7fc fe2e 	bl	801e9e8 <lv_tick_elaps>
 8021d8c:	60b8      	str	r0, [r7, #8]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8021d8e:	68bb      	ldr	r3, [r7, #8]
 8021d90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8021d94:	d31f      	bcc.n	8021dd6 <lv_timer_handler+0x15a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8021d96:	4b1b      	ldr	r3, [pc, #108]	; (8021e04 <lv_timer_handler+0x188>)
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	2264      	movs	r2, #100	; 0x64
 8021d9c:	fb03 f202 	mul.w	r2, r3, r2
 8021da0:	68bb      	ldr	r3, [r7, #8]
 8021da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8021da6:	b2da      	uxtb	r2, r3
 8021da8:	4b18      	ldr	r3, [pc, #96]	; (8021e0c <lv_timer_handler+0x190>)
 8021daa:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8021dac:	4b17      	ldr	r3, [pc, #92]	; (8021e0c <lv_timer_handler+0x190>)
 8021dae:	781b      	ldrb	r3, [r3, #0]
 8021db0:	2b64      	cmp	r3, #100	; 0x64
 8021db2:	d805      	bhi.n	8021dc0 <lv_timer_handler+0x144>
 8021db4:	4b15      	ldr	r3, [pc, #84]	; (8021e0c <lv_timer_handler+0x190>)
 8021db6:	781b      	ldrb	r3, [r3, #0]
 8021db8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8021dbc:	b2db      	uxtb	r3, r3
 8021dbe:	e000      	b.n	8021dc2 <lv_timer_handler+0x146>
 8021dc0:	2300      	movs	r3, #0
 8021dc2:	4a12      	ldr	r2, [pc, #72]	; (8021e0c <lv_timer_handler+0x190>)
 8021dc4:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8021dc6:	4b0f      	ldr	r3, [pc, #60]	; (8021e04 <lv_timer_handler+0x188>)
 8021dc8:	2200      	movs	r2, #0
 8021dca:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 8021dcc:	f7fc fdf2 	bl	801e9b4 <lv_tick_get>
 8021dd0:	4603      	mov	r3, r0
 8021dd2:	4a0d      	ldr	r2, [pc, #52]	; (8021e08 <lv_timer_handler+0x18c>)
 8021dd4:	6013      	str	r3, [r2, #0]
    }

    already_running = false; /*Release the mutex*/
 8021dd6:	4b04      	ldr	r3, [pc, #16]	; (8021de8 <lv_timer_handler+0x16c>)
 8021dd8:	2200      	movs	r2, #0
 8021dda:	701a      	strb	r2, [r3, #0]

    TIMER_TRACE("finished (%d ms until the next timer call)", time_till_next);
    return time_till_next;
 8021ddc:	693b      	ldr	r3, [r7, #16]
}
 8021dde:	4618      	mov	r0, r3
 8021de0:	3718      	adds	r7, #24
 8021de2:	46bd      	mov	sp, r7
 8021de4:	bd80      	pop	{r7, pc}
 8021de6:	bf00      	nop
 8021de8:	2000ca58 	.word	0x2000ca58
 8021dec:	2000ca54 	.word	0x2000ca54
 8021df0:	2000ca5c 	.word	0x2000ca5c
 8021df4:	2000ca56 	.word	0x2000ca56
 8021df8:	2000ca57 	.word	0x2000ca57
 8021dfc:	20000838 	.word	0x20000838
 8021e00:	200008c8 	.word	0x200008c8
 8021e04:	2000ca60 	.word	0x2000ca60
 8021e08:	2000ca64 	.word	0x2000ca64
 8021e0c:	2000ca55 	.word	0x2000ca55

08021e10 <lv_timer_create>:
 * @param period call period in ms unit
 * @param user_data custom parameter
 * @return pointer to the new timer
 */
lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * user_data)
{
 8021e10:	b580      	push	{r7, lr}
 8021e12:	b086      	sub	sp, #24
 8021e14:	af00      	add	r7, sp, #0
 8021e16:	60f8      	str	r0, [r7, #12]
 8021e18:	60b9      	str	r1, [r7, #8]
 8021e1a:	607a      	str	r2, [r7, #4]
    lv_timer_t * new_timer = NULL;
 8021e1c:	2300      	movs	r3, #0
 8021e1e:	617b      	str	r3, [r7, #20]

    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8021e20:	4815      	ldr	r0, [pc, #84]	; (8021e78 <lv_timer_create+0x68>)
 8021e22:	f7fe fa79 	bl	8020318 <_lv_ll_ins_head>
 8021e26:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(new_timer);
 8021e28:	697b      	ldr	r3, [r7, #20]
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d100      	bne.n	8021e30 <lv_timer_create+0x20>
 8021e2e:	e7fe      	b.n	8021e2e <lv_timer_create+0x1e>
    if(new_timer == NULL) return NULL;
 8021e30:	697b      	ldr	r3, [r7, #20]
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	d101      	bne.n	8021e3a <lv_timer_create+0x2a>
 8021e36:	2300      	movs	r3, #0
 8021e38:	e01a      	b.n	8021e70 <lv_timer_create+0x60>

    new_timer->period = period;
 8021e3a:	697b      	ldr	r3, [r7, #20]
 8021e3c:	68ba      	ldr	r2, [r7, #8]
 8021e3e:	601a      	str	r2, [r3, #0]
    new_timer->timer_cb = timer_xcb;
 8021e40:	697b      	ldr	r3, [r7, #20]
 8021e42:	68fa      	ldr	r2, [r7, #12]
 8021e44:	609a      	str	r2, [r3, #8]
    new_timer->repeat_count = -1;
 8021e46:	697b      	ldr	r3, [r7, #20]
 8021e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021e4c:	611a      	str	r2, [r3, #16]
    new_timer->paused = 0;
 8021e4e:	697a      	ldr	r2, [r7, #20]
 8021e50:	7d13      	ldrb	r3, [r2, #20]
 8021e52:	f36f 0300 	bfc	r3, #0, #1
 8021e56:	7513      	strb	r3, [r2, #20]
    new_timer->last_run = lv_tick_get();
 8021e58:	f7fc fdac 	bl	801e9b4 <lv_tick_get>
 8021e5c:	4602      	mov	r2, r0
 8021e5e:	697b      	ldr	r3, [r7, #20]
 8021e60:	605a      	str	r2, [r3, #4]
    new_timer->user_data = user_data;
 8021e62:	697b      	ldr	r3, [r7, #20]
 8021e64:	687a      	ldr	r2, [r7, #4]
 8021e66:	60da      	str	r2, [r3, #12]

    timer_created = true;
 8021e68:	4b04      	ldr	r3, [pc, #16]	; (8021e7c <lv_timer_create+0x6c>)
 8021e6a:	2201      	movs	r2, #1
 8021e6c:	701a      	strb	r2, [r3, #0]

    return new_timer;
 8021e6e:	697b      	ldr	r3, [r7, #20]
}
 8021e70:	4618      	mov	r0, r3
 8021e72:	3718      	adds	r7, #24
 8021e74:	46bd      	mov	sp, r7
 8021e76:	bd80      	pop	{r7, pc}
 8021e78:	20000838 	.word	0x20000838
 8021e7c:	2000ca57 	.word	0x2000ca57

08021e80 <lv_timer_del>:
/**
 * Delete a lv_timer
 * @param timer pointer to timer created by timer
 */
void lv_timer_del(lv_timer_t * timer)
{
 8021e80:	b580      	push	{r7, lr}
 8021e82:	b082      	sub	sp, #8
 8021e84:	af00      	add	r7, sp, #0
 8021e86:	6078      	str	r0, [r7, #4]
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8021e88:	6879      	ldr	r1, [r7, #4]
 8021e8a:	4806      	ldr	r0, [pc, #24]	; (8021ea4 <lv_timer_del+0x24>)
 8021e8c:	f7fe faac 	bl	80203e8 <_lv_ll_remove>
    timer_deleted = true;
 8021e90:	4b05      	ldr	r3, [pc, #20]	; (8021ea8 <lv_timer_del+0x28>)
 8021e92:	2201      	movs	r2, #1
 8021e94:	701a      	strb	r2, [r3, #0]

    lv_mem_free(timer);
 8021e96:	6878      	ldr	r0, [r7, #4]
 8021e98:	f7fe fcf2 	bl	8020880 <lv_mem_free>
}
 8021e9c:	bf00      	nop
 8021e9e:	3708      	adds	r7, #8
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	bd80      	pop	{r7, pc}
 8021ea4:	20000838 	.word	0x20000838
 8021ea8:	2000ca56 	.word	0x2000ca56

08021eac <lv_timer_pause>:
/**
 * Pause/resume a timer.
 * @param timer pointer to an lv_timer
 */
void lv_timer_pause(lv_timer_t * timer)
{
 8021eac:	b480      	push	{r7}
 8021eae:	b083      	sub	sp, #12
 8021eb0:	af00      	add	r7, sp, #0
 8021eb2:	6078      	str	r0, [r7, #4]
    timer->paused = true;
 8021eb4:	687a      	ldr	r2, [r7, #4]
 8021eb6:	7d13      	ldrb	r3, [r2, #20]
 8021eb8:	f043 0301 	orr.w	r3, r3, #1
 8021ebc:	7513      	strb	r3, [r2, #20]
}
 8021ebe:	bf00      	nop
 8021ec0:	370c      	adds	r7, #12
 8021ec2:	46bd      	mov	sp, r7
 8021ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ec8:	4770      	bx	lr

08021eca <lv_timer_resume>:

void lv_timer_resume(lv_timer_t * timer)
{
 8021eca:	b480      	push	{r7}
 8021ecc:	b083      	sub	sp, #12
 8021ece:	af00      	add	r7, sp, #0
 8021ed0:	6078      	str	r0, [r7, #4]
    timer->paused = false;
 8021ed2:	687a      	ldr	r2, [r7, #4]
 8021ed4:	7d13      	ldrb	r3, [r2, #20]
 8021ed6:	f36f 0300 	bfc	r3, #0, #1
 8021eda:	7513      	strb	r3, [r2, #20]
}
 8021edc:	bf00      	nop
 8021ede:	370c      	adds	r7, #12
 8021ee0:	46bd      	mov	sp, r7
 8021ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee6:	4770      	bx	lr

08021ee8 <lv_timer_ready>:
/**
 * Make a lv_timer ready. It will not wait its period.
 * @param timer pointer to a lv_timer.
 */
void lv_timer_ready(lv_timer_t * timer)
{
 8021ee8:	b580      	push	{r7, lr}
 8021eea:	b082      	sub	sp, #8
 8021eec:	af00      	add	r7, sp, #0
 8021eee:	6078      	str	r0, [r7, #4]
    timer->last_run = lv_tick_get() - timer->period - 1;
 8021ef0:	f7fc fd60 	bl	801e9b4 <lv_tick_get>
 8021ef4:	4602      	mov	r2, r0
 8021ef6:	687b      	ldr	r3, [r7, #4]
 8021ef8:	681b      	ldr	r3, [r3, #0]
 8021efa:	1ad3      	subs	r3, r2, r3
 8021efc:	1e5a      	subs	r2, r3, #1
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	605a      	str	r2, [r3, #4]
}
 8021f02:	bf00      	nop
 8021f04:	3708      	adds	r7, #8
 8021f06:	46bd      	mov	sp, r7
 8021f08:	bd80      	pop	{r7, pc}
	...

08021f0c <lv_timer_enable>:
/**
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
 8021f0c:	b480      	push	{r7}
 8021f0e:	b083      	sub	sp, #12
 8021f10:	af00      	add	r7, sp, #0
 8021f12:	4603      	mov	r3, r0
 8021f14:	71fb      	strb	r3, [r7, #7]
    lv_timer_run = en;
 8021f16:	4a04      	ldr	r2, [pc, #16]	; (8021f28 <lv_timer_enable+0x1c>)
 8021f18:	79fb      	ldrb	r3, [r7, #7]
 8021f1a:	7013      	strb	r3, [r2, #0]
}
 8021f1c:	bf00      	nop
 8021f1e:	370c      	adds	r7, #12
 8021f20:	46bd      	mov	sp, r7
 8021f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f26:	4770      	bx	lr
 8021f28:	2000ca54 	.word	0x2000ca54

08021f2c <lv_timer_exec>:
 * Execute timer if its remaining time is zero
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
 8021f2c:	b580      	push	{r7, lr}
 8021f2e:	b084      	sub	sp, #16
 8021f30:	af00      	add	r7, sp, #0
 8021f32:	6078      	str	r0, [r7, #4]
    if(timer->paused) return false;
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	7d1b      	ldrb	r3, [r3, #20]
 8021f38:	f003 0301 	and.w	r3, r3, #1
 8021f3c:	b2db      	uxtb	r3, r3
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	d001      	beq.n	8021f46 <lv_timer_exec+0x1a>
 8021f42:	2300      	movs	r3, #0
 8021f44:	e034      	b.n	8021fb0 <lv_timer_exec+0x84>

    bool exec = false;
 8021f46:	2300      	movs	r3, #0
 8021f48:	73fb      	strb	r3, [r7, #15]
    if(lv_timer_time_remaining(timer) == 0) {
 8021f4a:	6878      	ldr	r0, [r7, #4]
 8021f4c:	f000 f836 	bl	8021fbc <lv_timer_time_remaining>
 8021f50:	4603      	mov	r3, r0
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	d11d      	bne.n	8021f92 <lv_timer_exec+0x66>
        /* Decrement the repeat count before executing the timer_cb.
         * If any timer is deleted `if(timer->repeat_count == 0)` is not executed below
         * but at least the repeat count is zero and the timer can be deleted in the next round*/
        int32_t original_repeat_count = timer->repeat_count;
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	691b      	ldr	r3, [r3, #16]
 8021f5a:	60bb      	str	r3, [r7, #8]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	691b      	ldr	r3, [r3, #16]
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	dd04      	ble.n	8021f6e <lv_timer_exec+0x42>
 8021f64:	687b      	ldr	r3, [r7, #4]
 8021f66:	691b      	ldr	r3, [r3, #16]
 8021f68:	1e5a      	subs	r2, r3, #1
 8021f6a:	687b      	ldr	r3, [r7, #4]
 8021f6c:	611a      	str	r2, [r3, #16]
        timer->last_run = lv_tick_get();
 8021f6e:	f7fc fd21 	bl	801e9b4 <lv_tick_get>
 8021f72:	4602      	mov	r2, r0
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	605a      	str	r2, [r3, #4]
        TIMER_TRACE("calling timer callback: %p", *((void **)&timer->timer_cb));
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	689b      	ldr	r3, [r3, #8]
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d006      	beq.n	8021f8e <lv_timer_exec+0x62>
 8021f80:	68bb      	ldr	r3, [r7, #8]
 8021f82:	2b00      	cmp	r3, #0
 8021f84:	d003      	beq.n	8021f8e <lv_timer_exec+0x62>
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	689b      	ldr	r3, [r3, #8]
 8021f8a:	6878      	ldr	r0, [r7, #4]
 8021f8c:	4798      	blx	r3
        TIMER_TRACE("timer callback %p finished", *((void **)&timer->timer_cb));
        LV_ASSERT_MEM_INTEGRITY();
        exec = true;
 8021f8e:	2301      	movs	r3, #1
 8021f90:	73fb      	strb	r3, [r7, #15]
    }

    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8021f92:	4b09      	ldr	r3, [pc, #36]	; (8021fb8 <lv_timer_exec+0x8c>)
 8021f94:	781b      	ldrb	r3, [r3, #0]
 8021f96:	f083 0301 	eor.w	r3, r3, #1
 8021f9a:	b2db      	uxtb	r3, r3
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d006      	beq.n	8021fae <lv_timer_exec+0x82>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	691b      	ldr	r3, [r3, #16]
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d102      	bne.n	8021fae <lv_timer_exec+0x82>
            TIMER_TRACE("deleting timer with %p callback because the repeat count is over", *((void **)&timer->timer_cb));
            lv_timer_del(timer);
 8021fa8:	6878      	ldr	r0, [r7, #4]
 8021faa:	f7ff ff69 	bl	8021e80 <lv_timer_del>
        }
    }

    return exec;
 8021fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8021fb0:	4618      	mov	r0, r3
 8021fb2:	3710      	adds	r7, #16
 8021fb4:	46bd      	mov	sp, r7
 8021fb6:	bd80      	pop	{r7, pc}
 8021fb8:	2000ca56 	.word	0x2000ca56

08021fbc <lv_timer_time_remaining>:
 * Find out how much time remains before a timer must be run.
 * @param timer pointer to lv_timer
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
 8021fbc:	b580      	push	{r7, lr}
 8021fbe:	b084      	sub	sp, #16
 8021fc0:	af00      	add	r7, sp, #0
 8021fc2:	6078      	str	r0, [r7, #4]
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	685b      	ldr	r3, [r3, #4]
 8021fc8:	4618      	mov	r0, r3
 8021fca:	f7fc fd0d 	bl	801e9e8 <lv_tick_elaps>
 8021fce:	60f8      	str	r0, [r7, #12]
    if(elp >= timer->period)
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	681b      	ldr	r3, [r3, #0]
 8021fd4:	68fa      	ldr	r2, [r7, #12]
 8021fd6:	429a      	cmp	r2, r3
 8021fd8:	d301      	bcc.n	8021fde <lv_timer_time_remaining+0x22>
        return 0;
 8021fda:	2300      	movs	r3, #0
 8021fdc:	e003      	b.n	8021fe6 <lv_timer_time_remaining+0x2a>
    return timer->period - elp;
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	681a      	ldr	r2, [r3, #0]
 8021fe2:	68fb      	ldr	r3, [r7, #12]
 8021fe4:	1ad3      	subs	r3, r2, r3
}
 8021fe6:	4618      	mov	r0, r3
 8021fe8:	3710      	adds	r7, #16
 8021fea:	46bd      	mov	sp, r7
 8021fec:	bd80      	pop	{r7, pc}

08021fee <tlsf_ffs>:
}

#else

tlsf_decl int tlsf_ffs(unsigned int word)
{
 8021fee:	b480      	push	{r7}
 8021ff0:	b083      	sub	sp, #12
 8021ff2:	af00      	add	r7, sp, #0
 8021ff4:	6078      	str	r0, [r7, #4]
    return __builtin_ffs(word) - 1;
 8021ff6:	687b      	ldr	r3, [r7, #4]
 8021ff8:	fa93 f2a3 	rbit	r2, r3
 8021ffc:	fab2 f282 	clz	r2, r2
 8022000:	2b00      	cmp	r3, #0
 8022002:	d101      	bne.n	8022008 <tlsf_ffs+0x1a>
 8022004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022008:	1c53      	adds	r3, r2, #1
 802200a:	3b01      	subs	r3, #1
}
 802200c:	4618      	mov	r0, r3
 802200e:	370c      	adds	r7, #12
 8022010:	46bd      	mov	sp, r7
 8022012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022016:	4770      	bx	lr

08022018 <tlsf_fls>:

#endif

tlsf_decl int tlsf_fls(unsigned int word)
{
 8022018:	b480      	push	{r7}
 802201a:	b085      	sub	sp, #20
 802201c:	af00      	add	r7, sp, #0
 802201e:	6078      	str	r0, [r7, #4]
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	2b00      	cmp	r3, #0
 8022024:	d005      	beq.n	8022032 <tlsf_fls+0x1a>
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	fab3 f383 	clz	r3, r3
 802202c:	f1c3 0320 	rsb	r3, r3, #32
 8022030:	e000      	b.n	8022034 <tlsf_fls+0x1c>
 8022032:	2300      	movs	r3, #0
 8022034:	60fb      	str	r3, [r7, #12]
    return bit - 1;
 8022036:	68fb      	ldr	r3, [r7, #12]
 8022038:	3b01      	subs	r3, #1
}
 802203a:	4618      	mov	r0, r3
 802203c:	3714      	adds	r7, #20
 802203e:	46bd      	mov	sp, r7
 8022040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022044:	4770      	bx	lr

08022046 <block_size>:
/*
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
 8022046:	b480      	push	{r7}
 8022048:	b083      	sub	sp, #12
 802204a:	af00      	add	r7, sp, #0
 802204c:	6078      	str	r0, [r7, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	685a      	ldr	r2, [r3, #4]
 8022052:	2101      	movs	r1, #1
 8022054:	2302      	movs	r3, #2
 8022056:	430b      	orrs	r3, r1
 8022058:	43db      	mvns	r3, r3
 802205a:	4013      	ands	r3, r2
}
 802205c:	4618      	mov	r0, r3
 802205e:	370c      	adds	r7, #12
 8022060:	46bd      	mov	sp, r7
 8022062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022066:	4770      	bx	lr

08022068 <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
 8022068:	b480      	push	{r7}
 802206a:	b085      	sub	sp, #20
 802206c:	af00      	add	r7, sp, #0
 802206e:	6078      	str	r0, [r7, #4]
 8022070:	6039      	str	r1, [r7, #0]
    const size_t oldsize = block->size;
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	685b      	ldr	r3, [r3, #4]
 8022076:	60fb      	str	r3, [r7, #12]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8022078:	2201      	movs	r2, #1
 802207a:	2302      	movs	r3, #2
 802207c:	431a      	orrs	r2, r3
 802207e:	68fb      	ldr	r3, [r7, #12]
 8022080:	401a      	ands	r2, r3
 8022082:	683b      	ldr	r3, [r7, #0]
 8022084:	431a      	orrs	r2, r3
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	605a      	str	r2, [r3, #4]
}
 802208a:	bf00      	nop
 802208c:	3714      	adds	r7, #20
 802208e:	46bd      	mov	sp, r7
 8022090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022094:	4770      	bx	lr

08022096 <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 8022096:	b580      	push	{r7, lr}
 8022098:	b082      	sub	sp, #8
 802209a:	af00      	add	r7, sp, #0
 802209c:	6078      	str	r0, [r7, #4]
    return block_size(block) == 0;
 802209e:	6878      	ldr	r0, [r7, #4]
 80220a0:	f7ff ffd1 	bl	8022046 <block_size>
 80220a4:	4603      	mov	r3, r0
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	bf0c      	ite	eq
 80220aa:	2301      	moveq	r3, #1
 80220ac:	2300      	movne	r3, #0
 80220ae:	b2db      	uxtb	r3, r3
}
 80220b0:	4618      	mov	r0, r3
 80220b2:	3708      	adds	r7, #8
 80220b4:	46bd      	mov	sp, r7
 80220b6:	bd80      	pop	{r7, pc}

080220b8 <block_is_free>:

static int block_is_free(const block_header_t * block)
{
 80220b8:	b480      	push	{r7}
 80220ba:	b083      	sub	sp, #12
 80220bc:	af00      	add	r7, sp, #0
 80220be:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	685b      	ldr	r3, [r3, #4]
 80220c4:	2201      	movs	r2, #1
 80220c6:	4013      	ands	r3, r2
}
 80220c8:	4618      	mov	r0, r3
 80220ca:	370c      	adds	r7, #12
 80220cc:	46bd      	mov	sp, r7
 80220ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220d2:	4770      	bx	lr

080220d4 <block_set_free>:

static void block_set_free(block_header_t * block)
{
 80220d4:	b480      	push	{r7}
 80220d6:	b083      	sub	sp, #12
 80220d8:	af00      	add	r7, sp, #0
 80220da:	6078      	str	r0, [r7, #4]
    block->size |= block_header_free_bit;
 80220dc:	687b      	ldr	r3, [r7, #4]
 80220de:	685b      	ldr	r3, [r3, #4]
 80220e0:	2201      	movs	r2, #1
 80220e2:	431a      	orrs	r2, r3
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	605a      	str	r2, [r3, #4]
}
 80220e8:	bf00      	nop
 80220ea:	370c      	adds	r7, #12
 80220ec:	46bd      	mov	sp, r7
 80220ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220f2:	4770      	bx	lr

080220f4 <block_set_used>:

static void block_set_used(block_header_t * block)
{
 80220f4:	b480      	push	{r7}
 80220f6:	b083      	sub	sp, #12
 80220f8:	af00      	add	r7, sp, #0
 80220fa:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_free_bit;
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	685a      	ldr	r2, [r3, #4]
 8022100:	2301      	movs	r3, #1
 8022102:	43db      	mvns	r3, r3
 8022104:	401a      	ands	r2, r3
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	605a      	str	r2, [r3, #4]
}
 802210a:	bf00      	nop
 802210c:	370c      	adds	r7, #12
 802210e:	46bd      	mov	sp, r7
 8022110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022114:	4770      	bx	lr

08022116 <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
 8022116:	b480      	push	{r7}
 8022118:	b083      	sub	sp, #12
 802211a:	af00      	add	r7, sp, #0
 802211c:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	685b      	ldr	r3, [r3, #4]
 8022122:	2202      	movs	r2, #2
 8022124:	4013      	ands	r3, r2
}
 8022126:	4618      	mov	r0, r3
 8022128:	370c      	adds	r7, #12
 802212a:	46bd      	mov	sp, r7
 802212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022130:	4770      	bx	lr

08022132 <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
 8022132:	b480      	push	{r7}
 8022134:	b083      	sub	sp, #12
 8022136:	af00      	add	r7, sp, #0
 8022138:	6078      	str	r0, [r7, #4]
    block->size |= block_header_prev_free_bit;
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	685b      	ldr	r3, [r3, #4]
 802213e:	2202      	movs	r2, #2
 8022140:	431a      	orrs	r2, r3
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	605a      	str	r2, [r3, #4]
}
 8022146:	bf00      	nop
 8022148:	370c      	adds	r7, #12
 802214a:	46bd      	mov	sp, r7
 802214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022150:	4770      	bx	lr

08022152 <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
 8022152:	b480      	push	{r7}
 8022154:	b083      	sub	sp, #12
 8022156:	af00      	add	r7, sp, #0
 8022158:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_prev_free_bit;
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	685a      	ldr	r2, [r3, #4]
 802215e:	2302      	movs	r3, #2
 8022160:	43db      	mvns	r3, r3
 8022162:	401a      	ands	r2, r3
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	605a      	str	r2, [r3, #4]
}
 8022168:	bf00      	nop
 802216a:	370c      	adds	r7, #12
 802216c:	46bd      	mov	sp, r7
 802216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022172:	4770      	bx	lr

08022174 <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
 8022174:	b480      	push	{r7}
 8022176:	b083      	sub	sp, #12
 8022178:	af00      	add	r7, sp, #0
 802217a:	6078      	str	r0, [r7, #4]
    return tlsf_cast(block_header_t *,
 802217c:	2308      	movs	r3, #8
 802217e:	425b      	negs	r3, r3
 8022180:	687a      	ldr	r2, [r7, #4]
 8022182:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 8022184:	4618      	mov	r0, r3
 8022186:	370c      	adds	r7, #12
 8022188:	46bd      	mov	sp, r7
 802218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802218e:	4770      	bx	lr

08022190 <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
 8022190:	b480      	push	{r7}
 8022192:	b083      	sub	sp, #12
 8022194:	af00      	add	r7, sp, #0
 8022196:	6078      	str	r0, [r7, #4]
    return tlsf_cast(void *,
 8022198:	2208      	movs	r2, #8
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 802219e:	4618      	mov	r0, r3
 80221a0:	370c      	adds	r7, #12
 80221a2:	46bd      	mov	sp, r7
 80221a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221a8:	4770      	bx	lr

080221aa <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
 80221aa:	b480      	push	{r7}
 80221ac:	b083      	sub	sp, #12
 80221ae:	af00      	add	r7, sp, #0
 80221b0:	6078      	str	r0, [r7, #4]
 80221b2:	6039      	str	r1, [r7, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80221b4:	687a      	ldr	r2, [r7, #4]
 80221b6:	683b      	ldr	r3, [r7, #0]
 80221b8:	4413      	add	r3, r2
}
 80221ba:	4618      	mov	r0, r3
 80221bc:	370c      	adds	r7, #12
 80221be:	46bd      	mov	sp, r7
 80221c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221c4:	4770      	bx	lr

080221c6 <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 80221c6:	b580      	push	{r7, lr}
 80221c8:	b082      	sub	sp, #8
 80221ca:	af00      	add	r7, sp, #0
 80221cc:	6078      	str	r0, [r7, #4]
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 80221ce:	6878      	ldr	r0, [r7, #4]
 80221d0:	f7ff ffa1 	bl	8022116 <block_is_prev_free>
 80221d4:	4603      	mov	r3, r0
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	d100      	bne.n	80221dc <block_prev+0x16>
 80221da:	e7fe      	b.n	80221da <block_prev+0x14>
    return block->prev_phys_block;
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	681b      	ldr	r3, [r3, #0]
}
 80221e0:	4618      	mov	r0, r3
 80221e2:	3708      	adds	r7, #8
 80221e4:	46bd      	mov	sp, r7
 80221e6:	bd80      	pop	{r7, pc}

080221e8 <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 80221e8:	b590      	push	{r4, r7, lr}
 80221ea:	b085      	sub	sp, #20
 80221ec:	af00      	add	r7, sp, #0
 80221ee:	6078      	str	r0, [r7, #4]
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80221f0:	6878      	ldr	r0, [r7, #4]
 80221f2:	f7ff ffcd 	bl	8022190 <block_to_ptr>
 80221f6:	4604      	mov	r4, r0
                                            block_size(block) - block_header_overhead);
 80221f8:	6878      	ldr	r0, [r7, #4]
 80221fa:	f7ff ff24 	bl	8022046 <block_size>
 80221fe:	4603      	mov	r3, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 8022200:	2204      	movs	r2, #4
 8022202:	1a9b      	subs	r3, r3, r2
 8022204:	4619      	mov	r1, r3
 8022206:	4620      	mov	r0, r4
 8022208:	f7ff ffcf 	bl	80221aa <offset_to_block>
 802220c:	60f8      	str	r0, [r7, #12]
    tlsf_assert(!block_is_last(block));
 802220e:	6878      	ldr	r0, [r7, #4]
 8022210:	f7ff ff41 	bl	8022096 <block_is_last>
 8022214:	4603      	mov	r3, r0
 8022216:	2b00      	cmp	r3, #0
 8022218:	d000      	beq.n	802221c <block_next+0x34>
 802221a:	e7fe      	b.n	802221a <block_next+0x32>
    return next;
 802221c:	68fb      	ldr	r3, [r7, #12]
}
 802221e:	4618      	mov	r0, r3
 8022220:	3714      	adds	r7, #20
 8022222:	46bd      	mov	sp, r7
 8022224:	bd90      	pop	{r4, r7, pc}

08022226 <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 8022226:	b580      	push	{r7, lr}
 8022228:	b084      	sub	sp, #16
 802222a:	af00      	add	r7, sp, #0
 802222c:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 802222e:	6878      	ldr	r0, [r7, #4]
 8022230:	f7ff ffda 	bl	80221e8 <block_next>
 8022234:	60f8      	str	r0, [r7, #12]
    next->prev_phys_block = block;
 8022236:	68fb      	ldr	r3, [r7, #12]
 8022238:	687a      	ldr	r2, [r7, #4]
 802223a:	601a      	str	r2, [r3, #0]
    return next;
 802223c:	68fb      	ldr	r3, [r7, #12]
}
 802223e:	4618      	mov	r0, r3
 8022240:	3710      	adds	r7, #16
 8022242:	46bd      	mov	sp, r7
 8022244:	bd80      	pop	{r7, pc}

08022246 <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 8022246:	b580      	push	{r7, lr}
 8022248:	b084      	sub	sp, #16
 802224a:	af00      	add	r7, sp, #0
 802224c:	6078      	str	r0, [r7, #4]
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 802224e:	6878      	ldr	r0, [r7, #4]
 8022250:	f7ff ffe9 	bl	8022226 <block_link_next>
 8022254:	60f8      	str	r0, [r7, #12]
    block_set_prev_free(next);
 8022256:	68f8      	ldr	r0, [r7, #12]
 8022258:	f7ff ff6b 	bl	8022132 <block_set_prev_free>
    block_set_free(block);
 802225c:	6878      	ldr	r0, [r7, #4]
 802225e:	f7ff ff39 	bl	80220d4 <block_set_free>
}
 8022262:	bf00      	nop
 8022264:	3710      	adds	r7, #16
 8022266:	46bd      	mov	sp, r7
 8022268:	bd80      	pop	{r7, pc}

0802226a <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 802226a:	b580      	push	{r7, lr}
 802226c:	b084      	sub	sp, #16
 802226e:	af00      	add	r7, sp, #0
 8022270:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 8022272:	6878      	ldr	r0, [r7, #4]
 8022274:	f7ff ffb8 	bl	80221e8 <block_next>
 8022278:	60f8      	str	r0, [r7, #12]
    block_set_prev_used(next);
 802227a:	68f8      	ldr	r0, [r7, #12]
 802227c:	f7ff ff69 	bl	8022152 <block_set_prev_used>
    block_set_used(block);
 8022280:	6878      	ldr	r0, [r7, #4]
 8022282:	f7ff ff37 	bl	80220f4 <block_set_used>
}
 8022286:	bf00      	nop
 8022288:	3710      	adds	r7, #16
 802228a:	46bd      	mov	sp, r7
 802228c:	bd80      	pop	{r7, pc}

0802228e <align_up>:

static size_t align_up(size_t x, size_t align)
{
 802228e:	b480      	push	{r7}
 8022290:	b083      	sub	sp, #12
 8022292:	af00      	add	r7, sp, #0
 8022294:	6078      	str	r0, [r7, #4]
 8022296:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8022298:	683b      	ldr	r3, [r7, #0]
 802229a:	1e5a      	subs	r2, r3, #1
 802229c:	683b      	ldr	r3, [r7, #0]
 802229e:	4013      	ands	r3, r2
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d000      	beq.n	80222a6 <align_up+0x18>
 80222a4:	e7fe      	b.n	80222a4 <align_up+0x16>
    return (x + (align - 1)) & ~(align - 1);
 80222a6:	683a      	ldr	r2, [r7, #0]
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	4413      	add	r3, r2
 80222ac:	1e5a      	subs	r2, r3, #1
 80222ae:	683b      	ldr	r3, [r7, #0]
 80222b0:	425b      	negs	r3, r3
 80222b2:	4013      	ands	r3, r2
}
 80222b4:	4618      	mov	r0, r3
 80222b6:	370c      	adds	r7, #12
 80222b8:	46bd      	mov	sp, r7
 80222ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222be:	4770      	bx	lr

080222c0 <align_down>:

static size_t align_down(size_t x, size_t align)
{
 80222c0:	b480      	push	{r7}
 80222c2:	b083      	sub	sp, #12
 80222c4:	af00      	add	r7, sp, #0
 80222c6:	6078      	str	r0, [r7, #4]
 80222c8:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80222ca:	683b      	ldr	r3, [r7, #0]
 80222cc:	1e5a      	subs	r2, r3, #1
 80222ce:	683b      	ldr	r3, [r7, #0]
 80222d0:	4013      	ands	r3, r2
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d000      	beq.n	80222d8 <align_down+0x18>
 80222d6:	e7fe      	b.n	80222d6 <align_down+0x16>
    return x - (x & (align - 1));
 80222d8:	683b      	ldr	r3, [r7, #0]
 80222da:	425a      	negs	r2, r3
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	4013      	ands	r3, r2
}
 80222e0:	4618      	mov	r0, r3
 80222e2:	370c      	adds	r7, #12
 80222e4:	46bd      	mov	sp, r7
 80222e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ea:	4770      	bx	lr

080222ec <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
 80222ec:	b480      	push	{r7}
 80222ee:	b085      	sub	sp, #20
 80222f0:	af00      	add	r7, sp, #0
 80222f2:	6078      	str	r0, [r7, #4]
 80222f4:	6039      	str	r1, [r7, #0]
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80222f6:	687a      	ldr	r2, [r7, #4]
 80222f8:	683b      	ldr	r3, [r7, #0]
 80222fa:	4413      	add	r3, r2
 80222fc:	1e5a      	subs	r2, r3, #1
 80222fe:	683b      	ldr	r3, [r7, #0]
 8022300:	425b      	negs	r3, r3
 8022302:	4013      	ands	r3, r2
    const tlsfptr_t aligned =
 8022304:	60fb      	str	r3, [r7, #12]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8022306:	683b      	ldr	r3, [r7, #0]
 8022308:	1e5a      	subs	r2, r3, #1
 802230a:	683b      	ldr	r3, [r7, #0]
 802230c:	4013      	ands	r3, r2
 802230e:	2b00      	cmp	r3, #0
 8022310:	d000      	beq.n	8022314 <align_ptr+0x28>
 8022312:	e7fe      	b.n	8022312 <align_ptr+0x26>
    return tlsf_cast(void *, aligned);
 8022314:	68fb      	ldr	r3, [r7, #12]
}
 8022316:	4618      	mov	r0, r3
 8022318:	3714      	adds	r7, #20
 802231a:	46bd      	mov	sp, r7
 802231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022320:	4770      	bx	lr

08022322 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 8022322:	b580      	push	{r7, lr}
 8022324:	b084      	sub	sp, #16
 8022326:	af00      	add	r7, sp, #0
 8022328:	6078      	str	r0, [r7, #4]
 802232a:	6039      	str	r1, [r7, #0]
    size_t adjust = 0;
 802232c:	2300      	movs	r3, #0
 802232e:	60fb      	str	r3, [r7, #12]
    if(size) {
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	2b00      	cmp	r3, #0
 8022334:	d00f      	beq.n	8022356 <adjust_request_size+0x34>
        const size_t aligned = align_up(size, align);
 8022336:	6839      	ldr	r1, [r7, #0]
 8022338:	6878      	ldr	r0, [r7, #4]
 802233a:	f7ff ffa8 	bl	802228e <align_up>
 802233e:	60b8      	str	r0, [r7, #8]

        /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
        if(aligned < block_size_max) {
 8022340:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8022344:	68bb      	ldr	r3, [r7, #8]
 8022346:	4293      	cmp	r3, r2
 8022348:	d205      	bcs.n	8022356 <adjust_request_size+0x34>
            adjust = tlsf_max(aligned, block_size_min);
 802234a:	220c      	movs	r2, #12
 802234c:	68bb      	ldr	r3, [r7, #8]
 802234e:	4293      	cmp	r3, r2
 8022350:	bf38      	it	cc
 8022352:	4613      	movcc	r3, r2
 8022354:	60fb      	str	r3, [r7, #12]
        }
    }
    return adjust;
 8022356:	68fb      	ldr	r3, [r7, #12]
}
 8022358:	4618      	mov	r0, r3
 802235a:	3710      	adds	r7, #16
 802235c:	46bd      	mov	sp, r7
 802235e:	bd80      	pop	{r7, pc}

08022360 <mapping_insert>:
** TLSF utility functions. In most cases, these are direct translations of
** the documentation found in the white paper.
*/

static void mapping_insert(size_t size, int * fli, int * sli)
{
 8022360:	b580      	push	{r7, lr}
 8022362:	b086      	sub	sp, #24
 8022364:	af00      	add	r7, sp, #0
 8022366:	60f8      	str	r0, [r7, #12]
 8022368:	60b9      	str	r1, [r7, #8]
 802236a:	607a      	str	r2, [r7, #4]
    int fl, sl;
    if(size < SMALL_BLOCK_SIZE) {
 802236c:	68fb      	ldr	r3, [r7, #12]
 802236e:	2b7f      	cmp	r3, #127	; 0x7f
 8022370:	d808      	bhi.n	8022384 <mapping_insert+0x24>
        /* Store small blocks in first list. */
        fl = 0;
 8022372:	2300      	movs	r3, #0
 8022374:	617b      	str	r3, [r7, #20]
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8022376:	68fb      	ldr	r3, [r7, #12]
 8022378:	2b00      	cmp	r3, #0
 802237a:	da00      	bge.n	802237e <mapping_insert+0x1e>
 802237c:	3303      	adds	r3, #3
 802237e:	109b      	asrs	r3, r3, #2
 8022380:	613b      	str	r3, [r7, #16]
 8022382:	e00e      	b.n	80223a2 <mapping_insert+0x42>
    }
    else {
        fl = tlsf_fls_sizet(size);
 8022384:	68f8      	ldr	r0, [r7, #12]
 8022386:	f7ff fe47 	bl	8022018 <tlsf_fls>
 802238a:	6178      	str	r0, [r7, #20]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 802238c:	697b      	ldr	r3, [r7, #20]
 802238e:	3b05      	subs	r3, #5
 8022390:	68fa      	ldr	r2, [r7, #12]
 8022392:	fa22 f303 	lsr.w	r3, r2, r3
 8022396:	f083 0320 	eor.w	r3, r3, #32
 802239a:	613b      	str	r3, [r7, #16]
        fl -= (FL_INDEX_SHIFT - 1);
 802239c:	697b      	ldr	r3, [r7, #20]
 802239e:	3b06      	subs	r3, #6
 80223a0:	617b      	str	r3, [r7, #20]
    }
    *fli = fl;
 80223a2:	68bb      	ldr	r3, [r7, #8]
 80223a4:	697a      	ldr	r2, [r7, #20]
 80223a6:	601a      	str	r2, [r3, #0]
    *sli = sl;
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	693a      	ldr	r2, [r7, #16]
 80223ac:	601a      	str	r2, [r3, #0]
}
 80223ae:	bf00      	nop
 80223b0:	3718      	adds	r7, #24
 80223b2:	46bd      	mov	sp, r7
 80223b4:	bd80      	pop	{r7, pc}

080223b6 <mapping_search>:

/* This version rounds up to the next block size (for allocations) */
static void mapping_search(size_t size, int * fli, int * sli)
{
 80223b6:	b580      	push	{r7, lr}
 80223b8:	b086      	sub	sp, #24
 80223ba:	af00      	add	r7, sp, #0
 80223bc:	60f8      	str	r0, [r7, #12]
 80223be:	60b9      	str	r1, [r7, #8]
 80223c0:	607a      	str	r2, [r7, #4]
    if(size >= SMALL_BLOCK_SIZE) {
 80223c2:	68fb      	ldr	r3, [r7, #12]
 80223c4:	2b7f      	cmp	r3, #127	; 0x7f
 80223c6:	d90d      	bls.n	80223e4 <mapping_search+0x2e>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 80223c8:	68f8      	ldr	r0, [r7, #12]
 80223ca:	f7ff fe25 	bl	8022018 <tlsf_fls>
 80223ce:	4603      	mov	r3, r0
 80223d0:	3b05      	subs	r3, #5
 80223d2:	2201      	movs	r2, #1
 80223d4:	fa02 f303 	lsl.w	r3, r2, r3
 80223d8:	3b01      	subs	r3, #1
 80223da:	617b      	str	r3, [r7, #20]
        size += round;
 80223dc:	68fa      	ldr	r2, [r7, #12]
 80223de:	697b      	ldr	r3, [r7, #20]
 80223e0:	4413      	add	r3, r2
 80223e2:	60fb      	str	r3, [r7, #12]
    }
    mapping_insert(size, fli, sli);
 80223e4:	687a      	ldr	r2, [r7, #4]
 80223e6:	68b9      	ldr	r1, [r7, #8]
 80223e8:	68f8      	ldr	r0, [r7, #12]
 80223ea:	f7ff ffb9 	bl	8022360 <mapping_insert>
}
 80223ee:	bf00      	nop
 80223f0:	3718      	adds	r7, #24
 80223f2:	46bd      	mov	sp, r7
 80223f4:	bd80      	pop	{r7, pc}

080223f6 <search_suitable_block>:

static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
{
 80223f6:	b580      	push	{r7, lr}
 80223f8:	b088      	sub	sp, #32
 80223fa:	af00      	add	r7, sp, #0
 80223fc:	60f8      	str	r0, [r7, #12]
 80223fe:	60b9      	str	r1, [r7, #8]
 8022400:	607a      	str	r2, [r7, #4]
    int fl = *fli;
 8022402:	68bb      	ldr	r3, [r7, #8]
 8022404:	681b      	ldr	r3, [r3, #0]
 8022406:	61fb      	str	r3, [r7, #28]
    int sl = *sli;
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	681b      	ldr	r3, [r3, #0]
 802240c:	617b      	str	r3, [r7, #20]

    /*
    ** First, search for a block in the list associated with the given
    ** fl/sl index.
    */
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 802240e:	68fa      	ldr	r2, [r7, #12]
 8022410:	69fb      	ldr	r3, [r7, #28]
 8022412:	3304      	adds	r3, #4
 8022414:	009b      	lsls	r3, r3, #2
 8022416:	4413      	add	r3, r2
 8022418:	685a      	ldr	r2, [r3, #4]
 802241a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802241e:	697b      	ldr	r3, [r7, #20]
 8022420:	fa01 f303 	lsl.w	r3, r1, r3
 8022424:	4013      	ands	r3, r2
 8022426:	61bb      	str	r3, [r7, #24]
    if(!sl_map) {
 8022428:	69bb      	ldr	r3, [r7, #24]
 802242a:	2b00      	cmp	r3, #0
 802242c:	d11c      	bne.n	8022468 <search_suitable_block+0x72>
        /* No block exists. Search in the next largest first-level list. */
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 802242e:	68fb      	ldr	r3, [r7, #12]
 8022430:	691a      	ldr	r2, [r3, #16]
 8022432:	69fb      	ldr	r3, [r7, #28]
 8022434:	3301      	adds	r3, #1
 8022436:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802243a:	fa01 f303 	lsl.w	r3, r1, r3
 802243e:	4013      	ands	r3, r2
 8022440:	613b      	str	r3, [r7, #16]
        if(!fl_map) {
 8022442:	693b      	ldr	r3, [r7, #16]
 8022444:	2b00      	cmp	r3, #0
 8022446:	d101      	bne.n	802244c <search_suitable_block+0x56>
            /* No free blocks available, memory has been exhausted. */
            return 0;
 8022448:	2300      	movs	r3, #0
 802244a:	e021      	b.n	8022490 <search_suitable_block+0x9a>
        }

        fl = tlsf_ffs(fl_map);
 802244c:	6938      	ldr	r0, [r7, #16]
 802244e:	f7ff fdce 	bl	8021fee <tlsf_ffs>
 8022452:	61f8      	str	r0, [r7, #28]
        *fli = fl;
 8022454:	68bb      	ldr	r3, [r7, #8]
 8022456:	69fa      	ldr	r2, [r7, #28]
 8022458:	601a      	str	r2, [r3, #0]
        sl_map = control->sl_bitmap[fl];
 802245a:	68fa      	ldr	r2, [r7, #12]
 802245c:	69fb      	ldr	r3, [r7, #28]
 802245e:	3304      	adds	r3, #4
 8022460:	009b      	lsls	r3, r3, #2
 8022462:	4413      	add	r3, r2
 8022464:	685b      	ldr	r3, [r3, #4]
 8022466:	61bb      	str	r3, [r7, #24]
    }
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8022468:	69bb      	ldr	r3, [r7, #24]
 802246a:	2b00      	cmp	r3, #0
 802246c:	d100      	bne.n	8022470 <search_suitable_block+0x7a>
 802246e:	e7fe      	b.n	802246e <search_suitable_block+0x78>
    sl = tlsf_ffs(sl_map);
 8022470:	69b8      	ldr	r0, [r7, #24]
 8022472:	f7ff fdbc 	bl	8021fee <tlsf_ffs>
 8022476:	6178      	str	r0, [r7, #20]
    *sli = sl;
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	697a      	ldr	r2, [r7, #20]
 802247c:	601a      	str	r2, [r3, #0]

    /* Return the first block in the free list. */
    return control->blocks[fl][sl];
 802247e:	68fa      	ldr	r2, [r7, #12]
 8022480:	69fb      	ldr	r3, [r7, #28]
 8022482:	0159      	lsls	r1, r3, #5
 8022484:	697b      	ldr	r3, [r7, #20]
 8022486:	440b      	add	r3, r1
 8022488:	330e      	adds	r3, #14
 802248a:	009b      	lsls	r3, r3, #2
 802248c:	4413      	add	r3, r2
 802248e:	685b      	ldr	r3, [r3, #4]
}
 8022490:	4618      	mov	r0, r3
 8022492:	3720      	adds	r7, #32
 8022494:	46bd      	mov	sp, r7
 8022496:	bd80      	pop	{r7, pc}

08022498 <remove_free_block>:

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8022498:	b480      	push	{r7}
 802249a:	b087      	sub	sp, #28
 802249c:	af00      	add	r7, sp, #0
 802249e:	60f8      	str	r0, [r7, #12]
 80224a0:	60b9      	str	r1, [r7, #8]
 80224a2:	607a      	str	r2, [r7, #4]
 80224a4:	603b      	str	r3, [r7, #0]
    block_header_t * prev = block->prev_free;
 80224a6:	68bb      	ldr	r3, [r7, #8]
 80224a8:	68db      	ldr	r3, [r3, #12]
 80224aa:	617b      	str	r3, [r7, #20]
    block_header_t * next = block->next_free;
 80224ac:	68bb      	ldr	r3, [r7, #8]
 80224ae:	689b      	ldr	r3, [r3, #8]
 80224b0:	613b      	str	r3, [r7, #16]
    tlsf_assert(prev && "prev_free field can not be null");
 80224b2:	697b      	ldr	r3, [r7, #20]
 80224b4:	2b00      	cmp	r3, #0
 80224b6:	d100      	bne.n	80224ba <remove_free_block+0x22>
 80224b8:	e7fe      	b.n	80224b8 <remove_free_block+0x20>
    tlsf_assert(next && "next_free field can not be null");
 80224ba:	693b      	ldr	r3, [r7, #16]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d100      	bne.n	80224c2 <remove_free_block+0x2a>
 80224c0:	e7fe      	b.n	80224c0 <remove_free_block+0x28>
    next->prev_free = prev;
 80224c2:	693b      	ldr	r3, [r7, #16]
 80224c4:	697a      	ldr	r2, [r7, #20]
 80224c6:	60da      	str	r2, [r3, #12]
    prev->next_free = next;
 80224c8:	697b      	ldr	r3, [r7, #20]
 80224ca:	693a      	ldr	r2, [r7, #16]
 80224cc:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 80224ce:	68fa      	ldr	r2, [r7, #12]
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	0159      	lsls	r1, r3, #5
 80224d4:	683b      	ldr	r3, [r7, #0]
 80224d6:	440b      	add	r3, r1
 80224d8:	330e      	adds	r3, #14
 80224da:	009b      	lsls	r3, r3, #2
 80224dc:	4413      	add	r3, r2
 80224de:	685b      	ldr	r3, [r3, #4]
 80224e0:	68ba      	ldr	r2, [r7, #8]
 80224e2:	429a      	cmp	r2, r3
 80224e4:	d131      	bne.n	802254a <remove_free_block+0xb2>
        control->blocks[fl][sl] = next;
 80224e6:	68fa      	ldr	r2, [r7, #12]
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	0159      	lsls	r1, r3, #5
 80224ec:	683b      	ldr	r3, [r7, #0]
 80224ee:	440b      	add	r3, r1
 80224f0:	330e      	adds	r3, #14
 80224f2:	009b      	lsls	r3, r3, #2
 80224f4:	4413      	add	r3, r2
 80224f6:	693a      	ldr	r2, [r7, #16]
 80224f8:	605a      	str	r2, [r3, #4]

        /* If the new head is null, clear the bitmap. */
        if(next == &control->block_null) {
 80224fa:	68fb      	ldr	r3, [r7, #12]
 80224fc:	693a      	ldr	r2, [r7, #16]
 80224fe:	429a      	cmp	r2, r3
 8022500:	d123      	bne.n	802254a <remove_free_block+0xb2>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8022502:	68fa      	ldr	r2, [r7, #12]
 8022504:	687b      	ldr	r3, [r7, #4]
 8022506:	3304      	adds	r3, #4
 8022508:	009b      	lsls	r3, r3, #2
 802250a:	4413      	add	r3, r2
 802250c:	685a      	ldr	r2, [r3, #4]
 802250e:	2101      	movs	r1, #1
 8022510:	683b      	ldr	r3, [r7, #0]
 8022512:	fa01 f303 	lsl.w	r3, r1, r3
 8022516:	43db      	mvns	r3, r3
 8022518:	401a      	ands	r2, r3
 802251a:	68f9      	ldr	r1, [r7, #12]
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	3304      	adds	r3, #4
 8022520:	009b      	lsls	r3, r3, #2
 8022522:	440b      	add	r3, r1
 8022524:	605a      	str	r2, [r3, #4]

            /* If the second bitmap is now empty, clear the fl bitmap. */
            if(!control->sl_bitmap[fl]) {
 8022526:	68fa      	ldr	r2, [r7, #12]
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	3304      	adds	r3, #4
 802252c:	009b      	lsls	r3, r3, #2
 802252e:	4413      	add	r3, r2
 8022530:	685b      	ldr	r3, [r3, #4]
 8022532:	2b00      	cmp	r3, #0
 8022534:	d109      	bne.n	802254a <remove_free_block+0xb2>
                control->fl_bitmap &= ~(1U << fl);
 8022536:	68fb      	ldr	r3, [r7, #12]
 8022538:	691a      	ldr	r2, [r3, #16]
 802253a:	2101      	movs	r1, #1
 802253c:	687b      	ldr	r3, [r7, #4]
 802253e:	fa01 f303 	lsl.w	r3, r1, r3
 8022542:	43db      	mvns	r3, r3
 8022544:	401a      	ands	r2, r3
 8022546:	68fb      	ldr	r3, [r7, #12]
 8022548:	611a      	str	r2, [r3, #16]
            }
        }
    }
}
 802254a:	bf00      	nop
 802254c:	371c      	adds	r7, #28
 802254e:	46bd      	mov	sp, r7
 8022550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022554:	4770      	bx	lr

08022556 <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8022556:	b590      	push	{r4, r7, lr}
 8022558:	b087      	sub	sp, #28
 802255a:	af00      	add	r7, sp, #0
 802255c:	60f8      	str	r0, [r7, #12]
 802255e:	60b9      	str	r1, [r7, #8]
 8022560:	607a      	str	r2, [r7, #4]
 8022562:	603b      	str	r3, [r7, #0]
    block_header_t * current = control->blocks[fl][sl];
 8022564:	68fa      	ldr	r2, [r7, #12]
 8022566:	687b      	ldr	r3, [r7, #4]
 8022568:	0159      	lsls	r1, r3, #5
 802256a:	683b      	ldr	r3, [r7, #0]
 802256c:	440b      	add	r3, r1
 802256e:	330e      	adds	r3, #14
 8022570:	009b      	lsls	r3, r3, #2
 8022572:	4413      	add	r3, r2
 8022574:	685b      	ldr	r3, [r3, #4]
 8022576:	617b      	str	r3, [r7, #20]
    tlsf_assert(current && "free list cannot have a null entry");
 8022578:	697b      	ldr	r3, [r7, #20]
 802257a:	2b00      	cmp	r3, #0
 802257c:	d100      	bne.n	8022580 <insert_free_block+0x2a>
 802257e:	e7fe      	b.n	802257e <insert_free_block+0x28>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 8022580:	68bb      	ldr	r3, [r7, #8]
 8022582:	2b00      	cmp	r3, #0
 8022584:	d100      	bne.n	8022588 <insert_free_block+0x32>
 8022586:	e7fe      	b.n	8022586 <insert_free_block+0x30>
    block->next_free = current;
 8022588:	68bb      	ldr	r3, [r7, #8]
 802258a:	697a      	ldr	r2, [r7, #20]
 802258c:	609a      	str	r2, [r3, #8]
    block->prev_free = &control->block_null;
 802258e:	68fa      	ldr	r2, [r7, #12]
 8022590:	68bb      	ldr	r3, [r7, #8]
 8022592:	60da      	str	r2, [r3, #12]
    current->prev_free = block;
 8022594:	697b      	ldr	r3, [r7, #20]
 8022596:	68ba      	ldr	r2, [r7, #8]
 8022598:	60da      	str	r2, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 802259a:	68b8      	ldr	r0, [r7, #8]
 802259c:	f7ff fdf8 	bl	8022190 <block_to_ptr>
 80225a0:	4604      	mov	r4, r0
 80225a2:	68b8      	ldr	r0, [r7, #8]
 80225a4:	f7ff fdf4 	bl	8022190 <block_to_ptr>
 80225a8:	4603      	mov	r3, r0
 80225aa:	2104      	movs	r1, #4
 80225ac:	4618      	mov	r0, r3
 80225ae:	f7ff fe9d 	bl	80222ec <align_ptr>
 80225b2:	4603      	mov	r3, r0
 80225b4:	429c      	cmp	r4, r3
 80225b6:	d000      	beq.n	80225ba <insert_free_block+0x64>
 80225b8:	e7fe      	b.n	80225b8 <insert_free_block+0x62>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 80225ba:	68fa      	ldr	r2, [r7, #12]
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	0159      	lsls	r1, r3, #5
 80225c0:	683b      	ldr	r3, [r7, #0]
 80225c2:	440b      	add	r3, r1
 80225c4:	330e      	adds	r3, #14
 80225c6:	009b      	lsls	r3, r3, #2
 80225c8:	4413      	add	r3, r2
 80225ca:	68ba      	ldr	r2, [r7, #8]
 80225cc:	605a      	str	r2, [r3, #4]
    control->fl_bitmap |= (1U << fl);
 80225ce:	68fb      	ldr	r3, [r7, #12]
 80225d0:	691a      	ldr	r2, [r3, #16]
 80225d2:	2101      	movs	r1, #1
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	fa01 f303 	lsl.w	r3, r1, r3
 80225da:	431a      	orrs	r2, r3
 80225dc:	68fb      	ldr	r3, [r7, #12]
 80225de:	611a      	str	r2, [r3, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 80225e0:	68fa      	ldr	r2, [r7, #12]
 80225e2:	687b      	ldr	r3, [r7, #4]
 80225e4:	3304      	adds	r3, #4
 80225e6:	009b      	lsls	r3, r3, #2
 80225e8:	4413      	add	r3, r2
 80225ea:	685a      	ldr	r2, [r3, #4]
 80225ec:	2101      	movs	r1, #1
 80225ee:	683b      	ldr	r3, [r7, #0]
 80225f0:	fa01 f303 	lsl.w	r3, r1, r3
 80225f4:	431a      	orrs	r2, r3
 80225f6:	68f9      	ldr	r1, [r7, #12]
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	3304      	adds	r3, #4
 80225fc:	009b      	lsls	r3, r3, #2
 80225fe:	440b      	add	r3, r1
 8022600:	605a      	str	r2, [r3, #4]
}
 8022602:	bf00      	nop
 8022604:	371c      	adds	r7, #28
 8022606:	46bd      	mov	sp, r7
 8022608:	bd90      	pop	{r4, r7, pc}

0802260a <block_remove>:

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 802260a:	b580      	push	{r7, lr}
 802260c:	b084      	sub	sp, #16
 802260e:	af00      	add	r7, sp, #0
 8022610:	6078      	str	r0, [r7, #4]
 8022612:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8022614:	6838      	ldr	r0, [r7, #0]
 8022616:	f7ff fd16 	bl	8022046 <block_size>
 802261a:	f107 0208 	add.w	r2, r7, #8
 802261e:	f107 030c 	add.w	r3, r7, #12
 8022622:	4619      	mov	r1, r3
 8022624:	f7ff fe9c 	bl	8022360 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8022628:	68fa      	ldr	r2, [r7, #12]
 802262a:	68bb      	ldr	r3, [r7, #8]
 802262c:	6839      	ldr	r1, [r7, #0]
 802262e:	6878      	ldr	r0, [r7, #4]
 8022630:	f7ff ff32 	bl	8022498 <remove_free_block>
}
 8022634:	bf00      	nop
 8022636:	3710      	adds	r7, #16
 8022638:	46bd      	mov	sp, r7
 802263a:	bd80      	pop	{r7, pc}

0802263c <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 802263c:	b580      	push	{r7, lr}
 802263e:	b084      	sub	sp, #16
 8022640:	af00      	add	r7, sp, #0
 8022642:	6078      	str	r0, [r7, #4]
 8022644:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8022646:	6838      	ldr	r0, [r7, #0]
 8022648:	f7ff fcfd 	bl	8022046 <block_size>
 802264c:	f107 0208 	add.w	r2, r7, #8
 8022650:	f107 030c 	add.w	r3, r7, #12
 8022654:	4619      	mov	r1, r3
 8022656:	f7ff fe83 	bl	8022360 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 802265a:	68fa      	ldr	r2, [r7, #12]
 802265c:	68bb      	ldr	r3, [r7, #8]
 802265e:	6839      	ldr	r1, [r7, #0]
 8022660:	6878      	ldr	r0, [r7, #4]
 8022662:	f7ff ff78 	bl	8022556 <insert_free_block>
}
 8022666:	bf00      	nop
 8022668:	3710      	adds	r7, #16
 802266a:	46bd      	mov	sp, r7
 802266c:	bd80      	pop	{r7, pc}

0802266e <block_can_split>:

static int block_can_split(block_header_t * block, size_t size)
{
 802266e:	b580      	push	{r7, lr}
 8022670:	b082      	sub	sp, #8
 8022672:	af00      	add	r7, sp, #0
 8022674:	6078      	str	r0, [r7, #4]
 8022676:	6039      	str	r1, [r7, #0]
    return block_size(block) >= sizeof(block_header_t) + size;
 8022678:	6878      	ldr	r0, [r7, #4]
 802267a:	f7ff fce4 	bl	8022046 <block_size>
 802267e:	4602      	mov	r2, r0
 8022680:	683b      	ldr	r3, [r7, #0]
 8022682:	3310      	adds	r3, #16
 8022684:	429a      	cmp	r2, r3
 8022686:	bf2c      	ite	cs
 8022688:	2301      	movcs	r3, #1
 802268a:	2300      	movcc	r3, #0
 802268c:	b2db      	uxtb	r3, r3
}
 802268e:	4618      	mov	r0, r3
 8022690:	3708      	adds	r7, #8
 8022692:	46bd      	mov	sp, r7
 8022694:	bd80      	pop	{r7, pc}

08022696 <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8022696:	b590      	push	{r4, r7, lr}
 8022698:	b085      	sub	sp, #20
 802269a:	af00      	add	r7, sp, #0
 802269c:	6078      	str	r0, [r7, #4]
 802269e:	6039      	str	r1, [r7, #0]
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 80226a0:	6878      	ldr	r0, [r7, #4]
 80226a2:	f7ff fd75 	bl	8022190 <block_to_ptr>
 80226a6:	4602      	mov	r2, r0
 80226a8:	2104      	movs	r1, #4
 80226aa:	683b      	ldr	r3, [r7, #0]
 80226ac:	1a5b      	subs	r3, r3, r1
 80226ae:	4619      	mov	r1, r3
 80226b0:	4610      	mov	r0, r2
 80226b2:	f7ff fd7a 	bl	80221aa <offset_to_block>
 80226b6:	60f8      	str	r0, [r7, #12]

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 80226b8:	6878      	ldr	r0, [r7, #4]
 80226ba:	f7ff fcc4 	bl	8022046 <block_size>
 80226be:	4602      	mov	r2, r0
 80226c0:	2104      	movs	r1, #4
 80226c2:	683b      	ldr	r3, [r7, #0]
 80226c4:	440b      	add	r3, r1
 80226c6:	1ad3      	subs	r3, r2, r3
 80226c8:	60bb      	str	r3, [r7, #8]

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 80226ca:	68f8      	ldr	r0, [r7, #12]
 80226cc:	f7ff fd60 	bl	8022190 <block_to_ptr>
 80226d0:	4604      	mov	r4, r0
 80226d2:	68f8      	ldr	r0, [r7, #12]
 80226d4:	f7ff fd5c 	bl	8022190 <block_to_ptr>
 80226d8:	4603      	mov	r3, r0
 80226da:	2104      	movs	r1, #4
 80226dc:	4618      	mov	r0, r3
 80226de:	f7ff fe05 	bl	80222ec <align_ptr>
 80226e2:	4603      	mov	r3, r0
 80226e4:	429c      	cmp	r4, r3
 80226e6:	d000      	beq.n	80226ea <block_split+0x54>
 80226e8:	e7fe      	b.n	80226e8 <block_split+0x52>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 80226ea:	6878      	ldr	r0, [r7, #4]
 80226ec:	f7ff fcab 	bl	8022046 <block_size>
 80226f0:	4601      	mov	r1, r0
 80226f2:	68ba      	ldr	r2, [r7, #8]
 80226f4:	683b      	ldr	r3, [r7, #0]
 80226f6:	4413      	add	r3, r2
 80226f8:	2204      	movs	r2, #4
 80226fa:	4413      	add	r3, r2
 80226fc:	4299      	cmp	r1, r3
 80226fe:	d000      	beq.n	8022702 <block_split+0x6c>
 8022700:	e7fe      	b.n	8022700 <block_split+0x6a>
    block_set_size(remaining, remain_size);
 8022702:	68b9      	ldr	r1, [r7, #8]
 8022704:	68f8      	ldr	r0, [r7, #12]
 8022706:	f7ff fcaf 	bl	8022068 <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 802270a:	68f8      	ldr	r0, [r7, #12]
 802270c:	f7ff fc9b 	bl	8022046 <block_size>
 8022710:	4603      	mov	r3, r0
 8022712:	220c      	movs	r2, #12
 8022714:	4293      	cmp	r3, r2
 8022716:	d200      	bcs.n	802271a <block_split+0x84>
 8022718:	e7fe      	b.n	8022718 <block_split+0x82>

    block_set_size(block, size);
 802271a:	6839      	ldr	r1, [r7, #0]
 802271c:	6878      	ldr	r0, [r7, #4]
 802271e:	f7ff fca3 	bl	8022068 <block_set_size>
    block_mark_as_free(remaining);
 8022722:	68f8      	ldr	r0, [r7, #12]
 8022724:	f7ff fd8f 	bl	8022246 <block_mark_as_free>

    return remaining;
 8022728:	68fb      	ldr	r3, [r7, #12]
}
 802272a:	4618      	mov	r0, r3
 802272c:	3714      	adds	r7, #20
 802272e:	46bd      	mov	sp, r7
 8022730:	bd90      	pop	{r4, r7, pc}

08022732 <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 8022732:	b580      	push	{r7, lr}
 8022734:	b082      	sub	sp, #8
 8022736:	af00      	add	r7, sp, #0
 8022738:	6078      	str	r0, [r7, #4]
 802273a:	6039      	str	r1, [r7, #0]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 802273c:	6878      	ldr	r0, [r7, #4]
 802273e:	f7ff fcaa 	bl	8022096 <block_is_last>
 8022742:	4603      	mov	r3, r0
 8022744:	2b00      	cmp	r3, #0
 8022746:	d000      	beq.n	802274a <block_absorb+0x18>
 8022748:	e7fe      	b.n	8022748 <block_absorb+0x16>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 802274a:	6838      	ldr	r0, [r7, #0]
 802274c:	f7ff fc7b 	bl	8022046 <block_size>
 8022750:	4603      	mov	r3, r0
 8022752:	2204      	movs	r2, #4
 8022754:	441a      	add	r2, r3
 8022756:	687b      	ldr	r3, [r7, #4]
 8022758:	685b      	ldr	r3, [r3, #4]
 802275a:	441a      	add	r2, r3
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	605a      	str	r2, [r3, #4]
    block_link_next(prev);
 8022760:	6878      	ldr	r0, [r7, #4]
 8022762:	f7ff fd60 	bl	8022226 <block_link_next>
    return prev;
 8022766:	687b      	ldr	r3, [r7, #4]
}
 8022768:	4618      	mov	r0, r3
 802276a:	3708      	adds	r7, #8
 802276c:	46bd      	mov	sp, r7
 802276e:	bd80      	pop	{r7, pc}

08022770 <block_merge_prev>:

/* Merge a just-freed block with an adjacent previous free block. */
static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
{
 8022770:	b580      	push	{r7, lr}
 8022772:	b084      	sub	sp, #16
 8022774:	af00      	add	r7, sp, #0
 8022776:	6078      	str	r0, [r7, #4]
 8022778:	6039      	str	r1, [r7, #0]
    if(block_is_prev_free(block)) {
 802277a:	6838      	ldr	r0, [r7, #0]
 802277c:	f7ff fccb 	bl	8022116 <block_is_prev_free>
 8022780:	4603      	mov	r3, r0
 8022782:	2b00      	cmp	r3, #0
 8022784:	d017      	beq.n	80227b6 <block_merge_prev+0x46>
        block_header_t * prev = block_prev(block);
 8022786:	6838      	ldr	r0, [r7, #0]
 8022788:	f7ff fd1d 	bl	80221c6 <block_prev>
 802278c:	60f8      	str	r0, [r7, #12]
        tlsf_assert(prev && "prev physical block can't be null");
 802278e:	68fb      	ldr	r3, [r7, #12]
 8022790:	2b00      	cmp	r3, #0
 8022792:	d100      	bne.n	8022796 <block_merge_prev+0x26>
 8022794:	e7fe      	b.n	8022794 <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8022796:	68f8      	ldr	r0, [r7, #12]
 8022798:	f7ff fc8e 	bl	80220b8 <block_is_free>
 802279c:	4603      	mov	r3, r0
 802279e:	2b00      	cmp	r3, #0
 80227a0:	d100      	bne.n	80227a4 <block_merge_prev+0x34>
 80227a2:	e7fe      	b.n	80227a2 <block_merge_prev+0x32>
        block_remove(control, prev);
 80227a4:	68f9      	ldr	r1, [r7, #12]
 80227a6:	6878      	ldr	r0, [r7, #4]
 80227a8:	f7ff ff2f 	bl	802260a <block_remove>
        block = block_absorb(prev, block);
 80227ac:	6839      	ldr	r1, [r7, #0]
 80227ae:	68f8      	ldr	r0, [r7, #12]
 80227b0:	f7ff ffbf 	bl	8022732 <block_absorb>
 80227b4:	6038      	str	r0, [r7, #0]
    }

    return block;
 80227b6:	683b      	ldr	r3, [r7, #0]
}
 80227b8:	4618      	mov	r0, r3
 80227ba:	3710      	adds	r7, #16
 80227bc:	46bd      	mov	sp, r7
 80227be:	bd80      	pop	{r7, pc}

080227c0 <block_merge_next>:

/* Merge a just-freed block with an adjacent free block. */
static block_header_t * block_merge_next(control_t * control, block_header_t * block)
{
 80227c0:	b580      	push	{r7, lr}
 80227c2:	b084      	sub	sp, #16
 80227c4:	af00      	add	r7, sp, #0
 80227c6:	6078      	str	r0, [r7, #4]
 80227c8:	6039      	str	r1, [r7, #0]
    block_header_t * next = block_next(block);
 80227ca:	6838      	ldr	r0, [r7, #0]
 80227cc:	f7ff fd0c 	bl	80221e8 <block_next>
 80227d0:	60f8      	str	r0, [r7, #12]
    tlsf_assert(next && "next physical block can't be null");
 80227d2:	68fb      	ldr	r3, [r7, #12]
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d100      	bne.n	80227da <block_merge_next+0x1a>
 80227d8:	e7fe      	b.n	80227d8 <block_merge_next+0x18>

    if(block_is_free(next)) {
 80227da:	68f8      	ldr	r0, [r7, #12]
 80227dc:	f7ff fc6c 	bl	80220b8 <block_is_free>
 80227e0:	4603      	mov	r3, r0
 80227e2:	2b00      	cmp	r3, #0
 80227e4:	d00f      	beq.n	8022806 <block_merge_next+0x46>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 80227e6:	6838      	ldr	r0, [r7, #0]
 80227e8:	f7ff fc55 	bl	8022096 <block_is_last>
 80227ec:	4603      	mov	r3, r0
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	d000      	beq.n	80227f4 <block_merge_next+0x34>
 80227f2:	e7fe      	b.n	80227f2 <block_merge_next+0x32>
        block_remove(control, next);
 80227f4:	68f9      	ldr	r1, [r7, #12]
 80227f6:	6878      	ldr	r0, [r7, #4]
 80227f8:	f7ff ff07 	bl	802260a <block_remove>
        block = block_absorb(block, next);
 80227fc:	68f9      	ldr	r1, [r7, #12]
 80227fe:	6838      	ldr	r0, [r7, #0]
 8022800:	f7ff ff97 	bl	8022732 <block_absorb>
 8022804:	6038      	str	r0, [r7, #0]
    }

    return block;
 8022806:	683b      	ldr	r3, [r7, #0]
}
 8022808:	4618      	mov	r0, r3
 802280a:	3710      	adds	r7, #16
 802280c:	46bd      	mov	sp, r7
 802280e:	bd80      	pop	{r7, pc}

08022810 <block_trim_free>:

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
 8022810:	b580      	push	{r7, lr}
 8022812:	b086      	sub	sp, #24
 8022814:	af00      	add	r7, sp, #0
 8022816:	60f8      	str	r0, [r7, #12]
 8022818:	60b9      	str	r1, [r7, #8]
 802281a:	607a      	str	r2, [r7, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 802281c:	68b8      	ldr	r0, [r7, #8]
 802281e:	f7ff fc4b 	bl	80220b8 <block_is_free>
 8022822:	4603      	mov	r3, r0
 8022824:	2b00      	cmp	r3, #0
 8022826:	d100      	bne.n	802282a <block_trim_free+0x1a>
 8022828:	e7fe      	b.n	8022828 <block_trim_free+0x18>
    if(block_can_split(block, size)) {
 802282a:	6879      	ldr	r1, [r7, #4]
 802282c:	68b8      	ldr	r0, [r7, #8]
 802282e:	f7ff ff1e 	bl	802266e <block_can_split>
 8022832:	4603      	mov	r3, r0
 8022834:	2b00      	cmp	r3, #0
 8022836:	d00e      	beq.n	8022856 <block_trim_free+0x46>
        block_header_t * remaining_block = block_split(block, size);
 8022838:	6879      	ldr	r1, [r7, #4]
 802283a:	68b8      	ldr	r0, [r7, #8]
 802283c:	f7ff ff2b 	bl	8022696 <block_split>
 8022840:	6178      	str	r0, [r7, #20]
        block_link_next(block);
 8022842:	68b8      	ldr	r0, [r7, #8]
 8022844:	f7ff fcef 	bl	8022226 <block_link_next>
        block_set_prev_free(remaining_block);
 8022848:	6978      	ldr	r0, [r7, #20]
 802284a:	f7ff fc72 	bl	8022132 <block_set_prev_free>
        block_insert(control, remaining_block);
 802284e:	6979      	ldr	r1, [r7, #20]
 8022850:	68f8      	ldr	r0, [r7, #12]
 8022852:	f7ff fef3 	bl	802263c <block_insert>
    }
}
 8022856:	bf00      	nop
 8022858:	3718      	adds	r7, #24
 802285a:	46bd      	mov	sp, r7
 802285c:	bd80      	pop	{r7, pc}

0802285e <block_trim_used>:

/* Trim any trailing block space off the end of a used block, return to pool. */
static void block_trim_used(control_t * control, block_header_t * block, size_t size)
{
 802285e:	b580      	push	{r7, lr}
 8022860:	b086      	sub	sp, #24
 8022862:	af00      	add	r7, sp, #0
 8022864:	60f8      	str	r0, [r7, #12]
 8022866:	60b9      	str	r1, [r7, #8]
 8022868:	607a      	str	r2, [r7, #4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 802286a:	68b8      	ldr	r0, [r7, #8]
 802286c:	f7ff fc24 	bl	80220b8 <block_is_free>
 8022870:	4603      	mov	r3, r0
 8022872:	2b00      	cmp	r3, #0
 8022874:	d000      	beq.n	8022878 <block_trim_used+0x1a>
 8022876:	e7fe      	b.n	8022876 <block_trim_used+0x18>
    if(block_can_split(block, size)) {
 8022878:	6879      	ldr	r1, [r7, #4]
 802287a:	68b8      	ldr	r0, [r7, #8]
 802287c:	f7ff fef7 	bl	802266e <block_can_split>
 8022880:	4603      	mov	r3, r0
 8022882:	2b00      	cmp	r3, #0
 8022884:	d010      	beq.n	80228a8 <block_trim_used+0x4a>
        /* If the next block is free, we must coalesce. */
        block_header_t * remaining_block = block_split(block, size);
 8022886:	6879      	ldr	r1, [r7, #4]
 8022888:	68b8      	ldr	r0, [r7, #8]
 802288a:	f7ff ff04 	bl	8022696 <block_split>
 802288e:	6178      	str	r0, [r7, #20]
        block_set_prev_used(remaining_block);
 8022890:	6978      	ldr	r0, [r7, #20]
 8022892:	f7ff fc5e 	bl	8022152 <block_set_prev_used>

        remaining_block = block_merge_next(control, remaining_block);
 8022896:	6979      	ldr	r1, [r7, #20]
 8022898:	68f8      	ldr	r0, [r7, #12]
 802289a:	f7ff ff91 	bl	80227c0 <block_merge_next>
 802289e:	6178      	str	r0, [r7, #20]
        block_insert(control, remaining_block);
 80228a0:	6979      	ldr	r1, [r7, #20]
 80228a2:	68f8      	ldr	r0, [r7, #12]
 80228a4:	f7ff feca 	bl	802263c <block_insert>
    }
}
 80228a8:	bf00      	nop
 80228aa:	3718      	adds	r7, #24
 80228ac:	46bd      	mov	sp, r7
 80228ae:	bd80      	pop	{r7, pc}

080228b0 <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 80228b0:	b580      	push	{r7, lr}
 80228b2:	b086      	sub	sp, #24
 80228b4:	af00      	add	r7, sp, #0
 80228b6:	6078      	str	r0, [r7, #4]
 80228b8:	6039      	str	r1, [r7, #0]
    int fl = 0, sl = 0;
 80228ba:	2300      	movs	r3, #0
 80228bc:	613b      	str	r3, [r7, #16]
 80228be:	2300      	movs	r3, #0
 80228c0:	60fb      	str	r3, [r7, #12]
    block_header_t * block = 0;
 80228c2:	2300      	movs	r3, #0
 80228c4:	617b      	str	r3, [r7, #20]

    if(size) {
 80228c6:	683b      	ldr	r3, [r7, #0]
 80228c8:	2b00      	cmp	r3, #0
 80228ca:	d013      	beq.n	80228f4 <block_locate_free+0x44>
        mapping_search(size, &fl, &sl);
 80228cc:	f107 020c 	add.w	r2, r7, #12
 80228d0:	f107 0310 	add.w	r3, r7, #16
 80228d4:	4619      	mov	r1, r3
 80228d6:	6838      	ldr	r0, [r7, #0]
 80228d8:	f7ff fd6d 	bl	80223b6 <mapping_search>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 80228dc:	693b      	ldr	r3, [r7, #16]
 80228de:	2b09      	cmp	r3, #9
 80228e0:	dc08      	bgt.n	80228f4 <block_locate_free+0x44>
            block = search_suitable_block(control, &fl, &sl);
 80228e2:	f107 020c 	add.w	r2, r7, #12
 80228e6:	f107 0310 	add.w	r3, r7, #16
 80228ea:	4619      	mov	r1, r3
 80228ec:	6878      	ldr	r0, [r7, #4]
 80228ee:	f7ff fd82 	bl	80223f6 <search_suitable_block>
 80228f2:	6178      	str	r0, [r7, #20]
        }
    }

    if(block) {
 80228f4:	697b      	ldr	r3, [r7, #20]
 80228f6:	2b00      	cmp	r3, #0
 80228f8:	d00d      	beq.n	8022916 <block_locate_free+0x66>
        tlsf_assert(block_size(block) >= size);
 80228fa:	6978      	ldr	r0, [r7, #20]
 80228fc:	f7ff fba3 	bl	8022046 <block_size>
 8022900:	4602      	mov	r2, r0
 8022902:	683b      	ldr	r3, [r7, #0]
 8022904:	4293      	cmp	r3, r2
 8022906:	d900      	bls.n	802290a <block_locate_free+0x5a>
 8022908:	e7fe      	b.n	8022908 <block_locate_free+0x58>
        remove_free_block(control, block, fl, sl);
 802290a:	693a      	ldr	r2, [r7, #16]
 802290c:	68fb      	ldr	r3, [r7, #12]
 802290e:	6979      	ldr	r1, [r7, #20]
 8022910:	6878      	ldr	r0, [r7, #4]
 8022912:	f7ff fdc1 	bl	8022498 <remove_free_block>
    }

    return block;
 8022916:	697b      	ldr	r3, [r7, #20]
}
 8022918:	4618      	mov	r0, r3
 802291a:	3718      	adds	r7, #24
 802291c:	46bd      	mov	sp, r7
 802291e:	bd80      	pop	{r7, pc}

08022920 <block_prepare_used>:

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 8022920:	b580      	push	{r7, lr}
 8022922:	b086      	sub	sp, #24
 8022924:	af00      	add	r7, sp, #0
 8022926:	60f8      	str	r0, [r7, #12]
 8022928:	60b9      	str	r1, [r7, #8]
 802292a:	607a      	str	r2, [r7, #4]
    void * p = 0;
 802292c:	2300      	movs	r3, #0
 802292e:	617b      	str	r3, [r7, #20]
    if(block) {
 8022930:	68bb      	ldr	r3, [r7, #8]
 8022932:	2b00      	cmp	r3, #0
 8022934:	d00f      	beq.n	8022956 <block_prepare_used+0x36>
        tlsf_assert(size && "size must be non-zero");
 8022936:	687b      	ldr	r3, [r7, #4]
 8022938:	2b00      	cmp	r3, #0
 802293a:	d100      	bne.n	802293e <block_prepare_used+0x1e>
 802293c:	e7fe      	b.n	802293c <block_prepare_used+0x1c>
        block_trim_free(control, block, size);
 802293e:	687a      	ldr	r2, [r7, #4]
 8022940:	68b9      	ldr	r1, [r7, #8]
 8022942:	68f8      	ldr	r0, [r7, #12]
 8022944:	f7ff ff64 	bl	8022810 <block_trim_free>
        block_mark_as_used(block);
 8022948:	68b8      	ldr	r0, [r7, #8]
 802294a:	f7ff fc8e 	bl	802226a <block_mark_as_used>
        p = block_to_ptr(block);
 802294e:	68b8      	ldr	r0, [r7, #8]
 8022950:	f7ff fc1e 	bl	8022190 <block_to_ptr>
 8022954:	6178      	str	r0, [r7, #20]
    }
    return p;
 8022956:	697b      	ldr	r3, [r7, #20]
}
 8022958:	4618      	mov	r0, r3
 802295a:	3718      	adds	r7, #24
 802295c:	46bd      	mov	sp, r7
 802295e:	bd80      	pop	{r7, pc}

08022960 <control_constructor>:

/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
 8022960:	b480      	push	{r7}
 8022962:	b085      	sub	sp, #20
 8022964:	af00      	add	r7, sp, #0
 8022966:	6078      	str	r0, [r7, #4]
    int i, j;

    control->block_null.next_free = &control->block_null;
 8022968:	687a      	ldr	r2, [r7, #4]
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	609a      	str	r2, [r3, #8]
    control->block_null.prev_free = &control->block_null;
 802296e:	687a      	ldr	r2, [r7, #4]
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	60da      	str	r2, [r3, #12]

    control->fl_bitmap = 0;
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	2200      	movs	r2, #0
 8022978:	611a      	str	r2, [r3, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 802297a:	2300      	movs	r3, #0
 802297c:	60fb      	str	r3, [r7, #12]
 802297e:	e01c      	b.n	80229ba <control_constructor+0x5a>
        control->sl_bitmap[i] = 0;
 8022980:	687a      	ldr	r2, [r7, #4]
 8022982:	68fb      	ldr	r3, [r7, #12]
 8022984:	3304      	adds	r3, #4
 8022986:	009b      	lsls	r3, r3, #2
 8022988:	4413      	add	r3, r2
 802298a:	2200      	movs	r2, #0
 802298c:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 802298e:	2300      	movs	r3, #0
 8022990:	60bb      	str	r3, [r7, #8]
 8022992:	e00c      	b.n	80229ae <control_constructor+0x4e>
            control->blocks[i][j] = &control->block_null;
 8022994:	687a      	ldr	r2, [r7, #4]
 8022996:	6879      	ldr	r1, [r7, #4]
 8022998:	68fb      	ldr	r3, [r7, #12]
 802299a:	0158      	lsls	r0, r3, #5
 802299c:	68bb      	ldr	r3, [r7, #8]
 802299e:	4403      	add	r3, r0
 80229a0:	330e      	adds	r3, #14
 80229a2:	009b      	lsls	r3, r3, #2
 80229a4:	440b      	add	r3, r1
 80229a6:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 80229a8:	68bb      	ldr	r3, [r7, #8]
 80229aa:	3301      	adds	r3, #1
 80229ac:	60bb      	str	r3, [r7, #8]
 80229ae:	68bb      	ldr	r3, [r7, #8]
 80229b0:	2b1f      	cmp	r3, #31
 80229b2:	ddef      	ble.n	8022994 <control_constructor+0x34>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 80229b4:	68fb      	ldr	r3, [r7, #12]
 80229b6:	3301      	adds	r3, #1
 80229b8:	60fb      	str	r3, [r7, #12]
 80229ba:	68fb      	ldr	r3, [r7, #12]
 80229bc:	2b09      	cmp	r3, #9
 80229be:	dddf      	ble.n	8022980 <control_constructor+0x20>
        }
    }
}
 80229c0:	bf00      	nop
 80229c2:	bf00      	nop
 80229c4:	3714      	adds	r7, #20
 80229c6:	46bd      	mov	sp, r7
 80229c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229cc:	4770      	bx	lr

080229ce <lv_tlsf_size>:
/*
** Size of the TLSF structures in a given memory block passed to
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
 80229ce:	b480      	push	{r7}
 80229d0:	af00      	add	r7, sp, #0
    return sizeof(control_t);
 80229d2:	f240 533c 	movw	r3, #1340	; 0x53c
}
 80229d6:	4618      	mov	r0, r3
 80229d8:	46bd      	mov	sp, r7
 80229da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229de:	4770      	bx	lr

080229e0 <lv_tlsf_pool_overhead>:
** Overhead of the TLSF structures in a given memory block passed to
** lv_tlsf_add_pool, equal to the overhead of a free block and the
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
 80229e0:	b480      	push	{r7}
 80229e2:	af00      	add	r7, sp, #0
    return 2 * block_header_overhead;
 80229e4:	2304      	movs	r3, #4
 80229e6:	005b      	lsls	r3, r3, #1
}
 80229e8:	4618      	mov	r0, r3
 80229ea:	46bd      	mov	sp, r7
 80229ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229f0:	4770      	bx	lr

080229f2 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 80229f2:	b580      	push	{r7, lr}
 80229f4:	b088      	sub	sp, #32
 80229f6:	af00      	add	r7, sp, #0
 80229f8:	60f8      	str	r0, [r7, #12]
 80229fa:	60b9      	str	r1, [r7, #8]
 80229fc:	607a      	str	r2, [r7, #4]
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 80229fe:	f7ff ffef 	bl	80229e0 <lv_tlsf_pool_overhead>
 8022a02:	61f8      	str	r0, [r7, #28]
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8022a04:	687a      	ldr	r2, [r7, #4]
 8022a06:	69fb      	ldr	r3, [r7, #28]
 8022a08:	1ad3      	subs	r3, r2, r3
 8022a0a:	2104      	movs	r1, #4
 8022a0c:	4618      	mov	r0, r3
 8022a0e:	f7ff fc57 	bl	80222c0 <align_down>
 8022a12:	61b8      	str	r0, [r7, #24]

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8022a14:	68bb      	ldr	r3, [r7, #8]
 8022a16:	f003 0303 	and.w	r3, r3, #3
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d001      	beq.n	8022a22 <lv_tlsf_add_pool+0x30>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 8022a1e:	2300      	movs	r3, #0
 8022a20:	e02e      	b.n	8022a80 <lv_tlsf_add_pool+0x8e>
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 8022a22:	220c      	movs	r2, #12
 8022a24:	69bb      	ldr	r3, [r7, #24]
 8022a26:	4293      	cmp	r3, r2
 8022a28:	d304      	bcc.n	8022a34 <lv_tlsf_add_pool+0x42>
 8022a2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8022a2e:	69bb      	ldr	r3, [r7, #24]
 8022a30:	4293      	cmp	r3, r2
 8022a32:	d901      	bls.n	8022a38 <lv_tlsf_add_pool+0x46>
#else
        printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
               (unsigned int)(pool_overhead + block_size_min),
               (unsigned int)(pool_overhead + block_size_max));
#endif
        return 0;
 8022a34:	2300      	movs	r3, #0
 8022a36:	e023      	b.n	8022a80 <lv_tlsf_add_pool+0x8e>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 8022a38:	2304      	movs	r3, #4
 8022a3a:	425b      	negs	r3, r3
 8022a3c:	4619      	mov	r1, r3
 8022a3e:	68b8      	ldr	r0, [r7, #8]
 8022a40:	f7ff fbb3 	bl	80221aa <offset_to_block>
 8022a44:	6178      	str	r0, [r7, #20]
    block_set_size(block, pool_bytes);
 8022a46:	69b9      	ldr	r1, [r7, #24]
 8022a48:	6978      	ldr	r0, [r7, #20]
 8022a4a:	f7ff fb0d 	bl	8022068 <block_set_size>
    block_set_free(block);
 8022a4e:	6978      	ldr	r0, [r7, #20]
 8022a50:	f7ff fb40 	bl	80220d4 <block_set_free>
    block_set_prev_used(block);
 8022a54:	6978      	ldr	r0, [r7, #20]
 8022a56:	f7ff fb7c 	bl	8022152 <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 8022a5a:	6979      	ldr	r1, [r7, #20]
 8022a5c:	68f8      	ldr	r0, [r7, #12]
 8022a5e:	f7ff fded 	bl	802263c <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8022a62:	6978      	ldr	r0, [r7, #20]
 8022a64:	f7ff fbdf 	bl	8022226 <block_link_next>
 8022a68:	6138      	str	r0, [r7, #16]
    block_set_size(next, 0);
 8022a6a:	2100      	movs	r1, #0
 8022a6c:	6938      	ldr	r0, [r7, #16]
 8022a6e:	f7ff fafb 	bl	8022068 <block_set_size>
    block_set_used(next);
 8022a72:	6938      	ldr	r0, [r7, #16]
 8022a74:	f7ff fb3e 	bl	80220f4 <block_set_used>
    block_set_prev_free(next);
 8022a78:	6938      	ldr	r0, [r7, #16]
 8022a7a:	f7ff fb5a 	bl	8022132 <block_set_prev_free>

    return mem;
 8022a7e:	68bb      	ldr	r3, [r7, #8]
}
 8022a80:	4618      	mov	r0, r3
 8022a82:	3720      	adds	r7, #32
 8022a84:	46bd      	mov	sp, r7
 8022a86:	bd80      	pop	{r7, pc}

08022a88 <lv_tlsf_create>:
    return rv;
}
#endif

lv_tlsf_t lv_tlsf_create(void * mem)
{
 8022a88:	b580      	push	{r7, lr}
 8022a8a:	b082      	sub	sp, #8
 8022a8c:	af00      	add	r7, sp, #0
 8022a8e:	6078      	str	r0, [r7, #4]
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	f003 0303 	and.w	r3, r3, #3
 8022a96:	2b00      	cmp	r3, #0
 8022a98:	d001      	beq.n	8022a9e <lv_tlsf_create+0x16>
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 8022a9a:	2300      	movs	r3, #0
 8022a9c:	e003      	b.n	8022aa6 <lv_tlsf_create+0x1e>
    }

    control_constructor(tlsf_cast(control_t *, mem));
 8022a9e:	6878      	ldr	r0, [r7, #4]
 8022aa0:	f7ff ff5e 	bl	8022960 <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 8022aa4:	687b      	ldr	r3, [r7, #4]
}
 8022aa6:	4618      	mov	r0, r3
 8022aa8:	3708      	adds	r7, #8
 8022aaa:	46bd      	mov	sp, r7
 8022aac:	bd80      	pop	{r7, pc}

08022aae <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8022aae:	b590      	push	{r4, r7, lr}
 8022ab0:	b085      	sub	sp, #20
 8022ab2:	af00      	add	r7, sp, #0
 8022ab4:	6078      	str	r0, [r7, #4]
 8022ab6:	6039      	str	r1, [r7, #0]
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8022ab8:	6878      	ldr	r0, [r7, #4]
 8022aba:	f7ff ffe5 	bl	8022a88 <lv_tlsf_create>
 8022abe:	60f8      	str	r0, [r7, #12]
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8022ac0:	f7ff ff85 	bl	80229ce <lv_tlsf_size>
 8022ac4:	4602      	mov	r2, r0
 8022ac6:	687b      	ldr	r3, [r7, #4]
 8022ac8:	189c      	adds	r4, r3, r2
 8022aca:	f7ff ff80 	bl	80229ce <lv_tlsf_size>
 8022ace:	4602      	mov	r2, r0
 8022ad0:	683b      	ldr	r3, [r7, #0]
 8022ad2:	1a9b      	subs	r3, r3, r2
 8022ad4:	461a      	mov	r2, r3
 8022ad6:	4621      	mov	r1, r4
 8022ad8:	68f8      	ldr	r0, [r7, #12]
 8022ada:	f7ff ff8a 	bl	80229f2 <lv_tlsf_add_pool>
    return tlsf;
 8022ade:	68fb      	ldr	r3, [r7, #12]
}
 8022ae0:	4618      	mov	r0, r3
 8022ae2:	3714      	adds	r7, #20
 8022ae4:	46bd      	mov	sp, r7
 8022ae6:	bd90      	pop	{r4, r7, pc}

08022ae8 <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8022ae8:	b580      	push	{r7, lr}
 8022aea:	b086      	sub	sp, #24
 8022aec:	af00      	add	r7, sp, #0
 8022aee:	6078      	str	r0, [r7, #4]
 8022af0:	6039      	str	r1, [r7, #0]
    control_t * control = tlsf_cast(control_t *, tlsf);
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	617b      	str	r3, [r7, #20]
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8022af6:	2104      	movs	r1, #4
 8022af8:	6838      	ldr	r0, [r7, #0]
 8022afa:	f7ff fc12 	bl	8022322 <adjust_request_size>
 8022afe:	6138      	str	r0, [r7, #16]
    block_header_t * block = block_locate_free(control, adjust);
 8022b00:	6939      	ldr	r1, [r7, #16]
 8022b02:	6978      	ldr	r0, [r7, #20]
 8022b04:	f7ff fed4 	bl	80228b0 <block_locate_free>
 8022b08:	60f8      	str	r0, [r7, #12]
    return block_prepare_used(control, block, adjust);
 8022b0a:	693a      	ldr	r2, [r7, #16]
 8022b0c:	68f9      	ldr	r1, [r7, #12]
 8022b0e:	6978      	ldr	r0, [r7, #20]
 8022b10:	f7ff ff06 	bl	8022920 <block_prepare_used>
 8022b14:	4603      	mov	r3, r0
}
 8022b16:	4618      	mov	r0, r3
 8022b18:	3718      	adds	r7, #24
 8022b1a:	46bd      	mov	sp, r7
 8022b1c:	bd80      	pop	{r7, pc}

08022b1e <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8022b1e:	b580      	push	{r7, lr}
 8022b20:	b086      	sub	sp, #24
 8022b22:	af00      	add	r7, sp, #0
 8022b24:	6078      	str	r0, [r7, #4]
 8022b26:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8022b28:	2300      	movs	r3, #0
 8022b2a:	617b      	str	r3, [r7, #20]
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8022b2c:	683b      	ldr	r3, [r7, #0]
 8022b2e:	2b00      	cmp	r3, #0
 8022b30:	d020      	beq.n	8022b74 <lv_tlsf_free+0x56>
        control_t * control = tlsf_cast(control_t *, tlsf);
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	613b      	str	r3, [r7, #16]
        block_header_t * block = block_from_ptr(ptr);
 8022b36:	6838      	ldr	r0, [r7, #0]
 8022b38:	f7ff fb1c 	bl	8022174 <block_from_ptr>
 8022b3c:	60f8      	str	r0, [r7, #12]
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8022b3e:	68f8      	ldr	r0, [r7, #12]
 8022b40:	f7ff faba 	bl	80220b8 <block_is_free>
 8022b44:	4603      	mov	r3, r0
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	d000      	beq.n	8022b4c <lv_tlsf_free+0x2e>
 8022b4a:	e7fe      	b.n	8022b4a <lv_tlsf_free+0x2c>
        size = block->size;
 8022b4c:	68fb      	ldr	r3, [r7, #12]
 8022b4e:	685b      	ldr	r3, [r3, #4]
 8022b50:	617b      	str	r3, [r7, #20]
        block_mark_as_free(block);
 8022b52:	68f8      	ldr	r0, [r7, #12]
 8022b54:	f7ff fb77 	bl	8022246 <block_mark_as_free>
        block = block_merge_prev(control, block);
 8022b58:	68f9      	ldr	r1, [r7, #12]
 8022b5a:	6938      	ldr	r0, [r7, #16]
 8022b5c:	f7ff fe08 	bl	8022770 <block_merge_prev>
 8022b60:	60f8      	str	r0, [r7, #12]
        block = block_merge_next(control, block);
 8022b62:	68f9      	ldr	r1, [r7, #12]
 8022b64:	6938      	ldr	r0, [r7, #16]
 8022b66:	f7ff fe2b 	bl	80227c0 <block_merge_next>
 8022b6a:	60f8      	str	r0, [r7, #12]
        block_insert(control, block);
 8022b6c:	68f9      	ldr	r1, [r7, #12]
 8022b6e:	6938      	ldr	r0, [r7, #16]
 8022b70:	f7ff fd64 	bl	802263c <block_insert>
    }

    return size;
 8022b74:	697b      	ldr	r3, [r7, #20]
}
 8022b76:	4618      	mov	r0, r3
 8022b78:	3718      	adds	r7, #24
 8022b7a:	46bd      	mov	sp, r7
 8022b7c:	bd80      	pop	{r7, pc}

08022b7e <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8022b7e:	b580      	push	{r7, lr}
 8022b80:	b08c      	sub	sp, #48	; 0x30
 8022b82:	af00      	add	r7, sp, #0
 8022b84:	60f8      	str	r0, [r7, #12]
 8022b86:	60b9      	str	r1, [r7, #8]
 8022b88:	607a      	str	r2, [r7, #4]
    control_t * control = tlsf_cast(control_t *, tlsf);
 8022b8a:	68fb      	ldr	r3, [r7, #12]
 8022b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    void * p = 0;
 8022b8e:	2300      	movs	r3, #0
 8022b90:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8022b92:	68bb      	ldr	r3, [r7, #8]
 8022b94:	2b00      	cmp	r3, #0
 8022b96:	d007      	beq.n	8022ba8 <lv_tlsf_realloc+0x2a>
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	d104      	bne.n	8022ba8 <lv_tlsf_realloc+0x2a>
        lv_tlsf_free(tlsf, ptr);
 8022b9e:	68b9      	ldr	r1, [r7, #8]
 8022ba0:	68f8      	ldr	r0, [r7, #12]
 8022ba2:	f7ff ffbc 	bl	8022b1e <lv_tlsf_free>
 8022ba6:	e06a      	b.n	8022c7e <lv_tlsf_realloc+0x100>
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 8022ba8:	68bb      	ldr	r3, [r7, #8]
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	d105      	bne.n	8022bba <lv_tlsf_realloc+0x3c>
        p = lv_tlsf_malloc(tlsf, size);
 8022bae:	6879      	ldr	r1, [r7, #4]
 8022bb0:	68f8      	ldr	r0, [r7, #12]
 8022bb2:	f7ff ff99 	bl	8022ae8 <lv_tlsf_malloc>
 8022bb6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8022bb8:	e061      	b.n	8022c7e <lv_tlsf_realloc+0x100>
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 8022bba:	68b8      	ldr	r0, [r7, #8]
 8022bbc:	f7ff fada 	bl	8022174 <block_from_ptr>
 8022bc0:	6278      	str	r0, [r7, #36]	; 0x24
        block_header_t * next = block_next(block);
 8022bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022bc4:	f7ff fb10 	bl	80221e8 <block_next>
 8022bc8:	6238      	str	r0, [r7, #32]

        const size_t cursize = block_size(block);
 8022bca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022bcc:	f7ff fa3b 	bl	8022046 <block_size>
 8022bd0:	61f8      	str	r0, [r7, #28]
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 8022bd2:	6a38      	ldr	r0, [r7, #32]
 8022bd4:	f7ff fa37 	bl	8022046 <block_size>
 8022bd8:	4602      	mov	r2, r0
 8022bda:	69fb      	ldr	r3, [r7, #28]
 8022bdc:	4413      	add	r3, r2
 8022bde:	2204      	movs	r2, #4
 8022be0:	4413      	add	r3, r2
 8022be2:	61bb      	str	r3, [r7, #24]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8022be4:	2104      	movs	r1, #4
 8022be6:	6878      	ldr	r0, [r7, #4]
 8022be8:	f7ff fb9b 	bl	8022322 <adjust_request_size>
 8022bec:	6178      	str	r0, [r7, #20]
        if(size > cursize && adjust == 0) {
 8022bee:	687a      	ldr	r2, [r7, #4]
 8022bf0:	69fb      	ldr	r3, [r7, #28]
 8022bf2:	429a      	cmp	r2, r3
 8022bf4:	d904      	bls.n	8022c00 <lv_tlsf_realloc+0x82>
 8022bf6:	697b      	ldr	r3, [r7, #20]
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	d101      	bne.n	8022c00 <lv_tlsf_realloc+0x82>
            /* The request is probably too large, fail */
            return NULL;
 8022bfc:	2300      	movs	r3, #0
 8022bfe:	e03f      	b.n	8022c80 <lv_tlsf_realloc+0x102>
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8022c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022c02:	f7ff fa59 	bl	80220b8 <block_is_free>
 8022c06:	4603      	mov	r3, r0
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	d000      	beq.n	8022c0e <lv_tlsf_realloc+0x90>
 8022c0c:	e7fe      	b.n	8022c0c <lv_tlsf_realloc+0x8e>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8022c0e:	697a      	ldr	r2, [r7, #20]
 8022c10:	69fb      	ldr	r3, [r7, #28]
 8022c12:	429a      	cmp	r2, r3
 8022c14:	d921      	bls.n	8022c5a <lv_tlsf_realloc+0xdc>
 8022c16:	6a38      	ldr	r0, [r7, #32]
 8022c18:	f7ff fa4e 	bl	80220b8 <block_is_free>
 8022c1c:	4603      	mov	r3, r0
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	d003      	beq.n	8022c2a <lv_tlsf_realloc+0xac>
 8022c22:	697a      	ldr	r2, [r7, #20]
 8022c24:	69bb      	ldr	r3, [r7, #24]
 8022c26:	429a      	cmp	r2, r3
 8022c28:	d917      	bls.n	8022c5a <lv_tlsf_realloc+0xdc>
            p = lv_tlsf_malloc(tlsf, size);
 8022c2a:	6879      	ldr	r1, [r7, #4]
 8022c2c:	68f8      	ldr	r0, [r7, #12]
 8022c2e:	f7ff ff5b 	bl	8022ae8 <lv_tlsf_malloc>
 8022c32:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(p) {
 8022c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c36:	2b00      	cmp	r3, #0
 8022c38:	d021      	beq.n	8022c7e <lv_tlsf_realloc+0x100>
                const size_t minsize = tlsf_min(cursize, size);
 8022c3a:	687a      	ldr	r2, [r7, #4]
 8022c3c:	69fb      	ldr	r3, [r7, #28]
 8022c3e:	4293      	cmp	r3, r2
 8022c40:	bf28      	it	cs
 8022c42:	4613      	movcs	r3, r2
 8022c44:	613b      	str	r3, [r7, #16]
                lv_memcpy(p, ptr, minsize);
 8022c46:	693a      	ldr	r2, [r7, #16]
 8022c48:	68b9      	ldr	r1, [r7, #8]
 8022c4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022c4c:	f7fd ff76 	bl	8020b3c <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 8022c50:	68b9      	ldr	r1, [r7, #8]
 8022c52:	68f8      	ldr	r0, [r7, #12]
 8022c54:	f7ff ff63 	bl	8022b1e <lv_tlsf_free>
            if(p) {
 8022c58:	e011      	b.n	8022c7e <lv_tlsf_realloc+0x100>
            }
        }
        else {
            /* Do we need to expand to the next block? */
            if(adjust > cursize) {
 8022c5a:	697a      	ldr	r2, [r7, #20]
 8022c5c:	69fb      	ldr	r3, [r7, #28]
 8022c5e:	429a      	cmp	r2, r3
 8022c60:	d906      	bls.n	8022c70 <lv_tlsf_realloc+0xf2>
                block_merge_next(control, block);
 8022c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022c66:	f7ff fdab 	bl	80227c0 <block_merge_next>
                block_mark_as_used(block);
 8022c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022c6c:	f7ff fafd 	bl	802226a <block_mark_as_used>
            }

            /* Trim the resulting block and return the original pointer. */
            block_trim_used(control, block, adjust);
 8022c70:	697a      	ldr	r2, [r7, #20]
 8022c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022c76:	f7ff fdf2 	bl	802285e <block_trim_used>
            p = ptr;
 8022c7a:	68bb      	ldr	r3, [r7, #8]
 8022c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    return p;
 8022c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8022c80:	4618      	mov	r0, r3
 8022c82:	3730      	adds	r7, #48	; 0x30
 8022c84:	46bd      	mov	sp, r7
 8022c86:	bd80      	pop	{r7, pc}

08022c88 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8022c88:	b480      	push	{r7}
 8022c8a:	b083      	sub	sp, #12
 8022c8c:	af00      	add	r7, sp, #0
 8022c8e:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8022c96:	4618      	mov	r0, r3
 8022c98:	370c      	adds	r7, #12
 8022c9a:	46bd      	mov	sp, r7
 8022c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ca0:	4770      	bx	lr
	...

08022ca4 <_lv_txt_is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool _lv_txt_is_break_char(uint32_t letter)
{
 8022ca4:	b480      	push	{r7}
 8022ca6:	b085      	sub	sp, #20
 8022ca8:	af00      	add	r7, sp, #0
 8022caa:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 8022cac:	2300      	movs	r3, #0
 8022cae:	73bb      	strb	r3, [r7, #14]

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 8022cb6:	d306      	bcc.n	8022cc6 <_lv_txt_is_break_char+0x22>
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	f649 72a5 	movw	r2, #40869	; 0x9fa5
 8022cbe:	4293      	cmp	r3, r2
 8022cc0:	d801      	bhi.n	8022cc6 <_lv_txt_is_break_char+0x22>
        return true;
 8022cc2:	2301      	movs	r3, #1
 8022cc4:	e015      	b.n	8022cf2 <_lv_txt_is_break_char+0x4e>
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8022cc6:	2300      	movs	r3, #0
 8022cc8:	73fb      	strb	r3, [r7, #15]
 8022cca:	e00c      	b.n	8022ce6 <_lv_txt_is_break_char+0x42>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8022ccc:	7bfb      	ldrb	r3, [r7, #15]
 8022cce:	4a0c      	ldr	r2, [pc, #48]	; (8022d00 <_lv_txt_is_break_char+0x5c>)
 8022cd0:	5cd3      	ldrb	r3, [r2, r3]
 8022cd2:	461a      	mov	r2, r3
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	4293      	cmp	r3, r2
 8022cd8:	d102      	bne.n	8022ce0 <_lv_txt_is_break_char+0x3c>
            ret = true; /*If match then it is break char*/
 8022cda:	2301      	movs	r3, #1
 8022cdc:	73bb      	strb	r3, [r7, #14]
            break;
 8022cde:	e007      	b.n	8022cf0 <_lv_txt_is_break_char+0x4c>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8022ce0:	7bfb      	ldrb	r3, [r7, #15]
 8022ce2:	3301      	adds	r3, #1
 8022ce4:	73fb      	strb	r3, [r7, #15]
 8022ce6:	7bfb      	ldrb	r3, [r7, #15]
 8022ce8:	4a05      	ldr	r2, [pc, #20]	; (8022d00 <_lv_txt_is_break_char+0x5c>)
 8022cea:	5cd3      	ldrb	r3, [r2, r3]
 8022cec:	2b00      	cmp	r3, #0
 8022cee:	d1ed      	bne.n	8022ccc <_lv_txt_is_break_char+0x28>
        }
    }

    return ret;
 8022cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8022cf2:	4618      	mov	r0, r3
 8022cf4:	3714      	adds	r7, #20
 8022cf6:	46bd      	mov	sp, r7
 8022cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cfc:	4770      	bx	lr
 8022cfe:	bf00      	nop
 8022d00:	08023738 	.word	0x08023738

08022d04 <lv_txt_get_size>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_text_flag_t flag)
{
 8022d04:	b580      	push	{r7, lr}
 8022d06:	b08a      	sub	sp, #40	; 0x28
 8022d08:	af02      	add	r7, sp, #8
 8022d0a:	60f8      	str	r0, [r7, #12]
 8022d0c:	60b9      	str	r1, [r7, #8]
 8022d0e:	607a      	str	r2, [r7, #4]
 8022d10:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	2200      	movs	r2, #0
 8022d16:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 8022d18:	68fb      	ldr	r3, [r7, #12]
 8022d1a:	2200      	movs	r2, #0
 8022d1c:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 8022d1e:	68bb      	ldr	r3, [r7, #8]
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	f000 80a2 	beq.w	8022e6a <lv_txt_get_size+0x166>
    if(font == NULL) return;
 8022d26:	687b      	ldr	r3, [r7, #4]
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	f000 80a0 	beq.w	8022e6e <lv_txt_get_size+0x16a>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8022d2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8022d32:	f003 0302 	and.w	r3, r3, #2
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	d002      	beq.n	8022d40 <lv_txt_get_size+0x3c>
 8022d3a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8022d3e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 8022d40:	2300      	movs	r3, #0
 8022d42:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 8022d44:	2300      	movs	r3, #0
 8022d46:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 8022d48:	6878      	ldr	r0, [r7, #4]
 8022d4a:	f7ff ff9d 	bl	8022c88 <lv_font_get_line_height>
 8022d4e:	4603      	mov	r3, r0
 8022d50:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 8022d52:	e051      	b.n	8022df8 <lv_txt_get_size+0xf4>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8022d54:	68ba      	ldr	r2, [r7, #8]
 8022d56:	69fb      	ldr	r3, [r7, #28]
 8022d58:	18d0      	adds	r0, r2, r3
 8022d5a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8022d5e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8022d62:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8022d66:	9301      	str	r3, [sp, #4]
 8022d68:	2300      	movs	r3, #0
 8022d6a:	9300      	str	r3, [sp, #0]
 8022d6c:	460b      	mov	r3, r1
 8022d6e:	6879      	ldr	r1, [r7, #4]
 8022d70:	f000 f964 	bl	802303c <_lv_txt_get_next_line>
 8022d74:	4602      	mov	r2, r0
 8022d76:	69bb      	ldr	r3, [r7, #24]
 8022d78:	4413      	add	r3, r2
 8022d7a:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8022d7c:	68fb      	ldr	r3, [r7, #12]
 8022d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022d82:	461a      	mov	r2, r3
 8022d84:	8afb      	ldrh	r3, [r7, #22]
 8022d86:	441a      	add	r2, r3
 8022d88:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8022d8c:	4413      	add	r3, r2
 8022d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022d92:	d26e      	bcs.n	8022e72 <lv_txt_get_size+0x16e>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 8022d94:	68fb      	ldr	r3, [r7, #12]
 8022d96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022d9a:	b29a      	uxth	r2, r3
 8022d9c:	8afb      	ldrh	r3, [r7, #22]
 8022d9e:	4413      	add	r3, r2
 8022da0:	b29b      	uxth	r3, r3
 8022da2:	b21a      	sxth	r2, r3
 8022da4:	68fb      	ldr	r3, [r7, #12]
 8022da6:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 8022da8:	68fb      	ldr	r3, [r7, #12]
 8022daa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022dae:	b29a      	uxth	r2, r3
 8022db0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8022db2:	4413      	add	r3, r2
 8022db4:	b29b      	uxth	r3, r3
 8022db6:	b21a      	sxth	r2, r3
 8022db8:	68fb      	ldr	r3, [r7, #12]
 8022dba:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8022dbc:	68ba      	ldr	r2, [r7, #8]
 8022dbe:	69fb      	ldr	r3, [r7, #28]
 8022dc0:	18d0      	adds	r0, r2, r3
 8022dc2:	69ba      	ldr	r2, [r7, #24]
 8022dc4:	69fb      	ldr	r3, [r7, #28]
 8022dc6:	1ad1      	subs	r1, r2, r3
 8022dc8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8022dcc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8022dd0:	9300      	str	r3, [sp, #0]
 8022dd2:	4613      	mov	r3, r2
 8022dd4:	687a      	ldr	r2, [r7, #4]
 8022dd6:	f000 fa0f 	bl	80231f8 <lv_txt_get_width>
 8022dda:	4603      	mov	r3, r0
 8022ddc:	82bb      	strh	r3, [r7, #20]
                                                      flag);

        size_res->x = LV_MAX(act_line_length, size_res->x);
 8022dde:	68fb      	ldr	r3, [r7, #12]
 8022de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022de4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8022de8:	4293      	cmp	r3, r2
 8022dea:	bfb8      	it	lt
 8022dec:	4613      	movlt	r3, r2
 8022dee:	b21a      	sxth	r2, r3
 8022df0:	68fb      	ldr	r3, [r7, #12]
 8022df2:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 8022df4:	69bb      	ldr	r3, [r7, #24]
 8022df6:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 8022df8:	68ba      	ldr	r2, [r7, #8]
 8022dfa:	69fb      	ldr	r3, [r7, #28]
 8022dfc:	4413      	add	r3, r2
 8022dfe:	781b      	ldrb	r3, [r3, #0]
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	d1a7      	bne.n	8022d54 <lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8022e04:	69fb      	ldr	r3, [r7, #28]
 8022e06:	2b00      	cmp	r3, #0
 8022e08:	d01a      	beq.n	8022e40 <lv_txt_get_size+0x13c>
 8022e0a:	69fb      	ldr	r3, [r7, #28]
 8022e0c:	3b01      	subs	r3, #1
 8022e0e:	68ba      	ldr	r2, [r7, #8]
 8022e10:	4413      	add	r3, r2
 8022e12:	781b      	ldrb	r3, [r3, #0]
 8022e14:	2b0a      	cmp	r3, #10
 8022e16:	d006      	beq.n	8022e26 <lv_txt_get_size+0x122>
 8022e18:	69fb      	ldr	r3, [r7, #28]
 8022e1a:	3b01      	subs	r3, #1
 8022e1c:	68ba      	ldr	r2, [r7, #8]
 8022e1e:	4413      	add	r3, r2
 8022e20:	781b      	ldrb	r3, [r3, #0]
 8022e22:	2b0d      	cmp	r3, #13
 8022e24:	d10c      	bne.n	8022e40 <lv_txt_get_size+0x13c>
        size_res->y += letter_height + line_space;
 8022e26:	68fb      	ldr	r3, [r7, #12]
 8022e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022e2c:	b29a      	uxth	r2, r3
 8022e2e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8022e30:	8afb      	ldrh	r3, [r7, #22]
 8022e32:	440b      	add	r3, r1
 8022e34:	b29b      	uxth	r3, r3
 8022e36:	4413      	add	r3, r2
 8022e38:	b29b      	uxth	r3, r3
 8022e3a:	b21a      	sxth	r2, r3
 8022e3c:	68fb      	ldr	r3, [r7, #12]
 8022e3e:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 8022e40:	68fb      	ldr	r3, [r7, #12]
 8022e42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	d104      	bne.n	8022e54 <lv_txt_get_size+0x150>
        size_res->y = letter_height;
 8022e4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022e4e:	68fb      	ldr	r3, [r7, #12]
 8022e50:	805a      	strh	r2, [r3, #2]
 8022e52:	e00f      	b.n	8022e74 <lv_txt_get_size+0x170>
    else
        size_res->y -= line_space;
 8022e54:	68fb      	ldr	r3, [r7, #12]
 8022e56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022e5a:	b29a      	uxth	r2, r3
 8022e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8022e5e:	1ad3      	subs	r3, r2, r3
 8022e60:	b29b      	uxth	r3, r3
 8022e62:	b21a      	sxth	r2, r3
 8022e64:	68fb      	ldr	r3, [r7, #12]
 8022e66:	805a      	strh	r2, [r3, #2]
 8022e68:	e004      	b.n	8022e74 <lv_txt_get_size+0x170>
    if(text == NULL) return;
 8022e6a:	bf00      	nop
 8022e6c:	e002      	b.n	8022e74 <lv_txt_get_size+0x170>
    if(font == NULL) return;
 8022e6e:	bf00      	nop
 8022e70:	e000      	b.n	8022e74 <lv_txt_get_size+0x170>
            return;
 8022e72:	bf00      	nop
}
 8022e74:	3720      	adds	r7, #32
 8022e76:	46bd      	mov	sp, r7
 8022e78:	bd80      	pop	{r7, pc}
	...

08022e7c <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_text_flag_t flag, uint32_t * word_w_ptr, lv_text_cmd_state_t * cmd_state, bool force)
{
 8022e7c:	b580      	push	{r7, lr}
 8022e7e:	b08e      	sub	sp, #56	; 0x38
 8022e80:	af00      	add	r7, sp, #0
 8022e82:	60f8      	str	r0, [r7, #12]
 8022e84:	60b9      	str	r1, [r7, #8]
 8022e86:	4611      	mov	r1, r2
 8022e88:	461a      	mov	r2, r3
 8022e8a:	460b      	mov	r3, r1
 8022e8c:	80fb      	strh	r3, [r7, #6]
 8022e8e:	4613      	mov	r3, r2
 8022e90:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 8022e92:	68fb      	ldr	r3, [r7, #12]
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	d003      	beq.n	8022ea0 <lv_txt_get_next_word+0x24>
 8022e98:	68fb      	ldr	r3, [r7, #12]
 8022e9a:	781b      	ldrb	r3, [r3, #0]
 8022e9c:	2b00      	cmp	r3, #0
 8022e9e:	d101      	bne.n	8022ea4 <lv_txt_get_next_word+0x28>
 8022ea0:	2300      	movs	r3, #0
 8022ea2:	e0c4      	b.n	802302e <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 8022ea4:	68bb      	ldr	r3, [r7, #8]
 8022ea6:	2b00      	cmp	r3, #0
 8022ea8:	d101      	bne.n	8022eae <lv_txt_get_next_word+0x32>
 8022eaa:	2300      	movs	r3, #0
 8022eac:	e0bf      	b.n	802302e <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8022eae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8022eb2:	f003 0302 	and.w	r3, r3, #2
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d002      	beq.n	8022ec0 <lv_txt_get_next_word+0x44>
 8022eba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8022ebe:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8022ec0:	2300      	movs	r3, #0
 8022ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8022ec4:	2300      	movs	r3, #0
 8022ec6:	617b      	str	r3, [r7, #20]
 8022ec8:	2300      	movs	r3, #0
 8022eca:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /*Letter at i*/
 8022ecc:	2300      	movs	r3, #0
 8022ece:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /*Letter at i_next*/
 8022ed0:	2300      	movs	r3, #0
 8022ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 8022ed8:	2300      	movs	r3, #0
 8022eda:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8022edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022ee0:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /*Number of characters up to the long word break point*/
 8022ee2:	2300      	movs	r3, #0
 8022ee4:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 8022ee6:	4b54      	ldr	r3, [pc, #336]	; (8023038 <lv_txt_get_next_word+0x1bc>)
 8022ee8:	681b      	ldr	r3, [r3, #0]
 8022eea:	f107 0214 	add.w	r2, r7, #20
 8022eee:	4611      	mov	r1, r2
 8022ef0:	68f8      	ldr	r0, [r7, #12]
 8022ef2:	4798      	blx	r3
 8022ef4:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 8022ef6:	697b      	ldr	r3, [r7, #20]
 8022ef8:	613b      	str	r3, [r7, #16]

    /*Obtain the full word, regardless if it fits or not in max_width*/
    while(txt[i] != '\0') {
 8022efa:	e074      	b.n	8022fe6 <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8022efc:	4b4e      	ldr	r3, [pc, #312]	; (8023038 <lv_txt_get_next_word+0x1bc>)
 8022efe:	681b      	ldr	r3, [r3, #0]
 8022f00:	f107 0210 	add.w	r2, r7, #16
 8022f04:	4611      	mov	r1, r2
 8022f06:	68f8      	ldr	r0, [r7, #12]
 8022f08:	4798      	blx	r3
 8022f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 8022f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f0e:	3301      	adds	r3, #1
 8022f10:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8022f12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8022f16:	f003 0301 	and.w	r3, r3, #1
 8022f1a:	2b00      	cmp	r3, #0
 8022f1c:	d00d      	beq.n	8022f3a <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8022f1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8022f20:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8022f22:	f000 f9cd 	bl	80232c0 <_lv_txt_is_cmd>
 8022f26:	4603      	mov	r3, r0
 8022f28:	2b00      	cmp	r3, #0
 8022f2a:	d006      	beq.n	8022f3a <lv_txt_get_next_word+0xbe>
                i = i_next;
 8022f2c:	697b      	ldr	r3, [r7, #20]
 8022f2e:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 8022f30:	693b      	ldr	r3, [r7, #16]
 8022f32:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 8022f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f36:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter if it is part of a command*/
 8022f38:	e055      	b.n	8022fe6 <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8022f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8022f3e:	68b8      	ldr	r0, [r7, #8]
 8022f40:	f7fa ffdc 	bl	801defc <lv_font_get_glyph_width>
 8022f44:	4603      	mov	r3, r0
 8022f46:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 8022f48:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8022f4a:	8b7b      	ldrh	r3, [r7, #26]
 8022f4c:	4413      	add	r3, r2
 8022f4e:	b29b      	uxth	r3, r3
 8022f50:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 8022f52:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8022f56:	2b00      	cmp	r3, #0
 8022f58:	dd04      	ble.n	8022f64 <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 8022f5a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8022f5c:	88fb      	ldrh	r3, [r7, #6]
 8022f5e:	4413      	add	r3, r2
 8022f60:	b29b      	uxth	r3, r3
 8022f62:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /*Test if this character fits within max_width*/
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8022f64:	6a3b      	ldr	r3, [r7, #32]
 8022f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8022f6a:	d10d      	bne.n	8022f88 <lv_txt_get_next_word+0x10c>
 8022f6c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8022f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022f74:	1ad2      	subs	r2, r2, r3
 8022f76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8022f7a:	429a      	cmp	r2, r3
 8022f7c:	dd04      	ble.n	8022f88 <lv_txt_get_next_word+0x10c>
            break_index = i;
 8022f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022f80:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 8022f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f84:	3b01      	subs	r3, #1
 8022f86:	61fb      	str	r3, [r7, #28]
            /*break_index is now pointing at the character that doesn't fit*/
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8022f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f8a:	2b0a      	cmp	r3, #10
 8022f8c:	d008      	beq.n	8022fa0 <lv_txt_get_next_word+0x124>
 8022f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f90:	2b0d      	cmp	r3, #13
 8022f92:	d005      	beq.n	8022fa0 <lv_txt_get_next_word+0x124>
 8022f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022f96:	f7ff fe85 	bl	8022ca4 <_lv_txt_is_break_char>
 8022f9a:	4603      	mov	r3, r0
 8022f9c:	2b00      	cmp	r3, #0
 8022f9e:	d011      	beq.n	8022fc4 <lv_txt_get_next_word+0x148>
            /*Update the output width on the first character if it fits.
             *Must do this here in case first letter is a break character.*/
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8022fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	d10a      	bne.n	8022fbc <lv_txt_get_next_word+0x140>
 8022fa6:	6a3b      	ldr	r3, [r7, #32]
 8022fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8022fac:	d106      	bne.n	8022fbc <lv_txt_get_next_word+0x140>
 8022fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022fb0:	2b00      	cmp	r3, #0
 8022fb2:	d003      	beq.n	8022fbc <lv_txt_get_next_word+0x140>
 8022fb4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8022fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022fba:	601a      	str	r2, [r3, #0]
            word_len--;
 8022fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fbe:	3b01      	subs	r3, #1
 8022fc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8022fc2:	e016      	b.n	8022ff2 <lv_txt_get_next_word+0x176>
        }

        /*Update the output width*/
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8022fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022fc6:	2b00      	cmp	r3, #0
 8022fc8:	d007      	beq.n	8022fda <lv_txt_get_next_word+0x15e>
 8022fca:	6a3b      	ldr	r3, [r7, #32]
 8022fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8022fd0:	d103      	bne.n	8022fda <lv_txt_get_next_word+0x15e>
 8022fd2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8022fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022fd8:	601a      	str	r2, [r3, #0]

        i = i_next;
 8022fda:	697b      	ldr	r3, [r7, #20]
 8022fdc:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 8022fde:	693b      	ldr	r3, [r7, #16]
 8022fe0:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 8022fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022fe4:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 8022fe6:	68fa      	ldr	r2, [r7, #12]
 8022fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022fea:	4413      	add	r3, r2
 8022fec:	781b      	ldrb	r3, [r3, #0]
 8022fee:	2b00      	cmp	r3, #0
 8022ff0:	d184      	bne.n	8022efc <lv_txt_get_next_word+0x80>
    }

    /*Entire Word fits in the provided space*/
    if(break_index == NO_BREAK_FOUND) {
 8022ff2:	6a3b      	ldr	r3, [r7, #32]
 8022ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8022ff8:	d10c      	bne.n	8023014 <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8022ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d005      	beq.n	802300c <lv_txt_get_next_word+0x190>
 8023000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023002:	2b0d      	cmp	r3, #13
 8023004:	d104      	bne.n	8023010 <lv_txt_get_next_word+0x194>
 8023006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023008:	2b0a      	cmp	r3, #10
 802300a:	d101      	bne.n	8023010 <lv_txt_get_next_word+0x194>
 802300c:	697b      	ldr	r3, [r7, #20]
 802300e:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 8023010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023012:	e00c      	b.n	802302e <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 8023014:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8023018:	2b00      	cmp	r3, #0
 802301a:	d001      	beq.n	8023020 <lv_txt_get_next_word+0x1a4>
 802301c:	6a3b      	ldr	r3, [r7, #32]
 802301e:	e006      	b.n	802302e <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 8023020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023022:	2b00      	cmp	r3, #0
 8023024:	d002      	beq.n	802302c <lv_txt_get_next_word+0x1b0>
 8023026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023028:	2200      	movs	r2, #0
 802302a:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 802302c:	2300      	movs	r3, #0
#endif
}
 802302e:	4618      	mov	r0, r3
 8023030:	3738      	adds	r7, #56	; 0x38
 8023032:	46bd      	mov	sp, r7
 8023034:	bd80      	pop	{r7, pc}
 8023036:	bf00      	nop
 8023038:	20000018 	.word	0x20000018

0802303c <_lv_txt_get_next_line>:

uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width,
                               lv_coord_t * used_width, lv_text_flag_t flag)
{
 802303c:	b580      	push	{r7, lr}
 802303e:	b090      	sub	sp, #64	; 0x40
 8023040:	af04      	add	r7, sp, #16
 8023042:	60f8      	str	r0, [r7, #12]
 8023044:	60b9      	str	r1, [r7, #8]
 8023046:	4611      	mov	r1, r2
 8023048:	461a      	mov	r2, r3
 802304a:	460b      	mov	r3, r1
 802304c:	80fb      	strh	r3, [r7, #6]
 802304e:	4613      	mov	r3, r2
 8023050:	80bb      	strh	r3, [r7, #4]
    if(used_width) *used_width = 0;
 8023052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023054:	2b00      	cmp	r3, #0
 8023056:	d002      	beq.n	802305e <_lv_txt_get_next_line+0x22>
 8023058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802305a:	2200      	movs	r2, #0
 802305c:	801a      	strh	r2, [r3, #0]

    if(txt == NULL) return 0;
 802305e:	68fb      	ldr	r3, [r7, #12]
 8023060:	2b00      	cmp	r3, #0
 8023062:	d101      	bne.n	8023068 <_lv_txt_get_next_line+0x2c>
 8023064:	2300      	movs	r3, #0
 8023066:	e0c1      	b.n	80231ec <_lv_txt_get_next_line+0x1b0>
    if(txt[0] == '\0') return 0;
 8023068:	68fb      	ldr	r3, [r7, #12]
 802306a:	781b      	ldrb	r3, [r3, #0]
 802306c:	2b00      	cmp	r3, #0
 802306e:	d101      	bne.n	8023074 <_lv_txt_get_next_line+0x38>
 8023070:	2300      	movs	r3, #0
 8023072:	e0bb      	b.n	80231ec <_lv_txt_get_next_line+0x1b0>
    if(font == NULL) return 0;
 8023074:	68bb      	ldr	r3, [r7, #8]
 8023076:	2b00      	cmp	r3, #0
 8023078:	d101      	bne.n	802307e <_lv_txt_get_next_line+0x42>
 802307a:	2300      	movs	r3, #0
 802307c:	e0b6      	b.n	80231ec <_lv_txt_get_next_line+0x1b0>

    lv_coord_t line_w = 0;
 802307e:	2300      	movs	r3, #0
 8023080:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /*If max_width doesn't mater simply find the new line character
     *without thinking about word wrapping*/
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8023082:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8023086:	f003 0302 	and.w	r3, r3, #2
 802308a:	2b00      	cmp	r3, #0
 802308c:	d105      	bne.n	802309a <_lv_txt_get_next_line+0x5e>
 802308e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8023092:	f003 0304 	and.w	r3, r3, #4
 8023096:	2b00      	cmp	r3, #0
 8023098:	d029      	beq.n	80230ee <_lv_txt_get_next_line+0xb2>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 802309a:	2300      	movs	r3, #0
 802309c:	62bb      	str	r3, [r7, #40]	; 0x28
 802309e:	e002      	b.n	80230a6 <_lv_txt_get_next_line+0x6a>
 80230a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230a2:	3301      	adds	r3, #1
 80230a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80230a6:	68fa      	ldr	r2, [r7, #12]
 80230a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230aa:	4413      	add	r3, r2
 80230ac:	781b      	ldrb	r3, [r3, #0]
 80230ae:	2b0a      	cmp	r3, #10
 80230b0:	d00b      	beq.n	80230ca <_lv_txt_get_next_line+0x8e>
 80230b2:	68fa      	ldr	r2, [r7, #12]
 80230b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230b6:	4413      	add	r3, r2
 80230b8:	781b      	ldrb	r3, [r3, #0]
 80230ba:	2b0d      	cmp	r3, #13
 80230bc:	d005      	beq.n	80230ca <_lv_txt_get_next_line+0x8e>
 80230be:	68fa      	ldr	r2, [r7, #12]
 80230c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230c2:	4413      	add	r3, r2
 80230c4:	781b      	ldrb	r3, [r3, #0]
 80230c6:	2b00      	cmp	r3, #0
 80230c8:	d1ea      	bne.n	80230a0 <_lv_txt_get_next_line+0x64>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 80230ca:	68fa      	ldr	r2, [r7, #12]
 80230cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230ce:	4413      	add	r3, r2
 80230d0:	781b      	ldrb	r3, [r3, #0]
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	d002      	beq.n	80230dc <_lv_txt_get_next_line+0xa0>
 80230d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230d8:	3301      	adds	r3, #1
 80230da:	62bb      	str	r3, [r7, #40]	; 0x28
        if(used_width) *used_width = -1;
 80230dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80230de:	2b00      	cmp	r3, #0
 80230e0:	d003      	beq.n	80230ea <_lv_txt_get_next_line+0xae>
 80230e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80230e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80230e8:	801a      	strh	r2, [r3, #0]
        return i;
 80230ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230ec:	e07e      	b.n	80231ec <_lv_txt_get_next_line+0x1b0>
    }

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80230ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80230f2:	f003 0302 	and.w	r3, r3, #2
 80230f6:	2b00      	cmp	r3, #0
 80230f8:	d002      	beq.n	8023100 <_lv_txt_get_next_line+0xc4>
 80230fa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80230fe:	80bb      	strh	r3, [r7, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8023100:	2300      	movs	r3, #0
 8023102:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 8023104:	2300      	movs	r3, #0
 8023106:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 8023108:	e048      	b.n	802319c <_lv_txt_get_next_line+0x160>
        uint32_t word_w = 0;
 802310a:	2300      	movs	r3, #0
 802310c:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 802310e:	69bb      	ldr	r3, [r7, #24]
 8023110:	68fa      	ldr	r2, [r7, #12]
 8023112:	18d0      	adds	r0, r2, r3
 8023114:	69bb      	ldr	r3, [r7, #24]
 8023116:	2b00      	cmp	r3, #0
 8023118:	bf0c      	ite	eq
 802311a:	2301      	moveq	r3, #1
 802311c:	2300      	movne	r3, #0
 802311e:	b2db      	uxtb	r3, r3
 8023120:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8023124:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8023128:	9303      	str	r3, [sp, #12]
 802312a:	f107 031f 	add.w	r3, r7, #31
 802312e:	9302      	str	r3, [sp, #8]
 8023130:	f107 0314 	add.w	r3, r7, #20
 8023134:	9301      	str	r3, [sp, #4]
 8023136:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802313a:	9300      	str	r3, [sp, #0]
 802313c:	460b      	mov	r3, r1
 802313e:	68b9      	ldr	r1, [r7, #8]
 8023140:	f7ff fe9c 	bl	8022e7c <lv_txt_get_next_word>
 8023144:	6278      	str	r0, [r7, #36]	; 0x24
        max_width -= word_w;
 8023146:	88ba      	ldrh	r2, [r7, #4]
 8023148:	697b      	ldr	r3, [r7, #20]
 802314a:	b29b      	uxth	r3, r3
 802314c:	1ad3      	subs	r3, r2, r3
 802314e:	b29b      	uxth	r3, r3
 8023150:	80bb      	strh	r3, [r7, #4]
        line_w += word_w;
 8023152:	697b      	ldr	r3, [r7, #20]
 8023154:	b29a      	uxth	r2, r3
 8023156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8023158:	4413      	add	r3, r2
 802315a:	b29b      	uxth	r3, r3
 802315c:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(advance == 0) {
 802315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023160:	2b00      	cmp	r3, #0
 8023162:	d026      	beq.n	80231b2 <_lv_txt_get_next_line+0x176>
            break;
        }

        i += advance;
 8023164:	69ba      	ldr	r2, [r7, #24]
 8023166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023168:	4413      	add	r3, r2
 802316a:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 802316c:	68fb      	ldr	r3, [r7, #12]
 802316e:	781b      	ldrb	r3, [r3, #0]
 8023170:	2b0a      	cmp	r3, #10
 8023172:	d01e      	beq.n	80231b2 <_lv_txt_get_next_line+0x176>
 8023174:	68fb      	ldr	r3, [r7, #12]
 8023176:	781b      	ldrb	r3, [r3, #0]
 8023178:	2b0d      	cmp	r3, #13
 802317a:	d01a      	beq.n	80231b2 <_lv_txt_get_next_line+0x176>

        if(txt[i] == '\n' || txt[i] == '\r') {
 802317c:	69bb      	ldr	r3, [r7, #24]
 802317e:	68fa      	ldr	r2, [r7, #12]
 8023180:	4413      	add	r3, r2
 8023182:	781b      	ldrb	r3, [r3, #0]
 8023184:	2b0a      	cmp	r3, #10
 8023186:	d005      	beq.n	8023194 <_lv_txt_get_next_line+0x158>
 8023188:	69bb      	ldr	r3, [r7, #24]
 802318a:	68fa      	ldr	r2, [r7, #12]
 802318c:	4413      	add	r3, r2
 802318e:	781b      	ldrb	r3, [r3, #0]
 8023190:	2b0d      	cmp	r3, #13
 8023192:	d103      	bne.n	802319c <_lv_txt_get_next_line+0x160>
            i++;  /*Include the following newline in the current line*/
 8023194:	69bb      	ldr	r3, [r7, #24]
 8023196:	3301      	adds	r3, #1
 8023198:	61bb      	str	r3, [r7, #24]
            break;
 802319a:	e00b      	b.n	80231b4 <_lv_txt_get_next_line+0x178>
    while(txt[i] != '\0' && max_width > 0) {
 802319c:	69bb      	ldr	r3, [r7, #24]
 802319e:	68fa      	ldr	r2, [r7, #12]
 80231a0:	4413      	add	r3, r2
 80231a2:	781b      	ldrb	r3, [r3, #0]
 80231a4:	2b00      	cmp	r3, #0
 80231a6:	d005      	beq.n	80231b4 <_lv_txt_get_next_line+0x178>
 80231a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80231ac:	2b00      	cmp	r3, #0
 80231ae:	dcac      	bgt.n	802310a <_lv_txt_get_next_line+0xce>
 80231b0:	e000      	b.n	80231b4 <_lv_txt_get_next_line+0x178>
            break;
 80231b2:	bf00      	nop
        }

    }

    /*Always step at least one to avoid infinite loops*/
    if(i == 0) {
 80231b4:	69bb      	ldr	r3, [r7, #24]
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	d111      	bne.n	80231de <_lv_txt_get_next_line+0x1a2>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80231ba:	4b0e      	ldr	r3, [pc, #56]	; (80231f4 <_lv_txt_get_next_line+0x1b8>)
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	f107 0218 	add.w	r2, r7, #24
 80231c2:	4611      	mov	r1, r2
 80231c4:	68f8      	ldr	r0, [r7, #12]
 80231c6:	4798      	blx	r3
 80231c8:	6238      	str	r0, [r7, #32]
        if(used_width != NULL) {
 80231ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80231cc:	2b00      	cmp	r3, #0
 80231ce:	d006      	beq.n	80231de <_lv_txt_get_next_line+0x1a2>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 80231d0:	2200      	movs	r2, #0
 80231d2:	6a39      	ldr	r1, [r7, #32]
 80231d4:	68b8      	ldr	r0, [r7, #8]
 80231d6:	f7fa fe91 	bl	801defc <lv_font_get_glyph_width>
 80231da:	4603      	mov	r3, r0
 80231dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(used_width != NULL) {
 80231de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80231e0:	2b00      	cmp	r3, #0
 80231e2:	d002      	beq.n	80231ea <_lv_txt_get_next_line+0x1ae>
        *used_width = line_w;
 80231e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80231e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80231e8:	801a      	strh	r2, [r3, #0]
    }

    return i;
 80231ea:	69bb      	ldr	r3, [r7, #24]
}
 80231ec:	4618      	mov	r0, r3
 80231ee:	3730      	adds	r7, #48	; 0x30
 80231f0:	46bd      	mov	sp, r7
 80231f2:	bd80      	pop	{r7, pc}
 80231f4:	20000018 	.word	0x20000018

080231f8 <lv_txt_get_width>:

lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_text_flag_t flag)
{
 80231f8:	b580      	push	{r7, lr}
 80231fa:	b08a      	sub	sp, #40	; 0x28
 80231fc:	af00      	add	r7, sp, #0
 80231fe:	60f8      	str	r0, [r7, #12]
 8023200:	60b9      	str	r1, [r7, #8]
 8023202:	607a      	str	r2, [r7, #4]
 8023204:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 8023206:	68fb      	ldr	r3, [r7, #12]
 8023208:	2b00      	cmp	r3, #0
 802320a:	d101      	bne.n	8023210 <lv_txt_get_width+0x18>
 802320c:	2300      	movs	r3, #0
 802320e:	e053      	b.n	80232b8 <lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	2b00      	cmp	r3, #0
 8023214:	d101      	bne.n	802321a <lv_txt_get_width+0x22>
 8023216:	2300      	movs	r3, #0
 8023218:	e04e      	b.n	80232b8 <lv_txt_get_width+0xc0>
    if(txt[0] == '\0') return 0;
 802321a:	68fb      	ldr	r3, [r7, #12]
 802321c:	781b      	ldrb	r3, [r3, #0]
 802321e:	2b00      	cmp	r3, #0
 8023220:	d101      	bne.n	8023226 <lv_txt_get_width+0x2e>
 8023222:	2300      	movs	r3, #0
 8023224:	e048      	b.n	80232b8 <lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 8023226:	2300      	movs	r3, #0
 8023228:	623b      	str	r3, [r7, #32]
    lv_coord_t width             = 0;
 802322a:	2300      	movs	r3, #0
 802322c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 802322e:	2300      	movs	r3, #0
 8023230:	77fb      	strb	r3, [r7, #31]

    if(length != 0) {
 8023232:	68bb      	ldr	r3, [r7, #8]
 8023234:	2b00      	cmp	r3, #0
 8023236:	d03d      	beq.n	80232b4 <lv_txt_get_width+0xbc>
        while(i < length) {
 8023238:	e02f      	b.n	802329a <lv_txt_get_width+0xa2>
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 802323a:	f107 0320 	add.w	r3, r7, #32
 802323e:	f107 0214 	add.w	r2, r7, #20
 8023242:	f107 0118 	add.w	r1, r7, #24
 8023246:	68f8      	ldr	r0, [r7, #12]
 8023248:	f000 f874 	bl	8023334 <_lv_txt_encoded_letter_next_2>

            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802324c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8023250:	f003 0301 	and.w	r3, r3, #1
 8023254:	2b00      	cmp	r3, #0
 8023256:	d00a      	beq.n	802326e <lv_txt_get_width+0x76>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8023258:	69ba      	ldr	r2, [r7, #24]
 802325a:	f107 031f 	add.w	r3, r7, #31
 802325e:	4611      	mov	r1, r2
 8023260:	4618      	mov	r0, r3
 8023262:	f000 f82d 	bl	80232c0 <_lv_txt_is_cmd>
 8023266:	4603      	mov	r3, r0
 8023268:	2b00      	cmp	r3, #0
 802326a:	d000      	beq.n	802326e <lv_txt_get_width+0x76>
 802326c:	e015      	b.n	802329a <lv_txt_get_width+0xa2>
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 802326e:	69bb      	ldr	r3, [r7, #24]
 8023270:	697a      	ldr	r2, [r7, #20]
 8023272:	4619      	mov	r1, r3
 8023274:	6878      	ldr	r0, [r7, #4]
 8023276:	f7fa fe41 	bl	801defc <lv_font_get_glyph_width>
 802327a:	4603      	mov	r3, r0
 802327c:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(char_width > 0) {
 802327e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023282:	2b00      	cmp	r3, #0
 8023284:	dd09      	ble.n	802329a <lv_txt_get_width+0xa2>
                width += char_width;
 8023286:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8023288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802328a:	4413      	add	r3, r2
 802328c:	b29b      	uxth	r3, r3
 802328e:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 8023290:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8023292:	887b      	ldrh	r3, [r7, #2]
 8023294:	4413      	add	r3, r2
 8023296:	b29b      	uxth	r3, r3
 8023298:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 802329a:	6a3b      	ldr	r3, [r7, #32]
 802329c:	68ba      	ldr	r2, [r7, #8]
 802329e:	429a      	cmp	r2, r3
 80232a0:	d8cb      	bhi.n	802323a <lv_txt_get_width+0x42>
            }
        }

        if(width > 0) {
 80232a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	dd04      	ble.n	80232b4 <lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80232aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80232ac:	887b      	ldrh	r3, [r7, #2]
 80232ae:	1ad3      	subs	r3, r2, r3
 80232b0:	b29b      	uxth	r3, r3
 80232b2:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned*/
        }
    }

    return width;
 80232b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80232b8:	4618      	mov	r0, r3
 80232ba:	3728      	adds	r7, #40	; 0x28
 80232bc:	46bd      	mov	sp, r7
 80232be:	bd80      	pop	{r7, pc}

080232c0 <_lv_txt_is_cmd>:

bool _lv_txt_is_cmd(lv_text_cmd_state_t * state, uint32_t c)
{
 80232c0:	b480      	push	{r7}
 80232c2:	b085      	sub	sp, #20
 80232c4:	af00      	add	r7, sp, #0
 80232c6:	6078      	str	r0, [r7, #4]
 80232c8:	6039      	str	r1, [r7, #0]
    bool ret = false;
 80232ca:	2300      	movs	r3, #0
 80232cc:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80232ce:	2323      	movs	r3, #35	; 0x23
 80232d0:	461a      	mov	r2, r3
 80232d2:	683b      	ldr	r3, [r7, #0]
 80232d4:	4293      	cmp	r3, r2
 80232d6:	d11a      	bne.n	802330e <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80232d8:	687b      	ldr	r3, [r7, #4]
 80232da:	781b      	ldrb	r3, [r3, #0]
 80232dc:	2b00      	cmp	r3, #0
 80232de:	d105      	bne.n	80232ec <_lv_txt_is_cmd+0x2c>
            *state = LV_TEXT_CMD_STATE_PAR;
 80232e0:	687b      	ldr	r3, [r7, #4]
 80232e2:	2201      	movs	r2, #1
 80232e4:	701a      	strb	r2, [r3, #0]
            ret    = true;
 80232e6:	2301      	movs	r3, #1
 80232e8:	73fb      	strb	r3, [r7, #15]
 80232ea:	e010      	b.n	802330e <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char*/
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	781b      	ldrb	r3, [r3, #0]
 80232f0:	2b01      	cmp	r3, #1
 80232f2:	d103      	bne.n	80232fc <_lv_txt_is_cmd+0x3c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80232f4:	687b      	ldr	r3, [r7, #4]
 80232f6:	2200      	movs	r2, #0
 80232f8:	701a      	strb	r2, [r3, #0]
 80232fa:	e008      	b.n	802330e <_lv_txt_is_cmd+0x4e>
        }
        /*Command end*/
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 80232fc:	687b      	ldr	r3, [r7, #4]
 80232fe:	781b      	ldrb	r3, [r3, #0]
 8023300:	2b02      	cmp	r3, #2
 8023302:	d104      	bne.n	802330e <_lv_txt_is_cmd+0x4e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8023304:	687b      	ldr	r3, [r7, #4]
 8023306:	2200      	movs	r2, #0
 8023308:	701a      	strb	r2, [r3, #0]
            ret    = true;
 802330a:	2301      	movs	r3, #1
 802330c:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 802330e:	687b      	ldr	r3, [r7, #4]
 8023310:	781b      	ldrb	r3, [r3, #0]
 8023312:	2b01      	cmp	r3, #1
 8023314:	d107      	bne.n	8023326 <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 8023316:	683b      	ldr	r3, [r7, #0]
 8023318:	2b20      	cmp	r3, #32
 802331a:	d102      	bne.n	8023322 <_lv_txt_is_cmd+0x62>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	2202      	movs	r2, #2
 8023320:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 8023322:	2301      	movs	r3, #1
 8023324:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8023326:	7bfb      	ldrb	r3, [r7, #15]
}
 8023328:	4618      	mov	r0, r3
 802332a:	3714      	adds	r7, #20
 802332c:	46bd      	mov	sp, r7
 802332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023332:	4770      	bx	lr

08023334 <_lv_txt_encoded_letter_next_2>:

    return text;
}

void _lv_txt_encoded_letter_next_2(const char * txt, uint32_t * letter, uint32_t * letter_next, uint32_t * ofs)
{
 8023334:	b580      	push	{r7, lr}
 8023336:	b084      	sub	sp, #16
 8023338:	af00      	add	r7, sp, #0
 802333a:	60f8      	str	r0, [r7, #12]
 802333c:	60b9      	str	r1, [r7, #8]
 802333e:	607a      	str	r2, [r7, #4]
 8023340:	603b      	str	r3, [r7, #0]
    *letter = _lv_txt_encoded_next(txt, ofs);
 8023342:	4b0f      	ldr	r3, [pc, #60]	; (8023380 <_lv_txt_encoded_letter_next_2+0x4c>)
 8023344:	681b      	ldr	r3, [r3, #0]
 8023346:	6839      	ldr	r1, [r7, #0]
 8023348:	68f8      	ldr	r0, [r7, #12]
 802334a:	4798      	blx	r3
 802334c:	4602      	mov	r2, r0
 802334e:	68bb      	ldr	r3, [r7, #8]
 8023350:	601a      	str	r2, [r3, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8023352:	68bb      	ldr	r3, [r7, #8]
 8023354:	681b      	ldr	r3, [r3, #0]
 8023356:	2b00      	cmp	r3, #0
 8023358:	d00a      	beq.n	8023370 <_lv_txt_encoded_letter_next_2+0x3c>
 802335a:	4b09      	ldr	r3, [pc, #36]	; (8023380 <_lv_txt_encoded_letter_next_2+0x4c>)
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	683a      	ldr	r2, [r7, #0]
 8023360:	6812      	ldr	r2, [r2, #0]
 8023362:	68f9      	ldr	r1, [r7, #12]
 8023364:	440a      	add	r2, r1
 8023366:	2100      	movs	r1, #0
 8023368:	4610      	mov	r0, r2
 802336a:	4798      	blx	r3
 802336c:	4603      	mov	r3, r0
 802336e:	e000      	b.n	8023372 <_lv_txt_encoded_letter_next_2+0x3e>
 8023370:	2300      	movs	r3, #0
 8023372:	687a      	ldr	r2, [r7, #4]
 8023374:	6013      	str	r3, [r2, #0]
}
 8023376:	bf00      	nop
 8023378:	3710      	adds	r7, #16
 802337a:	46bd      	mov	sp, r7
 802337c:	bd80      	pop	{r7, pc}
 802337e:	bf00      	nop
 8023380:	20000018 	.word	0x20000018

08023384 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8023384:	b480      	push	{r7}
 8023386:	b085      	sub	sp, #20
 8023388:	af00      	add	r7, sp, #0
 802338a:	6078      	str	r0, [r7, #4]
 802338c:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     */

    uint32_t result = 0;
 802338e:	2300      	movs	r3, #0
 8023390:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8023392:	2300      	movs	r3, #0
 8023394:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 8023396:	683b      	ldr	r3, [r7, #0]
 8023398:	2b00      	cmp	r3, #0
 802339a:	d102      	bne.n	80233a2 <lv_txt_utf8_next+0x1e>
 802339c:	f107 0308 	add.w	r3, r7, #8
 80233a0:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 80233a2:	683b      	ldr	r3, [r7, #0]
 80233a4:	681b      	ldr	r3, [r3, #0]
 80233a6:	687a      	ldr	r2, [r7, #4]
 80233a8:	4413      	add	r3, r2
 80233aa:	781b      	ldrb	r3, [r3, #0]
 80233ac:	b25b      	sxtb	r3, r3
 80233ae:	2b00      	cmp	r3, #0
 80233b0:	db0b      	blt.n	80233ca <lv_txt_utf8_next+0x46>
        result = txt[*i];
 80233b2:	683b      	ldr	r3, [r7, #0]
 80233b4:	681b      	ldr	r3, [r3, #0]
 80233b6:	687a      	ldr	r2, [r7, #4]
 80233b8:	4413      	add	r3, r2
 80233ba:	781b      	ldrb	r3, [r3, #0]
 80233bc:	60fb      	str	r3, [r7, #12]
        (*i)++;
 80233be:	683b      	ldr	r3, [r7, #0]
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	1c5a      	adds	r2, r3, #1
 80233c4:	683b      	ldr	r3, [r7, #0]
 80233c6:	601a      	str	r2, [r3, #0]
 80233c8:	e0ea      	b.n	80235a0 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 80233ca:	683b      	ldr	r3, [r7, #0]
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	687a      	ldr	r2, [r7, #4]
 80233d0:	4413      	add	r3, r2
 80233d2:	781b      	ldrb	r3, [r3, #0]
 80233d4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80233d8:	2bc0      	cmp	r3, #192	; 0xc0
 80233da:	d128      	bne.n	802342e <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 80233dc:	683b      	ldr	r3, [r7, #0]
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	687a      	ldr	r2, [r7, #4]
 80233e2:	4413      	add	r3, r2
 80233e4:	781b      	ldrb	r3, [r3, #0]
 80233e6:	019b      	lsls	r3, r3, #6
 80233e8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80233ec:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80233ee:	683b      	ldr	r3, [r7, #0]
 80233f0:	681b      	ldr	r3, [r3, #0]
 80233f2:	1c5a      	adds	r2, r3, #1
 80233f4:	683b      	ldr	r3, [r7, #0]
 80233f6:	601a      	str	r2, [r3, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80233f8:	683b      	ldr	r3, [r7, #0]
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	687a      	ldr	r2, [r7, #4]
 80233fe:	4413      	add	r3, r2
 8023400:	781b      	ldrb	r3, [r3, #0]
 8023402:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8023406:	2b80      	cmp	r3, #128	; 0x80
 8023408:	d001      	beq.n	802340e <lv_txt_utf8_next+0x8a>
 802340a:	2300      	movs	r3, #0
 802340c:	e0c9      	b.n	80235a2 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 802340e:	683b      	ldr	r3, [r7, #0]
 8023410:	681b      	ldr	r3, [r3, #0]
 8023412:	687a      	ldr	r2, [r7, #4]
 8023414:	4413      	add	r3, r2
 8023416:	781b      	ldrb	r3, [r3, #0]
 8023418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802341c:	68fa      	ldr	r2, [r7, #12]
 802341e:	4413      	add	r3, r2
 8023420:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8023422:	683b      	ldr	r3, [r7, #0]
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	1c5a      	adds	r2, r3, #1
 8023428:	683b      	ldr	r3, [r7, #0]
 802342a:	601a      	str	r2, [r3, #0]
 802342c:	e0b8      	b.n	80235a0 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 802342e:	683b      	ldr	r3, [r7, #0]
 8023430:	681b      	ldr	r3, [r3, #0]
 8023432:	687a      	ldr	r2, [r7, #4]
 8023434:	4413      	add	r3, r2
 8023436:	781b      	ldrb	r3, [r3, #0]
 8023438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802343c:	2be0      	cmp	r3, #224	; 0xe0
 802343e:	d142      	bne.n	80234c6 <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8023440:	683b      	ldr	r3, [r7, #0]
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	687a      	ldr	r2, [r7, #4]
 8023446:	4413      	add	r3, r2
 8023448:	781b      	ldrb	r3, [r3, #0]
 802344a:	031b      	lsls	r3, r3, #12
 802344c:	b29b      	uxth	r3, r3
 802344e:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8023450:	683b      	ldr	r3, [r7, #0]
 8023452:	681b      	ldr	r3, [r3, #0]
 8023454:	1c5a      	adds	r2, r3, #1
 8023456:	683b      	ldr	r3, [r7, #0]
 8023458:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802345a:	683b      	ldr	r3, [r7, #0]
 802345c:	681b      	ldr	r3, [r3, #0]
 802345e:	687a      	ldr	r2, [r7, #4]
 8023460:	4413      	add	r3, r2
 8023462:	781b      	ldrb	r3, [r3, #0]
 8023464:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8023468:	2b80      	cmp	r3, #128	; 0x80
 802346a:	d001      	beq.n	8023470 <lv_txt_utf8_next+0xec>
 802346c:	2300      	movs	r3, #0
 802346e:	e098      	b.n	80235a2 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8023470:	683b      	ldr	r3, [r7, #0]
 8023472:	681b      	ldr	r3, [r3, #0]
 8023474:	687a      	ldr	r2, [r7, #4]
 8023476:	4413      	add	r3, r2
 8023478:	781b      	ldrb	r3, [r3, #0]
 802347a:	019b      	lsls	r3, r3, #6
 802347c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8023480:	68fa      	ldr	r2, [r7, #12]
 8023482:	4413      	add	r3, r2
 8023484:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8023486:	683b      	ldr	r3, [r7, #0]
 8023488:	681b      	ldr	r3, [r3, #0]
 802348a:	1c5a      	adds	r2, r3, #1
 802348c:	683b      	ldr	r3, [r7, #0]
 802348e:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023490:	683b      	ldr	r3, [r7, #0]
 8023492:	681b      	ldr	r3, [r3, #0]
 8023494:	687a      	ldr	r2, [r7, #4]
 8023496:	4413      	add	r3, r2
 8023498:	781b      	ldrb	r3, [r3, #0]
 802349a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802349e:	2b80      	cmp	r3, #128	; 0x80
 80234a0:	d001      	beq.n	80234a6 <lv_txt_utf8_next+0x122>
 80234a2:	2300      	movs	r3, #0
 80234a4:	e07d      	b.n	80235a2 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 80234a6:	683b      	ldr	r3, [r7, #0]
 80234a8:	681b      	ldr	r3, [r3, #0]
 80234aa:	687a      	ldr	r2, [r7, #4]
 80234ac:	4413      	add	r3, r2
 80234ae:	781b      	ldrb	r3, [r3, #0]
 80234b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80234b4:	68fa      	ldr	r2, [r7, #12]
 80234b6:	4413      	add	r3, r2
 80234b8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80234ba:	683b      	ldr	r3, [r7, #0]
 80234bc:	681b      	ldr	r3, [r3, #0]
 80234be:	1c5a      	adds	r2, r3, #1
 80234c0:	683b      	ldr	r3, [r7, #0]
 80234c2:	601a      	str	r2, [r3, #0]
 80234c4:	e06c      	b.n	80235a0 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80234c6:	683b      	ldr	r3, [r7, #0]
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	687a      	ldr	r2, [r7, #4]
 80234cc:	4413      	add	r3, r2
 80234ce:	781b      	ldrb	r3, [r3, #0]
 80234d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80234d4:	2bf0      	cmp	r3, #240	; 0xf0
 80234d6:	d15e      	bne.n	8023596 <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80234d8:	683b      	ldr	r3, [r7, #0]
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	687a      	ldr	r2, [r7, #4]
 80234de:	4413      	add	r3, r2
 80234e0:	781b      	ldrb	r3, [r3, #0]
 80234e2:	049b      	lsls	r3, r3, #18
 80234e4:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80234e8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80234ea:	683b      	ldr	r3, [r7, #0]
 80234ec:	681b      	ldr	r3, [r3, #0]
 80234ee:	1c5a      	adds	r2, r3, #1
 80234f0:	683b      	ldr	r3, [r7, #0]
 80234f2:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80234f4:	683b      	ldr	r3, [r7, #0]
 80234f6:	681b      	ldr	r3, [r3, #0]
 80234f8:	687a      	ldr	r2, [r7, #4]
 80234fa:	4413      	add	r3, r2
 80234fc:	781b      	ldrb	r3, [r3, #0]
 80234fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8023502:	2b80      	cmp	r3, #128	; 0x80
 8023504:	d001      	beq.n	802350a <lv_txt_utf8_next+0x186>
 8023506:	2300      	movs	r3, #0
 8023508:	e04b      	b.n	80235a2 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 802350a:	683b      	ldr	r3, [r7, #0]
 802350c:	681b      	ldr	r3, [r3, #0]
 802350e:	687a      	ldr	r2, [r7, #4]
 8023510:	4413      	add	r3, r2
 8023512:	781b      	ldrb	r3, [r3, #0]
 8023514:	031b      	lsls	r3, r3, #12
 8023516:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 802351a:	68fa      	ldr	r2, [r7, #12]
 802351c:	4413      	add	r3, r2
 802351e:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8023520:	683b      	ldr	r3, [r7, #0]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	1c5a      	adds	r2, r3, #1
 8023526:	683b      	ldr	r3, [r7, #0]
 8023528:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802352a:	683b      	ldr	r3, [r7, #0]
 802352c:	681b      	ldr	r3, [r3, #0]
 802352e:	687a      	ldr	r2, [r7, #4]
 8023530:	4413      	add	r3, r2
 8023532:	781b      	ldrb	r3, [r3, #0]
 8023534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8023538:	2b80      	cmp	r3, #128	; 0x80
 802353a:	d001      	beq.n	8023540 <lv_txt_utf8_next+0x1bc>
 802353c:	2300      	movs	r3, #0
 802353e:	e030      	b.n	80235a2 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8023540:	683b      	ldr	r3, [r7, #0]
 8023542:	681b      	ldr	r3, [r3, #0]
 8023544:	687a      	ldr	r2, [r7, #4]
 8023546:	4413      	add	r3, r2
 8023548:	781b      	ldrb	r3, [r3, #0]
 802354a:	019b      	lsls	r3, r3, #6
 802354c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8023550:	68fa      	ldr	r2, [r7, #12]
 8023552:	4413      	add	r3, r2
 8023554:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8023556:	683b      	ldr	r3, [r7, #0]
 8023558:	681b      	ldr	r3, [r3, #0]
 802355a:	1c5a      	adds	r2, r3, #1
 802355c:	683b      	ldr	r3, [r7, #0]
 802355e:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023560:	683b      	ldr	r3, [r7, #0]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	687a      	ldr	r2, [r7, #4]
 8023566:	4413      	add	r3, r2
 8023568:	781b      	ldrb	r3, [r3, #0]
 802356a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802356e:	2b80      	cmp	r3, #128	; 0x80
 8023570:	d001      	beq.n	8023576 <lv_txt_utf8_next+0x1f2>
 8023572:	2300      	movs	r3, #0
 8023574:	e015      	b.n	80235a2 <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 8023576:	683b      	ldr	r3, [r7, #0]
 8023578:	681b      	ldr	r3, [r3, #0]
 802357a:	687a      	ldr	r2, [r7, #4]
 802357c:	4413      	add	r3, r2
 802357e:	781b      	ldrb	r3, [r3, #0]
 8023580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023584:	68fa      	ldr	r2, [r7, #12]
 8023586:	4413      	add	r3, r2
 8023588:	60fb      	str	r3, [r7, #12]
            (*i)++;
 802358a:	683b      	ldr	r3, [r7, #0]
 802358c:	681b      	ldr	r3, [r3, #0]
 802358e:	1c5a      	adds	r2, r3, #1
 8023590:	683b      	ldr	r3, [r7, #0]
 8023592:	601a      	str	r2, [r3, #0]
 8023594:	e004      	b.n	80235a0 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8023596:	683b      	ldr	r3, [r7, #0]
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	1c5a      	adds	r2, r3, #1
 802359c:	683b      	ldr	r3, [r7, #0]
 802359e:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 80235a0:	68fb      	ldr	r3, [r7, #12]
}
 80235a2:	4618      	mov	r0, r3
 80235a4:	3714      	adds	r7, #20
 80235a6:	46bd      	mov	sp, r7
 80235a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ac:	4770      	bx	lr
	...

080235b0 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80235b0:	b580      	push	{r7, lr}
 80235b2:	b084      	sub	sp, #16
 80235b4:	af00      	add	r7, sp, #0
 80235b6:	6078      	str	r0, [r7, #4]
 80235b8:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 80235ba:	2300      	movs	r3, #0
 80235bc:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 80235be:	2300      	movs	r3, #0
 80235c0:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 80235c2:	e009      	b.n	80235d8 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80235c4:	4b09      	ldr	r3, [pc, #36]	; (80235ec <lv_txt_utf8_get_char_id+0x3c>)
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	f107 0208 	add.w	r2, r7, #8
 80235cc:	4611      	mov	r1, r2
 80235ce:	6878      	ldr	r0, [r7, #4]
 80235d0:	4798      	blx	r3
        char_cnt++;
 80235d2:	68fb      	ldr	r3, [r7, #12]
 80235d4:	3301      	adds	r3, #1
 80235d6:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 80235d8:	68bb      	ldr	r3, [r7, #8]
 80235da:	683a      	ldr	r2, [r7, #0]
 80235dc:	429a      	cmp	r2, r3
 80235de:	d8f1      	bhi.n	80235c4 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 80235e0:	68fb      	ldr	r3, [r7, #12]
}
 80235e2:	4618      	mov	r0, r3
 80235e4:	3710      	adds	r7, #16
 80235e6:	46bd      	mov	sp, r7
 80235e8:	bd80      	pop	{r7, pc}
 80235ea:	bf00      	nop
 80235ec:	20000018 	.word	0x20000018

080235f0 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 80235f0:	b580      	push	{r7, lr}
 80235f2:	b086      	sub	sp, #24
 80235f4:	af00      	add	r7, sp, #0
 80235f6:	60f8      	str	r0, [r7, #12]
 80235f8:	60b9      	str	r1, [r7, #8]
 80235fa:	607a      	str	r2, [r7, #4]
 80235fc:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 80235fe:	68bb      	ldr	r3, [r7, #8]
 8023600:	617b      	str	r3, [r7, #20]
 8023602:	e02d      	b.n	8023660 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	085b      	lsrs	r3, r3, #1
 8023608:	683a      	ldr	r2, [r7, #0]
 802360a:	fb02 f303 	mul.w	r3, r2, r3
 802360e:	697a      	ldr	r2, [r7, #20]
 8023610:	4413      	add	r3, r2
 8023612:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 8023614:	6a3b      	ldr	r3, [r7, #32]
 8023616:	6979      	ldr	r1, [r7, #20]
 8023618:	68f8      	ldr	r0, [r7, #12]
 802361a:	4798      	blx	r3
 802361c:	6138      	str	r0, [r7, #16]
 802361e:	693b      	ldr	r3, [r7, #16]
 8023620:	2b00      	cmp	r3, #0
 8023622:	dd12      	ble.n	802364a <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 8023624:	687b      	ldr	r3, [r7, #4]
 8023626:	085b      	lsrs	r3, r3, #1
 8023628:	687a      	ldr	r2, [r7, #4]
 802362a:	f002 0201 	and.w	r2, r2, #1
 802362e:	2a00      	cmp	r2, #0
 8023630:	bf0c      	ite	eq
 8023632:	2201      	moveq	r2, #1
 8023634:	2200      	movne	r2, #0
 8023636:	b2d2      	uxtb	r2, r2
 8023638:	1a9b      	subs	r3, r3, r2
 802363a:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 802363c:	697a      	ldr	r2, [r7, #20]
 802363e:	683b      	ldr	r3, [r7, #0]
 8023640:	4413      	add	r3, r2
 8023642:	617b      	str	r3, [r7, #20]
 8023644:	697b      	ldr	r3, [r7, #20]
 8023646:	60bb      	str	r3, [r7, #8]
 8023648:	e00a      	b.n	8023660 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 802364a:	693b      	ldr	r3, [r7, #16]
 802364c:	2b00      	cmp	r3, #0
 802364e:	da05      	bge.n	802365c <_lv_utils_bsearch+0x6c>
            n /= 2;
 8023650:	687b      	ldr	r3, [r7, #4]
 8023652:	085b      	lsrs	r3, r3, #1
 8023654:	607b      	str	r3, [r7, #4]
            middle = base;
 8023656:	68bb      	ldr	r3, [r7, #8]
 8023658:	617b      	str	r3, [r7, #20]
 802365a:	e001      	b.n	8023660 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 802365c:	697b      	ldr	r3, [r7, #20]
 802365e:	e003      	b.n	8023668 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8023660:	687b      	ldr	r3, [r7, #4]
 8023662:	2b00      	cmp	r3, #0
 8023664:	d1ce      	bne.n	8023604 <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8023666:	2300      	movs	r3, #0
}
 8023668:	4618      	mov	r0, r3
 802366a:	3718      	adds	r7, #24
 802366c:	46bd      	mov	sp, r7
 802366e:	bd80      	pop	{r7, pc}

08023670 <__libc_init_array>:
 8023670:	b570      	push	{r4, r5, r6, lr}
 8023672:	4d0d      	ldr	r5, [pc, #52]	; (80236a8 <__libc_init_array+0x38>)
 8023674:	4c0d      	ldr	r4, [pc, #52]	; (80236ac <__libc_init_array+0x3c>)
 8023676:	1b64      	subs	r4, r4, r5
 8023678:	10a4      	asrs	r4, r4, #2
 802367a:	2600      	movs	r6, #0
 802367c:	42a6      	cmp	r6, r4
 802367e:	d109      	bne.n	8023694 <__libc_init_array+0x24>
 8023680:	4d0b      	ldr	r5, [pc, #44]	; (80236b0 <__libc_init_array+0x40>)
 8023682:	4c0c      	ldr	r4, [pc, #48]	; (80236b4 <__libc_init_array+0x44>)
 8023684:	f000 f836 	bl	80236f4 <_init>
 8023688:	1b64      	subs	r4, r4, r5
 802368a:	10a4      	asrs	r4, r4, #2
 802368c:	2600      	movs	r6, #0
 802368e:	42a6      	cmp	r6, r4
 8023690:	d105      	bne.n	802369e <__libc_init_array+0x2e>
 8023692:	bd70      	pop	{r4, r5, r6, pc}
 8023694:	f855 3b04 	ldr.w	r3, [r5], #4
 8023698:	4798      	blx	r3
 802369a:	3601      	adds	r6, #1
 802369c:	e7ee      	b.n	802367c <__libc_init_array+0xc>
 802369e:	f855 3b04 	ldr.w	r3, [r5], #4
 80236a2:	4798      	blx	r3
 80236a4:	3601      	adds	r6, #1
 80236a6:	e7f2      	b.n	802368e <__libc_init_array+0x1e>
 80236a8:	08026f54 	.word	0x08026f54
 80236ac:	08026f54 	.word	0x08026f54
 80236b0:	08026f54 	.word	0x08026f54
 80236b4:	08026f58 	.word	0x08026f58

080236b8 <memcpy>:
 80236b8:	440a      	add	r2, r1
 80236ba:	4291      	cmp	r1, r2
 80236bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80236c0:	d100      	bne.n	80236c4 <memcpy+0xc>
 80236c2:	4770      	bx	lr
 80236c4:	b510      	push	{r4, lr}
 80236c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80236ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80236ce:	4291      	cmp	r1, r2
 80236d0:	d1f9      	bne.n	80236c6 <memcpy+0xe>
 80236d2:	bd10      	pop	{r4, pc}

080236d4 <memset>:
 80236d4:	4402      	add	r2, r0
 80236d6:	4603      	mov	r3, r0
 80236d8:	4293      	cmp	r3, r2
 80236da:	d100      	bne.n	80236de <memset+0xa>
 80236dc:	4770      	bx	lr
 80236de:	f803 1b01 	strb.w	r1, [r3], #1
 80236e2:	e7f9      	b.n	80236d8 <memset+0x4>

080236e4 <strcpy>:
 80236e4:	4603      	mov	r3, r0
 80236e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80236ea:	f803 2b01 	strb.w	r2, [r3], #1
 80236ee:	2a00      	cmp	r2, #0
 80236f0:	d1f9      	bne.n	80236e6 <strcpy+0x2>
 80236f2:	4770      	bx	lr

080236f4 <_init>:
 80236f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80236f6:	bf00      	nop
 80236f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80236fa:	bc08      	pop	{r3}
 80236fc:	469e      	mov	lr, r3
 80236fe:	4770      	bx	lr

08023700 <_fini>:
 8023700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023702:	bf00      	nop
 8023704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023706:	bc08      	pop	{r3}
 8023708:	469e      	mov	lr, r3
 802370a:	4770      	bx	lr
