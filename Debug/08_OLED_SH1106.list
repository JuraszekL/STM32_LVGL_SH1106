
08_OLED_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000267e0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007334  080269d8  080269d8  000369d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802dd0c  0802dd0c  00040030  2**0
                  CONTENTS
  4 .ARM          00000008  0802dd0c  0802dd0c  0003dd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802dd14  0802dd14  00040030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802dd14  0802dd14  0003dd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802dd18  0802dd18  0003dd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0802dd1c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca4c  20000030  0802dd4c  00040030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ca7c  0802dd4c  0004ca7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000764c6  00000000  00000000  0004005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d50a  00000000  00000000  000b6524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003a28  00000000  00000000  000c3a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003928  00000000  00000000  000c7458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039607  00000000  00000000  000cad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00062309  00000000  00000000  00104387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fb0e  00000000  00000000  00166690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0027619e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f1fc  00000000  00000000  002761f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	080269c0 	.word	0x080269c0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	080269c0 	.word	0x080269c0

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 b974 	b.w	800055c <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468e      	mov	lr, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14d      	bne.n	8000336 <__udivmoddi4+0xaa>
 800029a:	428a      	cmp	r2, r1
 800029c:	4694      	mov	ip, r2
 800029e:	d969      	bls.n	8000374 <__udivmoddi4+0xe8>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b152      	cbz	r2, 80002bc <__udivmoddi4+0x30>
 80002a6:	fa01 f302 	lsl.w	r3, r1, r2
 80002aa:	f1c2 0120 	rsb	r1, r2, #32
 80002ae:	fa20 f101 	lsr.w	r1, r0, r1
 80002b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b6:	ea41 0e03 	orr.w	lr, r1, r3
 80002ba:	4094      	lsls	r4, r2
 80002bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c0:	0c21      	lsrs	r1, r4, #16
 80002c2:	fbbe f6f8 	udiv	r6, lr, r8
 80002c6:	fa1f f78c 	uxth.w	r7, ip
 80002ca:	fb08 e316 	mls	r3, r8, r6, lr
 80002ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002d2:	fb06 f107 	mul.w	r1, r6, r7
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e2:	f080 811f 	bcs.w	8000524 <__udivmoddi4+0x298>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 811c 	bls.w	8000524 <__udivmoddi4+0x298>
 80002ec:	3e02      	subs	r6, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f8:	fb08 3310 	mls	r3, r8, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 f707 	mul.w	r7, r0, r7
 8000304:	42a7      	cmp	r7, r4
 8000306:	d90a      	bls.n	800031e <__udivmoddi4+0x92>
 8000308:	eb1c 0404 	adds.w	r4, ip, r4
 800030c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000310:	f080 810a 	bcs.w	8000528 <__udivmoddi4+0x29c>
 8000314:	42a7      	cmp	r7, r4
 8000316:	f240 8107 	bls.w	8000528 <__udivmoddi4+0x29c>
 800031a:	4464      	add	r4, ip
 800031c:	3802      	subs	r0, #2
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	1be4      	subs	r4, r4, r7
 8000324:	2600      	movs	r6, #0
 8000326:	b11d      	cbz	r5, 8000330 <__udivmoddi4+0xa4>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c5 4300 	strd	r4, r3, [r5]
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0xc2>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80ef 	beq.w	800051e <__udivmoddi4+0x292>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x160>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xd4>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80f9 	bhi.w	8000552 <__udivmoddi4+0x2c6>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0303 	sbc.w	r3, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	469e      	mov	lr, r3
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0e0      	beq.n	8000330 <__udivmoddi4+0xa4>
 800036e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000372:	e7dd      	b.n	8000330 <__udivmoddi4+0xa4>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xec>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	2a00      	cmp	r2, #0
 800037e:	f040 8092 	bne.w	80004a6 <__udivmoddi4+0x21a>
 8000382:	eba1 010c 	sub.w	r1, r1, ip
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2601      	movs	r6, #1
 8000390:	0c20      	lsrs	r0, r4, #16
 8000392:	fbb1 f3f7 	udiv	r3, r1, r7
 8000396:	fb07 1113 	mls	r1, r7, r3, r1
 800039a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039e:	fb0e f003 	mul.w	r0, lr, r3
 80003a2:	4288      	cmp	r0, r1
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x12c>
 80003a6:	eb1c 0101 	adds.w	r1, ip, r1
 80003aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x12a>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2c0>
 80003b6:	4643      	mov	r3, r8
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c0:	fb07 1110 	mls	r1, r7, r0, r1
 80003c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x156>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x154>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2ca>
 80003e0:	4608      	mov	r0, r1
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ea:	e79c      	b.n	8000326 <__udivmoddi4+0x9a>
 80003ec:	f1c6 0720 	rsb	r7, r6, #32
 80003f0:	40b3      	lsls	r3, r6
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa20 f407 	lsr.w	r4, r0, r7
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	431c      	orrs	r4, r3
 8000404:	40f9      	lsrs	r1, r7
 8000406:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040a:	fa00 f306 	lsl.w	r3, r0, r6
 800040e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000412:	0c20      	lsrs	r0, r4, #16
 8000414:	fa1f fe8c 	uxth.w	lr, ip
 8000418:	fb09 1118 	mls	r1, r9, r8, r1
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	fb08 f00e 	mul.w	r0, r8, lr
 8000424:	4288      	cmp	r0, r1
 8000426:	fa02 f206 	lsl.w	r2, r2, r6
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b8>
 800042c:	eb1c 0101 	adds.w	r1, ip, r1
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2bc>
 8000438:	4288      	cmp	r0, r1
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2bc>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4461      	add	r1, ip
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f9 	udiv	r0, r1, r9
 800044c:	fb09 1110 	mls	r1, r9, r0, r1
 8000450:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000454:	fb00 fe0e 	mul.w	lr, r0, lr
 8000458:	458e      	cmp	lr, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1e2>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2b4>
 8000466:	458e      	cmp	lr, r1
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2b4>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000472:	fba0 9402 	umull	r9, r4, r0, r2
 8000476:	eba1 010e 	sub.w	r1, r1, lr
 800047a:	42a1      	cmp	r1, r4
 800047c:	46c8      	mov	r8, r9
 800047e:	46a6      	mov	lr, r4
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x2a4>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x2a0>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x212>
 8000486:	ebb3 0208 	subs.w	r2, r3, r8
 800048a:	eb61 010e 	sbc.w	r1, r1, lr
 800048e:	fa01 f707 	lsl.w	r7, r1, r7
 8000492:	fa22 f306 	lsr.w	r3, r2, r6
 8000496:	40f1      	lsrs	r1, r6
 8000498:	431f      	orrs	r7, r3
 800049a:	e9c5 7100 	strd	r7, r1, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	40d8      	lsrs	r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa21 f303 	lsr.w	r3, r1, r3
 80004b4:	4091      	lsls	r1, r2
 80004b6:	4301      	orrs	r1, r0
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c4:	fb07 3610 	mls	r6, r7, r0, r3
 80004c8:	0c0b      	lsrs	r3, r1, #16
 80004ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ce:	fb00 f60e 	mul.w	r6, r0, lr
 80004d2:	429e      	cmp	r6, r3
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x260>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b8>
 80004e4:	429e      	cmp	r6, r3
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b8>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1b9b      	subs	r3, r3, r6
 80004ee:	b289      	uxth	r1, r1
 80004f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004f4:	fb07 3316 	mls	r3, r7, r6, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb06 f30e 	mul.w	r3, r6, lr
 8000500:	428b      	cmp	r3, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x28a>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2b0>
 800050e:	428b      	cmp	r3, r1
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2b0>
 8000512:	3e02      	subs	r6, #2
 8000514:	4461      	add	r1, ip
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0x104>
 800051e:	462e      	mov	r6, r5
 8000520:	4628      	mov	r0, r5
 8000522:	e705      	b.n	8000330 <__udivmoddi4+0xa4>
 8000524:	4606      	mov	r6, r0
 8000526:	e6e3      	b.n	80002f0 <__udivmoddi4+0x64>
 8000528:	4618      	mov	r0, r3
 800052a:	e6f8      	b.n	800031e <__udivmoddi4+0x92>
 800052c:	454b      	cmp	r3, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f8>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000538:	3801      	subs	r0, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f8>
 800053c:	4646      	mov	r6, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x28a>
 8000540:	4620      	mov	r0, r4
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1e2>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x260>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b8>
 800054c:	3b02      	subs	r3, #2
 800054e:	4461      	add	r1, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x12c>
 8000552:	4630      	mov	r0, r6
 8000554:	e709      	b.n	800036a <__udivmoddi4+0xde>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x156>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <MX_GPIO_Init+0xdc>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <MX_GPIO_Init+0xdc>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_GPIO_Init+0xdc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_GPIO_Init+0xdc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <MX_GPIO_Init+0xdc>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_GPIO_Init+0xdc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0xdc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <MX_GPIO_Init+0xdc>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_GPIO_Init+0xdc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xdc>)
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xdc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <MX_GPIO_Init+0xe0>)
 80005f6:	f001 f935 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000600:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_GPIO_Init+0xe4>)
 8000612:	f000 ff7b 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000616:	f244 0381 	movw	r3, #16513	; 0x4081
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0xe0>)
 8000630:	f000 ff6c 	bl	800150c <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40020800 	.word	0x40020800

08000648 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_I2C1_Init+0x78>)
 800064e:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <MX_I2C1_Init+0x7c>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20000209;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000654:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C1_Init+0x80>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_I2C1_Init+0x78>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_I2C1_Init+0x78>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_I2C1_Init+0x78>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000684:	f001 f908 	bl	8001898 <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 fb2f 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000696:	f001 fce9 	bl	800206c <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 fb26 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_I2C1_Init+0x78>)
 80006a8:	f001 fd2b 	bl	8002102 <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 fb1d 	bl	8000cf0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f001 fd70 	bl	800219c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000004c 	.word	0x2000004c
 80006c4:	40005400 	.word	0x40005400
 80006c8:	20000209 	.word	0x20000209

080006cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0ae      	sub	sp, #184	; 0xb8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2290      	movs	r2, #144	; 0x90
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f026 f957 	bl	80269a0 <memset>
  if(i2cHandle->Instance==I2C1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a22      	ldr	r2, [pc, #136]	; (8000780 <HAL_I2C_MspInit+0xb4>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d13c      	bne.n	8000776 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000700:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000702:	2300      	movs	r3, #0
 8000704:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fa9a 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000716:	f000 faeb 	bl	8000cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <HAL_I2C_MspInit+0xb8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <HAL_I2C_MspInit+0xb8>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_I2C_MspInit+0xb8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073a:	2312      	movs	r3, #18
 800073c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074c:	2304      	movs	r3, #4
 800074e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <HAL_I2C_MspInit+0xbc>)
 800075a:	f000 fed7 	bl	800150c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_I2C_MspInit+0xb8>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_I2C_MspInit+0xb8>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_I2C_MspInit+0xb8>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000776:	bf00      	nop
 8000778:	37b8      	adds	r7, #184	; 0xb8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40005400 	.word	0x40005400
 8000784:	40023800 	.word	0x40023800
 8000788:	40020400 	.word	0x40020400

0800078c <lv_port_disp_init>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_disp_t * lv_port_disp_init(I2C_HandleTypeDef *I2C){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    /*-------------------------
     * Initialize your display
     * -----------------------*/
    disp_init(I2C);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f831 	bl	80007fc <disp_init>
     */

    /* Example for 1) */
    static lv_disp_draw_buf_t draw_buf_dsc_1;
    static lv_color_t buf_1[MY_DISP_HOR_RES * 10];                          /*A buffer for 10 rows*/
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/
 800079a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800079e:	2200      	movs	r2, #0
 80007a0:	4910      	ldr	r1, [pc, #64]	; (80007e4 <lv_port_disp_init+0x58>)
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <lv_port_disp_init+0x5c>)
 80007a4:	f01f faee 	bl	801fd84 <lv_disp_draw_buf_init>
    /*-----------------------------------
     * Register the display in LVGL
     *----------------------------------*/

    static lv_disp_drv_t disp_drv;                         /*Descriptor of a display driver*/
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 80007a8:	4810      	ldr	r0, [pc, #64]	; (80007ec <lv_port_disp_init+0x60>)
 80007aa:	f01f faa7 	bl	801fcfc <lv_disp_drv_init>

    /*Set up the functions to access to your display*/

    /*Set the resolution of the display*/
    disp_drv.hor_res = MY_DISP_HOR_RES;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <lv_port_disp_init+0x60>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	801a      	strh	r2, [r3, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <lv_port_disp_init+0x60>)
 80007b6:	2240      	movs	r2, #64	; 0x40
 80007b8:	805a      	strh	r2, [r3, #2]

    /*Used to copy the buffer's content to the display*/
    disp_drv.flush_cb = disp_flush;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <lv_port_disp_init+0x60>)
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <lv_port_disp_init+0x64>)
 80007be:	615a      	str	r2, [r3, #20]
    disp_drv.set_px_cb = set_px_cb;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <lv_port_disp_init+0x60>)
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <lv_port_disp_init+0x68>)
 80007c4:	61da      	str	r2, [r3, #28]
    disp_drv.rounder_cb = rounder_cb;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <lv_port_disp_init+0x60>)
 80007c8:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <lv_port_disp_init+0x6c>)
 80007ca:	619a      	str	r2, [r3, #24]

    /*Set a display buffer*/
    disp_drv.draw_buf = &draw_buf_dsc_1;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <lv_port_disp_init+0x60>)
 80007ce:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <lv_port_disp_init+0x5c>)
 80007d0:	60da      	str	r2, [r3, #12]
     * Note that, in lv_conf.h you can enable GPUs that has built-in support in LVGL.
     * But if you have a different GPU you can use with this callback.*/
    //disp_drv.gpu_fill_cb = gpu_fill;

    /*Finally register the driver*/
    return lv_disp_drv_register(&disp_drv);
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <lv_port_disp_init+0x60>)
 80007d4:	f01f faf2 	bl	801fdbc <lv_disp_drv_register>
 80007d8:	4603      	mov	r3, r0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000bc 	.word	0x200000bc
 80007e8:	200000a0 	.word	0x200000a0
 80007ec:	200005bc 	.word	0x200005bc
 80007f0:	08000815 	.word	0x08000815
 80007f4:	0800086d 	.word	0x0800086d
 80007f8:	08000901 	.word	0x08000901

080007fc <disp_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

/*Initialize your display and the required peripherals.*/
static void disp_init(I2C_HandleTypeDef *i2c){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

	SH1106_HwInit(i2c);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 fb03 	bl	8000e10 <SH1106_HwInit>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af02      	add	r7, sp, #8
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
    if(disp_flush_enabled) {
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <disp_flush+0x54>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d016      	beq.n	8000858 <disp_flush+0x44>
        /*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/

    	uint8_t *buff = (uint8_t *)color_p;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	617b      	str	r3, [r7, #20]
    	SH1106_Send(area->x1, area->x2, area->y1, area->y2, buff);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000834:	b2d8      	uxtb	r0, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800083c:	b2d9      	uxtb	r1, r3
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800084c:	b2dc      	uxtb	r4, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	4623      	mov	r3, r4
 8000854:	f000 fb24 	bl	8000ea0 <SH1106_Send>
    }

    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
    lv_disp_flush_ready(disp_drv);
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f01f fbeb 	bl	8020034 <lv_disp_flush_ready>
}
 800085e:	bf00      	nop
 8000860:	371c      	adds	r7, #28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd90      	pop	{r4, r7, pc}
 8000866:	bf00      	nop
 8000868:	20000000 	.word	0x20000000

0800086c <set_px_cb>:



static void set_px_cb(struct _lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
        				lv_color_t color, lv_opa_t opa){
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	4611      	mov	r1, r2
 8000878:	461a      	mov	r2, r3
 800087a:	460b      	mov	r3, r1
 800087c:	80fb      	strh	r3, [r7, #6]
 800087e:	4613      	mov	r3, r2
 8000880:	80bb      	strh	r3, [r7, #4]

	uint16_t byte_index = x + ((y / 8) * buf_w);
 8000882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000886:	2b00      	cmp	r3, #0
 8000888:	da00      	bge.n	800088c <set_px_cb+0x20>
 800088a:	3307      	adds	r3, #7
 800088c:	10db      	asrs	r3, r3, #3
 800088e:	b21b      	sxth	r3, r3
 8000890:	b29a      	uxth	r2, r3
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	fb12 f303 	smulbb	r3, r2, r3
 8000898:	b29a      	uxth	r2, r3
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	82fb      	strh	r3, [r7, #22]
	uint8_t  bit_index  = y & 0x7;
 80008a0:	8c3b      	ldrh	r3, [r7, #32]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	757b      	strb	r3, [r7, #21]

	// == 0 inverts, so we get blue on black
	if(color.full == 0){
 80008aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d10f      	bne.n	80008d2 <set_px_cb+0x66>

		BIT_SET( buf[byte_index], bit_index);
 80008b2:	8afb      	ldrh	r3, [r7, #22]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	4413      	add	r3, r2
 80008b8:	7819      	ldrb	r1, [r3, #0]
 80008ba:	7d7b      	ldrb	r3, [r7, #21]
 80008bc:	2201      	movs	r2, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	8afb      	ldrh	r3, [r7, #22]
 80008c6:	68b8      	ldr	r0, [r7, #8]
 80008c8:	4403      	add	r3, r0
 80008ca:	430a      	orrs	r2, r1
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	701a      	strb	r2, [r3, #0]
	}
	else{

		BIT_CLEAR( buf[byte_index], bit_index);
	}
}
 80008d0:	e010      	b.n	80008f4 <set_px_cb+0x88>
		BIT_CLEAR( buf[byte_index], bit_index);
 80008d2:	8afb      	ldrh	r3, [r7, #22]
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	4413      	add	r3, r2
 80008d8:	7819      	ldrb	r1, [r3, #0]
 80008da:	7d7b      	ldrb	r3, [r7, #21]
 80008dc:	2201      	movs	r2, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	8afb      	ldrh	r3, [r7, #22]
 80008ea:	68b8      	ldr	r0, [r7, #8]
 80008ec:	4403      	add	r3, r0
 80008ee:	400a      	ands	r2, r1
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	701a      	strb	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	371c      	adds	r7, #28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <rounder_cb>:


static void rounder_cb(struct _lv_disp_drv_t * disp_drv, lv_area_t * area){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]

	area->y1 = (area->y1 & (~0x7));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000910:	f023 0307 	bic.w	r3, r3, #7
 8000914:	b21a      	sxth	r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	805a      	strh	r2, [r3, #2]
	area->y2 = ((area->y2 & (~0x7)) + 7);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000920:	b29b      	uxth	r3, r3
 8000922:	f023 0307 	bic.w	r3, r3, #7
 8000926:	b29b      	uxth	r3, r3
 8000928:	3307      	adds	r3, #7
 800092a:	b29b      	uxth	r3, r3
 800092c:	b21a      	sxth	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	80da      	strh	r2, [r3, #6]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <lv_timer_handler_run_in_period>:
 * with a given period in ms. You can use it with sleep or delay in OS environment.
 * This function is used to simplify the porting.
 * @param __ms the period for running lv_timer_handler()
 */
static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler_run_in_period(uint32_t ms)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    uint32_t curr_tick = lv_tick_get();
 8000948:	f01f fbc4 	bl	80200d4 <lv_tick_get>
 800094c:	60f8      	str	r0, [r7, #12]

    if((curr_tick - last_tick) >= (ms)) {
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <lv_timer_handler_run_in_period+0x34>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	d806      	bhi.n	800096a <lv_timer_handler_run_in_period+0x2a>
        last_tick = curr_tick;
 800095c:	4a05      	ldr	r2, [pc, #20]	; (8000974 <lv_timer_handler_run_in_period+0x34>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6013      	str	r3, [r2, #0]
        return lv_timer_handler();
 8000962:	f022 fd75 	bl	8023450 <lv_timer_handler>
 8000966:	4603      	mov	r3, r0
 8000968:	e000      	b.n	800096c <lv_timer_handler_run_in_period+0x2c>
    }
    return 1;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000060c 	.word	0x2000060c

08000978 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
    a->var = var;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	605a      	str	r2, [r3, #4]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
    a->time = duration;
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <lv_anim_set_path_cb>:
 * Set the path (curve) of the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function to set the current value of the animation.
 */
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	61da      	str	r2, [r3, #28]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <lv_anim_set_playback_time>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param time      the duration of the playback animation in milliseconds. 0: disable playback
 */
static inline void lv_anim_set_playback_time(lv_anim_t * a, uint32_t time)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
    a->playback_time = time;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <lv_anim_set_playback_delay>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before starting the playback animation.
 */
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint32_t delay)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
    a->playback_delay = delay;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <lv_anim_set_repeat_count>:
 * Make the animation repeat itself.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
    a->repeat_cnt = cnt;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	887a      	ldrh	r2, [r7, #2]
 8000a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <lv_anim_set_repeat_delay>:
 * Set a delay before repeating the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
    a->repeat_delay = delay;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <lv_scr_load>:
{
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
    lv_disp_load_scr(scr);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f003 fd6a 	bl	8004568 <lv_disp_load_scr>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 fbc4 	bl	800122e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f837 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f7ff fd59 	bl	8000560 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000aae:	f000 fb05 	bl	80010bc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000ab2:	f7ff fdc9 	bl	8000648 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000ab6:	f000 faa5 	bl	8001004 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  lv_init();
 8000aba:	f005 fa11 	bl	8005ee0 <lv_init>
  lv_port_disp_init(&hi2c1);
 8000abe:	4813      	ldr	r0, [pc, #76]	; (8000b0c <main+0x70>)
 8000ac0:	f7ff fe64 	bl	800078c <lv_port_disp_init>
  HAL_TIM_Base_Start_IT(&htim6);
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <main+0x74>)
 8000ac6:	f002 fd3d 	bl	8003544 <HAL_TIM_Base_Start_IT>

  lv_obj_t *scr = lv_obj_create(NULL);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f005 fa5a 	bl	8005f84 <lv_obj_create>
 8000ad0:	6178      	str	r0, [r7, #20]
  lv_style_t style_1;
  lv_style_init(&style_1);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f022 f8bf 	bl	8022c58 <lv_style_init>
  lv_obj_add_style(scr, &style_1, LV_PART_MAIN);
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	4619      	mov	r1, r3
 8000ae0:	6978      	ldr	r0, [r7, #20]
 8000ae2:	f00b fdcf 	bl	800c684 <lv_obj_add_style>

  lv_obj_t *label = lv_label_create(scr);
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f024 fbe6 	bl	80252b8 <lv_label_create>
 8000aec:	6138      	str	r0, [r7, #16]
  lv_label_set_text(label, LV_SYMBOL_BLUETOOTH);
 8000aee:	4909      	ldr	r1, [pc, #36]	; (8000b14 <main+0x78>)
 8000af0:	6938      	ldr	r0, [r7, #16]
 8000af2:	f024 fbf5 	bl	80252e0 <lv_label_set_text>
//  lv_obj_set_pos(label, 20, 20);
  lv_scr_load(scr);
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ffc5 	bl	8000a86 <lv_scr_load>

  lv_example_anim_2(label);
 8000afc:	6938      	ldr	r0, [r7, #16]
 8000afe:	f000 f89f 	bl	8000c40 <lv_example_anim_2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  lv_timer_handler_run_in_period(5);
 8000b02:	2005      	movs	r0, #5
 8000b04:	f7ff ff1c 	bl	8000940 <lv_timer_handler_run_in_period>
 8000b08:	e7fb      	b.n	8000b02 <main+0x66>
 8000b0a:	bf00      	nop
 8000b0c:	2000004c 	.word	0x2000004c
 8000b10:	20000614 	.word	0x20000614
 8000b14:	080269d8 	.word	0x080269d8

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2234      	movs	r2, #52	; 0x34
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f025 ff3a 	bl	80269a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b3c:	f001 fb4e 	bl	80021dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <SystemClock_Config+0xdc>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a2b      	ldr	r2, [pc, #172]	; (8000bf4 <SystemClock_Config+0xdc>)
 8000b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <SystemClock_Config+0xdc>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <SystemClock_Config+0xe0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b60:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <SystemClock_Config+0xe0>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <SystemClock_Config+0xe0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b8c:	2360      	movs	r3, #96	; 0x60
 8000b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fb7b 	bl	800229c <HAL_RCC_OscConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bac:	f000 f8a0 	bl	8000cf0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bb0:	f001 fb24 	bl	80021fc <HAL_PWREx_EnableOverDrive>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bba:	f000 f899 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	2103      	movs	r1, #3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fe0c 	bl	80027f8 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000be6:	f000 f883 	bl	8000cf0 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3750      	adds	r7, #80	; 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d102      	bne.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x18>

		lv_tick_inc(1);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f01f fa48 	bl	80200a4 <lv_tick_inc>
	}
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40001000 	.word	0x40001000

08000c20 <anim_x_cb>:

static void anim_x_cb(void *var, uint8_t v){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]

    lv_obj_set_x(var, v);
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f007 fd4b 	bl	80086ce <lv_obj_set_x>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <lv_example_anim_2>:


void lv_example_anim_2(lv_obj_t * obj){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	; 0x50
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

    lv_obj_align(obj, LV_ALIGN_LEFT_MID, 10, 0);
 8000c48:	2300      	movs	r3, #0
 8000c4a:	220a      	movs	r2, #10
 8000c4c:	2107      	movs	r1, #7
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f008 f840 	bl	8008cd4 <lv_obj_align>

    lv_anim_t a;
    lv_anim_init(&a);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f01f fa8f 	bl	802017c <lv_anim_init>
    lv_anim_set_var(&a, obj);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe87 	bl	8000978 <lv_anim_set_var>

    lv_anim_set_exec_cb(&a, (lv_anim_exec_xcb_t)anim_x_cb);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	491e      	ldr	r1, [pc, #120]	; (8000ce8 <lv_example_anim_2+0xa8>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fe8f 	bl	8000994 <lv_anim_set_exec_cb>
    lv_anim_set_values(&a, 10, 80);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2250      	movs	r2, #80	; 0x50
 8000c7c:	210a      	movs	r1, #10
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fea4 	bl	80009cc <lv_anim_set_values>
    lv_anim_set_time(&a, 1000);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe8f 	bl	80009b0 <lv_anim_set_time>
    lv_anim_set_playback_delay(&a, 100);
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2164      	movs	r1, #100	; 0x64
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fec8 	bl	8000a2e <lv_anim_set_playback_delay>
    lv_anim_set_playback_time(&a, 300);
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff feb3 	bl	8000a12 <lv_anim_set_playback_time>
    lv_anim_set_repeat_delay(&a, 500);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fed8 	bl	8000a6a <lv_anim_set_repeat_delay>
    lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fec1 	bl	8000a4a <lv_anim_set_repeat_count>
    lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <lv_example_anim_2+0xac>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe91 	bl	80009f6 <lv_anim_set_path_cb>

    lv_anim_start(&a);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f01f fa75 	bl	80201c8 <lv_anim_start>
}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	; 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	08000c21 	.word	0x08000c21
 8000cec:	08020483 	.word	0x08020483

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <sh1106_cmd>:
/*********************************************************************************/
							// Low level I2C functions //
/*********************************************************************************/


static void sh1106_cmd(uint8_t cmd){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af04      	add	r7, sp, #16
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]

//	i2c_write_byte(SH1106_ADR, SH1106_CMD, cmd, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_CMD, 1, &cmd, 1, SH1106_TIMEOUT_MS);
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <sh1106_cmd+0x2c>)
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	2178      	movs	r1, #120	; 0x78
 8000d1c:	f000 fe4c 	bl	80019b8 <HAL_I2C_Mem_Write>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000610 	.word	0x20000610

08000d2c <sh1106_multi_cmd>:

static void sh1106_multi_cmd(uint8_t *cmd, uint8_t len){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_CMD, cmd, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_CMD, 1, cmd, len, SH1106_TIMEOUT_MS);
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <sh1106_multi_cmd+0x30>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2264      	movs	r2, #100	; 0x64
 8000d42:	9202      	str	r2, [sp, #8]
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2178      	movs	r1, #120	; 0x78
 8000d50:	f000 fe32 	bl	80019b8 <HAL_I2C_Mem_Write>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000610 	.word	0x20000610

08000d60 <sh1106_multi_data>:

static void sh1106_multi_data(uint8_t *data, uint8_t len){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af04      	add	r7, sp, #16
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]

//	i2c_write_buff(SH1106_ADR, SH1106_MULTI_DATA, data, len, SH1106_I2C_NR);
	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_DATA, 1, data, len, SH1106_TIMEOUT_MS);
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <sh1106_multi_data+0x30>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2264      	movs	r2, #100	; 0x64
 8000d76:	9202      	str	r2, [sp, #8]
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	2240      	movs	r2, #64	; 0x40
 8000d82:	2178      	movs	r1, #120	; 0x78
 8000d84:	f000 fe18 	bl	80019b8 <HAL_I2C_Mem_Write>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000610 	.word	0x20000610

08000d94 <sh1106_set_col>:

/*********************************************************************************/
								// Basic functions //
/*********************************************************************************/

static void sh1106_set_col(uint8_t col){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]

	if(col > (HORIZONTAL_RES - 1)) return;
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db16      	blt.n	8000dd4 <sh1106_set_col+0x40>

	uint8_t buff[2];

	buff[0] = ((col + SH1106_OFFSET) & 0b00001111) | SET_L_COL_ADDR;
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	3302      	adds	r3, #2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	733b      	strb	r3, [r7, #12]
	buff[1] = ((col + SH1106_OFFSET) >> 4) | SET_H_COL_ADDR;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	3302      	adds	r3, #2
 8000db8:	111b      	asrs	r3, r3, #4
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	737b      	strb	r3, [r7, #13]

	sh1106_multi_cmd(buff, 2);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ffad 	bl	8000d2c <sh1106_multi_cmd>
 8000dd2:	e000      	b.n	8000dd6 <sh1106_set_col+0x42>
	if(col > (HORIZONTAL_RES - 1)) return;
 8000dd4:	bf00      	nop
}
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <sh1106_set_page>:

static void sh1106_set_page(uint8_t page){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]

	if(page > (PAGES - 1)) return;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b07      	cmp	r3, #7
 8000dea:	d80d      	bhi.n	8000e08 <sh1106_set_page+0x2c>

	uint8_t a = (page & 0b00000111) | SET_PAGE_ADDR;
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	73fb      	strb	r3, [r7, #15]

	sh1106_cmd(a);
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff7b 	bl	8000cfc <sh1106_cmd>
 8000e06:	e000      	b.n	8000e0a <sh1106_set_page+0x2e>
	if(page > (PAGES - 1)) return;
 8000e08:	bf00      	nop
}
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <SH1106_HwInit>:

							// oled initialization //

/*********************************************************************************/

void SH1106_HwInit(I2C_HandleTypeDef *i2c){
 8000e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e14:	b087      	sub	sp, #28
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	466b      	mov	r3, sp
 8000e1c:	461e      	mov	r6, r3

	sh1106_i2c = i2c;
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <SH1106_HwInit+0x88>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6013      	str	r3, [r2, #0]

	uint8_t a = sizeof(init_commands);
 8000e24:	2317      	movs	r3, #23
 8000e26:	75fb      	strb	r3, [r7, #23]
	uint8_t tab[a];
 8000e28:	7df9      	ldrb	r1, [r7, #23]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	b2cb      	uxtb	r3, r1
 8000e32:	2200      	movs	r2, #0
 8000e34:	4698      	mov	r8, r3
 8000e36:	4691      	mov	r9, r2
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e4c:	b2cb      	uxtb	r3, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	461c      	mov	r4, r3
 8000e52:	4615      	mov	r5, r2
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	00eb      	lsls	r3, r5, #3
 8000e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e62:	00e2      	lsls	r2, r4, #3
 8000e64:	460b      	mov	r3, r1
 8000e66:	3307      	adds	r3, #7
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e70:	466b      	mov	r3, sp
 8000e72:	3300      	adds	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]

	memcpy(tab, init_commands, a);
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <SH1106_HwInit+0x8c>)
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f025 fd81 	bl	8026984 <memcpy>

	sh1106_multi_cmd(tab, a);
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
 8000e84:	4619      	mov	r1, r3
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f7ff ff50 	bl	8000d2c <sh1106_multi_cmd>
 8000e8c:	46b5      	mov	sp, r6
}
 8000e8e:	bf00      	nop
 8000e90:	371c      	adds	r7, #28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e98:	20000610 	.word	0x20000610
 8000e9c:	08026a18 	.word	0x08026a18

08000ea0 <SH1106_Send>:
				// Y1 and Y2 have to be (multiplication of 8) -1 //
				// f.e. 0, 7, 15 etc.

/*********************************************************************************/

void SH1106_Send(uint8_t X1, uint8_t X2, uint8_t Y1, uint8_t Y2, uint8_t *Buff){
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4623      	mov	r3, r4
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	717b      	strb	r3, [r7, #5]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	713b      	strb	r3, [r7, #4]

	uint8_t xPixels = X2 - X1 + 1;
 8000ebe:	79ba      	ldrb	r2, [r7, #6]
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	73bb      	strb	r3, [r7, #14]

	uint8_t firstPage = (Y1 / 8);
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	08db      	lsrs	r3, r3, #3
 8000ece:	737b      	strb	r3, [r7, #13]
	uint8_t lastPage = (Y2 / 8);
 8000ed0:	793b      	ldrb	r3, [r7, #4]
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	733b      	strb	r3, [r7, #12]
	uint8_t pages = lastPage - firstPage + 1;
 8000ed6:	7b3a      	ldrb	r2, [r7, #12]
 8000ed8:	7b7b      	ldrb	r3, [r7, #13]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	3301      	adds	r3, #1
 8000ee0:	72fb      	strb	r3, [r7, #11]

	for(uint8_t a = 0; a < pages; a++){
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e019      	b.n	8000f1c <SH1106_Send+0x7c>

		sh1106_set_page(a + firstPage);
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	7b7b      	ldrb	r3, [r7, #13]
 8000eec:	4413      	add	r3, r2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff73 	bl	8000ddc <sh1106_set_page>
		sh1106_set_col(X1);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff4b 	bl	8000d94 <sh1106_set_col>
		sh1106_multi_data(&Buff[a * xPixels], xPixels);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	7bba      	ldrb	r2, [r7, #14]
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	7bba      	ldrb	r2, [r7, #14]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff25 	bl	8000d60 <sh1106_multi_data>
	for(uint8_t a = 0; a < pages; a++){
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3e1      	bcc.n	8000ee8 <SH1106_Send+0x48>
	}
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f970 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM6_DAC_IRQHandler+0x10>)
 8000fd2:	f002 fb2f 	bl	8003634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000614 	.word	0x20000614

08000fe0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_TIM6_Init+0x64>)
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <MX_TIM6_Init+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_TIM6_Init+0x64>)
 800101c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001020:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_TIM6_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_TIM6_Init+0x64>)
 800102a:	2263      	movs	r2, #99	; 0x63
 800102c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_TIM6_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_TIM6_Init+0x64>)
 8001036:	f002 fa2d 	bl	8003494 <HAL_TIM_Base_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001040:	f7ff fe56 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001044:	2320      	movs	r3, #32
 8001046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_TIM6_Init+0x64>)
 8001052:	f002 fcd7 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800105c:	f7ff fe48 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000614 	.word	0x20000614
 800106c:	40001000 	.word	0x40001000

08001070 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_TIM_Base_MspInit+0x44>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d113      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_TIM_Base_MspInit+0x48>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <HAL_TIM_Base_MspInit+0x48>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_TIM_Base_MspInit+0x48>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2036      	movs	r0, #54	; 0x36
 80010a0:	f000 f9fd 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a4:	2036      	movs	r0, #54	; 0x36
 80010a6:	f000 fa16 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40001000 	.word	0x40001000
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <MX_USART3_UART_Init+0x5c>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_USART3_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_USART3_UART_Init+0x58>)
 8001100:	f002 fd2c 	bl	8003b5c <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800110a:	f7ff fdf1 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000660 	.word	0x20000660
 8001118:	40004800 	.word	0x40004800

0800111c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0ae      	sub	sp, #184	; 0xb8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2290      	movs	r2, #144	; 0x90
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f025 fc2f 	bl	80269a0 <memset>
  if(uartHandle->Instance==USART3)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <HAL_UART_MspInit+0xb4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d13c      	bne.n	80011c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800114c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001150:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001152:	2300      	movs	r3, #0
 8001154:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fd72 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001166:	f7ff fdc3 	bl	8000cf0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_UART_MspInit+0xb8>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_UART_MspInit+0xb8>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_UART_MspInit+0xb8>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_UART_MspInit+0xb8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_UART_MspInit+0xb8>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0xb8>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800119a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b4:	2307      	movs	r3, #7
 80011b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_MspInit+0xbc>)
 80011c2:	f000 f9a3 	bl	800150c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	37b8      	adds	r7, #184	; 0xb8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40004800 	.word	0x40004800
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f8:	4c0b      	ldr	r4, [pc, #44]	; (8001228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001206:	f7ff feeb 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120a:	f025 fb97 	bl	802693c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fc45 	bl	8000a9c <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001220:	0802dd1c 	.word	0x0802dd1c
  ldr r2, =_sbss
 8001224:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001228:	2000ca7c 	.word	0x2000ca7c

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>

0800122e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f928 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f805 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123e:	f7ff fe77 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f943 	bl	80014f2 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001284:	f000 f90b 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000004 	.word	0x20000004
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	20000008 	.word	0x20000008

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000000c 	.word	0x2000000c
 80012cc:	200006e8 	.word	0x200006e8

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200006e8 	.word	0x200006e8

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <__NVIC_SetPriorityGrouping+0x40>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	4313      	orrs	r3, r2
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x40>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00
 800132c:	05fa0000 	.word	0x05fa0000

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff29 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff3e 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff31 	bl	800134c <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa2 	bl	8001444 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e175      	b.n	8001818 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 8164 	bne.w	8001812 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d005      	beq.n	8001562 <HAL_GPIO_Init+0x56>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d130      	bne.n	80015c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d017      	beq.n	8001600 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d123      	bne.n	8001654 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80be 	beq.w	8001812 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b66      	ldr	r3, [pc, #408]	; (8001830 <HAL_GPIO_Init+0x324>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_GPIO_Init+0x324>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_GPIO_Init+0x324>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016ae:	4a61      	ldr	r2, [pc, #388]	; (8001834 <HAL_GPIO_Init+0x328>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_GPIO_Init+0x32c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d037      	beq.n	800174a <HAL_GPIO_Init+0x23e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a57      	ldr	r2, [pc, #348]	; (800183c <HAL_GPIO_Init+0x330>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d031      	beq.n	8001746 <HAL_GPIO_Init+0x23a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a56      	ldr	r2, [pc, #344]	; (8001840 <HAL_GPIO_Init+0x334>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d02b      	beq.n	8001742 <HAL_GPIO_Init+0x236>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a55      	ldr	r2, [pc, #340]	; (8001844 <HAL_GPIO_Init+0x338>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d025      	beq.n	800173e <HAL_GPIO_Init+0x232>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a54      	ldr	r2, [pc, #336]	; (8001848 <HAL_GPIO_Init+0x33c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01f      	beq.n	800173a <HAL_GPIO_Init+0x22e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a53      	ldr	r2, [pc, #332]	; (800184c <HAL_GPIO_Init+0x340>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d019      	beq.n	8001736 <HAL_GPIO_Init+0x22a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_GPIO_Init+0x344>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0x226>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a51      	ldr	r2, [pc, #324]	; (8001854 <HAL_GPIO_Init+0x348>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00d      	beq.n	800172e <HAL_GPIO_Init+0x222>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a50      	ldr	r2, [pc, #320]	; (8001858 <HAL_GPIO_Init+0x34c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <HAL_GPIO_Init+0x21e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4f      	ldr	r2, [pc, #316]	; (800185c <HAL_GPIO_Init+0x350>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_GPIO_Init+0x21a>
 8001722:	2309      	movs	r3, #9
 8001724:	e012      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001726:	230a      	movs	r3, #10
 8001728:	e010      	b.n	800174c <HAL_GPIO_Init+0x240>
 800172a:	2308      	movs	r3, #8
 800172c:	e00e      	b.n	800174c <HAL_GPIO_Init+0x240>
 800172e:	2307      	movs	r3, #7
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001732:	2306      	movs	r3, #6
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x240>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x240>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x240>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <HAL_GPIO_Init+0x328>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HAL_GPIO_Init+0x354>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178e:	4a34      	ldr	r2, [pc, #208]	; (8001860 <HAL_GPIO_Init+0x354>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <HAL_GPIO_Init+0x354>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b8:	4a29      	ldr	r2, [pc, #164]	; (8001860 <HAL_GPIO_Init+0x354>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_GPIO_Init+0x354>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <HAL_GPIO_Init+0x354>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_GPIO_Init+0x354>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_GPIO_Init+0x354>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f ae86 	bls.w	800152c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40022000 	.word	0x40022000
 800185c:	40022400 	.word	0x40022400
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e07f      	b.n	80019aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7fe ff04 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	e006      	b.n	8001920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800191e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d104      	bne.n	8001932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_I2C_Init+0x11c>)
 800193e:	430b      	orrs	r3, r1
 8001940:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001950:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69d9      	ldr	r1, [r3, #28]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1a      	ldr	r2, [r3, #32]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	02008000 	.word	0x02008000

080019b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	817b      	strh	r3, [r7, #10]
 80019ca:	460b      	mov	r3, r1
 80019cc:	813b      	strh	r3, [r7, #8]
 80019ce:	4613      	mov	r3, r2
 80019d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b20      	cmp	r3, #32
 80019dc:	f040 80f9 	bne.w	8001bd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <HAL_I2C_Mem_Write+0x34>
 80019e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0ed      	b.n	8001bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_I2C_Mem_Write+0x4e>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e0e6      	b.n	8001bd4 <HAL_I2C_Mem_Write+0x21c>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a0e:	f7ff fc5f 	bl	80012d0 <HAL_GetTick>
 8001a12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2319      	movs	r3, #25
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f955 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0d1      	b.n	8001bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2221      	movs	r2, #33	; 0x21
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a58:	88f8      	ldrh	r0, [r7, #6]
 8001a5a:	893a      	ldrh	r2, [r7, #8]
 8001a5c:	8979      	ldrh	r1, [r7, #10]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4603      	mov	r3, r0
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f8b9 	bl	8001be0 <I2C_RequestMemoryWrite>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0a9      	b.n	8001bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	d90e      	bls.n	8001aa8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	22ff      	movs	r2, #255	; 0xff
 8001a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	8979      	ldrh	r1, [r7, #10]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fab1 	bl	8002008 <I2C_TransferConfig>
 8001aa6:	e00f      	b.n	8001ac8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	8979      	ldrh	r1, [r7, #10]
 8001aba:	2300      	movs	r3, #0
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 faa0 	bl	8002008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f93f 	bl	8001d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e07b      	b.n	8001bd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d034      	beq.n	8001b80 <HAL_I2C_Mem_Write+0x1c8>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d130      	bne.n	8001b80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	2200      	movs	r2, #0
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f8d1 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e04d      	b.n	8001bd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2bff      	cmp	r3, #255	; 0xff
 8001b40:	d90e      	bls.n	8001b60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	22ff      	movs	r2, #255	; 0xff
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	8979      	ldrh	r1, [r7, #10]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fa55 	bl	8002008 <I2C_TransferConfig>
 8001b5e:	e00f      	b.n	8001b80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	8979      	ldrh	r1, [r7, #10]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fa44 	bl	8002008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d19e      	bne.n	8001ac8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f91e 	bl	8001dd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e01a      	b.n	8001bd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_I2C_Mem_Write+0x224>)
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
  }
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	fe00e800 	.word	0xfe00e800

08001be0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	4608      	mov	r0, r1
 8001bea:	4611      	mov	r1, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	817b      	strh	r3, [r7, #10]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	813b      	strh	r3, [r7, #8]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	8979      	ldrh	r1, [r7, #10]
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <I2C_RequestMemoryWrite+0xa4>)
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f9fd 	bl	8002008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	69b9      	ldr	r1, [r7, #24]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f89c 	bl	8001d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e02c      	b.n	8001c7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c28:	893b      	ldrh	r3, [r7, #8]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
 8001c32:	e015      	b.n	8001c60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c34:	893b      	ldrh	r3, [r7, #8]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	69b9      	ldr	r1, [r7, #24]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f882 	bl	8001d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e012      	b.n	8001c7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c56:	893b      	ldrh	r3, [r7, #8]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2200      	movs	r2, #0
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f830 	bl	8001cd0 <I2C_WaitOnFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	80002000 	.word	0x80002000

08001c88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d103      	bne.n	8001ca6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d007      	beq.n	8001cc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	619a      	str	r2, [r3, #24]
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce0:	e022      	b.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce8:	d01e      	beq.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cea:	f7ff faf1 	bl	80012d0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d302      	bcc.n	8001d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d113      	bne.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	f043 0220 	orr.w	r2, r3, #32
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e00f      	b.n	8001d48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4013      	ands	r3, r2
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d0cd      	beq.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d5c:	e02c      	b.n	8001db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f870 	bl	8001e48 <I2C_IsErrorOccurred>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e02a      	b.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d78:	d01e      	beq.n	8001db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7a:	f7ff faa9 	bl	80012d0 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d113      	bne.n	8001db8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e007      	b.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d1cb      	bne.n	8001d5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ddc:	e028      	b.n	8001e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f830 	bl	8001e48 <I2C_IsErrorOccurred>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e026      	b.n	8001e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7ff fa6d 	bl	80012d0 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d113      	bne.n	8001e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e007      	b.n	8001e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d1cf      	bne.n	8001dde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d068      	beq.n	8001f46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e7c:	e049      	b.n	8001f12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e84:	d045      	beq.n	8001f12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e86:	f7ff fa23 	bl	80012d0 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d302      	bcc.n	8001e9c <I2C_IsErrorOccurred+0x54>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d13a      	bne.n	8001f12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ebe:	d121      	bne.n	8001f04 <I2C_IsErrorOccurred+0xbc>
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ec6:	d01d      	beq.n	8001f04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d01a      	beq.n	8001f04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001edc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ede:	f7ff f9f7 	bl	80012d0 <HAL_GetTick>
 8001ee2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee4:	e00e      	b.n	8001f04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ee6:	f7ff f9f3 	bl	80012d0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b19      	cmp	r3, #25
 8001ef2:	d907      	bls.n	8001f04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f043 0320 	orr.w	r3, r3, #32
 8001efa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001f02:	e006      	b.n	8001f12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d1e9      	bne.n	8001ee6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d003      	beq.n	8001f28 <I2C_IsErrorOccurred+0xe0>
 8001f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0aa      	beq.n	8001e7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d103      	bne.n	8001f38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2220      	movs	r2, #32
 8001f36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00b      	beq.n	8001f70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01c      	beq.n	8001ff6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff fe63 	bl	8001c88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <I2C_IsErrorOccurred+0x1bc>)
 8001fce:	400b      	ands	r3, r1
 8001fd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	fe00e800 	.word	0xfe00e800

08002008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	4613      	mov	r3, r2
 8002018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002020:	7a7b      	ldrb	r3, [r7, #9]
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002028:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	4313      	orrs	r3, r2
 8002032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002036:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <I2C_TransferConfig+0x60>)
 8002048:	430b      	orrs	r3, r1
 800204a:	43db      	mvns	r3, r3
 800204c:	ea02 0103 	and.w	r1, r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	430a      	orrs	r2, r1
 8002058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	03ff63ff 	.word	0x03ff63ff

0800206c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b20      	cmp	r3, #32
 8002080:	d138      	bne.n	80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800208c:	2302      	movs	r3, #2
 800208e:	e032      	b.n	80020f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	; 0x24
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b20      	cmp	r3, #32
 8002116:	d139      	bne.n	800218c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002122:	2302      	movs	r3, #2
 8002124:	e033      	b.n	800218e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2224      	movs	r2, #36	; 0x24
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80021aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ae:	6453      	str	r3, [r2, #68]	; 0x44
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4905      	ldr	r1, [pc, #20]	; (80021d8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800

080021dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000

080021fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_PWREx_EnableOverDrive+0x98>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a22      	ldr	r2, [pc, #136]	; (8002294 <HAL_PWREx_EnableOverDrive+0x98>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_PWREx_EnableOverDrive+0x98>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800222a:	f7ff f851 	bl	80012d0 <HAL_GetTick>
 800222e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002230:	e009      	b.n	8002246 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002232:	f7ff f84d 	bl	80012d0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002240:	d901      	bls.n	8002246 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e022      	b.n	800228c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002252:	d1ee      	bne.n	8002232 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800225a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002260:	f7ff f836 	bl	80012d0 <HAL_GetTick>
 8002264:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002266:	e009      	b.n	800227c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002268:	f7ff f832 	bl	80012d0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002276:	d901      	bls.n	800227c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e007      	b.n	800228c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002288:	d1ee      	bne.n	8002268 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000

0800229c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e29b      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8087 	beq.w	80023ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c0:	4b96      	ldr	r3, [pc, #600]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d00c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022cc:	4b93      	ldr	r3, [pc, #588]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d112      	bne.n	80022fe <HAL_RCC_OscConfig+0x62>
 80022d8:	4b90      	ldr	r3, [pc, #576]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e4:	d10b      	bne.n	80022fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e6:	4b8d      	ldr	r3, [pc, #564]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d06c      	beq.n	80023cc <HAL_RCC_OscConfig+0x130>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d168      	bne.n	80023cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e275      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x7a>
 8002308:	4b84      	ldr	r3, [pc, #528]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a83      	ldr	r2, [pc, #524]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e02e      	b.n	8002374 <HAL_RCC_OscConfig+0xd8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x9c>
 800231e:	4b7f      	ldr	r3, [pc, #508]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7e      	ldr	r2, [pc, #504]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b7c      	ldr	r3, [pc, #496]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7b      	ldr	r2, [pc, #492]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xd8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0xc0>
 8002342:	4b76      	ldr	r3, [pc, #472]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a75      	ldr	r2, [pc, #468]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b73      	ldr	r3, [pc, #460]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a72      	ldr	r2, [pc, #456]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xd8>
 800235c:	4b6f      	ldr	r3, [pc, #444]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6e      	ldr	r2, [pc, #440]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b6c      	ldr	r3, [pc, #432]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6b      	ldr	r2, [pc, #428]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe ffa8 	bl	80012d0 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe ffa4 	bl	80012d0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e229      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xe8>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe ff94 	bl	80012d0 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe ff90 	bl	80012d0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e215      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	4b57      	ldr	r3, [pc, #348]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x110>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d069      	beq.n	80024ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e6:	4b4d      	ldr	r3, [pc, #308]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d11c      	bne.n	800242c <HAL_RCC_OscConfig+0x190>
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x17a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e1e9      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	493d      	ldr	r1, [pc, #244]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	e040      	b.n	80024ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d023      	beq.n	800247c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002434:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a38      	ldr	r2, [pc, #224]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe ff46 	bl	80012d0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe ff42 	bl	80012d0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1c7      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4929      	ldr	r1, [pc, #164]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
 800247a:	e018      	b.n	80024ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x280>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a26      	ldr	r2, [pc, #152]	; (800251c <HAL_RCC_OscConfig+0x280>)
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe ff22 	bl	80012d0 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002490:	f7fe ff1e 	bl	80012d0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1a3      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d038      	beq.n	800252c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d019      	beq.n	80024f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80024c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c6:	4a15      	ldr	r2, [pc, #84]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe feff 	bl	80012d0 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7fe fefb 	bl	80012d0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e180      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80024ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x23a>
 80024f4:	e01a      	b.n	800252c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_RCC_OscConfig+0x280>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7fe fee5 	bl	80012d0 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250a:	f7fe fee1 	bl	80012d0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d903      	bls.n	8002520 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e166      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
 800251c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b92      	ldr	r3, [pc, #584]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ee      	bne.n	800250a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a4 	beq.w	8002682 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253a:	4b8c      	ldr	r3, [pc, #560]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4b89      	ldr	r3, [pc, #548]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a88      	ldr	r2, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b86      	ldr	r3, [pc, #536]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255e:	2301      	movs	r3, #1
 8002560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	4b83      	ldr	r3, [pc, #524]	; (8002770 <HAL_RCC_OscConfig+0x4d4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800256e:	4b80      	ldr	r3, [pc, #512]	; (8002770 <HAL_RCC_OscConfig+0x4d4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7f      	ldr	r2, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x4d4>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7fe fea9 	bl	80012d0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe fea5 	bl	80012d0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	; 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e12a      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002594:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x4d4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x31a>
 80025a8:	4b70      	ldr	r3, [pc, #448]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a6f      	ldr	r2, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	e02d      	b.n	8002612 <HAL_RCC_OscConfig+0x376>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x33c>
 80025be:	4b6b      	ldr	r3, [pc, #428]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	4b68      	ldr	r3, [pc, #416]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a67      	ldr	r2, [pc, #412]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e01c      	b.n	8002612 <HAL_RCC_OscConfig+0x376>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x35e>
 80025e0:	4b62      	ldr	r3, [pc, #392]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a61      	ldr	r2, [pc, #388]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x376>
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a58      	ldr	r2, [pc, #352]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fe59 	bl	80012d0 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fe55 	bl	80012d0 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0d8      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	4b4c      	ldr	r3, [pc, #304]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ee      	beq.n	8002622 <HAL_RCC_OscConfig+0x386>
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fe43 	bl	80012d0 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fe3f 	bl	80012d0 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0c2      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a3c      	ldr	r2, [pc, #240]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80ae 	beq.w	80027e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800268c:	4b37      	ldr	r3, [pc, #220]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d06d      	beq.n	8002774 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d14b      	bne.n	8002738 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a0:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80026a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fe10 	bl	80012d0 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fe0c 	bl	80012d0 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e091      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	071b      	lsls	r3, r3, #28
 80026fe:	491b      	ldr	r1, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fdde 	bl	80012d0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fdda 	bl	80012d0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e05f      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x47c>
 8002736:	e057      	b.n	80027e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0b      	ldr	r2, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 800273e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fdc4 	bl	80012d0 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fdc0 	bl	80012d0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e045      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_OscConfig+0x4d0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x4b0>
 800276a:	e03d      	b.n	80027e8 <HAL_RCC_OscConfig+0x54c>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_RCC_OscConfig+0x558>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d030      	beq.n	80027e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d129      	bne.n	80027e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d122      	bne.n	80027e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d119      	bne.n	80027e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	3b01      	subs	r3, #1
 80027be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d10f      	bne.n	80027e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0d0      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d910      	bls.n	8002840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 020f 	bic.w	r2, r3, #15
 8002826:	4965      	ldr	r1, [pc, #404]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0b8      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800285e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002862:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800287a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	494d      	ldr	r1, [pc, #308]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d040      	beq.n	800291c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d115      	bne.n	80028da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e07f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e073      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06b      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4936      	ldr	r1, [pc, #216]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe fcf0 	bl	80012d0 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe fcec 	bl	80012d0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e053      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d210      	bcs.n	800294c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 020f 	bic.w	r2, r3, #15
 8002932:	4922      	ldr	r1, [pc, #136]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e032      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4916      	ldr	r1, [pc, #88]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	490e      	ldr	r1, [pc, #56]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800298a:	f000 f821 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800298e:	4602      	mov	r2, r0
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	490a      	ldr	r1, [pc, #40]	; (80029c4 <HAL_RCC_ClockConfig+0x1cc>)
 800299c:	5ccb      	ldrb	r3, [r1, r3]
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1d0>)
 80029a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1d4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fc4c 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023c00 	.word	0x40023c00
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08026a30 	.word	0x08026a30
 80029c8:	20000004 	.word	0x20000004
 80029cc:	20000008 	.word	0x20000008

080029d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d4:	b094      	sub	sp, #80	; 0x50
 80029d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	647b      	str	r3, [r7, #68]	; 0x44
 80029dc:	2300      	movs	r3, #0
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e0:	2300      	movs	r3, #0
 80029e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e8:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d00d      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x40>
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	f200 80e1 	bhi.w	8002bbc <HAL_RCC_GetSysClockFreq+0x1ec>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x34>
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a02:	e0db      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a04:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a08:	e0db      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a0a:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a0e:	e0d8      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a10:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a18:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a1a:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d063      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a26:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	099b      	lsrs	r3, r3, #6
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a38:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a42:	4622      	mov	r2, r4
 8002a44:	462b      	mov	r3, r5
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a54:	0150      	lsls	r0, r2, #5
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	1a51      	subs	r1, r2, r1
 8002a5e:	6139      	str	r1, [r7, #16]
 8002a60:	4629      	mov	r1, r5
 8002a62:	eb63 0301 	sbc.w	r3, r3, r1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a74:	4659      	mov	r1, fp
 8002a76:	018b      	lsls	r3, r1, #6
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7e:	4651      	mov	r1, sl
 8002a80:	018a      	lsls	r2, r1, #6
 8002a82:	4651      	mov	r1, sl
 8002a84:	ebb2 0801 	subs.w	r8, r2, r1
 8002a88:	4659      	mov	r1, fp
 8002a8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa2:	4690      	mov	r8, r2
 8002aa4:	4699      	mov	r9, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	eb18 0303 	adds.w	r3, r8, r3
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	462b      	mov	r3, r5
 8002ab0:	eb49 0303 	adc.w	r3, r9, r3
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	024b      	lsls	r3, r1, #9
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002acc:	4621      	mov	r1, r4
 8002ace:	024a      	lsls	r2, r1, #9
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ae0:	f7fd fbbc 	bl	800025c <__aeabi_uldivmod>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aec:	e058      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	2200      	movs	r2, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	4611      	mov	r1, r2
 8002afa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b08:	4642      	mov	r2, r8
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	f04f 0000 	mov.w	r0, #0
 8002b10:	f04f 0100 	mov.w	r1, #0
 8002b14:	0159      	lsls	r1, r3, #5
 8002b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b1a:	0150      	lsls	r0, r2, #5
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4641      	mov	r1, r8
 8002b22:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b26:	4649      	mov	r1, r9
 8002b28:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b40:	ebb2 040a 	subs.w	r4, r2, sl
 8002b44:	eb63 050b 	sbc.w	r5, r3, fp
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	00eb      	lsls	r3, r5, #3
 8002b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b56:	00e2      	lsls	r2, r4, #3
 8002b58:	4614      	mov	r4, r2
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	18e3      	adds	r3, r4, r3
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	464b      	mov	r3, r9
 8002b64:	eb45 0303 	adc.w	r3, r5, r3
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b76:	4629      	mov	r1, r5
 8002b78:	028b      	lsls	r3, r1, #10
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b80:	4621      	mov	r1, r4
 8002b82:	028a      	lsls	r2, r1, #10
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	61fa      	str	r2, [r7, #28]
 8002b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b94:	f7fd fb62 	bl	800025c <__aeabi_uldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	3301      	adds	r3, #1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bba:	e002      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3750      	adds	r7, #80	; 0x50
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	007a1200 	.word	0x007a1200

08002bdc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0a9b      	lsrs	r3, r3, #10
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08026a40 	.word	0x08026a40

08002c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c20:	f7ff ffdc 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0b5b      	lsrs	r3, r3, #13
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4903      	ldr	r1, [pc, #12]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	08026a40 	.word	0x08026a40

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c6c:	4b69      	ldr	r3, [pc, #420]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a68      	ldr	r2, [pc, #416]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c76:	6093      	str	r3, [r2, #8]
 8002c78:	4b66      	ldr	r3, [pc, #408]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	4964      	ldr	r1, [pc, #400]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d017      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	4959      	ldr	r1, [pc, #356]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d017      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cda:	4b4e      	ldr	r3, [pc, #312]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	494a      	ldr	r1, [pc, #296]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 808b 	beq.w	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d32:	6413      	str	r3, [r2, #64]	; 0x40
 8002d34:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a34      	ldr	r2, [pc, #208]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fac0 	bl	80012d0 <HAL_GetTick>
 8002d50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d54:	f7fe fabc 	bl	80012d0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e38f      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d72:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d035      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d02e      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d90:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da6:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002db2:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d114      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fa84 	bl	80012d0 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fa80 	bl	80012d0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e351      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ee      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	4901      	ldr	r1, [pc, #4]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
 8002e12:	e00b      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	0ffffcff 	.word	0x0ffffcff
 8002e20:	4bac      	ldr	r3, [pc, #688]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4aab      	ldr	r2, [pc, #684]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e2a:	6093      	str	r3, [r2, #8]
 8002e2c:	4ba9      	ldr	r3, [pc, #676]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	49a6      	ldr	r1, [pc, #664]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e4a:	4ba2      	ldr	r3, [pc, #648]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e50:	4aa0      	ldr	r2, [pc, #640]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e5a:	4b9e      	ldr	r3, [pc, #632]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	499b      	ldr	r1, [pc, #620]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e78:	4b96      	ldr	r3, [pc, #600]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e86:	4993      	ldr	r1, [pc, #588]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e9a:	4b8e      	ldr	r3, [pc, #568]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea8:	498a      	ldr	r1, [pc, #552]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ebc:	4b85      	ldr	r3, [pc, #532]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eca:	4982      	ldr	r1, [pc, #520]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ede:	4b7d      	ldr	r3, [pc, #500]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4979      	ldr	r1, [pc, #484]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f00:	4b74      	ldr	r3, [pc, #464]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	4971      	ldr	r1, [pc, #452]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f22:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f023 020c 	bic.w	r2, r3, #12
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f30:	4968      	ldr	r1, [pc, #416]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f44:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	4960      	ldr	r1, [pc, #384]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f66:	4b5b      	ldr	r3, [pc, #364]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f74:	4957      	ldr	r1, [pc, #348]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f88:	4b52      	ldr	r3, [pc, #328]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	494f      	ldr	r1, [pc, #316]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002faa:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	4946      	ldr	r1, [pc, #280]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fcc:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	493e      	ldr	r1, [pc, #248]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	4935      	ldr	r1, [pc, #212]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800301e:	492d      	ldr	r1, [pc, #180]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d011      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003040:	4924      	ldr	r1, [pc, #144]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800304c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003050:	d101      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003052:	2301      	movs	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	4914      	ldr	r1, [pc, #80]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a4:	490b      	ldr	r1, [pc, #44]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00f      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c8:	4902      	ldr	r1, [pc, #8]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030e4:	4b8a      	ldr	r3, [pc, #552]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	4986      	ldr	r1, [pc, #536]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003108:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800310e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003118:	497d      	ldr	r1, [pc, #500]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d006      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80d6 	beq.w	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003134:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a75      	ldr	r2, [pc, #468]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800313e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003140:	f7fe f8c6 	bl	80012d0 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003148:	f7fe f8c2 	bl	80012d0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e195      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800315a:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d021      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	2b00      	cmp	r3, #0
 8003178:	d11d      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800317a:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003188:	4b61      	ldr	r3, [pc, #388]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318e:	0e1b      	lsrs	r3, r3, #24
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	019a      	lsls	r2, r3, #6
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	071b      	lsls	r3, r3, #28
 80031ae:	4958      	ldr	r1, [pc, #352]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02e      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e0:	d129      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031e2:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031f0:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f6:	0f1b      	lsrs	r3, r3, #28
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	019a      	lsls	r2, r3, #6
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	071b      	lsls	r3, r3, #28
 8003216:	493e      	ldr	r1, [pc, #248]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003224:	f023 021f 	bic.w	r2, r3, #31
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	3b01      	subs	r3, #1
 800322e:	4938      	ldr	r1, [pc, #224]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01d      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003242:	4b33      	ldr	r3, [pc, #204]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003248:	0e1b      	lsrs	r3, r3, #24
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003250:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003256:	0f1b      	lsrs	r3, r3, #28
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	019a      	lsls	r2, r3, #6
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	431a      	orrs	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	061b      	lsls	r3, r3, #24
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	071b      	lsls	r3, r3, #28
 8003276:	4926      	ldr	r1, [pc, #152]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d011      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	019a      	lsls	r2, r3, #6
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	071b      	lsls	r3, r3, #28
 80032a6:	491a      	ldr	r1, [pc, #104]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ba:	f7fe f809 	bl	80012d0 <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032c2:	f7fe f805 	bl	80012d0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d901      	bls.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0d8      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f040 80ce 	bne.w	8003484 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a08      	ldr	r2, [pc, #32]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f4:	f7fd ffec 	bl	80012d0 <HAL_GetTick>
 80032f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032fa:	e00b      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032fc:	f7fd ffe8 	bl	80012d0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d904      	bls.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e0bb      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003314:	4b5e      	ldr	r3, [pc, #376]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800331c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003320:	d0ec      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800333e:	2b00      	cmp	r3, #0
 8003340:	d02e      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d12a      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800334a:	4b51      	ldr	r3, [pc, #324]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003358:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	0f1b      	lsrs	r3, r3, #28
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	019a      	lsls	r2, r3, #6
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	061b      	lsls	r3, r3, #24
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	071b      	lsls	r3, r3, #28
 800337e:	4944      	ldr	r1, [pc, #272]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003386:	4b42      	ldr	r3, [pc, #264]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	493d      	ldr	r1, [pc, #244]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d022      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b4:	d11d      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033b6:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	0e1b      	lsrs	r3, r3, #24
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033c4:	4b32      	ldr	r3, [pc, #200]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	0f1b      	lsrs	r3, r3, #28
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	019a      	lsls	r2, r3, #6
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	431a      	orrs	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	071b      	lsls	r3, r3, #28
 80033ea:	4929      	ldr	r1, [pc, #164]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800340c:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	019a      	lsls	r2, r3, #6
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	431a      	orrs	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	071b      	lsls	r3, r3, #28
 8003432:	4917      	ldr	r1, [pc, #92]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800343c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	4911      	ldr	r1, [pc, #68]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345c:	f7fd ff38 	bl	80012d0 <HAL_GetTick>
 8003460:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003464:	f7fd ff34 	bl	80012d0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e007      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003482:	d1ef      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800

08003494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e049      	b.n	800353a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fdd8 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f000 f9f6 	bl	80038c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e054      	b.n	8003606 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_TIM_Base_Start_IT+0xd0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d022      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d01d      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_TIM_Base_Start_IT+0xd4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d018      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a21      	ldr	r2, [pc, #132]	; (800361c <HAL_TIM_Base_Start_IT+0xd8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <HAL_TIM_Base_Start_IT+0xdc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00e      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_TIM_Base_Start_IT+0xe0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_TIM_Base_Start_IT+0xe4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x80>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_TIM_Base_Start_IT+0xe8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d115      	bne.n	80035f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_TIM_Base_Start_IT+0xec>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d015      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0xbe>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d011      	beq.n	8003602 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ee:	e008      	b.n	8003602 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e000      	b.n	8003604 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	40000c00 	.word	0x40000c00
 8003624:	40010400 	.word	0x40010400
 8003628:	40014000 	.word	0x40014000
 800362c:	40001800 	.word	0x40001800
 8003630:	00010007 	.word	0x00010007

08003634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d122      	bne.n	8003690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b02      	cmp	r3, #2
 8003656:	d11b      	bne.n	8003690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0202 	mvn.w	r2, #2
 8003660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f905 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8f7 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f908 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d122      	bne.n	80036e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d11b      	bne.n	80036e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0204 	mvn.w	r2, #4
 80036b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f8db 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 80036d0:	e005      	b.n	80036de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8cd 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8de 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d122      	bne.n	8003738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d11b      	bne.n	8003738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0208 	mvn.w	r2, #8
 8003708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f8b1 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8a3 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f8b4 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b10      	cmp	r3, #16
 8003744:	d122      	bne.n	800378c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b10      	cmp	r3, #16
 8003752:	d11b      	bne.n	800378c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0210 	mvn.w	r2, #16
 800375c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2208      	movs	r2, #8
 8003762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f887 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f879 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f88a 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d107      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0201 	mvn.w	r2, #1
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fa22 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d10e      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d107      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9a8 	bl	8003b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f2:	d10e      	bne.n	8003812 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d107      	bne.n	8003812 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800380a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f99b 	bl	8003b48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d10e      	bne.n	800383e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b40      	cmp	r3, #64	; 0x40
 800382c:	d107      	bne.n	800383e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f838 	bl	80038ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b20      	cmp	r3, #32
 800384a:	d10e      	bne.n	800386a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b20      	cmp	r3, #32
 8003858:	d107      	bne.n	800386a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f06f 0220 	mvn.w	r2, #32
 8003862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f95b 	bl	8003b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a40      	ldr	r2, [pc, #256]	; (80039d8 <TIM_Base_SetConfig+0x114>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e2:	d00f      	beq.n	8003904 <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3d      	ldr	r2, [pc, #244]	; (80039dc <TIM_Base_SetConfig+0x118>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00b      	beq.n	8003904 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3c      	ldr	r2, [pc, #240]	; (80039e0 <TIM_Base_SetConfig+0x11c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a3b      	ldr	r2, [pc, #236]	; (80039e4 <TIM_Base_SetConfig+0x120>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a3a      	ldr	r2, [pc, #232]	; (80039e8 <TIM_Base_SetConfig+0x124>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d108      	bne.n	8003916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <TIM_Base_SetConfig+0x114>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02b      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003924:	d027      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <TIM_Base_SetConfig+0x118>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d023      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a2b      	ldr	r2, [pc, #172]	; (80039e0 <TIM_Base_SetConfig+0x11c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01f      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <TIM_Base_SetConfig+0x120>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01b      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <TIM_Base_SetConfig+0x124>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d017      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <TIM_Base_SetConfig+0x128>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <TIM_Base_SetConfig+0x12c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00f      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <TIM_Base_SetConfig+0x130>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00b      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <TIM_Base_SetConfig+0x134>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d007      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a24      	ldr	r2, [pc, #144]	; (80039fc <TIM_Base_SetConfig+0x138>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d003      	beq.n	8003976 <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a23      	ldr	r2, [pc, #140]	; (8003a00 <TIM_Base_SetConfig+0x13c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d108      	bne.n	8003988 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <TIM_Base_SetConfig+0x114>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0xf8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <TIM_Base_SetConfig+0x124>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d103      	bne.n	80039c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	615a      	str	r2, [r3, #20]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40000c00 	.word	0x40000c00
 80039e8:	40010400 	.word	0x40010400
 80039ec:	40014000 	.word	0x40014000
 80039f0:	40014400 	.word	0x40014400
 80039f4:	40014800 	.word	0x40014800
 80039f8:	40001800 	.word	0x40001800
 80039fc:	40001c00 	.word	0x40001c00
 8003a00:	40002000 	.word	0x40002000

08003a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e06d      	b.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a30      	ldr	r2, [pc, #192]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d004      	beq.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a20      	ldr	r2, [pc, #128]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d022      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8e:	d01d      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d018      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10c      	bne.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40010400 	.word	0x40010400
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40001800 	.word	0x40001800

08003b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e040      	b.n	8003bf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd facc 	bl	800111c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f82c 	bl	8003bf8 <UART_SetConfig>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e022      	b.n	8003bf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa84 	bl	80040c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fb0b 	bl	8004204 <UART_CheckIdleState>
 8003bee:	4603      	mov	r3, r0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4ba6      	ldr	r3, [pc, #664]	; (8003ebc <UART_SetConfig+0x2c4>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a94      	ldr	r2, [pc, #592]	; (8003ec0 <UART_SetConfig+0x2c8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d120      	bne.n	8003cb6 <UART_SetConfig+0xbe>
 8003c74:	4b93      	ldr	r3, [pc, #588]	; (8003ec4 <UART_SetConfig+0x2cc>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d816      	bhi.n	8003cb0 <UART_SetConfig+0xb8>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <UART_SetConfig+0x90>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003ca5 	.word	0x08003ca5
 8003c90:	08003c9f 	.word	0x08003c9f
 8003c94:	08003cab 	.word	0x08003cab
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e150      	b.n	8003f40 <UART_SetConfig+0x348>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e14d      	b.n	8003f40 <UART_SetConfig+0x348>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e14a      	b.n	8003f40 <UART_SetConfig+0x348>
 8003caa:	2308      	movs	r3, #8
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e147      	b.n	8003f40 <UART_SetConfig+0x348>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e144      	b.n	8003f40 <UART_SetConfig+0x348>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a83      	ldr	r2, [pc, #524]	; (8003ec8 <UART_SetConfig+0x2d0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d132      	bne.n	8003d26 <UART_SetConfig+0x12e>
 8003cc0:	4b80      	ldr	r3, [pc, #512]	; (8003ec4 <UART_SetConfig+0x2cc>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b0c      	cmp	r3, #12
 8003ccc:	d828      	bhi.n	8003d20 <UART_SetConfig+0x128>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <UART_SetConfig+0xdc>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d21 	.word	0x08003d21
 8003cdc:	08003d21 	.word	0x08003d21
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d15 	.word	0x08003d15
 8003ce8:	08003d21 	.word	0x08003d21
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d21 	.word	0x08003d21
 8003cf4:	08003d0f 	.word	0x08003d0f
 8003cf8:	08003d21 	.word	0x08003d21
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d21 	.word	0x08003d21
 8003d04:	08003d1b 	.word	0x08003d1b
 8003d08:	2300      	movs	r3, #0
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e118      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e115      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d14:	2304      	movs	r3, #4
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e112      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e10f      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d20:	2310      	movs	r3, #16
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e10c      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a68      	ldr	r2, [pc, #416]	; (8003ecc <UART_SetConfig+0x2d4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d120      	bne.n	8003d72 <UART_SetConfig+0x17a>
 8003d30:	4b64      	ldr	r3, [pc, #400]	; (8003ec4 <UART_SetConfig+0x2cc>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d013      	beq.n	8003d66 <UART_SetConfig+0x16e>
 8003d3e:	2b30      	cmp	r3, #48	; 0x30
 8003d40:	d814      	bhi.n	8003d6c <UART_SetConfig+0x174>
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d009      	beq.n	8003d5a <UART_SetConfig+0x162>
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d810      	bhi.n	8003d6c <UART_SetConfig+0x174>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <UART_SetConfig+0x15c>
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d006      	beq.n	8003d60 <UART_SetConfig+0x168>
 8003d52:	e00b      	b.n	8003d6c <UART_SetConfig+0x174>
 8003d54:	2300      	movs	r3, #0
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e0f2      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e0ef      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d60:	2304      	movs	r3, #4
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e0ec      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d66:	2308      	movs	r3, #8
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e0e9      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e0e6      	b.n	8003f40 <UART_SetConfig+0x348>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a56      	ldr	r2, [pc, #344]	; (8003ed0 <UART_SetConfig+0x2d8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d120      	bne.n	8003dbe <UART_SetConfig+0x1c6>
 8003d7c:	4b51      	ldr	r3, [pc, #324]	; (8003ec4 <UART_SetConfig+0x2cc>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d86:	2bc0      	cmp	r3, #192	; 0xc0
 8003d88:	d013      	beq.n	8003db2 <UART_SetConfig+0x1ba>
 8003d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d8c:	d814      	bhi.n	8003db8 <UART_SetConfig+0x1c0>
 8003d8e:	2b80      	cmp	r3, #128	; 0x80
 8003d90:	d009      	beq.n	8003da6 <UART_SetConfig+0x1ae>
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d810      	bhi.n	8003db8 <UART_SetConfig+0x1c0>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <UART_SetConfig+0x1a8>
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d006      	beq.n	8003dac <UART_SetConfig+0x1b4>
 8003d9e:	e00b      	b.n	8003db8 <UART_SetConfig+0x1c0>
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e0cc      	b.n	8003f40 <UART_SetConfig+0x348>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e0c9      	b.n	8003f40 <UART_SetConfig+0x348>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e0c6      	b.n	8003f40 <UART_SetConfig+0x348>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e0c3      	b.n	8003f40 <UART_SetConfig+0x348>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e0c0      	b.n	8003f40 <UART_SetConfig+0x348>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a44      	ldr	r2, [pc, #272]	; (8003ed4 <UART_SetConfig+0x2dc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d125      	bne.n	8003e14 <UART_SetConfig+0x21c>
 8003dc8:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <UART_SetConfig+0x2cc>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd6:	d017      	beq.n	8003e08 <UART_SetConfig+0x210>
 8003dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ddc:	d817      	bhi.n	8003e0e <UART_SetConfig+0x216>
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de2:	d00b      	beq.n	8003dfc <UART_SetConfig+0x204>
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de8:	d811      	bhi.n	8003e0e <UART_SetConfig+0x216>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <UART_SetConfig+0x1fe>
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df2:	d006      	beq.n	8003e02 <UART_SetConfig+0x20a>
 8003df4:	e00b      	b.n	8003e0e <UART_SetConfig+0x216>
 8003df6:	2300      	movs	r3, #0
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e0a1      	b.n	8003f40 <UART_SetConfig+0x348>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e09e      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e02:	2304      	movs	r3, #4
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e09b      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e098      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e0e:	2310      	movs	r3, #16
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e095      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2f      	ldr	r2, [pc, #188]	; (8003ed8 <UART_SetConfig+0x2e0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d125      	bne.n	8003e6a <UART_SetConfig+0x272>
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <UART_SetConfig+0x2cc>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e2c:	d017      	beq.n	8003e5e <UART_SetConfig+0x266>
 8003e2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e32:	d817      	bhi.n	8003e64 <UART_SetConfig+0x26c>
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e38:	d00b      	beq.n	8003e52 <UART_SetConfig+0x25a>
 8003e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3e:	d811      	bhi.n	8003e64 <UART_SetConfig+0x26c>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <UART_SetConfig+0x254>
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e48:	d006      	beq.n	8003e58 <UART_SetConfig+0x260>
 8003e4a:	e00b      	b.n	8003e64 <UART_SetConfig+0x26c>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e076      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e52:	2302      	movs	r3, #2
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e073      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e070      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e06d      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e64:	2310      	movs	r3, #16
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e06a      	b.n	8003f40 <UART_SetConfig+0x348>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <UART_SetConfig+0x2e4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d138      	bne.n	8003ee6 <UART_SetConfig+0x2ee>
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <UART_SetConfig+0x2cc>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e82:	d017      	beq.n	8003eb4 <UART_SetConfig+0x2bc>
 8003e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e88:	d82a      	bhi.n	8003ee0 <UART_SetConfig+0x2e8>
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8e:	d00b      	beq.n	8003ea8 <UART_SetConfig+0x2b0>
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d824      	bhi.n	8003ee0 <UART_SetConfig+0x2e8>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <UART_SetConfig+0x2aa>
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	d006      	beq.n	8003eae <UART_SetConfig+0x2b6>
 8003ea0:	e01e      	b.n	8003ee0 <UART_SetConfig+0x2e8>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e04b      	b.n	8003f40 <UART_SetConfig+0x348>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e048      	b.n	8003f40 <UART_SetConfig+0x348>
 8003eae:	2304      	movs	r3, #4
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e045      	b.n	8003f40 <UART_SetConfig+0x348>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e042      	b.n	8003f40 <UART_SetConfig+0x348>
 8003eba:	bf00      	nop
 8003ebc:	efff69f3 	.word	0xefff69f3
 8003ec0:	40011000 	.word	0x40011000
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40004400 	.word	0x40004400
 8003ecc:	40004800 	.word	0x40004800
 8003ed0:	40004c00 	.word	0x40004c00
 8003ed4:	40005000 	.word	0x40005000
 8003ed8:	40011400 	.word	0x40011400
 8003edc:	40007800 	.word	0x40007800
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e02c      	b.n	8003f40 <UART_SetConfig+0x348>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a72      	ldr	r2, [pc, #456]	; (80040b4 <UART_SetConfig+0x4bc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d125      	bne.n	8003f3c <UART_SetConfig+0x344>
 8003ef0:	4b71      	ldr	r3, [pc, #452]	; (80040b8 <UART_SetConfig+0x4c0>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003efa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003efe:	d017      	beq.n	8003f30 <UART_SetConfig+0x338>
 8003f00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f04:	d817      	bhi.n	8003f36 <UART_SetConfig+0x33e>
 8003f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0a:	d00b      	beq.n	8003f24 <UART_SetConfig+0x32c>
 8003f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f10:	d811      	bhi.n	8003f36 <UART_SetConfig+0x33e>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <UART_SetConfig+0x326>
 8003f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f1a:	d006      	beq.n	8003f2a <UART_SetConfig+0x332>
 8003f1c:	e00b      	b.n	8003f36 <UART_SetConfig+0x33e>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e00d      	b.n	8003f40 <UART_SetConfig+0x348>
 8003f24:	2302      	movs	r3, #2
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e00a      	b.n	8003f40 <UART_SetConfig+0x348>
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e007      	b.n	8003f40 <UART_SetConfig+0x348>
 8003f30:	2308      	movs	r3, #8
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e004      	b.n	8003f40 <UART_SetConfig+0x348>
 8003f36:	2310      	movs	r3, #16
 8003f38:	77fb      	strb	r3, [r7, #31]
 8003f3a:	e001      	b.n	8003f40 <UART_SetConfig+0x348>
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f48:	d15b      	bne.n	8004002 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d828      	bhi.n	8003fa2 <UART_SetConfig+0x3aa>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <UART_SetConfig+0x360>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003fa3 	.word	0x08003fa3
 8003f68:	08003f93 	.word	0x08003f93
 8003f6c:	08003fa3 	.word	0x08003fa3
 8003f70:	08003fa3 	.word	0x08003fa3
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	08003f9b 	.word	0x08003f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f7c:	f7fe fe3a 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8003f80:	61b8      	str	r0, [r7, #24]
        break;
 8003f82:	e013      	b.n	8003fac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7fe fe4a 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003f88:	61b8      	str	r0, [r7, #24]
        break;
 8003f8a:	e00f      	b.n	8003fac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f8c:	4b4b      	ldr	r3, [pc, #300]	; (80040bc <UART_SetConfig+0x4c4>)
 8003f8e:	61bb      	str	r3, [r7, #24]
        break;
 8003f90:	e00c      	b.n	8003fac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f92:	f7fe fd1d 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 8003f96:	61b8      	str	r0, [r7, #24]
        break;
 8003f98:	e008      	b.n	8003fac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9e:	61bb      	str	r3, [r7, #24]
        break;
 8003fa0:	e004      	b.n	8003fac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8003faa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d074      	beq.n	800409c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	005a      	lsls	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	441a      	add	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b0f      	cmp	r3, #15
 8003fcc:	d916      	bls.n	8003ffc <UART_SetConfig+0x404>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d212      	bcs.n	8003ffc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f023 030f 	bic.w	r3, r3, #15
 8003fde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	89fb      	ldrh	r3, [r7, #14]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	89fa      	ldrh	r2, [r7, #14]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	e04f      	b.n	800409c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77bb      	strb	r3, [r7, #30]
 8004000:	e04c      	b.n	800409c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004002:	7ffb      	ldrb	r3, [r7, #31]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d828      	bhi.n	800405a <UART_SetConfig+0x462>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0x418>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004045 	.word	0x08004045
 800401c:	0800405b 	.word	0x0800405b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800405b 	.word	0x0800405b
 8004028:	0800405b 	.word	0x0800405b
 800402c:	0800405b 	.word	0x0800405b
 8004030:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7fe fdde 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8004038:	61b8      	str	r0, [r7, #24]
        break;
 800403a:	e013      	b.n	8004064 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7fe fdee 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8004040:	61b8      	str	r0, [r7, #24]
        break;
 8004042:	e00f      	b.n	8004064 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <UART_SetConfig+0x4c4>)
 8004046:	61bb      	str	r3, [r7, #24]
        break;
 8004048:	e00c      	b.n	8004064 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe fcc1 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800404e:	61b8      	str	r0, [r7, #24]
        break;
 8004050:	e008      	b.n	8004064 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004056:	61bb      	str	r3, [r7, #24]
        break;
 8004058:	e004      	b.n	8004064 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	77bb      	strb	r3, [r7, #30]
        break;
 8004062:	bf00      	nop
    }

    if (pclk != 0U)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d018      	beq.n	800409c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	085a      	lsrs	r2, r3, #1
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	441a      	add	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d909      	bls.n	8004098 <UART_SetConfig+0x4a0>
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408a:	d205      	bcs.n	8004098 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	e001      	b.n	800409c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40007c00 	.word	0x40007c00
 80040b8:	40023800 	.word	0x40023800
 80040bc:	00f42400 	.word	0x00f42400

080040c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01a      	beq.n	80041d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041be:	d10a      	bne.n	80041d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af02      	add	r7, sp, #8
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004214:	f7fd f85c 	bl	80012d0 <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d10e      	bne.n	8004246 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f831 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e027      	b.n	8004296 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b04      	cmp	r3, #4
 8004252:	d10e      	bne.n	8004272 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f81b 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e011      	b.n	8004296 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b09c      	sub	sp, #112	; 0x70
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ae:	e0a7      	b.n	8004400 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b6:	f000 80a3 	beq.w	8004400 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fd f809 	bl	80012d0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80042ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d13f      	bne.n	8004350 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042e4:	667b      	str	r3, [r7, #100]	; 0x64
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e6      	bne.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3308      	adds	r3, #8
 8004308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	663b      	str	r3, [r7, #96]	; 0x60
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3308      	adds	r3, #8
 8004320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004322:	64ba      	str	r2, [r7, #72]	; 0x48
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e5      	bne.n	8004302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e068      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d050      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436c:	d148      	bne.n	8004400 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004376:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800438c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004396:	637b      	str	r3, [r7, #52]	; 0x34
 8004398:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800439c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e6      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3308      	adds	r3, #8
 80043c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043ca:	623a      	str	r2, [r7, #32]
 80043cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	6a3a      	ldr	r2, [r7, #32]
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e5      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e010      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69da      	ldr	r2, [r3, #28]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	429a      	cmp	r2, r3
 800441c:	f43f af48 	beq.w	80042b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3770      	adds	r7, #112	; 0x70
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
    a->var = var;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	605a      	str	r2, [r3, #4]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <lv_anim_set_delay>:
 * Set a delay before starting the animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay before the animation in milliseconds
 */
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	425a      	negs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <lv_anim_set_start_cb>:
 * Set a function call when the animation really starts (considering `delay`)
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start_cb  a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_start_cb_t start_cb)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	60da      	str	r2, [r3, #12]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <lv_scr_act>:
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8004502:	f01b fd25 	bl	801ff50 <lv_disp_get_default>
 8004506:	4603      	mov	r3, r0
 8004508:	4618      	mov	r0, r3
 800450a:	f000 f803 	bl	8004514 <lv_disp_get_scr_act>
 800450e:	4603      	mov	r3, r0
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}

08004514 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <lv_disp_get_scr_act+0x14>
 8004522:	f01b fd15 	bl	801ff50 <lv_disp_get_default>
 8004526:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	e001      	b.n	8004536 <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <lv_disp_get_scr_prev+0x14>
 800454c:	f01b fd00 	bl	801ff50 <lv_disp_get_default>
 8004550:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	e001      	b.n	8004560 <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af02      	add	r7, sp, #8
 800456e:	6078      	str	r0, [r7, #4]
    lv_scr_load_anim(scr, LV_SCR_LOAD_ANIM_NONE, 0, 0, false);
 8004570:	2300      	movs	r3, #0
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	2200      	movs	r2, #0
 8004578:	2100      	movs	r1, #0
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f83e 	bl	80045fc <lv_scr_load_anim>
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <lv_disp_get_layer_top+0x14>
 8004596:	f01b fcdb 	bl	801ff50 <lv_disp_get_default>
 800459a:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e001      	b.n	80045aa <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <lv_disp_get_layer_sys+0x14>
 80045c0:	f01b fcc6 	bl	801ff50 <lv_disp_get_default>
 80045c4:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e001      	b.n	80045d4 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <lv_disp_get_theme+0x14>
 80045ea:	f01b fcb1 	bl	801ff50 <lv_disp_get_default>
 80045ee:	6078      	str	r0, [r7, #4]
    return disp->theme;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <lv_scr_load_anim>:
 * @param time time of the animation
 * @param delay delay before the transition
 * @param auto_del true: automatically delete the old screen
 */
void lv_scr_load_anim(lv_obj_t * new_scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, bool auto_del)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b0a8      	sub	sp, #160	; 0xa0
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	460b      	mov	r3, r1
 800460a:	72fb      	strb	r3, [r7, #11]

    lv_disp_t * d = lv_obj_get_disp(new_scr);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f009 fd89 	bl	800e124 <lv_obj_get_disp>
 8004612:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    lv_obj_t * act_scr = lv_scr_act();
 8004616:	f7ff ff72 	bl	80044fe <lv_scr_act>
 800461a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /*If an other screen load animation is in progress
     *make target screen loaded immediately. */
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 800461e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d035      	beq.n	8004694 <lv_scr_load_anim+0x98>
 8004628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004632:	429a      	cmp	r2, r3
 8004634:	d02e      	beq.n	8004694 <lv_scr_load_anim+0x98>
        scr_load_internal(d->scr_to_load);
 8004636:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fa7e 	bl	8004b3e <scr_load_internal>
        lv_anim_del(d->scr_to_load, NULL);
 8004642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f01b fe34 	bl	80202b8 <lv_anim_del>
        lv_obj_set_pos(d->scr_to_load, 0, 0);
 8004650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2200      	movs	r2, #0
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f004 f81f 	bl	800869e <lv_obj_set_pos>
        lv_obj_remove_local_style_prop(d->scr_to_load, LV_STYLE_OPA, 0);
 8004660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2200      	movs	r2, #0
 8004668:	2160      	movs	r1, #96	; 0x60
 800466a:	4618      	mov	r0, r3
 800466c:	f008 fb4b 	bl	800cd06 <lv_obj_remove_local_style_prop>

        if(d->del_prev) {
 8004670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <lv_scr_load_anim+0x8e>
            lv_obj_del(act_scr);
 8004682:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004686:	f009 fced 	bl	800e064 <lv_obj_del>
        }
        act_scr = d->scr_to_load;
 800468a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    }

    d->scr_to_load = new_scr;
 8004694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	619a      	str	r2, [r3, #24]

    if(d->prev_scr && d->del_prev) {
 800469c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d012      	beq.n	80046cc <lv_scr_load_anim+0xd0>
 80046a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <lv_scr_load_anim+0xd0>
        lv_obj_del(d->prev_scr);
 80046b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	4618      	mov	r0, r3
 80046c0:	f009 fcd0 	bl	800e064 <lv_obj_del>
        d->prev_scr = NULL;
 80046c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046c8:	2200      	movs	r2, #0
 80046ca:	615a      	str	r2, [r3, #20]
    }

    d->draw_prev_over_act = is_out_anim(anim_type);
 80046cc:	7afb      	ldrb	r3, [r7, #11]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fb04 	bl	8004cdc <is_out_anim>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4619      	mov	r1, r3
 80046d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80046dc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80046e0:	f361 0300 	bfi	r3, r1, #0, #1
 80046e4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    d->del_prev = auto_del;
 80046e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80046ec:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80046f0:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 80046f4:	f361 0341 	bfi	r3, r1, #1, #1
 80046f8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    /*Be sure there is no other animation on the screens*/
    lv_anim_del(new_scr, NULL);
 80046fc:	2100      	movs	r1, #0
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f01b fdda 	bl	80202b8 <lv_anim_del>
    lv_anim_del(lv_scr_act(), NULL);
 8004704:	f7ff fefb 	bl	80044fe <lv_scr_act>
 8004708:	4603      	mov	r3, r0
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f01b fdd3 	bl	80202b8 <lv_anim_del>

    /*Be sure both screens are in a normal position*/
    lv_obj_set_pos(new_scr, 0, 0);
 8004712:	2200      	movs	r2, #0
 8004714:	2100      	movs	r1, #0
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f003 ffc1 	bl	800869e <lv_obj_set_pos>
    lv_obj_set_pos(lv_scr_act(), 0, 0);
 800471c:	f7ff feef 	bl	80044fe <lv_scr_act>
 8004720:	4603      	mov	r3, r0
 8004722:	2200      	movs	r2, #0
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f003 ffb9 	bl	800869e <lv_obj_set_pos>
    lv_obj_remove_local_style_prop(new_scr, LV_STYLE_OPA, 0);
 800472c:	2200      	movs	r2, #0
 800472e:	2160      	movs	r1, #96	; 0x60
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f008 fae8 	bl	800cd06 <lv_obj_remove_local_style_prop>
    lv_obj_remove_local_style_prop(lv_scr_act(), LV_STYLE_OPA, 0);
 8004736:	f7ff fee2 	bl	80044fe <lv_scr_act>
 800473a:	4603      	mov	r3, r0
 800473c:	2200      	movs	r2, #0
 800473e:	2160      	movs	r1, #96	; 0x60
 8004740:	4618      	mov	r0, r3
 8004742:	f008 fae0 	bl	800cd06 <lv_obj_remove_local_style_prop>


    /*Shortcut for immediate load*/
    if(time == 0 && delay == 0) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <lv_scr_load_anim+0x15e>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d103      	bne.n	800475a <lv_scr_load_anim+0x15e>
        scr_load_internal(new_scr);
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f9f3 	bl	8004b3e <scr_load_internal>
 8004758:	e1c8      	b.n	8004aec <lv_scr_load_anim+0x4f0>
        return;
    }

    lv_anim_t a_new;
    lv_anim_init(&a_new);
 800475a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800475e:	4618      	mov	r0, r3
 8004760:	f01b fd0c 	bl	802017c <lv_anim_init>
    lv_anim_set_var(&a_new, new_scr);
 8004764:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004768:	68f9      	ldr	r1, [r7, #12]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fe5d 	bl	800442a <lv_anim_set_var>
    lv_anim_set_start_cb(&a_new, scr_load_anim_start);
 8004770:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004774:	49df      	ldr	r1, [pc, #892]	; (8004af4 <lv_scr_load_anim+0x4f8>)
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fea5 	bl	80044c6 <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a_new, scr_anim_ready);
 800477c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004780:	49dd      	ldr	r1, [pc, #884]	; (8004af8 <lv_scr_load_anim+0x4fc>)
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fead 	bl	80044e2 <lv_anim_set_ready_cb>
    lv_anim_set_time(&a_new, time);
 8004788:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fe67 	bl	8004462 <lv_anim_set_time>
    lv_anim_set_delay(&a_new, delay);
 8004794:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fe6f 	bl	800447e <lv_anim_set_delay>

    lv_anim_t a_old;
    lv_anim_init(&a_old);
 80047a0:	f107 0310 	add.w	r3, r7, #16
 80047a4:	4618      	mov	r0, r3
 80047a6:	f01b fce9 	bl	802017c <lv_anim_init>
    lv_anim_set_var(&a_old, d->act_scr);
 80047aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	f107 0310 	add.w	r3, r7, #16
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fe37 	bl	800442a <lv_anim_set_var>
    lv_anim_set_time(&a_old, time);
 80047bc:	f107 0310 	add.w	r3, r7, #16
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fe4d 	bl	8004462 <lv_anim_set_time>
    lv_anim_set_delay(&a_old, delay);
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fe55 	bl	800447e <lv_anim_set_delay>

    switch(anim_type) {
 80047d4:	7afb      	ldrb	r3, [r7, #11]
 80047d6:	2b0e      	cmp	r3, #14
 80047d8:	f200 8178 	bhi.w	8004acc <lv_scr_load_anim+0x4d0>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <lv_scr_load_anim+0x1e8>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	08004821 	.word	0x08004821
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	08004863 	.word	0x08004863
 80047f0:	08004889 	.word	0x08004889
 80047f4:	080048af 	.word	0x080048af
 80047f8:	080048d5 	.word	0x080048d5
 80047fc:	0800491f 	.word	0x0800491f
 8004800:	08004969 	.word	0x08004969
 8004804:	080049b3 	.word	0x080049b3
 8004808:	080049fd 	.word	0x080049fd
 800480c:	08004a19 	.word	0x08004a19
 8004810:	08004a35 	.word	0x08004a35
 8004814:	08004a5b 	.word	0x08004a5b
 8004818:	08004a81 	.word	0x08004a81
 800481c:	08004aa7 	.word	0x08004aa7
        case LV_SCR_LOAD_ANIM_NONE:
            /*Create a dummy animation to apply the delay*/
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 8004820:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004824:	49b5      	ldr	r1, [pc, #724]	; (8004afc <lv_scr_load_anim+0x500>)
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fe0d 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, 0, 0);
 800482c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004830:	2200      	movs	r2, #0
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fe31 	bl	800449c <lv_anim_set_values>
            break;
 800483a:	e147      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_LEFT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 800483c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004840:	49ae      	ldr	r1, [pc, #696]	; (8004afc <lv_scr_load_anim+0x500>)
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fdff 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 8004848:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800484c:	f01b fb8c 	bl	801ff68 <lv_disp_get_hor_res>
 8004850:	4603      	mov	r3, r0
 8004852:	4619      	mov	r1, r3
 8004854:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004858:	2200      	movs	r2, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fe1e 	bl	800449c <lv_anim_set_values>
            break;
 8004860:	e134      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_RIGHT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 8004862:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004866:	49a5      	ldr	r1, [pc, #660]	; (8004afc <lv_scr_load_anim+0x500>)
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fdec 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 800486e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004872:	f01b fb79 	bl	801ff68 <lv_disp_get_hor_res>
 8004876:	4603      	mov	r3, r0
 8004878:	4259      	negs	r1, r3
 800487a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800487e:	2200      	movs	r2, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fe0b 	bl	800449c <lv_anim_set_values>
            break;
 8004886:	e121      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_TOP:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 8004888:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800488c:	499c      	ldr	r1, [pc, #624]	; (8004b00 <lv_scr_load_anim+0x504>)
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fdd9 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 8004894:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004898:	f01b fb8c 	bl	801ffb4 <lv_disp_get_ver_res>
 800489c:	4603      	mov	r3, r0
 800489e:	4619      	mov	r1, r3
 80048a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048a4:	2200      	movs	r2, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fdf8 	bl	800449c <lv_anim_set_values>
            break;
 80048ac:	e10e      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_BOTTOM:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 80048ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048b2:	4993      	ldr	r1, [pc, #588]	; (8004b00 <lv_scr_load_anim+0x504>)
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fdc6 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 80048ba:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80048be:	f01b fb79 	bl	801ffb4 <lv_disp_get_ver_res>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4259      	negs	r1, r3
 80048c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048ca:	2200      	movs	r2, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fde5 	bl	800449c <lv_anim_set_values>
            break;
 80048d2:	e0fb      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_LEFT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 80048d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048d8:	4988      	ldr	r1, [pc, #544]	; (8004afc <lv_scr_load_anim+0x500>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fdb3 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 80048e0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80048e4:	f01b fb40 	bl	801ff68 <lv_disp_get_hor_res>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4619      	mov	r1, r3
 80048ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048f0:	2200      	movs	r2, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fdd2 	bl	800449c <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_x_anim);
 80048f8:	f107 0310 	add.w	r3, r7, #16
 80048fc:	497f      	ldr	r1, [pc, #508]	; (8004afc <lv_scr_load_anim+0x500>)
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fda1 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 8004904:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004908:	f01b fb2e 	bl	801ff68 <lv_disp_get_hor_res>
 800490c:	4603      	mov	r3, r0
 800490e:	425a      	negs	r2, r3
 8004910:	f107 0310 	add.w	r3, r7, #16
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fdc0 	bl	800449c <lv_anim_set_values>
            break;
 800491c:	e0d6      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_RIGHT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 800491e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004922:	4976      	ldr	r1, [pc, #472]	; (8004afc <lv_scr_load_anim+0x500>)
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fd8e 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 800492a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800492e:	f01b fb1b 	bl	801ff68 <lv_disp_get_hor_res>
 8004932:	4603      	mov	r3, r0
 8004934:	4259      	negs	r1, r3
 8004936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800493a:	2200      	movs	r2, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fdad 	bl	800449c <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8004942:	f107 0310 	add.w	r3, r7, #16
 8004946:	496d      	ldr	r1, [pc, #436]	; (8004afc <lv_scr_load_anim+0x500>)
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fd7c 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 800494e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004952:	f01b fb09 	bl	801ff68 <lv_disp_get_hor_res>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	f107 0310 	add.w	r3, r7, #16
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fd9b 	bl	800449c <lv_anim_set_values>
            break;
 8004966:	e0b1      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_TOP:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 8004968:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800496c:	4964      	ldr	r1, [pc, #400]	; (8004b00 <lv_scr_load_anim+0x504>)
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fd69 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 8004974:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004978:	f01b fb1c 	bl	801ffb4 <lv_disp_get_ver_res>
 800497c:	4603      	mov	r3, r0
 800497e:	4619      	mov	r1, r3
 8004980:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004984:	2200      	movs	r2, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fd88 	bl	800449c <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_y_anim);
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	495b      	ldr	r1, [pc, #364]	; (8004b00 <lv_scr_load_anim+0x504>)
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fd57 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8004998:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800499c:	f01b fb0a 	bl	801ffb4 <lv_disp_get_ver_res>
 80049a0:	4603      	mov	r3, r0
 80049a2:	425a      	negs	r2, r3
 80049a4:	f107 0310 	add.w	r3, r7, #16
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fd76 	bl	800449c <lv_anim_set_values>
            break;
 80049b0:	e08c      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_BOTTOM:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 80049b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049b6:	4952      	ldr	r1, [pc, #328]	; (8004b00 <lv_scr_load_anim+0x504>)
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fd44 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 80049be:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80049c2:	f01b faf7 	bl	801ffb4 <lv_disp_get_ver_res>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4259      	negs	r1, r3
 80049ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049ce:	2200      	movs	r2, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fd63 	bl	800449c <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_y_anim);
 80049d6:	f107 0310 	add.w	r3, r7, #16
 80049da:	4949      	ldr	r1, [pc, #292]	; (8004b00 <lv_scr_load_anim+0x504>)
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fd32 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 80049e2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80049e6:	f01b fae5 	bl	801ffb4 <lv_disp_get_ver_res>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	f107 0310 	add.w	r3, r7, #16
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fd51 	bl	800449c <lv_anim_set_values>
            break;
 80049fa:	e067      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_FADE_IN:
            lv_anim_set_exec_cb(&a_new, opa_scale_anim);
 80049fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a00:	4940      	ldr	r1, [pc, #256]	; (8004b04 <lv_scr_load_anim+0x508>)
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fd1f 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, LV_OPA_TRANSP, LV_OPA_COVER);
 8004a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a0c:	22ff      	movs	r2, #255	; 0xff
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fd43 	bl	800449c <lv_anim_set_values>
            break;
 8004a16:	e059      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_FADE_OUT:
            lv_anim_set_exec_cb(&a_old, opa_scale_anim);
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	4939      	ldr	r1, [pc, #228]	; (8004b04 <lv_scr_load_anim+0x508>)
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fd11 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, LV_OPA_COVER, LV_OPA_TRANSP);
 8004a24:	f107 0310 	add.w	r3, r7, #16
 8004a28:	2200      	movs	r2, #0
 8004a2a:	21ff      	movs	r1, #255	; 0xff
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fd35 	bl	800449c <lv_anim_set_values>
            break;
 8004a32:	e04b      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_LEFT:
            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8004a34:	f107 0310 	add.w	r3, r7, #16
 8004a38:	4930      	ldr	r1, [pc, #192]	; (8004afc <lv_scr_load_anim+0x500>)
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fd03 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 8004a40:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004a44:	f01b fa90 	bl	801ff68 <lv_disp_get_hor_res>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	425a      	negs	r2, r3
 8004a4c:	f107 0310 	add.w	r3, r7, #16
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fd22 	bl	800449c <lv_anim_set_values>
            break;
 8004a58:	e038      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_RIGHT:
            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8004a5a:	f107 0310 	add.w	r3, r7, #16
 8004a5e:	4927      	ldr	r1, [pc, #156]	; (8004afc <lv_scr_load_anim+0x500>)
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fcf0 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 8004a66:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004a6a:	f01b fa7d 	bl	801ff68 <lv_disp_get_hor_res>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	f107 0310 	add.w	r3, r7, #16
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fd0f 	bl	800449c <lv_anim_set_values>
            break;
 8004a7e:	e025      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_TOP:
            lv_anim_set_exec_cb(&a_old, set_y_anim);
 8004a80:	f107 0310 	add.w	r3, r7, #16
 8004a84:	491e      	ldr	r1, [pc, #120]	; (8004b00 <lv_scr_load_anim+0x504>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff fcdd 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8004a8c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004a90:	f01b fa90 	bl	801ffb4 <lv_disp_get_ver_res>
 8004a94:	4603      	mov	r3, r0
 8004a96:	425a      	negs	r2, r3
 8004a98:	f107 0310 	add.w	r3, r7, #16
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fcfc 	bl	800449c <lv_anim_set_values>
            break;
 8004aa4:	e012      	b.n	8004acc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_BOTTOM:
            lv_anim_set_exec_cb(&a_old, set_y_anim);
 8004aa6:	f107 0310 	add.w	r3, r7, #16
 8004aaa:	4915      	ldr	r1, [pc, #84]	; (8004b00 <lv_scr_load_anim+0x504>)
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fcca 	bl	8004446 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 8004ab2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004ab6:	f01b fa7d 	bl	801ffb4 <lv_disp_get_ver_res>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	f107 0310 	add.w	r3, r7, #16
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fce9 	bl	800449c <lv_anim_set_values>
            break;
 8004aca:	bf00      	nop
    }

    lv_event_send(act_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8004acc:	2200      	movs	r2, #0
 8004ace:	2125      	movs	r1, #37	; 0x25
 8004ad0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004ad4:	f000 f922 	bl	8004d1c <lv_event_send>

    lv_anim_start(&a_new);
 8004ad8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004adc:	4618      	mov	r0, r3
 8004ade:	f01b fb73 	bl	80201c8 <lv_anim_start>
    lv_anim_start(&a_old);
 8004ae2:	f107 0310 	add.w	r3, r7, #16
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f01b fb6e 	bl	80201c8 <lv_anim_start>
}
 8004aec:	37a0      	adds	r7, #160	; 0xa0
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	08004bb9 	.word	0x08004bb9
 8004af8:	08004c51 	.word	0x08004c51
 8004afc:	08004c15 	.word	0x08004c15
 8004b00:	08004c33 	.word	0x08004c33
 8004b04:	08004bf5 	.word	0x08004bf5

08004b08 <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <lv_disp_is_invalidation_enabled+0x14>
 8004b16:	f01b fa1b 	bl	801ff50 <lv_disp_get_default>
 8004b1a:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <lv_disp_is_invalidation_enabled+0x1e>
        LV_LOG_WARN("no display registered");
        return false;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e007      	b.n	8004b36 <lv_disp_is_invalidation_enabled+0x2e>
    }

    return (disp->inv_en_cnt > 0);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bfcc      	ite	gt
 8004b30:	2301      	movgt	r3, #1
 8004b32:	2300      	movle	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <scr_load_internal>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void scr_load_internal(lv_obj_t * scr)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(scr);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f009 faec 	bl	800e124 <lv_obj_get_disp>
 8004b4c:	60f8      	str	r0, [r7, #12]
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02d      	beq.n	8004bb0 <scr_load_internal+0x72>

    lv_obj_t * old_scr = d->act_scr;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	60bb      	str	r3, [r7, #8]

    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <scr_load_internal+0x2e>
 8004b62:	2200      	movs	r2, #0
 8004b64:	2125      	movs	r1, #37	; 0x25
 8004b66:	68b8      	ldr	r0, [r7, #8]
 8004b68:	f000 f8d8 	bl	8004d1c <lv_event_send>
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <scr_load_internal+0x40>
 8004b74:	2200      	movs	r2, #0
 8004b76:	2126      	movs	r1, #38	; 0x26
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f8cf 	bl	8004d1c <lv_event_send>

    d->act_scr = scr;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	611a      	str	r2, [r3, #16]

    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOADED, NULL);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <scr_load_internal+0x58>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2127      	movs	r1, #39	; 0x27
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8c3 	bl	8004d1c <lv_event_send>
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <scr_load_internal+0x6a>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2128      	movs	r1, #40	; 0x28
 8004ba2:	68b8      	ldr	r0, [r7, #8]
 8004ba4:	f000 f8ba 	bl	8004d1c <lv_event_send>

    lv_obj_invalidate(scr);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f004 fe8c 	bl	80098c6 <lv_obj_invalidate>
 8004bae:	e000      	b.n	8004bb2 <scr_load_internal+0x74>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8004bb0:	bf00      	nop
}
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <scr_load_anim_start>:

static void scr_load_anim_start(lv_anim_t * a)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f009 faad 	bl	800e124 <lv_obj_get_disp>
 8004bca:	60f8      	str	r0, [r7, #12]

    d->prev_scr = lv_scr_act();
 8004bcc:	f7ff fc97 	bl	80044fe <lv_scr_act>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	615a      	str	r2, [r3, #20]
    d->act_scr = a->var;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	611a      	str	r2, [r3, #16]

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2126      	movs	r1, #38	; 0x26
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f898 	bl	8004d1c <lv_event_send>
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <opa_scale_anim>:

static void opa_scale_anim(void * obj, int32_t v)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
    lv_obj_set_style_opa(obj, v, 0);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2200      	movs	r2, #0
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f009 fa19 	bl	800e03e <lv_obj_set_style_opa>
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <set_x_anim>:

static void set_x_anim(void * obj, int32_t v)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
    lv_obj_set_x(obj, v);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	b21b      	sxth	r3, r3
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f003 fd52 	bl	80086ce <lv_obj_set_x>
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <set_y_anim>:

static void set_y_anim(void * obj, int32_t v)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
    lv_obj_set_y(obj, v);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	b21b      	sxth	r3, r3
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f003 fd68 	bl	8008718 <lv_obj_set_y>
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <scr_anim_ready>:

static void scr_anim_ready(lv_anim_t * a)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f009 fa61 	bl	800e124 <lv_obj_get_disp>
 8004c62:	60f8      	str	r0, [r7, #12]

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOADED, NULL);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2127      	movs	r1, #39	; 0x27
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f855 	bl	8004d1c <lv_event_send>
    lv_event_send(d->prev_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	2200      	movs	r2, #0
 8004c78:	2128      	movs	r1, #40	; 0x28
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f84e 	bl	8004d1c <lv_event_send>

    if(d->prev_scr && d->del_prev) lv_obj_del(d->prev_scr);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00c      	beq.n	8004ca2 <scr_anim_ready+0x52>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <scr_anim_ready+0x52>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f009 f9e1 	bl	800e064 <lv_obj_del>
    d->prev_scr = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	615a      	str	r2, [r3, #20]
    d->draw_prev_over_act = false;
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004cae:	f36f 0300 	bfc	r3, #0, #1
 8004cb2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    d->scr_to_load = NULL;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]
    lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2160      	movs	r1, #96	; 0x60
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f008 f81e 	bl	800cd06 <lv_obj_remove_local_style_prop>
    lv_obj_invalidate(d->act_scr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 fdf9 	bl	80098c6 <lv_obj_invalidate>
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <is_out_anim>:

static bool is_out_anim(lv_scr_load_anim_t anim_type)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	71fb      	strb	r3, [r7, #7]
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	2b0a      	cmp	r3, #10
 8004cea:	d00b      	beq.n	8004d04 <is_out_anim+0x28>
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	2b0b      	cmp	r3, #11
 8004cf0:	d008      	beq.n	8004d04 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d005      	beq.n	8004d04 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	2b0d      	cmp	r3, #13
 8004cfc:	d002      	beq.n	8004d04 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	2b0e      	cmp	r3, #14
 8004d02:	d101      	bne.n	8004d08 <is_out_anim+0x2c>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <is_out_anim+0x2e>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
           anim_type == LV_SCR_LOAD_ANIM_OUT_BOTTOM;
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <lv_event_send>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_res_t lv_event_send(lv_obj_t * obj, lv_event_code_t event_code, void * param)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	; 0x30
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	460b      	mov	r3, r1
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <lv_event_send+0x18>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e02f      	b.n	8004d94 <lv_event_send+0x78>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_event_t e;
    e.target = obj;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	613b      	str	r3, [r7, #16]
    e.current_target = obj;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	617b      	str	r3, [r7, #20]
    e.code = event_code;
 8004d3c:	7afb      	ldrb	r3, [r7, #11]
 8004d3e:	763b      	strb	r3, [r7, #24]
    e.user_data = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61fb      	str	r3, [r7, #28]
    e.param = param;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	623b      	str	r3, [r7, #32]
    e.deleted = 0;
 8004d48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d4c:	f36f 0300 	bfc	r3, #0, #1
 8004d50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_bubbling = 0;
 8004d54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d58:	f36f 0382 	bfc	r3, #2, #1
 8004d5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_processing = 0;
 8004d60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d64:	f36f 0341 	bfc	r3, #1, #1
 8004d68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*Build a simple linked list from the objects used in the events
     *It's important to know if this object was deleted by a nested event
     *called from this `event_cb`.*/
    e.prev = event_head;
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <lv_event_send+0x80>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
    event_head = &e;
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <lv_event_send+0x80>)
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	6013      	str	r3, [r2, #0]

    /*Send the event*/
    lv_res_t res = event_send_core(&e);
 8004d7a:	f107 0310 	add.w	r3, r7, #16
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f95d 	bl	800503e <event_send_core>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /*Remove this element from the list*/
    event_head = e.prev;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	4a03      	ldr	r2, [pc, #12]	; (8004d9c <lv_event_send+0x80>)
 8004d8e:	6013      	str	r3, [r2, #0]

    return res;
 8004d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3730      	adds	r7, #48	; 0x30
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	200006ec 	.word	0x200006ec

08004da0 <lv_obj_event_base>:


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <lv_obj_event_base+0x1a>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e006      	b.n	8004dc8 <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

    /*Find a base in which call the ancestor's event handler_cb if set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8004dc0:	e002      	b.n	8004dc8 <lv_obj_event_base+0x28>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <lv_obj_event_base+0x36>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f5      	beq.n	8004dc2 <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <lv_obj_event_base+0x40>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e019      	b.n	8004e14 <lv_obj_event_base+0x74>
    if(base->event_cb == NULL) return LV_RES_OK;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <lv_obj_event_base+0x4c>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e013      	b.n	8004e14 <lv_obj_event_base+0x74>

    /*Call the actual event callback*/
    e->user_data = NULL;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	60da      	str	r2, [r3, #12]
    base->event_cb(base, e);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	72fb      	strb	r3, [r7, #11]
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	7e1b      	ldrb	r3, [r3, #24]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <lv_obj_event_base+0x72>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	72fb      	strb	r3, [r7, #11]

    return res;
 8004e12:	7afb      	ldrb	r3, [r7, #11]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <lv_event_get_target>:


lv_obj_t * lv_event_get_target(lv_event_t * e)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
    return e->target;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <lv_event_get_current_target>:

lv_obj_t * lv_event_get_current_target(lv_event_t * e)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
    return e->current_target;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <lv_event_get_code>:

lv_event_code_t lv_event_get_code(lv_event_t * e)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
    return e->code & ~LV_EVENT_PREPROCESS;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	7a1b      	ldrb	r3, [r3, #8]
 8004e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5c:	b2db      	uxtb	r3, r3
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <lv_event_get_param>:

void * lv_event_get_param(lv_event_t * e)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
    return e->param;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <_lv_event_mark_deleted>:
    last_id ++;
    return last_id;
}

void _lv_event_mark_deleted(lv_obj_t * obj)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
    lv_event_t * e = event_head;
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <_lv_event_mark_deleted+0x48>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]

    while(e) {
 8004e92:	e011      	b.n	8004eb8 <_lv_event_mark_deleted+0x34>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d004      	beq.n	8004ea8 <_lv_event_mark_deleted+0x24>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d104      	bne.n	8004eb2 <_lv_event_mark_deleted+0x2e>
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	7e13      	ldrb	r3, [r2, #24]
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	7613      	strb	r3, [r2, #24]
        e = e->prev;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	60fb      	str	r3, [r7, #12]
    while(e) {
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ea      	bne.n	8004e94 <_lv_event_mark_deleted+0x10>
    }
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	200006ec 	.word	0x200006ec

08004ed0 <lv_event_get_indev>:
    }
    return NULL;
}

lv_indev_t * lv_event_get_indev(lv_event_t * e)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

    if(e->code == LV_EVENT_PRESSED ||
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	7a1b      	ldrb	r3, [r3, #8]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d03b      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESSING ||
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d037      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESS_LOST ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESSING ||
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d033      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SHORT_CLICKED ||
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESS_LOST ||
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d02f      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED ||
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SHORT_CLICKED ||
 8004efc:	2b05      	cmp	r3, #5
 8004efe:	d02b      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED ||
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d027      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_CLICKED ||
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8004f0c:	2b07      	cmp	r3, #7
 8004f0e:	d023      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_RELEASED ||
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_CLICKED ||
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d01f      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_RELEASED ||
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	d01b      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_END ||
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8004f24:	2b0a      	cmp	r3, #10
 8004f26:	d017      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL ||
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_END ||
 8004f2c:	2b0b      	cmp	r3, #11
 8004f2e:	d013      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_GESTURE ||
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL ||
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	d00f      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_KEY ||
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_GESTURE ||
 8004f3c:	2b0d      	cmp	r3, #13
 8004f3e:	d00b      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_FOCUSED ||
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_KEY ||
 8004f44:	2b0e      	cmp	r3, #14
 8004f46:	d007      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_DEFOCUSED ||
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_FOCUSED ||
 8004f4c:	2b0f      	cmp	r3, #15
 8004f4e:	d003      	beq.n	8004f58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LEAVE) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DEFOCUSED ||
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d104      	bne.n	8004f62 <lv_event_get_indev+0x92>
        return lv_event_get_param(e);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff86 	bl	8004e6a <lv_event_get_param>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	e000      	b.n	8004f64 <lv_event_get_indev+0x94>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8004f62:	2300      	movs	r3, #0
    }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <lv_event_get_draw_ctx>:
        return NULL;
    }
}

lv_draw_ctx_t * lv_event_get_draw_ctx(lv_event_t * e)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	7a1b      	ldrb	r3, [r3, #8]
 8004f78:	2b15      	cmp	r3, #21
 8004f7a:	d013      	beq.n	8004fa4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004f80:	2b14      	cmp	r3, #20
 8004f82:	d00f      	beq.n	8004fa4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8004f88:	2b16      	cmp	r3, #22
 8004f8a:	d00b      	beq.n	8004fa4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST ||
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8004f90:	2b18      	cmp	r3, #24
 8004f92:	d007      	beq.n	8004fa4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST ||
 8004f98:	2b17      	cmp	r3, #23
 8004f9a:	d003      	beq.n	8004fa4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_END) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8004fa0:	2b19      	cmp	r3, #25
 8004fa2:	d104      	bne.n	8004fae <lv_event_get_draw_ctx+0x42>
        return lv_event_get_param(e);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ff60 	bl	8004e6a <lv_event_get_param>
 8004faa:	4603      	mov	r3, r0
 8004fac:	e000      	b.n	8004fb0 <lv_event_get_draw_ctx+0x44>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8004fae:	2300      	movs	r3, #0
    }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <lv_event_set_ext_draw_size>:
        return 0;
    }
}

void lv_event_set_ext_draw_size(lv_event_t * e, lv_coord_t size)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	7a1b      	ldrb	r3, [r3, #8]
 8004fc8:	2b13      	cmp	r3, #19
 8004fca:	d10e      	bne.n	8004fea <lv_event_set_ext_draw_size+0x32>
        lv_coord_t * cur_size = lv_event_get_param(e);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff4c 	bl	8004e6a <lv_event_get_param>
 8004fd2:	60f8      	str	r0, [r7, #12]
        *cur_size = LV_MAX(*cur_size, size);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	bfb8      	it	lt
 8004fe2:	4613      	movlt	r3, r2
 8004fe4:	b21a      	sxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	801a      	strh	r2, [r3, #0]
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
    }
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <lv_obj_get_event_dsc>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <lv_obj_get_event_dsc+0x16>
 8005004:	2300      	movs	r3, #0
 8005006:	e014      	b.n	8005032 <lv_obj_get_event_dsc+0x40>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	7e9b      	ldrb	r3, [r3, #26]
 800500e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	4293      	cmp	r3, r2
 800501a:	d301      	bcc.n	8005020 <lv_obj_get_event_dsc+0x2e>
 800501c:	2300      	movs	r3, #0
 800501e:	e008      	b.n	8005032 <lv_obj_get_event_dsc+0x40>

    return &obj->spec_attr->event_dsc[id];
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	68d9      	ldr	r1, [r3, #12]
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8005046:	f000 fbe9 	bl	800581c <lv_indev_get_act>
 800504a:	60b8      	str	r0, [r7, #8]
    if(indev_act) {
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01f      	beq.n	8005092 <event_send_core+0x54>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <event_send_core+0x30>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	6810      	ldr	r0, [r2, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	7a12      	ldrb	r2, [r2, #8]
 800506a:	4611      	mov	r1, r2
 800506c:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7e1b      	ldrb	r3, [r3, #24]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <event_send_core+0x42>
 800507c:	2301      	movs	r3, #1
 800507e:	e0c4      	b.n	800520a <event_send_core+0x1cc>
        if(e->deleted) return LV_RES_INV;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7e1b      	ldrb	r3, [r3, #24]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <event_send_core+0x54>
 800508e:	2300      	movs	r3, #0
 8005090:	e0bb      	b.n	800520a <event_send_core+0x1cc>
    }

    lv_res_t res = LV_RES_OK;
 8005092:	2301      	movs	r3, #1
 8005094:	75fb      	strb	r3, [r7, #23]
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffa8 	bl	8004ff2 <lv_obj_get_event_dsc>
 80050a2:	6138      	str	r0, [r7, #16]

    uint32_t i = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 80050a8:	e038      	b.n	800511c <event_send_core+0xde>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02a      	beq.n	8005108 <event_send_core+0xca>
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	7a1b      	ldrb	r3, [r3, #8]
 80050b6:	b25b      	sxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	da25      	bge.n	8005108 <event_send_core+0xca>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	7a1b      	ldrb	r3, [r3, #8]
 80050c0:	2b80      	cmp	r3, #128	; 0x80
 80050c2:	d007      	beq.n	80050d4 <event_send_core+0x96>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	7a1b      	ldrb	r3, [r3, #8]
 80050c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	7a12      	ldrb	r2, [r2, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d119      	bne.n	8005108 <event_send_core+0xca>
            e->user_data = event_dsc->user_data;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	7e1b      	ldrb	r3, [r3, #24]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <event_send_core+0xb8>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e089      	b.n	800520a <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7e1b      	ldrb	r3, [r3, #24]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <event_send_core+0xca>
 8005104:	2300      	movs	r3, #0
 8005106:	e080      	b.n	800520a <event_send_core+0x1cc>
        }

        i++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	68f9      	ldr	r1, [r7, #12]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff6c 	bl	8004ff2 <lv_obj_get_event_dsc>
 800511a:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <event_send_core+0xea>
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d0c0      	beq.n	80050aa <event_send_core+0x6c>
    }

    res = lv_obj_event_base(NULL, e);
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	2000      	movs	r0, #0
 800512c:	f7ff fe38 	bl	8004da0 <lv_obj_event_base>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <event_send_core+0x10c>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff56 	bl	8004ff2 <lv_obj_get_event_dsc>
 8005146:	4603      	mov	r3, r0
 8005148:	e000      	b.n	800514c <event_send_core+0x10e>
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]

    i = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8005152:	e036      	b.n	80051c2 <event_send_core+0x184>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d028      	beq.n	80051ae <event_send_core+0x170>
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	7a1b      	ldrb	r3, [r3, #8]
 8005160:	b25b      	sxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	db23      	blt.n	80051ae <event_send_core+0x170>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	7a1b      	ldrb	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <event_send_core+0x13c>
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	7a1a      	ldrb	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	7a1b      	ldrb	r3, [r3, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	d119      	bne.n	80051ae <event_send_core+0x170>
            e->user_data = event_dsc->user_data;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7e1b      	ldrb	r3, [r3, #24]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <event_send_core+0x15e>
 8005198:	2301      	movs	r3, #1
 800519a:	e036      	b.n	800520a <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	7e1b      	ldrb	r3, [r3, #24]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <event_send_core+0x170>
 80051aa:	2300      	movs	r3, #0
 80051ac:	e02d      	b.n	800520a <event_send_core+0x1cc>
        }

        i++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff ff19 	bl	8004ff2 <lv_obj_get_event_dsc>
 80051c0:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <event_send_core+0x190>
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d0c2      	beq.n	8005154 <event_send_core+0x116>
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d119      	bne.n	8005208 <event_send_core+0x1ca>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d014      	beq.n	8005208 <event_send_core+0x1ca>
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f818 	bl	8005214 <event_is_bubbled>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00e      	beq.n	8005208 <event_send_core+0x1ca>
        e->current_target = e->current_target->parent;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]
        res = event_send_core(e);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff ff22 	bl	800503e <event_send_core>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) return LV_RES_INV;
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d001      	beq.n	8005208 <event_send_core+0x1ca>
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <event_send_core+0x1cc>
    }

    return res;
 8005208:	7dfb      	ldrb	r3, [r7, #23]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <event_is_bubbled>:

static bool event_is_bubbled(lv_event_t * e)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
    if(e->stop_bubbling) return false;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	7e1b      	ldrb	r3, [r3, #24]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <event_is_bubbled+0x1a>
 800522a:	2300      	movs	r3, #0
 800522c:	e059      	b.n	80052e2 <event_is_bubbled+0xce>

    /*Event codes that always bubble*/
    switch(e->code) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7a1b      	ldrb	r3, [r3, #8]
 8005232:	3b23      	subs	r3, #35	; 0x23
 8005234:	2b01      	cmp	r3, #1
 8005236:	d801      	bhi.n	800523c <event_is_bubbled+0x28>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 8005238:	2301      	movs	r3, #1
 800523a:	e052      	b.n	80052e2 <event_is_bubbled+0xce>
        default:
            break;
 800523c:	bf00      	nop
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005246:	4618      	mov	r0, r3
 8005248:	f000 ff41 	bl	80060ce <lv_obj_has_flag>
 800524c:	4603      	mov	r3, r0
 800524e:	f083 0301 	eor.w	r3, r3, #1
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <event_is_bubbled+0x48>
 8005258:	2300      	movs	r3, #0
 800525a:	e042      	b.n	80052e2 <event_is_bubbled+0xce>

    switch(e->code) {
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	7a1b      	ldrb	r3, [r3, #8]
 8005260:	3b11      	subs	r3, #17
 8005262:	2b1b      	cmp	r3, #27
 8005264:	d83c      	bhi.n	80052e0 <event_is_bubbled+0xcc>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <event_is_bubbled+0x58>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	080052dd 	.word	0x080052dd
 8005270:	080052dd 	.word	0x080052dd
 8005274:	080052dd 	.word	0x080052dd
 8005278:	080052dd 	.word	0x080052dd
 800527c:	080052dd 	.word	0x080052dd
 8005280:	080052dd 	.word	0x080052dd
 8005284:	080052dd 	.word	0x080052dd
 8005288:	080052dd 	.word	0x080052dd
 800528c:	080052dd 	.word	0x080052dd
 8005290:	080052dd 	.word	0x080052dd
 8005294:	080052dd 	.word	0x080052dd
 8005298:	080052e1 	.word	0x080052e1
 800529c:	080052e1 	.word	0x080052e1
 80052a0:	080052dd 	.word	0x080052dd
 80052a4:	080052e1 	.word	0x080052e1
 80052a8:	080052e1 	.word	0x080052e1
 80052ac:	080052dd 	.word	0x080052dd
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	080052dd 	.word	0x080052dd
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	080052e1 	.word	0x080052e1
 80052c8:	080052e1 	.word	0x080052e1
 80052cc:	080052dd 	.word	0x080052dd
 80052d0:	080052dd 	.word	0x080052dd
 80052d4:	080052e1 	.word	0x080052e1
 80052d8:	080052dd 	.word	0x080052dd
        case LV_EVENT_CHILD_DELETED:
        case LV_EVENT_CHILD_CHANGED:
        case LV_EVENT_SIZE_CHANGED:
        case LV_EVENT_STYLE_CHANGED:
        case LV_EVENT_GET_SELF_SIZE:
            return false;
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <event_is_bubbled+0xce>
        default:
            return true;
 80052e0:	2301      	movs	r3, #1
    }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop

080052ec <_lv_group_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80052f0:	2120      	movs	r1, #32
 80052f2:	4802      	ldr	r0, [pc, #8]	; (80052fc <_lv_group_init+0x10>)
 80052f4:	f01c fbe1 	bl	8021aba <_lv_ll_init>
}
 80052f8:	bf00      	nop
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000888 	.word	0x20000888

08005300 <lv_group_get_default>:
{
    default_group = group;
}

lv_group_t * lv_group_get_default(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
    return default_group;
 8005304:	4b03      	ldr	r3, [pc, #12]	; (8005314 <lv_group_get_default+0x14>)
 8005306:	681b      	ldr	r3, [r3, #0]
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	200006f0 	.word	0x200006f0

08005318 <lv_group_add_obj>:

void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d053      	beq.n	80053d0 <lv_group_add_obj+0xb8>

    LV_LOG_TRACE("begin");

    /*Be sure the object is removed from its current group*/
    lv_group_remove_obj(obj);
 8005328:	6838      	ldr	r0, [r7, #0]
 800532a:	f000 f859 	bl	80053e0 <lv_group_remove_obj>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	f01c fca0 	bl	8021c76 <_lv_ll_get_head>
 8005336:	6178      	str	r0, [r7, #20]
 8005338:	e00a      	b.n	8005350 <lv_group_add_obj+0x38>
        if((*obj_i) == obj) {
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d047      	beq.n	80053d4 <lv_group_add_obj+0xbc>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	4618      	mov	r0, r3
 800534a:	f01c fcb6 	bl	8021cba <_lv_ll_get_next>
 800534e:	6178      	str	r0, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f1      	bne.n	800533a <lv_group_add_obj+0x22>
            return;
        }
    }

    /*If the object is already in a group and focused then refocus it*/
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8005356:	6838      	ldr	r0, [r7, #0]
 8005358:	f000 feee 	bl	8006138 <lv_obj_get_group>
 800535c:	6138      	str	r0, [r7, #16]
    if(group_cur) {
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00f      	beq.n	8005384 <lv_group_add_obj+0x6c>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <lv_group_add_obj+0x6c>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d102      	bne.n	8005384 <lv_group_add_obj+0x6c>
            lv_group_refocus(group_cur);
 800537e:	6938      	ldr	r0, [r7, #16]
 8005380:	f000 f908 	bl	8005594 <lv_group_refocus>

            LV_LOG_INFO("changing object's group");
        }
    }

    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <lv_group_add_obj+0x7a>
 800538c:	6838      	ldr	r0, [r7, #0]
 800538e:	f000 fee7 	bl	8006160 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]

    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4618      	mov	r0, r3
 800539e:	f01c fbd9 	bl	8021b54 <_lv_ll_ins_tail>
 80053a2:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(next);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d100      	bne.n	80053ac <lv_group_add_obj+0x94>
 80053aa:	e7fe      	b.n	80053aa <lv_group_add_obj+0x92>
    if(next == NULL) return;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d012      	beq.n	80053d8 <lv_group_add_obj+0xc0>
    *next = obj;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	601a      	str	r2, [r3, #0]

    /*If the head and the tail is equal then there is only one object in the linked list.
     *In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f01c fc5b 	bl	8021c76 <_lv_ll_get_head>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d108      	bne.n	80053da <lv_group_add_obj+0xc2>
        lv_group_refocus(group);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8e3 	bl	8005594 <lv_group_refocus>
 80053ce:	e004      	b.n	80053da <lv_group_add_obj+0xc2>
    if(group == NULL) return;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <lv_group_add_obj+0xc2>
            return;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <lv_group_add_obj+0xc2>
    if(next == NULL) return;
 80053d8:	bf00      	nop
    }

    LV_LOG_TRACE("finished");
}
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <lv_group_remove_obj>:
    else if(*g1->obj_focus == obj2) lv_group_focus_obj(obj1);

}

void lv_group_remove_obj(lv_obj_t * obj)
{
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
    lv_group_t * g = lv_obj_get_group(obj);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fea5 	bl	8006138 <lv_obj_get_group>
 80053ee:	60b8      	str	r0, [r7, #8]
    if(g == NULL) return;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d06a      	beq.n	80054cc <lv_group_remove_obj+0xec>

    LV_LOG_TRACE("begin");

    /*Focus on the next object*/
    if(g->obj_focus && *g->obj_focus == obj) {
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d033      	beq.n	8005466 <lv_group_remove_obj+0x86>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d12d      	bne.n	8005466 <lv_group_remove_obj+0x86>
        if(g->frozen) g->frozen = 0;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	7f1b      	ldrb	r3, [r3, #28]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <lv_group_remove_obj+0x42>
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	7f13      	ldrb	r3, [r2, #28]
 800541c:	f36f 0300 	bfc	r3, #0, #1
 8005420:	7713      	strb	r3, [r2, #28]

        /*If this is the only object in the group then focus to nothing.*/
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f01c fc26 	bl	8021c76 <_lv_ll_get_head>
 800542a:	4602      	mov	r2, r0
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	429a      	cmp	r2, r3
 8005432:	d115      	bne.n	8005460 <lv_group_remove_obj+0x80>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f01c fc2e 	bl	8021c98 <_lv_ll_get_tail>
 800543c:	4602      	mov	r2, r0
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	429a      	cmp	r2, r3
 8005444:	d10c      	bne.n	8005460 <lv_group_remove_obj+0x80>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	681c      	ldr	r4, [r3, #0]
 800544c:	68b8      	ldr	r0, [r7, #8]
 800544e:	f000 f9a8 	bl	80057a2 <get_indev>
 8005452:	4603      	mov	r3, r0
 8005454:	461a      	mov	r2, r3
 8005456:	210f      	movs	r1, #15
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff fc5f 	bl	8004d1c <lv_event_send>
 800545e:	e002      	b.n	8005466 <lv_group_remove_obj+0x86>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 8005460:	68b8      	ldr	r0, [r7, #8]
 8005462:	f000 f897 	bl	8005594 <lv_group_refocus>
    }

    /*If the focuses object is still the same then it was the only object in the group but it will
     *be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     *zero objects*/
    if(g->obj_focus && *g->obj_focus == obj) {
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <lv_group_remove_obj+0xa0>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d102      	bne.n	8005480 <lv_group_remove_obj+0xa0>
        g->obj_focus = NULL;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group*/
    lv_obj_t ** i;
    _LV_LL_READ(&g->obj_ll, i) {
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f01c fbf7 	bl	8021c76 <_lv_ll_get_head>
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	e01b      	b.n	80054c4 <lv_group_remove_obj+0xe4>
        if(*i == obj) {
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	d110      	bne.n	80054b8 <lv_group_remove_obj+0xd8>
            _lv_ll_remove(&g->obj_ll, i);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	4618      	mov	r0, r3
 800549c:	f01c fb8e 	bl	8021bbc <_lv_ll_remove>
            lv_mem_free(i);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f01c fdd7 	bl	8022054 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <lv_group_remove_obj+0xf0>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]
            break;
 80054b6:	e00b      	b.n	80054d0 <lv_group_remove_obj+0xf0>
    _LV_LL_READ(&g->obj_ll, i) {
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	4618      	mov	r0, r3
 80054be:	f01c fbfc 	bl	8021cba <_lv_ll_get_next>
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e0      	bne.n	800548c <lv_group_remove_obj+0xac>
 80054ca:	e002      	b.n	80054d2 <lv_group_remove_obj+0xf2>
    if(g == NULL) return;
 80054cc:	bf00      	nop
 80054ce:	e000      	b.n	80054d2 <lv_group_remove_obj+0xf2>
            break;
 80054d0:	bf00      	nop
        }
    }
    LV_LOG_TRACE("finished");
}
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd90      	pop	{r4, r7, pc}

080054d8 <lv_group_focus_next>:
        }
    }
}

void lv_group_focus_next(lv_group_t * group)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 80054e0:	4a0c      	ldr	r2, [pc, #48]	; (8005514 <lv_group_focus_next+0x3c>)
 80054e2:	490d      	ldr	r1, [pc, #52]	; (8005518 <lv_group_focus_next+0x40>)
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f886 	bl	80055f6 <focus_next_core>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <lv_group_focus_next+0x34>
        if(!focus_changed)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	f083 0301 	eor.w	r3, r3, #1
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d004      	beq.n	800550c <lv_group_focus_next+0x34>
            group->edge_cb(group, true);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2101      	movs	r1, #1
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
    }
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	08021cbb 	.word	0x08021cbb
 8005518:	08021c77 	.word	0x08021c77

0800551c <lv_group_focus_prev>:

void lv_group_focus_prev(lv_group_t * group)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8005524:	4a0c      	ldr	r2, [pc, #48]	; (8005558 <lv_group_focus_prev+0x3c>)
 8005526:	490d      	ldr	r1, [pc, #52]	; (800555c <lv_group_focus_prev+0x40>)
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f864 	bl	80055f6 <focus_next_core>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <lv_group_focus_prev+0x34>
        if(!focus_changed)
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	f083 0301 	eor.w	r3, r3, #1
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d004      	beq.n	8005550 <lv_group_focus_prev+0x34>
            group->edge_cb(group, false);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2100      	movs	r1, #0
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
    }
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08021ce5 	.word	0x08021ce5
 800555c:	08021c99 	.word	0x08021c99

08005560 <lv_group_get_editing>:
    if(!group) return NULL;
    return group->edge_cb;
}

bool lv_group_get_editing(const lv_group_t * group)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <lv_group_get_editing+0x12>
 800556e:	2300      	movs	r3, #0
 8005570:	e00a      	b.n	8005588 <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7f1b      	ldrb	r3, [r3, #28]
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	7f1b      	ldrb	r3, [r3, #28]
 80055a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	7f13      	ldrb	r3, [r2, #28]
 80055ac:	f043 0308 	orr.w	r3, r3, #8
 80055b0:	7713      	strb	r3, [r2, #28]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7f1b      	ldrb	r3, [r3, #28]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d103      	bne.n	80055c8 <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ff89 	bl	80054d8 <lv_group_focus_next>
 80055c6:	e009      	b.n	80055dc <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	7f1b      	ldrb	r3, [r3, #28]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ffa0 	bl	800551c <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	b2d9      	uxtb	r1, r3
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	7f13      	ldrb	r3, [r2, #28]
 80055e8:	f361 03c3 	bfi	r3, r1, #3, #1
 80055ec:	7713      	strb	r3, [r2, #28]
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <focus_next_core>:

static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 80055f6:	b590      	push	{r4, r7, lr}
 80055f8:	b08b      	sub	sp, #44	; 0x2c
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
    bool focus_changed = false;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
    if(group->frozen) return focus_changed;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	7f1b      	ldrb	r3, [r3, #28]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <focus_next_core+0x22>
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	e0c0      	b.n	800579a <focus_next_core+0x1a4>

    lv_obj_t ** obj_next     = group->obj_focus;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_obj_t ** obj_sentinel = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]
    bool can_move            = true;
 8005622:	2301      	movs	r3, #1
 8005624:	77fb      	strb	r3, [r7, #31]
    bool can_begin           = true;
 8005626:	2301      	movs	r3, #1
 8005628:	77bb      	strb	r3, [r7, #30]

    for(;;) {
        if(obj_next == NULL) {
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11d      	bne.n	800566c <focus_next_core+0x76>
            if(group->wrap || obj_sentinel == NULL) {
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	7f1b      	ldrb	r3, [r3, #28]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <focus_next_core+0x4e>
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d111      	bne.n	8005668 <focus_next_core+0x72>
                if(!can_begin) return focus_changed;
 8005644:	7fbb      	ldrb	r3, [r7, #30]
 8005646:	f083 0301 	eor.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <focus_next_core+0x5e>
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	e0a2      	b.n	800579a <focus_next_core+0x1a4>
                obj_next  = begin(&group->obj_ll);
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4610      	mov	r0, r2
 800565a:	4798      	blx	r3
 800565c:	6278      	str	r0, [r7, #36]	; 0x24
                can_move  = false;
 800565e:	2300      	movs	r3, #0
 8005660:	77fb      	strb	r3, [r7, #31]
                can_begin = false;
 8005662:	2300      	movs	r3, #0
 8005664:	77bb      	strb	r3, [r7, #30]
 8005666:	e001      	b.n	800566c <focus_next_core+0x76>
            }
            else {
                /*Currently focused object is the last/first in the group, keep it that way*/
                return focus_changed;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	e096      	b.n	800579a <focus_next_core+0x1a4>
            }
        }

        if(obj_sentinel == NULL) {
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <focus_next_core+0x8a>
            obj_sentinel = obj_next;
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	623b      	str	r3, [r7, #32]
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <focus_next_core+0x8a>
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	e08c      	b.n	800579a <focus_next_core+0x1a4>
        }

        if(can_move) {
 8005680:	7ffb      	ldrb	r3, [r7, #31]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00b      	beq.n	800569e <focus_next_core+0xa8>
            obj_next = move(&group->obj_ll, obj_next);
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800568c:	4610      	mov	r0, r2
 800568e:	4798      	blx	r3
 8005690:	6278      	str	r0, [r7, #36]	; 0x24

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return focus_changed;
 8005692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	429a      	cmp	r2, r3
 8005698:	d101      	bne.n	800569e <focus_next_core+0xa8>
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	e07d      	b.n	800579a <focus_next_core+0x1a4>
        }

        can_move = true;
 800569e:	2301      	movs	r3, #1
 80056a0:	77fb      	strb	r3, [r7, #31]

        if(obj_next == NULL) continue;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d028      	beq.n	80056fa <focus_next_core+0x104>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fd37 	bl	8006120 <lv_obj_get_state>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d120      	bne.n	80056fe <focus_next_core+0x108>

        /*Hidden objects don't receive focus.
         *If any parent is hidden, the object is also hidden)*/
        lv_obj_t * parent = *obj_next;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	61bb      	str	r3, [r7, #24]
        while(parent) {
 80056c2:	e00a      	b.n	80056da <focus_next_core+0xe4>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 80056c4:	2101      	movs	r1, #1
 80056c6:	69b8      	ldr	r0, [r7, #24]
 80056c8:	f000 fd01 	bl	80060ce <lv_obj_has_flag>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <focus_next_core+0xec>
            parent = lv_obj_get_parent(parent);
 80056d2:	69b8      	ldr	r0, [r7, #24]
 80056d4:	f008 fd60 	bl	800e198 <lv_obj_get_parent>
 80056d8:	61b8      	str	r0, [r7, #24]
        while(parent) {
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f1      	bne.n	80056c4 <focus_next_core+0xce>
 80056e0:	e000      	b.n	80056e4 <focus_next_core+0xee>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 80056e2:	bf00      	nop
        }

        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <focus_next_core+0x10c>
 80056ea:	2101      	movs	r1, #1
 80056ec:	69b8      	ldr	r0, [r7, #24]
 80056ee:	f000 fcee 	bl	80060ce <lv_obj_has_flag>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <focus_next_core+0x10c>
 80056f8:	e002      	b.n	8005700 <focus_next_core+0x10a>
        if(obj_next == NULL) continue;
 80056fa:	bf00      	nop
 80056fc:	e795      	b.n	800562a <focus_next_core+0x34>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 80056fe:	bf00      	nop
    for(;;) {
 8005700:	e793      	b.n	800562a <focus_next_core+0x34>

        /*If we got her a good candidate is found*/
        break;
 8005702:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570a:	429a      	cmp	r2, r3
 800570c:	d101      	bne.n	8005712 <focus_next_core+0x11c>
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	e043      	b.n	800579a <focus_next_core+0x1a4>

    if(group->obj_focus) {
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d018      	beq.n	800574c <focus_next_core+0x156>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	681c      	ldr	r4, [r3, #0]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f83e 	bl	80057a2 <get_indev>
 8005726:	4603      	mov	r3, r0
 8005728:	461a      	mov	r2, r3
 800572a:	210f      	movs	r1, #15
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff faf5 	bl	8004d1c <lv_event_send>
 8005732:	4603      	mov	r3, r0
 8005734:	75bb      	strb	r3, [r7, #22]
        if(res != LV_RES_OK) return focus_changed;
 8005736:	7dbb      	ldrb	r3, [r7, #22]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d001      	beq.n	8005740 <focus_next_core+0x14a>
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	e02c      	b.n	800579a <focus_next_core+0x1a4>
        lv_obj_invalidate(*group->obj_focus);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f004 f8bd 	bl	80098c6 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005750:	60da      	str	r2, [r3, #12]

    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	681c      	ldr	r4, [r3, #0]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f822 	bl	80057a2 <get_indev>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	210e      	movs	r1, #14
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff fad9 	bl	8004d1c <lv_event_send>
 800576a:	4603      	mov	r3, r0
 800576c:	757b      	strb	r3, [r7, #21]
    if(res != LV_RES_OK) return focus_changed;
 800576e:	7d7b      	ldrb	r3, [r7, #21]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d001      	beq.n	8005778 <focus_next_core+0x182>
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	e010      	b.n	800579a <focus_next_core+0x1a4>

    lv_obj_invalidate(*group->obj_focus);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f004 f8a1 	bl	80098c6 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <focus_next_core+0x19e>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	4798      	blx	r3
    focus_changed = true;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
    return focus_changed;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	372c      	adds	r7, #44	; 0x2c
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd90      	pop	{r4, r7, pc}

080057a2 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
    lv_indev_t * indev_encoder = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
    lv_indev_t * indev_group = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80057b2:	2000      	movs	r0, #0
 80057b4:	f01a fc5e 	bl	8020074 <lv_indev_get_next>
 80057b8:	60f8      	str	r0, [r7, #12]
    while(indev) {
 80057ba:	e019      	b.n	80057f0 <get_indev+0x4e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f839 	bl	8005834 <lv_indev_get_type>
 80057c2:	4603      	mov	r3, r0
 80057c4:	72fb      	strb	r3, [r7, #11]
        if(indev->group == g) {
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d10b      	bne.n	80057e8 <get_indev+0x46>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 80057d0:	7afb      	ldrb	r3, [r7, #11]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d101      	bne.n	80057da <get_indev+0x38>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	e01b      	b.n	8005812 <get_indev+0x70>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d101      	bne.n	80057e4 <get_indev+0x42>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	617b      	str	r3, [r7, #20]
            indev_group = indev;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	613b      	str	r3, [r7, #16]
        }
        indev = lv_indev_get_next(indev);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f01a fc43 	bl	8020074 <lv_indev_get_next>
 80057ee:	60f8      	str	r0, [r7, #12]
    while(indev) {
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e2      	bne.n	80057bc <get_indev+0x1a>
    }

    if(indev_encoder) return indev_encoder;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <get_indev+0x5e>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	e008      	b.n	8005812 <get_indev+0x70>
    if(indev_group) return indev_group;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <get_indev+0x68>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	e003      	b.n	8005812 <get_indev+0x70>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 800580a:	2000      	movs	r0, #0
 800580c:	f01a fc32 	bl	8020074 <lv_indev_get_next>
 8005810:	4603      	mov	r3, r0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <lv_indev_get_act>:
        }
    }
}

lv_indev_t * lv_indev_get_act(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
    return indev_act;
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <lv_indev_get_act+0x14>)
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	200006f4 	.word	0x200006f4

08005834 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <lv_indev_get_type+0x12>
 8005842:	2300      	movs	r3, #0
 8005844:	e002      	b.n	800584c <lv_indev_get_type+0x18>

    return indev->driver->type;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <lv_indev_reset>:

void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
    if(indev) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d038      	beq.n	80058da <lv_indev_reset+0x82>
        indev->proc.reset_query = 1;
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	7953      	ldrb	r3, [r2, #5]
 800586c:	f043 0302 	orr.w	r3, r3, #2
 8005870:	7153      	strb	r3, [r2, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 8005872:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <lv_indev_reset+0x108>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d102      	bne.n	8005882 <lv_indev_reset+0x2a>
 800587c:	4b39      	ldr	r3, [pc, #228]	; (8005964 <lv_indev_reset+0x10c>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d004      	beq.n	8005896 <lv_indev_reset+0x3e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d160      	bne.n	8005958 <lv_indev_reset+0x100>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d004      	beq.n	80058a6 <lv_indev_reset+0x4e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d102      	bne.n	80058ac <lv_indev_reset+0x54>
                indev->proc.types.pointer.last_pressed = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	635a      	str	r2, [r3, #52]	; 0x34
            }
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <lv_indev_reset+0x64>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d102      	bne.n	80058c2 <lv_indev_reset+0x6a>
                indev->proc.types.pointer.act_obj = NULL;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
            }
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <lv_indev_reset+0x7a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d142      	bne.n	8005958 <lv_indev_reset+0x100>
                indev->proc.types.pointer.last_obj = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c
            }
            i = lv_indev_get_next(i);
        }
        indev_obj_act = NULL;
    }
}
 80058d8:	e03e      	b.n	8005958 <lv_indev_reset+0x100>
        lv_indev_t * i = lv_indev_get_next(NULL);
 80058da:	2000      	movs	r0, #0
 80058dc:	f01a fbca 	bl	8020074 <lv_indev_get_next>
 80058e0:	60f8      	str	r0, [r7, #12]
        while(i) {
 80058e2:	e033      	b.n	800594c <lv_indev_reset+0xf4>
            i->proc.reset_query = 1;
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	7953      	ldrb	r3, [r2, #5]
 80058e8:	f043 0302 	orr.w	r3, r3, #2
 80058ec:	7153      	strb	r3, [r2, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d004      	beq.n	8005902 <lv_indev_reset+0xaa>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d120      	bne.n	8005944 <lv_indev_reset+0xec>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <lv_indev_reset+0xba>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d102      	bne.n	8005918 <lv_indev_reset+0xc0>
                    i->proc.types.pointer.last_pressed = NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	635a      	str	r2, [r3, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d004      	beq.n	8005928 <lv_indev_reset+0xd0>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d102      	bne.n	800592e <lv_indev_reset+0xd6>
                    i->proc.types.pointer.act_obj = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	629a      	str	r2, [r3, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <lv_indev_reset+0xe6>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d102      	bne.n	8005944 <lv_indev_reset+0xec>
                    i->proc.types.pointer.last_obj = NULL;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	62da      	str	r2, [r3, #44]	; 0x2c
            i = lv_indev_get_next(i);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f01a fb95 	bl	8020074 <lv_indev_get_next>
 800594a:	60f8      	str	r0, [r7, #12]
        while(i) {
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1c8      	bne.n	80058e4 <lv_indev_reset+0x8c>
        indev_obj_act = NULL;
 8005952:	4b04      	ldr	r3, [pc, #16]	; (8005964 <lv_indev_reset+0x10c>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	200006f4 	.word	0x200006f4
 8005964:	200006f8 	.word	0x200006f8

08005968 <lv_indev_get_scroll_dir>:
    else
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <lv_indev_get_scroll_dir+0x12>
 8005976:	2300      	movs	r3, #0
 8005978:	e011      	b.n	800599e <lv_indev_get_scroll_dir+0x36>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d006      	beq.n	8005992 <lv_indev_get_scroll_dir+0x2a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d001      	beq.n	8005992 <lv_indev_get_scroll_dir+0x2a>
 800598e:	2300      	movs	r3, #0
 8005990:	e005      	b.n	800599e <lv_indev_get_scroll_dir+0x36>
    return indev->proc.types.pointer.scroll_dir;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005998:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800599c:	b2db      	uxtb	r3, r3
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return NULL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <lv_indev_get_scroll_obj+0x12>
 80059b8:	2300      	movs	r3, #0
 80059ba:	e00d      	b.n	80059d8 <lv_indev_get_scroll_obj+0x2e>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d006      	beq.n	80059d4 <lv_indev_get_scroll_obj+0x2a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d001      	beq.n	80059d4 <lv_indev_get_scroll_obj+0x2a>
 80059d0:	2300      	movs	r3, #0
 80059d2:	e001      	b.n	80059d8 <lv_indev_get_scroll_obj+0x2e>
    return indev->proc.types.pointer.scroll_obj;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <lv_indev_get_obj_act>:
    if(indev == NULL)return;
    indev->proc.wait_until_release = 1;
}

lv_obj_t * lv_indev_get_obj_act(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
    return indev_obj_act;
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <lv_indev_get_obj_act+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	200006f8 	.word	0x200006f8

080059fc <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	80da      	strh	r2, [r3, #6]
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b08c      	sub	sp, #48	; 0x30
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	460b      	mov	r3, r1
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	891b      	ldrh	r3, [r3, #8]
 8005a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d137      	bne.n	8005ac4 <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8005a54:	2300      	movs	r3, #0
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a58:	e02c      	b.n	8005ab4 <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005a6e:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8005a70:	8a7a      	ldrh	r2, [r7, #18]
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d11a      	bne.n	8005aae <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da01      	bge.n	8005a86 <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 8005a82:	2302      	movs	r3, #2
 8005a84:	e098      	b.n	8005bb8 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <lv_style_get_prop_inlined+0x68>
 8005a92:	8a7b      	ldrh	r3, [r7, #18]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f01d fa19 	bl	8022ecc <lv_style_prop_get_default>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	e003      	b.n	8005aaa <lv_style_get_prop_inlined+0x70>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	6852      	ldr	r2, [r2, #4]
 8005aa8:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e084      	b.n	8005bb8 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	7adb      	ldrb	r3, [r3, #11]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d3cc      	bcc.n	8005a5a <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e079      	b.n	8005bb8 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	7adb      	ldrb	r3, [r3, #11]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <lv_style_get_prop_inlined+0x96>
 8005acc:	2300      	movs	r3, #0
 8005ace:	e073      	b.n	8005bb8 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	7adb      	ldrb	r3, [r3, #11]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d948      	bls.n	8005b6a <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	7adb      	ldrb	r3, [r3, #11]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8005aea:	2300      	movs	r3, #0
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aee:	e035      	b.n	8005b5c <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	4413      	add	r3, r2
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005afe:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 8005b00:	8bfa      	ldrh	r2, [r7, #30]
 8005b02:	897b      	ldrh	r3, [r7, #10]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d126      	bne.n	8005b56 <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	6a3a      	ldr	r2, [r7, #32]
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da01      	bge.n	8005b1c <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e04d      	b.n	8005bb8 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	6a3a      	ldr	r2, [r7, #32]
 8005b22:	4413      	add	r3, r2
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8005b2e:	8bfb      	ldrh	r3, [r7, #30]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f01d f9cb 	bl	8022ecc <lv_style_prop_get_default>
 8005b36:	4602      	mov	r2, r0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	e009      	b.n	8005b52 <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	441a      	add	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e030      	b.n	8005bb8 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	3301      	adds	r3, #1
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	7adb      	ldrb	r3, [r3, #11]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d3c3      	bcc.n	8005af0 <lv_style_get_prop_inlined+0xb6>
 8005b68:	e025      	b.n	8005bb6 <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	891b      	ldrh	r3, [r3, #8]
 8005b6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005b72:	897b      	ldrh	r3, [r7, #10]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d11e      	bne.n	8005bb6 <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	891b      	ldrh	r3, [r3, #8]
 8005b7c:	b21b      	sxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da01      	bge.n	8005b86 <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 8005b82:	2302      	movs	r3, #2
 8005b84:	e018      	b.n	8005bb8 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	891b      	ldrh	r3, [r3, #8]
 8005b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <lv_style_get_prop_inlined+0x170>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	891b      	ldrh	r3, [r3, #8]
 8005b96:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f01d f995 	bl	8022ecc <lv_style_prop_get_default>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e003      	b.n	8005bb2 <lv_style_get_prop_inlined+0x178>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	6852      	ldr	r2, [r2, #4]
 8005bb0:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3730      	adds	r7, #48	; 0x30
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8005bc8:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <lv_obj_remove_style_all+0x1c>)
 8005bca:	2100      	movs	r1, #0
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f006 fdf3 	bl	800c7b8 <lv_obj_remove_style>
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	000fffff 	.word	0x000fffff

08005be0 <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005bea:	2201      	movs	r2, #1
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f006 ffb2 	bl	800cb58 <lv_obj_get_style_prop>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	b21b      	sxth	r3, r3
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <lv_obj_get_style_height>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005c0e:	2204      	movs	r2, #4
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f006 ffa0 	bl	800cb58 <lv_obj_get_style_prop>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	b21b      	sxth	r3, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <lv_obj_get_style_align>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
    return (lv_coord_t)v.num;
}

static inline lv_align_t lv_obj_get_style_align(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8005c32:	2209      	movs	r2, #9
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f006 ff8e 	bl	800cb58 <lv_obj_get_style_prop>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	b2db      	uxtb	r3, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <lv_obj_get_style_transform_width>:

static inline lv_coord_t lv_obj_get_style_transform_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8005c56:	2268      	movs	r2, #104	; 0x68
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f006 ff7c 	bl	800cb58 <lv_obj_get_style_prop>
 8005c60:	4603      	mov	r3, r0
 8005c62:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	b21b      	sxth	r3, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <lv_obj_get_style_transform_height>:

static inline lv_coord_t lv_obj_get_style_transform_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8005c7a:	2269      	movs	r2, #105	; 0x69
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f006 ff6a 	bl	800cb58 <lv_obj_get_style_prop>
 8005c84:	4603      	mov	r3, r0
 8005c86:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	b21b      	sxth	r3, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f006 ff58 	bl	800cb58 <lv_obj_get_style_prop>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	b21b      	sxth	r3, r3
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005cc2:	2212      	movs	r2, #18
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f006 ff46 	bl	800cb58 <lv_obj_get_style_prop>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	b21b      	sxth	r3, r3
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f006 ff34 	bl	800cb58 <lv_obj_get_style_prop>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005cf4:	7b3b      	ldrb	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <lv_obj_get_style_bg_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8005d08:	2221      	movs	r2, #33	; 0x21
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f006 ff23 	bl	800cb58 <lv_obj_get_style_prop>
 8005d12:	4603      	mov	r3, r0
 8005d14:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	b2db      	uxtb	r3, r3
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <lv_obj_get_style_border_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
    return (bool)v.num;
}

static inline lv_color_t lv_obj_get_style_border_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8005d2c:	2230      	movs	r2, #48	; 0x30
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f006 ff11 	bl	800cb58 <lv_obj_get_style_prop>
 8005d36:	4603      	mov	r3, r0
 8005d38:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005d3a:	7b3b      	ldrb	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <lv_obj_get_style_border_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8005d4e:	2231      	movs	r2, #49	; 0x31
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f006 ff00 	bl	800cb58 <lv_obj_get_style_prop>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	b2db      	uxtb	r3, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <lv_obj_get_style_border_width>:

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d72:	2232      	movs	r2, #50	; 0x32
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f006 feee 	bl	800cb58 <lv_obj_get_style_prop>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	b21b      	sxth	r3, r3
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <lv_obj_get_style_border_post>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8005d96:	2234      	movs	r2, #52	; 0x34
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f006 fedc 	bl	800cb58 <lv_obj_get_style_prop>
 8005da0:	4603      	mov	r3, r0
 8005da2:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	bf14      	ite	ne
 8005daa:	2301      	movne	r3, #1
 8005dac:	2300      	moveq	r3, #0
 8005dae:	b2db      	uxtb	r3, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <lv_obj_get_style_shadow_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8005dc2:	2240      	movs	r2, #64	; 0x40
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f006 fec6 	bl	800cb58 <lv_obj_get_style_prop>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	b21b      	sxth	r3, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <lv_obj_get_style_shadow_spread>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_spread(const struct _lv_obj_t * obj, uint32_t part)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8005de6:	2243      	movs	r2, #67	; 0x43
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f006 feb4 	bl	800cb58 <lv_obj_get_style_prop>
 8005df0:	4603      	mov	r3, r0
 8005df2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	b21b      	sxth	r3, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <lv_obj_get_style_shadow_color>:

static inline lv_color_t lv_obj_get_style_shadow_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8005e0a:	2244      	movs	r2, #68	; 0x44
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f006 fea2 	bl	800cb58 <lv_obj_get_style_prop>
 8005e14:	4603      	mov	r3, r0
 8005e16:	60fb      	str	r3, [r7, #12]
    return v.color;
 8005e18:	7b3b      	ldrb	r3, [r7, #12]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <lv_obj_get_style_shadow_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8005e2c:	2245      	movs	r2, #69	; 0x45
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f006 fe91 	bl	800cb58 <lv_obj_get_style_prop>
 8005e36:	4603      	mov	r3, r0
 8005e38:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	b2db      	uxtb	r3, r3
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <lv_obj_get_style_radius>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
    return (lv_text_align_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_radius(const struct _lv_obj_t * obj, uint32_t part)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8005e50:	220b      	movs	r2, #11
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f006 fe7f 	bl	800cb58 <lv_obj_get_style_prop>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	b21b      	sxth	r3, r3
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <lv_obj_get_style_clip_corner>:

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8005e74:	2217      	movs	r2, #23
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f006 fe6d 	bl	800cb58 <lv_obj_get_style_prop>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <lv_obj_get_style_opa>:

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8005ea0:	2260      	movs	r2, #96	; 0x60
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f006 fe57 	bl	800cb58 <lv_obj_get_style_prop>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	b2db      	uxtb	r3, r3
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <lv_obj_get_style_layout>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005ec4:	220a      	movs	r2, #10
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f006 fe45 	bl	800cb58 <lv_obj_get_style_prop>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	b29b      	uxth	r3, r3
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <lv_init>:
{
    return lv_initialized;
}

void lv_init(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
    /*Do nothing if already initialized*/
    if(lv_initialized) {
 8005ee6:	4b22      	ldr	r3, [pc, #136]	; (8005f70 <lv_init+0x90>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d13b      	bne.n	8005f66 <lv_init+0x86>
    }

    LV_LOG_INFO("begin");

    /*Initialize the misc modules*/
    lv_mem_init();
 8005eee:	f01c f871 	bl	8021fd4 <lv_mem_init>

    _lv_timer_core_init();
 8005ef2:	f01d fa9f 	bl	8023434 <_lv_timer_core_init>

    _lv_fs_init();
 8005ef6:	f01b fac1 	bl	802147c <_lv_fs_init>

    _lv_anim_core_init();
 8005efa:	f01a f921 	bl	8020140 <_lv_anim_core_init>

    _lv_group_init();
 8005efe:	f7ff f9f5 	bl	80052ec <_lv_group_init>

    lv_draw_init();
 8005f02:	f00a f9c4 	bl	801028e <lv_draw_init>

#if LV_USE_GPU_NXP_PXP && LV_USE_GPU_NXP_PXP_AUTO_INIT
    PXP_COND_STOP(!lv_gpu_nxp_pxp_init(), "PXP init failed.");
#endif

    _lv_obj_style_init();
 8005f06:	f006 fbb3 	bl	800c670 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8005f0a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8005f0e:	4819      	ldr	r0, [pc, #100]	; (8005f74 <lv_init+0x94>)
 8005f10:	f01b fdd3 	bl	8021aba <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8005f14:	215c      	movs	r1, #92	; 0x5c
 8005f16:	4818      	ldr	r0, [pc, #96]	; (8005f78 <lv_init+0x98>)
 8005f18:	f01b fdcf 	bl	8021aba <_lv_ll_init>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8005f1c:	f008 fb5e 	bl	800e5dc <_lv_refr_init>

    _lv_img_decoder_init();
 8005f20:	f00e fb76 	bl	8014610 <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 8005f24:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <lv_init+0x9c>)
 8005f26:	617b      	str	r3, [r7, #20]

    uint8_t * txt_u8 = (uint8_t *)txt;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	613b      	str	r3, [r7, #16]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2bc3      	cmp	r3, #195	; 0xc3
 8005f32:	d103      	bne.n	8005f3c <lv_init+0x5c>
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	3301      	adds	r3, #1
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings have no UTF-8 encoding. Non-ASCII characters won't be displayed.");
    }

    uint32_t endianess_test = 0x11223344;
 8005f3c:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <lv_init+0xa0>)
 8005f3e:	607b      	str	r3, [r7, #4]
    uint8_t * endianess_test_p = (uint8_t *) &endianess_test;
 8005f40:	1d3b      	adds	r3, r7, #4
 8005f42:	60fb      	str	r3, [r7, #12]
    bool big_endian = endianess_test_p[0] == 0x11 ? true : false;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b11      	cmp	r3, #17
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	72fb      	strb	r3, [r7, #11]

    if(big_endian) {
 8005f52:	7afb      	ldrb	r3, [r7, #11]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d000      	beq.n	8005f5a <lv_init+0x7a>
        LV_ASSERT_MSG(LV_BIG_ENDIAN_SYSTEM == 1,
 8005f58:	e7fe      	b.n	8005f58 <lv_init+0x78>

#if LV_LOG_LEVEL == LV_LOG_LEVEL_TRACE
    LV_LOG_WARN("Log level is set to 'Trace' which makes LVGL much slower");
#endif

    lv_extra_init();
 8005f5a:	f019 fab8 	bl	801f4ce <lv_extra_init>

    lv_initialized = true;
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <lv_init+0x90>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e000      	b.n	8005f68 <lv_init+0x88>
        return;
 8005f66:	bf00      	nop

    LV_LOG_TRACE("finished");
}
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200006fc 	.word	0x200006fc
 8005f74:	20000858 	.word	0x20000858
 8005f78:	20000864 	.word	0x20000864
 8005f7c:	080269dc 	.word	0x080269dc
 8005f80:	11223344 	.word	0x11223344

08005f84 <lv_obj_create>:
#endif
}
#endif

lv_obj_t * lv_obj_create(lv_obj_t * parent)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4806      	ldr	r0, [pc, #24]	; (8005fa8 <lv_obj_create+0x24>)
 8005f90:	f001 f9b8 	bl	8007304 <lv_obj_class_create_obj>
 8005f94:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f001 fa69 	bl	800746e <lv_obj_class_init_obj>
    return obj;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	08026a48 	.word	0x08026a48

08005fac <lv_obj_clear_flag>:
        lv_obj_invalidate_area(obj, &ver_area);
    }
}

void lv_obj_clear_flag(lv_obj_t * obj, lv_obj_flag_t f)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f002 fe10 	bl	8008bdc <lv_obj_is_layout_positioned>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	77fb      	strb	r3, [r7, #31]
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d013      	beq.n	8005ff2 <lv_obj_clear_flag+0x46>
        lv_area_t hor_area, ver_area;
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005fca:	f107 020c 	add.w	r2, r7, #12
 8005fce:	f107 0314 	add.w	r3, r7, #20
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f005 f84f 	bl	800b078 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8005fda:	f107 0314 	add.w	r3, r7, #20
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f003 fc3b 	bl	800985c <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f003 fc35 	bl	800985c <lv_obj_invalidate_area>
    }

    obj->flags &= (~f);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	61da      	str	r2, [r3, #28]

    if(f & LV_OBJ_FLAG_HIDDEN) {
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d012      	beq.n	8006030 <lv_obj_clear_flag+0x84>
        lv_obj_invalidate(obj);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f003 fc5b 	bl	80098c6 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f002 fde3 	bl	8008bdc <lv_obj_is_layout_positioned>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <lv_obj_clear_flag+0x84>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f008 f8bb 	bl	800e198 <lv_obj_get_parent>
 8006022:	4603      	mov	r3, r0
 8006024:	4618      	mov	r0, r3
 8006026:	f002 fe01 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f002 fdfe 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
        }
    }

    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f002 fdd3 	bl	8008bdc <lv_obj_is_layout_positioned>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	7ffb      	ldrb	r3, [r7, #31]
 800603c:	4293      	cmp	r3, r2
 800603e:	d104      	bne.n	800604a <lv_obj_clear_flag+0x9e>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f003 73c0 	and.w	r3, r3, #25165824	; 0x1800000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d006      	beq.n	8006058 <lv_obj_clear_flag+0xac>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f008 f8a4 	bl	800e198 <lv_obj_get_parent>
 8006050:	4603      	mov	r3, r0
 8006052:	4618      	mov	r0, r3
 8006054:	f002 fdea 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
    }

}
 8006058:	bf00      	nop
 800605a:	3720      	adds	r7, #32
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <lv_obj_add_state>:

void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state | state;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8c1a      	ldrh	r2, [r3, #32]
 8006070:	887b      	ldrh	r3, [r7, #2]
 8006072:	4313      	orrs	r3, r2
 8006074:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	8c1b      	ldrh	r3, [r3, #32]
 800607a:	89fa      	ldrh	r2, [r7, #14]
 800607c:	429a      	cmp	r2, r3
 800607e:	d004      	beq.n	800608a <lv_obj_add_state+0x2a>
        lv_obj_set_state(obj, new_state);
 8006080:	89fb      	ldrh	r3, [r7, #14]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 ffd1 	bl	800702c <lv_obj_set_state>
    }
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <lv_obj_clear_state>:

void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state & (~state);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8c1b      	ldrh	r3, [r3, #32]
 80060a2:	b21a      	sxth	r2, r3
 80060a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060a8:	43db      	mvns	r3, r3
 80060aa:	b21b      	sxth	r3, r3
 80060ac:	4013      	ands	r3, r2
 80060ae:	b21b      	sxth	r3, r3
 80060b0:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8c1b      	ldrh	r3, [r3, #32]
 80060b6:	89fa      	ldrh	r2, [r7, #14]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d004      	beq.n	80060c6 <lv_obj_clear_state+0x34>
        lv_obj_set_state(obj, new_state);
 80060bc:	89fb      	ldrh	r3, [r7, #14]
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 ffb3 	bl	800702c <lv_obj_set_state>
    }
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <lv_obj_has_flag>:
/*=======================
 * Getter functions
 *======================*/

bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f)  == f ? true : false;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	4013      	ands	r3, r2
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	bf0c      	ite	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	2300      	movne	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <lv_obj_has_flag_any>:

bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f) ? true : false;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	bf14      	ite	ne
 800610e:	2301      	movne	r3, #1
 8006110:	2300      	moveq	r3, #0
 8006112:	b2db      	uxtb	r3, r3
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->state;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8c1b      	ldrh	r3, [r3, #32]
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <lv_obj_get_group>:

    return obj->state & state ? true : false;
}

void * lv_obj_get_group(const lv_obj_t * obj)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr) return obj->spec_attr->group_p;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <lv_obj_get_group+0x18>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	e000      	b.n	8006152 <lv_obj_get_group+0x1a>
    else return NULL;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <lv_obj_allocate_spec_attr>:
/*-------------------
 * OTHER FUNCTIONS
 *------------------*/

void lv_obj_allocate_spec_attr(lv_obj_t * obj)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d127      	bne.n	80061c0 <lv_obj_allocate_spec_attr+0x60>
        static uint32_t x = 0;
        x++;
 8006170:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <lv_obj_allocate_spec_attr+0x68>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <lv_obj_allocate_spec_attr+0x68>)
 8006178:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 800617a:	201c      	movs	r0, #28
 800617c:	f01b ff3a 	bl	8021ff4 <lv_mem_alloc>
 8006180:	4602      	mov	r2, r0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d100      	bne.n	8006190 <lv_obj_allocate_spec_attr+0x30>
 800618e:	e7fe      	b.n	800618e <lv_obj_allocate_spec_attr+0x2e>
        if(obj->spec_attr == NULL) return;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d012      	beq.n	80061be <lv_obj_allocate_spec_attr+0x5e>

        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	211c      	movs	r1, #28
 800619e:	4618      	mov	r0, r3
 80061a0:	f01c fb5c 	bl	802285c <lv_memset_00>

        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	7e53      	ldrb	r3, [r2, #25]
 80061aa:	f043 030f 	orr.w	r3, r3, #15
 80061ae:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	7e13      	ldrb	r3, [r2, #24]
 80061b6:	f043 0303 	orr.w	r3, r3, #3
 80061ba:	7613      	strb	r3, [r2, #24]
 80061bc:	e000      	b.n	80061c0 <lv_obj_allocate_spec_attr+0x60>
        if(obj->spec_attr == NULL) return;
 80061be:	bf00      	nop
    }
}
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000700 	.word	0x20000700

080061cc <lv_obj_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_t * parent = obj->parent;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	60fb      	str	r3, [r7, #12]
    if(parent) {
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d03f      	beq.n	8006262 <lv_obj_constructor+0x96>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f004 fb3e 	bl	800a864 <lv_obj_get_scroll_left>
 80061e8:	4603      	mov	r3, r0
 80061ea:	817b      	strh	r3, [r7, #10]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f004 fa9b 	bl	800a728 <lv_obj_get_scroll_top>
 80061f2:	4603      	mov	r3, r0
 80061f4:	813b      	strh	r3, [r7, #8]

        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80061fc:	b29c      	uxth	r4, r3
 80061fe:	2100      	movs	r1, #0
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fd47 	bl	8005c94 <lv_obj_get_style_pad_top>
 8006206:	4603      	mov	r3, r0
 8006208:	b29b      	uxth	r3, r3
 800620a:	4423      	add	r3, r4
 800620c:	b29a      	uxth	r2, r3
 800620e:	893b      	ldrh	r3, [r7, #8]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	b21a      	sxth	r2, r3
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	82da      	strh	r2, [r3, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	b21a      	sxth	r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	835a      	strh	r2, [r3, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006232:	b29c      	uxth	r4, r3
 8006234:	2100      	movs	r1, #0
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fd3e 	bl	8005cb8 <lv_obj_get_style_pad_left>
 800623c:	4603      	mov	r3, r0
 800623e:	b29b      	uxth	r3, r3
 8006240:	4423      	add	r3, r4
 8006242:	b29a      	uxth	r2, r3
 8006244:	897b      	ldrh	r3, [r7, #10]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	b29b      	uxth	r3, r3
 800624a:	b21a      	sxth	r2, r3
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	829a      	strh	r2, [r3, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006256:	b29b      	uxth	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	b29b      	uxth	r3, r3
 800625c:	b21a      	sxth	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	831a      	strh	r2, [r3, #24]
    }

    /*Set attributes*/
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2202      	movs	r2, #2
 8006266:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <lv_obj_constructor+0xba>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <lv_obj_constructor+0xcc>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f043 0204 	orr.w	r2, r3, #4
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f043 0210 	orr.w	r2, r3, #16
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f043 0220 	orr.w	r2, r3, #32
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <lv_obj_constructor+0x11a>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	61da      	str	r2, [r3, #28]

    LV_TRACE_OBJ_CREATE("finished");
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd90      	pop	{r4, r7, pc}

080062ee <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    _lv_event_mark_deleted(obj);
 80062f8:	6838      	ldr	r0, [r7, #0]
 80062fa:	f7fe fdc3 	bl	8004e84 <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 80062fe:	2000      	movs	r0, #0
 8006300:	f006 fc1a 	bl	800cb38 <lv_obj_enable_style_refresh>
    lv_obj_remove_style_all(obj);
 8006304:	6838      	ldr	r0, [r7, #0]
 8006306:	f7ff fc5b 	bl	8005bc0 <lv_obj_remove_style_all>
    lv_obj_enable_style_refresh(true);
 800630a:	2001      	movs	r0, #1
 800630c:	f006 fc14 	bl	800cb38 <lv_obj_enable_style_refresh>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 8006310:	2100      	movs	r1, #0
 8006312:	6838      	ldr	r0, [r7, #0]
 8006314:	f019 ffd0 	bl	80202b8 <lv_anim_del>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 8006318:	6838      	ldr	r0, [r7, #0]
 800631a:	f7ff ff0d 	bl	8006138 <lv_obj_get_group>
 800631e:	60f8      	str	r0, [r7, #12]
    if(group) lv_group_remove_obj(obj);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <lv_obj_destructor+0x3e>
 8006326:	6838      	ldr	r0, [r7, #0]
 8006328:	f7ff f85a 	bl	80053e0 <lv_group_remove_obj>

    if(obj->spec_attr) {
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d025      	beq.n	8006380 <lv_obj_destructor+0x92>
        if(obj->spec_attr->children) {
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <lv_obj_destructor+0x64>
            lv_mem_free(obj->spec_attr->children);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f01b fe85 	bl	8022054 <lv_mem_free>
            obj->spec_attr->children = NULL;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d009      	beq.n	8006370 <lv_obj_destructor+0x82>
            lv_mem_free(obj->spec_attr->event_dsc);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	4618      	mov	r0, r3
 8006364:	f01b fe76 	bl	8022054 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4618      	mov	r0, r3
 8006376:	f01b fe6d 	bl	8022054 <lv_mem_free>
        obj->spec_attr = NULL;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2200      	movs	r2, #0
 800637e:	609a      	str	r2, [r3, #8]
    }
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <lv_obj_draw>:

static void lv_obj_draw(lv_event_t * e)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b0b4      	sub	sp, #208	; 0xd0
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
    lv_event_code_t code = lv_event_get_code(e);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fe fd5b 	bl	8004e4c <lv_event_get_code>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    lv_obj_t * obj = lv_event_get_target(e);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7fe fd3d 	bl	8004e1c <lv_event_get_target>
 80063a2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if(code == LV_EVENT_COVER_CHECK) {
 80063a6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80063aa:	2b12      	cmp	r3, #18
 80063ac:	f040 8089 	bne.w	80064c2 <lv_obj_draw+0x13a>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fe fd5a 	bl	8004e6a <lv_event_get_param>
 80063b6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if(info->res == LV_COVER_RES_MASKED) return;
 80063ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	f000 8227 	beq.w	8006814 <lv_obj_draw+0x48c>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80063c6:	2100      	movs	r1, #0
 80063c8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80063cc:	f7ff fd4d 	bl	8005e6a <lv_obj_get_style_clip_corner>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <lv_obj_draw+0x58>
            info->res = LV_COVER_RES_MASKED;
 80063d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063da:	2202      	movs	r2, #2
 80063dc:	701a      	strb	r2, [r3, #0]
            return;
 80063de:	e21a      	b.n	8006816 <lv_obj_draw+0x48e>
        }

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_PART_MAIN);
 80063e0:	2100      	movs	r1, #0
 80063e2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80063e6:	f7ff fd2e 	bl	8005e46 <lv_obj_get_style_radius>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 80063f0:	2100      	movs	r1, #0
 80063f2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80063f6:	f7ff fc29 	bl	8005c4c <lv_obj_get_style_transform_width>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8006400:	2100      	movs	r1, #0
 8006402:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006406:	f7ff fc33 	bl	8005c70 <lv_obj_get_style_transform_height>
 800640a:	4603      	mov	r3, r0
 800640c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8006410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006414:	f103 0214 	add.w	r2, r3, #20
 8006418:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff faec 	bl	80059fc <lv_area_copy>
        coords.x1 -= w;
 8006424:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8006428:	b29a      	uxth	r2, r3
 800642a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	b29b      	uxth	r3, r3
 8006432:	b21b      	sxth	r3, r3
 8006434:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.x2 += w;
 8006438:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800643c:	b29a      	uxth	r2, r3
 800643e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8006442:	4413      	add	r3, r2
 8006444:	b29b      	uxth	r3, r3
 8006446:	b21b      	sxth	r3, r3
 8006448:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        coords.y1 -= h;
 800644c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8006450:	b29a      	uxth	r2, r3
 8006452:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	b29b      	uxth	r3, r3
 800645a:	b21b      	sxth	r3, r3
 800645c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        coords.y2 += h;
 8006460:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800646a:	4413      	add	r3, r2
 800646c:	b29b      	uxth	r3, r3
 800646e:	b21b      	sxth	r3, r3
 8006470:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8006474:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 800647e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006482:	4618      	mov	r0, r3
 8006484:	f01a fc7a 	bl	8020d7c <_lv_area_is_in>
 8006488:	4603      	mov	r3, r0
 800648a:	f083 0301 	eor.w	r3, r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <lv_obj_draw+0x116>
            info->res = LV_COVER_RES_NOT_COVER;
 8006494:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
            return;
 800649c:	e1bb      	b.n	8006816 <lv_obj_draw+0x48e>
        }

        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 800649e:	2100      	movs	r1, #0
 80064a0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80064a4:	f7ff fc2b 	bl	8005cfe <lv_obj_get_style_bg_opa>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2bfc      	cmp	r3, #252	; 0xfc
 80064ac:	d804      	bhi.n	80064b8 <lv_obj_draw+0x130>
            info->res = LV_COVER_RES_NOT_COVER;
 80064ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064b2:	2201      	movs	r2, #1
 80064b4:	701a      	strb	r2, [r3, #0]
            return;
 80064b6:	e1ae      	b.n	8006816 <lv_obj_draw+0x48e>
        }

        info->res = LV_COVER_RES_COVER;
 80064b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	e1a9      	b.n	8006816 <lv_obj_draw+0x48e>

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 80064c2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80064c6:	2b15      	cmp	r3, #21
 80064c8:	f040 80e7 	bne.w	800669a <lv_obj_draw+0x312>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7fe fd4d 	bl	8004f6c <lv_event_get_draw_ctx>
 80064d2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 80064d6:	f107 030c 	add.w	r3, r7, #12
 80064da:	4618      	mov	r0, r3
 80064dc:	f00d febc 	bl	8014258 <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80064e0:	2100      	movs	r1, #0
 80064e2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80064e6:	f7ff fc51 	bl	8005d8c <lv_obj_get_style_border_post>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <lv_obj_draw+0x174>
            draw_dsc.border_post = 1;
 80064f0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }

        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80064fc:	f107 030c 	add.w	r3, r7, #12
 8006500:	461a      	mov	r2, r3
 8006502:	2100      	movs	r1, #0
 8006504:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006508:	f001 fb9c 	bl	8007c44 <lv_obj_init_draw_rect_dsc>
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 800650c:	2100      	movs	r1, #0
 800650e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006512:	f7ff fb9b 	bl	8005c4c <lv_obj_get_style_transform_width>
 8006516:	4603      	mov	r3, r0
 8006518:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 800651c:	2100      	movs	r1, #0
 800651e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006522:	f7ff fba5 	bl	8005c70 <lv_obj_get_style_transform_height>
 8006526:	4603      	mov	r3, r0
 8006528:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 800652c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006530:	f103 0214 	add.w	r2, r3, #20
 8006534:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fa5e 	bl	80059fc <lv_area_copy>
        coords.x1 -= w;
 8006540:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8006544:	b29a      	uxth	r2, r3
 8006546:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	b29b      	uxth	r3, r3
 800654e:	b21b      	sxth	r3, r3
 8006550:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.x2 += w;
 8006554:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8006558:	b29a      	uxth	r2, r3
 800655a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800655e:	4413      	add	r3, r2
 8006560:	b29b      	uxth	r3, r3
 8006562:	b21b      	sxth	r3, r3
 8006564:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.y1 -= h;
 8006568:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800656c:	b29a      	uxth	r2, r3
 800656e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	b29b      	uxth	r3, r3
 8006576:	b21b      	sxth	r3, r3
 8006578:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
        coords.y2 += h;
 800657c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8006580:	b29a      	uxth	r2, r3
 8006582:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006586:	4413      	add	r3, r2
 8006588:	b29b      	uxth	r3, r3
 800658a:	b21b      	sxth	r3, r3
 800658c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

        lv_obj_draw_part_dsc_t part_dsc;
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8006590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006594:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006598:	4618      	mov	r0, r3
 800659a:	f001 fe2f 	bl	80081fc <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 800659e:	4b9f      	ldr	r3, [pc, #636]	; (800681c <lv_obj_draw+0x494>)
 80065a0:	643b      	str	r3, [r7, #64]	; 0x40
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
        part_dsc.rect_dsc = &draw_dsc;
 80065a6:	f107 030c 	add.w	r3, r7, #12
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
        part_dsc.draw_area = &coords;
 80065ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80065b0:	64bb      	str	r3, [r7, #72]	; 0x48
        part_dsc.part = LV_PART_MAIN;
 80065b2:	2300      	movs	r3, #0
 80065b4:	673b      	str	r3, [r7, #112]	; 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80065b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065ba:	461a      	mov	r2, r3
 80065bc:	211a      	movs	r1, #26
 80065be:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80065c2:	f7fe fbab 	bl	8004d1c <lv_event_send>

#if LV_DRAW_COMPLEX
        /*With clip corner enabled draw the bg img separately to make it clipped*/
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 80065c6:	2100      	movs	r1, #0
 80065c8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80065cc:	f7ff fc4d 	bl	8005e6a <lv_obj_get_style_clip_corner>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <lv_obj_draw+0x25a>
 80065d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <lv_obj_draw+0x25a>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <lv_obj_draw+0x25c>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80065e8:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
        const void * bg_img_src = draw_dsc.bg_img_src;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if(clip_corner) {
 80065fa:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <lv_obj_draw+0x27e>
            draw_dsc.bg_img_src = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
        }
#endif

        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8006606:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800660a:	f107 030c 	add.w	r3, r7, #12
 800660e:	4619      	mov	r1, r3
 8006610:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006614:	f00d fe64 	bl	80142e0 <lv_draw_rect>


#if LV_DRAW_COMPLEX
        if(clip_corner) {
 8006618:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d033      	beq.n	8006688 <lv_obj_draw+0x300>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8006620:	2018      	movs	r0, #24
 8006622:	f01b fd71 	bl	8022108 <lv_mem_buf_get>
 8006626:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 800662a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800662e:	f103 0114 	add.w	r1, r3, #20
 8006632:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006636:	2300      	movs	r3, #0
 8006638:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800663c:	f00b fe10 	bl	8012260 <lv_draw_mask_radius_init>
            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 8006640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006644:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006648:	4619      	mov	r1, r3
 800664a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800664e:	f00b fa3b 	bl	8011ac8 <lv_draw_mask_add>

            if(bg_img_src) {
 8006652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <lv_obj_draw+0x300>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 800665e:	2300      	movs	r3, #0
 8006660:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8006664:	2300      	movs	r3, #0
 8006666:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 800666a:	2300      	movs	r3, #0
 800666c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                draw_dsc.bg_img_src = bg_img_src;
 8006670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006674:	61bb      	str	r3, [r7, #24]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8006676:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800667a:	f107 030c 	add.w	r3, r7, #12
 800667e:	4619      	mov	r1, r3
 8006680:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006684:	f00d fe2c 	bl	80142e0 <lv_draw_rect>
            }

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800668c:	461a      	mov	r2, r3
 800668e:	211b      	movs	r1, #27
 8006690:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006694:	f7fe fb42 	bl	8004d1c <lv_event_send>
 8006698:	e0bd      	b.n	8006816 <lv_obj_draw+0x48e>
    }
    else if(code == LV_EVENT_DRAW_POST) {
 800669a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800669e:	2b18      	cmp	r3, #24
 80066a0:	f040 80b9 	bne.w	8006816 <lv_obj_draw+0x48e>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fe fc61 	bl	8004f6c <lv_event_get_draw_ctx>
 80066aa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        draw_scrollbar(obj, draw_ctx);
 80066ae:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80066b2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80066b6:	f000 f8b3 	bl	8006820 <draw_scrollbar>

#if LV_DRAW_COMPLEX
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80066ba:	2100      	movs	r1, #0
 80066bc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80066c0:	f7ff fbd3 	bl	8005e6a <lv_obj_get_style_clip_corner>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <lv_obj_draw+0x36c>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 80066ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066ce:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80066d2:	4618      	mov	r0, r3
 80066d4:	f00b fa96 	bl	8011c04 <lv_draw_mask_remove_custom>
 80066d8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
            if(param) {
 80066dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <lv_obj_draw+0x36c>
                lv_draw_mask_free_param(param);
 80066e4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80066e8:	f00b fab4 	bl	8011c54 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 80066ec:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80066f0:	f01b fdb6 	bl	8022260 <lv_mem_buf_release>
            }
        }
#endif

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80066f4:	2100      	movs	r1, #0
 80066f6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80066fa:	f7ff fb47 	bl	8005d8c <lv_obj_get_style_border_post>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8088 	beq.w	8006816 <lv_obj_draw+0x48e>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 8006706:	f107 030c 	add.w	r3, r7, #12
 800670a:	4618      	mov	r0, r3
 800670c:	f00d fda4 	bl	8014258 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8006710:	2300      	movs	r3, #0
 8006712:	73fb      	strb	r3, [r7, #15]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 800671a:	2300      	movs	r3, #0
 800671c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8006720:	2300      	movs	r3, #0
 8006722:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8006726:	f107 030c 	add.w	r3, r7, #12
 800672a:	461a      	mov	r2, r3
 800672c:	2100      	movs	r1, #0
 800672e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8006732:	f001 fa87 	bl	8007c44 <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 8006736:	2100      	movs	r1, #0
 8006738:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800673c:	f7ff fa86 	bl	8005c4c <lv_obj_get_style_transform_width>
 8006740:	4603      	mov	r3, r0
 8006742:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8006746:	2100      	movs	r1, #0
 8006748:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800674c:	f7ff fa90 	bl	8005c70 <lv_obj_get_style_transform_height>
 8006750:	4603      	mov	r3, r0
 8006752:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 8006756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800675a:	f103 0214 	add.w	r2, r3, #20
 800675e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff f949 	bl	80059fc <lv_area_copy>
            coords.x1 -= w;
 800676a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800676e:	b29a      	uxth	r2, r3
 8006770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	b29b      	uxth	r3, r3
 8006778:	b21b      	sxth	r3, r3
 800677a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
            coords.x2 += w;
 800677e:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006788:	4413      	add	r3, r2
 800678a:	b29b      	uxth	r3, r3
 800678c:	b21b      	sxth	r3, r3
 800678e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
            coords.y1 -= h;
 8006792:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	b29b      	uxth	r3, r3
 80067a0:	b21b      	sxth	r3, r3
 80067a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            coords.y2 += h;
 80067a6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80067b0:	4413      	add	r3, r2
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	b21b      	sxth	r3, r3
 80067b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            lv_obj_draw_part_dsc_t part_dsc;
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80067ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067be:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 fd1a 	bl	80081fc <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 80067c8:	4b14      	ldr	r3, [pc, #80]	; (800681c <lv_obj_draw+0x494>)
 80067ca:	643b      	str	r3, [r7, #64]	; 0x40
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 80067cc:	2301      	movs	r3, #1
 80067ce:	647b      	str	r3, [r7, #68]	; 0x44
            part_dsc.rect_dsc = &draw_dsc;
 80067d0:	f107 030c 	add.w	r3, r7, #12
 80067d4:	64fb      	str	r3, [r7, #76]	; 0x4c
            part_dsc.draw_area = &coords;
 80067d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80067da:	64bb      	str	r3, [r7, #72]	; 0x48
            part_dsc.part = LV_PART_MAIN;
 80067dc:	2300      	movs	r3, #0
 80067de:	673b      	str	r3, [r7, #112]	; 0x70
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80067e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067e4:	461a      	mov	r2, r3
 80067e6:	211a      	movs	r1, #26
 80067e8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80067ec:	f7fe fa96 	bl	8004d1c <lv_event_send>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80067f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80067f4:	f107 030c 	add.w	r3, r7, #12
 80067f8:	4619      	mov	r1, r3
 80067fa:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80067fe:	f00d fd6f 	bl	80142e0 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006806:	461a      	mov	r2, r3
 8006808:	211b      	movs	r1, #27
 800680a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800680e:	f7fe fa85 	bl	8004d1c <lv_event_send>
 8006812:	e000      	b.n	8006816 <lv_obj_draw+0x48e>
        if(info->res == LV_COVER_RES_MASKED) return;
 8006814:	bf00      	nop
        }
    }
}
 8006816:	37d0      	adds	r7, #208	; 0xd0
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	08026a48 	.word	0x08026a48

08006820 <draw_scrollbar>:

static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b0a6      	sub	sp, #152	; 0x98
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800682a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800682e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f004 fc1f 	bl	800b078 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800683a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800683e:	4618      	mov	r0, r3
 8006840:	f01a f82b 	bl	802089a <lv_area_get_size>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d107      	bne.n	800685a <draw_scrollbar+0x3a>
 800684a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800684e:	4618      	mov	r0, r3
 8006850:	f01a f823 	bl	802089a <lv_area_get_size>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d062      	beq.n	8006920 <draw_scrollbar+0x100>

    lv_draw_rect_dsc_t draw_dsc;
    lv_res_t sb_res = scrollbar_init_draw_dsc(obj, &draw_dsc);
 800685a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f865 	bl	8006930 <scrollbar_init_draw_dsc>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(sb_res != LV_RES_OK) return;
 800686c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006870:	2b01      	cmp	r3, #1
 8006872:	d157      	bne.n	8006924 <draw_scrollbar+0x104>

    lv_obj_draw_part_dsc_t part_dsc;
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8006874:	f107 030c 	add.w	r3, r7, #12
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f001 fcbe 	bl	80081fc <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8006880:	4b2a      	ldr	r3, [pc, #168]	; (800692c <draw_scrollbar+0x10c>)
 8006882:	613b      	str	r3, [r7, #16]
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8006884:	2302      	movs	r3, #2
 8006886:	617b      	str	r3, [r7, #20]
    part_dsc.rect_dsc = &draw_dsc;
 8006888:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800688c:	61fb      	str	r3, [r7, #28]
    part_dsc.part = LV_PART_SCROLLBAR;
 800688e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006892:	643b      	str	r3, [r7, #64]	; 0x40

    if(lv_area_get_size(&hor_area) > 0) {
 8006894:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006898:	4618      	mov	r0, r3
 800689a:	f019 fffe 	bl	802089a <lv_area_get_size>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d018      	beq.n	80068d6 <draw_scrollbar+0xb6>
        part_dsc.draw_area = &hor_area;
 80068a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80068a8:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80068aa:	f107 030c 	add.w	r3, r7, #12
 80068ae:	461a      	mov	r2, r3
 80068b0:	211a      	movs	r1, #26
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fe fa32 	bl	8004d1c <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 80068b8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80068bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80068c0:	4619      	mov	r1, r3
 80068c2:	6838      	ldr	r0, [r7, #0]
 80068c4:	f00d fd0c 	bl	80142e0 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80068c8:	f107 030c 	add.w	r3, r7, #12
 80068cc:	461a      	mov	r2, r3
 80068ce:	211b      	movs	r1, #27
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fe fa23 	bl	8004d1c <lv_event_send>
    }
    if(lv_area_get_size(&ver_area) > 0) {
 80068d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80068da:	4618      	mov	r0, r3
 80068dc:	f019 ffdd 	bl	802089a <lv_area_get_size>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01f      	beq.n	8006926 <draw_scrollbar+0x106>
        part_dsc.draw_area = &ver_area;
 80068e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80068ea:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80068ec:	f107 030c 	add.w	r3, r7, #12
 80068f0:	461a      	mov	r2, r3
 80068f2:	211a      	movs	r1, #26
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fe fa11 	bl	8004d1c <lv_event_send>
        part_dsc.draw_area = &ver_area;
 80068fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80068fe:	61bb      	str	r3, [r7, #24]
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8006900:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006908:	4619      	mov	r1, r3
 800690a:	6838      	ldr	r0, [r7, #0]
 800690c:	f00d fce8 	bl	80142e0 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	461a      	mov	r2, r3
 8006916:	211b      	movs	r1, #27
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe f9ff 	bl	8004d1c <lv_event_send>
 800691e:	e002      	b.n	8006926 <draw_scrollbar+0x106>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8006920:	bf00      	nop
 8006922:	e000      	b.n	8006926 <draw_scrollbar+0x106>
    if(sb_res != LV_RES_OK) return;
 8006924:	bf00      	nop
    }
}
 8006926:	3798      	adds	r7, #152	; 0x98
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	08026a48 	.word	0x08026a48

08006930 <scrollbar_init_draw_dsc>:
 * @param obj pointer to an object
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
    lv_draw_rect_dsc_init(dsc);
 800693a:	6838      	ldr	r0, [r7, #0]
 800693c:	f00d fc8c 	bl	8014258 <lv_draw_rect_dsc_init>
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8006940:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff f9da 	bl	8005cfe <lv_obj_get_style_bg_opa>
 800694a:	4603      	mov	r3, r0
 800694c:	461a      	mov	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	70da      	strb	r2, [r3, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	78db      	ldrb	r3, [r3, #3]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d906      	bls.n	8006968 <scrollbar_init_draw_dsc+0x38>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 800695a:	683c      	ldr	r4, [r7, #0]
 800695c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff f9bb 	bl	8005cdc <lv_obj_get_style_bg_color>
 8006966:	7120      	strb	r0, [r4, #4]
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8006968:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff f9e9 	bl	8005d44 <lv_obj_get_style_border_opa>
 8006972:	4603      	mov	r3, r0
 8006974:	461a      	mov	r2, r3
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	771a      	strb	r2, [r3, #28]
    if(dsc->border_opa > LV_OPA_MIN) {
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	7f1b      	ldrb	r3, [r3, #28]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d918      	bls.n	80069b4 <scrollbar_init_draw_dsc+0x84>
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8006982:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff f9ee 	bl	8005d68 <lv_obj_get_style_border_width>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	835a      	strh	r2, [r3, #26]
        if(dsc->border_width > 0) {
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800699a:	2b00      	cmp	r3, #0
 800699c:	dd07      	ble.n	80069ae <scrollbar_init_draw_dsc+0x7e>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 800699e:	683c      	ldr	r4, [r7, #0]
 80069a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff f9bc 	bl	8005d22 <lv_obj_get_style_border_color>
 80069aa:	7620      	strb	r0, [r4, #24]
 80069ac:	e002      	b.n	80069b4 <scrollbar_init_draw_dsc+0x84>
        }
        else {
            dsc->border_opa = LV_OPA_TRANSP;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 80069b4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff fa32 	bl	8005e22 <lv_obj_get_style_shadow_opa>
 80069be:	4603      	mov	r3, r0
 80069c0:	461a      	mov	r2, r3
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d923      	bls.n	8006a1a <scrollbar_init_draw_dsc+0xea>
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 80069d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff f9ee 	bl	8005db8 <lv_obj_get_style_shadow_width>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	84da      	strh	r2, [r3, #38]	; 0x26
        if(dsc->shadow_width > 0) {
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	dd11      	ble.n	8006a12 <scrollbar_init_draw_dsc+0xe2>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 80069ee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff f9f2 	bl	8005ddc <lv_obj_get_style_shadow_spread>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	859a      	strh	r2, [r3, #44]	; 0x2c
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8006a00:	683c      	ldr	r4, [r7, #0]
 8006a02:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff f9fa 	bl	8005e00 <lv_obj_get_style_shadow_color>
 8006a0c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 8006a10:	e003      	b.n	8006a1a <scrollbar_init_draw_dsc+0xea>
        }
        else {
            dsc->shadow_opa = LV_OPA_TRANSP;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
 8006a1a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fa39 	bl	8005e96 <lv_obj_get_style_opa>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
    if(opa < LV_OPA_MAX) {
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2bfc      	cmp	r3, #252	; 0xfc
 8006a2c:	d81e      	bhi.n	8006a6c <scrollbar_init_draw_dsc+0x13c>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	78db      	ldrb	r3, [r3, #3]
 8006a32:	461a      	mov	r2, r3
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	121b      	asrs	r3, r3, #8
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	70da      	strb	r2, [r3, #3]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	78db      	ldrb	r3, [r3, #3]
 8006a46:	461a      	mov	r2, r3
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	121b      	asrs	r3, r3, #8
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	771a      	strb	r2, [r3, #28]
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	fb02 f303 	mul.w	r3, r2, r3
 8006a62:	121b      	asrs	r3, r3, #8
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	78db      	ldrb	r3, [r3, #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d108      	bne.n	8006a86 <scrollbar_init_draw_dsc+0x156>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	7f1b      	ldrb	r3, [r3, #28]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <scrollbar_init_draw_dsc+0x156>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <scrollbar_init_draw_dsc+0x16c>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8006a86:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff f9db 	bl	8005e46 <lv_obj_get_style_radius>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	801a      	strh	r2, [r3, #0]
        return LV_RES_OK;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <scrollbar_init_draw_dsc+0x16e>
    }
    else {
        return LV_RES_INV;
 8006a9c:	2300      	movs	r3, #0
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
    else return LV_RES_INV;
#endif
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd90      	pop	{r4, r7, pc}

08006aa6 <lv_obj_event>:

static void lv_obj_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8006aa6:	b590      	push	{r4, r7, lr}
 8006aa8:	b09b      	sub	sp, #108	; 0x6c
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 8006ab0:	6838      	ldr	r0, [r7, #0]
 8006ab2:	f7fe f9cb 	bl	8004e4c <lv_event_get_code>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_obj_t * obj = lv_event_get_current_target(e);
 8006abc:	6838      	ldr	r0, [r7, #0]
 8006abe:	f7fe f9b9 	bl	8004e34 <lv_event_get_current_target>
 8006ac2:	6538      	str	r0, [r7, #80]	; 0x50
    if(code == LV_EVENT_PRESSED) {
 8006ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d104      	bne.n	8006ad6 <lv_obj_event+0x30>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8006acc:	2120      	movs	r1, #32
 8006ace:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ad0:	f7ff fac6 	bl	8006060 <lv_obj_add_state>
 8006ad4:	e2a7      	b.n	8007026 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_RELEASED) {
 8006ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d131      	bne.n	8006b42 <lv_obj_event+0x9c>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8006ade:	2120      	movs	r1, #32
 8006ae0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ae2:	f7ff fad6 	bl	8006092 <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8006ae6:	6838      	ldr	r0, [r7, #0]
 8006ae8:	f7fe f9bf 	bl	8004e6a <lv_event_get_param>
 8006aec:	6238      	str	r0, [r7, #32]
        /*Go the checked state if enabled*/
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8006aee:	6a38      	ldr	r0, [r7, #32]
 8006af0:	f7fe ff5b 	bl	80059aa <lv_indev_get_scroll_obj>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 8295 	bne.w	8007026 <lv_obj_event+0x580>
 8006afc:	2108      	movs	r1, #8
 8006afe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b00:	f7ff fae5 	bl	80060ce <lv_obj_has_flag>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 828d 	beq.w	8007026 <lv_obj_event+0x580>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8006b0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b0e:	f7ff fb07 	bl	8006120 <lv_obj_get_state>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <lv_obj_event+0x80>
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b20:	f7ff fa9e 	bl	8006060 <lv_obj_add_state>
 8006b24:	e003      	b.n	8006b2e <lv_obj_event+0x88>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8006b26:	2101      	movs	r1, #1
 8006b28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b2a:	f7ff fab2 	bl	8006092 <lv_obj_clear_state>

            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8006b2e:	2200      	movs	r2, #0
 8006b30:	211c      	movs	r1, #28
 8006b32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b34:	f7fe f8f2 	bl	8004d1c <lv_event_send>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) return;
 8006b3c:	7ffb      	ldrb	r3, [r7, #31]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	e271      	b.n	8007026 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_PRESS_LOST) {
 8006b42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d104      	bne.n	8006b54 <lv_obj_event+0xae>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8006b4a:	2120      	movs	r1, #32
 8006b4c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b4e:	f7ff faa0 	bl	8006092 <lv_obj_clear_state>
 8006b52:	e268      	b.n	8007026 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8006b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b58:	2b2a      	cmp	r3, #42	; 0x2a
 8006b5a:	d119      	bne.n	8006b90 <lv_obj_event+0xea>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006b5c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b5e:	f007 fb5f 	bl	800e220 <lv_obj_get_child_cnt>
 8006b62:	62b8      	str	r0, [r7, #40]	; 0x28
        for(uint32_t i = 0; i < child_cnt; i++) {
 8006b64:	2300      	movs	r3, #0
 8006b66:	667b      	str	r3, [r7, #100]	; 0x64
 8006b68:	e00d      	b.n	8006b86 <lv_obj_event+0xe0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8006b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
            lv_obj_mark_layout_as_dirty(child);
 8006b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b7c:	f002 f856 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8006b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b82:	3301      	adds	r3, #1
 8006b84:	667b      	str	r3, [r7, #100]	; 0x64
 8006b86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d3ed      	bcc.n	8006b6a <lv_obj_event+0xc4>
 8006b8e:	e24a      	b.n	8007026 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_KEY) {
 8006b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b94:	2b0d      	cmp	r3, #13
 8006b96:	f040 8126 	bne.w	8006de6 <lv_obj_event+0x340>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8006b9a:	2108      	movs	r1, #8
 8006b9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b9e:	f7ff fa96 	bl	80060ce <lv_obj_has_flag>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d030      	beq.n	8006c0a <lv_obj_event+0x164>
            char c = *((char *)lv_event_get_param(e));
 8006ba8:	6838      	ldr	r0, [r7, #0]
 8006baa:	f7fe f95e 	bl	8004e6a <lv_event_get_param>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8006bb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bba:	2b13      	cmp	r3, #19
 8006bbc:	d003      	beq.n	8006bc6 <lv_obj_event+0x120>
 8006bbe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bc2:	2b11      	cmp	r3, #17
 8006bc4:	d104      	bne.n	8006bd0 <lv_obj_event+0x12a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bca:	f7ff fa49 	bl	8006060 <lv_obj_add_state>
 8006bce:	e00b      	b.n	8006be8 <lv_obj_event+0x142>
            }
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8006bd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bd4:	2b14      	cmp	r3, #20
 8006bd6:	d003      	beq.n	8006be0 <lv_obj_event+0x13a>
 8006bd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bdc:	2b12      	cmp	r3, #18
 8006bde:	d103      	bne.n	8006be8 <lv_obj_event+0x142>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8006be0:	2101      	movs	r1, #1
 8006be2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006be4:	f7ff fa55 	bl	8006092 <lv_obj_clear_state>
            }

            /*With Enter LV_EVENT_RELEASED will send VALUE_CHANGE event*/
            if(c != LV_KEY_ENTER) {
 8006be8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bec:	2b0a      	cmp	r3, #10
 8006bee:	f000 821a 	beq.w	8007026 <lv_obj_event+0x580>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	211c      	movs	r1, #28
 8006bf6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006bf8:	f7fe f890 	bl	8004d1c <lv_event_send>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if(res != LV_RES_OK) return;
 8006c02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	e20d      	b.n	8007026 <lv_obj_event+0x580>
            }
        }
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8006c0a:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8006c0e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c10:	f7ff fa5d 	bl	80060ce <lv_obj_has_flag>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8205 	beq.w	8007026 <lv_obj_event+0x580>
 8006c1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c1e:	f000 fc8d 	bl	800753c <lv_obj_is_editable>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f083 0301 	eor.w	r3, r3, #1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 81fb 	beq.w	8007026 <lv_obj_event+0x580>
            /*scroll by keypad or encoder*/
            lv_anim_enable_t anim_enable = LV_ANIM_OFF;
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8006c36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c38:	f003 fe14 	bl	800a864 <lv_obj_get_scroll_left>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	867b      	strh	r3, [r7, #50]	; 0x32
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8006c40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c42:	f003 feb3 	bl	800a9ac <lv_obj_get_scroll_right>
 8006c46:	4603      	mov	r3, r0
 8006c48:	863b      	strh	r3, [r7, #48]	; 0x30
            char c = *((char *)lv_event_get_param(e));
 8006c4a:	6838      	ldr	r0, [r7, #0]
 8006c4c:	f7fe f90d 	bl	8004e6a <lv_event_get_param>
 8006c50:	4603      	mov	r3, r0
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(c == LV_KEY_DOWN) {
 8006c58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c5c:	2b12      	cmp	r3, #18
 8006c5e:	d118      	bne.n	8006c92 <lv_obj_event+0x1ec>
                /*use scroll_to_x/y functions to enforce scroll limits*/
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006c60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c62:	f003 fd49 	bl	800a6f8 <lv_obj_get_scroll_y>
 8006c66:	4603      	mov	r3, r0
 8006c68:	b29c      	uxth	r4, r3
 8006c6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c6c:	f002 f86e 	bl	8008d4c <lv_obj_get_height>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da00      	bge.n	8006c78 <lv_obj_event+0x1d2>
 8006c76:	3303      	adds	r3, #3
 8006c78:	109b      	asrs	r3, r3, #2
 8006c7a:	b21b      	sxth	r3, r3
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4423      	add	r3, r4
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	b21b      	sxth	r3, r3
 8006c84:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c8c:	f004 f95c 	bl	800af48 <lv_obj_scroll_to_y>
 8006c90:	e1c9      	b.n	8007026 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_UP) {
 8006c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c96:	2b11      	cmp	r3, #17
 8006c98:	d118      	bne.n	8006ccc <lv_obj_event+0x226>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006c9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c9c:	f003 fd2c 	bl	800a6f8 <lv_obj_get_scroll_y>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	b29c      	uxth	r4, r3
 8006ca4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ca6:	f002 f851 	bl	8008d4c <lv_obj_get_height>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da00      	bge.n	8006cb2 <lv_obj_event+0x20c>
 8006cb0:	3303      	adds	r3, #3
 8006cb2:	109b      	asrs	r3, r3, #2
 8006cb4:	b21b      	sxth	r3, r3
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	1ae3      	subs	r3, r4, r3
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	b21b      	sxth	r3, r3
 8006cbe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cc6:	f004 f93f 	bl	800af48 <lv_obj_scroll_to_y>
 8006cca:	e1ac      	b.n	8007026 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_RIGHT) {
 8006ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cd0:	2b13      	cmp	r3, #19
 8006cd2:	d141      	bne.n	8006d58 <lv_obj_event+0x2b2>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006cd4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cd6:	f003 fcb5 	bl	800a644 <lv_obj_get_scroll_dir>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <lv_obj_event+0x24e>
 8006ce4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dc1c      	bgt.n	8006d26 <lv_obj_event+0x280>
 8006cec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dc18      	bgt.n	8006d26 <lv_obj_event+0x280>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006cf4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cf6:	f003 fcff 	bl	800a6f8 <lv_obj_get_scroll_y>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	b29c      	uxth	r4, r3
 8006cfe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d00:	f002 f824 	bl	8008d4c <lv_obj_get_height>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da00      	bge.n	8006d0c <lv_obj_event+0x266>
 8006d0a:	3303      	adds	r3, #3
 8006d0c:	109b      	asrs	r3, r3, #2
 8006d0e:	b21b      	sxth	r3, r3
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	4423      	add	r3, r4
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	b21b      	sxth	r3, r3
 8006d18:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d20:	f004 f912 	bl	800af48 <lv_obj_scroll_to_y>
 8006d24:	e17f      	b.n	8007026 <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8006d26:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d28:	f003 fcce 	bl	800a6c8 <lv_obj_get_scroll_x>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	b29c      	uxth	r4, r3
 8006d30:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d32:	f001 fffd 	bl	8008d30 <lv_obj_get_width>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	da00      	bge.n	8006d3e <lv_obj_event+0x298>
 8006d3c:	3303      	adds	r3, #3
 8006d3e:	109b      	asrs	r3, r3, #2
 8006d40:	b21b      	sxth	r3, r3
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4423      	add	r3, r4
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d52:	f004 f8d5 	bl	800af00 <lv_obj_scroll_to_x>
 8006d56:	e166      	b.n	8007026 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_LEFT) {
 8006d58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d5c:	2b14      	cmp	r3, #20
 8006d5e:	f040 8162 	bne.w	8007026 <lv_obj_event+0x580>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006d62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d64:	f003 fc6e 	bl	800a644 <lv_obj_get_scroll_dir>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d007      	beq.n	8006d82 <lv_obj_event+0x2dc>
 8006d72:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc1c      	bgt.n	8006db4 <lv_obj_event+0x30e>
 8006d7a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dc18      	bgt.n	8006db4 <lv_obj_event+0x30e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006d82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d84:	f003 fcb8 	bl	800a6f8 <lv_obj_get_scroll_y>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	b29c      	uxth	r4, r3
 8006d8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d8e:	f001 ffdd 	bl	8008d4c <lv_obj_get_height>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da00      	bge.n	8006d9a <lv_obj_event+0x2f4>
 8006d98:	3303      	adds	r3, #3
 8006d9a:	109b      	asrs	r3, r3, #2
 8006d9c:	b21b      	sxth	r3, r3
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	1ae3      	subs	r3, r4, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	b21b      	sxth	r3, r3
 8006da6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006daa:	4619      	mov	r1, r3
 8006dac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006dae:	f004 f8cb 	bl	800af48 <lv_obj_scroll_to_y>
 8006db2:	e138      	b.n	8007026 <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8006db4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006db6:	f003 fc87 	bl	800a6c8 <lv_obj_get_scroll_x>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	b29c      	uxth	r4, r3
 8006dbe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006dc0:	f001 ffb6 	bl	8008d30 <lv_obj_get_width>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da00      	bge.n	8006dcc <lv_obj_event+0x326>
 8006dca:	3303      	adds	r3, #3
 8006dcc:	109b      	asrs	r3, r3, #2
 8006dce:	b21b      	sxth	r3, r3
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	1ae3      	subs	r3, r4, r3
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	b21b      	sxth	r3, r3
 8006dd8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006de0:	f004 f88e 	bl	800af00 <lv_obj_scroll_to_x>
 8006de4:	e11f      	b.n	8007026 <lv_obj_event+0x580>
            }
        }
    }
    else if(code == LV_EVENT_FOCUSED) {
 8006de6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dea:	2b0e      	cmp	r3, #14
 8006dec:	d155      	bne.n	8006e9a <lv_obj_event+0x3f4>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8006dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006df2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006df4:	f7ff f96b 	bl	80060ce <lv_obj_has_flag>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <lv_obj_event+0x360>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8006dfe:	2101      	movs	r1, #1
 8006e00:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e02:	f004 f8c5 	bl	800af90 <lv_obj_scroll_to_view_recursive>
        }

        bool editing = false;
 8006e06:	2300      	movs	r3, #0
 8006e08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8006e0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e0e:	f7ff f993 	bl	8006138 <lv_obj_get_group>
 8006e12:	4603      	mov	r3, r0
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fba3 	bl	8005560 <lv_group_get_editing>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_state_t state = LV_STATE_FOCUSED;
 8006e20:	2302      	movs	r3, #2
 8006e22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        /* Use the indev for then indev handler.
         * But if the obj was focused manually it returns NULL so try to
         * use the indev from the event*/
        lv_indev_t * indev = lv_indev_get_act();
 8006e26:	f7fe fcf9 	bl	800581c <lv_indev_get_act>
 8006e2a:	65f8      	str	r0, [r7, #92]	; 0x5c
        if(indev == NULL) indev = lv_event_get_indev(e);
 8006e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <lv_obj_event+0x394>
 8006e32:	6838      	ldr	r0, [r7, #0]
 8006e34:	f7fe f84c 	bl	8004ed0 <lv_event_get_indev>
 8006e38:	65f8      	str	r0, [r7, #92]	; 0x5c

        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8006e3a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006e3c:	f7fe fcfa 	bl	8005834 <lv_indev_get_type>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8006e46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d003      	beq.n	8006e56 <lv_obj_event+0x3b0>
 8006e4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d105      	bne.n	8006e62 <lv_obj_event+0x3bc>
 8006e56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e5a:	f043 0304 	orr.w	r3, r3, #4
 8006e5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        if(editing) {
 8006e62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00c      	beq.n	8006e84 <lv_obj_event+0x3de>
            state |= LV_STATE_EDITED;
 8006e6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e6e:	f043 0308 	orr.w	r3, r3, #8
 8006e72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_obj_add_state(obj, state);
 8006e76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e7e:	f7ff f8ef 	bl	8006060 <lv_obj_add_state>
 8006e82:	e0d0      	b.n	8007026 <lv_obj_event+0x580>
        }
        else {
            lv_obj_add_state(obj, state);
 8006e84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e8c:	f7ff f8e8 	bl	8006060 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8006e90:	2108      	movs	r1, #8
 8006e92:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e94:	f7ff f8fd 	bl	8006092 <lv_obj_clear_state>
 8006e98:	e0c5      	b.n	8007026 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8006e9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e9e:	2b09      	cmp	r3, #9
 8006ea0:	d104      	bne.n	8006eac <lv_obj_event+0x406>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8006ea2:	2140      	movs	r1, #64	; 0x40
 8006ea4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ea6:	f7ff f8db 	bl	8006060 <lv_obj_add_state>
 8006eaa:	e0bc      	b.n	8007026 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SCROLL_END) {
 8006eac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eb0:	2b0a      	cmp	r3, #10
 8006eb2:	d11f      	bne.n	8006ef4 <lv_obj_event+0x44e>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8006eb4:	2140      	movs	r1, #64	; 0x40
 8006eb6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006eb8:	f7ff f8eb 	bl	8006092 <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8006ebc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ebe:	f003 fbab 	bl	800a618 <lv_obj_get_scrollbar_mode>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	f040 80ae 	bne.w	8007026 <lv_obj_event+0x580>
            lv_area_t hor_area, ver_area;
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006eca:	f107 020c 	add.w	r2, r7, #12
 8006ece:	f107 0314 	add.w	r3, r7, #20
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ed6:	f004 f8cf 	bl	800b078 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8006eda:	f107 0314 	add.w	r3, r7, #20
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ee2:	f002 fcbb 	bl	800985c <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8006ee6:	f107 030c 	add.w	r3, r7, #12
 8006eea:	4619      	mov	r1, r3
 8006eec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006eee:	f002 fcb5 	bl	800985c <lv_obj_invalidate_area>
 8006ef2:	e098      	b.n	8007026 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_DEFOCUSED) {
 8006ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ef8:	2b0f      	cmp	r3, #15
 8006efa:	d104      	bne.n	8006f06 <lv_obj_event+0x460>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8006efc:	210e      	movs	r1, #14
 8006efe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f00:	f7ff f8c7 	bl	8006092 <lv_obj_clear_state>
 8006f04:	e08f      	b.n	8007026 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8006f06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f0a:	2b29      	cmp	r3, #41	; 0x29
 8006f0c:	d132      	bne.n	8006f74 <lv_obj_event+0x4ce>
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f12:	f7fe fe89 	bl	8005c28 <lv_obj_get_style_align>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f20:	f7fe ffcb 	bl	8005eba <lv_obj_get_style_layout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        if(layout || align) {
 8006f2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <lv_obj_event+0x494>
 8006f32:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <lv_obj_event+0x49a>
            lv_obj_mark_layout_as_dirty(obj);
 8006f3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f3c:	f001 fe76 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
        }

        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006f40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f42:	f007 f96d 	bl	800e220 <lv_obj_get_child_cnt>
 8006f46:	63f8      	str	r0, [r7, #60]	; 0x3c
        for(i = 0; i < child_cnt; i++) {
 8006f48:	2300      	movs	r3, #0
 8006f4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f4c:	e00d      	b.n	8006f6a <lv_obj_event+0x4c4>
            lv_obj_t * child = obj->spec_attr->children[i];
 8006f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	63bb      	str	r3, [r7, #56]	; 0x38
            lv_obj_mark_layout_as_dirty(child);
 8006f5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f60:	f001 fe64 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8006f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f66:	3301      	adds	r3, #1
 8006f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d3ed      	bcc.n	8006f4e <lv_obj_event+0x4a8>
 8006f72:	e058      	b.n	8007026 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8006f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f78:	2b22      	cmp	r3, #34	; 0x22
 8006f7a:	d133      	bne.n	8006fe4 <lv_obj_event+0x53e>
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f80:	f7fe fe2e 	bl	8005be0 <lv_obj_get_style_width>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f8e:	f7fe fe39 	bl	8005c04 <lv_obj_get_style_height>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f9c:	f7fe fe44 	bl	8005c28 <lv_obj_get_style_align>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006faa:	f7fe ff86 	bl	8005eba <lv_obj_get_style_layout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8006fb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10f      	bne.n	8006fdc <lv_obj_event+0x536>
 8006fbc:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10b      	bne.n	8006fdc <lv_obj_event+0x536>
 8006fc4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006fc8:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d005      	beq.n	8006fdc <lv_obj_event+0x536>
 8006fd0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006fd4:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d124      	bne.n	8007026 <lv_obj_event+0x580>
            lv_obj_mark_layout_as_dirty(obj);
 8006fdc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006fde:	f001 fe25 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
 8006fe2:	e020      	b.n	8007026 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8006fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fe8:	2b13      	cmp	r3, #19
 8006fea:	d10d      	bne.n	8007008 <lv_obj_event+0x562>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8006fec:	2100      	movs	r1, #0
 8006fee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006ff0:	f001 f866 	bl	80080c0 <lv_obj_calculate_ext_draw_size>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_event_set_ext_draw_size(e, d);
 8006ffa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8006ffe:	4619      	mov	r1, r3
 8007000:	6838      	ldr	r0, [r7, #0]
 8007002:	f7fd ffd9 	bl	8004fb8 <lv_event_set_ext_draw_size>
 8007006:	e00e      	b.n	8007026 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8007008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800700c:	2b15      	cmp	r3, #21
 800700e:	d007      	beq.n	8007020 <lv_obj_event+0x57a>
 8007010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007014:	2b18      	cmp	r3, #24
 8007016:	d003      	beq.n	8007020 <lv_obj_event+0x57a>
 8007018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800701c:	2b12      	cmp	r3, #18
 800701e:	d102      	bne.n	8007026 <lv_obj_event+0x580>
        lv_obj_draw(e);
 8007020:	6838      	ldr	r0, [r7, #0]
 8007022:	f7ff f9b1 	bl	8006388 <lv_obj_draw>
    }
}
 8007026:	376c      	adds	r7, #108	; 0x6c
 8007028:	46bd      	mov	sp, r7
 800702a:	bd90      	pop	{r4, r7, pc}

0800702c <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b094      	sub	sp, #80	; 0x50
 8007030:	af02      	add	r7, sp, #8
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	807b      	strh	r3, [r7, #2]
    if(obj->state == new_state) return;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	8c1b      	ldrh	r3, [r3, #32]
 800703c:	887a      	ldrh	r2, [r7, #2]
 800703e:	429a      	cmp	r2, r3
 8007040:	f000 815a 	beq.w	80072f8 <lv_obj_set_state+0x2cc>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8c1b      	ldrh	r3, [r3, #32]
 8007048:	86fb      	strh	r3, [r7, #54]	; 0x36
    obj->state = new_state;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	887a      	ldrh	r2, [r7, #2]
 800704e:	841a      	strh	r2, [r3, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8007050:	887a      	ldrh	r2, [r7, #2]
 8007052:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f005 fff6 	bl	800d048 <_lv_obj_style_state_compare>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8007062:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8148 	beq.w	80072fc <lv_obj_set_state+0x2d0>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 800706c:	f44f 7020 	mov.w	r0, #640	; 0x280
 8007070:	f01b f84a 	bl	8022108 <lv_mem_buf_get>
 8007074:	6338      	str	r0, [r7, #48]	; 0x30
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8007076:	f44f 7120 	mov.w	r1, #640	; 0x280
 800707a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800707c:	f01b fbee 	bl	802285c <lv_memset_00>
    uint32_t tsi = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8007084:	2300      	movs	r3, #0
 8007086:	643b      	str	r3, [r7, #64]	; 0x40
 8007088:	e0e0      	b.n	800724c <lv_obj_set_state+0x220>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4413      	add	r3, r2
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	4413      	add	r3, r2
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80070a6:	4618      	mov	r0, r3
 80070a8:	f006 f9c4 	bl	800d434 <lv_obj_style_get_selector_state>
 80070ac:	4603      	mov	r3, r0
 80070ae:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4413      	add	r3, r2
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f006 f9c3 	bl	800d44c <lv_obj_style_get_selector_part>
 80070c6:	6278      	str	r0, [r7, #36]	; 0x24
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80070c8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80070ca:	887b      	ldrh	r3, [r7, #2]
 80070cc:	43db      	mvns	r3, r3
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 80b3 	bne.w	800723c <lv_obj_set_state+0x210>
        if(obj_style->is_trans) continue;
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	79db      	ldrb	r3, [r3, #7]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f040 80ad 	bne.w	8007240 <lv_obj_set_state+0x214>

        lv_style_value_t v;
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f107 020c 	add.w	r2, r7, #12
 80070ee:	2166      	movs	r1, #102	; 0x66
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fca2 	bl	8005a3a <lv_style_get_prop_inlined>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	f040 80a3 	bne.w	8007244 <lv_obj_set_state+0x218>
        const lv_style_transition_dsc_t * tr = v.ptr;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	623b      	str	r3, [r7, #32]

        /*Add the props to the set if not added yet or added but with smaller weight*/
        uint32_t j;
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8007102:	2300      	movs	r3, #0
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007106:	e08c      	b.n	8007222 <lv_obj_set_state+0x1f6>
            uint32_t t;
            for(t = 0; t < tsi; t++) {
 8007108:	2300      	movs	r3, #0
 800710a:	63bb      	str	r3, [r7, #56]	; 0x38
 800710c:	e02e      	b.n	800716c <lv_obj_set_state+0x140>
                lv_style_selector_t selector = ts[t].selector;
 800710e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	461a      	mov	r2, r3
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	4413      	add	r3, r2
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	61fb      	str	r3, [r7, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8007122:	69f8      	ldr	r0, [r7, #28]
 8007124:	f006 f986 	bl	800d434 <lv_obj_style_get_selector_state>
 8007128:	4603      	mov	r3, r0
 800712a:	837b      	strh	r3, [r7, #26]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 800712c:	69f8      	ldr	r0, [r7, #28]
 800712e:	f006 f98d 	bl	800d44c <lv_obj_style_get_selector_part>
 8007132:	6178      	str	r0, [r7, #20]
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8007134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	461a      	mov	r2, r3
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	4413      	add	r3, r2
 8007144:	891a      	ldrh	r2, [r3, #8]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	6819      	ldr	r1, [r3, #0]
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	440b      	add	r3, r1
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d107      	bne.n	8007166 <lv_obj_set_state+0x13a>
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	429a      	cmp	r2, r3
 800715c:	d103      	bne.n	8007166 <lv_obj_set_state+0x13a>
 800715e:	8b7a      	ldrh	r2, [r7, #26]
 8007160:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007162:	429a      	cmp	r2, r3
 8007164:	d207      	bcs.n	8007176 <lv_obj_set_state+0x14a>
            for(t = 0; t < tsi; t++) {
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	3301      	adds	r3, #1
 800716a:	63bb      	str	r3, [r7, #56]	; 0x38
 800716c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007170:	429a      	cmp	r2, r3
 8007172:	d3cc      	bcc.n	800710e <lv_obj_set_state+0xe2>
 8007174:	e000      	b.n	8007178 <lv_obj_set_state+0x14c>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8007176:	bf00      	nop
            }

            /*If not found  add it*/
            if(t == tsi) {
 8007178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800717a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717c:	429a      	cmp	r2, r3
 800717e:	d14d      	bne.n	800721c <lv_obj_set_state+0x1f0>
                ts[tsi].time = tr->time;
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	68d9      	ldr	r1, [r3, #12]
 8007184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	461a      	mov	r2, r3
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	4413      	add	r3, r2
 8007194:	b28a      	uxth	r2, r1
 8007196:	801a      	strh	r2, [r3, #0]
                ts[tsi].delay = tr->delay;
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	6919      	ldr	r1, [r3, #16]
 800719c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	461a      	mov	r2, r3
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	4413      	add	r3, r2
 80071ac:	b28a      	uxth	r2, r1
 80071ae:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 80071b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	461a      	mov	r2, r3
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	4413      	add	r3, r2
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	6892      	ldr	r2, [r2, #8]
 80071c4:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	18d1      	adds	r1, r2, r3
 80071d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	461a      	mov	r2, r3
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	4413      	add	r3, r2
 80071e0:	880a      	ldrh	r2, [r1, #0]
 80071e2:	811a      	strh	r2, [r3, #8]
#if LV_USE_USER_DATA
                ts[tsi].user_data = tr->user_data;
 80071e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	461a      	mov	r2, r3
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	4413      	add	r3, r2
 80071f4:	6a3a      	ldr	r2, [r7, #32]
 80071f6:	6852      	ldr	r2, [r2, #4]
 80071f8:	611a      	str	r2, [r3, #16]
#endif
                ts[tsi].selector = obj_style->selector;
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8007202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	461a      	mov	r2, r3
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	4413      	add	r3, r2
 8007212:	460a      	mov	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
                tsi++;
 8007216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007218:	3301      	adds	r3, #1
 800721a:	647b      	str	r3, [r7, #68]	; 0x44
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 800721c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721e:	3301      	adds	r3, #1
 8007220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d009      	beq.n	8007246 <lv_obj_set_state+0x21a>
 8007232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007234:	2b1f      	cmp	r3, #31
 8007236:	f67f af67 	bls.w	8007108 <lv_obj_set_state+0xdc>
 800723a:	e004      	b.n	8007246 <lv_obj_set_state+0x21a>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 800723c:	bf00      	nop
 800723e:	e002      	b.n	8007246 <lv_obj_set_state+0x21a>
        if(obj_style->is_trans) continue;
 8007240:	bf00      	nop
 8007242:	e000      	b.n	8007246 <lv_obj_set_state+0x21a>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8007244:	bf00      	nop
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8007246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007248:	3301      	adds	r3, #1
 800724a:	643b      	str	r3, [r7, #64]	; 0x40
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007250:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007254:	b2db      	uxtb	r3, r3
 8007256:	461a      	mov	r2, r3
 8007258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725a:	4293      	cmp	r3, r2
 800725c:	d203      	bcs.n	8007266 <lv_obj_set_state+0x23a>
 800725e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007260:	2b1f      	cmp	r3, #31
 8007262:	f67f af12 	bls.w	800708a <lv_obj_set_state+0x5e>
            }
        }
    }

    for(i = 0; i < tsi; i++) {
 8007266:	2300      	movs	r3, #0
 8007268:	643b      	str	r3, [r7, #64]	; 0x40
 800726a:	e01f      	b.n	80072ac <lv_obj_set_state+0x280>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 800726c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	461a      	mov	r2, r3
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	4413      	add	r3, r2
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	4618      	mov	r0, r3
 8007280:	f006 f8e4 	bl	800d44c <lv_obj_style_get_selector_part>
 8007284:	6138      	str	r0, [r7, #16]
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8007286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	461a      	mov	r2, r3
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	4413      	add	r3, r2
 8007296:	8879      	ldrh	r1, [r7, #2]
 8007298:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	460b      	mov	r3, r1
 800729e:	6939      	ldr	r1, [r7, #16]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f005 fd8b 	bl	800cdbc <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 80072a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a8:	3301      	adds	r3, #1
 80072aa:	643b      	str	r3, [r7, #64]	; 0x40
 80072ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d3db      	bcc.n	800726c <lv_obj_set_state+0x240>
    }

    lv_mem_buf_release(ts);
 80072b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b6:	f01a ffd3 	bl	8022260 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 80072ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d103      	bne.n	80072ca <lv_obj_set_state+0x29e>
        lv_obj_invalidate(obj);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f002 faff 	bl	80098c6 <lv_obj_invalidate>
 80072c8:	e019      	b.n	80072fe <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 80072ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d107      	bne.n	80072e2 <lv_obj_set_state+0x2b6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80072d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072d6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f005 fb62 	bl	800c9a4 <lv_obj_refresh_style>
 80072e0:	e00d      	b.n	80072fe <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 80072e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d109      	bne.n	80072fe <lv_obj_set_state+0x2d2>
        lv_obj_invalidate(obj);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f002 faeb 	bl	80098c6 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 ff93 	bl	800821c <lv_obj_refresh_ext_draw_size>
 80072f6:	e002      	b.n	80072fe <lv_obj_set_state+0x2d2>
    if(obj->state == new_state) return;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <lv_obj_set_state+0x2d2>
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 80072fc:	bf00      	nop
    }
}
 80072fe:	3748      	adds	r7, #72	; 0x48
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <lv_obj_class_create_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
{
 8007304:	b590      	push	{r4, r7, lr}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
    LV_TRACE_OBJ_CREATE("Creating object with %p class on %p parent", (void *)class_p, (void *)parent);
    uint32_t s = get_instance_size(class_p);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f990 	bl	8007634 <get_instance_size>
 8007314:	6178      	str	r0, [r7, #20]
    lv_obj_t * obj = lv_mem_alloc(s);
 8007316:	6978      	ldr	r0, [r7, #20]
 8007318:	f01a fe6c 	bl	8021ff4 <lv_mem_alloc>
 800731c:	6138      	str	r0, [r7, #16]
    if(obj == NULL) return NULL;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <lv_obj_class_create_obj+0x24>
 8007324:	2300      	movs	r3, #0
 8007326:	e09e      	b.n	8007466 <lv_obj_class_create_obj+0x162>
    lv_memset_00(obj, s);
 8007328:	6979      	ldr	r1, [r7, #20]
 800732a:	6938      	ldr	r0, [r7, #16]
 800732c:	f01b fa96 	bl	802285c <lv_memset_00>
    obj->class_p = class_p;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
    obj->parent = parent;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	605a      	str	r2, [r3, #4]

    /*Create a screen*/
    if(parent == NULL) {
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d153      	bne.n	80073ea <lv_obj_class_create_obj+0xe6>
        LV_TRACE_OBJ_CREATE("creating a screen");
        lv_disp_t * disp = lv_disp_get_default();
 8007342:	f018 fe05 	bl	801ff50 <lv_disp_get_default>
 8007346:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <lv_obj_class_create_obj+0x54>
            LV_LOG_WARN("No display created yet. No place to assign the new screen");
            lv_mem_free(obj);
 800734e:	6938      	ldr	r0, [r7, #16]
 8007350:	f01a fe80 	bl	8022054 <lv_mem_free>
            return NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	e086      	b.n	8007466 <lv_obj_class_create_obj+0x162>
        }

        if(disp->screens == NULL) {
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10d      	bne.n	800737c <lv_obj_class_create_obj+0x78>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8007360:	2004      	movs	r0, #4
 8007362:	f01a fe47 	bl	8021ff4 <lv_mem_alloc>
 8007366:	4602      	mov	r2, r0
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	60da      	str	r2, [r3, #12]
            disp->screens[0] = obj;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	601a      	str	r2, [r3, #0]
            disp->screen_cnt = 1;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	625a      	str	r2, [r3, #36]	; 0x24
 800737a:	e01b      	b.n	80073b4 <lv_obj_class_create_obj+0xb0>
        }
        else {
            disp->screen_cnt++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	625a      	str	r2, [r3, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f01a fe8c 	bl	80220b0 <lv_mem_realloc>
 8007398:	4602      	mov	r2, r0
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	60da      	str	r2, [r3, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80073a6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80073aa:	440b      	add	r3, r1
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	601a      	str	r2, [r3, #0]
        }

        /*Set coordinates to full screen size*/
        obj->coords.x1 = 0;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2200      	movs	r2, #0
 80073b8:	829a      	strh	r2, [r3, #20]
        obj->coords.y1 = 0;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2200      	movs	r2, #0
 80073be:	82da      	strh	r2, [r3, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80073c0:	2000      	movs	r0, #0
 80073c2:	f018 fdd1 	bl	801ff68 <lv_disp_get_hor_res>
 80073c6:	4603      	mov	r3, r0
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	b21a      	sxth	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	831a      	strh	r2, [r3, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 80073d4:	2000      	movs	r0, #0
 80073d6:	f018 fded 	bl	801ffb4 <lv_disp_get_ver_res>
 80073da:	4603      	mov	r3, r0
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	b21a      	sxth	r2, r3
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	835a      	strh	r2, [r3, #26]
 80073e8:	e03c      	b.n	8007464 <lv_obj_class_create_obj+0x160>
    }
    /*Create a normal object*/
    else {
        LV_TRACE_OBJ_CREATE("creating normal object");
        LV_ASSERT_OBJ(parent, MY_CLASS);
        if(parent->spec_attr == NULL) {
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <lv_obj_class_create_obj+0xf4>
            lv_obj_allocate_spec_attr(parent);
 80073f2:	6838      	ldr	r0, [r7, #0]
 80073f4:	f7fe feb4 	bl	8006160 <lv_obj_allocate_spec_attr>
        }

        if(parent->spec_attr->children == NULL) {
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d110      	bne.n	8007424 <lv_obj_class_create_obj+0x120>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689c      	ldr	r4, [r3, #8]
 8007406:	2004      	movs	r0, #4
 8007408:	f01a fdf4 	bl	8021ff4 <lv_mem_alloc>
 800740c:	4603      	mov	r3, r0
 800740e:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[0] = obj;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	601a      	str	r2, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2201      	movs	r2, #1
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	e01f      	b.n	8007464 <lv_obj_class_create_obj+0x160>
        }
        else {
            parent->spec_attr->child_cnt++;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	3201      	adds	r2, #1
 800742c:	605a      	str	r2, [r3, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	681a      	ldr	r2, [r3, #0]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	0099      	lsls	r1, r3, #2
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689c      	ldr	r4, [r3, #8]
 8007440:	4610      	mov	r0, r2
 8007442:	f01a fe35 	bl	80220b0 <lv_mem_realloc>
 8007446:	4603      	mov	r3, r0
 8007448:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800745a:	440b      	add	r3, r1
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	601a      	str	r2, [r3, #0]
        }
    }

    return obj;
 8007464:	693b      	ldr	r3, [r7, #16]
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	bd90      	pop	{r4, r7, pc}

0800746e <lv_obj_class_init_obj>:

void lv_obj_class_init_obj(lv_obj_t * obj)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
    lv_obj_mark_layout_as_dirty(obj);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fbd8 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 800747c:	2000      	movs	r0, #0
 800747e:	f005 fb5b 	bl	800cb38 <lv_obj_enable_style_refresh>

    lv_theme_apply(obj);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f008 fed0 	bl	8010228 <lv_theme_apply>
    lv_obj_construct(obj);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f8ab 	bl	80075e4 <lv_obj_construct>

    lv_obj_enable_style_refresh(true);
 800748e:	2001      	movs	r0, #1
 8007490:	f005 fb52 	bl	800cb38 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8007494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007498:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f005 fa81 	bl	800c9a4 <lv_obj_refresh_style>

    lv_obj_refresh_self_size(obj);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fd41 	bl	8008f2a <lv_obj_refresh_self_size>

    lv_group_t * def_group = lv_group_get_default();
 80074a8:	f7fd ff2a 	bl	8005300 <lv_group_get_default>
 80074ac:	60f8      	str	r0, [r7, #12]
    if(def_group && lv_obj_is_group_def(obj)) {
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d009      	beq.n	80074c8 <lv_obj_class_init_obj+0x5a>
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f86b 	bl	8007590 <lv_obj_is_group_def>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <lv_obj_class_init_obj+0x5a>
        lv_group_add_obj(def_group, obj);
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7fd ff28 	bl	8005318 <lv_group_add_obj>
    }

    lv_obj_t * parent = lv_obj_get_parent(obj);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f006 fe65 	bl	800e198 <lv_obj_get_parent>
 80074ce:	60b8      	str	r0, [r7, #8]
    if(parent) {
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00c      	beq.n	80074f0 <lv_obj_class_init_obj+0x82>
        /*Call the ancestor's event handler to the parent to notify it about the new child.
         *Also triggers layout update*/
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	2122      	movs	r1, #34	; 0x22
 80074da:	68b8      	ldr	r0, [r7, #8]
 80074dc:	f7fd fc1e 	bl	8004d1c <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	2123      	movs	r1, #35	; 0x23
 80074e4:	68b8      	ldr	r0, [r7, #8]
 80074e6:	f7fd fc19 	bl	8004d1c <lv_event_send>

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(obj);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f002 f9eb 	bl	80098c6 <lv_obj_invalidate>
    }
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <_lv_obj_destruct>:

void _lv_obj_destruct(lv_obj_t * obj)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <_lv_obj_destruct+0x22>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4610      	mov	r0, r2
 8007518:	4798      	blx	r3

    if(obj->class_p->base_class) {
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <_lv_obj_destruct+0x3c>
        /*Don't let the descendant methods run during destructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	601a      	str	r2, [r3, #0]

        /*Call the base class's destructor too*/
        _lv_obj_destruct(obj);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff ffe2 	bl	80074f8 <_lv_obj_destruct>
    }
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <lv_obj_is_editable>:

bool lv_obj_is_editable(lv_obj_t * obj)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]

    /*Find a base in which editable is set*/
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 800754a:	e002      	b.n	8007552 <lv_obj_is_editable+0x16>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <lv_obj_is_editable+0x2a>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	7e1b      	ldrb	r3, [r3, #24]
 800755c:	f003 0303 	and.w	r3, r3, #3
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0f2      	beq.n	800754c <lv_obj_is_editable+0x10>

    if(class_p == NULL) return false;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <lv_obj_is_editable+0x34>
 800756c:	2300      	movs	r3, #0
 800756e:	e009      	b.n	8007584 <lv_obj_is_editable+0x48>

    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	7e1b      	ldrb	r3, [r3, #24]
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b01      	cmp	r3, #1
 800757c:	bf0c      	ite	eq
 800757e:	2301      	moveq	r3, #1
 8007580:	2300      	movne	r3, #0
 8007582:	b2db      	uxtb	r3, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <lv_obj_is_group_def>:

bool lv_obj_is_group_def(lv_obj_t * obj)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60fb      	str	r3, [r7, #12]

    /*Find a base in which group_def is set*/
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 800759e:	e002      	b.n	80075a6 <lv_obj_is_group_def+0x16>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d006      	beq.n	80075ba <lv_obj_is_group_def+0x2a>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	7e1b      	ldrb	r3, [r3, #24]
 80075b0:	f003 030c 	and.w	r3, r3, #12
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f2      	beq.n	80075a0 <lv_obj_is_group_def+0x10>

    if(class_p == NULL) return false;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <lv_obj_is_group_def+0x34>
 80075c0:	2300      	movs	r3, #0
 80075c2:	e009      	b.n	80075d8 <lv_obj_is_group_def+0x48>

    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	7e1b      	ldrb	r3, [r3, #24]
 80075c8:	f003 030c 	and.w	r3, r3, #12
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	bf0c      	ite	eq
 80075d2:	2301      	moveq	r3, #1
 80075d4:	2300      	movne	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * original_class_p = obj->class_p;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60fb      	str	r3, [r7, #12]

    if(obj->class_p->base_class) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d007      	beq.n	800760c <lv_obj_construct+0x28>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	601a      	str	r2, [r3, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff ffec 	bl	80075e4 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	601a      	str	r2, [r3, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <lv_obj_construct+0x48>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
}
 800762c:	bf00      	nop
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <get_instance_size>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60fb      	str	r3, [r7, #12]
    while(base && base->instance_size == 0) base = base->base_class;
 8007640:	e002      	b.n	8007648 <get_instance_size+0x14>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <get_instance_size+0x26>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <get_instance_size+0x48>)
 8007654:	4013      	ands	r3, r2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f3      	beq.n	8007642 <get_instance_size+0xe>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <get_instance_size+0x30>
 8007660:	2300      	movs	r3, #0
 8007662:	e004      	b.n	800766e <get_instance_size+0x3a>

    return base->instance_size;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f3c3 130f 	ubfx	r3, r3, #4, #16
 800766c:	b29b      	uxth	r3, r3
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	000ffff0 	.word	0x000ffff0

08007680 <lv_obj_get_style_transform_width>:
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800768a:	2268      	movs	r2, #104	; 0x68
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f005 fa62 	bl	800cb58 <lv_obj_get_style_prop>
 8007694:	4603      	mov	r3, r0
 8007696:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	b21b      	sxth	r3, r3
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <lv_obj_get_style_transform_height>:
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80076ae:	2269      	movs	r2, #105	; 0x69
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f005 fa50 	bl	800cb58 <lv_obj_get_style_prop>
 80076b8:	4603      	mov	r3, r0
 80076ba:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	b21b      	sxth	r3, r3
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <lv_obj_get_style_bg_color_filtered>:
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 80076d2:	2220      	movs	r2, #32
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f005 fa3e 	bl	800cb58 <lv_obj_get_style_prop>
 80076dc:	4603      	mov	r3, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f005 fc84 	bl	800cff0 <_lv_obj_style_apply_color_filter>
 80076e8:	4603      	mov	r3, r0
 80076ea:	60fb      	str	r3, [r7, #12]
    return v.color;
 80076ec:	7b3b      	ldrb	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <lv_obj_get_style_bg_opa>:
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8007700:	2221      	movs	r2, #33	; 0x21
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f005 fa27 	bl	800cb58 <lv_obj_get_style_prop>
 800770a:	4603      	mov	r3, r0
 800770c:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	b2db      	uxtb	r3, r3
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <lv_obj_get_style_bg_grad_color_filtered>:
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 8007724:	2222      	movs	r2, #34	; 0x22
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f005 fa15 	bl	800cb58 <lv_obj_get_style_prop>
 800772e:	4603      	mov	r3, r0
 8007730:	461a      	mov	r2, r3
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f005 fc5b 	bl	800cff0 <_lv_obj_style_apply_color_filter>
 800773a:	4603      	mov	r3, r0
 800773c:	60fb      	str	r3, [r7, #12]
    return v.color;
 800773e:	7b3b      	ldrb	r3, [r7, #12]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <lv_obj_get_style_bg_grad_dir>:
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8007752:	2223      	movs	r2, #35	; 0x23
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f005 f9fe 	bl	800cb58 <lv_obj_get_style_prop>
 800775c:	4603      	mov	r3, r0
 800775e:	60fb      	str	r3, [r7, #12]
    return (lv_grad_dir_t)v.num;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	b2db      	uxtb	r3, r3
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <lv_obj_get_style_bg_main_stop>:
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8007776:	2224      	movs	r2, #36	; 0x24
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f005 f9ec 	bl	800cb58 <lv_obj_get_style_prop>
 8007780:	4603      	mov	r3, r0
 8007782:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	b21b      	sxth	r3, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <lv_obj_get_style_bg_grad_stop>:
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 800779a:	2225      	movs	r2, #37	; 0x25
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f005 f9da 	bl	800cb58 <lv_obj_get_style_prop>
 80077a4:	4603      	mov	r3, r0
 80077a6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	b21b      	sxth	r3, r3
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <lv_obj_get_style_bg_grad>:
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 80077be:	2226      	movs	r2, #38	; 0x26
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f005 f9c8 	bl	800cb58 <lv_obj_get_style_prop>
 80077c8:	4603      	mov	r3, r0
 80077ca:	60fb      	str	r3, [r7, #12]
    return (const lv_grad_dsc_t *)v.ptr;
 80077cc:	68fb      	ldr	r3, [r7, #12]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <lv_obj_get_style_bg_dither_mode>:
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 80077e0:	2227      	movs	r2, #39	; 0x27
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f005 f9b7 	bl	800cb58 <lv_obj_get_style_prop>
 80077ea:	4603      	mov	r3, r0
 80077ec:	60fb      	str	r3, [r7, #12]
    return (lv_dither_mode_t)v.num;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	b2db      	uxtb	r3, r3
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <lv_obj_get_style_bg_img_src>:
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8007804:	2228      	movs	r2, #40	; 0x28
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f005 f9a5 	bl	800cb58 <lv_obj_get_style_prop>
 800780e:	4603      	mov	r3, r0
 8007810:	60fb      	str	r3, [r7, #12]
    return (const void *)v.ptr;
 8007812:	68fb      	ldr	r3, [r7, #12]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <lv_obj_get_style_bg_img_opa>:
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8007826:	2229      	movs	r2, #41	; 0x29
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f005 f994 	bl	800cb58 <lv_obj_get_style_prop>
 8007830:	4603      	mov	r3, r0
 8007832:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	b2db      	uxtb	r3, r3
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <lv_obj_get_style_bg_img_recolor_filtered>:
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 800784a:	222a      	movs	r2, #42	; 0x2a
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f005 f982 	bl	800cb58 <lv_obj_get_style_prop>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f005 fbc8 	bl	800cff0 <_lv_obj_style_apply_color_filter>
 8007860:	4603      	mov	r3, r0
 8007862:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007864:	7b3b      	ldrb	r3, [r7, #12]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <lv_obj_get_style_bg_img_recolor_opa>:
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8007878:	222b      	movs	r2, #43	; 0x2b
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f005 f96b 	bl	800cb58 <lv_obj_get_style_prop>
 8007882:	4603      	mov	r3, r0
 8007884:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	b2db      	uxtb	r3, r3
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <lv_obj_get_style_bg_img_tiled>:
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 800789c:	222c      	movs	r2, #44	; 0x2c
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f005 f959 	bl	800cb58 <lv_obj_get_style_prop>
 80078a6:	4603      	mov	r3, r0
 80078a8:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bf14      	ite	ne
 80078b0:	2301      	movne	r3, #1
 80078b2:	2300      	moveq	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <lv_obj_get_style_border_color_filtered>:
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80078c8:	2230      	movs	r2, #48	; 0x30
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f005 f943 	bl	800cb58 <lv_obj_get_style_prop>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f005 fb89 	bl	800cff0 <_lv_obj_style_apply_color_filter>
 80078de:	4603      	mov	r3, r0
 80078e0:	60fb      	str	r3, [r7, #12]
    return v.color;
 80078e2:	7b3b      	ldrb	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <lv_obj_get_style_border_opa>:
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80078f6:	2231      	movs	r2, #49	; 0x31
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f005 f92c 	bl	800cb58 <lv_obj_get_style_prop>
 8007900:	4603      	mov	r3, r0
 8007902:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	b2db      	uxtb	r3, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <lv_obj_get_style_border_width>:
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800791a:	2232      	movs	r2, #50	; 0x32
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f005 f91a 	bl	800cb58 <lv_obj_get_style_prop>
 8007924:	4603      	mov	r3, r0
 8007926:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	b21b      	sxth	r3, r3
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <lv_obj_get_style_border_side>:
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 800793e:	2233      	movs	r2, #51	; 0x33
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f005 f908 	bl	800cb58 <lv_obj_get_style_prop>
 8007948:	4603      	mov	r3, r0
 800794a:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	b2db      	uxtb	r3, r3
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <lv_obj_get_style_outline_width>:
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8007962:	2235      	movs	r2, #53	; 0x35
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f005 f8f6 	bl	800cb58 <lv_obj_get_style_prop>
 800796c:	4603      	mov	r3, r0
 800796e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	b21b      	sxth	r3, r3
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <lv_obj_get_style_outline_color_filtered>:
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 8007986:	2236      	movs	r2, #54	; 0x36
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f005 f8e4 	bl	800cb58 <lv_obj_get_style_prop>
 8007990:	4603      	mov	r3, r0
 8007992:	461a      	mov	r2, r3
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f005 fb2a 	bl	800cff0 <_lv_obj_style_apply_color_filter>
 800799c:	4603      	mov	r3, r0
 800799e:	60fb      	str	r3, [r7, #12]
    return v.color;
 80079a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <lv_obj_get_style_outline_opa>:
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80079b4:	2237      	movs	r2, #55	; 0x37
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f005 f8cd 	bl	800cb58 <lv_obj_get_style_prop>
 80079be:	4603      	mov	r3, r0
 80079c0:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	b2db      	uxtb	r3, r3
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <lv_obj_get_style_outline_pad>:
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80079d8:	2238      	movs	r2, #56	; 0x38
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f005 f8bb 	bl	800cb58 <lv_obj_get_style_prop>
 80079e2:	4603      	mov	r3, r0
 80079e4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	b21b      	sxth	r3, r3
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <lv_obj_get_style_shadow_width>:
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80079fc:	2240      	movs	r2, #64	; 0x40
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f005 f8a9 	bl	800cb58 <lv_obj_get_style_prop>
 8007a06:	4603      	mov	r3, r0
 8007a08:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	b21b      	sxth	r3, r3
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <lv_obj_get_style_shadow_ofs_x>:
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8007a20:	2241      	movs	r2, #65	; 0x41
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f005 f897 	bl	800cb58 <lv_obj_get_style_prop>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	b21b      	sxth	r3, r3
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <lv_obj_get_style_shadow_ofs_y>:
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8007a44:	2242      	movs	r2, #66	; 0x42
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f005 f885 	bl	800cb58 <lv_obj_get_style_prop>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	b21b      	sxth	r3, r3
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <lv_obj_get_style_shadow_spread>:
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8007a68:	2243      	movs	r2, #67	; 0x43
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f005 f873 	bl	800cb58 <lv_obj_get_style_prop>
 8007a72:	4603      	mov	r3, r0
 8007a74:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	b21b      	sxth	r3, r3
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <lv_obj_get_style_shadow_color_filtered>:
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 8007a8c:	2244      	movs	r2, #68	; 0x44
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f005 f861 	bl	800cb58 <lv_obj_get_style_prop>
 8007a96:	4603      	mov	r3, r0
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f005 faa7 	bl	800cff0 <_lv_obj_style_apply_color_filter>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007aa6:	7b3b      	ldrb	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <lv_obj_get_style_shadow_opa>:
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8007aba:	2245      	movs	r2, #69	; 0x45
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f005 f84a 	bl	800cb58 <lv_obj_get_style_prop>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	b2db      	uxtb	r3, r3
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <lv_obj_get_style_text_color_filtered>:
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8007ade:	2255      	movs	r2, #85	; 0x55
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f005 f838 	bl	800cb58 <lv_obj_get_style_prop>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	461a      	mov	r2, r3
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f005 fa7e 	bl	800cff0 <_lv_obj_style_apply_color_filter>
 8007af4:	4603      	mov	r3, r0
 8007af6:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007af8:	7b3b      	ldrb	r3, [r7, #12]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <lv_obj_get_style_text_opa>:
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 8007b0c:	2256      	movs	r2, #86	; 0x56
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f005 f821 	bl	800cb58 <lv_obj_get_style_prop>
 8007b16:	4603      	mov	r3, r0
 8007b18:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	b2db      	uxtb	r3, r3
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <lv_obj_get_style_text_font>:
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8007b30:	2257      	movs	r2, #87	; 0x57
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f005 f80f 	bl	800cb58 <lv_obj_get_style_prop>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <lv_obj_get_style_text_letter_space>:
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8007b52:	2258      	movs	r2, #88	; 0x58
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f004 fffe 	bl	800cb58 <lv_obj_get_style_prop>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	b21b      	sxth	r3, r3
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <lv_obj_get_style_text_line_space>:
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8007b76:	2259      	movs	r2, #89	; 0x59
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f004 ffec 	bl	800cb58 <lv_obj_get_style_prop>
 8007b80:	4603      	mov	r3, r0
 8007b82:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	b21b      	sxth	r3, r3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <lv_obj_get_style_text_decor>:
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8007b9a:	225a      	movs	r2, #90	; 0x5a
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f004 ffda 	bl	800cb58 <lv_obj_get_style_prop>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	60fb      	str	r3, [r7, #12]
    return (lv_text_decor_t)v.num;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	b2db      	uxtb	r3, r3
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <lv_obj_get_style_text_align>:
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8007bbe:	225b      	movs	r2, #91	; 0x5b
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f004 ffc8 	bl	800cb58 <lv_obj_get_style_prop>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	60fb      	str	r3, [r7, #12]
    return (lv_text_align_t)v.num;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	b2db      	uxtb	r3, r3
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <lv_obj_get_style_radius>:
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8007be2:	220b      	movs	r2, #11
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f004 ffb6 	bl	800cb58 <lv_obj_get_style_prop>
 8007bec:	4603      	mov	r3, r0
 8007bee:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	b21b      	sxth	r3, r3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <lv_obj_get_style_opa>:
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007c06:	2260      	movs	r2, #96	; 0x60
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f004 ffa4 	bl	800cb58 <lv_obj_get_style_prop>
 8007c10:	4603      	mov	r3, r0
 8007c12:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	b2db      	uxtb	r3, r3
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <lv_obj_get_style_blend_mode>:
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007c2a:	2267      	movs	r2, #103	; 0x67
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f004 ff92 	bl	800cb58 <lv_obj_get_style_prop>
 8007c34:	4603      	mov	r3, r0
 8007c36:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	b2db      	uxtb	r3, r3
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
    lv_opa_t opa = LV_OPA_COVER;
 8007c50:	23ff      	movs	r3, #255	; 0xff
 8007c52:	75fb      	strb	r3, [r7, #23]
    if(part != LV_PART_MAIN) {
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d01a      	beq.n	8007c90 <lv_obj_init_draw_rect_dsc+0x4c>
        opa = lv_obj_get_style_opa(obj, part);
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff ffcd 	bl	8007bfc <lv_obj_get_style_opa>
 8007c62:	4603      	mov	r3, r0
 8007c64:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d811      	bhi.n	8007c90 <lv_obj_init_draw_rect_dsc+0x4c>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            return;
 8007c8e:	e19f      	b.n	8007fd0 <lv_obj_init_draw_rect_dsc+0x38c>
        }
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <lv_obj_init_draw_rect_dsc+0x62>
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f7ff ffc1 	bl	8007c20 <lv_obj_get_style_blend_mode>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	709a      	strb	r2, [r3, #2]

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff ff95 	bl	8007bd8 <lv_obj_get_style_radius>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	801a      	strh	r2, [r3, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d065      	beq.n	8007d8a <lv_obj_init_draw_rect_dsc+0x146>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff fd18 	bl	80076f6 <lv_obj_get_style_bg_opa>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	461a      	mov	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	70da      	strb	r2, [r3, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	78db      	ldrb	r3, [r3, #3]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d959      	bls.n	8007d8a <lv_obj_init_draw_rect_dsc+0x146>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8007cd6:	687c      	ldr	r4, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff fcf4 	bl	80076c8 <lv_obj_get_style_bg_color_filtered>
 8007ce0:	7120      	strb	r0, [r4, #4]
            const lv_grad_dsc_t * grad = lv_obj_get_style_bg_grad(obj, part);
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fd65 	bl	80077b4 <lv_obj_get_style_bg_grad>
 8007cea:	6138      	str	r0, [r7, #16]
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00e      	beq.n	8007d10 <lv_obj_init_draw_rect_dsc+0xcc>
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	795b      	ldrb	r3, [r3, #5]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <lv_obj_init_draw_rect_dsc+0xcc>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3305      	adds	r3, #5
 8007d04:	2206      	movs	r2, #6
 8007d06:	6939      	ldr	r1, [r7, #16]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f01a fb01 	bl	8022310 <lv_memcpy>
 8007d0e:	e03c      	b.n	8007d8a <lv_obj_init_draw_rect_dsc+0x146>
            }
            else {
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff fd18 	bl	8007748 <lv_obj_get_style_bg_grad_dir>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	b2d9      	uxtb	r1, r3
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	7a93      	ldrb	r3, [r2, #10]
 8007d24:	f361 0302 	bfi	r3, r1, #0, #3
 8007d28:	7293      	strb	r3, [r2, #10]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7a9b      	ldrb	r3, [r3, #10]
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01b      	beq.n	8007d70 <lv_obj_init_draw_rect_dsc+0x12c>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 8007d38:	687c      	ldr	r4, [r7, #4]
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7ff fcc3 	bl	80076c8 <lv_obj_get_style_bg_color_filtered>
 8007d42:	7160      	strb	r0, [r4, #5]
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8007d44:	687c      	ldr	r4, [r7, #4]
 8007d46:	68b9      	ldr	r1, [r7, #8]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fce6 	bl	800771a <lv_obj_get_style_bg_grad_color_filtered>
 8007d4e:	71e0      	strb	r0, [r4, #7]
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff fd0a 	bl	800776c <lv_obj_get_style_bg_main_stop>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	719a      	strb	r2, [r3, #6]
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff fd14 	bl	8007790 <lv_obj_get_style_bg_grad_stop>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	721a      	strb	r2, [r3, #8]
                }
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fd2f 	bl	80077d6 <lv_obj_get_style_bg_dither_mode>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	b2d9      	uxtb	r1, r3
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	7a93      	ldrb	r3, [r2, #10]
 8007d84:	f361 03c5 	bfi	r3, r1, #3, #3
 8007d88:	7293      	strb	r3, [r2, #10]
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fdbf 	bl	8007910 <lv_obj_get_style_border_width>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461a      	mov	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	835a      	strh	r2, [r3, #26]
    if(draw_dsc->border_width) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d022      	beq.n	8007dea <lv_obj_init_draw_rect_dsc+0x1a6>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	7f1b      	ldrb	r3, [r3, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01e      	beq.n	8007dea <lv_obj_init_draw_rect_dsc+0x1a6>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff fd9c 	bl	80078ec <lv_obj_get_style_border_opa>
 8007db4:	4603      	mov	r3, r0
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	7f1b      	ldrb	r3, [r3, #28]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d912      	bls.n	8007dea <lv_obj_init_draw_rect_dsc+0x1a6>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff fdb4 	bl	8007934 <lv_obj_get_style_border_side>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f003 031f 	and.w	r3, r3, #31
 8007dd2:	b2d9      	uxtb	r1, r3
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7f53      	ldrb	r3, [r2, #29]
 8007dd8:	f361 0345 	bfi	r3, r1, #1, #5
 8007ddc:	7753      	strb	r3, [r2, #29]
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8007dde:	687c      	ldr	r4, [r7, #4]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff fd6b 	bl	80078be <lv_obj_get_style_border_color_filtered>
 8007de8:	7620      	strb	r0, [r4, #24]
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff fdb3 	bl	8007958 <lv_obj_get_style_outline_width>
 8007df2:	4603      	mov	r3, r0
 8007df4:	461a      	mov	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	841a      	strh	r2, [r3, #32]
    if(draw_dsc->outline_width) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d020      	beq.n	8007e46 <lv_obj_init_draw_rect_dsc+0x202>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01b      	beq.n	8007e46 <lv_obj_init_draw_rect_dsc+0x202>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7ff fdca 	bl	80079aa <lv_obj_get_style_outline_opa>
 8007e16:	4603      	mov	r3, r0
 8007e18:	461a      	mov	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d90d      	bls.n	8007e46 <lv_obj_init_draw_rect_dsc+0x202>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f7ff fdce 	bl	80079ce <lv_obj_get_style_outline_pad>
 8007e32:	4603      	mov	r3, r0
 8007e34:	461a      	mov	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	845a      	strh	r2, [r3, #34]	; 0x22
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8007e3a:	687c      	ldr	r4, [r7, #4]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fd9c 	bl	800797c <lv_obj_get_style_outline_color_filtered>
 8007e44:	77a0      	strb	r0, [r4, #30]
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	7d5b      	ldrb	r3, [r3, #21]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d042      	beq.n	8007ed4 <lv_obj_init_draw_rect_dsc+0x290>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff fcd2 	bl	80077fa <lv_obj_get_style_bg_img_src>
 8007e56:	4602      	mov	r2, r0
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
        if(draw_dsc->bg_img_src) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d037      	beq.n	8007ed4 <lv_obj_init_draw_rect_dsc+0x290>
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7ff fcd8 	bl	800781c <lv_obj_get_style_bg_img_opa>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	755a      	strb	r2, [r3, #21]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	7d5b      	ldrb	r3, [r3, #21]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d92b      	bls.n	8007ed4 <lv_obj_init_draw_rect_dsc+0x290>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f008 fb7c 	bl	801057e <lv_img_src_get_type>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d10d      	bne.n	8007ea8 <lv_obj_init_draw_rect_dsc+0x264>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 8007e8c:	68b9      	ldr	r1, [r7, #8]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7ff fe49 	bl	8007b26 <lv_obj_get_style_text_font>
 8007e94:	4602      	mov	r2, r0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	611a      	str	r2, [r3, #16]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8007e9a:	687c      	ldr	r4, [r7, #4]
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f7ff fe18 	bl	8007ad4 <lv_obj_get_style_text_color_filtered>
 8007ea4:	7520      	strb	r0, [r4, #20]
 8007ea6:	e015      	b.n	8007ed4 <lv_obj_init_draw_rect_dsc+0x290>
                }
                else {
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8007ea8:	687c      	ldr	r4, [r7, #4]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7ff fcc7 	bl	8007840 <lv_obj_get_style_bg_img_recolor_filtered>
 8007eb2:	7520      	strb	r0, [r4, #20]
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fcd9 	bl	800786e <lv_obj_get_style_bg_img_recolor_opa>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	759a      	strb	r2, [r3, #22]
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8007ec4:	68b9      	ldr	r1, [r7, #8]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff fce3 	bl	8007892 <lv_obj_get_style_bg_img_tiled>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	75da      	strb	r2, [r3, #23]
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d03e      	beq.n	8007f5c <lv_obj_init_draw_rect_dsc+0x318>
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff fd86 	bl	80079f2 <lv_obj_get_style_shadow_width>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	461a      	mov	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	84da      	strh	r2, [r3, #38]	; 0x26
        if(draw_dsc->shadow_width) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d031      	beq.n	8007f5c <lv_obj_init_draw_rect_dsc+0x318>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d92c      	bls.n	8007f5c <lv_obj_init_draw_rect_dsc+0x318>
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff fdd3 	bl	8007ab0 <lv_obj_get_style_shadow_opa>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d91e      	bls.n	8007f5c <lv_obj_init_draw_rect_dsc+0x318>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007f1e:	68b9      	ldr	r1, [r7, #8]
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fd78 	bl	8007a16 <lv_obj_get_style_shadow_ofs_x>
 8007f26:	4603      	mov	r3, r0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	851a      	strh	r2, [r3, #40]	; 0x28
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7ff fd82 	bl	8007a3a <lv_obj_get_style_shadow_ofs_y>
 8007f36:	4603      	mov	r3, r0
 8007f38:	461a      	mov	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff fd8c 	bl	8007a5e <lv_obj_get_style_shadow_spread>
 8007f46:	4603      	mov	r3, r0
 8007f48:	461a      	mov	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	859a      	strh	r2, [r3, #44]	; 0x2c
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8007f4e:	687c      	ldr	r4, [r7, #4]
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7ff fd95 	bl	8007a82 <lv_obj_get_style_shadow_color_filtered>
 8007f58:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d036      	beq.n	8007fd0 <lv_obj_init_draw_rect_dsc+0x38c>
        if(opa < LV_OPA_MAX) {
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	2bfc      	cmp	r3, #252	; 0xfc
 8007f66:	d833      	bhi.n	8007fd0 <lv_obj_init_draw_rect_dsc+0x38c>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	121b      	asrs	r3, r3, #8
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007f84:	fb02 f303 	mul.w	r3, r2, r3
 8007f88:	121b      	asrs	r3, r3, #8
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007f98:	fb02 f303 	mul.w	r3, r2, r3
 8007f9c:	121b      	asrs	r3, r3, #8
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007fac:	fb02 f303 	mul.w	r3, r2, r3
 8007fb0:	121b      	asrs	r3, r3, #8
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007fc2:	fb02 f303 	mul.w	r3, r2, r3
 8007fc6:	121b      	asrs	r3, r3, #8
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }
}
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd90      	pop	{r4, r7, pc}

08007fd6 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8007fd6:	b590      	push	{r4, r7, lr}
 8007fd8:	b087      	sub	sp, #28
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f7ff fd8c 	bl	8007b02 <lv_obj_get_style_text_opa>
 8007fea:	4603      	mov	r3, r0
 8007fec:	461a      	mov	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	761a      	strb	r2, [r3, #24]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	7e1b      	ldrb	r3, [r3, #24]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d95e      	bls.n	80080b8 <lv_obj_init_draw_label_dsc+0xe2>

    if(part != LV_PART_MAIN) {
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d018      	beq.n	8008032 <lv_obj_init_draw_label_dsc+0x5c>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8008000:	68b9      	ldr	r1, [r7, #8]
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff fdfa 	bl	8007bfc <lv_obj_get_style_opa>
 8008008:	4603      	mov	r3, r0
 800800a:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d803      	bhi.n	800801a <lv_obj_init_draw_label_dsc+0x44>
            draw_dsc->opa = LV_OPA_TRANSP;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	761a      	strb	r2, [r3, #24]
            return;
 8008018:	e04f      	b.n	80080ba <lv_obj_init_draw_label_dsc+0xe4>
        }
        if(opa < LV_OPA_MAX) {
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	2bfc      	cmp	r3, #252	; 0xfc
 800801e:	d808      	bhi.n	8008032 <lv_obj_init_draw_label_dsc+0x5c>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	7e12      	ldrb	r2, [r2, #24]
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	121b      	asrs	r3, r3, #8
 800802c:	b2da      	uxtb	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	761a      	strb	r2, [r3, #24]
        }
    }

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8008032:	687c      	ldr	r4, [r7, #4]
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff fd4c 	bl	8007ad4 <lv_obj_get_style_text_color_filtered>
 800803c:	7320      	strb	r0, [r4, #12]
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff fd81 	bl	8007b48 <lv_obj_get_style_text_letter_space>
 8008046:	4603      	mov	r3, r0
 8008048:	461a      	mov	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	825a      	strh	r2, [r3, #18]
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff fd8b 	bl	8007b6c <lv_obj_get_style_text_line_space>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	821a      	strh	r2, [r3, #16]
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f7ff fd95 	bl	8007b90 <lv_obj_get_style_text_decor>
 8008066:	4603      	mov	r3, r0
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	b2d9      	uxtb	r1, r3
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	7f13      	ldrb	r3, [r2, #28]
 8008072:	f361 0302 	bfi	r3, r1, #0, #3
 8008076:	7713      	strb	r3, [r2, #28]
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00c      	beq.n	8008098 <lv_obj_init_draw_label_dsc+0xc2>
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fdcd 	bl	8007c20 <lv_obj_get_style_blend_mode>
 8008086:	4603      	mov	r3, r0
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	b2d9      	uxtb	r1, r3
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	7f13      	ldrb	r3, [r2, #28]
 8008092:	f361 03c5 	bfi	r3, r1, #3, #3
 8008096:	7713      	strb	r3, [r2, #28]
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff fd43 	bl	8007b26 <lv_obj_get_style_text_font>
 80080a0:	4602      	mov	r2, r0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff fd83 	bl	8007bb4 <lv_obj_get_style_text_align>
 80080ae:	4603      	mov	r3, r0
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	769a      	strb	r2, [r3, #26]
 80080b6:	e000      	b.n	80080ba <lv_obj_init_draw_label_dsc+0xe4>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80080b8:	bf00      	nop
}
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd90      	pop	{r4, r7, pc}

080080c0 <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
    lv_coord_t s = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	83fb      	strh	r3, [r7, #30]

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff fc8e 	bl	80079f2 <lv_obj_get_style_shadow_width>
 80080d6:	4603      	mov	r3, r0
 80080d8:	83bb      	strh	r3, [r7, #28]
    if(sh_width) {
 80080da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d045      	beq.n	800816e <lv_obj_calculate_ext_draw_size+0xae>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff fce3 	bl	8007ab0 <lv_obj_get_style_shadow_opa>
 80080ea:	4603      	mov	r3, r0
 80080ec:	76fb      	strb	r3, [r7, #27]
        if(sh_opa > LV_OPA_MIN) {
 80080ee:	7efb      	ldrb	r3, [r7, #27]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d93c      	bls.n	800816e <lv_obj_calculate_ext_draw_size+0xae>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 80080f4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	da00      	bge.n	80080fe <lv_obj_calculate_ext_draw_size+0x3e>
 80080fc:	3301      	adds	r3, #1
 80080fe:	105b      	asrs	r3, r3, #1
 8008100:	b21b      	sxth	r3, r3
 8008102:	b29b      	uxth	r3, r3
 8008104:	3301      	adds	r3, #1
 8008106:	b29b      	uxth	r3, r3
 8008108:	83bb      	strh	r3, [r7, #28]
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fca6 	bl	8007a5e <lv_obj_get_style_shadow_spread>
 8008112:	4603      	mov	r3, r0
 8008114:	b29a      	uxth	r2, r3
 8008116:	8bbb      	ldrh	r3, [r7, #28]
 8008118:	4413      	add	r3, r2
 800811a:	b29b      	uxth	r3, r3
 800811c:	83bb      	strh	r3, [r7, #28]
            lv_coord_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff fc78 	bl	8007a16 <lv_obj_get_style_shadow_ofs_x>
 8008126:	4603      	mov	r3, r0
 8008128:	833b      	strh	r3, [r7, #24]
            lv_coord_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff fc84 	bl	8007a3a <lv_obj_get_style_shadow_ofs_y>
 8008132:	4603      	mov	r3, r0
 8008134:	82fb      	strh	r3, [r7, #22]
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8008136:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800813a:	2b00      	cmp	r3, #0
 800813c:	bfb8      	it	lt
 800813e:	425b      	neglt	r3, r3
 8008140:	b29a      	uxth	r2, r3
 8008142:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	bfb8      	it	lt
 800814a:	425b      	neglt	r3, r3
 800814c:	b29b      	uxth	r3, r3
 800814e:	4293      	cmp	r3, r2
 8008150:	bf38      	it	cc
 8008152:	4613      	movcc	r3, r2
 8008154:	b29a      	uxth	r2, r3
 8008156:	8bbb      	ldrh	r3, [r7, #28]
 8008158:	4413      	add	r3, r2
 800815a:	b29b      	uxth	r3, r3
 800815c:	83bb      	strh	r3, [r7, #28]
            s = LV_MAX(s, sh_width);
 800815e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008162:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008166:	4293      	cmp	r3, r2
 8008168:	bfb8      	it	lt
 800816a:	4613      	movlt	r3, r2
 800816c:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff fbf1 	bl	8007958 <lv_obj_get_style_outline_width>
 8008176:	4603      	mov	r3, r0
 8008178:	82bb      	strh	r3, [r7, #20]
    if(outline_width) {
 800817a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d019      	beq.n	80081b6 <lv_obj_calculate_ext_draw_size+0xf6>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fc10 	bl	80079aa <lv_obj_get_style_outline_opa>
 800818a:	4603      	mov	r3, r0
 800818c:	74fb      	strb	r3, [r7, #19]
        if(outline_opa > LV_OPA_MIN) {
 800818e:	7cfb      	ldrb	r3, [r7, #19]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d910      	bls.n	80081b6 <lv_obj_calculate_ext_draw_size+0xf6>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fc19 	bl	80079ce <lv_obj_get_style_outline_pad>
 800819c:	4603      	mov	r3, r0
 800819e:	823b      	strh	r3, [r7, #16]
            s = LV_MAX(s, outline_pad + outline_width);
 80081a0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80081a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081a8:	441a      	add	r2, r3
 80081aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80081ae:	4293      	cmp	r3, r2
 80081b0:	bfb8      	it	lt
 80081b2:	4613      	movlt	r3, r2
 80081b4:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fa61 	bl	8007680 <lv_obj_get_style_transform_width>
 80081be:	4603      	mov	r3, r0
 80081c0:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff fa6d 	bl	80076a4 <lv_obj_get_style_transform_height>
 80081ca:	4603      	mov	r3, r0
 80081cc:	81bb      	strh	r3, [r7, #12]
    lv_coord_t wh = LV_MAX(w, h);
 80081ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80081d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80081d6:	4293      	cmp	r3, r2
 80081d8:	bfb8      	it	lt
 80081da:	4613      	movlt	r3, r2
 80081dc:	817b      	strh	r3, [r7, #10]
    if(wh > 0) s += wh;
 80081de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd04      	ble.n	80081f0 <lv_obj_calculate_ext_draw_size+0x130>
 80081e6:	8bfa      	ldrh	r2, [r7, #30]
 80081e8:	897b      	ldrh	r3, [r7, #10]
 80081ea:	4413      	add	r3, r2
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	83fb      	strh	r3, [r7, #30]

    return s;
 80081f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8008206:	2148      	movs	r1, #72	; 0x48
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f01a fb27 	bl	802285c <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	601a      	str	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <lv_obj_refresh_ext_draw_size>:
    if(dsc->class_p == class_p && dsc->type == type) return true;
    else return false;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f837 	bl	8008298 <_lv_obj_get_ext_draw_size>
 800822a:	4603      	mov	r3, r0
 800822c:	81fb      	strh	r3, [r7, #14]
    lv_coord_t s_new = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	81bb      	strh	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8008232:	f107 030c 	add.w	r3, r7, #12
 8008236:	461a      	mov	r2, r3
 8008238:	2113      	movs	r1, #19
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7fc fd6e 	bl	8004d1c <lv_event_send>

    if(s_new != s_old) lv_obj_invalidate(obj);
 8008240:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008244:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008248:	429a      	cmp	r2, r3
 800824a:	d002      	beq.n	8008252 <lv_obj_refresh_ext_draw_size+0x36>
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 fb3a 	bl	80098c6 <lv_obj_invalidate>

    /*Store the result if the special attrs already allocated*/
    if(obj->spec_attr) {
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <lv_obj_refresh_ext_draw_size+0x4a>
        obj->spec_attr->ext_draw_size = s_new;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008262:	82da      	strh	r2, [r3, #22]
 8008264:	e00b      	b.n	800827e <lv_obj_refresh_ext_draw_size+0x62>
    }
    /*Allocate spec. attrs. only if the result is not zero.
     *Zero is the default value if the spec. attr. are not defined.*/
    else if(s_new != 0) {
 8008266:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <lv_obj_refresh_ext_draw_size+0x62>
        lv_obj_allocate_spec_attr(obj);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7fd ff76 	bl	8006160 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800827c:	82da      	strh	r2, [r3, #22]
    }

    if(s_new != s_old) lv_obj_invalidate(obj);
 800827e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008282:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008286:	429a      	cmp	r2, r3
 8008288:	d002      	beq.n	8008290 <lv_obj_refresh_ext_draw_size+0x74>
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 fb1b 	bl	80098c6 <lv_obj_invalidate>
}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_lv_obj_get_ext_draw_size>:

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <_lv_obj_get_ext_draw_size+0x1a>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80082b0:	e000      	b.n	80082b4 <_lv_obj_get_ext_draw_size+0x1c>
    else return 0;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d006      	beq.n	80082de <_lv_obj_get_layer_type+0x1e>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	7e9b      	ldrb	r3, [r3, #26]
 80082d6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	e000      	b.n	80082e0 <_lv_obj_get_layer_type+0x20>
    else return LV_LAYER_TYPE_NONE;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <lv_area_copy>:
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	80da      	strh	r2, [r3, #6]
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008340:	b29b      	uxth	r3, r3
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	b29b      	uxth	r3, r3
 8008346:	3301      	adds	r3, #1
 8008348:	b29b      	uxth	r3, r3
 800834a:	b21b      	sxth	r3, r3
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008366:	b29a      	uxth	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800836e:	b29b      	uxth	r3, r3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	b29b      	uxth	r3, r3
 8008374:	3301      	adds	r3, #1
 8008376:	b29b      	uxth	r3, r3
 8008378:	b21b      	sxth	r3, r3
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <lv_obj_get_style_width>:
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008390:	2201      	movs	r2, #1
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f004 fbdf 	bl	800cb58 <lv_obj_get_style_prop>
 800839a:	4603      	mov	r3, r0
 800839c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	b21b      	sxth	r3, r3
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <lv_obj_get_style_min_width>:
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 80083b4:	2202      	movs	r2, #2
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f004 fbcd 	bl	800cb58 <lv_obj_get_style_prop>
 80083be:	4603      	mov	r3, r0
 80083c0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	b21b      	sxth	r3, r3
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <lv_obj_get_style_max_width>:
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 80083d8:	2203      	movs	r2, #3
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f004 fbbb 	bl	800cb58 <lv_obj_get_style_prop>
 80083e2:	4603      	mov	r3, r0
 80083e4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	b21b      	sxth	r3, r3
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <lv_obj_get_style_height>:
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80083fc:	2204      	movs	r2, #4
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f004 fba9 	bl	800cb58 <lv_obj_get_style_prop>
 8008406:	4603      	mov	r3, r0
 8008408:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	b21b      	sxth	r3, r3
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <lv_obj_get_style_min_height>:
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8008420:	2205      	movs	r2, #5
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f004 fb97 	bl	800cb58 <lv_obj_get_style_prop>
 800842a:	4603      	mov	r3, r0
 800842c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	b21b      	sxth	r3, r3
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <lv_obj_get_style_max_height>:
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8008444:	2206      	movs	r2, #6
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f004 fb85 	bl	800cb58 <lv_obj_get_style_prop>
 800844e:	4603      	mov	r3, r0
 8008450:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	b21b      	sxth	r3, r3
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <lv_obj_get_style_x>:
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8008468:	2207      	movs	r2, #7
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f004 fb73 	bl	800cb58 <lv_obj_get_style_prop>
 8008472:	4603      	mov	r3, r0
 8008474:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	b21b      	sxth	r3, r3
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <lv_obj_get_style_y>:
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800848c:	2208      	movs	r2, #8
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f004 fb61 	bl	800cb58 <lv_obj_get_style_prop>
 8008496:	4603      	mov	r3, r0
 8008498:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	b21b      	sxth	r3, r3
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <lv_obj_get_style_align>:
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80084b0:	2209      	movs	r2, #9
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f004 fb4f 	bl	800cb58 <lv_obj_get_style_prop>
 80084ba:	4603      	mov	r3, r0
 80084bc:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	b2db      	uxtb	r3, r3
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <lv_obj_get_style_translate_x>:
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80084d4:	226a      	movs	r2, #106	; 0x6a
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f004 fb3d 	bl	800cb58 <lv_obj_get_style_prop>
 80084de:	4603      	mov	r3, r0
 80084e0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	b21b      	sxth	r3, r3
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <lv_obj_get_style_translate_y>:
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80084f8:	226b      	movs	r2, #107	; 0x6b
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f004 fb2b 	bl	800cb58 <lv_obj_get_style_prop>
 8008502:	4603      	mov	r3, r0
 8008504:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	b21b      	sxth	r3, r3
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <lv_obj_get_style_transform_zoom>:
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800851c:	226c      	movs	r2, #108	; 0x6c
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f004 fb19 	bl	800cb58 <lv_obj_get_style_prop>
 8008526:	4603      	mov	r3, r0
 8008528:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	b21b      	sxth	r3, r3
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <lv_obj_get_style_transform_angle>:
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8008540:	226d      	movs	r2, #109	; 0x6d
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f004 fb07 	bl	800cb58 <lv_obj_get_style_prop>
 800854a:	4603      	mov	r3, r0
 800854c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	b21b      	sxth	r3, r3
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <lv_obj_get_style_transform_pivot_x>:
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8008564:	226e      	movs	r2, #110	; 0x6e
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f004 faf5 	bl	800cb58 <lv_obj_get_style_prop>
 800856e:	4603      	mov	r3, r0
 8008570:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	b21b      	sxth	r3, r3
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <lv_obj_get_style_transform_pivot_y>:
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8008588:	226f      	movs	r2, #111	; 0x6f
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f004 fae3 	bl	800cb58 <lv_obj_get_style_prop>
 8008592:	4603      	mov	r3, r0
 8008594:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	b21b      	sxth	r3, r3
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <lv_obj_get_style_pad_top>:
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80085ac:	2210      	movs	r2, #16
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f004 fad1 	bl	800cb58 <lv_obj_get_style_prop>
 80085b6:	4603      	mov	r3, r0
 80085b8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	b21b      	sxth	r3, r3
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <lv_obj_get_style_pad_bottom>:
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80085d0:	2211      	movs	r2, #17
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f004 fabf 	bl	800cb58 <lv_obj_get_style_prop>
 80085da:	4603      	mov	r3, r0
 80085dc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	b21b      	sxth	r3, r3
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <lv_obj_get_style_pad_left>:
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80085f4:	2212      	movs	r2, #18
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f004 faad 	bl	800cb58 <lv_obj_get_style_prop>
 80085fe:	4603      	mov	r3, r0
 8008600:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	b21b      	sxth	r3, r3
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <lv_obj_get_style_pad_right>:
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008618:	2213      	movs	r2, #19
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f004 fa9b 	bl	800cb58 <lv_obj_get_style_prop>
 8008622:	4603      	mov	r3, r0
 8008624:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	b21b      	sxth	r3, r3
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <lv_obj_get_style_border_width>:
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800863c:	2232      	movs	r2, #50	; 0x32
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f004 fa89 	bl	800cb58 <lv_obj_get_style_prop>
 8008646:	4603      	mov	r3, r0
 8008648:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	b21b      	sxth	r3, r3
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <lv_obj_get_style_layout>:
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8008660:	220a      	movs	r2, #10
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f004 fa77 	bl	800cb58 <lv_obj_get_style_prop>
 800866a:	4603      	mov	r3, r0
 800866c:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	b29b      	uxth	r3, r3
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <lv_obj_get_style_base_dir>:

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008684:	2216      	movs	r2, #22
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f004 fa65 	bl	800cb58 <lv_obj_get_style_prop>
 800868e:	4603      	mov	r3, r0
 8008690:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	b2db      	uxtb	r3, r3
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <lv_obj_set_pos>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	807b      	strh	r3, [r7, #2]
 80086aa:	4613      	mov	r3, r2
 80086ac:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_set_x(obj, x);
 80086ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f80a 	bl	80086ce <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 80086ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f829 	bl	8008718 <lv_obj_set_y>
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <lv_obj_set_x>:

void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_x;
    lv_style_value_t v_x;

    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 80086da:	f107 0208 	add.w	r2, r7, #8
 80086de:	2300      	movs	r3, #0
 80086e0:	2107      	movs	r1, #7
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f004 facf 	bl	800cc86 <lv_obj_get_local_style_prop>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73fb      	strb	r3, [r7, #15]

    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d104      	bne.n	80086fc <lv_obj_set_x+0x2e>
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d102      	bne.n	8008702 <lv_obj_set_x+0x34>
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <lv_obj_set_x+0x42>
        lv_obj_set_style_x(obj, x, 0);
 8008702:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008706:	2200      	movs	r2, #0
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f005 fc5c 	bl	800dfc8 <lv_obj_set_style_x>
    }
}
 8008710:	bf00      	nop
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <lv_obj_set_y>:

void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_y;
    lv_style_value_t v_y;

    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8008724:	f107 0208 	add.w	r2, r7, #8
 8008728:	2300      	movs	r3, #0
 800872a:	2108      	movs	r1, #8
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f004 faaa 	bl	800cc86 <lv_obj_get_local_style_prop>
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]

    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d104      	bne.n	8008746 <lv_obj_set_y+0x2e>
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008742:	429a      	cmp	r2, r3
 8008744:	d102      	bne.n	800874c <lv_obj_set_y+0x34>
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d106      	bne.n	800875a <lv_obj_set_y+0x42>
        lv_obj_set_style_y(obj, y, 0);
 800874c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008750:	2200      	movs	r2, #0
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f005 fc4b 	bl	800dff0 <lv_obj_set_style_y>
    }
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <lv_obj_refr_size>:

bool lv_obj_refr_size(lv_obj_t * obj)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b090      	sub	sp, #64	; 0x40
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*If the width or height is set by a layout do not modify them*/
    if(obj->w_layout && obj->h_layout) return false;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d009      	beq.n	8008790 <lv_obj_refr_size+0x2c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <lv_obj_refr_size+0x2c>
 800878c:	2300      	movs	r3, #0
 800878e:	e221      	b.n	8008bd4 <lv_obj_refr_size+0x470>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f005 fd01 	bl	800e198 <lv_obj_get_parent>
 8008796:	6378      	str	r0, [r7, #52]	; 0x34
    if(parent == NULL) return false;
 8008798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <lv_obj_refr_size+0x3e>
 800879e:	2300      	movs	r3, #0
 80087a0:	e218      	b.n	8008bd4 <lv_obj_refr_size+0x470>

    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f002 f85e 	bl	800a864 <lv_obj_get_scroll_left>
 80087a8:	4603      	mov	r3, r0
 80087aa:	867b      	strh	r3, [r7, #50]	; 0x32
    bool w_is_content = false;
 80087ac:	2300      	movs	r3, #0
 80087ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool w_is_pct = false;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    lv_coord_t w;
    if(obj->w_layout) {
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d005      	beq.n	80087d4 <lv_obj_refr_size+0x70>
        w = lv_obj_get_width(obj);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fab1 	bl	8008d30 <lv_obj_get_width>
 80087ce:	4603      	mov	r3, r0
 80087d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80087d2:	e0a0      	b.n	8008916 <lv_obj_refr_size+0x1b2>
    }
    else {
        w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 80087d4:	2100      	movs	r1, #0
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff fdd5 	bl	8008386 <lv_obj_get_style_width>
 80087dc:	4603      	mov	r3, r0
 80087de:	87bb      	strh	r3, [r7, #60]	; 0x3c
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 80087e0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80087e4:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80087e8:	4293      	cmp	r3, r2
 80087ea:	bf0c      	ite	eq
 80087ec:	2301      	moveq	r3, #1
 80087ee:	2300      	movne	r3, #0
 80087f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 80087f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80087f6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80087fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fe:	d108      	bne.n	8008812 <lv_obj_refr_size+0xae>
 8008800:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008802:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008806:	b21b      	sxth	r3, r3
 8008808:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800880c:	dc01      	bgt.n	8008812 <lv_obj_refr_size+0xae>
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <lv_obj_refr_size+0xb0>
 8008812:	2300      	movs	r3, #0
 8008814:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008818:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8008824:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008826:	f000 fa9f 	bl	8008d68 <lv_obj_get_content_width>
 800882a:	4603      	mov	r3, r0
 800882c:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(w_is_content) {
 800882e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <lv_obj_refr_size+0xde>
            w = calc_content_width(obj);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 fa36 	bl	8009ca8 <calc_content_width>
 800883c:	4603      	mov	r3, r0
 800883e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008840:	e051      	b.n	80088e6 <lv_obj_refr_size+0x182>
        }
        else if(w_is_pct) {
 8008842:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008846:	2b00      	cmp	r3, #0
 8008848:	d04d      	beq.n	80088e6 <lv_obj_refr_size+0x182>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 800884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d128      	bne.n	80088ac <lv_obj_refr_size+0x148>
 800885a:	2100      	movs	r1, #0
 800885c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800885e:	f7ff fd92 	bl	8008386 <lv_obj_get_style_width>
 8008862:	4603      	mov	r3, r0
 8008864:	461a      	mov	r2, r3
 8008866:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800886a:	429a      	cmp	r2, r3
 800886c:	d11e      	bne.n	80088ac <lv_obj_refr_size+0x148>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 800886e:	2100      	movs	r1, #0
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fede 	bl	8008632 <lv_obj_get_style_border_width>
 8008876:	4603      	mov	r3, r0
 8008878:	85bb      	strh	r3, [r7, #44]	; 0x2c
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 800887a:	2100      	movs	r1, #0
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff feb4 	bl	80085ea <lv_obj_get_style_pad_left>
 8008882:	4603      	mov	r3, r0
 8008884:	b29a      	uxth	r2, r3
 8008886:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008888:	4413      	add	r3, r2
 800888a:	b29b      	uxth	r3, r3
 800888c:	87bb      	strh	r3, [r7, #60]	; 0x3c
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 800888e:	2100      	movs	r1, #0
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff febc 	bl	800860e <lv_obj_get_style_pad_right>
 8008896:	4603      	mov	r3, r0
 8008898:	461a      	mov	r2, r3
 800889a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800889e:	4413      	add	r3, r2
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088a4:	4413      	add	r3, r2
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 80088aa:	e01c      	b.n	80088e6 <lv_obj_refr_size+0x182>
            }
            else {
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 80088ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088ae:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80088b2:	b21b      	sxth	r3, r3
 80088b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088b8:	dd06      	ble.n	80088c8 <lv_obj_refr_size+0x164>
 80088ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088bc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80088c0:	b21b      	sxth	r3, r3
 80088c2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80088c6:	e003      	b.n	80088d0 <lv_obj_refr_size+0x16c>
 80088c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088ca:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80088ce:	b21b      	sxth	r3, r3
 80088d0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80088d4:	fb02 f303 	mul.w	r3, r2, r3
 80088d8:	4a9f      	ldr	r2, [pc, #636]	; (8008b58 <lv_obj_refr_size+0x3f4>)
 80088da:	fb82 1203 	smull	r1, r2, r2, r3
 80088de:	1152      	asrs	r2, r2, #5
 80088e0:	17db      	asrs	r3, r3, #31
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }

        lv_coord_t minw = lv_obj_get_style_min_width(obj, LV_PART_MAIN);
 80088e6:	2100      	movs	r1, #0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff fd5e 	bl	80083aa <lv_obj_get_style_min_width>
 80088ee:	4603      	mov	r3, r0
 80088f0:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_coord_t maxw = lv_obj_get_style_max_width(obj, LV_PART_MAIN);
 80088f2:	2100      	movs	r1, #0
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff fd6a 	bl	80083ce <lv_obj_get_style_max_width>
 80088fa:	4603      	mov	r3, r0
 80088fc:	853b      	strh	r3, [r7, #40]	; 0x28
        w = lv_clamp_width(w, minw, maxw, parent_w);
 80088fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008902:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8008906:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800890a:	f9b7 003c 	ldrsh.w	r0, [r7, #60]	; 0x3c
 800890e:	f001 f8db 	bl	8009ac8 <lv_clamp_width>
 8008912:	4603      	mov	r3, r0
 8008914:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }

    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 ff06 	bl	800a728 <lv_obj_get_scroll_top>
 800891c:	4603      	mov	r3, r0
 800891e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h;
    bool h_is_content = false;
 8008920:	2300      	movs	r3, #0
 8008922:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    bool h_is_pct = false;
 8008926:	2300      	movs	r3, #0
 8008928:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(obj->h_layout) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <lv_obj_refr_size+0x1e4>
        h = lv_obj_get_height(obj);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fa05 	bl	8008d4c <lv_obj_get_height>
 8008942:	4603      	mov	r3, r0
 8008944:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008946:	e0a0      	b.n	8008a8a <lv_obj_refr_size+0x326>
    }
    else {
        h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8008948:	2100      	movs	r1, #0
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fd51 	bl	80083f2 <lv_obj_get_style_height>
 8008950:	4603      	mov	r3, r0
 8008952:	877b      	strh	r3, [r7, #58]	; 0x3a
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 8008954:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8008958:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800895c:	4293      	cmp	r3, r2
 800895e:	bf0c      	ite	eq
 8008960:	2301      	moveq	r3, #1
 8008962:	2300      	movne	r3, #0
 8008964:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8008968:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800896a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800896e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008972:	d108      	bne.n	8008986 <lv_obj_refr_size+0x222>
 8008974:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008976:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800897a:	b21b      	sxth	r3, r3
 800897c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008980:	dc01      	bgt.n	8008986 <lv_obj_refr_size+0x222>
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <lv_obj_refr_size+0x224>
 8008986:	2300      	movs	r3, #0
 8008988:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800898c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8008998:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800899a:	f000 fa10 	bl	8008dbe <lv_obj_get_content_height>
 800899e:	4603      	mov	r3, r0
 80089a0:	847b      	strh	r3, [r7, #34]	; 0x22

        if(h_is_content) {
 80089a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <lv_obj_refr_size+0x252>
            h = calc_content_height(obj);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 faf2 	bl	8009f94 <calc_content_height>
 80089b0:	4603      	mov	r3, r0
 80089b2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80089b4:	e051      	b.n	8008a5a <lv_obj_refr_size+0x2f6>
        }
        else if(h_is_pct) {
 80089b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d04d      	beq.n	8008a5a <lv_obj_refr_size+0x2f6>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d128      	bne.n	8008a20 <lv_obj_refr_size+0x2bc>
 80089ce:	2100      	movs	r1, #0
 80089d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80089d2:	f7ff fd0e 	bl	80083f2 <lv_obj_get_style_height>
 80089d6:	4603      	mov	r3, r0
 80089d8:	461a      	mov	r2, r3
 80089da:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80089de:	429a      	cmp	r2, r3
 80089e0:	d11e      	bne.n	8008a20 <lv_obj_refr_size+0x2bc>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 80089e2:	2100      	movs	r1, #0
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff fe24 	bl	8008632 <lv_obj_get_style_border_width>
 80089ea:	4603      	mov	r3, r0
 80089ec:	843b      	strh	r3, [r7, #32]
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80089ee:	2100      	movs	r1, #0
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fdd6 	bl	80085a2 <lv_obj_get_style_pad_top>
 80089f6:	4603      	mov	r3, r0
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	8c3b      	ldrh	r3, [r7, #32]
 80089fc:	4413      	add	r3, r2
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	877b      	strh	r3, [r7, #58]	; 0x3a
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8008a02:	2100      	movs	r1, #0
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff fdde 	bl	80085c6 <lv_obj_get_style_pad_bottom>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008a12:	4413      	add	r3, r2
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a18:	4413      	add	r3, r2
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	877b      	strh	r3, [r7, #58]	; 0x3a
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8008a1e:	e01c      	b.n	8008a5a <lv_obj_refr_size+0x2f6>
            }
            else {
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8008a20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a22:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008a26:	b21b      	sxth	r3, r3
 8008a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a2c:	dd06      	ble.n	8008a3c <lv_obj_refr_size+0x2d8>
 8008a2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a30:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008a34:	b21b      	sxth	r3, r3
 8008a36:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8008a3a:	e003      	b.n	8008a44 <lv_obj_refr_size+0x2e0>
 8008a3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a3e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008a48:	fb02 f303 	mul.w	r3, r2, r3
 8008a4c:	4a42      	ldr	r2, [pc, #264]	; (8008b58 <lv_obj_refr_size+0x3f4>)
 8008a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8008a52:	1152      	asrs	r2, r2, #5
 8008a54:	17db      	asrs	r3, r3, #31
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
        }

        lv_coord_t minh = lv_obj_get_style_min_height(obj, LV_PART_MAIN);
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff fcda 	bl	8008416 <lv_obj_get_style_min_height>
 8008a62:	4603      	mov	r3, r0
 8008a64:	83fb      	strh	r3, [r7, #30]
        lv_coord_t maxh = lv_obj_get_style_max_height(obj, LV_PART_MAIN);
 8008a66:	2100      	movs	r1, #0
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff fce6 	bl	800843a <lv_obj_get_style_max_height>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	83bb      	strh	r3, [r7, #28]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8008a72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008a76:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008a7a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8008a7e:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	; 0x3a
 8008a82:	f001 f899 	bl	8009bb8 <lv_clamp_height>
 8008a86:	4603      	mov	r3, r0
 8008a88:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    /*calc_auto_size set the scroll x/y to 0 so revert the original value*/
    if(w_is_content || h_is_content) {
 8008a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d103      	bne.n	8008a9a <lv_obj_refr_size+0x336>
 8008a92:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <lv_obj_refr_size+0x346>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8008a9a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8008a9e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f002 fa0b 	bl	800aec0 <lv_obj_scroll_to>
    }

    /*Do nothing if the size is not changed*/
    /*It is very important else recursive resizing can occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f940 	bl	8008d30 <lv_obj_get_width>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d10a      	bne.n	8008ad2 <lv_obj_refr_size+0x36e>
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f945 	bl	8008d4c <lv_obj_get_height>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d101      	bne.n	8008ad2 <lv_obj_refr_size+0x36e>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e080      	b.n	8008bd4 <lv_obj_refr_size+0x470>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fef7 	bl	80098c6 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8008ad8:	f107 0310 	add.w	r3, r7, #16
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f917 	bl	8008d12 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8008ae4:	f107 0308 	add.w	r3, r7, #8
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008aec:	f000 f992 	bl	8008e14 <lv_obj_get_content_coords>

    /*If the object is already out of the parent and its position is changes
     *surely the scrollbars also changes so invalidate them*/
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8008af0:	f107 0108 	add.w	r1, r7, #8
 8008af4:	f107 0310 	add.w	r3, r7, #16
 8008af8:	2200      	movs	r2, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f018 f93e 	bl	8020d7c <_lv_area_is_in>
 8008b00:	4603      	mov	r3, r0
 8008b02:	76fb      	strb	r3, [r7, #27]
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8008b04:	7efb      	ldrb	r3, [r7, #27]
 8008b06:	f083 0301 	eor.w	r3, r3, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <lv_obj_refr_size+0x3b2>
 8008b10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008b12:	f003 f875 	bl	800bc00 <lv_obj_scrollbar_invalidate>

    /*Set the length and height
     *Be sure the content is not scrolled in an invalid position on the new size*/
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008b20:	4413      	add	r3, r2
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	b21a      	sxth	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	835a      	strh	r2, [r3, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008b2e:	2100      	movs	r1, #0
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff fda2 	bl	800867a <lv_obj_get_style_base_dir>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d10f      	bne.n	8008b5c <lv_obj_refr_size+0x3f8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	b21a      	sxth	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	829a      	strh	r2, [r3, #20]
 8008b54:	e00e      	b.n	8008b74 <lv_obj_refr_size+0x410>
 8008b56:	bf00      	nop
 8008b58:	51eb851f 	.word	0x51eb851f
    }
    else {
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008b66:	4413      	add	r3, r2
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	b21a      	sxth	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	831a      	strh	r2, [r3, #24]
    }

    /*Call the ancestor's event handler to the object with its new coordinates*/
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8008b74:	f107 0310 	add.w	r3, r7, #16
 8008b78:	461a      	mov	r2, r3
 8008b7a:	2129      	movs	r1, #41	; 0x29
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7fc f8cd 	bl	8004d1c <lv_event_send>

    /*Call the ancestor's event handler to the parent too*/
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	2122      	movs	r1, #34	; 0x22
 8008b86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008b88:	f7fc f8c8 	bl	8004d1c <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fe9a 	bl	80098c6 <lv_obj_invalidate>

    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8008b92:	2100      	movs	r1, #0
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f003 f870 	bl	800bc7a <lv_obj_readjust_scroll>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the scrollbars*/
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3314      	adds	r3, #20
 8008b9e:	f107 0108 	add.w	r1, r7, #8
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f018 f8e9 	bl	8020d7c <_lv_area_is_in>
 8008baa:	4603      	mov	r3, r0
 8008bac:	76bb      	strb	r3, [r7, #26]
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8008bae:	7efb      	ldrb	r3, [r7, #27]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d108      	bne.n	8008bc6 <lv_obj_refr_size+0x462>
 8008bb4:	7efb      	ldrb	r3, [r7, #27]
 8008bb6:	f083 0301 	eor.w	r3, r3, #1
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <lv_obj_refr_size+0x468>
 8008bc0:	7ebb      	ldrb	r3, [r7, #26]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <lv_obj_refr_size+0x468>
 8008bc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008bc8:	f003 f81a 	bl	800bc00 <lv_obj_scrollbar_invalidate>

    lv_obj_refresh_ext_draw_size(obj);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff fb25 	bl	800821c <lv_obj_refresh_ext_draw_size>

    return true;
 8008bd2:	2301      	movs	r3, #1
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3740      	adds	r7, #64	; 0x40
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8008be4:	4910      	ldr	r1, [pc, #64]	; (8008c28 <lv_obj_is_layout_positioned+0x4c>)
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fd fa86 	bl	80060f8 <lv_obj_has_flag_any>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <lv_obj_is_layout_positioned+0x1a>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e014      	b.n	8008c20 <lv_obj_is_layout_positioned+0x44>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f005 face 	bl	800e198 <lv_obj_get_parent>
 8008bfc:	60f8      	str	r0, [r7, #12]
    if(parent == NULL) return false;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <lv_obj_is_layout_positioned+0x2c>
 8008c04:	2300      	movs	r3, #0
 8008c06:	e00b      	b.n	8008c20 <lv_obj_is_layout_positioned+0x44>

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
 8008c08:	2100      	movs	r1, #0
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff fd23 	bl	8008656 <lv_obj_get_style_layout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	60bb      	str	r3, [r7, #8]
    if(layout) return true;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <lv_obj_is_layout_positioned+0x42>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e000      	b.n	8008c20 <lv_obj_is_layout_positioned+0x44>
    else return false;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	00060001 	.word	0x00060001

08008c2c <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
    obj->layout_inv = 1;
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f005 fa59 	bl	800e0fa <lv_obj_get_screen>
 8008c48:	60f8      	str	r0, [r7, #12]
    scr->scr_layout_inv = 1;
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008c50:	f043 0302 	orr.w	r3, r3, #2
 8008c54:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f005 fa63 	bl	800e124 <lv_obj_get_disp>
 8008c5e:	60b8      	str	r0, [r7, #8]
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <lv_obj_mark_layout_as_dirty+0x46>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f01a fd16 	bl	802369e <lv_timer_resume>
}
 8008c72:	bf00      	nop
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <lv_obj_update_layout>:

void lv_obj_update_layout(const lv_obj_t * obj)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
    static bool mutex = false;
    if(mutex) {
 8008c84:	4b12      	ldr	r3, [pc, #72]	; (8008cd0 <lv_obj_update_layout+0x54>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d11d      	bne.n	8008cc8 <lv_obj_update_layout+0x4c>
        LV_LOG_TRACE("Already running, returning");
        return;
    }
    mutex = true;
 8008c8c:	4b10      	ldr	r3, [pc, #64]	; (8008cd0 <lv_obj_update_layout+0x54>)
 8008c8e:	2201      	movs	r2, #1
 8008c90:	701a      	strb	r2, [r3, #0]

    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f005 fa31 	bl	800e0fa <lv_obj_get_screen>
 8008c98:	60f8      	str	r0, [r7, #12]

    /*Repeat until there where layout invalidations*/
    while(scr->scr_layout_inv) {
 8008c9a:	e009      	b.n	8008cb0 <lv_obj_update_layout+0x34>
        LV_LOG_INFO("Layout update begin");
        scr->scr_layout_inv = 0;
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008ca2:	f36f 0341 	bfc	r3, #1, #1
 8008ca6:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
        layout_update_core(scr);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f001 fa38 	bl	800a120 <layout_update_core>
    while(scr->scr_layout_inv) {
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1ed      	bne.n	8008c9c <lv_obj_update_layout+0x20>
        LV_LOG_TRACE("Layout update end");
    }

    mutex = false;
 8008cc0:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <lv_obj_update_layout+0x54>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	e000      	b.n	8008cca <lv_obj_update_layout+0x4e>
        return;
 8008cc8:	bf00      	nop
}
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20000708 	.word	0x20000708

08008cd4 <lv_obj_align>:
{
    lv_obj_set_style_align(obj, align, 0);
}

void lv_obj_align(lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	4608      	mov	r0, r1
 8008cde:	4611      	mov	r1, r2
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	72fb      	strb	r3, [r7, #11]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	813b      	strh	r3, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	80fb      	strh	r3, [r7, #6]
    lv_obj_set_style_align(obj, align, 0);
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f005 f98f 	bl	800e018 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8008cfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cfe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008d02:	4619      	mov	r1, r3
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f7ff fcca 	bl	800869e <lv_obj_set_pos>
}
 8008d0a:	bf00      	nop
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <lv_obj_get_coords>:
    lv_obj_set_pos(obj, x, y);

}

void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3314      	adds	r3, #20
 8008d20:	4619      	mov	r1, r3
 8008d22:	6838      	ldr	r0, [r7, #0]
 8008d24:	f7ff fae2 	bl	80082ec <lv_area_copy>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <lv_obj_get_width>:
    return lv_obj_get_style_y(obj, LV_PART_MAIN);
}


lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3314      	adds	r3, #20
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff faf4 	bl	800832a <lv_area_get_width>
 8008d42:	4603      	mov	r3, r0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <lv_obj_get_height>:

lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3314      	adds	r3, #20
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff fafd 	bl	8008358 <lv_area_get_height>
 8008d5e:	4603      	mov	r3, r0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fc39 	bl	80085ea <lv_obj_get_style_pad_left>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	81fb      	strh	r3, [r7, #14]
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fc45 	bl	800860e <lv_obj_get_style_pad_right>
 8008d84:	4603      	mov	r3, r0
 8008d86:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008d88:	2100      	movs	r1, #0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff fc51 	bl	8008632 <lv_obj_get_style_border_width>
 8008d90:	4603      	mov	r3, r0
 8008d92:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff ffcb 	bl	8008d30 <lv_obj_get_width>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	89fb      	ldrh	r3, [r7, #14]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	89bb      	ldrh	r3, [r7, #12]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	897b      	ldrh	r3, [r7, #10]
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	b21b      	sxth	r3, r3
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff fbea 	bl	80085a2 <lv_obj_get_style_pad_top>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	81fb      	strh	r3, [r7, #14]
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff fbf6 	bl	80085c6 <lv_obj_get_style_pad_bottom>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7ff fc26 	bl	8008632 <lv_obj_get_style_border_width>
 8008de6:	4603      	mov	r3, r0
 8008de8:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff ffae 	bl	8008d4c <lv_obj_get_height>
 8008df0:	4603      	mov	r3, r0
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	89fb      	ldrh	r3, [r7, #14]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	89bb      	ldrh	r3, [r7, #12]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	897b      	ldrh	r3, [r7, #10]
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	b21b      	sxth	r3, r3
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff fc06 	bl	8008632 <lv_obj_get_style_border_width>
 8008e26:	4603      	mov	r3, r0
 8008e28:	81fb      	strh	r3, [r7, #14]

    lv_obj_get_coords(obj, area);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff ff70 	bl	8008d12 <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8008e32:	89fb      	ldrh	r3, [r7, #14]
 8008e34:	425b      	negs	r3, r3
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	b21b      	sxth	r3, r3
 8008e3a:	89fa      	ldrh	r2, [r7, #14]
 8008e3c:	4252      	negs	r2, r2
 8008e3e:	b292      	uxth	r2, r2
 8008e40:	b212      	sxth	r2, r2
 8008e42:	4619      	mov	r1, r3
 8008e44:	6838      	ldr	r0, [r7, #0]
 8008e46:	f017 fd49 	bl	80208dc <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff fbcc 	bl	80085ea <lv_obj_get_style_pad_left>
 8008e52:	4603      	mov	r3, r0
 8008e54:	4619      	mov	r1, r3
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	b28b      	uxth	r3, r1
 8008e60:	4413      	add	r3, r2
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	b21a      	sxth	r2, r3
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	801a      	strh	r2, [r3, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff fbce 	bl	800860e <lv_obj_get_style_pad_right>
 8008e72:	4603      	mov	r3, r0
 8008e74:	4619      	mov	r1, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	b28b      	uxth	r3, r1
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	b21a      	sxth	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	809a      	strh	r2, [r3, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fb88 	bl	80085a2 <lv_obj_get_style_pad_top>
 8008e92:	4603      	mov	r3, r0
 8008e94:	4619      	mov	r1, r3
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	b28b      	uxth	r3, r1
 8008ea0:	4413      	add	r3, r2
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	b21a      	sxth	r2, r3
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	805a      	strh	r2, [r3, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff fb8a 	bl	80085c6 <lv_obj_get_style_pad_bottom>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	b28b      	uxth	r3, r1
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	b21a      	sxth	r2, r3
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	80da      	strh	r2, [r3, #6]

}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
    lv_point_t p = {0, LV_COORD_MIN};
 8008eda:	2300      	movs	r3, #0
 8008edc:	81bb      	strh	r3, [r7, #12]
 8008ede:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008ee2:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008ee4:	f107 030c 	add.w	r3, r7, #12
 8008ee8:	461a      	mov	r2, r3
 8008eea:	212c      	movs	r1, #44	; 0x2c
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7fb ff15 	bl	8004d1c <lv_event_send>
    return p.x;
 8008ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
    lv_point_t p = {LV_COORD_MIN, 0};
 8008f06:	f24e 0301 	movw	r3, #57345	; 0xe001
 8008f0a:	81bb      	strh	r3, [r7, #12]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008f10:	f107 030c 	add.w	r3, r7, #12
 8008f14:	461a      	mov	r2, r3
 8008f16:	212c      	movs	r1, #44	; 0x2c
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7fb feff 	bl	8004d1c <lv_event_send>
    return p.y;
 8008f1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8008f32:	2100      	movs	r1, #0
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff fa26 	bl	8008386 <lv_obj_get_style_width>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8008f3e:	2100      	movs	r1, #0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff fa56 	bl	80083f2 <lv_obj_get_style_height>
 8008f46:	4603      	mov	r3, r0
 8008f48:	81bb      	strh	r3, [r7, #12]
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8008f4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f4e:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d007      	beq.n	8008f66 <lv_obj_refresh_self_size+0x3c>
 8008f56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008f5a:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d001      	beq.n	8008f66 <lv_obj_refresh_self_size+0x3c>
 8008f62:	2300      	movs	r3, #0
 8008f64:	e003      	b.n	8008f6e <lv_obj_refresh_self_size+0x44>

    lv_obj_mark_layout_as_dirty(obj);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff fe60 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
    return true;
 8008f6c:	2301      	movs	r3, #1
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <lv_obj_refr_pos>:

void lv_obj_refr_pos(lv_obj_t * obj)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
    if(lv_obj_is_layout_positioned(obj)) return;
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fe2b 	bl	8008bdc <lv_obj_is_layout_positioned>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f040 81ef 	bne.w	800936c <lv_obj_refr_pos+0x3f4>


    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f005 f902 	bl	800e198 <lv_obj_get_parent>
 8008f94:	6138      	str	r0, [r7, #16]
    lv_coord_t x = lv_obj_get_style_x(obj, LV_PART_MAIN);
 8008f96:	2100      	movs	r1, #0
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff fa60 	bl	800845e <lv_obj_get_style_x>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	83fb      	strh	r3, [r7, #30]
    lv_coord_t y = lv_obj_get_style_y(obj, LV_PART_MAIN);
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fa6c 	bl	8008482 <lv_obj_get_style_y>
 8008faa:	4603      	mov	r3, r0
 8008fac:	83bb      	strh	r3, [r7, #28]

    if(parent == NULL) {
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d108      	bne.n	8008fc6 <lv_obj_refr_pos+0x4e>
        lv_obj_move_to(obj, x, y);
 8008fb4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008fb8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9d8 	bl	8009374 <lv_obj_move_to>
        return;
 8008fc4:	e1d3      	b.n	800936e <lv_obj_refr_pos+0x3f6>
    }

    /*Handle percentage value*/
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8008fc6:	6938      	ldr	r0, [r7, #16]
 8008fc8:	f7ff fece 	bl	8008d68 <lv_obj_get_content_width>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	81fb      	strh	r3, [r7, #14]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8008fd0:	6938      	ldr	r0, [r7, #16]
 8008fd2:	f7ff fef4 	bl	8008dbe <lv_obj_get_content_height>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	81bb      	strh	r3, [r7, #12]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8008fda:	8bfb      	ldrh	r3, [r7, #30]
 8008fdc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe4:	d123      	bne.n	800902e <lv_obj_refr_pos+0xb6>
 8008fe6:	8bfb      	ldrh	r3, [r7, #30]
 8008fe8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008fec:	b21b      	sxth	r3, r3
 8008fee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008ff2:	dc1c      	bgt.n	800902e <lv_obj_refr_pos+0xb6>
 8008ff4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008ff8:	8bfb      	ldrh	r3, [r7, #30]
 8008ffa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008ffe:	b21b      	sxth	r3, r3
 8009000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009004:	dd06      	ble.n	8009014 <lv_obj_refr_pos+0x9c>
 8009006:	8bfb      	ldrh	r3, [r7, #30]
 8009008:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800900c:	b21b      	sxth	r3, r3
 800900e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009012:	e003      	b.n	800901c <lv_obj_refr_pos+0xa4>
 8009014:	8bfb      	ldrh	r3, [r7, #30]
 8009016:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800901a:	b21b      	sxth	r3, r3
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	4aa6      	ldr	r2, [pc, #664]	; (80092bc <lv_obj_refr_pos+0x344>)
 8009022:	fb82 1203 	smull	r1, r2, r2, r3
 8009026:	1152      	asrs	r2, r2, #5
 8009028:	17db      	asrs	r3, r3, #31
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	83fb      	strh	r3, [r7, #30]
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800902e:	8bbb      	ldrh	r3, [r7, #28]
 8009030:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009038:	d123      	bne.n	8009082 <lv_obj_refr_pos+0x10a>
 800903a:	8bbb      	ldrh	r3, [r7, #28]
 800903c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009040:	b21b      	sxth	r3, r3
 8009042:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009046:	dc1c      	bgt.n	8009082 <lv_obj_refr_pos+0x10a>
 8009048:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800904c:	8bbb      	ldrh	r3, [r7, #28]
 800904e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009052:	b21b      	sxth	r3, r3
 8009054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009058:	dd06      	ble.n	8009068 <lv_obj_refr_pos+0xf0>
 800905a:	8bbb      	ldrh	r3, [r7, #28]
 800905c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009060:	b21b      	sxth	r3, r3
 8009062:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009066:	e003      	b.n	8009070 <lv_obj_refr_pos+0xf8>
 8009068:	8bbb      	ldrh	r3, [r7, #28]
 800906a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800906e:	b21b      	sxth	r3, r3
 8009070:	fb02 f303 	mul.w	r3, r2, r3
 8009074:	4a91      	ldr	r2, [pc, #580]	; (80092bc <lv_obj_refr_pos+0x344>)
 8009076:	fb82 1203 	smull	r1, r2, r2, r3
 800907a:	1152      	asrs	r2, r2, #5
 800907c:	17db      	asrs	r3, r3, #31
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	83bb      	strh	r3, [r7, #28]

    /*Handle percentage value of translate*/
    lv_coord_t tr_x = lv_obj_get_style_translate_x(obj, LV_PART_MAIN);
 8009082:	2100      	movs	r1, #0
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fa20 	bl	80084ca <lv_obj_get_style_translate_x>
 800908a:	4603      	mov	r3, r0
 800908c:	837b      	strh	r3, [r7, #26]
    lv_coord_t tr_y = lv_obj_get_style_translate_y(obj, LV_PART_MAIN);
 800908e:	2100      	movs	r1, #0
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff fa2c 	bl	80084ee <lv_obj_get_style_translate_y>
 8009096:	4603      	mov	r3, r0
 8009098:	833b      	strh	r3, [r7, #24]
    lv_coord_t w = lv_obj_get_width(obj);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff fe48 	bl	8008d30 <lv_obj_get_width>
 80090a0:	4603      	mov	r3, r0
 80090a2:	817b      	strh	r3, [r7, #10]
    lv_coord_t h = lv_obj_get_height(obj);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff fe51 	bl	8008d4c <lv_obj_get_height>
 80090aa:	4603      	mov	r3, r0
 80090ac:	813b      	strh	r3, [r7, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80090ae:	8b7b      	ldrh	r3, [r7, #26]
 80090b0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80090b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b8:	d123      	bne.n	8009102 <lv_obj_refr_pos+0x18a>
 80090ba:	8b7b      	ldrh	r3, [r7, #26]
 80090bc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80090c0:	b21b      	sxth	r3, r3
 80090c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80090c6:	dc1c      	bgt.n	8009102 <lv_obj_refr_pos+0x18a>
 80090c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80090cc:	8b7b      	ldrh	r3, [r7, #26]
 80090ce:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80090d2:	b21b      	sxth	r3, r3
 80090d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090d8:	dd06      	ble.n	80090e8 <lv_obj_refr_pos+0x170>
 80090da:	8b7b      	ldrh	r3, [r7, #26]
 80090dc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80090e0:	b21b      	sxth	r3, r3
 80090e2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80090e6:	e003      	b.n	80090f0 <lv_obj_refr_pos+0x178>
 80090e8:	8b7b      	ldrh	r3, [r7, #26]
 80090ea:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80090ee:	b21b      	sxth	r3, r3
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	4a71      	ldr	r2, [pc, #452]	; (80092bc <lv_obj_refr_pos+0x344>)
 80090f6:	fb82 1203 	smull	r1, r2, r2, r3
 80090fa:	1152      	asrs	r2, r2, #5
 80090fc:	17db      	asrs	r3, r3, #31
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	837b      	strh	r3, [r7, #26]
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8009102:	8b3b      	ldrh	r3, [r7, #24]
 8009104:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800910c:	d123      	bne.n	8009156 <lv_obj_refr_pos+0x1de>
 800910e:	8b3b      	ldrh	r3, [r7, #24]
 8009110:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009114:	b21b      	sxth	r3, r3
 8009116:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800911a:	dc1c      	bgt.n	8009156 <lv_obj_refr_pos+0x1de>
 800911c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009120:	8b3b      	ldrh	r3, [r7, #24]
 8009122:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009126:	b21b      	sxth	r3, r3
 8009128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800912c:	dd06      	ble.n	800913c <lv_obj_refr_pos+0x1c4>
 800912e:	8b3b      	ldrh	r3, [r7, #24]
 8009130:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009134:	b21b      	sxth	r3, r3
 8009136:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800913a:	e003      	b.n	8009144 <lv_obj_refr_pos+0x1cc>
 800913c:	8b3b      	ldrh	r3, [r7, #24]
 800913e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009142:	b21b      	sxth	r3, r3
 8009144:	fb02 f303 	mul.w	r3, r2, r3
 8009148:	4a5c      	ldr	r2, [pc, #368]	; (80092bc <lv_obj_refr_pos+0x344>)
 800914a:	fb82 1203 	smull	r1, r2, r2, r3
 800914e:	1152      	asrs	r2, r2, #5
 8009150:	17db      	asrs	r3, r3, #31
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	833b      	strh	r3, [r7, #24]

    /*Use the translation*/
    x += tr_x;
 8009156:	8bfa      	ldrh	r2, [r7, #30]
 8009158:	8b7b      	ldrh	r3, [r7, #26]
 800915a:	4413      	add	r3, r2
 800915c:	b29b      	uxth	r3, r3
 800915e:	83fb      	strh	r3, [r7, #30]
    y += tr_y;
 8009160:	8bba      	ldrh	r2, [r7, #28]
 8009162:	8b3b      	ldrh	r3, [r7, #24]
 8009164:	4413      	add	r3, r2
 8009166:	b29b      	uxth	r3, r3
 8009168:	83bb      	strh	r3, [r7, #28]

    lv_align_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 800916a:	2100      	movs	r1, #0
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff f99a 	bl	80084a6 <lv_obj_get_style_align>
 8009172:	4603      	mov	r3, r0
 8009174:	75fb      	strb	r3, [r7, #23]

    if(align == LV_ALIGN_DEFAULT) {
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10b      	bne.n	8009194 <lv_obj_refr_pos+0x21c>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 800917c:	2100      	movs	r1, #0
 800917e:	6938      	ldr	r0, [r7, #16]
 8009180:	f7ff fa7b 	bl	800867a <lv_obj_get_style_base_dir>
 8009184:	4603      	mov	r3, r0
 8009186:	2b01      	cmp	r3, #1
 8009188:	d102      	bne.n	8009190 <lv_obj_refr_pos+0x218>
 800918a:	2303      	movs	r3, #3
 800918c:	75fb      	strb	r3, [r7, #23]
 800918e:	e001      	b.n	8009194 <lv_obj_refr_pos+0x21c>
        else align = LV_ALIGN_TOP_LEFT;
 8009190:	2301      	movs	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]
    }

    if(align == LV_ALIGN_TOP_LEFT) {
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d108      	bne.n	80091ac <lv_obj_refr_pos+0x234>
        lv_obj_move_to(obj, x, y);
 800919a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800919e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f8e5 	bl	8009374 <lv_obj_move_to>
 80091aa:	e0e0      	b.n	800936e <lv_obj_refr_pos+0x3f6>
    }
    else {

        switch(align) {
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	3b02      	subs	r3, #2
 80091b0:	2b07      	cmp	r3, #7
 80091b2:	f200 80d1 	bhi.w	8009358 <lv_obj_refr_pos+0x3e0>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <lv_obj_refr_pos+0x244>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091dd 	.word	0x080091dd
 80091c0:	0800920b 	.word	0x0800920b
 80091c4:	0800924b 	.word	0x0800924b
 80091c8:	0800925d 	.word	0x0800925d
 80091cc:	0800929b 	.word	0x0800929b
 80091d0:	0800921d 	.word	0x0800921d
 80091d4:	080092c1 	.word	0x080092c1
 80091d8:	080092ff 	.word	0x080092ff
            case LV_ALIGN_TOP_MID:
                x += pw / 2 - w / 2;
 80091dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	da00      	bge.n	80091e6 <lv_obj_refr_pos+0x26e>
 80091e4:	3301      	adds	r3, #1
 80091e6:	105b      	asrs	r3, r3, #1
 80091e8:	b21b      	sxth	r3, r3
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	da00      	bge.n	80091f6 <lv_obj_refr_pos+0x27e>
 80091f4:	3301      	adds	r3, #1
 80091f6:	105b      	asrs	r3, r3, #1
 80091f8:	b21b      	sxth	r3, r3
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	b29a      	uxth	r2, r3
 8009200:	8bfb      	ldrh	r3, [r7, #30]
 8009202:	4413      	add	r3, r2
 8009204:	b29b      	uxth	r3, r3
 8009206:	83fb      	strh	r3, [r7, #30]
                break;
 8009208:	e0a7      	b.n	800935a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_TOP_RIGHT:
                x += pw - w;
 800920a:	89fa      	ldrh	r2, [r7, #14]
 800920c:	897b      	ldrh	r3, [r7, #10]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	b29a      	uxth	r2, r3
 8009212:	8bfb      	ldrh	r3, [r7, #30]
 8009214:	4413      	add	r3, r2
 8009216:	b29b      	uxth	r3, r3
 8009218:	83fb      	strh	r3, [r7, #30]
                break;
 800921a:	e09e      	b.n	800935a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_LEFT_MID:
                y += ph / 2 - h / 2;
 800921c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	da00      	bge.n	8009226 <lv_obj_refr_pos+0x2ae>
 8009224:	3301      	adds	r3, #1
 8009226:	105b      	asrs	r3, r3, #1
 8009228:	b21b      	sxth	r3, r3
 800922a:	b29a      	uxth	r2, r3
 800922c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	da00      	bge.n	8009236 <lv_obj_refr_pos+0x2be>
 8009234:	3301      	adds	r3, #1
 8009236:	105b      	asrs	r3, r3, #1
 8009238:	b21b      	sxth	r3, r3
 800923a:	b29b      	uxth	r3, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	b29a      	uxth	r2, r3
 8009240:	8bbb      	ldrh	r3, [r7, #28]
 8009242:	4413      	add	r3, r2
 8009244:	b29b      	uxth	r3, r3
 8009246:	83bb      	strh	r3, [r7, #28]
                break;
 8009248:	e087      	b.n	800935a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_LEFT:
                y += ph - h;
 800924a:	89ba      	ldrh	r2, [r7, #12]
 800924c:	893b      	ldrh	r3, [r7, #8]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	b29a      	uxth	r2, r3
 8009252:	8bbb      	ldrh	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	b29b      	uxth	r3, r3
 8009258:	83bb      	strh	r3, [r7, #28]
                break;
 800925a:	e07e      	b.n	800935a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_MID:
                x += pw / 2 - w / 2;
 800925c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009260:	2b00      	cmp	r3, #0
 8009262:	da00      	bge.n	8009266 <lv_obj_refr_pos+0x2ee>
 8009264:	3301      	adds	r3, #1
 8009266:	105b      	asrs	r3, r3, #1
 8009268:	b21b      	sxth	r3, r3
 800926a:	b29a      	uxth	r2, r3
 800926c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009270:	2b00      	cmp	r3, #0
 8009272:	da00      	bge.n	8009276 <lv_obj_refr_pos+0x2fe>
 8009274:	3301      	adds	r3, #1
 8009276:	105b      	asrs	r3, r3, #1
 8009278:	b21b      	sxth	r3, r3
 800927a:	b29b      	uxth	r3, r3
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	b29a      	uxth	r2, r3
 8009280:	8bfb      	ldrh	r3, [r7, #30]
 8009282:	4413      	add	r3, r2
 8009284:	b29b      	uxth	r3, r3
 8009286:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 8009288:	89ba      	ldrh	r2, [r7, #12]
 800928a:	893b      	ldrh	r3, [r7, #8]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	b29a      	uxth	r2, r3
 8009290:	8bbb      	ldrh	r3, [r7, #28]
 8009292:	4413      	add	r3, r2
 8009294:	b29b      	uxth	r3, r3
 8009296:	83bb      	strh	r3, [r7, #28]
                break;
 8009298:	e05f      	b.n	800935a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_RIGHT:
                x += pw - w;
 800929a:	89fa      	ldrh	r2, [r7, #14]
 800929c:	897b      	ldrh	r3, [r7, #10]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	8bfb      	ldrh	r3, [r7, #30]
 80092a4:	4413      	add	r3, r2
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 80092aa:	89ba      	ldrh	r2, [r7, #12]
 80092ac:	893b      	ldrh	r3, [r7, #8]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	8bbb      	ldrh	r3, [r7, #28]
 80092b4:	4413      	add	r3, r2
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	83bb      	strh	r3, [r7, #28]
                break;
 80092ba:	e04e      	b.n	800935a <lv_obj_refr_pos+0x3e2>
 80092bc:	51eb851f 	.word	0x51eb851f
            case LV_ALIGN_RIGHT_MID:
                x += pw - w;
 80092c0:	89fa      	ldrh	r2, [r7, #14]
 80092c2:	897b      	ldrh	r3, [r7, #10]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	8bfb      	ldrh	r3, [r7, #30]
 80092ca:	4413      	add	r3, r2
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 80092d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	da00      	bge.n	80092da <lv_obj_refr_pos+0x362>
 80092d8:	3301      	adds	r3, #1
 80092da:	105b      	asrs	r3, r3, #1
 80092dc:	b21b      	sxth	r3, r3
 80092de:	b29a      	uxth	r2, r3
 80092e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	da00      	bge.n	80092ea <lv_obj_refr_pos+0x372>
 80092e8:	3301      	adds	r3, #1
 80092ea:	105b      	asrs	r3, r3, #1
 80092ec:	b21b      	sxth	r3, r3
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	8bbb      	ldrh	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	83bb      	strh	r3, [r7, #28]
                break;
 80092fc:	e02d      	b.n	800935a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_CENTER:
                x += pw / 2 - w / 2;
 80092fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009302:	2b00      	cmp	r3, #0
 8009304:	da00      	bge.n	8009308 <lv_obj_refr_pos+0x390>
 8009306:	3301      	adds	r3, #1
 8009308:	105b      	asrs	r3, r3, #1
 800930a:	b21b      	sxth	r3, r3
 800930c:	b29a      	uxth	r2, r3
 800930e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009312:	2b00      	cmp	r3, #0
 8009314:	da00      	bge.n	8009318 <lv_obj_refr_pos+0x3a0>
 8009316:	3301      	adds	r3, #1
 8009318:	105b      	asrs	r3, r3, #1
 800931a:	b21b      	sxth	r3, r3
 800931c:	b29b      	uxth	r3, r3
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	b29a      	uxth	r2, r3
 8009322:	8bfb      	ldrh	r3, [r7, #30]
 8009324:	4413      	add	r3, r2
 8009326:	b29b      	uxth	r3, r3
 8009328:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 800932a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	da00      	bge.n	8009334 <lv_obj_refr_pos+0x3bc>
 8009332:	3301      	adds	r3, #1
 8009334:	105b      	asrs	r3, r3, #1
 8009336:	b21b      	sxth	r3, r3
 8009338:	b29a      	uxth	r2, r3
 800933a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800933e:	2b00      	cmp	r3, #0
 8009340:	da00      	bge.n	8009344 <lv_obj_refr_pos+0x3cc>
 8009342:	3301      	adds	r3, #1
 8009344:	105b      	asrs	r3, r3, #1
 8009346:	b21b      	sxth	r3, r3
 8009348:	b29b      	uxth	r3, r3
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	b29a      	uxth	r2, r3
 800934e:	8bbb      	ldrh	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	b29b      	uxth	r3, r3
 8009354:	83bb      	strh	r3, [r7, #28]
                break;
 8009356:	e000      	b.n	800935a <lv_obj_refr_pos+0x3e2>
            default:
                break;
 8009358:	bf00      	nop
        }
        lv_obj_move_to(obj, x, y);
 800935a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800935e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f805 	bl	8009374 <lv_obj_move_to>
 800936a:	e000      	b.n	800936e <lv_obj_refr_pos+0x3f6>
    if(lv_obj_is_layout_positioned(obj)) return;
 800936c:	bf00      	nop
    }
}
 800936e:	3720      	adds	r7, #32
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <lv_obj_move_to>:

void lv_obj_move_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8009374:	b590      	push	{r4, r7, lr}
 8009376:	b08d      	sub	sp, #52	; 0x34
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	807b      	strh	r3, [r7, #2]
 8009380:	4613      	mov	r3, r2
 8009382:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * parent = obj->parent;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28

    if(parent) {
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	2b00      	cmp	r3, #0
 800938e:	d05a      	beq.n	8009446 <lv_obj_move_to+0xd2>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8009390:	2100      	movs	r1, #0
 8009392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009394:	f7ff f929 	bl	80085ea <lv_obj_get_style_pad_left>
 8009398:	4603      	mov	r3, r0
 800939a:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 800939c:	2100      	movs	r1, #0
 800939e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a0:	f7ff f8ff 	bl	80085a2 <lv_obj_get_style_pad_top>
 80093a4:	4603      	mov	r3, r0
 80093a6:	84bb      	strh	r3, [r7, #36]	; 0x24

        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80093a8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7fc fe8e 	bl	80060ce <lv_obj_has_flag>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d016      	beq.n	80093e6 <lv_obj_move_to+0x72>
            x += pad_left + parent->coords.x1;
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80093be:	b29a      	uxth	r2, r3
 80093c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093c2:	4413      	add	r3, r2
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	887b      	ldrh	r3, [r7, #2]
 80093c8:	4413      	add	r3, r2
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1;
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093d8:	4413      	add	r3, r2
 80093da:	b29a      	uxth	r2, r3
 80093dc:	883b      	ldrh	r3, [r7, #0]
 80093de:	4413      	add	r3, r2
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	803b      	strh	r3, [r7, #0]
 80093e4:	e01f      	b.n	8009426 <lv_obj_move_to+0xb2>
        }
        else {
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80093e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80093ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ec:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80093f0:	189c      	adds	r4, r3, r2
 80093f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f4:	f001 f968 	bl	800a6c8 <lv_obj_get_scroll_x>
 80093f8:	4603      	mov	r3, r0
 80093fa:	1ae3      	subs	r3, r4, r3
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	887b      	ldrh	r3, [r7, #2]
 8009400:	4413      	add	r3, r2
 8009402:	b29b      	uxth	r3, r3
 8009404:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8009406:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800940a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800940c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8009410:	189c      	adds	r4, r3, r2
 8009412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009414:	f001 f970 	bl	800a6f8 <lv_obj_get_scroll_y>
 8009418:	4603      	mov	r3, r0
 800941a:	1ae3      	subs	r3, r4, r3
 800941c:	b29a      	uxth	r2, r3
 800941e:	883b      	ldrh	r3, [r7, #0]
 8009420:	4413      	add	r3, r2
 8009422:	b29b      	uxth	r3, r3
 8009424:	803b      	strh	r3, [r7, #0]
        }

        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8009426:	2100      	movs	r1, #0
 8009428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800942a:	f7ff f902 	bl	8008632 <lv_obj_get_style_border_width>
 800942e:	4603      	mov	r3, r0
 8009430:	847b      	strh	r3, [r7, #34]	; 0x22
        x += border_width;
 8009432:	887a      	ldrh	r2, [r7, #2]
 8009434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009436:	4413      	add	r3, r2
 8009438:	b29b      	uxth	r3, r3
 800943a:	807b      	strh	r3, [r7, #2]
        y += border_width;
 800943c:	883a      	ldrh	r2, [r7, #0]
 800943e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009440:	4413      	add	r3, r2
 8009442:	b29b      	uxth	r3, r3
 8009444:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 8009446:	887a      	ldrh	r2, [r7, #2]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800944e:	b29b      	uxth	r3, r3
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	b29b      	uxth	r3, r3
 8009454:	b21b      	sxth	r3, r3
 8009456:	83bb      	strh	r3, [r7, #28]
    diff.y = y - obj->coords.y1;
 8009458:	883a      	ldrh	r2, [r7, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009460:	b29b      	uxth	r3, r3
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	b29b      	uxth	r3, r3
 8009466:	b21b      	sxth	r3, r3
 8009468:	83fb      	strh	r3, [r7, #30]

    /*Do nothing if the position is not changed*/
    /*It is very important else recursive positioning can
     *occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 800946a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d104      	bne.n	800947c <lv_obj_move_to+0x108>
 8009472:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 808e 	beq.w	8009598 <lv_obj_move_to+0x224>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa22 	bl	80098c6 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8009482:	f107 0314 	add.w	r3, r7, #20
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff fc42 	bl	8008d12 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    bool on1 = false;
 800948e:	2300      	movs	r3, #0
 8009490:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(parent) {
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d01a      	beq.n	80094d0 <lv_obj_move_to+0x15c>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 800949a:	f107 030c 	add.w	r3, r7, #12
 800949e:	4619      	mov	r1, r3
 80094a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a2:	f7ff fcb7 	bl	8008e14 <lv_obj_get_content_coords>

        /*If the object is already out of the parent and its position is changes
         *surely the scrollbars also changes so invalidate them*/
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 80094a6:	f107 010c 	add.w	r1, r7, #12
 80094aa:	f107 0314 	add.w	r3, r7, #20
 80094ae:	2200      	movs	r2, #0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f017 fc63 	bl	8020d7c <_lv_area_is_in>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 80094bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094c0:	f083 0301 	eor.w	r3, r3, #1
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <lv_obj_move_to+0x15c>
 80094ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094cc:	f002 fb98 	bl	800bc00 <lv_obj_scrollbar_invalidate>
    }

    obj->coords.x1 += diff.x;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	4413      	add	r3, r2
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	b21a      	sxth	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	829a      	strh	r2, [r3, #20]
    obj->coords.y1 += diff.y;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	4413      	add	r3, r2
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	b21a      	sxth	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	82da      	strh	r2, [r3, #22]
    obj->coords.x2 += diff.x;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009506:	b29a      	uxth	r2, r3
 8009508:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800950c:	b29b      	uxth	r3, r3
 800950e:	4413      	add	r3, r2
 8009510:	b29b      	uxth	r3, r3
 8009512:	b21a      	sxth	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	831a      	strh	r2, [r3, #24]
    obj->coords.y2 += diff.y;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800951e:	b29a      	uxth	r2, r3
 8009520:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009524:	b29b      	uxth	r3, r3
 8009526:	4413      	add	r3, r2
 8009528:	b29b      	uxth	r3, r3
 800952a:	b21a      	sxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	835a      	strh	r2, [r3, #26]

    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8009530:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8009534:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009538:	2300      	movs	r3, #0
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f830 	bl	80095a0 <lv_obj_move_children_by>

    /*Call the ancestor's event handler to the parent too*/
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	d004      	beq.n	8009550 <lv_obj_move_to+0x1dc>
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	2122      	movs	r1, #34	; 0x22
 800954a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954c:	f7fb fbe6 	bl	8004d1c <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f9b8 	bl	80098c6 <lv_obj_invalidate>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the srollbars*/
    if(parent) {
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	2b00      	cmp	r3, #0
 800955a:	d01e      	beq.n	800959a <lv_obj_move_to+0x226>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3314      	adds	r3, #20
 8009560:	f107 010c 	add.w	r1, r7, #12
 8009564:	2200      	movs	r2, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f017 fc08 	bl	8020d7c <_lv_area_is_in>
 800956c:	4603      	mov	r3, r0
 800956e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8009572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10a      	bne.n	8009590 <lv_obj_move_to+0x21c>
 800957a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800957e:	f083 0301 	eor.w	r3, r3, #1
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d008      	beq.n	800959a <lv_obj_move_to+0x226>
 8009588:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <lv_obj_move_to+0x226>
 8009590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009592:	f002 fb35 	bl	800bc00 <lv_obj_scrollbar_invalidate>
 8009596:	e000      	b.n	800959a <lv_obj_move_to+0x226>
    if(diff.x == 0 && diff.y == 0) return;
 8009598:	bf00      	nop
    }
}
 800959a:	3734      	adds	r7, #52	; 0x34
 800959c:	46bd      	mov	sp, r7
 800959e:	bd90      	pop	{r4, r7, pc}

080095a0 <lv_obj_move_children_by>:

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	4608      	mov	r0, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	461a      	mov	r2, r3
 80095ae:	4603      	mov	r3, r0
 80095b0:	817b      	strh	r3, [r7, #10]
 80095b2:	460b      	mov	r3, r1
 80095b4:	813b      	strh	r3, [r7, #8]
 80095b6:	4613      	mov	r3, r2
 80095b8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f004 fe30 	bl	800e220 <lv_obj_get_child_cnt>
 80095c0:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 80095c2:	2300      	movs	r3, #0
 80095c4:	61fb      	str	r3, [r7, #28]
 80095c6:	e047      	b.n	8009658 <lv_obj_move_children_by+0xb8>
        lv_obj_t * child = obj->spec_attr->children[i];
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	617b      	str	r3, [r7, #20]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d007      	beq.n	80095ee <lv_obj_move_children_by+0x4e>
 80095de:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80095e2:	6978      	ldr	r0, [r7, #20]
 80095e4:	f7fc fd73 	bl	80060ce <lv_obj_has_flag>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d130      	bne.n	8009650 <lv_obj_move_children_by+0xb0>
        child->coords.x1 += x_diff;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	897b      	ldrh	r3, [r7, #10]
 80095f8:	4413      	add	r3, r2
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	b21a      	sxth	r2, r3
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	829a      	strh	r2, [r3, #20]
        child->coords.y1 += y_diff;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009608:	b29a      	uxth	r2, r3
 800960a:	893b      	ldrh	r3, [r7, #8]
 800960c:	4413      	add	r3, r2
 800960e:	b29b      	uxth	r3, r3
 8009610:	b21a      	sxth	r2, r3
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	82da      	strh	r2, [r3, #22]
        child->coords.x2 += x_diff;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800961c:	b29a      	uxth	r2, r3
 800961e:	897b      	ldrh	r3, [r7, #10]
 8009620:	4413      	add	r3, r2
 8009622:	b29b      	uxth	r3, r3
 8009624:	b21a      	sxth	r2, r3
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	831a      	strh	r2, [r3, #24]
        child->coords.y2 += y_diff;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009630:	b29a      	uxth	r2, r3
 8009632:	893b      	ldrh	r3, [r7, #8]
 8009634:	4413      	add	r3, r2
 8009636:	b29b      	uxth	r3, r3
 8009638:	b21a      	sxth	r2, r3
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	835a      	strh	r2, [r3, #26]

        lv_obj_move_children_by(child, x_diff, y_diff, false);
 800963e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009642:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009646:	2300      	movs	r3, #0
 8009648:	6978      	ldr	r0, [r7, #20]
 800964a:	f7ff ffa9 	bl	80095a0 <lv_obj_move_children_by>
 800964e:	e000      	b.n	8009652 <lv_obj_move_children_by+0xb2>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8009650:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	3301      	adds	r3, #1
 8009656:	61fb      	str	r3, [r7, #28]
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	429a      	cmp	r2, r3
 800965e:	d3b3      	bcc.n	80095c8 <lv_obj_move_children_by+0x28>
    }
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	3720      	adds	r7, #32
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <lv_obj_transform_point>:

void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, bool recursive, bool inv)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b086      	sub	sp, #24
 800966e:	af00      	add	r7, sp, #0
 8009670:	60f8      	str	r0, [r7, #12]
 8009672:	60b9      	str	r1, [r7, #8]
 8009674:	4611      	mov	r1, r2
 8009676:	461a      	mov	r2, r3
 8009678:	460b      	mov	r3, r1
 800967a:	71fb      	strb	r3, [r7, #7]
 800967c:	4613      	mov	r3, r2
 800967e:	71bb      	strb	r3, [r7, #6]
    if(obj) {
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d036      	beq.n	80096f4 <lv_obj_transform_point+0x8a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7fe fe1a 	bl	80082c0 <_lv_obj_get_layer_type>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]
        bool do_tranf = layer_type == LV_LAYER_TYPE_TRANSFORM;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	2b02      	cmp	r3, #2
 8009694:	bf0c      	ite	eq
 8009696:	2301      	moveq	r3, #1
 8009698:	2300      	movne	r3, #0
 800969a:	75bb      	strb	r3, [r7, #22]
        if(inv) {
 800969c:	79bb      	ldrb	r3, [r7, #6]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d014      	beq.n	80096cc <lv_obj_transform_point+0x62>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80096a2:	79fb      	ldrb	r3, [r7, #7]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <lv_obj_transform_point+0x4e>
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f004 fd75 	bl	800e198 <lv_obj_get_parent>
 80096ae:	79bb      	ldrb	r3, [r7, #6]
 80096b0:	79fa      	ldrb	r2, [r7, #7]
 80096b2:	68b9      	ldr	r1, [r7, #8]
 80096b4:	f7ff ffd9 	bl	800966a <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 80096b8:	7dbb      	ldrb	r3, [r7, #22]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d01a      	beq.n	80096f4 <lv_obj_transform_point+0x8a>
 80096be:	79bb      	ldrb	r3, [r7, #6]
 80096c0:	461a      	mov	r2, r3
 80096c2:	68b9      	ldr	r1, [r7, #8]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fd8d 	bl	800a1e4 <transform_point>
        else {
            if(do_tranf) transform_point(obj, p, inv);
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
        }
    }
}
 80096ca:	e013      	b.n	80096f4 <lv_obj_transform_point+0x8a>
            if(do_tranf) transform_point(obj, p, inv);
 80096cc:	7dbb      	ldrb	r3, [r7, #22]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d005      	beq.n	80096de <lv_obj_transform_point+0x74>
 80096d2:	79bb      	ldrb	r3, [r7, #6]
 80096d4:	461a      	mov	r2, r3
 80096d6:	68b9      	ldr	r1, [r7, #8]
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fd83 	bl	800a1e4 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d007      	beq.n	80096f4 <lv_obj_transform_point+0x8a>
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f004 fd57 	bl	800e198 <lv_obj_get_parent>
 80096ea:	79bb      	ldrb	r3, [r7, #6]
 80096ec:	79fa      	ldrb	r2, [r7, #7]
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	f7ff ffbb 	bl	800966a <lv_obj_transform_point>
}
 80096f4:	bf00      	nop
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <lv_obj_get_transformed_area>:

void lv_obj_get_transformed_area(const lv_obj_t * obj, lv_area_t * area, bool recursive,
                                 bool inv)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4611      	mov	r1, r2
 8009708:	461a      	mov	r2, r3
 800970a:	460b      	mov	r3, r1
 800970c:	71fb      	strb	r3, [r7, #7]
 800970e:	4613      	mov	r3, r2
 8009710:	71bb      	strb	r3, [r7, #6]
    lv_point_t p[4] = {
        {area->x1, area->y1},
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 8009718:	823b      	strh	r3, [r7, #16]
        {area->x1, area->y1},
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 8009720:	827b      	strh	r3, [r7, #18]
        {area->x1, area->y2},
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 8009728:	82bb      	strh	r3, [r7, #20]
        {area->x1, area->y2},
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 8009730:	82fb      	strh	r3, [r7, #22]
        {area->x2, area->y1},
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 8009738:	833b      	strh	r3, [r7, #24]
        {area->x2, area->y1},
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 8009740:	837b      	strh	r3, [r7, #26]
        {area->x2, area->y2},
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 8009748:	83bb      	strh	r3, [r7, #28]
        {area->x2, area->y2},
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 8009750:	83fb      	strh	r3, [r7, #30]
    };

    lv_obj_transform_point(obj, &p[0], recursive, inv);
 8009752:	79bb      	ldrb	r3, [r7, #6]
 8009754:	79fa      	ldrb	r2, [r7, #7]
 8009756:	f107 0110 	add.w	r1, r7, #16
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff ff85 	bl	800966a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 8009760:	79b8      	ldrb	r0, [r7, #6]
 8009762:	79fa      	ldrb	r2, [r7, #7]
 8009764:	f107 0310 	add.w	r3, r7, #16
 8009768:	1d19      	adds	r1, r3, #4
 800976a:	4603      	mov	r3, r0
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7ff ff7c 	bl	800966a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 8009772:	79b8      	ldrb	r0, [r7, #6]
 8009774:	79fa      	ldrb	r2, [r7, #7]
 8009776:	f107 0310 	add.w	r3, r7, #16
 800977a:	f103 0108 	add.w	r1, r3, #8
 800977e:	4603      	mov	r3, r0
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f7ff ff72 	bl	800966a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 8009786:	79b8      	ldrb	r0, [r7, #6]
 8009788:	79fa      	ldrb	r2, [r7, #7]
 800978a:	f107 0310 	add.w	r3, r7, #16
 800978e:	f103 010c 	add.w	r1, r3, #12
 8009792:	4603      	mov	r3, r0
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7ff ff68 	bl	800966a <lv_obj_transform_point>

    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 800979a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800979e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80097a2:	4293      	cmp	r3, r2
 80097a4:	bfa8      	it	ge
 80097a6:	4613      	movge	r3, r2
 80097a8:	b21a      	sxth	r2, r3
 80097aa:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80097ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80097b2:	428b      	cmp	r3, r1
 80097b4:	bfa8      	it	ge
 80097b6:	460b      	movge	r3, r1
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	4293      	cmp	r3, r2
 80097bc:	bfa8      	it	ge
 80097be:	4613      	movge	r3, r2
 80097c0:	b21a      	sxth	r2, r3
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	801a      	strh	r2, [r3, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 80097c6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80097ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80097ce:	4293      	cmp	r3, r2
 80097d0:	bfb8      	it	lt
 80097d2:	4613      	movlt	r3, r2
 80097d4:	b21a      	sxth	r2, r3
 80097d6:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80097da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80097de:	428b      	cmp	r3, r1
 80097e0:	bfb8      	it	lt
 80097e2:	460b      	movlt	r3, r1
 80097e4:	b21b      	sxth	r3, r3
 80097e6:	4293      	cmp	r3, r2
 80097e8:	bfb8      	it	lt
 80097ea:	4613      	movlt	r3, r2
 80097ec:	b21a      	sxth	r2, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	809a      	strh	r2, [r3, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 80097f2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80097f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80097fa:	4293      	cmp	r3, r2
 80097fc:	bfa8      	it	ge
 80097fe:	4613      	movge	r3, r2
 8009800:	b21a      	sxth	r2, r3
 8009802:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8009806:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800980a:	428b      	cmp	r3, r1
 800980c:	bfa8      	it	ge
 800980e:	460b      	movge	r3, r1
 8009810:	b21b      	sxth	r3, r3
 8009812:	4293      	cmp	r3, r2
 8009814:	bfa8      	it	ge
 8009816:	4613      	movge	r3, r2
 8009818:	b21a      	sxth	r2, r3
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	805a      	strh	r2, [r3, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 800981e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009822:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009826:	4293      	cmp	r3, r2
 8009828:	bfb8      	it	lt
 800982a:	4613      	movlt	r3, r2
 800982c:	b21a      	sxth	r2, r3
 800982e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8009832:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009836:	428b      	cmp	r3, r1
 8009838:	bfb8      	it	lt
 800983a:	460b      	movlt	r3, r1
 800983c:	b21b      	sxth	r3, r3
 800983e:	4293      	cmp	r3, r2
 8009840:	bfb8      	it	lt
 8009842:	4613      	movlt	r3, r2
 8009844:	b21a      	sxth	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	80da      	strh	r2, [r3, #6]
    lv_area_increase(area, 5, 5);
 800984a:	2205      	movs	r2, #5
 800984c:	2105      	movs	r1, #5
 800984e:	68b8      	ldr	r0, [r7, #8]
 8009850:	f017 f844 	bl	80208dc <lv_area_increase>
}
 8009854:	bf00      	nop
 8009856:	3720      	adds	r7, #32
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <lv_obj_invalidate_area>:


void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f004 fc5c 	bl	800e124 <lv_obj_get_disp>
 800986c:	6178      	str	r0, [r7, #20]
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f7fb f94a 	bl	8004b08 <lv_disp_is_invalidation_enabled>
 8009874:	4603      	mov	r3, r0
 8009876:	f083 0301 	eor.w	r3, r3, #1
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b00      	cmp	r3, #0
 800987e:	d11c      	bne.n	80098ba <lv_obj_invalidate_area+0x5e>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 8009880:	f107 030c 	add.w	r3, r7, #12
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe fd30 	bl	80082ec <lv_area_copy>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 800988c:	f107 030c 	add.w	r3, r7, #12
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f853 	bl	800993e <lv_obj_area_is_visible>
 8009898:	4603      	mov	r3, r0
 800989a:	f083 0301 	eor.w	r3, r3, #1
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10c      	bne.n	80098be <lv_obj_invalidate_area+0x62>

    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f004 fc3d 	bl	800e124 <lv_obj_get_disp>
 80098aa:	4602      	mov	r2, r0
 80098ac:	f107 030c 	add.w	r3, r7, #12
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f004 ff52 	bl	800e75c <_lv_inv_area>
 80098b8:	e002      	b.n	80098c0 <lv_obj_invalidate_area+0x64>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 80098ba:	bf00      	nop
 80098bc:	e000      	b.n	80098c0 <lv_obj_invalidate_area+0x64>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 80098be:	bf00      	nop
}
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <lv_obj_invalidate>:

void lv_obj_invalidate(const lv_obj_t * obj)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b086      	sub	sp, #24
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7fe fce2 	bl	8008298 <_lv_obj_get_ext_draw_size>
 80098d4:	4603      	mov	r3, r0
 80098d6:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f103 0214 	add.w	r2, r3, #20
 80098de:	f107 030c 	add.w	r3, r7, #12
 80098e2:	4611      	mov	r1, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fe fd01 	bl	80082ec <lv_area_copy>
    obj_coords.x1 -= ext_size;
 80098ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	8afb      	ldrh	r3, [r7, #22]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	b21b      	sxth	r3, r3
 80098f8:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 80098fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80098fe:	b29a      	uxth	r2, r3
 8009900:	8afb      	ldrh	r3, [r7, #22]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	b29b      	uxth	r3, r3
 8009906:	b21b      	sxth	r3, r3
 8009908:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 800990a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800990e:	b29a      	uxth	r2, r3
 8009910:	8afb      	ldrh	r3, [r7, #22]
 8009912:	4413      	add	r3, r2
 8009914:	b29b      	uxth	r3, r3
 8009916:	b21b      	sxth	r3, r3
 8009918:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 800991a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800991e:	b29a      	uxth	r2, r3
 8009920:	8afb      	ldrh	r3, [r7, #22]
 8009922:	4413      	add	r3, r2
 8009924:	b29b      	uxth	r3, r3
 8009926:	b21b      	sxth	r3, r3
 8009928:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 800992a:	f107 030c 	add.w	r3, r7, #12
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff ff93 	bl	800985c <lv_obj_invalidate_area>

}
 8009936:	bf00      	nop
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <lv_obj_area_is_visible>:

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b08a      	sub	sp, #40	; 0x28
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8009948:	2101      	movs	r1, #1
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fc fbbf 	bl	80060ce <lv_obj_has_flag>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <lv_obj_area_is_visible+0x1c>
 8009956:	2300      	movs	r3, #0
 8009958:	e0b2      	b.n	8009ac0 <lv_obj_area_is_visible+0x182>

    /*Invalidate the object only if it belongs to the current or previous or one of the layers'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f004 fbcd 	bl	800e0fa <lv_obj_get_screen>
 8009960:	6238      	str	r0, [r7, #32]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8009962:	6a38      	ldr	r0, [r7, #32]
 8009964:	f004 fbde 	bl	800e124 <lv_obj_get_disp>
 8009968:	61f8      	str	r0, [r7, #28]
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800996a:	69f8      	ldr	r0, [r7, #28]
 800996c:	f7fa fdd2 	bl	8004514 <lv_disp_get_scr_act>
 8009970:	4602      	mov	r2, r0
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	4293      	cmp	r3, r2
 8009976:	d016      	beq.n	80099a6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8009978:	69f8      	ldr	r0, [r7, #28]
 800997a:	f7fa fde0 	bl	800453e <lv_disp_get_scr_prev>
 800997e:	4602      	mov	r2, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	4293      	cmp	r3, r2
 8009984:	d00f      	beq.n	80099a6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8009986:	69f8      	ldr	r0, [r7, #28]
 8009988:	f7fa fdfe 	bl	8004588 <lv_disp_get_layer_top>
 800998c:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_scr_prev(disp) &&
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	4293      	cmp	r3, r2
 8009992:	d008      	beq.n	80099a6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8009994:	69f8      	ldr	r0, [r7, #28]
 8009996:	f7fa fe0c 	bl	80045b2 <lv_disp_get_layer_sys>
 800999a:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_layer_top(disp) &&
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	4293      	cmp	r3, r2
 80099a0:	d001      	beq.n	80099a6 <lv_obj_area_is_visible+0x68>
        return false;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e08c      	b.n	8009ac0 <lv_obj_area_is_visible+0x182>
    }

    /*Truncate the area to the object*/
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80099a6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7fc fba4 	bl	80060f8 <lv_obj_has_flag_any>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f083 0301 	eor.w	r3, r3, #1
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d03c      	beq.n	8009a36 <lv_obj_area_is_visible+0xf8>
        lv_area_t obj_coords;
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7fe fc6b 	bl	8008298 <_lv_obj_get_ext_draw_size>
 80099c2:	4603      	mov	r3, r0
 80099c4:	837b      	strh	r3, [r7, #26]
        lv_area_copy(&obj_coords, &obj->coords);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f103 0214 	add.w	r2, r3, #20
 80099cc:	f107 0310 	add.w	r3, r7, #16
 80099d0:	4611      	mov	r1, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fc8a 	bl	80082ec <lv_area_copy>
        obj_coords.x1 -= ext_size;
 80099d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80099dc:	b29a      	uxth	r2, r3
 80099de:	8b7b      	ldrh	r3, [r7, #26]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	b21b      	sxth	r3, r3
 80099e6:	823b      	strh	r3, [r7, #16]
        obj_coords.y1 -= ext_size;
 80099e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	8b7b      	ldrh	r3, [r7, #26]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	b21b      	sxth	r3, r3
 80099f6:	827b      	strh	r3, [r7, #18]
        obj_coords.x2 += ext_size;
 80099f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	8b7b      	ldrh	r3, [r7, #26]
 8009a00:	4413      	add	r3, r2
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	b21b      	sxth	r3, r3
 8009a06:	82bb      	strh	r3, [r7, #20]
        obj_coords.y2 += ext_size;
 8009a08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	8b7b      	ldrh	r3, [r7, #26]
 8009a10:	4413      	add	r3, r2
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	b21b      	sxth	r3, r3
 8009a16:	82fb      	strh	r3, [r7, #22]

        /*The area is not on the object*/
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8009a18:	f107 0310 	add.w	r3, r7, #16
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6838      	ldr	r0, [r7, #0]
 8009a22:	f016 ffc7 	bl	80209b4 <_lv_area_intersect>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f083 0301 	eor.w	r3, r3, #1
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <lv_obj_area_is_visible+0xf8>
 8009a32:	2300      	movs	r3, #0
 8009a34:	e044      	b.n	8009ac0 <lv_obj_area_is_visible+0x182>
    }

    lv_obj_get_transformed_area(obj, area, true, false);
 8009a36:	2300      	movs	r3, #0
 8009a38:	2201      	movs	r2, #1
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff fe5d 	bl	80096fc <lv_obj_get_transformed_area>


    /*Truncate recursively to the parents*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f004 fba8 	bl	800e198 <lv_obj_get_parent>
 8009a48:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 8009a4a:	e035      	b.n	8009ab8 <lv_obj_area_is_visible+0x17a>
        /*If the parent is hidden then the child is hidden and won't be drawn*/
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a50:	f7fc fb3d 	bl	80060ce <lv_obj_has_flag>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <lv_obj_area_is_visible+0x120>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e030      	b.n	8009ac0 <lv_obj_area_is_visible+0x182>

        /*Truncate to the parent and if no common parts break*/
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8009a5e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a64:	f7fc fb48 	bl	80060f8 <lv_obj_has_flag_any>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f083 0301 	eor.w	r3, r3, #1
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d01d      	beq.n	8009ab0 <lv_obj_area_is_visible+0x172>
            lv_area_t par_area = par->coords;
 8009a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a76:	f107 0308 	add.w	r3, r7, #8
 8009a7a:	3214      	adds	r2, #20
 8009a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a80:	e883 0003 	stmia.w	r3, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a8e:	f7ff fe35 	bl	80096fc <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 8009a92:	f107 0308 	add.w	r3, r7, #8
 8009a96:	461a      	mov	r2, r3
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6838      	ldr	r0, [r7, #0]
 8009a9c:	f016 ff8a 	bl	80209b4 <_lv_area_intersect>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f083 0301 	eor.w	r3, r3, #1
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <lv_obj_area_is_visible+0x172>
 8009aac:	2300      	movs	r3, #0
 8009aae:	e007      	b.n	8009ac0 <lv_obj_area_is_visible+0x182>
        }

        par = lv_obj_get_parent(par);
 8009ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ab2:	f004 fb71 	bl	800e198 <lv_obj_get_parent>
 8009ab6:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1c6      	bne.n	8009a4c <lv_obj_area_is_visible+0x10e>
    }

    return true;
 8009abe:	2301      	movs	r3, #1
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3728      	adds	r7, #40	; 0x28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <lv_clamp_width>:

    return res;
}

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 8009ac8:	b490      	push	{r4, r7}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4623      	mov	r3, r4
 8009ad8:	80fb      	strh	r3, [r7, #6]
 8009ada:	4603      	mov	r3, r0
 8009adc:	80bb      	strh	r3, [r7, #4]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	807b      	strh	r3, [r7, #2]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8009ae6:	88bb      	ldrh	r3, [r7, #4]
 8009ae8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009af0:	d123      	bne.n	8009b3a <lv_clamp_width+0x72>
 8009af2:	88bb      	ldrh	r3, [r7, #4]
 8009af4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009af8:	b21b      	sxth	r3, r3
 8009afa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009afe:	dc1c      	bgt.n	8009b3a <lv_clamp_width+0x72>
 8009b00:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009b04:	88bb      	ldrh	r3, [r7, #4]
 8009b06:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009b0a:	b21b      	sxth	r3, r3
 8009b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b10:	dd06      	ble.n	8009b20 <lv_clamp_width+0x58>
 8009b12:	88bb      	ldrh	r3, [r7, #4]
 8009b14:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009b18:	b21b      	sxth	r3, r3
 8009b1a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009b1e:	e003      	b.n	8009b28 <lv_clamp_width+0x60>
 8009b20:	88bb      	ldrh	r3, [r7, #4]
 8009b22:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009b26:	b21b      	sxth	r3, r3
 8009b28:	fb02 f303 	mul.w	r3, r2, r3
 8009b2c:	4a21      	ldr	r2, [pc, #132]	; (8009bb4 <lv_clamp_width+0xec>)
 8009b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8009b32:	1152      	asrs	r2, r2, #5
 8009b34:	17db      	asrs	r3, r3, #31
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8009b3a:	887b      	ldrh	r3, [r7, #2]
 8009b3c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b44:	d123      	bne.n	8009b8e <lv_clamp_width+0xc6>
 8009b46:	887b      	ldrh	r3, [r7, #2]
 8009b48:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009b4c:	b21b      	sxth	r3, r3
 8009b4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009b52:	dc1c      	bgt.n	8009b8e <lv_clamp_width+0xc6>
 8009b54:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009b58:	887b      	ldrh	r3, [r7, #2]
 8009b5a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009b5e:	b21b      	sxth	r3, r3
 8009b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b64:	dd06      	ble.n	8009b74 <lv_clamp_width+0xac>
 8009b66:	887b      	ldrh	r3, [r7, #2]
 8009b68:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009b6c:	b21b      	sxth	r3, r3
 8009b6e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009b72:	e003      	b.n	8009b7c <lv_clamp_width+0xb4>
 8009b74:	887b      	ldrh	r3, [r7, #2]
 8009b76:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009b7a:	b21b      	sxth	r3, r3
 8009b7c:	fb02 f303 	mul.w	r3, r2, r3
 8009b80:	4a0c      	ldr	r2, [pc, #48]	; (8009bb4 <lv_clamp_width+0xec>)
 8009b82:	fb82 1203 	smull	r1, r2, r2, r3
 8009b86:	1152      	asrs	r2, r2, #5
 8009b88:	17db      	asrs	r3, r3, #31
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_width, width, max_width);
 8009b8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b96:	4293      	cmp	r3, r2
 8009b98:	bfa8      	it	ge
 8009b9a:	4613      	movge	r3, r2
 8009b9c:	b21b      	sxth	r3, r3
 8009b9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	bfb8      	it	lt
 8009ba6:	4613      	movlt	r3, r2
 8009ba8:	b21b      	sxth	r3, r3
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bc90      	pop	{r4, r7}
 8009bb2:	4770      	bx	lr
 8009bb4:	51eb851f 	.word	0x51eb851f

08009bb8 <lv_clamp_height>:

lv_coord_t lv_clamp_height(lv_coord_t height, lv_coord_t min_height, lv_coord_t max_height, lv_coord_t ref_height)
{
 8009bb8:	b490      	push	{r4, r7}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4623      	mov	r3, r4
 8009bc8:	80fb      	strh	r3, [r7, #6]
 8009bca:	4603      	mov	r3, r0
 8009bcc:	80bb      	strh	r3, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	807b      	strh	r3, [r7, #2]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 8009bd6:	88bb      	ldrh	r3, [r7, #4]
 8009bd8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009be0:	d123      	bne.n	8009c2a <lv_clamp_height+0x72>
 8009be2:	88bb      	ldrh	r3, [r7, #4]
 8009be4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009be8:	b21b      	sxth	r3, r3
 8009bea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009bee:	dc1c      	bgt.n	8009c2a <lv_clamp_height+0x72>
 8009bf0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009bf4:	88bb      	ldrh	r3, [r7, #4]
 8009bf6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009bfa:	b21b      	sxth	r3, r3
 8009bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c00:	dd06      	ble.n	8009c10 <lv_clamp_height+0x58>
 8009c02:	88bb      	ldrh	r3, [r7, #4]
 8009c04:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009c08:	b21b      	sxth	r3, r3
 8009c0a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009c0e:	e003      	b.n	8009c18 <lv_clamp_height+0x60>
 8009c10:	88bb      	ldrh	r3, [r7, #4]
 8009c12:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009c16:	b21b      	sxth	r3, r3
 8009c18:	fb02 f303 	mul.w	r3, r2, r3
 8009c1c:	4a21      	ldr	r2, [pc, #132]	; (8009ca4 <lv_clamp_height+0xec>)
 8009c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8009c22:	1152      	asrs	r2, r2, #5
 8009c24:	17db      	asrs	r3, r3, #31
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8009c2a:	887b      	ldrh	r3, [r7, #2]
 8009c2c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c34:	d123      	bne.n	8009c7e <lv_clamp_height+0xc6>
 8009c36:	887b      	ldrh	r3, [r7, #2]
 8009c38:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009c3c:	b21b      	sxth	r3, r3
 8009c3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009c42:	dc1c      	bgt.n	8009c7e <lv_clamp_height+0xc6>
 8009c44:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009c48:	887b      	ldrh	r3, [r7, #2]
 8009c4a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009c4e:	b21b      	sxth	r3, r3
 8009c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c54:	dd06      	ble.n	8009c64 <lv_clamp_height+0xac>
 8009c56:	887b      	ldrh	r3, [r7, #2]
 8009c58:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009c62:	e003      	b.n	8009c6c <lv_clamp_height+0xb4>
 8009c64:	887b      	ldrh	r3, [r7, #2]
 8009c66:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8009c6a:	b21b      	sxth	r3, r3
 8009c6c:	fb02 f303 	mul.w	r3, r2, r3
 8009c70:	4a0c      	ldr	r2, [pc, #48]	; (8009ca4 <lv_clamp_height+0xec>)
 8009c72:	fb82 1203 	smull	r1, r2, r2, r3
 8009c76:	1152      	asrs	r2, r2, #5
 8009c78:	17db      	asrs	r3, r3, #31
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_height, height, max_height);
 8009c7e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c86:	4293      	cmp	r3, r2
 8009c88:	bfa8      	it	ge
 8009c8a:	4613      	movge	r3, r2
 8009c8c:	b21b      	sxth	r3, r3
 8009c8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009c92:	4293      	cmp	r3, r2
 8009c94:	bfb8      	it	lt
 8009c96:	4613      	movlt	r3, r2
 8009c98:	b21b      	sxth	r3, r3
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc90      	pop	{r4, r7}
 8009ca2:	4770      	bx	lr
 8009ca4:	51eb851f 	.word	0x51eb851f

08009ca8 <calc_content_width>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
 8009ca8:	b590      	push	{r4, r7, lr}
 8009caa:	b08d      	sub	sp, #52	; 0x34
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f001 f923 	bl	800af00 <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009cba:	2100      	movs	r1, #0
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7fe fcb8 	bl	8008632 <lv_obj_get_style_border_width>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7fe fca0 	bl	800860e <lv_obj_get_style_pad_right>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cd4:	4413      	add	r3, r2
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7fe fc84 	bl	80085ea <lv_obj_get_style_pad_left>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ce8:	4413      	add	r3, r2
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff f8ef 	bl	8008ed2 <lv_obj_get_self_width>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cfa:	4413      	add	r3, r2
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d00:	4413      	add	r3, r2
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	843b      	strh	r3, [r7, #32]

    lv_coord_t child_res = LV_COORD_MIN;
 8009d06:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009d0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f004 fa87 	bl	800e220 <lv_obj_get_child_cnt>
 8009d12:	61f8      	str	r0, [r7, #28]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8009d14:	2100      	movs	r1, #0
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7fe fcaf 	bl	800867a <lv_obj_get_style_base_dir>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	f040 8094 	bne.w	8009e4c <calc_content_width+0x1a4>
        for(i = 0; i < child_cnt; i++) {
 8009d24:	2300      	movs	r3, #0
 8009d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d28:	e07f      	b.n	8009e2a <calc_content_width+0x182>
            lv_obj_t * child = obj->spec_attr->children[i];
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	613b      	str	r3, [r7, #16]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009d3a:	4994      	ldr	r1, [pc, #592]	; (8009f8c <calc_content_width+0x2e4>)
 8009d3c:	6938      	ldr	r0, [r7, #16]
 8009d3e:	f7fc f9db 	bl	80060f8 <lv_obj_has_flag_any>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d16c      	bne.n	8009e22 <calc_content_width+0x17a>

            if(!lv_obj_is_layout_positioned(child)) {
 8009d48:	6938      	ldr	r0, [r7, #16]
 8009d4a:	f7fe ff47 	bl	8008bdc <lv_obj_is_layout_positioned>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f083 0301 	eor.w	r3, r3, #1
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d053      	beq.n	8009e02 <calc_content_width+0x15a>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6938      	ldr	r0, [r7, #16]
 8009d5e:	f7fe fba2 	bl	80084a6 <lv_obj_get_style_align>
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]
                switch(align) {
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d825      	bhi.n	8009db8 <calc_content_width+0x110>
 8009d6c:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <calc_content_width+0xcc>)
 8009d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d72:	bf00      	nop
 8009d74:	08009d99 	.word	0x08009d99
 8009d78:	08009db9 	.word	0x08009db9
 8009d7c:	08009db9 	.word	0x08009db9
 8009d80:	08009d99 	.word	0x08009d99
 8009d84:	08009db9 	.word	0x08009db9
 8009d88:	08009db9 	.word	0x08009db9
 8009d8c:	08009d99 	.word	0x08009d99
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009d99 	.word	0x08009d99
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_RIGHT:
                    case LV_ALIGN_BOTTOM_RIGHT:
                    case LV_ALIGN_RIGHT_MID:
                        /*Normal right aligns. Other are ignored due to possible circular dependencies*/
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009dae:	4293      	cmp	r3, r2
 8009db0:	bfb8      	it	lt
 8009db2:	4613      	movlt	r3, r2
 8009db4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8009db6:	e035      	b.n	8009e24 <calc_content_width+0x17c>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8009db8:	2100      	movs	r1, #0
 8009dba:	6938      	ldr	r0, [r7, #16]
 8009dbc:	f7fe fb4f 	bl	800845e <lv_obj_get_style_x>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d12e      	bne.n	8009e24 <calc_content_width+0x17c>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8009dc6:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	3314      	adds	r3, #20
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe faab 	bl	800832a <lv_area_get_width>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009ddc:	4413      	add	r3, r2
 8009dde:	429c      	cmp	r4, r3
 8009de0:	dc0b      	bgt.n	8009dfa <calc_content_width+0x152>
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	3314      	adds	r3, #20
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fa9f 	bl	800832a <lv_area_get_width>
 8009dec:	4603      	mov	r3, r0
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009df2:	4413      	add	r3, r2
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	b21b      	sxth	r3, r3
 8009df8:	e001      	b.n	8009dfe <calc_content_width+0x156>
 8009dfa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009dfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009e00:	e010      	b.n	8009e24 <calc_content_width+0x17c>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	bfb8      	it	lt
 8009e1c:	4613      	movlt	r3, r2
 8009e1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009e20:	e000      	b.n	8009e24 <calc_content_width+0x17c>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009e22:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	3301      	adds	r3, #1
 8009e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	f4ff af7b 	bcc.w	8009d2a <calc_content_width+0x82>
            }
        }
        if(child_res != LV_COORD_MIN) {
 8009e34:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009e38:	4a55      	ldr	r2, [pc, #340]	; (8009f90 <calc_content_width+0x2e8>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	f000 8092 	beq.w	8009f64 <calc_content_width+0x2bc>
            child_res += pad_left;
 8009e40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e44:	4413      	add	r3, r2
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009e4a:	e08b      	b.n	8009f64 <calc_content_width+0x2bc>
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e50:	e07a      	b.n	8009f48 <calc_content_width+0x2a0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	61bb      	str	r3, [r7, #24]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009e62:	494a      	ldr	r1, [pc, #296]	; (8009f8c <calc_content_width+0x2e4>)
 8009e64:	69b8      	ldr	r0, [r7, #24]
 8009e66:	f7fc f947 	bl	80060f8 <lv_obj_has_flag_any>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d167      	bne.n	8009f40 <calc_content_width+0x298>

            if(!lv_obj_is_layout_positioned(child)) {
 8009e70:	69b8      	ldr	r0, [r7, #24]
 8009e72:	f7fe feb3 	bl	8008bdc <lv_obj_is_layout_positioned>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f083 0301 	eor.w	r3, r3, #1
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d04e      	beq.n	8009f20 <calc_content_width+0x278>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 8009e82:	2100      	movs	r1, #0
 8009e84:	69b8      	ldr	r0, [r7, #24]
 8009e86:	f7fe fb0e 	bl	80084a6 <lv_obj_get_style_align>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]
                switch(align) {
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	bf8c      	ite	hi
 8009e94:	2201      	movhi	r2, #1
 8009e96:	2200      	movls	r2, #0
 8009e98:	b2d2      	uxtb	r2, r2
 8009e9a:	2a00      	cmp	r2, #0
 8009e9c:	d11b      	bne.n	8009ed6 <calc_content_width+0x22e>
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea4:	f003 0393 	and.w	r3, r3, #147	; 0x93
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bf14      	ite	ne
 8009eac:	2301      	movne	r3, #1
 8009eae:	2300      	moveq	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00f      	beq.n	8009ed6 <calc_content_width+0x22e>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	bfb8      	it	lt
 8009ed0:	4613      	movlt	r3, r2
 8009ed2:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 8009ed4:	e035      	b.n	8009f42 <calc_content_width+0x29a>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	69b8      	ldr	r0, [r7, #24]
 8009eda:	f7fe fad2 	bl	8008482 <lv_obj_get_style_y>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d12e      	bne.n	8009f42 <calc_content_width+0x29a>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8009ee4:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	3314      	adds	r3, #20
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe fa1c 	bl	800832a <lv_area_get_width>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009efa:	4413      	add	r3, r2
 8009efc:	429c      	cmp	r4, r3
 8009efe:	dc0b      	bgt.n	8009f18 <calc_content_width+0x270>
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	3314      	adds	r3, #20
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fa10 	bl	800832a <lv_area_get_width>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f10:	4413      	add	r3, r2
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	b21b      	sxth	r3, r3
 8009f16:	e001      	b.n	8009f1c <calc_content_width+0x274>
 8009f18:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009f1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009f1e:	e010      	b.n	8009f42 <calc_content_width+0x29a>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009f26:	461a      	mov	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009f36:	4293      	cmp	r3, r2
 8009f38:	bfb8      	it	lt
 8009f3a:	4613      	movlt	r3, r2
 8009f3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009f3e:	e000      	b.n	8009f42 <calc_content_width+0x29a>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009f40:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	3301      	adds	r3, #1
 8009f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d380      	bcc.n	8009e52 <calc_content_width+0x1aa>
            }
        }

        if(child_res != LV_COORD_MIN) {
 8009f50:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009f54:	4a0e      	ldr	r2, [pc, #56]	; (8009f90 <calc_content_width+0x2e8>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d004      	beq.n	8009f64 <calc_content_width+0x2bc>
            child_res += pad_right;
 8009f5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f5e:	4413      	add	r3, r2
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 8009f64:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009f68:	4a09      	ldr	r2, [pc, #36]	; (8009f90 <calc_content_width+0x2e8>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d102      	bne.n	8009f74 <calc_content_width+0x2cc>
 8009f6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009f72:	e007      	b.n	8009f84 <calc_content_width+0x2dc>
    else return LV_MAX(child_res, self_w);
 8009f74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009f78:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	bfb8      	it	lt
 8009f80:	4613      	movlt	r3, r2
 8009f82:	b21b      	sxth	r3, r3
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3734      	adds	r7, #52	; 0x34
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd90      	pop	{r4, r7, pc}
 8009f8c:	00040001 	.word	0x00040001
 8009f90:	ffffe001 	.word	0xffffe001

08009f94 <calc_content_height>:

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
 8009f94:	b590      	push	{r4, r7, lr}
 8009f96:	b08b      	sub	sp, #44	; 0x2c
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 ffd1 	bl	800af48 <lv_obj_scroll_to_y>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7fe fb42 	bl	8008632 <lv_obj_get_style_border_width>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	83fb      	strh	r3, [r7, #30]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7fe faf4 	bl	80085a2 <lv_obj_get_style_pad_top>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	8bfb      	ldrh	r3, [r7, #30]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7fe fafc 	bl	80085c6 <lv_obj_get_style_pad_bottom>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	8bfb      	ldrh	r3, [r7, #30]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	837b      	strh	r3, [r7, #26]

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7fe ff8f 	bl	8008efe <lv_obj_get_self_height>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	8bbb      	ldrh	r3, [r7, #28]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	8b7b      	ldrh	r3, [r7, #26]
 8009fec:	4413      	add	r3, r2
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = LV_COORD_MIN;
 8009ff2:	f24e 0301 	movw	r3, #57345	; 0xe001
 8009ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f004 f911 	bl	800e220 <lv_obj_get_child_cnt>
 8009ffe:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a000:	2300      	movs	r3, #0
 800a002:	623b      	str	r3, [r7, #32]
 800a004:	e06b      	b.n	800a0de <calc_content_height+0x14a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	613b      	str	r3, [r7, #16]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a016:	4940      	ldr	r1, [pc, #256]	; (800a118 <calc_content_height+0x184>)
 800a018:	6938      	ldr	r0, [r7, #16]
 800a01a:	f7fc f86d 	bl	80060f8 <lv_obj_has_flag_any>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d156      	bne.n	800a0d2 <calc_content_height+0x13e>


        if(!lv_obj_is_layout_positioned(child)) {
 800a024:	6938      	ldr	r0, [r7, #16]
 800a026:	f7fe fdd9 	bl	8008bdc <lv_obj_is_layout_positioned>
 800a02a:	4603      	mov	r3, r0
 800a02c:	f083 0301 	eor.w	r3, r3, #1
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	d03d      	beq.n	800a0b2 <calc_content_height+0x11e>
            lv_align_t align = lv_obj_get_style_align(child, 0);
 800a036:	2100      	movs	r1, #0
 800a038:	6938      	ldr	r0, [r7, #16]
 800a03a:	f7fe fa34 	bl	80084a6 <lv_obj_get_style_align>
 800a03e:	4603      	mov	r3, r0
 800a040:	73fb      	strb	r3, [r7, #15]
            switch(align) {
 800a042:	7bfb      	ldrb	r3, [r7, #15]
 800a044:	2b03      	cmp	r3, #3
 800a046:	d80f      	bhi.n	800a068 <calc_content_height+0xd4>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a04e:	461a      	mov	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a05e:	4293      	cmp	r3, r2
 800a060:	bfb8      	it	lt
 800a062:	4613      	movlt	r3, r2
 800a064:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 800a066:	e037      	b.n	800a0d8 <calc_content_height+0x144>
                default:
                    /* Consider other cases only if y=0 and use the height of the object.
                     * With y!=0 circular dependency could occur. */
                    if(lv_obj_get_style_y(child, 0) == 0) {
 800a068:	2100      	movs	r1, #0
 800a06a:	6938      	ldr	r0, [r7, #16]
 800a06c:	f7fe fa09 	bl	8008482 <lv_obj_get_style_y>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d12f      	bne.n	800a0d6 <calc_content_height+0x142>
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 800a076:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	3314      	adds	r3, #20
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe f96a 	bl	8008358 <lv_area_get_height>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a08c:	4413      	add	r3, r2
 800a08e:	429c      	cmp	r4, r3
 800a090:	dc0b      	bgt.n	800a0aa <calc_content_height+0x116>
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3314      	adds	r3, #20
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe f95e 	bl	8008358 <lv_area_get_height>
 800a09c:	4603      	mov	r3, r0
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	8bbb      	ldrh	r3, [r7, #28]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	b21b      	sxth	r3, r3
 800a0a8:	e001      	b.n	800a0ae <calc_content_height+0x11a>
 800a0aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a0ae:	84fb      	strh	r3, [r7, #38]	; 0x26
                    }
                    break;
 800a0b0:	e011      	b.n	800a0d6 <calc_content_height+0x142>
            }
        }
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	bfb8      	it	lt
 800a0cc:	4613      	movlt	r3, r2
 800a0ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0d0:	e002      	b.n	800a0d8 <calc_content_height+0x144>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a0d2:	bf00      	nop
 800a0d4:	e000      	b.n	800a0d8 <calc_content_height+0x144>
                    break;
 800a0d6:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	623b      	str	r3, [r7, #32]
 800a0de:	6a3a      	ldr	r2, [r7, #32]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d38f      	bcc.n	800a006 <calc_content_height+0x72>
        }
    }

    if(child_res != LV_COORD_MIN) {
 800a0e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a0ea:	4a0c      	ldr	r2, [pc, #48]	; (800a11c <calc_content_height+0x188>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d00d      	beq.n	800a10c <calc_content_height+0x178>
        child_res += pad_bottom;
 800a0f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a0f2:	8b7b      	ldrh	r3, [r7, #26]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        return LV_MAX(child_res, self_h);
 800a0fa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a0fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a102:	4293      	cmp	r3, r2
 800a104:	bfb8      	it	lt
 800a106:	4613      	movlt	r3, r2
 800a108:	b21b      	sxth	r3, r3
 800a10a:	e001      	b.n	800a110 <calc_content_height+0x17c>
    }
    else {
        return self_h;
 800a10c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    }

}
 800a110:	4618      	mov	r0, r3
 800a112:	372c      	adds	r7, #44	; 0x2c
 800a114:	46bd      	mov	sp, r7
 800a116:	bd90      	pop	{r4, r7, pc}
 800a118:	00040001 	.word	0x00040001
 800a11c:	ffffe001 	.word	0xffffe001

0800a120 <layout_update_core>:

static void layout_update_core(lv_obj_t * obj)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f004 f879 	bl	800e220 <lv_obj_get_child_cnt>
 800a12e:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 800a130:	2300      	movs	r3, #0
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	e00d      	b.n	800a152 <layout_update_core+0x32>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60fb      	str	r3, [r7, #12]
        layout_update_core(child);
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7ff ffea 	bl	800a120 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	3301      	adds	r3, #1
 800a150:	61fb      	str	r3, [r7, #28]
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	429a      	cmp	r2, r3
 800a158:	d3ed      	bcc.n	800a136 <layout_update_core+0x16>
    }

    if(obj->layout_inv == 0) return;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a160:	f003 0301 	and.w	r3, r3, #1
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d034      	beq.n	800a1d4 <layout_update_core+0xb4>

    obj->layout_inv = 0;
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800a170:	f36f 0300 	bfc	r3, #0, #1
 800a174:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    lv_obj_refr_size(obj);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fe faf3 	bl	8008764 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7fe fefa 	bl	8008f78 <lv_obj_refr_pos>

    if(child_cnt > 0) {
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d025      	beq.n	800a1d6 <layout_update_core+0xb6>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 800a18a:	2100      	movs	r1, #0
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7fe fa62 	bl	8008656 <lv_obj_get_style_layout>
 800a192:	4603      	mov	r3, r0
 800a194:	617b      	str	r3, [r7, #20]
        if(layout_id > 0 && layout_id <= layout_cnt) {
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01c      	beq.n	800a1d6 <layout_update_core+0xb6>
 800a19c:	4b0f      	ldr	r3, [pc, #60]	; (800a1dc <layout_update_core+0xbc>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d817      	bhi.n	800a1d6 <layout_update_core+0xb6>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 800a1a6:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <layout_update_core+0xc0>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	6979      	ldr	r1, [r7, #20]
 800a1ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a1b0:	440b      	add	r3, r1
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	613b      	str	r3, [r7, #16]
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800a1ba:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <layout_update_core+0xc0>)
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	6979      	ldr	r1, [r7, #20]
 800a1c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a1c4:	440b      	add	r3, r1
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6939      	ldr	r1, [r7, #16]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	4798      	blx	r3
 800a1d2:	e000      	b.n	800a1d6 <layout_update_core+0xb6>
    if(obj->layout_inv == 0) return;
 800a1d4:	bf00      	nop
        }
    }
}
 800a1d6:	3720      	adds	r7, #32
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000704 	.word	0x20000704
 800a1e0:	200008ac 	.word	0x200008ac

0800a1e4 <transform_point>:

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	71fb      	strb	r3, [r7, #7]
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f7fe f99e 	bl	8008536 <lv_obj_get_style_transform_angle>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	82fb      	strh	r3, [r7, #22]
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800a1fe:	2100      	movs	r1, #0
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7fe f986 	bl	8008512 <lv_obj_get_style_transform_zoom>
 800a206:	4603      	mov	r3, r0
 800a208:	82bb      	strh	r3, [r7, #20]

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800a20a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d105      	bne.n	800a21e <transform_point+0x3a>
 800a212:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21a:	f000 80a6 	beq.w	800a36a <transform_point+0x186>

    lv_point_t pivot = {
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 800a21e:	2100      	movs	r1, #0
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f7fe f99a 	bl	800855a <lv_obj_get_style_transform_pivot_x>
 800a226:	4603      	mov	r3, r0
    lv_point_t pivot = {
 800a228:	823b      	strh	r3, [r7, #16]
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800a22a:	2100      	movs	r1, #0
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7fe f9a6 	bl	800857e <lv_obj_get_style_transform_pivot_y>
 800a232:	4603      	mov	r3, r0
    lv_point_t pivot = {
 800a234:	827b      	strh	r3, [r7, #18]
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 800a236:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a244:	d12d      	bne.n	800a2a2 <transform_point+0xbe>
 800a246:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a24a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a24e:	b21b      	sxth	r3, r3
 800a250:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a254:	dc25      	bgt.n	800a2a2 <transform_point+0xbe>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800a256:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a25a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a25e:	b21b      	sxth	r3, r3
 800a260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a264:	dd07      	ble.n	800a276 <transform_point+0x92>
 800a266:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a26a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a26e:	b21b      	sxth	r3, r3
 800a270:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800a274:	e005      	b.n	800a282 <transform_point+0x9e>
 800a276:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a27a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a27e:	b21b      	sxth	r3, r3
 800a280:	461c      	mov	r4, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	3314      	adds	r3, #20
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe f84f 	bl	800832a <lv_area_get_width>
 800a28c:	4603      	mov	r3, r0
 800a28e:	fb04 f303 	mul.w	r3, r4, r3
 800a292:	4a38      	ldr	r2, [pc, #224]	; (800a374 <transform_point+0x190>)
 800a294:	fb82 1203 	smull	r1, r2, r2, r3
 800a298:	1152      	asrs	r2, r2, #5
 800a29a:	17db      	asrs	r3, r3, #31
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	b21b      	sxth	r3, r3
 800a2a0:	823b      	strh	r3, [r7, #16]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 800a2a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a2ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2b0:	d12d      	bne.n	800a30e <transform_point+0x12a>
 800a2b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2b6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a2ba:	b21b      	sxth	r3, r3
 800a2bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a2c0:	dc25      	bgt.n	800a30e <transform_point+0x12a>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800a2c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2c6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a2ca:	b21b      	sxth	r3, r3
 800a2cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2d0:	dd07      	ble.n	800a2e2 <transform_point+0xfe>
 800a2d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2d6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a2da:	b21b      	sxth	r3, r3
 800a2dc:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800a2e0:	e005      	b.n	800a2ee <transform_point+0x10a>
 800a2e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2e6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a2ea:	b21b      	sxth	r3, r3
 800a2ec:	461c      	mov	r4, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3314      	adds	r3, #20
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe f830 	bl	8008358 <lv_area_get_height>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	fb04 f303 	mul.w	r3, r4, r3
 800a2fe:	4a1d      	ldr	r2, [pc, #116]	; (800a374 <transform_point+0x190>)
 800a300:	fb82 1203 	smull	r1, r2, r2, r3
 800a304:	1152      	asrs	r2, r2, #5
 800a306:	17db      	asrs	r3, r3, #31
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	b21b      	sxth	r3, r3
 800a30c:	827b      	strh	r3, [r7, #18]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a314:	b29a      	uxth	r2, r3
 800a316:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	4413      	add	r3, r2
 800a31e:	b29b      	uxth	r3, r3
 800a320:	b21b      	sxth	r3, r3
 800a322:	823b      	strh	r3, [r7, #16]
    pivot.y = obj->coords.y1 + pivot.y;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a330:	b29b      	uxth	r3, r3
 800a332:	4413      	add	r3, r2
 800a334:	b29b      	uxth	r3, r3
 800a336:	b21b      	sxth	r3, r3
 800a338:	827b      	strh	r3, [r7, #18]

    if(inv) {
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00a      	beq.n	800a356 <transform_point+0x172>
        angle = -angle;
 800a340:	8afb      	ldrh	r3, [r7, #22]
 800a342:	425b      	negs	r3, r3
 800a344:	b29b      	uxth	r3, r3
 800a346:	82fb      	strh	r3, [r7, #22]
        zoom = (256 * 256) / zoom;
 800a348:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a34c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a350:	fb92 f3f3 	sdiv	r3, r2, r3
 800a354:	82bb      	strh	r3, [r7, #20]
    }

    lv_point_transform(p, angle, zoom, &pivot);
 800a356:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800a35a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a35e:	f107 0310 	add.w	r3, r7, #16
 800a362:	68b8      	ldr	r0, [r7, #8]
 800a364:	f016 fe30 	bl	8020fc8 <lv_point_transform>
 800a368:	e000      	b.n	800a36c <transform_point+0x188>
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800a36a:	bf00      	nop
}
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd90      	pop	{r4, r7, pc}
 800a372:	bf00      	nop
 800a374:	51eb851f 	.word	0x51eb851f

0800a378 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a386:	b29a      	uxth	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	b29b      	uxth	r3, r3
 800a394:	3301      	adds	r3, #1
 800a396:	b29b      	uxth	r3, r3
 800a398:	b21b      	sxth	r3, r3
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	b21b      	sxth	r3, r3
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
    a->var = var;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	601a      	str	r2, [r3, #0]
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	605a      	str	r2, [r3, #4]
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a446:	bf00      	nop
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <lv_anim_set_path_cb>:
 * Set the path (curve) of the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function to set the current value of the animation.
 */
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	61da      	str	r2, [r3, #28]
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	60da      	str	r2, [r3, #12]
}
 800a47e:	bf00      	nop
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <lv_obj_get_style_width>:
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800a494:	2201      	movs	r2, #1
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f002 fb5d 	bl	800cb58 <lv_obj_get_style_prop>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	b21b      	sxth	r3, r3
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <lv_obj_get_style_pad_top>:
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a4b8:	2210      	movs	r2, #16
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f002 fb4b 	bl	800cb58 <lv_obj_get_style_prop>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	b21b      	sxth	r3, r3
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <lv_obj_get_style_pad_bottom>:
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a4dc:	2211      	movs	r2, #17
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f002 fb39 	bl	800cb58 <lv_obj_get_style_prop>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	b21b      	sxth	r3, r3
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <lv_obj_get_style_pad_left>:
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a500:	2212      	movs	r2, #18
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f002 fb27 	bl	800cb58 <lv_obj_get_style_prop>
 800a50a:	4603      	mov	r3, r0
 800a50c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	b21b      	sxth	r3, r3
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <lv_obj_get_style_pad_right>:
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a524:	2213      	movs	r2, #19
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f002 fb15 	bl	800cb58 <lv_obj_get_style_prop>
 800a52e:	4603      	mov	r3, r0
 800a530:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	b21b      	sxth	r3, r3
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <lv_obj_get_style_bg_opa>:
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800a548:	2221      	movs	r2, #33	; 0x21
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f002 fb03 	bl	800cb58 <lv_obj_get_style_prop>
 800a552:	4603      	mov	r3, r0
 800a554:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	b2db      	uxtb	r3, r3
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <lv_obj_get_style_border_opa>:
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800a56c:	2231      	movs	r2, #49	; 0x31
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f002 faf1 	bl	800cb58 <lv_obj_get_style_prop>
 800a576:	4603      	mov	r3, r0
 800a578:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	b2db      	uxtb	r3, r3
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <lv_obj_get_style_border_width>:
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a590:	2232      	movs	r2, #50	; 0x32
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f002 fadf 	bl	800cb58 <lv_obj_get_style_prop>
 800a59a:	4603      	mov	r3, r0
 800a59c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	b21b      	sxth	r3, r3
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <lv_obj_get_style_base_dir>:
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a5b4:	2216      	movs	r2, #22
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f002 facd 	bl	800cb58 <lv_obj_get_style_prop>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	b2db      	uxtb	r3, r3
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <lv_obj_set_scrollbar_mode>:
/*=====================
 * Setter functions
 *====================*/

void lv_obj_set_scrollbar_mode(lv_obj_t * obj, lv_scrollbar_mode_t mode)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b082      	sub	sp, #8
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7fb fdc0 	bl	8006160 <lv_obj_allocate_spec_attr>

    if(obj->spec_attr->scrollbar_mode == mode) return;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	7e1b      	ldrb	r3, [r3, #24]
 800a5e6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d00d      	beq.n	800a610 <lv_obj_set_scrollbar_mode+0x42>
    obj->spec_attr->scrollbar_mode = mode;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	f003 0303 	and.w	r3, r3, #3
 800a5fe:	b2d9      	uxtb	r1, r3
 800a600:	7e13      	ldrb	r3, [r2, #24]
 800a602:	f361 0301 	bfi	r3, r1, #0, #2
 800a606:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff f95c 	bl	80098c6 <lv_obj_invalidate>
 800a60e:	e000      	b.n	800a612 <lv_obj_set_scrollbar_mode+0x44>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 800a610:	bf00      	nop
}
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <lv_obj_get_scrollbar_mode>:
/*=====================
 * Getter functions
 *====================*/

lv_scrollbar_mode_t lv_obj_get_scrollbar_mode(const lv_obj_t * obj)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d006      	beq.n	800a636 <lv_obj_get_scrollbar_mode+0x1e>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	7e1b      	ldrb	r3, [r3, #24]
 800a62e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a632:	b2db      	uxtb	r3, r3
 800a634:	e000      	b.n	800a638 <lv_obj_get_scrollbar_mode+0x20>
    else return LV_SCROLLBAR_MODE_AUTO;
 800a636:	2303      	movs	r3, #3
}
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <lv_obj_get_scroll_dir>:

lv_dir_t lv_obj_get_scroll_dir(const lv_obj_t * obj)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <lv_obj_get_scroll_dir+0x1e>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	7e5b      	ldrb	r3, [r3, #25]
 800a65a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	e000      	b.n	800a664 <lv_obj_get_scroll_dir+0x20>
    else return LV_DIR_ALL;
 800a662:	230f      	movs	r3, #15
}
 800a664:	4618      	mov	r0, r3
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <lv_obj_get_scroll_snap_x>:

lv_scroll_snap_t lv_obj_get_scroll_snap_x(const lv_obj_t * obj)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d006      	beq.n	800a68e <lv_obj_get_scroll_snap_x+0x1e>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	7e1b      	ldrb	r3, [r3, #24]
 800a686:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	e000      	b.n	800a690 <lv_obj_get_scroll_snap_x+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <lv_obj_get_scroll_snap_y>:

lv_scroll_snap_t lv_obj_get_scroll_snap_y(const lv_obj_t * obj)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d006      	beq.n	800a6ba <lv_obj_get_scroll_snap_y+0x1e>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	7e1b      	ldrb	r3, [r3, #24]
 800a6b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	e000      	b.n	800a6bc <lv_obj_get_scroll_snap_y+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <lv_obj_get_scroll_x>:

lv_coord_t lv_obj_get_scroll_x(const lv_obj_t * obj)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <lv_obj_get_scroll_x+0x14>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e007      	b.n	800a6ec <lv_obj_get_scroll_x+0x24>
    return -obj->spec_attr->scroll.x;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	425b      	negs	r3, r3
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	b21b      	sxth	r3, r3
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <lv_obj_get_scroll_y>:

lv_coord_t lv_obj_get_scroll_y(const lv_obj_t * obj)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <lv_obj_get_scroll_y+0x14>
 800a708:	2300      	movs	r3, #0
 800a70a:	e007      	b.n	800a71c <lv_obj_get_scroll_y+0x24>
    return -obj->spec_attr->scroll.y;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a714:	b29b      	uxth	r3, r3
 800a716:	425b      	negs	r3, r3
 800a718:	b29b      	uxth	r3, r3
 800a71a:	b21b      	sxth	r3, r3
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <lv_obj_get_scroll_top>:

lv_coord_t lv_obj_get_scroll_top(lv_obj_t * obj)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <lv_obj_get_scroll_top+0x14>
 800a738:	2300      	movs	r3, #0
 800a73a:	e007      	b.n	800a74c <lv_obj_get_scroll_top+0x24>
    return -obj->spec_attr->scroll.y;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a744:	b29b      	uxth	r3, r3
 800a746:	425b      	negs	r3, r3
 800a748:	b29b      	uxth	r3, r3
 800a74a:	b21b      	sxth	r3, r3
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <lv_obj_get_scroll_bottom>:

lv_coord_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 800a758:	b5b0      	push	{r4, r5, r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t child_res = LV_COORD_MIN;
 800a760:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a764:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f003 fd5a 	bl	800e220 <lv_obj_get_child_cnt>
 800a76c:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a76e:	2300      	movs	r3, #0
 800a770:	61bb      	str	r3, [r7, #24]
 800a772:	e01c      	b.n	800a7ae <lv_obj_get_scroll_bottom+0x56>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a784:	4935      	ldr	r1, [pc, #212]	; (800a85c <lv_obj_get_scroll_bottom+0x104>)
 800a786:	68b8      	ldr	r0, [r7, #8]
 800a788:	f7fb fcb6 	bl	80060f8 <lv_obj_has_flag_any>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d109      	bne.n	800a7a6 <lv_obj_get_scroll_bottom+0x4e>
        child_res = LV_MAX(child_res, child->coords.y2);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a798:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a79c:	4293      	cmp	r3, r2
 800a79e:	bfb8      	it	lt
 800a7a0:	4613      	movlt	r3, r2
 800a7a2:	83fb      	strh	r3, [r7, #30]
 800a7a4:	e000      	b.n	800a7a8 <lv_obj_get_scroll_bottom+0x50>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a7a6:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	61bb      	str	r3, [r7, #24]
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d3de      	bcc.n	800a774 <lv_obj_get_scroll_bottom+0x1c>
    }

    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff fe78 	bl	800a4ae <lv_obj_get_style_pad_top>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7ff fe84 	bl	800a4d2 <lv_obj_get_style_pad_bottom>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7ff fed8 	bl	800a586 <lv_obj_get_style_border_width>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800a7da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a7de:	4a20      	ldr	r2, [pc, #128]	; (800a860 <lv_obj_get_scroll_bottom+0x108>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d00d      	beq.n	800a800 <lv_obj_get_scroll_bottom+0xa8>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 800a7e4:	8a3a      	ldrh	r2, [r7, #16]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	89fb      	ldrh	r3, [r7, #14]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	8bfb      	ldrh	r3, [r7, #30]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_h = lv_obj_get_self_height(obj);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7fe fb7c 	bl	8008efe <lv_obj_get_self_height>
 800a806:	4603      	mov	r3, r0
 800a808:	81bb      	strh	r3, [r7, #12]
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800a80a:	89fb      	ldrh	r3, [r7, #14]
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	b29c      	uxth	r4, r3
 800a810:	8a7d      	ldrh	r5, [r7, #18]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7fe fa9a 	bl	8008d4c <lv_obj_get_height>
 800a818:	4603      	mov	r3, r0
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	1aeb      	subs	r3, r5, r3
 800a81e:	b29a      	uxth	r2, r3
 800a820:	8a3b      	ldrh	r3, [r7, #16]
 800a822:	4413      	add	r3, r2
 800a824:	b29b      	uxth	r3, r3
 800a826:	4423      	add	r3, r4
 800a828:	b29a      	uxth	r2, r3
 800a82a:	89bb      	ldrh	r3, [r7, #12]
 800a82c:	4413      	add	r3, r2
 800a82e:	b29b      	uxth	r3, r3
 800a830:	81bb      	strh	r3, [r7, #12]
    self_h -= lv_obj_get_scroll_y(obj);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff ff60 	bl	800a6f8 <lv_obj_get_scroll_y>
 800a838:	4603      	mov	r3, r0
 800a83a:	89ba      	ldrh	r2, [r7, #12]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	b29b      	uxth	r3, r3
 800a842:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_h);
 800a844:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a848:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a84c:	4293      	cmp	r3, r2
 800a84e:	bfb8      	it	lt
 800a850:	4613      	movlt	r3, r2
 800a852:	b21b      	sxth	r3, r3
}
 800a854:	4618      	mov	r0, r3
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bdb0      	pop	{r4, r5, r7, pc}
 800a85c:	00040001 	.word	0x00040001
 800a860:	ffffe001 	.word	0xffffe001

0800a864 <lv_obj_get_scroll_left>:

lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 800a864:	b5b0      	push	{r4, r5, r7, lr}
 800a866:	b08a      	sub	sp, #40	; 0x28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800a86c:	2100      	movs	r1, #0
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff fe9b 	bl	800a5aa <lv_obj_get_style_base_dir>
 800a874:	4603      	mov	r3, r0
 800a876:	2b01      	cmp	r3, #1
 800a878:	d00e      	beq.n	800a898 <lv_obj_get_scroll_left+0x34>
        if(obj->spec_attr == NULL) return 0;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <lv_obj_get_scroll_left+0x22>
 800a882:	2300      	movs	r3, #0
 800a884:	e08b      	b.n	800a99e <lv_obj_get_scroll_left+0x13a>
        return -obj->spec_attr->scroll.x;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	425b      	negs	r3, r3
 800a892:	b29b      	uxth	r3, r3
 800a894:	b21b      	sxth	r3, r3
 800a896:	e082      	b.n	800a99e <lv_obj_get_scroll_left+0x13a>
    }

    /*With RTL base direction scrolling the left is normal so find the left most coordinate*/
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800a898:	2100      	movs	r1, #0
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7ff fe3d 	bl	800a51a <lv_obj_get_style_pad_right>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fe25 	bl	800a4f6 <lv_obj_get_style_pad_left>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	837b      	strh	r3, [r7, #26]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7ff fe67 	bl	800a586 <lv_obj_get_style_border_width>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint32_t i;
    lv_coord_t x1 = LV_COORD_MAX;
 800a8c0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800a8c4:	83fb      	strh	r3, [r7, #30]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f003 fcaa 	bl	800e220 <lv_obj_get_child_cnt>
 800a8cc:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	623b      	str	r3, [r7, #32]
 800a8d2:	e01c      	b.n	800a90e <lv_obj_get_scroll_left+0xaa>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a8e4:	4930      	ldr	r1, [pc, #192]	; (800a9a8 <lv_obj_get_scroll_left+0x144>)
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7fb fc06 	bl	80060f8 <lv_obj_has_flag_any>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d109      	bne.n	800a906 <lv_obj_get_scroll_left+0xa2>
        x1 = LV_MIN(x1, child->coords.x1);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a8f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	bfa8      	it	ge
 800a900:	4613      	movge	r3, r2
 800a902:	83fb      	strh	r3, [r7, #30]
 800a904:	e000      	b.n	800a908 <lv_obj_get_scroll_left+0xa4>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a906:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	3301      	adds	r3, #1
 800a90c:	623b      	str	r3, [r7, #32]
 800a90e:	6a3a      	ldr	r2, [r7, #32]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	429a      	cmp	r2, r3
 800a914:	d3de      	bcc.n	800a8d4 <lv_obj_get_scroll_left+0x70>

    }

    if(x1 != LV_COORD_MAX) {
 800a916:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a91a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800a91e:	4293      	cmp	r3, r2
 800a920:	d010      	beq.n	800a944 <lv_obj_get_scroll_left+0xe0>
        child_res = x1;
 800a922:	8bfb      	ldrh	r3, [r7, #30]
 800a924:	84fb      	strh	r3, [r7, #38]	; 0x26
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	8b7b      	ldrh	r3, [r7, #26]
 800a930:	4413      	add	r3, r2
 800a932:	b29a      	uxth	r2, r3
 800a934:	8b3b      	ldrh	r3, [r7, #24]
 800a936:	4413      	add	r3, r2
 800a938:	b29a      	uxth	r2, r3
 800a93a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	b29b      	uxth	r3, r3
 800a940:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a942:	e002      	b.n	800a94a <lv_obj_get_scroll_left+0xe6>
    }
    else {
        child_res = LV_COORD_MIN;
 800a944:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a948:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7fe fac1 	bl	8008ed2 <lv_obj_get_self_width>
 800a950:	4603      	mov	r3, r0
 800a952:	827b      	strh	r3, [r7, #18]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a954:	8b3b      	ldrh	r3, [r7, #24]
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	b29c      	uxth	r4, r3
 800a95a:	8bbd      	ldrh	r5, [r7, #28]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7fe f9e7 	bl	8008d30 <lv_obj_get_width>
 800a962:	4603      	mov	r3, r0
 800a964:	b29b      	uxth	r3, r3
 800a966:	1aeb      	subs	r3, r5, r3
 800a968:	b29a      	uxth	r2, r3
 800a96a:	8b7b      	ldrh	r3, [r7, #26]
 800a96c:	4413      	add	r3, r2
 800a96e:	b29b      	uxth	r3, r3
 800a970:	4423      	add	r3, r4
 800a972:	b29a      	uxth	r2, r3
 800a974:	8a7b      	ldrh	r3, [r7, #18]
 800a976:	4413      	add	r3, r2
 800a978:	b29b      	uxth	r3, r3
 800a97a:	827b      	strh	r3, [r7, #18]
    self_w += lv_obj_get_scroll_x(obj);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff fea3 	bl	800a6c8 <lv_obj_get_scroll_x>
 800a982:	4603      	mov	r3, r0
 800a984:	b29a      	uxth	r2, r3
 800a986:	8a7b      	ldrh	r3, [r7, #18]
 800a988:	4413      	add	r3, r2
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	827b      	strh	r3, [r7, #18]

    return LV_MAX(child_res, self_w);
 800a98e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a992:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a996:	4293      	cmp	r3, r2
 800a998:	bfb8      	it	lt
 800a99a:	4613      	movlt	r3, r2
 800a99c:	b21b      	sxth	r3, r3
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3728      	adds	r7, #40	; 0x28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	00040001 	.word	0x00040001

0800a9ac <lv_obj_get_scroll_right>:

lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 800a9ac:	b5b0      	push	{r4, r5, r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fdf7 	bl	800a5aa <lv_obj_get_style_base_dir>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d10a      	bne.n	800a9d8 <lv_obj_get_scroll_right+0x2c>
        if(obj->spec_attr == NULL) return 0;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <lv_obj_get_scroll_right+0x22>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e07e      	b.n	800aacc <lv_obj_get_scroll_right+0x120>
        return obj->spec_attr->scroll.x;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a9d6:	e079      	b.n	800aacc <lv_obj_get_scroll_right+0x120>
    }

    /*With other base direction (LTR) scrolling to the right is normal so find the right most coordinate*/
    lv_coord_t child_res = LV_COORD_MIN;
 800a9d8:	f24e 0301 	movw	r3, #57345	; 0xe001
 800a9dc:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f003 fc1e 	bl	800e220 <lv_obj_get_child_cnt>
 800a9e4:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	61bb      	str	r3, [r7, #24]
 800a9ea:	e01c      	b.n	800aa26 <lv_obj_get_scroll_right+0x7a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a9fc:	4935      	ldr	r1, [pc, #212]	; (800aad4 <lv_obj_get_scroll_right+0x128>)
 800a9fe:	68b8      	ldr	r0, [r7, #8]
 800aa00:	f7fb fb7a 	bl	80060f8 <lv_obj_has_flag_any>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d109      	bne.n	800aa1e <lv_obj_get_scroll_right+0x72>
        child_res = LV_MAX(child_res, child->coords.x2);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800aa10:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800aa14:	4293      	cmp	r3, r2
 800aa16:	bfb8      	it	lt
 800aa18:	4613      	movlt	r3, r2
 800aa1a:	83fb      	strh	r3, [r7, #30]
 800aa1c:	e000      	b.n	800aa20 <lv_obj_get_scroll_right+0x74>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800aa1e:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	3301      	adds	r3, #1
 800aa24:	61bb      	str	r3, [r7, #24]
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d3de      	bcc.n	800a9ec <lv_obj_get_scroll_right+0x40>
    }

    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800aa2e:	2100      	movs	r1, #0
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fd72 	bl	800a51a <lv_obj_get_style_pad_right>
 800aa36:	4603      	mov	r3, r0
 800aa38:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff fd5a 	bl	800a4f6 <lv_obj_get_style_pad_left>
 800aa42:	4603      	mov	r3, r0
 800aa44:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800aa46:	2100      	movs	r1, #0
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff fd9c 	bl	800a586 <lv_obj_get_style_border_width>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800aa52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aa56:	4a20      	ldr	r2, [pc, #128]	; (800aad8 <lv_obj_get_scroll_right+0x12c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d00d      	beq.n	800aa78 <lv_obj_get_scroll_right+0xcc>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 800aa5c:	8a7a      	ldrh	r2, [r7, #18]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	89fb      	ldrh	r3, [r7, #14]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	8bfb      	ldrh	r3, [r7, #30]
 800aa72:	4413      	add	r3, r2
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7fe fa2a 	bl	8008ed2 <lv_obj_get_self_width>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	81bb      	strh	r3, [r7, #12]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800aa82:	89fb      	ldrh	r3, [r7, #14]
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	b29c      	uxth	r4, r3
 800aa88:	8a7d      	ldrh	r5, [r7, #18]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fe f950 	bl	8008d30 <lv_obj_get_width>
 800aa90:	4603      	mov	r3, r0
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	1aeb      	subs	r3, r5, r3
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	8a3b      	ldrh	r3, [r7, #16]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	4423      	add	r3, r4
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	89bb      	ldrh	r3, [r7, #12]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	81bb      	strh	r3, [r7, #12]
    self_w -= lv_obj_get_scroll_x(obj);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7ff fe0c 	bl	800a6c8 <lv_obj_get_scroll_x>
 800aab0:	4603      	mov	r3, r0
 800aab2:	89ba      	ldrh	r2, [r7, #12]
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_w);
 800aabc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800aac0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aac4:	4293      	cmp	r3, r2
 800aac6:	bfb8      	it	lt
 800aac8:	4613      	movlt	r3, r2
 800aaca:	b21b      	sxth	r3, r3
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3720      	adds	r7, #32
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bdb0      	pop	{r4, r5, r7, pc}
 800aad4:	00040001 	.word	0x00040001
 800aad8:	ffffe001 	.word	0xffffe001

0800aadc <lv_obj_scroll_by_bounded>:
/*=====================
 * Other functions
 *====================*/

void lv_obj_scroll_by_bounded(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b089      	sub	sp, #36	; 0x24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	4608      	mov	r0, r1
 800aae6:	4611      	mov	r1, r2
 800aae8:	461a      	mov	r2, r3
 800aaea:	4603      	mov	r3, r0
 800aaec:	817b      	strh	r3, [r7, #10]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	813b      	strh	r3, [r7, #8]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 800aaf6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d104      	bne.n	800ab08 <lv_obj_scroll_by_bounded+0x2c>
 800aafe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 80b5 	beq.w	800ac72 <lv_obj_scroll_by_bounded+0x196>

    /*We need to know the final sizes for bound check*/
    lv_obj_update_layout(obj);
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7fe f8b7 	bl	8008c7c <lv_obj_update_layout>

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7ff fdda 	bl	800a6c8 <lv_obj_get_scroll_x>
 800ab14:	4603      	mov	r3, r0
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	425b      	negs	r3, r3
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	82bb      	strh	r3, [r7, #20]
    lv_coord_t x_bounded = x_current + dx;
 800ab1e:	8aba      	ldrh	r2, [r7, #20]
 800ab20:	897b      	ldrh	r3, [r7, #10]
 800ab22:	4413      	add	r3, r2
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	83fb      	strh	r3, [r7, #30]

    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800ab28:	2100      	movs	r1, #0
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7ff fd3d 	bl	800a5aa <lv_obj_get_style_base_dir>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d028      	beq.n	800ab88 <lv_obj_scroll_by_bounded+0xac>
        if(x_bounded > 0) x_bounded = 0;
 800ab36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dd01      	ble.n	800ab42 <lv_obj_scroll_by_bounded+0x66>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	83fb      	strh	r3, [r7, #30]
        if(x_bounded < 0) {
 800ab42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	da43      	bge.n	800abd2 <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f7ff fe8a 	bl	800a864 <lv_obj_get_scroll_left>
 800ab50:	4603      	mov	r3, r0
 800ab52:	b29c      	uxth	r4, r3
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7ff ff29 	bl	800a9ac <lv_obj_get_scroll_right>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4423      	add	r3, r4
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	83bb      	strh	r3, [r7, #28]
            if(scroll_max < 0) scroll_max = 0;
 800ab64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	da01      	bge.n	800ab70 <lv_obj_scroll_by_bounded+0x94>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	83bb      	strh	r3, [r7, #28]

            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800ab70:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ab74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ab78:	425b      	negs	r3, r3
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	da29      	bge.n	800abd2 <lv_obj_scroll_by_bounded+0xf6>
 800ab7e:	8bbb      	ldrh	r3, [r7, #28]
 800ab80:	425b      	negs	r3, r3
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	83fb      	strh	r3, [r7, #30]
 800ab86:	e024      	b.n	800abd2 <lv_obj_scroll_by_bounded+0xf6>
        }
    }
    else {
        if(x_bounded < 0) x_bounded = 0;
 800ab88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	da01      	bge.n	800ab94 <lv_obj_scroll_by_bounded+0xb8>
 800ab90:	2300      	movs	r3, #0
 800ab92:	83fb      	strh	r3, [r7, #30]
        if(x_bounded > 0) {
 800ab94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dd1a      	ble.n	800abd2 <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f7ff fe61 	bl	800a864 <lv_obj_get_scroll_left>
 800aba2:	4603      	mov	r3, r0
 800aba4:	b29c      	uxth	r4, r3
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f7ff ff00 	bl	800a9ac <lv_obj_get_scroll_right>
 800abac:	4603      	mov	r3, r0
 800abae:	b29b      	uxth	r3, r3
 800abb0:	4423      	add	r3, r4
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	837b      	strh	r3, [r7, #26]
            if(scroll_max < 0) scroll_max = 0;
 800abb6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	da01      	bge.n	800abc2 <lv_obj_scroll_by_bounded+0xe6>
 800abbe:	2300      	movs	r3, #0
 800abc0:	837b      	strh	r3, [r7, #26]

            if(x_bounded > scroll_max) x_bounded = scroll_max;
 800abc2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800abc6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800abca:	429a      	cmp	r2, r3
 800abcc:	dd01      	ble.n	800abd2 <lv_obj_scroll_by_bounded+0xf6>
 800abce:	8b7b      	ldrh	r3, [r7, #26]
 800abd0:	83fb      	strh	r3, [r7, #30]
        }
    }

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7ff fd90 	bl	800a6f8 <lv_obj_get_scroll_y>
 800abd8:	4603      	mov	r3, r0
 800abda:	b29b      	uxth	r3, r3
 800abdc:	425b      	negs	r3, r3
 800abde:	b29b      	uxth	r3, r3
 800abe0:	827b      	strh	r3, [r7, #18]
    lv_coord_t y_bounded = y_current + dy;
 800abe2:	8a7a      	ldrh	r2, [r7, #18]
 800abe4:	893b      	ldrh	r3, [r7, #8]
 800abe6:	4413      	add	r3, r2
 800abe8:	b29b      	uxth	r3, r3
 800abea:	833b      	strh	r3, [r7, #24]

    if(y_bounded > 0) y_bounded = 0;
 800abec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	dd01      	ble.n	800abf8 <lv_obj_scroll_by_bounded+0x11c>
 800abf4:	2300      	movs	r3, #0
 800abf6:	833b      	strh	r3, [r7, #24]
    if(y_bounded < 0) {
 800abf8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	da1d      	bge.n	800ac3c <lv_obj_scroll_by_bounded+0x160>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f7ff fd91 	bl	800a728 <lv_obj_get_scroll_top>
 800ac06:	4603      	mov	r3, r0
 800ac08:	b29c      	uxth	r4, r3
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7ff fda4 	bl	800a758 <lv_obj_get_scroll_bottom>
 800ac10:	4603      	mov	r3, r0
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	4423      	add	r3, r4
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	82fb      	strh	r3, [r7, #22]
        if(scroll_max < 0) scroll_max = 0;
 800ac1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da01      	bge.n	800ac26 <lv_obj_scroll_by_bounded+0x14a>
 800ac22:	2300      	movs	r3, #0
 800ac24:	82fb      	strh	r3, [r7, #22]
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 800ac26:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ac2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ac2e:	425b      	negs	r3, r3
 800ac30:	429a      	cmp	r2, r3
 800ac32:	da03      	bge.n	800ac3c <lv_obj_scroll_by_bounded+0x160>
 800ac34:	8afb      	ldrh	r3, [r7, #22]
 800ac36:	425b      	negs	r3, r3
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	833b      	strh	r3, [r7, #24]
    }

    dx = x_bounded - x_current;
 800ac3c:	8bfa      	ldrh	r2, [r7, #30]
 800ac3e:	8abb      	ldrh	r3, [r7, #20]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	817b      	strh	r3, [r7, #10]
    dy = y_bounded - y_current;
 800ac46:	8b3a      	ldrh	r2, [r7, #24]
 800ac48:	8a7b      	ldrh	r3, [r7, #18]
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	813b      	strh	r3, [r7, #8]
    if(dx || dy) {
 800ac50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d103      	bne.n	800ac60 <lv_obj_scroll_by_bounded+0x184>
 800ac58:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d009      	beq.n	800ac74 <lv_obj_scroll_by_bounded+0x198>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ac66:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 f806 	bl	800ac7c <lv_obj_scroll_by>
 800ac70:	e000      	b.n	800ac74 <lv_obj_scroll_by_bounded+0x198>
    if(dx == 0 && dy == 0) return;
 800ac72:	bf00      	nop
    }
}
 800ac74:	3724      	adds	r7, #36	; 0x24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd90      	pop	{r4, r7, pc}
	...

0800ac7c <lv_obj_scroll_by>:


void lv_obj_scroll_by(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b09c      	sub	sp, #112	; 0x70
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	4608      	mov	r0, r1
 800ac86:	4611      	mov	r1, r2
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	817b      	strh	r3, [r7, #10]
 800ac8e:	460b      	mov	r3, r1
 800ac90:	813b      	strh	r3, [r7, #8]
 800ac92:	4613      	mov	r3, r2
 800ac94:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 800ac96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d104      	bne.n	800aca8 <lv_obj_scroll_by+0x2c>
 800ac9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 80f7 	beq.w	800ae96 <lv_obj_scroll_by+0x21a>
    if(anim_en == LV_ANIM_ON) {
 800aca8:	79fb      	ldrb	r3, [r7, #7]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	f040 80c4 	bne.w	800ae38 <lv_obj_scroll_by+0x1bc>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f003 fa37 	bl	800e124 <lv_obj_get_disp>
 800acb6:	6638      	str	r0, [r7, #96]	; 0x60
        lv_anim_t a;
        lv_anim_init(&a);
 800acb8:	f107 0314 	add.w	r3, r7, #20
 800acbc:	4618      	mov	r0, r3
 800acbe:	f015 fa5d 	bl	802017c <lv_anim_init>
        lv_anim_set_var(&a, obj);
 800acc2:	f107 0314 	add.w	r3, r7, #20
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff fb83 	bl	800a3d4 <lv_anim_set_var>
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);
 800acce:	f107 0314 	add.w	r3, r7, #20
 800acd2:	4977      	ldr	r1, [pc, #476]	; (800aeb0 <lv_obj_scroll_by+0x234>)
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff fbca 	bl	800a46e <lv_anim_set_ready_cb>

        if(dx) {
 800acda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d052      	beq.n	800ad88 <lv_obj_scroll_by+0x10c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 800ace2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ace4:	f015 f940 	bl	801ff68 <lv_disp_get_hor_res>
 800ace8:	4603      	mov	r3, r0
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	109b      	asrs	r3, r3, #2
 800acee:	4618      	mov	r0, r3
 800acf0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800acf4:	461a      	mov	r2, r3
 800acf6:	2100      	movs	r1, #0
 800acf8:	f015 fb46 	bl	8020388 <lv_anim_speed_to_time>
 800acfc:	66f8      	str	r0, [r7, #108]	; 0x6c
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800acfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad00:	2bc7      	cmp	r3, #199	; 0xc7
 800ad02:	d801      	bhi.n	800ad08 <lv_obj_scroll_by+0x8c>
 800ad04:	23c8      	movs	r3, #200	; 0xc8
 800ad06:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 800ad08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad0a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ad0e:	d902      	bls.n	800ad16 <lv_obj_scroll_by+0x9a>
 800ad10:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ad14:	66fb      	str	r3, [r7, #108]	; 0x6c
            lv_anim_set_time(&a, t);
 800ad16:	f107 0314 	add.w	r3, r7, #20
 800ad1a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7ff fb75 	bl	800a40c <lv_anim_set_time>
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff fcd0 	bl	800a6c8 <lv_obj_get_scroll_x>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_anim_set_values(&a, -sx, -sx + dx);
 800ad2e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800ad32:	4259      	negs	r1, r3
 800ad34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ad38:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800ad3c:	1ad2      	subs	r2, r2, r3
 800ad3e:	f107 0314 	add.w	r3, r7, #20
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7ff fb70 	bl	800a428 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, scroll_x_anim);
 800ad48:	f107 0314 	add.w	r3, r7, #20
 800ad4c:	4959      	ldr	r1, [pc, #356]	; (800aeb4 <lv_obj_scroll_by+0x238>)
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7ff fb4e 	bl	800a3f0 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 800ad54:	f107 0314 	add.w	r3, r7, #20
 800ad58:	4957      	ldr	r1, [pc, #348]	; (800aeb8 <lv_obj_scroll_by+0x23c>)
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff fb79 	bl	800a452 <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800ad60:	f107 0314 	add.w	r3, r7, #20
 800ad64:	461a      	mov	r2, r3
 800ad66:	2109      	movs	r1, #9
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7f9 ffd7 	bl	8004d1c <lv_event_send>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            if(res != LV_RES_OK) return;
 800ad74:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	f040 808e 	bne.w	800ae9a <lv_obj_scroll_by+0x21e>
            lv_anim_start(&a);
 800ad7e:	f107 0314 	add.w	r3, r7, #20
 800ad82:	4618      	mov	r0, r3
 800ad84:	f015 fa20 	bl	80201c8 <lv_anim_start>
        }

        if(dy) {
 800ad88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 808b 	beq.w	800aea8 <lv_obj_scroll_by+0x22c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 800ad92:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ad94:	f015 f90e 	bl	801ffb4 <lv_disp_get_ver_res>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	109b      	asrs	r3, r3, #2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ada4:	461a      	mov	r2, r3
 800ada6:	2100      	movs	r1, #0
 800ada8:	f015 faee 	bl	8020388 <lv_anim_speed_to_time>
 800adac:	66b8      	str	r0, [r7, #104]	; 0x68
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800adae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adb0:	2bc7      	cmp	r3, #199	; 0xc7
 800adb2:	d801      	bhi.n	800adb8 <lv_obj_scroll_by+0x13c>
 800adb4:	23c8      	movs	r3, #200	; 0xc8
 800adb6:	66bb      	str	r3, [r7, #104]	; 0x68
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 800adb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800adbe:	d902      	bls.n	800adc6 <lv_obj_scroll_by+0x14a>
 800adc0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800adc4:	66bb      	str	r3, [r7, #104]	; 0x68
            lv_anim_set_time(&a, t);
 800adc6:	f107 0314 	add.w	r3, r7, #20
 800adca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800adcc:	4618      	mov	r0, r3
 800adce:	f7ff fb1d 	bl	800a40c <lv_anim_set_time>
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f7ff fc90 	bl	800a6f8 <lv_obj_get_scroll_y>
 800add8:	4603      	mov	r3, r0
 800adda:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_anim_set_values(&a, -sy, -sy + dy);
 800adde:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800ade2:	4259      	negs	r1, r3
 800ade4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ade8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800adec:	1ad2      	subs	r2, r2, r3
 800adee:	f107 0314 	add.w	r3, r7, #20
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff fb18 	bl	800a428 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a,  scroll_y_anim);
 800adf8:	f107 0314 	add.w	r3, r7, #20
 800adfc:	492f      	ldr	r1, [pc, #188]	; (800aebc <lv_obj_scroll_by+0x240>)
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff faf6 	bl	800a3f0 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 800ae04:	f107 0314 	add.w	r3, r7, #20
 800ae08:	492b      	ldr	r1, [pc, #172]	; (800aeb8 <lv_obj_scroll_by+0x23c>)
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff fb21 	bl	800a452 <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800ae10:	f107 0314 	add.w	r3, r7, #20
 800ae14:	461a      	mov	r2, r3
 800ae16:	2109      	movs	r1, #9
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f7f9 ff7f 	bl	8004d1c <lv_event_send>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(res != LV_RES_OK) return;
 800ae24:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d138      	bne.n	800ae9e <lv_obj_scroll_by+0x222>
            lv_anim_start(&a);
 800ae2c:	f107 0314 	add.w	r3, r7, #20
 800ae30:	4618      	mov	r0, r3
 800ae32:	f015 f9c9 	bl	80201c8 <lv_anim_start>
 800ae36:	e037      	b.n	800aea8 <lv_obj_scroll_by+0x22c>
        }
    }
    else {
        /*Remove pending animations*/
        lv_anim_del(obj, scroll_y_anim);
 800ae38:	4920      	ldr	r1, [pc, #128]	; (800aebc <lv_obj_scroll_by+0x240>)
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f015 fa3c 	bl	80202b8 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 800ae40:	491c      	ldr	r1, [pc, #112]	; (800aeb4 <lv_obj_scroll_by+0x238>)
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f015 fa38 	bl	80202b8 <lv_anim_del>

        lv_res_t res;
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2109      	movs	r1, #9
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7f9 ff65 	bl	8004d1c <lv_event_send>
 800ae52:	4603      	mov	r3, r0
 800ae54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800ae58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d120      	bne.n	800aea2 <lv_obj_scroll_by+0x226>

        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 800ae60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ae64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f000 f8bb 	bl	800afe6 <_lv_obj_scroll_by_raw>
 800ae70:	4603      	mov	r3, r0
 800ae72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800ae76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d113      	bne.n	800aea6 <lv_obj_scroll_by+0x22a>

        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 800ae7e:	2200      	movs	r2, #0
 800ae80:	210a      	movs	r1, #10
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f7f9 ff4a 	bl	8004d1c <lv_event_send>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800ae8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	e008      	b.n	800aea8 <lv_obj_scroll_by+0x22c>
    if(dx == 0 && dy == 0) return;
 800ae96:	bf00      	nop
 800ae98:	e006      	b.n	800aea8 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800ae9a:	bf00      	nop
 800ae9c:	e004      	b.n	800aea8 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800ae9e:	bf00      	nop
 800aea0:	e002      	b.n	800aea8 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800aea2:	bf00      	nop
 800aea4:	e000      	b.n	800aea8 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800aea6:	bf00      	nop
    }
}
 800aea8:	3770      	adds	r7, #112	; 0x70
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	0800bdcf 	.word	0x0800bdcf
 800aeb4:	0800bd6f 	.word	0x0800bd6f
 800aeb8:	0802041b 	.word	0x0802041b
 800aebc:	0800bd9f 	.word	0x0800bd9f

0800aec0 <lv_obj_scroll_to>:

void lv_obj_scroll_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	4608      	mov	r0, r1
 800aeca:	4611      	mov	r1, r2
 800aecc:	461a      	mov	r2, r3
 800aece:	4603      	mov	r3, r0
 800aed0:	817b      	strh	r3, [r7, #10]
 800aed2:	460b      	mov	r3, r1
 800aed4:	813b      	strh	r3, [r7, #8]
 800aed6:	4613      	mov	r3, r2
 800aed8:	71fb      	strb	r3, [r7, #7]
    lv_obj_scroll_to_x(obj, x, anim_en);
 800aeda:	79fa      	ldrb	r2, [r7, #7]
 800aedc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aee0:	4619      	mov	r1, r3
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 f80c 	bl	800af00 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 800aee8:	79fa      	ldrb	r2, [r7, #7]
 800aeea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aeee:	4619      	mov	r1, r3
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f000 f829 	bl	800af48 <lv_obj_scroll_to_y>
}
 800aef6:	bf00      	nop
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <lv_obj_scroll_to_x>:

void lv_obj_scroll_to_x(lv_obj_t * obj, lv_coord_t x, lv_anim_enable_t anim_en)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	460b      	mov	r3, r1
 800af0a:	807b      	strh	r3, [r7, #2]
 800af0c:	4613      	mov	r3, r2
 800af0e:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_x_anim);
 800af10:	490c      	ldr	r1, [pc, #48]	; (800af44 <lv_obj_scroll_to_x+0x44>)
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f015 f9d0 	bl	80202b8 <lv_anim_del>

    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7ff fbd5 	bl	800a6c8 <lv_obj_get_scroll_x>
 800af1e:	4603      	mov	r3, r0
 800af20:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -x + scroll_x;
 800af22:	89fa      	ldrh	r2, [r7, #14]
 800af24:	887b      	ldrh	r3, [r7, #2]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	b29b      	uxth	r3, r3
 800af2a:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 800af2c:	787b      	ldrb	r3, [r7, #1]
 800af2e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff fdd1 	bl	800aadc <lv_obj_scroll_by_bounded>
}
 800af3a:	bf00      	nop
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	0800bd6f 	.word	0x0800bd6f

0800af48 <lv_obj_scroll_to_y>:

void lv_obj_scroll_to_y(lv_obj_t * obj, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	807b      	strh	r3, [r7, #2]
 800af54:	4613      	mov	r3, r2
 800af56:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_y_anim);
 800af58:	490c      	ldr	r1, [pc, #48]	; (800af8c <lv_obj_scroll_to_y+0x44>)
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f015 f9ac 	bl	80202b8 <lv_anim_del>

    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff fbc9 	bl	800a6f8 <lv_obj_get_scroll_y>
 800af66:	4603      	mov	r3, r0
 800af68:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -y + scroll_y;
 800af6a:	89fa      	ldrh	r2, [r7, #14]
 800af6c:	887b      	ldrh	r3, [r7, #2]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	b29b      	uxth	r3, r3
 800af72:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 800af74:	787b      	ldrb	r3, [r7, #1]
 800af76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800af7a:	2100      	movs	r1, #0
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7ff fdad 	bl	800aadc <lv_obj_scroll_by_bounded>
}
 800af82:	bf00      	nop
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	0800bd9f 	.word	0x0800bd9f

0800af90 <lv_obj_scroll_to_view_recursive>:
    lv_point_t p = {0, 0};
    scroll_area_into_view(&obj->coords, obj, &p, anim_en);
}

void lv_obj_scroll_to_view_recursive(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	70fb      	strb	r3, [r7, #3]
    /*Be sure the screens layout is correct*/
    lv_obj_update_layout(obj);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7fd fe6d 	bl	8008c7c <lv_obj_update_layout>

    lv_point_t p = {0, 0};
 800afa2:	2300      	movs	r3, #0
 800afa4:	81bb      	strh	r3, [r7, #12]
 800afa6:	2300      	movs	r3, #0
 800afa8:	81fb      	strh	r3, [r7, #14]
    lv_obj_t * child = obj;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	617b      	str	r3, [r7, #20]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800afae:	6978      	ldr	r0, [r7, #20]
 800afb0:	f003 f8f2 	bl	800e198 <lv_obj_get_parent>
 800afb4:	6138      	str	r0, [r7, #16]
    while(parent) {
 800afb6:	e00e      	b.n	800afd6 <lv_obj_scroll_to_view_recursive+0x46>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f103 0014 	add.w	r0, r3, #20
 800afbe:	78fb      	ldrb	r3, [r7, #3]
 800afc0:	f107 020c 	add.w	r2, r7, #12
 800afc4:	6979      	ldr	r1, [r7, #20]
 800afc6:	f000 ff11 	bl	800bdec <scroll_area_into_view>
        child = parent;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	617b      	str	r3, [r7, #20]
        parent = lv_obj_get_parent(parent);
 800afce:	6938      	ldr	r0, [r7, #16]
 800afd0:	f003 f8e2 	bl	800e198 <lv_obj_get_parent>
 800afd4:	6138      	str	r0, [r7, #16]
    while(parent) {
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1ed      	bne.n	800afb8 <lv_obj_scroll_to_view_recursive+0x28>
    }
}
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <_lv_obj_scroll_by_raw>:

lv_res_t _lv_obj_scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	460b      	mov	r3, r1
 800aff0:	807b      	strh	r3, [r7, #2]
 800aff2:	4613      	mov	r3, r2
 800aff4:	803b      	strh	r3, [r7, #0]
    if(x == 0 && y == 0) return LV_RES_OK;
 800aff6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d105      	bne.n	800b00a <_lv_obj_scroll_by_raw+0x24>
 800affe:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d101      	bne.n	800b00a <_lv_obj_scroll_by_raw+0x24>
 800b006:	2301      	movs	r3, #1
 800b008:	e032      	b.n	800b070 <_lv_obj_scroll_by_raw+0x8a>

    lv_obj_allocate_spec_attr(obj);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7fb f8a8 	bl	8006160 <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b018:	b29a      	uxth	r2, r3
 800b01a:	887b      	ldrh	r3, [r7, #2]
 800b01c:	4413      	add	r3, r2
 800b01e:	b29a      	uxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	b212      	sxth	r2, r2
 800b026:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b030:	b29a      	uxth	r2, r3
 800b032:	883b      	ldrh	r3, [r7, #0]
 800b034:	4413      	add	r3, r2
 800b036:	b29a      	uxth	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	b212      	sxth	r2, r2
 800b03e:	825a      	strh	r2, [r3, #18]

    lv_obj_move_children_by(obj, x, y, true);
 800b040:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b044:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800b048:	2301      	movs	r3, #1
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7fe faa8 	bl	80095a0 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800b050:	2200      	movs	r2, #0
 800b052:	210b      	movs	r1, #11
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7f9 fe61 	bl	8004d1c <lv_event_send>
 800b05a:	4603      	mov	r3, r0
 800b05c:	73fb      	strb	r3, [r7, #15]
    if(res != LV_RES_OK) return res;
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d001      	beq.n	800b068 <_lv_obj_scroll_by_raw+0x82>
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	e003      	b.n	800b070 <_lv_obj_scroll_by_raw+0x8a>
    lv_obj_invalidate(obj);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fe fc2c 	bl	80098c6 <lv_obj_invalidate>
    return LV_RES_OK;
 800b06e:	2301      	movs	r3, #1
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <lv_obj_get_scrollbar_area>:
    lv_indev_scroll_get_snap_dist(obj, &p);
    lv_obj_scroll_by(obj, p.x, p.y, anim_en);
}

void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
{
 800b078:	b590      	push	{r4, r7, lr}
 800b07a:	b095      	sub	sp, #84	; 0x54
 800b07c:	af02      	add	r7, sp, #8
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
    lv_area_set(hor_area, 0, 0, -1, -1);
 800b084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b08e:	2200      	movs	r2, #0
 800b090:	2100      	movs	r1, #0
 800b092:	68b8      	ldr	r0, [r7, #8]
 800b094:	f015 fbca 	bl	802082c <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800b098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f015 fbc0 	bl	802082c <lv_area_set>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800b0ac:	2110      	movs	r1, #16
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f7fb f80d 	bl	80060ce <lv_obj_has_flag>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f083 0301 	eor.w	r3, r3, #1
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f040 8591 	bne.w	800bbe4 <lv_obj_get_scrollbar_area+0xb6c>

    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff faa8 	bl	800a618 <lv_obj_get_scrollbar_mode>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800b0ce:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 8588 	beq.w	800bbe8 <lv_obj_get_scrollbar_area+0xb70>

    /*If there is no indev scrolling this object but `mode==active` return*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800b0d8:	2000      	movs	r0, #0
 800b0da:	f014 ffcb 	bl	8020074 <lv_indev_get_next>
 800b0de:	6478      	str	r0, [r7, #68]	; 0x44
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800b0e0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d114      	bne.n	800b112 <lv_obj_get_scrollbar_area+0x9a>
        while(indev) {
 800b0e8:	e00a      	b.n	800b100 <lv_obj_get_scrollbar_area+0x88>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800b0ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b0ec:	f7fa fc5d 	bl	80059aa <lv_indev_get_scroll_obj>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d007      	beq.n	800b108 <lv_obj_get_scrollbar_area+0x90>
            indev = lv_indev_get_next(indev);
 800b0f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b0fa:	f014 ffbb 	bl	8020074 <lv_indev_get_next>
 800b0fe:	6478      	str	r0, [r7, #68]	; 0x44
        while(indev) {
 800b100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1f1      	bne.n	800b0ea <lv_obj_get_scrollbar_area+0x72>
 800b106:	e000      	b.n	800b10a <lv_obj_get_scrollbar_area+0x92>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800b108:	bf00      	nop
        }
        if(indev == NULL)  return;
 800b10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 856d 	beq.w	800bbec <lv_obj_get_scrollbar_area+0xb74>
    }

    lv_coord_t st = lv_obj_get_scroll_top(obj);
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7ff fb08 	bl	800a728 <lv_obj_get_scroll_top>
 800b118:	4603      	mov	r3, r0
 800b11a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7ff fb1b 	bl	800a758 <lv_obj_get_scroll_bottom>
 800b122:	4603      	mov	r3, r0
 800b124:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f7ff fb9c 	bl	800a864 <lv_obj_get_scroll_left>
 800b12c:	4603      	mov	r3, r0
 800b12e:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff fc3b 	bl	800a9ac <lv_obj_get_scroll_right>
 800b136:	4603      	mov	r3, r0
 800b138:	873b      	strh	r3, [r7, #56]	; 0x38

    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f7ff fa82 	bl	800a644 <lv_obj_get_scroll_dir>
 800b140:	4603      	mov	r3, r0
 800b142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool ver_draw = false;
 800b146:	2300      	movs	r3, #0
 800b148:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    if((dir & LV_DIR_VER) &&
 800b14c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b150:	f003 030c 	and.w	r3, r3, #12
 800b154:	2b00      	cmp	r3, #0
 800b156:	d01c      	beq.n	800b192 <lv_obj_get_scrollbar_area+0x11a>
 800b158:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d015      	beq.n	800b18c <lv_obj_get_scrollbar_area+0x114>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800b160:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b164:	2b03      	cmp	r3, #3
 800b166:	d107      	bne.n	800b178 <lv_obj_get_scrollbar_area+0x100>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800b168:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dc0d      	bgt.n	800b18c <lv_obj_get_scrollbar_area+0x114>
 800b170:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800b174:	2b00      	cmp	r3, #0
 800b176:	dc09      	bgt.n	800b18c <lv_obj_get_scrollbar_area+0x114>
 800b178:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d108      	bne.n	800b192 <lv_obj_get_scrollbar_area+0x11a>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800b180:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b182:	f7fa fbf1 	bl	8005968 <lv_indev_get_scroll_dir>
 800b186:	4603      	mov	r3, r0
 800b188:	2b0c      	cmp	r3, #12
 800b18a:	d102      	bne.n	800b192 <lv_obj_get_scrollbar_area+0x11a>
        ver_draw = true;
 800b18c:	2301      	movs	r3, #1
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }


    bool hor_draw = false;
 800b192:	2300      	movs	r3, #0
 800b194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    if((dir & LV_DIR_HOR) &&
 800b198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b19c:	f003 0303 	and.w	r3, r3, #3
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d01c      	beq.n	800b1de <lv_obj_get_scrollbar_area+0x166>
 800b1a4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d015      	beq.n	800b1d8 <lv_obj_get_scrollbar_area+0x160>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800b1ac:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d107      	bne.n	800b1c4 <lv_obj_get_scrollbar_area+0x14c>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b1b4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dc0d      	bgt.n	800b1d8 <lv_obj_get_scrollbar_area+0x160>
 800b1bc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dc09      	bgt.n	800b1d8 <lv_obj_get_scrollbar_area+0x160>
 800b1c4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d108      	bne.n	800b1de <lv_obj_get_scrollbar_area+0x166>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800b1cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b1ce:	f7fa fbcb 	bl	8005968 <lv_indev_get_scroll_dir>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d102      	bne.n	800b1de <lv_obj_get_scrollbar_area+0x166>
        hor_draw = true;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }

    if(!hor_draw && !ver_draw) return;
 800b1de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b1e2:	f083 0301 	eor.w	r3, r3, #1
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d007      	beq.n	800b1fc <lv_obj_get_scrollbar_area+0x184>
 800b1ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1f0:	f083 0301 	eor.w	r3, r3, #1
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f040 84fa 	bne.w	800bbf0 <lv_obj_get_scrollbar_area+0xb78>

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 800b1fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff f9d2 	bl	800a5aa <lv_obj_get_style_base_dir>
 800b206:	4603      	mov	r3, r0
 800b208:	2b01      	cmp	r3, #1
 800b20a:	bf0c      	ite	eq
 800b20c:	2301      	moveq	r3, #1
 800b20e:	2300      	movne	r3, #0
 800b210:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    lv_coord_t top_space = lv_obj_get_style_pad_top(obj, LV_PART_SCROLLBAR);
 800b214:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7ff f948 	bl	800a4ae <lv_obj_get_style_pad_top>
 800b21e:	4603      	mov	r3, r0
 800b220:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_coord_t bottom_space = lv_obj_get_style_pad_bottom(obj, LV_PART_SCROLLBAR);
 800b222:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff f953 	bl	800a4d2 <lv_obj_get_style_pad_bottom>
 800b22c:	4603      	mov	r3, r0
 800b22e:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t left_space = lv_obj_get_style_pad_left(obj, LV_PART_SCROLLBAR);
 800b230:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f7ff f95e 	bl	800a4f6 <lv_obj_get_style_pad_left>
 800b23a:	4603      	mov	r3, r0
 800b23c:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t right_space = lv_obj_get_style_pad_right(obj, LV_PART_SCROLLBAR);
 800b23e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff f969 	bl	800a51a <lv_obj_get_style_pad_right>
 800b248:	4603      	mov	r3, r0
 800b24a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t tickness = lv_obj_get_style_width(obj, LV_PART_SCROLLBAR);
 800b24c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff f91a 	bl	800a48a <lv_obj_get_style_width>
 800b256:	4603      	mov	r3, r0
 800b258:	85bb      	strh	r3, [r7, #44]	; 0x2c

    lv_coord_t obj_h = lv_obj_get_height(obj);
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7fd fd76 	bl	8008d4c <lv_obj_get_height>
 800b260:	4603      	mov	r3, r0
 800b262:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t obj_w = lv_obj_get_width(obj);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7fd fd63 	bl	8008d30 <lv_obj_get_width>
 800b26a:	4603      	mov	r3, r0
 800b26c:	853b      	strh	r3, [r7, #40]	; 0x28

    /*Space required for the vertical and horizontal scrollbars*/
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800b26e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <lv_obj_get_scrollbar_area+0x204>
 800b276:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b27a:	e000      	b.n	800b27e <lv_obj_get_scrollbar_area+0x206>
 800b27c:	2300      	movs	r3, #0
 800b27e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 800b280:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <lv_obj_get_scrollbar_area+0x216>
 800b288:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b28c:	e000      	b.n	800b290 <lv_obj_get_scrollbar_area+0x218>
 800b28e:	2300      	movs	r3, #0
 800b290:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t rem;

    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800b292:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f7ff f951 	bl	800a53e <lv_obj_get_style_bg_opa>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d808      	bhi.n	800b2b4 <lv_obj_get_scrollbar_area+0x23c>
       lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN) {
 800b2a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f7ff f95b 	bl	800a562 <lv_obj_get_style_border_opa>
 800b2ac:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	f240 84a0 	bls.w	800bbf4 <lv_obj_get_scrollbar_area+0xb7c>
        return;
    }

    /*Draw vertical scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_h = obj_h + st + sb;
 800b2b4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b2b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b2b8:	4413      	add	r3, r2
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b2be:	4413      	add	r3, r2
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	847b      	strh	r3, [r7, #34]	; 0x22
    if(ver_draw && content_h) {
 800b2c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 81c3 	beq.w	800b654 <lv_obj_get_scrollbar_area+0x5dc>
 800b2ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 81be 	beq.w	800b654 <lv_obj_get_scrollbar_area+0x5dc>
        ver_area->y1 = obj->coords.y1;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	805a      	strh	r2, [r3, #2]
        ver_area->y2 = obj->coords.y2;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	80da      	strh	r2, [r3, #6]
        if(rtl) {
 800b2ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d016      	beq.n	800b322 <lv_obj_get_scrollbar_area+0x2aa>
            ver_area->x1 = obj->coords.x1 + left_space;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2fe:	4413      	add	r3, r2
 800b300:	b29b      	uxth	r3, r3
 800b302:	b21a      	sxth	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	801a      	strh	r2, [r3, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b30e:	b29a      	uxth	r2, r3
 800b310:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b312:	4413      	add	r3, r2
 800b314:	b29b      	uxth	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	b29b      	uxth	r3, r3
 800b31a:	b21a      	sxth	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	809a      	strh	r2, [r3, #4]
 800b320:	e015      	b.n	800b34e <lv_obj_get_scrollbar_area+0x2d6>
        }
        else {
            ver_area->x2 = obj->coords.x2 - right_space;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b328:	b29a      	uxth	r2, r3
 800b32a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	b21a      	sxth	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	809a      	strh	r2, [r3, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	b29b      	uxth	r3, r3
 800b344:	3301      	adds	r3, #1
 800b346:	b29b      	uxth	r3, r3
 800b348:	b21a      	sxth	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	801a      	strh	r2, [r3, #0]
        }

        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800b34e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b352:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b356:	1ad2      	subs	r2, r2, r3
 800b358:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b35c:	1ad2      	subs	r2, r2, r3
 800b35e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800b368:	fb03 f202 	mul.w	r2, r3, r2
 800b36c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b370:	fb92 f3f3 	sdiv	r3, r2, r3
 800b374:	843b      	strh	r3, [r7, #32]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800b376:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800b37a:	2000      	movs	r0, #0
 800b37c:	f014 fe40 	bl	8020000 <lv_disp_get_dpi>
 800b380:	4603      	mov	r3, r0
 800b382:	461a      	mov	r2, r3
 800b384:	4613      	mov	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4413      	add	r3, r2
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	2bef      	cmp	r3, #239	; 0xef
 800b38e:	dd10      	ble.n	800b3b2 <lv_obj_get_scrollbar_area+0x33a>
 800b390:	2000      	movs	r0, #0
 800b392:	f014 fe35 	bl	8020000 <lv_disp_get_dpi>
 800b396:	4603      	mov	r3, r0
 800b398:	461a      	mov	r2, r3
 800b39a:	4613      	mov	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	3350      	adds	r3, #80	; 0x50
 800b3a4:	4aa7      	ldr	r2, [pc, #668]	; (800b644 <lv_obj_get_scrollbar_area+0x5cc>)
 800b3a6:	fb82 1203 	smull	r1, r2, r2, r3
 800b3aa:	1192      	asrs	r2, r2, #6
 800b3ac:	17db      	asrs	r3, r3, #31
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	e000      	b.n	800b3b4 <lv_obj_get_scrollbar_area+0x33c>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	42a3      	cmp	r3, r4
 800b3b6:	db1e      	blt.n	800b3f6 <lv_obj_get_scrollbar_area+0x37e>
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	f014 fe21 	bl	8020000 <lv_disp_get_dpi>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	2bef      	cmp	r3, #239	; 0xef
 800b3cc:	dd11      	ble.n	800b3f2 <lv_obj_get_scrollbar_area+0x37a>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	f014 fe16 	bl	8020000 <lv_disp_get_dpi>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	3350      	adds	r3, #80	; 0x50
 800b3e2:	4a98      	ldr	r2, [pc, #608]	; (800b644 <lv_obj_get_scrollbar_area+0x5cc>)
 800b3e4:	fb82 1203 	smull	r1, r2, r2, r3
 800b3e8:	1192      	asrs	r2, r2, #6
 800b3ea:	17db      	asrs	r3, r3, #31
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	b21b      	sxth	r3, r3
 800b3f0:	e003      	b.n	800b3fa <lv_obj_get_scrollbar_area+0x382>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e001      	b.n	800b3fa <lv_obj_get_scrollbar_area+0x382>
 800b3f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b3fa:	843b      	strh	r3, [r7, #32]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800b3fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b3fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	b29a      	uxth	r2, r3
 800b404:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	b29a      	uxth	r2, r3
 800b40a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	b29a      	uxth	r2, r3
 800b410:	8c3b      	ldrh	r3, [r7, #32]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	b29b      	uxth	r3, r3
 800b416:	83fb      	strh	r3, [r7, #30]
              sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 800b418:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b41a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	b29b      	uxth	r3, r3
 800b420:	83bb      	strh	r3, [r7, #28]
        if(scroll_h <= 0) {
 800b422:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b426:	2b00      	cmp	r3, #0
 800b428:	dc19      	bgt.n	800b45e <lv_obj_get_scrollbar_area+0x3e6>
            ver_area->y1 = obj->coords.y1 + top_space;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b430:	b29a      	uxth	r2, r3
 800b432:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b434:	4413      	add	r3, r2
 800b436:	b29b      	uxth	r3, r3
 800b438:	b21a      	sxth	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b444:	b29a      	uxth	r2, r3
 800b446:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	b29b      	uxth	r3, r3
 800b452:	3b01      	subs	r3, #1
 800b454:	b29b      	uxth	r3, r3
 800b456:	b21a      	sxth	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	80da      	strh	r2, [r3, #6]
 800b45c:	e0fa      	b.n	800b654 <lv_obj_get_scrollbar_area+0x5dc>
        }
        else {
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800b45e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b462:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800b466:	fb03 f202 	mul.w	r2, r3, r2
 800b46a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b46e:	fb92 f3f3 	sdiv	r3, r2, r3
 800b472:	837b      	strh	r3, [r7, #26]
            sb_y = rem - sb_y;
 800b474:	8bfa      	ldrh	r2, [r7, #30]
 800b476:	8b7b      	ldrh	r3, [r7, #26]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	837b      	strh	r3, [r7, #26]

            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b484:	b29a      	uxth	r2, r3
 800b486:	8b7b      	ldrh	r3, [r7, #26]
 800b488:	4413      	add	r3, r2
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b48e:	4413      	add	r3, r2
 800b490:	b29b      	uxth	r3, r3
 800b492:	b21a      	sxth	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	8c3b      	ldrh	r3, [r7, #32]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	b21a      	sxth	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	80da      	strh	r2, [r3, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b4c4:	440b      	add	r3, r1
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	da57      	bge.n	800b57a <lv_obj_get_scrollbar_area+0x502>
                ver_area->y1 = obj->coords.y1 + top_space;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b4d4:	4413      	add	r3, r2
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	b21a      	sxth	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	805a      	strh	r2, [r3, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4e4:	461c      	mov	r4, r3
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	f014 fd8a 	bl	8020000 <lv_disp_get_dpi>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	2bef      	cmp	r3, #239	; 0xef
 800b4fa:	dd10      	ble.n	800b51e <lv_obj_get_scrollbar_area+0x4a6>
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	f014 fd7f 	bl	8020000 <lv_disp_get_dpi>
 800b502:	4603      	mov	r3, r0
 800b504:	461a      	mov	r2, r3
 800b506:	4613      	mov	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	005b      	lsls	r3, r3, #1
 800b50e:	3350      	adds	r3, #80	; 0x50
 800b510:	4a4c      	ldr	r2, [pc, #304]	; (800b644 <lv_obj_get_scrollbar_area+0x5cc>)
 800b512:	fb82 1203 	smull	r1, r2, r2, r3
 800b516:	1192      	asrs	r2, r2, #6
 800b518:	17db      	asrs	r3, r3, #31
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	e000      	b.n	800b520 <lv_obj_get_scrollbar_area+0x4a8>
 800b51e:	2301      	movs	r3, #1
 800b520:	4423      	add	r3, r4
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b528:	4293      	cmp	r3, r2
 800b52a:	dd26      	ble.n	800b57a <lv_obj_get_scrollbar_area+0x502>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b532:	b29c      	uxth	r4, r3
 800b534:	2000      	movs	r0, #0
 800b536:	f014 fd63 	bl	8020000 <lv_disp_get_dpi>
 800b53a:	4603      	mov	r3, r0
 800b53c:	461a      	mov	r2, r3
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	2bef      	cmp	r3, #239	; 0xef
 800b548:	dd11      	ble.n	800b56e <lv_obj_get_scrollbar_area+0x4f6>
 800b54a:	2000      	movs	r0, #0
 800b54c:	f014 fd58 	bl	8020000 <lv_disp_get_dpi>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	4613      	mov	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	4413      	add	r3, r2
 800b55a:	005b      	lsls	r3, r3, #1
 800b55c:	3350      	adds	r3, #80	; 0x50
 800b55e:	4a39      	ldr	r2, [pc, #228]	; (800b644 <lv_obj_get_scrollbar_area+0x5cc>)
 800b560:	fb82 1203 	smull	r1, r2, r2, r3
 800b564:	1192      	asrs	r2, r2, #6
 800b566:	17db      	asrs	r3, r3, #31
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	e000      	b.n	800b570 <lv_obj_get_scrollbar_area+0x4f8>
 800b56e:	2301      	movs	r3, #1
 800b570:	4423      	add	r3, r4
 800b572:	b29b      	uxth	r3, r3
 800b574:	b21a      	sxth	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	80da      	strh	r2, [r3, #6]
                }
            }
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b580:	4619      	mov	r1, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b588:	461a      	mov	r2, r3
 800b58a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b58e:	1ad2      	subs	r2, r2, r3
 800b590:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	4299      	cmp	r1, r3
 800b598:	dd5c      	ble.n	800b654 <lv_obj_get_scrollbar_area+0x5dc>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	b21a      	sxth	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	80da      	strh	r2, [r3, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b5ba:	461c      	mov	r4, r3
 800b5bc:	2000      	movs	r0, #0
 800b5be:	f014 fd1f 	bl	8020000 <lv_disp_get_dpi>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	2bef      	cmp	r3, #239	; 0xef
 800b5d0:	dd10      	ble.n	800b5f4 <lv_obj_get_scrollbar_area+0x57c>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	f014 fd14 	bl	8020000 <lv_disp_get_dpi>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	461a      	mov	r2, r3
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	3350      	adds	r3, #80	; 0x50
 800b5e6:	4a17      	ldr	r2, [pc, #92]	; (800b644 <lv_obj_get_scrollbar_area+0x5cc>)
 800b5e8:	fb82 1203 	smull	r1, r2, r2, r3
 800b5ec:	1192      	asrs	r2, r2, #6
 800b5ee:	17db      	asrs	r3, r3, #31
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	e000      	b.n	800b5f6 <lv_obj_get_scrollbar_area+0x57e>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	1ae3      	subs	r3, r4, r3
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800b5fe:	4293      	cmp	r3, r2
 800b600:	da28      	bge.n	800b654 <lv_obj_get_scrollbar_area+0x5dc>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b608:	b29c      	uxth	r4, r3
 800b60a:	2000      	movs	r0, #0
 800b60c:	f014 fcf8 	bl	8020000 <lv_disp_get_dpi>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	4613      	mov	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	2bef      	cmp	r3, #239	; 0xef
 800b61e:	dd13      	ble.n	800b648 <lv_obj_get_scrollbar_area+0x5d0>
 800b620:	2000      	movs	r0, #0
 800b622:	f014 fced 	bl	8020000 <lv_disp_get_dpi>
 800b626:	4603      	mov	r3, r0
 800b628:	461a      	mov	r2, r3
 800b62a:	4613      	mov	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4413      	add	r3, r2
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	3350      	adds	r3, #80	; 0x50
 800b634:	4a03      	ldr	r2, [pc, #12]	; (800b644 <lv_obj_get_scrollbar_area+0x5cc>)
 800b636:	fb82 1203 	smull	r1, r2, r2, r3
 800b63a:	1192      	asrs	r2, r2, #6
 800b63c:	17db      	asrs	r3, r3, #31
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	b29b      	uxth	r3, r3
 800b642:	e002      	b.n	800b64a <lv_obj_get_scrollbar_area+0x5d2>
 800b644:	66666667 	.word	0x66666667
 800b648:	2301      	movs	r3, #1
 800b64a:	1ae3      	subs	r3, r4, r3
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	b21a      	sxth	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    /*Draw horizontal scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_w = obj_w + sl + sr;
 800b654:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b656:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b658:	4413      	add	r3, r2
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b65e:	4413      	add	r3, r2
 800b660:	b29b      	uxth	r3, r3
 800b662:	833b      	strh	r3, [r7, #24]
    if(hor_draw && content_w) {
 800b664:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 82c4 	beq.w	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
 800b66e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 82bf 	beq.w	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b67e:	b29a      	uxth	r2, r3
 800b680:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	b29b      	uxth	r3, r3
 800b686:	b21a      	sxth	r2, r3
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	80da      	strh	r2, [r3, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b692:	b29a      	uxth	r2, r3
 800b694:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	b29b      	uxth	r3, r3
 800b69a:	3301      	adds	r3, #1
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	b21a      	sxth	r2, r3
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	805a      	strh	r2, [r3, #2]
        hor_area->x1 = obj->coords.x1;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	801a      	strh	r2, [r3, #0]
        hor_area->x2 = obj->coords.x2;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	809a      	strh	r2, [r3, #4]

        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800b6b8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b6bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b6c0:	1ad2      	subs	r2, r2, r3
 800b6c2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b6c6:	1ad2      	subs	r2, r2, r3
 800b6c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800b6d2:	fb03 f202 	mul.w	r2, r3, r2
 800b6d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b6da:	fb92 f3f3 	sdiv	r3, r2, r3
 800b6de:	82fb      	strh	r3, [r7, #22]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800b6e0:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	f014 fc8b 	bl	8020000 <lv_disp_get_dpi>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	2bef      	cmp	r3, #239	; 0xef
 800b6f8:	dd10      	ble.n	800b71c <lv_obj_get_scrollbar_area+0x6a4>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	f014 fc80 	bl	8020000 <lv_disp_get_dpi>
 800b700:	4603      	mov	r3, r0
 800b702:	461a      	mov	r2, r3
 800b704:	4613      	mov	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	005b      	lsls	r3, r3, #1
 800b70c:	3350      	adds	r3, #80	; 0x50
 800b70e:	4aa7      	ldr	r2, [pc, #668]	; (800b9ac <lv_obj_get_scrollbar_area+0x934>)
 800b710:	fb82 1203 	smull	r1, r2, r2, r3
 800b714:	1192      	asrs	r2, r2, #6
 800b716:	17db      	asrs	r3, r3, #31
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	e000      	b.n	800b71e <lv_obj_get_scrollbar_area+0x6a6>
 800b71c:	2301      	movs	r3, #1
 800b71e:	42a3      	cmp	r3, r4
 800b720:	db1e      	blt.n	800b760 <lv_obj_get_scrollbar_area+0x6e8>
 800b722:	2000      	movs	r0, #0
 800b724:	f014 fc6c 	bl	8020000 <lv_disp_get_dpi>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	2bef      	cmp	r3, #239	; 0xef
 800b736:	dd11      	ble.n	800b75c <lv_obj_get_scrollbar_area+0x6e4>
 800b738:	2000      	movs	r0, #0
 800b73a:	f014 fc61 	bl	8020000 <lv_disp_get_dpi>
 800b73e:	4603      	mov	r3, r0
 800b740:	461a      	mov	r2, r3
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	3350      	adds	r3, #80	; 0x50
 800b74c:	4a97      	ldr	r2, [pc, #604]	; (800b9ac <lv_obj_get_scrollbar_area+0x934>)
 800b74e:	fb82 1203 	smull	r1, r2, r2, r3
 800b752:	1192      	asrs	r2, r2, #6
 800b754:	17db      	asrs	r3, r3, #31
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	b21b      	sxth	r3, r3
 800b75a:	e003      	b.n	800b764 <lv_obj_get_scrollbar_area+0x6ec>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e001      	b.n	800b764 <lv_obj_get_scrollbar_area+0x6ec>
 800b760:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b764:	82fb      	strh	r3, [r7, #22]
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800b766:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b768:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	b29a      	uxth	r2, r3
 800b774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	b29a      	uxth	r2, r3
 800b77a:	8afb      	ldrh	r3, [r7, #22]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	b29b      	uxth	r3, r3
 800b780:	83fb      	strh	r3, [r7, #30]
              sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800b782:	8b3a      	ldrh	r2, [r7, #24]
 800b784:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	b29b      	uxth	r3, r3
 800b78a:	82bb      	strh	r3, [r7, #20]
        if(scroll_w <= 0) {
 800b78c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	dc37      	bgt.n	800b804 <lv_obj_get_scrollbar_area+0x78c>
            if(rtl) {
 800b794:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d019      	beq.n	800b7d0 <lv_obj_get_scrollbar_area+0x758>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b7a6:	4413      	add	r3, r2
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7ac:	4413      	add	r3, r2
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	b21a      	sxth	r2, r3
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	b21a      	sxth	r2, r3
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	809a      	strh	r2, [r3, #4]
 800b7ce:	e212      	b.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
            }
            else {
                hor_area->x1 = obj->coords.x1 + left_space;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b7da:	4413      	add	r3, r2
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	b21a      	sxth	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	b21a      	sxth	r2, r3
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	809a      	strh	r2, [r3, #4]
 800b802:	e1f8      	b.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
            }
        }
        else {
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800b804:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b808:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800b80c:	fb03 f202 	mul.w	r2, r3, r2
 800b810:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b814:	fb92 f3f3 	sdiv	r3, r2, r3
 800b818:	827b      	strh	r3, [r7, #18]
            sb_x = rem - sb_x;
 800b81a:	8bfa      	ldrh	r2, [r7, #30]
 800b81c:	8a7b      	ldrh	r3, [r7, #18]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	b29b      	uxth	r3, r3
 800b822:	827b      	strh	r3, [r7, #18]

            if(rtl) {
 800b824:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 80f1 	beq.w	800ba10 <lv_obj_get_scrollbar_area+0x998>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b834:	b29a      	uxth	r2, r3
 800b836:	8a7b      	ldrh	r3, [r7, #18]
 800b838:	4413      	add	r3, r2
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b83e:	4413      	add	r3, r2
 800b840:	b29a      	uxth	r2, r3
 800b842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b844:	4413      	add	r3, r2
 800b846:	b29b      	uxth	r3, r3
 800b848:	b21a      	sxth	r2, r3
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b854:	b29a      	uxth	r2, r3
 800b856:	8afb      	ldrh	r3, [r7, #22]
 800b858:	4413      	add	r3, r2
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	3b01      	subs	r3, #1
 800b85e:	b29b      	uxth	r3, r3
 800b860:	b21a      	sxth	r2, r3
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b86c:	4619      	mov	r1, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b874:	461a      	mov	r2, r3
 800b876:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b87a:	441a      	add	r2, r3
 800b87c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b880:	4413      	add	r3, r2
 800b882:	4299      	cmp	r1, r3
 800b884:	da5a      	bge.n	800b93c <lv_obj_get_scrollbar_area+0x8c4>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b890:	4413      	add	r3, r2
 800b892:	b29a      	uxth	r2, r3
 800b894:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b896:	4413      	add	r3, r2
 800b898:	b29b      	uxth	r3, r3
 800b89a:	b21a      	sxth	r2, r3
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8a6:	461c      	mov	r4, r3
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	f014 fba9 	bl	8020000 <lv_disp_get_dpi>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	2bef      	cmp	r3, #239	; 0xef
 800b8bc:	dd10      	ble.n	800b8e0 <lv_obj_get_scrollbar_area+0x868>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	f014 fb9e 	bl	8020000 <lv_disp_get_dpi>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	3350      	adds	r3, #80	; 0x50
 800b8d2:	4a36      	ldr	r2, [pc, #216]	; (800b9ac <lv_obj_get_scrollbar_area+0x934>)
 800b8d4:	fb82 1203 	smull	r1, r2, r2, r3
 800b8d8:	1192      	asrs	r2, r2, #6
 800b8da:	17db      	asrs	r3, r3, #31
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	e000      	b.n	800b8e2 <lv_obj_get_scrollbar_area+0x86a>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	4423      	add	r3, r4
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	dd26      	ble.n	800b93c <lv_obj_get_scrollbar_area+0x8c4>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8f4:	b29c      	uxth	r4, r3
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	f014 fb82 	bl	8020000 <lv_disp_get_dpi>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	461a      	mov	r2, r3
 800b900:	4613      	mov	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	2bef      	cmp	r3, #239	; 0xef
 800b90a:	dd11      	ble.n	800b930 <lv_obj_get_scrollbar_area+0x8b8>
 800b90c:	2000      	movs	r0, #0
 800b90e:	f014 fb77 	bl	8020000 <lv_disp_get_dpi>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	4613      	mov	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	005b      	lsls	r3, r3, #1
 800b91e:	3350      	adds	r3, #80	; 0x50
 800b920:	4a22      	ldr	r2, [pc, #136]	; (800b9ac <lv_obj_get_scrollbar_area+0x934>)
 800b922:	fb82 1203 	smull	r1, r2, r2, r3
 800b926:	1192      	asrs	r2, r2, #6
 800b928:	17db      	asrs	r3, r3, #31
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	e000      	b.n	800b932 <lv_obj_get_scrollbar_area+0x8ba>
 800b930:	2301      	movs	r3, #1
 800b932:	4423      	add	r3, r4
 800b934:	b29b      	uxth	r3, r3
 800b936:	b21a      	sxth	r2, r3
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b942:	461a      	mov	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b94a:	4619      	mov	r1, r3
 800b94c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800b950:	1acb      	subs	r3, r1, r3
 800b952:	429a      	cmp	r2, r3
 800b954:	f340 814f 	ble.w	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b95e:	b29a      	uxth	r2, r3
 800b960:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	b29b      	uxth	r3, r3
 800b966:	b21a      	sxth	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b972:	461c      	mov	r4, r3
 800b974:	2000      	movs	r0, #0
 800b976:	f014 fb43 	bl	8020000 <lv_disp_get_dpi>
 800b97a:	4603      	mov	r3, r0
 800b97c:	461a      	mov	r2, r3
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	2bef      	cmp	r3, #239	; 0xef
 800b988:	dd12      	ble.n	800b9b0 <lv_obj_get_scrollbar_area+0x938>
 800b98a:	2000      	movs	r0, #0
 800b98c:	f014 fb38 	bl	8020000 <lv_disp_get_dpi>
 800b990:	4603      	mov	r3, r0
 800b992:	461a      	mov	r2, r3
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	3350      	adds	r3, #80	; 0x50
 800b99e:	4a03      	ldr	r2, [pc, #12]	; (800b9ac <lv_obj_get_scrollbar_area+0x934>)
 800b9a0:	fb82 1203 	smull	r1, r2, r2, r3
 800b9a4:	1192      	asrs	r2, r2, #6
 800b9a6:	17db      	asrs	r3, r3, #31
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	e002      	b.n	800b9b2 <lv_obj_get_scrollbar_area+0x93a>
 800b9ac:	66666667 	.word	0x66666667
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	1ae3      	subs	r3, r4, r3
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	f280 811b 	bge.w	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b9c6:	b29c      	uxth	r4, r3
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	f014 fb19 	bl	8020000 <lv_disp_get_dpi>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	2bef      	cmp	r3, #239	; 0xef
 800b9dc:	dd11      	ble.n	800ba02 <lv_obj_get_scrollbar_area+0x98a>
 800b9de:	2000      	movs	r0, #0
 800b9e0:	f014 fb0e 	bl	8020000 <lv_disp_get_dpi>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4413      	add	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	3350      	adds	r3, #80	; 0x50
 800b9f2:	4a82      	ldr	r2, [pc, #520]	; (800bbfc <lv_obj_get_scrollbar_area+0xb84>)
 800b9f4:	fb82 1203 	smull	r1, r2, r2, r3
 800b9f8:	1192      	asrs	r2, r2, #6
 800b9fa:	17db      	asrs	r3, r3, #31
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	e000      	b.n	800ba04 <lv_obj_get_scrollbar_area+0x98c>
 800ba02:	2301      	movs	r3, #1
 800ba04:	1ae3      	subs	r3, r4, r3
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	b21a      	sxth	r2, r3
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	801a      	strh	r2, [r3, #0]
 800ba0e:	e0f2      	b.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
                    }
                }
            }
            else {
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	8a7b      	ldrh	r3, [r7, #18]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ba20:	4413      	add	r3, r2
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	b21a      	sxth	r2, r3
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	8afb      	ldrh	r3, [r7, #22]
 800ba34:	4413      	add	r3, r2
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	b21a      	sxth	r2, r3
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ba50:	4619      	mov	r1, r3
 800ba52:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ba56:	440b      	add	r3, r1
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	da57      	bge.n	800bb0c <lv_obj_get_scrollbar_area+0xa94>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ba66:	4413      	add	r3, r2
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	b21a      	sxth	r2, r3
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba76:	461c      	mov	r4, r3
 800ba78:	2000      	movs	r0, #0
 800ba7a:	f014 fac1 	bl	8020000 <lv_disp_get_dpi>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	461a      	mov	r2, r3
 800ba82:	4613      	mov	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	2bef      	cmp	r3, #239	; 0xef
 800ba8c:	dd10      	ble.n	800bab0 <lv_obj_get_scrollbar_area+0xa38>
 800ba8e:	2000      	movs	r0, #0
 800ba90:	f014 fab6 	bl	8020000 <lv_disp_get_dpi>
 800ba94:	4603      	mov	r3, r0
 800ba96:	461a      	mov	r2, r3
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	3350      	adds	r3, #80	; 0x50
 800baa2:	4a56      	ldr	r2, [pc, #344]	; (800bbfc <lv_obj_get_scrollbar_area+0xb84>)
 800baa4:	fb82 1203 	smull	r1, r2, r2, r3
 800baa8:	1192      	asrs	r2, r2, #6
 800baaa:	17db      	asrs	r3, r3, #31
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	e000      	b.n	800bab2 <lv_obj_get_scrollbar_area+0xa3a>
 800bab0:	2301      	movs	r3, #1
 800bab2:	4423      	add	r3, r4
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800baba:	4293      	cmp	r3, r2
 800babc:	dd26      	ble.n	800bb0c <lv_obj_get_scrollbar_area+0xa94>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bac4:	b29c      	uxth	r4, r3
 800bac6:	2000      	movs	r0, #0
 800bac8:	f014 fa9a 	bl	8020000 <lv_disp_get_dpi>
 800bacc:	4603      	mov	r3, r0
 800bace:	461a      	mov	r2, r3
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	005b      	lsls	r3, r3, #1
 800bad8:	2bef      	cmp	r3, #239	; 0xef
 800bada:	dd11      	ble.n	800bb00 <lv_obj_get_scrollbar_area+0xa88>
 800badc:	2000      	movs	r0, #0
 800bade:	f014 fa8f 	bl	8020000 <lv_disp_get_dpi>
 800bae2:	4603      	mov	r3, r0
 800bae4:	461a      	mov	r2, r3
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	005b      	lsls	r3, r3, #1
 800baee:	3350      	adds	r3, #80	; 0x50
 800baf0:	4a42      	ldr	r2, [pc, #264]	; (800bbfc <lv_obj_get_scrollbar_area+0xb84>)
 800baf2:	fb82 1203 	smull	r1, r2, r2, r3
 800baf6:	1192      	asrs	r2, r2, #6
 800baf8:	17db      	asrs	r3, r3, #31
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	e000      	b.n	800bb02 <lv_obj_get_scrollbar_area+0xa8a>
 800bb00:	2301      	movs	r3, #1
 800bb02:	4423      	add	r3, r4
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	b21a      	sxth	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bb12:	4619      	mov	r1, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bb20:	1ad2      	subs	r2, r2, r3
 800bb22:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	4299      	cmp	r1, r3
 800bb2a:	dd64      	ble.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	b21a      	sxth	r2, r3
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bb4c:	461c      	mov	r4, r3
 800bb4e:	2000      	movs	r0, #0
 800bb50:	f014 fa56 	bl	8020000 <lv_disp_get_dpi>
 800bb54:	4603      	mov	r3, r0
 800bb56:	461a      	mov	r2, r3
 800bb58:	4613      	mov	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	2bef      	cmp	r3, #239	; 0xef
 800bb62:	dd10      	ble.n	800bb86 <lv_obj_get_scrollbar_area+0xb0e>
 800bb64:	2000      	movs	r0, #0
 800bb66:	f014 fa4b 	bl	8020000 <lv_disp_get_dpi>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	3350      	adds	r3, #80	; 0x50
 800bb78:	4a20      	ldr	r2, [pc, #128]	; (800bbfc <lv_obj_get_scrollbar_area+0xb84>)
 800bb7a:	fb82 1203 	smull	r1, r2, r2, r3
 800bb7e:	1192      	asrs	r2, r2, #6
 800bb80:	17db      	asrs	r3, r3, #31
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	e000      	b.n	800bb88 <lv_obj_get_scrollbar_area+0xb10>
 800bb86:	2301      	movs	r3, #1
 800bb88:	1ae3      	subs	r3, r4, r3
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800bb90:	4293      	cmp	r3, r2
 800bb92:	da30      	bge.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bb9a:	b29c      	uxth	r4, r3
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f014 fa2f 	bl	8020000 <lv_disp_get_dpi>
 800bba2:	4603      	mov	r3, r0
 800bba4:	461a      	mov	r2, r3
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	2bef      	cmp	r3, #239	; 0xef
 800bbb0:	dd11      	ble.n	800bbd6 <lv_obj_get_scrollbar_area+0xb5e>
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	f014 fa24 	bl	8020000 <lv_disp_get_dpi>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	461a      	mov	r2, r3
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	3350      	adds	r3, #80	; 0x50
 800bbc6:	4a0d      	ldr	r2, [pc, #52]	; (800bbfc <lv_obj_get_scrollbar_area+0xb84>)
 800bbc8:	fb82 1203 	smull	r1, r2, r2, r3
 800bbcc:	1192      	asrs	r2, r2, #6
 800bbce:	17db      	asrs	r3, r3, #31
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	e000      	b.n	800bbd8 <lv_obj_get_scrollbar_area+0xb60>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	1ae3      	subs	r3, r4, r3
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	b21a      	sxth	r2, r3
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	801a      	strh	r2, [r3, #0]
 800bbe2:	e008      	b.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800bbe4:	bf00      	nop
 800bbe6:	e006      	b.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800bbe8:	bf00      	nop
 800bbea:	e004      	b.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
        if(indev == NULL)  return;
 800bbec:	bf00      	nop
 800bbee:	e002      	b.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
    if(!hor_draw && !ver_draw) return;
 800bbf0:	bf00      	nop
 800bbf2:	e000      	b.n	800bbf6 <lv_obj_get_scrollbar_area+0xb7e>
        return;
 800bbf4:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800bbf6:	374c      	adds	r7, #76	; 0x4c
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd90      	pop	{r4, r7, pc}
 800bbfc:	66666667 	.word	0x66666667

0800bc00 <lv_obj_scrollbar_invalidate>:

void lv_obj_scrollbar_invalidate(lv_obj_t * obj)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800bc08:	f107 0208 	add.w	r2, r7, #8
 800bc0c:	f107 0310 	add.w	r3, r7, #16
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7ff fa30 	bl	800b078 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800bc18:	f107 0310 	add.w	r3, r7, #16
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f014 fe3c 	bl	802089a <lv_area_get_size>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d107      	bne.n	800bc38 <lv_obj_scrollbar_invalidate+0x38>
 800bc28:	f107 0308 	add.w	r3, r7, #8
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f014 fe34 	bl	802089a <lv_area_get_size>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d01c      	beq.n	800bc72 <lv_obj_scrollbar_invalidate+0x72>

    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800bc38:	f107 0310 	add.w	r3, r7, #16
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f014 fe2c 	bl	802089a <lv_area_get_size>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d005      	beq.n	800bc54 <lv_obj_scrollbar_invalidate+0x54>
 800bc48:	f107 0310 	add.w	r3, r7, #16
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7fd fe04 	bl	800985c <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800bc54:	f107 0308 	add.w	r3, r7, #8
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f014 fe1e 	bl	802089a <lv_area_get_size>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <lv_obj_scrollbar_invalidate+0x74>
 800bc64:	f107 0308 	add.w	r3, r7, #8
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7fd fdf6 	bl	800985c <lv_obj_invalidate_area>
 800bc70:	e000      	b.n	800bc74 <lv_obj_scrollbar_invalidate+0x74>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800bc72:	bf00      	nop
}
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <lv_obj_readjust_scroll>:

void lv_obj_readjust_scroll(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	460b      	mov	r3, r1
 800bc84:	70fb      	strb	r3, [r7, #3]
    /*Be sure the bottom side is not remains scrolled in*/
    /*With snapping the content can't be scrolled in*/
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7fe fd08 	bl	800a69c <lv_obj_get_scroll_snap_y>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d121      	bne.n	800bcd6 <lv_obj_readjust_scroll+0x5c>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7fe fd48 	bl	800a728 <lv_obj_get_scroll_top>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	81fb      	strh	r3, [r7, #14]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7fe fd5b 	bl	800a758 <lv_obj_get_scroll_bottom>
 800bca2:	4603      	mov	r3, r0
 800bca4:	81bb      	strh	r3, [r7, #12]
        if(sb < 0 && st > 0) {
 800bca6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	da13      	bge.n	800bcd6 <lv_obj_readjust_scroll+0x5c>
 800bcae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	dd0f      	ble.n	800bcd6 <lv_obj_readjust_scroll+0x5c>
            sb = LV_MIN(st, -sb);
 800bcb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bcba:	425a      	negs	r2, r3
 800bcbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	bfa8      	it	ge
 800bcc4:	4613      	movge	r3, r2
 800bcc6:	81bb      	strh	r3, [r7, #12]
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800bcc8:	78fb      	ldrb	r3, [r7, #3]
 800bcca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800bcce:	2100      	movs	r1, #0
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7fe ffd3 	bl	800ac7c <lv_obj_scroll_by>
        }
    }

    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7fe fcca 	bl	800a670 <lv_obj_get_scroll_snap_x>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d141      	bne.n	800bd66 <lv_obj_readjust_scroll+0xec>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7fe fdbe 	bl	800a864 <lv_obj_get_scroll_left>
 800bce8:	4603      	mov	r3, r0
 800bcea:	817b      	strh	r3, [r7, #10]
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7fe fe5d 	bl	800a9ac <lv_obj_get_scroll_right>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	813b      	strh	r3, [r7, #8]
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7fe fc56 	bl	800a5aa <lv_obj_get_style_base_dir>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d018      	beq.n	800bd36 <lv_obj_readjust_scroll+0xbc>
            /*Be sure the left side is not remains scrolled in*/
            if(sr < 0 && sl > 0) {
 800bd04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	da2c      	bge.n	800bd66 <lv_obj_readjust_scroll+0xec>
 800bd0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dd28      	ble.n	800bd66 <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sl, -sr);
 800bd14:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bd18:	425a      	negs	r2, r3
 800bd1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	bfa8      	it	ge
 800bd22:	4613      	movge	r3, r2
 800bd24:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7fe ffa4 	bl	800ac7c <lv_obj_scroll_by>
                sr = LV_MIN(sr, -sl);
                lv_obj_scroll_by(obj, sl, 0, anim_en);
            }
        }
    }
}
 800bd34:	e017      	b.n	800bd66 <lv_obj_readjust_scroll+0xec>
            if(sl < 0 && sr > 0) {
 800bd36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	da13      	bge.n	800bd66 <lv_obj_readjust_scroll+0xec>
 800bd3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	dd0f      	ble.n	800bd66 <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sr, -sl);
 800bd46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bd4a:	425a      	negs	r2, r3
 800bd4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bd50:	4293      	cmp	r3, r2
 800bd52:	bfa8      	it	ge
 800bd54:	4613      	movge	r3, r2
 800bd56:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800bd58:	78fb      	ldrb	r3, [r7, #3]
 800bd5a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7fe ff8b 	bl	800ac7c <lv_obj_scroll_by>
}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <scroll_x_anim>:
 *   STATIC FUNCTIONS
 **********************/


static void scroll_x_anim(void * obj, int32_t v)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b082      	sub	sp, #8
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7fe fca5 	bl	800a6c8 <lv_obj_get_scroll_x>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	4413      	add	r3, r2
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	b21b      	sxth	r3, r3
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff f928 	bl	800afe6 <_lv_obj_scroll_by_raw>
}
 800bd96:	bf00      	nop
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <scroll_y_anim>:

static void scroll_y_anim(void * obj, int32_t v)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7fe fca5 	bl	800a6f8 <lv_obj_get_scroll_y>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	4413      	add	r3, r2
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	b21b      	sxth	r3, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff f910 	bl	800afe6 <_lv_obj_scroll_by_raw>
}
 800bdc6:	bf00      	nop
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <scroll_anim_ready_cb>:

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2200      	movs	r2, #0
 800bddc:	210a      	movs	r1, #10
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7f8 ff9c 	bl	8004d1c <lv_event_send>
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b092      	sub	sp, #72	; 0x48
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800bdfa:	68b8      	ldr	r0, [r7, #8]
 800bdfc:	f002 f9cc 	bl	800e198 <lv_obj_get_parent>
 800be00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800be02:	2110      	movs	r1, #16
 800be04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be06:	f7fa f962 	bl	80060ce <lv_obj_has_flag>
 800be0a:	4603      	mov	r3, r0
 800be0c:	f083 0301 	eor.w	r3, r3, #1
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	f040 829f 	bne.w	800c356 <scroll_area_into_view+0x56a>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800be18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be1a:	f7fe fc13 	bl	800a644 <lv_obj_get_scroll_dir>
 800be1e:	4603      	mov	r3, r0
 800be20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    lv_coord_t snap_goal = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t act = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 800be32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be34:	f7fe fc32 	bl	800a69c <lv_obj_get_scroll_snap_y>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800be3e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <scroll_area_into_view+0x62>
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	3314      	adds	r3, #20
 800be4a:	647b      	str	r3, [r7, #68]	; 0x44
 800be4c:	e001      	b.n	800be52 <scroll_area_into_view+0x66>
    else area_tmp = area;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800be52:	2100      	movs	r1, #0
 800be54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be56:	f7fe fb96 	bl	800a586 <lv_obj_get_style_border_width>
 800be5a:	4603      	mov	r3, r0
 800be5c:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800be5e:	2100      	movs	r1, #0
 800be60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be62:	f7fe fb24 	bl	800a4ae <lv_obj_get_style_pad_top>
 800be66:	4603      	mov	r3, r0
 800be68:	b29a      	uxth	r2, r3
 800be6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be6c:	4413      	add	r3, r2
 800be6e:	b29b      	uxth	r3, r3
 800be70:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800be72:	2100      	movs	r1, #0
 800be74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be76:	f7fe fb2c 	bl	800a4d2 <lv_obj_get_style_pad_bottom>
 800be7a:	4603      	mov	r3, r0
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be80:	4413      	add	r3, r2
 800be82:	b29b      	uxth	r3, r3
 800be84:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800be86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be88:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800be90:	4413      	add	r3, r2
 800be92:	b29a      	uxth	r2, r3
 800be94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	b29b      	uxth	r3, r3
 800beac:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bebc:	b299      	uxth	r1, r3
 800bebe:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	1ac3      	subs	r3, r0, r3
 800beca:	b29b      	uxth	r3, r3
 800becc:	440b      	add	r3, r1
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4413      	add	r3, r2
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800bed6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bed8:	f7fc ff38 	bl	8008d4c <lv_obj_get_height>
 800bedc:	4603      	mov	r3, r0
 800bede:	b29a      	uxth	r2, r3
 800bee0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	b29b      	uxth	r3, r3
 800beec:	853b      	strh	r3, [r7, #40]	; 0x28
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800beee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	db07      	blt.n	800bf06 <scroll_area_into_view+0x11a>
 800bef6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800befa:	2b00      	cmp	r3, #0
 800befc:	db03      	blt.n	800bf06 <scroll_area_into_view+0x11a>
 800befe:	2300      	movs	r3, #0
 800bf00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bf04:	e02e      	b.n	800bf64 <scroll_area_into_view+0x178>
    else if(top_diff > 0) {
 800bf06:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dd12      	ble.n	800bf34 <scroll_area_into_view+0x148>
        y_scroll = top_diff;
 800bf0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800bf14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf16:	f7fe fc07 	bl	800a728 <lv_obj_get_scroll_top>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(st - y_scroll < 0) y_scroll = 0;
 800bf1e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800bf22:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	da1b      	bge.n	800bf64 <scroll_area_into_view+0x178>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bf32:	e017      	b.n	800bf64 <scroll_area_into_view+0x178>
    }
    else if(bottom_diff > 0) {
 800bf34:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	dd13      	ble.n	800bf64 <scroll_area_into_view+0x178>
        y_scroll = -bottom_diff;
 800bf3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf3e:	425b      	negs	r3, r3
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800bf46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf48:	f7fe fc06 	bl	800a758 <lv_obj_get_scroll_bottom>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        if(sb + y_scroll < 0) y_scroll = 0;
 800bf50:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800bf54:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800bf58:	4413      	add	r3, r2
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	da02      	bge.n	800bf64 <scroll_area_into_view+0x178>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    switch(snap_y) {
 800bf64:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bf68:	2b03      	cmp	r3, #3
 800bf6a:	d03e      	beq.n	800bfea <scroll_area_into_view+0x1fe>
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	dc6e      	bgt.n	800c04e <scroll_area_into_view+0x262>
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d002      	beq.n	800bf7a <scroll_area_into_view+0x18e>
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d01c      	beq.n	800bfb2 <scroll_area_into_view+0x1c6>
 800bf78:	e069      	b.n	800c04e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
 800bf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bf84:	4413      	add	r3, r2
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y1 + y_scroll;
 800bf8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf96:	4413      	add	r3, r2
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800bf9c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bf9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfa8:	4413      	add	r3, r2
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800bfb0:	e04d      	b.n	800c04e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y2 + y_scroll;
 800bfc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfce:	4413      	add	r3, r2
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800bfd4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bfd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfe0:	4413      	add	r3, r2
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800bfe8:	e031      	b.n	800c04e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800bfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bff4:	4413      	add	r3, r2
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da00      	bge.n	800c002 <scroll_area_into_view+0x216>
 800c000:	3301      	adds	r3, #1
 800c002:	105b      	asrs	r3, r3, #1
 800c004:	b21b      	sxth	r3, r3
 800c006:	b29b      	uxth	r3, r3
 800c008:	4413      	add	r3, r2
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800c00e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c010:	f7fe f9c9 	bl	800a3a6 <lv_area_get_height>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	da00      	bge.n	800c01c <scroll_area_into_view+0x230>
 800c01a:	3301      	adds	r3, #1
 800c01c:	105b      	asrs	r3, r3, #1
 800c01e:	b21b      	sxth	r3, r3
 800c020:	b29a      	uxth	r2, r3
 800c022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c024:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	4413      	add	r3, r2
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c032:	4413      	add	r3, r2
 800c034:	b29b      	uxth	r3, r3
 800c036:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800c038:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c03a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	b29a      	uxth	r2, r3
 800c040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c044:	4413      	add	r3, r2
 800c046:	b29b      	uxth	r3, r3
 800c048:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800c04c:	bf00      	nop
    }

    lv_coord_t x_scroll = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800c054:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c056:	f7fe fb0b 	bl	800a670 <lv_obj_get_scroll_snap_x>
 800c05a:	4603      	mov	r3, r0
 800c05c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800c060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c064:	2b00      	cmp	r3, #0
 800c066:	d003      	beq.n	800c070 <scroll_area_into_view+0x284>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	3314      	adds	r3, #20
 800c06c:	647b      	str	r3, [r7, #68]	; 0x44
 800c06e:	e001      	b.n	800c074 <scroll_area_into_view+0x288>
    else area_tmp = area;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800c074:	2100      	movs	r1, #0
 800c076:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c078:	f7fe fa3d 	bl	800a4f6 <lv_obj_get_style_pad_left>
 800c07c:	4603      	mov	r3, r0
 800c07e:	b29a      	uxth	r2, r3
 800c080:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c082:	4413      	add	r3, r2
 800c084:	b29b      	uxth	r3, r3
 800c086:	843b      	strh	r3, [r7, #32]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800c088:	2100      	movs	r1, #0
 800c08a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c08c:	f7fe fa45 	bl	800a51a <lv_obj_get_style_pad_right>
 800c090:	4603      	mov	r3, r0
 800c092:	b29a      	uxth	r2, r3
 800c094:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c096:	4413      	add	r3, r2
 800c098:	b29b      	uxth	r3, r3
 800c09a:	83fb      	strh	r3, [r7, #30]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800c09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	8c3b      	ldrh	r3, [r7, #32]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	83bb      	strh	r3, [r7, #28]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c0d2:	b299      	uxth	r1, r3
 800c0d4:	8bf8      	ldrh	r0, [r7, #30]
 800c0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	1ac3      	subs	r3, r0, r3
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	440b      	add	r3, r1
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	4413      	add	r3, r2
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	837b      	strh	r3, [r7, #26]
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800c0ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	db07      	blt.n	800c104 <scroll_area_into_view+0x318>
 800c0f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	db03      	blt.n	800c104 <scroll_area_into_view+0x318>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c102:	e02e      	b.n	800c162 <scroll_area_into_view+0x376>
    else if(left_diff > 0) {
 800c104:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	dd12      	ble.n	800c132 <scroll_area_into_view+0x346>
        x_scroll = left_diff;
 800c10c:	8bbb      	ldrh	r3, [r7, #28]
 800c10e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800c112:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c114:	f7fe fba6 	bl	800a864 <lv_obj_get_scroll_left>
 800c118:	4603      	mov	r3, r0
 800c11a:	82fb      	strh	r3, [r7, #22]
        if(sl - x_scroll < 0) x_scroll = 0;
 800c11c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c120:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b00      	cmp	r3, #0
 800c128:	da1b      	bge.n	800c162 <scroll_area_into_view+0x376>
 800c12a:	2300      	movs	r3, #0
 800c12c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c130:	e017      	b.n	800c162 <scroll_area_into_view+0x376>
    }
    else if(right_diff > 0) {
 800c132:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c136:	2b00      	cmp	r3, #0
 800c138:	dd13      	ble.n	800c162 <scroll_area_into_view+0x376>
        x_scroll = -right_diff;
 800c13a:	8b7b      	ldrh	r3, [r7, #26]
 800c13c:	425b      	negs	r3, r3
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800c144:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c146:	f7fe fc31 	bl	800a9ac <lv_obj_get_scroll_right>
 800c14a:	4603      	mov	r3, r0
 800c14c:	833b      	strh	r3, [r7, #24]
        if(sr + x_scroll < 0) x_scroll = 0;
 800c14e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c152:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c156:	4413      	add	r3, r2
 800c158:	2b00      	cmp	r3, #0
 800c15a:	da02      	bge.n	800c162 <scroll_area_into_view+0x376>
 800c15c:	2300      	movs	r3, #0
 800c15e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800c162:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c164:	f7fc fde4 	bl	8008d30 <lv_obj_get_width>
 800c168:	4603      	mov	r3, r0
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	8c3b      	ldrh	r3, [r7, #32]
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	b29a      	uxth	r2, r3
 800c172:	8bfb      	ldrh	r3, [r7, #30]
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	b29b      	uxth	r3, r3
 800c178:	82bb      	strh	r3, [r7, #20]
    switch(snap_x) {
 800c17a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d03e      	beq.n	800c200 <scroll_area_into_view+0x414>
 800c182:	2b03      	cmp	r3, #3
 800c184:	dc6e      	bgt.n	800c264 <scroll_area_into_view+0x478>
 800c186:	2b01      	cmp	r3, #1
 800c188:	d002      	beq.n	800c190 <scroll_area_into_view+0x3a4>
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d01c      	beq.n	800c1c8 <scroll_area_into_view+0x3dc>
 800c18e:	e069      	b.n	800c264 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
 800c190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c192:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c196:	b29a      	uxth	r2, r3
 800c198:	8c3b      	ldrh	r3, [r7, #32]
 800c19a:	4413      	add	r3, r2
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x1 + x_scroll;
 800c1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c1ac:	4413      	add	r3, r2
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800c1b2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c1b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c1be:	4413      	add	r3, r2
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800c1c6:	e04d      	b.n	800c264 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
 800c1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ca:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	8bfb      	ldrh	r3, [r7, #30]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x2 + x_scroll;
 800c1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c1e4:	4413      	add	r3, r2
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800c1ea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c1ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c1f6:	4413      	add	r3, r2
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800c1fe:	e031      	b.n	800c264 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800c200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c202:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c206:	b29a      	uxth	r2, r3
 800c208:	8c3b      	ldrh	r3, [r7, #32]
 800c20a:	4413      	add	r3, r2
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c212:	2b00      	cmp	r3, #0
 800c214:	da00      	bge.n	800c218 <scroll_area_into_view+0x42c>
 800c216:	3301      	adds	r3, #1
 800c218:	105b      	asrs	r3, r3, #1
 800c21a:	b21b      	sxth	r3, r3
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	4413      	add	r3, r2
 800c220:	b29b      	uxth	r3, r3
 800c222:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800c224:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c226:	f7fe f8a7 	bl	800a378 <lv_area_get_width>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	da00      	bge.n	800c232 <scroll_area_into_view+0x446>
 800c230:	3301      	adds	r3, #1
 800c232:	105b      	asrs	r3, r3, #1
 800c234:	b21b      	sxth	r3, r3
 800c236:	b29a      	uxth	r2, r3
 800c238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c23a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c23e:	b29b      	uxth	r3, r3
 800c240:	4413      	add	r3, r2
 800c242:	b29a      	uxth	r2, r3
 800c244:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c248:	4413      	add	r3, r2
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800c24e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c250:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	b29a      	uxth	r2, r3
 800c256:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c25a:	4413      	add	r3, r2
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800c262:	bf00      	nop
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800c264:	493f      	ldr	r1, [pc, #252]	; (800c364 <scroll_area_into_view+0x578>)
 800c266:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c268:	f014 f826 	bl	80202b8 <lv_anim_del>
 800c26c:	4603      	mov	r3, r0
 800c26e:	74fb      	strb	r3, [r7, #19]
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800c270:	493d      	ldr	r1, [pc, #244]	; (800c368 <scroll_area_into_view+0x57c>)
 800c272:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c274:	f014 f820 	bl	80202b8 <lv_anim_del>
 800c278:	4603      	mov	r3, r0
 800c27a:	74bb      	strb	r3, [r7, #18]
    if(y_del || x_del) {
 800c27c:	7cfb      	ldrb	r3, [r7, #19]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d102      	bne.n	800c288 <scroll_area_into_view+0x49c>
 800c282:	7cbb      	ldrb	r3, [r7, #18]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d009      	beq.n	800c29c <scroll_area_into_view+0x4b0>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800c288:	2200      	movs	r2, #0
 800c28a:	210a      	movs	r1, #10
 800c28c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c28e:	f7f8 fd45 	bl	8004d1c <lv_event_send>
 800c292:	4603      	mov	r3, r0
 800c294:	747b      	strb	r3, [r7, #17]
        if(res != LV_RES_OK) return;
 800c296:	7c7b      	ldrb	r3, [r7, #17]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d15e      	bne.n	800c35a <scroll_area_into_view+0x56e>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800c29c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <scroll_area_into_view+0x4ca>
 800c2a8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	da02      	bge.n	800c2b6 <scroll_area_into_view+0x4ca>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800c2b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c2ba:	f003 0302 	and.w	r3, r3, #2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d106      	bne.n	800c2d0 <scroll_area_into_view+0x4e4>
 800c2c2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	dd02      	ble.n	800c2d0 <scroll_area_into_view+0x4e4>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800c2d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c2d4:	f003 0304 	and.w	r3, r3, #4
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d106      	bne.n	800c2ea <scroll_area_into_view+0x4fe>
 800c2dc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	da02      	bge.n	800c2ea <scroll_area_into_view+0x4fe>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800c2ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c2ee:	f003 0308 	and.w	r3, r3, #8
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d106      	bne.n	800c304 <scroll_area_into_view+0x518>
 800c2f6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	dd02      	ble.n	800c304 <scroll_area_into_view+0x518>
 800c2fe:	2300      	movs	r3, #0
 800c300:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	78fb      	ldrb	r3, [r7, #3]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d002      	beq.n	800c318 <scroll_area_into_view+0x52c>
 800c312:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c316:	e000      	b.n	800c31a <scroll_area_into_view+0x52e>
 800c318:	2300      	movs	r3, #0
 800c31a:	4413      	add	r3, r2
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	b21a      	sxth	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	801a      	strh	r2, [r3, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d002      	beq.n	800c338 <scroll_area_into_view+0x54c>
 800c332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c336:	e000      	b.n	800c33a <scroll_area_into_view+0x54e>
 800c338:	2300      	movs	r3, #0
 800c33a:	4413      	add	r3, r2
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	b21a      	sxth	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	805a      	strh	r2, [r3, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800c34a:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 800c34e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c350:	f7fe fc94 	bl	800ac7c <lv_obj_scroll_by>
 800c354:	e002      	b.n	800c35c <scroll_area_into_view+0x570>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800c356:	bf00      	nop
 800c358:	e000      	b.n	800c35c <scroll_area_into_view+0x570>
        if(res != LV_RES_OK) return;
 800c35a:	bf00      	nop
}
 800c35c:	3748      	adds	r7, #72	; 0x48
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	0800bd9f 	.word	0x0800bd9f
 800c368:	0800bd6f 	.word	0x0800bd6f

0800c36c <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	7138      	strb	r0, [r7, #4]
 800c374:	7039      	strb	r1, [r7, #0]
 800c376:	4613      	mov	r3, r2
 800c378:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800c37a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	da01      	bge.n	800c386 <lv_color_mix+0x1a>
 800c382:	793b      	ldrb	r3, [r7, #4]
 800c384:	e000      	b.n	800c388 <lv_color_mix+0x1c>
 800c386:	783b      	ldrb	r3, [r7, #0]
 800c388:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 800c38a:	7b3b      	ldrb	r3, [r7, #12]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <lv_anim_set_var>:
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
    a->var = var;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	601a      	str	r2, [r3, #0]
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <lv_anim_set_exec_cb>:
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	683a      	ldr	r2, [r7, #0]
 800c3c2:	605a      	str	r2, [r3, #4]
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <lv_anim_set_time>:
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800c3da:	683a      	ldr	r2, [r7, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <lv_anim_set_delay>:
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	425a      	negs	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c3fe:	bf00      	nop
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <lv_anim_set_values>:
{
 800c40a:	b480      	push	{r7}
 800c40c:	b085      	sub	sp, #20
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c428:	bf00      	nop
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <lv_anim_set_path_cb>:
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	61da      	str	r2, [r3, #28]
}
 800c444:	bf00      	nop
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <lv_anim_set_start_cb>:
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	609a      	str	r2, [r3, #8]
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <lv_anim_set_ready_cb>:
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	60da      	str	r2, [r3, #12]
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <lv_anim_set_early_apply>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	460b      	mov	r3, r1
 800c492:	70fb      	strb	r3, [r7, #3]
    a->early_apply = en;
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c49a:	78f9      	ldrb	r1, [r7, #3]
 800c49c:	f361 0300 	bfi	r3, r1, #0, #1
 800c4a0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d102      	bne.n	800c4ca <lv_bidi_calculate_align+0x1a>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	701a      	strb	r2, [r3, #0]
}
 800c4ca:	bf00      	nop
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <lv_style_prop_has_flag>:
 * @param prop Property ID
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	4603      	mov	r3, r0
 800c4de:	460a      	mov	r2, r1
 800c4e0:	80fb      	strh	r3, [r7, #6]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	717b      	strb	r3, [r7, #5]
    return _lv_style_prop_lookup_flags(prop) & flag;
 800c4e6:	88fb      	ldrh	r3, [r7, #6]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f016 fe2f 	bl	802314c <_lv_style_prop_lookup_flags>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	797b      	ldrb	r3, [r7, #5]
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	bf14      	ite	ne
 800c4fc:	2301      	movne	r3, #1
 800c4fe:	2300      	moveq	r3, #0
 800c500:	b2db      	uxtb	r3, r3
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <lv_obj_get_style_width>:
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b084      	sub	sp, #16
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800c514:	2201      	movs	r2, #1
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fb1d 	bl	800cb58 <lv_obj_get_style_prop>
 800c51e:	4603      	mov	r3, r0
 800c520:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	b21b      	sxth	r3, r3
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <lv_obj_get_style_height>:
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800c538:	2204      	movs	r2, #4
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fb0b 	bl	800cb58 <lv_obj_get_style_prop>
 800c542:	4603      	mov	r3, r0
 800c544:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	b21b      	sxth	r3, r3
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <lv_obj_get_style_transform_zoom>:
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800c55c:	226c      	movs	r2, #108	; 0x6c
 800c55e:	6839      	ldr	r1, [r7, #0]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 faf9 	bl	800cb58 <lv_obj_get_style_prop>
 800c566:	4603      	mov	r3, r0
 800c568:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	b21b      	sxth	r3, r3
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <lv_obj_get_style_transform_angle>:
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b084      	sub	sp, #16
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800c580:	226d      	movs	r2, #109	; 0x6d
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 fae7 	bl	800cb58 <lv_obj_get_style_prop>
 800c58a:	4603      	mov	r3, r0
 800c58c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	b21b      	sxth	r3, r3
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <lv_obj_get_style_text_align>:
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b084      	sub	sp, #16
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800c5a4:	225b      	movs	r2, #91	; 0x5b
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fad5 	bl	800cb58 <lv_obj_get_style_prop>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	60fb      	str	r3, [r7, #12]
    return (lv_text_align_t)v.num;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	b2db      	uxtb	r3, r3
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <lv_obj_get_style_opa>:
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800c5c8:	2260      	movs	r2, #96	; 0x60
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fac3 	bl	800cb58 <lv_obj_get_style_prop>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	b2db      	uxtb	r3, r3
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <lv_obj_get_style_color_filter_dsc>:
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800c5ec:	2261      	movs	r2, #97	; 0x61
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fab1 	bl	800cb58 <lv_obj_get_style_prop>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	60fb      	str	r3, [r7, #12]
    return (const lv_color_filter_dsc_t *)v.ptr;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <lv_obj_get_style_color_filter_opa>:
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800c60e:	2262      	movs	r2, #98	; 0x62
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 faa0 	bl	800cb58 <lv_obj_get_style_prop>
 800c618:	4603      	mov	r3, r0
 800c61a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	b2db      	uxtb	r3, r3
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <lv_obj_get_style_blend_mode>:
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800c632:	2267      	movs	r2, #103	; 0x67
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fa8e 	bl	800cb58 <lv_obj_get_style_prop>
 800c63c:	4603      	mov	r3, r0
 800c63e:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	b2db      	uxtb	r3, r3
}
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <lv_obj_get_style_base_dir>:
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800c656:	2216      	movs	r2, #22
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fa7c 	bl	800cb58 <lv_obj_get_style_prop>
 800c660:	4603      	mov	r3, r0
 800c662:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	b2db      	uxtb	r3, r3
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <_lv_obj_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_obj_style_init(void)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800c674:	2114      	movs	r1, #20
 800c676:	4802      	ldr	r0, [pc, #8]	; (800c680 <_lv_obj_style_init+0x10>)
 800c678:	f015 fa1f 	bl	8021aba <_lv_ll_init>
}
 800c67c:	bf00      	nop
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	200008a0 	.word	0x200008a0

0800c684 <lv_obj_add_style>:

void lv_obj_add_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800c690:	2300      	movs	r3, #0
 800c692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f001 f9a1 	bl	800d9e0 <trans_del>

    uint32_t i;
    /*Go after the transition and local styles*/
    for(i = 0; i < obj->style_cnt; i++) {
 800c69e:	2300      	movs	r3, #0
 800c6a0:	617b      	str	r3, [r7, #20]
 800c6a2:	e01a      	b.n	800c6da <lv_obj_add_style+0x56>
        if(obj->styles[i].is_trans) continue;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	68da      	ldr	r2, [r3, #12]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	00db      	lsls	r3, r3, #3
 800c6ac:	4413      	add	r3, r2
 800c6ae:	79db      	ldrb	r3, [r3, #7]
 800c6b0:	f003 0302 	and.w	r3, r3, #2
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10b      	bne.n	800c6d2 <lv_obj_add_style+0x4e>
        if(obj->styles[i].is_local) continue;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	68da      	ldr	r2, [r3, #12]
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	00db      	lsls	r3, r3, #3
 800c6c2:	4413      	add	r3, r2
 800c6c4:	79db      	ldrb	r3, [r3, #7]
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00e      	beq.n	800c6ee <lv_obj_add_style+0x6a>
 800c6d0:	e000      	b.n	800c6d4 <lv_obj_add_style+0x50>
        if(obj->styles[i].is_trans) continue;
 800c6d2:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	617b      	str	r3, [r7, #20]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c6de:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d3db      	bcc.n	800c6a4 <lv_obj_add_style+0x20>
 800c6ec:	e000      	b.n	800c6f0 <lv_obj_add_style+0x6c>
        break;
 800c6ee:	bf00      	nop
    }

    /*Now `i` is at the first normal style. Insert the new style before this*/

    /*Allocate space for the new style and shift the rest of the style to the end*/
    obj->style_cnt++;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c6f4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c700:	b2d9      	uxtb	r1, r3
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c706:	f361 03c8 	bfi	r3, r1, #3, #6
 800c70a:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	68da      	ldr	r2, [r3, #12]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c714:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	00db      	lsls	r3, r3, #3
 800c71c:	4619      	mov	r1, r3
 800c71e:	4610      	mov	r0, r2
 800c720:	f015 fcc6 	bl	80220b0 <lv_mem_realloc>
 800c724:	4602      	mov	r2, r0
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	60da      	str	r2, [r3, #12]

    uint32_t j;
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c72e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c732:	b2db      	uxtb	r3, r3
 800c734:	3b01      	subs	r3, #1
 800c736:	613b      	str	r3, [r7, #16]
 800c738:	e014      	b.n	800c764 <lv_obj_add_style+0xe0>
        obj->styles[j] = obj->styles[j - 1];
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	68da      	ldr	r2, [r3, #12]
 800c73e:	6939      	ldr	r1, [r7, #16]
 800c740:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c744:	440b      	add	r3, r1
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	18d1      	adds	r1, r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	68da      	ldr	r2, [r3, #12]
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	00db      	lsls	r3, r3, #3
 800c752:	4413      	add	r3, r2
 800c754:	460a      	mov	r2, r1
 800c756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c75a:	e883 0003 	stmia.w	r3, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	3b01      	subs	r3, #1
 800c762:	613b      	str	r3, [r7, #16]
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d8e6      	bhi.n	800c73a <lv_obj_add_style+0xb6>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68da      	ldr	r2, [r3, #12]
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	00db      	lsls	r3, r3, #3
 800c774:	4413      	add	r3, r2
 800c776:	2108      	movs	r1, #8
 800c778:	4618      	mov	r0, r3
 800c77a:	f016 f86f 	bl	802285c <lv_memset_00>
    obj->styles[i].style = style;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	68da      	ldr	r2, [r3, #12]
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	4413      	add	r3, r2
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	601a      	str	r2, [r3, #0]
    obj->styles[i].selector = selector;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	68da      	ldr	r2, [r3, #12]
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	441a      	add	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800c79c:	6853      	ldr	r3, [r2, #4]
 800c79e:	f361 0317 	bfi	r3, r1, #0, #24
 800c7a2:	6053      	str	r3, [r2, #4]

    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 800c7a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7a8:	6879      	ldr	r1, [r7, #4]
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 f8fa 	bl	800c9a4 <lv_obj_refresh_style>
}
 800c7b0:	bf00      	nop
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <lv_obj_remove_style>:

void lv_obj_remove_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b08c      	sub	sp, #48	; 0x30
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
    lv_state_t state = lv_obj_style_get_selector_state(selector);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 fe35 	bl	800d434 <lv_obj_style_get_selector_state>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	83fb      	strh	r3, [r7, #30]
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 fe3c 	bl	800d44c <lv_obj_style_get_selector_part>
 800c7d4:	61b8      	str	r0, [r7, #24]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800c7d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7da:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d005      	beq.n	800c7ee <lv_obj_remove_style+0x36>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	7adb      	ldrb	r3, [r3, #11]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <lv_obj_remove_style+0x36>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint32_t i = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	62bb      	str	r3, [r7, #40]	; 0x28
    bool deleted = false;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800c7f8:	e0b9      	b.n	800c96e <lv_obj_remove_style+0x1b6>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	68da      	ldr	r2, [r3, #12]
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	00db      	lsls	r3, r3, #3
 800c802:	4413      	add	r3, r2
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 fe12 	bl	800d434 <lv_obj_style_get_selector_state>
 800c810:	4603      	mov	r3, r0
 800c812:	82fb      	strh	r3, [r7, #22]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	68da      	ldr	r2, [r3, #12]
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	4413      	add	r3, r2
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fe11 	bl	800d44c <lv_obj_style_get_selector_part>
 800c82a:	6138      	str	r0, [r7, #16]
        if((state != LV_STATE_ANY && state_act != state) ||
 800c82c:	8bfb      	ldrh	r3, [r7, #30]
 800c82e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c832:	4293      	cmp	r3, r2
 800c834:	d003      	beq.n	800c83e <lv_obj_remove_style+0x86>
 800c836:	8afa      	ldrh	r2, [r7, #22]
 800c838:	8bfb      	ldrh	r3, [r7, #30]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d113      	bne.n	800c866 <lv_obj_remove_style+0xae>
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800c844:	d003      	beq.n	800c84e <lv_obj_remove_style+0x96>
           (part != LV_PART_ANY && part_act != part) ||
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d10b      	bne.n	800c866 <lv_obj_remove_style+0xae>
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d00c      	beq.n	800c86e <lv_obj_remove_style+0xb6>
           (style != NULL && style != obj->styles[i].style)) {
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	68da      	ldr	r2, [r3, #12]
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	4413      	add	r3, r2
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	429a      	cmp	r2, r3
 800c864:	d003      	beq.n	800c86e <lv_obj_remove_style+0xb6>
            i++;
 800c866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c868:	3301      	adds	r3, #1
 800c86a:	62bb      	str	r3, [r7, #40]	; 0x28
            continue;
 800c86c:	e07f      	b.n	800c96e <lv_obj_remove_style+0x1b6>
        }

        if(obj->styles[i].is_trans) {
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	68da      	ldr	r2, [r3, #12]
 800c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	4413      	add	r3, r2
 800c878:	79db      	ldrb	r3, [r3, #7]
 800c87a:	f003 0302 	and.w	r3, r3, #2
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	2b00      	cmp	r3, #0
 800c882:	d006      	beq.n	800c892 <lv_obj_remove_style+0xda>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800c884:	2300      	movs	r3, #0
 800c886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c88a:	69b9      	ldr	r1, [r7, #24]
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f001 f8a7 	bl	800d9e0 <trans_del>
        }

        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	68da      	ldr	r2, [r3, #12]
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	4413      	add	r3, r2
 800c89c:	79db      	ldrb	r3, [r3, #7]
 800c89e:	f003 0301 	and.w	r3, r3, #1
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10a      	bne.n	800c8be <lv_obj_remove_style+0x106>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	4413      	add	r3, r2
 800c8b2:	79db      	ldrb	r3, [r3, #7]
 800c8b4:	f003 0302 	and.w	r3, r3, #2
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d018      	beq.n	800c8f0 <lv_obj_remove_style+0x138>
            lv_style_reset(obj->styles[i].style);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	00db      	lsls	r3, r3, #3
 800c8c6:	4413      	add	r3, r2
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f016 f9da 	bl	8022c84 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	68da      	ldr	r2, [r3, #12]
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	00db      	lsls	r3, r3, #3
 800c8d8:	4413      	add	r3, r2
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f015 fbb9 	bl	8022054 <lv_mem_free>
            obj->styles[i].style = NULL;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	68da      	ldr	r2, [r3, #12]
 800c8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	4413      	add	r3, r2
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	601a      	str	r2, [r3, #0]
        }

        /*Shift the styles after `i` by one*/
        uint32_t j;
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	623b      	str	r3, [r7, #32]
 800c8f4:	e012      	b.n	800c91c <lv_obj_remove_style+0x164>
            obj->styles[j] = obj->styles[j + 1];
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	18d1      	adds	r1, r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	6a3b      	ldr	r3, [r7, #32]
 800c908:	00db      	lsls	r3, r3, #3
 800c90a:	4413      	add	r3, r2
 800c90c:	460a      	mov	r2, r1
 800c90e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c912:	e883 0003 	stmia.w	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	3301      	adds	r3, #1
 800c91a:	623b      	str	r3, [r7, #32]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c920:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c924:	b2db      	uxtb	r3, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	6a3a      	ldr	r2, [r7, #32]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d3e3      	bcc.n	800c8f6 <lv_obj_remove_style+0x13e>
        }

        obj->style_cnt--;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c932:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c936:	b2db      	uxtb	r3, r3
 800c938:	333f      	adds	r3, #63	; 0x3f
 800c93a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c93e:	b2d9      	uxtb	r1, r3
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c944:	f361 03c8 	bfi	r3, r1, #3, #6
 800c948:	8453      	strh	r3, [r2, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	68da      	ldr	r2, [r3, #12]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c952:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c956:	b2db      	uxtb	r3, r3
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	4619      	mov	r1, r3
 800c95c:	4610      	mov	r0, r2
 800c95e:	f015 fba7 	bl	80220b0 <lv_mem_realloc>
 800c962:	4602      	mov	r2, r0
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	60da      	str	r2, [r3, #12]

        deleted = true;
 800c968:	2301      	movs	r3, #1
 800c96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c972:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800c976:	b2db      	uxtb	r3, r3
 800c978:	461a      	mov	r2, r3
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	4293      	cmp	r3, r2
 800c97e:	f4ff af3c 	bcc.w	800c7fa <lv_obj_remove_style+0x42>
        /*The style from the current `i` index is removed, so `i` points to the next style.
         *Therefore it doesn't needs to be incremented*/
    }
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800c982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c986:	2b00      	cmp	r3, #0
 800c988:	d008      	beq.n	800c99c <lv_obj_remove_style+0x1e4>
 800c98a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d005      	beq.n	800c99c <lv_obj_remove_style+0x1e4>
        lv_obj_refresh_style(obj, part, prop);
 800c990:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c992:	461a      	mov	r2, r3
 800c994:	69b9      	ldr	r1, [r7, #24]
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 f804 	bl	800c9a4 <lv_obj_refresh_style>
    }
}
 800c99c:	bf00      	nop
 800c99e:	3730      	adds	r7, #48	; 0x30
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <lv_obj_refresh_style>:
        d = lv_disp_get_next(d);
    }
}

void lv_obj_refresh_style(lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	80fb      	strh	r3, [r7, #6]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!style_refr) return;
 800c9b2:	4b60      	ldr	r3, [pc, #384]	; (800cb34 <lv_obj_refresh_style+0x190>)
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	f083 0301 	eor.w	r3, r3, #1
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f040 80b4 	bne.w	800cb2a <lv_obj_refresh_style+0x186>

    lv_obj_invalidate(obj);
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f7fc ff7f 	bl	80098c6 <lv_obj_invalidate>

    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800c9c8:	68b8      	ldr	r0, [r7, #8]
 800c9ca:	f000 fd3f 	bl	800d44c <lv_obj_style_get_selector_part>
 800c9ce:	61f8      	str	r0, [r7, #28]

    bool is_layout_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYOUT_REFR);
 800c9d0:	88fb      	ldrh	r3, [r7, #6]
 800c9d2:	2104      	movs	r1, #4
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff fd7e 	bl	800c4d6 <lv_style_prop_has_flag>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	76fb      	strb	r3, [r7, #27]
    bool is_ext_draw = lv_style_prop_has_flag(prop, LV_STYLE_PROP_EXT_DRAW);
 800c9de:	88fb      	ldrh	r3, [r7, #6]
 800c9e0:	2102      	movs	r1, #2
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fd77 	bl	800c4d6 <lv_style_prop_has_flag>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	76bb      	strb	r3, [r7, #26]
    bool is_inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800c9ec:	88fb      	ldrh	r3, [r7, #6]
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fd70 	bl	800c4d6 <lv_style_prop_has_flag>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	767b      	strb	r3, [r7, #25]
    bool is_layer_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYER_REFR);
 800c9fa:	88fb      	ldrh	r3, [r7, #6]
 800c9fc:	2110      	movs	r1, #16
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff fd69 	bl	800c4d6 <lv_style_prop_has_flag>
 800ca04:	4603      	mov	r3, r0
 800ca06:	763b      	strb	r3, [r7, #24]

    if(is_layout_refr) {
 800ca08:	7efb      	ldrb	r3, [r7, #27]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d022      	beq.n	800ca54 <lv_obj_refresh_style+0xb0>
        if(part == LV_PART_ANY ||
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800ca14:	d016      	beq.n	800ca44 <lv_obj_refresh_style+0xa0>
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d013      	beq.n	800ca44 <lv_obj_refresh_style+0xa0>
           part == LV_PART_MAIN ||
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7ff fd85 	bl	800c52e <lv_obj_get_style_height>
 800ca24:	4603      	mov	r3, r0
 800ca26:	461a      	mov	r2, r3
           part == LV_PART_MAIN ||
 800ca28:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d009      	beq.n	800ca44 <lv_obj_refresh_style+0xa0>
           lv_obj_get_style_width(obj, 0) == LV_SIZE_CONTENT) {
 800ca30:	2100      	movs	r1, #0
 800ca32:	68f8      	ldr	r0, [r7, #12]
 800ca34:	f7ff fd69 	bl	800c50a <lv_obj_get_style_width>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	461a      	mov	r2, r3
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800ca3c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d107      	bne.n	800ca54 <lv_obj_refresh_style+0xb0>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800ca44:	2200      	movs	r2, #0
 800ca46:	212a      	movs	r1, #42	; 0x2a
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7f8 f967 	bl	8004d1c <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f7fc f8ec 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
        }
    }
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800ca5a:	d002      	beq.n	800ca62 <lv_obj_refresh_style+0xbe>
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d111      	bne.n	800ca86 <lv_obj_refresh_style+0xe2>
 800ca62:	88fb      	ldrh	r3, [r7, #6]
 800ca64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d002      	beq.n	800ca72 <lv_obj_refresh_style+0xce>
 800ca6c:	7efb      	ldrb	r3, [r7, #27]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d009      	beq.n	800ca86 <lv_obj_refresh_style+0xe2>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f001 fb90 	bl	800e198 <lv_obj_get_parent>
 800ca78:	6178      	str	r0, [r7, #20]
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <lv_obj_refresh_style+0xe2>
 800ca80:	6978      	ldr	r0, [r7, #20]
 800ca82:	f7fc f8d3 	bl	8008c2c <lv_obj_mark_layout_as_dirty>
    }

    /*Cache the layer type*/
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800ca8c:	d002      	beq.n	800ca94 <lv_obj_refresh_style+0xf0>
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d126      	bne.n	800cae2 <lv_obj_refresh_style+0x13e>
 800ca94:	7e3b      	ldrb	r3, [r7, #24]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d023      	beq.n	800cae2 <lv_obj_refresh_style+0x13e>
        lv_layer_type_t layer_type = calculate_layer_type(obj);
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f001 fa66 	bl	800df6c <calculate_layer_type>
 800caa0:	4603      	mov	r3, r0
 800caa2:	74fb      	strb	r3, [r7, #19]
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00a      	beq.n	800cac2 <lv_obj_refresh_style+0x11e>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	689a      	ldr	r2, [r3, #8]
 800cab0:	7cfb      	ldrb	r3, [r7, #19]
 800cab2:	f003 0303 	and.w	r3, r3, #3
 800cab6:	b2d9      	uxtb	r1, r3
 800cab8:	7e93      	ldrb	r3, [r2, #26]
 800caba:	f361 1387 	bfi	r3, r1, #6, #2
 800cabe:	7693      	strb	r3, [r2, #26]
 800cac0:	e00f      	b.n	800cae2 <lv_obj_refresh_style+0x13e>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800cac2:	7cfb      	ldrb	r3, [r7, #19]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00c      	beq.n	800cae2 <lv_obj_refresh_style+0x13e>
            lv_obj_allocate_spec_attr(obj);
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f7f9 fb49 	bl	8006160 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	689a      	ldr	r2, [r3, #8]
 800cad2:	7cfb      	ldrb	r3, [r7, #19]
 800cad4:	f003 0303 	and.w	r3, r3, #3
 800cad8:	b2d9      	uxtb	r1, r3
 800cada:	7e93      	ldrb	r3, [r2, #26]
 800cadc:	f361 1387 	bfi	r3, r1, #6, #2
 800cae0:	7693      	strb	r3, [r2, #26]
        }
    }

    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800cae2:	88fb      	ldrh	r3, [r7, #6]
 800cae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cae8:	4293      	cmp	r3, r2
 800caea:	d002      	beq.n	800caf2 <lv_obj_refresh_style+0x14e>
 800caec:	7ebb      	ldrb	r3, [r7, #26]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <lv_obj_refresh_style+0x154>
        lv_obj_refresh_ext_draw_size(obj);
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f7fb fb92 	bl	800821c <lv_obj_refresh_ext_draw_size>
    }
    lv_obj_invalidate(obj);
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f7fc fee4 	bl	80098c6 <lv_obj_invalidate>

    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800cafe:	88fb      	ldrh	r3, [r7, #6]
 800cb00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d008      	beq.n	800cb1a <lv_obj_refresh_style+0x176>
 800cb08:	7e7b      	ldrb	r3, [r7, #25]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00e      	beq.n	800cb2c <lv_obj_refresh_style+0x188>
 800cb0e:	7ebb      	ldrb	r3, [r7, #26]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d102      	bne.n	800cb1a <lv_obj_refresh_style+0x176>
 800cb14:	7efb      	ldrb	r3, [r7, #27]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d008      	beq.n	800cb2c <lv_obj_refresh_style+0x188>
        if(part != LV_PART_SCROLLBAR) {
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb20:	d004      	beq.n	800cb2c <lv_obj_refresh_style+0x188>
            refresh_children_style(obj);
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 ff2e 	bl	800d984 <refresh_children_style>
 800cb28:	e000      	b.n	800cb2c <lv_obj_refresh_style+0x188>
    if(!style_refr) return;
 800cb2a:	bf00      	nop
        }
    }
}
 800cb2c:	3720      	adds	r7, #32
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	2000000d 	.word	0x2000000d

0800cb38 <lv_obj_enable_style_refresh>:

void lv_obj_enable_style_refresh(bool en)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	71fb      	strb	r3, [r7, #7]
    style_refr = en;
 800cb42:	4a04      	ldr	r2, [pc, #16]	; (800cb54 <lv_obj_enable_style_refresh+0x1c>)
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	7013      	strb	r3, [r2, #0]
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	2000000d 	.word	0x2000000d

0800cb58 <lv_obj_get_style_prop>:

lv_style_value_t lv_obj_get_style_prop(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b088      	sub	sp, #32
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	4613      	mov	r3, r2
 800cb64:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value_act;
    bool inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800cb66:	88fb      	ldrh	r3, [r7, #6]
 800cb68:	2101      	movs	r1, #1
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fcb3 	bl	800c4d6 <lv_style_prop_has_flag>
 800cb70:	4603      	mov	r3, r0
 800cb72:	75fb      	strb	r3, [r7, #23]
    lv_style_res_t found = LV_STYLE_RES_NOT_FOUND;
 800cb74:	2300      	movs	r3, #0
 800cb76:	77fb      	strb	r3, [r7, #31]
    while(obj) {
 800cb78:	e01e      	b.n	800cbb8 <lv_obj_get_style_prop+0x60>
        found = get_prop_core(obj, part, prop, &value_act);
 800cb7a:	f107 0310 	add.w	r3, r7, #16
 800cb7e:	88fa      	ldrh	r2, [r7, #6]
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f000 fdfa 	bl	800d77c <get_prop_core>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	77fb      	strb	r3, [r7, #31]
        if(found == LV_STYLE_RES_FOUND) break;
 800cb8c:	7ffb      	ldrb	r3, [r7, #31]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d016      	beq.n	800cbc0 <lv_obj_get_style_prop+0x68>
        if(!inheritable) break;
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	f083 0301 	eor.w	r3, r3, #1
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d112      	bne.n	800cbc4 <lv_obj_get_style_prop+0x6c>

        /*If not found, check the `MAIN` style first*/
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800cb9e:	7ffb      	ldrb	r3, [r7, #31]
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d005      	beq.n	800cbb0 <lv_obj_get_style_prop+0x58>
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <lv_obj_get_style_prop+0x58>
            part = LV_PART_MAIN;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60bb      	str	r3, [r7, #8]
            continue;
 800cbae:	e003      	b.n	800cbb8 <lv_obj_get_style_prop+0x60>
        }

        /*Check the parent too.*/
        obj = lv_obj_get_parent(obj);
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f001 faf1 	bl	800e198 <lv_obj_get_parent>
 800cbb6:	60f8      	str	r0, [r7, #12]
    while(obj) {
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1dd      	bne.n	800cb7a <lv_obj_get_style_prop+0x22>
 800cbbe:	e002      	b.n	800cbc6 <lv_obj_get_style_prop+0x6e>
        if(found == LV_STYLE_RES_FOUND) break;
 800cbc0:	bf00      	nop
 800cbc2:	e000      	b.n	800cbc6 <lv_obj_get_style_prop+0x6e>
        if(!inheritable) break;
 800cbc4:	bf00      	nop
    }

    if(found != LV_STYLE_RES_FOUND) {
 800cbc6:	7ffb      	ldrb	r3, [r7, #31]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d03a      	beq.n	800cc42 <lv_obj_get_style_prop+0xea>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d131      	bne.n	800cc36 <lv_obj_get_style_prop+0xde>
 800cbd2:	88fb      	ldrh	r3, [r7, #6]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d002      	beq.n	800cbde <lv_obj_get_style_prop+0x86>
 800cbd8:	88fb      	ldrh	r3, [r7, #6]
 800cbda:	2b04      	cmp	r3, #4
 800cbdc:	d12b      	bne.n	800cc36 <lv_obj_get_style_prop+0xde>
            const lv_obj_class_t * cls = obj->class_p;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800cbe4:	e010      	b.n	800cc08 <lv_obj_get_style_prop+0xb0>
                if(prop == LV_STYLE_WIDTH) {
 800cbe6:	88fb      	ldrh	r3, [r7, #6]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d105      	bne.n	800cbf8 <lv_obj_get_style_prop+0xa0>
                    if(cls->width_def != 0) break;
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d005      	beq.n	800cc02 <lv_obj_get_style_prop+0xaa>
 800cbf6:	e00c      	b.n	800cc12 <lv_obj_get_style_prop+0xba>
                }
                else {
                    if(cls->height_def != 0) break;
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <lv_obj_get_style_prop+0xb8>
                }
                cls = cls->base_class;
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1eb      	bne.n	800cbe6 <lv_obj_get_style_prop+0x8e>
 800cc0e:	e000      	b.n	800cc12 <lv_obj_get_style_prop+0xba>
                    if(cls->height_def != 0) break;
 800cc10:	bf00      	nop
            }

            if(cls) {
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00b      	beq.n	800cc30 <lv_obj_get_style_prop+0xd8>
                value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800cc18:	88fb      	ldrh	r3, [r7, #6]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d103      	bne.n	800cc26 <lv_obj_get_style_prop+0xce>
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800cc24:	e002      	b.n	800cc2c <lv_obj_get_style_prop+0xd4>
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800cc2c:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800cc2e:	e008      	b.n	800cc42 <lv_obj_get_style_prop+0xea>
            }
            else {
                value_act.num = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800cc34:	e005      	b.n	800cc42 <lv_obj_get_style_prop+0xea>
            }
        }
        else {
            value_act = lv_style_prop_get_default(prop);
 800cc36:	88fb      	ldrh	r3, [r7, #6]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f016 f947 	bl	8022ecc <lv_style_prop_get_default>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	613b      	str	r3, [r7, #16]
        }
    }
    return value_act;
 800cc42:	693b      	ldr	r3, [r7, #16]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3720      	adds	r7, #32
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <lv_obj_set_local_style_prop>:

void lv_obj_set_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t value,
                                 lv_style_selector_t selector)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b086      	sub	sp, #24
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	607a      	str	r2, [r7, #4]
 800cc56:	603b      	str	r3, [r7, #0]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	817b      	strh	r3, [r7, #10]
    lv_style_t * style = get_local_style(obj, selector);
 800cc5c:	6839      	ldr	r1, [r7, #0]
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 fc20 	bl	800d4a4 <get_local_style>
 800cc64:	6178      	str	r0, [r7, #20]
    lv_style_set_prop(style, prop, value);
 800cc66:	897b      	ldrh	r3, [r7, #10]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	6978      	ldr	r0, [r7, #20]
 800cc6e:	f016 f907 	bl	8022e80 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 800cc72:	897b      	ldrh	r3, [r7, #10]
 800cc74:	461a      	mov	r2, r3
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	f7ff fe93 	bl	800c9a4 <lv_obj_refresh_style>
}
 800cc7e:	bf00      	nop
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <lv_obj_get_local_style_prop>:
}


lv_style_res_t lv_obj_get_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t * value,
                                           lv_style_selector_t selector)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b086      	sub	sp, #24
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	460b      	mov	r3, r1
 800cc94:	817b      	strh	r3, [r7, #10]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800cc96:	2300      	movs	r3, #0
 800cc98:	617b      	str	r3, [r7, #20]
 800cc9a:	e026      	b.n	800ccea <lv_obj_get_local_style_prop+0x64>
        if(obj->styles[i].is_local &&
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	68da      	ldr	r2, [r3, #12]
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	4413      	add	r3, r2
 800cca6:	79db      	ldrb	r3, [r3, #7]
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d018      	beq.n	800cce4 <lv_obj_get_local_style_prop+0x5e>
           obj->styles[i].selector == selector) {
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	68da      	ldr	r2, [r3, #12]
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	4413      	add	r3, r2
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ccc2:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d10c      	bne.n	800cce4 <lv_obj_get_local_style_prop+0x5e>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	68da      	ldr	r2, [r3, #12]
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	00db      	lsls	r3, r3, #3
 800ccd2:	4413      	add	r3, r2
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	8979      	ldrh	r1, [r7, #10]
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f016 f8e4 	bl	8022ea8 <lv_style_get_prop>
 800cce0:	4603      	mov	r3, r0
 800cce2:	e00c      	b.n	800ccfe <lv_obj_get_local_style_prop+0x78>
    for(i = 0; i < obj->style_cnt; i++) {
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	3301      	adds	r3, #1
 800cce8:	617b      	str	r3, [r7, #20]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ccee:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d3cf      	bcc.n	800cc9c <lv_obj_get_local_style_prop+0x16>
        }
    }

    return LV_STYLE_RES_NOT_FOUND;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <lv_obj_remove_local_style_prop>:

bool lv_obj_remove_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_selector_t selector)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b086      	sub	sp, #24
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	60f8      	str	r0, [r7, #12]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    uint32_t i;
    /*Find the style*/
    for(i = 0; i < obj->style_cnt; i++) {
 800cd14:	2300      	movs	r3, #0
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	e019      	b.n	800cd4e <lv_obj_remove_local_style_prop+0x48>
        if(obj->styles[i].is_local &&
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	68da      	ldr	r2, [r3, #12]
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	00db      	lsls	r3, r3, #3
 800cd22:	4413      	add	r3, r2
 800cd24:	79db      	ldrb	r3, [r3, #7]
 800cd26:	f003 0301 	and.w	r3, r3, #1
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00b      	beq.n	800cd48 <lv_obj_remove_local_style_prop+0x42>
           obj->styles[i].selector == selector) {
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	68da      	ldr	r2, [r3, #12]
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	00db      	lsls	r3, r3, #3
 800cd38:	4413      	add	r3, r2
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800cd40:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d00c      	beq.n	800cd62 <lv_obj_remove_local_style_prop+0x5c>
    for(i = 0; i < obj->style_cnt; i++) {
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	617b      	str	r3, [r7, #20]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cd52:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d3dc      	bcc.n	800cd1a <lv_obj_remove_local_style_prop+0x14>
 800cd60:	e000      	b.n	800cd64 <lv_obj_remove_local_style_prop+0x5e>
            break;
 800cd62:	bf00      	nop
        }
    }

    /*The style is not found*/
    if(i == obj->style_cnt) return false;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cd68:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	461a      	mov	r2, r3
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d101      	bne.n	800cd7a <lv_obj_remove_local_style_prop+0x74>
 800cd76:	2300      	movs	r3, #0
 800cd78:	e01b      	b.n	800cdb2 <lv_obj_remove_local_style_prop+0xac>

    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	68da      	ldr	r2, [r3, #12]
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	4413      	add	r3, r2
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	897a      	ldrh	r2, [r7, #10]
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f015 ffa6 	bl	8022cdc <lv_style_remove_prop>
 800cd90:	4603      	mov	r3, r0
 800cd92:	74fb      	strb	r3, [r7, #19]
    if(res == LV_RES_OK) {
 800cd94:	7cfb      	ldrb	r3, [r7, #19]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d105      	bne.n	800cda6 <lv_obj_remove_local_style_prop+0xa0>
        lv_obj_refresh_style(obj, selector, prop);
 800cd9a:	897b      	ldrh	r3, [r7, #10]
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fdff 	bl	800c9a4 <lv_obj_refresh_style>
    }

    return res;
 800cda6:	7cfb      	ldrb	r3, [r7, #19]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bf14      	ite	ne
 800cdac:	2301      	movne	r3, #1
 800cdae:	2300      	moveq	r3, #0
 800cdb0:	b2db      	uxtb	r3, r3
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3718      	adds	r7, #24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <_lv_obj_style_create_transition>:

void _lv_obj_style_create_transition(lv_obj_t * obj, lv_part_t part, lv_state_t prev_state, lv_state_t new_state,
                                     const _lv_obj_style_transition_dsc_t * tr_dsc)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b09a      	sub	sp, #104	; 0x68
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	4611      	mov	r1, r2
 800cdc8:	461a      	mov	r2, r3
 800cdca:	460b      	mov	r3, r1
 800cdcc:	80fb      	strh	r3, [r7, #6]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	80bb      	strh	r3, [r7, #4]
    trans_t * tr;

    /*Get the previous and current values*/
    obj->skip_trans = 1;
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800cdd8:	f043 0304 	orr.w	r3, r3, #4
 800cddc:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    obj->state = prev_state;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	88fa      	ldrh	r2, [r7, #6]
 800cde4:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800cde6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cde8:	891b      	ldrh	r3, [r3, #8]
 800cdea:	461a      	mov	r2, r3
 800cdec:	68b9      	ldr	r1, [r7, #8]
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f7ff feb2 	bl	800cb58 <lv_obj_get_style_prop>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	88ba      	ldrh	r2, [r7, #4]
 800cdfc:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800cdfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce00:	891b      	ldrh	r3, [r3, #8]
 800ce02:	461a      	mov	r2, r3
 800ce04:	68b9      	ldr	r1, [r7, #8]
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f7ff fea6 	bl	800cb58 <lv_obj_get_style_prop>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	657b      	str	r3, [r7, #84]	; 0x54
    obj->skip_trans = 0;
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800ce16:	f36f 0382 	bfc	r3, #2, #1
 800ce1a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800ce1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d10a      	bne.n	800ce3c <_lv_obj_style_create_transition+0x80>
 800ce26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d106      	bne.n	800ce3c <_lv_obj_style_create_transition+0x80>
 800ce2e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800ce32:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ce36:	429a      	cmp	r2, r3
 800ce38:	f000 80cc 	beq.w	800cfd4 <_lv_obj_style_create_transition+0x218>
    obj->state = prev_state;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	88fa      	ldrh	r2, [r7, #6]
 800ce40:	841a      	strh	r2, [r3, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800ce42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce44:	891b      	ldrh	r3, [r3, #8]
 800ce46:	461a      	mov	r2, r3
 800ce48:	68b9      	ldr	r1, [r7, #8]
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f7ff fe84 	bl	800cb58 <lv_obj_get_style_prop>
 800ce50:	4603      	mov	r3, r0
 800ce52:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	88ba      	ldrh	r2, [r7, #4]
 800ce58:	841a      	strh	r2, [r3, #32]

    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800ce5a:	68b9      	ldr	r1, [r7, #8]
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f000 fbec 	bl	800d63a <get_trans_style>
 800ce62:	6678      	str	r0, [r7, #100]	; 0x64
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800ce64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce66:	6818      	ldr	r0, [r3, #0]
 800ce68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce6a:	891b      	ldrh	r3, [r3, #8]
 800ce6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce6e:	4619      	mov	r1, r3
 800ce70:	f016 f806 	bl	8022e80 <lv_style_set_prop>

    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800ce74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce76:	891b      	ldrh	r3, [r3, #8]
 800ce78:	2b0b      	cmp	r3, #11
 800ce7a:	d143      	bne.n	800cf04 <_lv_obj_style_create_transition+0x148>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800ce7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d004      	beq.n	800ce90 <_lv_obj_style_create_transition+0xd4>
 800ce86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d139      	bne.n	800cf04 <_lv_obj_style_create_transition+0x148>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f7fb ff4d 	bl	8008d30 <lv_obj_get_width>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	da00      	bge.n	800ce9e <_lv_obj_style_create_transition+0xe2>
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	105b      	asrs	r3, r3, #1
 800cea0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7fb ff51 	bl	8008d4c <lv_obj_get_height>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	da00      	bge.n	800ceb2 <_lv_obj_style_create_transition+0xf6>
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	105b      	asrs	r3, r3, #1
 800ceb4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800ceb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d10d      	bne.n	800cede <_lv_obj_style_create_transition+0x122>
 800cec2:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800cec6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800ceca:	429a      	cmp	r2, r3
 800cecc:	da03      	bge.n	800ced6 <_lv_obj_style_create_transition+0x11a>
 800cece:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800ced2:	3301      	adds	r3, #1
 800ced4:	e002      	b.n	800cedc <_lv_obj_style_create_transition+0x120>
 800ced6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800ceda:	3301      	adds	r3, #1
 800cedc:	65bb      	str	r3, [r7, #88]	; 0x58
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800cede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cee0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d10d      	bne.n	800cf04 <_lv_obj_style_create_transition+0x148>
 800cee8:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800ceec:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800cef0:	429a      	cmp	r2, r3
 800cef2:	da03      	bge.n	800cefc <_lv_obj_style_create_transition+0x140>
 800cef4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800cef8:	3301      	adds	r3, #1
 800cefa:	e002      	b.n	800cf02 <_lv_obj_style_create_transition+0x146>
 800cefc:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800cf00:	3301      	adds	r3, #1
 800cf02:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800cf04:	4836      	ldr	r0, [pc, #216]	; (800cfe0 <_lv_obj_style_create_transition+0x224>)
 800cf06:	f014 fdf1 	bl	8021aec <_lv_ll_ins_head>
 800cf0a:	65f8      	str	r0, [r7, #92]	; 0x5c
    LV_ASSERT_MALLOC(tr);
 800cf0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d100      	bne.n	800cf14 <_lv_obj_style_create_transition+0x158>
 800cf12:	e7fe      	b.n	800cf12 <_lv_obj_style_create_transition+0x156>
    if(tr == NULL) return;
 800cf14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d05e      	beq.n	800cfd8 <_lv_obj_style_create_transition+0x21c>
    tr->start_value = v1;
 800cf1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf1e:	60da      	str	r2, [r3, #12]
    tr->end_value = v2;
 800cf20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf24:	611a      	str	r2, [r3, #16]
    tr->obj = obj;
 800cf26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	601a      	str	r2, [r3, #0]
    tr->prop = tr_dsc->prop;
 800cf2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf2e:	891a      	ldrh	r2, [r3, #8]
 800cf30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf32:	809a      	strh	r2, [r3, #4]
    tr->selector = part;
 800cf34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf36:	68ba      	ldr	r2, [r7, #8]
 800cf38:	609a      	str	r2, [r3, #8]

    lv_anim_t a;
    lv_anim_init(&a);
 800cf3a:	f107 0310 	add.w	r3, r7, #16
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f013 f91c 	bl	802017c <lv_anim_init>
    lv_anim_set_var(&a, tr);
 800cf44:	f107 0310 	add.w	r3, r7, #16
 800cf48:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff fa24 	bl	800c398 <lv_anim_set_var>
    lv_anim_set_exec_cb(&a, trans_anim_cb);
 800cf50:	f107 0310 	add.w	r3, r7, #16
 800cf54:	4923      	ldr	r1, [pc, #140]	; (800cfe4 <_lv_obj_style_create_transition+0x228>)
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff fa2c 	bl	800c3b4 <lv_anim_set_exec_cb>
    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 800cf5c:	f107 0310 	add.w	r3, r7, #16
 800cf60:	4921      	ldr	r1, [pc, #132]	; (800cfe8 <_lv_obj_style_create_transition+0x22c>)
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff fa74 	bl	800c450 <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 800cf68:	f107 0310 	add.w	r3, r7, #16
 800cf6c:	491f      	ldr	r1, [pc, #124]	; (800cfec <_lv_obj_style_create_transition+0x230>)
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fa7c 	bl	800c46c <lv_anim_set_ready_cb>
    lv_anim_set_values(&a, 0x00, 0xFF);
 800cf74:	f107 0310 	add.w	r3, r7, #16
 800cf78:	22ff      	movs	r2, #255	; 0xff
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7ff fa44 	bl	800c40a <lv_anim_set_values>
    lv_anim_set_time(&a, tr_dsc->time);
 800cf82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	f107 0310 	add.w	r3, r7, #16
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff fa1e 	bl	800c3d0 <lv_anim_set_time>
    lv_anim_set_delay(&a, tr_dsc->delay);
 800cf94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf96:	885b      	ldrh	r3, [r3, #2]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	f107 0310 	add.w	r3, r7, #16
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7ff fa23 	bl	800c3ec <lv_anim_set_delay>
    lv_anim_set_path_cb(&a, tr_dsc->path_cb);
 800cfa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	f107 0310 	add.w	r3, r7, #16
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff fa3f 	bl	800c434 <lv_anim_set_path_cb>
    lv_anim_set_early_apply(&a, false);
 800cfb6:	f107 0310 	add.w	r3, r7, #16
 800cfba:	2100      	movs	r1, #0
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7ff fa63 	bl	800c488 <lv_anim_set_early_apply>
#if LV_USE_USER_DATA
    a.user_data = tr_dsc->user_data;
 800cfc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    lv_anim_start(&a);
 800cfc8:	f107 0310 	add.w	r3, r7, #16
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f013 f8fb 	bl	80201c8 <lv_anim_start>
 800cfd2:	e002      	b.n	800cfda <_lv_obj_style_create_transition+0x21e>
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800cfd4:	bf00      	nop
 800cfd6:	e000      	b.n	800cfda <_lv_obj_style_create_transition+0x21e>
    if(tr == NULL) return;
 800cfd8:	bf00      	nop
}
 800cfda:	3768      	adds	r7, #104	; 0x68
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	200008a0 	.word	0x200008a0
 800cfe4:	0800dae5 	.word	0x0800dae5
 800cfe8:	0800ddc5 	.word	0x0800ddc5
 800cfec:	0800de3d 	.word	0x0800de3d

0800cff0 <_lv_obj_style_apply_color_filter>:


lv_style_value_t _lv_obj_style_apply_color_filter(const lv_obj_t * obj, uint32_t part, lv_style_value_t v)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
    if(obj == NULL) return v;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <_lv_obj_style_apply_color_filter+0x16>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	e01c      	b.n	800d040 <_lv_obj_style_apply_color_filter+0x50>
    const lv_color_filter_dsc_t * f = lv_obj_get_style_color_filter_dsc(obj, part);
 800d006:	68b9      	ldr	r1, [r7, #8]
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f7ff faea 	bl	800c5e2 <lv_obj_get_style_color_filter_dsc>
 800d00e:	6178      	str	r0, [r7, #20]
    if(f && f->filter_cb) {
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d013      	beq.n	800d03e <_lv_obj_style_apply_color_filter+0x4e>
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00f      	beq.n	800d03e <_lv_obj_style_apply_color_filter+0x4e>
        lv_opa_t f_opa = lv_obj_get_style_color_filter_opa(obj, part);
 800d01e:	68b9      	ldr	r1, [r7, #8]
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f7ff faef 	bl	800c604 <lv_obj_get_style_color_filter_opa>
 800d026:	4603      	mov	r3, r0
 800d028:	74fb      	strb	r3, [r7, #19]
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800d02a:	7cfb      	ldrb	r3, [r7, #19]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d006      	beq.n	800d03e <_lv_obj_style_apply_color_filter+0x4e>
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	7cfa      	ldrb	r2, [r7, #19]
 800d036:	7939      	ldrb	r1, [r7, #4]
 800d038:	6978      	ldr	r0, [r7, #20]
 800d03a:	4798      	blx	r3
 800d03c:	7138      	strb	r0, [r7, #4]
    }
    return v;
 800d03e:	687b      	ldr	r3, [r7, #4]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3718      	adds	r7, #24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <_lv_obj_style_state_compare>:

_lv_style_state_cmp_t _lv_obj_style_state_compare(lv_obj_t * obj, lv_state_t state1, lv_state_t state2)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b088      	sub	sp, #32
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	460b      	mov	r3, r1
 800d052:	807b      	strh	r3, [r7, #2]
 800d054:	4613      	mov	r3, r2
 800d056:	803b      	strh	r3, [r7, #0]
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800d058:	2300      	movs	r3, #0
 800d05a:	77fb      	strb	r3, [r7, #31]

    /*Are there any new styles for the new state?*/
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d05c:	2300      	movs	r3, #0
 800d05e:	61bb      	str	r3, [r7, #24]
 800d060:	e1d9      	b.n	800d416 <_lv_obj_style_state_compare+0x3ce>
        if(obj->styles[i].is_trans) continue;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68da      	ldr	r2, [r3, #12]
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	00db      	lsls	r3, r3, #3
 800d06a:	4413      	add	r3, r2
 800d06c:	79db      	ldrb	r3, [r3, #7]
 800d06e:	f003 0302 	and.w	r3, r3, #2
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	f040 81ca 	bne.w	800d40e <_lv_obj_style_state_compare+0x3c6>

        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	68da      	ldr	r2, [r3, #12]
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	00db      	lsls	r3, r3, #3
 800d082:	4413      	add	r3, r2
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 f9d2 	bl	800d434 <lv_obj_style_get_selector_state>
 800d090:	4603      	mov	r3, r0
 800d092:	82bb      	strh	r3, [r7, #20]
        /*The style is valid for a state but not the other*/
        bool valid1 = state_act & (~state1) ? false : true;
 800d094:	8aba      	ldrh	r2, [r7, #20]
 800d096:	887b      	ldrh	r3, [r7, #2]
 800d098:	43db      	mvns	r3, r3
 800d09a:	4013      	ands	r3, r2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	bf0c      	ite	eq
 800d0a0:	2301      	moveq	r3, #1
 800d0a2:	2300      	movne	r3, #0
 800d0a4:	74fb      	strb	r3, [r7, #19]
        bool valid2 = state_act & (~state2) ? false : true;
 800d0a6:	8aba      	ldrh	r2, [r7, #20]
 800d0a8:	883b      	ldrh	r3, [r7, #0]
 800d0aa:	43db      	mvns	r3, r3
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	bf0c      	ite	eq
 800d0b2:	2301      	moveq	r3, #1
 800d0b4:	2300      	movne	r3, #0
 800d0b6:	74bb      	strb	r3, [r7, #18]
        if(valid1 != valid2) {
 800d0b8:	7cfa      	ldrb	r2, [r7, #19]
 800d0ba:	7cbb      	ldrb	r3, [r7, #18]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	f000 81a7 	beq.w	800d410 <_lv_obj_style_state_compare+0x3c8>
            lv_style_t * style = obj->styles[i].style;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	68da      	ldr	r2, [r3, #12]
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	4413      	add	r3, r2
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	60fb      	str	r3, [r7, #12]
            lv_style_value_t v;
            /*If there is layout difference on the main part, return immediately. There is no more serious difference*/
            bool layout_diff = false;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	75fb      	strb	r3, [r7, #23]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800d0d4:	f107 0308 	add.w	r3, r7, #8
 800d0d8:	461a      	mov	r2, r3
 800d0da:	2110      	movs	r1, #16
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f015 fee3 	bl	8022ea8 <lv_style_get_prop>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d002      	beq.n	800d0ee <_lv_obj_style_state_compare+0xa6>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	75fb      	strb	r3, [r7, #23]
 800d0ec:	e0db      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800d0ee:	f107 0308 	add.w	r3, r7, #8
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	2111      	movs	r1, #17
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f015 fed6 	bl	8022ea8 <lv_style_get_prop>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <_lv_obj_style_state_compare+0xc0>
 800d102:	2301      	movs	r3, #1
 800d104:	75fb      	strb	r3, [r7, #23]
 800d106:	e0ce      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800d108:	f107 0308 	add.w	r3, r7, #8
 800d10c:	461a      	mov	r2, r3
 800d10e:	2112      	movs	r1, #18
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f015 fec9 	bl	8022ea8 <lv_style_get_prop>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <_lv_obj_style_state_compare+0xda>
 800d11c:	2301      	movs	r3, #1
 800d11e:	75fb      	strb	r3, [r7, #23]
 800d120:	e0c1      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800d122:	f107 0308 	add.w	r3, r7, #8
 800d126:	461a      	mov	r2, r3
 800d128:	2113      	movs	r1, #19
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f015 febc 	bl	8022ea8 <lv_style_get_prop>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <_lv_obj_style_state_compare+0xf4>
 800d136:	2301      	movs	r3, #1
 800d138:	75fb      	strb	r3, [r7, #23]
 800d13a:	e0b4      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800d13c:	f107 0308 	add.w	r3, r7, #8
 800d140:	461a      	mov	r2, r3
 800d142:	2115      	movs	r1, #21
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f015 feaf 	bl	8022ea8 <lv_style_get_prop>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <_lv_obj_style_state_compare+0x10e>
 800d150:	2301      	movs	r3, #1
 800d152:	75fb      	strb	r3, [r7, #23]
 800d154:	e0a7      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800d156:	f107 0308 	add.w	r3, r7, #8
 800d15a:	461a      	mov	r2, r3
 800d15c:	2114      	movs	r1, #20
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f015 fea2 	bl	8022ea8 <lv_style_get_prop>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d002      	beq.n	800d170 <_lv_obj_style_state_compare+0x128>
 800d16a:	2301      	movs	r3, #1
 800d16c:	75fb      	strb	r3, [r7, #23]
 800d16e:	e09a      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800d170:	f107 0308 	add.w	r3, r7, #8
 800d174:	461a      	mov	r2, r3
 800d176:	210a      	movs	r1, #10
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f015 fe95 	bl	8022ea8 <lv_style_get_prop>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <_lv_obj_style_state_compare+0x142>
 800d184:	2301      	movs	r3, #1
 800d186:	75fb      	strb	r3, [r7, #23]
 800d188:	e08d      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800d18a:	f107 0308 	add.w	r3, r7, #8
 800d18e:	461a      	mov	r2, r3
 800d190:	216a      	movs	r1, #106	; 0x6a
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f015 fe88 	bl	8022ea8 <lv_style_get_prop>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d002      	beq.n	800d1a4 <_lv_obj_style_state_compare+0x15c>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	75fb      	strb	r3, [r7, #23]
 800d1a2:	e080      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800d1a4:	f107 0308 	add.w	r3, r7, #8
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	216b      	movs	r1, #107	; 0x6b
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f015 fe7b 	bl	8022ea8 <lv_style_get_prop>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <_lv_obj_style_state_compare+0x176>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	75fb      	strb	r3, [r7, #23]
 800d1bc:	e073      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800d1be:	f107 0308 	add.w	r3, r7, #8
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f015 fe6e 	bl	8022ea8 <lv_style_get_prop>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d002      	beq.n	800d1d8 <_lv_obj_style_state_compare+0x190>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	75fb      	strb	r3, [r7, #23]
 800d1d6:	e066      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800d1d8:	f107 0308 	add.w	r3, r7, #8
 800d1dc:	461a      	mov	r2, r3
 800d1de:	2104      	movs	r1, #4
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f015 fe61 	bl	8022ea8 <lv_style_get_prop>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <_lv_obj_style_state_compare+0x1aa>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	75fb      	strb	r3, [r7, #23]
 800d1f0:	e059      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800d1f2:	f107 0308 	add.w	r3, r7, #8
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	2102      	movs	r1, #2
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f015 fe54 	bl	8022ea8 <lv_style_get_prop>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d002      	beq.n	800d20c <_lv_obj_style_state_compare+0x1c4>
 800d206:	2301      	movs	r3, #1
 800d208:	75fb      	strb	r3, [r7, #23]
 800d20a:	e04c      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800d20c:	f107 0308 	add.w	r3, r7, #8
 800d210:	461a      	mov	r2, r3
 800d212:	2103      	movs	r1, #3
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f015 fe47 	bl	8022ea8 <lv_style_get_prop>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <_lv_obj_style_state_compare+0x1de>
 800d220:	2301      	movs	r3, #1
 800d222:	75fb      	strb	r3, [r7, #23]
 800d224:	e03f      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800d226:	f107 0308 	add.w	r3, r7, #8
 800d22a:	461a      	mov	r2, r3
 800d22c:	2105      	movs	r1, #5
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f015 fe3a 	bl	8022ea8 <lv_style_get_prop>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <_lv_obj_style_state_compare+0x1f8>
 800d23a:	2301      	movs	r3, #1
 800d23c:	75fb      	strb	r3, [r7, #23]
 800d23e:	e032      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800d240:	f107 0308 	add.w	r3, r7, #8
 800d244:	461a      	mov	r2, r3
 800d246:	2106      	movs	r1, #6
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f015 fe2d 	bl	8022ea8 <lv_style_get_prop>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <_lv_obj_style_state_compare+0x212>
 800d254:	2301      	movs	r3, #1
 800d256:	75fb      	strb	r3, [r7, #23]
 800d258:	e025      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800d25a:	f107 0308 	add.w	r3, r7, #8
 800d25e:	461a      	mov	r2, r3
 800d260:	2132      	movs	r1, #50	; 0x32
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f015 fe20 	bl	8022ea8 <lv_style_get_prop>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d002      	beq.n	800d274 <_lv_obj_style_state_compare+0x22c>
 800d26e:	2301      	movs	r3, #1
 800d270:	75fb      	strb	r3, [r7, #23]
 800d272:	e018      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800d274:	f107 0308 	add.w	r3, r7, #8
 800d278:	461a      	mov	r2, r3
 800d27a:	216d      	movs	r1, #109	; 0x6d
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f015 fe13 	bl	8022ea8 <lv_style_get_prop>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <_lv_obj_style_state_compare+0x246>
 800d288:	2301      	movs	r3, #1
 800d28a:	75fb      	strb	r3, [r7, #23]
 800d28c:	e00b      	b.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800d28e:	f107 0308 	add.w	r3, r7, #8
 800d292:	461a      	mov	r2, r3
 800d294:	216c      	movs	r1, #108	; 0x6c
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f015 fe06 	bl	8022ea8 <lv_style_get_prop>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <_lv_obj_style_state_compare+0x25e>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	75fb      	strb	r3, [r7, #23]

            if(layout_diff) {
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <_lv_obj_style_state_compare+0x268>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	e0bd      	b.n	800d42c <_lv_obj_style_state_compare+0x3e4>
            }

            /*Check for draw pad changes*/
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d2b0:	f107 0308 	add.w	r3, r7, #8
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	2168      	movs	r1, #104	; 0x68
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f015 fdf5 	bl	8022ea8 <lv_style_get_prop>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <_lv_obj_style_state_compare+0x282>
 800d2c4:	2302      	movs	r3, #2
 800d2c6:	77fb      	strb	r3, [r7, #31]
 800d2c8:	e0a2      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d2ca:	f107 0308 	add.w	r3, r7, #8
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	2169      	movs	r1, #105	; 0x69
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f015 fde8 	bl	8022ea8 <lv_style_get_prop>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d002      	beq.n	800d2e4 <_lv_obj_style_state_compare+0x29c>
 800d2de:	2302      	movs	r3, #2
 800d2e0:	77fb      	strb	r3, [r7, #31]
 800d2e2:	e095      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d2e4:	f107 0308 	add.w	r3, r7, #8
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	216d      	movs	r1, #109	; 0x6d
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f015 fddb 	bl	8022ea8 <lv_style_get_prop>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <_lv_obj_style_state_compare+0x2b6>
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	77fb      	strb	r3, [r7, #31]
 800d2fc:	e088      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d2fe:	f107 0308 	add.w	r3, r7, #8
 800d302:	461a      	mov	r2, r3
 800d304:	216c      	movs	r1, #108	; 0x6c
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f015 fdce 	bl	8022ea8 <lv_style_get_prop>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <_lv_obj_style_state_compare+0x2d0>
 800d312:	2302      	movs	r3, #2
 800d314:	77fb      	strb	r3, [r7, #31]
 800d316:	e07b      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d318:	f107 0308 	add.w	r3, r7, #8
 800d31c:	461a      	mov	r2, r3
 800d31e:	2137      	movs	r1, #55	; 0x37
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f015 fdc1 	bl	8022ea8 <lv_style_get_prop>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <_lv_obj_style_state_compare+0x2ea>
 800d32c:	2302      	movs	r3, #2
 800d32e:	77fb      	strb	r3, [r7, #31]
 800d330:	e06e      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d332:	f107 0308 	add.w	r3, r7, #8
 800d336:	461a      	mov	r2, r3
 800d338:	2138      	movs	r1, #56	; 0x38
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f015 fdb4 	bl	8022ea8 <lv_style_get_prop>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <_lv_obj_style_state_compare+0x304>
 800d346:	2302      	movs	r3, #2
 800d348:	77fb      	strb	r3, [r7, #31]
 800d34a:	e061      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d34c:	f107 0308 	add.w	r3, r7, #8
 800d350:	461a      	mov	r2, r3
 800d352:	2135      	movs	r1, #53	; 0x35
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f015 fda7 	bl	8022ea8 <lv_style_get_prop>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <_lv_obj_style_state_compare+0x31e>
 800d360:	2302      	movs	r3, #2
 800d362:	77fb      	strb	r3, [r7, #31]
 800d364:	e054      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d366:	f107 0308 	add.w	r3, r7, #8
 800d36a:	461a      	mov	r2, r3
 800d36c:	2140      	movs	r1, #64	; 0x40
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f015 fd9a 	bl	8022ea8 <lv_style_get_prop>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <_lv_obj_style_state_compare+0x338>
 800d37a:	2302      	movs	r3, #2
 800d37c:	77fb      	strb	r3, [r7, #31]
 800d37e:	e047      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d380:	f107 0308 	add.w	r3, r7, #8
 800d384:	461a      	mov	r2, r3
 800d386:	2145      	movs	r1, #69	; 0x45
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f015 fd8d 	bl	8022ea8 <lv_style_get_prop>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d002      	beq.n	800d39a <_lv_obj_style_state_compare+0x352>
 800d394:	2302      	movs	r3, #2
 800d396:	77fb      	strb	r3, [r7, #31]
 800d398:	e03a      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d39a:	f107 0308 	add.w	r3, r7, #8
 800d39e:	461a      	mov	r2, r3
 800d3a0:	2141      	movs	r1, #65	; 0x41
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f015 fd80 	bl	8022ea8 <lv_style_get_prop>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d002      	beq.n	800d3b4 <_lv_obj_style_state_compare+0x36c>
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	77fb      	strb	r3, [r7, #31]
 800d3b2:	e02d      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d3b4:	f107 0308 	add.w	r3, r7, #8
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	2142      	movs	r1, #66	; 0x42
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f015 fd73 	bl	8022ea8 <lv_style_get_prop>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d002      	beq.n	800d3ce <_lv_obj_style_state_compare+0x386>
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	77fb      	strb	r3, [r7, #31]
 800d3cc:	e020      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d3ce:	f107 0308 	add.w	r3, r7, #8
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	2143      	movs	r1, #67	; 0x43
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f015 fd66 	bl	8022ea8 <lv_style_get_prop>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d002      	beq.n	800d3e8 <_lv_obj_style_state_compare+0x3a0>
 800d3e2:	2302      	movs	r3, #2
 800d3e4:	77fb      	strb	r3, [r7, #31]
 800d3e6:	e013      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d3e8:	f107 0308 	add.w	r3, r7, #8
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	2149      	movs	r1, #73	; 0x49
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f015 fd59 	bl	8022ea8 <lv_style_get_prop>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <_lv_obj_style_state_compare+0x3ba>
 800d3fc:	2302      	movs	r3, #2
 800d3fe:	77fb      	strb	r3, [r7, #31]
 800d400:	e006      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800d402:	7ffb      	ldrb	r3, [r7, #31]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d103      	bne.n	800d410 <_lv_obj_style_state_compare+0x3c8>
 800d408:	2301      	movs	r3, #1
 800d40a:	77fb      	strb	r3, [r7, #31]
 800d40c:	e000      	b.n	800d410 <_lv_obj_style_state_compare+0x3c8>
        if(obj->styles[i].is_trans) continue;
 800d40e:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	3301      	adds	r3, #1
 800d414:	61bb      	str	r3, [r7, #24]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d41a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	461a      	mov	r2, r3
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	4293      	cmp	r3, r2
 800d426:	f4ff ae1c 	bcc.w	800d062 <_lv_obj_style_state_compare+0x1a>
        }
    }

    return res;
 800d42a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3720      	adds	r7, #32
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <lv_obj_style_get_selector_state>:
    lv_anim_set_delay(&a, delay);
    lv_anim_start(&a);
}

lv_state_t lv_obj_style_get_selector_state(lv_style_selector_t selector)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
    return selector & 0xFFFF;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	b29b      	uxth	r3, r3
}
 800d440:	4618      	mov	r0, r3
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <lv_obj_style_get_selector_part>:

lv_part_t lv_obj_style_get_selector_part(lv_style_selector_t selector)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
    return selector & 0xFF0000;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	370c      	adds	r7, #12
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <lv_obj_calculate_style_text_align>:


lv_text_align_t lv_obj_calculate_style_text_align(const struct _lv_obj_t * obj, lv_part_t part, const char * txt)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b086      	sub	sp, #24
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	60f8      	str	r0, [r7, #12]
 800d46e:	60b9      	str	r1, [r7, #8]
 800d470:	607a      	str	r2, [r7, #4]
    lv_text_align_t align = lv_obj_get_style_text_align(obj, part);
 800d472:	68b9      	ldr	r1, [r7, #8]
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f7ff f890 	bl	800c59a <lv_obj_get_style_text_align>
 800d47a:	4603      	mov	r3, r0
 800d47c:	75fb      	strb	r3, [r7, #23]
    lv_base_dir_t base_dir = lv_obj_get_style_base_dir(obj, part);
 800d47e:	68b9      	ldr	r1, [r7, #8]
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f7ff f8e3 	bl	800c64c <lv_obj_get_style_base_dir>
 800d486:	4603      	mov	r3, r0
 800d488:	75bb      	strb	r3, [r7, #22]
    lv_bidi_calculate_align(&align, &base_dir, txt);
 800d48a:	f107 0116 	add.w	r1, r7, #22
 800d48e:	f107 0317 	add.w	r3, r7, #23
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff f80b 	bl	800c4b0 <lv_bidi_calculate_align>
    return align;
 800d49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3718      	adds	r7, #24
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <get_local_style>:
 * @param obj pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the local style
 */
static lv_style_t * get_local_style(lv_obj_t * obj, lv_style_selector_t selector)
{
 800d4a4:	b590      	push	{r4, r7, lr}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	60fb      	str	r3, [r7, #12]
 800d4b2:	e020      	b.n	800d4f6 <get_local_style+0x52>
        if(obj->styles[i].is_local &&
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	4413      	add	r3, r2
 800d4be:	79db      	ldrb	r3, [r3, #7]
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d012      	beq.n	800d4f0 <get_local_style+0x4c>
           obj->styles[i].selector == selector) {
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	4413      	add	r3, r2
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d4da:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d106      	bne.n	800d4f0 <get_local_style+0x4c>
            return obj->styles[i].style;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	68da      	ldr	r2, [r3, #12]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	00db      	lsls	r3, r3, #3
 800d4ea:	4413      	add	r3, r2
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	e0a0      	b.n	800d632 <get_local_style+0x18e>
    for(i = 0; i < obj->style_cnt; i++) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d4fa:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	461a      	mov	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	4293      	cmp	r3, r2
 800d506:	d3d5      	bcc.n	800d4b4 <get_local_style+0x10>
        }
    }

    obj->style_cnt++;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d50c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d510:	b2db      	uxtb	r3, r3
 800d512:	3301      	adds	r3, #1
 800d514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d518:	b2d9      	uxtb	r1, r3
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800d51e:	f361 03c8 	bfi	r3, r1, #3, #6
 800d522:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	68da      	ldr	r2, [r3, #12]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d52c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d530:	b2db      	uxtb	r3, r3
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	4619      	mov	r1, r3
 800d536:	4610      	mov	r0, r2
 800d538:	f014 fdba 	bl	80220b0 <lv_mem_realloc>
 800d53c:	4602      	mov	r2, r0
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	60da      	str	r2, [r3, #12]
    LV_ASSERT_MALLOC(obj->styles);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d100      	bne.n	800d54c <get_local_style+0xa8>
 800d54a:	e7fe      	b.n	800d54a <get_local_style+0xa6>

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d550:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d554:	b2db      	uxtb	r3, r3
 800d556:	3b01      	subs	r3, #1
 800d558:	60fb      	str	r3, [r7, #12]
 800d55a:	e030      	b.n	800d5be <get_local_style+0x11a>
        /*Copy only normal styles (not local and transition).
         *The new local style will be added as the last local style*/
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	68da      	ldr	r2, [r3, #12]
 800d560:	68f9      	ldr	r1, [r7, #12]
 800d562:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d566:	440b      	add	r3, r1
 800d568:	00db      	lsls	r3, r3, #3
 800d56a:	4413      	add	r3, r2
 800d56c:	79db      	ldrb	r3, [r3, #7]
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	d125      	bne.n	800d5c4 <get_local_style+0x120>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68da      	ldr	r2, [r3, #12]
 800d57c:	68f9      	ldr	r1, [r7, #12]
 800d57e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d582:	440b      	add	r3, r1
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	4413      	add	r3, r2
 800d588:	79db      	ldrb	r3, [r3, #7]
 800d58a:	f003 0302 	and.w	r3, r3, #2
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b00      	cmp	r3, #0
 800d592:	d117      	bne.n	800d5c4 <get_local_style+0x120>
        obj->styles[i] = obj->styles[i - 1];
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68da      	ldr	r2, [r3, #12]
 800d598:	68f9      	ldr	r1, [r7, #12]
 800d59a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d59e:	440b      	add	r3, r1
 800d5a0:	00db      	lsls	r3, r3, #3
 800d5a2:	18d1      	adds	r1, r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68da      	ldr	r2, [r3, #12]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	4413      	add	r3, r2
 800d5ae:	460a      	mov	r2, r1
 800d5b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5b4:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1cb      	bne.n	800d55c <get_local_style+0xb8>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	68da      	ldr	r2, [r3, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	4413      	add	r3, r2
 800d5ce:	2108      	movs	r1, #8
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f015 f943 	bl	802285c <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68da      	ldr	r2, [r3, #12]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	00db      	lsls	r3, r3, #3
 800d5de:	18d4      	adds	r4, r2, r3
 800d5e0:	200c      	movs	r0, #12
 800d5e2:	f014 fd07 	bl	8021ff4 <lv_mem_alloc>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[i].style);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	4413      	add	r3, r2
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f015 fb2e 	bl	8022c58 <lv_style_init>
    obj->styles[i].is_local = 1;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	68da      	ldr	r2, [r3, #12]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	441a      	add	r2, r3
 800d606:	79d3      	ldrb	r3, [r2, #7]
 800d608:	f043 0301 	orr.w	r3, r3, #1
 800d60c:	71d3      	strb	r3, [r2, #7]
    obj->styles[i].selector = selector;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	441a      	add	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d61e:	6853      	ldr	r3, [r2, #4]
 800d620:	f361 0317 	bfi	r3, r1, #0, #24
 800d624:	6053      	str	r3, [r2, #4]
    return obj->styles[i].style;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68da      	ldr	r2, [r3, #12]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	4413      	add	r3, r2
 800d630:	681b      	ldr	r3, [r3, #0]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	bd90      	pop	{r4, r7, pc}

0800d63a <get_trans_style>:
 * @param obj   pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the transition style
 */
static _lv_obj_style_t * get_trans_style(lv_obj_t * obj,  lv_style_selector_t selector)
{
 800d63a:	b590      	push	{r4, r7, lr}
 800d63c:	b085      	sub	sp, #20
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800d644:	2300      	movs	r3, #0
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e019      	b.n	800d67e <get_trans_style+0x44>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68da      	ldr	r2, [r3, #12]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	00db      	lsls	r3, r3, #3
 800d652:	4413      	add	r3, r2
 800d654:	79db      	ldrb	r3, [r3, #7]
 800d656:	f003 0302 	and.w	r3, r3, #2
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00b      	beq.n	800d678 <get_trans_style+0x3e>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	68da      	ldr	r2, [r3, #12]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	4413      	add	r3, r2
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d670:	461a      	mov	r2, r3
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	4293      	cmp	r3, r2
 800d676:	d00c      	beq.n	800d692 <get_trans_style+0x58>
    for(i = 0; i < obj->style_cnt; i++) {
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3301      	adds	r3, #1
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d682:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d686:	b2db      	uxtb	r3, r3
 800d688:	461a      	mov	r2, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d3dc      	bcc.n	800d64a <get_trans_style+0x10>
 800d690:	e000      	b.n	800d694 <get_trans_style+0x5a>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800d692:	bf00      	nop
    }

    /*Already have a transition style for it*/
    if(i != obj->style_cnt) return &obj->styles[i];
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d698:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	461a      	mov	r2, r3
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d005      	beq.n	800d6b2 <get_trans_style+0x78>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68da      	ldr	r2, [r3, #12]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	00db      	lsls	r3, r3, #3
 800d6ae:	4413      	add	r3, r2
 800d6b0:	e060      	b.n	800d774 <get_trans_style+0x13a>

    obj->style_cnt++;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d6b6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	3301      	adds	r3, #1
 800d6be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6c2:	b2d9      	uxtb	r1, r3
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800d6c8:	f361 03c8 	bfi	r3, r1, #3, #6
 800d6cc:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68da      	ldr	r2, [r3, #12]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d6d6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	00db      	lsls	r3, r3, #3
 800d6de:	4619      	mov	r1, r3
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	f014 fce5 	bl	80220b0 <lv_mem_realloc>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	60da      	str	r2, [r3, #12]

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d6f0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	60fb      	str	r3, [r7, #12]
 800d6fa:	e014      	b.n	800d726 <get_trans_style+0xec>
        obj->styles[i] = obj->styles[i - 1];
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68da      	ldr	r2, [r3, #12]
 800d700:	68f9      	ldr	r1, [r7, #12]
 800d702:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800d706:	440b      	add	r3, r1
 800d708:	00db      	lsls	r3, r3, #3
 800d70a:	18d1      	adds	r1, r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68da      	ldr	r2, [r3, #12]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	4413      	add	r3, r2
 800d716:	460a      	mov	r2, r1
 800d718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d71c:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3b01      	subs	r3, #1
 800d724:	60fb      	str	r3, [r7, #12]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1e7      	bne.n	800d6fc <get_trans_style+0xc2>
    }

    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	2108      	movs	r1, #8
 800d732:	4618      	mov	r0, r3
 800d734:	f015 f892 	bl	802285c <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68dc      	ldr	r4, [r3, #12]
 800d73c:	200c      	movs	r0, #12
 800d73e:	f014 fc59 	bl	8021ff4 <lv_mem_alloc>
 800d742:	4603      	mov	r3, r0
 800d744:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[0].style);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f015 fa83 	bl	8022c58 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	68da      	ldr	r2, [r3, #12]
 800d756:	79d3      	ldrb	r3, [r2, #7]
 800d758:	f043 0302 	orr.w	r3, r3, #2
 800d75c:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68da      	ldr	r2, [r3, #12]
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d768:	6853      	ldr	r3, [r2, #4]
 800d76a:	f361 0317 	bfi	r3, r1, #0, #24
 800d76e:	6053      	str	r3, [r2, #4]
    return &obj->styles[0];
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd90      	pop	{r4, r7, pc}

0800d77c <get_prop_core>:


static lv_style_res_t get_prop_core(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, lv_style_value_t * v)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b090      	sub	sp, #64	; 0x40
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	603b      	str	r3, [r7, #0]
 800d788:	4613      	mov	r3, r2
 800d78a:	80fb      	strh	r3, [r7, #6]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800d78c:	88fb      	ldrh	r3, [r7, #6]
 800d78e:	4618      	mov	r0, r3
 800d790:	f015 fcc4 	bl	802311c <_lv_style_get_prop_group>
 800d794:	4603      	mov	r3, r0
 800d796:	461a      	mov	r2, r3
 800d798:	2301      	movs	r3, #1
 800d79a:	4093      	lsls	r3, r2
 800d79c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t weight = -1;
 800d7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_state_t state = obj->state;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	8c1b      	ldrh	r3, [r3, #32]
 800d7aa:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_state_t state_inv = ~state;
 800d7ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d7ae:	43db      	mvns	r3, r3
 800d7b0:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_style_value_t value_tmp;
    bool skip_trans = obj->skip_trans;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d7b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	bf14      	ite	ne
 800d7c2:	2301      	movne	r3, #1
 800d7c4:	2300      	moveq	r3, #0
 800d7c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    uint32_t i;
    lv_style_res_t found;
    for(i = 0; i < obj->style_cnt; i++) {
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7ce:	e04b      	b.n	800d868 <get_prop_core+0xec>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	68da      	ldr	r2, [r3, #12]
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	00db      	lsls	r3, r3, #3
 800d7d8:	4413      	add	r3, r2
 800d7da:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(obj_style->is_trans == false) break;
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	79db      	ldrb	r3, [r3, #7]
 800d7e0:	f003 0302 	and.w	r3, r3, #2
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d048      	beq.n	800d87c <get_prop_core+0x100>
        if(skip_trans) continue;
 800d7ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d132      	bne.n	800d858 <get_prop_core+0xdc>

        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	68da      	ldr	r2, [r3, #12]
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	4413      	add	r3, r2
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff fe22 	bl	800d44c <lv_obj_style_get_selector_part>
 800d808:	62b8      	str	r0, [r7, #40]	; 0x28

        if(part_act != part) continue;
 800d80a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d124      	bne.n	800d85c <get_prop_core+0xe0>
        if((obj_style->style->has_group & group) == 0) continue;
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	7a9a      	ldrb	r2, [r3, #10]
 800d818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d81c:	4013      	ands	r3, r2
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	d01d      	beq.n	800d860 <get_prop_core+0xe4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f107 0214 	add.w	r2, r7, #20
 800d82c:	88f9      	ldrh	r1, [r7, #6]
 800d82e:	4618      	mov	r0, r3
 800d830:	f015 fb3a 	bl	8022ea8 <lv_style_get_prop>
 800d834:	4603      	mov	r3, r0
 800d836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(found == LV_STYLE_RES_FOUND) {
 800d83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d104      	bne.n	800d84c <get_prop_core+0xd0>
            *v = value_tmp;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	697a      	ldr	r2, [r7, #20]
 800d846:	601a      	str	r2, [r3, #0]
            return LV_STYLE_RES_FOUND;
 800d848:	2301      	movs	r3, #1
 800d84a:	e097      	b.n	800d97c <get_prop_core+0x200>
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800d84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d850:	2b02      	cmp	r3, #2
 800d852:	d106      	bne.n	800d862 <get_prop_core+0xe6>
            return LV_STYLE_RES_INHERIT;
 800d854:	2302      	movs	r3, #2
 800d856:	e091      	b.n	800d97c <get_prop_core+0x200>
        if(skip_trans) continue;
 800d858:	bf00      	nop
 800d85a:	e002      	b.n	800d862 <get_prop_core+0xe6>
        if(part_act != part) continue;
 800d85c:	bf00      	nop
 800d85e:	e000      	b.n	800d862 <get_prop_core+0xe6>
        if((obj_style->style->has_group & group) == 0) continue;
 800d860:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	3301      	adds	r3, #1
 800d866:	63bb      	str	r3, [r7, #56]	; 0x38
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d86c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d870:	b2db      	uxtb	r3, r3
 800d872:	461a      	mov	r2, r3
 800d874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d876:	4293      	cmp	r3, r2
 800d878:	d3aa      	bcc.n	800d7d0 <get_prop_core+0x54>
 800d87a:	e06d      	b.n	800d958 <get_prop_core+0x1dc>
        if(obj_style->is_trans == false) break;
 800d87c:	bf00      	nop
        }
    }

    for(; i < obj->style_cnt; i++) {
 800d87e:	e06b      	b.n	800d958 <get_prop_core+0x1dc>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d886:	00db      	lsls	r3, r3, #3
 800d888:	4413      	add	r3, r2
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	7a9a      	ldrb	r2, [r3, #10]
 800d88e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d892:	4013      	ands	r3, r2
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	d054      	beq.n	800d944 <get_prop_core+0x1c8>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	68da      	ldr	r2, [r3, #12]
 800d89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	4413      	add	r3, r2
 800d8a4:	623b      	str	r3, [r7, #32]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	68da      	ldr	r2, [r3, #12]
 800d8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ac:	00db      	lsls	r3, r3, #3
 800d8ae:	4413      	add	r3, r2
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fdc8 	bl	800d44c <lv_obj_style_get_selector_part>
 800d8bc:	61f8      	str	r0, [r7, #28]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	68da      	ldr	r2, [r3, #12]
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	00db      	lsls	r3, r3, #3
 800d8c6:	4413      	add	r3, r2
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7ff fdb0 	bl	800d434 <lv_obj_style_get_selector_state>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	837b      	strh	r3, [r7, #26]
        if(part_act != part) continue;
 800d8d8:	69fa      	ldr	r2, [r7, #28]
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d133      	bne.n	800d948 <get_prop_core+0x1cc>

        /*Be sure the style not specifies other state than the requested.
         *E.g. For HOVER+PRESS object state, HOVER style only is OK, but HOVER+FOCUS style is not*/
        if((state_act & state_inv)) continue;
 800d8e0:	8b7a      	ldrh	r2, [r7, #26]
 800d8e2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d12f      	bne.n	800d94c <get_prop_core+0x1d0>

        /*Check only better candidates*/
        if(state_act <= weight) continue;
 800d8ec:	8b7b      	ldrh	r3, [r7, #26]
 800d8ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	da2d      	bge.n	800d950 <get_prop_core+0x1d4>

        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800d8f4:	6a3b      	ldr	r3, [r7, #32]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f107 0214 	add.w	r2, r7, #20
 800d8fc:	88f9      	ldrh	r1, [r7, #6]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f015 fad2 	bl	8022ea8 <lv_style_get_prop>
 800d904:	4603      	mov	r3, r0
 800d906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(found == LV_STYLE_RES_FOUND) {
 800d90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d112      	bne.n	800d938 <get_prop_core+0x1bc>
            if(state_act == state) {
 800d912:	8b7a      	ldrh	r2, [r7, #26]
 800d914:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d916:	429a      	cmp	r2, r3
 800d918:	d104      	bne.n	800d924 <get_prop_core+0x1a8>
                *v = value_tmp;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	697a      	ldr	r2, [r7, #20]
 800d91e:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 800d920:	2301      	movs	r3, #1
 800d922:	e02b      	b.n	800d97c <get_prop_core+0x200>
            }
            if(weight < state_act) {
 800d924:	8b7b      	ldrh	r3, [r7, #26]
 800d926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d928:	429a      	cmp	r2, r3
 800d92a:	da12      	bge.n	800d952 <get_prop_core+0x1d6>
                weight = state_act;
 800d92c:	8b7b      	ldrh	r3, [r7, #26]
 800d92e:	63fb      	str	r3, [r7, #60]	; 0x3c
                *v = value_tmp;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	601a      	str	r2, [r3, #0]
 800d936:	e00c      	b.n	800d952 <get_prop_core+0x1d6>
            }
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800d938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	d108      	bne.n	800d952 <get_prop_core+0x1d6>
            return LV_STYLE_RES_INHERIT;
 800d940:	2302      	movs	r3, #2
 800d942:	e01b      	b.n	800d97c <get_prop_core+0x200>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800d944:	bf00      	nop
 800d946:	e004      	b.n	800d952 <get_prop_core+0x1d6>
        if(part_act != part) continue;
 800d948:	bf00      	nop
 800d94a:	e002      	b.n	800d952 <get_prop_core+0x1d6>
        if((state_act & state_inv)) continue;
 800d94c:	bf00      	nop
 800d94e:	e000      	b.n	800d952 <get_prop_core+0x1d6>
        if(state_act <= weight) continue;
 800d950:	bf00      	nop
    for(; i < obj->style_cnt; i++) {
 800d952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d954:	3301      	adds	r3, #1
 800d956:	63bb      	str	r3, [r7, #56]	; 0x38
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d95c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800d960:	b2db      	uxtb	r3, r3
 800d962:	461a      	mov	r2, r3
 800d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d966:	4293      	cmp	r3, r2
 800d968:	d38a      	bcc.n	800d880 <get_prop_core+0x104>
        }
    }

    if(weight >= 0) {
 800d96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	db04      	blt.n	800d97a <get_prop_core+0x1fe>
        *v = value_tmp;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	601a      	str	r2, [r3, #0]
        return LV_STYLE_RES_FOUND;
 800d976:	2301      	movs	r3, #1
 800d978:	e000      	b.n	800d97c <get_prop_core+0x200>
    }
    else return LV_STYLE_RES_NOT_FOUND;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3740      	adds	r7, #64	; 0x40
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 fc47 	bl	800e220 <lv_obj_get_child_cnt>
 800d992:	6138      	str	r0, [r7, #16]
    for(i = 0; i < child_cnt; i++) {
 800d994:	2300      	movs	r3, #0
 800d996:	617b      	str	r3, [r7, #20]
 800d998:	e018      	b.n	800d9cc <refresh_children_style+0x48>
        lv_obj_t * child = obj->spec_attr->children[i];
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4413      	add	r3, r2
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	60fb      	str	r3, [r7, #12]
        lv_obj_invalidate(child);
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f7fb ff8b 	bl	80098c6 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	212a      	movs	r1, #42	; 0x2a
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f7f7 f9b1 	bl	8004d1c <lv_event_send>
        lv_obj_invalidate(child);
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f7fb ff83 	bl	80098c6 <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f7ff ffdf 	bl	800d984 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	617b      	str	r3, [r7, #20]
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d3e2      	bcc.n	800d99a <refresh_children_style+0x16>
    }
}
 800d9d4:	bf00      	nop
 800d9d6:	bf00      	nop
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
	...

0800d9e0 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b088      	sub	sp, #32
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	603b      	str	r3, [r7, #0]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	80fb      	strh	r3, [r7, #6]
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	76fb      	strb	r3, [r7, #27]
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800d9f4:	483a      	ldr	r0, [pc, #232]	; (800dae0 <trans_del+0x100>)
 800d9f6:	f014 f94f 	bl	8021c98 <_lv_ll_get_tail>
 800d9fa:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 800d9fc:	e065      	b.n	800daca <trans_del+0xea>
        if(tr == tr_limit) break;
 800d9fe:	69fa      	ldr	r2, [r7, #28]
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	429a      	cmp	r2, r3
 800da04:	d065      	beq.n	800dad2 <trans_del+0xf2>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800da06:	69f9      	ldr	r1, [r7, #28]
 800da08:	4835      	ldr	r0, [pc, #212]	; (800dae0 <trans_del+0x100>)
 800da0a:	f014 f96b 	bl	8021ce4 <_lv_ll_get_prev>
 800da0e:	6138      	str	r0, [r7, #16]

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	429a      	cmp	r2, r3
 800da18:	d155      	bne.n	800dac6 <trans_del+0xe6>
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	429a      	cmp	r2, r3
 800da22:	d003      	beq.n	800da2c <trans_del+0x4c>
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800da2a:	d14c      	bne.n	800dac6 <trans_del+0xe6>
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	889b      	ldrh	r3, [r3, #4]
 800da30:	88fa      	ldrh	r2, [r7, #6]
 800da32:	429a      	cmp	r2, r3
 800da34:	d004      	beq.n	800da40 <trans_del+0x60>
 800da36:	88fb      	ldrh	r3, [r7, #6]
 800da38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d142      	bne.n	800dac6 <trans_del+0xe6>
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
 800da40:	2300      	movs	r3, #0
 800da42:	617b      	str	r3, [r7, #20]
 800da44:	e029      	b.n	800da9a <trans_del+0xba>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	68da      	ldr	r2, [r3, #12]
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	4413      	add	r3, r2
 800da50:	79db      	ldrb	r3, [r3, #7]
 800da52:	f003 0302 	and.w	r3, r3, #2
 800da56:	b2db      	uxtb	r3, r3
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d01b      	beq.n	800da94 <trans_del+0xb4>
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800da62:	d00b      	beq.n	800da7c <trans_del+0x9c>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	68da      	ldr	r2, [r3, #12]
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	00db      	lsls	r3, r3, #3
 800da6c:	4413      	add	r3, r2
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800da74:	461a      	mov	r2, r3
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	4293      	cmp	r3, r2
 800da7a:	d10b      	bne.n	800da94 <trans_del+0xb4>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	68da      	ldr	r2, [r3, #12]
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	4413      	add	r3, r2
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	889b      	ldrh	r3, [r3, #4]
 800da8c:	4619      	mov	r1, r3
 800da8e:	4610      	mov	r0, r2
 800da90:	f015 f924 	bl	8022cdc <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	3301      	adds	r3, #1
 800da98:	617b      	str	r3, [r7, #20]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800da9e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	461a      	mov	r2, r3
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d3cc      	bcc.n	800da46 <trans_del+0x66>
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800daac:	2100      	movs	r1, #0
 800daae:	69f8      	ldr	r0, [r7, #28]
 800dab0:	f012 fc02 	bl	80202b8 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800dab4:	69f9      	ldr	r1, [r7, #28]
 800dab6:	480a      	ldr	r0, [pc, #40]	; (800dae0 <trans_del+0x100>)
 800dab8:	f014 f880 	bl	8021bbc <_lv_ll_remove>
            lv_mem_free(tr);
 800dabc:	69f8      	ldr	r0, [r7, #28]
 800dabe:	f014 fac9 	bl	8022054 <lv_mem_free>
            removed = true;
 800dac2:	2301      	movs	r3, #1
 800dac4:	76fb      	strb	r3, [r7, #27]

        }
        tr = tr_prev;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d196      	bne.n	800d9fe <trans_del+0x1e>
 800dad0:	e000      	b.n	800dad4 <trans_del+0xf4>
        if(tr == tr_limit) break;
 800dad2:	bf00      	nop
    }
    return removed;
 800dad4:	7efb      	ldrb	r3, [r7, #27]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3720      	adds	r7, #32
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	200008a0 	.word	0x200008a0

0800dae4 <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b088      	sub	sp, #32
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
    trans_t * tr = _tr;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	617b      	str	r3, [r7, #20]
    lv_obj_t * obj = tr->obj;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	613b      	str	r3, [r7, #16]

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800daf8:	2300      	movs	r3, #0
 800dafa:	61fb      	str	r3, [r7, #28]
 800dafc:	e152      	b.n	800dda4 <trans_anim_cb+0x2c0>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	68da      	ldr	r2, [r3, #12]
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	00db      	lsls	r3, r3, #3
 800db06:	4413      	add	r3, r2
 800db08:	79db      	ldrb	r3, [r3, #7]
 800db0a:	f003 0302 	and.w	r3, r3, #2
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00c      	beq.n	800db2e <trans_anim_cb+0x4a>
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	68da      	ldr	r2, [r3, #12]
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	00db      	lsls	r3, r3, #3
 800db1c:	4413      	add	r3, r2
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800db24:	461a      	mov	r2, r3
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d003      	beq.n	800db36 <trans_anim_cb+0x52>
    for(i = 0; i < obj->style_cnt; i++) {
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	3301      	adds	r3, #1
 800db32:	61fb      	str	r3, [r7, #28]
 800db34:	e136      	b.n	800dda4 <trans_anim_cb+0x2c0>

        lv_style_value_t value_final;
        switch(tr->prop) {
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	889b      	ldrh	r3, [r3, #4]
 800db3a:	3b20      	subs	r3, #32
 800db3c:	2b47      	cmp	r3, #71	; 0x47
 800db3e:	f200 80dc 	bhi.w	800dcfa <trans_anim_cb+0x216>
 800db42:	a201      	add	r2, pc, #4	; (adr r2, 800db48 <trans_anim_cb+0x64>)
 800db44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db48:	0800dccb 	.word	0x0800dccb
 800db4c:	0800dcfb 	.word	0x0800dcfb
 800db50:	0800dcfb 	.word	0x0800dcfb
 800db54:	0800dcfb 	.word	0x0800dcfb
 800db58:	0800dcfb 	.word	0x0800dcfb
 800db5c:	0800dcfb 	.word	0x0800dcfb
 800db60:	0800dcfb 	.word	0x0800dcfb
 800db64:	0800dcfb 	.word	0x0800dcfb
 800db68:	0800dcfb 	.word	0x0800dcfb
 800db6c:	0800dcfb 	.word	0x0800dcfb
 800db70:	0800dcfb 	.word	0x0800dcfb
 800db74:	0800dcfb 	.word	0x0800dcfb
 800db78:	0800dcfb 	.word	0x0800dcfb
 800db7c:	0800dcfb 	.word	0x0800dcfb
 800db80:	0800dcfb 	.word	0x0800dcfb
 800db84:	0800dcfb 	.word	0x0800dcfb
 800db88:	0800dccb 	.word	0x0800dccb
 800db8c:	0800dcfb 	.word	0x0800dcfb
 800db90:	0800dcfb 	.word	0x0800dcfb
 800db94:	0800dc69 	.word	0x0800dc69
 800db98:	0800dc69 	.word	0x0800dc69
 800db9c:	0800dcfb 	.word	0x0800dcfb
 800dba0:	0800dccb 	.word	0x0800dccb
 800dba4:	0800dcfb 	.word	0x0800dcfb
 800dba8:	0800dcfb 	.word	0x0800dcfb
 800dbac:	0800dcfb 	.word	0x0800dcfb
 800dbb0:	0800dcfb 	.word	0x0800dcfb
 800dbb4:	0800dcfb 	.word	0x0800dcfb
 800dbb8:	0800dcfb 	.word	0x0800dcfb
 800dbbc:	0800dcfb 	.word	0x0800dcfb
 800dbc0:	0800dcfb 	.word	0x0800dcfb
 800dbc4:	0800dcfb 	.word	0x0800dcfb
 800dbc8:	0800dcfb 	.word	0x0800dcfb
 800dbcc:	0800dcfb 	.word	0x0800dcfb
 800dbd0:	0800dcfb 	.word	0x0800dcfb
 800dbd4:	0800dcfb 	.word	0x0800dcfb
 800dbd8:	0800dccb 	.word	0x0800dccb
 800dbdc:	0800dcfb 	.word	0x0800dcfb
 800dbe0:	0800dcfb 	.word	0x0800dcfb
 800dbe4:	0800dccb 	.word	0x0800dccb
 800dbe8:	0800dcfb 	.word	0x0800dcfb
 800dbec:	0800dcfb 	.word	0x0800dcfb
 800dbf0:	0800dcfb 	.word	0x0800dcfb
 800dbf4:	0800dcfb 	.word	0x0800dcfb
 800dbf8:	0800dcfb 	.word	0x0800dcfb
 800dbfc:	0800dcfb 	.word	0x0800dcfb
 800dc00:	0800dcfb 	.word	0x0800dcfb
 800dc04:	0800dcfb 	.word	0x0800dcfb
 800dc08:	0800dcfb 	.word	0x0800dcfb
 800dc0c:	0800dcfb 	.word	0x0800dcfb
 800dc10:	0800dcfb 	.word	0x0800dcfb
 800dc14:	0800dcfb 	.word	0x0800dcfb
 800dc18:	0800dcfb 	.word	0x0800dcfb
 800dc1c:	0800dccb 	.word	0x0800dccb
 800dc20:	0800dcfb 	.word	0x0800dcfb
 800dc24:	0800dc7f 	.word	0x0800dc7f
 800dc28:	0800dcfb 	.word	0x0800dcfb
 800dc2c:	0800dcfb 	.word	0x0800dcfb
 800dc30:	0800dcfb 	.word	0x0800dcfb
 800dc34:	0800dcfb 	.word	0x0800dcfb
 800dc38:	0800dcfb 	.word	0x0800dcfb
 800dc3c:	0800dcfb 	.word	0x0800dcfb
 800dc40:	0800dcfb 	.word	0x0800dcfb
 800dc44:	0800dcfb 	.word	0x0800dcfb
 800dc48:	0800dcfb 	.word	0x0800dcfb
 800dc4c:	0800dc95 	.word	0x0800dc95
 800dc50:	0800dcfb 	.word	0x0800dcfb
 800dc54:	0800dcfb 	.word	0x0800dcfb
 800dc58:	0800dcfb 	.word	0x0800dcfb
 800dc5c:	0800dcfb 	.word	0x0800dcfb
 800dc60:	0800dc7f 	.word	0x0800dc7f
 800dc64:	0800dc69 	.word	0x0800dc69

            case LV_STYLE_BORDER_SIDE:
            case LV_STYLE_BORDER_POST:
            case LV_STYLE_BLEND_MODE:
                if(v < 255) value_final.num = tr->start_value.num;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	2bfe      	cmp	r3, #254	; 0xfe
 800dc6c:	dc03      	bgt.n	800dc76 <trans_anim_cb+0x192>
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	60fb      	str	r3, [r7, #12]
                else value_final.num = tr->end_value.num;
                break;
 800dc74:	e05d      	b.n	800dd32 <trans_anim_cb+0x24e>
                else value_final.num = tr->end_value.num;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	691b      	ldr	r3, [r3, #16]
 800dc7a:	60fb      	str	r3, [r7, #12]
                break;
 800dc7c:	e059      	b.n	800dd32 <trans_anim_cb+0x24e>
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	2bfe      	cmp	r3, #254	; 0xfe
 800dc82:	dc03      	bgt.n	800dc8c <trans_anim_cb+0x1a8>
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	60fb      	str	r3, [r7, #12]
                else value_final.ptr = tr->end_value.ptr;
                break;
 800dc8a:	e052      	b.n	800dd32 <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	60fb      	str	r3, [r7, #12]
                break;
 800dc92:	e04e      	b.n	800dd32 <trans_anim_cb+0x24e>
            case LV_STYLE_COLOR_FILTER_DSC:
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d103      	bne.n	800dca4 <trans_anim_cb+0x1c0>
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	60fb      	str	r3, [r7, #12]
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
                else value_final.ptr = tr->end_value.ptr;
                break;
 800dca2:	e046      	b.n	800dd32 <trans_anim_cb+0x24e>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d103      	bne.n	800dcb4 <trans_anim_cb+0x1d0>
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	60fb      	str	r3, [r7, #12]
                break;
 800dcb2:	e03e      	b.n	800dd32 <trans_anim_cb+0x24e>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	2b7f      	cmp	r3, #127	; 0x7f
 800dcb8:	dc03      	bgt.n	800dcc2 <trans_anim_cb+0x1de>
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	60fb      	str	r3, [r7, #12]
                break;
 800dcc0:	e037      	b.n	800dd32 <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	60fb      	str	r3, [r7, #12]
                break;
 800dcc8:	e033      	b.n	800dd32 <trans_anim_cb+0x24e>
            case LV_STYLE_BORDER_COLOR:
            case LV_STYLE_TEXT_COLOR:
            case LV_STYLE_SHADOW_COLOR:
            case LV_STYLE_OUTLINE_COLOR:
            case LV_STYLE_IMG_RECOLOR:
                if(v <= 0) value_final.color = tr->start_value.color;
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	dc03      	bgt.n	800dcd8 <trans_anim_cb+0x1f4>
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	7b1b      	ldrb	r3, [r3, #12]
 800dcd4:	733b      	strb	r3, [r7, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
                break;
 800dcd6:	e02c      	b.n	800dd32 <trans_anim_cb+0x24e>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2bfe      	cmp	r3, #254	; 0xfe
 800dcdc:	dd03      	ble.n	800dce6 <trans_anim_cb+0x202>
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	7c1b      	ldrb	r3, [r3, #16]
 800dce2:	733b      	strb	r3, [r7, #12]
                break;
 800dce4:	e025      	b.n	800dd32 <trans_anim_cb+0x24e>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	6979      	ldr	r1, [r7, #20]
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	7b09      	ldrb	r1, [r1, #12]
 800dcf0:	7c18      	ldrb	r0, [r3, #16]
 800dcf2:	f7fe fb3b 	bl	800c36c <lv_color_mix>
 800dcf6:	7338      	strb	r0, [r7, #12]
                break;
 800dcf8:	e01b      	b.n	800dd32 <trans_anim_cb+0x24e>

            default:
                if(v == 0) value_final.num = tr->start_value.num;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d103      	bne.n	800dd08 <trans_anim_cb+0x224>
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	60fb      	str	r3, [r7, #12]
                else if(v == 255) value_final.num = tr->end_value.num;
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
                break;
 800dd06:	e013      	b.n	800dd30 <trans_anim_cb+0x24c>
                else if(v == 255) value_final.num = tr->end_value.num;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	2bff      	cmp	r3, #255	; 0xff
 800dd0c:	d103      	bne.n	800dd16 <trans_anim_cb+0x232>
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	60fb      	str	r3, [r7, #12]
                break;
 800dd14:	e00c      	b.n	800dd30 <trans_anim_cb+0x24c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	68da      	ldr	r2, [r3, #12]
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	6919      	ldr	r1, [r3, #16]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	1acb      	subs	r3, r1, r3
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	fb01 f303 	mul.w	r3, r1, r3
 800dd2a:	121b      	asrs	r3, r3, #8
 800dd2c:	4413      	add	r3, r2
 800dd2e:	60fb      	str	r3, [r7, #12]
                break;
 800dd30:	bf00      	nop
        }

        lv_style_value_t old_value;
        bool refr = true;
 800dd32:	2301      	movs	r3, #1
 800dd34:	76fb      	strb	r3, [r7, #27]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	68da      	ldr	r2, [r3, #12]
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	00db      	lsls	r3, r3, #3
 800dd3e:	4413      	add	r3, r2
 800dd40:	6818      	ldr	r0, [r3, #0]
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	889b      	ldrh	r3, [r3, #4]
 800dd46:	f107 0208 	add.w	r2, r7, #8
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	f015 f8ac 	bl	8022ea8 <lv_style_get_prop>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00d      	beq.n	800dd72 <trans_anim_cb+0x28e>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d109      	bne.n	800dd72 <trans_anim_cb+0x28e>
 800dd5e:	7b3a      	ldrb	r2, [r7, #12]
 800dd60:	7a3b      	ldrb	r3, [r7, #8]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d105      	bne.n	800dd72 <trans_anim_cb+0x28e>
               value_final.num == old_value.num) {
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	68bb      	ldr	r3, [r7, #8]
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d101      	bne.n	800dd72 <trans_anim_cb+0x28e>
                refr = false;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	76fb      	strb	r3, [r7, #27]
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	68da      	ldr	r2, [r3, #12]
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	00db      	lsls	r3, r3, #3
 800dd7a:	4413      	add	r3, r2
 800dd7c:	6818      	ldr	r0, [r3, #0]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	889b      	ldrh	r3, [r3, #4]
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	4619      	mov	r1, r3
 800dd86:	f015 f87b 	bl	8022e80 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800dd8a:	7efb      	ldrb	r3, [r7, #27]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d014      	beq.n	800ddba <trans_anim_cb+0x2d6>
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	6818      	ldr	r0, [r3, #0]
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	6899      	ldr	r1, [r3, #8]
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	889b      	ldrh	r3, [r3, #4]
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	f7fe fe01 	bl	800c9a4 <lv_obj_refresh_style>
        break;

    }

}
 800dda2:	e00b      	b.n	800ddbc <trans_anim_cb+0x2d8>
    for(i = 0; i < obj->style_cnt; i++) {
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800dda8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	461a      	mov	r2, r3
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	f4ff aea3 	bcc.w	800dafe <trans_anim_cb+0x1a>
}
 800ddb8:	e000      	b.n	800ddbc <trans_anim_cb+0x2d8>
        break;
 800ddba:	bf00      	nop
}
 800ddbc:	bf00      	nop
 800ddbe:	3720      	adds	r7, #32
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 800ddc4:	b590      	push	{r4, r7, lr}
 800ddc6:	b087      	sub	sp, #28
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	617b      	str	r3, [r7, #20]

    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7ff fb38 	bl	800d44c <lv_obj_style_get_selector_part>
 800dddc:	6138      	str	r0, [r7, #16]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	6818      	ldr	r0, [r3, #0]
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	889b      	ldrh	r3, [r3, #4]
 800dde6:	697c      	ldr	r4, [r7, #20]
 800dde8:	461a      	mov	r2, r3
 800ddea:	6939      	ldr	r1, [r7, #16]
 800ddec:	f7fe feb4 	bl	800cb58 <lv_obj_get_style_prop>
 800ddf0:	60e0      	str	r0, [r4, #12]

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    lv_style_prop_t prop_tmp = tr->prop;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	889b      	ldrh	r3, [r3, #4]
 800ddf6:	81fb      	strh	r3, [r7, #14]
    tr->prop = LV_STYLE_PROP_INV;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	809a      	strh	r2, [r3, #4]

    /*Delete the related transitions if any*/
    trans_del(tr->obj, part, prop_tmp, tr);
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	6818      	ldr	r0, [r3, #0]
 800de02:	89fa      	ldrh	r2, [r7, #14]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	6939      	ldr	r1, [r7, #16]
 800de08:	f7ff fdea 	bl	800d9e0 <trans_del>

    tr->prop = prop_tmp;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	89fa      	ldrh	r2, [r7, #14]
 800de10:	809a      	strh	r2, [r3, #4]

    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	4619      	mov	r1, r3
 800de1c:	4610      	mov	r0, r2
 800de1e:	f7ff fc0c 	bl	800d63a <get_trans_style>
 800de22:	60b8      	str	r0, [r7, #8]
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	6818      	ldr	r0, [r3, #0]
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	8899      	ldrh	r1, [r3, #4]
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	68da      	ldr	r2, [r3, #12]
 800de30:	f015 f826 	bl	8022e80 <lv_style_set_prop>

}
 800de34:	bf00      	nop
 800de36:	371c      	adds	r7, #28
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd90      	pop	{r4, r7, pc}

0800de3c <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b08a      	sub	sp, #40	; 0x28
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	61bb      	str	r3, [r7, #24]
    lv_obj_t * obj = tr->obj;
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	617b      	str	r3, [r7, #20]
    lv_style_prop_t prop = tr->prop;
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	889b      	ldrh	r3, [r3, #4]
 800de54:	827b      	strh	r3, [r7, #18]

    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
 800de56:	2300      	movs	r3, #0
 800de58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800de5c:	4842      	ldr	r0, [pc, #264]	; (800df68 <trans_anim_ready_cb+0x12c>)
 800de5e:	f013 ff0a 	bl	8021c76 <_lv_ll_get_head>
 800de62:	6238      	str	r0, [r7, #32]
 800de64:	e01e      	b.n	800dea4 <trans_anim_ready_cb+0x68>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800de66:	6a3a      	ldr	r2, [r7, #32]
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d015      	beq.n	800de9a <trans_anim_ready_cb+0x5e>
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	429a      	cmp	r2, r3
 800de78:	d10f      	bne.n	800de9a <trans_anim_ready_cb+0x5e>
 800de7a:	6a3b      	ldr	r3, [r7, #32]
 800de7c:	689a      	ldr	r2, [r3, #8]
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	429a      	cmp	r2, r3
 800de84:	d109      	bne.n	800de9a <trans_anim_ready_cb+0x5e>
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	889a      	ldrh	r2, [r3, #4]
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	889b      	ldrh	r3, [r3, #4]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d103      	bne.n	800de9a <trans_anim_ready_cb+0x5e>
            running = true;
 800de92:	2301      	movs	r3, #1
 800de94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800de98:	e007      	b.n	800deaa <trans_anim_ready_cb+0x6e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800de9a:	6a39      	ldr	r1, [r7, #32]
 800de9c:	4832      	ldr	r0, [pc, #200]	; (800df68 <trans_anim_ready_cb+0x12c>)
 800de9e:	f013 ff0c 	bl	8021cba <_lv_ll_get_next>
 800dea2:	6238      	str	r0, [r7, #32]
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d1dd      	bne.n	800de66 <trans_anim_ready_cb+0x2a>
        }
    }

    if(!running) {
 800deaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deae:	f083 0301 	eor.w	r3, r3, #1
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d053      	beq.n	800df60 <trans_anim_ready_cb+0x124>
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 800deb8:	2300      	movs	r3, #0
 800deba:	61fb      	str	r3, [r7, #28]
 800debc:	e045      	b.n	800df4a <trans_anim_ready_cb+0x10e>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	68da      	ldr	r2, [r3, #12]
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	00db      	lsls	r3, r3, #3
 800dec6:	4413      	add	r3, r2
 800dec8:	79db      	ldrb	r3, [r3, #7]
 800deca:	f003 0302 	and.w	r3, r3, #2
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d037      	beq.n	800df44 <trans_anim_ready_cb+0x108>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	68da      	ldr	r2, [r3, #12]
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	00db      	lsls	r3, r3, #3
 800dedc:	4413      	add	r3, r2
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800dee4:	461a      	mov	r2, r3
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	429a      	cmp	r2, r3
 800deec:	d12a      	bne.n	800df44 <trans_anim_ready_cb+0x108>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800deee:	69b9      	ldr	r1, [r7, #24]
 800def0:	481d      	ldr	r0, [pc, #116]	; (800df68 <trans_anim_ready_cb+0x12c>)
 800def2:	f013 fe63 	bl	8021bbc <_lv_ll_remove>
                lv_mem_free(tr);
 800def6:	69b8      	ldr	r0, [r7, #24]
 800def8:	f014 f8ac 	bl	8022054 <lv_mem_free>

                _lv_obj_style_t * obj_style = &obj->styles[i];
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	68da      	ldr	r2, [r3, #12]
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	00db      	lsls	r3, r3, #3
 800df04:	4413      	add	r3, r2
 800df06:	60fb      	str	r3, [r7, #12]
                lv_style_remove_prop(obj_style->style, prop);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	8a7a      	ldrh	r2, [r7, #18]
 800df0e:	4611      	mov	r1, r2
 800df10:	4618      	mov	r0, r3
 800df12:	f014 fee3 	bl	8022cdc <lv_style_remove_prop>

                if(lv_style_is_empty(obj->styles[i].style)) {
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	68da      	ldr	r2, [r3, #12]
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	00db      	lsls	r3, r3, #3
 800df1e:	4413      	add	r3, r2
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	f015 f8dc 	bl	80230e0 <lv_style_is_empty>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d017      	beq.n	800df5e <trans_anim_ready_cb+0x122>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	6819      	ldr	r1, [r3, #0]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800df3a:	461a      	mov	r2, r3
 800df3c:	6978      	ldr	r0, [r7, #20]
 800df3e:	f7fe fc3b 	bl	800c7b8 <lv_obj_remove_style>

                }
                break;
 800df42:	e00c      	b.n	800df5e <trans_anim_ready_cb+0x122>
        for(i = 0; i < obj->style_cnt; i++) {
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	3301      	adds	r3, #1
 800df48:	61fb      	str	r3, [r7, #28]
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800df4e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800df52:	b2db      	uxtb	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	4293      	cmp	r3, r2
 800df5a:	d3b0      	bcc.n	800debe <trans_anim_ready_cb+0x82>
            }
        }
    }
}
 800df5c:	e000      	b.n	800df60 <trans_anim_ready_cb+0x124>
                break;
 800df5e:	bf00      	nop
}
 800df60:	bf00      	nop
 800df62:	3728      	adds	r7, #40	; 0x28
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	200008a0 	.word	0x200008a0

0800df6c <calculate_layer_type>:

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800df74:	2100      	movs	r1, #0
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7fe fafd 	bl	800c576 <lv_obj_get_style_transform_angle>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <calculate_layer_type+0x1a>
 800df82:	2302      	movs	r3, #2
 800df84:	e01c      	b.n	800dfc0 <calculate_layer_type+0x54>
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800df86:	2100      	movs	r1, #0
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7fe fae2 	bl	800c552 <lv_obj_get_style_transform_zoom>
 800df8e:	4603      	mov	r3, r0
 800df90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df94:	d001      	beq.n	800df9a <calculate_layer_type+0x2e>
 800df96:	2302      	movs	r3, #2
 800df98:	e012      	b.n	800dfc0 <calculate_layer_type+0x54>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800df9a:	2100      	movs	r1, #0
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7fe fb0e 	bl	800c5be <lv_obj_get_style_opa>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2bff      	cmp	r3, #255	; 0xff
 800dfa6:	d001      	beq.n	800dfac <calculate_layer_type+0x40>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e009      	b.n	800dfc0 <calculate_layer_type+0x54>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800dfac:	2100      	movs	r1, #0
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7fe fb3a 	bl	800c628 <lv_obj_get_style_blend_mode>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <calculate_layer_type+0x52>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e000      	b.n	800dfc0 <calculate_layer_type+0x54>
#endif
    return LV_LAYER_TYPE_NONE;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	817b      	strh	r3, [r7, #10]
    lv_style_value_t v = {
        .num = (int32_t)value
 800dfd6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    lv_style_value_t v = {
 800dfda:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	697a      	ldr	r2, [r7, #20]
 800dfe0:	2107      	movs	r1, #7
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7fe fe32 	bl	800cc4c <lv_obj_set_local_style_prop>
}
 800dfe8:	bf00      	nop
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	460b      	mov	r3, r1
 800dffa:	607a      	str	r2, [r7, #4]
 800dffc:	817b      	strh	r3, [r7, #10]
    lv_style_value_t v = {
        .num = (int32_t)value
 800dffe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    lv_style_value_t v = {
 800e002:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	2108      	movs	r1, #8
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f7fe fe1e 	bl	800cc4c <lv_obj_set_local_style_prop>
}
 800e010:	bf00      	nop
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <lv_obj_set_style_align>:

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	460b      	mov	r3, r1
 800e022:	607a      	str	r2, [r7, #4]
 800e024:	72fb      	strb	r3, [r7, #11]
    lv_style_value_t v = {
        .num = (int32_t)value
 800e026:	7afb      	ldrb	r3, [r7, #11]
    lv_style_value_t v = {
 800e028:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	697a      	ldr	r2, [r7, #20]
 800e02e:	2109      	movs	r1, #9
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7fe fe0b 	bl	800cc4c <lv_obj_set_local_style_prop>
}
 800e036:	bf00      	nop
 800e038:	3718      	adds	r7, #24
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <lv_obj_set_style_opa>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_CLIP_CORNER, v, selector);
}

void lv_obj_set_style_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800e03e:	b580      	push	{r7, lr}
 800e040:	b086      	sub	sp, #24
 800e042:	af00      	add	r7, sp, #0
 800e044:	60f8      	str	r0, [r7, #12]
 800e046:	460b      	mov	r3, r1
 800e048:	607a      	str	r2, [r7, #4]
 800e04a:	72fb      	strb	r3, [r7, #11]
    lv_style_value_t v = {
        .num = (int32_t)value
 800e04c:	7afb      	ldrb	r3, [r7, #11]
    lv_style_value_t v = {
 800e04e:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OPA, v, selector);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	697a      	ldr	r2, [r7, #20]
 800e054:	2160      	movs	r1, #96	; 0x60
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7fe fdf8 	bl	800cc4c <lv_obj_set_local_style_prop>
}
 800e05c:	bf00      	nop
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <lv_obj_del>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_del(lv_obj_t * obj)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("begin (delete %p)", (void *)obj);
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_obj_invalidate(obj);
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7fb fc2a 	bl	80098c6 <lv_obj_invalidate>

    lv_obj_t * par = lv_obj_get_parent(obj);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 f890 	bl	800e198 <lv_obj_get_parent>
 800e078:	60f8      	str	r0, [r7, #12]
    if(par) {
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <lv_obj_del+0x22>
        lv_obj_scrollbar_invalidate(par);
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f7fd fdbd 	bl	800bc00 <lv_obj_scrollbar_invalidate>
    }

    lv_disp_t * disp = NULL;
 800e086:	2300      	movs	r3, #0
 800e088:	617b      	str	r3, [r7, #20]
    bool act_scr_del = false;
 800e08a:	2300      	movs	r3, #0
 800e08c:	74fb      	strb	r3, [r7, #19]
    if(par == NULL) {
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10d      	bne.n	800e0b0 <lv_obj_del+0x4c>
        disp = lv_obj_get_disp(obj);
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 f845 	bl	800e124 <lv_obj_get_disp>
 800e09a:	6178      	str	r0, [r7, #20]
        if(!disp) return;   /*Shouldn't happen*/
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d027      	beq.n	800e0f2 <lv_obj_del+0x8e>
        if(disp->act_scr == obj) act_scr_del = true;
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d101      	bne.n	800e0b0 <lv_obj_del+0x4c>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	74fb      	strb	r3, [r7, #19]
    }

    obj_del_core(obj);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 f8f5 	bl	800e2a0 <obj_del_core>

    /*Call the ancestor's event handler to the parent to notify it about the child delete*/
    if(par) {
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d013      	beq.n	800e0e4 <lv_obj_del+0x80>
        lv_obj_update_layout(par);
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f7fa fddd 	bl	8008c7c <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f7fd fdd8 	bl	800bc7a <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7fd fd98 	bl	800bc00 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2122      	movs	r1, #34	; 0x22
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f7f6 fe21 	bl	8004d1c <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2124      	movs	r1, #36	; 0x24
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f7f6 fe1c 	bl	8004d1c <lv_event_send>
    }

    /*Handle if the active screen was deleted*/
    if(act_scr_del) {
 800e0e4:	7cfb      	ldrb	r3, [r7, #19]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d004      	beq.n	800e0f4 <lv_obj_del+0x90>
        LV_LOG_WARN("the active screen was deleted");
        disp->act_scr = NULL;
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	611a      	str	r2, [r3, #16]
 800e0f0:	e000      	b.n	800e0f4 <lv_obj_del+0x90>
        if(!disp) return;   /*Shouldn't happen*/
 800e0f2:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
    LV_LOG_TRACE("finished (delete %p)", (void *)obj);
}
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <lv_obj_get_screen>:
    }
    lv_group_swap_obj(obj1, obj2);
}

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b084      	sub	sp, #16
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_par;

    do {
        act_par = par;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	60bb      	str	r3, [r7, #8]
        par = lv_obj_get_parent(act_par);
 800e10a:	68b8      	ldr	r0, [r7, #8]
 800e10c:	f000 f844 	bl	800e198 <lv_obj_get_parent>
 800e110:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1f6      	bne.n	800e106 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_par;
 800e118:	68bb      	ldr	r3, [r7, #8]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
	...

0800e124 <lv_obj_get_disp>:

lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d102      	bne.n	800e13a <lv_obj_get_disp+0x16>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	617b      	str	r3, [r7, #20]
 800e138:	e003      	b.n	800e142 <lv_obj_get_disp+0x1e>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7ff ffdd 	bl	800e0fa <lv_obj_get_screen>
 800e140:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800e142:	4814      	ldr	r0, [pc, #80]	; (800e194 <lv_obj_get_disp+0x70>)
 800e144:	f013 fd97 	bl	8021c76 <_lv_ll_get_head>
 800e148:	6138      	str	r0, [r7, #16]
 800e14a:	e01a      	b.n	800e182 <lv_obj_get_disp+0x5e>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 800e14c:	2300      	movs	r3, #0
 800e14e:	60fb      	str	r3, [r7, #12]
 800e150:	e00d      	b.n	800e16e <lv_obj_get_disp+0x4a>
            if(d->screens[i] == scr) return d;
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	68da      	ldr	r2, [r3, #12]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4413      	add	r3, r2
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	697a      	ldr	r2, [r7, #20]
 800e160:	429a      	cmp	r2, r3
 800e162:	d101      	bne.n	800e168 <lv_obj_get_disp+0x44>
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	e010      	b.n	800e18a <lv_obj_get_disp+0x66>
        for(i = 0; i < d->screen_cnt; i++) {
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	3301      	adds	r3, #1
 800e16c:	60fb      	str	r3, [r7, #12]
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	429a      	cmp	r2, r3
 800e176:	d3ec      	bcc.n	800e152 <lv_obj_get_disp+0x2e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800e178:	6939      	ldr	r1, [r7, #16]
 800e17a:	4806      	ldr	r0, [pc, #24]	; (800e194 <lv_obj_get_disp+0x70>)
 800e17c:	f013 fd9d 	bl	8021cba <_lv_ll_get_next>
 800e180:	6138      	str	r0, [r7, #16]
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1e1      	bne.n	800e14c <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
 800e188:	2300      	movs	r3, #0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	20000858 	.word	0x20000858

0800e198 <lv_obj_get_parent>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <lv_obj_get_parent+0x12>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e001      	b.n	800e1ae <lv_obj_get_parent+0x16>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	370c      	adds	r7, #12
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	b085      	sub	sp, #20
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
 800e1c2:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <lv_obj_get_child+0x16>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	e021      	b.n	800e214 <lv_obj_get_child+0x5a>

    uint32_t idu;
    if(id < 0) {
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	da0d      	bge.n	800e1f2 <lv_obj_get_child+0x38>
        id = obj->spec_attr->child_cnt + id;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	4413      	add	r3, r2
 800e1e0:	603b      	str	r3, [r7, #0]
        if(id < 0) return NULL;
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	da01      	bge.n	800e1ec <lv_obj_get_child+0x32>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	e013      	b.n	800e214 <lv_obj_get_child+0x5a>
        idu = (uint32_t) id;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	60fb      	str	r3, [r7, #12]
 800e1f0:	e001      	b.n	800e1f6 <lv_obj_get_child+0x3c>
    }
    else {
        idu = id;
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	60fb      	str	r3, [r7, #12]
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d301      	bcc.n	800e206 <lv_obj_get_child+0x4c>
 800e202:	2300      	movs	r3, #0
 800e204:	e006      	b.n	800e214 <lv_obj_get_child+0x5a>
    else return obj->spec_attr->children[id];
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4413      	add	r3, r2
 800e212:	681b      	ldr	r3, [r3, #0]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d101      	bne.n	800e234 <lv_obj_get_child_cnt+0x14>
 800e230:	2300      	movs	r3, #0
 800e232:	e002      	b.n	800e23a <lv_obj_get_child_cnt+0x1a>
    return obj->spec_attr->child_cnt;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	685b      	ldr	r3, [r3, #4]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	370c      	adds	r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b084      	sub	sp, #16
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff ffa2 	bl	800e198 <lv_obj_get_parent>
 800e254:	60b8      	str	r0, [r7, #8]
    if(parent == NULL) return 0;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <lv_obj_get_index+0x1a>
 800e25c:	2300      	movs	r3, #0
 800e25e:	e01b      	b.n	800e298 <lv_obj_get_index+0x52>

    uint32_t i = 0;
 800e260:	2300      	movs	r3, #0
 800e262:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800e264:	2300      	movs	r3, #0
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	e00d      	b.n	800e286 <lv_obj_get_index+0x40>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	4619      	mov	r1, r3
 800e26e:	68b8      	ldr	r0, [r7, #8]
 800e270:	f7ff ffa3 	bl	800e1ba <lv_obj_get_child>
 800e274:	4602      	mov	r2, r0
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4293      	cmp	r3, r2
 800e27a:	d101      	bne.n	800e280 <lv_obj_get_index+0x3a>
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	e00b      	b.n	800e298 <lv_obj_get_index+0x52>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	3301      	adds	r3, #1
 800e284:	60fb      	str	r3, [r7, #12]
 800e286:	68b8      	ldr	r0, [r7, #8]
 800e288:	f7ff ffca 	bl	800e220 <lv_obj_get_child_cnt>
 800e28c:	4602      	mov	r2, r0
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	4293      	cmp	r3, r2
 800e292:	d3ea      	bcc.n	800e26a <lv_obj_get_index+0x24>
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 800e294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 800e2a0:	b590      	push	{r4, r7, lr}
 800e2a2:	b08d      	sub	sp, #52	; 0x34
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2121      	movs	r1, #33	; 0x21
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7f6 fd35 	bl	8004d1c <lv_event_send>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	77fb      	strb	r3, [r7, #31]
    if(res == LV_RES_INV) return;
 800e2b6:	7ffb      	ldrb	r3, [r7, #31]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f000 80d2 	beq.w	800e462 <obj_del_core+0x1c2>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
 800e2be:	2100      	movs	r1, #0
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff ff7a 	bl	800e1ba <lv_obj_get_child>
 800e2c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    while(child) {
 800e2c8:	e007      	b.n	800e2da <obj_del_core+0x3a>
        obj_del_core(child);
 800e2ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2cc:	f7ff ffe8 	bl	800e2a0 <obj_del_core>
        child = lv_obj_get_child(obj, 0);
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7ff ff71 	bl	800e1ba <lv_obj_get_child>
 800e2d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    while(child) {
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d1f4      	bne.n	800e2ca <obj_del_core+0x2a>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7f7 ff29 	bl	8006138 <lv_obj_get_group>
 800e2e6:	61b8      	str	r0, [r7, #24]

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	f011 fec3 	bl	8020074 <lv_indev_get_next>
 800e2ee:	62b8      	str	r0, [r7, #40]	; 0x28
    while(indev) {
 800e2f0:	e028      	b.n	800e344 <obj_del_core+0xa4>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800e2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d004      	beq.n	800e306 <obj_del_core+0x66>
 800e2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	429a      	cmp	r2, r3
 800e304:	d103      	bne.n	800e30e <obj_del_core+0x6e>
            lv_indev_reset(indev, obj);
 800e306:	6879      	ldr	r1, [r7, #4]
 800e308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e30a:	f7f7 faa5 	bl	8005858 <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 800e30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	429a      	cmp	r2, r3
 800e316:	d102      	bne.n	800e31e <obj_del_core+0x7e>
            indev->proc.types.pointer.last_pressed = NULL;
 800e318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31a:	2200      	movs	r2, #0
 800e31c:	635a      	str	r2, [r3, #52]	; 0x34
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e322:	69ba      	ldr	r2, [r7, #24]
 800e324:	429a      	cmp	r2, r3
 800e326:	d109      	bne.n	800e33c <obj_del_core+0x9c>
 800e328:	f7f7 fb5c 	bl	80059e4 <lv_indev_get_obj_act>
 800e32c:	4602      	mov	r2, r0
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4293      	cmp	r3, r2
 800e332:	d103      	bne.n	800e33c <obj_del_core+0x9c>
            lv_indev_reset(indev, obj);
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e338:	f7f7 fa8e 	bl	8005858 <lv_indev_reset>
        }
        indev = lv_indev_get_next(indev);
 800e33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e33e:	f011 fe99 	bl	8020074 <lv_indev_get_next>
 800e342:	62b8      	str	r0, [r7, #40]	; 0x28
    while(indev) {
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1d3      	bne.n	800e2f2 <obj_del_core+0x52>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f7f9 f8d4 	bl	80074f8 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d146      	bne.n	800e3e6 <obj_del_core+0x146>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7ff fee3 	bl	800e124 <lv_obj_get_disp>
 800e35e:	6138      	str	r0, [r7, #16]
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 800e360:	2300      	movs	r3, #0
 800e362:	627b      	str	r3, [r7, #36]	; 0x24
 800e364:	e00b      	b.n	800e37e <obj_del_core+0xde>
            if(disp->screens[i] == obj) break;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	68da      	ldr	r2, [r3, #12]
 800e36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	429a      	cmp	r2, r3
 800e376:	d008      	beq.n	800e38a <obj_del_core+0xea>
        for(i = 0; i < disp->screen_cnt; i++) {
 800e378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37a:	3301      	adds	r3, #1
 800e37c:	627b      	str	r3, [r7, #36]	; 0x24
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e384:	429a      	cmp	r2, r3
 800e386:	d3ee      	bcc.n	800e366 <obj_del_core+0xc6>
 800e388:	e000      	b.n	800e38c <obj_del_core+0xec>
            if(disp->screens[i] == obj) break;
 800e38a:	bf00      	nop
        }

        uint32_t id = i;
 800e38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38e:	60fb      	str	r3, [r7, #12]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	627b      	str	r3, [r7, #36]	; 0x24
 800e394:	e00f      	b.n	800e3b6 <obj_del_core+0x116>
            disp->screens[i] = disp->screens[i + 1];
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	68da      	ldr	r2, [r3, #12]
 800e39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39c:	3301      	adds	r3, #1
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	441a      	add	r2, r3
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	68d9      	ldr	r1, [r3, #12]
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	440b      	add	r3, r1
 800e3ac:	6812      	ldr	r2, [r2, #0]
 800e3ae:	601a      	str	r2, [r3, #0]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ba:	3b01      	subs	r3, #1
 800e3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d3e9      	bcc.n	800e396 <obj_del_core+0xf6>
        }
        disp->screen_cnt--;
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c6:	1e5a      	subs	r2, r3, #1
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	625a      	str	r2, [r3, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	68da      	ldr	r2, [r3, #12]
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	4610      	mov	r0, r2
 800e3da:	f013 fe69 	bl	80220b0 <lv_mem_realloc>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	60da      	str	r2, [r3, #12]
 800e3e4:	e039      	b.n	800e45a <obj_del_core+0x1ba>
    }
    /*Remove the object from the child list of its parent*/
    else {
        uint32_t id = lv_obj_get_index(obj);
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f7ff ff2d 	bl	800e246 <lv_obj_get_index>
 800e3ec:	6178      	str	r0, [r7, #20]
        uint32_t i;
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	623b      	str	r3, [r7, #32]
 800e3f2:	e013      	b.n	800e41c <obj_del_core+0x17c>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	3301      	adds	r3, #1
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	441a      	add	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	6819      	ldr	r1, [r3, #0]
 800e40c:	6a3b      	ldr	r3, [r7, #32]
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	6812      	ldr	r2, [r2, #0]
 800e414:	601a      	str	r2, [r3, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	3301      	adds	r3, #1
 800e41a:	623b      	str	r3, [r7, #32]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	3b01      	subs	r3, #1
 800e426:	6a3a      	ldr	r2, [r7, #32]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d3e3      	bcc.n	800e3f4 <obj_del_core+0x154>
        }
        obj->parent->spec_attr->child_cnt--;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	685a      	ldr	r2, [r3, #4]
 800e434:	3a01      	subs	r2, #1
 800e436:	605a      	str	r2, [r3, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	681a      	ldr	r2, [r3, #0]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	0099      	lsls	r1, r3, #2
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	689c      	ldr	r4, [r3, #8]
 800e450:	4610      	mov	r0, r2
 800e452:	f013 fe2d 	bl	80220b0 <lv_mem_realloc>
 800e456:	4603      	mov	r3, r0
 800e458:	6023      	str	r3, [r4, #0]
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f013 fdfa 	bl	8022054 <lv_mem_free>
 800e460:	e000      	b.n	800e464 <obj_del_core+0x1c4>
    if(res == LV_RES_INV) return;
 800e462:	bf00      	nop
}
 800e464:	3734      	adds	r7, #52	; 0x34
 800e466:	46bd      	mov	sp, r7
 800e468:	bd90      	pop	{r4, r7, pc}

0800e46a <lv_area_copy>:
{
 800e46a:	b480      	push	{r7}
 800e46c:	b083      	sub	sp, #12
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
 800e472:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	80da      	strh	r2, [r3, #6]
}
 800e49c:	bf00      	nop
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr

0800e4a8 <lv_area_get_width>:
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	b21b      	sxth	r3, r3
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <lv_area_get_height>:
{
 800e4d6:	b480      	push	{r7}
 800e4d8:	b083      	sub	sp, #12
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	b21b      	sxth	r3, r3
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <lv_obj_get_style_transform_zoom>:
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800e50e:	226c      	movs	r2, #108	; 0x6c
 800e510:	6839      	ldr	r1, [r7, #0]
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f7fe fb20 	bl	800cb58 <lv_obj_get_style_prop>
 800e518:	4603      	mov	r3, r0
 800e51a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	b21b      	sxth	r3, r3
}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <lv_obj_get_style_transform_angle>:
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800e532:	226d      	movs	r2, #109	; 0x6d
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7fe fb0e 	bl	800cb58 <lv_obj_get_style_prop>
 800e53c:	4603      	mov	r3, r0
 800e53e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	b21b      	sxth	r3, r3
}
 800e544:	4618      	mov	r0, r3
 800e546:	3710      	adds	r7, #16
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <lv_obj_get_style_transform_pivot_x>:
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800e556:	226e      	movs	r2, #110	; 0x6e
 800e558:	6839      	ldr	r1, [r7, #0]
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7fe fafc 	bl	800cb58 <lv_obj_get_style_prop>
 800e560:	4603      	mov	r3, r0
 800e562:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	b21b      	sxth	r3, r3
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3710      	adds	r7, #16
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <lv_obj_get_style_transform_pivot_y>:
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800e57a:	226f      	movs	r2, #111	; 0x6f
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7fe faea 	bl	800cb58 <lv_obj_get_style_prop>
 800e584:	4603      	mov	r3, r0
 800e586:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	b21b      	sxth	r3, r3
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <lv_obj_get_style_opa>:
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800e59e:	2260      	movs	r2, #96	; 0x60
 800e5a0:	6839      	ldr	r1, [r7, #0]
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7fe fad8 	bl	800cb58 <lv_obj_get_style_prop>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	b2db      	uxtb	r3, r3
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <lv_obj_get_style_blend_mode>:
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800e5c2:	2267      	movs	r2, #103	; 0x67
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7fe fac6 	bl	800cb58 <lv_obj_get_style_prop>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	b2db      	uxtb	r3, r3
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	af00      	add	r7, sp, #0
    perf_monitor_init(&perf_monitor);
#endif
#if LV_USE_MEM_MONITOR
    mem_monitor_init(&mem_monitor);
#endif
}
 800e5e0:	bf00      	nop
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr

0800e5ea <lv_obj_redraw>:
        }
    }
}

void lv_obj_redraw(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b08e      	sub	sp, #56	; 0x38
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
 800e5f2:	6039      	str	r1, [r7, #0]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_area_t clip_coords_for_obj;

    /*Truncate the clip area to `obj size + ext size` area*/
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800e5fa:	f107 0310 	add.w	r3, r7, #16
 800e5fe:	4619      	mov	r1, r3
 800e600:	6838      	ldr	r0, [r7, #0]
 800e602:	f7fa fb86 	bl	8008d12 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800e606:	6838      	ldr	r0, [r7, #0]
 800e608:	f7f9 fe46 	bl	8008298 <_lv_obj_get_ext_draw_size>
 800e60c:	4603      	mov	r3, r0
 800e60e:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800e610:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800e614:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800e618:	f107 0310 	add.w	r3, r7, #16
 800e61c:	4618      	mov	r0, r3
 800e61e:	f012 f95d 	bl	80208dc <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800e622:	f107 0210 	add.w	r2, r7, #16
 800e626:	f107 0318 	add.w	r3, r7, #24
 800e62a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e62c:	4618      	mov	r0, r3
 800e62e:	f012 f9c1 	bl	80209b4 <_lv_area_intersect>
 800e632:	4603      	mov	r3, r0
 800e634:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    /*If the object is visible on the current clip area OR has overflow visible draw it.
     *With overflow visible drawing should happen to apply the masks which might affect children */
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800e638:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d107      	bne.n	800e650 <lv_obj_redraw+0x66>
 800e640:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e644:	6838      	ldr	r0, [r7, #0]
 800e646:	f7f7 fd42 	bl	80060ce <lv_obj_has_flag>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <lv_obj_redraw+0x6a>
 800e650:	2301      	movs	r3, #1
 800e652:	e000      	b.n	800e656 <lv_obj_redraw+0x6c>
 800e654:	2300      	movs	r3, #0
 800e656:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800e65a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(should_draw) {
 800e666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d012      	beq.n	800e694 <lv_obj_redraw+0xaa>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f107 0218 	add.w	r2, r7, #24
 800e674:	609a      	str	r2, [r3, #8]

        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	2114      	movs	r1, #20
 800e67a:	6838      	ldr	r0, [r7, #0]
 800e67c:	f7f6 fb4e 	bl	8004d1c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	2115      	movs	r1, #21
 800e684:	6838      	ldr	r0, [r7, #0]
 800e686:	f7f6 fb49 	bl	8004d1c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	2116      	movs	r1, #22
 800e68e:	6838      	ldr	r0, [r7, #0]
 800e690:	f7f6 fb44 	bl	8004d1c <lv_event_send>
    }

    /*With overflow visible keep the previous clip area to let the children visible out of this object too
     *With not overflow visible limit the clip are to the object's coordinates to clip the children*/
    lv_area_t clip_coords_for_children;
    bool refr_children = true;
 800e694:	2301      	movs	r3, #1
 800e696:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e69a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e69e:	6838      	ldr	r0, [r7, #0]
 800e6a0:	f7f7 fd15 	bl	80060ce <lv_obj_has_flag>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d006      	beq.n	800e6b8 <lv_obj_redraw+0xce>
        clip_coords_for_children  = *clip_area_ori;
 800e6aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ac:	f107 0308 	add.w	r3, r7, #8
 800e6b0:	6810      	ldr	r0, [r2, #0]
 800e6b2:	6851      	ldr	r1, [r2, #4]
 800e6b4:	c303      	stmia	r3!, {r0, r1}
 800e6b6:	e011      	b.n	800e6dc <lv_obj_redraw+0xf2>
    }
    else {
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	f103 0214 	add.w	r2, r3, #20
 800e6be:	f107 0308 	add.w	r3, r7, #8
 800e6c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f012 f975 	bl	80209b4 <_lv_area_intersect>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	f083 0301 	eor.w	r3, r3, #1
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d002      	beq.n	800e6dc <lv_obj_redraw+0xf2>
            refr_children = false;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if(refr_children) {
 800e6dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d01d      	beq.n	800e720 <lv_obj_redraw+0x136>
        draw_ctx->clip_area = &clip_coords_for_children;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f107 0208 	add.w	r2, r7, #8
 800e6ea:	609a      	str	r2, [r3, #8]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800e6ec:	6838      	ldr	r0, [r7, #0]
 800e6ee:	f7ff fd97 	bl	800e220 <lv_obj_get_child_cnt>
 800e6f2:	6278      	str	r0, [r7, #36]	; 0x24
        for(i = 0; i < child_cnt; i++) {
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	633b      	str	r3, [r7, #48]	; 0x30
 800e6f8:	e00e      	b.n	800e718 <lv_obj_redraw+0x12e>
            lv_obj_t * child = obj->spec_attr->children[i];
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	623b      	str	r3, [r7, #32]
            refr_obj(draw_ctx, child);
 800e70a:	6a39      	ldr	r1, [r7, #32]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 fef1 	bl	800f4f4 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800e712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e714:	3301      	adds	r3, #1
 800e716:	633b      	str	r3, [r7, #48]	; 0x30
 800e718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d3ec      	bcc.n	800e6fa <lv_obj_redraw+0x110>
        }
    }

    /*If the object was visible on the clip area call the post draw events too*/
    if(should_draw) {
 800e720:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e724:	2b00      	cmp	r3, #0
 800e726:	d012      	beq.n	800e74e <lv_obj_redraw+0x164>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f107 0218 	add.w	r2, r7, #24
 800e72e:	609a      	str	r2, [r3, #8]

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	2117      	movs	r1, #23
 800e734:	6838      	ldr	r0, [r7, #0]
 800e736:	f7f6 faf1 	bl	8004d1c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	2118      	movs	r1, #24
 800e73e:	6838      	ldr	r0, [r7, #0]
 800e740:	f7f6 faec 	bl	8004d1c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	2119      	movs	r1, #25
 800e748:	6838      	ldr	r0, [r7, #0]
 800e74a:	f7f6 fae7 	bl	8004d1c <lv_event_send>
    }

    draw_ctx->clip_area = clip_area_ori;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e752:	609a      	str	r2, [r3, #8]
}
 800e754:	bf00      	nop
 800e756:	3738      	adds	r7, #56	; 0x38
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b088      	sub	sp, #32
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d102      	bne.n	800e772 <_lv_inv_area+0x16>
 800e76c:	f011 fbf0 	bl	801ff50 <lv_disp_get_default>
 800e770:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 80be 	beq.w	800e8f6 <_lv_inv_area+0x19a>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7f6 f9c4 	bl	8004b08 <lv_disp_is_invalidation_enabled>
 800e780:	4603      	mov	r3, r0
 800e782:	f083 0301 	eor.w	r3, r3, #1
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f040 80b6 	bne.w	800e8fa <_lv_inv_area+0x19e>

    if(disp->rendering_in_progress) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e794:	f003 0304 	and.w	r3, r3, #4
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f040 80af 	bne.w	800e8fe <_lv_inv_area+0x1a2>
        LV_LOG_ERROR("detected modifying dirty areas in render");
        return;
    }

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d104      	bne.n	800e7b0 <_lv_inv_area+0x54>
        disp->inv_p = 0;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        return;
 800e7ae:	e0ad      	b.n	800e90c <_lv_inv_area+0x1b0>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f011 fbd5 	bl	801ff68 <lv_disp_get_hor_res>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	b21b      	sxth	r3, r3
 800e7c8:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f011 fbf2 	bl	801ffb4 <lv_disp_get_ver_res>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	b21b      	sxth	r3, r3
 800e7da:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800e7dc:	f107 0214 	add.w	r2, r7, #20
 800e7e0:	f107 030c 	add.w	r3, r7, #12
 800e7e4:	6839      	ldr	r1, [r7, #0]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f012 f8e4 	bl	80209b4 <_lv_area_intersect>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	777b      	strb	r3, [r7, #29]
    if(suc == false)  return; /*Out of the screen*/
 800e7f0:	7f7b      	ldrb	r3, [r7, #29]
 800e7f2:	f083 0301 	eor.w	r3, r3, #1
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f040 8082 	bne.w	800e902 <_lv_inv_area+0x1a6>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->driver->full_refresh) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	7c1b      	ldrb	r3, [r3, #16]
 800e804:	f003 0302 	and.w	r3, r3, #2
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d015      	beq.n	800e83a <_lv_inv_area+0xde>
        disp->inv_areas[0] = scr_area;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	3330      	adds	r3, #48	; 0x30
 800e812:	f107 0214 	add.w	r2, r7, #20
 800e816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e81a:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d06b      	beq.n	800e906 <_lv_inv_area+0x1aa>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	4618      	mov	r0, r3
 800e834:	f014 ff33 	bl	802369e <lv_timer_resume>
        return;
 800e838:	e065      	b.n	800e906 <_lv_inv_area+0x1aa>
    }

    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	699b      	ldr	r3, [r3, #24]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d008      	beq.n	800e856 <_lv_inv_area+0xfa>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	6812      	ldr	r2, [r2, #0]
 800e84e:	f107 010c 	add.w	r1, r7, #12
 800e852:	4610      	mov	r0, r2
 800e854:	4798      	blx	r3

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
 800e856:	2300      	movs	r3, #0
 800e858:	83fb      	strh	r3, [r7, #30]
 800e85a:	e010      	b.n	800e87e <_lv_inv_area+0x122>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800e85c:	8bfb      	ldrh	r3, [r7, #30]
 800e85e:	3306      	adds	r3, #6
 800e860:	00db      	lsls	r3, r3, #3
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	18d1      	adds	r1, r2, r3
 800e866:	f107 030c 	add.w	r3, r7, #12
 800e86a:	2200      	movs	r2, #0
 800e86c:	4618      	mov	r0, r3
 800e86e:	f012 fa85 	bl	8020d7c <_lv_area_is_in>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d148      	bne.n	800e90a <_lv_inv_area+0x1ae>
    for(i = 0; i < disp->inv_p; i++) {
 800e878:	8bfb      	ldrh	r3, [r7, #30]
 800e87a:	3301      	adds	r3, #1
 800e87c:	83fb      	strh	r3, [r7, #30]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e884:	8bfa      	ldrh	r2, [r7, #30]
 800e886:	429a      	cmp	r2, r3
 800e888:	d3e8      	bcc.n	800e85c <_lv_inv_area+0x100>
    }

    /*Save the area*/
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e890:	2b1f      	cmp	r3, #31
 800e892:	d80d      	bhi.n	800e8b0 <_lv_inv_area+0x154>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e89a:	3306      	adds	r3, #6
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	f107 020c 	add.w	r2, r7, #12
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7ff fdde 	bl	800e46a <lv_area_copy>
 800e8ae:	e010      	b.n	800e8d2 <_lv_inv_area+0x176>
    }
    else {   /*If no place for the area add the screen*/
        disp->inv_p = 0;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e8be:	3306      	adds	r3, #6
 800e8c0:	00db      	lsls	r3, r3, #3
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	f107 0214 	add.w	r2, r7, #20
 800e8ca:	4611      	mov	r1, r2
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff fdcc 	bl	800e46a <lv_area_copy>
    }
    disp->inv_p++;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e8d8:	3301      	adds	r3, #1
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d010      	beq.n	800e90c <_lv_inv_area+0x1b0>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f014 fed5 	bl	802369e <lv_timer_resume>
 800e8f4:	e00a      	b.n	800e90c <_lv_inv_area+0x1b0>
    if(!disp) return;
 800e8f6:	bf00      	nop
 800e8f8:	e008      	b.n	800e90c <_lv_inv_area+0x1b0>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800e8fa:	bf00      	nop
 800e8fc:	e006      	b.n	800e90c <_lv_inv_area+0x1b0>
        return;
 800e8fe:	bf00      	nop
 800e900:	e004      	b.n	800e90c <_lv_inv_area+0x1b0>
    if(suc == false)  return; /*Out of the screen*/
 800e902:	bf00      	nop
 800e904:	e002      	b.n	800e90c <_lv_inv_area+0x1b0>
        return;
 800e906:	bf00      	nop
 800e908:	e000      	b.n	800e90c <_lv_inv_area+0x1b0>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800e90a:	bf00      	nop
}
 800e90c:	3720      	adds	r7, #32
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
	...

0800e914 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 800e914:	b480      	push	{r7}
 800e916:	af00      	add	r7, sp, #0
    return disp_refr;
 800e918:	4b03      	ldr	r3, [pc, #12]	; (800e928 <_lv_refr_get_disp_refreshing+0x14>)
 800e91a:	681b      	ldr	r3, [r3, #0]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	20000710 	.word	0x20000710

0800e92c <_lv_disp_refr_timer>:
/**
 * Called periodically to handle the refreshing
 * @param tmr pointer to the timer itself
 */
void _lv_disp_refr_timer(lv_timer_t * tmr)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
    REFR_TRACE("begin");

    uint32_t start = lv_tick_get();
 800e934:	f011 fbce 	bl	80200d4 <lv_tick_get>
 800e938:	60f8      	str	r0, [r7, #12]
    volatile uint32_t elaps = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	60bb      	str	r3, [r7, #8]

    if(tmr) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d007      	beq.n	800e954 <_lv_disp_refr_timer+0x28>
        disp_refr = tmr->user_data;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	4a38      	ldr	r2, [pc, #224]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e94a:	6013      	str	r3, [r2, #0]
#if LV_USE_PERF_MONITOR == 0 && LV_USE_MEM_MONITOR == 0
        /**
         * Ensure the timer does not run again automatically.
         * This is done before refreshing in case refreshing invalidates something else.
         */
        lv_timer_pause(tmr);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f014 fe97 	bl	8023680 <lv_timer_pause>
 800e952:	e004      	b.n	800e95e <_lv_disp_refr_timer+0x32>
#endif
    }
    else {
        disp_refr = lv_disp_get_default();
 800e954:	f011 fafc 	bl	801ff50 <lv_disp_get_default>
 800e958:	4603      	mov	r3, r0
 800e95a:	4a34      	ldr	r2, [pc, #208]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e95c:	6013      	str	r3, [r2, #0]
    }

    /*Refresh the screen's layout if required*/
    lv_obj_update_layout(disp_refr->act_scr);
 800e95e:	4b33      	ldr	r3, [pc, #204]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	691b      	ldr	r3, [r3, #16]
 800e964:	4618      	mov	r0, r3
 800e966:	f7fa f989 	bl	8008c7c <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800e96a:	4b30      	ldr	r3, [pc, #192]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	695b      	ldr	r3, [r3, #20]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d005      	beq.n	800e980 <_lv_disp_refr_timer+0x54>
 800e974:	4b2d      	ldr	r3, [pc, #180]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	695b      	ldr	r3, [r3, #20]
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fa f97e 	bl	8008c7c <lv_obj_update_layout>

    lv_obj_update_layout(disp_refr->top_layer);
 800e980:	4b2a      	ldr	r3, [pc, #168]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	69db      	ldr	r3, [r3, #28]
 800e986:	4618      	mov	r0, r3
 800e988:	f7fa f978 	bl	8008c7c <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800e98c:	4b27      	ldr	r3, [pc, #156]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	4618      	mov	r0, r3
 800e994:	f7fa f972 	bl	8008c7c <lv_obj_update_layout>

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 800e998:	4b24      	ldr	r3, [pc, #144]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	691b      	ldr	r3, [r3, #16]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d105      	bne.n	800e9ae <_lv_disp_refr_timer+0x82>
        disp_refr->inv_p = 0;
 800e9a2:	4b22      	ldr	r3, [pc, #136]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        LV_LOG_WARN("there is no active screen");
        REFR_TRACE("finished");
        return;
 800e9ac:	e03a      	b.n	800ea24 <_lv_disp_refr_timer+0xf8>
    }

    lv_refr_join_area();
 800e9ae:	f000 f841 	bl	800ea34 <lv_refr_join_area>

    refr_invalid_areas();
 800e9b2:	f000 f8d7 	bl	800eb64 <refr_invalid_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800e9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d02a      	beq.n	800ea18 <_lv_disp_refr_timer+0xec>

        /*Clean up*/
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800e9c2:	4b1a      	ldr	r3, [pc, #104]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	3330      	adds	r3, #48	; 0x30
 800e9c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f013 ff45 	bl	802285c <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800e9d2:	4b16      	ldr	r3, [pc, #88]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800e9da:	2120      	movs	r1, #32
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f013 ff3d 	bl	802285c <lv_memset_00>
        disp_refr->inv_p = 0;
 800e9e2:	4b12      	ldr	r3, [pc, #72]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150

        elaps = lv_tick_elaps(start);
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f011 fb8b 	bl	8020108 <lv_tick_elaps>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	60bb      	str	r3, [r7, #8]

        /*Call monitor cb if present*/
        if(disp_refr->driver->monitor_cb) {
 800e9f6:	4b0d      	ldr	r3, [pc, #52]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00a      	beq.n	800ea18 <_lv_disp_refr_timer+0xec>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800ea02:	4b0a      	ldr	r3, [pc, #40]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0a:	4a08      	ldr	r2, [pc, #32]	; (800ea2c <_lv_disp_refr_timer+0x100>)
 800ea0c:	6812      	ldr	r2, [r2, #0]
 800ea0e:	6810      	ldr	r0, [r2, #0]
 800ea10:	68b9      	ldr	r1, [r7, #8]
 800ea12:	4a07      	ldr	r2, [pc, #28]	; (800ea30 <_lv_disp_refr_timer+0x104>)
 800ea14:	6812      	ldr	r2, [r2, #0]
 800ea16:	4798      	blx	r3
        }
    }

    lv_mem_buf_free_all();
 800ea18:	f013 fc46 	bl	80222a8 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800ea1c:	f010 fed6 	bl	801f7cc <_lv_font_clean_up_fmt_txt>

#if LV_DRAW_COMPLEX
    _lv_draw_mask_cleanup();
 800ea20:	f003 f94e 	bl	8011cc0 <_lv_draw_mask_cleanup>
                              mon.frag_pct);
    }
#endif

    REFR_TRACE("finished");
}
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20000710 	.word	0x20000710
 800ea30:	2000070c 	.word	0x2000070c

0800ea34 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800ea34:	b5b0      	push	{r4, r5, r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	60bb      	str	r3, [r7, #8]
 800ea3e:	e080      	b.n	800eb42 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800ea40:	4b47      	ldr	r3, [pc, #284]	; (800eb60 <lv_refr_join_area+0x12c>)
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	4413      	add	r3, r2
 800ea48:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d173      	bne.n	800eb3a <lv_refr_join_area+0x106>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800ea52:	2300      	movs	r3, #0
 800ea54:	60fb      	str	r3, [r7, #12]
 800ea56:	e067      	b.n	800eb28 <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800ea58:	4b41      	ldr	r3, [pc, #260]	; (800eb60 <lv_refr_join_area+0x12c>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	4413      	add	r3, r2
 800ea60:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d158      	bne.n	800eb1c <lv_refr_join_area+0xe8>
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d054      	beq.n	800eb1c <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800ea72:	4b3b      	ldr	r3, [pc, #236]	; (800eb60 <lv_refr_join_area+0x12c>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	3306      	adds	r3, #6
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	18d0      	adds	r0, r2, r3
 800ea7e:	4b38      	ldr	r3, [pc, #224]	; (800eb60 <lv_refr_join_area+0x12c>)
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	3306      	adds	r3, #6
 800ea86:	00db      	lsls	r3, r3, #3
 800ea88:	4413      	add	r3, r2
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	f012 f948 	bl	8020d20 <_lv_area_is_on>
 800ea90:	4603      	mov	r3, r0
 800ea92:	f083 0301 	eor.w	r3, r3, #1
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d141      	bne.n	800eb20 <lv_refr_join_area+0xec>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800ea9c:	4b30      	ldr	r3, [pc, #192]	; (800eb60 <lv_refr_join_area+0x12c>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	3306      	adds	r3, #6
 800eaa4:	00db      	lsls	r3, r3, #3
 800eaa6:	18d1      	adds	r1, r2, r3
 800eaa8:	4b2d      	ldr	r3, [pc, #180]	; (800eb60 <lv_refr_join_area+0x12c>)
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	3306      	adds	r3, #6
 800eab0:	00db      	lsls	r3, r3, #3
 800eab2:	441a      	add	r2, r3
 800eab4:	463b      	mov	r3, r7
 800eab6:	4618      	mov	r0, r3
 800eab8:	f011 ffcd 	bl	8020a56 <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800eabc:	463b      	mov	r3, r7
 800eabe:	4618      	mov	r0, r3
 800eac0:	f011 feeb 	bl	802089a <lv_area_get_size>
 800eac4:	4604      	mov	r4, r0
 800eac6:	4b26      	ldr	r3, [pc, #152]	; (800eb60 <lv_refr_join_area+0x12c>)
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	3306      	adds	r3, #6
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	4413      	add	r3, r2
 800ead2:	4618      	mov	r0, r3
 800ead4:	f011 fee1 	bl	802089a <lv_area_get_size>
 800ead8:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800eada:	4b21      	ldr	r3, [pc, #132]	; (800eb60 <lv_refr_join_area+0x12c>)
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	3306      	adds	r3, #6
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	4413      	add	r3, r2
 800eae6:	4618      	mov	r0, r3
 800eae8:	f011 fed7 	bl	802089a <lv_area_get_size>
 800eaec:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800eaee:	442b      	add	r3, r5
 800eaf0:	429c      	cmp	r4, r3
 800eaf2:	d216      	bcs.n	800eb22 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800eaf4:	4b1a      	ldr	r3, [pc, #104]	; (800eb60 <lv_refr_join_area+0x12c>)
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	3306      	adds	r3, #6
 800eafc:	00db      	lsls	r3, r3, #3
 800eafe:	4413      	add	r3, r2
 800eb00:	463a      	mov	r2, r7
 800eb02:	4611      	mov	r1, r2
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fcb0 	bl	800e46a <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800eb0a:	4b15      	ldr	r3, [pc, #84]	; (800eb60 <lv_refr_join_area+0x12c>)
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	4413      	add	r3, r2
 800eb12:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800eb16:	2201      	movs	r2, #1
 800eb18:	701a      	strb	r2, [r3, #0]
 800eb1a:	e002      	b.n	800eb22 <lv_refr_join_area+0xee>
                continue;
 800eb1c:	bf00      	nop
 800eb1e:	e000      	b.n	800eb22 <lv_refr_join_area+0xee>
                continue;
 800eb20:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3301      	adds	r3, #1
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	4b0d      	ldr	r3, [pc, #52]	; (800eb60 <lv_refr_join_area+0x12c>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800eb30:	461a      	mov	r2, r3
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d38f      	bcc.n	800ea58 <lv_refr_join_area+0x24>
 800eb38:	e000      	b.n	800eb3c <lv_refr_join_area+0x108>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800eb3a:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	60bb      	str	r3, [r7, #8]
 800eb42:	4b07      	ldr	r3, [pc, #28]	; (800eb60 <lv_refr_join_area+0x12c>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	f4ff af76 	bcc.w	800ea40 <lv_refr_join_area+0xc>
            }
        }
    }
}
 800eb54:	bf00      	nop
 800eb56:	bf00      	nop
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bdb0      	pop	{r4, r5, r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	20000710 	.word	0x20000710

0800eb64 <refr_invalid_areas>:

/**
 * Refresh the joined areas
 */
static void refr_invalid_areas(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
    px_num = 0;
 800eb6a:	4b4e      	ldr	r3, [pc, #312]	; (800eca4 <refr_invalid_areas+0x140>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 800eb70:	4b4d      	ldr	r3, [pc, #308]	; (800eca8 <refr_invalid_areas+0x144>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f000 808e 	beq.w	800ec9a <refr_invalid_areas+0x136>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800eb82:	4b49      	ldr	r3, [pc, #292]	; (800eca8 <refr_invalid_areas+0x144>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	607b      	str	r3, [r7, #4]
 800eb8e:	e00e      	b.n	800ebae <refr_invalid_areas+0x4a>
        if(disp_refr->inv_area_joined[i] == 0) {
 800eb90:	4b45      	ldr	r3, [pc, #276]	; (800eca8 <refr_invalid_areas+0x144>)
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4413      	add	r3, r2
 800eb98:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d102      	bne.n	800eba8 <refr_invalid_areas+0x44>
            last_i = i;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	603b      	str	r3, [r7, #0]
            break;
 800eba6:	e005      	b.n	800ebb4 <refr_invalid_areas+0x50>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	3b01      	subs	r3, #1
 800ebac:	607b      	str	r3, [r7, #4]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	daed      	bge.n	800eb90 <refr_invalid_areas+0x2c>
        }
    }

    /*Notify the display driven rendering has started*/
    if(disp_refr->driver->render_start_cb) {
 800ebb4:	4b3c      	ldr	r3, [pc, #240]	; (800eca8 <refr_invalid_areas+0x144>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d008      	beq.n	800ebd2 <refr_invalid_areas+0x6e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800ebc0:	4b39      	ldr	r3, [pc, #228]	; (800eca8 <refr_invalid_areas+0x144>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc8:	4a37      	ldr	r2, [pc, #220]	; (800eca8 <refr_invalid_areas+0x144>)
 800ebca:	6812      	ldr	r2, [r2, #0]
 800ebcc:	6812      	ldr	r2, [r2, #0]
 800ebce:	4610      	mov	r0, r2
 800ebd0:	4798      	blx	r3
    }

    disp_refr->driver->draw_buf->last_area = 0;
 800ebd2:	4b35      	ldr	r3, [pc, #212]	; (800eca8 <refr_invalid_areas+0x144>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	68da      	ldr	r2, [r3, #12]
 800ebda:	7e13      	ldrb	r3, [r2, #24]
 800ebdc:	f36f 0300 	bfc	r3, #0, #1
 800ebe0:	7613      	strb	r3, [r2, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800ebe2:	4b31      	ldr	r3, [pc, #196]	; (800eca8 <refr_invalid_areas+0x144>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	68da      	ldr	r2, [r3, #12]
 800ebea:	7e13      	ldrb	r3, [r2, #24]
 800ebec:	f36f 0341 	bfc	r3, #1, #1
 800ebf0:	7613      	strb	r3, [r2, #24]
    disp_refr->rendering_in_progress = true;
 800ebf2:	4b2d      	ldr	r3, [pc, #180]	; (800eca8 <refr_invalid_areas+0x144>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800ebfa:	f043 0304 	orr.w	r3, r3, #4
 800ebfe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    for(i = 0; i < disp_refr->inv_p; i++) {
 800ec02:	2300      	movs	r3, #0
 800ec04:	607b      	str	r3, [r7, #4]
 800ec06:	e037      	b.n	800ec78 <refr_invalid_areas+0x114>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800ec08:	4b27      	ldr	r3, [pc, #156]	; (800eca8 <refr_invalid_areas+0x144>)
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	4413      	add	r3, r2
 800ec10:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d12b      	bne.n	800ec72 <refr_invalid_areas+0x10e>

            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d107      	bne.n	800ec32 <refr_invalid_areas+0xce>
 800ec22:	4b21      	ldr	r3, [pc, #132]	; (800eca8 <refr_invalid_areas+0x144>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	68da      	ldr	r2, [r3, #12]
 800ec2a:	7e13      	ldrb	r3, [r2, #24]
 800ec2c:	f043 0301 	orr.w	r3, r3, #1
 800ec30:	7613      	strb	r3, [r2, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 800ec32:	4b1d      	ldr	r3, [pc, #116]	; (800eca8 <refr_invalid_areas+0x144>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68da      	ldr	r2, [r3, #12]
 800ec3a:	7e13      	ldrb	r3, [r2, #24]
 800ec3c:	f36f 0341 	bfc	r3, #1, #1
 800ec40:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800ec42:	4b19      	ldr	r3, [pc, #100]	; (800eca8 <refr_invalid_areas+0x144>)
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	3306      	adds	r3, #6
 800ec4a:	00db      	lsls	r3, r3, #3
 800ec4c:	4413      	add	r3, r2
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 f82c 	bl	800ecac <refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800ec54:	4b14      	ldr	r3, [pc, #80]	; (800eca8 <refr_invalid_areas+0x144>)
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	3306      	adds	r3, #6
 800ec5c:	00db      	lsls	r3, r3, #3
 800ec5e:	4413      	add	r3, r2
 800ec60:	4618      	mov	r0, r3
 800ec62:	f011 fe1a 	bl	802089a <lv_area_get_size>
 800ec66:	4602      	mov	r2, r0
 800ec68:	4b0e      	ldr	r3, [pc, #56]	; (800eca4 <refr_invalid_areas+0x140>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	4a0d      	ldr	r2, [pc, #52]	; (800eca4 <refr_invalid_areas+0x140>)
 800ec70:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	3301      	adds	r3, #1
 800ec76:	607b      	str	r3, [r7, #4]
 800ec78:	4b0b      	ldr	r3, [pc, #44]	; (800eca8 <refr_invalid_areas+0x144>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800ec80:	461a      	mov	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4293      	cmp	r3, r2
 800ec86:	dbbf      	blt.n	800ec08 <refr_invalid_areas+0xa4>
        }
    }

    disp_refr->rendering_in_progress = false;
 800ec88:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <refr_invalid_areas+0x144>)
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800ec90:	f36f 0382 	bfc	r3, #2, #1
 800ec94:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800ec98:	e000      	b.n	800ec9c <refr_invalid_areas+0x138>
    if(disp_refr->inv_p == 0) return;
 800ec9a:	bf00      	nop
}
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	2000070c 	.word	0x2000070c
 800eca8:	20000710 	.word	0x20000710

0800ecac <refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void refr_area(const lv_area_t * area_p)
{
 800ecac:	b590      	push	{r4, r7, lr}
 800ecae:	b08f      	sub	sp, #60	; 0x3c
 800ecb0:	af02      	add	r7, sp, #8
 800ecb2:	6078      	str	r0, [r7, #4]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800ecb4:	4b8e      	ldr	r3, [pc, #568]	; (800eef0 <refr_area+0x244>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecbc:	62bb      	str	r3, [r7, #40]	; 0x28
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ecbe:	4b8c      	ldr	r3, [pc, #560]	; (800eef0 <refr_area+0x244>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	689a      	ldr	r2, [r3, #8]
 800ecc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecca:	601a      	str	r2, [r3, #0]

    /*With full refresh just redraw directly into the buffer*/
    /*In direct mode draw directly on the absolute coordinates of the buffer*/
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800eccc:	4b88      	ldr	r3, [pc, #544]	; (800eef0 <refr_area+0x244>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	7c1b      	ldrb	r3, [r3, #16]
 800ecd4:	f003 0302 	and.w	r3, r3, #2
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d108      	bne.n	800ecf0 <refr_area+0x44>
 800ecde:	4b84      	ldr	r3, [pc, #528]	; (800eef0 <refr_area+0x244>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	7c1b      	ldrb	r3, [r3, #16]
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d04f      	beq.n	800ed90 <refr_area+0xe4>
        lv_area_t disp_area;
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800ecf0:	4b7f      	ldr	r3, [pc, #508]	; (800eef0 <refr_area+0x244>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f011 f937 	bl	801ff68 <lv_disp_get_hor_res>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	b21c      	sxth	r4, r3
 800ed04:	4b7a      	ldr	r3, [pc, #488]	; (800eef0 <refr_area+0x244>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f011 f953 	bl	801ffb4 <lv_disp_get_ver_res>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	3b01      	subs	r3, #1
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	b21b      	sxth	r3, r3
 800ed18:	f107 000c 	add.w	r0, r7, #12
 800ed1c:	9300      	str	r3, [sp, #0]
 800ed1e:	4623      	mov	r3, r4
 800ed20:	2200      	movs	r2, #0
 800ed22:	2100      	movs	r1, #0
 800ed24:	f011 fd82 	bl	802082c <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 800ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2a:	f107 020c 	add.w	r2, r7, #12
 800ed2e:	605a      	str	r2, [r3, #4]

        if(disp_refr->driver->full_refresh) {
 800ed30:	4b6f      	ldr	r3, [pc, #444]	; (800eef0 <refr_area+0x244>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	7c1b      	ldrb	r3, [r3, #16]
 800ed38:	f003 0302 	and.w	r3, r3, #2
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00f      	beq.n	800ed62 <refr_area+0xb6>
            disp_refr->driver->draw_buf->last_part = 1;
 800ed42:	4b6b      	ldr	r3, [pc, #428]	; (800eef0 <refr_area+0x244>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	68da      	ldr	r2, [r3, #12]
 800ed4a:	7e13      	ldrb	r3, [r2, #24]
 800ed4c:	f043 0302 	orr.w	r3, r3, #2
 800ed50:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800ed52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed54:	f107 020c 	add.w	r2, r7, #12
 800ed58:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800ed5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed5c:	f000 f8ca 	bl	800eef4 <refr_area_part>
 800ed60:	e0c3      	b.n	800eeea <refr_area+0x23e>
        }
        else {
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800ed62:	4b63      	ldr	r3, [pc, #396]	; (800eef0 <refr_area+0x244>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	4a61      	ldr	r2, [pc, #388]	; (800eef0 <refr_area+0x244>)
 800ed6c:	6812      	ldr	r2, [r2, #0]
 800ed6e:	6812      	ldr	r2, [r2, #0]
 800ed70:	68d2      	ldr	r2, [r2, #12]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ed78:	b2d9      	uxtb	r1, r3
 800ed7a:	7e13      	ldrb	r3, [r2, #24]
 800ed7c:	f361 0341 	bfi	r3, r1, #1, #1
 800ed80:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = area_p;
 800ed82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 800ed88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed8a:	f000 f8b3 	bl	800eef4 <refr_area_part>
 800ed8e:	e0ac      	b.n	800eeea <refr_area+0x23e>
        return;
    }

    /*Normal refresh: draw the area in parts*/
    /*Calculate the max row num*/
    lv_coord_t w = lv_area_get_width(area_p);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7ff fb89 	bl	800e4a8 <lv_area_get_width>
 800ed96:	4603      	mov	r3, r0
 800ed98:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h = lv_area_get_height(area_p);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7ff fb9b 	bl	800e4d6 <lv_area_get_height>
 800eda0:	4603      	mov	r3, r0
 800eda2:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800edaa:	4b51      	ldr	r3, [pc, #324]	; (800eef0 <refr_area+0x244>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4618      	mov	r0, r3
 800edb0:	f011 f900 	bl	801ffb4 <lv_disp_get_ver_res>
 800edb4:	4603      	mov	r3, r0
 800edb6:	429c      	cmp	r4, r3
 800edb8:	db0a      	blt.n	800edd0 <refr_area+0x124>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800edba:	4b4d      	ldr	r3, [pc, #308]	; (800eef0 <refr_area+0x244>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f011 f8f8 	bl	801ffb4 <lv_disp_get_ver_res>
 800edc4:	4603      	mov	r3, r0
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	3b01      	subs	r3, #1
 800edca:	b29b      	uxth	r3, r3
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800edcc:	b21b      	sxth	r3, r3
 800edce:	e002      	b.n	800edd6 <refr_area+0x12a>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800edd6:	847b      	strh	r3, [r7, #34]	; 0x22

    int32_t max_row = get_max_row(disp_refr, w, h);
 800edd8:	4b45      	ldr	r3, [pc, #276]	; (800eef0 <refr_area+0x244>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ede0:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 800ede4:	4618      	mov	r0, r3
 800ede6:	f000 fd59 	bl	800f89c <get_max_row>
 800edea:	4603      	mov	r3, r0
 800edec:	61fb      	str	r3, [r7, #28]

    lv_coord_t row;
    lv_coord_t row_last = 0;
 800edee:	2300      	movs	r3, #0
 800edf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_area_t sub_area;
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	885b      	ldrh	r3, [r3, #2]
 800edf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800edf8:	e042      	b.n	800ee80 <refr_area+0x1d4>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee00:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ee08:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800ee0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee0c:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = row + max_row - 1;
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee14:	4413      	add	r3, r2
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	b21b      	sxth	r3, r3
 800ee1e:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	f107 0214 	add.w	r2, r7, #20
 800ee26:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	f107 0214 	add.w	r2, r7, #20
 800ee2e:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ee30:	4b2f      	ldr	r3, [pc, #188]	; (800eef0 <refr_area+0x244>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	689a      	ldr	r2, [r3, #8]
 800ee3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3c:	601a      	str	r2, [r3, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800ee3e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ee42:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ee46:	429a      	cmp	r2, r3
 800ee48:	da01      	bge.n	800ee4e <refr_area+0x1a2>
 800ee4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee4c:	837b      	strh	r3, [r7, #26]
        row_last = sub_area.y2;
 800ee4e:	8b7b      	ldrh	r3, [r7, #26]
 800ee50:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800ee52:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ee56:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d107      	bne.n	800ee6e <refr_area+0x1c2>
 800ee5e:	4b24      	ldr	r3, [pc, #144]	; (800eef0 <refr_area+0x244>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	68da      	ldr	r2, [r3, #12]
 800ee66:	7e13      	ldrb	r3, [r2, #24]
 800ee68:	f043 0302 	orr.w	r3, r3, #2
 800ee6c:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800ee6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee70:	f000 f840 	bl	800eef4 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee7a:	4413      	add	r3, r2
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ee80:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	4413      	add	r3, r2
 800ee88:	1e5a      	subs	r2, r3, #1
 800ee8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	ddb3      	ble.n	800edfa <refr_area+0x14e>
    }

    /*If the last y coordinates are not handled yet ...*/
    if(y2 != row_last) {
 800ee92:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800ee96:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d025      	beq.n	800eeea <refr_area+0x23e>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eea4:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eeac:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 800eeae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eeb0:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = y2;
 800eeb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eeb4:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 800eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb8:	f107 0214 	add.w	r2, r7, #20
 800eebc:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 800eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec0:	f107 0214 	add.w	r2, r7, #20
 800eec4:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800eec6:	4b0a      	ldr	r3, [pc, #40]	; (800eef0 <refr_area+0x244>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	689a      	ldr	r2, [r3, #8]
 800eed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed2:	601a      	str	r2, [r3, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800eed4:	4b06      	ldr	r3, [pc, #24]	; (800eef0 <refr_area+0x244>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	68da      	ldr	r2, [r3, #12]
 800eedc:	7e13      	ldrb	r3, [r2, #24]
 800eede:	f043 0302 	orr.w	r3, r3, #2
 800eee2:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800eee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eee6:	f000 f805 	bl	800eef4 <refr_area_part>
    }
}
 800eeea:	3734      	adds	r7, #52	; 0x34
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd90      	pop	{r4, r7, pc}
 800eef0:	20000710 	.word	0x20000710

0800eef4 <refr_area_part>:

static void refr_area_part(lv_draw_ctx_t * draw_ctx)
{
 800eef4:	b590      	push	{r4, r7, lr}
 800eef6:	b09d      	sub	sp, #116	; 0x74
 800eef8:	af02      	add	r7, sp, #8
 800eefa:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800eefc:	4b89      	ldr	r3, [pc, #548]	; (800f124 <refr_area_part+0x230>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f011 f8a9 	bl	8020058 <lv_disp_get_draw_buf>
 800ef06:	65f8      	str	r0, [r7, #92]	; 0x5c

    /* Below the `area_p` area will be redrawn into the draw buffer.
     * In single buffered mode wait here until the buffer is freed.
     * In full double buffered mode wait here while the buffers are swapped and a buffer becomes available*/
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800ef08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef0a:	68da      	ldr	r2, [r3, #12]
 800ef0c:	4b85      	ldr	r3, [pc, #532]	; (800f124 <refr_area_part+0x230>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef16:	4619      	mov	r1, r3
 800ef18:	4b82      	ldr	r3, [pc, #520]	; (800f124 <refr_area_part+0x230>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef22:	fb01 f303 	mul.w	r3, r1, r3
 800ef26:	429a      	cmp	r2, r3
 800ef28:	bf0c      	ite	eq
 800ef2a:	2301      	moveq	r3, #1
 800ef2c:	2300      	movne	r3, #0
 800ef2e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800ef32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d003      	beq.n	800ef42 <refr_area_part+0x4e>
 800ef3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d01b      	beq.n	800ef7a <refr_area_part+0x86>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800ef42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef44:	681b      	ldr	r3, [r3, #0]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d01b      	beq.n	800ef82 <refr_area_part+0x8e>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800ef4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d017      	beq.n	800ef82 <refr_area_part+0x8e>
 800ef52:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d013      	beq.n	800ef82 <refr_area_part+0x8e>
        while(draw_buf->flushing) {
 800ef5a:	e00e      	b.n	800ef7a <refr_area_part+0x86>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800ef5c:	4b71      	ldr	r3, [pc, #452]	; (800f124 <refr_area_part+0x230>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d008      	beq.n	800ef7a <refr_area_part+0x86>
 800ef68:	4b6e      	ldr	r3, [pc, #440]	; (800f124 <refr_area_part+0x230>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef70:	4a6c      	ldr	r2, [pc, #432]	; (800f124 <refr_area_part+0x230>)
 800ef72:	6812      	ldr	r2, [r2, #0]
 800ef74:	6812      	ldr	r2, [r2, #0]
 800ef76:	4610      	mov	r0, r2
 800ef78:	4798      	blx	r3
        while(draw_buf->flushing) {
 800ef7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1ec      	bne.n	800ef5c <refr_area_part+0x68>
            }
        }
#endif
    }

    lv_obj_t * top_act_scr = NULL;
 800ef82:	2300      	movs	r3, #0
 800ef84:	667b      	str	r3, [r7, #100]	; 0x64
    lv_obj_t * top_prev_scr = NULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	663b      	str	r3, [r7, #96]	; 0x60

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	685c      	ldr	r4, [r3, #4]
 800ef8e:	4b65      	ldr	r3, [pc, #404]	; (800f124 <refr_area_part+0x230>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7f5 fabe 	bl	8004514 <lv_disp_get_scr_act>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f000 f8fd 	bl	800f19c <lv_refr_get_top_obj>
 800efa2:	6678      	str	r0, [r7, #100]	; 0x64
    if(disp_refr->prev_scr) {
 800efa4:	4b5f      	ldr	r3, [pc, #380]	; (800f124 <refr_area_part+0x230>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	695b      	ldr	r3, [r3, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d009      	beq.n	800efc2 <refr_area_part+0xce>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	685a      	ldr	r2, [r3, #4]
 800efb2:	4b5c      	ldr	r3, [pc, #368]	; (800f124 <refr_area_part+0x230>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	695b      	ldr	r3, [r3, #20]
 800efb8:	4619      	mov	r1, r3
 800efba:	4610      	mov	r0, r2
 800efbc:	f000 f8ee 	bl	800f19c <lv_refr_get_top_obj>
 800efc0:	6638      	str	r0, [r7, #96]	; 0x60
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800efc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f040 8087 	bne.w	800f0d8 <refr_area_part+0x1e4>
 800efca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f040 8083 	bne.w	800f0d8 <refr_area_part+0x1e4>
        lv_area_t a;
        lv_area_set(&a, 0, 0,
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800efd2:	4b54      	ldr	r3, [pc, #336]	; (800f124 <refr_area_part+0x230>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f010 ffc6 	bl	801ff68 <lv_disp_get_hor_res>
 800efdc:	4603      	mov	r3, r0
 800efde:	b29b      	uxth	r3, r3
 800efe0:	3b01      	subs	r3, #1
 800efe2:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800efe4:	b21c      	sxth	r4, r3
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800efe6:	4b4f      	ldr	r3, [pc, #316]	; (800f124 <refr_area_part+0x230>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4618      	mov	r0, r3
 800efec:	f010 ffe2 	bl	801ffb4 <lv_disp_get_ver_res>
 800eff0:	4603      	mov	r3, r0
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	3b01      	subs	r3, #1
 800eff6:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 800eff8:	b21b      	sxth	r3, r3
 800effa:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	4623      	mov	r3, r4
 800f002:	2200      	movs	r2, #0
 800f004:	2100      	movs	r1, #0
 800f006:	f011 fc11 	bl	802082c <lv_area_set>
        if(draw_ctx->draw_bg) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d020      	beq.n	800f054 <refr_area_part+0x160>
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800f012:	f107 0308 	add.w	r3, r7, #8
 800f016:	4618      	mov	r0, r3
 800f018:	f005 f91e 	bl	8014258 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800f01c:	4b41      	ldr	r3, [pc, #260]	; (800f124 <refr_area_part+0x230>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f022:	617b      	str	r3, [r7, #20]
            dsc.bg_img_opa = disp_refr->bg_opa;
 800f024:	4b3f      	ldr	r3, [pc, #252]	; (800f124 <refr_area_part+0x230>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f02c:	777b      	strb	r3, [r7, #29]
            dsc.bg_color = disp_refr->bg_color;
 800f02e:	4b3d      	ldr	r3, [pc, #244]	; (800f124 <refr_area_part+0x230>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800f036:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800f038:	4b3a      	ldr	r3, [pc, #232]	; (800f124 <refr_area_part+0x230>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f040:	72fb      	strb	r3, [r7, #11]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f046:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f04a:	f107 0108 	add.w	r1, r7, #8
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	4798      	blx	r3
 800f052:	e041      	b.n	800f0d8 <refr_area_part+0x1e4>
        }
        else if(disp_refr->bg_img) {
 800f054:	4b33      	ldr	r3, [pc, #204]	; (800f124 <refr_area_part+0x230>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d025      	beq.n	800f0aa <refr_area_part+0x1b6>
            lv_img_header_t header;
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800f05e:	4b31      	ldr	r3, [pc, #196]	; (800f124 <refr_area_part+0x230>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f064:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f068:	4611      	mov	r1, r2
 800f06a:	4618      	mov	r0, r3
 800f06c:	f005 fb00 	bl	8014670 <lv_img_decoder_get_info>
 800f070:	4603      	mov	r3, r0
 800f072:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if(res == LV_RES_OK) {
 800f076:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d12c      	bne.n	800f0d8 <refr_area_part+0x1e4>
                lv_draw_img_dsc_t dsc;
                lv_draw_img_dsc_init(&dsc);
 800f07e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f082:	4618      	mov	r0, r3
 800f084:	f001 f997 	bl	80103b6 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800f088:	4b26      	ldr	r3, [pc, #152]	; (800f124 <refr_area_part+0x230>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f090:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800f094:	4b23      	ldr	r3, [pc, #140]	; (800f124 <refr_area_part+0x230>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f09e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f001 f9a4 	bl	80103f0 <lv_draw_img>
 800f0a8:	e016      	b.n	800f0d8 <refr_area_part+0x1e4>
                LV_LOG_WARN("Can't draw the background image");
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800f0aa:	f107 0308 	add.w	r3, r7, #8
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f005 f8d2 	bl	8014258 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800f0b4:	4b1b      	ldr	r3, [pc, #108]	; (800f124 <refr_area_part+0x230>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800f0bc:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800f0be:	4b19      	ldr	r3, [pc, #100]	; (800f124 <refr_area_part+0x230>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800f0c6:	72fb      	strb	r3, [r7, #11]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	685a      	ldr	r2, [r3, #4]
 800f0cc:	f107 0308 	add.w	r3, r7, #8
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f005 f904 	bl	80142e0 <lv_draw_rect>
        }
    }

    if(disp_refr->draw_prev_over_act) {
 800f0d8:	4b12      	ldr	r3, [pc, #72]	; (800f124 <refr_area_part+0x230>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0e0:	f003 0301 	and.w	r3, r3, #1
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d01e      	beq.n	800f128 <refr_area_part+0x234>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800f0ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d103      	bne.n	800f0f8 <refr_area_part+0x204>
 800f0f0:	4b0c      	ldr	r3, [pc, #48]	; (800f124 <refr_area_part+0x230>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	691b      	ldr	r3, [r3, #16]
 800f0f6:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800f0f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 f8b4 	bl	800f268 <refr_obj_and_children>

        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800f100:	4b08      	ldr	r3, [pc, #32]	; (800f124 <refr_area_part+0x230>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	695b      	ldr	r3, [r3, #20]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d029      	beq.n	800f15e <refr_area_part+0x26a>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800f10a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d103      	bne.n	800f118 <refr_area_part+0x224>
 800f110:	4b04      	ldr	r3, [pc, #16]	; (800f124 <refr_area_part+0x230>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	695b      	ldr	r3, [r3, #20]
 800f116:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800f118:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 f8a4 	bl	800f268 <refr_obj_and_children>
 800f120:	e01d      	b.n	800f15e <refr_area_part+0x26a>
 800f122:	bf00      	nop
 800f124:	20000710 	.word	0x20000710
        }
    }
    else {
        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 800f128:	4b1b      	ldr	r3, [pc, #108]	; (800f198 <refr_area_part+0x2a4>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	695b      	ldr	r3, [r3, #20]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00a      	beq.n	800f148 <refr_area_part+0x254>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800f132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f134:	2b00      	cmp	r3, #0
 800f136:	d103      	bne.n	800f140 <refr_area_part+0x24c>
 800f138:	4b17      	ldr	r3, [pc, #92]	; (800f198 <refr_area_part+0x2a4>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	695b      	ldr	r3, [r3, #20]
 800f13e:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800f140:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f890 	bl	800f268 <refr_obj_and_children>
        }

        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800f148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d103      	bne.n	800f156 <refr_area_part+0x262>
 800f14e:	4b12      	ldr	r3, [pc, #72]	; (800f198 <refr_area_part+0x2a4>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	691b      	ldr	r3, [r3, #16]
 800f154:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 800f156:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 f885 	bl	800f268 <refr_obj_and_children>
    }

    /*Also refresh top and sys layer unconditionally*/
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800f15e:	4b0e      	ldr	r3, [pc, #56]	; (800f198 <refr_area_part+0x2a4>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	4618      	mov	r0, r3
 800f164:	f7f5 fa10 	bl	8004588 <lv_disp_get_layer_top>
 800f168:	4603      	mov	r3, r0
 800f16a:	4619      	mov	r1, r3
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 f87b 	bl	800f268 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800f172:	4b09      	ldr	r3, [pc, #36]	; (800f198 <refr_area_part+0x2a4>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4618      	mov	r0, r3
 800f178:	f7f5 fa1b 	bl	80045b2 <lv_disp_get_layer_sys>
 800f17c:	4603      	mov	r3, r0
 800f17e:	4619      	mov	r1, r3
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 f871 	bl	800f268 <refr_obj_and_children>

    draw_buf_flush(disp_refr);
 800f186:	4b04      	ldr	r3, [pc, #16]	; (800f198 <refr_area_part+0x2a4>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f000 ff22 	bl	800ffd4 <draw_buf_flush>
}
 800f190:	bf00      	nop
 800f192:	376c      	adds	r7, #108	; 0x6c
 800f194:	46bd      	mov	sp, r7
 800f196:	bd90      	pop	{r4, r7, pc}
 800f198:	20000710 	.word	0x20000710

0800f19c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b088      	sub	sp, #32
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	61fb      	str	r3, [r7, #28]

    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	3314      	adds	r3, #20
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f011 fde2 	bl	8020d7c <_lv_area_is_in>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	f083 0301 	eor.w	r3, r3, #1
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <lv_refr_get_top_obj+0x2c>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e04a      	b.n	800f25e <lv_refr_get_top_obj+0xc2>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800f1c8:	2101      	movs	r1, #1
 800f1ca:	6838      	ldr	r0, [r7, #0]
 800f1cc:	f7f6 ff7f 	bl	80060ce <lv_obj_has_flag>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d001      	beq.n	800f1da <lv_refr_get_top_obj+0x3e>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	e041      	b.n	800f25e <lv_refr_get_top_obj+0xc2>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800f1da:	6838      	ldr	r0, [r7, #0]
 800f1dc:	f7f9 f870 	bl	80082c0 <_lv_obj_get_layer_type>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <lv_refr_get_top_obj+0x4e>
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	e039      	b.n	800f25e <lv_refr_get_top_obj+0xc2>

    /*If this object is fully cover the draw area then check the children too*/
    lv_cover_check_info_t info;
    info.res = LV_COVER_RES_COVER;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	723b      	strb	r3, [r7, #8]
    info.area = area_p;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	60fb      	str	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800f1f2:	f107 0308 	add.w	r3, r7, #8
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	2112      	movs	r1, #18
 800f1fa:	6838      	ldr	r0, [r7, #0]
 800f1fc:	f7f5 fd8e 	bl	8004d1c <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800f200:	7a3b      	ldrb	r3, [r7, #8]
 800f202:	2b02      	cmp	r3, #2
 800f204:	d101      	bne.n	800f20a <lv_refr_get_top_obj+0x6e>
 800f206:	2300      	movs	r3, #0
 800f208:	e029      	b.n	800f25e <lv_refr_get_top_obj+0xc2>

    int32_t i;
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800f20a:	6838      	ldr	r0, [r7, #0]
 800f20c:	f7ff f808 	bl	800e220 <lv_obj_get_child_cnt>
 800f210:	4603      	mov	r3, r0
 800f212:	617b      	str	r3, [r7, #20]
    for(i = child_cnt - 1; i >= 0; i--) {
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	3b01      	subs	r3, #1
 800f218:	61bb      	str	r3, [r7, #24]
 800f21a:	e012      	b.n	800f242 <lv_refr_get_top_obj+0xa6>
        lv_obj_t * child = obj->spec_attr->children[i];
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4413      	add	r3, r2
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	613b      	str	r3, [r7, #16]
        found_p = lv_refr_get_top_obj(area_p, child);
 800f22c:	6939      	ldr	r1, [r7, #16]
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f7ff ffb4 	bl	800f19c <lv_refr_get_top_obj>
 800f234:	61f8      	str	r0, [r7, #28]

        /*If a children is ok then break*/
        if(found_p != NULL) {
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d106      	bne.n	800f24a <lv_refr_get_top_obj+0xae>
    for(i = child_cnt - 1; i >= 0; i--) {
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	3b01      	subs	r3, #1
 800f240:	61bb      	str	r3, [r7, #24]
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	2b00      	cmp	r3, #0
 800f246:	dae9      	bge.n	800f21c <lv_refr_get_top_obj+0x80>
 800f248:	e000      	b.n	800f24c <lv_refr_get_top_obj+0xb0>
            break;
 800f24a:	bf00      	nop
        }
    }

    /*If no better children use this object*/
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d104      	bne.n	800f25c <lv_refr_get_top_obj+0xc0>
 800f252:	7a3b      	ldrb	r3, [r7, #8]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d101      	bne.n	800f25c <lv_refr_get_top_obj+0xc0>
        found_p = obj;
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	61fb      	str	r3, [r7, #28]
    }

    return found_p;
 800f25c:	69fb      	ldr	r3, [r7, #28]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3720      	adds	r7, #32
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
	...

0800f268 <refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void refr_obj_and_children(lv_draw_ctx_t * draw_ctx, lv_obj_t * top_obj)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b088      	sub	sp, #32
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
    /*Normally always will be a top_obj (at least the screen)
     *but in special cases (e.g. if the screen has alpha) it won't.
     *In this case use the screen directly*/
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d105      	bne.n	800f284 <refr_obj_and_children+0x1c>
 800f278:	4b2c      	ldr	r3, [pc, #176]	; (800f32c <refr_obj_and_children+0xc4>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7f5 f949 	bl	8004514 <lv_disp_get_scr_act>
 800f282:	6038      	str	r0, [r7, #0]
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d04c      	beq.n	800f324 <refr_obj_and_children+0xbc>

    /*Refresh the top object and its children*/
    refr_obj(draw_ctx, top_obj);
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 f931 	bl	800f4f4 <refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj*/
    lv_obj_t * parent;
    lv_obj_t * border_p = top_obj;
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	61bb      	str	r3, [r7, #24]

    parent = lv_obj_get_parent(top_obj);
 800f296:	6838      	ldr	r0, [r7, #0]
 800f298:	f7fe ff7e 	bl	800e198 <lv_obj_get_parent>
 800f29c:	61f8      	str	r0, [r7, #28]

    /*Do until not reach the screen*/
    while(parent != NULL) {
 800f29e:	e03d      	b.n	800f31c <refr_obj_and_children+0xb4>
        bool go = false;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	75fb      	strb	r3, [r7, #23]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800f2a4:	69f8      	ldr	r0, [r7, #28]
 800f2a6:	f7fe ffbb 	bl	800e220 <lv_obj_get_child_cnt>
 800f2aa:	60f8      	str	r0, [r7, #12]
        for(i = 0; i < child_cnt; i++) {
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	613b      	str	r3, [r7, #16]
 800f2b0:	e01b      	b.n	800f2ea <refr_obj_and_children+0x82>
            lv_obj_t * child = parent->spec_attr->children[i];
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	4413      	add	r3, r2
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	60bb      	str	r3, [r7, #8]
            if(!go) {
 800f2c2:	7dfb      	ldrb	r3, [r7, #23]
 800f2c4:	f083 0301 	eor.w	r3, r3, #1
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d006      	beq.n	800f2dc <refr_obj_and_children+0x74>
                if(child == border_p) go = true;
 800f2ce:	68ba      	ldr	r2, [r7, #8]
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d106      	bne.n	800f2e4 <refr_obj_and_children+0x7c>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	75fb      	strb	r3, [r7, #23]
 800f2da:	e003      	b.n	800f2e4 <refr_obj_and_children+0x7c>
            }
            else {
                /*Refresh the objects*/
                refr_obj(draw_ctx, child);
 800f2dc:	68b9      	ldr	r1, [r7, #8]
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 f908 	bl	800f4f4 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	613b      	str	r3, [r7, #16]
 800f2ea:	693a      	ldr	r2, [r7, #16]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d3df      	bcc.n	800f2b2 <refr_obj_and_children+0x4a>
            }
        }

        /*Call the post draw draw function of the parents of the to object*/
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	2117      	movs	r1, #23
 800f2f6:	69f8      	ldr	r0, [r7, #28]
 800f2f8:	f7f5 fd10 	bl	8004d1c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	2118      	movs	r1, #24
 800f300:	69f8      	ldr	r0, [r7, #28]
 800f302:	f7f5 fd0b 	bl	8004d1c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	2119      	movs	r1, #25
 800f30a:	69f8      	ldr	r0, [r7, #28]
 800f30c:	f7f5 fd06 	bl	8004d1c <lv_event_send>

        /*The new border will be the last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = parent;
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	61bb      	str	r3, [r7, #24]
        /*Go a level deeper*/
        parent = lv_obj_get_parent(parent);
 800f314:	69f8      	ldr	r0, [r7, #28]
 800f316:	f7fe ff3f 	bl	800e198 <lv_obj_get_parent>
 800f31a:	61f8      	str	r0, [r7, #28]
    while(parent != NULL) {
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1be      	bne.n	800f2a0 <refr_obj_and_children+0x38>
 800f322:	e000      	b.n	800f326 <refr_obj_and_children+0xbe>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800f324:	bf00      	nop
    }
}
 800f326:	3720      	adds	r7, #32
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	20000710 	.word	0x20000710

0800f330 <layer_get_area>:


static lv_res_t layer_get_area(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj, lv_layer_type_t layer_type,
                               lv_area_t * layer_area_out)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b090      	sub	sp, #64	; 0x40
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	603b      	str	r3, [r7, #0]
 800f33c:	4613      	mov	r3, r2
 800f33e:	71fb      	strb	r3, [r7, #7]
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800f340:	68b8      	ldr	r0, [r7, #8]
 800f342:	f7f8 ffa9 	bl	8008298 <_lv_obj_get_ext_draw_size>
 800f346:	4603      	mov	r3, r0
 800f348:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 800f34a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f34e:	4619      	mov	r1, r3
 800f350:	68b8      	ldr	r0, [r7, #8]
 800f352:	f7f9 fcde 	bl	8008d12 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800f356:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800f35a:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800f35e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f362:	4618      	mov	r0, r3
 800f364:	f011 faba 	bl	80208dc <lv_area_increase>

    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800f368:	79fb      	ldrb	r3, [r7, #7]
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	d147      	bne.n	800f3fe <layer_get_area+0xce>
        /*Get the transformed area and clip it to the current clip area.
         *This area needs to be updated on the screen.*/
        lv_area_t clip_coords_for_obj;
        lv_area_t tranf_coords = obj_coords_ext;
 800f36e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f372:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f37a:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800f37e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f382:	2300      	movs	r3, #0
 800f384:	2200      	movs	r2, #0
 800f386:	68b8      	ldr	r0, [r7, #8]
 800f388:	f7fa f9b8 	bl	80096fc <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6899      	ldr	r1, [r3, #8]
 800f390:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f398:	4618      	mov	r0, r3
 800f39a:	f011 fb0b 	bl	80209b4 <_lv_area_intersect>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	f083 0301 	eor.w	r3, r3, #1
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <layer_get_area+0x7e>
            return LV_RES_INV;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	e046      	b.n	800f43c <layer_get_area+0x10c>
        }

        /*Transform back (inverse) the transformed area.
         *It will tell which area of the non-transformed widget needs to be redrawn
         *in order to cover transformed area after transformation.*/
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800f3ae:	f107 031c 	add.w	r3, r7, #28
 800f3b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f3b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3ba:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800f3be:	f107 011c 	add.w	r1, r7, #28
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	68b8      	ldr	r0, [r7, #8]
 800f3c8:	f7fa f998 	bl	80096fc <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800f3cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f3d0:	f107 011c 	add.w	r1, r7, #28
 800f3d4:	f107 031c 	add.w	r3, r7, #28
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f011 faeb 	bl	80209b4 <_lv_area_intersect>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	f083 0301 	eor.w	r3, r3, #1
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <layer_get_area+0xbe>
            return LV_RES_INV;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	e026      	b.n	800f43c <layer_get_area+0x10c>
        }

        *layer_area_out = inverse_clip_coords_for_obj;
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	f107 031c 	add.w	r3, r7, #28
 800f3f6:	cb03      	ldmia	r3!, {r0, r1}
 800f3f8:	6010      	str	r0, [r2, #0]
 800f3fa:	6051      	str	r1, [r2, #4]
 800f3fc:	e01d      	b.n	800f43a <layer_get_area+0x10a>
    }
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800f3fe:	79fb      	ldrb	r3, [r7, #7]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d118      	bne.n	800f436 <layer_get_area+0x106>
        lv_area_t clip_coords_for_obj;
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6899      	ldr	r1, [r3, #8]
 800f408:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f40c:	f107 0314 	add.w	r3, r7, #20
 800f410:	4618      	mov	r0, r3
 800f412:	f011 facf 	bl	80209b4 <_lv_area_intersect>
 800f416:	4603      	mov	r3, r0
 800f418:	f083 0301 	eor.w	r3, r3, #1
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d001      	beq.n	800f426 <layer_get_area+0xf6>
            return LV_RES_INV;
 800f422:	2300      	movs	r3, #0
 800f424:	e00a      	b.n	800f43c <layer_get_area+0x10c>
        }
        *layer_area_out = clip_coords_for_obj;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	461a      	mov	r2, r3
 800f42a:	f107 0314 	add.w	r3, r7, #20
 800f42e:	cb03      	ldmia	r3!, {r0, r1}
 800f430:	6010      	str	r0, [r2, #0]
 800f432:	6051      	str	r1, [r2, #4]
 800f434:	e001      	b.n	800f43a <layer_get_area+0x10a>
    }
    else {
        LV_LOG_WARN("Unhandled intermediate layer type");
        return LV_RES_INV;
 800f436:	2300      	movs	r3, #0
 800f438:	e000      	b.n	800f43c <layer_get_area+0x10c>
    }

    return LV_RES_OK;
 800f43a:	2301      	movs	r3, #1
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3740      	adds	r7, #64	; 0x40
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <layer_alpha_test>:

static void layer_alpha_test(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b088      	sub	sp, #32
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	70fb      	strb	r3, [r7, #3]
    bool has_alpha;
    /*If globally the layer has alpha maybe this smaller section has not (e.g. not on a rounded corner)
     *If turns out that this section has no alpha renderer can choose faster algorithms*/
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800f452:	78fb      	ldrb	r3, [r7, #3]
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d031      	beq.n	800f4c0 <layer_alpha_test+0x7c>
        /*Test for alpha by assuming there is no alpha. If it fails, fall back to rendering with alpha*/
        has_alpha = true;
 800f45c:	2301      	movs	r3, #1
 800f45e:	77fb      	strb	r3, [r7, #31]
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f103 0008 	add.w	r0, r3, #8
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	3314      	adds	r3, #20
 800f46a:	2200      	movs	r2, #0
 800f46c:	4619      	mov	r1, r3
 800f46e:	f011 fc85 	bl	8020d7c <_lv_area_is_in>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d010      	beq.n	800f49a <layer_alpha_test+0x56>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800f478:	2300      	movs	r3, #0
 800f47a:	753b      	strb	r3, [r7, #20]
            info.area = &layer_ctx->area_act;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	3308      	adds	r3, #8
 800f480:	61bb      	str	r3, [r7, #24]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800f482:	f107 0314 	add.w	r3, r7, #20
 800f486:	461a      	mov	r2, r3
 800f488:	2112      	movs	r1, #18
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f7f5 fc46 	bl	8004d1c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800f490:	7d3b      	ldrb	r3, [r7, #20]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d101      	bne.n	800f49a <layer_alpha_test+0x56>
 800f496:	2300      	movs	r3, #0
 800f498:	77fb      	strb	r3, [r7, #31]
        }

        if(has_alpha) {
 800f49a:	7ffb      	ldrb	r3, [r7, #31]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d011      	beq.n	800f4c4 <layer_alpha_test+0x80>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	4413      	add	r3, r2
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	b21a      	sxth	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	81da      	strh	r2, [r3, #14]
 800f4be:	e001      	b.n	800f4c4 <layer_alpha_test+0x80>
        }
    }
    else {
        has_alpha = false;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	77fb      	strb	r3, [r7, #31]
    }

    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	dd04      	ble.n	800f4de <layer_alpha_test+0x9a>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	81da      	strh	r2, [r3, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800f4de:	7ffb      	ldrb	r3, [r7, #31]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	6879      	ldr	r1, [r7, #4]
 800f4e4:	68b8      	ldr	r0, [r7, #8]
 800f4e6:	f002 f9ef 	bl	80118c8 <lv_draw_layer_adjust>
}
 800f4ea:	bf00      	nop
 800f4ec:	3720      	adds	r7, #32
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
	...

0800f4f4 <refr_obj>:


void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 800f4f4:	b590      	push	{r4, r7, lr}
 800f4f6:	b08f      	sub	sp, #60	; 0x3c
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800f4fe:	2101      	movs	r1, #1
 800f500:	6838      	ldr	r0, [r7, #0]
 800f502:	f7f6 fde4 	bl	80060ce <lv_obj_has_flag>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f040 81b8 	bne.w	800f87e <refr_obj+0x38a>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800f50e:	6838      	ldr	r0, [r7, #0]
 800f510:	f7f8 fed6 	bl	80082c0 <_lv_obj_get_layer_type>
 800f514:	4603      	mov	r3, r0
 800f516:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800f51a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d104      	bne.n	800f52c <refr_obj+0x38>
        lv_obj_redraw(draw_ctx, obj);
 800f522:	6839      	ldr	r1, [r7, #0]
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff f860 	bl	800e5ea <lv_obj_redraw>
 800f52a:	e1af      	b.n	800f88c <refr_obj+0x398>
    }
    else {
        lv_opa_t opa = lv_obj_get_style_opa(obj, 0);
 800f52c:	2100      	movs	r1, #0
 800f52e:	6838      	ldr	r0, [r7, #0]
 800f530:	f7ff f830 	bl	800e594 <lv_obj_get_style_opa>
 800f534:	4603      	mov	r3, r0
 800f536:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(opa < LV_OPA_MIN) return;
 800f53a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f53e:	2b01      	cmp	r3, #1
 800f540:	f240 819f 	bls.w	800f882 <refr_obj+0x38e>

        lv_area_t layer_area_full;
        lv_res_t res = layer_get_area(draw_ctx, obj, layer_type, &layer_area_full);
 800f544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f548:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f7ff feee 	bl	800f330 <layer_get_area>
 800f554:	4603      	mov	r3, r0
 800f556:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        if(res != LV_RES_OK) return;
 800f55a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f55e:	2b01      	cmp	r3, #1
 800f560:	f040 8191 	bne.w	800f886 <refr_obj+0x392>

        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800f564:	2301      	movs	r3, #1
 800f566:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	f103 0114 	add.w	r1, r3, #20
 800f570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f574:	2200      	movs	r2, #0
 800f576:	4618      	mov	r0, r3
 800f578:	f011 fc00 	bl	8020d7c <_lv_area_is_in>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d014      	beq.n	800f5ac <refr_obj+0xb8>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 800f582:	2300      	movs	r3, #0
 800f584:	723b      	strb	r3, [r7, #8]
            info.area = &layer_area_full;
 800f586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f58a:	60fb      	str	r3, [r7, #12]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800f58c:	f107 0308 	add.w	r3, r7, #8
 800f590:	461a      	mov	r2, r3
 800f592:	2112      	movs	r1, #18
 800f594:	6838      	ldr	r0, [r7, #0]
 800f596:	f7f5 fbc1 	bl	8004d1c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800f59a:	7a3b      	ldrb	r3, [r7, #8]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d105      	bne.n	800f5ac <refr_obj+0xb8>
 800f5a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5a4:	f023 0301 	bic.w	r3, r3, #1
 800f5a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800f5ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d105      	bne.n	800f5c0 <refr_obj+0xcc>
 800f5b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5b8:	f043 0302 	orr.w	r3, r3, #2
 800f5bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800f5c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f5c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f002 f926 	bl	801181c <lv_draw_layer_create>
 800f5d0:	6338      	str	r0, [r7, #48]	; 0x30
        if(layer_ctx == NULL) {
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f000 8158 	beq.w	800f88a <refr_obj+0x396>
            LV_LOG_WARN("Couldn't create a new layer context");
            return;
        }
        lv_point_t pivot = {
            .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 800f5da:	2100      	movs	r1, #0
 800f5dc:	6838      	ldr	r0, [r7, #0]
 800f5de:	f7fe ffb5 	bl	800e54c <lv_obj_get_style_transform_pivot_x>
 800f5e2:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800f5e4:	84bb      	strh	r3, [r7, #36]	; 0x24
            .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	6838      	ldr	r0, [r7, #0]
 800f5ea:	f7fe ffc1 	bl	800e570 <lv_obj_get_style_transform_pivot_y>
 800f5ee:	4603      	mov	r3, r0
        lv_point_t pivot = {
 800f5f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        };

        if(LV_COORD_IS_PCT(pivot.x)) {
 800f5f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f5fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f600:	d12d      	bne.n	800f65e <refr_obj+0x16a>
 800f602:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f606:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f60a:	b21b      	sxth	r3, r3
 800f60c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f610:	dc25      	bgt.n	800f65e <refr_obj+0x16a>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800f612:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f616:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f61a:	b21b      	sxth	r3, r3
 800f61c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f620:	dd07      	ble.n	800f632 <refr_obj+0x13e>
 800f622:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f626:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f62a:	b21b      	sxth	r3, r3
 800f62c:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800f630:	e005      	b.n	800f63e <refr_obj+0x14a>
 800f632:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f636:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f63a:	b21b      	sxth	r3, r3
 800f63c:	461c      	mov	r4, r3
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	3314      	adds	r3, #20
 800f642:	4618      	mov	r0, r3
 800f644:	f7fe ff30 	bl	800e4a8 <lv_area_get_width>
 800f648:	4603      	mov	r3, r0
 800f64a:	fb04 f303 	mul.w	r3, r4, r3
 800f64e:	4a91      	ldr	r2, [pc, #580]	; (800f894 <refr_obj+0x3a0>)
 800f650:	fb82 1203 	smull	r1, r2, r2, r3
 800f654:	1152      	asrs	r2, r2, #5
 800f656:	17db      	asrs	r3, r3, #31
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	b21b      	sxth	r3, r3
 800f65c:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        if(LV_COORD_IS_PCT(pivot.y)) {
 800f65e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f662:	b29b      	uxth	r3, r3
 800f664:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f66c:	d12d      	bne.n	800f6ca <refr_obj+0x1d6>
 800f66e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f672:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f676:	b21b      	sxth	r3, r3
 800f678:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f67c:	dc25      	bgt.n	800f6ca <refr_obj+0x1d6>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800f67e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f682:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f686:	b21b      	sxth	r3, r3
 800f688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f68c:	dd07      	ble.n	800f69e <refr_obj+0x1aa>
 800f68e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f692:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f696:	b21b      	sxth	r3, r3
 800f698:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800f69c:	e005      	b.n	800f6aa <refr_obj+0x1b6>
 800f69e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f6a2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800f6a6:	b21b      	sxth	r3, r3
 800f6a8:	461c      	mov	r4, r3
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	3314      	adds	r3, #20
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fe ff11 	bl	800e4d6 <lv_area_get_height>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	fb04 f303 	mul.w	r3, r4, r3
 800f6ba:	4a76      	ldr	r2, [pc, #472]	; (800f894 <refr_obj+0x3a0>)
 800f6bc:	fb82 1203 	smull	r1, r2, r2, r3
 800f6c0:	1152      	asrs	r2, r2, #5
 800f6c2:	17db      	asrs	r3, r3, #31
 800f6c4:	1ad3      	subs	r3, r2, r3
 800f6c6:	b21b      	sxth	r3, r3
 800f6c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        lv_draw_img_dsc_t draw_dsc;
        lv_draw_img_dsc_init(&draw_dsc);
 800f6ca:	f107 0310 	add.w	r3, r7, #16
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f000 fe71 	bl	80103b6 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800f6d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800f6d8:	76bb      	strb	r3, [r7, #26]
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800f6da:	2100      	movs	r1, #0
 800f6dc:	6838      	ldr	r0, [r7, #0]
 800f6de:	f7fe ff23 	bl	800e528 <lv_obj_get_style_transform_angle>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	823b      	strh	r3, [r7, #16]
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800f6e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f6ea:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800f6ee:	dd08      	ble.n	800f702 <refr_obj+0x20e>
 800f6f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	b21b      	sxth	r3, r3
 800f6fe:	823b      	strh	r3, [r7, #16]
 800f700:	e00b      	b.n	800f71a <refr_obj+0x226>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800f702:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f706:	2b00      	cmp	r3, #0
 800f708:	da07      	bge.n	800f71a <refr_obj+0x226>
 800f70a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800f714:	b29b      	uxth	r3, r3
 800f716:	b21b      	sxth	r3, r3
 800f718:	823b      	strh	r3, [r7, #16]

        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800f71a:	2100      	movs	r1, #0
 800f71c:	6838      	ldr	r0, [r7, #0]
 800f71e:	f7fe fef1 	bl	800e504 <lv_obj_get_style_transform_zoom>
 800f722:	4603      	mov	r3, r0
 800f724:	b29b      	uxth	r3, r3
 800f726:	827b      	strh	r3, [r7, #18]
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800f728:	2100      	movs	r1, #0
 800f72a:	6838      	ldr	r0, [r7, #0]
 800f72c:	f7fe ff44 	bl	800e5b8 <lv_obj_get_style_blend_mode>
 800f730:	4603      	mov	r3, r0
 800f732:	f003 030f 	and.w	r3, r3, #15
 800f736:	b2da      	uxtb	r2, r3
 800f738:	7efb      	ldrb	r3, [r7, #27]
 800f73a:	f362 0303 	bfi	r3, r2, #0, #4
 800f73e:	76fb      	strb	r3, [r7, #27]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800f740:	4b55      	ldr	r3, [pc, #340]	; (800f898 <refr_obj+0x3a4>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	7c1b      	ldrb	r3, [r3, #16]
 800f748:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f74c:	b2da      	uxtb	r2, r3
 800f74e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f752:	f362 0300 	bfi	r3, r2, #0, #1
 800f756:	f887 3020 	strb.w	r3, [r7, #32]

        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800f75a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f75e:	f003 0302 	and.w	r3, r3, #2
 800f762:	2b00      	cmp	r3, #0
 800f764:	d07d      	beq.n	800f862 <refr_obj+0x36e>
            layer_ctx->area_act = layer_ctx->area_full;
 800f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f76a:	3308      	adds	r3, #8
 800f76c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f770:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800f774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f776:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f782:	b29b      	uxth	r3, r3
 800f784:	4413      	add	r3, r2
 800f786:	b29b      	uxth	r3, r3
 800f788:	3b01      	subs	r3, #1
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	b21a      	sxth	r2, r3
 800f78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f790:	81da      	strh	r2, [r3, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	dd5f      	ble.n	800f862 <refr_obj+0x36e>
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7aa:	81da      	strh	r2, [r3, #14]
        }

        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800f7ac:	e059      	b.n	800f862 <refr_obj+0x36e>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800f7ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7b2:	f003 0302 	and.w	r3, r3, #2
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d006      	beq.n	800f7c8 <refr_obj+0x2d4>
                layer_alpha_test(obj, draw_ctx, layer_ctx, flags);
 800f7ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7c0:	6879      	ldr	r1, [r7, #4]
 800f7c2:	6838      	ldr	r0, [r7, #0]
 800f7c4:	f7ff fe3e 	bl	800f444 <layer_alpha_test>
            }

            lv_obj_redraw(draw_ctx, obj);
 800f7c8:	6839      	ldr	r1, [r7, #0]
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f7fe ff0d 	bl	800e5ea <lv_obj_redraw>

            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	4413      	add	r3, r2
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	1ad3      	subs	r3, r2, r3
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	b21b      	sxth	r3, r3
 800f7f2:	82bb      	strh	r3, [r7, #20]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f800:	b29b      	uxth	r3, r3
 800f802:	4413      	add	r3, r2
 800f804:	b29a      	uxth	r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f80e:	b29b      	uxth	r3, r3
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	b29b      	uxth	r3, r3
 800f814:	b21b      	sxth	r3, r3
 800f816:	82fb      	strh	r3, [r7, #22]

            /*With LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE it should also go the next chunk*/
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800f818:	f107 0310 	add.w	r3, r7, #16
 800f81c:	461a      	mov	r2, r3
 800f81e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f002 f866 	bl	80118f2 <lv_draw_layer_blend>

            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800f826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f82a:	f003 0302 	and.w	r3, r3, #2
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d01f      	beq.n	800f872 <refr_obj+0x37e>

            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f834:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f838:	b29b      	uxth	r3, r3
 800f83a:	3301      	adds	r3, #1
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	b21a      	sxth	r2, r3
 800f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f842:	815a      	strh	r2, [r3, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800f844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f846:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f852:	b29b      	uxth	r3, r3
 800f854:	4413      	add	r3, r2
 800f856:	b29b      	uxth	r3, r3
 800f858:	3b01      	subs	r3, #1
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	b21a      	sxth	r2, r3
 800f85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f860:	81da      	strh	r2, [r3, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f868:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800f86c:	429a      	cmp	r2, r3
 800f86e:	dd9e      	ble.n	800f7ae <refr_obj+0x2ba>
 800f870:	e000      	b.n	800f874 <refr_obj+0x380>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800f872:	bf00      	nop
        }

        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800f874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f002 f84f 	bl	801191a <lv_draw_layer_destroy>
 800f87c:	e006      	b.n	800f88c <refr_obj+0x398>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800f87e:	bf00      	nop
 800f880:	e004      	b.n	800f88c <refr_obj+0x398>
        if(opa < LV_OPA_MIN) return;
 800f882:	bf00      	nop
 800f884:	e002      	b.n	800f88c <refr_obj+0x398>
        if(res != LV_RES_OK) return;
 800f886:	bf00      	nop
 800f888:	e000      	b.n	800f88c <refr_obj+0x398>
            return;
 800f88a:	bf00      	nop
    }
}
 800f88c:	373c      	adds	r7, #60	; 0x3c
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd90      	pop	{r4, r7, pc}
 800f892:	bf00      	nop
 800f894:	51eb851f 	.word	0x51eb851f
 800f898:	20000710 	.word	0x20000710

0800f89c <get_max_row>:


static uint32_t get_max_row(lv_disp_t * disp, lv_coord_t area_w, lv_coord_t area_h)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	807b      	strh	r3, [r7, #2]
 800f8a8:	4613      	mov	r3, r2
 800f8aa:	803b      	strh	r3, [r7, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	68da      	ldr	r2, [r3, #12]
 800f8b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8bc:	617b      	str	r3, [r7, #20]

    if(max_row > area_h) max_row = area_h;
 800f8be:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f8c2:	697a      	ldr	r2, [r7, #20]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	dd02      	ble.n	800f8ce <get_max_row+0x32>
 800f8c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f8cc:	617b      	str	r3, [r7, #20]

    /*Round down the lines of draw_buf if rounding is added*/
    if(disp_refr->driver->rounder_cb) {
 800f8ce:	4b21      	ldr	r3, [pc, #132]	; (800f954 <get_max_row+0xb8>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	699b      	ldr	r3, [r3, #24]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d037      	beq.n	800f94a <get_max_row+0xae>
        lv_area_t tmp;
        tmp.x1 = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	813b      	strh	r3, [r7, #8]
        tmp.x2 = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	81bb      	strh	r3, [r7, #12]
        tmp.y1 = 0;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	817b      	strh	r3, [r7, #10]

        lv_coord_t h_tmp = max_row;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	827b      	strh	r3, [r7, #18]
        do {
            tmp.y2 = h_tmp - 1;
 800f8ea:	8a7b      	ldrh	r3, [r7, #18]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	b21b      	sxth	r3, r3
 800f8f2:	81fb      	strh	r3, [r7, #14]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800f8f4:	4b17      	ldr	r3, [pc, #92]	; (800f954 <get_max_row+0xb8>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	699b      	ldr	r3, [r3, #24]
 800f8fc:	4a15      	ldr	r2, [pc, #84]	; (800f954 <get_max_row+0xb8>)
 800f8fe:	6812      	ldr	r2, [r2, #0]
 800f900:	6812      	ldr	r2, [r2, #0]
 800f902:	f107 0108 	add.w	r1, r7, #8
 800f906:	4610      	mov	r0, r2
 800f908:	4798      	blx	r3

            /*If this height fits into `max_row` then fine*/
            if(lv_area_get_height(&tmp) <= max_row) break;
 800f90a:	f107 0308 	add.w	r3, r7, #8
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fe fde1 	bl	800e4d6 <lv_area_get_height>
 800f914:	4603      	mov	r3, r0
 800f916:	461a      	mov	r2, r3
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	4293      	cmp	r3, r2
 800f91c:	da0a      	bge.n	800f934 <get_max_row+0x98>

            /*Decrement the height of the area until it fits into `max_row` after rounding*/
            h_tmp--;
 800f91e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f922:	b29b      	uxth	r3, r3
 800f924:	3b01      	subs	r3, #1
 800f926:	b29b      	uxth	r3, r3
 800f928:	827b      	strh	r3, [r7, #18]
        } while(h_tmp > 0);
 800f92a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	dcdb      	bgt.n	800f8ea <get_max_row+0x4e>
 800f932:	e000      	b.n	800f936 <get_max_row+0x9a>
            if(lv_area_get_height(&tmp) <= max_row) break;
 800f934:	bf00      	nop

        if(h_tmp <= 0) {
 800f936:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	dc01      	bgt.n	800f942 <get_max_row+0xa6>
            LV_LOG_WARN("Can't set draw_buf height using the round function. (Wrong round_cb or to "
                        "small draw_buf)");
            return 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	e004      	b.n	800f94c <get_max_row+0xb0>
        }
        else {
            max_row = tmp.y2 + 1;
 800f942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f946:	3301      	adds	r3, #1
 800f948:	617b      	str	r3, [r7, #20]
        }
    }

    return max_row;
 800f94a:	697b      	ldr	r3, [r7, #20]
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	20000710 	.word	0x20000710

0800f958 <draw_buf_rotate_180>:

static void draw_buf_rotate_180(lv_disp_drv_t * drv, lv_area_t * area, lv_color_t * color_p)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b08a      	sub	sp, #40	; 0x28
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
    lv_coord_t area_w = lv_area_get_width(area);
 800f964:	68b8      	ldr	r0, [r7, #8]
 800f966:	f7fe fd9f 	bl	800e4a8 <lv_area_get_width>
 800f96a:	4603      	mov	r3, r0
 800f96c:	83fb      	strh	r3, [r7, #30]
    lv_coord_t area_h = lv_area_get_height(area);
 800f96e:	68b8      	ldr	r0, [r7, #8]
 800f970:	f7fe fdb1 	bl	800e4d6 <lv_area_get_height>
 800f974:	4603      	mov	r3, r0
 800f976:	83bb      	strh	r3, [r7, #28]
    uint32_t total = area_w * area_h;
 800f978:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f97c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f980:	fb02 f303 	mul.w	r3, r2, r3
 800f984:	61bb      	str	r3, [r7, #24]
    /*Swap the beginning and end values*/
    lv_color_t tmp;
    uint32_t i = total - 1, j = 0;
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	3b01      	subs	r3, #1
 800f98a:	627b      	str	r3, [r7, #36]	; 0x24
 800f98c:	2300      	movs	r3, #0
 800f98e:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800f990:	e017      	b.n	800f9c2 <draw_buf_rotate_180+0x6a>
        tmp = color_p[i];
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f996:	4413      	add	r3, r2
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	753b      	strb	r3, [r7, #20]
        color_p[i] = color_p[j];
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	6a3b      	ldr	r3, [r7, #32]
 800f9a0:	441a      	add	r2, r3
 800f9a2:	6879      	ldr	r1, [r7, #4]
 800f9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a6:	440b      	add	r3, r1
 800f9a8:	7812      	ldrb	r2, [r2, #0]
 800f9aa:	701a      	strb	r2, [r3, #0]
        color_p[j] = tmp;
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	6a3b      	ldr	r3, [r7, #32]
 800f9b0:	4413      	add	r3, r2
 800f9b2:	7d3a      	ldrb	r2, [r7, #20]
 800f9b4:	701a      	strb	r2, [r3, #0]
        i--;
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b8:	3b01      	subs	r3, #1
 800f9ba:	627b      	str	r3, [r7, #36]	; 0x24
        j++;
 800f9bc:	6a3b      	ldr	r3, [r7, #32]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	623b      	str	r3, [r7, #32]
    while(i > j) {
 800f9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9c4:	6a3b      	ldr	r3, [r7, #32]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d8e3      	bhi.n	800f992 <draw_buf_rotate_180+0x3a>
    }
    lv_coord_t tmp_coord;
    tmp_coord = area->y2;
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	88db      	ldrh	r3, [r3, #6]
 800f9ce:	82fb      	strh	r3, [r7, #22]
    area->y2 = drv->ver_res - area->y1 - 1;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	3b01      	subs	r3, #1
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	b21a      	sxth	r2, r3
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	80da      	strh	r2, [r3, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f9f4:	b29a      	uxth	r2, r3
 800f9f6:	8afb      	ldrh	r3, [r7, #22]
 800f9f8:	1ad3      	subs	r3, r2, r3
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	b21a      	sxth	r2, r3
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	805a      	strh	r2, [r3, #2]
    tmp_coord = area->x2;
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	889b      	ldrh	r3, [r3, #4]
 800fa0a:	82fb      	strh	r3, [r7, #22]
    area->x2 = drv->hor_res - area->x1 - 1;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	3b01      	subs	r3, #1
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	b21a      	sxth	r2, r3
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	809a      	strh	r2, [r3, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	8afb      	ldrh	r3, [r7, #22]
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	b21a      	sxth	r2, r3
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	801a      	strh	r2, [r3, #0]
}
 800fa42:	bf00      	nop
 800fa44:	3728      	adds	r7, #40	; 0x28
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <draw_buf_rotate_90>:

static LV_ATTRIBUTE_FAST_MEM void draw_buf_rotate_90(bool invert_i, lv_coord_t area_w, lv_coord_t area_h,
                                                     lv_color_t * orig_color_p, lv_color_t * rot_buf)
{
 800fa4a:	b480      	push	{r7}
 800fa4c:	b08b      	sub	sp, #44	; 0x2c
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	607b      	str	r3, [r7, #4]
 800fa52:	4603      	mov	r3, r0
 800fa54:	73fb      	strb	r3, [r7, #15]
 800fa56:	460b      	mov	r3, r1
 800fa58:	81bb      	strh	r3, [r7, #12]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	817b      	strh	r3, [r7, #10]

    uint32_t invert = (area_w * area_h) - 1;
 800fa5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fa62:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800fa66:	fb02 f303 	mul.w	r3, r2, r3
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	61bb      	str	r3, [r7, #24]
    uint32_t initial_i = ((area_w - 1) * area_h);
 800fa6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fa72:	3b01      	subs	r3, #1
 800fa74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800fa78:	fb02 f303 	mul.w	r3, r2, r3
 800fa7c:	617b      	str	r3, [r7, #20]
    for(lv_coord_t y = 0; y < area_h; y++) {
 800fa7e:	2300      	movs	r3, #0
 800fa80:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fa82:	e036      	b.n	800faf2 <draw_buf_rotate_90+0xa8>
        uint32_t i = initial_i + y;
 800fa84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	623b      	str	r3, [r7, #32]
        if(invert_i)
 800fa8e:	7bfb      	ldrb	r3, [r7, #15]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d003      	beq.n	800fa9c <draw_buf_rotate_90+0x52>
            i = invert - i;
 800fa94:	69ba      	ldr	r2, [r7, #24]
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	1ad3      	subs	r3, r2, r3
 800fa9a:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	83fb      	strh	r3, [r7, #30]
 800faa0:	e01b      	b.n	800fada <draw_buf_rotate_90+0x90>
            rot_buf[i] = *(orig_color_p++);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	1c5a      	adds	r2, r3, #1
 800faa6:	607a      	str	r2, [r7, #4]
 800faa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800faaa:	6a3a      	ldr	r2, [r7, #32]
 800faac:	440a      	add	r2, r1
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	7013      	strb	r3, [r2, #0]
            if(invert_i)
 800fab2:	7bfb      	ldrb	r3, [r7, #15]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d005      	beq.n	800fac4 <draw_buf_rotate_90+0x7a>
                i += area_h;
 800fab8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fabc:	6a3a      	ldr	r2, [r7, #32]
 800fabe:	4413      	add	r3, r2
 800fac0:	623b      	str	r3, [r7, #32]
 800fac2:	e004      	b.n	800face <draw_buf_rotate_90+0x84>
            else
                i -= area_h;
 800fac4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fac8:	6a3a      	ldr	r2, [r7, #32]
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800face:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	3301      	adds	r3, #1
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	83fb      	strh	r3, [r7, #30]
 800fada:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fade:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	dbdd      	blt.n	800faa2 <draw_buf_rotate_90+0x58>
    for(lv_coord_t y = 0; y < area_h; y++) {
 800fae6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800faea:	b29b      	uxth	r3, r3
 800faec:	3301      	adds	r3, #1
 800faee:	b29b      	uxth	r3, r3
 800faf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800faf2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800faf6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	dbc2      	blt.n	800fa84 <draw_buf_rotate_90+0x3a>
        }
    }
}
 800fafe:	bf00      	nop
 800fb00:	bf00      	nop
 800fb02:	372c      	adds	r7, #44	; 0x2c
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <draw_buf_rotate4>:

/**
 * Helper function for draw_buf_rotate_90_sqr. Given a list of four numbers, rotate the entire list to the left.
 */
static inline void draw_buf_rotate4(lv_color_t * a, lv_color_t * b, lv_color_t * c, lv_color_t * d)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b087      	sub	sp, #28
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
 800fb18:	603b      	str	r3, [r7, #0]
    lv_color_t tmp;
    tmp = *a;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	753b      	strb	r3, [r7, #20]
    *a = *b;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	7812      	ldrb	r2, [r2, #0]
 800fb26:	701a      	strb	r2, [r3, #0]
    *b = *c;
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	7812      	ldrb	r2, [r2, #0]
 800fb2e:	701a      	strb	r2, [r3, #0]
    *c = *d;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	7812      	ldrb	r2, [r2, #0]
 800fb36:	701a      	strb	r2, [r3, #0]
    *d = tmp;
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	7d3a      	ldrb	r2, [r7, #20]
 800fb3c:	701a      	strb	r2, [r3, #0]
}
 800fb3e:	bf00      	nop
 800fb40:	371c      	adds	r7, #28
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr

0800fb4a <draw_buf_rotate_90_sqr>:
/**
 * Rotate a square image 90/270 degrees in place.
 * @note inspired by https://stackoverflow.com/a/43694906
 */
static void draw_buf_rotate_90_sqr(bool is_270, lv_coord_t w, lv_color_t * color_p)
{
 800fb4a:	b590      	push	{r4, r7, lr}
 800fb4c:	b085      	sub	sp, #20
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	4603      	mov	r3, r0
 800fb52:	603a      	str	r2, [r7, #0]
 800fb54:	71fb      	strb	r3, [r7, #7]
 800fb56:	460b      	mov	r3, r1
 800fb58:	80bb      	strh	r3, [r7, #4]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	81fb      	strh	r3, [r7, #14]
 800fb5e:	e092      	b.n	800fc86 <draw_buf_rotate_90_sqr+0x13c>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800fb60:	2300      	movs	r3, #0
 800fb62:	81bb      	strh	r3, [r7, #12]
 800fb64:	e07d      	b.n	800fc62 <draw_buf_rotate_90_sqr+0x118>
            lv_coord_t inv_i = (w - 1) - i;
 800fb66:	88ba      	ldrh	r2, [r7, #4]
 800fb68:	89fb      	ldrh	r3, [r7, #14]
 800fb6a:	1ad3      	subs	r3, r2, r3
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	817b      	strh	r3, [r7, #10]
            lv_coord_t inv_j = (w - 1) - j;
 800fb74:	88ba      	ldrh	r2, [r7, #4]
 800fb76:	89bb      	ldrh	r3, [r7, #12]
 800fb78:	1ad3      	subs	r3, r2, r3
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	813b      	strh	r3, [r7, #8]
            if(is_270) {
 800fb82:	79fb      	ldrb	r3, [r7, #7]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d033      	beq.n	800fbf0 <draw_buf_rotate_90_sqr+0xa6>
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800fb88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fb90:	fb03 f202 	mul.w	r2, r3, r2
 800fb94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fb98:	4413      	add	r3, r2
 800fb9a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	1898      	adds	r0, r3, r2
                    &color_p[inv_j * w + i],
 800fba0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fba4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fba8:	fb03 f202 	mul.w	r2, r3, r2
 800fbac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800fbb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fbbc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fbc0:	fb03 f202 	mul.w	r2, r3, r2
 800fbc4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fbc8:	4413      	add	r3, r2
 800fbca:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	189c      	adds	r4, r3, r2
                    &color_p[j * w + inv_i]
 800fbd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fbd4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fbd8:	fb03 f202 	mul.w	r2, r3, r2
 800fbdc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	4413      	add	r3, r2
 800fbe8:	4622      	mov	r2, r4
 800fbea:	f7ff ff8f 	bl	800fb0c <draw_buf_rotate4>
 800fbee:	e032      	b.n	800fc56 <draw_buf_rotate_90_sqr+0x10c>
                );
            }
            else {
                draw_buf_rotate4(
                    &color_p[i * w + j],
 800fbf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fbf4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fbf8:	fb03 f202 	mul.w	r2, r3, r2
 800fbfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fc00:	4413      	add	r3, r2
 800fc02:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	1898      	adds	r0, r3, r2
                    &color_p[j * w + inv_i],
 800fc08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fc0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fc10:	fb03 f202 	mul.w	r2, r3, r2
 800fc14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fc18:	4413      	add	r3, r2
 800fc1a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 800fc20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fc24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fc28:	fb03 f202 	mul.w	r2, r3, r2
 800fc2c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fc30:	4413      	add	r3, r2
 800fc32:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	189c      	adds	r4, r3, r2
                    &color_p[inv_j * w + i]
 800fc38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800fc3c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800fc40:	fb03 f202 	mul.w	r2, r3, r2
 800fc44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fc48:	4413      	add	r3, r2
 800fc4a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	4413      	add	r3, r2
 800fc50:	4622      	mov	r2, r4
 800fc52:	f7ff ff5b 	bl	800fb0c <draw_buf_rotate4>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800fc56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	81bb      	strh	r3, [r7, #12]
 800fc62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fc66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	da00      	bge.n	800fc72 <draw_buf_rotate_90_sqr+0x128>
 800fc70:	3301      	adds	r3, #1
 800fc72:	105b      	asrs	r3, r3, #1
 800fc74:	429a      	cmp	r2, r3
 800fc76:	f6ff af76 	blt.w	800fb66 <draw_buf_rotate_90_sqr+0x1c>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800fc7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	3301      	adds	r3, #1
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	81fb      	strh	r3, [r7, #14]
 800fc86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	da00      	bge.n	800fc90 <draw_buf_rotate_90_sqr+0x146>
 800fc8e:	3301      	adds	r3, #1
 800fc90:	105b      	asrs	r3, r3, #1
 800fc92:	b21b      	sxth	r3, r3
 800fc94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	f6ff af61 	blt.w	800fb60 <draw_buf_rotate_90_sqr+0x16>
                );
            }

        }
    }
}
 800fc9e:	bf00      	nop
 800fca0:	bf00      	nop
 800fca2:	3714      	adds	r7, #20
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd90      	pop	{r4, r7, pc}

0800fca8 <draw_buf_rotate>:

/**
 * Rotate the draw_buf to the display's native orientation.
 */
static void draw_buf_rotate(lv_area_t * area, lv_color_t * color_p)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b08a      	sub	sp, #40	; 0x28
 800fcac:	af02      	add	r7, sp, #8
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
    lv_disp_drv_t * drv = disp_refr->driver;
 800fcb2:	4b8e      	ldr	r3, [pc, #568]	; (800feec <draw_buf_rotate+0x244>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	617b      	str	r3, [r7, #20]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800fcba:	4b8c      	ldr	r3, [pc, #560]	; (800feec <draw_buf_rotate+0x244>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	7c1b      	ldrb	r3, [r3, #16]
 800fcc2:	f003 0302 	and.w	r3, r3, #2
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d007      	beq.n	800fcdc <draw_buf_rotate+0x34>
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	7c1b      	ldrb	r3, [r3, #16]
 800fcd0:	f003 0304 	and.w	r3, r3, #4
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f040 8178 	bne.w	800ffcc <draw_buf_rotate+0x324>
        LV_LOG_ERROR("cannot rotate a full refreshed display!");
        return;
    }
    if(drv->rotated == LV_DISP_ROT_180) {
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	7c1b      	ldrb	r3, [r3, #16]
 800fce0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2b20      	cmp	r3, #32
 800fce8:	d10a      	bne.n	800fd00 <draw_buf_rotate+0x58>
        draw_buf_rotate_180(drv, area, color_p);
 800fcea:	683a      	ldr	r2, [r7, #0]
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	6978      	ldr	r0, [r7, #20]
 800fcf0:	f7ff fe32 	bl	800f958 <draw_buf_rotate_180>
        call_flush_cb(drv, area, color_p);
 800fcf4:	683a      	ldr	r2, [r7, #0]
 800fcf6:	6879      	ldr	r1, [r7, #4]
 800fcf8:	6978      	ldr	r0, [r7, #20]
 800fcfa:	f000 fa2b 	bl	8010154 <call_flush_cb>
 800fcfe:	e166      	b.n	800ffce <draw_buf_rotate+0x326>
    }
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	7c1b      	ldrb	r3, [r3, #16]
 800fd04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	2b10      	cmp	r3, #16
 800fd0c:	d007      	beq.n	800fd1e <draw_buf_rotate+0x76>
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	7c1b      	ldrb	r3, [r3, #16]
 800fd12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	2b30      	cmp	r3, #48	; 0x30
 800fd1a:	f040 8158 	bne.w	800ffce <draw_buf_rotate+0x326>
        /*Allocate a temporary buffer to store rotated image*/
        lv_color_t * rot_buf = NULL;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	61fb      	str	r3, [r7, #28]
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800fd22:	4b72      	ldr	r3, [pc, #456]	; (800feec <draw_buf_rotate+0x244>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f010 f996 	bl	8020058 <lv_disp_get_draw_buf>
 800fd2c:	6138      	str	r0, [r7, #16]
        lv_coord_t area_w = lv_area_get_width(area);
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7fe fbba 	bl	800e4a8 <lv_area_get_width>
 800fd34:	4603      	mov	r3, r0
 800fd36:	81fb      	strh	r3, [r7, #14]
        lv_coord_t area_h = lv_area_get_height(area);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7fe fbcc 	bl	800e4d6 <lv_area_get_height>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	81bb      	strh	r3, [r7, #12]
        /*Determine the maximum number of rows that can be rotated at a time*/
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800fd42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fd46:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800fd4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd4e:	b21b      	sxth	r3, r3
 800fd50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fd54:	4293      	cmp	r3, r2
 800fd56:	bfa8      	it	ge
 800fd58:	4613      	movge	r3, r2
 800fd5a:	817b      	strh	r3, [r7, #10]
        lv_coord_t init_y_off;
        init_y_off = area->y1;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	885b      	ldrh	r3, [r3, #2]
 800fd60:	813b      	strh	r3, [r7, #8]
        if(drv->rotated == LV_DISP_ROT_90) {
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	7c1b      	ldrb	r3, [r3, #16]
 800fd66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	2b10      	cmp	r3, #16
 800fd6e:	d11b      	bne.n	800fda8 <draw_buf_rotate+0x100>
            area->y2 = drv->ver_res - area->x1 - 1;
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	1ad3      	subs	r3, r2, r3
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	3b01      	subs	r3, #1
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	b21a      	sxth	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	80da      	strh	r2, [r3, #6]
            area->y1 = area->y2 - area_w + 1;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	89fb      	ldrh	r3, [r7, #14]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	b21a      	sxth	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	805a      	strh	r2, [r3, #2]
 800fda6:	e010      	b.n	800fdca <draw_buf_rotate+0x122>
        }
        else {
            area->y1 = area->x1;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	805a      	strh	r2, [r3, #2]
            area->y2 = area->y1 + area_w - 1;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	89fb      	ldrh	r3, [r7, #14]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	b21a      	sxth	r2, r3
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	80da      	strh	r2, [r3, #6]
        }

        /*Rotate the screen in chunks, flushing after each one*/
        lv_coord_t row = 0;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800fdce:	e0ef      	b.n	800ffb0 <draw_buf_rotate+0x308>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800fdd0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fdd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fdd8:	1ad2      	subs	r2, r2, r3
 800fdda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fdde:	4293      	cmp	r3, r2
 800fde0:	bfa8      	it	ge
 800fde2:	4613      	movge	r3, r2
 800fde4:	833b      	strh	r3, [r7, #24]
            draw_buf->flushing = 1;
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	2201      	movs	r2, #1
 800fdea:	611a      	str	r2, [r3, #16]
            if((row == 0) && (area_h >= area_w)) {
 800fdec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d144      	bne.n	800fe7e <draw_buf_rotate+0x1d6>
 800fdf4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fdf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	db3e      	blt.n	800fe7e <draw_buf_rotate+0x1d6>
                /*Rotate the initial area as a square*/
                height = area_w;
 800fe00:	89fb      	ldrh	r3, [r7, #14]
 800fe02:	833b      	strh	r3, [r7, #24]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	7c1b      	ldrb	r3, [r3, #16]
 800fe08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	2b30      	cmp	r3, #48	; 0x30
 800fe10:	bf0c      	ite	eq
 800fe12:	2301      	moveq	r3, #1
 800fe14:	2300      	movne	r3, #0
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800fe1c:	683a      	ldr	r2, [r7, #0]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7ff fe93 	bl	800fb4a <draw_buf_rotate_90_sqr>
                if(drv->rotated == LV_DISP_ROT_90) {
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	7c1b      	ldrb	r3, [r3, #16]
 800fe28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	2b10      	cmp	r3, #16
 800fe30:	d10c      	bne.n	800fe4c <draw_buf_rotate+0x1a4>
                    area->x1 = init_y_off;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	893a      	ldrh	r2, [r7, #8]
 800fe36:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800fe38:	893a      	ldrh	r2, [r7, #8]
 800fe3a:	89fb      	ldrh	r3, [r7, #14]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	3b01      	subs	r3, #1
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	b21a      	sxth	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	809a      	strh	r2, [r3, #4]
                if(drv->rotated == LV_DISP_ROT_90) {
 800fe4a:	e06c      	b.n	800ff26 <draw_buf_rotate+0x27e>
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	893b      	ldrh	r3, [r7, #8]
 800fe56:	1ad3      	subs	r3, r2, r3
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	b21a      	sxth	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - area_w + 1;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	89fb      	ldrh	r3, [r7, #14]
 800fe6e:	1ad3      	subs	r3, r2, r3
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	3301      	adds	r3, #1
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	b21a      	sxth	r2, r3
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	801a      	strh	r2, [r3, #0]
                if(drv->rotated == LV_DISP_ROT_90) {
 800fe7c:	e053      	b.n	800ff26 <draw_buf_rotate+0x27e>
                }
            }
            else {
                /*Rotate other areas using a maximum buffer size*/
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800fe7e:	69fb      	ldr	r3, [r7, #28]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d104      	bne.n	800fe8e <draw_buf_rotate+0x1e6>
 800fe84:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800fe88:	f012 f93e 	bl	8022108 <lv_mem_buf_get>
 800fe8c:	61f8      	str	r0, [r7, #28]
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	7c1b      	ldrb	r3, [r3, #16]
 800fe92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	2b30      	cmp	r3, #48	; 0x30
 800fe9a:	bf0c      	ite	eq
 800fe9c:	2301      	moveq	r3, #1
 800fe9e:	2300      	movne	r3, #0
 800fea0:	b2d8      	uxtb	r0, r3
 800fea2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800fea6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800feaa:	69fb      	ldr	r3, [r7, #28]
 800feac:	9300      	str	r3, [sp, #0]
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	f7ff fdcb 	bl	800fa4a <draw_buf_rotate_90>

                if(drv->rotated == LV_DISP_ROT_90) {
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	7c1b      	ldrb	r3, [r3, #16]
 800feb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b10      	cmp	r3, #16
 800fec0:	d116      	bne.n	800fef0 <draw_buf_rotate+0x248>
                    area->x1 = init_y_off + row;
 800fec2:	893a      	ldrh	r2, [r7, #8]
 800fec4:	8b7b      	ldrh	r3, [r7, #26]
 800fec6:	4413      	add	r3, r2
 800fec8:	b29b      	uxth	r3, r3
 800feca:	b21a      	sxth	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + row + height - 1;
 800fed0:	893a      	ldrh	r2, [r7, #8]
 800fed2:	8b7b      	ldrh	r3, [r7, #26]
 800fed4:	4413      	add	r3, r2
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	8b3b      	ldrh	r3, [r7, #24]
 800feda:	4413      	add	r3, r2
 800fedc:	b29b      	uxth	r3, r3
 800fede:	3b01      	subs	r3, #1
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	b21a      	sxth	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	809a      	strh	r2, [r3, #4]
 800fee8:	e01d      	b.n	800ff26 <draw_buf_rotate+0x27e>
 800feea:	bf00      	nop
 800feec:	20000710 	.word	0x20000710
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	893b      	ldrh	r3, [r7, #8]
 800fefa:	1ad3      	subs	r3, r2, r3
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	8b7b      	ldrh	r3, [r7, #26]
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	3b01      	subs	r3, #1
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	b21a      	sxth	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - height + 1;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	8b3b      	ldrh	r3, [r7, #24]
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	b21a      	sxth	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	801a      	strh	r2, [r3, #0]
                }
            }

            /* The original part (chunk of the current area) were split into more parts here.
             * Set the original last_part flag on the last part of rotation. */
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800ff26:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ff2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ff2e:	441a      	add	r2, r3
 800ff30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	db11      	blt.n	800ff5c <draw_buf_rotate+0x2b4>
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00a      	beq.n	800ff5c <draw_buf_rotate+0x2b4>
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	699b      	ldr	r3, [r3, #24]
 800ff4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d003      	beq.n	800ff5c <draw_buf_rotate+0x2b4>
                draw_buf->flushing_last = 1;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	2201      	movs	r2, #1
 800ff58:	615a      	str	r2, [r3, #20]
 800ff5a:	e002      	b.n	800ff62 <draw_buf_rotate+0x2ba>
            }
            else {
                draw_buf->flushing_last = 0;
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	615a      	str	r2, [r3, #20]
            }

            /*Flush the completed area to the display*/
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d101      	bne.n	800ff6c <draw_buf_rotate+0x2c4>
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	e000      	b.n	800ff6e <draw_buf_rotate+0x2c6>
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	6879      	ldr	r1, [r7, #4]
 800ff72:	6978      	ldr	r0, [r7, #20]
 800ff74:	f000 f8ee 	bl	8010154 <call_flush_cb>
            /*FIXME: Rotation forces legacy behavior where rendering and flushing are done serially*/
            while(draw_buf->flushing) {
 800ff78:	e007      	b.n	800ff8a <draw_buf_rotate+0x2e2>
                if(drv->wait_cb) drv->wait_cb(drv);
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d003      	beq.n	800ff8a <draw_buf_rotate+0x2e2>
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff86:	6978      	ldr	r0, [r7, #20]
 800ff88:	4798      	blx	r3
            while(draw_buf->flushing) {
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	691b      	ldr	r3, [r3, #16]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1f3      	bne.n	800ff7a <draw_buf_rotate+0x2d2>
            }
            color_p += area_w * height;
 800ff92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff96:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ff9a:	fb02 f303 	mul.w	r3, r2, r3
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	603b      	str	r3, [r7, #0]
            row += height;
 800ffa6:	8b7a      	ldrh	r2, [r7, #26]
 800ffa8:	8b3b      	ldrh	r3, [r7, #24]
 800ffaa:	4413      	add	r3, r2
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 800ffb0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ffb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	f6ff af09 	blt.w	800fdd0 <draw_buf_rotate+0x128>
        }
        /*Free the allocated buffer at the end if necessary*/
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d004      	beq.n	800ffce <draw_buf_rotate+0x326>
 800ffc4:	69f8      	ldr	r0, [r7, #28]
 800ffc6:	f012 f94b 	bl	8022260 <lv_mem_buf_release>
 800ffca:	e000      	b.n	800ffce <draw_buf_rotate+0x326>
        return;
 800ffcc:	bf00      	nop
    }
}
 800ffce:	3720      	adds	r7, #32
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800ffdc:	4b5c      	ldr	r3, [pc, #368]	; (8010150 <draw_buf_flush+0x17c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f010 f839 	bl	8020058 <lv_disp_get_draw_buf>
 800ffe6:	6178      	str	r0, [r7, #20]

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffee:	613b      	str	r3, [r7, #16]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d003      	beq.n	8010000 <draw_buf_flush+0x2c>
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fffc:	6938      	ldr	r0, [r7, #16]
 800fffe:	4798      	blx	r3

    /* In partial double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	68da      	ldr	r2, [r3, #12]
 8010004:	4b52      	ldr	r3, [pc, #328]	; (8010150 <draw_buf_flush+0x17c>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801000e:	4619      	mov	r1, r3
 8010010:	4b4f      	ldr	r3, [pc, #316]	; (8010150 <draw_buf_flush+0x17c>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801001a:	fb01 f303 	mul.w	r3, r1, r3
 801001e:	429a      	cmp	r2, r3
 8010020:	bf0c      	ite	eq
 8010022:	2301      	moveq	r3, #1
 8010024:	2300      	movne	r3, #0
 8010026:	73fb      	strb	r3, [r7, #15]
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d01d      	beq.n	801006c <draw_buf_flush+0x98>
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d019      	beq.n	801006c <draw_buf_flush+0x98>
 8010038:	7bfb      	ldrb	r3, [r7, #15]
 801003a:	f083 0301 	eor.w	r3, r3, #1
 801003e:	b2db      	uxtb	r3, r3
 8010040:	2b00      	cmp	r3, #0
 8010042:	d013      	beq.n	801006c <draw_buf_flush+0x98>
        while(draw_buf->flushing) {
 8010044:	e00e      	b.n	8010064 <draw_buf_flush+0x90>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8010046:	4b42      	ldr	r3, [pc, #264]	; (8010150 <draw_buf_flush+0x17c>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801004e:	2b00      	cmp	r3, #0
 8010050:	d008      	beq.n	8010064 <draw_buf_flush+0x90>
 8010052:	4b3f      	ldr	r3, [pc, #252]	; (8010150 <draw_buf_flush+0x17c>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005a:	4a3d      	ldr	r2, [pc, #244]	; (8010150 <draw_buf_flush+0x17c>)
 801005c:	6812      	ldr	r2, [r2, #0]
 801005e:	6812      	ldr	r2, [r2, #0]
 8010060:	4610      	mov	r0, r2
 8010062:	4798      	blx	r3
        while(draw_buf->flushing) {
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	691b      	ldr	r3, [r3, #16]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d1ec      	bne.n	8010046 <draw_buf_flush+0x72>
        }
    }

    draw_buf->flushing = 1;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	2201      	movs	r2, #1
 8010070:	611a      	str	r2, [r3, #16]

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8010072:	4b37      	ldr	r3, [pc, #220]	; (8010150 <draw_buf_flush+0x17c>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	699b      	ldr	r3, [r3, #24]
 801007c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010080:	b2db      	uxtb	r3, r3
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00d      	beq.n	80100a2 <draw_buf_flush+0xce>
 8010086:	4b32      	ldr	r3, [pc, #200]	; (8010150 <draw_buf_flush+0x17c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	699b      	ldr	r3, [r3, #24]
 8010090:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010094:	b2db      	uxtb	r3, r3
 8010096:	2b00      	cmp	r3, #0
 8010098:	d003      	beq.n	80100a2 <draw_buf_flush+0xce>
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	2201      	movs	r2, #1
 801009e:	615a      	str	r2, [r3, #20]
 80100a0:	e002      	b.n	80100a8 <draw_buf_flush+0xd4>
    else draw_buf->flushing_last = 0;
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	2200      	movs	r2, #0
 80100a6:	615a      	str	r2, [r3, #20]

    bool flushing_last = draw_buf->flushing_last;
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	695b      	ldr	r3, [r3, #20]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	bf14      	ite	ne
 80100b0:	2301      	movne	r3, #1
 80100b2:	2300      	moveq	r3, #0
 80100b4:	73bb      	strb	r3, [r7, #14]

    if(disp->driver->flush_cb) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	695b      	ldr	r3, [r3, #20]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d021      	beq.n	8010104 <draw_buf_flush+0x130>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	7c1b      	ldrb	r3, [r3, #16]
 80100c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d010      	beq.n	80100f2 <draw_buf_flush+0x11e>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	7c1b      	ldrb	r3, [r3, #16]
 80100d6:	f003 0304 	and.w	r3, r3, #4
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d008      	beq.n	80100f2 <draw_buf_flush+0x11e>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	685a      	ldr	r2, [r3, #4]
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4619      	mov	r1, r3
 80100ea:	4610      	mov	r0, r2
 80100ec:	f7ff fddc 	bl	800fca8 <draw_buf_rotate>
 80100f0:	e008      	b.n	8010104 <draw_buf_flush+0x130>
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6818      	ldr	r0, [r3, #0]
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	6859      	ldr	r1, [r3, #4]
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	461a      	mov	r2, r3
 8010100:	f000 f828 	bl	8010154 <call_flush_cb>
        }
    }

    /*If there are 2 buffers swap them. With direct mode swap only on the last area*/
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d01d      	beq.n	8010148 <draw_buf_flush+0x174>
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d019      	beq.n	8010148 <draw_buf_flush+0x174>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	7c1b      	ldrb	r3, [r3, #16]
 801011a:	f003 0301 	and.w	r3, r3, #1
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b00      	cmp	r3, #0
 8010122:	d002      	beq.n	801012a <draw_buf_flush+0x156>
 8010124:	7bbb      	ldrb	r3, [r7, #14]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00e      	beq.n	8010148 <draw_buf_flush+0x174>
        if(draw_buf->buf_act == draw_buf->buf1)
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	689a      	ldr	r2, [r3, #8]
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	429a      	cmp	r2, r3
 8010134:	d104      	bne.n	8010140 <draw_buf_flush+0x16c>
            draw_buf->buf_act = draw_buf->buf2;
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	685a      	ldr	r2, [r3, #4]
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	609a      	str	r2, [r3, #8]
        else
            draw_buf->buf_act = draw_buf->buf1;
    }
}
 801013e:	e003      	b.n	8010148 <draw_buf_flush+0x174>
            draw_buf->buf_act = draw_buf->buf1;
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	609a      	str	r2, [r3, #8]
}
 8010148:	bf00      	nop
 801014a:	3718      	adds	r7, #24
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	20000710 	.word	0x20000710

08010154 <call_flush_cb>:

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b086      	sub	sp, #24
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010166:	b29a      	uxth	r2, r3
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801016e:	b29b      	uxth	r3, r3
 8010170:	4413      	add	r3, r2
 8010172:	b29b      	uxth	r3, r3
 8010174:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 8010176:	823b      	strh	r3, [r7, #16]
        .y1 = area->y1 + drv->offset_y,
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801017e:	b29a      	uxth	r2, r3
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010186:	b29b      	uxth	r3, r3
 8010188:	4413      	add	r3, r2
 801018a:	b29b      	uxth	r3, r3
 801018c:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 801018e:	827b      	strh	r3, [r7, #18]
        .x2 = area->x2 + drv->offset_x,
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010196:	b29a      	uxth	r2, r3
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801019e:	b29b      	uxth	r3, r3
 80101a0:	4413      	add	r3, r2
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 80101a6:	82bb      	strh	r3, [r7, #20]
        .y2 = area->y2 + drv->offset_y
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80101ae:	b29a      	uxth	r2, r3
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	4413      	add	r3, r2
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 80101be:	82fb      	strh	r3, [r7, #22]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	695b      	ldr	r3, [r3, #20]
 80101c4:	f107 0110 	add.w	r1, r7, #16
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	4798      	blx	r3
}
 80101ce:	bf00      	nop
 80101d0:	3718      	adds	r7, #24
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
	...

080101d8 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80101e0:	4a04      	ldr	r2, [pc, #16]	; (80101f4 <lv_obj_remove_style_all+0x1c>)
 80101e2:	2100      	movs	r1, #0
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f7fc fae7 	bl	800c7b8 <lv_obj_remove_style>
}
 80101ea:	bf00      	nop
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	000fffff 	.word	0x000fffff

080101f8 <lv_theme_get_from_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_theme_t  * lv_theme_get_from_obj(lv_obj_t * obj)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d004      	beq.n	8010210 <lv_theme_get_from_obj+0x18>
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7fd ff8c 	bl	800e124 <lv_obj_get_disp>
 801020c:	4603      	mov	r3, r0
 801020e:	e002      	b.n	8010216 <lv_theme_get_from_obj+0x1e>
 8010210:	f00f fe9e 	bl	801ff50 <lv_disp_get_default>
 8010214:	4603      	mov	r3, r0
 8010216:	60fb      	str	r3, [r7, #12]
    return lv_disp_get_theme(disp);
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f7f4 f9df 	bl	80045dc <lv_disp_get_theme>
 801021e:	4603      	mov	r3, r0
}
 8010220:	4618      	mov	r0, r3
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f7ff ffe1 	bl	80101f8 <lv_theme_get_from_obj>
 8010236:	60f8      	str	r0, [r7, #12]
    if(th == NULL) return;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d007      	beq.n	801024e <lv_theme_apply+0x26>

    lv_obj_remove_style_all(obj);
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7ff ffca 	bl	80101d8 <lv_obj_remove_style_all>

    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8010244:	6879      	ldr	r1, [r7, #4]
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f000 f805 	bl	8010256 <apply_theme>
 801024c:	e000      	b.n	8010250 <lv_theme_apply+0x28>
    if(th == NULL) return;
 801024e:	bf00      	nop
}
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b082      	sub	sp, #8
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
 801025e:	6039      	str	r1, [r7, #0]
    if(th->parent) apply_theme(th->parent, obj);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d005      	beq.n	8010274 <apply_theme+0x1e>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	6839      	ldr	r1, [r7, #0]
 801026e:	4618      	mov	r0, r3
 8010270:	f7ff fff1 	bl	8010256 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d004      	beq.n	8010286 <apply_theme+0x30>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	6839      	ldr	r1, [r7, #0]
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	4798      	blx	r3
}
 8010286:	bf00      	nop
 8010288:	3708      	adds	r7, #8
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}

0801028e <lv_draw_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_init(void)
{
 801028e:	b480      	push	{r7}
 8010290:	af00      	add	r7, sp, #0
    /*Nothing to init now*/
}
 8010292:	bf00      	nop
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d003      	beq.n	80102b4 <lv_draw_wait_for_finish+0x18>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	4798      	blx	r3
}
 80102b4:	bf00      	nop
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	4603      	mov	r3, r0
 80102c4:	71fb      	strb	r3, [r7, #7]
 80102c6:	460b      	mov	r3, r1
 80102c8:	71bb      	strb	r3, [r7, #6]
 80102ca:	4613      	mov	r3, r2
 80102cc:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80102ce:	797b      	ldrb	r3, [r7, #5]
 80102d0:	09db      	lsrs	r3, r3, #7
 80102d2:	b2da      	uxtb	r2, r3
 80102d4:	79bb      	ldrb	r3, [r7, #6]
 80102d6:	09db      	lsrs	r3, r3, #7
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	4313      	orrs	r3, r2
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	09db      	lsrs	r3, r3, #7
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	4313      	orrs	r3, r2
 80102e6:	b2db      	uxtb	r3, r3
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 80102f8:	22ff      	movs	r2, #255	; 0xff
 80102fa:	21ff      	movs	r1, #255	; 0xff
 80102fc:	20ff      	movs	r0, #255	; 0xff
 80102fe:	f7ff ffdd 	bl	80102bc <lv_color_make>
 8010302:	4603      	mov	r3, r0
}
 8010304:	4618      	mov	r0, r3
 8010306:	bd80      	pop	{r7, pc}

08010308 <lv_color_black>:
static inline lv_color_t lv_color_black(void)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801030c:	2200      	movs	r2, #0
 801030e:	2100      	movs	r1, #0
 8010310:	2000      	movs	r0, #0
 8010312:	f7ff ffd3 	bl	80102bc <lv_color_make>
 8010316:	4603      	mov	r3, r0
}
 8010318:	4618      	mov	r0, r3
 801031a:	bd80      	pop	{r7, pc}

0801031c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	f9b3 2000 	ldrsh.w	r2, [r3]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	80da      	strh	r2, [r3, #6]
}
 801034e:	bf00      	nop
 8010350:	370c      	adds	r7, #12
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801035a:	b480      	push	{r7}
 801035c:	b083      	sub	sp, #12
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010368:	b29a      	uxth	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010370:	b29b      	uxth	r3, r3
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	b29b      	uxth	r3, r3
 8010376:	3301      	adds	r3, #1
 8010378:	b29b      	uxth	r3, r3
 801037a:	b21b      	sxth	r3, r3
}
 801037c:	4618      	mov	r0, r3
 801037e:	370c      	adds	r7, #12
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8010388:	b480      	push	{r7}
 801038a:	b083      	sub	sp, #12
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010396:	b29a      	uxth	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801039e:	b29b      	uxth	r3, r3
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	3301      	adds	r3, #1
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	b21b      	sxth	r3, r3
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	370c      	adds	r7, #12
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr

080103b6 <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 80103b6:	b590      	push	{r4, r7, lr}
 80103b8:	b083      	sub	sp, #12
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 80103be:	2114      	movs	r1, #20
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f012 fa4b 	bl	802285c <lv_memset_00>
    dsc->recolor = lv_color_black();
 80103c6:	687c      	ldr	r4, [r7, #4]
 80103c8:	f7ff ff9e 	bl	8010308 <lv_color_black>
 80103cc:	7220      	strb	r0, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	22ff      	movs	r2, #255	; 0xff
 80103d2:	729a      	strb	r2, [r3, #10]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103da:	805a      	strh	r2, [r3, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	7c13      	ldrb	r3, [r2, #16]
 80103e0:	f36f 0300 	bfc	r3, #0, #1
 80103e4:	7413      	strb	r3, [r2, #16]
}
 80103e6:	bf00      	nop
 80103e8:	370c      	adds	r7, #12
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd90      	pop	{r4, r7, pc}
	...

080103f0 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc, const lv_area_t * coords, const void * src)
{
 80103f0:	b590      	push	{r4, r7, lr}
 80103f2:	b087      	sub	sp, #28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	607a      	str	r2, [r7, #4]
 80103fc:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d105      	bne.n	8010410 <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(draw_ctx, coords, "No\ndata");
 8010404:	4a16      	ldr	r2, [pc, #88]	; (8010460 <lv_draw_img+0x70>)
 8010406:	6879      	ldr	r1, [r7, #4]
 8010408:	68f8      	ldr	r0, [r7, #12]
 801040a:	f000 fab3 	bl	8010974 <show_error>
        return;
 801040e:	e023      	b.n	8010458 <lv_draw_img+0x68>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	7a9b      	ldrb	r3, [r3, #10]
 8010414:	2b02      	cmp	r3, #2
 8010416:	d91e      	bls.n	8010456 <lv_draw_img+0x66>

    lv_res_t res;
    if(draw_ctx->draw_img) {
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	699b      	ldr	r3, [r3, #24]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d009      	beq.n	8010434 <lv_draw_img+0x44>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	699c      	ldr	r4, [r3, #24]
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	68b9      	ldr	r1, [r7, #8]
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	47a0      	blx	r4
 801042e:	4603      	mov	r3, r0
 8010430:	75fb      	strb	r3, [r7, #23]
 8010432:	e007      	b.n	8010444 <lv_draw_img+0x54>
    }
    else {
        res = decode_and_draw(draw_ctx, dsc, coords, src);
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	68b9      	ldr	r1, [r7, #8]
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f000 f8e3 	bl	8010606 <decode_and_draw>
 8010440:	4603      	mov	r3, r0
 8010442:	75fb      	strb	r3, [r7, #23]
    }

    if(res == LV_RES_INV) {
 8010444:	7dfb      	ldrb	r3, [r7, #23]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d106      	bne.n	8010458 <lv_draw_img+0x68>
        LV_LOG_WARN("Image draw error");
        show_error(draw_ctx, coords, "No\ndata");
 801044a:	4a05      	ldr	r2, [pc, #20]	; (8010460 <lv_draw_img+0x70>)
 801044c:	6879      	ldr	r1, [r7, #4]
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f000 fa90 	bl	8010974 <show_error>
        return;
 8010454:	e000      	b.n	8010458 <lv_draw_img+0x68>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010456:	bf00      	nop
    }
}
 8010458:	371c      	adds	r7, #28
 801045a:	46bd      	mov	sp, r7
 801045c:	bd90      	pop	{r4, r7, pc}
 801045e:	bf00      	nop
 8010460:	080269e0 	.word	0x080269e0

08010464 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 8010464:	b480      	push	{r7}
 8010466:	b085      	sub	sp, #20
 8010468:	af00      	add	r7, sp, #0
 801046a:	4603      	mov	r3, r0
 801046c:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 801046e:	2300      	movs	r3, #0
 8010470:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 8010472:	79fb      	ldrb	r3, [r7, #7]
 8010474:	2b0e      	cmp	r3, #14
 8010476:	d836      	bhi.n	80104e6 <lv_img_cf_get_px_size+0x82>
 8010478:	a201      	add	r2, pc, #4	; (adr r2, 8010480 <lv_img_cf_get_px_size+0x1c>)
 801047a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047e:	bf00      	nop
 8010480:	080104bd 	.word	0x080104bd
 8010484:	080104bd 	.word	0x080104bd
 8010488:	080104e7 	.word	0x080104e7
 801048c:	080104e7 	.word	0x080104e7
 8010490:	080104c3 	.word	0x080104c3
 8010494:	080104c9 	.word	0x080104c9
 8010498:	080104c3 	.word	0x080104c3
 801049c:	080104cf 	.word	0x080104cf
 80104a0:	080104d5 	.word	0x080104d5
 80104a4:	080104db 	.word	0x080104db
 80104a8:	080104e1 	.word	0x080104e1
 80104ac:	080104cf 	.word	0x080104cf
 80104b0:	080104d5 	.word	0x080104d5
 80104b4:	080104db 	.word	0x080104db
 80104b8:	080104e1 	.word	0x080104e1
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 80104bc:	2300      	movs	r3, #0
 80104be:	73fb      	strb	r3, [r7, #15]
            break;
 80104c0:	e014      	b.n	80104ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 80104c2:	2308      	movs	r3, #8
 80104c4:	73fb      	strb	r3, [r7, #15]
            break;
 80104c6:	e011      	b.n	80104ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 80104c8:	2310      	movs	r3, #16
 80104ca:	73fb      	strb	r3, [r7, #15]
            break;
 80104cc:	e00e      	b.n	80104ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 80104ce:	2301      	movs	r3, #1
 80104d0:	73fb      	strb	r3, [r7, #15]
            break;
 80104d2:	e00b      	b.n	80104ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 80104d4:	2302      	movs	r3, #2
 80104d6:	73fb      	strb	r3, [r7, #15]
            break;
 80104d8:	e008      	b.n	80104ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 80104da:	2304      	movs	r3, #4
 80104dc:	73fb      	strb	r3, [r7, #15]
            break;
 80104de:	e005      	b.n	80104ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 80104e0:	2308      	movs	r3, #8
 80104e2:	73fb      	strb	r3, [r7, #15]
            break;
 80104e4:	e002      	b.n	80104ec <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 80104e6:	2300      	movs	r3, #0
 80104e8:	73fb      	strb	r3, [r7, #15]
            break;
 80104ea:	bf00      	nop
    }

    return px_size;
 80104ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop

080104fc <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	4603      	mov	r3, r0
 8010504:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 8010506:	2300      	movs	r3, #0
 8010508:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 801050a:	79fb      	ldrb	r3, [r7, #7]
 801050c:	2b03      	cmp	r3, #3
 801050e:	d001      	beq.n	8010514 <lv_img_cf_is_chroma_keyed+0x18>
 8010510:	2b06      	cmp	r3, #6
 8010512:	d102      	bne.n	801051a <lv_img_cf_is_chroma_keyed+0x1e>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
            is_chroma_keyed = true;
 8010514:	2301      	movs	r3, #1
 8010516:	73fb      	strb	r3, [r7, #15]
            break;
 8010518:	e002      	b.n	8010520 <lv_img_cf_is_chroma_keyed+0x24>

        default:
            is_chroma_keyed = false;
 801051a:	2300      	movs	r3, #0
 801051c:	73fb      	strb	r3, [r7, #15]
            break;
 801051e:	bf00      	nop
    }

    return is_chroma_keyed;
 8010520:	7bfb      	ldrb	r3, [r7, #15]
}
 8010522:	4618      	mov	r0, r3
 8010524:	3714      	adds	r7, #20
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr

0801052e <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 801052e:	b480      	push	{r7}
 8010530:	b085      	sub	sp, #20
 8010532:	af00      	add	r7, sp, #0
 8010534:	4603      	mov	r3, r0
 8010536:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 8010538:	2300      	movs	r3, #0
 801053a:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 801053c:	79fb      	ldrb	r3, [r7, #7]
 801053e:	2b0e      	cmp	r3, #14
 8010540:	bf8c      	ite	hi
 8010542:	2201      	movhi	r2, #1
 8010544:	2200      	movls	r2, #0
 8010546:	b2d2      	uxtb	r2, r2
 8010548:	2a00      	cmp	r2, #0
 801054a:	d10e      	bne.n	801056a <lv_img_cf_has_alpha+0x3c>
 801054c:	2201      	movs	r2, #1
 801054e:	409a      	lsls	r2, r3
 8010550:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 8010554:	4013      	ands	r3, r2
 8010556:	2b00      	cmp	r3, #0
 8010558:	bf14      	ite	ne
 801055a:	2301      	movne	r3, #1
 801055c:	2300      	moveq	r3, #0
 801055e:	b2db      	uxtb	r3, r3
 8010560:	2b00      	cmp	r3, #0
 8010562:	d002      	beq.n	801056a <lv_img_cf_has_alpha+0x3c>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 8010564:	2301      	movs	r3, #1
 8010566:	73fb      	strb	r3, [r7, #15]
            break;
 8010568:	e002      	b.n	8010570 <lv_img_cf_has_alpha+0x42>
        default:
            has_alpha = false;
 801056a:	2300      	movs	r3, #0
 801056c:	73fb      	strb	r3, [r7, #15]
            break;
 801056e:	bf00      	nop
    }

    return has_alpha;
 8010570:	7bfb      	ldrb	r3, [r7, #15]
}
 8010572:	4618      	mov	r0, r3
 8010574:	3714      	adds	r7, #20
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr

0801057e <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 801057e:	b480      	push	{r7}
 8010580:	b085      	sub	sp, #20
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 8010586:	2303      	movs	r3, #3
 8010588:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d101      	bne.n	8010594 <lv_img_src_get_type+0x16>
 8010590:	7bfb      	ldrb	r3, [r7, #15]
 8010592:	e018      	b.n	80105c6 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b1f      	cmp	r3, #31
 801059e:	d907      	bls.n	80105b0 <lv_img_src_get_type+0x32>
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	b25b      	sxtb	r3, r3
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	db02      	blt.n	80105b0 <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 80105aa:	2301      	movs	r3, #1
 80105ac:	73fb      	strb	r3, [r7, #15]
 80105ae:	e009      	b.n	80105c4 <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	b25b      	sxtb	r3, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	da02      	bge.n	80105c0 <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 80105ba:	2302      	movs	r3, #2
 80105bc:	73fb      	strb	r3, [r7, #15]
 80105be:	e001      	b.n	80105c4 <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 80105c0:	2300      	movs	r3, #0
 80105c2:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 80105c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3714      	adds	r7, #20
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <lv_draw_img_decoded>:

void lv_draw_img_decoded(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc,
                         const lv_area_t * coords, const uint8_t * map_p, lv_img_cf_t color_format)
{
 80105d2:	b590      	push	{r4, r7, lr}
 80105d4:	b087      	sub	sp, #28
 80105d6:	af02      	add	r7, sp, #8
 80105d8:	60f8      	str	r0, [r7, #12]
 80105da:	60b9      	str	r1, [r7, #8]
 80105dc:	607a      	str	r2, [r7, #4]
 80105de:	603b      	str	r3, [r7, #0]
    if(draw_ctx->draw_img_decoded == NULL) return;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	695b      	ldr	r3, [r3, #20]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00a      	beq.n	80105fe <lv_draw_img_decoded+0x2c>

    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	695c      	ldr	r4, [r3, #20]
 80105ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80105f0:	9300      	str	r3, [sp, #0]
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	68b9      	ldr	r1, [r7, #8]
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	47a0      	blx	r4
 80105fc:	e000      	b.n	8010600 <lv_draw_img_decoded+0x2e>
    if(draw_ctx->draw_img_decoded == NULL) return;
 80105fe:	bf00      	nop
}
 8010600:	3714      	adds	r7, #20
 8010602:	46bd      	mov	sp, r7
 8010604:	bd90      	pop	{r4, r7, pc}

08010606 <decode_and_draw>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
 8010606:	b5b0      	push	{r4, r5, r7, lr}
 8010608:	b09e      	sub	sp, #120	; 0x78
 801060a:	af02      	add	r7, sp, #8
 801060c:	60f8      	str	r0, [r7, #12]
 801060e:	60b9      	str	r1, [r7, #8]
 8010610:	607a      	str	r2, [r7, #4]
 8010612:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	7a9b      	ldrb	r3, [r3, #10]
 8010618:	2b02      	cmp	r3, #2
 801061a:	d801      	bhi.n	8010620 <decode_and_draw+0x1a>
 801061c:	2301      	movs	r3, #1
 801061e:	e1a5      	b.n	801096c <decode_and_draw+0x366>

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	68da      	ldr	r2, [r3, #12]
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	7a19      	ldrb	r1, [r3, #8]
 8010628:	6838      	ldr	r0, [r7, #0]
 801062a:	f003 ff6b 	bl	8014504 <_lv_img_cache_open>
 801062e:	6638      	str	r0, [r7, #96]	; 0x60

    if(cdsc == NULL) return LV_RES_INV;
 8010630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010632:	2b00      	cmp	r3, #0
 8010634:	d101      	bne.n	801063a <decode_and_draw+0x34>
 8010636:	2300      	movs	r3, #0
 8010638:	e198      	b.n	801096c <decode_and_draw+0x366>

    lv_img_cf_t cf;
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 801063a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801063c:	7d1b      	ldrb	r3, [r3, #20]
 801063e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8010642:	b2db      	uxtb	r3, r3
 8010644:	4618      	mov	r0, r3
 8010646:	f7ff ff59 	bl	80104fc <lv_img_cf_is_chroma_keyed>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d003      	beq.n	8010658 <decode_and_draw+0x52>
 8010650:	2306      	movs	r3, #6
 8010652:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010656:	e027      	b.n	80106a8 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 8010658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801065a:	7d1b      	ldrb	r3, [r3, #20]
 801065c:	f003 031f 	and.w	r3, r3, #31
 8010660:	b2db      	uxtb	r3, r3
 8010662:	2b0e      	cmp	r3, #14
 8010664:	d103      	bne.n	801066e <decode_and_draw+0x68>
 8010666:	230e      	movs	r3, #14
 8010668:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801066c:	e01c      	b.n	80106a8 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 801066e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010670:	7d1b      	ldrb	r3, [r3, #20]
 8010672:	f003 031f 	and.w	r3, r3, #31
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b14      	cmp	r3, #20
 801067a:	d103      	bne.n	8010684 <decode_and_draw+0x7e>
 801067c:	2314      	movs	r3, #20
 801067e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010682:	e011      	b.n	80106a8 <decode_and_draw+0xa2>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8010684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010686:	7d1b      	ldrb	r3, [r3, #20]
 8010688:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801068c:	b2db      	uxtb	r3, r3
 801068e:	4618      	mov	r0, r3
 8010690:	f7ff ff4d 	bl	801052e <lv_img_cf_has_alpha>
 8010694:	4603      	mov	r3, r0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d003      	beq.n	80106a2 <decode_and_draw+0x9c>
 801069a:	2305      	movs	r3, #5
 801069c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80106a0:	e002      	b.n	80106a8 <decode_and_draw+0xa2>
    else cf = LV_IMG_CF_TRUE_COLOR;
 80106a2:	2304      	movs	r3, #4
 80106a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if(cf == LV_IMG_CF_ALPHA_8BIT) {
 80106a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80106ac:	2b0e      	cmp	r3, #14
 80106ae:	d10f      	bne.n	80106d0 <decode_and_draw+0xca>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d104      	bne.n	80106c4 <decode_and_draw+0xbe>
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	885b      	ldrh	r3, [r3, #2]
 80106be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106c2:	d005      	beq.n	80106d0 <decode_and_draw+0xca>
            /* resume normal method */
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 80106c4:	2305      	movs	r3, #5
 80106c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            cdsc->dec_dsc.img_data = NULL;
 80106ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106cc:	2200      	movs	r2, #0
 80106ce:	619a      	str	r2, [r3, #24]
        }
    }

    if(cdsc->dec_dsc.error_msg != NULL) {
 80106d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106d2:	6a1b      	ldr	r3, [r3, #32]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d007      	beq.n	80106e8 <decode_and_draw+0xe2>
        LV_LOG_WARN("Image draw error");

        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 80106d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106da:	6a1b      	ldr	r3, [r3, #32]
 80106dc:	461a      	mov	r2, r3
 80106de:	6879      	ldr	r1, [r7, #4]
 80106e0:	68f8      	ldr	r0, [r7, #12]
 80106e2:	f000 f947 	bl	8010974 <show_error>
 80106e6:	e13d      	b.n	8010964 <decode_and_draw+0x35e>
    }
    /*The decoder could open the image and gave the entire uncompressed image.
     *Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 80106e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106ea:	699b      	ldr	r3, [r3, #24]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 8087 	beq.w	8010800 <decode_and_draw+0x1fa>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 80106f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106f6:	6879      	ldr	r1, [r7, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7ff fe0f 	bl	801031c <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d104      	bne.n	8010712 <decode_and_draw+0x10c>
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	885b      	ldrh	r3, [r3, #2]
 801070c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010710:	d048      	beq.n	80107a4 <decode_and_draw+0x19e>
            int32_t w = lv_area_get_width(coords);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f7ff fe21 	bl	801035a <lv_area_get_width>
 8010718:	4603      	mov	r3, r0
 801071a:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7ff fe33 	bl	8010388 <lv_area_get_height>
 8010722:	4603      	mov	r3, r0
 8010724:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8010726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010728:	b219      	sxth	r1, r3
 801072a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801072c:	b21c      	sxth	r4, r3
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	885b      	ldrh	r3, [r3, #2]
 8010738:	68ba      	ldr	r2, [r7, #8]
 801073a:	3204      	adds	r2, #4
 801073c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010740:	9201      	str	r2, [sp, #4]
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	462b      	mov	r3, r5
 8010746:	4622      	mov	r2, r4
 8010748:	f003 fe13 	bl	8014372 <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 801074c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010750:	b29a      	uxth	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010758:	b29b      	uxth	r3, r3
 801075a:	4413      	add	r3, r2
 801075c:	b29b      	uxth	r3, r3
 801075e:	b21b      	sxth	r3, r3
 8010760:	863b      	strh	r3, [r7, #48]	; 0x30
            map_area_rot.y1 += coords->y1;
 8010762:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010766:	b29a      	uxth	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801076e:	b29b      	uxth	r3, r3
 8010770:	4413      	add	r3, r2
 8010772:	b29b      	uxth	r3, r3
 8010774:	b21b      	sxth	r3, r3
 8010776:	867b      	strh	r3, [r7, #50]	; 0x32
            map_area_rot.x2 += coords->x1;
 8010778:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801077c:	b29a      	uxth	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010784:	b29b      	uxth	r3, r3
 8010786:	4413      	add	r3, r2
 8010788:	b29b      	uxth	r3, r3
 801078a:	b21b      	sxth	r3, r3
 801078c:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y2 += coords->y1;
 801078e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010792:	b29a      	uxth	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801079a:	b29b      	uxth	r3, r3
 801079c:	4413      	add	r3, r2
 801079e:	b29b      	uxth	r3, r3
 80107a0:	b21b      	sxth	r3, r3
 80107a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        lv_area_t clip_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6899      	ldr	r1, [r3, #8]
 80107a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80107ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107b0:	4618      	mov	r0, r3
 80107b2:	f010 f8ff 	bl	80209b4 <_lv_area_intersect>
 80107b6:	4603      	mov	r3, r0
 80107b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 80107bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80107c0:	f083 0301 	eor.w	r3, r3, #1
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d004      	beq.n	80107d4 <decode_and_draw+0x1ce>
            draw_cleanup(cdsc);
 80107ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80107cc:	f000 f8fa 	bl	80109c4 <draw_cleanup>
            return LV_RES_OK;
 80107d0:	2301      	movs	r3, #1
 80107d2:	e0cb      	b.n	801096c <decode_and_draw+0x366>
        }

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	63bb      	str	r3, [r7, #56]	; 0x38
        draw_ctx->clip_area = &clip_com;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80107e0:	609a      	str	r2, [r3, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 80107e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107e4:	699a      	ldr	r2, [r3, #24]
 80107e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	4613      	mov	r3, r2
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	68b9      	ldr	r1, [r7, #8]
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f7ff feed 	bl	80105d2 <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107fc:	609a      	str	r2, [r3, #8]
 80107fe:	e0b1      	b.n	8010964 <decode_and_draw+0x35e>
    }
    /*The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6899      	ldr	r1, [r3, #8]
 8010804:	f107 0320 	add.w	r3, r7, #32
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	4618      	mov	r0, r3
 801080c:	f010 f8d2 	bl	80209b4 <_lv_area_intersect>
 8010810:	4603      	mov	r3, r0
 8010812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 8010816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801081a:	f083 0301 	eor.w	r3, r3, #1
 801081e:	b2db      	uxtb	r3, r3
 8010820:	2b00      	cmp	r3, #0
 8010822:	d004      	beq.n	801082e <decode_and_draw+0x228>
            draw_cleanup(cdsc);
 8010824:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010826:	f000 f8cd 	bl	80109c4 <draw_cleanup>
            return LV_RES_OK;
 801082a:	2301      	movs	r3, #1
 801082c:	e09e      	b.n	801096c <decode_and_draw+0x366>
        }

        int32_t width = lv_area_get_width(&mask_com);
 801082e:	f107 0320 	add.w	r3, r7, #32
 8010832:	4618      	mov	r0, r3
 8010834:	f7ff fd91 	bl	801035a <lv_area_get_width>
 8010838:	4603      	mov	r3, r0
 801083a:	65bb      	str	r3, [r7, #88]	; 0x58

        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 801083c:	f107 0320 	add.w	r3, r7, #32
 8010840:	4618      	mov	r0, r3
 8010842:	f7ff fd8a 	bl	801035a <lv_area_get_width>
 8010846:	4603      	mov	r3, r0
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	4618      	mov	r0, r3
 801084c:	f011 fc5c 	bl	8022108 <lv_mem_buf_get>
 8010850:	6578      	str	r0, [r7, #84]	; 0x54
                                        LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 8010858:	f107 0220 	add.w	r2, r7, #32
 801085c:	f107 0318 	add.w	r3, r7, #24
 8010860:	4611      	mov	r1, r2
 8010862:	4618      	mov	r0, r3
 8010864:	f7ff fd5a 	bl	801031c <lv_area_copy>
        lv_area_set_height(&line, 1);
 8010868:	f107 0318 	add.w	r3, r7, #24
 801086c:	2101      	movs	r1, #1
 801086e:	4618      	mov	r0, r3
 8010870:	f00f fffb 	bl	802086a <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8010874:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010878:	461a      	mov	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 8010884:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010888:	461a      	mov	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	66bb      	str	r3, [r7, #104]	; 0x68
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8010894:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010898:	667b      	str	r3, [r7, #100]	; 0x64
 801089a:	e057      	b.n	801094c <decode_and_draw+0x346>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 801089c:	f107 0218 	add.w	r2, r7, #24
 80108a0:	f107 0310 	add.w	r3, r7, #16
 80108a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80108a6:	4618      	mov	r0, r3
 80108a8:	f010 f884 	bl	80209b4 <_lv_area_intersect>
 80108ac:	4603      	mov	r3, r0
 80108ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if(union_ok == false) continue;
 80108b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108b6:	f083 0301 	eor.w	r3, r3, #1
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d141      	bne.n	8010944 <decode_and_draw+0x33e>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 80108c0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80108c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108c4:	b219      	sxth	r1, r3
 80108c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80108c8:	b21a      	sxth	r2, r3
 80108ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108cc:	b21c      	sxth	r4, r3
 80108ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108d0:	9300      	str	r3, [sp, #0]
 80108d2:	4623      	mov	r3, r4
 80108d4:	f003 ffc0 	bl	8014858 <lv_img_decoder_read_line>
 80108d8:	4603      	mov	r3, r0
 80108da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 80108de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d00e      	beq.n	8010904 <decode_and_draw+0x2fe>
                lv_img_decoder_close(&cdsc->dec_dsc);
 80108e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108e8:	4618      	mov	r0, r3
 80108ea:	f003 ffe1 	bl	80148b0 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                lv_mem_buf_release(buf);
 80108ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80108f0:	f011 fcb6 	bl	8022260 <lv_mem_buf_release>
                draw_cleanup(cdsc);
 80108f4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80108f6:	f000 f865 	bl	80109c4 <draw_cleanup>
                draw_ctx->clip_area = clip_area_ori;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108fe:	609a      	str	r2, [r3, #8]
                return LV_RES_INV;
 8010900:	2300      	movs	r3, #0
            return LV_RES_OK;
 8010902:	e033      	b.n	801096c <decode_and_draw+0x366>
            }

            draw_ctx->clip_area = &mask_line;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f107 0210 	add.w	r2, r7, #16
 801090a:	609a      	str	r2, [r3, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 801090c:	f107 0218 	add.w	r2, r7, #24
 8010910:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010918:	68b9      	ldr	r1, [r7, #8]
 801091a:	68f8      	ldr	r0, [r7, #12]
 801091c:	f7ff fe59 	bl	80105d2 <lv_draw_img_decoded>
            line.y1++;
 8010920:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010924:	b29b      	uxth	r3, r3
 8010926:	3301      	adds	r3, #1
 8010928:	b29b      	uxth	r3, r3
 801092a:	b21b      	sxth	r3, r3
 801092c:	837b      	strh	r3, [r7, #26]
            line.y2++;
 801092e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010932:	b29b      	uxth	r3, r3
 8010934:	3301      	adds	r3, #1
 8010936:	b29b      	uxth	r3, r3
 8010938:	b21b      	sxth	r3, r3
 801093a:	83fb      	strh	r3, [r7, #30]
            y++;
 801093c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801093e:	3301      	adds	r3, #1
 8010940:	66bb      	str	r3, [r7, #104]	; 0x68
 8010942:	e000      	b.n	8010946 <decode_and_draw+0x340>
            if(union_ok == false) continue;
 8010944:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8010946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010948:	3301      	adds	r3, #1
 801094a:	667b      	str	r3, [r7, #100]	; 0x64
 801094c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010950:	461a      	mov	r2, r3
 8010952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010954:	4293      	cmp	r3, r2
 8010956:	dda1      	ble.n	801089c <decode_and_draw+0x296>
        }
        draw_ctx->clip_area = clip_area_ori;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801095c:	609a      	str	r2, [r3, #8]
        lv_mem_buf_release(buf);
 801095e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010960:	f011 fc7e 	bl	8022260 <lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 8010964:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010966:	f000 f82d 	bl	80109c4 <draw_cleanup>
    return LV_RES_OK;
 801096a:	2301      	movs	r3, #1
}
 801096c:	4618      	mov	r0, r3
 801096e:	3770      	adds	r7, #112	; 0x70
 8010970:	46bd      	mov	sp, r7
 8010972:	bdb0      	pop	{r4, r5, r7, pc}

08010974 <show_error>:


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b09a      	sub	sp, #104	; 0x68
 8010978:	af02      	add	r7, sp, #8
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8010980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010984:	4618      	mov	r0, r3
 8010986:	f003 fc67 	bl	8014258 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 801098a:	f7ff fcb3 	bl	80102f4 <lv_color_white>
 801098e:	f887 0034 	strb.w	r0, [r7, #52]	; 0x34
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8010992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	4619      	mov	r1, r3
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f003 fca0 	bl	80142e0 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 80109a0:	f107 0310 	add.w	r3, r7, #16
 80109a4:	4618      	mov	r0, r3
 80109a6:	f000 f899 	bl	8010adc <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 80109aa:	f107 0110 	add.w	r1, r7, #16
 80109ae:	2300      	movs	r3, #0
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f000 f8bc 	bl	8010b34 <lv_draw_label>
}
 80109bc:	bf00      	nop
 80109be:	3760      	adds	r7, #96	; 0x60
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <draw_cleanup>:

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f003 ff6e 	bl	80148b0 <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 80109d4:	bf00      	nop
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	3301      	adds	r3, #1
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	b21b      	sxth	r3, r3
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	370c      	adds	r7, #12
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b083      	sub	sp, #12
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b087      	sub	sp, #28
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	613b      	str	r3, [r7, #16]

    while(len) {
 8010a38:	e00c      	b.n	8010a54 <lv_memcpy_small+0x30>
        *d8 = *s8;
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	781a      	ldrb	r2, [r3, #0]
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	701a      	strb	r2, [r3, #0]
        d8++;
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	3301      	adds	r3, #1
 8010a46:	617b      	str	r3, [r7, #20]
        s8++;
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	613b      	str	r3, [r7, #16]
        len--;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	3b01      	subs	r3, #1
 8010a52:	607b      	str	r3, [r7, #4]
    while(len) {
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d1ef      	bne.n	8010a3a <lv_memcpy_small+0x16>
    }

    return dst;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	371c      	adds	r7, #28
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <lv_color_make>:
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	71fb      	strb	r3, [r7, #7]
 8010a72:	460b      	mov	r3, r1
 8010a74:	71bb      	strb	r3, [r7, #6]
 8010a76:	4613      	mov	r3, r2
 8010a78:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8010a7a:	797b      	ldrb	r3, [r7, #5]
 8010a7c:	09db      	lsrs	r3, r3, #7
 8010a7e:	b2da      	uxtb	r2, r3
 8010a80:	79bb      	ldrb	r3, [r7, #6]
 8010a82:	09db      	lsrs	r3, r3, #7
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	4313      	orrs	r3, r2
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	79fb      	ldrb	r3, [r7, #7]
 8010a8c:	09db      	lsrs	r3, r3, #7
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	4313      	orrs	r3, r2
 8010a92:	b2db      	uxtb	r3, r3
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <lv_color_black>:
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	f7ff ffdd 	bl	8010a68 <lv_color_make>
 8010aae:	4603      	mov	r3, r0
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b085      	sub	sp, #20
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d102      	bne.n	8010ace <lv_bidi_calculate_align+0x1a>
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2201      	movs	r2, #1
 8010acc:	701a      	strb	r2, [r3, #0]
}
 8010ace:	bf00      	nop
 8010ad0:	3714      	adds	r7, #20
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr
	...

08010adc <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 8010adc:	b590      	push	{r4, r7, lr}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8010ae4:	2120      	movs	r1, #32
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f011 feb8 	bl	802285c <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	22ff      	movs	r2, #255	; 0xff
 8010af0:	761a      	strb	r2, [r3, #24]
    dsc->color = lv_color_black();
 8010af2:	687c      	ldr	r4, [r7, #4]
 8010af4:	f7ff ffd4 	bl	8010aa0 <lv_color_black>
 8010af8:	7320      	strb	r0, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4a0c      	ldr	r2, [pc, #48]	; (8010b30 <lv_draw_label_dsc_init+0x54>)
 8010afe:	601a      	str	r2, [r3, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b06:	605a      	str	r2, [r3, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b0e:	609a      	str	r2, [r3, #8]
    dsc->sel_color = lv_color_black();
 8010b10:	687c      	ldr	r4, [r7, #4]
 8010b12:	f7ff ffc5 	bl	8010aa0 <lv_color_black>
 8010b16:	7360      	strb	r0, [r4, #13]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8010b18:	687c      	ldr	r4, [r7, #4]
 8010b1a:	2005      	movs	r0, #5
 8010b1c:	f010 fc98 	bl	8021450 <lv_palette_main>
 8010b20:	73a0      	strb	r0, [r4, #14]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	765a      	strb	r2, [r3, #25]
}
 8010b28:	bf00      	nop
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd90      	pop	{r4, r7, pc}
 8010b30:	0802db98 	.word	0x0802db98

08010b34 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 8010b34:	b5b0      	push	{r4, r5, r7, lr}
 8010b36:	b0c8      	sub	sp, #288	; 0x120
 8010b38:	af04      	add	r7, sp, #16
 8010b3a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8010b3e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8010b42:	6020      	str	r0, [r4, #0]
 8010b44:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8010b48:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8010b4c:	6001      	str	r1, [r0, #0]
 8010b4e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8010b52:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8010b56:	600a      	str	r2, [r1, #0]
 8010b58:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010b5c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8010b60:	6013      	str	r3, [r2, #0]
    if(dsc->opa <= LV_OPA_MIN) return;
 8010b62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	7e1b      	ldrb	r3, [r3, #24]
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	f240 85ea 	bls.w	8011748 <lv_draw_label+0xc14>
    if(dsc->font == NULL) {
 8010b74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f000 85e3 	beq.w	801174c <lv_draw_label+0xc18>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 8010b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	69db      	ldr	r3, [r3, #28]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f000 85dc 	beq.w	8011750 <lv_draw_label+0xc1c>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 8010b98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8010ba6:	461d      	mov	r5, r3
 8010ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010bac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const lv_font_t * font = dsc->font;
 8010bb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 8010bc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f000 85c0 	beq.w	8011754 <lv_draw_label+0xc20>
 8010bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 85b7 	beq.w	8011754 <lv_draw_label+0xc20>
        return;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 8010be6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	689a      	ldr	r2, [r3, #8]
 8010bf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010bf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010bfa:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8010bfe:	6819      	ldr	r1, [r3, #0]
 8010c00:	f00f fed8 	bl	80209b4 <_lv_area_intersect>
 8010c04:	4603      	mov	r3, r0
 8010c06:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    if(!clip_ok) return;
 8010c0a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8010c0e:	f083 0301 	eor.w	r3, r3, #1
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f040 859f 	bne.w	8011758 <lv_draw_label+0xc24>

    lv_text_align_t align = dsc->align;
 8010c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	7e9b      	ldrb	r3, [r3, #26]
 8010c26:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_base_dir_t base_dir = dsc->bidi_dir;
 8010c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	7e5b      	ldrb	r3, [r3, #25]
 8010c36:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    lv_bidi_calculate_align(&align, &base_dir, txt);
 8010c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010c42:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 8010c46:	f107 008b 	add.w	r0, r7, #139	; 0x8b
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	f7ff ff32 	bl	8010ab4 <lv_bidi_calculate_align>

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8010c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	7edb      	ldrb	r3, [r3, #27]
 8010c5c:	f003 0302 	and.w	r3, r3, #2
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d10a      	bne.n	8010c7a <lv_draw_label+0x146>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 8010c64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010c6c:	6818      	ldr	r0, [r3, #0]
 8010c6e:	f7ff feb5 	bl	80109dc <lv_area_get_width>
 8010c72:	4603      	mov	r3, r0
 8010c74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010c78:	e02d      	b.n	8010cd6 <lv_draw_label+0x1a2>
    }
    else {
        /*If EXPAND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8010c7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	681c      	ldr	r4, [r3, #0]
 8010c86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 8010c94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010ca2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010ca6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8010caa:	6812      	ldr	r2, [r2, #0]
 8010cac:	7ed2      	ldrb	r2, [r2, #27]
 8010cae:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8010cb2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8010cb6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010cba:	9202      	str	r2, [sp, #8]
 8010cbc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8010cc0:	9201      	str	r2, [sp, #4]
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	462b      	mov	r3, r5
 8010cc6:	4622      	mov	r2, r4
 8010cc8:	6809      	ldr	r1, [r1, #0]
 8010cca:	f013 fc05 	bl	80244d8 <lv_txt_get_size>
                        dsc->flag);
        w = p.x;
 8010cce:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8010cd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 8010cd6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8010cda:	f7ff fe96 	bl	8010a0a <lv_font_get_line_height>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int32_t line_height = line_height_font + dsc->line_space;
 8010ce4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cf8:	4413      	add	r3, r2
 8010cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /*Init variables for the first line*/
    int32_t line_width = 0;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    lv_point_t pos;
    pos.x = coords->x1;
 8010d04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d12:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    pos.y = coords->y1;
 8010d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d24:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t x_ofs = 0;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int32_t y_ofs = 0;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    x_ofs = dsc->ofs_x;
 8010d34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y_ofs = dsc->ofs_y;
 8010d46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8010d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    pos.y += y_ofs;
 8010d58:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	4413      	add	r3, r2
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	b21b      	sxth	r3, r3
 8010d6a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    uint32_t line_start     = 0;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    int32_t last_line_start = -1;
 8010d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8010d7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d02c      	beq.n	8010dde <lv_draw_label+0x2aa>
 8010d84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d128      	bne.n	8010dde <lv_draw_label+0x2aa>
 8010d8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	da1f      	bge.n	8010dde <lv_draw_label+0x2aa>
        /*If the label changed too much recalculate the hint.*/
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8010d9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010da2:	689b      	ldr	r3, [r3, #8]
 8010da4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010da8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8010dac:	6812      	ldr	r2, [r2, #0]
 8010dae:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010db2:	1a9b      	subs	r3, r3, r2
 8010db4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010db8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dc0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010dc4:	005b      	lsls	r3, r3, #1
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	dd04      	ble.n	8010dd4 <lv_draw_label+0x2a0>
            hint->line_start = -1;
 8010dca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010dd2:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 8010dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 8010dde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d013      	beq.n	8010e0e <lv_draw_label+0x2da>
 8010de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	db0f      	blt.n	8010e0e <lv_draw_label+0x2da>
        line_start = last_line_start;
 8010dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010df2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        pos.y += hint->y;
 8010df6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	4413      	add	r3, r2
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	b21b      	sxth	r3, r3
 8010e0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8010e0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010e1c:	18d0      	adds	r0, r2, r3
 8010e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010e30:	b219      	sxth	r1, r3
 8010e32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	7edb      	ldrb	r3, [r3, #27]
 8010e3e:	9301      	str	r3, [sp, #4]
 8010e40:	2300      	movs	r3, #0
 8010e42:	9300      	str	r3, [sp, #0]
 8010e44:	460b      	mov	r3, r1
 8010e46:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8010e4a:	f013 fce1 	bl	8024810 <_lv_txt_get_next_line>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010e54:	4413      	add	r3, r2
 8010e56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8010e5a:	e06c      	b.n	8010f36 <lv_draw_label+0x402>
        /*Go to next line*/
        line_start = line_end;
 8010e5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8010e64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010e72:	18d0      	adds	r0, r2, r3
 8010e74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010e86:	b219      	sxth	r1, r3
 8010e88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	7edb      	ldrb	r3, [r3, #27]
 8010e94:	9301      	str	r3, [sp, #4]
 8010e96:	2300      	movs	r3, #0
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8010ea0:	f013 fcb6 	bl	8024810 <_lv_txt_get_next_line>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010eaa:	4413      	add	r3, r2
 8010eac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        pos.y += line_height;
 8010eb0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010eb4:	b29a      	uxth	r2, r3
 8010eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	4413      	add	r3, r2
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	b21b      	sxth	r3, r3
 8010ec2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8010ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d027      	beq.n	8010f1e <lv_draw_label+0x3ea>
 8010ece:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010ed2:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8010ed6:	db22      	blt.n	8010f1e <lv_draw_label+0x3ea>
 8010ed8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	da1d      	bge.n	8010f1e <lv_draw_label+0x3ea>
            hint->line_start = line_start;
 8010ee2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010ee6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010eea:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 8010eec:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ef6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010f00:	1ad2      	subs	r2, r2, r3
 8010f02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010f06:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 8010f08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010f16:	461a      	mov	r2, r3
 8010f18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010f1c:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 8010f1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010f2c:	4413      	add	r3, r2
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 8413 	beq.w	801175c <lv_draw_label+0xc28>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8010f36:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f40:	4413      	add	r3, r2
 8010f42:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010f46:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8010f4a:	6812      	ldr	r2, [r2, #0]
 8010f4c:	6892      	ldr	r2, [r2, #8]
 8010f4e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8010f52:	4293      	cmp	r3, r2
 8010f54:	db82      	blt.n	8010e5c <lv_draw_label+0x328>
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
 8010f56:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8010f5a:	2b02      	cmp	r3, #2
 8010f5c:	d13d      	bne.n	8010fda <lv_draw_label+0x4a6>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8010f5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010f66:	681a      	ldr	r2, [r3, #0]
 8010f68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010f6c:	18d0      	adds	r0, r2, r3
 8010f6e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010f72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010f76:	1ad1      	subs	r1, r2, r3
 8010f78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	7edb      	ldrb	r3, [r3, #27]
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	4613      	mov	r3, r2
 8010f96:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010f9a:	f013 fd17 	bl	80249cc <lv_txt_get_width>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8010fa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010fa8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010fac:	6818      	ldr	r0, [r3, #0]
 8010fae:	f7ff fd15 	bl	80109dc <lv_area_get_width>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	da00      	bge.n	8010fc2 <lv_draw_label+0x48e>
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	105b      	asrs	r3, r3, #1
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	b28b      	uxth	r3, r1
 8010fce:	4413      	add	r3, r2
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	b21b      	sxth	r3, r3
 8010fd4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8010fd8:	e03b      	b.n	8011052 <lv_draw_label+0x51e>

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8010fda:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8010fde:	2b03      	cmp	r3, #3
 8010fe0:	d137      	bne.n	8011052 <lv_draw_label+0x51e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8010fe2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010fe6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010ff0:	18d0      	adds	r0, r2, r3
 8010ff2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010ff6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010ffa:	1ad1      	subs	r1, r2, r3
 8010ffc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801100a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801100e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	7edb      	ldrb	r3, [r3, #27]
 8011016:	9300      	str	r3, [sp, #0]
 8011018:	4613      	mov	r3, r2
 801101a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801101e:	f013 fcd5 	bl	80249cc <lv_txt_get_width>
 8011022:	4603      	mov	r3, r0
 8011024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        pos.x += lv_area_get_width(coords) - line_width;
 8011028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801102c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011030:	6818      	ldr	r0, [r3, #0]
 8011032:	f7ff fcd3 	bl	80109dc <lv_area_get_width>
 8011036:	4603      	mov	r3, r0
 8011038:	461a      	mov	r2, r3
 801103a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8011044:	b292      	uxth	r2, r2
 8011046:	b29b      	uxth	r3, r3
 8011048:	4413      	add	r3, r2
 801104a:	b29b      	uxth	r3, r3
 801104c:	b21b      	sxth	r3, r3
 801104e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    }
    uint32_t sel_start = dsc->sel_start;
 8011052:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    uint32_t sel_end = dsc->sel_end;
 8011062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    if(sel_start > sel_end) {
 8011072:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8011076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801107a:	429a      	cmp	r2, r3
 801107c:	d90b      	bls.n	8011096 <lv_draw_label+0x562>
        uint32_t tmp = sel_start;
 801107e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011082:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        sel_start = sel_end;
 8011086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801108a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        sel_end = tmp;
 801108e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011092:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8011096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801109a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	7f1b      	ldrb	r3, [r3, #28]
 80110a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	f003 0301 	and.w	r3, r3, #1
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10c      	bne.n	80110ca <lv_draw_label+0x596>
 80110b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80110b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	7f1b      	ldrb	r3, [r3, #28]
 80110bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	f003 0302 	and.w	r3, r3, #2
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d035      	beq.n	8011136 <lv_draw_label+0x602>
        lv_draw_line_dsc_init(&line_dsc);
 80110ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80110ce:	4618      	mov	r0, r3
 80110d0:	f000 fc79 	bl	80119c6 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 80110d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80110d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	7b1b      	ldrb	r3, [r3, #12]
 80110e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 80110e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80110e8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d005      	beq.n	80110fc <lv_draw_label+0x5c8>
 80110f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80110f4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80110f8:	b21b      	sxth	r3, r3
 80110fa:	e000      	b.n	80110fe <lv_draw_label+0x5ca>
 80110fc:	2301      	movs	r3, #1
 80110fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        line_dsc.opa = dsc->opa;
 8011102:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	7e1b      	ldrb	r3, [r3, #24]
 801110e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        line_dsc.blend_mode = dsc->blend_mode;
 8011112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	7f1b      	ldrb	r3, [r3, #28]
 801111e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8011122:	b2db      	uxtb	r3, r3
 8011124:	f003 0303 	and.w	r3, r3, #3
 8011128:	b2da      	uxtb	r2, r3
 801112a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801112e:	f362 0301 	bfi	r3, r2, #0, #2
 8011132:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 8011136:	2300      	movs	r3, #0
 8011138:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
    uint32_t i;
    uint32_t par_start = 0;
 801113c:	2300      	movs	r3, #0
 801113e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_color_t recolor  = lv_color_black();
 8011142:	f7ff fcad 	bl	8010aa0 <lv_color_black>
 8011146:	4603      	mov	r3, r0
 8011148:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    lv_color_t color = lv_color_black();
 801114c:	f7ff fca8 	bl	8010aa0 <lv_color_black>
 8011150:	4603      	mov	r3, r0
 8011152:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8011156:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801115a:	4618      	mov	r0, r3
 801115c:	f003 f87c 	bl	8014258 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8011160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	7b9b      	ldrb	r3, [r3, #14]
 801116c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    int32_t pos_x_start = pos.x;
 8011170:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8011174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 8011178:	e2d9      	b.n	801172e <lv_draw_label+0xbfa>
        pos.x += x_ofs;
 801117a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801117e:	b29a      	uxth	r2, r3
 8011180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011184:	b29b      	uxth	r3, r3
 8011186:	4413      	add	r3, r2
 8011188:	b29b      	uxth	r3, r3
 801118a:	b21b      	sxth	r3, r3
 801118c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 8011190:	2300      	movs	r3, #0
 8011192:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
        i         = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	677b      	str	r3, [r7, #116]	; 0x74
#if LV_USE_BIDI
        char * bidi_txt = lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, base_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 801119a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801119e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80111a8:	4413      	add	r3, r2
 80111aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
#endif

        while(i < line_end - line_start) {
 80111ae:	e154      	b.n	801145a <lv_draw_label+0x926>
            uint32_t logical_char_pos = 0;
 80111b0:	2300      	movs	r3, #0
 80111b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80111b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80111ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111be:	4293      	cmp	r3, r2
 80111c0:	d013      	beq.n	80111ea <lv_draw_label+0x6b6>
 80111c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80111c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d00d      	beq.n	80111ea <lv_draw_label+0x6b6>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, base_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 80111ce:	4ba1      	ldr	r3, [pc, #644]	; (8011454 <lv_draw_label+0x920>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80111d4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80111d8:	4411      	add	r1, r2
 80111da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80111de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80111e2:	6810      	ldr	r0, [r2, #0]
 80111e4:	4798      	blx	r3
 80111e6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
#endif
            }

            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 80111ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80111ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80111f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80111f6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80111fa:	f013 fc85 	bl	8024b08 <_lv_txt_encoded_letter_next_2>
            /*Handle the re-color command*/
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80111fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	7edb      	ldrb	r3, [r3, #27]
 801120a:	f003 0301 	and.w	r3, r3, #1
 801120e:	2b00      	cmp	r3, #0
 8011210:	f000 8088 	beq.w	8011324 <lv_draw_label+0x7f0>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8011214:	2323      	movs	r3, #35	; 0x23
 8011216:	461a      	mov	r2, r3
 8011218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121a:	429a      	cmp	r2, r3
 801121c:	d11a      	bne.n	8011254 <lv_draw_label+0x720>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 801121e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8011222:	2b00      	cmp	r3, #0
 8011224:	d106      	bne.n	8011234 <lv_draw_label+0x700>
                        par_start = i;
 8011226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011228:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                        cmd_state = CMD_STATE_PAR;
 801122c:	2301      	movs	r3, #1
 801122e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 8011232:	e112      	b.n	801145a <lv_draw_label+0x926>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 8011234:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8011238:	2b01      	cmp	r3, #1
 801123a:	d103      	bne.n	8011244 <lv_draw_label+0x710>
                        cmd_state = CMD_STATE_WAIT;
 801123c:	2300      	movs	r3, #0
 801123e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8011242:	e007      	b.n	8011254 <lv_draw_label+0x720>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 8011244:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8011248:	2b02      	cmp	r3, #2
 801124a:	d103      	bne.n	8011254 <lv_draw_label+0x720>
                        cmd_state = CMD_STATE_WAIT;
 801124c:	2300      	movs	r3, #0
 801124e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 8011252:	e102      	b.n	801145a <lv_draw_label+0x926>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 8011254:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8011258:	2b01      	cmp	r3, #1
 801125a:	d163      	bne.n	8011324 <lv_draw_label+0x7f0>
                    if(letter == ' ') {
 801125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801125e:	2b20      	cmp	r3, #32
 8011260:	f040 80fa 	bne.w	8011458 <lv_draw_label+0x924>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8011264:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011266:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801126a:	1ad3      	subs	r3, r2, r3
 801126c:	2b07      	cmp	r3, #7
 801126e:	d14d      	bne.n	801130c <lv_draw_label+0x7d8>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8011270:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011274:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011278:	18d1      	adds	r1, r2, r3
 801127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801127e:	2206      	movs	r2, #6
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff fbcf 	bl	8010a24 <lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 8011286:	2300      	movs	r3, #0
 8011288:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 801128c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011290:	4618      	mov	r0, r3
 8011292:	f000 fa7d 	bl	8011790 <hex_char_to_num>
 8011296:	4603      	mov	r3, r0
 8011298:	011c      	lsls	r4, r3, #4
 801129a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801129e:	4618      	mov	r0, r3
 80112a0:	f000 fa76 	bl	8011790 <hex_char_to_num>
 80112a4:	4603      	mov	r3, r0
 80112a6:	4423      	add	r3, r4
 80112a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 80112ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 fa6d 	bl	8011790 <hex_char_to_num>
 80112b6:	4603      	mov	r3, r0
 80112b8:	011c      	lsls	r4, r3, #4
 80112ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80112be:	4618      	mov	r0, r3
 80112c0:	f000 fa66 	bl	8011790 <hex_char_to_num>
 80112c4:	4603      	mov	r3, r0
 80112c6:	4423      	add	r3, r4
 80112c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 80112cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80112d0:	4618      	mov	r0, r3
 80112d2:	f000 fa5d 	bl	8011790 <hex_char_to_num>
 80112d6:	4603      	mov	r3, r0
 80112d8:	011c      	lsls	r4, r3, #4
 80112da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80112de:	4618      	mov	r0, r3
 80112e0:	f000 fa56 	bl	8011790 <hex_char_to_num>
 80112e4:	4603      	mov	r3, r0
 80112e6:	4423      	add	r3, r4
 80112e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                            recolor = lv_color_make(r, g, b);
 80112ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80112f6:	b2d1      	uxtb	r1, r2
 80112f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80112fc:	b2d2      	uxtb	r2, r2
 80112fe:	4618      	mov	r0, r3
 8011300:	f7ff fbb2 	bl	8010a68 <lv_color_make>
 8011304:	4603      	mov	r3, r0
 8011306:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 801130a:	e007      	b.n	801131c <lv_draw_label+0x7e8>
                        }
                        else {
                            recolor.full = dsc->color.full;
 801130c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	7b1b      	ldrb	r3, [r3, #12]
 8011318:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 801131c:	2302      	movs	r3, #2
 801131e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                    }
                    continue;
 8011322:	e099      	b.n	8011458 <lv_draw_label+0x924>
                }
            }

            color = dsc->color;
 8011324:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	7b1b      	ldrb	r3, [r3, #12]
 8011330:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            if(cmd_state == CMD_STATE_IN) color = recolor;
 8011334:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8011338:	2b02      	cmp	r3, #2
 801133a:	d103      	bne.n	8011344 <lv_draw_label+0x810>
 801133c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8011340:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8011344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011348:	4619      	mov	r1, r3
 801134a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801134e:	f00e f965 	bl	801f61c <lv_font_get_glyph_width>
 8011352:	4603      	mov	r3, r0
 8011354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8011358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801135c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011360:	4293      	cmp	r3, r2
 8011362:	d04c      	beq.n	80113fe <lv_draw_label+0x8ca>
 8011364:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801136c:	4293      	cmp	r3, r2
 801136e:	d046      	beq.n	80113fe <lv_draw_label+0x8ca>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 8011370:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011378:	429a      	cmp	r2, r3
 801137a:	d340      	bcc.n	80113fe <lv_draw_label+0x8ca>
 801137c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011384:	429a      	cmp	r2, r3
 8011386:	d23a      	bcs.n	80113fe <lv_draw_label+0x8ca>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 8011388:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801138c:	843b      	strh	r3, [r7, #32]
                    sel_coords.y1 = pos.y;
 801138e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011392:	847b      	strh	r3, [r7, #34]	; 0x22
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8011394:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8011398:	b29a      	uxth	r2, r3
 801139a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801139e:	b29b      	uxth	r3, r3
 80113a0:	4413      	add	r3, r2
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	4413      	add	r3, r2
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	3b01      	subs	r3, #1
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	b21b      	sxth	r3, r3
 80113be:	84bb      	strh	r3, [r7, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
 80113c0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	4413      	add	r3, r2
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	3b01      	subs	r3, #1
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	b21b      	sxth	r3, r3
 80113d6:	84fb      	strh	r3, [r7, #38]	; 0x26
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 80113d8:	f107 0220 	add.w	r2, r7, #32
 80113dc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80113e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113e8:	6818      	ldr	r0, [r3, #0]
 80113ea:	f002 ff79 	bl	80142e0 <lv_draw_rect>
                    color = dsc->sel_color;
 80113ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	7b5b      	ldrb	r3, [r3, #13]
 80113fa:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                }
            }

            dsc_mod.color = color;
 80113fe:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8011402:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 8011406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011408:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801140c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8011410:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011414:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011418:	6800      	ldr	r0, [r0, #0]
 801141a:	f000 f9a7 	bl	801176c <lv_draw_letter>

            if(letter_w > 0) {
 801141e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011422:	2b00      	cmp	r3, #0
 8011424:	dd19      	ble.n	801145a <lv_draw_label+0x926>
                pos.x += letter_w + dsc->letter_space;
 8011426:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801142a:	b29a      	uxth	r2, r3
 801142c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801143a:	b299      	uxth	r1, r3
 801143c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011440:	b29b      	uxth	r3, r3
 8011442:	440b      	add	r3, r1
 8011444:	b29b      	uxth	r3, r3
 8011446:	4413      	add	r3, r2
 8011448:	b29b      	uxth	r3, r3
 801144a:	b21b      	sxth	r3, r3
 801144c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8011450:	e003      	b.n	801145a <lv_draw_label+0x926>
 8011452:	bf00      	nop
 8011454:	20000028 	.word	0x20000028
                    continue;
 8011458:	bf00      	nop
        while(i < line_end - line_start) {
 801145a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801145e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011462:	1ad2      	subs	r2, r2, r3
 8011464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011466:	429a      	cmp	r2, r3
 8011468:	f63f aea2 	bhi.w	80111b0 <lv_draw_label+0x67c>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 801146c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	7f1b      	ldrb	r3, [r3, #28]
 8011478:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801147c:	b2db      	uxtb	r3, r3
 801147e:	f003 0302 	and.w	r3, r3, #2
 8011482:	2b00      	cmp	r3, #0
 8011484:	d039      	beq.n	80114fa <lv_draw_label+0x9c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 8011486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801148a:	b21b      	sxth	r3, r3
 801148c:	83bb      	strh	r3, [r7, #28]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 801148e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011492:	b29a      	uxth	r2, r3
 8011494:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	da00      	bge.n	80114aa <lv_draw_label+0x976>
 80114a8:	3301      	adds	r3, #1
 80114aa:	105b      	asrs	r3, r3, #1
 80114ac:	b21b      	sxth	r3, r3
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	4413      	add	r3, r2
 80114b2:	b29a      	uxth	r2, r3
 80114b4:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	da00      	bge.n	80114be <lv_draw_label+0x98a>
 80114bc:	3301      	adds	r3, #1
 80114be:	105b      	asrs	r3, r3, #1
 80114c0:	b21b      	sxth	r3, r3
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4413      	add	r3, r2
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	b21b      	sxth	r3, r3
 80114ca:	83fb      	strh	r3, [r7, #30]
            p2.x = pos.x;
 80114cc:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80114d0:	833b      	strh	r3, [r7, #24]
            p2.y = p1.y;
 80114d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80114d6:	837b      	strh	r3, [r7, #26]
            line_dsc.color = color;
 80114d8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80114dc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80114e0:	f107 0318 	add.w	r3, r7, #24
 80114e4:	f107 021c 	add.w	r2, r7, #28
 80114e8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80114ec:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80114f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80114f4:	6800      	ldr	r0, [r0, #0]
 80114f6:	f000 fa7c 	bl	80119f2 <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 80114fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	7f1b      	ldrb	r3, [r3, #28]
 8011506:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801150a:	b2db      	uxtb	r3, r3
 801150c:	f003 0301 	and.w	r3, r3, #1
 8011510:	2b00      	cmp	r3, #0
 8011512:	d044      	beq.n	801159e <lv_draw_label+0xa6a>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 8011514:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011518:	b21b      	sxth	r3, r3
 801151a:	82bb      	strh	r3, [r7, #20]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 801151c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011520:	b29a      	uxth	r2, r3
 8011522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011532:	b29b      	uxth	r3, r3
 8011534:	4413      	add	r3, r2
 8011536:	b29a      	uxth	r2, r3
 8011538:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801153c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011548:	b29b      	uxth	r3, r3
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	b29a      	uxth	r2, r3
 801154e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011552:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8011556:	b29b      	uxth	r3, r3
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	b29b      	uxth	r3, r3
 801155c:	b21b      	sxth	r3, r3
 801155e:	82fb      	strh	r3, [r7, #22]
            p2.x = pos.x;
 8011560:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8011564:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011568:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801156c:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 801156e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011572:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011576:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801157a:	805a      	strh	r2, [r3, #2]
            line_dsc.color = color;
 801157c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8011580:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8011584:	f107 0310 	add.w	r3, r7, #16
 8011588:	f107 0214 	add.w	r2, r7, #20
 801158c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8011590:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011594:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011598:	6800      	ldr	r0, [r0, #0]
 801159a:	f000 fa2a 	bl	80119f2 <lv_draw_line>
#if LV_USE_BIDI
        lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 801159e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80115a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80115a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80115b4:	18d0      	adds	r0, r2, r3
 80115b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80115c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80115c8:	b219      	sxth	r1, r3
 80115ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	7edb      	ldrb	r3, [r3, #27]
 80115d6:	9301      	str	r3, [sp, #4]
 80115d8:	2300      	movs	r3, #0
 80115da:	9300      	str	r3, [sp, #0]
 80115dc:	460b      	mov	r3, r1
 80115de:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80115e2:	f013 f915 	bl	8024810 <_lv_txt_get_next_line>
 80115e6:	4602      	mov	r2, r0
 80115e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80115ec:	4413      	add	r3, r2
 80115ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        pos.x = coords->x1;
 80115f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011600:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        /*Align to middle*/
        if(align == LV_TEXT_ALIGN_CENTER) {
 8011604:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8011608:	2b02      	cmp	r3, #2
 801160a:	d13d      	bne.n	8011688 <lv_draw_label+0xb54>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 801160c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011610:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011614:	681a      	ldr	r2, [r3, #0]
 8011616:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801161a:	18d0      	adds	r0, r2, r3
 801161c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011620:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011624:	1ad1      	subs	r1, r2, r3
 8011626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801162a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8011634:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	7edb      	ldrb	r3, [r3, #27]
 8011640:	9300      	str	r3, [sp, #0]
 8011642:	4613      	mov	r3, r2
 8011644:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011648:	f013 f9c0 	bl	80249cc <lv_txt_get_width>
 801164c:	4603      	mov	r3, r0
            line_width =
 801164e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8011652:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011656:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801165a:	6818      	ldr	r0, [r3, #0]
 801165c:	f7ff f9be 	bl	80109dc <lv_area_get_width>
 8011660:	4603      	mov	r3, r0
 8011662:	461a      	mov	r2, r3
 8011664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011668:	1ad3      	subs	r3, r2, r3
 801166a:	2b00      	cmp	r3, #0
 801166c:	da00      	bge.n	8011670 <lv_draw_label+0xb3c>
 801166e:	3301      	adds	r3, #1
 8011670:	105b      	asrs	r3, r3, #1
 8011672:	4619      	mov	r1, r3
 8011674:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8011678:	b29a      	uxth	r2, r3
 801167a:	b28b      	uxth	r3, r1
 801167c:	4413      	add	r3, r2
 801167e:	b29b      	uxth	r3, r3
 8011680:	b21b      	sxth	r3, r3
 8011682:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8011686:	e03b      	b.n	8011700 <lv_draw_label+0xbcc>

        }
        /*Align to the right*/
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 8011688:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801168c:	2b03      	cmp	r3, #3
 801168e:	d137      	bne.n	8011700 <lv_draw_label+0xbcc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8011690:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011694:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801169e:	18d0      	adds	r0, r2, r3
 80116a0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80116a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80116a8:	1ad1      	subs	r1, r2, r3
 80116aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80116b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	7edb      	ldrb	r3, [r3, #27]
 80116c4:	9300      	str	r3, [sp, #0]
 80116c6:	4613      	mov	r3, r2
 80116c8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80116cc:	f013 f97e 	bl	80249cc <lv_txt_get_width>
 80116d0:	4603      	mov	r3, r0
            line_width =
 80116d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            pos.x += lv_area_get_width(coords) - line_width;
 80116d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116de:	6818      	ldr	r0, [r3, #0]
 80116e0:	f7ff f97c 	bl	80109dc <lv_area_get_width>
 80116e4:	4603      	mov	r3, r0
 80116e6:	461a      	mov	r2, r3
 80116e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80116ec:	1ad3      	subs	r3, r2, r3
 80116ee:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80116f2:	b292      	uxth	r2, r2
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	4413      	add	r3, r2
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	b21b      	sxth	r3, r3
 80116fc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        /*Go the next line position*/
        pos.y += line_height;
 8011700:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8011704:	b29a      	uxth	r2, r3
 8011706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801170a:	b29b      	uxth	r3, r3
 801170c:	4413      	add	r3, r2
 801170e:	b29b      	uxth	r3, r3
 8011710:	b21b      	sxth	r3, r3
 8011712:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if(pos.y > draw_ctx->clip_area->y2) return;
 8011716:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801171a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801171e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	689b      	ldr	r3, [r3, #8]
 8011726:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801172a:	429a      	cmp	r2, r3
 801172c:	dc18      	bgt.n	8011760 <lv_draw_label+0xc2c>
    while(txt[line_start] != '\0') {
 801172e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011732:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801173c:	4413      	add	r3, r2
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	f47f ad1a 	bne.w	801117a <lv_draw_label+0x646>
 8011746:	e00c      	b.n	8011762 <lv_draw_label+0xc2e>
    if(dsc->opa <= LV_OPA_MIN) return;
 8011748:	bf00      	nop
 801174a:	e00a      	b.n	8011762 <lv_draw_label+0xc2e>
        return;
 801174c:	bf00      	nop
 801174e:	e008      	b.n	8011762 <lv_draw_label+0xc2e>
        return;
 8011750:	bf00      	nop
 8011752:	e006      	b.n	8011762 <lv_draw_label+0xc2e>
        return;
 8011754:	bf00      	nop
 8011756:	e004      	b.n	8011762 <lv_draw_label+0xc2e>
    if(!clip_ok) return;
 8011758:	bf00      	nop
 801175a:	e002      	b.n	8011762 <lv_draw_label+0xc2e>
        if(txt[line_start] == '\0') return;
 801175c:	bf00      	nop
 801175e:	e000      	b.n	8011762 <lv_draw_label+0xc2e>
        if(pos.y > draw_ctx->clip_area->y2) return;
 8011760:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 8011762:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8011766:	46bd      	mov	sp, r7
 8011768:	bdb0      	pop	{r4, r5, r7, pc}
 801176a:	bf00      	nop

0801176c <lv_draw_letter>:

void lv_draw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                    uint32_t letter)
{
 801176c:	b590      	push	{r4, r7, lr}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
 8011778:	603b      	str	r3, [r7, #0]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	69dc      	ldr	r4, [r3, #28]
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	68b9      	ldr	r1, [r7, #8]
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	47a0      	blx	r4
}
 8011788:	bf00      	nop
 801178a:	3714      	adds	r7, #20
 801178c:	46bd      	mov	sp, r7
 801178e:	bd90      	pop	{r4, r7, pc}

08011790 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	4603      	mov	r3, r0
 8011798:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 801179a:	2300      	movs	r3, #0
 801179c:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 801179e:	79fb      	ldrb	r3, [r7, #7]
 80117a0:	2b2f      	cmp	r3, #47	; 0x2f
 80117a2:	d906      	bls.n	80117b2 <hex_char_to_num+0x22>
 80117a4:	79fb      	ldrb	r3, [r7, #7]
 80117a6:	2b39      	cmp	r3, #57	; 0x39
 80117a8:	d803      	bhi.n	80117b2 <hex_char_to_num+0x22>
        result = hex - '0';
 80117aa:	79fb      	ldrb	r3, [r7, #7]
 80117ac:	3b30      	subs	r3, #48	; 0x30
 80117ae:	73fb      	strb	r3, [r7, #15]
 80117b0:	e02d      	b.n	801180e <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80117b2:	79fb      	ldrb	r3, [r7, #7]
 80117b4:	2b60      	cmp	r3, #96	; 0x60
 80117b6:	d902      	bls.n	80117be <hex_char_to_num+0x2e>
 80117b8:	79fb      	ldrb	r3, [r7, #7]
 80117ba:	3b20      	subs	r3, #32
 80117bc:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 80117be:	79fb      	ldrb	r3, [r7, #7]
 80117c0:	3b41      	subs	r3, #65	; 0x41
 80117c2:	2b05      	cmp	r3, #5
 80117c4:	d820      	bhi.n	8011808 <hex_char_to_num+0x78>
 80117c6:	a201      	add	r2, pc, #4	; (adr r2, 80117cc <hex_char_to_num+0x3c>)
 80117c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117cc:	080117e5 	.word	0x080117e5
 80117d0:	080117eb 	.word	0x080117eb
 80117d4:	080117f1 	.word	0x080117f1
 80117d8:	080117f7 	.word	0x080117f7
 80117dc:	080117fd 	.word	0x080117fd
 80117e0:	08011803 	.word	0x08011803
            case 'A':
                result = 10;
 80117e4:	230a      	movs	r3, #10
 80117e6:	73fb      	strb	r3, [r7, #15]
                break;
 80117e8:	e011      	b.n	801180e <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 80117ea:	230b      	movs	r3, #11
 80117ec:	73fb      	strb	r3, [r7, #15]
                break;
 80117ee:	e00e      	b.n	801180e <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 80117f0:	230c      	movs	r3, #12
 80117f2:	73fb      	strb	r3, [r7, #15]
                break;
 80117f4:	e00b      	b.n	801180e <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 80117f6:	230d      	movs	r3, #13
 80117f8:	73fb      	strb	r3, [r7, #15]
                break;
 80117fa:	e008      	b.n	801180e <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 80117fc:	230e      	movs	r3, #14
 80117fe:	73fb      	strb	r3, [r7, #15]
                break;
 8011800:	e005      	b.n	801180e <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 8011802:	230f      	movs	r3, #15
 8011804:	73fb      	strb	r3, [r7, #15]
                break;
 8011806:	e002      	b.n	801180e <hex_char_to_num+0x7e>
            default:
                result = 0;
 8011808:	2300      	movs	r3, #0
 801180a:	73fb      	strb	r3, [r7, #15]
                break;
 801180c:	bf00      	nop
        }
    }

    return result;
 801180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011810:	4618      	mov	r0, r3
 8011812:	3714      	adds	r7, #20
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr

0801181c <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b088      	sub	sp, #32
 8011820:	af00      	add	r7, sp, #0
 8011822:	60f8      	str	r0, [r7, #12]
 8011824:	60b9      	str	r1, [r7, #8]
 8011826:	4613      	mov	r3, r2
 8011828:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_init == NULL) return NULL;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801182e:	2b00      	cmp	r3, #0
 8011830:	d101      	bne.n	8011836 <lv_draw_layer_create+0x1a>
 8011832:	2300      	movs	r3, #0
 8011834:	e044      	b.n	80118c0 <lv_draw_layer_create+0xa4>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801183a:	4618      	mov	r0, r3
 801183c:	f010 fbda 	bl	8021ff4 <lv_mem_alloc>
 8011840:	61f8      	str	r0, [r7, #28]
    LV_ASSERT_MALLOC(layer_ctx);
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d100      	bne.n	801184a <lv_draw_layer_create+0x2e>
 8011848:	e7fe      	b.n	8011848 <lv_draw_layer_create+0x2c>
    if(layer_ctx == NULL) {
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d101      	bne.n	8011854 <lv_draw_layer_create+0x38>
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
 8011850:	2300      	movs	r3, #0
 8011852:	e035      	b.n	80118c0 <lv_draw_layer_create+0xa4>
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011858:	4619      	mov	r1, r3
 801185a:	69f8      	ldr	r0, [r7, #28]
 801185c:	f010 fffe 	bl	802285c <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8011860:	f7fd f858 	bl	800e914 <_lv_refr_get_disp_refreshing>
 8011864:	61b8      	str	r0, [r7, #24]
    layer_ctx->original.buf = draw_ctx->buf;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	681a      	ldr	r2, [r3, #0]
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	621a      	str	r2, [r3, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	685a      	ldr	r2, [r3, #4]
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	61da      	str	r2, [r3, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	689a      	ldr	r2, [r3, #8]
 801187a:	69fb      	ldr	r3, [r7, #28]
 801187c:	619a      	str	r2, [r3, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 801187e:	69bb      	ldr	r3, [r7, #24]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	7c1b      	ldrb	r3, [r3, #16]
 8011884:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011888:	b2db      	uxtb	r3, r3
 801188a:	2b00      	cmp	r3, #0
 801188c:	bf14      	ite	ne
 801188e:	2301      	movne	r3, #1
 8011890:	2300      	moveq	r3, #0
 8011892:	b2da      	uxtb	r2, r3
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	68ba      	ldr	r2, [r7, #8]
 801189e:	6810      	ldr	r0, [r2, #0]
 80118a0:	6851      	ldr	r1, [r2, #4]
 80118a2:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118a8:	79fa      	ldrb	r2, [r7, #7]
 80118aa:	69f9      	ldr	r1, [r7, #28]
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	4798      	blx	r3
 80118b0:	6178      	str	r0, [r7, #20]
    if(NULL == init_layer_ctx) {
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d102      	bne.n	80118be <lv_draw_layer_create+0xa2>
        lv_mem_free(layer_ctx);
 80118b8:	69f8      	ldr	r0, [r7, #28]
 80118ba:	f010 fbcb 	bl	8022054 <lv_mem_free>
    }
    return init_layer_ctx;
 80118be:	697b      	ldr	r3, [r7, #20]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3720      	adds	r7, #32
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	60b9      	str	r1, [r7, #8]
 80118d2:	4613      	mov	r3, r2
 80118d4:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d005      	beq.n	80118ea <lv_draw_layer_adjust+0x22>
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118e2:	79fa      	ldrb	r2, [r7, #7]
 80118e4:	68b9      	ldr	r1, [r7, #8]
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	4798      	blx	r3
}
 80118ea:	bf00      	nop
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}

080118f2 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b084      	sub	sp, #16
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	60f8      	str	r0, [r7, #12]
 80118fa:	60b9      	str	r1, [r7, #8]
 80118fc:	607a      	str	r2, [r7, #4]
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011902:	2b00      	cmp	r3, #0
 8011904:	d005      	beq.n	8011912 <lv_draw_layer_blend+0x20>
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	68b9      	ldr	r1, [r7, #8]
 801190e:	68f8      	ldr	r0, [r7, #12]
 8011910:	4798      	blx	r3
}
 8011912:	bf00      	nop
 8011914:	3710      	adds	r7, #16
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}

0801191a <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 801191a:	b580      	push	{r7, lr}
 801191c:	b084      	sub	sp, #16
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
 8011922:	6039      	str	r1, [r7, #0]

    lv_draw_wait_for_finish(draw_ctx);
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f7fe fcb9 	bl	801029c <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	6a1a      	ldr	r2, [r3, #32]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	69da      	ldr	r2, [r3, #28]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	699a      	ldr	r2, [r3, #24]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8011942:	f7fc ffe7 	bl	800e914 <_lv_refr_get_disp_refreshing>
 8011946:	60f8      	str	r0, [r7, #12]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8011952:	7c13      	ldrb	r3, [r2, #16]
 8011954:	f361 1386 	bfi	r3, r1, #6, #1
 8011958:	7413      	strb	r3, [r2, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801195e:	2b00      	cmp	r3, #0
 8011960:	d004      	beq.n	801196c <lv_draw_layer_destroy+0x52>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011966:	6839      	ldr	r1, [r7, #0]
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 801196c:	6838      	ldr	r0, [r7, #0]
 801196e:	f010 fb71 	bl	8022054 <lv_mem_free>
}
 8011972:	bf00      	nop
 8011974:	3710      	adds	r7, #16
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801197a:	b480      	push	{r7}
 801197c:	b083      	sub	sp, #12
 801197e:	af00      	add	r7, sp, #0
 8011980:	4603      	mov	r3, r0
 8011982:	71fb      	strb	r3, [r7, #7]
 8011984:	460b      	mov	r3, r1
 8011986:	71bb      	strb	r3, [r7, #6]
 8011988:	4613      	mov	r3, r2
 801198a:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801198c:	797b      	ldrb	r3, [r7, #5]
 801198e:	09db      	lsrs	r3, r3, #7
 8011990:	b2da      	uxtb	r2, r3
 8011992:	79bb      	ldrb	r3, [r7, #6]
 8011994:	09db      	lsrs	r3, r3, #7
 8011996:	b2db      	uxtb	r3, r3
 8011998:	4313      	orrs	r3, r2
 801199a:	b2da      	uxtb	r2, r3
 801199c:	79fb      	ldrb	r3, [r7, #7]
 801199e:	09db      	lsrs	r3, r3, #7
 80119a0:	b2db      	uxtb	r3, r3
 80119a2:	4313      	orrs	r3, r2
 80119a4:	b2db      	uxtb	r3, r3
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	370c      	adds	r7, #12
 80119aa:	46bd      	mov	sp, r7
 80119ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b0:	4770      	bx	lr

080119b2 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 80119b2:	b580      	push	{r7, lr}
 80119b4:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80119b6:	2200      	movs	r2, #0
 80119b8:	2100      	movs	r1, #0
 80119ba:	2000      	movs	r0, #0
 80119bc:	f7ff ffdd 	bl	801197a <lv_color_make>
 80119c0:	4603      	mov	r3, r0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	bd80      	pop	{r7, pc}

080119c6 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 80119c6:	b590      	push	{r4, r7, lr}
 80119c8:	b083      	sub	sp, #12
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 80119ce:	210a      	movs	r1, #10
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f010 ff43 	bl	802285c <lv_memset_00>
    dsc->width = 1;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2201      	movs	r2, #1
 80119da:	805a      	strh	r2, [r3, #2]
    dsc->opa = LV_OPA_COVER;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	22ff      	movs	r2, #255	; 0xff
 80119e0:	721a      	strb	r2, [r3, #8]
    dsc->color = lv_color_black();
 80119e2:	687c      	ldr	r4, [r7, #4]
 80119e4:	f7ff ffe5 	bl	80119b2 <lv_color_black>
 80119e8:	7020      	strb	r0, [r4, #0]
}
 80119ea:	bf00      	nop
 80119ec:	370c      	adds	r7, #12
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd90      	pop	{r4, r7, pc}

080119f2 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 80119f2:	b590      	push	{r4, r7, lr}
 80119f4:	b085      	sub	sp, #20
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	60f8      	str	r0, [r7, #12]
 80119fa:	60b9      	str	r1, [r7, #8]
 80119fc:	607a      	str	r2, [r7, #4]
 80119fe:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00b      	beq.n	8011a22 <lv_draw_line+0x30>
    if(dsc->opa <= LV_OPA_MIN) return;
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	7a1b      	ldrb	r3, [r3, #8]
 8011a0e:	2b02      	cmp	r3, #2
 8011a10:	d909      	bls.n	8011a26 <lv_draw_line+0x34>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	6a1c      	ldr	r4, [r3, #32]
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	687a      	ldr	r2, [r7, #4]
 8011a1a:	68b9      	ldr	r1, [r7, #8]
 8011a1c:	68f8      	ldr	r0, [r7, #12]
 8011a1e:	47a0      	blx	r4
 8011a20:	e002      	b.n	8011a28 <lv_draw_line+0x36>
    if(dsc->width == 0) return;
 8011a22:	bf00      	nop
 8011a24:	e000      	b.n	8011a28 <lv_draw_line+0x36>
    if(dsc->opa <= LV_OPA_MIN) return;
 8011a26:	bf00      	nop
}
 8011a28:	3714      	adds	r7, #20
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd90      	pop	{r4, r7, pc}

08011a2e <lv_area_copy>:
{
 8011a2e:	b480      	push	{r7}
 8011a30:	b083      	sub	sp, #12
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
 8011a36:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	80da      	strh	r2, [r3, #6]
}
 8011a60:	bf00      	nop
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <lv_area_get_width>:
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	1ad3      	subs	r3, r2, r3
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	3301      	adds	r3, #1
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	b21b      	sxth	r3, r3
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8011a9a:	b480      	push	{r7}
 8011a9c:	b083      	sub	sp, #12
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	1ad3      	subs	r3, r2, r3
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	b21b      	sxth	r3, r3
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b085      	sub	sp, #20
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	73fb      	strb	r3, [r7, #15]
 8011ad6:	e008      	b.n	8011aea <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8011ad8:	7bfb      	ldrb	r3, [r7, #15]
 8011ada:	4a13      	ldr	r2, [pc, #76]	; (8011b28 <lv_draw_mask_add+0x60>)
 8011adc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d006      	beq.n	8011af2 <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011ae4:	7bfb      	ldrb	r3, [r7, #15]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	73fb      	strb	r3, [r7, #15]
 8011aea:	7bfb      	ldrb	r3, [r7, #15]
 8011aec:	2b0f      	cmp	r3, #15
 8011aee:	d9f3      	bls.n	8011ad8 <lv_draw_mask_add+0x10>
 8011af0:	e000      	b.n	8011af4 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8011af2:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 8011af4:	7bfb      	ldrb	r3, [r7, #15]
 8011af6:	2b0f      	cmp	r3, #15
 8011af8:	d902      	bls.n	8011b00 <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 8011afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011afe:	e00c      	b.n	8011b1a <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
 8011b02:	4909      	ldr	r1, [pc, #36]	; (8011b28 <lv_draw_mask_add+0x60>)
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8011b0a:	7bfb      	ldrb	r3, [r7, #15]
 8011b0c:	4a06      	ldr	r2, [pc, #24]	; (8011b28 <lv_draw_mask_add+0x60>)
 8011b0e:	00db      	lsls	r3, r3, #3
 8011b10:	4413      	add	r3, r2
 8011b12:	683a      	ldr	r2, [r7, #0]
 8011b14:	605a      	str	r2, [r3, #4]

    return i;
 8011b16:	7bfb      	ldrb	r3, [r7, #15]
 8011b18:	b21b      	sxth	r3, r3
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3714      	adds	r7, #20
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	200009d0 	.word	0x200009d0

08011b2c <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 8011b2c:	b590      	push	{r4, r7, lr}
 8011b2e:	b08b      	sub	sp, #44	; 0x2c
 8011b30:	af02      	add	r7, sp, #8
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	4608      	mov	r0, r1
 8011b36:	4611      	mov	r1, r2
 8011b38:	461a      	mov	r2, r3
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	817b      	strh	r3, [r7, #10]
 8011b3e:	460b      	mov	r3, r1
 8011b40:	813b      	strh	r3, [r7, #8]
 8011b42:	4613      	mov	r3, r2
 8011b44:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 8011b46:	2300      	movs	r3, #0
 8011b48:	77fb      	strb	r3, [r7, #31]
    _lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 8011b4a:	4b19      	ldr	r3, [pc, #100]	; (8011bb0 <lv_draw_mask_apply+0x84>)
 8011b4c:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 8011b4e:	e021      	b.n	8011b94 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 8011b56:	2301      	movs	r3, #1
 8011b58:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	681c      	ldr	r4, [r3, #0]
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011b66:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011b6a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011b6e:	9300      	str	r3, [sp, #0]
 8011b70:	4603      	mov	r3, r0
 8011b72:	68f8      	ldr	r0, [r7, #12]
 8011b74:	47a0      	blx	r4
 8011b76:	4603      	mov	r3, r0
 8011b78:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8011b7a:	7cfb      	ldrb	r3, [r7, #19]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d101      	bne.n	8011b84 <lv_draw_mask_apply+0x58>
 8011b80:	2300      	movs	r3, #0
 8011b82:	e011      	b.n	8011ba8 <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8011b84:	7cfb      	ldrb	r3, [r7, #19]
 8011b86:	2b02      	cmp	r3, #2
 8011b88:	d101      	bne.n	8011b8e <lv_draw_mask_apply+0x62>
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	77fb      	strb	r3, [r7, #31]

        m++;
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	3308      	adds	r3, #8
 8011b92:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 8011b94:	69bb      	ldr	r3, [r7, #24]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1d9      	bne.n	8011b50 <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8011b9c:	7ffb      	ldrb	r3, [r7, #31]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d001      	beq.n	8011ba6 <lv_draw_mask_apply+0x7a>
 8011ba2:	2302      	movs	r3, #2
 8011ba4:	e000      	b.n	8011ba8 <lv_draw_mask_apply+0x7c>
 8011ba6:	2301      	movs	r3, #1
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3724      	adds	r7, #36	; 0x24
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd90      	pop	{r4, r7, pc}
 8011bb0:	200009d0 	.word	0x200009d0

08011bb4 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b085      	sub	sp, #20
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	4603      	mov	r3, r0
 8011bbc:	80fb      	strh	r3, [r7, #6]
    _lv_draw_mask_common_dsc_t * p = NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 8011bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bca:	d012      	beq.n	8011bf2 <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 8011bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bd0:	4a0b      	ldr	r2, [pc, #44]	; (8011c00 <lv_draw_mask_remove_id+0x4c>)
 8011bd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011bd6:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8011bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bdc:	4a08      	ldr	r2, [pc, #32]	; (8011c00 <lv_draw_mask_remove_id+0x4c>)
 8011bde:	2100      	movs	r1, #0
 8011be0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8011be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011be8:	4a05      	ldr	r2, [pc, #20]	; (8011c00 <lv_draw_mask_remove_id+0x4c>)
 8011bea:	00db      	lsls	r3, r3, #3
 8011bec:	4413      	add	r3, r2
 8011bee:	2200      	movs	r2, #0
 8011bf0:	605a      	str	r2, [r3, #4]
    }

    return p;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3714      	adds	r7, #20
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	200009d0 	.word	0x200009d0

08011c04 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b084      	sub	sp, #16
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * p = NULL;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c10:	2300      	movs	r3, #0
 8011c12:	72fb      	strb	r3, [r7, #11]
 8011c14:	e014      	b.n	8011c40 <lv_draw_mask_remove_custom+0x3c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8011c16:	7afb      	ldrb	r3, [r7, #11]
 8011c18:	4a0d      	ldr	r2, [pc, #52]	; (8011c50 <lv_draw_mask_remove_custom+0x4c>)
 8011c1a:	00db      	lsls	r3, r3, #3
 8011c1c:	4413      	add	r3, r2
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d109      	bne.n	8011c3a <lv_draw_mask_remove_custom+0x36>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011c26:	7afb      	ldrb	r3, [r7, #11]
 8011c28:	4a09      	ldr	r2, [pc, #36]	; (8011c50 <lv_draw_mask_remove_custom+0x4c>)
 8011c2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c2e:	60fb      	str	r3, [r7, #12]
            lv_draw_mask_remove_id(i);
 8011c30:	7afb      	ldrb	r3, [r7, #11]
 8011c32:	b21b      	sxth	r3, r3
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7ff ffbd 	bl	8011bb4 <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c3a:	7afb      	ldrb	r3, [r7, #11]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	72fb      	strb	r3, [r7, #11]
 8011c40:	7afb      	ldrb	r3, [r7, #11]
 8011c42:	2b0f      	cmp	r3, #15
 8011c44:	d9e7      	bls.n	8011c16 <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 8011c46:	68fb      	ldr	r3, [r7, #12]
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3710      	adds	r7, #16
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	200009d0 	.word	0x200009d0

08011c54 <lv_draw_mask_free_param>:
 * Needs to be called only in special cases when the mask is not added by `lv_draw_mask_add`
 * and not removed by `lv_draw_mask_remove_id` or `lv_draw_mask_remove_custom`
 * @param p pointer to a mask parameter
 */
void lv_draw_mask_free_param(void * p)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b086      	sub	sp, #24
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * pdsc = p;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	617b      	str	r3, [r7, #20]
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	791b      	ldrb	r3, [r3, #4]
 8011c64:	2b02      	cmp	r3, #2
 8011c66:	d11c      	bne.n	8011ca2 <lv_draw_mask_free_param+0x4e>
        lv_draw_mask_radius_param_t * radius_p = (lv_draw_mask_radius_param_t *) p;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	60fb      	str	r3, [r7, #12]
        if(radius_p->circle) {
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	695b      	ldr	r3, [r3, #20]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d021      	beq.n	8011cb8 <lv_draw_mask_free_param+0x64>
            if(radius_p->circle->life < 0) {
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	695b      	ldr	r3, [r3, #20]
 8011c78:	691b      	ldr	r3, [r3, #16]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	da0b      	bge.n	8011c96 <lv_draw_mask_free_param+0x42>
                lv_mem_free(radius_p->circle->cir_opa);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	695b      	ldr	r3, [r3, #20]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	4618      	mov	r0, r3
 8011c86:	f010 f9e5 	bl	8022054 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	695b      	ldr	r3, [r3, #20]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f010 f9e0 	bl	8022054 <lv_mem_free>
    }
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
        lv_mem_free(poly_p->cfg.points);
    }
}
 8011c94:	e010      	b.n	8011cb8 <lv_draw_mask_free_param+0x64>
                radius_p->circle->used_cnt--;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	695b      	ldr	r3, [r3, #20]
 8011c9a:	695a      	ldr	r2, [r3, #20]
 8011c9c:	3a01      	subs	r2, #1
 8011c9e:	615a      	str	r2, [r3, #20]
}
 8011ca0:	e00a      	b.n	8011cb8 <lv_draw_mask_free_param+0x64>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	791b      	ldrb	r3, [r3, #4]
 8011ca6:	2b05      	cmp	r3, #5
 8011ca8:	d106      	bne.n	8011cb8 <lv_draw_mask_free_param+0x64>
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	613b      	str	r3, [r7, #16]
        lv_mem_free(poly_p->cfg.points);
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	689b      	ldr	r3, [r3, #8]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f010 f9ce 	bl	8022054 <lv_mem_free>
}
 8011cb8:	bf00      	nop
 8011cba:	3718      	adds	r7, #24
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <_lv_draw_mask_cleanup>:

void _lv_draw_mask_cleanup(void)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	71fb      	strb	r3, [r7, #7]
 8011cca:	e022      	b.n	8011d12 <_lv_draw_mask_cleanup+0x52>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 8011ccc:	79fa      	ldrb	r2, [r7, #7]
 8011cce:	4915      	ldr	r1, [pc, #84]	; (8011d24 <_lv_draw_mask_cleanup+0x64>)
 8011cd0:	4613      	mov	r3, r2
 8011cd2:	00db      	lsls	r3, r3, #3
 8011cd4:	1a9b      	subs	r3, r3, r2
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	440b      	add	r3, r1
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00a      	beq.n	8011cf6 <_lv_draw_mask_cleanup+0x36>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 8011ce0:	79fa      	ldrb	r2, [r7, #7]
 8011ce2:	4910      	ldr	r1, [pc, #64]	; (8011d24 <_lv_draw_mask_cleanup+0x64>)
 8011ce4:	4613      	mov	r3, r2
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	1a9b      	subs	r3, r3, r2
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	440b      	add	r3, r1
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f010 f9af 	bl	8022054 <lv_mem_free>
        }
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8011cf6:	79fa      	ldrb	r2, [r7, #7]
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	1a9b      	subs	r3, r3, r2
 8011cfe:	009b      	lsls	r3, r3, #2
 8011d00:	4a08      	ldr	r2, [pc, #32]	; (8011d24 <_lv_draw_mask_cleanup+0x64>)
 8011d02:	4413      	add	r3, r2
 8011d04:	211c      	movs	r1, #28
 8011d06:	4618      	mov	r0, r3
 8011d08:	f010 fda8 	bl	802285c <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8011d0c:	79fb      	ldrb	r3, [r7, #7]
 8011d0e:	3301      	adds	r3, #1
 8011d10:	71fb      	strb	r3, [r7, #7]
 8011d12:	79fb      	ldrb	r3, [r7, #7]
 8011d14:	2b03      	cmp	r3, #3
 8011d16:	d9d9      	bls.n	8011ccc <_lv_draw_mask_cleanup+0xc>
    }
}
 8011d18:	bf00      	nop
 8011d1a:	bf00      	nop
 8011d1c:	3708      	adds	r7, #8
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	20000960 	.word	0x20000960

08011d28 <lv_draw_mask_is_any>:
    }
    return cnt;
}

bool lv_draw_mask_is_any(const lv_area_t * a)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b086      	sub	sp, #24
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d107      	bne.n	8011d46 <lv_draw_mask_is_any+0x1e>
 8011d36:	4b2a      	ldr	r3, [pc, #168]	; (8011de0 <lv_draw_mask_is_any+0xb8>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	bf14      	ite	ne
 8011d3e:	2301      	movne	r3, #1
 8011d40:	2300      	moveq	r3, #0
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	e048      	b.n	8011dd8 <lv_draw_mask_is_any+0xb0>

    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011d46:	2300      	movs	r3, #0
 8011d48:	75fb      	strb	r3, [r7, #23]
 8011d4a:	e041      	b.n	8011dd0 <lv_draw_mask_is_any+0xa8>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011d4c:	7dfb      	ldrb	r3, [r7, #23]
 8011d4e:	4a24      	ldr	r2, [pc, #144]	; (8011de0 <lv_draw_mask_is_any+0xb8>)
 8011d50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011d54:	613b      	str	r3, [r7, #16]
        if(comm_param == NULL) continue;
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d035      	beq.n	8011dc8 <lv_draw_mask_is_any+0xa0>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	791b      	ldrb	r3, [r3, #4]
 8011d60:	2b02      	cmp	r3, #2
 8011d62:	d12f      	bne.n	8011dc4 <lv_draw_mask_is_any+0x9c>
            lv_draw_mask_radius_param_t * radius_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011d64:	7dfb      	ldrb	r3, [r7, #23]
 8011d66:	4a1e      	ldr	r2, [pc, #120]	; (8011de0 <lv_draw_mask_is_any+0xb8>)
 8011d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011d6c:	60fb      	str	r3, [r7, #12]
            if(radius_param->cfg.outer) {
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	7c9b      	ldrb	r3, [r3, #18]
 8011d72:	f003 0301 	and.w	r3, r3, #1
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d011      	beq.n	8011da0 <lv_draw_mask_is_any+0x78>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f103 0108 	add.w	r1, r3, #8
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011d88:	461a      	mov	r2, r3
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f00f f894 	bl	8020eb8 <_lv_area_is_out>
 8011d90:	4603      	mov	r3, r0
 8011d92:	f083 0301 	eor.w	r3, r3, #1
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d016      	beq.n	8011dca <lv_draw_mask_is_any+0xa2>
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	e01b      	b.n	8011dd8 <lv_draw_mask_is_any+0xb0>
            }
            else {
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f103 0108 	add.w	r1, r3, #8
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011dac:	461a      	mov	r2, r3
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f00e ffe4 	bl	8020d7c <_lv_area_is_in>
 8011db4:	4603      	mov	r3, r0
 8011db6:	f083 0301 	eor.w	r3, r3, #1
 8011dba:	b2db      	uxtb	r3, r3
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d004      	beq.n	8011dca <lv_draw_mask_is_any+0xa2>
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e009      	b.n	8011dd8 <lv_draw_mask_is_any+0xb0>
            }
        }
        else {
            return true;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e007      	b.n	8011dd8 <lv_draw_mask_is_any+0xb0>
        if(comm_param == NULL) continue;
 8011dc8:	bf00      	nop
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011dca:	7dfb      	ldrb	r3, [r7, #23]
 8011dcc:	3301      	adds	r3, #1
 8011dce:	75fb      	strb	r3, [r7, #23]
 8011dd0:	7dfb      	ldrb	r3, [r7, #23]
 8011dd2:	2b0f      	cmp	r3, #15
 8011dd4:	d9ba      	bls.n	8011d4c <lv_draw_mask_is_any+0x24>
        }
    }

    return false;
 8011dd6:	2300      	movs	r3, #0

}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3718      	adds	r7, #24
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	200009d0 	.word	0x200009d0

08011de4 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b08a      	sub	sp, #40	; 0x28
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	4608      	mov	r0, r1
 8011dee:	4611      	mov	r1, r2
 8011df0:	461a      	mov	r2, r3
 8011df2:	4603      	mov	r3, r0
 8011df4:	817b      	strh	r3, [r7, #10]
 8011df6:	460b      	mov	r3, r1
 8011df8:	813b      	strh	r3, [r7, #8]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	80fb      	strh	r3, [r7, #6]
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8011dfe:	212c      	movs	r1, #44	; 0x2c
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	f010 fd2b 	bl	802285c <lv_memset_00>

    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8011e06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011e0a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d10f      	bne.n	8011e32 <lv_draw_mask_line_points_init+0x4e>
 8011e12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011e16:	2b03      	cmp	r3, #3
 8011e18:	d10b      	bne.n	8011e32 <lv_draw_mask_line_points_init+0x4e>
        p1y--;
 8011e1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	3b01      	subs	r3, #1
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	813b      	strh	r3, [r7, #8]
        p2y--;
 8011e26:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    if(p1y > p2y) {
 8011e32:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011e36:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	dd0b      	ble.n	8011e56 <lv_draw_mask_line_points_init+0x72>
        lv_coord_t t;
        t = p2x;
 8011e3e:	88fb      	ldrh	r3, [r7, #6]
 8011e40:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 8011e42:	897b      	ldrh	r3, [r7, #10]
 8011e44:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 8011e46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e48:	817b      	strh	r3, [r7, #10]

        t = p2y;
 8011e4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011e4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 8011e4e:	893b      	ldrh	r3, [r7, #8]
 8011e50:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 8011e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e54:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	897a      	ldrh	r2, [r7, #10]
 8011e5a:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	893a      	ldrh	r2, [r7, #8]
 8011e60:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	88fa      	ldrh	r2, [r7, #6]
 8011e66:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011e6c:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 8011e6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011e72:	f003 0303 	and.w	r3, r3, #3
 8011e76:	b2d9      	uxtb	r1, r3
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	7c13      	ldrb	r3, [r2, #16]
 8011e7c:	f361 0301 	bfi	r3, r1, #0, #2
 8011e80:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	897a      	ldrh	r2, [r7, #10]
 8011e86:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	893a      	ldrh	r2, [r7, #8]
 8011e8c:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8011e8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011e92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011e96:	1ad3      	subs	r3, r2, r3
 8011e98:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011e9c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011ea0:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8011ea4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011ea8:	1acb      	subs	r3, r1, r3
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	bfb8      	it	lt
 8011eae:	425b      	neglt	r3, r3
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	bfcc      	ite	gt
 8011eb4:	2301      	movgt	r3, #1
 8011eb6:	2300      	movle	r3, #0
 8011eb8:	b2d9      	uxtb	r1, r3
 8011eba:	68fa      	ldr	r2, [r7, #12]
 8011ebc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011ec0:	f361 0300 	bfi	r3, r1, #0, #1
 8011ec4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	4a63      	ldr	r2, [pc, #396]	; (8012064 <lv_draw_mask_line_points_init+0x280>)
 8011ed8:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	2200      	movs	r2, #0
 8011ede:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 8011ee0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011ee4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011ee8:	1ad3      	subs	r3, r2, r3
 8011eea:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 8011eec:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8011ef0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011ef4:	1ad3      	subs	r3, r2, r3
 8011ef6:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011efe:	f003 0301 	and.w	r3, r3, #1
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d024      	beq.n	8011f52 <lv_draw_mask_line_points_init+0x16e>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8011f08:	6a3b      	ldr	r3, [r7, #32]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00c      	beq.n	8011f28 <lv_draw_mask_line_points_init+0x144>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8011f0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011f12:	6a3b      	ldr	r3, [r7, #32]
 8011f14:	fb92 f3f3 	sdiv	r3, r2, r3
 8011f18:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	69fa      	ldr	r2, [r7, #28]
 8011f1e:	fb02 f303 	mul.w	r3, r2, r3
 8011f22:	129a      	asrs	r2, r3, #10
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 8011f28:	69fb      	ldr	r3, [r7, #28]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d00c      	beq.n	8011f48 <lv_draw_mask_line_points_init+0x164>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011f2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8011f38:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	6a3a      	ldr	r2, [r7, #32]
 8011f3e:	fb02 f303 	mul.w	r3, r2, r3
 8011f42:	129a      	asrs	r2, r3, #10
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	69da      	ldr	r2, [r3, #28]
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	621a      	str	r2, [r3, #32]
 8011f50:	e023      	b.n	8011f9a <lv_draw_mask_line_points_init+0x1b6>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d00c      	beq.n	8011f72 <lv_draw_mask_line_points_init+0x18e>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011f58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011f5c:	69fb      	ldr	r3, [r7, #28]
 8011f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011f62:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 8011f64:	69bb      	ldr	r3, [r7, #24]
 8011f66:	6a3a      	ldr	r2, [r7, #32]
 8011f68:	fb02 f303 	mul.w	r3, r2, r3
 8011f6c:	129a      	asrs	r2, r3, #10
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 8011f72:	6a3b      	ldr	r3, [r7, #32]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d00c      	beq.n	8011f92 <lv_draw_mask_line_points_init+0x1ae>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011f78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011f7c:	6a3b      	ldr	r3, [r7, #32]
 8011f7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011f82:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8011f84:	69bb      	ldr	r3, [r7, #24]
 8011f86:	69fa      	ldr	r2, [r7, #28]
 8011f88:	fb02 f303 	mul.w	r3, r2, r3
 8011f8c:	129a      	asrs	r2, r3, #10
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	699a      	ldr	r2, [r3, #24]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	7c1b      	ldrb	r3, [r3, #16]
 8011f9e:	f003 0303 	and.w	r3, r3, #3
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d107      	bne.n	8011fb8 <lv_draw_mask_line_points_init+0x1d4>
 8011fa8:	68fa      	ldr	r2, [r7, #12]
 8011faa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011fae:	f36f 0341 	bfc	r3, #1, #1
 8011fb2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011fb6:	e043      	b.n	8012040 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	7c1b      	ldrb	r3, [r3, #16]
 8011fbc:	f003 0303 	and.w	r3, r3, #3
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	2b01      	cmp	r3, #1
 8011fc4:	d107      	bne.n	8011fd6 <lv_draw_mask_line_points_init+0x1f2>
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011fcc:	f043 0302 	orr.w	r3, r3, #2
 8011fd0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011fd4:	e034      	b.n	8012040 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	7c1b      	ldrb	r3, [r3, #16]
 8011fda:	f003 0303 	and.w	r3, r3, #3
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	2b02      	cmp	r3, #2
 8011fe2:	d113      	bne.n	801200c <lv_draw_mask_line_points_init+0x228>
        if(param->steep > 0) param->inv = 1;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	6a1b      	ldr	r3, [r3, #32]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	dd07      	ble.n	8011ffc <lv_draw_mask_line_points_init+0x218>
 8011fec:	68fa      	ldr	r2, [r7, #12]
 8011fee:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011ff2:	f043 0302 	orr.w	r3, r3, #2
 8011ff6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011ffa:	e021      	b.n	8012040 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 0;
 8011ffc:	68fa      	ldr	r2, [r7, #12]
 8011ffe:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8012002:	f36f 0341 	bfc	r3, #1, #1
 8012006:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801200a:	e019      	b.n	8012040 <lv_draw_mask_line_points_init+0x25c>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	7c1b      	ldrb	r3, [r3, #16]
 8012010:	f003 0303 	and.w	r3, r3, #3
 8012014:	b2db      	uxtb	r3, r3
 8012016:	2b03      	cmp	r3, #3
 8012018:	d112      	bne.n	8012040 <lv_draw_mask_line_points_init+0x25c>
        if(param->steep > 0) param->inv = 0;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	6a1b      	ldr	r3, [r3, #32]
 801201e:	2b00      	cmp	r3, #0
 8012020:	dd07      	ble.n	8012032 <lv_draw_mask_line_points_init+0x24e>
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8012028:	f36f 0341 	bfc	r3, #1, #1
 801202c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8012030:	e006      	b.n	8012040 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 1;
 8012032:	68fa      	ldr	r2, [r7, #12]
 8012034:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8012038:	f043 0302 	orr.w	r3, r3, #2
 801203c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6a1b      	ldr	r3, [r3, #32]
 8012044:	109a      	asrs	r2, r3, #2
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	6a1b      	ldr	r3, [r3, #32]
 801204e:	2b00      	cmp	r3, #0
 8012050:	da04      	bge.n	801205c <lv_draw_mask_line_points_init+0x278>
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012056:	425a      	negs	r2, r3
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801205c:	bf00      	nop
 801205e:	3728      	adds	r7, #40	; 0x28
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	08012499 	.word	0x08012499

08012068 <lv_draw_mask_line_angle_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_angle_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t py, int16_t angle,
                                  lv_draw_mask_line_side_t side)
{
 8012068:	b590      	push	{r4, r7, lr}
 801206a:	b089      	sub	sp, #36	; 0x24
 801206c:	af02      	add	r7, sp, #8
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	4608      	mov	r0, r1
 8012072:	4611      	mov	r1, r2
 8012074:	461a      	mov	r2, r3
 8012076:	4603      	mov	r3, r0
 8012078:	817b      	strh	r3, [r7, #10]
 801207a:	460b      	mov	r3, r1
 801207c:	813b      	strh	r3, [r7, #8]
 801207e:	4613      	mov	r3, r2
 8012080:	80fb      	strh	r3, [r7, #6]
    /*Find an optimal degree.
     *lv_mask_line_points_init will swap the points to keep the smaller y in p1
     *Theoretically a line with `angle` or `angle+180` is the same only the points are swapped
     *Find the degree which keeps the origo in place*/
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 8012082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012086:	2bb4      	cmp	r3, #180	; 0xb4
 8012088:	dd03      	ble.n	8012092 <lv_draw_mask_line_angle_init+0x2a>
 801208a:	88fb      	ldrh	r3, [r7, #6]
 801208c:	3bb4      	subs	r3, #180	; 0xb4
 801208e:	b29b      	uxth	r3, r3
 8012090:	80fb      	strh	r3, [r7, #6]

    int32_t p2x;
    int32_t p2y;

    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 8012092:	88fb      	ldrh	r3, [r7, #6]
 8012094:	335a      	adds	r3, #90	; 0x5a
 8012096:	b29b      	uxth	r3, r3
 8012098:	b21b      	sxth	r3, r3
 801209a:	4618      	mov	r0, r3
 801209c:	f00f fe90 	bl	8021dc0 <lv_trigo_sin>
 80120a0:	4603      	mov	r3, r0
 80120a2:	115b      	asrs	r3, r3, #5
 80120a4:	b21b      	sxth	r3, r3
 80120a6:	461a      	mov	r2, r3
 80120a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80120ac:	4413      	add	r3, r2
 80120ae:	617b      	str	r3, [r7, #20]
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 80120b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120b4:	4618      	mov	r0, r3
 80120b6:	f00f fe83 	bl	8021dc0 <lv_trigo_sin>
 80120ba:	4603      	mov	r3, r0
 80120bc:	115b      	asrs	r3, r3, #5
 80120be:	b21b      	sxth	r3, r3
 80120c0:	461a      	mov	r2, r3
 80120c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80120c6:	4413      	add	r3, r2
 80120c8:	613b      	str	r3, [r7, #16]

    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	b21c      	sxth	r4, r3
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	b21b      	sxth	r3, r3
 80120d2:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80120d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80120da:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80120de:	9201      	str	r2, [sp, #4]
 80120e0:	9300      	str	r3, [sp, #0]
 80120e2:	4623      	mov	r3, r4
 80120e4:	4602      	mov	r2, r0
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f7ff fe7c 	bl	8011de4 <lv_draw_mask_line_points_init>
}
 80120ec:	bf00      	nop
 80120ee:	371c      	adds	r7, #28
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd90      	pop	{r4, r7, pc}

080120f4 <lv_draw_mask_angle_init>:
 * @param start_angle start angle in degrees. 0 deg on the right, 90 deg, on the bottom
 * @param end_angle end angle
 */
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,
                             lv_coord_t start_angle, lv_coord_t end_angle)
{
 80120f4:	b590      	push	{r4, r7, lr}
 80120f6:	b089      	sub	sp, #36	; 0x24
 80120f8:	af02      	add	r7, sp, #8
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	4608      	mov	r0, r1
 80120fe:	4611      	mov	r1, r2
 8012100:	461a      	mov	r2, r3
 8012102:	4603      	mov	r3, r0
 8012104:	817b      	strh	r3, [r7, #10]
 8012106:	460b      	mov	r3, r1
 8012108:	813b      	strh	r3, [r7, #8]
 801210a:	4613      	mov	r3, r2
 801210c:	80fb      	strh	r3, [r7, #6]
    lv_draw_mask_line_side_t start_side;
    lv_draw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
 801210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012112:	2b00      	cmp	r3, #0
 8012114:	da02      	bge.n	801211c <lv_draw_mask_angle_init+0x28>
        start_angle = 0;
 8012116:	2300      	movs	r3, #0
 8012118:	80fb      	strh	r3, [r7, #6]
 801211a:	e007      	b.n	801212c <lv_draw_mask_angle_init+0x38>
    else if(start_angle > 359)
 801211c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012120:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012124:	db02      	blt.n	801212c <lv_draw_mask_angle_init+0x38>
        start_angle = 359;
 8012126:	f240 1367 	movw	r3, #359	; 0x167
 801212a:	80fb      	strh	r3, [r7, #6]

    if(end_angle < 0)
 801212c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012130:	2b00      	cmp	r3, #0
 8012132:	da02      	bge.n	801213a <lv_draw_mask_angle_init+0x46>
        end_angle = 0;
 8012134:	2300      	movs	r3, #0
 8012136:	853b      	strh	r3, [r7, #40]	; 0x28
 8012138:	e007      	b.n	801214a <lv_draw_mask_angle_init+0x56>
    else if(end_angle > 359)
 801213a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801213e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012142:	db02      	blt.n	801214a <lv_draw_mask_angle_init+0x56>
        end_angle = 359;
 8012144:	f240 1367 	movw	r3, #359	; 0x167
 8012148:	853b      	strh	r3, [r7, #40]	; 0x28

    if(end_angle < start_angle) {
 801214a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 801214e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012152:	429a      	cmp	r2, r3
 8012154:	da0a      	bge.n	801216c <lv_draw_mask_angle_init+0x78>
        param->delta_deg = 360 - start_angle + end_angle;
 8012156:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012158:	88fb      	ldrh	r3, [r7, #6]
 801215a:	1ad3      	subs	r3, r2, r3
 801215c:	b29b      	uxth	r3, r3
 801215e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012162:	b29a      	uxth	r2, r3
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801216a:	e00b      	b.n	8012184 <lv_draw_mask_angle_init+0x90>
    }
    else {
        param->delta_deg = LV_ABS(end_angle - start_angle);
 801216c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8012170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	2b00      	cmp	r3, #0
 8012178:	bfb8      	it	lt
 801217a:	425b      	neglt	r3, r3
 801217c:	b29a      	uxth	r2, r3
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    }

    param->cfg.start_angle = start_angle;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	88fa      	ldrh	r2, [r7, #6]
 8012188:	819a      	strh	r2, [r3, #12]
    param->cfg.end_angle = end_angle;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801218e:	81da      	strh	r2, [r3, #14]
    param->cfg.vertex_p.x = vertex_x;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	897a      	ldrh	r2, [r7, #10]
 8012194:	811a      	strh	r2, [r3, #8]
    param->cfg.vertex_p.y = vertex_y;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	893a      	ldrh	r2, [r7, #8]
 801219a:	815a      	strh	r2, [r3, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	4a2f      	ldr	r2, [pc, #188]	; (801225c <lv_draw_mask_angle_init+0x168>)
 80121a0:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2201      	movs	r2, #1
 80121a6:	711a      	strb	r2, [r3, #4]

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");
 80121a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	db04      	blt.n	80121ba <lv_draw_mask_angle_init+0xc6>
 80121b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121b4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80121b8:	dd00      	ble.n	80121bc <lv_draw_mask_angle_init+0xc8>
 80121ba:	e7fe      	b.n	80121ba <lv_draw_mask_angle_init+0xc6>

    if(start_angle >= 0 && start_angle < 180) {
 80121bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	db06      	blt.n	80121d2 <lv_draw_mask_angle_init+0xde>
 80121c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121c8:	2bb3      	cmp	r3, #179	; 0xb3
 80121ca:	dc02      	bgt.n	80121d2 <lv_draw_mask_angle_init+0xde>
        start_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 80121cc:	2300      	movs	r3, #0
 80121ce:	75fb      	strb	r3, [r7, #23]
 80121d0:	e001      	b.n	80121d6 <lv_draw_mask_angle_init+0xe2>
    }
    else
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 80121d2:	2301      	movs	r3, #1
 80121d4:	75fb      	strb	r3, [r7, #23]

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");
 80121d6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80121da:	2b00      	cmp	r3, #0
 80121dc:	db04      	blt.n	80121e8 <lv_draw_mask_angle_init+0xf4>
 80121de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121e2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80121e6:	dd00      	ble.n	80121ea <lv_draw_mask_angle_init+0xf6>
 80121e8:	e7fe      	b.n	80121e8 <lv_draw_mask_angle_init+0xf4>

    if(end_angle >= 0 && end_angle < 180) {
 80121ea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	db06      	blt.n	8012200 <lv_draw_mask_angle_init+0x10c>
 80121f2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80121f6:	2bb3      	cmp	r3, #179	; 0xb3
 80121f8:	dc02      	bgt.n	8012200 <lv_draw_mask_angle_init+0x10c>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
 80121fa:	2301      	movs	r3, #1
 80121fc:	75bb      	strb	r3, [r7, #22]
 80121fe:	e00d      	b.n	801221c <lv_draw_mask_angle_init+0x128>
    }
    else if(end_angle >= 180 && end_angle < 360) {
 8012200:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012204:	2bb3      	cmp	r3, #179	; 0xb3
 8012206:	dd07      	ble.n	8012218 <lv_draw_mask_angle_init+0x124>
 8012208:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801220c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012210:	da02      	bge.n	8012218 <lv_draw_mask_angle_init+0x124>
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8012212:	2300      	movs	r3, #0
 8012214:	75bb      	strb	r3, [r7, #22]
 8012216:	e001      	b.n	801221c <lv_draw_mask_angle_init+0x128>
    }
    else
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8012218:	2301      	movs	r3, #1
 801221a:	75bb      	strb	r3, [r7, #22]

    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	f103 0010 	add.w	r0, r3, #16
 8012222:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8012226:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801222a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801222e:	7dfb      	ldrb	r3, [r7, #23]
 8012230:	9300      	str	r3, [sp, #0]
 8012232:	4623      	mov	r3, r4
 8012234:	f7ff ff18 	bl	8012068 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801223e:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8012242:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012246:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801224a:	7dbb      	ldrb	r3, [r7, #22]
 801224c:	9300      	str	r3, [sp, #0]
 801224e:	4623      	mov	r3, r4
 8012250:	f7ff ff0a 	bl	8012068 <lv_draw_mask_line_angle_init>
}
 8012254:	bf00      	nop
 8012256:	371c      	adds	r7, #28
 8012258:	46bd      	mov	sp, r7
 801225a:	bd90      	pop	{r4, r7, pc}
 801225c:	08012e19 	.word	0x08012e19

08012260 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b088      	sub	sp, #32
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	4611      	mov	r1, r2
 801226c:	461a      	mov	r2, r3
 801226e:	460b      	mov	r3, r1
 8012270:	80fb      	strh	r3, [r7, #6]
 8012272:	4613      	mov	r3, r2
 8012274:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 8012276:	68b8      	ldr	r0, [r7, #8]
 8012278:	f7ff fbf8 	bl	8011a6c <lv_area_get_width>
 801227c:	4603      	mov	r3, r0
 801227e:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 8012280:	68b8      	ldr	r0, [r7, #8]
 8012282:	f7ff fc0a 	bl	8011a9a <lv_area_get_height>
 8012286:	4603      	mov	r3, r0
 8012288:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MIN(w, h);
 801228a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801228e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012292:	4293      	cmp	r3, r2
 8012294:	bfa8      	it	ge
 8012296:	4613      	movge	r3, r2
 8012298:	b21b      	sxth	r3, r3
 801229a:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 801229c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	105b      	asrs	r3, r3, #1
 80122a4:	429a      	cmp	r2, r3
 80122a6:	dd02      	ble.n	80122ae <lv_draw_mask_radius_init+0x4e>
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	105b      	asrs	r3, r3, #1
 80122ac:	80fb      	strh	r3, [r7, #6]
    if(radius < 0) radius = 0;
 80122ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	da01      	bge.n	80122ba <lv_draw_mask_radius_init+0x5a>
 80122b6:	2300      	movs	r3, #0
 80122b8:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	3308      	adds	r3, #8
 80122be:	68b9      	ldr	r1, [r7, #8]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7ff fbb4 	bl	8011a2e <lv_area_copy>
    param->cfg.radius = radius;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	88fa      	ldrh	r2, [r7, #6]
 80122ca:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 80122cc:	7979      	ldrb	r1, [r7, #5]
 80122ce:	68fa      	ldr	r2, [r7, #12]
 80122d0:	7c93      	ldrb	r3, [r2, #18]
 80122d2:	f361 0300 	bfi	r3, r1, #0, #1
 80122d6:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	4a6d      	ldr	r2, [pc, #436]	; (8012490 <lv_draw_mask_radius_init+0x230>)
 80122dc:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2202      	movs	r2, #2
 80122e2:	711a      	strb	r2, [r3, #4]

    if(radius == 0) {
 80122e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d103      	bne.n	80122f4 <lv_draw_mask_radius_init+0x94>
        param->circle = NULL;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2200      	movs	r2, #0
 80122f0:	615a      	str	r2, [r3, #20]
        return;
 80122f2:	e0c9      	b.n	8012488 <lv_draw_mask_radius_init+0x228>
    }

    uint32_t i;

    /*Try to reuse a circle cache entry*/
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80122f4:	2300      	movs	r3, #0
 80122f6:	61fb      	str	r3, [r7, #28]
 80122f8:	e050      	b.n	801239c <lv_draw_mask_radius_init+0x13c>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 80122fa:	4966      	ldr	r1, [pc, #408]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 80122fc:	69fa      	ldr	r2, [r7, #28]
 80122fe:	4613      	mov	r3, r2
 8012300:	00db      	lsls	r3, r3, #3
 8012302:	1a9b      	subs	r3, r3, r2
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	440b      	add	r3, r1
 8012308:	3318      	adds	r3, #24
 801230a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801230e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012312:	429a      	cmp	r2, r3
 8012314:	d13f      	bne.n	8012396 <lv_draw_mask_radius_init+0x136>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8012316:	495f      	ldr	r1, [pc, #380]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 8012318:	69fa      	ldr	r2, [r7, #28]
 801231a:	4613      	mov	r3, r2
 801231c:	00db      	lsls	r3, r3, #3
 801231e:	1a9b      	subs	r3, r3, r2
 8012320:	009b      	lsls	r3, r3, #2
 8012322:	440b      	add	r3, r1
 8012324:	3314      	adds	r3, #20
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	1c59      	adds	r1, r3, #1
 801232a:	485a      	ldr	r0, [pc, #360]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 801232c:	69fa      	ldr	r2, [r7, #28]
 801232e:	4613      	mov	r3, r2
 8012330:	00db      	lsls	r3, r3, #3
 8012332:	1a9b      	subs	r3, r3, r2
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	4403      	add	r3, r0
 8012338:	3314      	adds	r3, #20
 801233a:	6019      	str	r1, [r3, #0]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 801233c:	4955      	ldr	r1, [pc, #340]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 801233e:	69fa      	ldr	r2, [r7, #28]
 8012340:	4613      	mov	r3, r2
 8012342:	00db      	lsls	r3, r3, #3
 8012344:	1a9b      	subs	r3, r3, r2
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	440b      	add	r3, r1
 801234a:	3310      	adds	r3, #16
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012352:	2a0f      	cmp	r2, #15
 8012354:	dd04      	ble.n	8012360 <lv_draw_mask_radius_init+0x100>
 8012356:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801235a:	1112      	asrs	r2, r2, #4
 801235c:	b212      	sxth	r2, r2
 801235e:	e000      	b.n	8012362 <lv_draw_mask_radius_init+0x102>
 8012360:	2201      	movs	r2, #1
 8012362:	4413      	add	r3, r2
 8012364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012368:	bfa8      	it	ge
 801236a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 801236e:	4619      	mov	r1, r3
 8012370:	4848      	ldr	r0, [pc, #288]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 8012372:	69fa      	ldr	r2, [r7, #28]
 8012374:	4613      	mov	r3, r2
 8012376:	00db      	lsls	r3, r3, #3
 8012378:	1a9b      	subs	r3, r3, r2
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	4403      	add	r3, r0
 801237e:	3310      	adds	r3, #16
 8012380:	6019      	str	r1, [r3, #0]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 8012382:	69fa      	ldr	r2, [r7, #28]
 8012384:	4613      	mov	r3, r2
 8012386:	00db      	lsls	r3, r3, #3
 8012388:	1a9b      	subs	r3, r3, r2
 801238a:	009b      	lsls	r3, r3, #2
 801238c:	4a41      	ldr	r2, [pc, #260]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 801238e:	441a      	add	r2, r3
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	615a      	str	r2, [r3, #20]
            return;
 8012394:	e078      	b.n	8012488 <lv_draw_mask_radius_init+0x228>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	3301      	adds	r3, #1
 801239a:	61fb      	str	r3, [r7, #28]
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	2b03      	cmp	r3, #3
 80123a0:	d9ab      	bls.n	80122fa <lv_draw_mask_radius_init+0x9a>
        }
    }

    /*If not found find a free entry with lowest life*/
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 80123a2:	2300      	movs	r3, #0
 80123a4:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80123a6:	2300      	movs	r3, #0
 80123a8:	61fb      	str	r3, [r7, #28]
 80123aa:	e02e      	b.n	801240a <lv_draw_mask_radius_init+0x1aa>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 80123ac:	4939      	ldr	r1, [pc, #228]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 80123ae:	69fa      	ldr	r2, [r7, #28]
 80123b0:	4613      	mov	r3, r2
 80123b2:	00db      	lsls	r3, r3, #3
 80123b4:	1a9b      	subs	r3, r3, r2
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	440b      	add	r3, r1
 80123ba:	3314      	adds	r3, #20
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d120      	bne.n	8012404 <lv_draw_mask_radius_init+0x1a4>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d108      	bne.n	80123da <lv_draw_mask_radius_init+0x17a>
 80123c8:	69fa      	ldr	r2, [r7, #28]
 80123ca:	4613      	mov	r3, r2
 80123cc:	00db      	lsls	r3, r3, #3
 80123ce:	1a9b      	subs	r3, r3, r2
 80123d0:	009b      	lsls	r3, r3, #2
 80123d2:	4a30      	ldr	r2, [pc, #192]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 80123d4:	4413      	add	r3, r2
 80123d6:	61bb      	str	r3, [r7, #24]
 80123d8:	e014      	b.n	8012404 <lv_draw_mask_radius_init+0x1a4>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80123da:	492e      	ldr	r1, [pc, #184]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 80123dc:	69fa      	ldr	r2, [r7, #28]
 80123de:	4613      	mov	r3, r2
 80123e0:	00db      	lsls	r3, r3, #3
 80123e2:	1a9b      	subs	r3, r3, r2
 80123e4:	009b      	lsls	r3, r3, #2
 80123e6:	440b      	add	r3, r1
 80123e8:	3310      	adds	r3, #16
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	69bb      	ldr	r3, [r7, #24]
 80123ee:	691b      	ldr	r3, [r3, #16]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	da07      	bge.n	8012404 <lv_draw_mask_radius_init+0x1a4>
 80123f4:	69fa      	ldr	r2, [r7, #28]
 80123f6:	4613      	mov	r3, r2
 80123f8:	00db      	lsls	r3, r3, #3
 80123fa:	1a9b      	subs	r3, r3, r2
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	4a25      	ldr	r2, [pc, #148]	; (8012494 <lv_draw_mask_radius_init+0x234>)
 8012400:	4413      	add	r3, r2
 8012402:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	3301      	adds	r3, #1
 8012408:	61fb      	str	r3, [r7, #28]
 801240a:	69fb      	ldr	r3, [r7, #28]
 801240c:	2b03      	cmp	r3, #3
 801240e:	d9cd      	bls.n	80123ac <lv_draw_mask_radius_init+0x14c>
        }
    }

    if(!entry) {
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d110      	bne.n	8012438 <lv_draw_mask_radius_init+0x1d8>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8012416:	201c      	movs	r0, #28
 8012418:	f00f fdec 	bl	8021ff4 <lv_mem_alloc>
 801241c:	61b8      	str	r0, [r7, #24]
        LV_ASSERT_MALLOC(entry);
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d100      	bne.n	8012426 <lv_draw_mask_radius_init+0x1c6>
 8012424:	e7fe      	b.n	8012424 <lv_draw_mask_radius_init+0x1c4>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8012426:	211c      	movs	r1, #28
 8012428:	69b8      	ldr	r0, [r7, #24]
 801242a:	f010 fa17 	bl	802285c <lv_memset_00>
        entry->life = -1;
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012434:	611a      	str	r2, [r3, #16]
 8012436:	e01c      	b.n	8012472 <lv_draw_mask_radius_init+0x212>
    }
    else {
        entry->used_cnt++;
 8012438:	69bb      	ldr	r3, [r7, #24]
 801243a:	695b      	ldr	r3, [r3, #20]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	615a      	str	r2, [r3, #20]
        entry->life = 0;
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	2200      	movs	r2, #0
 8012446:	611a      	str	r2, [r3, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	691b      	ldr	r3, [r3, #16]
 801244c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012450:	2a0f      	cmp	r2, #15
 8012452:	dd04      	ble.n	801245e <lv_draw_mask_radius_init+0x1fe>
 8012454:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012458:	1112      	asrs	r2, r2, #4
 801245a:	b212      	sxth	r2, r2
 801245c:	e000      	b.n	8012460 <lv_draw_mask_radius_init+0x200>
 801245e:	2201      	movs	r2, #1
 8012460:	4413      	add	r3, r2
 8012462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012466:	bfa8      	it	ge
 8012468:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 801246c:	461a      	mov	r2, r3
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	611a      	str	r2, [r3, #16]
    }

    param->circle = entry;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	69ba      	ldr	r2, [r7, #24]
 8012476:	615a      	str	r2, [r3, #20]

    circ_calc_aa4(param->circle, radius);
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	695b      	ldr	r3, [r3, #20]
 801247c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012480:	4611      	mov	r1, r2
 8012482:	4618      	mov	r0, r3
 8012484:	f001 fae6 	bl	8013a54 <circ_calc_aa4>
}
 8012488:	3720      	adds	r7, #32
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	08013419 	.word	0x08013419
 8012494:	20000960 	.word	0x20000960

08012498 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b08a      	sub	sp, #40	; 0x28
 801249c:	af02      	add	r7, sp, #8
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	4608      	mov	r0, r1
 80124a2:	4611      	mov	r1, r2
 80124a4:	461a      	mov	r2, r3
 80124a6:	4603      	mov	r3, r0
 80124a8:	817b      	strh	r3, [r7, #10]
 80124aa:	460b      	mov	r3, r1
 80124ac:	813b      	strh	r3, [r7, #8]
 80124ae:	4613      	mov	r3, r2
 80124b0:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 80124b2:	893a      	ldrh	r2, [r7, #8]
 80124b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	1ad3      	subs	r3, r2, r3
 80124be:	b29b      	uxth	r3, r3
 80124c0:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 80124c2:	897a      	ldrh	r2, [r7, #10]
 80124c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	1ad3      	subs	r3, r2, r3
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 80124d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d4:	6a1b      	ldr	r3, [r3, #32]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	f040 80a7 	bne.w	801262a <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 80124dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124e2:	f003 0301 	and.w	r3, r3, #1
 80124e6:	b2db      	uxtb	r3, r3
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d02c      	beq.n	8012546 <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 80124ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ee:	7c1b      	ldrb	r3, [r3, #16]
 80124f0:	f003 0303 	and.w	r3, r3, #3
 80124f4:	b2db      	uxtb	r3, r3
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d006      	beq.n	8012508 <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80124fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124fc:	7c1b      	ldrb	r3, [r3, #16]
 80124fe:	f003 0303 	and.w	r3, r3, #3
 8012502:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8012504:	2b01      	cmp	r3, #1
 8012506:	d101      	bne.n	801250c <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8012508:	2301      	movs	r3, #1
 801250a:	e0b4      	b.n	8012676 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250e:	7c1b      	ldrb	r3, [r3, #16]
 8012510:	f003 0303 	and.w	r3, r3, #3
 8012514:	b2db      	uxtb	r3, r3
 8012516:	2b02      	cmp	r3, #2
 8012518:	d106      	bne.n	8012528 <lv_draw_mask_line+0x90>
 801251a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801251e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012522:	da01      	bge.n	8012528 <lv_draw_mask_line+0x90>
 8012524:	2301      	movs	r3, #1
 8012526:	e0a6      	b.n	8012676 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8012528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252a:	7c1b      	ldrb	r3, [r3, #16]
 801252c:	f003 0303 	and.w	r3, r3, #3
 8012530:	b2db      	uxtb	r3, r3
 8012532:	2b03      	cmp	r3, #3
 8012534:	d105      	bne.n	8012542 <lv_draw_mask_line+0xaa>
 8012536:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	dd01      	ble.n	8012542 <lv_draw_mask_line+0xaa>
 801253e:	2301      	movs	r3, #1
 8012540:	e099      	b.n	8012676 <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8012542:	2300      	movs	r3, #0
 8012544:	e097      	b.n	8012676 <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8012546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012548:	7c1b      	ldrb	r3, [r3, #16]
 801254a:	f003 0303 	and.w	r3, r3, #3
 801254e:	b2db      	uxtb	r3, r3
 8012550:	2b02      	cmp	r3, #2
 8012552:	d006      	beq.n	8012562 <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8012554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012556:	7c1b      	ldrb	r3, [r3, #16]
 8012558:	f003 0303 	and.w	r3, r3, #3
 801255c:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 801255e:	2b03      	cmp	r3, #3
 8012560:	d101      	bne.n	8012566 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8012562:	2301      	movs	r3, #1
 8012564:	e087      	b.n	8012676 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8012566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012568:	7c1b      	ldrb	r3, [r3, #16]
 801256a:	f003 0303 	and.w	r3, r3, #3
 801256e:	b2db      	uxtb	r3, r3
 8012570:	2b01      	cmp	r3, #1
 8012572:	d105      	bne.n	8012580 <lv_draw_mask_line+0xe8>
 8012574:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012578:	2b00      	cmp	r3, #0
 801257a:	dd01      	ble.n	8012580 <lv_draw_mask_line+0xe8>
 801257c:	2301      	movs	r3, #1
 801257e:	e07a      	b.n	8012676 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8012580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012582:	7c1b      	ldrb	r3, [r3, #16]
 8012584:	f003 0303 	and.w	r3, r3, #3
 8012588:	b2db      	uxtb	r3, r3
 801258a:	2b00      	cmp	r3, #0
 801258c:	d125      	bne.n	80125da <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801258e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012596:	4413      	add	r3, r2
 8012598:	2b00      	cmp	r3, #0
 801259a:	da01      	bge.n	80125a0 <lv_draw_mask_line+0x108>
 801259c:	2301      	movs	r3, #1
 801259e:	e06a      	b.n	8012676 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 80125a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80125a4:	425b      	negs	r3, r3
 80125a6:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	da01      	bge.n	80125b2 <lv_draw_mask_line+0x11a>
 80125ae:	2300      	movs	r3, #0
 80125b0:	e061      	b.n	8012676 <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	db0e      	blt.n	80125d6 <lv_draw_mask_line+0x13e>
 80125b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125bc:	697a      	ldr	r2, [r7, #20]
 80125be:	429a      	cmp	r2, r3
 80125c0:	da09      	bge.n	80125d6 <lv_draw_mask_line+0x13e>
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	18d0      	adds	r0, r2, r3
 80125c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	1ad3      	subs	r3, r2, r3
 80125d0:	4619      	mov	r1, r3
 80125d2:	f010 f943 	bl	802285c <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 80125d6:	2302      	movs	r3, #2
 80125d8:	e04d      	b.n	8012676 <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 80125da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80125de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125e2:	4413      	add	r3, r2
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	da01      	bge.n	80125ec <lv_draw_mask_line+0x154>
 80125e8:	2300      	movs	r3, #0
 80125ea:	e044      	b.n	8012676 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 80125ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80125f0:	425b      	negs	r3, r3
 80125f2:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 80125f4:	69fb      	ldr	r3, [r7, #28]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	da01      	bge.n	80125fe <lv_draw_mask_line+0x166>
 80125fa:	2300      	movs	r3, #0
 80125fc:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 80125fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012602:	69fa      	ldr	r2, [r7, #28]
 8012604:	429a      	cmp	r2, r3
 8012606:	db01      	blt.n	801260c <lv_draw_mask_line+0x174>
 8012608:	2300      	movs	r3, #0
 801260a:	e034      	b.n	8012676 <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	2b00      	cmp	r3, #0
 8012610:	db09      	blt.n	8012626 <lv_draw_mask_line+0x18e>
 8012612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012616:	69fa      	ldr	r2, [r7, #28]
 8012618:	429a      	cmp	r2, r3
 801261a:	da04      	bge.n	8012626 <lv_draw_mask_line+0x18e>
 801261c:	69fb      	ldr	r3, [r7, #28]
 801261e:	4619      	mov	r1, r3
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f010 f91b 	bl	802285c <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8012626:	2302      	movs	r3, #2
 8012628:	e025      	b.n	8012676 <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 801262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012630:	f003 0301 	and.w	r3, r3, #1
 8012634:	b2db      	uxtb	r3, r3
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00e      	beq.n	8012658 <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 801263a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801263e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012642:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012648:	9300      	str	r3, [sp, #0]
 801264a:	4603      	mov	r3, r0
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f000 f816 	bl	801267e <line_mask_flat>
 8012652:	4603      	mov	r3, r0
 8012654:	76fb      	strb	r3, [r7, #27]
 8012656:	e00d      	b.n	8012674 <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 8012658:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801265c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012660:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	4603      	mov	r3, r0
 801266a:	68f8      	ldr	r0, [r7, #12]
 801266c:	f000 f991 	bl	8012992 <line_mask_steep>
 8012670:	4603      	mov	r3, r0
 8012672:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 8012674:	7efb      	ldrb	r3, [r7, #27]
}
 8012676:	4618      	mov	r0, r3
 8012678:	3720      	adds	r7, #32
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}

0801267e <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 801267e:	b590      	push	{r4, r7, lr}
 8012680:	b08d      	sub	sp, #52	; 0x34
 8012682:	af00      	add	r7, sp, #0
 8012684:	60f8      	str	r0, [r7, #12]
 8012686:	4608      	mov	r0, r1
 8012688:	4611      	mov	r1, r2
 801268a:	461a      	mov	r2, r3
 801268c:	4603      	mov	r3, r0
 801268e:	817b      	strh	r3, [r7, #10]
 8012690:	460b      	mov	r3, r1
 8012692:	813b      	strh	r3, [r7, #8]
 8012694:	4613      	mov	r3, r2
 8012696:	80fb      	strh	r3, [r7, #6]

    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8012698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801269a:	69db      	ldr	r3, [r3, #28]
 801269c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80126a0:	fb02 f303 	mul.w	r3, r2, r3
 80126a4:	129b      	asrs	r3, r3, #10
 80126a6:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 80126a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126aa:	69db      	ldr	r3, [r3, #28]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	dd10      	ble.n	80126d2 <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 80126b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80126b4:	69fa      	ldr	r2, [r7, #28]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	dd1c      	ble.n	80126f4 <line_mask_flat+0x76>
            if(p->inv) {
 80126ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126c0:	f003 0302 	and.w	r3, r3, #2
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d001      	beq.n	80126ce <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80126ca:	2301      	movs	r3, #1
 80126cc:	e15d      	b.n	801298a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80126ce:	2300      	movs	r3, #0
 80126d0:	e15b      	b.n	801298a <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 80126d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80126d6:	69fa      	ldr	r2, [r7, #28]
 80126d8:	429a      	cmp	r2, r3
 80126da:	da0b      	bge.n	80126f4 <line_mask_flat+0x76>
            if(p->inv) {
 80126dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126e2:	f003 0302 	and.w	r3, r3, #2
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d001      	beq.n	80126f0 <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80126ec:	2301      	movs	r3, #1
 80126ee:	e14c      	b.n	801298a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80126f0:	2300      	movs	r3, #0
 80126f2:	e14a      	b.n	801298a <line_mask_flat+0x30c>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 80126f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126f6:	69db      	ldr	r3, [r3, #28]
 80126f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80126fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012700:	440a      	add	r2, r1
 8012702:	fb02 f303 	mul.w	r3, r2, r3
 8012706:	129b      	asrs	r3, r3, #10
 8012708:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 801270a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801270c:	69db      	ldr	r3, [r3, #28]
 801270e:	2b00      	cmp	r3, #0
 8012710:	dd10      	ble.n	8012734 <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 8012712:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012716:	69fa      	ldr	r2, [r7, #28]
 8012718:	429a      	cmp	r2, r3
 801271a:	da1c      	bge.n	8012756 <line_mask_flat+0xd8>
            if(p->inv) {
 801271c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801271e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012722:	f003 0302 	and.w	r3, r3, #2
 8012726:	b2db      	uxtb	r3, r3
 8012728:	2b00      	cmp	r3, #0
 801272a:	d001      	beq.n	8012730 <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 801272c:	2300      	movs	r3, #0
 801272e:	e12c      	b.n	801298a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8012730:	2301      	movs	r3, #1
 8012732:	e12a      	b.n	801298a <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 8012734:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012738:	69fa      	ldr	r2, [r7, #28]
 801273a:	429a      	cmp	r2, r3
 801273c:	dd0b      	ble.n	8012756 <line_mask_flat+0xd8>
            if(p->inv) {
 801273e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012744:	f003 0302 	and.w	r3, r3, #2
 8012748:	b2db      	uxtb	r3, r3
 801274a:	2b00      	cmp	r3, #0
 801274c:	d001      	beq.n	8012752 <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 801274e:	2300      	movs	r3, #0
 8012750:	e11b      	b.n	801298a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8012752:	2301      	movs	r3, #1
 8012754:	e119      	b.n	801298a <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 8012756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012758:	69db      	ldr	r3, [r3, #28]
 801275a:	2b00      	cmp	r3, #0
 801275c:	dd09      	ble.n	8012772 <line_mask_flat+0xf4>
 801275e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012762:	021b      	lsls	r3, r3, #8
 8012764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012766:	6992      	ldr	r2, [r2, #24]
 8012768:	fb02 f303 	mul.w	r3, r2, r3
 801276c:	129b      	asrs	r3, r3, #10
 801276e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012770:	e009      	b.n	8012786 <line_mask_flat+0x108>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8012772:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012776:	3301      	adds	r3, #1
 8012778:	021b      	lsls	r3, r3, #8
 801277a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801277c:	6992      	ldr	r2, [r2, #24]
 801277e:	fb02 f303 	mul.w	r3, r2, r3
 8012782:	129b      	asrs	r3, r3, #10
 8012784:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 8012786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012788:	121b      	asrs	r3, r3, #8
 801278a:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 801278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278e:	b2db      	uxtb	r3, r3
 8012790:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <line_mask_flat+0x120>
 8012798:	23ff      	movs	r3, #255	; 0xff
 801279a:	62bb      	str	r3, [r7, #40]	; 0x28
 801279c:	e00a      	b.n	80127b4 <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80127a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80127a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80127a8:	fb02 f303 	mul.w	r3, r2, r3
 80127ac:	121b      	asrs	r3, r3, #8
 80127ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80127b2:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 80127b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80127b8:	69ba      	ldr	r2, [r7, #24]
 80127ba:	1ad3      	subs	r3, r2, r3
 80127bc:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d06c      	beq.n	801289e <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 80127c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	db2c      	blt.n	8012824 <line_mask_flat+0x1a6>
 80127ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127d0:	429a      	cmp	r2, r3
 80127d2:	da27      	bge.n	8012824 <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80127da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127dc:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80127e0:	fb02 f303 	mul.w	r3, r2, r3
 80127e4:	125b      	asrs	r3, r3, #9
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	43db      	mvns	r3, r3
 80127ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 80127ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127f4:	f003 0302 	and.w	r3, r3, #2
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d004      	beq.n	8012808 <line_mask_flat+0x18a>
 80127fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012802:	43db      	mvns	r3, r3
 8012804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280a:	68fa      	ldr	r2, [r7, #12]
 801280c:	4413      	add	r3, r2
 801280e:	7818      	ldrb	r0, [r3, #0]
 8012810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012812:	68fa      	ldr	r2, [r7, #12]
 8012814:	18d4      	adds	r4, r2, r3
 8012816:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801281a:	4619      	mov	r1, r3
 801281c:	f001 fc9a 	bl	8014154 <mask_mix>
 8012820:	4603      	mov	r3, r0
 8012822:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8012824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012826:	3301      	adds	r3, #1
 8012828:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 801282a:	e038      	b.n	801289e <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 801282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282e:	2b00      	cmp	r3, #0
 8012830:	db28      	blt.n	8012884 <line_mask_flat+0x206>
 8012832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012838:	429a      	cmp	r2, r3
 801283a:	da23      	bge.n	8012884 <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 801283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283e:	b2da      	uxtb	r2, r3
 8012840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012844:	105b      	asrs	r3, r3, #1
 8012846:	b2db      	uxtb	r3, r3
 8012848:	1ad3      	subs	r3, r2, r3
 801284a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 801284e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012854:	f003 0302 	and.w	r3, r3, #2
 8012858:	b2db      	uxtb	r3, r3
 801285a:	2b00      	cmp	r3, #0
 801285c:	d004      	beq.n	8012868 <line_mask_flat+0x1ea>
 801285e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012862:	43db      	mvns	r3, r3
 8012864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286a:	68fa      	ldr	r2, [r7, #12]
 801286c:	4413      	add	r3, r2
 801286e:	7818      	ldrb	r0, [r3, #0]
 8012870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012872:	68fa      	ldr	r2, [r7, #12]
 8012874:	18d4      	adds	r4, r2, r3
 8012876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801287a:	4619      	mov	r1, r3
 801287c:	f001 fc6a 	bl	8014154 <mask_mix>
 8012880:	4603      	mov	r3, r0
 8012882:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 8012884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801288a:	1ad3      	subs	r3, r2, r3
 801288c:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 801288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012890:	3301      	adds	r3, #1
 8012892:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 8012894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801289a:	429a      	cmp	r2, r3
 801289c:	da05      	bge.n	80128aa <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 801289e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128a4:	429a      	cmp	r2, r3
 80128a6:	dcc1      	bgt.n	801282c <line_mask_flat+0x1ae>
 80128a8:	e000      	b.n	80128ac <line_mask_flat+0x22e>
        if(k >= len) break;
 80128aa:	bf00      	nop
    }

    if(k < len && k >= 0) {
 80128ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128b2:	429a      	cmp	r2, r3
 80128b4:	da34      	bge.n	8012920 <line_mask_flat+0x2a2>
 80128b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	db31      	blt.n	8012920 <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 80128bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128be:	699b      	ldr	r3, [r3, #24]
 80128c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128c2:	fb02 f303 	mul.w	r3, r2, r3
 80128c6:	129b      	asrs	r3, r3, #10
 80128c8:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128ce:	fb02 f303 	mul.w	r3, r2, r3
 80128d2:	125b      	asrs	r3, r3, #9
 80128d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 80128d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128da:	69db      	ldr	r3, [r3, #28]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	da04      	bge.n	80128ea <line_mask_flat+0x26c>
 80128e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80128e4:	43db      	mvns	r3, r3
 80128e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 80128ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128f0:	f003 0302 	and.w	r3, r3, #2
 80128f4:	b2db      	uxtb	r3, r3
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d004      	beq.n	8012904 <line_mask_flat+0x286>
 80128fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80128fe:	43db      	mvns	r3, r3
 8012900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 8012904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	4413      	add	r3, r2
 801290a:	7818      	ldrb	r0, [r3, #0]
 801290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290e:	68fa      	ldr	r2, [r7, #12]
 8012910:	18d4      	adds	r4, r2, r3
 8012912:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012916:	4619      	mov	r1, r3
 8012918:	f001 fc1c 	bl	8014154 <mask_mix>
 801291c:	4603      	mov	r3, r0
 801291e:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 8012920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012926:	f003 0302 	and.w	r3, r3, #2
 801292a:	b2db      	uxtb	r3, r3
 801292c:	2b00      	cmp	r3, #0
 801292e:	d014      	beq.n	801295a <line_mask_flat+0x2dc>
        k = xei - abs_x;
 8012930:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012934:	69ba      	ldr	r2, [r7, #24]
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 801293a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012940:	429a      	cmp	r2, r3
 8012942:	dd01      	ble.n	8012948 <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 8012944:	2300      	movs	r3, #0
 8012946:	e020      	b.n	801298a <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 8012948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294a:	2b00      	cmp	r3, #0
 801294c:	db1c      	blt.n	8012988 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[0], k);
 801294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012950:	4619      	mov	r1, r3
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f00f ff82 	bl	802285c <lv_memset_00>
 8012958:	e016      	b.n	8012988 <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 801295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295c:	3301      	adds	r3, #1
 801295e:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 8012960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012962:	2b00      	cmp	r3, #0
 8012964:	da01      	bge.n	801296a <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 8012966:	2300      	movs	r3, #0
 8012968:	e00f      	b.n	801298a <line_mask_flat+0x30c>
        }
        if(k <= len) {
 801296a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012970:	429a      	cmp	r2, r3
 8012972:	dc09      	bgt.n	8012988 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[k], len - k);
 8012974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012976:	68fa      	ldr	r2, [r7, #12]
 8012978:	18d0      	adds	r0, r2, r3
 801297a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	4619      	mov	r1, r3
 8012984:	f00f ff6a 	bl	802285c <lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012988:	2302      	movs	r3, #2
}
 801298a:	4618      	mov	r0, r3
 801298c:	3734      	adds	r7, #52	; 0x34
 801298e:	46bd      	mov	sp, r7
 8012990:	bd90      	pop	{r4, r7, pc}

08012992 <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 8012992:	b590      	push	{r4, r7, lr}
 8012994:	b091      	sub	sp, #68	; 0x44
 8012996:	af00      	add	r7, sp, #0
 8012998:	60f8      	str	r0, [r7, #12]
 801299a:	4608      	mov	r0, r1
 801299c:	4611      	mov	r1, r2
 801299e:	461a      	mov	r2, r3
 80129a0:	4603      	mov	r3, r0
 80129a2:	817b      	strh	r3, [r7, #10]
 80129a4:	460b      	mov	r3, r1
 80129a6:	813b      	strh	r3, [r7, #8]
 80129a8:	4613      	mov	r3, r2
 80129aa:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /*At the beginning of the mask if the limit line is greater than the mask's y.
     *Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 80129ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ae:	699b      	ldr	r3, [r3, #24]
 80129b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129b4:	fb02 f303 	mul.w	r3, r2, r3
 80129b8:	129b      	asrs	r3, r3, #10
 80129ba:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 80129bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129be:	699b      	ldr	r3, [r3, #24]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	dd02      	ble.n	80129ca <line_mask_steep+0x38>
 80129c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c6:	3301      	adds	r3, #1
 80129c8:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 80129ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80129ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129d0:	429a      	cmp	r2, r3
 80129d2:	da0b      	bge.n	80129ec <line_mask_steep+0x5a>
        if(p->inv) {
 80129d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129da:	f003 0302 	and.w	r3, r3, #2
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d001      	beq.n	80129e8 <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80129e4:	2301      	movs	r3, #1
 80129e6:	e213      	b.n	8012e10 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 80129e8:	2300      	movs	r3, #0
 80129ea:	e211      	b.n	8012e10 <line_mask_steep+0x47e>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 80129ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ee:	699b      	ldr	r3, [r3, #24]
 80129f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129f4:	fb02 f303 	mul.w	r3, r2, r3
 80129f8:	129b      	asrs	r3, r3, #10
 80129fa:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 80129fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a04:	4413      	add	r3, r2
 8012a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	dd0b      	ble.n	8012a24 <line_mask_steep+0x92>
        if(p->inv) {
 8012a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a12:	f003 0302 	and.w	r3, r3, #2
 8012a16:	b2db      	uxtb	r3, r3
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d001      	beq.n	8012a20 <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	e1f7      	b.n	8012e10 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012a20:	2301      	movs	r3, #1
 8012a22:	e1f5      	b.n	8012e10 <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y * 256) * p->xy_steep) >> 10;
 8012a24:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012a28:	021b      	lsls	r3, r3, #8
 8012a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a2c:	6992      	ldr	r2, [r2, #24]
 8012a2e:	fb02 f303 	mul.w	r3, r2, r3
 8012a32:	129b      	asrs	r3, r3, #10
 8012a34:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 8012a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a38:	121b      	asrs	r3, r3, #8
 8012a3a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 8012a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8012a42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012a46:	3301      	adds	r3, #1
 8012a48:	021b      	lsls	r3, r3, #8
 8012a4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a4c:	6992      	ldr	r2, [r2, #24]
 8012a4e:	fb02 f303 	mul.w	r3, r2, r3
 8012a52:	129b      	asrs	r3, r3, #10
 8012a54:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	121b      	asrs	r3, r3, #8
 8012a5a:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 8012a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 8012a62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a68:	1ad3      	subs	r3, r2, r3
 8012a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 8012a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a6e:	6a3b      	ldr	r3, [r7, #32]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d00d      	beq.n	8012a90 <line_mask_steep+0xfe>
 8012a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a76:	699b      	ldr	r3, [r3, #24]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	da09      	bge.n	8012a90 <line_mask_steep+0xfe>
 8012a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d106      	bne.n	8012a90 <line_mask_steep+0xfe>
        xsf = 0xFF;
 8012a82:	23ff      	movs	r3, #255	; 0xff
 8012a84:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 8012a86:	6a3b      	ldr	r3, [r7, #32]
 8012a88:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 8012a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a8c:	3b01      	subs	r3, #1
 8012a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 8012a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a92:	6a3b      	ldr	r3, [r7, #32]
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d165      	bne.n	8012b64 <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 8012a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	db25      	blt.n	8012aea <line_mask_steep+0x158>
 8012a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	da20      	bge.n	8012aea <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 8012aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	4413      	add	r3, r2
 8012aae:	105b      	asrs	r3, r3, #1
 8012ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 8012ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012aba:	f003 0302 	and.w	r3, r3, #2
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d004      	beq.n	8012ace <line_mask_steep+0x13c>
 8012ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ac8:	43db      	mvns	r3, r3
 8012aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad0:	68fa      	ldr	r2, [r7, #12]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	7818      	ldrb	r0, [r3, #0]
 8012ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	18d4      	adds	r4, r2, r3
 8012adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	f001 fb37 	bl	8014154 <mask_mix>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8012aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aec:	3301      	adds	r3, #1
 8012aee:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 8012af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012af6:	f003 0302 	and.w	r3, r3, #2
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d015      	beq.n	8012b2c <line_mask_steep+0x19a>
            k = xsi - abs_x;
 8012b00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b06:	1ad3      	subs	r3, r2, r3
 8012b08:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 8012b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b10:	429a      	cmp	r2, r3
 8012b12:	db01      	blt.n	8012b18 <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 8012b14:	2300      	movs	r3, #0
 8012b16:	e17b      	b.n	8012e10 <line_mask_steep+0x47e>
            }
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 8012b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f2c0 8177 	blt.w	8012e0e <line_mask_steep+0x47c>
 8012b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b22:	4619      	mov	r1, r3
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f00f fe99 	bl	802285c <lv_memset_00>
 8012b2a:	e170      	b.n	8012e0e <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 8012b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b32:	429a      	cmp	r2, r3
 8012b34:	dd02      	ble.n	8012b3c <line_mask_steep+0x1aa>
 8012b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8012b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d101      	bne.n	8012b46 <line_mask_steep+0x1b4>
 8012b42:	2300      	movs	r3, #0
 8012b44:	e164      	b.n	8012e10 <line_mask_steep+0x47e>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8012b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f340 8160 	ble.w	8012e0e <line_mask_steep+0x47c>
 8012b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	18d0      	adds	r0, r2, r3
 8012b54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b5a:	1ad3      	subs	r3, r2, r3
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	f00f fe7d 	bl	802285c <lv_memset_00>
 8012b62:	e154      	b.n	8012e0e <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 8012b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b66:	699b      	ldr	r3, [r3, #24]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	f280 80a7 	bge.w	8012cbc <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 8012b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b70:	69db      	ldr	r3, [r3, #28]
 8012b72:	425b      	negs	r3, r3
 8012b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b76:	fb02 f303 	mul.w	r3, r2, r3
 8012b7a:	129b      	asrs	r3, r3, #10
 8012b7c:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8012b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	db26      	blt.n	8012bd2 <line_mask_steep+0x240>
 8012b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	da21      	bge.n	8012bd2 <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 8012b8e:	69bb      	ldr	r3, [r7, #24]
 8012b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b92:	fb02 f303 	mul.w	r3, r2, r3
 8012b96:	125b      	asrs	r3, r3, #9
 8012b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ba2:	f003 0302 	and.w	r3, r3, #2
 8012ba6:	b2db      	uxtb	r3, r3
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d004      	beq.n	8012bb6 <line_mask_steep+0x224>
 8012bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bb0:	43db      	mvns	r3, r3
 8012bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bb8:	68fa      	ldr	r2, [r7, #12]
 8012bba:	4413      	add	r3, r2
 8012bbc:	7818      	ldrb	r0, [r3, #0]
 8012bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bc0:	68fa      	ldr	r2, [r7, #12]
 8012bc2:	18d4      	adds	r4, r2, r3
 8012bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bc8:	4619      	mov	r1, r3
 8012bca:	f001 fac3 	bl	8014154 <mask_mix>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	7023      	strb	r3, [r4, #0]
            }
            k--;
 8012bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bd4:	3b01      	subs	r3, #1
 8012bd6:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012bde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012be0:	6992      	ldr	r2, [r2, #24]
 8012be2:	4252      	negs	r2, r2
 8012be4:	fb02 f303 	mul.w	r3, r2, r3
 8012be8:	129b      	asrs	r3, r3, #10
 8012bea:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 8012bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	db2a      	blt.n	8012c48 <line_mask_steep+0x2b6>
 8012bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	da25      	bge.n	8012c48 <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012c02:	693a      	ldr	r2, [r7, #16]
 8012c04:	fb02 f303 	mul.w	r3, r2, r3
 8012c08:	125b      	asrs	r3, r3, #9
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	43db      	mvns	r3, r3
 8012c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c18:	f003 0302 	and.w	r3, r3, #2
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d004      	beq.n	8012c2c <line_mask_steep+0x29a>
 8012c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c26:	43db      	mvns	r3, r3
 8012c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c2e:	68fa      	ldr	r2, [r7, #12]
 8012c30:	4413      	add	r3, r2
 8012c32:	7818      	ldrb	r0, [r3, #0]
 8012c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c36:	68fa      	ldr	r2, [r7, #12]
 8012c38:	18d4      	adds	r4, r2, r3
 8012c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c3e:	4619      	mov	r1, r3
 8012c40:	f001 fa88 	bl	8014154 <mask_mix>
 8012c44:	4603      	mov	r3, r0
 8012c46:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 8012c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c4a:	3302      	adds	r3, #2
 8012c4c:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8012c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c54:	f003 0302 	and.w	r3, r3, #2
 8012c58:	b2db      	uxtb	r3, r3
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d018      	beq.n	8012c90 <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 8012c5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c64:	1ad3      	subs	r3, r2, r3
 8012c66:	3b01      	subs	r3, #1
 8012c68:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 8012c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c70:	429a      	cmp	r2, r3
 8012c72:	dd03      	ble.n	8012c7c <line_mask_steep+0x2ea>
 8012c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c7a:	e0c8      	b.n	8012e0e <line_mask_steep+0x47c>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 8012c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	f340 80c5 	ble.w	8012e0e <line_mask_steep+0x47c>
 8012c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c86:	4619      	mov	r1, r3
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f00f fde7 	bl	802285c <lv_memset_00>
 8012c8e:	e0be      	b.n	8012e0e <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8012c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c96:	429a      	cmp	r2, r3
 8012c98:	dd01      	ble.n	8012c9e <line_mask_steep+0x30c>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e0b8      	b.n	8012e10 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8012c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f2c0 80b4 	blt.w	8012e0e <line_mask_steep+0x47c>
 8012ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ca8:	68fa      	ldr	r2, [r7, #12]
 8012caa:	18d0      	adds	r0, r2, r3
 8012cac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	f00f fdd1 	bl	802285c <lv_memset_00>
 8012cba:	e0a8      	b.n	8012e0e <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 8012cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cbe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012cc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012cc4:	69d2      	ldr	r2, [r2, #28]
 8012cc6:	fb02 f303 	mul.w	r3, r2, r3
 8012cca:	129b      	asrs	r3, r3, #10
 8012ccc:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8012cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	db2a      	blt.n	8012d2a <line_mask_steep+0x398>
 8012cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012cd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	da25      	bge.n	8012d2a <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8012cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012ce4:	69ba      	ldr	r2, [r7, #24]
 8012ce6:	fb02 f303 	mul.w	r3, r2, r3
 8012cea:	125b      	asrs	r3, r3, #9
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	43db      	mvns	r3, r3
 8012cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cfa:	f003 0302 	and.w	r3, r3, #2
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d004      	beq.n	8012d0e <line_mask_steep+0x37c>
 8012d04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d08:	43db      	mvns	r3, r3
 8012d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d10:	68fa      	ldr	r2, [r7, #12]
 8012d12:	4413      	add	r3, r2
 8012d14:	7818      	ldrb	r0, [r3, #0]
 8012d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d18:	68fa      	ldr	r2, [r7, #12]
 8012d1a:	18d4      	adds	r4, r2, r3
 8012d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d20:	4619      	mov	r1, r3
 8012d22:	f001 fa17 	bl	8014154 <mask_mix>
 8012d26:	4603      	mov	r3, r0
 8012d28:	7023      	strb	r3, [r4, #0]
            }

            k++;
 8012d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8012d30:	69bb      	ldr	r3, [r7, #24]
 8012d32:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012d36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d38:	6992      	ldr	r2, [r2, #24]
 8012d3a:	fb02 f303 	mul.w	r3, r2, r3
 8012d3e:	129b      	asrs	r3, r3, #10
 8012d40:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 8012d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	db28      	blt.n	8012d9a <line_mask_steep+0x408>
 8012d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	da23      	bge.n	8012d9a <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012d58:	697a      	ldr	r2, [r7, #20]
 8012d5a:	fb02 f303 	mul.w	r3, r2, r3
 8012d5e:	125b      	asrs	r3, r3, #9
 8012d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d6a:	f003 0302 	and.w	r3, r3, #2
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d004      	beq.n	8012d7e <line_mask_steep+0x3ec>
 8012d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d78:	43db      	mvns	r3, r3
 8012d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d80:	68fa      	ldr	r2, [r7, #12]
 8012d82:	4413      	add	r3, r2
 8012d84:	7818      	ldrb	r0, [r3, #0]
 8012d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	18d4      	adds	r4, r2, r3
 8012d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d90:	4619      	mov	r1, r3
 8012d92:	f001 f9df 	bl	8014154 <mask_mix>
 8012d96:	4603      	mov	r3, r0
 8012d98:	7023      	strb	r3, [r4, #0]
            }
            k++;
 8012d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d9c:	3301      	adds	r3, #1
 8012d9e:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8012da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012da6:	f003 0302 	and.w	r3, r3, #2
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d014      	beq.n	8012dda <line_mask_steep+0x448>
                k = xsi - abs_x;
 8012db0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012db6:	1ad3      	subs	r3, r2, r3
 8012db8:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 8012dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	dd01      	ble.n	8012dc8 <line_mask_steep+0x436>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	e023      	b.n	8012e10 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 8012dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	db1f      	blt.n	8012e0e <line_mask_steep+0x47c>
 8012dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	68f8      	ldr	r0, [r7, #12]
 8012dd4:	f00f fd42 	bl	802285c <lv_memset_00>
 8012dd8:	e019      	b.n	8012e0e <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 8012dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012de0:	429a      	cmp	r2, r3
 8012de2:	dd02      	ble.n	8012dea <line_mask_steep+0x458>
 8012de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012de8:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8012dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d101      	bne.n	8012df4 <line_mask_steep+0x462>
 8012df0:	2300      	movs	r3, #0
 8012df2:	e00d      	b.n	8012e10 <line_mask_steep+0x47e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8012df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	dd09      	ble.n	8012e0e <line_mask_steep+0x47c>
 8012dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dfc:	68fa      	ldr	r2, [r7, #12]
 8012dfe:	18d0      	adds	r0, r2, r3
 8012e00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e06:	1ad3      	subs	r3, r2, r3
 8012e08:	4619      	mov	r1, r3
 8012e0a:	f00f fd27 	bl	802285c <lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012e0e:	2302      	movs	r3, #2
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3744      	adds	r7, #68	; 0x44
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd90      	pop	{r4, r7, pc}

08012e18 <lv_draw_mask_angle>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_angle(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                   lv_coord_t abs_y, lv_coord_t len,
                                                                   lv_draw_mask_angle_param_t * p)
{
 8012e18:	b590      	push	{r4, r7, lr}
 8012e1a:	b097      	sub	sp, #92	; 0x5c
 8012e1c:	af02      	add	r7, sp, #8
 8012e1e:	60f8      	str	r0, [r7, #12]
 8012e20:	4608      	mov	r0, r1
 8012e22:	4611      	mov	r1, r2
 8012e24:	461a      	mov	r2, r3
 8012e26:	4603      	mov	r3, r0
 8012e28:	817b      	strh	r3, [r7, #10]
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	813b      	strh	r3, [r7, #8]
 8012e2e:	4613      	mov	r3, r2
 8012e30:	80fb      	strh	r3, [r7, #6]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8012e32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012e36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e38:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8012e3c:	1a9b      	subs	r3, r3, r2
 8012e3e:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8012e40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8012e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e54:	2bb3      	cmp	r3, #179	; 0xb3
 8012e56:	f300 810c 	bgt.w	8013072 <lv_draw_mask_angle+0x25a>
 8012e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012e60:	2bb3      	cmp	r3, #179	; 0xb3
 8012e62:	f300 8106 	bgt.w	8013072 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f000 8100 	beq.w	8013072 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e74:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	f000 80fa 	beq.w	8013072 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle > p->cfg.end_angle) {
 8012e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e80:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	f340 80f1 	ble.w	8013072 <lv_draw_mask_angle+0x25a>

        if(abs_y < p->cfg.vertex_p.y) {
 8012e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012e96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	da01      	bge.n	8012ea2 <lv_draw_mask_angle+0x8a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	e2b6      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8012ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ea8:	fb02 f303 	mul.w	r3, r2, r3
 8012eac:	129b      	asrs	r3, r3, #10
 8012eae:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8012eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012eb6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8012eb8:	fb02 f303 	mul.w	r3, r2, r3
 8012ebc:	129b      	asrs	r3, r3, #10
 8012ebe:	64fb      	str	r3, [r7, #76]	; 0x4c

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ec2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ec6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012eca:	dd0b      	ble.n	8012ee4 <lv_draw_mask_angle+0xcc>
 8012ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ece:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ed2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012ed6:	da05      	bge.n	8012ee4 <lv_draw_mask_angle+0xcc>
 8012ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	da02      	bge.n	8012ee4 <lv_draw_mask_angle+0xcc>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ee2:	e01f      	b.n	8012f24 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012ee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ee6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	dd0a      	ble.n	8012f04 <lv_draw_mask_angle+0xec>
 8012eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ef0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ef4:	2b5a      	cmp	r3, #90	; 0x5a
 8012ef6:	dc05      	bgt.n	8012f04 <lv_draw_mask_angle+0xec>
 8012ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	da02      	bge.n	8012f04 <lv_draw_mask_angle+0xec>
 8012efe:	2300      	movs	r3, #0
 8012f00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f02:	e00f      	b.n	8012f24 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012f0a:	2b5a      	cmp	r3, #90	; 0x5a
 8012f0c:	dd0a      	ble.n	8012f24 <lv_draw_mask_angle+0x10c>
 8012f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012f14:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012f18:	da04      	bge.n	8012f24 <lv_draw_mask_angle+0x10c>
 8012f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	dd01      	ble.n	8012f24 <lv_draw_mask_angle+0x10c>
 8012f20:	2300      	movs	r3, #0
 8012f22:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f2a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012f2e:	dd0b      	ble.n	8012f48 <lv_draw_mask_angle+0x130>
 8012f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f32:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f36:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8012f3a:	da05      	bge.n	8012f48 <lv_draw_mask_angle+0x130>
 8012f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	da02      	bge.n	8012f48 <lv_draw_mask_angle+0x130>
 8012f42:	2300      	movs	r3, #0
 8012f44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f46:	e01f      	b.n	8012f88 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	dd0a      	ble.n	8012f68 <lv_draw_mask_angle+0x150>
 8012f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f54:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f58:	2b5a      	cmp	r3, #90	; 0x5a
 8012f5a:	dc05      	bgt.n	8012f68 <lv_draw_mask_angle+0x150>
 8012f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	da02      	bge.n	8012f68 <lv_draw_mask_angle+0x150>
 8012f62:	2300      	movs	r3, #0
 8012f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f66:	e00f      	b.n	8012f88 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f6e:	2b5a      	cmp	r3, #90	; 0x5a
 8012f70:	dd0a      	ble.n	8012f88 <lv_draw_mask_angle+0x170>
 8012f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f74:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012f78:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012f7c:	da04      	bge.n	8012f88 <lv_draw_mask_angle+0x170>
 8012f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	dd01      	ble.n	8012f88 <lv_draw_mask_angle+0x170>
 8012f84:	2300      	movs	r3, #0
 8012f86:	64fb      	str	r3, [r7, #76]	; 0x4c

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8012f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f8c:	1ad3      	subs	r3, r2, r3
 8012f8e:	105b      	asrs	r3, r3, #1
 8012f90:	627b      	str	r3, [r7, #36]	; 0x24

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8012f92:	2301      	movs	r3, #1
 8012f94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        int32_t tmp = start_angle_last + dist - rel_x;
 8012f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa2:	441a      	add	r2, r3
 8012fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > len) tmp = len;
 8012faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	dd02      	ble.n	8012fba <lv_draw_mask_angle+0x1a2>
 8012fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fb8:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > 0) {
 8012fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	dd18      	ble.n	8012ff2 <lv_draw_mask_angle+0x1da>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 8012fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fc2:	b218      	sxth	r0, r3
 8012fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012fc6:	3310      	adds	r3, #16
 8012fc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012fcc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012fd0:	9300      	str	r3, [sp, #0]
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f7ff fa5f 	bl	8012498 <lv_draw_mask_line>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8012fe0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d104      	bne.n	8012ff2 <lv_draw_mask_angle+0x1da>
                lv_memset_00(&mask_buf[0], tmp);
 8012fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fea:	4619      	mov	r1, r3
 8012fec:	68f8      	ldr	r0, [r7, #12]
 8012fee:	f00f fc35 	bl	802285c <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 8012ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	dd02      	ble.n	8013002 <lv_draw_mask_angle+0x1ea>
 8012ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013000:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp < 0) tmp = 0;
 8013002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013004:	2b00      	cmp	r3, #0
 8013006:	da01      	bge.n	801300c <lv_draw_mask_angle+0x1f4>
 8013008:	2300      	movs	r3, #0
 801300a:	647b      	str	r3, [r7, #68]	; 0x44
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 801300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801300e:	68fa      	ldr	r2, [r7, #12]
 8013010:	18d0      	adds	r0, r2, r3
 8013012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013014:	b29a      	uxth	r2, r3
 8013016:	897b      	ldrh	r3, [r7, #10]
 8013018:	4413      	add	r3, r2
 801301a:	b29b      	uxth	r3, r3
 801301c:	b219      	sxth	r1, r3
 801301e:	88fa      	ldrh	r2, [r7, #6]
 8013020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013022:	b29b      	uxth	r3, r3
 8013024:	1ad3      	subs	r3, r2, r3
 8013026:	b29b      	uxth	r3, r3
 8013028:	b21c      	sxth	r4, r3
 801302a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801302c:	333c      	adds	r3, #60	; 0x3c
 801302e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013032:	9300      	str	r3, [sp, #0]
 8013034:	4623      	mov	r3, r4
 8013036:	f7ff fa2f 	bl	8012498 <lv_draw_mask_line>
 801303a:	4603      	mov	r3, r0
 801303c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8013040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013044:	2b00      	cmp	r3, #0
 8013046:	d109      	bne.n	801305c <lv_draw_mask_angle+0x244>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8013048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801304a:	68fa      	ldr	r2, [r7, #12]
 801304c:	18d0      	adds	r0, r2, r3
 801304e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013054:	1ad3      	subs	r3, r2, r3
 8013056:	4619      	mov	r1, r3
 8013058:	f00f fc00 	bl	802285c <lv_memset_00>
        }
        if(res1 == res2) return res1;
 801305c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8013060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013064:	429a      	cmp	r2, r3
 8013066:	d102      	bne.n	801306e <lv_draw_mask_angle+0x256>
 8013068:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801306c:	e1d0      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 801306e:	2302      	movs	r3, #2
 8013070:	e1ce      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
    }
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 8013072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013074:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013078:	2bb4      	cmp	r3, #180	; 0xb4
 801307a:	f340 80fc 	ble.w	8013276 <lv_draw_mask_angle+0x45e>
 801307e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013080:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013084:	2bb4      	cmp	r3, #180	; 0xb4
 8013086:	f340 80f6 	ble.w	8013276 <lv_draw_mask_angle+0x45e>
 801308a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801308c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013092:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013096:	429a      	cmp	r2, r3
 8013098:	f340 80ed 	ble.w	8013276 <lv_draw_mask_angle+0x45e>

        if(abs_y > p->cfg.vertex_p.y) {
 801309c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801309e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80130a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	dd01      	ble.n	80130ae <lv_draw_mask_angle+0x296>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80130aa:	2301      	movs	r3, #1
 80130ac:	e1b0      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 80130ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130b4:	fb02 f303 	mul.w	r3, r2, r3
 80130b8:	129b      	asrs	r3, r3, #10
 80130ba:	61fb      	str	r3, [r7, #28]
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 80130bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130be:	3301      	adds	r3, #1
 80130c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80130c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80130c4:	fb02 f303 	mul.w	r3, r2, r3
 80130c8:	129b      	asrs	r3, r3, #10
 80130ca:	643b      	str	r3, [r7, #64]	; 0x40

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 80130cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80130d2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80130d6:	dd0b      	ble.n	80130f0 <lv_draw_mask_angle+0x2d8>
 80130d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80130de:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80130e2:	da05      	bge.n	80130f0 <lv_draw_mask_angle+0x2d8>
 80130e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	da02      	bge.n	80130f0 <lv_draw_mask_angle+0x2d8>
 80130ea:	2300      	movs	r3, #0
 80130ec:	643b      	str	r3, [r7, #64]	; 0x40
 80130ee:	e01f      	b.n	8013130 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 80130f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	dd0a      	ble.n	8013110 <lv_draw_mask_angle+0x2f8>
 80130fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013100:	2b5a      	cmp	r3, #90	; 0x5a
 8013102:	dc05      	bgt.n	8013110 <lv_draw_mask_angle+0x2f8>
 8013104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013106:	2b00      	cmp	r3, #0
 8013108:	da02      	bge.n	8013110 <lv_draw_mask_angle+0x2f8>
 801310a:	2300      	movs	r3, #0
 801310c:	643b      	str	r3, [r7, #64]	; 0x40
 801310e:	e00f      	b.n	8013130 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8013110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013112:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013116:	2b5a      	cmp	r3, #90	; 0x5a
 8013118:	dd0a      	ble.n	8013130 <lv_draw_mask_angle+0x318>
 801311a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801311c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013120:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013124:	da04      	bge.n	8013130 <lv_draw_mask_angle+0x318>
 8013126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013128:	2b00      	cmp	r3, #0
 801312a:	dd01      	ble.n	8013130 <lv_draw_mask_angle+0x318>
 801312c:	2300      	movs	r3, #0
 801312e:	643b      	str	r3, [r7, #64]	; 0x40

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8013130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013132:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013136:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801313a:	dd0b      	ble.n	8013154 <lv_draw_mask_angle+0x33c>
 801313c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801313e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013142:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8013146:	da05      	bge.n	8013154 <lv_draw_mask_angle+0x33c>
 8013148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801314a:	2b00      	cmp	r3, #0
 801314c:	da02      	bge.n	8013154 <lv_draw_mask_angle+0x33c>
 801314e:	2300      	movs	r3, #0
 8013150:	643b      	str	r3, [r7, #64]	; 0x40
 8013152:	e01f      	b.n	8013194 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8013154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013156:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801315a:	2b00      	cmp	r3, #0
 801315c:	dd0a      	ble.n	8013174 <lv_draw_mask_angle+0x35c>
 801315e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013160:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013164:	2b5a      	cmp	r3, #90	; 0x5a
 8013166:	dc05      	bgt.n	8013174 <lv_draw_mask_angle+0x35c>
 8013168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801316a:	2b00      	cmp	r3, #0
 801316c:	da02      	bge.n	8013174 <lv_draw_mask_angle+0x35c>
 801316e:	2300      	movs	r3, #0
 8013170:	643b      	str	r3, [r7, #64]	; 0x40
 8013172:	e00f      	b.n	8013194 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8013174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013176:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801317a:	2b5a      	cmp	r3, #90	; 0x5a
 801317c:	dd0a      	ble.n	8013194 <lv_draw_mask_angle+0x37c>
 801317e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013180:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013184:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013188:	da04      	bge.n	8013194 <lv_draw_mask_angle+0x37c>
 801318a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801318c:	2b00      	cmp	r3, #0
 801318e:	dd01      	ble.n	8013194 <lv_draw_mask_angle+0x37c>
 8013190:	2300      	movs	r3, #0
 8013192:	643b      	str	r3, [r7, #64]	; 0x40

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8013194:	69fa      	ldr	r2, [r7, #28]
 8013196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013198:	1ad3      	subs	r3, r2, r3
 801319a:	105b      	asrs	r3, r3, #1
 801319c:	61bb      	str	r3, [r7, #24]

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801319e:	2301      	movs	r3, #1
 80131a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 80131a4:	2301      	movs	r3, #1
 80131a6:	75fb      	strb	r3, [r7, #23]

        int32_t tmp = start_angle_last + dist - rel_x;
 80131a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	441a      	add	r2, r3
 80131ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > len) tmp = len;
 80131b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80131b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131ba:	429a      	cmp	r2, r3
 80131bc:	dd02      	ble.n	80131c4 <lv_draw_mask_angle+0x3ac>
 80131be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80131c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > 0) {
 80131c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	dd18      	ble.n	80131fc <lv_draw_mask_angle+0x3e4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 80131ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131cc:	b218      	sxth	r0, r3
 80131ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80131d0:	333c      	adds	r3, #60	; 0x3c
 80131d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80131d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	4603      	mov	r3, r0
 80131de:	68f8      	ldr	r0, [r7, #12]
 80131e0:	f7ff f95a 	bl	8012498 <lv_draw_mask_line>
 80131e4:	4603      	mov	r3, r0
 80131e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 80131ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d104      	bne.n	80131fc <lv_draw_mask_angle+0x3e4>
                lv_memset_00(&mask_buf[0], tmp);
 80131f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f4:	4619      	mov	r1, r3
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f00f fb30 	bl	802285c <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 80131fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013202:	429a      	cmp	r2, r3
 8013204:	dd02      	ble.n	801320c <lv_draw_mask_angle+0x3f4>
 8013206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801320a:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp < 0) tmp = 0;
 801320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320e:	2b00      	cmp	r3, #0
 8013210:	da01      	bge.n	8013216 <lv_draw_mask_angle+0x3fe>
 8013212:	2300      	movs	r3, #0
 8013214:	63bb      	str	r3, [r7, #56]	; 0x38
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 8013216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013218:	68fa      	ldr	r2, [r7, #12]
 801321a:	18d0      	adds	r0, r2, r3
 801321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321e:	b29a      	uxth	r2, r3
 8013220:	897b      	ldrh	r3, [r7, #10]
 8013222:	4413      	add	r3, r2
 8013224:	b29b      	uxth	r3, r3
 8013226:	b219      	sxth	r1, r3
 8013228:	88fa      	ldrh	r2, [r7, #6]
 801322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322c:	b29b      	uxth	r3, r3
 801322e:	1ad3      	subs	r3, r2, r3
 8013230:	b29b      	uxth	r3, r3
 8013232:	b21c      	sxth	r4, r3
 8013234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013236:	3310      	adds	r3, #16
 8013238:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801323c:	9300      	str	r3, [sp, #0]
 801323e:	4623      	mov	r3, r4
 8013240:	f7ff f92a 	bl	8012498 <lv_draw_mask_line>
 8013244:	4603      	mov	r3, r0
 8013246:	75fb      	strb	r3, [r7, #23]
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8013248:	7dfb      	ldrb	r3, [r7, #23]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d109      	bne.n	8013262 <lv_draw_mask_angle+0x44a>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 801324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013250:	68fa      	ldr	r2, [r7, #12]
 8013252:	18d0      	adds	r0, r2, r3
 8013254:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325a:	1ad3      	subs	r3, r2, r3
 801325c:	4619      	mov	r1, r3
 801325e:	f00f fafd 	bl	802285c <lv_memset_00>
        }
        if(res1 == res2) return res1;
 8013262:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013266:	7dfb      	ldrb	r3, [r7, #23]
 8013268:	429a      	cmp	r2, r3
 801326a:	d102      	bne.n	8013272 <lv_draw_mask_angle+0x45a>
 801326c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013270:	e0ce      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8013272:	2302      	movs	r3, #2
 8013274:	e0cc      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
    }
    else  {

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8013276:	2301      	movs	r3, #1
 8013278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801327c:	2301      	movs	r3, #1
 801327e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        if(p->cfg.start_angle == 180) {
 8013282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013284:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013288:	2bb4      	cmp	r3, #180	; 0xb4
 801328a:	d10e      	bne.n	80132aa <lv_draw_mask_angle+0x492>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801328c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801328e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013292:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013296:	429a      	cmp	r2, r3
 8013298:	da03      	bge.n	80132a2 <lv_draw_mask_angle+0x48a>
 801329a:	2301      	movs	r3, #1
 801329c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132a0:	e043      	b.n	801332a <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 80132a2:	2303      	movs	r3, #3
 80132a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132a8:	e03f      	b.n	801332a <lv_draw_mask_angle+0x512>
        }
        else if(p->cfg.start_angle == 0) {
 80132aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d10e      	bne.n	80132d2 <lv_draw_mask_angle+0x4ba>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 80132b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80132ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80132be:	429a      	cmp	r2, r3
 80132c0:	da03      	bge.n	80132ca <lv_draw_mask_angle+0x4b2>
 80132c2:	2303      	movs	r3, #3
 80132c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132c8:	e02f      	b.n	801332a <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 80132ca:	2301      	movs	r3, #1
 80132cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132d0:	e02b      	b.n	801332a <lv_draw_mask_angle+0x512>
        }
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 80132d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80132d8:	2bb3      	cmp	r3, #179	; 0xb3
 80132da:	dc06      	bgt.n	80132ea <lv_draw_mask_angle+0x4d2>
 80132dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132de:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80132e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	db0b      	blt.n	8013302 <lv_draw_mask_angle+0x4ea>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 80132ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 80132f0:	2bb4      	cmp	r3, #180	; 0xb4
 80132f2:	dd0a      	ble.n	801330a <lv_draw_mask_angle+0x4f2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 80132f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80132fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80132fe:	429a      	cmp	r2, r3
 8013300:	db03      	blt.n	801330a <lv_draw_mask_angle+0x4f2>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8013302:	2303      	movs	r3, #3
 8013304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013308:	e00f      	b.n	801332a <lv_draw_mask_angle+0x512>
        }
        else  {
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 801330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801330c:	3310      	adds	r3, #16
 801330e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8013312:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013316:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	4603      	mov	r3, r0
 801331e:	68f8      	ldr	r0, [r7, #12]
 8013320:	f7ff f8ba 	bl	8012498 <lv_draw_mask_line>
 8013324:	4603      	mov	r3, r0
 8013326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(p->cfg.end_angle == 180) {
 801332a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801332c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013330:	2bb4      	cmp	r3, #180	; 0xb4
 8013332:	d10e      	bne.n	8013352 <lv_draw_mask_angle+0x53a>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8013334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013336:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801333a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801333e:	429a      	cmp	r2, r3
 8013340:	da03      	bge.n	801334a <lv_draw_mask_angle+0x532>
 8013342:	2303      	movs	r3, #3
 8013344:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013348:	e043      	b.n	80133d2 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801334a:	2301      	movs	r3, #1
 801334c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013350:	e03f      	b.n	80133d2 <lv_draw_mask_angle+0x5ba>
        }
        else if(p->cfg.end_angle == 0) {
 8013352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013354:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d10e      	bne.n	801337a <lv_draw_mask_angle+0x562>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801335c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801335e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013362:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013366:	429a      	cmp	r2, r3
 8013368:	da03      	bge.n	8013372 <lv_draw_mask_angle+0x55a>
 801336a:	2301      	movs	r3, #1
 801336c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013370:	e02f      	b.n	80133d2 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8013372:	2303      	movs	r3, #3
 8013374:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013378:	e02b      	b.n	80133d2 <lv_draw_mask_angle+0x5ba>
        }
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801337a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801337c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013380:	2bb3      	cmp	r3, #179	; 0xb3
 8013382:	dc06      	bgt.n	8013392 <lv_draw_mask_angle+0x57a>
 8013384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013386:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801338a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801338e:	429a      	cmp	r2, r3
 8013390:	db0b      	blt.n	80133aa <lv_draw_mask_angle+0x592>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8013392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013394:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8013398:	2bb4      	cmp	r3, #180	; 0xb4
 801339a:	dd0a      	ble.n	80133b2 <lv_draw_mask_angle+0x59a>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801339c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801339e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80133a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	db03      	blt.n	80133b2 <lv_draw_mask_angle+0x59a>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 80133aa:	2303      	movs	r3, #3
 80133ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80133b0:	e00f      	b.n	80133d2 <lv_draw_mask_angle+0x5ba>
        }
        else {
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 80133b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80133b4:	333c      	adds	r3, #60	; 0x3c
 80133b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80133ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80133be:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80133c2:	9300      	str	r3, [sp, #0]
 80133c4:	4603      	mov	r3, r0
 80133c6:	68f8      	ldr	r0, [r7, #12]
 80133c8:	f7ff f866 	bl	8012498 <lv_draw_mask_line>
 80133cc:	4603      	mov	r3, r0
 80133ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        }

        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 80133d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d003      	beq.n	80133e2 <lv_draw_mask_angle+0x5ca>
 80133da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d101      	bne.n	80133e6 <lv_draw_mask_angle+0x5ce>
 80133e2:	2300      	movs	r3, #0
 80133e4:	e014      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 80133e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133ea:	2b03      	cmp	r3, #3
 80133ec:	d105      	bne.n	80133fa <lv_draw_mask_angle+0x5e2>
 80133ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80133f2:	2b03      	cmp	r3, #3
 80133f4:	d101      	bne.n	80133fa <lv_draw_mask_angle+0x5e2>
 80133f6:	2300      	movs	r3, #0
 80133f8:	e00a      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 80133fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133fe:	2b01      	cmp	r3, #1
 8013400:	d105      	bne.n	801340e <lv_draw_mask_angle+0x5f6>
 8013402:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013406:	2b01      	cmp	r3, #1
 8013408:	d101      	bne.n	801340e <lv_draw_mask_angle+0x5f6>
 801340a:	2301      	movs	r3, #1
 801340c:	e000      	b.n	8013410 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 801340e:	2302      	movs	r3, #2
    }
}
 8013410:	4618      	mov	r0, r3
 8013412:	3754      	adds	r7, #84	; 0x54
 8013414:	46bd      	mov	sp, r7
 8013416:	bd90      	pop	{r4, r7, pc}

08013418 <lv_draw_mask_radius>:


LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 8013418:	b590      	push	{r4, r7, lr}
 801341a:	b097      	sub	sp, #92	; 0x5c
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	4608      	mov	r0, r1
 8013422:	4611      	mov	r1, r2
 8013424:	461a      	mov	r2, r3
 8013426:	4603      	mov	r3, r0
 8013428:	817b      	strh	r3, [r7, #10]
 801342a:	460b      	mov	r3, r1
 801342c:	813b      	strh	r3, [r7, #8]
 801342e:	4613      	mov	r3, r2
 8013430:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 8013432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013434:	7c9b      	ldrb	r3, [r3, #18]
 8013436:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801343a:	b2db      	uxtb	r3, r3
 801343c:	2b00      	cmp	r3, #0
 801343e:	bf14      	ite	ne
 8013440:	2301      	movne	r3, #1
 8013442:	2300      	moveq	r3, #0
 8013444:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t radius = p->cfg.radius;
 8013448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801344a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801344e:	647b      	str	r3, [r7, #68]	; 0x44
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 8013450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013452:	f103 0208 	add.w	r2, r3, #8
 8013456:	f107 0318 	add.w	r3, r7, #24
 801345a:	4611      	mov	r1, r2
 801345c:	4618      	mov	r0, r3
 801345e:	f7fe fae6 	bl	8011a2e <lv_area_copy>

    if(outer == false) {
 8013462:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8013466:	f083 0301 	eor.w	r3, r3, #1
 801346a:	b2db      	uxtb	r3, r3
 801346c:	2b00      	cmp	r3, #0
 801346e:	d00d      	beq.n	801348c <lv_draw_mask_radius+0x74>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 8013470:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013474:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013478:	429a      	cmp	r2, r3
 801347a:	db05      	blt.n	8013488 <lv_draw_mask_radius+0x70>
 801347c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013480:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013484:	429a      	cmp	r2, r3
 8013486:	dd0f      	ble.n	80134a8 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_TRANSP;
 8013488:	2300      	movs	r3, #0
 801348a:	e266      	b.n	801395a <lv_draw_mask_radius+0x542>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801348c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013490:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013494:	429a      	cmp	r2, r3
 8013496:	db05      	blt.n	80134a4 <lv_draw_mask_radius+0x8c>
 8013498:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801349c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	dd01      	ble.n	80134a8 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80134a4:	2301      	movs	r3, #1
 80134a6:	e258      	b.n	801395a <lv_draw_mask_radius+0x542>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80134a8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80134ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80134b0:	4619      	mov	r1, r3
 80134b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134b4:	440b      	add	r3, r1
 80134b6:	429a      	cmp	r2, r3
 80134b8:	db0b      	blt.n	80134d2 <lv_draw_mask_radius+0xba>
 80134ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80134be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80134c2:	441a      	add	r2, r3
 80134c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80134c8:	4619      	mov	r1, r3
 80134ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134cc:	1acb      	subs	r3, r1, r3
 80134ce:	429a      	cmp	r2, r3
 80134d0:	dd12      	ble.n	80134f8 <lv_draw_mask_radius+0xe0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80134d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80134d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80134da:	4619      	mov	r1, r3
 80134dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134de:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80134e0:	429a      	cmp	r2, r3
 80134e2:	f2c0 8082 	blt.w	80135ea <lv_draw_mask_radius+0x1d2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80134e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80134ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80134ee:	4619      	mov	r1, r3
 80134f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134f2:	1acb      	subs	r3, r1, r3
 80134f4:	429a      	cmp	r2, r3
 80134f6:	dc78      	bgt.n	80135ea <lv_draw_mask_radius+0x1d2>
        if(outer == false) {
 80134f8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80134fc:	f083 0301 	eor.w	r3, r3, #1
 8013500:	b2db      	uxtb	r3, r3
 8013502:	2b00      	cmp	r3, #0
 8013504:	d03d      	beq.n	8013582 <lv_draw_mask_radius+0x16a>
            /*Remove the edges*/
            int32_t last = rect.x1 - abs_x;
 8013506:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801350a:	461a      	mov	r2, r3
 801350c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013510:	1ad3      	subs	r3, r2, r3
 8013512:	627b      	str	r3, [r7, #36]	; 0x24
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8013514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801351a:	429a      	cmp	r2, r3
 801351c:	dd01      	ble.n	8013522 <lv_draw_mask_radius+0x10a>
 801351e:	2300      	movs	r3, #0
 8013520:	e21b      	b.n	801395a <lv_draw_mask_radius+0x542>
            if(last >= 0) {
 8013522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013524:	2b00      	cmp	r3, #0
 8013526:	db04      	blt.n	8013532 <lv_draw_mask_radius+0x11a>
                lv_memset_00(&mask_buf[0], last);
 8013528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352a:	4619      	mov	r1, r3
 801352c:	68f8      	ldr	r0, [r7, #12]
 801352e:	f00f f995 	bl	802285c <lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 8013532:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013536:	461a      	mov	r2, r3
 8013538:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801353c:	1ad3      	subs	r3, r2, r3
 801353e:	3301      	adds	r3, #1
 8013540:	623b      	str	r3, [r7, #32]
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8013542:	6a3b      	ldr	r3, [r7, #32]
 8013544:	2b00      	cmp	r3, #0
 8013546:	dc01      	bgt.n	801354c <lv_draw_mask_radius+0x134>
 8013548:	2300      	movs	r3, #0
 801354a:	e206      	b.n	801395a <lv_draw_mask_radius+0x542>
            else if(first < len) {
 801354c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013550:	6a3a      	ldr	r2, [r7, #32]
 8013552:	429a      	cmp	r2, r3
 8013554:	da09      	bge.n	801356a <lv_draw_mask_radius+0x152>
                lv_memset_00(&mask_buf[first], len - first);
 8013556:	6a3b      	ldr	r3, [r7, #32]
 8013558:	68fa      	ldr	r2, [r7, #12]
 801355a:	18d0      	adds	r0, r2, r3
 801355c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013560:	6a3b      	ldr	r3, [r7, #32]
 8013562:	1ad3      	subs	r3, r2, r3
 8013564:	4619      	mov	r1, r3
 8013566:	f00f f979 	bl	802285c <lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 801356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356c:	2b00      	cmp	r3, #0
 801356e:	d106      	bne.n	801357e <lv_draw_mask_radius+0x166>
 8013570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013574:	6a3a      	ldr	r2, [r7, #32]
 8013576:	429a      	cmp	r2, r3
 8013578:	d101      	bne.n	801357e <lv_draw_mask_radius+0x166>
 801357a:	2301      	movs	r3, #1
 801357c:	e1ed      	b.n	801395a <lv_draw_mask_radius+0x542>
            else return LV_DRAW_MASK_RES_CHANGED;
 801357e:	2302      	movs	r3, #2
 8013580:	e1eb      	b.n	801395a <lv_draw_mask_radius+0x542>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 8013582:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8013586:	461a      	mov	r2, r3
 8013588:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	657b      	str	r3, [r7, #84]	; 0x54
            if(first < 0) first = 0;
 8013590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013592:	2b00      	cmp	r3, #0
 8013594:	da01      	bge.n	801359a <lv_draw_mask_radius+0x182>
 8013596:	2300      	movs	r3, #0
 8013598:	657b      	str	r3, [r7, #84]	; 0x54
            if(first <= len) {
 801359a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801359e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80135a0:	429a      	cmp	r2, r3
 80135a2:	dc20      	bgt.n	80135e6 <lv_draw_mask_radius+0x1ce>
                int32_t last = rect.x2 - abs_x - first + 1;
 80135a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80135a8:	461a      	mov	r2, r3
 80135aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80135ae:	1ad2      	subs	r2, r2, r3
 80135b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135b2:	1ad3      	subs	r3, r2, r3
 80135b4:	3301      	adds	r3, #1
 80135b6:	653b      	str	r3, [r7, #80]	; 0x50
                if(first + last > len) last = len - first;
 80135b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80135ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135bc:	441a      	add	r2, r3
 80135be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	dd04      	ble.n	80135d0 <lv_draw_mask_radius+0x1b8>
 80135c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80135ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135cc:	1ad3      	subs	r3, r2, r3
 80135ce:	653b      	str	r3, [r7, #80]	; 0x50
                if(last >= 0) {
 80135d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	db07      	blt.n	80135e6 <lv_draw_mask_radius+0x1ce>
                    lv_memset_00(&mask_buf[first], last);
 80135d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	4413      	add	r3, r2
 80135dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135de:	4611      	mov	r1, r2
 80135e0:	4618      	mov	r0, r3
 80135e2:	f00f f93b 	bl	802285c <lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 80135e6:	2302      	movs	r3, #2
 80135e8:	e1b7      	b.n	801395a <lv_draw_mask_radius+0x542>
    //    if( abs_x == 276 && abs_x + len - 1 == 479 && abs_y == 63 && p->cfg.radius == 5 && p->cfg.outer == 1) {
    //        char x = 0;
    //    }
    //exec: x:276.. 479, y:63: r:5, inv)

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 80135ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80135ee:	461a      	mov	r2, r3
 80135f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80135f4:	1ad3      	subs	r3, r2, r3
 80135f6:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t w = lv_area_get_width(&rect);
 80135f8:	f107 0318 	add.w	r3, r7, #24
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7fe fa35 	bl	8011a6c <lv_area_get_width>
 8013602:	4603      	mov	r3, r0
 8013604:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h = lv_area_get_height(&rect);
 8013606:	f107 0318 	add.w	r3, r7, #24
 801360a:	4618      	mov	r0, r3
 801360c:	f7fe fa45 	bl	8011a9a <lv_area_get_height>
 8013610:	4603      	mov	r3, r0
 8013612:	63bb      	str	r3, [r7, #56]	; 0x38
    abs_x -= rect.x1;
 8013614:	897a      	ldrh	r2, [r7, #10]
 8013616:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801361a:	b29b      	uxth	r3, r3
 801361c:	1ad3      	subs	r3, r2, r3
 801361e:	b29b      	uxth	r3, r3
 8013620:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 8013622:	893a      	ldrh	r2, [r7, #8]
 8013624:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013628:	b29b      	uxth	r3, r3
 801362a:	1ad3      	subs	r3, r2, r3
 801362c:	b29b      	uxth	r3, r3
 801362e:	813b      	strh	r3, [r7, #8]

    lv_coord_t aa_len;
    lv_coord_t x_start;
    lv_coord_t cir_y;
    if(abs_y < radius) {
 8013630:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013636:	429a      	cmp	r2, r3
 8013638:	dd09      	ble.n	801364e <lv_draw_mask_radius+0x236>
        cir_y = radius - abs_y - 1;
 801363a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801363c:	b29a      	uxth	r2, r3
 801363e:	893b      	ldrh	r3, [r7, #8]
 8013640:	1ad3      	subs	r3, r2, r3
 8013642:	b29b      	uxth	r3, r3
 8013644:	3b01      	subs	r3, #1
 8013646:	b29b      	uxth	r3, r3
 8013648:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801364c:	e00a      	b.n	8013664 <lv_draw_mask_radius+0x24c>
    }
    else {
        cir_y = abs_y - (h - radius);
 801364e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013650:	b29a      	uxth	r2, r3
 8013652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013654:	b29b      	uxth	r3, r3
 8013656:	1ad3      	subs	r3, r2, r3
 8013658:	b29a      	uxth	r2, r3
 801365a:	893b      	ldrh	r3, [r7, #8]
 801365c:	4413      	add	r3, r2
 801365e:	b29b      	uxth	r3, r3
 8013660:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 8013664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013666:	6958      	ldr	r0, [r3, #20]
 8013668:	f107 0314 	add.w	r3, r7, #20
 801366c:	f107 0216 	add.w	r2, r7, #22
 8013670:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8013674:	f000 fd38 	bl	80140e8 <get_next_line>
 8013678:	6378      	str	r0, [r7, #52]	; 0x34
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801367a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801367c:	b29a      	uxth	r2, r3
 801367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013680:	b29b      	uxth	r3, r3
 8013682:	4413      	add	r3, r2
 8013684:	b29a      	uxth	r2, r3
 8013686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013688:	b29b      	uxth	r3, r3
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	b29a      	uxth	r2, r3
 801368e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013692:	b29b      	uxth	r3, r3
 8013694:	4413      	add	r3, r2
 8013696:	b29b      	uxth	r3, r3
 8013698:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 801369a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801369c:	b29a      	uxth	r2, r3
 801369e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	4413      	add	r3, r2
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	3b01      	subs	r3, #1
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t i;

    if(outer == false) {
 80136b6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80136ba:	f083 0301 	eor.w	r3, r3, #1
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	f000 809b 	beq.w	80137fc <lv_draw_mask_radius+0x3e4>
        for(i = 0; i < aa_len; i++) {
 80136c6:	2300      	movs	r3, #0
 80136c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80136cc:	e062      	b.n	8013794 <lv_draw_mask_radius+0x37c>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 80136ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80136d2:	461a      	mov	r2, r3
 80136d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80136d8:	1ad3      	subs	r3, r2, r3
 80136da:	3b01      	subs	r3, #1
 80136dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136de:	4413      	add	r3, r2
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 80136e6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80136ea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80136ee:	4413      	add	r3, r2
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	db20      	blt.n	8013736 <lv_draw_mask_radius+0x31e>
 80136f4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80136f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80136fc:	441a      	add	r2, r3
 80136fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013702:	429a      	cmp	r2, r3
 8013704:	da17      	bge.n	8013736 <lv_draw_mask_radius+0x31e>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8013706:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801370a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801370e:	4413      	add	r3, r2
 8013710:	461a      	mov	r2, r3
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	4413      	add	r3, r2
 8013716:	7819      	ldrb	r1, [r3, #0]
 8013718:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801371c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013720:	4413      	add	r3, r2
 8013722:	461a      	mov	r2, r3
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	189c      	adds	r4, r3, r2
 8013728:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801372c:	4618      	mov	r0, r3
 801372e:	f000 fd11 	bl	8014154 <mask_mix>
 8013732:	4603      	mov	r3, r0
 8013734:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8013736:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801373a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	2b00      	cmp	r3, #0
 8013742:	db20      	blt.n	8013786 <lv_draw_mask_radius+0x36e>
 8013744:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013748:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801374c:	1ad2      	subs	r2, r2, r3
 801374e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013752:	429a      	cmp	r2, r3
 8013754:	da17      	bge.n	8013786 <lv_draw_mask_radius+0x36e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8013756:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801375a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801375e:	1ad3      	subs	r3, r2, r3
 8013760:	461a      	mov	r2, r3
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	4413      	add	r3, r2
 8013766:	7819      	ldrb	r1, [r3, #0]
 8013768:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801376c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013770:	1ad3      	subs	r3, r2, r3
 8013772:	461a      	mov	r2, r3
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	189c      	adds	r4, r3, r2
 8013778:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801377c:	4618      	mov	r0, r3
 801377e:	f000 fce9 	bl	8014154 <mask_mix>
 8013782:	4603      	mov	r3, r0
 8013784:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 8013786:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801378a:	b29b      	uxth	r3, r3
 801378c:	3301      	adds	r3, #1
 801378e:	b29b      	uxth	r3, r3
 8013790:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8013794:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013798:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 801379c:	429a      	cmp	r2, r3
 801379e:	db96      	blt.n	80136ce <lv_draw_mask_radius+0x2b6>
            }
        }

        /*Clean the right side*/
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 80137a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80137a4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80137a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80137ac:	440b      	add	r3, r1
 80137ae:	4293      	cmp	r3, r2
 80137b0:	bfa8      	it	ge
 80137b2:	4613      	movge	r3, r2
 80137b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80137b8:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 80137ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80137be:	68fa      	ldr	r2, [r7, #12]
 80137c0:	18d0      	adds	r0, r2, r3
 80137c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80137c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80137ca:	1ad3      	subs	r3, r2, r3
 80137cc:	4619      	mov	r1, r3
 80137ce:	f00f f845 	bl	802285c <lv_memset_00>

        /*Clean the left side*/
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 80137d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80137d6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80137da:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80137de:	1a5b      	subs	r3, r3, r1
 80137e0:	3301      	adds	r3, #1
 80137e2:	4293      	cmp	r3, r2
 80137e4:	bfa8      	it	ge
 80137e6:	4613      	movge	r3, r2
 80137e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80137ec:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_memset_00(&mask_buf[0], cir_x_left);
 80137ee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80137f2:	4619      	mov	r1, r3
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f00f f831 	bl	802285c <lv_memset_00>
 80137fa:	e0ad      	b.n	8013958 <lv_draw_mask_radius+0x540>
    }
    else {
        for(i = 0; i < aa_len; i++) {
 80137fc:	2300      	movs	r3, #0
 80137fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8013802:	e063      	b.n	80138cc <lv_draw_mask_radius+0x4b4>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8013804:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013808:	1e5a      	subs	r2, r3, #1
 801380a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	461a      	mov	r2, r3
 8013812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013814:	4413      	add	r3, r2
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	43db      	mvns	r3, r3
 801381a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801381e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013822:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013826:	4413      	add	r3, r2
 8013828:	2b00      	cmp	r3, #0
 801382a:	db20      	blt.n	801386e <lv_draw_mask_radius+0x456>
 801382c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013830:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013834:	441a      	add	r2, r3
 8013836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801383a:	429a      	cmp	r2, r3
 801383c:	da17      	bge.n	801386e <lv_draw_mask_radius+0x456>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 801383e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013842:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013846:	4413      	add	r3, r2
 8013848:	461a      	mov	r2, r3
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	4413      	add	r3, r2
 801384e:	7819      	ldrb	r1, [r3, #0]
 8013850:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013854:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013858:	4413      	add	r3, r2
 801385a:	461a      	mov	r2, r3
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	189c      	adds	r4, r3, r2
 8013860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013864:	4618      	mov	r0, r3
 8013866:	f000 fc75 	bl	8014154 <mask_mix>
 801386a:	4603      	mov	r3, r0
 801386c:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 801386e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013872:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013876:	1ad3      	subs	r3, r2, r3
 8013878:	2b00      	cmp	r3, #0
 801387a:	db20      	blt.n	80138be <lv_draw_mask_radius+0x4a6>
 801387c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013880:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013884:	1ad2      	subs	r2, r2, r3
 8013886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801388a:	429a      	cmp	r2, r3
 801388c:	da17      	bge.n	80138be <lv_draw_mask_radius+0x4a6>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801388e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013892:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013896:	1ad3      	subs	r3, r2, r3
 8013898:	461a      	mov	r2, r3
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	4413      	add	r3, r2
 801389e:	7819      	ldrb	r1, [r3, #0]
 80138a0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80138a4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80138a8:	1ad3      	subs	r3, r2, r3
 80138aa:	461a      	mov	r2, r3
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	189c      	adds	r4, r3, r2
 80138b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80138b4:	4618      	mov	r0, r3
 80138b6:	f000 fc4d 	bl	8014154 <mask_mix>
 80138ba:	4603      	mov	r3, r0
 80138bc:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 80138be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	3301      	adds	r3, #1
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80138cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80138d0:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 80138d4:	429a      	cmp	r2, r3
 80138d6:	db95      	blt.n	8013804 <lv_draw_mask_radius+0x3ec>
            }
        }

        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 80138d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80138dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80138e0:	3301      	adds	r3, #1
 80138e2:	4293      	cmp	r3, r2
 80138e4:	bfa8      	it	ge
 80138e6:	4613      	movge	r3, r2
 80138e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80138ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 80138ee:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80138f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	da07      	bge.n	801390a <lv_draw_mask_radius+0x4f2>
 80138fa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80138fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8013902:	1ad3      	subs	r3, r2, r3
 8013904:	0fdb      	lsrs	r3, r3, #31
 8013906:	b2db      	uxtb	r3, r3
 8013908:	e006      	b.n	8013918 <lv_draw_mask_radius+0x500>
 801390a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801390e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8013912:	1ad3      	subs	r3, r2, r3
 8013914:	0fdb      	lsrs	r3, r3, #31
 8013916:	b2db      	uxtb	r3, r3
 8013918:	2b00      	cmp	r3, #0
 801391a:	d001      	beq.n	8013920 <lv_draw_mask_radius+0x508>
 801391c:	2300      	movs	r3, #0
 801391e:	e010      	b.n	8013942 <lv_draw_mask_radius+0x52a>
 8013920:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8013924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013928:	429a      	cmp	r2, r3
 801392a:	da05      	bge.n	8013938 <lv_draw_mask_radius+0x520>
 801392c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801392e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013930:	1ad3      	subs	r3, r2, r3
 8013932:	b29b      	uxth	r3, r3
 8013934:	b21b      	sxth	r3, r3
 8013936:	e004      	b.n	8013942 <lv_draw_mask_radius+0x52a>
 8013938:	88fa      	ldrh	r2, [r7, #6]
 801393a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801393c:	1ad3      	subs	r3, r2, r3
 801393e:	b29b      	uxth	r3, r3
 8013940:	b21b      	sxth	r3, r3
 8013942:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_memset_00(&mask_buf[clr_start], clr_len);
 8013944:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	4413      	add	r3, r2
 801394c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f00e ff82 	bl	802285c <lv_memset_00>
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8013958:	2302      	movs	r3, #2
}
 801395a:	4618      	mov	r0, r3
 801395c:	375c      	adds	r7, #92	; 0x5c
 801395e:	46bd      	mov	sp, r7
 8013960:	bd90      	pop	{r4, r7, pc}

08013962 <circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 8013962:	b480      	push	{r7}
 8013964:	b085      	sub	sp, #20
 8013966:	af00      	add	r7, sp, #0
 8013968:	60f8      	str	r0, [r7, #12]
 801396a:	60b9      	str	r1, [r7, #8]
 801396c:	4613      	mov	r3, r2
 801396e:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	88fa      	ldrh	r2, [r7, #6]
 8013974:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2200      	movs	r2, #0
 801397a:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 801397c:	88fb      	ldrh	r3, [r7, #6]
 801397e:	f1c3 0301 	rsb	r3, r3, #1
 8013982:	b29b      	uxth	r3, r3
 8013984:	b21a      	sxth	r2, r3
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	801a      	strh	r2, [r3, #0]
}
 801398a:	bf00      	nop
 801398c:	3714      	adds	r7, #20
 801398e:	46bd      	mov	sp, r7
 8013990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013994:	4770      	bx	lr

08013996 <circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
 8013996:	b480      	push	{r7}
 8013998:	b083      	sub	sp, #12
 801399a:	af00      	add	r7, sp, #0
 801399c:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	bfd4      	ite	le
 80139ae:	2301      	movle	r3, #1
 80139b0:	2300      	movgt	r3, #0
 80139b2:	b2db      	uxtb	r3, r3
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	370c      	adds	r7, #12
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr

080139c0 <circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	6039      	str	r1, [r7, #0]

    if(*tmp <= 0) {
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	dc11      	bgt.n	80139f8 <circ_next+0x38>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139da:	b29a      	uxth	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	005b      	lsls	r3, r3, #1
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	4413      	add	r3, r2
 80139ea:	b29b      	uxth	r3, r3
 80139ec:	3303      	adds	r3, #3
 80139ee:	b29b      	uxth	r3, r3
 80139f0:	b21a      	sxth	r2, r3
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	801a      	strh	r2, [r3, #0]
 80139f6:	e01e      	b.n	8013a36 <circ_next+0x76>
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139fe:	b29a      	uxth	r2, r3
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a06:	4619      	mov	r1, r3
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a0e:	1acb      	subs	r3, r1, r3
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	005b      	lsls	r3, r3, #1
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	4413      	add	r3, r2
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	3305      	adds	r3, #5
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	b21a      	sxth	r2, r3
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	801a      	strh	r2, [r3, #0]
        c->x--;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	3b01      	subs	r3, #1
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	b21a      	sxth	r2, r3
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	801a      	strh	r2, [r3, #0]
    }
    c->y++;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	3301      	adds	r3, #1
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	b21a      	sxth	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	805a      	strh	r2, [r3, #2]
}
 8013a48:	bf00      	nop
 8013a4a:	370c      	adds	r7, #12
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr

08013a54 <circ_calc_aa4>:

static void circ_calc_aa4(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t radius)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b096      	sub	sp, #88	; 0x58
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	807b      	strh	r3, [r7, #2]
    if(radius == 0) return;
 8013a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	f000 833b 	beq.w	80140e0 <circ_calc_aa4+0x68c>
    c->radius = radius;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	887a      	ldrh	r2, [r7, #2]
 8013a6e:	831a      	strh	r2, [r3, #24]

    /*Allocate buffers*/
    if(c->buf) lv_mem_free(c->buf);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d004      	beq.n	8013a82 <circ_calc_aa4+0x2e>
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f00e fae9 	bl	8022054 <lv_mem_free>

    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8013a82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013a86:	1c5a      	adds	r2, r3, #1
 8013a88:	4613      	mov	r3, r2
 8013a8a:	005b      	lsls	r3, r3, #1
 8013a8c:	4413      	add	r3, r2
 8013a8e:	005b      	lsls	r3, r3, #1
 8013a90:	4618      	mov	r0, r3
 8013a92:	f00e faaf 	bl	8021ff4 <lv_mem_alloc>
 8013a96:	4602      	mov	r2, r0
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MALLOC(c->buf);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d100      	bne.n	8013aa6 <circ_calc_aa4+0x52>
 8013aa4:	e7fe      	b.n	8013aa4 <circ_calc_aa4+0x50>
    c->cir_opa = c->buf;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681a      	ldr	r2, [r3, #0]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	605a      	str	r2, [r3, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013ab6:	005b      	lsls	r3, r3, #1
 8013ab8:	3302      	adds	r3, #2
 8013aba:	441a      	add	r2, r3
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	60da      	str	r2, [r3, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	3304      	adds	r3, #4
 8013acc:	441a      	add	r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	609a      	str	r2, [r3, #8]

    /*Special case, handle manually*/
    if(radius == 1) {
 8013ad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013ad6:	2b01      	cmp	r3, #1
 8013ad8:	d111      	bne.n	8013afe <circ_calc_aa4+0xaa>
        c->cir_opa[0] = 180;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	685b      	ldr	r3, [r3, #4]
 8013ade:	22b4      	movs	r2, #180	; 0xb4
 8013ae0:	701a      	strb	r2, [r3, #0]
        c->opa_start_on_y[0] = 0;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	68db      	ldr	r3, [r3, #12]
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	801a      	strh	r2, [r3, #0]
        c->opa_start_on_y[1] = 1;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	3302      	adds	r3, #2
 8013af0:	2201      	movs	r2, #1
 8013af2:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[0] = 0;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	689b      	ldr	r3, [r3, #8]
 8013af8:	2200      	movs	r2, #0
 8013afa:	801a      	strh	r2, [r3, #0]
        return;
 8013afc:	e2f1      	b.n	80140e2 <circ_calc_aa4+0x68e>
    }

    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 8013afe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013b02:	3301      	adds	r3, #1
 8013b04:	00db      	lsls	r3, r3, #3
 8013b06:	4618      	mov	r0, r3
 8013b08:	f00e fafe 	bl	8022108 <lv_mem_buf_get>
 8013b0c:	6438      	str	r0, [r7, #64]	; 0x40
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 8013b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013b12:	3301      	adds	r3, #1
 8013b14:	009b      	lsls	r3, r3, #2
 8013b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b18:	4413      	add	r3, r2
 8013b1a:	63fb      	str	r3, [r7, #60]	; 0x3c

    uint32_t y_8th_cnt = 0;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	657b      	str	r3, [r7, #84]	; 0x54
    lv_point_t cp;
    lv_coord_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 8013b20:	887b      	ldrh	r3, [r7, #2]
 8013b22:	009b      	lsls	r3, r3, #2
 8013b24:	b29b      	uxth	r3, r3
 8013b26:	b21a      	sxth	r2, r3
 8013b28:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8013b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7ff ff16 	bl	8013962 <circ_init>
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    lv_coord_t cir_size = 0;
 8013b36:	2300      	movs	r3, #0
 8013b38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    x_int[0] = cp.x >> 2;
 8013b3c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013b40:	109b      	asrs	r3, r3, #2
 8013b42:	b21b      	sxth	r3, r3
 8013b44:	61fb      	str	r3, [r7, #28]
    x_fract[0] = 0;
 8013b46:	2300      	movs	r3, #0
 8013b48:	60fb      	str	r3, [r7, #12]

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 8013b4a:	e1b7      	b.n	8013ebc <circ_calc_aa4+0x468>
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8013b50:	e02b      	b.n	8013baa <circ_calc_aa4+0x156>
            circ_next(&cp, &tmp);
 8013b52:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8013b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b5a:	4611      	mov	r1, r2
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7ff ff2f 	bl	80139c0 <circ_next>
            if(circ_cont(&cp) == false) break;
 8013b62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7ff ff15 	bl	8013996 <circ_cont>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	f083 0301 	eor.w	r3, r3, #1
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d11c      	bne.n	8013bb2 <circ_calc_aa4+0x15e>
            x_int[i] = cp.x >> 2;
 8013b78:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013b7c:	109b      	asrs	r3, r3, #2
 8013b7e:	b21b      	sxth	r3, r3
 8013b80:	461a      	mov	r2, r3
 8013b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b84:	009b      	lsls	r3, r3, #2
 8013b86:	3358      	adds	r3, #88	; 0x58
 8013b88:	443b      	add	r3, r7
 8013b8a:	f843 2c3c 	str.w	r2, [r3, #-60]
            x_fract[i] = cp.x & 0x3;
 8013b8e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	f003 0203 	and.w	r2, r3, #3
 8013b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b9a:	009b      	lsls	r3, r3, #2
 8013b9c:	3358      	adds	r3, #88	; 0x58
 8013b9e:	443b      	add	r3, r7
 8013ba0:	f843 2c4c 	str.w	r2, [r3, #-76]
        for(i = 0; i < 4; i++) {
 8013ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	653b      	str	r3, [r7, #80]	; 0x50
 8013baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	ddd0      	ble.n	8013b52 <circ_calc_aa4+0xfe>
 8013bb0:	e000      	b.n	8013bb4 <circ_calc_aa4+0x160>
            if(circ_cont(&cp) == false) break;
 8013bb2:	bf00      	nop
        }
        if(i != 4) break;
 8013bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bb6:	2b04      	cmp	r3, #4
 8013bb8:	f040 818a 	bne.w	8013ed0 <circ_calc_aa4+0x47c>

        /*All lines on the same x when downscaled*/
        if(x_int[0] == x_int[3]) {
 8013bbc:	69fa      	ldr	r2, [r7, #28]
 8013bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d139      	bne.n	8013c38 <circ_calc_aa4+0x1e4>
            cir_x[cir_size] = x_int[0];
 8013bc4:	69f9      	ldr	r1, [r7, #28]
 8013bc6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bca:	005b      	lsls	r3, r3, #1
 8013bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013bce:	4413      	add	r3, r2
 8013bd0:	b20a      	sxth	r2, r1
 8013bd2:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013bd4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bd8:	005b      	lsls	r3, r3, #1
 8013bda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013bdc:	4413      	add	r3, r2
 8013bde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013be0:	b212      	sxth	r2, r2
 8013be2:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	b2da      	uxtb	r2, r3
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	4413      	add	r3, r2
 8013bee:	b2da      	uxtb	r2, r3
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	b2db      	uxtb	r3, r3
 8013bf4:	4413      	add	r3, r2
 8013bf6:	b2d9      	uxtb	r1, r3
 8013bf8:	69bb      	ldr	r3, [r7, #24]
 8013bfa:	b2da      	uxtb	r2, r3
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6858      	ldr	r0, [r3, #4]
 8013c00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c04:	4403      	add	r3, r0
 8013c06:	440a      	add	r2, r1
 8013c08:	b2d2      	uxtb	r2, r2
 8013c0a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	685a      	ldr	r2, [r3, #4]
 8013c10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c14:	4413      	add	r3, r2
 8013c16:	781a      	ldrb	r2, [r3, #0]
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6859      	ldr	r1, [r3, #4]
 8013c1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c20:	440b      	add	r3, r1
 8013c22:	0112      	lsls	r2, r2, #4
 8013c24:	b2d2      	uxtb	r2, r2
 8013c26:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013c28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	3301      	adds	r3, #1
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013c36:	e13e      	b.n	8013eb6 <circ_calc_aa4+0x462>
        }
        /*Second line on new x when downscaled*/
        else if(x_int[0] != x_int[1]) {
 8013c38:	69fa      	ldr	r2, [r7, #28]
 8013c3a:	6a3b      	ldr	r3, [r7, #32]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d067      	beq.n	8013d10 <circ_calc_aa4+0x2bc>
            cir_x[cir_size] = x_int[0];
 8013c40:	69f9      	ldr	r1, [r7, #28]
 8013c42:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c46:	005b      	lsls	r3, r3, #1
 8013c48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c4a:	4413      	add	r3, r2
 8013c4c:	b20a      	sxth	r2, r1
 8013c4e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013c50:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c54:	005b      	lsls	r3, r3, #1
 8013c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c58:	4413      	add	r3, r2
 8013c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c5c:	b212      	sxth	r2, r2
 8013c5e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0];
 8013c60:	68f9      	ldr	r1, [r7, #12]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	685a      	ldr	r2, [r3, #4]
 8013c66:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c6a:	4413      	add	r3, r2
 8013c6c:	b2ca      	uxtb	r2, r1
 8013c6e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	685a      	ldr	r2, [r3, #4]
 8013c74:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c78:	4413      	add	r3, r2
 8013c7a:	781a      	ldrb	r2, [r3, #0]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6859      	ldr	r1, [r3, #4]
 8013c80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c84:	440b      	add	r3, r1
 8013c86:	0112      	lsls	r2, r2, #4
 8013c88:	b2d2      	uxtb	r2, r2
 8013c8a:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013c8c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	3301      	adds	r3, #1
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013c9a:	69fb      	ldr	r3, [r7, #28]
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	3b01      	subs	r3, #1
 8013ca0:	b299      	uxth	r1, r3
 8013ca2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ca6:	005b      	lsls	r3, r3, #1
 8013ca8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013caa:	4413      	add	r3, r2
 8013cac:	b20a      	sxth	r2, r1
 8013cae:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013cb0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013cb4:	005b      	lsls	r3, r3, #1
 8013cb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013cb8:	4413      	add	r3, r2
 8013cba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013cbc:	b212      	sxth	r2, r2
 8013cbe:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	b2da      	uxtb	r2, r3
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	4413      	add	r3, r2
 8013cca:	b2da      	uxtb	r2, r3
 8013ccc:	69bb      	ldr	r3, [r7, #24]
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	4413      	add	r3, r2
 8013cd2:	b2da      	uxtb	r2, r3
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	6859      	ldr	r1, [r3, #4]
 8013cd8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013cdc:	440b      	add	r3, r1
 8013cde:	3204      	adds	r2, #4
 8013ce0:	b2d2      	uxtb	r2, r2
 8013ce2:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	685a      	ldr	r2, [r3, #4]
 8013ce8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013cec:	4413      	add	r3, r2
 8013cee:	781a      	ldrb	r2, [r3, #0]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6859      	ldr	r1, [r3, #4]
 8013cf4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013cf8:	440b      	add	r3, r1
 8013cfa:	0112      	lsls	r2, r2, #4
 8013cfc:	b2d2      	uxtb	r2, r2
 8013cfe:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013d00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	3301      	adds	r3, #1
 8013d08:	b29b      	uxth	r3, r3
 8013d0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013d0e:	e0d2      	b.n	8013eb6 <circ_calc_aa4+0x462>
        }
        /*Third line on new x when downscaled*/
        else if(x_int[0] != x_int[2]) {
 8013d10:	69fa      	ldr	r2, [r7, #28]
 8013d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d067      	beq.n	8013de8 <circ_calc_aa4+0x394>
            cir_x[cir_size] = x_int[0];
 8013d18:	69f9      	ldr	r1, [r7, #28]
 8013d1a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d1e:	005b      	lsls	r3, r3, #1
 8013d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d22:	4413      	add	r3, r2
 8013d24:	b20a      	sxth	r2, r1
 8013d26:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013d28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d2c:	005b      	lsls	r3, r3, #1
 8013d2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d30:	4413      	add	r3, r2
 8013d32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013d34:	b212      	sxth	r2, r2
 8013d36:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	b2d9      	uxtb	r1, r3
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	b2da      	uxtb	r2, r3
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6858      	ldr	r0, [r3, #4]
 8013d44:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d48:	4403      	add	r3, r0
 8013d4a:	440a      	add	r2, r1
 8013d4c:	b2d2      	uxtb	r2, r2
 8013d4e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	685a      	ldr	r2, [r3, #4]
 8013d54:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d58:	4413      	add	r3, r2
 8013d5a:	781a      	ldrb	r2, [r3, #0]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6859      	ldr	r1, [r3, #4]
 8013d60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d64:	440b      	add	r3, r1
 8013d66:	0112      	lsls	r2, r2, #4
 8013d68:	b2d2      	uxtb	r2, r2
 8013d6a:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013d6c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	3301      	adds	r3, #1
 8013d74:	b29b      	uxth	r3, r3
 8013d76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	3b01      	subs	r3, #1
 8013d80:	b299      	uxth	r1, r3
 8013d82:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d86:	005b      	lsls	r3, r3, #1
 8013d88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d8a:	4413      	add	r3, r2
 8013d8c:	b20a      	sxth	r2, r1
 8013d8e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013d90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013d94:	005b      	lsls	r3, r3, #1
 8013d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d98:	4413      	add	r3, r2
 8013d9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013d9c:	b212      	sxth	r2, r2
 8013d9e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	b2da      	uxtb	r2, r3
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	4413      	add	r3, r2
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	6859      	ldr	r1, [r3, #4]
 8013db0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013db4:	440b      	add	r3, r1
 8013db6:	3208      	adds	r2, #8
 8013db8:	b2d2      	uxtb	r2, r2
 8013dba:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	685a      	ldr	r2, [r3, #4]
 8013dc0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013dc4:	4413      	add	r3, r2
 8013dc6:	781a      	ldrb	r2, [r3, #0]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6859      	ldr	r1, [r3, #4]
 8013dcc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013dd0:	440b      	add	r3, r1
 8013dd2:	0112      	lsls	r2, r2, #4
 8013dd4:	b2d2      	uxtb	r2, r2
 8013dd6:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013dd8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	3301      	adds	r3, #1
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013de6:	e066      	b.n	8013eb6 <circ_calc_aa4+0x462>
        }
        /*Forth line on new x when downscaled*/
        else {
            cir_x[cir_size] = x_int[0];
 8013de8:	69f9      	ldr	r1, [r7, #28]
 8013dea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013dee:	005b      	lsls	r3, r3, #1
 8013df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013df2:	4413      	add	r3, r2
 8013df4:	b20a      	sxth	r2, r1
 8013df6:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013df8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013dfc:	005b      	lsls	r3, r3, #1
 8013dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e00:	4413      	add	r3, r2
 8013e02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013e04:	b212      	sxth	r2, r2
 8013e06:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	b2da      	uxtb	r2, r3
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	4413      	add	r3, r2
 8013e12:	b2d9      	uxtb	r1, r3
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	b2da      	uxtb	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6858      	ldr	r0, [r3, #4]
 8013e1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e20:	4403      	add	r3, r0
 8013e22:	440a      	add	r2, r1
 8013e24:	b2d2      	uxtb	r2, r2
 8013e26:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	685a      	ldr	r2, [r3, #4]
 8013e2c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e30:	4413      	add	r3, r2
 8013e32:	781a      	ldrb	r2, [r3, #0]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6859      	ldr	r1, [r3, #4]
 8013e38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e3c:	440b      	add	r3, r1
 8013e3e:	0112      	lsls	r2, r2, #4
 8013e40:	b2d2      	uxtb	r2, r2
 8013e42:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013e44:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	3b01      	subs	r3, #1
 8013e58:	b299      	uxth	r1, r3
 8013e5a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e62:	4413      	add	r3, r2
 8013e64:	b20a      	sxth	r2, r1
 8013e66:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013e68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e6c:	005b      	lsls	r3, r3, #1
 8013e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e70:	4413      	add	r3, r2
 8013e72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013e74:	b212      	sxth	r2, r2
 8013e76:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	b2da      	uxtb	r2, r3
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6859      	ldr	r1, [r3, #4]
 8013e80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e84:	440b      	add	r3, r1
 8013e86:	320c      	adds	r2, #12
 8013e88:	b2d2      	uxtb	r2, r2
 8013e8a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	685a      	ldr	r2, [r3, #4]
 8013e90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013e94:	4413      	add	r3, r2
 8013e96:	781a      	ldrb	r2, [r3, #0]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6859      	ldr	r1, [r3, #4]
 8013e9c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013ea0:	440b      	add	r3, r1
 8013ea2:	0112      	lsls	r2, r2, #4
 8013ea4:	b2d2      	uxtb	r2, r2
 8013ea6:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013ea8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	3301      	adds	r3, #1
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        y_8th_cnt++;
 8013eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013eb8:	3301      	adds	r3, #1
 8013eba:	657b      	str	r3, [r7, #84]	; 0x54
    while(circ_cont(&cp)) {
 8013ebc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7ff fd68 	bl	8013996 <circ_cont>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	f47f ae3f 	bne.w	8013b4c <circ_calc_aa4+0xf8>
 8013ece:	e000      	b.n	8013ed2 <circ_calc_aa4+0x47e>
        if(i != 4) break;
 8013ed0:	bf00      	nop
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
 8013ed2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013ed6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013eda:	fb02 f303 	mul.w	r3, r2, r3
 8013ede:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t mid_int = mid >> 10;
 8013ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee2:	129b      	asrs	r3, r3, #10
 8013ee4:	637b      	str	r3, [r7, #52]	; 0x34
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8013ee6:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8013eea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013eee:	4413      	add	r3, r2
 8013ef0:	005b      	lsls	r3, r3, #1
 8013ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ef4:	4413      	add	r3, r2
 8013ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013efa:	461a      	mov	r2, r3
 8013efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013efe:	4293      	cmp	r3, r2
 8013f00:	d10d      	bne.n	8013f1e <circ_calc_aa4+0x4ca>
 8013f02:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8013f06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013f0a:	4413      	add	r3, r2
 8013f0c:	005b      	lsls	r3, r3, #1
 8013f0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f10:	4413      	add	r3, r2
 8013f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f16:	461a      	mov	r2, r3
 8013f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f1a:	4293      	cmp	r3, r2
 8013f1c:	d04e      	beq.n	8013fbc <circ_calc_aa4+0x568>
        int32_t tmp_val = mid - (mid_int << 10);
 8013f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f20:	029b      	lsls	r3, r3, #10
 8013f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f24:	1ad3      	subs	r3, r2, r3
 8013f26:	64bb      	str	r3, [r7, #72]	; 0x48
        if(tmp_val <= 512) {
 8013f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f2e:	dc08      	bgt.n	8013f42 <circ_calc_aa4+0x4ee>
            tmp_val = tmp_val * tmp_val * 2;
 8013f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f32:	fb03 f303 	mul.w	r3, r3, r3
 8013f36:	005b      	lsls	r3, r3, #1
 8013f38:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8013f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f3c:	141b      	asrs	r3, r3, #16
 8013f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f40:	e00f      	b.n	8013f62 <circ_calc_aa4+0x50e>
        }
        else {
            tmp_val = 1024 - tmp_val;
 8013f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f44:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8013f48:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val * tmp_val * 2;
 8013f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f4c:	fb03 f303 	mul.w	r3, r3, r3
 8013f50:	005b      	lsls	r3, r3, #1
 8013f52:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8013f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f56:	141b      	asrs	r3, r3, #16
 8013f58:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = 15 - tmp_val;
 8013f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f5c:	f1c3 030f 	rsb	r3, r3, #15
 8013f60:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        cir_x[cir_size] = mid_int;
 8013f62:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013f66:	005b      	lsls	r3, r3, #1
 8013f68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f6a:	4413      	add	r3, r2
 8013f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f6e:	b212      	sxth	r2, r2
 8013f70:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = mid_int;
 8013f72:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013f76:	005b      	lsls	r3, r3, #1
 8013f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f7a:	4413      	add	r3, r2
 8013f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f7e:	b212      	sxth	r2, r2
 8013f80:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = tmp_val;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	685a      	ldr	r2, [r3, #4]
 8013f86:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013f8a:	4413      	add	r3, r2
 8013f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f8e:	b2d2      	uxtb	r2, r2
 8013f90:	701a      	strb	r2, [r3, #0]
        c->cir_opa[cir_size] *= 16;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	685a      	ldr	r2, [r3, #4]
 8013f96:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013f9a:	4413      	add	r3, r2
 8013f9c:	781a      	ldrb	r2, [r3, #0]
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6859      	ldr	r1, [r3, #4]
 8013fa2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013fa6:	440b      	add	r3, r1
 8013fa8:	0112      	lsls	r2, r2, #4
 8013faa:	b2d2      	uxtb	r2, r2
 8013fac:	701a      	strb	r2, [r3, #0]
        cir_size++;
 8013fae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	3301      	adds	r3, #1
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8013fbc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013fc0:	3b02      	subs	r3, #2
 8013fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8013fc4:	e02c      	b.n	8014020 <circ_calc_aa4+0x5cc>
        cir_x[cir_size] = cir_y[i];
 8013fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fc8:	005b      	lsls	r3, r3, #1
 8013fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fcc:	441a      	add	r2, r3
 8013fce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013fd6:	440b      	add	r3, r1
 8013fd8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013fdc:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = cir_x[i];
 8013fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fe0:	005b      	lsls	r3, r3, #1
 8013fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013fe4:	441a      	add	r2, r3
 8013fe6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fee:	440b      	add	r3, r1
 8013ff0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013ff4:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = c->cir_opa[i];
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	685a      	ldr	r2, [r3, #4]
 8013ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ffc:	441a      	add	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6859      	ldr	r1, [r3, #4]
 8014002:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014006:	440b      	add	r3, r1
 8014008:	7812      	ldrb	r2, [r2, #0]
 801400a:	701a      	strb	r2, [r3, #0]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 801400c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801400e:	3b01      	subs	r3, #1
 8014010:	653b      	str	r3, [r7, #80]	; 0x50
 8014012:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014016:	b29b      	uxth	r3, r3
 8014018:	3301      	adds	r3, #1
 801401a:	b29b      	uxth	r3, r3
 801401c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014022:	2b00      	cmp	r3, #0
 8014024:	dacf      	bge.n	8013fc6 <circ_calc_aa4+0x572>
    }

    lv_coord_t y = 0;
 8014026:	2300      	movs	r3, #0
 8014028:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    i = 0;
 801402c:	2300      	movs	r3, #0
 801402e:	653b      	str	r3, [r7, #80]	; 0x50
    c->opa_start_on_y[0] = 0;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	2200      	movs	r2, #0
 8014036:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 8014038:	e049      	b.n	80140ce <circ_calc_aa4+0x67a>
        c->opa_start_on_y[y] = i;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	68da      	ldr	r2, [r3, #12]
 801403e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014042:	005b      	lsls	r3, r3, #1
 8014044:	4413      	add	r3, r2
 8014046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014048:	b292      	uxth	r2, r2
 801404a:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[y] = cir_x[i];
 801404c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801404e:	005b      	lsls	r3, r3, #1
 8014050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014052:	4413      	add	r3, r2
 8014054:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	689a      	ldr	r2, [r3, #8]
 801405c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014060:	005b      	lsls	r3, r3, #1
 8014062:	4413      	add	r3, r2
 8014064:	b28a      	uxth	r2, r1
 8014066:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8014068:	e01b      	b.n	80140a2 <circ_calc_aa4+0x64e>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 801406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801406c:	005b      	lsls	r3, r3, #1
 801406e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014070:	4413      	add	r3, r2
 8014072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014076:	4619      	mov	r1, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	689a      	ldr	r2, [r3, #8]
 801407c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014080:	005b      	lsls	r3, r3, #1
 8014082:	4413      	add	r3, r2
 8014084:	881b      	ldrh	r3, [r3, #0]
 8014086:	4299      	cmp	r1, r3
 8014088:	bfa8      	it	ge
 801408a:	4619      	movge	r1, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	689a      	ldr	r2, [r3, #8]
 8014090:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014094:	005b      	lsls	r3, r3, #1
 8014096:	4413      	add	r3, r2
 8014098:	b28a      	uxth	r2, r1
 801409a:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 801409c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801409e:	3301      	adds	r3, #1
 80140a0:	653b      	str	r3, [r7, #80]	; 0x50
 80140a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140a4:	005b      	lsls	r3, r3, #1
 80140a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80140a8:	4413      	add	r3, r2
 80140aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140ae:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d104      	bne.n	80140c0 <circ_calc_aa4+0x66c>
 80140b6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80140ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140bc:	429a      	cmp	r2, r3
 80140be:	dbd4      	blt.n	801406a <circ_calc_aa4+0x616>
        }
        y++;
 80140c0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	3301      	adds	r3, #1
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while(i < cir_size) {
 80140ce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80140d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140d4:	429a      	cmp	r2, r3
 80140d6:	dbb0      	blt.n	801403a <circ_calc_aa4+0x5e6>
    }

    lv_mem_buf_release(cir_x);
 80140d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80140da:	f00e f8c1 	bl	8022260 <lv_mem_buf_release>
 80140de:	e000      	b.n	80140e2 <circ_calc_aa4+0x68e>
    if(radius == 0) return;
 80140e0:	bf00      	nop
}
 80140e2:	3758      	adds	r7, #88	; 0x58
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <get_next_line>:

static lv_opa_t * get_next_line(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t y, lv_coord_t * len,
                                lv_coord_t * x_start)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b085      	sub	sp, #20
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	607a      	str	r2, [r7, #4]
 80140f2:	603b      	str	r3, [r7, #0]
 80140f4:	460b      	mov	r3, r1
 80140f6:	817b      	strh	r3, [r7, #10]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	68da      	ldr	r2, [r3, #12]
 80140fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014100:	3301      	adds	r3, #1
 8014102:	005b      	lsls	r3, r3, #1
 8014104:	4413      	add	r3, r2
 8014106:	881a      	ldrh	r2, [r3, #0]
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	68d9      	ldr	r1, [r3, #12]
 801410c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014110:	005b      	lsls	r3, r3, #1
 8014112:	440b      	add	r3, r1
 8014114:	881b      	ldrh	r3, [r3, #0]
 8014116:	1ad3      	subs	r3, r2, r3
 8014118:	b29b      	uxth	r3, r3
 801411a:	b21a      	sxth	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	801a      	strh	r2, [r3, #0]
    *x_start = c->x_start_on_y[y];
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	689a      	ldr	r2, [r3, #8]
 8014124:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014128:	005b      	lsls	r3, r3, #1
 801412a:	4413      	add	r3, r2
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	b21a      	sxth	r2, r3
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	801a      	strh	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	68fa      	ldr	r2, [r7, #12]
 801413a:	68d1      	ldr	r1, [r2, #12]
 801413c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014140:	0052      	lsls	r2, r2, #1
 8014142:	440a      	add	r2, r1
 8014144:	8812      	ldrh	r2, [r2, #0]
 8014146:	4413      	add	r3, r2
}
 8014148:	4618      	mov	r0, r3
 801414a:	3714      	adds	r7, #20
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr

08014154 <mask_mix>:


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 8014154:	b480      	push	{r7}
 8014156:	b083      	sub	sp, #12
 8014158:	af00      	add	r7, sp, #0
 801415a:	4603      	mov	r3, r0
 801415c:	460a      	mov	r2, r1
 801415e:	71fb      	strb	r3, [r7, #7]
 8014160:	4613      	mov	r3, r2
 8014162:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8014164:	79bb      	ldrb	r3, [r7, #6]
 8014166:	2bfc      	cmp	r3, #252	; 0xfc
 8014168:	d901      	bls.n	801416e <mask_mix+0x1a>
 801416a:	79fb      	ldrb	r3, [r7, #7]
 801416c:	e010      	b.n	8014190 <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 801416e:	79bb      	ldrb	r3, [r7, #6]
 8014170:	2b02      	cmp	r3, #2
 8014172:	d801      	bhi.n	8014178 <mask_mix+0x24>
 8014174:	2300      	movs	r3, #0
 8014176:	e00b      	b.n	8014190 <mask_mix+0x3c>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8014178:	79fb      	ldrb	r3, [r7, #7]
 801417a:	79ba      	ldrb	r2, [r7, #6]
 801417c:	fb02 f303 	mul.w	r3, r2, r3
 8014180:	461a      	mov	r2, r3
 8014182:	4613      	mov	r3, r2
 8014184:	021b      	lsls	r3, r3, #8
 8014186:	4413      	add	r3, r2
 8014188:	01db      	lsls	r3, r3, #7
 801418a:	4413      	add	r3, r2
 801418c:	0ddb      	lsrs	r3, r3, #23
 801418e:	b2db      	uxtb	r3, r3
}
 8014190:	4618      	mov	r0, r3
 8014192:	370c      	adds	r7, #12
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr

0801419c <lv_area_get_width>:
{
 801419c:	b480      	push	{r7}
 801419e:	b083      	sub	sp, #12
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141aa:	b29a      	uxth	r2, r3
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141b2:	b29b      	uxth	r3, r3
 80141b4:	1ad3      	subs	r3, r2, r3
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	3301      	adds	r3, #1
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	b21b      	sxth	r3, r3
}
 80141be:	4618      	mov	r0, r3
 80141c0:	370c      	adds	r7, #12
 80141c2:	46bd      	mov	sp, r7
 80141c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c8:	4770      	bx	lr

080141ca <lv_area_get_height>:
{
 80141ca:	b480      	push	{r7}
 80141cc:	b083      	sub	sp, #12
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80141d8:	b29a      	uxth	r2, r3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	1ad3      	subs	r3, r2, r3
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	3301      	adds	r3, #1
 80141e8:	b29b      	uxth	r3, r3
 80141ea:	b21b      	sxth	r3, r3
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	370c      	adds	r7, #12
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr

080141f8 <lv_color_make>:
{
 80141f8:	b480      	push	{r7}
 80141fa:	b083      	sub	sp, #12
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	4603      	mov	r3, r0
 8014200:	71fb      	strb	r3, [r7, #7]
 8014202:	460b      	mov	r3, r1
 8014204:	71bb      	strb	r3, [r7, #6]
 8014206:	4613      	mov	r3, r2
 8014208:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801420a:	797b      	ldrb	r3, [r7, #5]
 801420c:	09db      	lsrs	r3, r3, #7
 801420e:	b2da      	uxtb	r2, r3
 8014210:	79bb      	ldrb	r3, [r7, #6]
 8014212:	09db      	lsrs	r3, r3, #7
 8014214:	b2db      	uxtb	r3, r3
 8014216:	4313      	orrs	r3, r2
 8014218:	b2da      	uxtb	r2, r3
 801421a:	79fb      	ldrb	r3, [r7, #7]
 801421c:	09db      	lsrs	r3, r3, #7
 801421e:	b2db      	uxtb	r3, r3
 8014220:	4313      	orrs	r3, r2
 8014222:	b2db      	uxtb	r3, r3
}
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <lv_color_white>:
{
 8014230:	b580      	push	{r7, lr}
 8014232:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8014234:	22ff      	movs	r2, #255	; 0xff
 8014236:	21ff      	movs	r1, #255	; 0xff
 8014238:	20ff      	movs	r0, #255	; 0xff
 801423a:	f7ff ffdd 	bl	80141f8 <lv_color_make>
 801423e:	4603      	mov	r3, r0
}
 8014240:	4618      	mov	r0, r3
 8014242:	bd80      	pop	{r7, pc}

08014244 <lv_color_black>:
{
 8014244:	b580      	push	{r7, lr}
 8014246:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8014248:	2200      	movs	r2, #0
 801424a:	2100      	movs	r1, #0
 801424c:	2000      	movs	r0, #0
 801424e:	f7ff ffd3 	bl	80141f8 <lv_color_make>
 8014252:	4603      	mov	r3, r0
}
 8014254:	4618      	mov	r0, r3
 8014256:	bd80      	pop	{r7, pc}

08014258 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8014258:	b590      	push	{r4, r7, lr}
 801425a:	b083      	sub	sp, #12
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8014260:	2130      	movs	r1, #48	; 0x30
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f00e fafa 	bl	802285c <lv_memset_00>
    dsc->bg_color = lv_color_white();
 8014268:	687c      	ldr	r4, [r7, #4]
 801426a:	f7ff ffe1 	bl	8014230 <lv_color_white>
 801426e:	7120      	strb	r0, [r4, #4]
    dsc->bg_grad.stops[0].color = lv_color_white();
 8014270:	687c      	ldr	r4, [r7, #4]
 8014272:	f7ff ffdd 	bl	8014230 <lv_color_white>
 8014276:	7160      	strb	r0, [r4, #5]
    dsc->bg_grad.stops[1].color = lv_color_black();
 8014278:	687c      	ldr	r4, [r7, #4]
 801427a:	f7ff ffe3 	bl	8014244 <lv_color_black>
 801427e:	71e0      	strb	r0, [r4, #7]
    dsc->bg_grad.stops[1].frac = 0xFF;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	22ff      	movs	r2, #255	; 0xff
 8014284:	721a      	strb	r2, [r3, #8]
    dsc->bg_grad.stops_count = 2;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2202      	movs	r2, #2
 801428a:	725a      	strb	r2, [r3, #9]
    dsc->border_color = lv_color_black();
 801428c:	687c      	ldr	r4, [r7, #4]
 801428e:	f7ff ffd9 	bl	8014244 <lv_color_black>
 8014292:	7620      	strb	r0, [r4, #24]
    dsc->shadow_color = lv_color_black();
 8014294:	687c      	ldr	r4, [r7, #4]
 8014296:	f7ff ffd5 	bl	8014244 <lv_color_black>
 801429a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	4a0e      	ldr	r2, [pc, #56]	; (80142dc <lv_draw_rect_dsc_init+0x84>)
 80142a2:	611a      	str	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	22ff      	movs	r2, #255	; 0xff
 80142a8:	70da      	strb	r2, [r3, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	22ff      	movs	r2, #255	; 0xff
 80142ae:	755a      	strb	r2, [r3, #21]
    dsc->outline_opa = LV_OPA_COVER;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	22ff      	movs	r2, #255	; 0xff
 80142b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    dsc->border_opa = LV_OPA_COVER;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	22ff      	movs	r2, #255	; 0xff
 80142bc:	771a      	strb	r2, [r3, #28]
    dsc->shadow_opa = LV_OPA_COVER;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	22ff      	movs	r2, #255	; 0xff
 80142c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    dsc->border_side = LV_BORDER_SIDE_FULL;
 80142c6:	687a      	ldr	r2, [r7, #4]
 80142c8:	7f53      	ldrb	r3, [r2, #29]
 80142ca:	210f      	movs	r1, #15
 80142cc:	f361 0345 	bfi	r3, r1, #1, #5
 80142d0:	7753      	strb	r3, [r2, #29]
}
 80142d2:	bf00      	nop
 80142d4:	370c      	adds	r7, #12
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd90      	pop	{r4, r7, pc}
 80142da:	bf00      	nop
 80142dc:	0802db98 	.word	0x0802db98

080142e0 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	60b9      	str	r1, [r7, #8]
 80142ea:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7ff ff6c 	bl	80141ca <lv_area_get_height>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	dd0c      	ble.n	8014312 <lv_draw_rect+0x32>
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f7ff ff4f 	bl	801419c <lv_area_get_width>
 80142fe:	4603      	mov	r3, r0
 8014300:	2b00      	cmp	r3, #0
 8014302:	dd06      	ble.n	8014312 <lv_draw_rect+0x32>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	68db      	ldr	r3, [r3, #12]
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	68b9      	ldr	r1, [r7, #8]
 801430c:	68f8      	ldr	r0, [r7, #12]
 801430e:	4798      	blx	r3
 8014310:	e000      	b.n	8014314 <lv_draw_rect+0x34>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8014312:	bf00      	nop

    LV_ASSERT_MEM_INTEGRITY();
}
 8014314:	3710      	adds	r7, #16
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801431a:	b590      	push	{r4, r7, lr}
 801431c:	b08b      	sub	sp, #44	; 0x2c
 801431e:	af06      	add	r7, sp, #24
 8014320:	60f8      	str	r0, [r7, #12]
 8014322:	60b9      	str	r1, [r7, #8]
 8014324:	607a      	str	r2, [r7, #4]
 8014326:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_NULL(draw_ctx);
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d100      	bne.n	8014330 <lv_draw_transform+0x16>
 801432e:	e7fe      	b.n	801432e <lv_draw_transform+0x14>
    if(draw_ctx->draw_transform == NULL) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014334:	2b00      	cmp	r3, #0
 8014336:	d018      	beq.n	801436a <lv_draw_transform+0x50>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801433c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014342:	9305      	str	r3, [sp, #20]
 8014344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014346:	9304      	str	r3, [sp, #16]
 8014348:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801434c:	9303      	str	r3, [sp, #12]
 801434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014350:	9302      	str	r3, [sp, #8]
 8014352:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014356:	9301      	str	r3, [sp, #4]
 8014358:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801435c:	9300      	str	r3, [sp, #0]
 801435e:	4613      	mov	r3, r2
 8014360:	687a      	ldr	r2, [r7, #4]
 8014362:	68b9      	ldr	r1, [r7, #8]
 8014364:	68f8      	ldr	r0, [r7, #12]
 8014366:	47a0      	blx	r4
 8014368:	e000      	b.n	801436c <lv_draw_transform+0x52>
        return;
 801436a:	bf00      	nop

}
 801436c:	3714      	adds	r7, #20
 801436e:	46bd      	mov	sp, r7
 8014370:	bd90      	pop	{r4, r7, pc}

08014372 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b088      	sub	sp, #32
 8014376:	af00      	add	r7, sp, #0
 8014378:	60f8      	str	r0, [r7, #12]
 801437a:	4608      	mov	r0, r1
 801437c:	4611      	mov	r1, r2
 801437e:	461a      	mov	r2, r3
 8014380:	4603      	mov	r3, r0
 8014382:	817b      	strh	r3, [r7, #10]
 8014384:	460b      	mov	r3, r1
 8014386:	813b      	strh	r3, [r7, #8]
 8014388:	4613      	mov	r3, r2
 801438a:	80fb      	strh	r3, [r7, #6]
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 801438c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d116      	bne.n	80143c2 <_lv_img_buf_get_transformed_area+0x50>
 8014394:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801439a:	d112      	bne.n	80143c2 <_lv_img_buf_get_transformed_area+0x50>
        res->x1 = 0;
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2200      	movs	r2, #0
 80143a0:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2200      	movs	r2, #0
 80143a6:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 80143a8:	897b      	ldrh	r3, [r7, #10]
 80143aa:	3b01      	subs	r3, #1
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	b21a      	sxth	r2, r3
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 80143b4:	893b      	ldrh	r3, [r7, #8]
 80143b6:	3b01      	subs	r3, #1
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	b21a      	sxth	r2, r3
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	80da      	strh	r2, [r3, #6]
 80143c0:	e09c      	b.n	80144fc <_lv_img_buf_get_transformed_area+0x18a>
        return;
    }

    lv_point_t p[4] = {
 80143c2:	2300      	movs	r3, #0
 80143c4:	823b      	strh	r3, [r7, #16]
 80143c6:	2300      	movs	r3, #0
 80143c8:	827b      	strh	r3, [r7, #18]
 80143ca:	897b      	ldrh	r3, [r7, #10]
 80143cc:	82bb      	strh	r3, [r7, #20]
 80143ce:	2300      	movs	r3, #0
 80143d0:	82fb      	strh	r3, [r7, #22]
 80143d2:	2300      	movs	r3, #0
 80143d4:	833b      	strh	r3, [r7, #24]
 80143d6:	893b      	ldrh	r3, [r7, #8]
 80143d8:	837b      	strh	r3, [r7, #26]
 80143da:	897b      	ldrh	r3, [r7, #10]
 80143dc:	83bb      	strh	r3, [r7, #28]
 80143de:	893b      	ldrh	r3, [r7, #8]
 80143e0:	83fb      	strh	r3, [r7, #30]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 80143e2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80143e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80143e8:	f107 0010 	add.w	r0, r7, #16
 80143ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ee:	f00c fdeb 	bl	8020fc8 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 80143f2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80143f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80143f8:	f107 0310 	add.w	r3, r7, #16
 80143fc:	1d18      	adds	r0, r3, #4
 80143fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014400:	f00c fde2 	bl	8020fc8 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 8014404:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014408:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801440a:	f107 0310 	add.w	r3, r7, #16
 801440e:	f103 0008 	add.w	r0, r3, #8
 8014412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014414:	f00c fdd8 	bl	8020fc8 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 8014418:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801441c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801441e:	f107 0310 	add.w	r3, r7, #16
 8014422:	f103 000c 	add.w	r0, r3, #12
 8014426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014428:	f00c fdce 	bl	8020fc8 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801442c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8014430:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8014434:	4293      	cmp	r3, r2
 8014436:	bfa8      	it	ge
 8014438:	4613      	movge	r3, r2
 801443a:	b21a      	sxth	r2, r3
 801443c:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8014440:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8014444:	428b      	cmp	r3, r1
 8014446:	bfa8      	it	ge
 8014448:	460b      	movge	r3, r1
 801444a:	b21b      	sxth	r3, r3
 801444c:	4293      	cmp	r3, r2
 801444e:	bfa8      	it	ge
 8014450:	4613      	movge	r3, r2
 8014452:	b21b      	sxth	r3, r3
 8014454:	b29b      	uxth	r3, r3
 8014456:	3b02      	subs	r3, #2
 8014458:	b29b      	uxth	r3, r3
 801445a:	b21a      	sxth	r2, r3
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 8014460:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8014464:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8014468:	4293      	cmp	r3, r2
 801446a:	bfb8      	it	lt
 801446c:	4613      	movlt	r3, r2
 801446e:	b21a      	sxth	r2, r3
 8014470:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8014474:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8014478:	428b      	cmp	r3, r1
 801447a:	bfb8      	it	lt
 801447c:	460b      	movlt	r3, r1
 801447e:	b21b      	sxth	r3, r3
 8014480:	4293      	cmp	r3, r2
 8014482:	bfb8      	it	lt
 8014484:	4613      	movlt	r3, r2
 8014486:	b21b      	sxth	r3, r3
 8014488:	b29b      	uxth	r3, r3
 801448a:	3302      	adds	r3, #2
 801448c:	b29b      	uxth	r3, r3
 801448e:	b21a      	sxth	r2, r3
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 8014494:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8014498:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801449c:	4293      	cmp	r3, r2
 801449e:	bfa8      	it	ge
 80144a0:	4613      	movge	r3, r2
 80144a2:	b21a      	sxth	r2, r3
 80144a4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80144a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80144ac:	428b      	cmp	r3, r1
 80144ae:	bfa8      	it	ge
 80144b0:	460b      	movge	r3, r1
 80144b2:	b21b      	sxth	r3, r3
 80144b4:	4293      	cmp	r3, r2
 80144b6:	bfa8      	it	ge
 80144b8:	4613      	movge	r3, r2
 80144ba:	b21b      	sxth	r3, r3
 80144bc:	b29b      	uxth	r3, r3
 80144be:	3b02      	subs	r3, #2
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	b21a      	sxth	r2, r3
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 80144c8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80144cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80144d0:	4293      	cmp	r3, r2
 80144d2:	bfb8      	it	lt
 80144d4:	4613      	movlt	r3, r2
 80144d6:	b21a      	sxth	r2, r3
 80144d8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80144dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80144e0:	428b      	cmp	r3, r1
 80144e2:	bfb8      	it	lt
 80144e4:	460b      	movlt	r3, r1
 80144e6:	b21b      	sxth	r3, r3
 80144e8:	4293      	cmp	r3, r2
 80144ea:	bfb8      	it	lt
 80144ec:	4613      	movlt	r3, r2
 80144ee:	b21b      	sxth	r3, r3
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	3302      	adds	r3, #2
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	b21a      	sxth	r2, r3
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 80144fc:	3720      	adds	r7, #32
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
	...

08014504 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b088      	sub	sp, #32
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	7239      	strb	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
    /*Is the image cached?*/
    _lv_img_cache_entry_t * cached_src = NULL;
 8014510:	2300      	movs	r3, #0
 8014512:	61fb      	str	r3, [r7, #28]
    }
    else {
        LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
 8014514:	4b19      	ldr	r3, [pc, #100]	; (801457c <_lv_img_cache_open+0x78>)
 8014516:	61fb      	str	r3, [r7, #28]
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 8014518:	f00b fddc 	bl	80200d4 <lv_tick_get>
 801451c:	61b8      	str	r0, [r7, #24]
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 801451e:	69f8      	ldr	r0, [r7, #28]
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	7a3a      	ldrb	r2, [r7, #8]
 8014524:	68f9      	ldr	r1, [r7, #12]
 8014526:	f000 f8e9 	bl	80146fc <lv_img_decoder_open>
 801452a:	4603      	mov	r3, r0
 801452c:	75fb      	strb	r3, [r7, #23]
    if(open_res == LV_RES_INV) {
 801452e:	7dfb      	ldrb	r3, [r7, #23]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d109      	bne.n	8014548 <_lv_img_cache_open+0x44>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 8014534:	212c      	movs	r1, #44	; 0x2c
 8014536:	69f8      	ldr	r0, [r7, #28]
 8014538:	f00e f990 	bl	802285c <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014542:	629a      	str	r2, [r3, #40]	; 0x28
        return NULL;
 8014544:	2300      	movs	r3, #0
 8014546:	e014      	b.n	8014572 <_lv_img_cache_open+0x6e>
    }

    cached_src->life = 0;
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	2200      	movs	r2, #0
 801454c:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 801454e:	69fb      	ldr	r3, [r7, #28]
 8014550:	69db      	ldr	r3, [r3, #28]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d105      	bne.n	8014562 <_lv_img_cache_open+0x5e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8014556:	69b8      	ldr	r0, [r7, #24]
 8014558:	f00b fdd6 	bl	8020108 <lv_tick_elaps>
 801455c:	4602      	mov	r2, r0
 801455e:	69fb      	ldr	r3, [r7, #28]
 8014560:	61da      	str	r2, [r3, #28]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	69db      	ldr	r3, [r3, #28]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d102      	bne.n	8014570 <_lv_img_cache_open+0x6c>
 801456a:	69fb      	ldr	r3, [r7, #28]
 801456c:	2201      	movs	r2, #1
 801456e:	61da      	str	r2, [r3, #28]

    return cached_src;
 8014570:	69fb      	ldr	r3, [r7, #28]
}
 8014572:	4618      	mov	r0, r3
 8014574:	3720      	adds	r7, #32
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
 801457a:	bf00      	nop
 801457c:	200008b0 	.word	0x200008b0

08014580 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 8014588:	bf00      	nop
 801458a:	370c      	adds	r7, #12
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr

08014594 <lv_memcpy_small>:
{
 8014594:	b480      	push	{r7}
 8014596:	b087      	sub	sp, #28
 8014598:	af00      	add	r7, sp, #0
 801459a:	60f8      	str	r0, [r7, #12]
 801459c:	60b9      	str	r1, [r7, #8]
 801459e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	613b      	str	r3, [r7, #16]
    while(len) {
 80145a8:	e00c      	b.n	80145c4 <lv_memcpy_small+0x30>
        *d8 = *s8;
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	781a      	ldrb	r2, [r3, #0]
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	701a      	strb	r2, [r3, #0]
        d8++;
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	3301      	adds	r3, #1
 80145b6:	617b      	str	r3, [r7, #20]
        s8++;
 80145b8:	693b      	ldr	r3, [r7, #16]
 80145ba:	3301      	adds	r3, #1
 80145bc:	613b      	str	r3, [r7, #16]
        len--;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	3b01      	subs	r3, #1
 80145c2:	607b      	str	r3, [r7, #4]
    while(len) {
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d1ef      	bne.n	80145aa <lv_memcpy_small+0x16>
    return dst;
 80145ca:	68fb      	ldr	r3, [r7, #12]
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	371c      	adds	r7, #28
 80145d0:	46bd      	mov	sp, r7
 80145d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d6:	4770      	bx	lr

080145d8 <lv_color_make>:
{
 80145d8:	b480      	push	{r7}
 80145da:	b083      	sub	sp, #12
 80145dc:	af00      	add	r7, sp, #0
 80145de:	4603      	mov	r3, r0
 80145e0:	71fb      	strb	r3, [r7, #7]
 80145e2:	460b      	mov	r3, r1
 80145e4:	71bb      	strb	r3, [r7, #6]
 80145e6:	4613      	mov	r3, r2
 80145e8:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80145ea:	797b      	ldrb	r3, [r7, #5]
 80145ec:	09db      	lsrs	r3, r3, #7
 80145ee:	b2da      	uxtb	r2, r3
 80145f0:	79bb      	ldrb	r3, [r7, #6]
 80145f2:	09db      	lsrs	r3, r3, #7
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	4313      	orrs	r3, r2
 80145f8:	b2da      	uxtb	r2, r3
 80145fa:	79fb      	ldrb	r3, [r7, #7]
 80145fc:	09db      	lsrs	r3, r3, #7
 80145fe:	b2db      	uxtb	r3, r3
 8014600:	4313      	orrs	r3, r2
 8014602:	b2db      	uxtb	r3, r3
}
 8014604:	4618      	mov	r0, r3
 8014606:	370c      	adds	r7, #12
 8014608:	46bd      	mov	sp, r7
 801460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460e:	4770      	bx	lr

08014610 <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 */
void _lv_img_decoder_init(void)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 8014616:	2114      	movs	r1, #20
 8014618:	4810      	ldr	r0, [pc, #64]	; (801465c <_lv_img_decoder_init+0x4c>)
 801461a:	f00d fa4e 	bl	8021aba <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 801461e:	f000 f96d 	bl	80148fc <lv_img_decoder_create>
 8014622:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d100      	bne.n	801462c <_lv_img_decoder_init+0x1c>
 801462a:	e7fe      	b.n	801462a <_lv_img_decoder_init+0x1a>
    if(decoder == NULL) {
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d010      	beq.n	8014654 <_lv_img_decoder_init+0x44>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8014632:	490b      	ldr	r1, [pc, #44]	; (8014660 <_lv_img_decoder_init+0x50>)
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f000 f97d 	bl	8014934 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 801463a:	490a      	ldr	r1, [pc, #40]	; (8014664 <_lv_img_decoder_init+0x54>)
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 f987 	bl	8014950 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8014642:	4909      	ldr	r1, [pc, #36]	; (8014668 <_lv_img_decoder_init+0x58>)
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f000 f991 	bl	801496c <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 801464a:	4908      	ldr	r1, [pc, #32]	; (801466c <_lv_img_decoder_init+0x5c>)
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f000 f99b 	bl	8014988 <lv_img_decoder_set_close_cb>
 8014652:	e000      	b.n	8014656 <_lv_img_decoder_init+0x46>
        return;
 8014654:	bf00      	nop
}
 8014656:	3708      	adds	r7, #8
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}
 801465c:	20000894 	.word	0x20000894
 8014660:	080149a5 	.word	0x080149a5
 8014664:	08014af5 	.word	0x08014af5
 8014668:	08014db9 	.word	0x08014db9
 801466c:	08014edd 	.word	0x08014edd

08014670 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const void * src, lv_img_header_t * header)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b086      	sub	sp, #24
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	6039      	str	r1, [r7, #0]
    lv_memset_00(header, sizeof(lv_img_header_t));
 801467a:	2104      	movs	r1, #4
 801467c:	6838      	ldr	r0, [r7, #0]
 801467e:	f00e f8ed 	bl	802285c <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d101      	bne.n	801468c <lv_img_decoder_get_info+0x1c>
 8014688:	2300      	movs	r3, #0
 801468a:	e030      	b.n	80146ee <lv_img_decoder_get_info+0x7e>

    lv_img_src_t src_type = lv_img_src_get_type(src);
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f7fb ff76 	bl	801057e <lv_img_src_get_type>
 8014692:	4603      	mov	r3, r0
 8014694:	73fb      	strb	r3, [r7, #15]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8014696:	7bfb      	ldrb	r3, [r7, #15]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d107      	bne.n	80146ac <lv_img_decoder_get_info+0x3c>
        const lv_img_dsc_t * img_dsc = src;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	60bb      	str	r3, [r7, #8]
        if(img_dsc->data == NULL) return LV_RES_INV;
 80146a0:	68bb      	ldr	r3, [r7, #8]
 80146a2:	689b      	ldr	r3, [r3, #8]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d101      	bne.n	80146ac <lv_img_decoder_get_info+0x3c>
 80146a8:	2300      	movs	r3, #0
 80146aa:	e020      	b.n	80146ee <lv_img_decoder_get_info+0x7e>
    }

    lv_res_t res = LV_RES_INV;
 80146ac:	2300      	movs	r3, #0
 80146ae:	75fb      	strb	r3, [r7, #23]
    lv_img_decoder_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80146b0:	4811      	ldr	r0, [pc, #68]	; (80146f8 <lv_img_decoder_get_info+0x88>)
 80146b2:	f00d fae0 	bl	8021c76 <_lv_ll_get_head>
 80146b6:	6138      	str	r0, [r7, #16]
 80146b8:	e013      	b.n	80146e2 <lv_img_decoder_get_info+0x72>
        if(d->info_cb) {
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d00a      	beq.n	80146d8 <lv_img_decoder_get_info+0x68>
            res = d->info_cb(d, src, header);
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	683a      	ldr	r2, [r7, #0]
 80146c8:	6879      	ldr	r1, [r7, #4]
 80146ca:	6938      	ldr	r0, [r7, #16]
 80146cc:	4798      	blx	r3
 80146ce:	4603      	mov	r3, r0
 80146d0:	75fb      	strb	r3, [r7, #23]
            if(res == LV_RES_OK) break;
 80146d2:	7dfb      	ldrb	r3, [r7, #23]
 80146d4:	2b01      	cmp	r3, #1
 80146d6:	d008      	beq.n	80146ea <lv_img_decoder_get_info+0x7a>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80146d8:	6939      	ldr	r1, [r7, #16]
 80146da:	4807      	ldr	r0, [pc, #28]	; (80146f8 <lv_img_decoder_get_info+0x88>)
 80146dc:	f00d faed 	bl	8021cba <_lv_ll_get_next>
 80146e0:	6138      	str	r0, [r7, #16]
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d1e8      	bne.n	80146ba <lv_img_decoder_get_info+0x4a>
 80146e8:	e000      	b.n	80146ec <lv_img_decoder_get_info+0x7c>
            if(res == LV_RES_OK) break;
 80146ea:	bf00      	nop
        }
    }

    return res;
 80146ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3718      	adds	r7, #24
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop
 80146f8:	20000894 	.word	0x20000894

080146fc <lv_img_decoder_open>:

lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color, int32_t frame_id)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b08a      	sub	sp, #40	; 0x28
 8014700:	af00      	add	r7, sp, #0
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	60b9      	str	r1, [r7, #8]
 8014706:	713a      	strb	r2, [r7, #4]
 8014708:	603b      	str	r3, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 801470a:	2128      	movs	r1, #40	; 0x28
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f00e f8a5 	bl	802285c <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d101      	bne.n	801471c <lv_img_decoder_open+0x20>
 8014718:	2300      	movs	r3, #0
 801471a:	e096      	b.n	801484a <lv_img_decoder_open+0x14e>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 801471c:	68b8      	ldr	r0, [r7, #8]
 801471e:	f7fb ff2e 	bl	801057e <lv_img_src_get_type>
 8014722:	4603      	mov	r3, r0
 8014724:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8014726:	7ffb      	ldrb	r3, [r7, #31]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d107      	bne.n	801473c <lv_img_decoder_open+0x40>
        const lv_img_dsc_t * img_dsc = src;
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	61bb      	str	r3, [r7, #24]
        if(img_dsc->data == NULL) return LV_RES_INV;
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	689b      	ldr	r3, [r3, #8]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d101      	bne.n	801473c <lv_img_decoder_open+0x40>
 8014738:	2300      	movs	r3, #0
 801473a:	e086      	b.n	801484a <lv_img_decoder_open+0x14e>
    }

    dsc->color    = color;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	793a      	ldrb	r2, [r7, #4]
 8014740:	721a      	strb	r2, [r3, #8]
    dsc->src_type = src_type;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	7ffa      	ldrb	r2, [r7, #31]
 8014746:	741a      	strb	r2, [r3, #16]
    dsc->frame_id = frame_id;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	683a      	ldr	r2, [r7, #0]
 801474c:	60da      	str	r2, [r3, #12]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	7c1b      	ldrb	r3, [r3, #16]
 8014752:	2b01      	cmp	r3, #1
 8014754:	d11d      	bne.n	8014792 <lv_img_decoder_open+0x96>
        size_t fnlen = strlen(src);
 8014756:	68b8      	ldr	r0, [r7, #8]
 8014758:	f7eb fd78 	bl	800024c <strlen>
 801475c:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	3301      	adds	r3, #1
 8014762:	4618      	mov	r0, r3
 8014764:	f00d fc46 	bl	8021ff4 <lv_mem_alloc>
 8014768:	4602      	mov	r2, r0
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MALLOC(dsc->src);
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d100      	bne.n	8014778 <lv_img_decoder_open+0x7c>
 8014776:	e7fe      	b.n	8014776 <lv_img_decoder_open+0x7a>
        if(dsc->src == NULL) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	685b      	ldr	r3, [r3, #4]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d101      	bne.n	8014784 <lv_img_decoder_open+0x88>
            LV_LOG_WARN("lv_img_decoder_open: out of memory");
            return LV_RES_INV;
 8014780:	2300      	movs	r3, #0
 8014782:	e062      	b.n	801484a <lv_img_decoder_open+0x14e>
        }
        strcpy((char *)dsc->src, src);
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	68b9      	ldr	r1, [r7, #8]
 801478a:	4618      	mov	r0, r3
 801478c:	f012 f910 	bl	80269b0 <strcpy>
 8014790:	e002      	b.n	8014798 <lv_img_decoder_open+0x9c>
    }
    else {
        dsc->src = src;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	68ba      	ldr	r2, [r7, #8]
 8014796:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 8014798:	2300      	movs	r3, #0
 801479a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    lv_img_decoder_t * decoder;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 801479e:	482d      	ldr	r0, [pc, #180]	; (8014854 <lv_img_decoder_open+0x158>)
 80147a0:	f00d fa69 	bl	8021c76 <_lv_ll_get_head>
 80147a4:	6238      	str	r0, [r7, #32]
 80147a6:	e042      	b.n	801482e <lv_img_decoder_open+0x132>
        /*Info and Open callbacks are required*/
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 80147a8:	6a3b      	ldr	r3, [r7, #32]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d036      	beq.n	801481e <lv_img_decoder_open+0x122>
 80147b0:	6a3b      	ldr	r3, [r7, #32]
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d032      	beq.n	801481e <lv_img_decoder_open+0x122>

        res = decoder->info_cb(decoder, src, &dsc->header);
 80147b8:	6a3b      	ldr	r3, [r7, #32]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	68fa      	ldr	r2, [r7, #12]
 80147be:	3214      	adds	r2, #20
 80147c0:	68b9      	ldr	r1, [r7, #8]
 80147c2:	6a38      	ldr	r0, [r7, #32]
 80147c4:	4798      	blx	r3
 80147c6:	4603      	mov	r3, r0
 80147c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(res != LV_RES_OK) continue;
 80147cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147d0:	2b01      	cmp	r3, #1
 80147d2:	d126      	bne.n	8014822 <lv_img_decoder_open+0x126>

        dsc->decoder = decoder;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6a3a      	ldr	r2, [r7, #32]
 80147d8:	601a      	str	r2, [r3, #0]
        res = decoder->open_cb(decoder, dsc);
 80147da:	6a3b      	ldr	r3, [r7, #32]
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	68f9      	ldr	r1, [r7, #12]
 80147e0:	6a38      	ldr	r0, [r7, #32]
 80147e2:	4798      	blx	r3
 80147e4:	4603      	mov	r3, r0
 80147e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /*Opened successfully. It is a good decoder for this image source*/
        if(res == LV_RES_OK) return res;
 80147ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d102      	bne.n	80147f8 <lv_img_decoder_open+0xfc>
 80147f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147f6:	e028      	b.n	801484a <lv_img_decoder_open+0x14e>

        /*Prepare for the next loop*/
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	3314      	adds	r3, #20
 80147fc:	2104      	movs	r1, #4
 80147fe:	4618      	mov	r0, r3
 8014800:	f00e f82c 	bl	802285c <lv_memset_00>

        dsc->error_msg = NULL;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	2200      	movs	r2, #0
 8014808:	621a      	str	r2, [r3, #32]
        dsc->img_data  = NULL;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2200      	movs	r2, #0
 801480e:	619a      	str	r2, [r3, #24]
        dsc->user_data = NULL;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2200      	movs	r2, #0
 8014814:	625a      	str	r2, [r3, #36]	; 0x24
        dsc->time_to_open = 0;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2200      	movs	r2, #0
 801481a:	61da      	str	r2, [r3, #28]
 801481c:	e002      	b.n	8014824 <lv_img_decoder_open+0x128>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 801481e:	bf00      	nop
 8014820:	e000      	b.n	8014824 <lv_img_decoder_open+0x128>
        if(res != LV_RES_OK) continue;
 8014822:	bf00      	nop
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8014824:	6a39      	ldr	r1, [r7, #32]
 8014826:	480b      	ldr	r0, [pc, #44]	; (8014854 <lv_img_decoder_open+0x158>)
 8014828:	f00d fa47 	bl	8021cba <_lv_ll_get_next>
 801482c:	6238      	str	r0, [r7, #32]
 801482e:	6a3b      	ldr	r3, [r7, #32]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d1b9      	bne.n	80147a8 <lv_img_decoder_open+0xac>
    }

    if(dsc->src_type == LV_IMG_SRC_FILE)
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	7c1b      	ldrb	r3, [r3, #16]
 8014838:	2b01      	cmp	r3, #1
 801483a:	d104      	bne.n	8014846 <lv_img_decoder_open+0x14a>
        lv_mem_free((void *)dsc->src);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	685b      	ldr	r3, [r3, #4]
 8014840:	4618      	mov	r0, r3
 8014842:	f00d fc07 	bl	8022054 <lv_mem_free>

    return res;
 8014846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801484a:	4618      	mov	r0, r3
 801484c:	3728      	adds	r7, #40	; 0x28
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
 8014852:	bf00      	nop
 8014854:	20000894 	.word	0x20000894

08014858 <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8014858:	b590      	push	{r4, r7, lr}
 801485a:	b089      	sub	sp, #36	; 0x24
 801485c:	af02      	add	r7, sp, #8
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	4608      	mov	r0, r1
 8014862:	4611      	mov	r1, r2
 8014864:	461a      	mov	r2, r3
 8014866:	4603      	mov	r3, r0
 8014868:	817b      	strh	r3, [r7, #10]
 801486a:	460b      	mov	r3, r1
 801486c:	813b      	strh	r3, [r7, #8]
 801486e:	4613      	mov	r3, r2
 8014870:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8014872:	2300      	movs	r3, #0
 8014874:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	689b      	ldr	r3, [r3, #8]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d012      	beq.n	80148a6 <lv_img_decoder_read_line+0x4e>
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	689c      	ldr	r4, [r3, #8]
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	6818      	ldr	r0, [r3, #0]
 801488a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801488e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014894:	9301      	str	r3, [sp, #4]
 8014896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801489a:	9300      	str	r3, [sp, #0]
 801489c:	460b      	mov	r3, r1
 801489e:	68f9      	ldr	r1, [r7, #12]
 80148a0:	47a0      	blx	r4
 80148a2:	4603      	mov	r3, r0
 80148a4:	75fb      	strb	r3, [r7, #23]

    return res;
 80148a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	371c      	adds	r7, #28
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd90      	pop	{r4, r7, pc}

080148b0 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d018      	beq.n	80148f2 <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	68db      	ldr	r3, [r3, #12]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d007      	beq.n	80148da <lv_img_decoder_close+0x2a>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	687a      	ldr	r2, [r7, #4]
 80148d2:	6812      	ldr	r2, [r2, #0]
 80148d4:	6879      	ldr	r1, [r7, #4]
 80148d6:	4610      	mov	r0, r2
 80148d8:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	7c1b      	ldrb	r3, [r3, #16]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d107      	bne.n	80148f2 <lv_img_decoder_close+0x42>
            lv_mem_free((void *)dsc->src);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	4618      	mov	r0, r3
 80148e8:	f00d fbb4 	bl	8022054 <lv_mem_free>
            dsc->src = NULL;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2200      	movs	r2, #0
 80148f0:	605a      	str	r2, [r3, #4]
        }
    }
}
 80148f2:	bf00      	nop
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
	...

080148fc <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b082      	sub	sp, #8
 8014900:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 8014902:	480b      	ldr	r0, [pc, #44]	; (8014930 <lv_img_decoder_create+0x34>)
 8014904:	f00d f8f2 	bl	8021aec <_lv_ll_ins_head>
 8014908:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d100      	bne.n	8014912 <lv_img_decoder_create+0x16>
 8014910:	e7fe      	b.n	8014910 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d101      	bne.n	801491c <lv_img_decoder_create+0x20>
 8014918:	2300      	movs	r3, #0
 801491a:	e004      	b.n	8014926 <lv_img_decoder_create+0x2a>

    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 801491c:	2114      	movs	r1, #20
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f00d ff9c 	bl	802285c <lv_memset_00>

    return decoder;
 8014924:	687b      	ldr	r3, [r7, #4]
}
 8014926:	4618      	mov	r0, r3
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	20000894 	.word	0x20000894

08014934 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8014934:	b480      	push	{r7}
 8014936:	b083      	sub	sp, #12
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	683a      	ldr	r2, [r7, #0]
 8014942:	601a      	str	r2, [r3, #0]
}
 8014944:	bf00      	nop
 8014946:	370c      	adds	r7, #12
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr

08014950 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8014950:	b480      	push	{r7}
 8014952:	b083      	sub	sp, #12
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	683a      	ldr	r2, [r7, #0]
 801495e:	605a      	str	r2, [r3, #4]
}
 8014960:	bf00      	nop
 8014962:	370c      	adds	r7, #12
 8014964:	46bd      	mov	sp, r7
 8014966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496a:	4770      	bx	lr

0801496c <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	683a      	ldr	r2, [r7, #0]
 801497a:	609a      	str	r2, [r3, #8]
}
 801497c:	bf00      	nop
 801497e:	370c      	adds	r7, #12
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr

08014988 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8014988:	b480      	push	{r7}
 801498a:	b083      	sub	sp, #12
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	683a      	ldr	r2, [r7, #0]
 8014996:	60da      	str	r2, [r3, #12]
}
 8014998:	bf00      	nop
 801499a:	370c      	adds	r7, #12
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr

080149a4 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b08a      	sub	sp, #40	; 0x28
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	60f8      	str	r0, [r7, #12]
 80149ac:	60b9      	str	r1, [r7, #8]
 80149ae:	607a      	str	r2, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 80149b0:	68b8      	ldr	r0, [r7, #8]
 80149b2:	f7fb fde4 	bl	801057e <lv_img_src_get_type>
 80149b6:	4603      	mov	r3, r0
 80149b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80149bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d12f      	bne.n	8014a24 <lv_img_decoder_built_in_info+0x80>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80149d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80149d6:	2b03      	cmp	r3, #3
 80149d8:	d903      	bls.n	80149e2 <lv_img_decoder_built_in_info+0x3e>
 80149da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80149de:	2b14      	cmp	r3, #20
 80149e0:	d901      	bls.n	80149e6 <lv_img_decoder_built_in_info+0x42>
 80149e2:	2300      	movs	r3, #0
 80149e4:	e080      	b.n	8014ae8 <lv_img_decoder_built_in_info+0x144>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80149ee:	b299      	uxth	r1, r3
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	6813      	ldr	r3, [r2, #0]
 80149f4:	f361 2394 	bfi	r3, r1, #10, #11
 80149f8:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	885b      	ldrh	r3, [r3, #2]
 80149fe:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8014a02:	b299      	uxth	r1, r3
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	8853      	ldrh	r3, [r2, #2]
 8014a08:	f361 134f 	bfi	r3, r1, #5, #11
 8014a0c:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014a16:	b2d9      	uxtb	r1, r3
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	7813      	ldrb	r3, [r2, #0]
 8014a1c:	f361 0304 	bfi	r3, r1, #0, #5
 8014a20:	7013      	strb	r3, [r2, #0]
 8014a22:	e060      	b.n	8014ae6 <lv_img_decoder_built_in_info+0x142>
    }
    else if(src_type == LV_IMG_SRC_FILE) {
 8014a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a28:	2b01      	cmp	r3, #1
 8014a2a:	d143      	bne.n	8014ab4 <lv_img_decoder_built_in_info+0x110>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8014a2c:	68b8      	ldr	r0, [r7, #8]
 8014a2e:	f00c ffff 	bl	8021a30 <lv_fs_get_ext>
 8014a32:	4603      	mov	r3, r0
 8014a34:	492e      	ldr	r1, [pc, #184]	; (8014af0 <lv_img_decoder_built_in_info+0x14c>)
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7eb fbfe 	bl	8000238 <strcmp>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d001      	beq.n	8014a46 <lv_img_decoder_built_in_info+0xa2>
 8014a42:	2300      	movs	r3, #0
 8014a44:	e050      	b.n	8014ae8 <lv_img_decoder_built_in_info+0x144>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8014a46:	f107 0318 	add.w	r3, r7, #24
 8014a4a:	2202      	movs	r2, #2
 8014a4c:	68b9      	ldr	r1, [r7, #8]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f00c fd1e 	bl	8021490 <lv_fs_open>
 8014a54:	4603      	mov	r3, r0
 8014a56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if(res == LV_FS_RES_OK) {
 8014a5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d118      	bne.n	8014a94 <lv_img_decoder_built_in_info+0xf0>
            uint32_t rn;
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8014a62:	f107 0314 	add.w	r3, r7, #20
 8014a66:	f107 0018 	add.w	r0, r7, #24
 8014a6a:	2204      	movs	r2, #4
 8014a6c:	6879      	ldr	r1, [r7, #4]
 8014a6e:	f00c fecd 	bl	802180c <lv_fs_read>
 8014a72:	4603      	mov	r3, r0
 8014a74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            lv_fs_close(&f);
 8014a78:	f107 0318 	add.w	r3, r7, #24
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f00c fd74 	bl	802156a <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8014a82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d102      	bne.n	8014a90 <lv_img_decoder_built_in_info+0xec>
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	2b04      	cmp	r3, #4
 8014a8e:	d001      	beq.n	8014a94 <lv_img_decoder_built_in_info+0xf0>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 8014a90:	2300      	movs	r3, #0
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8014a92:	e029      	b.n	8014ae8 <lv_img_decoder_built_in_info+0x144>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	781b      	ldrb	r3, [r3, #0]
 8014a98:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014a9c:	b2db      	uxtb	r3, r3
 8014a9e:	2b03      	cmp	r3, #3
 8014aa0:	d906      	bls.n	8014ab0 <lv_img_decoder_built_in_info+0x10c>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	2b14      	cmp	r3, #20
 8014aae:	d91a      	bls.n	8014ae6 <lv_img_decoder_built_in_info+0x142>
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	e019      	b.n	8014ae8 <lv_img_decoder_built_in_info+0x144>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8014ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ab8:	2b02      	cmp	r3, #2
 8014aba:	d112      	bne.n	8014ae2 <lv_img_decoder_built_in_info+0x13e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         *function*/
        header->w = 1;
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	6813      	ldr	r3, [r2, #0]
 8014ac0:	2101      	movs	r1, #1
 8014ac2:	f361 2394 	bfi	r3, r1, #10, #11
 8014ac6:	6013      	str	r3, [r2, #0]
        header->h = 1;
 8014ac8:	687a      	ldr	r2, [r7, #4]
 8014aca:	8853      	ldrh	r3, [r2, #2]
 8014acc:	2101      	movs	r1, #1
 8014ace:	f361 134f 	bfi	r3, r1, #5, #11
 8014ad2:	8053      	strh	r3, [r2, #2]
        /*Symbols always have transparent parts. Important because of cover check in the draw
         *function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8014ad4:	687a      	ldr	r2, [r7, #4]
 8014ad6:	7813      	ldrb	r3, [r2, #0]
 8014ad8:	210b      	movs	r1, #11
 8014ada:	f361 0304 	bfi	r3, r1, #0, #5
 8014ade:	7013      	strb	r3, [r2, #0]
 8014ae0:	e001      	b.n	8014ae6 <lv_img_decoder_built_in_info+0x142>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	e000      	b.n	8014ae8 <lv_img_decoder_built_in_info+0x144>
    }
    return LV_RES_OK;
 8014ae6:	2301      	movs	r3, #1
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3728      	adds	r7, #40	; 0x28
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}
 8014af0:	080269e8 	.word	0x080269e8

08014af4 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `color` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8014af4:	b5b0      	push	{r4, r5, r7, lr}
 8014af6:	b08e      	sub	sp, #56	; 0x38
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	7c1b      	ldrb	r3, [r3, #16]
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d14a      	bne.n	8014b9c <lv_img_decoder_built_in_open+0xa8>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f00c ff90 	bl	8021a30 <lv_fs_get_ext>
 8014b10:	4603      	mov	r3, r0
 8014b12:	499c      	ldr	r1, [pc, #624]	; (8014d84 <lv_img_decoder_built_in_open+0x290>)
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7eb fb8f 	bl	8000238 <strcmp>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d001      	beq.n	8014b24 <lv_img_decoder_built_in_open+0x30>
 8014b20:	2300      	movs	r3, #0
 8014b22:	e144      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	6859      	ldr	r1, [r3, #4]
 8014b28:	f107 030c 	add.w	r3, r7, #12
 8014b2c:	2202      	movs	r2, #2
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f00c fcae 	bl	8021490 <lv_fs_open>
 8014b34:	4603      	mov	r3, r0
 8014b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 8014b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d001      	beq.n	8014b46 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 8014b42:	2300      	movs	r3, #0
 8014b44:	e133      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d11b      	bne.n	8014b86 <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8014b4e:	2014      	movs	r0, #20
 8014b50:	f00d fa50 	bl	8021ff4 <lv_mem_alloc>
 8014b54:	4602      	mov	r2, r0
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d100      	bne.n	8014b64 <lv_img_decoder_built_in_open+0x70>
 8014b62:	e7fe      	b.n	8014b62 <lv_img_decoder_built_in_open+0x6e>
            if(dsc->user_data == NULL) {
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d106      	bne.n	8014b7a <lv_img_decoder_built_in_open+0x86>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_fs_close(&f);
 8014b6c:	f107 030c 	add.w	r3, r7, #12
 8014b70:	4618      	mov	r0, r3
 8014b72:	f00c fcfa 	bl	802156a <lv_fs_close>
                return LV_RES_INV;
 8014b76:	2300      	movs	r3, #0
 8014b78:	e119      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b7e:	2114      	movs	r1, #20
 8014b80:	4618      	mov	r0, r3
 8014b82:	f00d fe6b 	bl	802285c <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b8a:	62bb      	str	r3, [r7, #40]	; 0x28
        lv_memcpy_small(&user_data->f, &f, sizeof(f));
 8014b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b8e:	f107 010c 	add.w	r1, r7, #12
 8014b92:	220c      	movs	r2, #12
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7ff fcfd 	bl	8014594 <lv_memcpy_small>
 8014b9a:	e00a      	b.n	8014bb2 <lv_img_decoder_built_in_open+0xbe>
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	7c1b      	ldrb	r3, [r3, #16]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d106      	bne.n	8014bb2 <lv_img_decoder_built_in_open+0xbe>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	689b      	ldr	r3, [r3, #8]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d101      	bne.n	8014bb2 <lv_img_decoder_built_in_open+0xbe>
            return LV_RES_INV;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	e0fd      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	7d1b      	ldrb	r3, [r3, #20]
 8014bb6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bc4:	2b04      	cmp	r3, #4
 8014bc6:	d00f      	beq.n	8014be8 <lv_img_decoder_built_in_open+0xf4>
 8014bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bcc:	2b05      	cmp	r3, #5
 8014bce:	d00b      	beq.n	8014be8 <lv_img_decoder_built_in_open+0xf4>
 8014bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bd4:	2b06      	cmp	r3, #6
 8014bd6:	d007      	beq.n	8014be8 <lv_img_decoder_built_in_open+0xf4>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 8014bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bdc:	2b14      	cmp	r3, #20
 8014bde:	d003      	beq.n	8014be8 <lv_img_decoder_built_in_open+0xf4>
 8014be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014be4:	2b0e      	cmp	r3, #14
 8014be6:	d10c      	bne.n	8014c02 <lv_img_decoder_built_in_open+0x10e>
       cf == LV_IMG_CF_ALPHA_8BIT) {
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	7c1b      	ldrb	r3, [r3, #16]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d106      	bne.n	8014bfe <lv_img_decoder_built_in_open+0x10a>
            /*In case of uncompressed formats the image stored in the ROM/RAM.
             *So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	689a      	ldr	r2, [r3, #8]
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	619a      	str	r2, [r3, #24]
            return LV_RES_OK;
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	e0d7      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            return LV_RES_OK;
 8014bfe:	2301      	movs	r3, #1
 8014c00:	e0d5      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8014c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c06:	2b07      	cmp	r3, #7
 8014c08:	d00c      	beq.n	8014c24 <lv_img_decoder_built_in_open+0x130>
 8014c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c0e:	2b08      	cmp	r3, #8
 8014c10:	d008      	beq.n	8014c24 <lv_img_decoder_built_in_open+0x130>
 8014c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c16:	2b09      	cmp	r3, #9
 8014c18:	d004      	beq.n	8014c24 <lv_img_decoder_built_in_open+0x130>
 8014c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c1e:	2b0a      	cmp	r3, #10
 8014c20:	f040 80b2 	bne.w	8014d88 <lv_img_decoder_built_in_open+0x294>
            cf == LV_IMG_CF_INDEXED_8BIT) {
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8014c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7fb fc1b 	bl	8010464 <lv_img_cf_get_px_size>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 8014c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c38:	2201      	movs	r2, #1
 8014c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8014c3e:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d116      	bne.n	8014c76 <lv_img_decoder_built_in_open+0x182>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8014c48:	2014      	movs	r0, #20
 8014c4a:	f00d f9d3 	bl	8021ff4 <lv_mem_alloc>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d100      	bne.n	8014c5e <lv_img_decoder_built_in_open+0x16a>
 8014c5c:	e7fe      	b.n	8014c5c <lv_img_decoder_built_in_open+0x168>
            if(dsc->user_data == NULL) {
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d101      	bne.n	8014c6a <lv_img_decoder_built_in_open+0x176>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 8014c66:	2300      	movs	r3, #0
 8014c68:	e0a1      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c6e:	2114      	movs	r1, #20
 8014c70:	4618      	mov	r0, r3
 8014c72:	f00d fdf3 	bl	802285c <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c7a:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8014c7c:	6a38      	ldr	r0, [r7, #32]
 8014c7e:	f00d f9b9 	bl	8021ff4 <lv_mem_alloc>
 8014c82:	4602      	mov	r2, r0
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	60da      	str	r2, [r3, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	68db      	ldr	r3, [r3, #12]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d100      	bne.n	8014c92 <lv_img_decoder_built_in_open+0x19e>
 8014c90:	e7fe      	b.n	8014c90 <lv_img_decoder_built_in_open+0x19c>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8014c92:	6a38      	ldr	r0, [r7, #32]
 8014c94:	f00d f9ae 	bl	8021ff4 <lv_mem_alloc>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	611a      	str	r2, [r3, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	691b      	ldr	r3, [r3, #16]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d100      	bne.n	8014ca8 <lv_img_decoder_built_in_open+0x1b4>
 8014ca6:	e7fe      	b.n	8014ca6 <lv_img_decoder_built_in_open+0x1b2>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	68db      	ldr	r3, [r3, #12]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d003      	beq.n	8014cb8 <lv_img_decoder_built_in_open+0x1c4>
 8014cb0:	69fb      	ldr	r3, [r7, #28]
 8014cb2:	691b      	ldr	r3, [r3, #16]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d105      	bne.n	8014cc4 <lv_img_decoder_built_in_open+0x1d0>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8014cb8:	6839      	ldr	r1, [r7, #0]
 8014cba:	6878      	ldr	r0, [r7, #4]
 8014cbc:	f000 f90e 	bl	8014edc <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	e074      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	7c1b      	ldrb	r3, [r3, #16]
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d129      	bne.n	8014d20 <lv_img_decoder_built_in_open+0x22c>
            /*Read the palette from file*/
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	2104      	movs	r1, #4
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f00c fddf 	bl	8021896 <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8014cd8:	2300      	movs	r3, #0
 8014cda:	637b      	str	r3, [r7, #52]	; 0x34
 8014cdc:	e01b      	b.n	8014d16 <lv_img_decoder_built_in_open+0x222>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8014cde:	69f8      	ldr	r0, [r7, #28]
 8014ce0:	f107 0108 	add.w	r1, r7, #8
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	2204      	movs	r2, #4
 8014ce8:	f00c fd90 	bl	802180c <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8014cec:	7ab8      	ldrb	r0, [r7, #10]
 8014cee:	7a79      	ldrb	r1, [r7, #9]
 8014cf0:	7a3d      	ldrb	r5, [r7, #8]
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	68da      	ldr	r2, [r3, #12]
 8014cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cf8:	18d4      	adds	r4, r2, r3
 8014cfa:	462a      	mov	r2, r5
 8014cfc:	f7ff fc6c 	bl	80145d8 <lv_color_make>
 8014d00:	4603      	mov	r3, r0
 8014d02:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	691a      	ldr	r2, [r3, #16]
 8014d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d0a:	4413      	add	r3, r2
 8014d0c:	7afa      	ldrb	r2, [r7, #11]
 8014d0e:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8014d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d12:	3301      	adds	r3, #1
 8014d14:	637b      	str	r3, [r7, #52]	; 0x34
 8014d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d18:	6a3b      	ldr	r3, [r7, #32]
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d3df      	bcc.n	8014cde <lv_img_decoder_built_in_open+0x1ea>
 8014d1e:	e02f      	b.n	8014d80 <lv_img_decoder_built_in_open+0x28c>
            }
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	685b      	ldr	r3, [r3, #4]
 8014d24:	689b      	ldr	r3, [r3, #8]
 8014d26:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8014d28:	2300      	movs	r3, #0
 8014d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8014d2c:	e024      	b.n	8014d78 <lv_img_decoder_built_in_open+0x284>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8014d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d30:	009b      	lsls	r3, r3, #2
 8014d32:	69ba      	ldr	r2, [r7, #24]
 8014d34:	4413      	add	r3, r2
 8014d36:	7898      	ldrb	r0, [r3, #2]
 8014d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	69ba      	ldr	r2, [r7, #24]
 8014d3e:	4413      	add	r3, r2
 8014d40:	7859      	ldrb	r1, [r3, #1]
 8014d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	69ba      	ldr	r2, [r7, #24]
 8014d48:	4413      	add	r3, r2
 8014d4a:	781d      	ldrb	r5, [r3, #0]
 8014d4c:	69fb      	ldr	r3, [r7, #28]
 8014d4e:	68da      	ldr	r2, [r3, #12]
 8014d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d52:	18d4      	adds	r4, r2, r3
 8014d54:	462a      	mov	r2, r5
 8014d56:	f7ff fc3f 	bl	80145d8 <lv_color_make>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8014d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d60:	009b      	lsls	r3, r3, #2
 8014d62:	69ba      	ldr	r2, [r7, #24]
 8014d64:	441a      	add	r2, r3
 8014d66:	69fb      	ldr	r3, [r7, #28]
 8014d68:	6919      	ldr	r1, [r3, #16]
 8014d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d6c:	440b      	add	r3, r1
 8014d6e:	78d2      	ldrb	r2, [r2, #3]
 8014d70:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8014d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d74:	3301      	adds	r3, #1
 8014d76:	633b      	str	r3, [r7, #48]	; 0x30
 8014d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d7a:	6a3b      	ldr	r3, [r7, #32]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d3d6      	bcc.n	8014d2e <lv_img_decoder_built_in_open+0x23a>
            }
        }

        return LV_RES_OK;
 8014d80:	2301      	movs	r3, #1
 8014d82:	e014      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
 8014d84:	080269e8 	.word	0x080269e8
    }
    /*Alpha indexed images.*/
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 8014d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d8c:	2b0b      	cmp	r3, #11
 8014d8e:	d007      	beq.n	8014da0 <lv_img_decoder_built_in_open+0x2ac>
 8014d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d94:	2b0c      	cmp	r3, #12
 8014d96:	d003      	beq.n	8014da0 <lv_img_decoder_built_in_open+0x2ac>
 8014d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d9c:	2b0d      	cmp	r3, #13
 8014d9e:	d101      	bne.n	8014da4 <lv_img_decoder_built_in_open+0x2b0>
        return LV_RES_OK; /*Nothing to process*/
 8014da0:	2301      	movs	r3, #1
 8014da2:	e004      	b.n	8014dae <lv_img_decoder_built_in_open+0x2ba>
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8014da4:	6839      	ldr	r1, [r7, #0]
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f000 f898 	bl	8014edc <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format");
        return LV_RES_INV;
 8014dac:	2300      	movs	r3, #0
    }
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3738      	adds	r7, #56	; 0x38
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bdb0      	pop	{r4, r5, r7, pc}
 8014db6:	bf00      	nop

08014db8 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b088      	sub	sp, #32
 8014dbc:	af02      	add	r7, sp, #8
 8014dbe:	60f8      	str	r0, [r7, #12]
 8014dc0:	60b9      	str	r1, [r7, #8]
 8014dc2:	4611      	mov	r1, r2
 8014dc4:	461a      	mov	r2, r3
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	80fb      	strh	r3, [r7, #6]
 8014dca:	4613      	mov	r3, r2
 8014dcc:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_res_t res = LV_RES_INV;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	7d1b      	ldrb	r3, [r3, #20]
 8014dd6:	f003 031f 	and.w	r3, r3, #31
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	2b04      	cmp	r3, #4
 8014dde:	d00d      	beq.n	8014dfc <lv_img_decoder_built_in_read_line+0x44>
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	7d1b      	ldrb	r3, [r3, #20]
 8014de4:	f003 031f 	and.w	r3, r3, #31
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	2b05      	cmp	r3, #5
 8014dec:	d006      	beq.n	8014dfc <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	7d1b      	ldrb	r3, [r3, #20]
 8014df2:	f003 031f 	and.w	r3, r3, #31
 8014df6:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014df8:	2b06      	cmp	r3, #6
 8014dfa:	d112      	bne.n	8014e22 <lv_img_decoder_built_in_read_line+0x6a>
        /*For TRUE_COLOR images read line required only for files.
         *For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	7c1b      	ldrb	r3, [r3, #16]
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d166      	bne.n	8014ed2 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8014e04:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014e08:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014e0c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e12:	9300      	str	r3, [sp, #0]
 8014e14:	4603      	mov	r3, r0
 8014e16:	68b8      	ldr	r0, [r7, #8]
 8014e18:	f000 f88f 	bl	8014f3a <lv_img_decoder_built_in_line_true_color>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014e20:	e057      	b.n	8014ed2 <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	7d1b      	ldrb	r3, [r3, #20]
 8014e26:	f003 031f 	and.w	r3, r3, #31
 8014e2a:	b2db      	uxtb	r3, r3
 8014e2c:	2b0b      	cmp	r3, #11
 8014e2e:	d014      	beq.n	8014e5a <lv_img_decoder_built_in_read_line+0xa2>
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	7d1b      	ldrb	r3, [r3, #20]
 8014e34:	f003 031f 	and.w	r3, r3, #31
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	2b0c      	cmp	r3, #12
 8014e3c:	d00d      	beq.n	8014e5a <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	7d1b      	ldrb	r3, [r3, #20]
 8014e42:	f003 031f 	and.w	r3, r3, #31
 8014e46:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8014e48:	2b0d      	cmp	r3, #13
 8014e4a:	d006      	beq.n	8014e5a <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8014e4c:	68bb      	ldr	r3, [r7, #8]
 8014e4e:	7d1b      	ldrb	r3, [r3, #20]
 8014e50:	f003 031f 	and.w	r3, r3, #31
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	2b0e      	cmp	r3, #14
 8014e58:	d10e      	bne.n	8014e78 <lv_img_decoder_built_in_read_line+0xc0>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8014e5a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014e5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014e62:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e68:	9300      	str	r3, [sp, #0]
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	68b8      	ldr	r0, [r7, #8]
 8014e6e:	f000 f8c3 	bl	8014ff8 <lv_img_decoder_built_in_line_alpha>
 8014e72:	4603      	mov	r3, r0
 8014e74:	75fb      	strb	r3, [r7, #23]
 8014e76:	e02c      	b.n	8014ed2 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	7d1b      	ldrb	r3, [r3, #20]
 8014e7c:	f003 031f 	and.w	r3, r3, #31
 8014e80:	b2db      	uxtb	r3, r3
 8014e82:	2b07      	cmp	r3, #7
 8014e84:	d014      	beq.n	8014eb0 <lv_img_decoder_built_in_read_line+0xf8>
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	7d1b      	ldrb	r3, [r3, #20]
 8014e8a:	f003 031f 	and.w	r3, r3, #31
 8014e8e:	b2db      	uxtb	r3, r3
 8014e90:	2b08      	cmp	r3, #8
 8014e92:	d00d      	beq.n	8014eb0 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	7d1b      	ldrb	r3, [r3, #20]
 8014e98:	f003 031f 	and.w	r3, r3, #31
 8014e9c:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8014e9e:	2b09      	cmp	r3, #9
 8014ea0:	d006      	beq.n	8014eb0 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	7d1b      	ldrb	r3, [r3, #20]
 8014ea6:	f003 031f 	and.w	r3, r3, #31
 8014eaa:	b2db      	uxtb	r3, r3
 8014eac:	2b0a      	cmp	r3, #10
 8014eae:	d10e      	bne.n	8014ece <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8014eb0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8014eb4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014eb8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebe:	9300      	str	r3, [sp, #0]
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	68b8      	ldr	r0, [r7, #8]
 8014ec4:	f000 fa0a 	bl	80152dc <lv_img_decoder_built_in_line_indexed>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	75fb      	strb	r3, [r7, #23]
 8014ecc:	e001      	b.n	8014ed2 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	e000      	b.n	8014ed4 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8014ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	3718      	adds	r7, #24
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}

08014edc <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b084      	sub	sp, #16
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eea:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d01f      	beq.n	8014f32 <lv_img_decoder_built_in_close+0x56>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	7c1b      	ldrb	r3, [r3, #16]
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d103      	bne.n	8014f02 <lv_img_decoder_built_in_close+0x26>
            lv_fs_close(&user_data->f);
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f00c fb34 	bl	802156a <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	68db      	ldr	r3, [r3, #12]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d004      	beq.n	8014f14 <lv_img_decoder_built_in_close+0x38>
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	68db      	ldr	r3, [r3, #12]
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f00d f8a0 	bl	8022054 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	691b      	ldr	r3, [r3, #16]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d004      	beq.n	8014f26 <lv_img_decoder_built_in_close+0x4a>
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	691b      	ldr	r3, [r3, #16]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f00d f897 	bl	8022054 <lv_mem_free>

        lv_mem_free(user_data);
 8014f26:	68f8      	ldr	r0, [r7, #12]
 8014f28:	f00d f894 	bl	8022054 <lv_mem_free>
        dsc->user_data = NULL;
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8014f32:	bf00      	nop
 8014f34:	3710      	adds	r7, #16
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}

08014f3a <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8014f3a:	b580      	push	{r7, lr}
 8014f3c:	b08a      	sub	sp, #40	; 0x28
 8014f3e:	af00      	add	r7, sp, #0
 8014f40:	60f8      	str	r0, [r7, #12]
 8014f42:	4608      	mov	r0, r1
 8014f44:	4611      	mov	r1, r2
 8014f46:	461a      	mov	r2, r3
 8014f48:	4603      	mov	r3, r0
 8014f4a:	817b      	strh	r3, [r7, #10]
 8014f4c:	460b      	mov	r3, r1
 8014f4e:	813b      	strh	r3, [r7, #8]
 8014f50:	4613      	mov	r3, r2
 8014f52:	80fb      	strh	r3, [r7, #6]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f58:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	7d1b      	ldrb	r3, [r3, #20]
 8014f5e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7fb fa7d 	bl	8010464 <lv_img_cf_get_px_size>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8014f70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f74:	68fa      	ldr	r2, [r7, #12]
 8014f76:	6952      	ldr	r2, [r2, #20]
 8014f78:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8014f7c:	b292      	uxth	r2, r2
 8014f7e:	fb03 f202 	mul.w	r2, r3, r2
 8014f82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014f86:	4413      	add	r3, r2
 8014f88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014f8c:	fb02 f303 	mul.w	r3, r2, r3
 8014f90:	10db      	asrs	r3, r3, #3
 8014f92:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	3304      	adds	r3, #4
 8014f98:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8014f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	69f9      	ldr	r1, [r7, #28]
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f00c fc78 	bl	8021896 <lv_fs_seek>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8014faa:	7efb      	ldrb	r3, [r7, #27]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d001      	beq.n	8014fb4 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	e01d      	b.n	8014ff0 <lv_img_decoder_built_in_line_true_color+0xb6>
    }
    uint32_t btr = len * (px_size >> 3);
 8014fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014fb8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8014fbc:	08d2      	lsrs	r2, r2, #3
 8014fbe:	b2d2      	uxtb	r2, r2
 8014fc0:	fb02 f303 	mul.w	r3, r2, r3
 8014fc4:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8014fca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fcc:	f107 0310 	add.w	r3, r7, #16
 8014fd0:	697a      	ldr	r2, [r7, #20]
 8014fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014fd4:	f00c fc1a 	bl	802180c <lv_fs_read>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 8014fdc:	7efb      	ldrb	r3, [r7, #27]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d103      	bne.n	8014fea <lv_img_decoder_built_in_line_true_color+0xb0>
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	697a      	ldr	r2, [r7, #20]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d001      	beq.n	8014fee <lv_img_decoder_built_in_line_true_color+0xb4>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8014fea:	2300      	movs	r3, #0
 8014fec:	e000      	b.n	8014ff0 <lv_img_decoder_built_in_line_true_color+0xb6>
    }

    return LV_RES_OK;
 8014fee:	2301      	movs	r3, #1
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3728      	adds	r7, #40	; 0x28
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8014ff8:	b590      	push	{r4, r7, lr}
 8014ffa:	b097      	sub	sp, #92	; 0x5c
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	4608      	mov	r0, r1
 8015002:	4611      	mov	r1, r2
 8015004:	461a      	mov	r2, r3
 8015006:	4603      	mov	r3, r0
 8015008:	817b      	strh	r3, [r7, #10]
 801500a:	460b      	mov	r3, r1
 801500c:	813b      	strh	r3, [r7, #8]
 801500e:	4613      	mov	r3, r2
 8015010:	80fb      	strh	r3, [r7, #6]
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8015012:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8015016:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8015018:	4bae      	ldr	r3, [pc, #696]	; (80152d4 <lv_img_decoder_built_in_line_alpha+0x2dc>)
 801501a:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 801501c:	4bae      	ldr	r3, [pc, #696]	; (80152d8 <lv_img_decoder_built_in_line_alpha+0x2e0>)
 801501e:	f107 0418 	add.w	r4, r7, #24
 8015022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	7a1b      	ldrb	r3, [r3, #8]
 801502c:	753b      	strb	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 801502e:	2300      	movs	r3, #0
 8015030:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8015034:	e00e      	b.n	8015054 <lv_img_decoder_built_in_line_alpha+0x5c>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
 8015036:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801503a:	005b      	lsls	r3, r3, #1
 801503c:	461a      	mov	r2, r3
 801503e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015040:	4413      	add	r3, r2
 8015042:	7d3a      	ldrb	r2, [r7, #20]
 8015044:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8015046:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801504a:	b29b      	uxth	r3, r3
 801504c:	3301      	adds	r3, #1
 801504e:	b29b      	uxth	r3, r3
 8015050:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8015054:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8015058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801505c:	429a      	cmp	r2, r3
 801505e:	dbea      	blt.n	8015036 <lv_img_decoder_built_in_line_alpha+0x3e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8015060:	2300      	movs	r3, #0
 8015062:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	7d1b      	ldrb	r3, [r3, #20]
 8015068:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801506c:	b2db      	uxtb	r3, r3
 801506e:	4618      	mov	r0, r3
 8015070:	f7fb f9f8 	bl	8010464 <lv_img_cf_get_px_size>
 8015074:	4603      	mov	r3, r0
 8015076:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801507a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801507e:	2201      	movs	r2, #1
 8015080:	fa02 f303 	lsl.w	r3, r2, r3
 8015084:	b29b      	uxth	r3, r3
 8015086:	3b01      	subs	r3, #1
 8015088:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 801508a:	2300      	movs	r3, #0
 801508c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 8015090:	2300      	movs	r3, #0
 8015092:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8015094:	2300      	movs	r3, #0
 8015096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	7d1b      	ldrb	r3, [r3, #20]
 801509e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	3b0b      	subs	r3, #11
 80150a6:	2b03      	cmp	r3, #3
 80150a8:	f200 8094 	bhi.w	80151d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
 80150ac:	a201      	add	r2, pc, #4	; (adr r2, 80150b4 <lv_img_decoder_built_in_line_alpha+0xbc>)
 80150ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150b2:	bf00      	nop
 80150b4:	080150c5 	.word	0x080150c5
 80150b8:	0801510d 	.word	0x0801510d
 80150bc:	08015159 	.word	0x08015159
 80150c0:	080151a5 	.word	0x080151a5
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	695b      	ldr	r3, [r3, #20]
 80150c8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	3307      	adds	r3, #7
 80150d0:	10db      	asrs	r3, r3, #3
 80150d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 80150d6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80150da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80150de:	fb02 f303 	mul.w	r3, r2, r3
 80150e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80150e6:	10d2      	asrs	r2, r2, #3
 80150e8:	b212      	sxth	r2, r2
 80150ea:	4413      	add	r3, r2
 80150ec:	461a      	mov	r2, r3
 80150ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150f0:	4413      	add	r3, r2
 80150f2:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 7 - (x & 0x7);
 80150f4:	897b      	ldrh	r3, [r7, #10]
 80150f6:	b25b      	sxtb	r3, r3
 80150f8:	43db      	mvns	r3, r3
 80150fa:	b25b      	sxtb	r3, r3
 80150fc:	f003 0307 	and.w	r3, r3, #7
 8015100:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 8015104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015108:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 801510a:	e063      	b.n	80151d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	695b      	ldr	r3, [r3, #20]
 8015110:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015114:	b29b      	uxth	r3, r3
 8015116:	3303      	adds	r3, #3
 8015118:	109b      	asrs	r3, r3, #2
 801511a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 801511e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015122:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015126:	fb02 f303 	mul.w	r3, r2, r3
 801512a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801512e:	1092      	asrs	r2, r2, #2
 8015130:	b212      	sxth	r2, r2
 8015132:	4413      	add	r3, r2
 8015134:	461a      	mov	r2, r3
 8015136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015138:	4413      	add	r3, r2
 801513a:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 6 - (x & 0x3) * 2;
 801513c:	897b      	ldrh	r3, [r7, #10]
 801513e:	43db      	mvns	r3, r3
 8015140:	b2db      	uxtb	r3, r3
 8015142:	f003 0303 	and.w	r3, r3, #3
 8015146:	b2db      	uxtb	r3, r3
 8015148:	005b      	lsls	r3, r3, #1
 801514a:	b2db      	uxtb	r3, r3
 801514c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 8015150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015154:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8015156:	e03d      	b.n	80151d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	695b      	ldr	r3, [r3, #20]
 801515c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015160:	b29b      	uxth	r3, r3
 8015162:	3301      	adds	r3, #1
 8015164:	105b      	asrs	r3, r3, #1
 8015166:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 801516a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801516e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015172:	fb02 f303 	mul.w	r3, r2, r3
 8015176:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801517a:	1052      	asrs	r2, r2, #1
 801517c:	b212      	sxth	r2, r2
 801517e:	4413      	add	r3, r2
 8015180:	461a      	mov	r2, r3
 8015182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015184:	4413      	add	r3, r2
 8015186:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 4 - (x & 0x1) * 4;
 8015188:	897b      	ldrh	r3, [r7, #10]
 801518a:	f003 0301 	and.w	r3, r3, #1
 801518e:	2b00      	cmp	r3, #0
 8015190:	d101      	bne.n	8015196 <lv_img_decoder_built_in_line_alpha+0x19e>
 8015192:	2304      	movs	r3, #4
 8015194:	e000      	b.n	8015198 <lv_img_decoder_built_in_line_alpha+0x1a0>
 8015196:	2300      	movs	r3, #0
 8015198:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 801519c:	f107 0318 	add.w	r3, r7, #24
 80151a0:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 80151a2:	e017      	b.n	80151d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	695b      	ldr	r3, [r3, #20]
 80151a8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80151ac:	b29b      	uxth	r3, r3
 80151ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 80151b2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80151b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80151ba:	fb03 f202 	mul.w	r2, r3, r2
 80151be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80151c2:	4413      	add	r3, r2
 80151c4:	461a      	mov	r2, r3
 80151c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151c8:	4413      	add	r3, r2
 80151ca:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80151d2:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d8:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80151da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80151de:	4618      	mov	r0, r3
 80151e0:	f00c ff92 	bl	8022108 <lv_mem_buf_get>
 80151e4:	6378      	str	r0, [r7, #52]	; 0x34
    if(fs_buf == NULL) return LV_RES_INV;
 80151e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d101      	bne.n	80151f0 <lv_img_decoder_built_in_line_alpha+0x1f8>
 80151ec:	2300      	movs	r3, #0
 80151ee:	e06d      	b.n	80152cc <lv_img_decoder_built_in_line_alpha+0x2d4>

    const uint8_t * data_tmp = NULL;
 80151f0:	2300      	movs	r3, #0
 80151f2:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	7c1b      	ldrb	r3, [r3, #16]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d108      	bne.n	801520e <lv_img_decoder_built_in_line_alpha+0x216>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 8015202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015204:	689a      	ldr	r2, [r3, #8]
 8015206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015208:	4413      	add	r3, r2
 801520a:	643b      	str	r3, [r7, #64]	; 0x40
 801520c:	e00f      	b.n	801522e <lv_img_decoder_built_in_line_alpha+0x236>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801520e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015212:	3304      	adds	r3, #4
 8015214:	2200      	movs	r2, #0
 8015216:	4619      	mov	r1, r3
 8015218:	f00c fb3d 	bl	8021896 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 801521c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801521e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015222:	2300      	movs	r3, #0
 8015224:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015226:	f00c faf1 	bl	802180c <lv_fs_read>
        data_tmp = fs_buf;
 801522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801522c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    for(i = 0; i < len; i++) {
 801522e:	2300      	movs	r3, #0
 8015230:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8015234:	e040      	b.n	80152b8 <lv_img_decoder_built_in_line_alpha+0x2c0>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8015236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015238:	781b      	ldrb	r3, [r3, #0]
 801523a:	461a      	mov	r2, r3
 801523c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8015240:	fa42 f303 	asr.w	r3, r2, r3
 8015244:	b25a      	sxtb	r2, r3
 8015246:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015248:	b25b      	sxtb	r3, r3
 801524a:	4013      	ands	r3, r2
 801524c:	b25b      	sxtb	r3, r3
 801524e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	7d1b      	ldrb	r3, [r3, #20]
 8015256:	f003 031f 	and.w	r3, r3, #31
 801525a:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 801525c:	2b0e      	cmp	r3, #14
 801525e:	d005      	beq.n	801526c <lv_img_decoder_built_in_line_alpha+0x274>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8015260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015264:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015266:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	e001      	b.n	8015270 <lv_img_decoder_built_in_line_alpha+0x278>
 801526c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015270:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8015274:	0052      	lsls	r2, r2, #1
 8015276:	3201      	adds	r2, #1
 8015278:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801527a:	440a      	add	r2, r1
 801527c:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 801527e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8015282:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	b2db      	uxtb	r3, r3
 801528a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 801528e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8015292:	2b00      	cmp	r3, #0
 8015294:	da09      	bge.n	80152aa <lv_img_decoder_built_in_line_alpha+0x2b2>
            pos = 8 - px_size;
 8015296:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801529a:	f1c3 0308 	rsb	r3, r3, #8
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 80152a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80152a6:	3301      	adds	r3, #1
 80152a8:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 80152aa:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80152ae:	b29b      	uxth	r3, r3
 80152b0:	3301      	adds	r3, #1
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80152b8:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80152bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80152c0:	429a      	cmp	r2, r3
 80152c2:	dbb8      	blt.n	8015236 <lv_img_decoder_built_in_line_alpha+0x23e>
        }
    }
    lv_mem_buf_release(fs_buf);
 80152c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80152c6:	f00c ffcb 	bl	8022260 <lv_mem_buf_release>
    return LV_RES_OK;
 80152ca:	2301      	movs	r3, #1
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	375c      	adds	r7, #92	; 0x5c
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd90      	pop	{r4, r7, pc}
 80152d4:	ffaa5500 	.word	0xffaa5500
 80152d8:	080269ec 	.word	0x080269ec

080152dc <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b08e      	sub	sp, #56	; 0x38
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	60f8      	str	r0, [r7, #12]
 80152e4:	4608      	mov	r0, r1
 80152e6:	4611      	mov	r1, r2
 80152e8:	461a      	mov	r2, r3
 80152ea:	4603      	mov	r3, r0
 80152ec:	817b      	strh	r3, [r7, #10]
 80152ee:	460b      	mov	r3, r1
 80152f0:	813b      	strh	r3, [r7, #8]
 80152f2:	4613      	mov	r3, r2
 80152f4:	80fb      	strh	r3, [r7, #6]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	7d1b      	ldrb	r3, [r3, #20]
 80152fa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80152fe:	b2db      	uxtb	r3, r3
 8015300:	4618      	mov	r0, r3
 8015302:	f7fb f8af 	bl	8010464 <lv_img_cf_get_px_size>
 8015306:	4603      	mov	r3, r0
 8015308:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801530c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8015310:	2201      	movs	r2, #1
 8015312:	fa02 f303 	lsl.w	r3, r2, r3
 8015316:	b29b      	uxth	r3, r3
 8015318:	3b01      	subs	r3, #1
 801531a:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 801531c:	2300      	movs	r3, #0
 801531e:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 8015320:	2300      	movs	r3, #0
 8015322:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 8015326:	2300      	movs	r3, #0
 8015328:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	7d1b      	ldrb	r3, [r3, #20]
 801532e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8015332:	b2db      	uxtb	r3, r3
 8015334:	3b07      	subs	r3, #7
 8015336:	2b03      	cmp	r3, #3
 8015338:	f200 8094 	bhi.w	8015464 <lv_img_decoder_built_in_line_indexed+0x188>
 801533c:	a201      	add	r2, pc, #4	; (adr r2, 8015344 <lv_img_decoder_built_in_line_indexed+0x68>)
 801533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015342:	bf00      	nop
 8015344:	08015355 	.word	0x08015355
 8015348:	0801539b 	.word	0x0801539b
 801534c:	080153e5 	.word	0x080153e5
 8015350:	0801542f 	.word	0x0801542f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	695b      	ldr	r3, [r3, #20]
 8015358:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801535c:	b29b      	uxth	r3, r3
 801535e:	3307      	adds	r3, #7
 8015360:	10db      	asrs	r3, r3, #3
 8015362:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 8015364:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015368:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801536c:	fb02 f303 	mul.w	r3, r2, r3
 8015370:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015374:	10d2      	asrs	r2, r2, #3
 8015376:	b212      	sxth	r2, r2
 8015378:	4413      	add	r3, r2
 801537a:	461a      	mov	r2, r3
 801537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801537e:	4413      	add	r3, r2
 8015380:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 8015382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015384:	3308      	adds	r3, #8
 8015386:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 8015388:	897b      	ldrh	r3, [r7, #10]
 801538a:	b25b      	sxtb	r3, r3
 801538c:	43db      	mvns	r3, r3
 801538e:	b25b      	sxtb	r3, r3
 8015390:	f003 0307 	and.w	r3, r3, #7
 8015394:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015398:	e064      	b.n	8015464 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	695b      	ldr	r3, [r3, #20]
 801539e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80153a2:	b29b      	uxth	r3, r3
 80153a4:	3303      	adds	r3, #3
 80153a6:	109b      	asrs	r3, r3, #2
 80153a8:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 80153aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80153ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80153b2:	fb02 f303 	mul.w	r3, r2, r3
 80153b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80153ba:	1092      	asrs	r2, r2, #2
 80153bc:	b212      	sxth	r2, r2
 80153be:	4413      	add	r3, r2
 80153c0:	461a      	mov	r2, r3
 80153c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c4:	4413      	add	r3, r2
 80153c6:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 80153c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ca:	3310      	adds	r3, #16
 80153cc:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - (x & 0x3) * 2;
 80153ce:	897b      	ldrh	r3, [r7, #10]
 80153d0:	43db      	mvns	r3, r3
 80153d2:	b2db      	uxtb	r3, r3
 80153d4:	f003 0303 	and.w	r3, r3, #3
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	005b      	lsls	r3, r3, #1
 80153dc:	b2db      	uxtb	r3, r3
 80153de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80153e2:	e03f      	b.n	8015464 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	695b      	ldr	r3, [r3, #20]
 80153e8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	3301      	adds	r3, #1
 80153f0:	105b      	asrs	r3, r3, #1
 80153f2:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 80153f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80153f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80153fc:	fb02 f303 	mul.w	r3, r2, r3
 8015400:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015404:	1052      	asrs	r2, r2, #1
 8015406:	b212      	sxth	r2, r2
 8015408:	4413      	add	r3, r2
 801540a:	461a      	mov	r2, r3
 801540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801540e:	4413      	add	r3, r2
 8015410:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 8015412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015414:	3340      	adds	r3, #64	; 0x40
 8015416:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - (x & 0x1) * 4;
 8015418:	897b      	ldrh	r3, [r7, #10]
 801541a:	f003 0301 	and.w	r3, r3, #1
 801541e:	2b00      	cmp	r3, #0
 8015420:	d101      	bne.n	8015426 <lv_img_decoder_built_in_line_indexed+0x14a>
 8015422:	2304      	movs	r3, #4
 8015424:	e000      	b.n	8015428 <lv_img_decoder_built_in_line_indexed+0x14c>
 8015426:	2300      	movs	r3, #0
 8015428:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801542c:	e01a      	b.n	8015464 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	695b      	ldr	r3, [r3, #20]
 8015432:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8015436:	b29b      	uxth	r3, r3
 8015438:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 801543a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801543e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015442:	fb03 f202 	mul.w	r2, r3, r2
 8015446:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801544a:	4413      	add	r3, r2
 801544c:	461a      	mov	r2, r3
 801544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015450:	4413      	add	r3, r2
 8015452:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 8015454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801545a:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 801545c:	2300      	movs	r3, #0
 801545e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015462:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015468:	623b      	str	r3, [r7, #32]

    uint8_t * fs_buf = lv_mem_buf_get(w);
 801546a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801546e:	4618      	mov	r0, r3
 8015470:	f00c fe4a 	bl	8022108 <lv_mem_buf_get>
 8015474:	61f8      	str	r0, [r7, #28]
    if(fs_buf == NULL) return LV_RES_INV;
 8015476:	69fb      	ldr	r3, [r7, #28]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d101      	bne.n	8015480 <lv_img_decoder_built_in_line_indexed+0x1a4>
 801547c:	2300      	movs	r3, #0
 801547e:	e06e      	b.n	801555e <lv_img_decoder_built_in_line_indexed+0x282>
    const uint8_t * data_tmp = NULL;
 8015480:	2300      	movs	r3, #0
 8015482:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	7c1b      	ldrb	r3, [r3, #16]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d108      	bne.n	801549e <lv_img_decoder_built_in_line_indexed+0x1c2>
        const lv_img_dsc_t * img_dsc = dsc->src;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	689a      	ldr	r2, [r3, #8]
 8015496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015498:	4413      	add	r3, r2
 801549a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801549c:	e00f      	b.n	80154be <lv_img_decoder_built_in_line_indexed+0x1e2>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801549e:	6a38      	ldr	r0, [r7, #32]
 80154a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154a2:	3304      	adds	r3, #4
 80154a4:	2200      	movs	r2, #0
 80154a6:	4619      	mov	r1, r3
 80154a8:	f00c f9f5 	bl	8021896 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 80154ac:	6a38      	ldr	r0, [r7, #32]
 80154ae:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80154b2:	2300      	movs	r3, #0
 80154b4:	69f9      	ldr	r1, [r7, #28]
 80154b6:	f00c f9a9 	bl	802180c <lv_fs_read>
        data_tmp = fs_buf;
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80154be:	2300      	movs	r3, #0
 80154c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80154c2:	e042      	b.n	801554a <lv_img_decoder_built_in_line_indexed+0x26e>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80154c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	461a      	mov	r2, r3
 80154ca:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80154ce:	fa42 f303 	asr.w	r3, r2, r3
 80154d2:	b25a      	sxtb	r2, r3
 80154d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80154d6:	b25b      	sxtb	r3, r3
 80154d8:	4013      	ands	r3, r2
 80154da:	b25b      	sxtb	r3, r3
 80154dc:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 80154de:	6a3b      	ldr	r3, [r7, #32]
 80154e0:	68da      	ldr	r2, [r3, #12]
 80154e2:	7dfb      	ldrb	r3, [r7, #23]
 80154e4:	4413      	add	r3, r2
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	753b      	strb	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
 80154ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80154ee:	005b      	lsls	r3, r3, #1
 80154f0:	461a      	mov	r2, r3
 80154f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154f4:	4413      	add	r3, r2
 80154f6:	7d3a      	ldrb	r2, [r7, #20]
 80154f8:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 80154fa:	6a3b      	ldr	r3, [r7, #32]
 80154fc:	691a      	ldr	r2, [r3, #16]
 80154fe:	7dfb      	ldrb	r3, [r7, #23]
 8015500:	441a      	add	r2, r3
 8015502:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015506:	005b      	lsls	r3, r3, #1
 8015508:	3301      	adds	r3, #1
 801550a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801550c:	440b      	add	r3, r1
 801550e:	7812      	ldrb	r2, [r2, #0]
 8015510:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 8015512:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8015516:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801551a:	1ad3      	subs	r3, r2, r3
 801551c:	b2db      	uxtb	r3, r3
 801551e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 8015522:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8015526:	2b00      	cmp	r3, #0
 8015528:	da09      	bge.n	801553e <lv_img_decoder_built_in_line_indexed+0x262>
            pos = 8 - px_size;
 801552a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801552e:	f1c3 0308 	rsb	r3, r3, #8
 8015532:	b2db      	uxtb	r3, r3
 8015534:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 8015538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801553a:	3301      	adds	r3, #1
 801553c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 801553e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8015542:	b29b      	uxth	r3, r3
 8015544:	3301      	adds	r3, #1
 8015546:	b29b      	uxth	r3, r3
 8015548:	857b      	strh	r3, [r7, #42]	; 0x2a
 801554a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801554e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015552:	429a      	cmp	r2, r3
 8015554:	dbb6      	blt.n	80154c4 <lv_img_decoder_built_in_line_indexed+0x1e8>
        }
    }
    lv_mem_buf_release(fs_buf);
 8015556:	69f8      	ldr	r0, [r7, #28]
 8015558:	f00c fe82 	bl	8022260 <lv_mem_buf_release>
    return LV_RES_OK;
 801555c:	2301      	movs	r3, #1
}
 801555e:	4618      	mov	r0, r3
 8015560:	3738      	adds	r7, #56	; 0x38
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}
 8015566:	bf00      	nop

08015568 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8015568:	b480      	push	{r7}
 801556a:	b083      	sub	sp, #12
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015576:	b29a      	uxth	r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801557e:	b29b      	uxth	r3, r3
 8015580:	1ad3      	subs	r3, r2, r3
 8015582:	b29b      	uxth	r3, r3
 8015584:	3301      	adds	r3, #1
 8015586:	b29b      	uxth	r3, r3
 8015588:	b21b      	sxth	r3, r3
}
 801558a:	4618      	mov	r0, r3
 801558c:	370c      	adds	r7, #12
 801558e:	46bd      	mov	sp, r7
 8015590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015594:	4770      	bx	lr
	...

08015598 <lv_draw_sw_init_ctx>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init_ctx(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b084      	sub	sp, #16
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
    LV_UNUSED(drv);

    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	60fb      	str	r3, [r7, #12]
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 80155a6:	2154      	movs	r1, #84	; 0x54
 80155a8:	68f8      	ldr	r0, [r7, #12]
 80155aa:	f00d f957 	bl	802285c <lv_memset_00>

    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	4a19      	ldr	r2, [pc, #100]	; (8015618 <lv_draw_sw_init_ctx+0x80>)
 80155b2:	611a      	str	r2, [r3, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	4a19      	ldr	r2, [pc, #100]	; (801561c <lv_draw_sw_init_ctx+0x84>)
 80155b8:	60da      	str	r2, [r3, #12]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	4a18      	ldr	r2, [pc, #96]	; (8015620 <lv_draw_sw_init_ctx+0x88>)
 80155be:	62da      	str	r2, [r3, #44]	; 0x2c
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	4a18      	ldr	r2, [pc, #96]	; (8015624 <lv_draw_sw_init_ctx+0x8c>)
 80155c4:	61da      	str	r2, [r3, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	4a17      	ldr	r2, [pc, #92]	; (8015628 <lv_draw_sw_init_ctx+0x90>)
 80155ca:	615a      	str	r2, [r3, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	4a17      	ldr	r2, [pc, #92]	; (801562c <lv_draw_sw_init_ctx+0x94>)
 80155d0:	621a      	str	r2, [r3, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	4a16      	ldr	r2, [pc, #88]	; (8015630 <lv_draw_sw_init_ctx+0x98>)
 80155d6:	625a      	str	r2, [r3, #36]	; 0x24
#if LV_DRAW_COMPLEX
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	4a16      	ldr	r2, [pc, #88]	; (8015634 <lv_draw_sw_init_ctx+0x9c>)
 80155dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	4a15      	ldr	r2, [pc, #84]	; (8015638 <lv_draw_sw_init_ctx+0xa0>)
 80155e2:	631a      	str	r2, [r3, #48]	; 0x30
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	4a15      	ldr	r2, [pc, #84]	; (801563c <lv_draw_sw_init_ctx+0xa4>)
 80155e8:	635a      	str	r2, [r3, #52]	; 0x34
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	4a14      	ldr	r2, [pc, #80]	; (8015640 <lv_draw_sw_init_ctx+0xa8>)
 80155ee:	639a      	str	r2, [r3, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	4a14      	ldr	r2, [pc, #80]	; (8015644 <lv_draw_sw_init_ctx+0xac>)
 80155f4:	63da      	str	r2, [r3, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	4a13      	ldr	r2, [pc, #76]	; (8015648 <lv_draw_sw_init_ctx+0xb0>)
 80155fa:	641a      	str	r2, [r3, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	4a13      	ldr	r2, [pc, #76]	; (801564c <lv_draw_sw_init_ctx+0xb4>)
 8015600:	645a      	str	r2, [r3, #68]	; 0x44
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	4a12      	ldr	r2, [pc, #72]	; (8015650 <lv_draw_sw_init_ctx+0xb8>)
 8015606:	651a      	str	r2, [r3, #80]	; 0x50
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	222c      	movs	r2, #44	; 0x2c
 801560c:	649a      	str	r2, [r3, #72]	; 0x48
}
 801560e:	bf00      	nop
 8015610:	3710      	adds	r7, #16
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}
 8015616:	bf00      	nop
 8015618:	080157b9 	.word	0x080157b9
 801561c:	0801b80b 	.word	0x0801b80b
 8015620:	0801b851 	.word	0x0801b851
 8015624:	08019aed 	.word	0x08019aed
 8015628:	08018f91 	.word	0x08018f91
 801562c:	0801a25b 	.word	0x0801a25b
 8015630:	0801b1f9 	.word	0x0801b1f9
 8015634:	0801ea55 	.word	0x0801ea55
 8015638:	08015655 	.word	0x08015655
 801563c:	08015669 	.word	0x08015669
 8015640:	08019727 	.word	0x08019727
 8015644:	0801990b 	.word	0x0801990b
 8015648:	0801999b 	.word	0x0801999b
 801564c:	08019a65 	.word	0x08019a65
 8015650:	08017321 	.word	0x08017321

08015654 <lv_draw_sw_wait_for_finish>:
    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
}

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 8015654:	b480      	push	{r7}
 8015656:	b083      	sub	sp, #12
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 801565c:	bf00      	nop
 801565e:	370c      	adds	r7, #12
 8015660:	46bd      	mov	sp, r7
 8015662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015666:	4770      	bx	lr

08015668 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b088      	sub	sp, #32
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	60b9      	str	r1, [r7, #8]
 8015672:	603b      	str	r3, [r7, #0]
 8015674:	4613      	mov	r3, r2
 8015676:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(draw_ctx);

    lv_color_t * dest_bufc =  dest_buf;
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	61fb      	str	r3, [r7, #28]
    lv_color_t * src_bufc =  src_buf;
 801567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801567e:	61bb      	str	r3, [r7, #24]

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 8015680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015684:	683a      	ldr	r2, [r7, #0]
 8015686:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801568a:	fb02 f303 	mul.w	r3, r2, r3
 801568e:	461a      	mov	r2, r3
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	4413      	add	r3, r2
 8015694:	61fb      	str	r3, [r7, #28]
    dest_bufc += dest_area->x1;
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	f9b3 3000 	ldrsh.w	r3, [r3]
 801569c:	461a      	mov	r2, r3
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	4413      	add	r3, r2
 80156a2:	61fb      	str	r3, [r7, #28]

    src_bufc += src_stride * src_area->y1;
 80156a4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80156a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156aa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80156ae:	fb02 f303 	mul.w	r3, r2, r3
 80156b2:	461a      	mov	r2, r3
 80156b4:	69bb      	ldr	r3, [r7, #24]
 80156b6:	4413      	add	r3, r2
 80156b8:	61bb      	str	r3, [r7, #24]
    src_bufc += src_area->x1;
 80156ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156c0:	461a      	mov	r2, r3
 80156c2:	69bb      	ldr	r3, [r7, #24]
 80156c4:	4413      	add	r3, r2
 80156c6:	61bb      	str	r3, [r7, #24]

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 80156c8:	6838      	ldr	r0, [r7, #0]
 80156ca:	f7ff ff4d 	bl	8015568 <lv_area_get_width>
 80156ce:	4603      	mov	r3, r0
 80156d0:	613b      	str	r3, [r7, #16]
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	885b      	ldrh	r3, [r3, #2]
 80156d6:	82fb      	strh	r3, [r7, #22]
 80156d8:	e014      	b.n	8015704 <lv_draw_sw_buffer_copy+0x9c>
        lv_memcpy(dest_bufc, src_bufc, line_length);
 80156da:	693a      	ldr	r2, [r7, #16]
 80156dc:	69b9      	ldr	r1, [r7, #24]
 80156de:	69f8      	ldr	r0, [r7, #28]
 80156e0:	f00c fe16 	bl	8022310 <lv_memcpy>
        dest_bufc += dest_stride;
 80156e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80156e8:	69fa      	ldr	r2, [r7, #28]
 80156ea:	4413      	add	r3, r2
 80156ec:	61fb      	str	r3, [r7, #28]
        src_bufc += src_stride;
 80156ee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80156f2:	69ba      	ldr	r2, [r7, #24]
 80156f4:	4413      	add	r3, r2
 80156f6:	61bb      	str	r3, [r7, #24]
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80156f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80156fc:	b29b      	uxth	r3, r3
 80156fe:	3301      	adds	r3, #1
 8015700:	b29b      	uxth	r3, r3
 8015702:	82fb      	strh	r3, [r7, #22]
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801570a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801570e:	429a      	cmp	r2, r3
 8015710:	dde3      	ble.n	80156da <lv_draw_sw_buffer_copy+0x72>
    }
}
 8015712:	bf00      	nop
 8015714:	bf00      	nop
 8015716:	3720      	adds	r7, #32
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801571c:	b480      	push	{r7}
 801571e:	b083      	sub	sp, #12
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	f9b3 2000 	ldrsh.w	r2, [r3]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	80da      	strh	r2, [r3, #6]
}
 801574e:	bf00      	nop
 8015750:	370c      	adds	r7, #12
 8015752:	46bd      	mov	sp, r7
 8015754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015758:	4770      	bx	lr

0801575a <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801575a:	b480      	push	{r7}
 801575c:	b083      	sub	sp, #12
 801575e:	af00      	add	r7, sp, #0
 8015760:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015768:	b29a      	uxth	r2, r3
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015770:	b29b      	uxth	r3, r3
 8015772:	1ad3      	subs	r3, r2, r3
 8015774:	b29b      	uxth	r3, r3
 8015776:	3301      	adds	r3, #1
 8015778:	b29b      	uxth	r3, r3
 801577a:	b21b      	sxth	r3, r3
}
 801577c:	4618      	mov	r0, r3
 801577e:	370c      	adds	r7, #12
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015796:	b29a      	uxth	r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801579e:	b29b      	uxth	r3, r3
 80157a0:	1ad3      	subs	r3, r2, r3
 80157a2:	b29b      	uxth	r3, r3
 80157a4:	3301      	adds	r3, #1
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	b21b      	sxth	r3, r3
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	370c      	adds	r7, #12
 80157ae:	46bd      	mov	sp, r7
 80157b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b4:	4770      	bx	lr
	...

080157b8 <lv_draw_sw_arc>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                    uint16_t start_angle, uint16_t end_angle)
{
 80157b8:	b590      	push	{r4, r7, lr}
 80157ba:	b0d5      	sub	sp, #340	; 0x154
 80157bc:	af02      	add	r7, sp, #8
 80157be:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80157c2:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 80157c6:	6020      	str	r0, [r4, #0]
 80157c8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80157cc:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80157d0:	6001      	str	r1, [r0, #0]
 80157d2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80157d6:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80157da:	600a      	str	r2, [r1, #0]
 80157dc:	461a      	mov	r2, r3
 80157de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80157e2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80157e6:	801a      	strh	r2, [r3, #0]
#if LV_DRAW_COMPLEX
    if(dsc->opa <= LV_OPA_MIN) return;
 80157e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80157ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	7b1b      	ldrb	r3, [r3, #12]
 80157f4:	2b02      	cmp	r3, #2
 80157f6:	f240 83e4 	bls.w	8015fc2 <lv_draw_sw_arc+0x80a>
    if(dsc->width == 0) return;
 80157fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80157fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015808:	2b00      	cmp	r3, #0
 801580a:	f000 83dc 	beq.w	8015fc6 <lv_draw_sw_arc+0x80e>
    if(start_angle == end_angle) return;
 801580e:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8015812:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015816:	429a      	cmp	r2, r3
 8015818:	f000 83d7 	beq.w	8015fca <lv_draw_sw_arc+0x812>

    lv_coord_t width = dsc->width;
 801581c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015820:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	885b      	ldrh	r3, [r3, #2]
 8015828:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if(width > radius) width = radius;
 801582c:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 8015830:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015834:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015838:	881b      	ldrh	r3, [r3, #0]
 801583a:	429a      	cmp	r2, r3
 801583c:	dd06      	ble.n	801584c <lv_draw_sw_arc+0x94>
 801583e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015842:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015846:	881b      	ldrh	r3, [r3, #0]
 8015848:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    lv_draw_rect_dsc_t cir_dsc;
    lv_draw_rect_dsc_init(&cir_dsc);
 801584c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8015850:	4618      	mov	r0, r3
 8015852:	f7fe fd01 	bl	8014258 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 8015856:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801585a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	7b5b      	ldrb	r3, [r3, #13]
 8015862:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015866:	b2db      	uxtb	r3, r3
 8015868:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
    if(dsc->img_src) {
 801586c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015870:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	689b      	ldr	r3, [r3, #8]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d013      	beq.n	80158a4 <lv_draw_sw_arc+0xec>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 801587c:	2300      	movs	r3, #0
 801587e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_img_src = dsc->img_src;
 8015882:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015886:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	689b      	ldr	r3, [r3, #8]
 801588e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        cir_dsc.bg_img_opa = dsc->opa;
 8015892:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015896:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	7b1b      	ldrb	r3, [r3, #12]
 801589e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80158a2:	e00f      	b.n	80158c4 <lv_draw_sw_arc+0x10c>
    }
    else {
        cir_dsc.bg_opa = dsc->opa;
 80158a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	7b1b      	ldrb	r3, [r3, #12]
 80158b0:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_color = dsc->color;
 80158b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    }

    lv_area_t area_out;
    area_out.x1 = center->x - radius;
 80158c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158c8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158d2:	b29a      	uxth	r2, r3
 80158d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158d8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80158dc:	881b      	ldrh	r3, [r3, #0]
 80158de:	1ad3      	subs	r3, r2, r3
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	b21b      	sxth	r3, r3
 80158e4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    area_out.y1 = center->y - radius;
 80158e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80158f6:	b29a      	uxth	r2, r3
 80158f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80158fc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015900:	881b      	ldrh	r3, [r3, #0]
 8015902:	1ad3      	subs	r3, r2, r3
 8015904:	b29b      	uxth	r3, r3
 8015906:	b21b      	sxth	r3, r3
 8015908:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801590c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015910:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	f9b3 3000 	ldrsh.w	r3, [r3]
 801591a:	b29a      	uxth	r2, r3
 801591c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015920:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015924:	881b      	ldrh	r3, [r3, #0]
 8015926:	4413      	add	r3, r2
 8015928:	b29b      	uxth	r3, r3
 801592a:	3b01      	subs	r3, #1
 801592c:	b29b      	uxth	r3, r3
 801592e:	b21b      	sxth	r3, r3
 8015930:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
    area_out.y2 = center->y + radius - 1;
 8015934:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015938:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015942:	b29a      	uxth	r2, r3
 8015944:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015948:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 801594c:	881b      	ldrh	r3, [r3, #0]
 801594e:	4413      	add	r3, r2
 8015950:	b29b      	uxth	r3, r3
 8015952:	3b01      	subs	r3, #1
 8015954:	b29b      	uxth	r3, r3
 8015956:	b21b      	sxth	r3, r3
 8015958:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    lv_area_t area_in;
    lv_area_copy(&area_in, &area_out);
 801595c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015960:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8015964:	4611      	mov	r1, r2
 8015966:	4618      	mov	r0, r3
 8015968:	f7ff fed8 	bl	801571c <lv_area_copy>
    area_in.x1 += dsc->width;
 801596c:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
 8015970:	b29a      	uxth	r2, r3
 8015972:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015976:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015980:	b29b      	uxth	r3, r3
 8015982:	4413      	add	r3, r2
 8015984:	b29b      	uxth	r3, r3
 8015986:	b21b      	sxth	r3, r3
 8015988:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
    area_in.y1 += dsc->width;
 801598c:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	; 0xf2
 8015990:	b29a      	uxth	r2, r3
 8015992:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015996:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	4413      	add	r3, r2
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	b21b      	sxth	r3, r3
 80159a8:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    area_in.x2 -= dsc->width;
 80159ac:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 80159b0:	b29a      	uxth	r2, r3
 80159b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	1ad3      	subs	r3, r2, r3
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	b21b      	sxth	r3, r3
 80159c8:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
    area_in.y2 -= dsc->width;
 80159cc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80159d0:	b29a      	uxth	r2, r3
 80159d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80159d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80159e0:	b29b      	uxth	r3, r3
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	b21b      	sxth	r3, r3
 80159e8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

    /*Create inner the mask*/
    int16_t mask_in_id = LV_MASK_ID_INV;
 80159ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159f0:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    lv_draw_mask_radius_param_t mask_in_param;
    bool mask_in_param_valid = false;
 80159f4:	2300      	movs	r3, #0
 80159f6:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 80159fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff feab 	bl	801575a <lv_area_get_width>
 8015a04:	4603      	mov	r3, r0
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	dd1c      	ble.n	8015a44 <lv_draw_sw_arc+0x28c>
 8015a0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7ff feba 	bl	8015788 <lv_area_get_height>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	dd14      	ble.n	8015a44 <lv_draw_sw_arc+0x28c>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 8015a1a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8015a1e:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8015a22:	2301      	movs	r3, #1
 8015a24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015a28:	f7fc fc1a 	bl	8012260 <lv_draw_mask_radius_init>
        mask_in_param_valid = true;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 8015a32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015a36:	2100      	movs	r1, #0
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7fc f845 	bl	8011ac8 <lv_draw_mask_add>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    }

    lv_draw_mask_radius_param_t mask_out_param;
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8015a44:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8015a48:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015a52:	f7fc fc05 	bl	8012260 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8015a56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7fc f833 	bl	8011ac8 <lv_draw_mask_add>
 8015a62:	4603      	mov	r3, r0
 8015a64:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

    /*Draw a full ring*/
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 8015a68:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015a6c:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8015a70:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015a74:	429a      	cmp	r2, r3
 8015a76:	d007      	beq.n	8015a88 <lv_draw_sw_arc+0x2d0>
 8015a78:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8015a7c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015a80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d133      	bne.n	8015af0 <lv_draw_sw_arc+0x338>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8015a88:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015a8c:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015a90:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015a94:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015a98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015a9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015aa0:	6818      	ldr	r0, [r3, #0]
 8015aa2:	f7fe fc1d 	bl	80142e0 <lv_draw_rect>

        lv_draw_mask_remove_id(mask_out_id);
 8015aa6:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f7fc f882 	bl	8011bb4 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8015ab0:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ab8:	d004      	beq.n	8015ac4 <lv_draw_sw_arc+0x30c>
 8015aba:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7fc f878 	bl	8011bb4 <lv_draw_mask_remove_id>

        lv_draw_mask_free_param(&mask_out_param);
 8015ac4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7fc f8c3 	bl	8011c54 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 8015ace:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	f000 827b 	beq.w	8015fce <lv_draw_sw_arc+0x816>
            lv_draw_mask_free_param(&mask_in_param);
 8015ad8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7fc f8b9 	bl	8011c54 <lv_draw_mask_free_param>
        }

        return;
 8015ae2:	e274      	b.n	8015fce <lv_draw_sw_arc+0x816>
    }

    while(start_angle >= 360) start_angle -= 360;
 8015ae4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015ae8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8015aec:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 8015af0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015af4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8015af8:	d2f4      	bcs.n	8015ae4 <lv_draw_sw_arc+0x32c>
    while(end_angle >= 360) end_angle -= 360;
 8015afa:	e005      	b.n	8015b08 <lv_draw_sw_arc+0x350>
 8015afc:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015b00:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8015b04:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8015b08:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015b0c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8015b10:	d2f4      	bcs.n	8015afc <lv_draw_sw_arc+0x344>

    lv_draw_mask_angle_param_t mask_angle_param;
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 8015b12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015b20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b24:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015b2e:	f9b7 4158 	ldrsh.w	r4, [r7, #344]	; 0x158
 8015b32:	f9b7 315c 	ldrsh.w	r3, [r7, #348]	; 0x15c
 8015b36:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8015b3a:	9300      	str	r3, [sp, #0]
 8015b3c:	4623      	mov	r3, r4
 8015b3e:	f7fc fad9 	bl	80120f4 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 8015b42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015b46:	2100      	movs	r1, #0
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7fb ffbd 	bl	8011ac8 <lv_draw_mask_add>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

    int32_t angle_gap;
    if(end_angle > start_angle) {
 8015b54:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8015b58:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d909      	bls.n	8015b74 <lv_draw_sw_arc+0x3bc>
        angle_gap = 360 - (end_angle - start_angle);
 8015b60:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8015b64:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015b68:	1ad3      	subs	r3, r2, r3
 8015b6a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8015b6e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8015b72:	e006      	b.n	8015b82 <lv_draw_sw_arc+0x3ca>
    }
    else {
        angle_gap = start_angle - end_angle;
 8015b74:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8015b78:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015b7c:	1ad3      	subs	r3, r2, r3
 8015b7e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015b82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015b86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	689b      	ldr	r3, [r3, #8]
 8015b8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8015b92:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015b96:	2b3c      	cmp	r3, #60	; 0x3c
 8015b98:	f340 8080 	ble.w	8015c9c <lv_draw_sw_arc+0x4e4>
 8015b9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ba0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015ba4:	881b      	ldrh	r3, [r3, #0]
 8015ba6:	2b0a      	cmp	r3, #10
 8015ba8:	d978      	bls.n	8015c9c <lv_draw_sw_arc+0x4e4>
        /*Handle each quarter individually and skip which is empty*/
        quarter_draw_dsc_t q_dsc;
        q_dsc.center = center;
 8015baa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015bae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015bb2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8015bb6:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8015bba:	6812      	ldr	r2, [r2, #0]
 8015bbc:	601a      	str	r2, [r3, #0]
        q_dsc.radius = radius;
 8015bbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015bc2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015bc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015bca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015bce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015bd2:	809a      	strh	r2, [r3, #4]
        q_dsc.start_angle = start_angle;
 8015bd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015bd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015bdc:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8015be0:	80da      	strh	r2, [r3, #6]
        q_dsc.end_angle = end_angle;
 8015be2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015be6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015bea:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8015bee:	811a      	strh	r2, [r3, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8015bf0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8015bf4:	085b      	lsrs	r3, r3, #1
 8015bf6:	4a28      	ldr	r2, [pc, #160]	; (8015c98 <lv_draw_sw_arc+0x4e0>)
 8015bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8015bfc:	095b      	lsrs	r3, r3, #5
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	f003 0303 	and.w	r3, r3, #3
 8015c04:	b29a      	uxth	r2, r3
 8015c06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015c0e:	815a      	strh	r2, [r3, #10]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 8015c10:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8015c14:	085b      	lsrs	r3, r3, #1
 8015c16:	4a20      	ldr	r2, [pc, #128]	; (8015c98 <lv_draw_sw_arc+0x4e0>)
 8015c18:	fba2 2303 	umull	r2, r3, r2, r3
 8015c1c:	095b      	lsrs	r3, r3, #5
 8015c1e:	b29b      	uxth	r3, r3
 8015c20:	f003 0303 	and.w	r3, r3, #3
 8015c24:	b29a      	uxth	r2, r3
 8015c26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015c2e:	819a      	strh	r2, [r3, #12]
        q_dsc.width = width;
 8015c30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015c38:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8015c3c:	81da      	strh	r2, [r3, #14]
        q_dsc.draw_dsc = &cir_dsc;
 8015c3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015c46:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8015c4a:	611a      	str	r2, [r3, #16]
        q_dsc.draw_area = &area_out;
 8015c4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015c54:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015c58:	615a      	str	r2, [r3, #20]
        q_dsc.draw_ctx = draw_ctx;
 8015c5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015c5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8015c62:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8015c66:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8015c6a:	6812      	ldr	r2, [r2, #0]
 8015c6c:	619a      	str	r2, [r3, #24]

        draw_quarter_0(&q_dsc);
 8015c6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015c72:	4618      	mov	r0, r3
 8015c74:	f000 f9b0 	bl	8015fd8 <draw_quarter_0>
        draw_quarter_1(&q_dsc);
 8015c78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f000 fb9d 	bl	80163bc <draw_quarter_1>
        draw_quarter_2(&q_dsc);
 8015c82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015c86:	4618      	mov	r0, r3
 8015c88:	f000 fd92 	bl	80167b0 <draw_quarter_2>
        draw_quarter_3(&q_dsc);
 8015c8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 ff90 	bl	8016bb6 <draw_quarter_3>
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8015c96:	e00c      	b.n	8015cb2 <lv_draw_sw_arc+0x4fa>
 8015c98:	b60b60b7 	.word	0xb60b60b7
    }
    else {
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015c9c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015ca0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015ca4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ca8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015cac:	6818      	ldr	r0, [r3, #0]
 8015cae:	f7fe fb17 	bl	80142e0 <lv_draw_rect>
    }

    lv_draw_mask_free_param(&mask_angle_param);
 8015cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7fb ffcc 	bl	8011c54 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 8015cbc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7fb ffc7 	bl	8011c54 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 8015cc6:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d004      	beq.n	8015cd8 <lv_draw_sw_arc+0x520>
        lv_draw_mask_free_param(&mask_in_param);
 8015cce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f7fb ffbe 	bl	8011c54 <lv_draw_mask_free_param>
    }

    lv_draw_mask_remove_id(mask_angle_id);
 8015cd8:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	; 0x138
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7fb ff69 	bl	8011bb4 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8015ce2:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7fb ff64 	bl	8011bb4 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8015cec:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cf4:	d004      	beq.n	8015d00 <lv_draw_sw_arc+0x548>
 8015cf6:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fb ff5a 	bl	8011bb4 <lv_draw_mask_remove_id>

    if(dsc->rounded) {
 8015d00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	7b5b      	ldrb	r3, [r3, #13]
 8015d0c:	f003 0304 	and.w	r3, r3, #4
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	f000 815c 	beq.w	8015fd0 <lv_draw_sw_arc+0x818>

        lv_draw_mask_radius_param_t mask_end_param;

        lv_area_t round_area;
        get_rounded_area(start_angle, radius, width, &round_area);
 8015d18:	f9b7 0158 	ldrsh.w	r0, [r7, #344]	; 0x158
 8015d1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d20:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015d24:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015d28:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8015d2c:	b2da      	uxtb	r2, r3
 8015d2e:	f107 0318 	add.w	r3, r7, #24
 8015d32:	f001 f93a 	bl	8016faa <get_rounded_area>
        round_area.x1 += center->x;
 8015d36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d42:	b29a      	uxth	r2, r3
 8015d44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d48:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d52:	b29b      	uxth	r3, r3
 8015d54:	4413      	add	r3, r2
 8015d56:	b29b      	uxth	r3, r3
 8015d58:	b21a      	sxth	r2, r3
 8015d5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d62:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8015d64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015d70:	b29a      	uxth	r2, r3
 8015d72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	4413      	add	r3, r2
 8015d84:	b29b      	uxth	r3, r3
 8015d86:	b21a      	sxth	r2, r3
 8015d88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d90:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8015d92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015da4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	4413      	add	r3, r2
 8015db2:	b29b      	uxth	r3, r3
 8015db4:	b21a      	sxth	r2, r3
 8015db6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015dbe:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8015dc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015dc8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015dcc:	b29a      	uxth	r2, r3
 8015dce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015dd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	4413      	add	r3, r2
 8015de0:	b29b      	uxth	r3, r3
 8015de2:	b21a      	sxth	r2, r3
 8015de4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015dec:	80da      	strh	r2, [r3, #6]
        lv_area_t clip_area2;
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8015dee:	f107 0218 	add.w	r2, r7, #24
 8015df2:	f107 0310 	add.w	r3, r7, #16
 8015df6:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f00a fdda 	bl	80209b4 <_lv_area_intersect>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d02e      	beq.n	8015e64 <lv_draw_sw_arc+0x6ac>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8015e06:	f107 0118 	add.w	r1, r7, #24
 8015e0a:	f107 0020 	add.w	r0, r7, #32
 8015e0e:	2300      	movs	r3, #0
 8015e10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015e14:	f7fc fa24 	bl	8012260 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8015e18:	f107 0320 	add.w	r3, r7, #32
 8015e1c:	2100      	movs	r1, #0
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f7fb fe52 	bl	8011ac8 <lv_draw_mask_add>
 8015e24:	4603      	mov	r3, r0
 8015e26:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132

            draw_ctx->clip_area = &clip_area2;
 8015e2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015e2e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	f107 0210 	add.w	r2, r7, #16
 8015e38:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015e3a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015e3e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015e42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015e46:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015e4a:	6818      	ldr	r0, [r3, #0]
 8015e4c:	f7fe fa48 	bl	80142e0 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8015e50:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7fb fead 	bl	8011bb4 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8015e5a:	f107 0320 	add.w	r3, r7, #32
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7fb fef8 	bl	8011c54 <lv_draw_mask_free_param>
        }

        get_rounded_area(end_angle, radius, width, &round_area);
 8015e64:	f9b7 015c 	ldrsh.w	r0, [r7, #348]	; 0x15c
 8015e68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015e6c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8015e70:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015e74:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8015e78:	b2da      	uxtb	r2, r3
 8015e7a:	f107 0318 	add.w	r3, r7, #24
 8015e7e:	f001 f894 	bl	8016faa <get_rounded_area>
        round_area.x1 += center->x;
 8015e82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e8e:	b29a      	uxth	r2, r3
 8015e90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015e94:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e9e:	b29b      	uxth	r3, r3
 8015ea0:	4413      	add	r3, r2
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	b21a      	sxth	r2, r3
 8015ea6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015eae:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8015eb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015eb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ebc:	b29a      	uxth	r2, r3
 8015ebe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ec2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ecc:	b29b      	uxth	r3, r3
 8015ece:	4413      	add	r3, r2
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	b21a      	sxth	r2, r3
 8015ed4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015edc:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8015ede:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015eea:	b29a      	uxth	r2, r3
 8015eec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015ef0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	4413      	add	r3, r2
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	b21a      	sxth	r2, r3
 8015f02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015f0a:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8015f0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015f14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015f18:	b29a      	uxth	r2, r3
 8015f1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015f1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f28:	b29b      	uxth	r3, r3
 8015f2a:	4413      	add	r3, r2
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	b21a      	sxth	r2, r3
 8015f30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015f38:	80da      	strh	r2, [r3, #6]
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8015f3a:	f107 0218 	add.w	r2, r7, #24
 8015f3e:	f107 0310 	add.w	r3, r7, #16
 8015f42:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8015f46:	4618      	mov	r0, r3
 8015f48:	f00a fd34 	bl	80209b4 <_lv_area_intersect>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d02e      	beq.n	8015fb0 <lv_draw_sw_arc+0x7f8>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8015f52:	f107 0118 	add.w	r1, r7, #24
 8015f56:	f107 0020 	add.w	r0, r7, #32
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015f60:	f7fc f97e 	bl	8012260 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8015f64:	f107 0320 	add.w	r3, r7, #32
 8015f68:	2100      	movs	r1, #0
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7fb fdac 	bl	8011ac8 <lv_draw_mask_add>
 8015f70:	4603      	mov	r3, r0
 8015f72:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

            draw_ctx->clip_area = &clip_area2;
 8015f76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015f7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	f107 0210 	add.w	r2, r7, #16
 8015f84:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8015f86:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015f8a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8015f8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015f92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015f96:	6818      	ldr	r0, [r3, #0]
 8015f98:	f7fe f9a2 	bl	80142e0 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8015f9c:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7fb fe07 	bl	8011bb4 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8015fa6:	f107 0320 	add.w	r3, r7, #32
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7fb fe52 	bl	8011c54 <lv_draw_mask_free_param>
        }
        draw_ctx->clip_area = clip_area_ori;
 8015fb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015fb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015fbe:	609a      	str	r2, [r3, #8]
 8015fc0:	e006      	b.n	8015fd0 <lv_draw_sw_arc+0x818>
    if(dsc->opa <= LV_OPA_MIN) return;
 8015fc2:	bf00      	nop
 8015fc4:	e004      	b.n	8015fd0 <lv_draw_sw_arc+0x818>
    if(dsc->width == 0) return;
 8015fc6:	bf00      	nop
 8015fc8:	e002      	b.n	8015fd0 <lv_draw_sw_arc+0x818>
    if(start_angle == end_angle) return;
 8015fca:	bf00      	nop
 8015fcc:	e000      	b.n	8015fd0 <lv_draw_sw_arc+0x818>
        return;
 8015fce:	bf00      	nop
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_COMPLEX*/
}
 8015fd0:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd90      	pop	{r4, r7, pc}

08015fd8 <draw_quarter_0>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_DRAW_COMPLEX
static void draw_quarter_0(quarter_draw_dsc_t * q)
{
 8015fd8:	b590      	push	{r4, r7, lr}
 8015fda:	b087      	sub	sp, #28
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	699b      	ldr	r3, [r3, #24]
 8015fe4:	689b      	ldr	r3, [r3, #8]
 8015fe6:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	895b      	ldrh	r3, [r3, #10]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	f040 8097 	bne.w	8016120 <draw_quarter_0+0x148>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	899b      	ldrh	r3, [r3, #12]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	f040 8092 	bne.w	8016120 <draw_quarter_0+0x148>
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	88da      	ldrh	r2, [r3, #6]
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	891b      	ldrh	r3, [r3, #8]
 8016004:	429a      	cmp	r2, r3
 8016006:	f080 808b 	bcs.w	8016120 <draw_quarter_0+0x148>
        /*Small arc here*/
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016012:	b29c      	uxth	r4, r3
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	88db      	ldrh	r3, [r3, #6]
 8016018:	b21b      	sxth	r3, r3
 801601a:	4618      	mov	r0, r3
 801601c:	f00b fed0 	bl	8021dc0 <lv_trigo_sin>
 8016020:	4603      	mov	r3, r0
 8016022:	461a      	mov	r2, r3
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801602a:	4619      	mov	r1, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016032:	1acb      	subs	r3, r1, r3
 8016034:	fb02 f303 	mul.w	r3, r2, r3
 8016038:	13db      	asrs	r3, r3, #15
 801603a:	b29b      	uxth	r3, r3
 801603c:	4423      	add	r3, r4
 801603e:	b29b      	uxth	r3, r3
 8016040:	b21b      	sxth	r3, r3
 8016042:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	f9b3 3000 	ldrsh.w	r3, [r3]
 801604c:	b29c      	uxth	r4, r3
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	88db      	ldrh	r3, [r3, #6]
 8016052:	335a      	adds	r3, #90	; 0x5a
 8016054:	b29b      	uxth	r3, r3
 8016056:	b21b      	sxth	r3, r3
 8016058:	4618      	mov	r0, r3
 801605a:	f00b feb1 	bl	8021dc0 <lv_trigo_sin>
 801605e:	4603      	mov	r3, r0
 8016060:	461a      	mov	r2, r3
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016068:	fb02 f303 	mul.w	r3, r2, r3
 801606c:	13db      	asrs	r3, r3, #15
 801606e:	b29b      	uxth	r3, r3
 8016070:	4423      	add	r3, r4
 8016072:	b29b      	uxth	r3, r3
 8016074:	b21b      	sxth	r3, r3
 8016076:	81bb      	strh	r3, [r7, #12]

        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016080:	b29c      	uxth	r4, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	891b      	ldrh	r3, [r3, #8]
 8016086:	b21b      	sxth	r3, r3
 8016088:	4618      	mov	r0, r3
 801608a:	f00b fe99 	bl	8021dc0 <lv_trigo_sin>
 801608e:	4603      	mov	r3, r0
 8016090:	461a      	mov	r2, r3
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016098:	fb02 f303 	mul.w	r3, r2, r3
 801609c:	13db      	asrs	r3, r3, #15
 801609e:	b29b      	uxth	r3, r3
 80160a0:	4423      	add	r3, r4
 80160a2:	b29b      	uxth	r3, r3
 80160a4:	b21b      	sxth	r3, r3
 80160a6:	81fb      	strh	r3, [r7, #14]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160b0:	b29c      	uxth	r4, r3
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	891b      	ldrh	r3, [r3, #8]
 80160b6:	335a      	adds	r3, #90	; 0x5a
 80160b8:	b29b      	uxth	r3, r3
 80160ba:	b21b      	sxth	r3, r3
 80160bc:	4618      	mov	r0, r3
 80160be:	f00b fe7f 	bl	8021dc0 <lv_trigo_sin>
 80160c2:	4603      	mov	r3, r0
 80160c4:	461a      	mov	r2, r3
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80160cc:	4619      	mov	r1, r3
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80160d4:	1acb      	subs	r3, r1, r3
 80160d6:	fb02 f303 	mul.w	r3, r2, r3
 80160da:	13db      	asrs	r3, r3, #15
 80160dc:	b29b      	uxth	r3, r3
 80160de:	4423      	add	r3, r4
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	b21b      	sxth	r3, r3
 80160e4:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80160e6:	f107 0108 	add.w	r1, r7, #8
 80160ea:	f107 0308 	add.w	r3, r7, #8
 80160ee:	697a      	ldr	r2, [r7, #20]
 80160f0:	4618      	mov	r0, r3
 80160f2:	f00a fc5f 	bl	80209b4 <_lv_area_intersect>
 80160f6:	4603      	mov	r3, r0
 80160f8:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80160fa:	7cfb      	ldrb	r3, [r7, #19]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	f000 8152 	beq.w	80163a6 <draw_quarter_0+0x3ce>
            q->draw_ctx->clip_area = &quarter_area;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	699b      	ldr	r3, [r3, #24]
 8016106:	f107 0208 	add.w	r2, r7, #8
 801610a:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	6998      	ldr	r0, [r3, #24]
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6919      	ldr	r1, [r3, #16]
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	695b      	ldr	r3, [r3, #20]
 8016118:	461a      	mov	r2, r3
 801611a:	f7fe f8e1 	bl	80142e0 <lv_draw_rect>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801611e:	e142      	b.n	80163a6 <draw_quarter_0+0x3ce>
        }
    }
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	895b      	ldrh	r3, [r3, #10]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d004      	beq.n	8016132 <draw_quarter_0+0x15a>
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	899b      	ldrh	r3, [r3, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	f040 80d2 	bne.w	80162d6 <draw_quarter_0+0x2fe>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 0) {
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	895b      	ldrh	r3, [r3, #10]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d163      	bne.n	8016202 <draw_quarter_0+0x22a>
            quarter_area.x1 = q->center->x;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016142:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + q->radius;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801614c:	b29a      	uxth	r2, r3
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016154:	b29b      	uxth	r3, r3
 8016156:	4413      	add	r3, r2
 8016158:	b29b      	uxth	r3, r3
 801615a:	b21b      	sxth	r3, r3
 801615c:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016166:	b29c      	uxth	r4, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	88db      	ldrh	r3, [r3, #6]
 801616c:	b21b      	sxth	r3, r3
 801616e:	4618      	mov	r0, r3
 8016170:	f00b fe26 	bl	8021dc0 <lv_trigo_sin>
 8016174:	4603      	mov	r3, r0
 8016176:	461a      	mov	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801617e:	4619      	mov	r1, r3
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016186:	1acb      	subs	r3, r1, r3
 8016188:	fb02 f303 	mul.w	r3, r2, r3
 801618c:	13db      	asrs	r3, r3, #15
 801618e:	b29b      	uxth	r3, r3
 8016190:	4423      	add	r3, r4
 8016192:	b29b      	uxth	r3, r3
 8016194:	b21b      	sxth	r3, r3
 8016196:	817b      	strh	r3, [r7, #10]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161a0:	b29c      	uxth	r4, r3
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	88db      	ldrh	r3, [r3, #6]
 80161a6:	335a      	adds	r3, #90	; 0x5a
 80161a8:	b29b      	uxth	r3, r3
 80161aa:	b21b      	sxth	r3, r3
 80161ac:	4618      	mov	r0, r3
 80161ae:	f00b fe07 	bl	8021dc0 <lv_trigo_sin>
 80161b2:	4603      	mov	r3, r0
 80161b4:	461a      	mov	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80161bc:	fb02 f303 	mul.w	r3, r2, r3
 80161c0:	13db      	asrs	r3, r3, #15
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	4423      	add	r3, r4
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	b21b      	sxth	r3, r3
 80161ca:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80161cc:	f107 0108 	add.w	r1, r7, #8
 80161d0:	f107 0308 	add.w	r3, r7, #8
 80161d4:	697a      	ldr	r2, [r7, #20]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f00a fbec 	bl	80209b4 <_lv_area_intersect>
 80161dc:	4603      	mov	r3, r0
 80161de:	747b      	strb	r3, [r7, #17]
            if(ok) {
 80161e0:	7c7b      	ldrb	r3, [r7, #17]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00d      	beq.n	8016202 <draw_quarter_0+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	699b      	ldr	r3, [r3, #24]
 80161ea:	f107 0208 	add.w	r2, r7, #8
 80161ee:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6998      	ldr	r0, [r3, #24]
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	6919      	ldr	r1, [r3, #16]
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	695b      	ldr	r3, [r3, #20]
 80161fc:	461a      	mov	r2, r3
 80161fe:	f7fe f86f 	bl	80142e0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 0) {
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	899b      	ldrh	r3, [r3, #12]
 8016206:	2b00      	cmp	r3, #0
 8016208:	f040 80cf 	bne.w	80163aa <draw_quarter_0+0x3d2>
            quarter_area.x2 = q->center->x + q->radius;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016214:	b29a      	uxth	r2, r3
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801621c:	b29b      	uxth	r3, r3
 801621e:	4413      	add	r3, r2
 8016220:	b29b      	uxth	r3, r3
 8016222:	b21b      	sxth	r3, r3
 8016224:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801622e:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016238:	b29c      	uxth	r4, r3
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	891b      	ldrh	r3, [r3, #8]
 801623e:	b21b      	sxth	r3, r3
 8016240:	4618      	mov	r0, r3
 8016242:	f00b fdbd 	bl	8021dc0 <lv_trigo_sin>
 8016246:	4603      	mov	r3, r0
 8016248:	461a      	mov	r2, r3
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016250:	fb02 f303 	mul.w	r3, r2, r3
 8016254:	13db      	asrs	r3, r3, #15
 8016256:	b29b      	uxth	r3, r3
 8016258:	4423      	add	r3, r4
 801625a:	b29b      	uxth	r3, r3
 801625c:	b21b      	sxth	r3, r3
 801625e:	81fb      	strh	r3, [r7, #14]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016268:	b29c      	uxth	r4, r3
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	891b      	ldrh	r3, [r3, #8]
 801626e:	335a      	adds	r3, #90	; 0x5a
 8016270:	b29b      	uxth	r3, r3
 8016272:	b21b      	sxth	r3, r3
 8016274:	4618      	mov	r0, r3
 8016276:	f00b fda3 	bl	8021dc0 <lv_trigo_sin>
 801627a:	4603      	mov	r3, r0
 801627c:	461a      	mov	r2, r3
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016284:	4619      	mov	r1, r3
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801628c:	1acb      	subs	r3, r1, r3
 801628e:	fb02 f303 	mul.w	r3, r2, r3
 8016292:	13db      	asrs	r3, r3, #15
 8016294:	b29b      	uxth	r3, r3
 8016296:	4423      	add	r3, r4
 8016298:	b29b      	uxth	r3, r3
 801629a:	b21b      	sxth	r3, r3
 801629c:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801629e:	f107 0108 	add.w	r1, r7, #8
 80162a2:	f107 0308 	add.w	r3, r7, #8
 80162a6:	697a      	ldr	r2, [r7, #20]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f00a fb83 	bl	80209b4 <_lv_area_intersect>
 80162ae:	4603      	mov	r3, r0
 80162b0:	743b      	strb	r3, [r7, #16]
            if(ok) {
 80162b2:	7c3b      	ldrb	r3, [r7, #16]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d078      	beq.n	80163aa <draw_quarter_0+0x3d2>
                q->draw_ctx->clip_area = &quarter_area;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	699b      	ldr	r3, [r3, #24]
 80162bc:	f107 0208 	add.w	r2, r7, #8
 80162c0:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	6998      	ldr	r0, [r3, #24]
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6919      	ldr	r1, [r3, #16]
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	695b      	ldr	r3, [r3, #20]
 80162ce:	461a      	mov	r2, r3
 80162d0:	f7fe f806 	bl	80142e0 <lv_draw_rect>
        if(q->end_quarter == 0) {
 80162d4:	e069      	b.n	80163aa <draw_quarter_0+0x3d2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	895a      	ldrh	r2, [r3, #10]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	899b      	ldrh	r3, [r3, #12]
 80162de:	429a      	cmp	r2, r3
 80162e0:	d109      	bne.n	80162f6 <draw_quarter_0+0x31e>
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	895b      	ldrh	r3, [r3, #10]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d005      	beq.n	80162f6 <draw_quarter_0+0x31e>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	891a      	ldrh	r2, [r3, #8]
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	88db      	ldrh	r3, [r3, #6]
 80162f2:	429a      	cmp	r2, r3
 80162f4:	d317      	bcc.n	8016326 <draw_quarter_0+0x34e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 80162fa:	2b02      	cmp	r3, #2
 80162fc:	d103      	bne.n	8016306 <draw_quarter_0+0x32e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	899b      	ldrh	r3, [r3, #12]
 8016302:	2b01      	cmp	r3, #1
 8016304:	d00f      	beq.n	8016326 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801630a:	2b03      	cmp	r3, #3
 801630c:	d103      	bne.n	8016316 <draw_quarter_0+0x33e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	899b      	ldrh	r3, [r3, #12]
 8016312:	2b02      	cmp	r3, #2
 8016314:	d007      	beq.n	8016326 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801631a:	2b03      	cmp	r3, #3
 801631c:	d146      	bne.n	80163ac <draw_quarter_0+0x3d4>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	899b      	ldrh	r3, [r3, #12]
 8016322:	2b01      	cmp	r3, #1
 8016324:	d142      	bne.n	80163ac <draw_quarter_0+0x3d4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801632e:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016338:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016342:	b29a      	uxth	r2, r3
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801634a:	b29b      	uxth	r3, r3
 801634c:	4413      	add	r3, r2
 801634e:	b29b      	uxth	r3, r3
 8016350:	b21b      	sxth	r3, r3
 8016352:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801635c:	b29a      	uxth	r2, r3
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016364:	b29b      	uxth	r3, r3
 8016366:	4413      	add	r3, r2
 8016368:	b29b      	uxth	r3, r3
 801636a:	b21b      	sxth	r3, r3
 801636c:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801636e:	f107 0108 	add.w	r1, r7, #8
 8016372:	f107 0308 	add.w	r3, r7, #8
 8016376:	697a      	ldr	r2, [r7, #20]
 8016378:	4618      	mov	r0, r3
 801637a:	f00a fb1b 	bl	80209b4 <_lv_area_intersect>
 801637e:	4603      	mov	r3, r0
 8016380:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8016382:	7cbb      	ldrb	r3, [r7, #18]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d011      	beq.n	80163ac <draw_quarter_0+0x3d4>
            q->draw_ctx->clip_area = &quarter_area;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	699b      	ldr	r3, [r3, #24]
 801638c:	f107 0208 	add.w	r2, r7, #8
 8016390:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	6998      	ldr	r0, [r3, #24]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	6919      	ldr	r1, [r3, #16]
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	695b      	ldr	r3, [r3, #20]
 801639e:	461a      	mov	r2, r3
 80163a0:	f7fd ff9e 	bl	80142e0 <lv_draw_rect>
 80163a4:	e002      	b.n	80163ac <draw_quarter_0+0x3d4>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80163a6:	bf00      	nop
 80163a8:	e000      	b.n	80163ac <draw_quarter_0+0x3d4>
        if(q->end_quarter == 0) {
 80163aa:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	699b      	ldr	r3, [r3, #24]
 80163b0:	697a      	ldr	r2, [r7, #20]
 80163b2:	609a      	str	r2, [r3, #8]
}
 80163b4:	bf00      	nop
 80163b6:	371c      	adds	r7, #28
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd90      	pop	{r4, r7, pc}

080163bc <draw_quarter_1>:

static void draw_quarter_1(quarter_draw_dsc_t * q)
{
 80163bc:	b590      	push	{r4, r7, lr}
 80163be:	b087      	sub	sp, #28
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	699b      	ldr	r3, [r3, #24]
 80163c8:	689b      	ldr	r3, [r3, #8]
 80163ca:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	895b      	ldrh	r3, [r3, #10]
 80163d0:	2b01      	cmp	r3, #1
 80163d2:	f040 8097 	bne.w	8016504 <draw_quarter_1+0x148>
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	899b      	ldrh	r3, [r3, #12]
 80163da:	2b01      	cmp	r3, #1
 80163dc:	f040 8092 	bne.w	8016504 <draw_quarter_1+0x148>
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	88da      	ldrh	r2, [r3, #6]
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	891b      	ldrh	r3, [r3, #8]
 80163e8:	429a      	cmp	r2, r3
 80163ea:	f080 808b 	bcs.w	8016504 <draw_quarter_1+0x148>
        /*Small arc here*/
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80163f6:	b29c      	uxth	r4, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	88db      	ldrh	r3, [r3, #6]
 80163fc:	b21b      	sxth	r3, r3
 80163fe:	4618      	mov	r0, r3
 8016400:	f00b fcde 	bl	8021dc0 <lv_trigo_sin>
 8016404:	4603      	mov	r3, r0
 8016406:	461a      	mov	r2, r3
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801640e:	fb02 f303 	mul.w	r3, r2, r3
 8016412:	13db      	asrs	r3, r3, #15
 8016414:	b29b      	uxth	r3, r3
 8016416:	4423      	add	r3, r4
 8016418:	b29b      	uxth	r3, r3
 801641a:	b21b      	sxth	r3, r3
 801641c:	81fb      	strh	r3, [r7, #14]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016426:	b29c      	uxth	r4, r3
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	88db      	ldrh	r3, [r3, #6]
 801642c:	335a      	adds	r3, #90	; 0x5a
 801642e:	b29b      	uxth	r3, r3
 8016430:	b21b      	sxth	r3, r3
 8016432:	4618      	mov	r0, r3
 8016434:	f00b fcc4 	bl	8021dc0 <lv_trigo_sin>
 8016438:	4603      	mov	r3, r0
 801643a:	461a      	mov	r2, r3
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016442:	4619      	mov	r1, r3
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801644a:	1acb      	subs	r3, r1, r3
 801644c:	fb02 f303 	mul.w	r3, r2, r3
 8016450:	13db      	asrs	r3, r3, #15
 8016452:	b29b      	uxth	r3, r3
 8016454:	4423      	add	r3, r4
 8016456:	b29b      	uxth	r3, r3
 8016458:	b21b      	sxth	r3, r3
 801645a:	81bb      	strh	r3, [r7, #12]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016464:	b29c      	uxth	r4, r3
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	891b      	ldrh	r3, [r3, #8]
 801646a:	b21b      	sxth	r3, r3
 801646c:	4618      	mov	r0, r3
 801646e:	f00b fca7 	bl	8021dc0 <lv_trigo_sin>
 8016472:	4603      	mov	r3, r0
 8016474:	461a      	mov	r2, r3
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801647c:	4619      	mov	r1, r3
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016484:	1acb      	subs	r3, r1, r3
 8016486:	fb02 f303 	mul.w	r3, r2, r3
 801648a:	13db      	asrs	r3, r3, #15
 801648c:	b29b      	uxth	r3, r3
 801648e:	4423      	add	r3, r4
 8016490:	b29b      	uxth	r3, r3
 8016492:	b21b      	sxth	r3, r3
 8016494:	817b      	strh	r3, [r7, #10]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801649e:	b29c      	uxth	r4, r3
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	891b      	ldrh	r3, [r3, #8]
 80164a4:	335a      	adds	r3, #90	; 0x5a
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	b21b      	sxth	r3, r3
 80164aa:	4618      	mov	r0, r3
 80164ac:	f00b fc88 	bl	8021dc0 <lv_trigo_sin>
 80164b0:	4603      	mov	r3, r0
 80164b2:	461a      	mov	r2, r3
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80164ba:	fb02 f303 	mul.w	r3, r2, r3
 80164be:	13db      	asrs	r3, r3, #15
 80164c0:	b29b      	uxth	r3, r3
 80164c2:	4423      	add	r3, r4
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	b21b      	sxth	r3, r3
 80164c8:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80164ca:	f107 0108 	add.w	r1, r7, #8
 80164ce:	f107 0308 	add.w	r3, r7, #8
 80164d2:	697a      	ldr	r2, [r7, #20]
 80164d4:	4618      	mov	r0, r3
 80164d6:	f00a fa6d 	bl	80209b4 <_lv_area_intersect>
 80164da:	4603      	mov	r3, r0
 80164dc:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80164de:	7cfb      	ldrb	r3, [r7, #19]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	f000 815a 	beq.w	801679a <draw_quarter_1+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	699b      	ldr	r3, [r3, #24]
 80164ea:	f107 0208 	add.w	r2, r7, #8
 80164ee:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6998      	ldr	r0, [r3, #24]
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6919      	ldr	r1, [r3, #16]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	695b      	ldr	r3, [r3, #20]
 80164fc:	461a      	mov	r2, r3
 80164fe:	f7fd feef 	bl	80142e0 <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8016502:	e14a      	b.n	801679a <draw_quarter_1+0x3de>
        }
    }
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	895b      	ldrh	r3, [r3, #10]
 8016508:	2b01      	cmp	r3, #1
 801650a:	d004      	beq.n	8016516 <draw_quarter_1+0x15a>
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	899b      	ldrh	r3, [r3, #12]
 8016510:	2b01      	cmp	r3, #1
 8016512:	f040 80d6 	bne.w	80166c2 <draw_quarter_1+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 1) {
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	895b      	ldrh	r3, [r3, #10]
 801651a:	2b01      	cmp	r3, #1
 801651c:	d163      	bne.n	80165e6 <draw_quarter_1+0x22a>
            quarter_area.x1 = q->center->x - q->radius;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016526:	b29a      	uxth	r2, r3
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801652e:	b29b      	uxth	r3, r3
 8016530:	1ad3      	subs	r3, r2, r3
 8016532:	b29b      	uxth	r3, r3
 8016534:	b21b      	sxth	r3, r3
 8016536:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016540:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801654a:	b29c      	uxth	r4, r3
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	88db      	ldrh	r3, [r3, #6]
 8016550:	b21b      	sxth	r3, r3
 8016552:	4618      	mov	r0, r3
 8016554:	f00b fc34 	bl	8021dc0 <lv_trigo_sin>
 8016558:	4603      	mov	r3, r0
 801655a:	461a      	mov	r2, r3
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016562:	fb02 f303 	mul.w	r3, r2, r3
 8016566:	13db      	asrs	r3, r3, #15
 8016568:	b29b      	uxth	r3, r3
 801656a:	4423      	add	r3, r4
 801656c:	b29b      	uxth	r3, r3
 801656e:	b21b      	sxth	r3, r3
 8016570:	81fb      	strh	r3, [r7, #14]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	f9b3 3000 	ldrsh.w	r3, [r3]
 801657a:	b29c      	uxth	r4, r3
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	88db      	ldrh	r3, [r3, #6]
 8016580:	335a      	adds	r3, #90	; 0x5a
 8016582:	b29b      	uxth	r3, r3
 8016584:	b21b      	sxth	r3, r3
 8016586:	4618      	mov	r0, r3
 8016588:	f00b fc1a 	bl	8021dc0 <lv_trigo_sin>
 801658c:	4603      	mov	r3, r0
 801658e:	461a      	mov	r2, r3
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016596:	4619      	mov	r1, r3
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801659e:	1acb      	subs	r3, r1, r3
 80165a0:	fb02 f303 	mul.w	r3, r2, r3
 80165a4:	13db      	asrs	r3, r3, #15
 80165a6:	b29b      	uxth	r3, r3
 80165a8:	4423      	add	r3, r4
 80165aa:	b29b      	uxth	r3, r3
 80165ac:	b21b      	sxth	r3, r3
 80165ae:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80165b0:	f107 0108 	add.w	r1, r7, #8
 80165b4:	f107 0308 	add.w	r3, r7, #8
 80165b8:	697a      	ldr	r2, [r7, #20]
 80165ba:	4618      	mov	r0, r3
 80165bc:	f00a f9fa 	bl	80209b4 <_lv_area_intersect>
 80165c0:	4603      	mov	r3, r0
 80165c2:	747b      	strb	r3, [r7, #17]
            if(ok) {
 80165c4:	7c7b      	ldrb	r3, [r7, #17]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00d      	beq.n	80165e6 <draw_quarter_1+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	699b      	ldr	r3, [r3, #24]
 80165ce:	f107 0208 	add.w	r2, r7, #8
 80165d2:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	6998      	ldr	r0, [r3, #24]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	6919      	ldr	r1, [r3, #16]
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	695b      	ldr	r3, [r3, #20]
 80165e0:	461a      	mov	r2, r3
 80165e2:	f7fd fe7d 	bl	80142e0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 1) {
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	899b      	ldrh	r3, [r3, #12]
 80165ea:	2b01      	cmp	r3, #1
 80165ec:	f040 80d7 	bne.w	801679e <draw_quarter_1+0x3e2>
            quarter_area.x2 = q->center->x - 1;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165f8:	b29b      	uxth	r3, r3
 80165fa:	3b01      	subs	r3, #1
 80165fc:	b29b      	uxth	r3, r3
 80165fe:	b21b      	sxth	r3, r3
 8016600:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + q->radius;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801660a:	b29a      	uxth	r2, r3
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016612:	b29b      	uxth	r3, r3
 8016614:	4413      	add	r3, r2
 8016616:	b29b      	uxth	r3, r3
 8016618:	b21b      	sxth	r3, r3
 801661a:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016624:	b29c      	uxth	r4, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	891b      	ldrh	r3, [r3, #8]
 801662a:	b21b      	sxth	r3, r3
 801662c:	4618      	mov	r0, r3
 801662e:	f00b fbc7 	bl	8021dc0 <lv_trigo_sin>
 8016632:	4603      	mov	r3, r0
 8016634:	461a      	mov	r2, r3
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801663c:	4619      	mov	r1, r3
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016644:	1acb      	subs	r3, r1, r3
 8016646:	fb02 f303 	mul.w	r3, r2, r3
 801664a:	13db      	asrs	r3, r3, #15
 801664c:	b29b      	uxth	r3, r3
 801664e:	4423      	add	r3, r4
 8016650:	b29b      	uxth	r3, r3
 8016652:	b21b      	sxth	r3, r3
 8016654:	817b      	strh	r3, [r7, #10]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801665e:	b29c      	uxth	r4, r3
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	891b      	ldrh	r3, [r3, #8]
 8016664:	335a      	adds	r3, #90	; 0x5a
 8016666:	b29b      	uxth	r3, r3
 8016668:	b21b      	sxth	r3, r3
 801666a:	4618      	mov	r0, r3
 801666c:	f00b fba8 	bl	8021dc0 <lv_trigo_sin>
 8016670:	4603      	mov	r3, r0
 8016672:	461a      	mov	r2, r3
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801667a:	fb02 f303 	mul.w	r3, r2, r3
 801667e:	13db      	asrs	r3, r3, #15
 8016680:	b29b      	uxth	r3, r3
 8016682:	4423      	add	r3, r4
 8016684:	b29b      	uxth	r3, r3
 8016686:	b21b      	sxth	r3, r3
 8016688:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801668a:	f107 0108 	add.w	r1, r7, #8
 801668e:	f107 0308 	add.w	r3, r7, #8
 8016692:	697a      	ldr	r2, [r7, #20]
 8016694:	4618      	mov	r0, r3
 8016696:	f00a f98d 	bl	80209b4 <_lv_area_intersect>
 801669a:	4603      	mov	r3, r0
 801669c:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801669e:	7c3b      	ldrb	r3, [r7, #16]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d07c      	beq.n	801679e <draw_quarter_1+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	699b      	ldr	r3, [r3, #24]
 80166a8:	f107 0208 	add.w	r2, r7, #8
 80166ac:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	6998      	ldr	r0, [r3, #24]
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	6919      	ldr	r1, [r3, #16]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	695b      	ldr	r3, [r3, #20]
 80166ba:	461a      	mov	r2, r3
 80166bc:	f7fd fe10 	bl	80142e0 <lv_draw_rect>
        if(q->end_quarter == 1) {
 80166c0:	e06d      	b.n	801679e <draw_quarter_1+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	895a      	ldrh	r2, [r3, #10]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	899b      	ldrh	r3, [r3, #12]
 80166ca:	429a      	cmp	r2, r3
 80166cc:	d109      	bne.n	80166e2 <draw_quarter_1+0x326>
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	895b      	ldrh	r3, [r3, #10]
 80166d2:	2b01      	cmp	r3, #1
 80166d4:	d005      	beq.n	80166e2 <draw_quarter_1+0x326>
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	891a      	ldrh	r2, [r3, #8]
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	88db      	ldrh	r3, [r3, #6]
 80166de:	429a      	cmp	r2, r3
 80166e0:	d317      	bcc.n	8016712 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d103      	bne.n	80166f2 <draw_quarter_1+0x336>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	899b      	ldrh	r3, [r3, #12]
 80166ee:	2b02      	cmp	r3, #2
 80166f0:	d00f      	beq.n	8016712 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d103      	bne.n	8016702 <draw_quarter_1+0x346>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	899b      	ldrh	r3, [r3, #12]
 80166fe:	2b03      	cmp	r3, #3
 8016700:	d007      	beq.n	8016712 <draw_quarter_1+0x356>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016706:	2b03      	cmp	r3, #3
 8016708:	d14a      	bne.n	80167a0 <draw_quarter_1+0x3e4>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	899b      	ldrh	r3, [r3, #12]
 801670e:	2b02      	cmp	r3, #2
 8016710:	d146      	bne.n	80167a0 <draw_quarter_1+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	f9b3 3000 	ldrsh.w	r3, [r3]
 801671a:	b29a      	uxth	r2, r3
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016722:	b29b      	uxth	r3, r3
 8016724:	1ad3      	subs	r3, r2, r3
 8016726:	b29b      	uxth	r3, r3
 8016728:	b21b      	sxth	r3, r3
 801672a:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016734:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801673e:	b29b      	uxth	r3, r3
 8016740:	3b01      	subs	r3, #1
 8016742:	b29b      	uxth	r3, r3
 8016744:	b21b      	sxth	r3, r3
 8016746:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016750:	b29a      	uxth	r2, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016758:	b29b      	uxth	r3, r3
 801675a:	4413      	add	r3, r2
 801675c:	b29b      	uxth	r3, r3
 801675e:	b21b      	sxth	r3, r3
 8016760:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016762:	f107 0108 	add.w	r1, r7, #8
 8016766:	f107 0308 	add.w	r3, r7, #8
 801676a:	697a      	ldr	r2, [r7, #20]
 801676c:	4618      	mov	r0, r3
 801676e:	f00a f921 	bl	80209b4 <_lv_area_intersect>
 8016772:	4603      	mov	r3, r0
 8016774:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8016776:	7cbb      	ldrb	r3, [r7, #18]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d011      	beq.n	80167a0 <draw_quarter_1+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	699b      	ldr	r3, [r3, #24]
 8016780:	f107 0208 	add.w	r2, r7, #8
 8016784:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	6998      	ldr	r0, [r3, #24]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	6919      	ldr	r1, [r3, #16]
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	695b      	ldr	r3, [r3, #20]
 8016792:	461a      	mov	r2, r3
 8016794:	f7fd fda4 	bl	80142e0 <lv_draw_rect>
 8016798:	e002      	b.n	80167a0 <draw_quarter_1+0x3e4>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801679a:	bf00      	nop
 801679c:	e000      	b.n	80167a0 <draw_quarter_1+0x3e4>
        if(q->end_quarter == 1) {
 801679e:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	699b      	ldr	r3, [r3, #24]
 80167a4:	697a      	ldr	r2, [r7, #20]
 80167a6:	609a      	str	r2, [r3, #8]
}
 80167a8:	bf00      	nop
 80167aa:	371c      	adds	r7, #28
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd90      	pop	{r4, r7, pc}

080167b0 <draw_quarter_2>:

static void draw_quarter_2(quarter_draw_dsc_t * q)
{
 80167b0:	b590      	push	{r4, r7, lr}
 80167b2:	b087      	sub	sp, #28
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	699b      	ldr	r3, [r3, #24]
 80167bc:	689b      	ldr	r3, [r3, #8]
 80167be:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	895b      	ldrh	r3, [r3, #10]
 80167c4:	2b02      	cmp	r3, #2
 80167c6:	f040 8097 	bne.w	80168f8 <draw_quarter_2+0x148>
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	899b      	ldrh	r3, [r3, #12]
 80167ce:	2b02      	cmp	r3, #2
 80167d0:	f040 8092 	bne.w	80168f8 <draw_quarter_2+0x148>
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	88da      	ldrh	r2, [r3, #6]
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	891b      	ldrh	r3, [r3, #8]
 80167dc:	429a      	cmp	r2, r3
 80167de:	f080 808b 	bcs.w	80168f8 <draw_quarter_2+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167ea:	b29c      	uxth	r4, r3
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	88db      	ldrh	r3, [r3, #6]
 80167f0:	335a      	adds	r3, #90	; 0x5a
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	b21b      	sxth	r3, r3
 80167f6:	4618      	mov	r0, r3
 80167f8:	f00b fae2 	bl	8021dc0 <lv_trigo_sin>
 80167fc:	4603      	mov	r3, r0
 80167fe:	461a      	mov	r2, r3
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016806:	fb02 f303 	mul.w	r3, r2, r3
 801680a:	13db      	asrs	r3, r3, #15
 801680c:	b29b      	uxth	r3, r3
 801680e:	4423      	add	r3, r4
 8016810:	b29b      	uxth	r3, r3
 8016812:	b21b      	sxth	r3, r3
 8016814:	813b      	strh	r3, [r7, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801681e:	b29c      	uxth	r4, r3
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	88db      	ldrh	r3, [r3, #6]
 8016824:	b21b      	sxth	r3, r3
 8016826:	4618      	mov	r0, r3
 8016828:	f00b faca 	bl	8021dc0 <lv_trigo_sin>
 801682c:	4603      	mov	r3, r0
 801682e:	461a      	mov	r2, r3
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016836:	4619      	mov	r1, r3
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801683e:	1acb      	subs	r3, r1, r3
 8016840:	fb02 f303 	mul.w	r3, r2, r3
 8016844:	13db      	asrs	r3, r3, #15
 8016846:	b29b      	uxth	r3, r3
 8016848:	4423      	add	r3, r4
 801684a:	b29b      	uxth	r3, r3
 801684c:	b21b      	sxth	r3, r3
 801684e:	81fb      	strh	r3, [r7, #14]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016858:	b29c      	uxth	r4, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	891b      	ldrh	r3, [r3, #8]
 801685e:	b21b      	sxth	r3, r3
 8016860:	4618      	mov	r0, r3
 8016862:	f00b faad 	bl	8021dc0 <lv_trigo_sin>
 8016866:	4603      	mov	r3, r0
 8016868:	461a      	mov	r2, r3
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016870:	fb02 f303 	mul.w	r3, r2, r3
 8016874:	13db      	asrs	r3, r3, #15
 8016876:	b29b      	uxth	r3, r3
 8016878:	4423      	add	r3, r4
 801687a:	b29b      	uxth	r3, r3
 801687c:	b21b      	sxth	r3, r3
 801687e:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016888:	b29c      	uxth	r4, r3
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	891b      	ldrh	r3, [r3, #8]
 801688e:	335a      	adds	r3, #90	; 0x5a
 8016890:	b29b      	uxth	r3, r3
 8016892:	b21b      	sxth	r3, r3
 8016894:	4618      	mov	r0, r3
 8016896:	f00b fa93 	bl	8021dc0 <lv_trigo_sin>
 801689a:	4603      	mov	r3, r0
 801689c:	461a      	mov	r2, r3
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80168a4:	4619      	mov	r1, r3
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80168ac:	1acb      	subs	r3, r1, r3
 80168ae:	fb02 f303 	mul.w	r3, r2, r3
 80168b2:	13db      	asrs	r3, r3, #15
 80168b4:	b29b      	uxth	r3, r3
 80168b6:	4423      	add	r3, r4
 80168b8:	b29b      	uxth	r3, r3
 80168ba:	b21b      	sxth	r3, r3
 80168bc:	81bb      	strh	r3, [r7, #12]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80168be:	f107 0108 	add.w	r1, r7, #8
 80168c2:	f107 0308 	add.w	r3, r7, #8
 80168c6:	697a      	ldr	r2, [r7, #20]
 80168c8:	4618      	mov	r0, r3
 80168ca:	f00a f873 	bl	80209b4 <_lv_area_intersect>
 80168ce:	4603      	mov	r3, r0
 80168d0:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80168d2:	7cfb      	ldrb	r3, [r7, #19]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	f000 8163 	beq.w	8016ba0 <draw_quarter_2+0x3f0>
            q->draw_ctx->clip_area = &quarter_area;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	699b      	ldr	r3, [r3, #24]
 80168de:	f107 0208 	add.w	r2, r7, #8
 80168e2:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6998      	ldr	r0, [r3, #24]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	6919      	ldr	r1, [r3, #16]
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	695b      	ldr	r3, [r3, #20]
 80168f0:	461a      	mov	r2, r3
 80168f2:	f7fd fcf5 	bl	80142e0 <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80168f6:	e153      	b.n	8016ba0 <draw_quarter_2+0x3f0>
        }
    }
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	895b      	ldrh	r3, [r3, #10]
 80168fc:	2b02      	cmp	r3, #2
 80168fe:	d004      	beq.n	801690a <draw_quarter_2+0x15a>
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	899b      	ldrh	r3, [r3, #12]
 8016904:	2b02      	cmp	r3, #2
 8016906:	f040 80db 	bne.w	8016ac0 <draw_quarter_2+0x310>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 2) {
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	895b      	ldrh	r3, [r3, #10]
 801690e:	2b02      	cmp	r3, #2
 8016910:	d167      	bne.n	80169e2 <draw_quarter_2+0x232>
            quarter_area.x2 = q->center->x - 1;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f9b3 3000 	ldrsh.w	r3, [r3]
 801691a:	b29b      	uxth	r3, r3
 801691c:	3b01      	subs	r3, #1
 801691e:	b29b      	uxth	r3, r3
 8016920:	b21b      	sxth	r3, r3
 8016922:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y - q->radius;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801692c:	b29a      	uxth	r2, r3
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016934:	b29b      	uxth	r3, r3
 8016936:	1ad3      	subs	r3, r2, r3
 8016938:	b29b      	uxth	r3, r3
 801693a:	b21b      	sxth	r3, r3
 801693c:	817b      	strh	r3, [r7, #10]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016946:	b29c      	uxth	r4, r3
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	88db      	ldrh	r3, [r3, #6]
 801694c:	335a      	adds	r3, #90	; 0x5a
 801694e:	b29b      	uxth	r3, r3
 8016950:	b21b      	sxth	r3, r3
 8016952:	4618      	mov	r0, r3
 8016954:	f00b fa34 	bl	8021dc0 <lv_trigo_sin>
 8016958:	4603      	mov	r3, r0
 801695a:	461a      	mov	r2, r3
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016962:	fb02 f303 	mul.w	r3, r2, r3
 8016966:	13db      	asrs	r3, r3, #15
 8016968:	b29b      	uxth	r3, r3
 801696a:	4423      	add	r3, r4
 801696c:	b29b      	uxth	r3, r3
 801696e:	b21b      	sxth	r3, r3
 8016970:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801697a:	b29c      	uxth	r4, r3
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	88db      	ldrh	r3, [r3, #6]
 8016980:	b21b      	sxth	r3, r3
 8016982:	4618      	mov	r0, r3
 8016984:	f00b fa1c 	bl	8021dc0 <lv_trigo_sin>
 8016988:	4603      	mov	r3, r0
 801698a:	461a      	mov	r2, r3
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016992:	4619      	mov	r1, r3
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801699a:	1acb      	subs	r3, r1, r3
 801699c:	fb02 f303 	mul.w	r3, r2, r3
 80169a0:	13db      	asrs	r3, r3, #15
 80169a2:	b29b      	uxth	r3, r3
 80169a4:	4423      	add	r3, r4
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	b21b      	sxth	r3, r3
 80169aa:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80169ac:	f107 0108 	add.w	r1, r7, #8
 80169b0:	f107 0308 	add.w	r3, r7, #8
 80169b4:	697a      	ldr	r2, [r7, #20]
 80169b6:	4618      	mov	r0, r3
 80169b8:	f009 fffc 	bl	80209b4 <_lv_area_intersect>
 80169bc:	4603      	mov	r3, r0
 80169be:	747b      	strb	r3, [r7, #17]
            if(ok) {
 80169c0:	7c7b      	ldrb	r3, [r7, #17]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d00d      	beq.n	80169e2 <draw_quarter_2+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	699b      	ldr	r3, [r3, #24]
 80169ca:	f107 0208 	add.w	r2, r7, #8
 80169ce:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	6998      	ldr	r0, [r3, #24]
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	6919      	ldr	r1, [r3, #16]
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	695b      	ldr	r3, [r3, #20]
 80169dc:	461a      	mov	r2, r3
 80169de:	f7fd fc7f 	bl	80142e0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 2) {
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	899b      	ldrh	r3, [r3, #12]
 80169e6:	2b02      	cmp	r3, #2
 80169e8:	f040 80dc 	bne.w	8016ba4 <draw_quarter_2+0x3f4>
            quarter_area.x1 = q->center->x - q->radius;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169f4:	b29a      	uxth	r2, r3
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	1ad3      	subs	r3, r2, r3
 8016a00:	b29b      	uxth	r3, r3
 8016a02:	b21b      	sxth	r3, r3
 8016a04:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y - 1;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a0e:	b29b      	uxth	r3, r3
 8016a10:	3b01      	subs	r3, #1
 8016a12:	b29b      	uxth	r3, r3
 8016a14:	b21b      	sxth	r3, r3
 8016a16:	81fb      	strh	r3, [r7, #14]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a20:	b29c      	uxth	r4, r3
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	891b      	ldrh	r3, [r3, #8]
 8016a26:	335a      	adds	r3, #90	; 0x5a
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	b21b      	sxth	r3, r3
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f00b f9c7 	bl	8021dc0 <lv_trigo_sin>
 8016a32:	4603      	mov	r3, r0
 8016a34:	461a      	mov	r2, r3
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a3c:	4619      	mov	r1, r3
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016a44:	1acb      	subs	r3, r1, r3
 8016a46:	fb02 f303 	mul.w	r3, r2, r3
 8016a4a:	13db      	asrs	r3, r3, #15
 8016a4c:	b29b      	uxth	r3, r3
 8016a4e:	4423      	add	r3, r4
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	b21b      	sxth	r3, r3
 8016a54:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a5e:	b29c      	uxth	r4, r3
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	891b      	ldrh	r3, [r3, #8]
 8016a64:	b21b      	sxth	r3, r3
 8016a66:	4618      	mov	r0, r3
 8016a68:	f00b f9aa 	bl	8021dc0 <lv_trigo_sin>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	461a      	mov	r2, r3
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a76:	fb02 f303 	mul.w	r3, r2, r3
 8016a7a:	13db      	asrs	r3, r3, #15
 8016a7c:	b29b      	uxth	r3, r3
 8016a7e:	4423      	add	r3, r4
 8016a80:	b29b      	uxth	r3, r3
 8016a82:	b21b      	sxth	r3, r3
 8016a84:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016a86:	f107 0108 	add.w	r1, r7, #8
 8016a8a:	f107 0308 	add.w	r3, r7, #8
 8016a8e:	697a      	ldr	r2, [r7, #20]
 8016a90:	4618      	mov	r0, r3
 8016a92:	f009 ff8f 	bl	80209b4 <_lv_area_intersect>
 8016a96:	4603      	mov	r3, r0
 8016a98:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8016a9a:	7c3b      	ldrb	r3, [r7, #16]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	f000 8081 	beq.w	8016ba4 <draw_quarter_2+0x3f4>
                q->draw_ctx->clip_area = &quarter_area;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	699b      	ldr	r3, [r3, #24]
 8016aa6:	f107 0208 	add.w	r2, r7, #8
 8016aaa:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	6998      	ldr	r0, [r3, #24]
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6919      	ldr	r1, [r3, #16]
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	695b      	ldr	r3, [r3, #20]
 8016ab8:	461a      	mov	r2, r3
 8016aba:	f7fd fc11 	bl	80142e0 <lv_draw_rect>
        if(q->end_quarter == 2) {
 8016abe:	e071      	b.n	8016ba4 <draw_quarter_2+0x3f4>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	895a      	ldrh	r2, [r3, #10]
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	899b      	ldrh	r3, [r3, #12]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d109      	bne.n	8016ae0 <draw_quarter_2+0x330>
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	895b      	ldrh	r3, [r3, #10]
 8016ad0:	2b02      	cmp	r3, #2
 8016ad2:	d005      	beq.n	8016ae0 <draw_quarter_2+0x330>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	891a      	ldrh	r2, [r3, #8]
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	88db      	ldrh	r3, [r3, #6]
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d317      	bcc.n	8016b10 <draw_quarter_2+0x360>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d103      	bne.n	8016af0 <draw_quarter_2+0x340>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	899b      	ldrh	r3, [r3, #12]
 8016aec:	2b03      	cmp	r3, #3
 8016aee:	d00f      	beq.n	8016b10 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d103      	bne.n	8016b00 <draw_quarter_2+0x350>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	899b      	ldrh	r3, [r3, #12]
 8016afc:	2b03      	cmp	r3, #3
 8016afe:	d007      	beq.n	8016b10 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8016b04:	2b01      	cmp	r3, #1
 8016b06:	d14e      	bne.n	8016ba6 <draw_quarter_2+0x3f6>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	899b      	ldrh	r3, [r3, #12]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d14a      	bne.n	8016ba6 <draw_quarter_2+0x3f6>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b18:	b29a      	uxth	r2, r3
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	1ad3      	subs	r3, r2, r3
 8016b24:	b29b      	uxth	r3, r3
 8016b26:	b21b      	sxth	r3, r3
 8016b28:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016b32:	b29a      	uxth	r2, r3
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b3a:	b29b      	uxth	r3, r3
 8016b3c:	1ad3      	subs	r3, r2, r3
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	b21b      	sxth	r3, r3
 8016b42:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b4c:	b29b      	uxth	r3, r3
 8016b4e:	3b01      	subs	r3, #1
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	b21b      	sxth	r3, r3
 8016b54:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	3b01      	subs	r3, #1
 8016b62:	b29b      	uxth	r3, r3
 8016b64:	b21b      	sxth	r3, r3
 8016b66:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016b68:	f107 0108 	add.w	r1, r7, #8
 8016b6c:	f107 0308 	add.w	r3, r7, #8
 8016b70:	697a      	ldr	r2, [r7, #20]
 8016b72:	4618      	mov	r0, r3
 8016b74:	f009 ff1e 	bl	80209b4 <_lv_area_intersect>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8016b7c:	7cbb      	ldrb	r3, [r7, #18]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d011      	beq.n	8016ba6 <draw_quarter_2+0x3f6>
            q->draw_ctx->clip_area = &quarter_area;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	699b      	ldr	r3, [r3, #24]
 8016b86:	f107 0208 	add.w	r2, r7, #8
 8016b8a:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	6998      	ldr	r0, [r3, #24]
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6919      	ldr	r1, [r3, #16]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	695b      	ldr	r3, [r3, #20]
 8016b98:	461a      	mov	r2, r3
 8016b9a:	f7fd fba1 	bl	80142e0 <lv_draw_rect>
 8016b9e:	e002      	b.n	8016ba6 <draw_quarter_2+0x3f6>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8016ba0:	bf00      	nop
 8016ba2:	e000      	b.n	8016ba6 <draw_quarter_2+0x3f6>
        if(q->end_quarter == 2) {
 8016ba4:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	699b      	ldr	r3, [r3, #24]
 8016baa:	697a      	ldr	r2, [r7, #20]
 8016bac:	609a      	str	r2, [r3, #8]
}
 8016bae:	bf00      	nop
 8016bb0:	371c      	adds	r7, #28
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd90      	pop	{r4, r7, pc}

08016bb6 <draw_quarter_3>:

static void draw_quarter_3(quarter_draw_dsc_t * q)
{
 8016bb6:	b590      	push	{r4, r7, lr}
 8016bb8:	b087      	sub	sp, #28
 8016bba:	af00      	add	r7, sp, #0
 8016bbc:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	699b      	ldr	r3, [r3, #24]
 8016bc2:	689b      	ldr	r3, [r3, #8]
 8016bc4:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	895b      	ldrh	r3, [r3, #10]
 8016bca:	2b03      	cmp	r3, #3
 8016bcc:	f040 8097 	bne.w	8016cfe <draw_quarter_3+0x148>
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	899b      	ldrh	r3, [r3, #12]
 8016bd4:	2b03      	cmp	r3, #3
 8016bd6:	f040 8092 	bne.w	8016cfe <draw_quarter_3+0x148>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	88da      	ldrh	r2, [r3, #6]
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	891b      	ldrh	r3, [r3, #8]
 8016be2:	429a      	cmp	r2, r3
 8016be4:	f080 808b 	bcs.w	8016cfe <draw_quarter_3+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bf0:	b29c      	uxth	r4, r3
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	88db      	ldrh	r3, [r3, #6]
 8016bf6:	335a      	adds	r3, #90	; 0x5a
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	b21b      	sxth	r3, r3
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f00b f8df 	bl	8021dc0 <lv_trigo_sin>
 8016c02:	4603      	mov	r3, r0
 8016c04:	461a      	mov	r2, r3
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016c14:	1acb      	subs	r3, r1, r3
 8016c16:	fb02 f303 	mul.w	r3, r2, r3
 8016c1a:	13db      	asrs	r3, r3, #15
 8016c1c:	b29b      	uxth	r3, r3
 8016c1e:	4423      	add	r3, r4
 8016c20:	b29b      	uxth	r3, r3
 8016c22:	b21b      	sxth	r3, r3
 8016c24:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c2e:	b29c      	uxth	r4, r3
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	88db      	ldrh	r3, [r3, #6]
 8016c34:	b21b      	sxth	r3, r3
 8016c36:	4618      	mov	r0, r3
 8016c38:	f00b f8c2 	bl	8021dc0 <lv_trigo_sin>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	461a      	mov	r2, r3
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c46:	fb02 f303 	mul.w	r3, r2, r3
 8016c4a:	13db      	asrs	r3, r3, #15
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	4423      	add	r3, r4
 8016c50:	b29b      	uxth	r3, r3
 8016c52:	b21b      	sxth	r3, r3
 8016c54:	817b      	strh	r3, [r7, #10]

        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c5e:	b29c      	uxth	r4, r3
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	891b      	ldrh	r3, [r3, #8]
 8016c64:	335a      	adds	r3, #90	; 0x5a
 8016c66:	b29b      	uxth	r3, r3
 8016c68:	b21b      	sxth	r3, r3
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f00b f8a8 	bl	8021dc0 <lv_trigo_sin>
 8016c70:	4603      	mov	r3, r0
 8016c72:	461a      	mov	r2, r3
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c7a:	fb02 f303 	mul.w	r3, r2, r3
 8016c7e:	13db      	asrs	r3, r3, #15
 8016c80:	b29b      	uxth	r3, r3
 8016c82:	4423      	add	r3, r4
 8016c84:	b29b      	uxth	r3, r3
 8016c86:	b21b      	sxth	r3, r3
 8016c88:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c92:	b29c      	uxth	r4, r3
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	891b      	ldrh	r3, [r3, #8]
 8016c98:	b21b      	sxth	r3, r3
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f00b f890 	bl	8021dc0 <lv_trigo_sin>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	461a      	mov	r2, r3
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016caa:	4619      	mov	r1, r3
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016cb2:	1acb      	subs	r3, r1, r3
 8016cb4:	fb02 f303 	mul.w	r3, r2, r3
 8016cb8:	13db      	asrs	r3, r3, #15
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	4423      	add	r3, r4
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	b21b      	sxth	r3, r3
 8016cc2:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016cc4:	f107 0108 	add.w	r1, r7, #8
 8016cc8:	f107 0308 	add.w	r3, r7, #8
 8016ccc:	697a      	ldr	r2, [r7, #20]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f009 fe70 	bl	80209b4 <_lv_area_intersect>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8016cd8:	7cfb      	ldrb	r3, [r7, #19]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	f000 815a 	beq.w	8016f94 <draw_quarter_3+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	699b      	ldr	r3, [r3, #24]
 8016ce4:	f107 0208 	add.w	r2, r7, #8
 8016ce8:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	6998      	ldr	r0, [r3, #24]
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	6919      	ldr	r1, [r3, #16]
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	695b      	ldr	r3, [r3, #20]
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	f7fd faf2 	bl	80142e0 <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8016cfc:	e14a      	b.n	8016f94 <draw_quarter_3+0x3de>
        }
    }
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	895b      	ldrh	r3, [r3, #10]
 8016d02:	2b03      	cmp	r3, #3
 8016d04:	d004      	beq.n	8016d10 <draw_quarter_3+0x15a>
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	899b      	ldrh	r3, [r3, #12]
 8016d0a:	2b03      	cmp	r3, #3
 8016d0c:	f040 80d6 	bne.w	8016ebc <draw_quarter_3+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 3) {
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	895b      	ldrh	r3, [r3, #10]
 8016d14:	2b03      	cmp	r3, #3
 8016d16:	d167      	bne.n	8016de8 <draw_quarter_3+0x232>
            quarter_area.x2 = q->center->x + q->radius;
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d20:	b29a      	uxth	r2, r3
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	4413      	add	r3, r2
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	b21b      	sxth	r3, r3
 8016d30:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y - 1;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	3b01      	subs	r3, #1
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	b21b      	sxth	r3, r3
 8016d42:	81fb      	strh	r3, [r7, #14]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d4c:	b29c      	uxth	r4, r3
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	88db      	ldrh	r3, [r3, #6]
 8016d52:	335a      	adds	r3, #90	; 0x5a
 8016d54:	b29b      	uxth	r3, r3
 8016d56:	b21b      	sxth	r3, r3
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f00b f831 	bl	8021dc0 <lv_trigo_sin>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	461a      	mov	r2, r3
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d68:	4619      	mov	r1, r3
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016d70:	1acb      	subs	r3, r1, r3
 8016d72:	fb02 f303 	mul.w	r3, r2, r3
 8016d76:	13db      	asrs	r3, r3, #15
 8016d78:	b29b      	uxth	r3, r3
 8016d7a:	4423      	add	r3, r4
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	b21b      	sxth	r3, r3
 8016d80:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d8a:	b29c      	uxth	r4, r3
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	88db      	ldrh	r3, [r3, #6]
 8016d90:	b21b      	sxth	r3, r3
 8016d92:	4618      	mov	r0, r3
 8016d94:	f00b f814 	bl	8021dc0 <lv_trigo_sin>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	461a      	mov	r2, r3
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016da2:	fb02 f303 	mul.w	r3, r2, r3
 8016da6:	13db      	asrs	r3, r3, #15
 8016da8:	b29b      	uxth	r3, r3
 8016daa:	4423      	add	r3, r4
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	b21b      	sxth	r3, r3
 8016db0:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016db2:	f107 0108 	add.w	r1, r7, #8
 8016db6:	f107 0308 	add.w	r3, r7, #8
 8016dba:	697a      	ldr	r2, [r7, #20]
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f009 fdf9 	bl	80209b4 <_lv_area_intersect>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8016dc6:	7c7b      	ldrb	r3, [r7, #17]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d00d      	beq.n	8016de8 <draw_quarter_3+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	699b      	ldr	r3, [r3, #24]
 8016dd0:	f107 0208 	add.w	r2, r7, #8
 8016dd4:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	6998      	ldr	r0, [r3, #24]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	6919      	ldr	r1, [r3, #16]
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	695b      	ldr	r3, [r3, #20]
 8016de2:	461a      	mov	r2, r3
 8016de4:	f7fd fa7c 	bl	80142e0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 3) {
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	899b      	ldrh	r3, [r3, #12]
 8016dec:	2b03      	cmp	r3, #3
 8016dee:	f040 80d3 	bne.w	8016f98 <draw_quarter_3+0x3e2>
            quarter_area.x1 = q->center->x;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dfa:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y - q->radius;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e04:	b29a      	uxth	r2, r3
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016e0c:	b29b      	uxth	r3, r3
 8016e0e:	1ad3      	subs	r3, r2, r3
 8016e10:	b29b      	uxth	r3, r3
 8016e12:	b21b      	sxth	r3, r3
 8016e14:	817b      	strh	r3, [r7, #10]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e1e:	b29c      	uxth	r4, r3
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	891b      	ldrh	r3, [r3, #8]
 8016e24:	335a      	adds	r3, #90	; 0x5a
 8016e26:	b29b      	uxth	r3, r3
 8016e28:	b21b      	sxth	r3, r3
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f00a ffc8 	bl	8021dc0 <lv_trigo_sin>
 8016e30:	4603      	mov	r3, r0
 8016e32:	461a      	mov	r2, r3
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016e3a:	fb02 f303 	mul.w	r3, r2, r3
 8016e3e:	13db      	asrs	r3, r3, #15
 8016e40:	b29b      	uxth	r3, r3
 8016e42:	4423      	add	r3, r4
 8016e44:	b29b      	uxth	r3, r3
 8016e46:	b21b      	sxth	r3, r3
 8016e48:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e52:	b29c      	uxth	r4, r3
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	891b      	ldrh	r3, [r3, #8]
 8016e58:	b21b      	sxth	r3, r3
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f00a ffb0 	bl	8021dc0 <lv_trigo_sin>
 8016e60:	4603      	mov	r3, r0
 8016e62:	461a      	mov	r2, r3
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016e6a:	4619      	mov	r1, r3
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016e72:	1acb      	subs	r3, r1, r3
 8016e74:	fb02 f303 	mul.w	r3, r2, r3
 8016e78:	13db      	asrs	r3, r3, #15
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	4423      	add	r3, r4
 8016e7e:	b29b      	uxth	r3, r3
 8016e80:	b21b      	sxth	r3, r3
 8016e82:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016e84:	f107 0108 	add.w	r1, r7, #8
 8016e88:	f107 0308 	add.w	r3, r7, #8
 8016e8c:	697a      	ldr	r2, [r7, #20]
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f009 fd90 	bl	80209b4 <_lv_area_intersect>
 8016e94:	4603      	mov	r3, r0
 8016e96:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8016e98:	7c3b      	ldrb	r3, [r7, #16]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d07c      	beq.n	8016f98 <draw_quarter_3+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	699b      	ldr	r3, [r3, #24]
 8016ea2:	f107 0208 	add.w	r2, r7, #8
 8016ea6:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6998      	ldr	r0, [r3, #24]
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6919      	ldr	r1, [r3, #16]
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	695b      	ldr	r3, [r3, #20]
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	f7fd fa13 	bl	80142e0 <lv_draw_rect>
        if(q->end_quarter == 3) {
 8016eba:	e06d      	b.n	8016f98 <draw_quarter_3+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	895a      	ldrh	r2, [r3, #10]
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	899b      	ldrh	r3, [r3, #12]
 8016ec4:	429a      	cmp	r2, r3
 8016ec6:	d109      	bne.n	8016edc <draw_quarter_3+0x326>
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	895b      	ldrh	r3, [r3, #10]
 8016ecc:	2b03      	cmp	r3, #3
 8016ece:	d005      	beq.n	8016edc <draw_quarter_3+0x326>
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	891a      	ldrh	r2, [r3, #8]
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	88db      	ldrh	r3, [r3, #6]
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d317      	bcc.n	8016f0c <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8016ee0:	2b02      	cmp	r3, #2
 8016ee2:	d103      	bne.n	8016eec <draw_quarter_3+0x336>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	899b      	ldrh	r3, [r3, #12]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d00f      	beq.n	8016f0c <draw_quarter_3+0x356>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8016ef0:	2b01      	cmp	r3, #1
 8016ef2:	d103      	bne.n	8016efc <draw_quarter_3+0x346>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	899b      	ldrh	r3, [r3, #12]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d007      	beq.n	8016f0c <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8016f00:	2b02      	cmp	r3, #2
 8016f02:	d14a      	bne.n	8016f9a <draw_quarter_3+0x3e4>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	899b      	ldrh	r3, [r3, #12]
 8016f08:	2b01      	cmp	r3, #1
 8016f0a:	d146      	bne.n	8016f9a <draw_quarter_3+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f14:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	1ad3      	subs	r3, r2, r3
 8016f2a:	b29b      	uxth	r3, r3
 8016f2c:	b21b      	sxth	r3, r3
 8016f2e:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f38:	b29a      	uxth	r2, r3
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f40:	b29b      	uxth	r3, r3
 8016f42:	4413      	add	r3, r2
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	b21b      	sxth	r3, r3
 8016f48:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016f52:	b29b      	uxth	r3, r3
 8016f54:	3b01      	subs	r3, #1
 8016f56:	b29b      	uxth	r3, r3
 8016f58:	b21b      	sxth	r3, r3
 8016f5a:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8016f5c:	f107 0108 	add.w	r1, r7, #8
 8016f60:	f107 0308 	add.w	r3, r7, #8
 8016f64:	697a      	ldr	r2, [r7, #20]
 8016f66:	4618      	mov	r0, r3
 8016f68:	f009 fd24 	bl	80209b4 <_lv_area_intersect>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8016f70:	7cbb      	ldrb	r3, [r7, #18]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d011      	beq.n	8016f9a <draw_quarter_3+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	699b      	ldr	r3, [r3, #24]
 8016f7a:	f107 0208 	add.w	r2, r7, #8
 8016f7e:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	6998      	ldr	r0, [r3, #24]
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6919      	ldr	r1, [r3, #16]
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	695b      	ldr	r3, [r3, #20]
 8016f8c:	461a      	mov	r2, r3
 8016f8e:	f7fd f9a7 	bl	80142e0 <lv_draw_rect>
 8016f92:	e002      	b.n	8016f9a <draw_quarter_3+0x3e4>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8016f94:	bf00      	nop
 8016f96:	e000      	b.n	8016f9a <draw_quarter_3+0x3e4>
        if(q->end_quarter == 3) {
 8016f98:	bf00      	nop
        }
    }

    q->draw_ctx->clip_area = clip_area_ori;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	699b      	ldr	r3, [r3, #24]
 8016f9e:	697a      	ldr	r2, [r7, #20]
 8016fa0:	609a      	str	r2, [r3, #8]
}
 8016fa2:	bf00      	nop
 8016fa4:	371c      	adds	r7, #28
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd90      	pop	{r4, r7, pc}

08016faa <get_rounded_area>:

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 8016faa:	b590      	push	{r4, r7, lr}
 8016fac:	b08b      	sub	sp, #44	; 0x2c
 8016fae:	af00      	add	r7, sp, #0
 8016fb0:	607b      	str	r3, [r7, #4]
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	81fb      	strh	r3, [r7, #14]
 8016fb6:	460b      	mov	r3, r1
 8016fb8:	81bb      	strh	r3, [r7, #12]
 8016fba:	4613      	mov	r3, r2
 8016fbc:	72fb      	strb	r3, [r7, #11]
    const uint8_t ps = 8;
 8016fbe:	2308      	movs	r3, #8
 8016fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t pa = 127;
 8016fc4:	237f      	movs	r3, #127	; 0x7f
 8016fc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    int32_t thick_half = thickness / 2;
 8016fca:	7afb      	ldrb	r3, [r7, #11]
 8016fcc:	085b      	lsrs	r3, r3, #1
 8016fce:	b2db      	uxtb	r3, r3
 8016fd0:	623b      	str	r3, [r7, #32]
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 8016fd2:	7afb      	ldrb	r3, [r7, #11]
 8016fd4:	f003 0301 	and.w	r3, r3, #1
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	bf0c      	ite	eq
 8016fdc:	2301      	moveq	r3, #1
 8016fde:	2300      	movne	r3, #0
 8016fe0:	b2db      	uxtb	r3, r3
 8016fe2:	77fb      	strb	r3, [r7, #31]

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8016fe4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8016fe8:	6a3b      	ldr	r3, [r7, #32]
 8016fea:	1ad4      	subs	r4, r2, r3
 8016fec:	89fb      	ldrh	r3, [r7, #14]
 8016fee:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	b21b      	sxth	r3, r3
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f00a fee2 	bl	8021dc0 <lv_trigo_sin>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	fb03 f204 	mul.w	r2, r3, r4
 8017002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017006:	f1c3 030f 	rsb	r3, r3, #15
 801700a:	fa42 f303 	asr.w	r3, r2, r3
 801700e:	61bb      	str	r3, [r7, #24]
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 8017010:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017014:	6a3b      	ldr	r3, [r7, #32]
 8017016:	1ad4      	subs	r4, r2, r3
 8017018:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801701c:	4618      	mov	r0, r3
 801701e:	f00a fecf 	bl	8021dc0 <lv_trigo_sin>
 8017022:	4603      	mov	r3, r0
 8017024:	fb03 f204 	mul.w	r2, r3, r4
 8017028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801702c:	f1c3 030f 	rsb	r3, r3, #15
 8017030:	fa42 f303 	asr.w	r3, r2, r3
 8017034:	617b      	str	r3, [r7, #20]

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 8017036:	69bb      	ldr	r3, [r7, #24]
 8017038:	2b00      	cmp	r3, #0
 801703a:	dd1f      	ble.n	801707c <get_rounded_area+0xd2>
        cir_x = (cir_x - pa) >> ps;
 801703c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017040:	69ba      	ldr	r2, [r7, #24]
 8017042:	1ad2      	subs	r2, r2, r3
 8017044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017048:	fa42 f303 	asr.w	r3, r2, r3
 801704c:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half + thick_corr;
 801704e:	69bb      	ldr	r3, [r7, #24]
 8017050:	b29a      	uxth	r2, r3
 8017052:	6a3b      	ldr	r3, [r7, #32]
 8017054:	b29b      	uxth	r3, r3
 8017056:	1ad3      	subs	r3, r2, r3
 8017058:	b29a      	uxth	r2, r3
 801705a:	7ffb      	ldrb	r3, [r7, #31]
 801705c:	b29b      	uxth	r3, r3
 801705e:	4413      	add	r3, r2
 8017060:	b29b      	uxth	r3, r3
 8017062:	b21a      	sxth	r2, r3
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half;
 8017068:	69bb      	ldr	r3, [r7, #24]
 801706a:	b29a      	uxth	r2, r3
 801706c:	6a3b      	ldr	r3, [r7, #32]
 801706e:	b29b      	uxth	r3, r3
 8017070:	4413      	add	r3, r2
 8017072:	b29b      	uxth	r3, r3
 8017074:	b21a      	sxth	r2, r3
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	809a      	strh	r2, [r3, #4]
 801707a:	e01e      	b.n	80170ba <get_rounded_area+0x110>
    }
    else {
        cir_x = (cir_x + pa) >> ps;
 801707c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017080:	69bb      	ldr	r3, [r7, #24]
 8017082:	441a      	add	r2, r3
 8017084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017088:	fa42 f303 	asr.w	r3, r2, r3
 801708c:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half;
 801708e:	69bb      	ldr	r3, [r7, #24]
 8017090:	b29a      	uxth	r2, r3
 8017092:	6a3b      	ldr	r3, [r7, #32]
 8017094:	b29b      	uxth	r3, r3
 8017096:	1ad3      	subs	r3, r2, r3
 8017098:	b29b      	uxth	r3, r3
 801709a:	b21a      	sxth	r2, r3
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 80170a0:	69bb      	ldr	r3, [r7, #24]
 80170a2:	b29a      	uxth	r2, r3
 80170a4:	6a3b      	ldr	r3, [r7, #32]
 80170a6:	b29b      	uxth	r3, r3
 80170a8:	4413      	add	r3, r2
 80170aa:	b29a      	uxth	r2, r3
 80170ac:	7ffb      	ldrb	r3, [r7, #31]
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	1ad3      	subs	r3, r2, r3
 80170b2:	b29b      	uxth	r3, r3
 80170b4:	b21a      	sxth	r2, r3
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	809a      	strh	r2, [r3, #4]
    }

    if(cir_y > 0) {
 80170ba:	697b      	ldr	r3, [r7, #20]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	dd1f      	ble.n	8017100 <get_rounded_area+0x156>
        cir_y = (cir_y - pa) >> ps;
 80170c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80170c4:	697a      	ldr	r2, [r7, #20]
 80170c6:	1ad2      	subs	r2, r2, r3
 80170c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170cc:	fa42 f303 	asr.w	r3, r2, r3
 80170d0:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half + thick_corr;
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	b29a      	uxth	r2, r3
 80170d6:	6a3b      	ldr	r3, [r7, #32]
 80170d8:	b29b      	uxth	r3, r3
 80170da:	1ad3      	subs	r3, r2, r3
 80170dc:	b29a      	uxth	r2, r3
 80170de:	7ffb      	ldrb	r3, [r7, #31]
 80170e0:	b29b      	uxth	r3, r3
 80170e2:	4413      	add	r3, r2
 80170e4:	b29b      	uxth	r3, r3
 80170e6:	b21a      	sxth	r2, r3
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half;
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	b29a      	uxth	r2, r3
 80170f0:	6a3b      	ldr	r3, [r7, #32]
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	4413      	add	r3, r2
 80170f6:	b29b      	uxth	r3, r3
 80170f8:	b21a      	sxth	r2, r3
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	80da      	strh	r2, [r3, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 80170fe:	e01e      	b.n	801713e <get_rounded_area+0x194>
        cir_y = (cir_y + pa) >> ps;
 8017100:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	441a      	add	r2, r3
 8017108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801710c:	fa42 f303 	asr.w	r3, r2, r3
 8017110:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half;
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	b29a      	uxth	r2, r3
 8017116:	6a3b      	ldr	r3, [r7, #32]
 8017118:	b29b      	uxth	r3, r3
 801711a:	1ad3      	subs	r3, r2, r3
 801711c:	b29b      	uxth	r3, r3
 801711e:	b21a      	sxth	r2, r3
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	b29a      	uxth	r2, r3
 8017128:	6a3b      	ldr	r3, [r7, #32]
 801712a:	b29b      	uxth	r3, r3
 801712c:	4413      	add	r3, r2
 801712e:	b29a      	uxth	r2, r3
 8017130:	7ffb      	ldrb	r3, [r7, #31]
 8017132:	b29b      	uxth	r3, r3
 8017134:	1ad3      	subs	r3, r2, r3
 8017136:	b29b      	uxth	r3, r3
 8017138:	b21a      	sxth	r2, r3
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	80da      	strh	r2, [r3, #6]
}
 801713e:	bf00      	nop
 8017140:	372c      	adds	r7, #44	; 0x2c
 8017142:	46bd      	mov	sp, r7
 8017144:	bd90      	pop	{r4, r7, pc}

08017146 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8017146:	b480      	push	{r7}
 8017148:	b085      	sub	sp, #20
 801714a:	af00      	add	r7, sp, #0
 801714c:	7138      	strb	r0, [r7, #4]
 801714e:	7039      	strb	r1, [r7, #0]
 8017150:	4613      	mov	r3, r2
 8017152:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 8017154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017158:	2b00      	cmp	r3, #0
 801715a:	da01      	bge.n	8017160 <lv_color_mix+0x1a>
 801715c:	793b      	ldrb	r3, [r7, #4]
 801715e:	e000      	b.n	8017162 <lv_color_mix+0x1c>
 8017160:	783b      	ldrb	r3, [r7, #0]
 8017162:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8017164:	7b3b      	ldrb	r3, [r7, #12]
}
 8017166:	4618      	mov	r0, r3
 8017168:	3714      	adds	r7, #20
 801716a:	46bd      	mov	sp, r7
 801716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017170:	4770      	bx	lr

08017172 <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 8017172:	b480      	push	{r7}
 8017174:	b083      	sub	sp, #12
 8017176:	af00      	add	r7, sp, #0
 8017178:	7138      	strb	r0, [r7, #4]
 801717a:	460b      	mov	r3, r1
 801717c:	603a      	str	r2, [r7, #0]
 801717e:	71fb      	strb	r3, [r7, #7]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
#else
    (void) mix;
    /*Pre-multiplication can't be used with 1 bpp*/
    out[0] = LV_COLOR_GET_R(c);
 8017180:	793b      	ldrb	r3, [r7, #4]
 8017182:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017186:	b2db      	uxtb	r3, r3
 8017188:	b29a      	uxth	r2, r3
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 801718e:	793b      	ldrb	r3, [r7, #4]
 8017190:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017194:	b2da      	uxtb	r2, r3
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	3302      	adds	r3, #2
 801719a:	b292      	uxth	r2, r2
 801719c:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 801719e:	793b      	ldrb	r3, [r7, #4]
 80171a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80171a4:	b2da      	uxtb	r2, r3
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	3304      	adds	r3, #4
 80171aa:	b292      	uxth	r2, r2
 80171ac:	801a      	strh	r2, [r3, #0]
#endif

}
 80171ae:	bf00      	nop
 80171b0:	370c      	adds	r7, #12
 80171b2:	46bd      	mov	sp, r7
 80171b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b8:	4770      	bx	lr

080171ba <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 80171ba:	b480      	push	{r7}
 80171bc:	b085      	sub	sp, #20
 80171be:	af00      	add	r7, sp, #0
 80171c0:	6078      	str	r0, [r7, #4]
 80171c2:	7039      	strb	r1, [r7, #0]
 80171c4:	4613      	mov	r3, r2
 80171c6:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    /*Restore color1*/
    lv_color_t c1;
    LV_COLOR_SET_R(c1, premult_c1[0]);
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	881b      	ldrh	r3, [r3, #0]
 80171cc:	f003 0301 	and.w	r3, r3, #1
 80171d0:	b2da      	uxtb	r2, r3
 80171d2:	7a3b      	ldrb	r3, [r7, #8]
 80171d4:	f362 0300 	bfi	r3, r2, #0, #1
 80171d8:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	3302      	adds	r3, #2
 80171de:	881b      	ldrh	r3, [r3, #0]
 80171e0:	f003 0301 	and.w	r3, r3, #1
 80171e4:	b2da      	uxtb	r2, r3
 80171e6:	7a3b      	ldrb	r3, [r7, #8]
 80171e8:	f362 0300 	bfi	r3, r2, #0, #1
 80171ec:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	3304      	adds	r3, #4
 80171f2:	881b      	ldrh	r3, [r3, #0]
 80171f4:	f003 0301 	and.w	r3, r3, #1
 80171f8:	b2da      	uxtb	r2, r3
 80171fa:	7a3b      	ldrb	r3, [r7, #8]
 80171fc:	f362 0300 	bfi	r3, r2, #0, #1
 8017200:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8017202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017206:	2b00      	cmp	r3, #0
 8017208:	da01      	bge.n	801720e <lv_color_mix_premult+0x54>
 801720a:	783b      	ldrb	r3, [r7, #0]
 801720c:	e000      	b.n	8017210 <lv_color_mix_premult+0x56>
 801720e:	7a3b      	ldrb	r3, [r7, #8]
 8017210:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8017212:	7b3b      	ldrb	r3, [r7, #12]
}
 8017214:	4618      	mov	r0, r3
 8017216:	3714      	adds	r7, #20
 8017218:	46bd      	mov	sp, r7
 801721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721e:	4770      	bx	lr

08017220 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8017220:	b480      	push	{r7}
 8017222:	b083      	sub	sp, #12
 8017224:	af00      	add	r7, sp, #0
 8017226:	4603      	mov	r3, r0
 8017228:	71fb      	strb	r3, [r7, #7]
 801722a:	460b      	mov	r3, r1
 801722c:	71bb      	strb	r3, [r7, #6]
 801722e:	4613      	mov	r3, r2
 8017230:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8017232:	797b      	ldrb	r3, [r7, #5]
 8017234:	09db      	lsrs	r3, r3, #7
 8017236:	b2da      	uxtb	r2, r3
 8017238:	79bb      	ldrb	r3, [r7, #6]
 801723a:	09db      	lsrs	r3, r3, #7
 801723c:	b2db      	uxtb	r3, r3
 801723e:	4313      	orrs	r3, r2
 8017240:	b2da      	uxtb	r2, r3
 8017242:	79fb      	ldrb	r3, [r7, #7]
 8017244:	09db      	lsrs	r3, r3, #7
 8017246:	b2db      	uxtb	r3, r3
 8017248:	4313      	orrs	r3, r2
 801724a:	b2db      	uxtb	r3, r3
}
 801724c:	4618      	mov	r0, r3
 801724e:	370c      	adds	r7, #12
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801725c:	2200      	movs	r2, #0
 801725e:	2100      	movs	r1, #0
 8017260:	2000      	movs	r0, #0
 8017262:	f7ff ffdd 	bl	8017220 <lv_color_make>
 8017266:	4603      	mov	r3, r0
}
 8017268:	4618      	mov	r0, r3
 801726a:	bd80      	pop	{r7, pc}

0801726c <lv_area_get_width>:
{
 801726c:	b480      	push	{r7}
 801726e:	b083      	sub	sp, #12
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801727a:	b29a      	uxth	r2, r3
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017282:	b29b      	uxth	r3, r3
 8017284:	1ad3      	subs	r3, r2, r3
 8017286:	b29b      	uxth	r3, r3
 8017288:	3301      	adds	r3, #1
 801728a:	b29b      	uxth	r3, r3
 801728c:	b21b      	sxth	r3, r3
}
 801728e:	4618      	mov	r0, r3
 8017290:	370c      	adds	r7, #12
 8017292:	46bd      	mov	sp, r7
 8017294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017298:	4770      	bx	lr

0801729a <lv_area_get_height>:
{
 801729a:	b480      	push	{r7}
 801729c:	b083      	sub	sp, #12
 801729e:	af00      	add	r7, sp, #0
 80172a0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80172a8:	b29a      	uxth	r2, r3
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	b29b      	uxth	r3, r3
 80172b6:	3301      	adds	r3, #1
 80172b8:	b29b      	uxth	r3, r3
 80172ba:	b21b      	sxth	r3, r3
}
 80172bc:	4618      	mov	r0, r3
 80172be:	370c      	adds	r7, #12
 80172c0:	46bd      	mov	sp, r7
 80172c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c6:	4770      	bx	lr

080172c8 <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b084      	sub	sp, #16
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
 80172d0:	6039      	str	r1, [r7, #0]
    /*Do not draw transparent things*/
    if(dsc->opa <= LV_OPA_MIN) return;
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	7e1b      	ldrb	r3, [r3, #24]
 80172d6:	2b02      	cmp	r3, #2
 80172d8:	d91c      	bls.n	8017314 <lv_draw_sw_blend+0x4c>

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	6819      	ldr	r1, [r3, #0]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	689a      	ldr	r2, [r3, #8]
 80172e2:	f107 0308 	add.w	r3, r7, #8
 80172e6:	4618      	mov	r0, r3
 80172e8:	f009 fb64 	bl	80209b4 <_lv_area_intersect>
 80172ec:	4603      	mov	r3, r0
 80172ee:	f083 0301 	eor.w	r3, r3, #1
 80172f2:	b2db      	uxtb	r3, r3
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d10f      	bne.n	8017318 <lv_draw_sw_blend+0x50>

    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d003      	beq.n	8017308 <lv_draw_sw_blend+0x40>
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	4798      	blx	r3

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801730c:	6839      	ldr	r1, [r7, #0]
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	4798      	blx	r3
 8017312:	e002      	b.n	801731a <lv_draw_sw_blend+0x52>
    if(dsc->opa <= LV_OPA_MIN) return;
 8017314:	bf00      	nop
 8017316:	e000      	b.n	801731a <lv_draw_sw_blend+0x52>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8017318:	bf00      	nop
}
 801731a:	3710      	adds	r7, #16
 801731c:	46bd      	mov	sp, r7
 801731e:	bd80      	pop	{r7, pc}

08017320 <lv_draw_sw_blend_basic>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8017320:	b590      	push	{r4, r7, lr}
 8017322:	b095      	sub	sp, #84	; 0x54
 8017324:	af06      	add	r7, sp, #24
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	6039      	str	r1, [r7, #0]
    lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 801732a:	683b      	ldr	r3, [r7, #0]
 801732c:	68db      	ldr	r3, [r3, #12]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d101      	bne.n	8017336 <lv_draw_sw_blend_basic+0x16>
 8017332:	2300      	movs	r3, #0
 8017334:	637b      	str	r3, [r7, #52]	; 0x34
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	68db      	ldr	r3, [r3, #12]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d004      	beq.n	8017348 <lv_draw_sw_blend_basic+0x28>
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	7c1b      	ldrb	r3, [r3, #16]
 8017342:	2b00      	cmp	r3, #0
 8017344:	f000 8191 	beq.w	801766a <lv_draw_sw_blend_basic+0x34a>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 8017348:	683b      	ldr	r3, [r7, #0]
 801734a:	7c1b      	ldrb	r3, [r3, #16]
 801734c:	2b01      	cmp	r3, #1
 801734e:	d102      	bne.n	8017356 <lv_draw_sw_blend_basic+0x36>
 8017350:	2300      	movs	r3, #0
 8017352:	637b      	str	r3, [r7, #52]	; 0x34
 8017354:	e002      	b.n	801735c <lv_draw_sw_blend_basic+0x3c>
    else mask = dsc->mask_buf;
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	68db      	ldr	r3, [r3, #12]
 801735a:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	685b      	ldr	r3, [r3, #4]
 8017360:	4618      	mov	r0, r3
 8017362:	f7ff ff83 	bl	801726c <lv_area_get_width>
 8017366:	4603      	mov	r3, r0
 8017368:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 801736a:	683b      	ldr	r3, [r7, #0]
 801736c:	6819      	ldr	r1, [r3, #0]
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	689a      	ldr	r2, [r3, #8]
 8017372:	f107 030c 	add.w	r3, r7, #12
 8017376:	4618      	mov	r0, r3
 8017378:	f009 fb1c 	bl	80209b4 <_lv_area_intersect>
 801737c:	4603      	mov	r3, r0
 801737e:	f083 0301 	eor.w	r3, r3, #1
 8017382:	b2db      	uxtb	r3, r3
 8017384:	2b00      	cmp	r3, #0
 8017386:	f040 8172 	bne.w	801766e <lv_draw_sw_blend_basic+0x34e>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 801738a:	f7f7 fac3 	bl	800e914 <_lv_refr_get_disp_refreshing>
 801738e:	61f8      	str	r0, [r7, #28]
    lv_color_t * dest_buf = draw_ctx->buf;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	633b      	str	r3, [r7, #48]	; 0x30
    if(disp->driver->set_px_cb == NULL) {
 8017396:	69fb      	ldr	r3, [r7, #28]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	69db      	ldr	r3, [r3, #28]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d143      	bne.n	8017428 <lv_draw_sw_blend_basic+0x108>
        if(disp->driver->screen_transp == 0) {
 80173a0:	69fb      	ldr	r3, [r7, #28]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	7c1b      	ldrb	r3, [r3, #16]
 80173a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d119      	bne.n	80173e4 <lv_draw_sw_blend_basic+0xc4>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 80173b0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80173b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80173b8:	4611      	mov	r1, r2
 80173ba:	687a      	ldr	r2, [r7, #4]
 80173bc:	6852      	ldr	r2, [r2, #4]
 80173be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80173c2:	1a8a      	subs	r2, r1, r2
 80173c4:	fb03 f202 	mul.w	r2, r3, r2
 80173c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80173cc:	4619      	mov	r1, r3
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173d6:	1acb      	subs	r3, r1, r3
 80173d8:	4413      	add	r3, r2
 80173da:	461a      	mov	r2, r3
 80173dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173de:	4413      	add	r3, r2
 80173e0:	633b      	str	r3, [r7, #48]	; 0x30
 80173e2:	e021      	b.n	8017428 <lv_draw_sw_blend_basic+0x108>
        }
        else {
            /*With LV_COLOR_DEPTH 16 it means ARGB8565 (3 bytes format)*/
            uint8_t * dest_buf8 = (uint8_t *) dest_buf;
 80173e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e6:	61bb      	str	r3, [r7, #24]
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80173e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80173ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80173f0:	4611      	mov	r1, r2
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	6852      	ldr	r2, [r2, #4]
 80173f6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80173fa:	1a8a      	subs	r2, r1, r2
 80173fc:	fb02 f303 	mul.w	r3, r2, r3
 8017400:	005b      	lsls	r3, r3, #1
 8017402:	461a      	mov	r2, r3
 8017404:	69bb      	ldr	r3, [r7, #24]
 8017406:	4413      	add	r3, r2
 8017408:	61bb      	str	r3, [r7, #24]
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801740a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801740e:	461a      	mov	r2, r3
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	685b      	ldr	r3, [r3, #4]
 8017414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017418:	1ad3      	subs	r3, r2, r3
 801741a:	005b      	lsls	r3, r3, #1
 801741c:	461a      	mov	r2, r3
 801741e:	69bb      	ldr	r3, [r7, #24]
 8017420:	4413      	add	r3, r2
 8017422:	61bb      	str	r3, [r7, #24]
            dest_buf = (lv_color_t *)dest_buf8;
 8017424:	69bb      	ldr	r3, [r7, #24]
 8017426:	633b      	str	r3, [r7, #48]	; 0x30
        }
    }

    const lv_color_t * src_buf = dsc->src_buf;
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	685b      	ldr	r3, [r3, #4]
 801742c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t src_stride;
    if(src_buf) {
 801742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017430:	2b00      	cmp	r3, #0
 8017432:	d020      	beq.n	8017476 <lv_draw_sw_blend_basic+0x156>
        src_stride = lv_area_get_width(dsc->blend_area);
 8017434:	683b      	ldr	r3, [r7, #0]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	4618      	mov	r0, r3
 801743a:	f7ff ff17 	bl	801726c <lv_area_get_width>
 801743e:	4603      	mov	r3, r0
 8017440:	857b      	strh	r3, [r7, #42]	; 0x2a
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 8017442:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017446:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801744a:	4611      	mov	r1, r2
 801744c:	683a      	ldr	r2, [r7, #0]
 801744e:	6812      	ldr	r2, [r2, #0]
 8017450:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017454:	1a8a      	subs	r2, r1, r2
 8017456:	fb03 f202 	mul.w	r2, r3, r2
 801745a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801745e:	4619      	mov	r1, r3
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017468:	1acb      	subs	r3, r1, r3
 801746a:	4413      	add	r3, r2
 801746c:	461a      	mov	r2, r3
 801746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017470:	4413      	add	r3, r2
 8017472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017474:	e001      	b.n	801747a <lv_draw_sw_blend_basic+0x15a>
    }
    else {
        src_stride = 0;
 8017476:	2300      	movs	r3, #0
 8017478:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    lv_coord_t mask_stride;
    if(mask) {
 801747a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801747c:	2b00      	cmp	r3, #0
 801747e:	d047      	beq.n	8017510 <lv_draw_sw_blend_basic+0x1f0>
        /*Round the values in the mask if anti-aliasing is disabled*/
        if(disp->driver->antialiasing == 0) {
 8017480:	69fb      	ldr	r3, [r7, #28]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	7c1b      	ldrb	r3, [r3, #16]
 8017486:	f003 0308 	and.w	r3, r3, #8
 801748a:	b2db      	uxtb	r3, r3
 801748c:	2b00      	cmp	r3, #0
 801748e:	d11e      	bne.n	80174ce <lv_draw_sw_blend_basic+0x1ae>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	695b      	ldr	r3, [r3, #20]
 8017494:	4618      	mov	r0, r3
 8017496:	f009 fa00 	bl	802089a <lv_area_get_size>
 801749a:	4603      	mov	r3, r0
 801749c:	617b      	str	r3, [r7, #20]
            int32_t i;
            for(i = 0; i < mask_size; i++) {
 801749e:	2300      	movs	r3, #0
 80174a0:	627b      	str	r3, [r7, #36]	; 0x24
 80174a2:	e010      	b.n	80174c6 <lv_draw_sw_blend_basic+0x1a6>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80174a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174a8:	4413      	add	r3, r2
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	2b80      	cmp	r3, #128	; 0x80
 80174ae:	d901      	bls.n	80174b4 <lv_draw_sw_blend_basic+0x194>
 80174b0:	21ff      	movs	r1, #255	; 0xff
 80174b2:	e000      	b.n	80174b6 <lv_draw_sw_blend_basic+0x196>
 80174b4:	2100      	movs	r1, #0
 80174b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174ba:	4413      	add	r3, r2
 80174bc:	460a      	mov	r2, r1
 80174be:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 80174c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c2:	3301      	adds	r3, #1
 80174c4:	627b      	str	r3, [r7, #36]	; 0x24
 80174c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174c8:	697b      	ldr	r3, [r7, #20]
 80174ca:	429a      	cmp	r2, r3
 80174cc:	dbea      	blt.n	80174a4 <lv_draw_sw_blend_basic+0x184>
            }
        }

        mask_stride = lv_area_get_width(dsc->mask_area);
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	695b      	ldr	r3, [r3, #20]
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7ff feca 	bl	801726c <lv_area_get_width>
 80174d8:	4603      	mov	r3, r0
 80174da:	853b      	strh	r3, [r7, #40]	; 0x28
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 80174dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80174e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80174e4:	4611      	mov	r1, r2
 80174e6:	683a      	ldr	r2, [r7, #0]
 80174e8:	6952      	ldr	r2, [r2, #20]
 80174ea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80174ee:	1a8a      	subs	r2, r1, r2
 80174f0:	fb03 f202 	mul.w	r2, r3, r2
 80174f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80174f8:	4619      	mov	r1, r3
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	695b      	ldr	r3, [r3, #20]
 80174fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017502:	1acb      	subs	r3, r1, r3
 8017504:	4413      	add	r3, r2
 8017506:	461a      	mov	r2, r3
 8017508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801750a:	4413      	add	r3, r2
 801750c:	637b      	str	r3, [r7, #52]	; 0x34
 801750e:	e001      	b.n	8017514 <lv_draw_sw_blend_basic+0x1f4>

    }
    else {
        mask_stride = 0;
 8017510:	2300      	movs	r3, #0
 8017512:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	685b      	ldr	r3, [r3, #4]
 8017518:	f9b3 3000 	ldrsh.w	r3, [r3]
 801751c:	b29b      	uxth	r3, r3
 801751e:	425b      	negs	r3, r3
 8017520:	b29b      	uxth	r3, r3
 8017522:	b219      	sxth	r1, r3
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	685b      	ldr	r3, [r3, #4]
 8017528:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801752c:	b29b      	uxth	r3, r3
 801752e:	425b      	negs	r3, r3
 8017530:	b29b      	uxth	r3, r3
 8017532:	b21a      	sxth	r2, r3
 8017534:	f107 030c 	add.w	r3, r7, #12
 8017538:	4618      	mov	r0, r3
 801753a:	f009 fa05 	bl	8020948 <lv_area_move>


    if(disp->driver->set_px_cb) {
 801753e:	69fb      	ldr	r3, [r7, #28]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	69db      	ldr	r3, [r3, #28]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d02c      	beq.n	80175a2 <lv_draw_sw_blend_basic+0x282>
        if(dsc->src_buf == NULL) {
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d113      	bne.n	8017578 <lv_draw_sw_blend_basic+0x258>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8017550:	683b      	ldr	r3, [r7, #0]
 8017552:	7e1a      	ldrb	r2, [r3, #24]
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 801755a:	f107 000c 	add.w	r0, r7, #12
 801755e:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8017562:	9102      	str	r1, [sp, #8]
 8017564:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017566:	9101      	str	r1, [sp, #4]
 8017568:	9200      	str	r2, [sp, #0]
 801756a:	7a1b      	ldrb	r3, [r3, #8]
 801756c:	4622      	mov	r2, r4
 801756e:	4601      	mov	r1, r0
 8017570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017572:	f000 f880 	bl	8017676 <fill_set_px>
 8017576:	e07b      	b.n	8017670 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	7e1b      	ldrb	r3, [r3, #24]
 801757c:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8017580:	f107 010c 	add.w	r1, r7, #12
 8017584:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8017588:	9203      	str	r2, [sp, #12]
 801758a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801758c:	9202      	str	r2, [sp, #8]
 801758e:	9301      	str	r3, [sp, #4]
 8017590:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017598:	4602      	mov	r2, r0
 801759a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801759c:	f000 fc02 	bl	8017da4 <map_set_px>
 80175a0:	e066      	b.n	8017670 <lv_draw_sw_blend_basic+0x350>
        else {
            map_argb(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
        }
    }
#endif
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	7e5b      	ldrb	r3, [r3, #25]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d12c      	bne.n	8017604 <lv_draw_sw_blend_basic+0x2e4>
        if(dsc->src_buf == NULL) {
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	685b      	ldr	r3, [r3, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d113      	bne.n	80175da <lv_draw_sw_blend_basic+0x2ba>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	7e1a      	ldrb	r2, [r3, #24]
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 80175bc:	f107 000c 	add.w	r0, r7, #12
 80175c0:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80175c4:	9102      	str	r1, [sp, #8]
 80175c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80175c8:	9101      	str	r1, [sp, #4]
 80175ca:	9200      	str	r2, [sp, #0]
 80175cc:	7a1b      	ldrb	r3, [r3, #8]
 80175ce:	4622      	mov	r2, r4
 80175d0:	4601      	mov	r1, r0
 80175d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175d4:	f000 f8ec 	bl	80177b0 <fill_normal>
 80175d8:	e04a      	b.n	8017670 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	7e1b      	ldrb	r3, [r3, #24]
 80175de:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 80175e2:	f107 010c 	add.w	r1, r7, #12
 80175e6:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80175ea:	9203      	str	r2, [sp, #12]
 80175ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80175ee:	9202      	str	r2, [sp, #8]
 80175f0:	9301      	str	r3, [sp, #4]
 80175f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80175f6:	9300      	str	r3, [sp, #0]
 80175f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175fa:	4602      	mov	r2, r0
 80175fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175fe:	f000 fc83 	bl	8017f08 <map_normal>
 8017602:	e035      	b.n	8017670 <lv_draw_sw_blend_basic+0x350>
        }
    }
    else {
#if LV_DRAW_COMPLEX
        if(dsc->src_buf == NULL) {
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d116      	bne.n	801763a <lv_draw_sw_blend_basic+0x31a>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	7e1a      	ldrb	r2, [r3, #24]
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	7e59      	ldrb	r1, [r3, #25]
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 801761a:	f107 000c 	add.w	r0, r7, #12
 801761e:	9103      	str	r1, [sp, #12]
 8017620:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8017624:	9102      	str	r1, [sp, #8]
 8017626:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017628:	9101      	str	r1, [sp, #4]
 801762a:	9200      	str	r2, [sp, #0]
 801762c:	7a1b      	ldrb	r3, [r3, #8]
 801762e:	4622      	mov	r2, r4
 8017630:	4601      	mov	r1, r0
 8017632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017634:	f000 fabc 	bl	8017bb0 <fill_blended>
 8017638:	e01a      	b.n	8017670 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	7e1b      	ldrb	r3, [r3, #24]
 801763e:	683a      	ldr	r2, [r7, #0]
 8017640:	7e52      	ldrb	r2, [r2, #25]
 8017642:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8017646:	f107 010c 	add.w	r1, r7, #12
 801764a:	9204      	str	r2, [sp, #16]
 801764c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8017650:	9203      	str	r2, [sp, #12]
 8017652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017654:	9202      	str	r2, [sp, #8]
 8017656:	9301      	str	r3, [sp, #4]
 8017658:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801765c:	9300      	str	r3, [sp, #0]
 801765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017660:	4602      	mov	r2, r0
 8017662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017664:	f000 fe78 	bl	8018358 <map_blended>
 8017668:	e002      	b.n	8017670 <lv_draw_sw_blend_basic+0x350>
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 801766a:	bf00      	nop
 801766c:	e000      	b.n	8017670 <lv_draw_sw_blend_basic+0x350>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 801766e:	bf00      	nop
        }
#endif
    }
}
 8017670:	373c      	adds	r7, #60	; 0x3c
 8017672:	46bd      	mov	sp, r7
 8017674:	bd90      	pop	{r4, r7, pc}

08017676 <fill_set_px>:
 *   STATIC FUNCTIONS
 **********************/

static void fill_set_px(lv_color_t * dest_buf, const lv_area_t * blend_area, lv_coord_t dest_stride,
                        lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stide)
{
 8017676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017678:	b08f      	sub	sp, #60	; 0x3c
 801767a:	af04      	add	r7, sp, #16
 801767c:	60f8      	str	r0, [r7, #12]
 801767e:	60b9      	str	r1, [r7, #8]
 8017680:	713b      	strb	r3, [r7, #4]
 8017682:	4613      	mov	r3, r2
 8017684:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8017686:	f7f7 f945 	bl	800e914 <_lv_refr_get_disp_refreshing>
 801768a:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 801768c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801768e:	2b00      	cmp	r3, #0
 8017690:	d134      	bne.n	80176fc <fill_set_px+0x86>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8017692:	68bb      	ldr	r3, [r7, #8]
 8017694:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017698:	623b      	str	r3, [r7, #32]
 801769a:	e027      	b.n	80176ec <fill_set_px+0x76>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176a2:	627b      	str	r3, [r7, #36]	; 0x24
 80176a4:	e018      	b.n	80176d8 <fill_set_px+0x62>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 80176a6:	69fb      	ldr	r3, [r7, #28]
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	69dc      	ldr	r4, [r3, #28]
 80176ac:	69fb      	ldr	r3, [r7, #28]
 80176ae:	6818      	ldr	r0, [r3, #0]
 80176b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176b2:	b21d      	sxth	r5, r3
 80176b4:	6a3b      	ldr	r3, [r7, #32]
 80176b6:	b21b      	sxth	r3, r3
 80176b8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80176bc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80176c0:	9202      	str	r2, [sp, #8]
 80176c2:	793a      	ldrb	r2, [r7, #4]
 80176c4:	f88d 2004 	strb.w	r2, [sp, #4]
 80176c8:	9300      	str	r3, [sp, #0]
 80176ca:	462b      	mov	r3, r5
 80176cc:	460a      	mov	r2, r1
 80176ce:	68f9      	ldr	r1, [r7, #12]
 80176d0:	47a0      	blx	r4
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80176d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176d4:	3301      	adds	r3, #1
 80176d6:	627b      	str	r3, [r7, #36]	; 0x24
 80176d8:	68bb      	ldr	r3, [r7, #8]
 80176da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80176de:	461a      	mov	r2, r3
 80176e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176e2:	4293      	cmp	r3, r2
 80176e4:	dddf      	ble.n	80176a6 <fill_set_px+0x30>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 80176e6:	6a3b      	ldr	r3, [r7, #32]
 80176e8:	3301      	adds	r3, #1
 80176ea:	623b      	str	r3, [r7, #32]
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80176f2:	461a      	mov	r2, r3
 80176f4:	6a3b      	ldr	r3, [r7, #32]
 80176f6:	4293      	cmp	r3, r2
 80176f8:	ddd0      	ble.n	801769c <fill_set_px+0x26>
                }
            }
            mask += mask_stide;
        }
    }
}
 80176fa:	e055      	b.n	80177a8 <fill_set_px+0x132>
        int32_t w = lv_area_get_width(blend_area);
 80176fc:	68b8      	ldr	r0, [r7, #8]
 80176fe:	f7ff fdb5 	bl	801726c <lv_area_get_width>
 8017702:	4603      	mov	r3, r0
 8017704:	61bb      	str	r3, [r7, #24]
        int32_t h = lv_area_get_height(blend_area);
 8017706:	68b8      	ldr	r0, [r7, #8]
 8017708:	f7ff fdc7 	bl	801729a <lv_area_get_height>
 801770c:	4603      	mov	r3, r0
 801770e:	617b      	str	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 8017710:	2300      	movs	r3, #0
 8017712:	623b      	str	r3, [r7, #32]
 8017714:	e044      	b.n	80177a0 <fill_set_px+0x12a>
            for(x = 0; x < w; x++) {
 8017716:	2300      	movs	r3, #0
 8017718:	627b      	str	r3, [r7, #36]	; 0x24
 801771a:	e035      	b.n	8017788 <fill_set_px+0x112>
                if(mask[x]) {
 801771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801771e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017720:	4413      	add	r3, r2
 8017722:	781b      	ldrb	r3, [r3, #0]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d02c      	beq.n	8017782 <fill_set_px+0x10c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8017728:	69fb      	ldr	r3, [r7, #28]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	69dc      	ldr	r4, [r3, #28]
 801772e:	69fb      	ldr	r3, [r7, #28]
 8017730:	681d      	ldr	r5, [r3, #0]
 8017732:	68bb      	ldr	r3, [r7, #8]
 8017734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017738:	b29a      	uxth	r2, r3
 801773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801773c:	b29b      	uxth	r3, r3
 801773e:	4413      	add	r3, r2
 8017740:	b29b      	uxth	r3, r3
 8017742:	b21e      	sxth	r6, r3
 8017744:	68bb      	ldr	r3, [r7, #8]
 8017746:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801774a:	b29a      	uxth	r2, r3
 801774c:	6a3b      	ldr	r3, [r7, #32]
 801774e:	b29b      	uxth	r3, r3
 8017750:	4413      	add	r3, r2
 8017752:	b29b      	uxth	r3, r3
 8017754:	b21b      	sxth	r3, r3
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8017756:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801775a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801775c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801775e:	4401      	add	r1, r0
 8017760:	7809      	ldrb	r1, [r1, #0]
 8017762:	fb01 f202 	mul.w	r2, r1, r2
 8017766:	0a12      	lsrs	r2, r2, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8017768:	b2d2      	uxtb	r2, r2
 801776a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801776e:	9202      	str	r2, [sp, #8]
 8017770:	793a      	ldrb	r2, [r7, #4]
 8017772:	f88d 2004 	strb.w	r2, [sp, #4]
 8017776:	9300      	str	r3, [sp, #0]
 8017778:	4633      	mov	r3, r6
 801777a:	460a      	mov	r2, r1
 801777c:	68f9      	ldr	r1, [r7, #12]
 801777e:	4628      	mov	r0, r5
 8017780:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8017782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017784:	3301      	adds	r3, #1
 8017786:	627b      	str	r3, [r7, #36]	; 0x24
 8017788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	429a      	cmp	r2, r3
 801778e:	dbc5      	blt.n	801771c <fill_set_px+0xa6>
            mask += mask_stide;
 8017790:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8017794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017796:	4413      	add	r3, r2
 8017798:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 801779a:	6a3b      	ldr	r3, [r7, #32]
 801779c:	3301      	adds	r3, #1
 801779e:	623b      	str	r3, [r7, #32]
 80177a0:	6a3a      	ldr	r2, [r7, #32]
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	429a      	cmp	r2, r3
 80177a6:	dbb6      	blt.n	8017716 <fill_set_px+0xa0>
}
 80177a8:	bf00      	nop
 80177aa:	372c      	adds	r7, #44	; 0x2c
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177b0 <fill_normal>:

LV_ATTRIBUTE_FAST_MEM static void fill_normal(lv_color_t * dest_buf, const lv_area_t * dest_area,
                                              lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b092      	sub	sp, #72	; 0x48
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	713b      	strb	r3, [r7, #4]
 80177bc:	4613      	mov	r3, r2
 80177be:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 80177c0:	68b8      	ldr	r0, [r7, #8]
 80177c2:	f7ff fd53 	bl	801726c <lv_area_get_width>
 80177c6:	4603      	mov	r3, r0
 80177c8:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h = lv_area_get_height(dest_area);
 80177ca:	68b8      	ldr	r0, [r7, #8]
 80177cc:	f7ff fd65 	bl	801729a <lv_area_get_height>
 80177d0:	4603      	mov	r3, r0
 80177d2:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t x;
    int32_t y;

    /*No mask*/
    if(mask == NULL) {
 80177d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d171      	bne.n	80178be <fill_normal+0x10e>
        if(opa >= LV_OPA_MAX) {
 80177da:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80177de:	2bfc      	cmp	r3, #252	; 0xfc
 80177e0:	d915      	bls.n	801780e <fill_normal+0x5e>
            for(y = 0; y < h; y++) {
 80177e2:	2300      	movs	r3, #0
 80177e4:	643b      	str	r3, [r7, #64]	; 0x40
 80177e6:	e00d      	b.n	8017804 <fill_normal+0x54>
                lv_color_fill(dest_buf, color, w);
 80177e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177ea:	461a      	mov	r2, r3
 80177ec:	7939      	ldrb	r1, [r7, #4]
 80177ee:	68f8      	ldr	r0, [r7, #12]
 80177f0:	f009 fdac 	bl	802134c <lv_color_fill>
                dest_buf += dest_stride;
 80177f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80177f8:	68fa      	ldr	r2, [r7, #12]
 80177fa:	4413      	add	r3, r2
 80177fc:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 80177fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017800:	3301      	adds	r3, #1
 8017802:	643b      	str	r3, [r7, #64]	; 0x40
 8017804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017808:	429a      	cmp	r2, r3
 801780a:	dbed      	blt.n	80177e8 <fill_normal+0x38>
                dest_buf += dest_stride;
                mask += (mask_stride - w);
            }
        }
    }
}
 801780c:	e1cc      	b.n	8017ba8 <fill_normal+0x3f8>
            lv_color_t last_dest_color = lv_color_black();
 801780e:	f7ff fd23 	bl	8017258 <lv_color_black>
 8017812:	4603      	mov	r3, r0
 8017814:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8017818:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801781c:	461a      	mov	r2, r3
 801781e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8017822:	7938      	ldrb	r0, [r7, #4]
 8017824:	f7ff fc8f 	bl	8017146 <lv_color_mix>
 8017828:	4603      	mov	r3, r0
 801782a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            lv_color_premult(color, opa, color_premult);
 801782e:	f107 021c 	add.w	r2, r7, #28
 8017832:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017836:	4619      	mov	r1, r3
 8017838:	7938      	ldrb	r0, [r7, #4]
 801783a:	f7ff fc9a 	bl	8017172 <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 801783e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017842:	43db      	mvns	r3, r3
 8017844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            for(y = 0; y < h; y++) {
 8017848:	2300      	movs	r3, #0
 801784a:	643b      	str	r3, [r7, #64]	; 0x40
 801784c:	e032      	b.n	80178b4 <fill_normal+0x104>
                for(x = 0; x < w; x++) {
 801784e:	2300      	movs	r3, #0
 8017850:	647b      	str	r3, [r7, #68]	; 0x44
 8017852:	e023      	b.n	801789c <fill_normal+0xec>
                    if(last_dest_color.full != dest_buf[x].full) {
 8017854:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801785a:	68f9      	ldr	r1, [r7, #12]
 801785c:	440b      	add	r3, r1
 801785e:	781b      	ldrb	r3, [r3, #0]
 8017860:	429a      	cmp	r2, r3
 8017862:	d012      	beq.n	801788a <fill_normal+0xda>
                        last_dest_color = dest_buf[x];
 8017864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017866:	68fa      	ldr	r2, [r7, #12]
 8017868:	4413      	add	r3, r2
 801786a:	781b      	ldrb	r3, [r3, #0]
 801786c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        last_res_color = lv_color_mix_premult(color_premult, dest_buf[x], opa_inv);
 8017870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017872:	68fa      	ldr	r2, [r7, #12]
 8017874:	4413      	add	r3, r2
 8017876:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801787a:	f107 001c 	add.w	r0, r7, #28
 801787e:	7819      	ldrb	r1, [r3, #0]
 8017880:	f7ff fc9b 	bl	80171ba <lv_color_mix_premult>
 8017884:	4603      	mov	r3, r0
 8017886:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    dest_buf[x] = last_res_color;
 801788a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801788c:	68fa      	ldr	r2, [r7, #12]
 801788e:	4413      	add	r3, r2
 8017890:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8017894:	701a      	strb	r2, [r3, #0]
                for(x = 0; x < w; x++) {
 8017896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017898:	3301      	adds	r3, #1
 801789a:	647b      	str	r3, [r7, #68]	; 0x44
 801789c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178a0:	429a      	cmp	r2, r3
 80178a2:	dbd7      	blt.n	8017854 <fill_normal+0xa4>
                dest_buf += dest_stride;
 80178a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80178a8:	68fa      	ldr	r2, [r7, #12]
 80178aa:	4413      	add	r3, r2
 80178ac:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 80178ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178b0:	3301      	adds	r3, #1
 80178b2:	643b      	str	r3, [r7, #64]	; 0x40
 80178b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80178b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178b8:	429a      	cmp	r2, r3
 80178ba:	dbc8      	blt.n	801784e <fill_normal+0x9e>
}
 80178bc:	e174      	b.n	8017ba8 <fill_normal+0x3f8>
        if(opa >= LV_OPA_MAX) {
 80178be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80178c2:	2bfc      	cmp	r3, #252	; 0xfc
 80178c4:	f240 80f7 	bls.w	8017ab6 <fill_normal+0x306>
            int32_t x_end4 = w - 4;
 80178c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ca:	3b04      	subs	r3, #4
 80178cc:	633b      	str	r3, [r7, #48]	; 0x30
            for(y = 0; y < h; y++) {
 80178ce:	2300      	movs	r3, #0
 80178d0:	643b      	str	r3, [r7, #64]	; 0x40
 80178d2:	e0ea      	b.n	8017aaa <fill_normal+0x2fa>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80178d4:	2300      	movs	r3, #0
 80178d6:	647b      	str	r3, [r7, #68]	; 0x44
 80178d8:	e01a      	b.n	8017910 <fill_normal+0x160>
                    FILL_NORMAL_MASK_PX(color)
 80178da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	2bff      	cmp	r3, #255	; 0xff
 80178e0:	d103      	bne.n	80178ea <fill_normal+0x13a>
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	793a      	ldrb	r2, [r7, #4]
 80178e6:	701a      	strb	r2, [r3, #0]
 80178e8:	e009      	b.n	80178fe <fill_normal+0x14e>
 80178ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178ec:	781a      	ldrb	r2, [r3, #0]
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	7819      	ldrb	r1, [r3, #0]
 80178f2:	7938      	ldrb	r0, [r7, #4]
 80178f4:	f7ff fc27 	bl	8017146 <lv_color_mix>
 80178f8:	4602      	mov	r2, r0
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	701a      	strb	r2, [r3, #0]
 80178fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017900:	3301      	adds	r3, #1
 8017902:	657b      	str	r3, [r7, #84]	; 0x54
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	3301      	adds	r3, #1
 8017908:	60fb      	str	r3, [r7, #12]
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 801790a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801790c:	3301      	adds	r3, #1
 801790e:	647b      	str	r3, [r7, #68]	; 0x44
 8017910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017914:	429a      	cmp	r2, r3
 8017916:	f280 8090 	bge.w	8017a3a <fill_normal+0x28a>
 801791a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801791c:	f003 0303 	and.w	r3, r3, #3
 8017920:	2b00      	cmp	r3, #0
 8017922:	d1da      	bne.n	80178da <fill_normal+0x12a>
                for(; x <= x_end4; x += 4) {
 8017924:	e089      	b.n	8017a3a <fill_normal+0x28a>
                    uint32_t mask32 = *((uint32_t *)mask);
 8017926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if(mask32 == 0xFFFFFFFF) {
 801792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801792e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017932:	d115      	bne.n	8017960 <fill_normal+0x1b0>
                        dest_buf[0] = color;
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	793a      	ldrb	r2, [r7, #4]
 8017938:	701a      	strb	r2, [r3, #0]
                        dest_buf[1] = color;
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	3301      	adds	r3, #1
 801793e:	793a      	ldrb	r2, [r7, #4]
 8017940:	701a      	strb	r2, [r3, #0]
                        dest_buf[2] = color;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	3302      	adds	r3, #2
 8017946:	793a      	ldrb	r2, [r7, #4]
 8017948:	701a      	strb	r2, [r3, #0]
                        dest_buf[3] = color;
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	3303      	adds	r3, #3
 801794e:	793a      	ldrb	r2, [r7, #4]
 8017950:	701a      	strb	r2, [r3, #0]
                        dest_buf += 4;
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	3304      	adds	r3, #4
 8017956:	60fb      	str	r3, [r7, #12]
                        mask += 4;
 8017958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801795a:	3304      	adds	r3, #4
 801795c:	657b      	str	r3, [r7, #84]	; 0x54
 801795e:	e069      	b.n	8017a34 <fill_normal+0x284>
                    else if(mask32) {
 8017960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017962:	2b00      	cmp	r3, #0
 8017964:	d060      	beq.n	8017a28 <fill_normal+0x278>
                        FILL_NORMAL_MASK_PX(color)
 8017966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017968:	781b      	ldrb	r3, [r3, #0]
 801796a:	2bff      	cmp	r3, #255	; 0xff
 801796c:	d103      	bne.n	8017976 <fill_normal+0x1c6>
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	793a      	ldrb	r2, [r7, #4]
 8017972:	701a      	strb	r2, [r3, #0]
 8017974:	e009      	b.n	801798a <fill_normal+0x1da>
 8017976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017978:	781a      	ldrb	r2, [r3, #0]
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	7819      	ldrb	r1, [r3, #0]
 801797e:	7938      	ldrb	r0, [r7, #4]
 8017980:	f7ff fbe1 	bl	8017146 <lv_color_mix>
 8017984:	4602      	mov	r2, r0
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	701a      	strb	r2, [r3, #0]
 801798a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801798c:	3301      	adds	r3, #1
 801798e:	657b      	str	r3, [r7, #84]	; 0x54
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	3301      	adds	r3, #1
 8017994:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8017996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	2bff      	cmp	r3, #255	; 0xff
 801799c:	d103      	bne.n	80179a6 <fill_normal+0x1f6>
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	793a      	ldrb	r2, [r7, #4]
 80179a2:	701a      	strb	r2, [r3, #0]
 80179a4:	e009      	b.n	80179ba <fill_normal+0x20a>
 80179a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179a8:	781a      	ldrb	r2, [r3, #0]
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	7819      	ldrb	r1, [r3, #0]
 80179ae:	7938      	ldrb	r0, [r7, #4]
 80179b0:	f7ff fbc9 	bl	8017146 <lv_color_mix>
 80179b4:	4602      	mov	r2, r0
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	701a      	strb	r2, [r3, #0]
 80179ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179bc:	3301      	adds	r3, #1
 80179be:	657b      	str	r3, [r7, #84]	; 0x54
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	3301      	adds	r3, #1
 80179c4:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 80179c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179c8:	781b      	ldrb	r3, [r3, #0]
 80179ca:	2bff      	cmp	r3, #255	; 0xff
 80179cc:	d103      	bne.n	80179d6 <fill_normal+0x226>
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	793a      	ldrb	r2, [r7, #4]
 80179d2:	701a      	strb	r2, [r3, #0]
 80179d4:	e009      	b.n	80179ea <fill_normal+0x23a>
 80179d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179d8:	781a      	ldrb	r2, [r3, #0]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	7819      	ldrb	r1, [r3, #0]
 80179de:	7938      	ldrb	r0, [r7, #4]
 80179e0:	f7ff fbb1 	bl	8017146 <lv_color_mix>
 80179e4:	4602      	mov	r2, r0
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	701a      	strb	r2, [r3, #0]
 80179ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179ec:	3301      	adds	r3, #1
 80179ee:	657b      	str	r3, [r7, #84]	; 0x54
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	3301      	adds	r3, #1
 80179f4:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 80179f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179f8:	781b      	ldrb	r3, [r3, #0]
 80179fa:	2bff      	cmp	r3, #255	; 0xff
 80179fc:	d103      	bne.n	8017a06 <fill_normal+0x256>
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	793a      	ldrb	r2, [r7, #4]
 8017a02:	701a      	strb	r2, [r3, #0]
 8017a04:	e009      	b.n	8017a1a <fill_normal+0x26a>
 8017a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a08:	781a      	ldrb	r2, [r3, #0]
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	7819      	ldrb	r1, [r3, #0]
 8017a0e:	7938      	ldrb	r0, [r7, #4]
 8017a10:	f7ff fb99 	bl	8017146 <lv_color_mix>
 8017a14:	4602      	mov	r2, r0
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	701a      	strb	r2, [r3, #0]
 8017a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a1c:	3301      	adds	r3, #1
 8017a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	3301      	adds	r3, #1
 8017a24:	60fb      	str	r3, [r7, #12]
 8017a26:	e005      	b.n	8017a34 <fill_normal+0x284>
                        mask += 4;
 8017a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a2a:	3304      	adds	r3, #4
 8017a2c:	657b      	str	r3, [r7, #84]	; 0x54
                        dest_buf += 4;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	3304      	adds	r3, #4
 8017a32:	60fb      	str	r3, [r7, #12]
                for(; x <= x_end4; x += 4) {
 8017a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a36:	3304      	adds	r3, #4
 8017a38:	647b      	str	r3, [r7, #68]	; 0x44
 8017a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	f77f af71 	ble.w	8017926 <fill_normal+0x176>
                for(; x < w ; x++) {
 8017a44:	e01a      	b.n	8017a7c <fill_normal+0x2cc>
                    FILL_NORMAL_MASK_PX(color)
 8017a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a48:	781b      	ldrb	r3, [r3, #0]
 8017a4a:	2bff      	cmp	r3, #255	; 0xff
 8017a4c:	d103      	bne.n	8017a56 <fill_normal+0x2a6>
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	793a      	ldrb	r2, [r7, #4]
 8017a52:	701a      	strb	r2, [r3, #0]
 8017a54:	e009      	b.n	8017a6a <fill_normal+0x2ba>
 8017a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a58:	781a      	ldrb	r2, [r3, #0]
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	7819      	ldrb	r1, [r3, #0]
 8017a5e:	7938      	ldrb	r0, [r7, #4]
 8017a60:	f7ff fb71 	bl	8017146 <lv_color_mix>
 8017a64:	4602      	mov	r2, r0
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	701a      	strb	r2, [r3, #0]
 8017a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a6c:	3301      	adds	r3, #1
 8017a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	3301      	adds	r3, #1
 8017a74:	60fb      	str	r3, [r7, #12]
                for(; x < w ; x++) {
 8017a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a78:	3301      	adds	r3, #1
 8017a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8017a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a80:	429a      	cmp	r2, r3
 8017a82:	dbe0      	blt.n	8017a46 <fill_normal+0x296>
                dest_buf += (dest_stride - w);
 8017a84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8017a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a8a:	1ad3      	subs	r3, r2, r3
 8017a8c:	461a      	mov	r2, r3
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	4413      	add	r3, r2
 8017a92:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8017a94:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8017a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a9a:	1ad3      	subs	r3, r2, r3
 8017a9c:	461a      	mov	r2, r3
 8017a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017aa0:	4413      	add	r3, r2
 8017aa2:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 8017aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8017aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017aae:	429a      	cmp	r2, r3
 8017ab0:	f6ff af10 	blt.w	80178d4 <fill_normal+0x124>
}
 8017ab4:	e078      	b.n	8017ba8 <fill_normal+0x3f8>
            lv_opa_t last_mask = LV_OPA_TRANSP;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            last_dest_color.full = dest_buf[0].full;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	763b      	strb	r3, [r7, #24]
            last_res_color.full = dest_buf[0].full;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	781b      	ldrb	r3, [r3, #0]
 8017ac6:	753b      	strb	r3, [r7, #20]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            for(y = 0; y < h; y++) {
 8017ace:	2300      	movs	r3, #0
 8017ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8017ad2:	e065      	b.n	8017ba0 <fill_normal+0x3f0>
                for(x = 0; x < w; x++) {
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8017ad8:	e04e      	b.n	8017b78 <fill_normal+0x3c8>
                    if(*mask) {
 8017ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017adc:	781b      	ldrb	r3, [r3, #0]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d044      	beq.n	8017b6c <fill_normal+0x3bc>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8017ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8017aea:	429a      	cmp	r2, r3
 8017aec:	d011      	beq.n	8017b12 <fill_normal+0x362>
 8017aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017af0:	781b      	ldrb	r3, [r3, #0]
 8017af2:	2bff      	cmp	r3, #255	; 0xff
 8017af4:	d009      	beq.n	8017b0a <fill_normal+0x35a>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 8017af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017af8:	781b      	ldrb	r3, [r3, #0]
 8017afa:	461a      	mov	r2, r3
 8017afc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017b00:	fb02 f303 	mul.w	r3, r2, r3
 8017b04:	0a1b      	lsrs	r3, r3, #8
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8017b06:	b2db      	uxtb	r3, r3
 8017b08:	e001      	b.n	8017b0e <fill_normal+0x35e>
 8017b0a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017b0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 8017b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b14:	781b      	ldrb	r3, [r3, #0]
 8017b16:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8017b1a:	429a      	cmp	r2, r3
 8017b1c:	d106      	bne.n	8017b2c <fill_normal+0x37c>
 8017b1e:	7e3a      	ldrb	r2, [r7, #24]
 8017b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b22:	68f9      	ldr	r1, [r7, #12]
 8017b24:	440b      	add	r3, r1
 8017b26:	781b      	ldrb	r3, [r3, #0]
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	d01a      	beq.n	8017b62 <fill_normal+0x3b2>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 8017b2c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8017b30:	2bff      	cmp	r3, #255	; 0xff
 8017b32:	d102      	bne.n	8017b3a <fill_normal+0x38a>
 8017b34:	793b      	ldrb	r3, [r7, #4]
 8017b36:	753b      	strb	r3, [r7, #20]
 8017b38:	e00a      	b.n	8017b50 <fill_normal+0x3a0>
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 8017b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b3c:	68fa      	ldr	r2, [r7, #12]
 8017b3e:	4413      	add	r3, r2
 8017b40:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8017b44:	7819      	ldrb	r1, [r3, #0]
 8017b46:	7938      	ldrb	r0, [r7, #4]
 8017b48:	f7ff fafd 	bl	8017146 <lv_color_mix>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	753b      	strb	r3, [r7, #20]
                            last_mask = *mask;
 8017b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                            last_dest_color.full = dest_buf[x].full;
 8017b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b5a:	68fa      	ldr	r2, [r7, #12]
 8017b5c:	4413      	add	r3, r2
 8017b5e:	781b      	ldrb	r3, [r3, #0]
 8017b60:	763b      	strb	r3, [r7, #24]
                        dest_buf[x] = last_res_color;
 8017b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b64:	68fa      	ldr	r2, [r7, #12]
 8017b66:	4413      	add	r3, r2
 8017b68:	7d3a      	ldrb	r2, [r7, #20]
 8017b6a:	701a      	strb	r2, [r3, #0]
                    mask++;
 8017b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b6e:	3301      	adds	r3, #1
 8017b70:	657b      	str	r3, [r7, #84]	; 0x54
                for(x = 0; x < w; x++) {
 8017b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b74:	3301      	adds	r3, #1
 8017b76:	647b      	str	r3, [r7, #68]	; 0x44
 8017b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	dbac      	blt.n	8017ada <fill_normal+0x32a>
                dest_buf += dest_stride;
 8017b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017b84:	68fa      	ldr	r2, [r7, #12]
 8017b86:	4413      	add	r3, r2
 8017b88:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8017b8a:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8017b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b90:	1ad3      	subs	r3, r2, r3
 8017b92:	461a      	mov	r2, r3
 8017b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b96:	4413      	add	r3, r2
 8017b98:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 8017b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b9c:	3301      	adds	r3, #1
 8017b9e:	643b      	str	r3, [r7, #64]	; 0x40
 8017ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	db95      	blt.n	8017ad4 <fill_normal+0x324>
}
 8017ba8:	bf00      	nop
 8017baa:	3748      	adds	r7, #72	; 0x48
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}

08017bb0 <fill_blended>:

#if LV_DRAW_COMPLEX
static void fill_blended(lv_color_t * dest_buf, const lv_area_t * dest_area,
                         lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride,
                         lv_blend_mode_t blend_mode)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b08e      	sub	sp, #56	; 0x38
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	60b9      	str	r1, [r7, #8]
 8017bba:	713b      	strb	r3, [r7, #4]
 8017bbc:	4613      	mov	r3, r2
 8017bbe:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 8017bc0:	68b8      	ldr	r0, [r7, #8]
 8017bc2:	f7ff fb53 	bl	801726c <lv_area_get_width>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 8017bca:	68b8      	ldr	r0, [r7, #8]
 8017bcc:	f7ff fb65 	bl	801729a <lv_area_get_height>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 8017bd4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8017bd8:	2b03      	cmp	r3, #3
 8017bda:	d00d      	beq.n	8017bf8 <fill_blended+0x48>
 8017bdc:	2b03      	cmp	r3, #3
 8017bde:	f300 80d6 	bgt.w	8017d8e <fill_blended+0x1de>
 8017be2:	2b01      	cmp	r3, #1
 8017be4:	d002      	beq.n	8017bec <fill_blended+0x3c>
 8017be6:	2b02      	cmp	r3, #2
 8017be8:	d003      	beq.n	8017bf2 <fill_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 8017bea:	e0d0      	b.n	8017d8e <fill_blended+0x1de>
            blend_fp = color_blend_true_color_additive;
 8017bec:	4b6a      	ldr	r3, [pc, #424]	; (8017d98 <fill_blended+0x1e8>)
 8017bee:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8017bf0:	e005      	b.n	8017bfe <fill_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 8017bf2:	4b6a      	ldr	r3, [pc, #424]	; (8017d9c <fill_blended+0x1ec>)
 8017bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8017bf6:	e002      	b.n	8017bfe <fill_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 8017bf8:	4b69      	ldr	r3, [pc, #420]	; (8017da0 <fill_blended+0x1f0>)
 8017bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8017bfc:	bf00      	nop
    }

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8017bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d141      	bne.n	8017c88 <fill_blended+0xd8>
        lv_color_t last_dest_color = dest_buf[0];
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	781b      	ldrb	r3, [r3, #0]
 8017c08:	773b      	strb	r3, [r7, #28]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 8017c0a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8017c0e:	68f9      	ldr	r1, [r7, #12]
 8017c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c12:	7809      	ldrb	r1, [r1, #0]
 8017c14:	7938      	ldrb	r0, [r7, #4]
 8017c16:	4798      	blx	r3
 8017c18:	4603      	mov	r3, r0
 8017c1a:	763b      	strb	r3, [r7, #24]
        for(y = 0; y < h; y++) {
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8017c20:	e02d      	b.n	8017c7e <fill_blended+0xce>
            for(x = 0; x < w; x++) {
 8017c22:	2300      	movs	r3, #0
 8017c24:	637b      	str	r3, [r7, #52]	; 0x34
 8017c26:	e01e      	b.n	8017c66 <fill_blended+0xb6>
                if(last_dest_color.full != dest_buf[x].full) {
 8017c28:	7f3a      	ldrb	r2, [r7, #28]
 8017c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c2c:	68f9      	ldr	r1, [r7, #12]
 8017c2e:	440b      	add	r3, r1
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	429a      	cmp	r2, r3
 8017c34:	d00f      	beq.n	8017c56 <fill_blended+0xa6>
                    last_dest_color = dest_buf[x];
 8017c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c38:	68fa      	ldr	r2, [r7, #12]
 8017c3a:	4413      	add	r3, r2
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	773b      	strb	r3, [r7, #28]
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 8017c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c42:	68fa      	ldr	r2, [r7, #12]
 8017c44:	18d1      	adds	r1, r2, r3
 8017c46:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8017c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c4c:	7809      	ldrb	r1, [r1, #0]
 8017c4e:	7938      	ldrb	r0, [r7, #4]
 8017c50:	4798      	blx	r3
 8017c52:	4603      	mov	r3, r0
 8017c54:	763b      	strb	r3, [r7, #24]
                }
                dest_buf[x] = last_res_color;
 8017c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c58:	68fa      	ldr	r2, [r7, #12]
 8017c5a:	4413      	add	r3, r2
 8017c5c:	7e3a      	ldrb	r2, [r7, #24]
 8017c5e:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 8017c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c62:	3301      	adds	r3, #1
 8017c64:	637b      	str	r3, [r7, #52]	; 0x34
 8017c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	dbdc      	blt.n	8017c28 <fill_blended+0x78>
            }
            dest_buf += dest_stride;
 8017c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017c72:	68fa      	ldr	r2, [r7, #12]
 8017c74:	4413      	add	r3, r2
 8017c76:	60fb      	str	r3, [r7, #12]
        for(y = 0; y < h; y++) {
 8017c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8017c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c80:	6a3b      	ldr	r3, [r7, #32]
 8017c82:	429a      	cmp	r2, r3
 8017c84:	dbcd      	blt.n	8017c22 <fill_blended+0x72>
 8017c86:	e083      	b.n	8017d90 <fill_blended+0x1e0>
    /*Masked*/
    else {
        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8017c88:	2300      	movs	r3, #0
 8017c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        last_dest_color = dest_buf[0];
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	753b      	strb	r3, [r7, #20]
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 8017c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c96:	781b      	ldrb	r3, [r3, #0]
 8017c98:	2bfc      	cmp	r3, #252	; 0xfc
 8017c9a:	d809      	bhi.n	8017cb0 <fill_blended+0x100>
 8017c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c9e:	781b      	ldrb	r3, [r3, #0]
 8017ca0:	461a      	mov	r2, r3
 8017ca2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017ca6:	fb02 f303 	mul.w	r3, r2, r3
 8017caa:	0a1b      	lsrs	r3, r3, #8
 8017cac:	b2db      	uxtb	r3, r3
 8017cae:	e001      	b.n	8017cb4 <fill_blended+0x104>
 8017cb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017cb4:	77fb      	strb	r3, [r7, #31]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8017cb6:	7ffa      	ldrb	r2, [r7, #31]
 8017cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cba:	7d39      	ldrb	r1, [r7, #20]
 8017cbc:	7938      	ldrb	r0, [r7, #4]
 8017cbe:	4798      	blx	r3
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	743b      	strb	r3, [r7, #16]

        for(y = 0; y < h; y++) {
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8017cc8:	e05c      	b.n	8017d84 <fill_blended+0x1d4>
            for(x = 0; x < w; x++) {
 8017cca:	2300      	movs	r3, #0
 8017ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8017cce:	e048      	b.n	8017d62 <fill_blended+0x1b2>
                if(mask[x] == 0) continue;
 8017cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017cd4:	4413      	add	r3, r2
 8017cd6:	781b      	ldrb	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d03e      	beq.n	8017d5a <fill_blended+0x1aa>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 8017cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ce0:	4413      	add	r3, r2
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	d106      	bne.n	8017cfa <fill_blended+0x14a>
 8017cec:	7d3a      	ldrb	r2, [r7, #20]
 8017cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cf0:	68f9      	ldr	r1, [r7, #12]
 8017cf2:	440b      	add	r3, r1
 8017cf4:	781b      	ldrb	r3, [r3, #0]
 8017cf6:	429a      	cmp	r2, r3
 8017cf8:	d029      	beq.n	8017d4e <fill_blended+0x19e>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 8017cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017cfe:	4413      	add	r3, r2
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	2bfc      	cmp	r3, #252	; 0xfc
 8017d04:	d80b      	bhi.n	8017d1e <fill_blended+0x16e>
 8017d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d0a:	4413      	add	r3, r2
 8017d0c:	781b      	ldrb	r3, [r3, #0]
 8017d0e:	461a      	mov	r2, r3
 8017d10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017d14:	fb02 f303 	mul.w	r3, r2, r3
 8017d18:	0a1b      	lsrs	r3, r3, #8
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	e001      	b.n	8017d22 <fill_blended+0x172>
 8017d1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017d22:	77fb      	strb	r3, [r7, #31]

                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8017d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d26:	68fa      	ldr	r2, [r7, #12]
 8017d28:	18d1      	adds	r1, r2, r3
 8017d2a:	7ffa      	ldrb	r2, [r7, #31]
 8017d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d2e:	7809      	ldrb	r1, [r1, #0]
 8017d30:	7938      	ldrb	r0, [r7, #4]
 8017d32:	4798      	blx	r3
 8017d34:	4603      	mov	r3, r0
 8017d36:	743b      	strb	r3, [r7, #16]
                    last_mask = mask[x];
 8017d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d3c:	4413      	add	r3, r2
 8017d3e:	781b      	ldrb	r3, [r3, #0]
 8017d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_dest_color.full = dest_buf[x].full;
 8017d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d46:	68fa      	ldr	r2, [r7, #12]
 8017d48:	4413      	add	r3, r2
 8017d4a:	781b      	ldrb	r3, [r3, #0]
 8017d4c:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 8017d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d50:	68fa      	ldr	r2, [r7, #12]
 8017d52:	4413      	add	r3, r2
 8017d54:	7c3a      	ldrb	r2, [r7, #16]
 8017d56:	701a      	strb	r2, [r3, #0]
 8017d58:	e000      	b.n	8017d5c <fill_blended+0x1ac>
                if(mask[x] == 0) continue;
 8017d5a:	bf00      	nop
            for(x = 0; x < w; x++) {
 8017d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d5e:	3301      	adds	r3, #1
 8017d60:	637b      	str	r3, [r7, #52]	; 0x34
 8017d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d66:	429a      	cmp	r2, r3
 8017d68:	dbb2      	blt.n	8017cd0 <fill_blended+0x120>
            }
            dest_buf += dest_stride;
 8017d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017d6e:	68fa      	ldr	r2, [r7, #12]
 8017d70:	4413      	add	r3, r2
 8017d72:	60fb      	str	r3, [r7, #12]
            mask += mask_stride;
 8017d74:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8017d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d7a:	4413      	add	r3, r2
 8017d7c:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 8017d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d80:	3301      	adds	r3, #1
 8017d82:	633b      	str	r3, [r7, #48]	; 0x30
 8017d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d86:	6a3b      	ldr	r3, [r7, #32]
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	db9e      	blt.n	8017cca <fill_blended+0x11a>
 8017d8c:	e000      	b.n	8017d90 <fill_blended+0x1e0>
            return;
 8017d8e:	bf00      	nop
        }
    }
}
 8017d90:	3738      	adds	r7, #56	; 0x38
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	0801857d 	.word	0x0801857d
 8017d9c:	080185cd 	.word	0x080185cd
 8017da0:	08018683 	.word	0x08018683

08017da4 <map_set_px>:
#endif

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8017da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017da6:	b08f      	sub	sp, #60	; 0x3c
 8017da8:	af04      	add	r7, sp, #16
 8017daa:	60f8      	str	r0, [r7, #12]
 8017dac:	60b9      	str	r1, [r7, #8]
 8017dae:	603b      	str	r3, [r7, #0]
 8017db0:	4613      	mov	r3, r2
 8017db2:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8017db4:	f7f6 fdae 	bl	800e914 <_lv_refr_get_disp_refreshing>
 8017db8:	61f8      	str	r0, [r7, #28]

    int32_t w = lv_area_get_width(dest_area);
 8017dba:	68b8      	ldr	r0, [r7, #8]
 8017dbc:	f7ff fa56 	bl	801726c <lv_area_get_width>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	61bb      	str	r3, [r7, #24]
    int32_t h = lv_area_get_height(dest_area);
 8017dc4:	68b8      	ldr	r0, [r7, #8]
 8017dc6:	f7ff fa68 	bl	801729a <lv_area_get_height>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8017dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d140      	bne.n	8017e56 <map_set_px+0xb2>
        for(y = 0; y < h; y++) {
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	623b      	str	r3, [r7, #32]
 8017dd8:	e038      	b.n	8017e4c <map_set_px+0xa8>
            for(x = 0; x < w; x++) {
 8017dda:	2300      	movs	r3, #0
 8017ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8017dde:	e029      	b.n	8017e34 <map_set_px+0x90>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	69dc      	ldr	r4, [r3, #28]
 8017de6:	69fb      	ldr	r3, [r7, #28]
 8017de8:	6818      	ldr	r0, [r3, #0]
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017df0:	b29a      	uxth	r2, r3
 8017df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	4413      	add	r3, r2
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	b21e      	sxth	r6, r3
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017e02:	b29a      	uxth	r2, r3
 8017e04:	6a3b      	ldr	r3, [r7, #32]
 8017e06:	b29b      	uxth	r3, r3
 8017e08:	4413      	add	r3, r2
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	b21b      	sxth	r3, r3
 8017e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e10:	6839      	ldr	r1, [r7, #0]
 8017e12:	440a      	add	r2, r1
 8017e14:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8017e18:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8017e1c:	9102      	str	r1, [sp, #8]
 8017e1e:	7812      	ldrb	r2, [r2, #0]
 8017e20:	f88d 2004 	strb.w	r2, [sp, #4]
 8017e24:	9300      	str	r3, [sp, #0]
 8017e26:	4633      	mov	r3, r6
 8017e28:	462a      	mov	r2, r5
 8017e2a:	68f9      	ldr	r1, [r7, #12]
 8017e2c:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8017e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e30:	3301      	adds	r3, #1
 8017e32:	627b      	str	r3, [r7, #36]	; 0x24
 8017e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e36:	69bb      	ldr	r3, [r7, #24]
 8017e38:	429a      	cmp	r2, r3
 8017e3a:	dbd1      	blt.n	8017de0 <map_set_px+0x3c>
                                        opa);
            }
            src_buf += src_stride;
 8017e3c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017e40:	683a      	ldr	r2, [r7, #0]
 8017e42:	4413      	add	r3, r2
 8017e44:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8017e46:	6a3b      	ldr	r3, [r7, #32]
 8017e48:	3301      	adds	r3, #1
 8017e4a:	623b      	str	r3, [r7, #32]
 8017e4c:	6a3a      	ldr	r2, [r7, #32]
 8017e4e:	697b      	ldr	r3, [r7, #20]
 8017e50:	429a      	cmp	r2, r3
 8017e52:	dbc2      	blt.n	8017dda <map_set_px+0x36>
            }
            mask += mask_stride;
            src_buf += src_stride;
        }
    }
}
 8017e54:	e054      	b.n	8017f00 <map_set_px+0x15c>
        for(y = 0; y < h; y++) {
 8017e56:	2300      	movs	r3, #0
 8017e58:	623b      	str	r3, [r7, #32]
 8017e5a:	e04d      	b.n	8017ef8 <map_set_px+0x154>
            for(x = 0; x < w; x++) {
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8017e60:	e039      	b.n	8017ed6 <map_set_px+0x132>
                if(mask[x]) {
 8017e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017e66:	4413      	add	r3, r2
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d030      	beq.n	8017ed0 <map_set_px+0x12c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017e6e:	69fb      	ldr	r3, [r7, #28]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	69dc      	ldr	r4, [r3, #28]
 8017e74:	69fb      	ldr	r3, [r7, #28]
 8017e76:	681e      	ldr	r6, [r3, #0]
 8017e78:	68bb      	ldr	r3, [r7, #8]
 8017e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017e7e:	b29a      	uxth	r2, r3
 8017e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	4413      	add	r3, r2
 8017e86:	b29b      	uxth	r3, r3
 8017e88:	fa0f fc83 	sxth.w	ip, r3
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017e92:	b29a      	uxth	r2, r3
 8017e94:	6a3b      	ldr	r3, [r7, #32]
 8017e96:	b29b      	uxth	r3, r3
 8017e98:	4413      	add	r3, r2
 8017e9a:	b29b      	uxth	r3, r3
 8017e9c:	b21b      	sxth	r3, r3
 8017e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ea0:	6839      	ldr	r1, [r7, #0]
 8017ea2:	440a      	add	r2, r1
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8017ea4:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8017ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017eaa:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8017eac:	4428      	add	r0, r5
 8017eae:	7800      	ldrb	r0, [r0, #0]
 8017eb0:	fb00 f101 	mul.w	r1, r0, r1
 8017eb4:	0a09      	lsrs	r1, r1, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8017eb6:	b2c9      	uxtb	r1, r1
 8017eb8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8017ebc:	9102      	str	r1, [sp, #8]
 8017ebe:	7812      	ldrb	r2, [r2, #0]
 8017ec0:	f88d 2004 	strb.w	r2, [sp, #4]
 8017ec4:	9300      	str	r3, [sp, #0]
 8017ec6:	4663      	mov	r3, ip
 8017ec8:	4602      	mov	r2, r0
 8017eca:	68f9      	ldr	r1, [r7, #12]
 8017ecc:	4630      	mov	r0, r6
 8017ece:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8017ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed2:	3301      	adds	r3, #1
 8017ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8017ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ed8:	69bb      	ldr	r3, [r7, #24]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	dbc1      	blt.n	8017e62 <map_set_px+0xbe>
            mask += mask_stride;
 8017ede:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8017ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017ee4:	4413      	add	r3, r2
 8017ee6:	64bb      	str	r3, [r7, #72]	; 0x48
            src_buf += src_stride;
 8017ee8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017eec:	683a      	ldr	r2, [r7, #0]
 8017eee:	4413      	add	r3, r2
 8017ef0:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8017ef2:	6a3b      	ldr	r3, [r7, #32]
 8017ef4:	3301      	adds	r3, #1
 8017ef6:	623b      	str	r3, [r7, #32]
 8017ef8:	6a3a      	ldr	r2, [r7, #32]
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	dbad      	blt.n	8017e5c <map_set_px+0xb8>
}
 8017f00:	bf00      	nop
 8017f02:	372c      	adds	r7, #44	; 0x2c
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f08 <map_normal>:

LV_ATTRIBUTE_FAST_MEM static void map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8017f08:	b5b0      	push	{r4, r5, r7, lr}
 8017f0a:	b08c      	sub	sp, #48	; 0x30
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	60b9      	str	r1, [r7, #8]
 8017f12:	603b      	str	r3, [r7, #0]
 8017f14:	4613      	mov	r3, r2
 8017f16:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 8017f18:	68b8      	ldr	r0, [r7, #8]
 8017f1a:	f7ff f9a7 	bl	801726c <lv_area_get_width>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	61fb      	str	r3, [r7, #28]
    int32_t h = lv_area_get_height(dest_area);
 8017f22:	68b8      	ldr	r0, [r7, #8]
 8017f24:	f7ff f9b9 	bl	801729a <lv_area_get_height>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	61bb      	str	r3, [r7, #24]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8017f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d14e      	bne.n	8017fd0 <map_normal+0xc8>
        if(opa >= LV_OPA_MAX) {
 8017f32:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017f36:	2bfc      	cmp	r3, #252	; 0xfc
 8017f38:	d91a      	bls.n	8017f70 <map_normal+0x68>
            for(y = 0; y < h; y++) {
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017f3e:	e012      	b.n	8017f66 <map_normal+0x5e>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8017f40:	69fb      	ldr	r3, [r7, #28]
 8017f42:	461a      	mov	r2, r3
 8017f44:	6839      	ldr	r1, [r7, #0]
 8017f46:	68f8      	ldr	r0, [r7, #12]
 8017f48:	f00a f9e2 	bl	8022310 <lv_memcpy>
                dest_buf += dest_stride;
 8017f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017f50:	68fa      	ldr	r2, [r7, #12]
 8017f52:	4413      	add	r3, r2
 8017f54:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8017f56:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017f5a:	683a      	ldr	r2, [r7, #0]
 8017f5c:	4413      	add	r3, r2
 8017f5e:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8017f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f62:	3301      	adds	r3, #1
 8017f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8017f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f68:	69bb      	ldr	r3, [r7, #24]
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	dbe8      	blt.n	8017f40 <map_normal+0x38>
                src_buf += src_stride;
                mask += mask_stride;
            }
        }
    }
}
 8017f6e:	e1ee      	b.n	801834e <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8017f70:	2300      	movs	r3, #0
 8017f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8017f74:	e027      	b.n	8017fc6 <map_normal+0xbe>
                for(x = 0; x < w; x++) {
 8017f76:	2300      	movs	r3, #0
 8017f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017f7a:	e013      	b.n	8017fa4 <map_normal+0x9c>
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 8017f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f7e:	683a      	ldr	r2, [r7, #0]
 8017f80:	4413      	add	r3, r2
 8017f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f84:	68f9      	ldr	r1, [r7, #12]
 8017f86:	4411      	add	r1, r2
 8017f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f8a:	68f8      	ldr	r0, [r7, #12]
 8017f8c:	1884      	adds	r4, r0, r2
 8017f8e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8017f92:	7809      	ldrb	r1, [r1, #0]
 8017f94:	7818      	ldrb	r0, [r3, #0]
 8017f96:	f7ff f8d6 	bl	8017146 <lv_color_mix>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 8017f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fa6:	69fb      	ldr	r3, [r7, #28]
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	dbe7      	blt.n	8017f7c <map_normal+0x74>
                dest_buf += dest_stride;
 8017fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017fb0:	68fa      	ldr	r2, [r7, #12]
 8017fb2:	4413      	add	r3, r2
 8017fb4:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8017fb6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8017fba:	683a      	ldr	r2, [r7, #0]
 8017fbc:	4413      	add	r3, r2
 8017fbe:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8017fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc2:	3301      	adds	r3, #1
 8017fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fc8:	69bb      	ldr	r3, [r7, #24]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	dbd3      	blt.n	8017f76 <map_normal+0x6e>
}
 8017fce:	e1be      	b.n	801834e <map_normal+0x446>
        if(opa > LV_OPA_MAX) {
 8017fd0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017fd4:	2bfd      	cmp	r3, #253	; 0xfd
 8017fd6:	f240 816d 	bls.w	80182b4 <map_normal+0x3ac>
            int32_t x_end4 = w - 4;
 8017fda:	69fb      	ldr	r3, [r7, #28]
 8017fdc:	3b04      	subs	r3, #4
 8017fde:	613b      	str	r3, [r7, #16]
            for(y = 0; y < h; y++) {
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fe4:	e160      	b.n	80182a8 <map_normal+0x3a0>
                const lv_opa_t * mask_tmp_x = mask;
 8017fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fe8:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8017fea:	2300      	movs	r3, #0
 8017fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fee:	e028      	b.n	8018042 <map_normal+0x13a>
                    MAP_NORMAL_MASK_PX(x)
 8017ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff2:	781b      	ldrb	r3, [r3, #0]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d01e      	beq.n	8018036 <map_normal+0x12e>
 8017ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ffa:	781b      	ldrb	r3, [r3, #0]
 8017ffc:	2bff      	cmp	r3, #255	; 0xff
 8017ffe:	d108      	bne.n	8018012 <map_normal+0x10a>
 8018000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018002:	683a      	ldr	r2, [r7, #0]
 8018004:	441a      	add	r2, r3
 8018006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018008:	68f9      	ldr	r1, [r7, #12]
 801800a:	440b      	add	r3, r1
 801800c:	7812      	ldrb	r2, [r2, #0]
 801800e:	701a      	strb	r2, [r3, #0]
 8018010:	e011      	b.n	8018036 <map_normal+0x12e>
 8018012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018014:	683a      	ldr	r2, [r7, #0]
 8018016:	4413      	add	r3, r2
 8018018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801801a:	68f9      	ldr	r1, [r7, #12]
 801801c:	4411      	add	r1, r2
 801801e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018020:	7815      	ldrb	r5, [r2, #0]
 8018022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018024:	68f8      	ldr	r0, [r7, #12]
 8018026:	1884      	adds	r4, r0, r2
 8018028:	462a      	mov	r2, r5
 801802a:	7809      	ldrb	r1, [r1, #0]
 801802c:	7818      	ldrb	r0, [r3, #0]
 801802e:	f7ff f88a 	bl	8017146 <lv_color_mix>
 8018032:	4603      	mov	r3, r0
 8018034:	7023      	strb	r3, [r4, #0]
 8018036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018038:	3301      	adds	r3, #1
 801803a:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 801803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803e:	3301      	adds	r3, #1
 8018040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018044:	69fb      	ldr	r3, [r7, #28]
 8018046:	429a      	cmp	r2, r3
 8018048:	da04      	bge.n	8018054 <map_normal+0x14c>
 801804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801804c:	f003 0303 	and.w	r3, r3, #3
 8018050:	2b00      	cmp	r3, #0
 8018052:	d1cd      	bne.n	8017ff0 <map_normal+0xe8>
                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
 8018054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018056:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8018058:	e0df      	b.n	801821a <map_normal+0x312>
                    if(*mask32) {
 801805a:	6a3b      	ldr	r3, [r7, #32]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	2b00      	cmp	r3, #0
 8018060:	f000 80d5 	beq.w	801820e <map_normal+0x306>
                        if((*mask32) == 0xFFFFFFFF) {
 8018064:	6a3b      	ldr	r3, [r7, #32]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801806c:	d126      	bne.n	80180bc <map_normal+0x1b4>
                            dest_buf[x] = src_buf[x];
 801806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018070:	683a      	ldr	r2, [r7, #0]
 8018072:	441a      	add	r2, r3
 8018074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018076:	68f9      	ldr	r1, [r7, #12]
 8018078:	440b      	add	r3, r1
 801807a:	7812      	ldrb	r2, [r2, #0]
 801807c:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 801807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018080:	3301      	adds	r3, #1
 8018082:	683a      	ldr	r2, [r7, #0]
 8018084:	441a      	add	r2, r3
 8018086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018088:	3301      	adds	r3, #1
 801808a:	68f9      	ldr	r1, [r7, #12]
 801808c:	440b      	add	r3, r1
 801808e:	7812      	ldrb	r2, [r2, #0]
 8018090:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 2] = src_buf[x + 2];
 8018092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018094:	3302      	adds	r3, #2
 8018096:	683a      	ldr	r2, [r7, #0]
 8018098:	441a      	add	r2, r3
 801809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801809c:	3302      	adds	r3, #2
 801809e:	68f9      	ldr	r1, [r7, #12]
 80180a0:	440b      	add	r3, r1
 80180a2:	7812      	ldrb	r2, [r2, #0]
 80180a4:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 3] = src_buf[x + 3];
 80180a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a8:	3303      	adds	r3, #3
 80180aa:	683a      	ldr	r2, [r7, #0]
 80180ac:	441a      	add	r2, r3
 80180ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b0:	3303      	adds	r3, #3
 80180b2:	68f9      	ldr	r1, [r7, #12]
 80180b4:	440b      	add	r3, r1
 80180b6:	7812      	ldrb	r2, [r2, #0]
 80180b8:	701a      	strb	r2, [r3, #0]
 80180ba:	e0a8      	b.n	801820e <map_normal+0x306>
                            mask_tmp_x = (const lv_opa_t *)mask32;
 80180bc:	6a3b      	ldr	r3, [r7, #32]
 80180be:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x)
 80180c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c2:	781b      	ldrb	r3, [r3, #0]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d01e      	beq.n	8018106 <map_normal+0x1fe>
 80180c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ca:	781b      	ldrb	r3, [r3, #0]
 80180cc:	2bff      	cmp	r3, #255	; 0xff
 80180ce:	d108      	bne.n	80180e2 <map_normal+0x1da>
 80180d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180d2:	683a      	ldr	r2, [r7, #0]
 80180d4:	441a      	add	r2, r3
 80180d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180d8:	68f9      	ldr	r1, [r7, #12]
 80180da:	440b      	add	r3, r1
 80180dc:	7812      	ldrb	r2, [r2, #0]
 80180de:	701a      	strb	r2, [r3, #0]
 80180e0:	e011      	b.n	8018106 <map_normal+0x1fe>
 80180e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e4:	683a      	ldr	r2, [r7, #0]
 80180e6:	4413      	add	r3, r2
 80180e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180ea:	68f9      	ldr	r1, [r7, #12]
 80180ec:	4411      	add	r1, r2
 80180ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180f0:	7815      	ldrb	r5, [r2, #0]
 80180f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180f4:	68f8      	ldr	r0, [r7, #12]
 80180f6:	1884      	adds	r4, r0, r2
 80180f8:	462a      	mov	r2, r5
 80180fa:	7809      	ldrb	r1, [r1, #0]
 80180fc:	7818      	ldrb	r0, [r3, #0]
 80180fe:	f7ff f822 	bl	8017146 <lv_color_mix>
 8018102:	4603      	mov	r3, r0
 8018104:	7023      	strb	r3, [r4, #0]
 8018106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018108:	3301      	adds	r3, #1
 801810a:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 1)
 801810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d023      	beq.n	801815c <map_normal+0x254>
 8018114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018116:	781b      	ldrb	r3, [r3, #0]
 8018118:	2bff      	cmp	r3, #255	; 0xff
 801811a:	d10a      	bne.n	8018132 <map_normal+0x22a>
 801811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811e:	3301      	adds	r3, #1
 8018120:	683a      	ldr	r2, [r7, #0]
 8018122:	441a      	add	r2, r3
 8018124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018126:	3301      	adds	r3, #1
 8018128:	68f9      	ldr	r1, [r7, #12]
 801812a:	440b      	add	r3, r1
 801812c:	7812      	ldrb	r2, [r2, #0]
 801812e:	701a      	strb	r2, [r3, #0]
 8018130:	e014      	b.n	801815c <map_normal+0x254>
 8018132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018134:	3301      	adds	r3, #1
 8018136:	683a      	ldr	r2, [r7, #0]
 8018138:	4413      	add	r3, r2
 801813a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801813c:	3201      	adds	r2, #1
 801813e:	68f9      	ldr	r1, [r7, #12]
 8018140:	4411      	add	r1, r2
 8018142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018144:	7815      	ldrb	r5, [r2, #0]
 8018146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018148:	3201      	adds	r2, #1
 801814a:	68f8      	ldr	r0, [r7, #12]
 801814c:	1884      	adds	r4, r0, r2
 801814e:	462a      	mov	r2, r5
 8018150:	7809      	ldrb	r1, [r1, #0]
 8018152:	7818      	ldrb	r0, [r3, #0]
 8018154:	f7fe fff7 	bl	8017146 <lv_color_mix>
 8018158:	4603      	mov	r3, r0
 801815a:	7023      	strb	r3, [r4, #0]
 801815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801815e:	3301      	adds	r3, #1
 8018160:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 2)
 8018162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018164:	781b      	ldrb	r3, [r3, #0]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d023      	beq.n	80181b2 <map_normal+0x2aa>
 801816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	2bff      	cmp	r3, #255	; 0xff
 8018170:	d10a      	bne.n	8018188 <map_normal+0x280>
 8018172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018174:	3302      	adds	r3, #2
 8018176:	683a      	ldr	r2, [r7, #0]
 8018178:	441a      	add	r2, r3
 801817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801817c:	3302      	adds	r3, #2
 801817e:	68f9      	ldr	r1, [r7, #12]
 8018180:	440b      	add	r3, r1
 8018182:	7812      	ldrb	r2, [r2, #0]
 8018184:	701a      	strb	r2, [r3, #0]
 8018186:	e014      	b.n	80181b2 <map_normal+0x2aa>
 8018188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801818a:	3302      	adds	r3, #2
 801818c:	683a      	ldr	r2, [r7, #0]
 801818e:	4413      	add	r3, r2
 8018190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018192:	3202      	adds	r2, #2
 8018194:	68f9      	ldr	r1, [r7, #12]
 8018196:	4411      	add	r1, r2
 8018198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801819a:	7815      	ldrb	r5, [r2, #0]
 801819c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801819e:	3202      	adds	r2, #2
 80181a0:	68f8      	ldr	r0, [r7, #12]
 80181a2:	1884      	adds	r4, r0, r2
 80181a4:	462a      	mov	r2, r5
 80181a6:	7809      	ldrb	r1, [r1, #0]
 80181a8:	7818      	ldrb	r0, [r3, #0]
 80181aa:	f7fe ffcc 	bl	8017146 <lv_color_mix>
 80181ae:	4603      	mov	r3, r0
 80181b0:	7023      	strb	r3, [r4, #0]
 80181b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b4:	3301      	adds	r3, #1
 80181b6:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 3)
 80181b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ba:	781b      	ldrb	r3, [r3, #0]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d023      	beq.n	8018208 <map_normal+0x300>
 80181c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c2:	781b      	ldrb	r3, [r3, #0]
 80181c4:	2bff      	cmp	r3, #255	; 0xff
 80181c6:	d10a      	bne.n	80181de <map_normal+0x2d6>
 80181c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ca:	3303      	adds	r3, #3
 80181cc:	683a      	ldr	r2, [r7, #0]
 80181ce:	441a      	add	r2, r3
 80181d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181d2:	3303      	adds	r3, #3
 80181d4:	68f9      	ldr	r1, [r7, #12]
 80181d6:	440b      	add	r3, r1
 80181d8:	7812      	ldrb	r2, [r2, #0]
 80181da:	701a      	strb	r2, [r3, #0]
 80181dc:	e014      	b.n	8018208 <map_normal+0x300>
 80181de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181e0:	3303      	adds	r3, #3
 80181e2:	683a      	ldr	r2, [r7, #0]
 80181e4:	4413      	add	r3, r2
 80181e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181e8:	3203      	adds	r2, #3
 80181ea:	68f9      	ldr	r1, [r7, #12]
 80181ec:	4411      	add	r1, r2
 80181ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181f0:	7815      	ldrb	r5, [r2, #0]
 80181f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181f4:	3203      	adds	r2, #3
 80181f6:	68f8      	ldr	r0, [r7, #12]
 80181f8:	1884      	adds	r4, r0, r2
 80181fa:	462a      	mov	r2, r5
 80181fc:	7809      	ldrb	r1, [r1, #0]
 80181fe:	7818      	ldrb	r0, [r3, #0]
 8018200:	f7fe ffa1 	bl	8017146 <lv_color_mix>
 8018204:	4603      	mov	r3, r0
 8018206:	7023      	strb	r3, [r4, #0]
 8018208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820a:	3301      	adds	r3, #1
 801820c:	627b      	str	r3, [r7, #36]	; 0x24
                    mask32++;
 801820e:	6a3b      	ldr	r3, [r7, #32]
 8018210:	3304      	adds	r3, #4
 8018212:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8018214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018216:	3304      	adds	r3, #4
 8018218:	62fb      	str	r3, [r7, #44]	; 0x2c
 801821a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	429a      	cmp	r2, r3
 8018220:	f6ff af1b 	blt.w	801805a <map_normal+0x152>
                mask_tmp_x = (const lv_opa_t *)mask32;
 8018224:	6a3b      	ldr	r3, [r7, #32]
 8018226:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 8018228:	e028      	b.n	801827c <map_normal+0x374>
                    MAP_NORMAL_MASK_PX(x)
 801822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822c:	781b      	ldrb	r3, [r3, #0]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d01e      	beq.n	8018270 <map_normal+0x368>
 8018232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018234:	781b      	ldrb	r3, [r3, #0]
 8018236:	2bff      	cmp	r3, #255	; 0xff
 8018238:	d108      	bne.n	801824c <map_normal+0x344>
 801823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801823c:	683a      	ldr	r2, [r7, #0]
 801823e:	441a      	add	r2, r3
 8018240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018242:	68f9      	ldr	r1, [r7, #12]
 8018244:	440b      	add	r3, r1
 8018246:	7812      	ldrb	r2, [r2, #0]
 8018248:	701a      	strb	r2, [r3, #0]
 801824a:	e011      	b.n	8018270 <map_normal+0x368>
 801824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801824e:	683a      	ldr	r2, [r7, #0]
 8018250:	4413      	add	r3, r2
 8018252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018254:	68f9      	ldr	r1, [r7, #12]
 8018256:	4411      	add	r1, r2
 8018258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801825a:	7815      	ldrb	r5, [r2, #0]
 801825c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801825e:	68f8      	ldr	r0, [r7, #12]
 8018260:	1884      	adds	r4, r0, r2
 8018262:	462a      	mov	r2, r5
 8018264:	7809      	ldrb	r1, [r1, #0]
 8018266:	7818      	ldrb	r0, [r3, #0]
 8018268:	f7fe ff6d 	bl	8017146 <lv_color_mix>
 801826c:	4603      	mov	r3, r0
 801826e:	7023      	strb	r3, [r4, #0]
 8018270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018272:	3301      	adds	r3, #1
 8018274:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 8018276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018278:	3301      	adds	r3, #1
 801827a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801827c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801827e:	69fb      	ldr	r3, [r7, #28]
 8018280:	429a      	cmp	r2, r3
 8018282:	dbd2      	blt.n	801822a <map_normal+0x322>
                dest_buf += dest_stride;
 8018284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018288:	68fa      	ldr	r2, [r7, #12]
 801828a:	4413      	add	r3, r2
 801828c:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 801828e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8018292:	683a      	ldr	r2, [r7, #0]
 8018294:	4413      	add	r3, r2
 8018296:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 8018298:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801829c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801829e:	4413      	add	r3, r2
 80182a0:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 80182a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182a4:	3301      	adds	r3, #1
 80182a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80182a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80182aa:	69bb      	ldr	r3, [r7, #24]
 80182ac:	429a      	cmp	r2, r3
 80182ae:	f6ff ae9a 	blt.w	8017fe6 <map_normal+0xde>
}
 80182b2:	e04c      	b.n	801834e <map_normal+0x446>
            for(y = 0; y < h; y++) {
 80182b4:	2300      	movs	r3, #0
 80182b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80182b8:	e045      	b.n	8018346 <map_normal+0x43e>
                for(x = 0; x < w; x++) {
 80182ba:	2300      	movs	r3, #0
 80182bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182be:	e02c      	b.n	801831a <map_normal+0x412>
                    if(mask[x]) {
 80182c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80182c4:	4413      	add	r3, r2
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d023      	beq.n	8018314 <map_normal+0x40c>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 80182cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80182d0:	4413      	add	r3, r2
 80182d2:	781b      	ldrb	r3, [r3, #0]
 80182d4:	2bfc      	cmp	r3, #252	; 0xfc
 80182d6:	d80a      	bhi.n	80182ee <map_normal+0x3e6>
 80182d8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80182dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80182e0:	440a      	add	r2, r1
 80182e2:	7812      	ldrb	r2, [r2, #0]
 80182e4:	fb02 f303 	mul.w	r3, r2, r3
 80182e8:	121b      	asrs	r3, r3, #8
 80182ea:	b2db      	uxtb	r3, r3
 80182ec:	e001      	b.n	80182f2 <map_normal+0x3ea>
 80182ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80182f2:	75fb      	strb	r3, [r7, #23]
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 80182f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182f6:	683a      	ldr	r2, [r7, #0]
 80182f8:	4413      	add	r3, r2
 80182fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182fc:	68f9      	ldr	r1, [r7, #12]
 80182fe:	4411      	add	r1, r2
 8018300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018302:	68f8      	ldr	r0, [r7, #12]
 8018304:	1884      	adds	r4, r0, r2
 8018306:	7dfa      	ldrb	r2, [r7, #23]
 8018308:	7809      	ldrb	r1, [r1, #0]
 801830a:	7818      	ldrb	r0, [r3, #0]
 801830c:	f7fe ff1b 	bl	8017146 <lv_color_mix>
 8018310:	4603      	mov	r3, r0
 8018312:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 8018314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018316:	3301      	adds	r3, #1
 8018318:	62fb      	str	r3, [r7, #44]	; 0x2c
 801831a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801831c:	69fb      	ldr	r3, [r7, #28]
 801831e:	429a      	cmp	r2, r3
 8018320:	dbce      	blt.n	80182c0 <map_normal+0x3b8>
                dest_buf += dest_stride;
 8018322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018326:	68fa      	ldr	r2, [r7, #12]
 8018328:	4413      	add	r3, r2
 801832a:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 801832c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8018330:	683a      	ldr	r2, [r7, #0]
 8018332:	4413      	add	r3, r2
 8018334:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 8018336:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801833a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801833c:	4413      	add	r3, r2
 801833e:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 8018340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018342:	3301      	adds	r3, #1
 8018344:	62bb      	str	r3, [r7, #40]	; 0x28
 8018346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018348:	69bb      	ldr	r3, [r7, #24]
 801834a:	429a      	cmp	r2, r3
 801834c:	dbb5      	blt.n	80182ba <map_normal+0x3b2>
}
 801834e:	bf00      	nop
 8018350:	3730      	adds	r7, #48	; 0x30
 8018352:	46bd      	mov	sp, r7
 8018354:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018358 <map_blended>:

#if LV_DRAW_COMPLEX
static void map_blended(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                        const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa,
                        const lv_opa_t * mask, lv_coord_t mask_stride, lv_blend_mode_t blend_mode)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b08e      	sub	sp, #56	; 0x38
 801835c:	af00      	add	r7, sp, #0
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	60b9      	str	r1, [r7, #8]
 8018362:	603b      	str	r3, [r7, #0]
 8018364:	4613      	mov	r3, r2
 8018366:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 8018368:	68b8      	ldr	r0, [r7, #8]
 801836a:	f7fe ff7f 	bl	801726c <lv_area_get_width>
 801836e:	4603      	mov	r3, r0
 8018370:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 8018372:	68b8      	ldr	r0, [r7, #8]
 8018374:	f7fe ff91 	bl	801729a <lv_area_get_height>
 8018378:	4603      	mov	r3, r0
 801837a:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 801837c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8018380:	2b03      	cmp	r3, #3
 8018382:	d00d      	beq.n	80183a0 <map_blended+0x48>
 8018384:	2b03      	cmp	r3, #3
 8018386:	f300 80ef 	bgt.w	8018568 <map_blended+0x210>
 801838a:	2b01      	cmp	r3, #1
 801838c:	d002      	beq.n	8018394 <map_blended+0x3c>
 801838e:	2b02      	cmp	r3, #2
 8018390:	d003      	beq.n	801839a <map_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 8018392:	e0e9      	b.n	8018568 <map_blended+0x210>
            blend_fp = color_blend_true_color_additive;
 8018394:	4b76      	ldr	r3, [pc, #472]	; (8018570 <map_blended+0x218>)
 8018396:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8018398:	e005      	b.n	80183a6 <map_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 801839a:	4b76      	ldr	r3, [pc, #472]	; (8018574 <map_blended+0x21c>)
 801839c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801839e:	e002      	b.n	80183a6 <map_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 80183a0:	4b75      	ldr	r3, [pc, #468]	; (8018578 <map_blended+0x220>)
 80183a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80183a4:	bf00      	nop
    }

    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 80183a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d151      	bne.n	8018450 <map_blended+0xf8>
        last_dest_color = dest_buf[0];
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	781b      	ldrb	r3, [r3, #0]
 80183b0:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	763b      	strb	r3, [r7, #24]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 80183b8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80183bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183be:	7f39      	ldrb	r1, [r7, #28]
 80183c0:	7e38      	ldrb	r0, [r7, #24]
 80183c2:	4798      	blx	r3
 80183c4:	4603      	mov	r3, r0
 80183c6:	753b      	strb	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 80183c8:	2300      	movs	r3, #0
 80183ca:	633b      	str	r3, [r7, #48]	; 0x30
 80183cc:	e03b      	b.n	8018446 <map_blended+0xee>
            for(x = 0; x < w; x++) {
 80183ce:	2300      	movs	r3, #0
 80183d0:	637b      	str	r3, [r7, #52]	; 0x34
 80183d2:	e027      	b.n	8018424 <map_blended+0xcc>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 80183d4:	7e3a      	ldrb	r2, [r7, #24]
 80183d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183d8:	6839      	ldr	r1, [r7, #0]
 80183da:	440b      	add	r3, r1
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	429a      	cmp	r2, r3
 80183e0:	d106      	bne.n	80183f0 <map_blended+0x98>
 80183e2:	7f3a      	ldrb	r2, [r7, #28]
 80183e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183e6:	68f9      	ldr	r1, [r7, #12]
 80183e8:	440b      	add	r3, r1
 80183ea:	781b      	ldrb	r3, [r3, #0]
 80183ec:	429a      	cmp	r2, r3
 80183ee:	d011      	beq.n	8018414 <map_blended+0xbc>
                    last_dest_color = dest_buf[x];
 80183f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183f2:	68fa      	ldr	r2, [r7, #12]
 80183f4:	4413      	add	r3, r2
 80183f6:	781b      	ldrb	r3, [r3, #0]
 80183f8:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 80183fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183fc:	683a      	ldr	r2, [r7, #0]
 80183fe:	4413      	add	r3, r2
 8018400:	781b      	ldrb	r3, [r3, #0]
 8018402:	763b      	strb	r3, [r7, #24]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8018404:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840a:	7f39      	ldrb	r1, [r7, #28]
 801840c:	7e38      	ldrb	r0, [r7, #24]
 801840e:	4798      	blx	r3
 8018410:	4603      	mov	r3, r0
 8018412:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 8018414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018416:	68fa      	ldr	r2, [r7, #12]
 8018418:	4413      	add	r3, r2
 801841a:	7d3a      	ldrb	r2, [r7, #20]
 801841c:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 801841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018420:	3301      	adds	r3, #1
 8018422:	637b      	str	r3, [r7, #52]	; 0x34
 8018424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018428:	429a      	cmp	r2, r3
 801842a:	dbd3      	blt.n	80183d4 <map_blended+0x7c>
            }
            dest_buf += dest_stride;
 801842c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018430:	68fa      	ldr	r2, [r7, #12]
 8018432:	4413      	add	r3, r2
 8018434:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 8018436:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801843a:	683a      	ldr	r2, [r7, #0]
 801843c:	4413      	add	r3, r2
 801843e:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8018440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018442:	3301      	adds	r3, #1
 8018444:	633b      	str	r3, [r7, #48]	; 0x30
 8018446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018448:	6a3b      	ldr	r3, [r7, #32]
 801844a:	429a      	cmp	r2, r3
 801844c:	dbbf      	blt.n	80183ce <map_blended+0x76>
 801844e:	e08c      	b.n	801856a <map_blended+0x212>
        }
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	781b      	ldrb	r3, [r3, #0]
 8018454:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	781b      	ldrb	r3, [r3, #0]
 801845a:	763b      	strb	r3, [r7, #24]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 801845c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801845e:	781b      	ldrb	r3, [r3, #0]
 8018460:	2bfc      	cmp	r3, #252	; 0xfc
 8018462:	d808      	bhi.n	8018476 <map_blended+0x11e>
 8018464:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801846a:	7812      	ldrb	r2, [r2, #0]
 801846c:	fb02 f303 	mul.w	r3, r2, r3
 8018470:	121b      	asrs	r3, r3, #8
 8018472:	b2db      	uxtb	r3, r3
 8018474:	e001      	b.n	801847a <map_blended+0x122>
 8018476:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801847a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 801847e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8018482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018484:	7f39      	ldrb	r1, [r7, #28]
 8018486:	7e38      	ldrb	r0, [r7, #24]
 8018488:	4798      	blx	r3
 801848a:	4603      	mov	r3, r0
 801848c:	743b      	strb	r3, [r7, #16]
        for(y = 0; y < h; y++) {
 801848e:	2300      	movs	r3, #0
 8018490:	633b      	str	r3, [r7, #48]	; 0x30
 8018492:	e064      	b.n	801855e <map_blended+0x206>
            for(x = 0; x < w; x++) {
 8018494:	2300      	movs	r3, #0
 8018496:	637b      	str	r3, [r7, #52]	; 0x34
 8018498:	e04b      	b.n	8018532 <map_blended+0x1da>
                if(mask[x] == 0) continue;
 801849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801849c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801849e:	4413      	add	r3, r2
 80184a0:	781b      	ldrb	r3, [r3, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d041      	beq.n	801852a <map_blended+0x1d2>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 80184a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80184aa:	4413      	add	r3, r2
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	2bfc      	cmp	r3, #252	; 0xfc
 80184b0:	d80a      	bhi.n	80184c8 <map_blended+0x170>
 80184b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80184b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80184b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80184ba:	440a      	add	r2, r1
 80184bc:	7812      	ldrb	r2, [r2, #0]
 80184be:	fb02 f303 	mul.w	r3, r2, r3
 80184c2:	121b      	asrs	r3, r3, #8
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	e001      	b.n	80184cc <map_blended+0x174>
 80184c8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80184cc:	77fb      	strb	r3, [r7, #31]
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 80184ce:	7e3a      	ldrb	r2, [r7, #24]
 80184d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184d2:	6839      	ldr	r1, [r7, #0]
 80184d4:	440b      	add	r3, r1
 80184d6:	781b      	ldrb	r3, [r3, #0]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d10b      	bne.n	80184f4 <map_blended+0x19c>
 80184dc:	7f3a      	ldrb	r2, [r7, #28]
 80184de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184e0:	68f9      	ldr	r1, [r7, #12]
 80184e2:	440b      	add	r3, r1
 80184e4:	781b      	ldrb	r3, [r3, #0]
 80184e6:	429a      	cmp	r2, r3
 80184e8:	d104      	bne.n	80184f4 <map_blended+0x19c>
 80184ea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80184ee:	7ffb      	ldrb	r3, [r7, #31]
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d014      	beq.n	801851e <map_blended+0x1c6>
                    last_dest_color = dest_buf[x];
 80184f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184f6:	68fa      	ldr	r2, [r7, #12]
 80184f8:	4413      	add	r3, r2
 80184fa:	781b      	ldrb	r3, [r3, #0]
 80184fc:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 80184fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018500:	683a      	ldr	r2, [r7, #0]
 8018502:	4413      	add	r3, r2
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	763b      	strb	r3, [r7, #24]
                    last_opa = opa_tmp;
 8018508:	7ffb      	ldrb	r3, [r7, #31]
 801850a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 801850e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8018512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018514:	7f39      	ldrb	r1, [r7, #28]
 8018516:	7e38      	ldrb	r0, [r7, #24]
 8018518:	4798      	blx	r3
 801851a:	4603      	mov	r3, r0
 801851c:	743b      	strb	r3, [r7, #16]
                }
                dest_buf[x] = last_res_color;
 801851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018520:	68fa      	ldr	r2, [r7, #12]
 8018522:	4413      	add	r3, r2
 8018524:	7c3a      	ldrb	r2, [r7, #16]
 8018526:	701a      	strb	r2, [r3, #0]
 8018528:	e000      	b.n	801852c <map_blended+0x1d4>
                if(mask[x] == 0) continue;
 801852a:	bf00      	nop
            for(x = 0; x < w; x++) {
 801852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801852e:	3301      	adds	r3, #1
 8018530:	637b      	str	r3, [r7, #52]	; 0x34
 8018532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018536:	429a      	cmp	r2, r3
 8018538:	dbaf      	blt.n	801849a <map_blended+0x142>
            }
            dest_buf += dest_stride;
 801853a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801853e:	68fa      	ldr	r2, [r7, #12]
 8018540:	4413      	add	r3, r2
 8018542:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 8018544:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8018548:	683a      	ldr	r2, [r7, #0]
 801854a:	4413      	add	r3, r2
 801854c:	603b      	str	r3, [r7, #0]
            mask += mask_stride;
 801854e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8018552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018554:	4413      	add	r3, r2
 8018556:	64bb      	str	r3, [r7, #72]	; 0x48
        for(y = 0; y < h; y++) {
 8018558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801855a:	3301      	adds	r3, #1
 801855c:	633b      	str	r3, [r7, #48]	; 0x30
 801855e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018560:	6a3b      	ldr	r3, [r7, #32]
 8018562:	429a      	cmp	r2, r3
 8018564:	db96      	blt.n	8018494 <map_blended+0x13c>
 8018566:	e000      	b.n	801856a <map_blended+0x212>
            return;
 8018568:	bf00      	nop
        }
    }
}
 801856a:	3738      	adds	r7, #56	; 0x38
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}
 8018570:	0801857d 	.word	0x0801857d
 8018574:	080185cd 	.word	0x080185cd
 8018578:	08018683 	.word	0x08018683

0801857c <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b084      	sub	sp, #16
 8018580:	af00      	add	r7, sp, #0
 8018582:	7138      	strb	r0, [r7, #4]
 8018584:	7039      	strb	r1, [r7, #0]
 8018586:	4613      	mov	r3, r2
 8018588:	70fb      	strb	r3, [r7, #3]

    if(opa <= LV_OPA_MIN) return bg;
 801858a:	78fb      	ldrb	r3, [r7, #3]
 801858c:	2b02      	cmp	r3, #2
 801858e:	d801      	bhi.n	8018594 <color_blend_true_color_additive+0x18>
 8018590:	783b      	ldrb	r3, [r7, #0]
 8018592:	e017      	b.n	80185c4 <color_blend_true_color_additive+0x48>

    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
 8018594:	783b      	ldrb	r3, [r7, #0]
 8018596:	461a      	mov	r2, r3
 8018598:	793b      	ldrb	r3, [r7, #4]
 801859a:	4413      	add	r3, r2
 801859c:	60fb      	str	r3, [r7, #12]
    fg.full = LV_MIN(tmp, 1);
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	bf14      	ite	ne
 80185a4:	2301      	movne	r3, #1
 80185a6:	2300      	moveq	r3, #0
 80185a8:	b2db      	uxtb	r3, r3
 80185aa:	713b      	strb	r3, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 80185ac:	78fb      	ldrb	r3, [r7, #3]
 80185ae:	2bff      	cmp	r3, #255	; 0xff
 80185b0:	d101      	bne.n	80185b6 <color_blend_true_color_additive+0x3a>
 80185b2:	793b      	ldrb	r3, [r7, #4]
 80185b4:	e006      	b.n	80185c4 <color_blend_true_color_additive+0x48>

    return lv_color_mix(fg, bg, opa);
 80185b6:	78fb      	ldrb	r3, [r7, #3]
 80185b8:	461a      	mov	r2, r3
 80185ba:	7839      	ldrb	r1, [r7, #0]
 80185bc:	7938      	ldrb	r0, [r7, #4]
 80185be:	f7fe fdc2 	bl	8017146 <lv_color_mix>
 80185c2:	4603      	mov	r3, r0
}
 80185c4:	4618      	mov	r0, r3
 80185c6:	3710      	adds	r7, #16
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}

080185cc <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b084      	sub	sp, #16
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	7138      	strb	r0, [r7, #4]
 80185d4:	7039      	strb	r1, [r7, #0]
 80185d6:	4613      	mov	r3, r2
 80185d8:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 80185da:	78fb      	ldrb	r3, [r7, #3]
 80185dc:	2b02      	cmp	r3, #2
 80185de:	d801      	bhi.n	80185e4 <color_blend_true_color_subtractive+0x18>
 80185e0:	783b      	ldrb	r3, [r7, #0]
 80185e2:	e04a      	b.n	801867a <color_blend_true_color_subtractive+0xae>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 80185e4:	783b      	ldrb	r3, [r7, #0]
 80185e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80185ea:	b2db      	uxtb	r3, r3
 80185ec:	461a      	mov	r2, r3
 80185ee:	793b      	ldrb	r3, [r7, #4]
 80185f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80185f4:	b2db      	uxtb	r3, r3
 80185f6:	1ad3      	subs	r3, r2, r3
 80185f8:	60fb      	str	r3, [r7, #12]
    fg.ch.red = LV_MAX(tmp, 0);
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018600:	f003 0301 	and.w	r3, r3, #1
 8018604:	b2da      	uxtb	r2, r3
 8018606:	793b      	ldrb	r3, [r7, #4]
 8018608:	f362 0300 	bfi	r3, r2, #0, #1
 801860c:	713b      	strb	r3, [r7, #4]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 801860e:	783b      	ldrb	r3, [r7, #0]
 8018610:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018614:	b2db      	uxtb	r3, r3
 8018616:	461a      	mov	r2, r3
 8018618:	793b      	ldrb	r3, [r7, #4]
 801861a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801861e:	b2db      	uxtb	r3, r3
 8018620:	1ad3      	subs	r3, r2, r3
 8018622:	60fb      	str	r3, [r7, #12]
    fg.ch.green = LV_MAX(tmp, 0);
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801862a:	f003 0301 	and.w	r3, r3, #1
 801862e:	b2da      	uxtb	r2, r3
 8018630:	793b      	ldrb	r3, [r7, #4]
 8018632:	f362 0300 	bfi	r3, r2, #0, #1
 8018636:	713b      	strb	r3, [r7, #4]
    tmp = LV_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 8018638:	783b      	ldrb	r3, [r7, #0]
 801863a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801863e:	b2db      	uxtb	r3, r3
 8018640:	461a      	mov	r2, r3
 8018642:	793b      	ldrb	r3, [r7, #4]
 8018644:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018648:	b2db      	uxtb	r3, r3
 801864a:	1ad3      	subs	r3, r2, r3
 801864c:	60fb      	str	r3, [r7, #12]
    fg.ch.blue = LV_MAX(tmp, 0);
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018654:	f003 0301 	and.w	r3, r3, #1
 8018658:	b2da      	uxtb	r2, r3
 801865a:	793b      	ldrb	r3, [r7, #4]
 801865c:	f362 0300 	bfi	r3, r2, #0, #1
 8018660:	713b      	strb	r3, [r7, #4]

    if(opa == LV_OPA_COVER) return fg;
 8018662:	78fb      	ldrb	r3, [r7, #3]
 8018664:	2bff      	cmp	r3, #255	; 0xff
 8018666:	d101      	bne.n	801866c <color_blend_true_color_subtractive+0xa0>
 8018668:	793b      	ldrb	r3, [r7, #4]
 801866a:	e006      	b.n	801867a <color_blend_true_color_subtractive+0xae>

    return lv_color_mix(fg, bg, opa);
 801866c:	78fb      	ldrb	r3, [r7, #3]
 801866e:	461a      	mov	r2, r3
 8018670:	7839      	ldrb	r1, [r7, #0]
 8018672:	7938      	ldrb	r0, [r7, #4]
 8018674:	f7fe fd67 	bl	8017146 <lv_color_mix>
 8018678:	4603      	mov	r3, r0
}
 801867a:	4618      	mov	r0, r3
 801867c:	3710      	adds	r7, #16
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}

08018682 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8018682:	b580      	push	{r7, lr}
 8018684:	b082      	sub	sp, #8
 8018686:	af00      	add	r7, sp, #0
 8018688:	7138      	strb	r0, [r7, #4]
 801868a:	7039      	strb	r1, [r7, #0]
 801868c:	4613      	mov	r3, r2
 801868e:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 8018690:	78fb      	ldrb	r3, [r7, #3]
 8018692:	2b02      	cmp	r3, #2
 8018694:	d801      	bhi.n	801869a <color_blend_true_color_multiply+0x18>
 8018696:	783b      	ldrb	r3, [r7, #0]
 8018698:	e00b      	b.n	80186b2 <color_blend_true_color_multiply+0x30>
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 801869a:	78fb      	ldrb	r3, [r7, #3]
 801869c:	2bff      	cmp	r3, #255	; 0xff
 801869e:	d101      	bne.n	80186a4 <color_blend_true_color_multiply+0x22>
 80186a0:	793b      	ldrb	r3, [r7, #4]
 80186a2:	e006      	b.n	80186b2 <color_blend_true_color_multiply+0x30>

    return lv_color_mix(fg, bg, opa);
 80186a4:	78fb      	ldrb	r3, [r7, #3]
 80186a6:	461a      	mov	r2, r3
 80186a8:	7839      	ldrb	r1, [r7, #0]
 80186aa:	7938      	ldrb	r0, [r7, #4]
 80186ac:	f7fe fd4b 	bl	8017146 <lv_color_mix>
 80186b0:	4603      	mov	r3, r0
}
 80186b2:	4618      	mov	r0, r3
 80186b4:	3708      	adds	r7, #8
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bd80      	pop	{r7, pc}

080186ba <lv_color_to32>:
{
 80186ba:	b480      	push	{r7}
 80186bc:	b083      	sub	sp, #12
 80186be:	af00      	add	r7, sp, #0
 80186c0:	7138      	strb	r0, [r7, #4]
    if(color.full == 0)
 80186c2:	793b      	ldrb	r3, [r7, #4]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d102      	bne.n	80186ce <lv_color_to32+0x14>
        return 0xFF000000;
 80186c8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80186cc:	e001      	b.n	80186d2 <lv_color_to32+0x18>
        return 0xFFFFFFFF;
 80186ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80186d2:	4618      	mov	r0, r3
 80186d4:	370c      	adds	r7, #12
 80186d6:	46bd      	mov	sp, r7
 80186d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186dc:	4770      	bx	lr

080186de <compute_key>:
    const void * ptr;
    const uint32_t value;
};

static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
{
 80186de:	b480      	push	{r7}
 80186e0:	b085      	sub	sp, #20
 80186e2:	af00      	add	r7, sp, #0
 80186e4:	6078      	str	r0, [r7, #4]
 80186e6:	460b      	mov	r3, r1
 80186e8:	807b      	strh	r3, [r7, #2]
 80186ea:	4613      	mov	r3, r2
 80186ec:	803b      	strh	r3, [r7, #0]
    union void_cast v;
    v.ptr = g;
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	60fb      	str	r3, [r7, #12]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 80186f2:	68fa      	ldr	r2, [r7, #12]
 80186f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80186f8:	4053      	eors	r3, r2
 80186fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80186fe:	1052      	asrs	r2, r2, #1
 8018700:	b212      	sxth	r2, r2
 8018702:	4053      	eors	r3, r2
}
 8018704:	4618      	mov	r0, r3
 8018706:	3714      	adds	r7, #20
 8018708:	46bd      	mov	sp, r7
 801870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801870e:	4770      	bx	lr

08018710 <get_cache_item_size>:

static size_t get_cache_item_size(lv_grad_t * c)
{
 8018710:	b480      	push	{r7}
 8018712:	b085      	sub	sp, #20
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801871e:	3303      	adds	r3, #3
 8018720:	f023 0303 	bic.w	r3, r3, #3
 8018724:	3310      	adds	r3, #16
 8018726:	60fb      	str	r3, [r7, #12]
    s += ALIGN(c->size * sizeof(lv_color32_t));
#if LV_DITHER_ERROR_DIFFUSION == 1
    s += ALIGN(c->w * sizeof(lv_scolor24_t));
#endif
#endif
    return s;
 8018728:	68fb      	ldr	r3, [r7, #12]
}
 801872a:	4618      	mov	r0, r3
 801872c:	3714      	adds	r7, #20
 801872e:	46bd      	mov	sp, r7
 8018730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018734:	4770      	bx	lr
	...

08018738 <next_in_cache>:

static lv_grad_t * next_in_cache(lv_grad_t * item)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b084      	sub	sp, #16
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
    if(grad_cache_size == 0) return NULL;
 8018740:	4b0f      	ldr	r3, [pc, #60]	; (8018780 <next_in_cache+0x48>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d101      	bne.n	801874c <next_in_cache+0x14>
 8018748:	2300      	movs	r3, #0
 801874a:	e015      	b.n	8018778 <next_in_cache+0x40>

    if(item == NULL)
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d102      	bne.n	8018758 <next_in_cache+0x20>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 8018752:	4b0c      	ldr	r3, [pc, #48]	; (8018784 <next_in_cache+0x4c>)
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	e00f      	b.n	8018778 <next_in_cache+0x40>

    size_t s = get_cache_item_size(item);
 8018758:	6878      	ldr	r0, [r7, #4]
 801875a:	f7ff ffd9 	bl	8018710 <get_cache_item_size>
 801875e:	60f8      	str	r0, [r7, #12]
    /*Compute the size for this cache item*/
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8018760:	687a      	ldr	r2, [r7, #4]
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	441a      	add	r2, r3
 8018766:	4b08      	ldr	r3, [pc, #32]	; (8018788 <next_in_cache+0x50>)
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	429a      	cmp	r2, r3
 801876c:	d301      	bcc.n	8018772 <next_in_cache+0x3a>
 801876e:	2300      	movs	r3, #0
 8018770:	e002      	b.n	8018778 <next_in_cache+0x40>
    else return (lv_grad_t *)((uint8_t *)item + s);
 8018772:	687a      	ldr	r2, [r7, #4]
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	4413      	add	r3, r2
}
 8018778:	4618      	mov	r0, r3
 801877a:	3710      	adds	r7, #16
 801877c:	46bd      	mov	sp, r7
 801877e:	bd80      	pop	{r7, pc}
 8018780:	20000714 	.word	0x20000714
 8018784:	20000a50 	.word	0x20000a50
 8018788:	20000718 	.word	0x20000718

0801878c <iterate_cache>:

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b086      	sub	sp, #24
 8018790:	af00      	add	r7, sp, #0
 8018792:	60f8      	str	r0, [r7, #12]
 8018794:	60b9      	str	r1, [r7, #8]
 8018796:	607a      	str	r2, [r7, #4]
    lv_grad_t * first = next_in_cache(NULL);
 8018798:	2000      	movs	r0, #0
 801879a:	f7ff ffcd 	bl	8018738 <next_in_cache>
 801879e:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 80187a0:	e012      	b.n	80187c8 <iterate_cache+0x3c>
        if((*func)(first, ctx) == LV_RES_OK) {
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	68b9      	ldr	r1, [r7, #8]
 80187a6:	6978      	ldr	r0, [r7, #20]
 80187a8:	4798      	blx	r3
 80187aa:	4603      	mov	r3, r0
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d107      	bne.n	80187c0 <iterate_cache+0x34>
            if(out != NULL) *out = first;
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d002      	beq.n	80187bc <iterate_cache+0x30>
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	697a      	ldr	r2, [r7, #20]
 80187ba:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 80187bc:	2301      	movs	r3, #1
 80187be:	e00d      	b.n	80187dc <iterate_cache+0x50>
        }
        first = next_in_cache(first);
 80187c0:	6978      	ldr	r0, [r7, #20]
 80187c2:	f7ff ffb9 	bl	8018738 <next_in_cache>
 80187c6:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 80187c8:	697b      	ldr	r3, [r7, #20]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d005      	beq.n	80187da <iterate_cache+0x4e>
 80187ce:	697b      	ldr	r3, [r7, #20]
 80187d0:	685b      	ldr	r3, [r3, #4]
 80187d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d1e3      	bne.n	80187a2 <iterate_cache+0x16>
    }
    return LV_RES_INV;
 80187da:	2300      	movs	r3, #0
}
 80187dc:	4618      	mov	r0, r3
 80187de:	3718      	adds	r7, #24
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bd80      	pop	{r7, pc}

080187e4 <find_oldest_item_life>:

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
 80187e4:	b480      	push	{r7}
 80187e6:	b085      	sub	sp, #20
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	60fb      	str	r3, [r7, #12]
    if(c->life < *min_life) *min_life = c->life;
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	685b      	ldr	r3, [r3, #4]
 80187f6:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80187fa:	461a      	mov	r2, r3
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	429a      	cmp	r2, r3
 8018802:	d206      	bcs.n	8018812 <find_oldest_item_life+0x2e>
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801880c:	461a      	mov	r2, r3
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	601a      	str	r2, [r3, #0]
    return LV_RES_INV;
 8018812:	2300      	movs	r3, #0
}
 8018814:	4618      	mov	r0, r3
 8018816:	3714      	adds	r7, #20
 8018818:	46bd      	mov	sp, r7
 801881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881e:	4770      	bx	lr

08018820 <free_item>:

static void free_item(lv_grad_t * c)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b086      	sub	sp, #24
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
    size_t size = get_cache_item_size(c);
 8018828:	6878      	ldr	r0, [r7, #4]
 801882a:	f7ff ff71 	bl	8018710 <get_cache_item_size>
 801882e:	6178      	str	r0, [r7, #20]
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8018830:	4b1d      	ldr	r3, [pc, #116]	; (80188a8 <free_item+0x88>)
 8018832:	681a      	ldr	r2, [r3, #0]
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	1ad3      	subs	r3, r2, r3
 8018838:	461a      	mov	r2, r3
 801883a:	697b      	ldr	r3, [r7, #20]
 801883c:	1ad3      	subs	r3, r2, r3
 801883e:	613b      	str	r3, [r7, #16]
    grad_cache_end -= size;
 8018840:	4b19      	ldr	r3, [pc, #100]	; (80188a8 <free_item+0x88>)
 8018842:	681a      	ldr	r2, [r3, #0]
 8018844:	697b      	ldr	r3, [r7, #20]
 8018846:	425b      	negs	r3, r3
 8018848:	4413      	add	r3, r2
 801884a:	4a17      	ldr	r2, [pc, #92]	; (80188a8 <free_item+0x88>)
 801884c:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 801884e:	693b      	ldr	r3, [r7, #16]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d024      	beq.n	801889e <free_item+0x7e>
        uint8_t * old = (uint8_t *)c;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	60fb      	str	r3, [r7, #12]
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 8018858:	687a      	ldr	r2, [r7, #4]
 801885a:	697b      	ldr	r3, [r7, #20]
 801885c:	4413      	add	r3, r2
 801885e:	693a      	ldr	r2, [r7, #16]
 8018860:	4619      	mov	r1, r3
 8018862:	6878      	ldr	r0, [r7, #4]
 8018864:	f009 fd54 	bl	8022310 <lv_memcpy>
        /* Then need to fix all internal pointers too */
        while((uint8_t *)c != grad_cache_end) {
 8018868:	e00d      	b.n	8018886 <free_item+0x66>
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	689a      	ldr	r2, [r3, #8]
 801886e:	697b      	ldr	r3, [r7, #20]
 8018870:	425b      	negs	r3, r3
 8018872:	441a      	add	r2, r3
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	609a      	str	r2, [r3, #8]
            c->hmap = (lv_color32_t *)(((uint8_t *)c->hmap) - size);
#if LV_DITHER_ERROR_DIFFUSION == 1
            c->error_acc = (lv_scolor24_t *)(((uint8_t *)c->error_acc) - size);
#endif
#endif
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f7ff ff49 	bl	8018710 <get_cache_item_size>
 801887e:	4602      	mov	r2, r0
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	4413      	add	r3, r2
 8018884:	607b      	str	r3, [r7, #4]
        while((uint8_t *)c != grad_cache_end) {
 8018886:	4b08      	ldr	r3, [pc, #32]	; (80188a8 <free_item+0x88>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	429a      	cmp	r2, r3
 801888e:	d1ec      	bne.n	801886a <free_item+0x4a>
        }
        lv_memset_00(old + next_items_size, size);
 8018890:	68fa      	ldr	r2, [r7, #12]
 8018892:	693b      	ldr	r3, [r7, #16]
 8018894:	4413      	add	r3, r2
 8018896:	6979      	ldr	r1, [r7, #20]
 8018898:	4618      	mov	r0, r3
 801889a:	f009 ffdf 	bl	802285c <lv_memset_00>
    }
}
 801889e:	bf00      	nop
 80188a0:	3718      	adds	r7, #24
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	20000718 	.word	0x20000718

080188ac <kill_oldest_item>:

static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b084      	sub	sp, #16
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
 80188b4:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	60fb      	str	r3, [r7, #12]
    if(c->life == *min_life) {
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	685b      	ldr	r3, [r3, #4]
 80188be:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80188c2:	461a      	mov	r2, r3
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	429a      	cmp	r2, r3
 80188ca:	d104      	bne.n	80188d6 <kill_oldest_item+0x2a>
        /*Found, let's kill it*/
        free_item(c);
 80188cc:	6878      	ldr	r0, [r7, #4]
 80188ce:	f7ff ffa7 	bl	8018820 <free_item>
        return LV_RES_OK;
 80188d2:	2301      	movs	r3, #1
 80188d4:	e000      	b.n	80188d8 <kill_oldest_item+0x2c>
    }
    return LV_RES_INV;
 80188d6:	2300      	movs	r3, #0
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3710      	adds	r7, #16
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}

080188e0 <find_item>:

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
 80188e0:	b480      	push	{r7}
 80188e2:	b085      	sub	sp, #20
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
 80188e8:	6039      	str	r1, [r7, #0]
    uint32_t * k = (uint32_t *)ctx;
 80188ea:	683b      	ldr	r3, [r7, #0]
 80188ec:	60fb      	str	r3, [r7, #12]
    if(c->key == *k) return LV_RES_OK;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681a      	ldr	r2, [r3, #0]
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	429a      	cmp	r2, r3
 80188f8:	d101      	bne.n	80188fe <find_item+0x1e>
 80188fa:	2301      	movs	r3, #1
 80188fc:	e000      	b.n	8018900 <find_item+0x20>
    return LV_RES_INV;
 80188fe:	2300      	movs	r3, #0
}
 8018900:	4618      	mov	r0, r3
 8018902:	3714      	adds	r7, #20
 8018904:	46bd      	mov	sp, r7
 8018906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890a:	4770      	bx	lr

0801890c <allocate_item>:

static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b088      	sub	sp, #32
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
 8018914:	460b      	mov	r3, r1
 8018916:	807b      	strh	r3, [r7, #2]
 8018918:	4613      	mov	r3, r2
 801891a:	803b      	strh	r3, [r7, #0]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	795b      	ldrb	r3, [r3, #5]
 8018920:	f003 0307 	and.w	r3, r3, #7
 8018924:	b2db      	uxtb	r3, r3
 8018926:	2b02      	cmp	r3, #2
 8018928:	d102      	bne.n	8018930 <allocate_item+0x24>
 801892a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801892e:	e001      	b.n	8018934 <allocate_item+0x28>
 8018930:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018934:	82fb      	strh	r3, [r7, #22]
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 8018936:	f9b7 2000 	ldrsh.w	r2, [r7]
 801893a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801893e:	4293      	cmp	r3, r2
 8018940:	bfb8      	it	lt
 8018942:	4613      	movlt	r3, r2
 8018944:	82bb      	strh	r3, [r7, #20]
                                           no dithering is selected where it's used vertically */

    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8018946:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801894a:	3303      	adds	r3, #3
 801894c:	f023 0303 	bic.w	r3, r3, #3
 8018950:	3310      	adds	r3, #16
 8018952:	613b      	str	r3, [r7, #16]
#if LV_DITHER_ERROR_DIFFUSION == 1
    req_size += ALIGN(w * sizeof(lv_scolor24_t));
#endif
#endif

    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8018954:	4b49      	ldr	r3, [pc, #292]	; (8018a7c <allocate_item+0x170>)
 8018956:	681a      	ldr	r2, [r3, #0]
 8018958:	4b49      	ldr	r3, [pc, #292]	; (8018a80 <allocate_item+0x174>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	1ad3      	subs	r3, r2, r3
 801895e:	61fb      	str	r3, [r7, #28]
    lv_grad_t * item = NULL;
 8018960:	2300      	movs	r3, #0
 8018962:	61bb      	str	r3, [r7, #24]
    if(req_size + act_size < grad_cache_size) {
 8018964:	693a      	ldr	r2, [r7, #16]
 8018966:	69fb      	ldr	r3, [r7, #28]
 8018968:	441a      	add	r2, r3
 801896a:	4b46      	ldr	r3, [pc, #280]	; (8018a84 <allocate_item+0x178>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	429a      	cmp	r2, r3
 8018970:	d208      	bcs.n	8018984 <allocate_item+0x78>
        item = (lv_grad_t *)grad_cache_end;
 8018972:	4b42      	ldr	r3, [pc, #264]	; (8018a7c <allocate_item+0x170>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	61bb      	str	r3, [r7, #24]
        item->not_cached = 0;
 8018978:	69ba      	ldr	r2, [r7, #24]
 801897a:	79d3      	ldrb	r3, [r2, #7]
 801897c:	f36f 13c7 	bfc	r3, #7, #1
 8018980:	71d3      	strb	r3, [r2, #7]
 8018982:	e03e      	b.n	8018a02 <allocate_item+0xf6>
    }
    else {
        /*Need to evict items from cache until we find enough space to allocate this one */
        if(req_size <= grad_cache_size) {
 8018984:	4b3f      	ldr	r3, [pc, #252]	; (8018a84 <allocate_item+0x178>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	693a      	ldr	r2, [r7, #16]
 801898a:	429a      	cmp	r2, r3
 801898c:	d827      	bhi.n	80189de <allocate_item+0xd2>
            while(act_size + req_size > grad_cache_size) {
 801898e:	e016      	b.n	80189be <allocate_item+0xb2>
                uint32_t oldest_life = UINT32_MAX;
 8018990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018994:	60bb      	str	r3, [r7, #8]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8018996:	f107 0308 	add.w	r3, r7, #8
 801899a:	2200      	movs	r2, #0
 801899c:	4619      	mov	r1, r3
 801899e:	483a      	ldr	r0, [pc, #232]	; (8018a88 <allocate_item+0x17c>)
 80189a0:	f7ff fef4 	bl	801878c <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 80189a4:	f107 0308 	add.w	r3, r7, #8
 80189a8:	2200      	movs	r2, #0
 80189aa:	4619      	mov	r1, r3
 80189ac:	4837      	ldr	r0, [pc, #220]	; (8018a8c <allocate_item+0x180>)
 80189ae:	f7ff feed 	bl	801878c <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 80189b2:	4b32      	ldr	r3, [pc, #200]	; (8018a7c <allocate_item+0x170>)
 80189b4:	681a      	ldr	r2, [r3, #0]
 80189b6:	4b32      	ldr	r3, [pc, #200]	; (8018a80 <allocate_item+0x174>)
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	1ad3      	subs	r3, r2, r3
 80189bc:	61fb      	str	r3, [r7, #28]
            while(act_size + req_size > grad_cache_size) {
 80189be:	69fa      	ldr	r2, [r7, #28]
 80189c0:	693b      	ldr	r3, [r7, #16]
 80189c2:	441a      	add	r2, r3
 80189c4:	4b2f      	ldr	r3, [pc, #188]	; (8018a84 <allocate_item+0x178>)
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	429a      	cmp	r2, r3
 80189ca:	d8e1      	bhi.n	8018990 <allocate_item+0x84>
            }
            item = (lv_grad_t *)grad_cache_end;
 80189cc:	4b2b      	ldr	r3, [pc, #172]	; (8018a7c <allocate_item+0x170>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	61bb      	str	r3, [r7, #24]
            item->not_cached = 0;
 80189d2:	69ba      	ldr	r2, [r7, #24]
 80189d4:	79d3      	ldrb	r3, [r2, #7]
 80189d6:	f36f 13c7 	bfc	r3, #7, #1
 80189da:	71d3      	strb	r3, [r2, #7]
 80189dc:	e011      	b.n	8018a02 <allocate_item+0xf6>
        }
        else {
            /*The cache is too small. Allocate the item manually and free it later.*/
            item = lv_mem_alloc(req_size);
 80189de:	6938      	ldr	r0, [r7, #16]
 80189e0:	f009 fb08 	bl	8021ff4 <lv_mem_alloc>
 80189e4:	61b8      	str	r0, [r7, #24]
            LV_ASSERT_MALLOC(item);
 80189e6:	69bb      	ldr	r3, [r7, #24]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d100      	bne.n	80189ee <allocate_item+0xe2>
 80189ec:	e7fe      	b.n	80189ec <allocate_item+0xe0>
            if(item == NULL) return NULL;
 80189ee:	69bb      	ldr	r3, [r7, #24]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d101      	bne.n	80189f8 <allocate_item+0xec>
 80189f4:	2300      	movs	r3, #0
 80189f6:	e03c      	b.n	8018a72 <allocate_item+0x166>
            item->not_cached = 1;
 80189f8:	69ba      	ldr	r2, [r7, #24]
 80189fa:	79d3      	ldrb	r3, [r2, #7]
 80189fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a00:	71d3      	strb	r3, [r2, #7]
        }
    }

    item->key = compute_key(g, size, w);
 8018a02:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018a06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018a0a:	4619      	mov	r1, r3
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f7ff fe66 	bl	80186de <compute_key>
 8018a12:	4602      	mov	r2, r0
 8018a14:	69bb      	ldr	r3, [r7, #24]
 8018a16:	601a      	str	r2, [r3, #0]
    item->life = 1;
 8018a18:	69ba      	ldr	r2, [r7, #24]
 8018a1a:	6853      	ldr	r3, [r2, #4]
 8018a1c:	2101      	movs	r1, #1
 8018a1e:	f361 031d 	bfi	r3, r1, #0, #30
 8018a22:	6053      	str	r3, [r2, #4]
    item->filled = 0;
 8018a24:	69ba      	ldr	r2, [r7, #24]
 8018a26:	79d3      	ldrb	r3, [r2, #7]
 8018a28:	f36f 1386 	bfc	r3, #6, #1
 8018a2c:	71d3      	strb	r3, [r2, #7]
    item->alloc_size = map_size;
 8018a2e:	69bb      	ldr	r3, [r7, #24]
 8018a30:	8aba      	ldrh	r2, [r7, #20]
 8018a32:	819a      	strh	r2, [r3, #12]
    item->size = size;
 8018a34:	69bb      	ldr	r3, [r7, #24]
 8018a36:	8afa      	ldrh	r2, [r7, #22]
 8018a38:	81da      	strh	r2, [r3, #14]
    if(item->not_cached) {
 8018a3a:	69bb      	ldr	r3, [r7, #24]
 8018a3c:	79db      	ldrb	r3, [r3, #7]
 8018a3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018a42:	b2db      	uxtb	r3, r3
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d007      	beq.n	8018a58 <allocate_item+0x14c>
        uint8_t * p = (uint8_t *)item;
 8018a48:	69bb      	ldr	r3, [r7, #24]
 8018a4a:	60fb      	str	r3, [r7, #12]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	f103 0210 	add.w	r2, r3, #16
 8018a52:	69bb      	ldr	r3, [r7, #24]
 8018a54:	609a      	str	r2, [r3, #8]
 8018a56:	e00b      	b.n	8018a70 <allocate_item+0x164>
        item->w = w;
#endif
#endif
    }
    else {
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8018a58:	4b08      	ldr	r3, [pc, #32]	; (8018a7c <allocate_item+0x170>)
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	f103 0210 	add.w	r2, r3, #16
 8018a60:	69bb      	ldr	r3, [r7, #24]
 8018a62:	609a      	str	r2, [r3, #8]
        item->error_acc = (lv_scolor24_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_grad_color_t)) +
                                            ALIGN(map_size * sizeof(lv_color_t)));
        item->w = w;
#endif
#endif
        grad_cache_end += req_size;
 8018a64:	4b05      	ldr	r3, [pc, #20]	; (8018a7c <allocate_item+0x170>)
 8018a66:	681a      	ldr	r2, [r3, #0]
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	4413      	add	r3, r2
 8018a6c:	4a03      	ldr	r2, [pc, #12]	; (8018a7c <allocate_item+0x170>)
 8018a6e:	6013      	str	r3, [r2, #0]
    }
    return item;
 8018a70:	69bb      	ldr	r3, [r7, #24]
}
 8018a72:	4618      	mov	r0, r3
 8018a74:	3720      	adds	r7, #32
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}
 8018a7a:	bf00      	nop
 8018a7c:	20000718 	.word	0x20000718
 8018a80:	20000a50 	.word	0x20000a50
 8018a84:	20000714 	.word	0x20000714
 8018a88:	080187e5 	.word	0x080187e5
 8018a8c:	080188ad 	.word	0x080188ad

08018a90 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8018a98:	4b10      	ldr	r3, [pc, #64]	; (8018adc <lv_gradient_set_cache_size+0x4c>)
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f009 fad9 	bl	8022054 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 8018aa2:	6878      	ldr	r0, [r7, #4]
 8018aa4:	f009 faa6 	bl	8021ff4 <lv_mem_alloc>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	4a0c      	ldr	r2, [pc, #48]	; (8018adc <lv_gradient_set_cache_size+0x4c>)
 8018aac:	6013      	str	r3, [r2, #0]
 8018aae:	4b0b      	ldr	r3, [pc, #44]	; (8018adc <lv_gradient_set_cache_size+0x4c>)
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	4a0b      	ldr	r2, [pc, #44]	; (8018ae0 <lv_gradient_set_cache_size+0x50>)
 8018ab4:	6013      	str	r3, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8018ab6:	4b09      	ldr	r3, [pc, #36]	; (8018adc <lv_gradient_set_cache_size+0x4c>)
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d100      	bne.n	8018ac0 <lv_gradient_set_cache_size+0x30>
 8018abe:	e7fe      	b.n	8018abe <lv_gradient_set_cache_size+0x2e>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 8018ac0:	4b06      	ldr	r3, [pc, #24]	; (8018adc <lv_gradient_set_cache_size+0x4c>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	6879      	ldr	r1, [r7, #4]
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f009 fec8 	bl	802285c <lv_memset_00>
    grad_cache_size = max_bytes;
 8018acc:	4a05      	ldr	r2, [pc, #20]	; (8018ae4 <lv_gradient_set_cache_size+0x54>)
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	6013      	str	r3, [r2, #0]
}
 8018ad2:	bf00      	nop
 8018ad4:	3708      	adds	r7, #8
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd80      	pop	{r7, pc}
 8018ada:	bf00      	nop
 8018adc:	20000a50 	.word	0x20000a50
 8018ae0:	20000718 	.word	0x20000718
 8018ae4:	20000714 	.word	0x20000714

08018ae8 <lv_gradient_get>:

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 8018ae8:	b590      	push	{r4, r7, lr}
 8018aea:	b087      	sub	sp, #28
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
 8018af0:	460b      	mov	r3, r1
 8018af2:	807b      	strh	r3, [r7, #2]
 8018af4:	4613      	mov	r3, r2
 8018af6:	803b      	strh	r3, [r7, #0]
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	795b      	ldrb	r3, [r3, #5]
 8018afc:	f003 0307 	and.w	r3, r3, #7
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d101      	bne.n	8018b0a <lv_gradient_get+0x22>
 8018b06:	2300      	movs	r3, #0
 8018b08:	e06d      	b.n	8018be6 <lv_gradient_get+0xfe>

    /* Step 0: Check if the cache exist (else create it) */
    static bool inited = false;
    if(!inited) {
 8018b0a:	4b39      	ldr	r3, [pc, #228]	; (8018bf0 <lv_gradient_get+0x108>)
 8018b0c:	781b      	ldrb	r3, [r3, #0]
 8018b0e:	f083 0301 	eor.w	r3, r3, #1
 8018b12:	b2db      	uxtb	r3, r3
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d005      	beq.n	8018b24 <lv_gradient_get+0x3c>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 8018b18:	2000      	movs	r0, #0
 8018b1a:	f7ff ffb9 	bl	8018a90 <lv_gradient_set_cache_size>
        inited = true;
 8018b1e:	4b34      	ldr	r3, [pc, #208]	; (8018bf0 <lv_gradient_get+0x108>)
 8018b20:	2201      	movs	r2, #1
 8018b22:	701a      	strb	r2, [r3, #0]
    }

    /* Step 1: Search cache for the given key */
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	795b      	ldrb	r3, [r3, #5]
 8018b28:	f003 0307 	and.w	r3, r3, #7
 8018b2c:	b2db      	uxtb	r3, r3
 8018b2e:	2b02      	cmp	r3, #2
 8018b30:	d102      	bne.n	8018b38 <lv_gradient_get+0x50>
 8018b32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018b36:	e001      	b.n	8018b3c <lv_gradient_get+0x54>
 8018b38:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018b3c:	82bb      	strh	r3, [r7, #20]
    uint32_t key = compute_key(g, size, w);
 8018b3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018b42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018b46:	4619      	mov	r1, r3
 8018b48:	6878      	ldr	r0, [r7, #4]
 8018b4a:	f7ff fdc8 	bl	80186de <compute_key>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	613b      	str	r3, [r7, #16]
    lv_grad_t * item = NULL;
 8018b52:	2300      	movs	r3, #0
 8018b54:	60fb      	str	r3, [r7, #12]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8018b56:	f107 020c 	add.w	r2, r7, #12
 8018b5a:	f107 0310 	add.w	r3, r7, #16
 8018b5e:	4619      	mov	r1, r3
 8018b60:	4824      	ldr	r0, [pc, #144]	; (8018bf4 <lv_gradient_get+0x10c>)
 8018b62:	f7ff fe13 	bl	801878c <iterate_cache>
 8018b66:	4603      	mov	r3, r0
 8018b68:	2b01      	cmp	r3, #1
 8018b6a:	d10c      	bne.n	8018b86 <lv_gradient_get+0x9e>
        item->life++; /* Don't forget to bump the counter */
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	685a      	ldr	r2, [r3, #4]
 8018b70:	f3c2 021d 	ubfx	r2, r2, #0, #30
 8018b74:	1c51      	adds	r1, r2, #1
 8018b76:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8018b7a:	685a      	ldr	r2, [r3, #4]
 8018b7c:	f361 021d 	bfi	r2, r1, #0, #30
 8018b80:	605a      	str	r2, [r3, #4]
        return item;
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	e02f      	b.n	8018be6 <lv_gradient_get+0xfe>
    }

    /* Step 2: Need to allocate an item for it */
    item = allocate_item(g, w, h);
 8018b86:	f9b7 2000 	ldrsh.w	r2, [r7]
 8018b8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018b8e:	4619      	mov	r1, r3
 8018b90:	6878      	ldr	r0, [r7, #4]
 8018b92:	f7ff febb 	bl	801890c <allocate_item>
 8018b96:	4603      	mov	r3, r0
 8018b98:	60fb      	str	r3, [r7, #12]
    if(item == NULL) {
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d101      	bne.n	8018ba4 <lv_gradient_get+0xbc>
        LV_LOG_WARN("Faild to allcoate item for teh gradient");
        return item;
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	e020      	b.n	8018be6 <lv_gradient_get+0xfe>
    }
#if LV_DITHER_ERROR_DIFFUSION == 1
    lv_memset_00(item->error_acc, w * sizeof(lv_scolor24_t));
#endif
#else
    for(lv_coord_t i = 0; i < item->size; i++) {
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	82fb      	strh	r3, [r7, #22]
 8018ba8:	e015      	b.n	8018bd6 <lv_gradient_get+0xee>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	689a      	ldr	r2, [r3, #8]
 8018bb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018bb8:	18d4      	adds	r4, r2, r3
 8018bba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018bbe:	461a      	mov	r2, r3
 8018bc0:	6878      	ldr	r0, [r7, #4]
 8018bc2:	f000 f819 	bl	8018bf8 <lv_gradient_calculate>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	7023      	strb	r3, [r4, #0]
    for(lv_coord_t i = 0; i < item->size; i++) {
 8018bca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	3301      	adds	r3, #1
 8018bd2:	b29b      	uxth	r3, r3
 8018bd4:	82fb      	strh	r3, [r7, #22]
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018bdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018be0:	429a      	cmp	r2, r3
 8018be2:	dbe2      	blt.n	8018baa <lv_gradient_get+0xc2>
    }
#endif

    return item;
 8018be4:	68fb      	ldr	r3, [r7, #12]
}
 8018be6:	4618      	mov	r0, r3
 8018be8:	371c      	adds	r7, #28
 8018bea:	46bd      	mov	sp, r7
 8018bec:	bd90      	pop	{r4, r7, pc}
 8018bee:	bf00      	nop
 8018bf0:	2000071c 	.word	0x2000071c
 8018bf4:	080188e1 	.word	0x080188e1

08018bf8 <lv_gradient_calculate>:

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b08c      	sub	sp, #48	; 0x30
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	460b      	mov	r3, r1
 8018c02:	807b      	strh	r3, [r7, #2]
 8018c04:	4613      	mov	r3, r2
 8018c06:	803b      	strh	r3, [r7, #0]
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	785b      	ldrb	r3, [r3, #1]
 8018c0c:	461a      	mov	r2, r3
 8018c0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018c12:	fb02 f303 	mul.w	r3, r2, r3
 8018c16:	121b      	asrs	r3, r3, #8
 8018c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(frac <= min) {
 8018c1a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c20:	429a      	cmp	r2, r3
 8018c22:	db04      	blt.n	8018c2e <lv_gradient_calculate+0x36>
        GRAD_CONV(tmp, dsc->stops[0].color);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	763b      	strb	r3, [r7, #24]
        return tmp;
 8018c2a:	7e3b      	ldrb	r3, [r7, #24]
 8018c2c:	e0c6      	b.n	8018dbc <lv_gradient_calculate+0x1c4>
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	791b      	ldrb	r3, [r3, #4]
 8018c32:	3b01      	subs	r3, #1
 8018c34:	687a      	ldr	r2, [r7, #4]
 8018c36:	005b      	lsls	r3, r3, #1
 8018c38:	4413      	add	r3, r2
 8018c3a:	785b      	ldrb	r3, [r3, #1]
 8018c3c:	461a      	mov	r2, r3
 8018c3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018c42:	fb02 f303 	mul.w	r3, r2, r3
 8018c46:	121b      	asrs	r3, r3, #8
 8018c48:	623b      	str	r3, [r7, #32]
    if(frac >= max) {
 8018c4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018c4e:	6a3a      	ldr	r2, [r7, #32]
 8018c50:	429a      	cmp	r2, r3
 8018c52:	dc08      	bgt.n	8018c66 <lv_gradient_calculate+0x6e>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	791b      	ldrb	r3, [r3, #4]
 8018c58:	1e5a      	subs	r2, r3, #1
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8018c60:	763b      	strb	r3, [r7, #24]
        return tmp;
 8018c62:	7e3b      	ldrb	r3, [r7, #24]
 8018c64:	e0aa      	b.n	8018dbc <lv_gradient_calculate+0x1c4>
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
 8018c66:	2300      	movs	r3, #0
 8018c68:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8018c6a:	2301      	movs	r3, #1
 8018c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018c70:	e049      	b.n	8018d06 <lv_gradient_calculate+0x10e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 8018c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c76:	687a      	ldr	r2, [r7, #4]
 8018c78:	005b      	lsls	r3, r3, #1
 8018c7a:	4413      	add	r3, r2
 8018c7c:	785b      	ldrb	r3, [r3, #1]
 8018c7e:	461a      	mov	r2, r3
 8018c80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018c84:	fb02 f303 	mul.w	r3, r2, r3
 8018c88:	121b      	asrs	r3, r3, #8
 8018c8a:	61fb      	str	r3, [r7, #28]
        if(frac <= cur) {
 8018c8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018c90:	69fa      	ldr	r2, [r7, #28]
 8018c92:	429a      	cmp	r2, r3
 8018c94:	db32      	blt.n	8018cfc <lv_gradient_calculate+0x104>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 8018c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c9a:	1e5a      	subs	r2, r3, #1
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018ca2:	f7ff fd0a 	bl	80186ba <lv_color_to32>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	617b      	str	r3, [r7, #20]
            two.full = lv_color_to32(dsc->stops[i].color);
 8018caa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018cb4:	f7ff fd01 	bl	80186ba <lv_color_to32>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	613b      	str	r3, [r7, #16]
            min = (dsc->stops[i - 1].frac * range) >> 8;
 8018cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cc0:	3b01      	subs	r3, #1
 8018cc2:	687a      	ldr	r2, [r7, #4]
 8018cc4:	005b      	lsls	r3, r3, #1
 8018cc6:	4413      	add	r3, r2
 8018cc8:	785b      	ldrb	r3, [r3, #1]
 8018cca:	461a      	mov	r2, r3
 8018ccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018cd0:	fb02 f303 	mul.w	r3, r2, r3
 8018cd4:	121b      	asrs	r3, r3, #8
 8018cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
            max = (dsc->stops[i].frac * range) >> 8;
 8018cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cdc:	687a      	ldr	r2, [r7, #4]
 8018cde:	005b      	lsls	r3, r3, #1
 8018ce0:	4413      	add	r3, r2
 8018ce2:	785b      	ldrb	r3, [r3, #1]
 8018ce4:	461a      	mov	r2, r3
 8018ce6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018cea:	fb02 f303 	mul.w	r3, r2, r3
 8018cee:	121b      	asrs	r3, r3, #8
 8018cf0:	623b      	str	r3, [r7, #32]
            d = max - min;
 8018cf2:	6a3a      	ldr	r2, [r7, #32]
 8018cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cf6:	1ad3      	subs	r3, r2, r3
 8018cf8:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 8018cfa:	e00a      	b.n	8018d12 <lv_gradient_calculate+0x11a>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8018cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d00:	3301      	adds	r3, #1
 8018d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	791b      	ldrb	r3, [r3, #4]
 8018d0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	d3af      	bcc.n	8018c72 <lv_gradient_calculate+0x7a>
        }
    }

    LV_ASSERT(d != 0);
 8018d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d100      	bne.n	8018d1a <lv_gradient_calculate+0x122>
 8018d18:	e7fe      	b.n	8018d18 <lv_gradient_calculate+0x120>

    /*Then interpolate*/
    frac -= min;
 8018d1a:	883a      	ldrh	r2, [r7, #0]
 8018d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d1e:	b29b      	uxth	r3, r3
 8018d20:	1ad3      	subs	r3, r2, r3
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (frac * 255) / d;
 8018d26:	f9b7 2000 	ldrsh.w	r2, [r7]
 8018d2a:	4613      	mov	r3, r2
 8018d2c:	021b      	lsls	r3, r3, #8
 8018d2e:	1a9a      	subs	r2, r3, r2
 8018d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d36:	76fb      	strb	r3, [r7, #27]
    lv_opa_t imix = 255 - mix;
 8018d38:	7efb      	ldrb	r3, [r7, #27]
 8018d3a:	43db      	mvns	r3, r3
 8018d3c:	76bb      	strb	r3, [r7, #26]

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8018d3e:	7c3b      	ldrb	r3, [r7, #16]
 8018d40:	461a      	mov	r2, r3
 8018d42:	7efb      	ldrb	r3, [r7, #27]
 8018d44:	fb03 f202 	mul.w	r2, r3, r2
 8018d48:	7d3b      	ldrb	r3, [r7, #20]
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	7ebb      	ldrb	r3, [r7, #26]
 8018d4e:	fb01 f303 	mul.w	r3, r1, r3
 8018d52:	4413      	add	r3, r2
 8018d54:	461a      	mov	r2, r3
 8018d56:	4613      	mov	r3, r2
 8018d58:	021b      	lsls	r3, r3, #8
 8018d5a:	4413      	add	r3, r2
 8018d5c:	01db      	lsls	r3, r3, #7
 8018d5e:	4413      	add	r3, r2
 8018d60:	0f9b      	lsrs	r3, r3, #30
 8018d62:	b2d9      	uxtb	r1, r3
 8018d64:	7c7b      	ldrb	r3, [r7, #17]
 8018d66:	461a      	mov	r2, r3
 8018d68:	7efb      	ldrb	r3, [r7, #27]
 8018d6a:	fb03 f202 	mul.w	r2, r3, r2
 8018d6e:	7d7b      	ldrb	r3, [r7, #21]
 8018d70:	4618      	mov	r0, r3
 8018d72:	7ebb      	ldrb	r3, [r7, #26]
 8018d74:	fb00 f303 	mul.w	r3, r0, r3
 8018d78:	4413      	add	r3, r2
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	4613      	mov	r3, r2
 8018d7e:	021b      	lsls	r3, r3, #8
 8018d80:	4413      	add	r3, r2
 8018d82:	01db      	lsls	r3, r3, #7
 8018d84:	4413      	add	r3, r2
 8018d86:	0f9b      	lsrs	r3, r3, #30
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	430b      	orrs	r3, r1
 8018d8c:	b2d9      	uxtb	r1, r3
 8018d8e:	7cbb      	ldrb	r3, [r7, #18]
 8018d90:	461a      	mov	r2, r3
 8018d92:	7efb      	ldrb	r3, [r7, #27]
 8018d94:	fb03 f202 	mul.w	r2, r3, r2
 8018d98:	7dbb      	ldrb	r3, [r7, #22]
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	7ebb      	ldrb	r3, [r7, #26]
 8018d9e:	fb00 f303 	mul.w	r3, r0, r3
 8018da2:	4413      	add	r3, r2
 8018da4:	461a      	mov	r2, r3
 8018da6:	4613      	mov	r3, r2
 8018da8:	021b      	lsls	r3, r3, #8
 8018daa:	4413      	add	r3, r2
 8018dac:	01db      	lsls	r3, r3, #7
 8018dae:	4413      	add	r3, r2
 8018db0:	0f9b      	lsrs	r3, r3, #30
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	430b      	orrs	r3, r1
 8018db6:	b2db      	uxtb	r3, r3
 8018db8:	733b      	strb	r3, [r7, #12]
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
 8018dba:	7b3b      	ldrb	r3, [r7, #12]
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	3730      	adds	r7, #48	; 0x30
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}

08018dc4 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b082      	sub	sp, #8
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	6078      	str	r0, [r7, #4]
    if(grad->not_cached) {
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	79db      	ldrb	r3, [r3, #7]
 8018dd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018dd4:	b2db      	uxtb	r3, r3
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d002      	beq.n	8018de0 <lv_gradient_cleanup+0x1c>
        lv_mem_free(grad);
 8018dda:	6878      	ldr	r0, [r7, #4]
 8018ddc:	f009 f93a 	bl	8022054 <lv_mem_free>
    }
}
 8018de0:	bf00      	nop
 8018de2:	3708      	adds	r7, #8
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}

08018de8 <lv_color_premult>:
{
 8018de8:	b480      	push	{r7}
 8018dea:	b083      	sub	sp, #12
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	7138      	strb	r0, [r7, #4]
 8018df0:	460b      	mov	r3, r1
 8018df2:	603a      	str	r2, [r7, #0]
 8018df4:	71fb      	strb	r3, [r7, #7]
    out[0] = LV_COLOR_GET_R(c);
 8018df6:	793b      	ldrb	r3, [r7, #4]
 8018df8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018dfc:	b2db      	uxtb	r3, r3
 8018dfe:	b29a      	uxth	r2, r3
 8018e00:	683b      	ldr	r3, [r7, #0]
 8018e02:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 8018e04:	793b      	ldrb	r3, [r7, #4]
 8018e06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018e0a:	b2da      	uxtb	r2, r3
 8018e0c:	683b      	ldr	r3, [r7, #0]
 8018e0e:	3302      	adds	r3, #2
 8018e10:	b292      	uxth	r2, r2
 8018e12:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 8018e14:	793b      	ldrb	r3, [r7, #4]
 8018e16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018e1a:	b2da      	uxtb	r2, r3
 8018e1c:	683b      	ldr	r3, [r7, #0]
 8018e1e:	3304      	adds	r3, #4
 8018e20:	b292      	uxth	r2, r2
 8018e22:	801a      	strh	r2, [r3, #0]
}
 8018e24:	bf00      	nop
 8018e26:	370c      	adds	r7, #12
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2e:	4770      	bx	lr

08018e30 <lv_color_mix_premult>:
{
 8018e30:	b480      	push	{r7}
 8018e32:	b085      	sub	sp, #20
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	7039      	strb	r1, [r7, #0]
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_R(c1, premult_c1[0]);
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	881b      	ldrh	r3, [r3, #0]
 8018e42:	f003 0301 	and.w	r3, r3, #1
 8018e46:	b2da      	uxtb	r2, r3
 8018e48:	7a3b      	ldrb	r3, [r7, #8]
 8018e4a:	f362 0300 	bfi	r3, r2, #0, #1
 8018e4e:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	3302      	adds	r3, #2
 8018e54:	881b      	ldrh	r3, [r3, #0]
 8018e56:	f003 0301 	and.w	r3, r3, #1
 8018e5a:	b2da      	uxtb	r2, r3
 8018e5c:	7a3b      	ldrb	r3, [r7, #8]
 8018e5e:	f362 0300 	bfi	r3, r2, #0, #1
 8018e62:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	3304      	adds	r3, #4
 8018e68:	881b      	ldrh	r3, [r3, #0]
 8018e6a:	f003 0301 	and.w	r3, r3, #1
 8018e6e:	b2da      	uxtb	r2, r3
 8018e70:	7a3b      	ldrb	r3, [r7, #8]
 8018e72:	f362 0300 	bfi	r3, r2, #0, #1
 8018e76:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8018e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	da01      	bge.n	8018e84 <lv_color_mix_premult+0x54>
 8018e80:	783b      	ldrb	r3, [r7, #0]
 8018e82:	e000      	b.n	8018e86 <lv_color_mix_premult+0x56>
 8018e84:	7a3b      	ldrb	r3, [r7, #8]
 8018e86:	733b      	strb	r3, [r7, #12]
    return ret;
 8018e88:	7b3b      	ldrb	r3, [r7, #12]
}
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	3714      	adds	r7, #20
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e94:	4770      	bx	lr

08018e96 <lv_color_make>:
{
 8018e96:	b480      	push	{r7}
 8018e98:	b083      	sub	sp, #12
 8018e9a:	af00      	add	r7, sp, #0
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	71fb      	strb	r3, [r7, #7]
 8018ea0:	460b      	mov	r3, r1
 8018ea2:	71bb      	strb	r3, [r7, #6]
 8018ea4:	4613      	mov	r3, r2
 8018ea6:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8018ea8:	797b      	ldrb	r3, [r7, #5]
 8018eaa:	09db      	lsrs	r3, r3, #7
 8018eac:	b2da      	uxtb	r2, r3
 8018eae:	79bb      	ldrb	r3, [r7, #6]
 8018eb0:	09db      	lsrs	r3, r3, #7
 8018eb2:	b2db      	uxtb	r3, r3
 8018eb4:	4313      	orrs	r3, r2
 8018eb6:	b2da      	uxtb	r2, r3
 8018eb8:	79fb      	ldrb	r3, [r7, #7]
 8018eba:	09db      	lsrs	r3, r3, #7
 8018ebc:	b2db      	uxtb	r3, r3
 8018ebe:	4313      	orrs	r3, r2
 8018ec0:	b2db      	uxtb	r3, r3
}
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	370c      	adds	r7, #12
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ecc:	4770      	bx	lr

08018ece <lv_color_hex>:
{
 8018ece:	b580      	push	{r7, lr}
 8018ed0:	b082      	sub	sp, #8
 8018ed2:	af00      	add	r7, sp, #0
 8018ed4:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	0c1b      	lsrs	r3, r3, #16
 8018eda:	b2d8      	uxtb	r0, r3
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	0a1b      	lsrs	r3, r3, #8
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	687a      	ldr	r2, [r7, #4]
 8018ee4:	b2d2      	uxtb	r2, r2
 8018ee6:	4619      	mov	r1, r3
 8018ee8:	f7ff ffd5 	bl	8018e96 <lv_color_make>
 8018eec:	4603      	mov	r3, r0
}
 8018eee:	4618      	mov	r0, r3
 8018ef0:	3708      	adds	r7, #8
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bd80      	pop	{r7, pc}

08018ef6 <lv_area_copy>:
{
 8018ef6:	b480      	push	{r7}
 8018ef8:	b083      	sub	sp, #12
 8018efa:	af00      	add	r7, sp, #0
 8018efc:	6078      	str	r0, [r7, #4]
 8018efe:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8018f0a:	683b      	ldr	r3, [r7, #0]
 8018f0c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8018f1e:	683b      	ldr	r3, [r7, #0]
 8018f20:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	80da      	strh	r2, [r3, #6]
}
 8018f28:	bf00      	nop
 8018f2a:	370c      	adds	r7, #12
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f32:	4770      	bx	lr

08018f34 <lv_area_get_width>:
{
 8018f34:	b480      	push	{r7}
 8018f36:	b083      	sub	sp, #12
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018f42:	b29a      	uxth	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f4a:	b29b      	uxth	r3, r3
 8018f4c:	1ad3      	subs	r3, r2, r3
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	3301      	adds	r3, #1
 8018f52:	b29b      	uxth	r3, r3
 8018f54:	b21b      	sxth	r3, r3
}
 8018f56:	4618      	mov	r0, r3
 8018f58:	370c      	adds	r7, #12
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f60:	4770      	bx	lr

08018f62 <lv_area_get_height>:
{
 8018f62:	b480      	push	{r7}
 8018f64:	b083      	sub	sp, #12
 8018f66:	af00      	add	r7, sp, #0
 8018f68:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018f70:	b29a      	uxth	r2, r3
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018f78:	b29b      	uxth	r3, r3
 8018f7a:	1ad3      	subs	r3, r2, r3
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	3301      	adds	r3, #1
 8018f80:	b29b      	uxth	r3, r3
 8018f82:	b21b      	sxth	r3, r3
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	370c      	adds	r7, #12
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8e:	4770      	bx	lr

08018f90 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 8018f90:	b590      	push	{r4, r7, lr}
 8018f92:	b0ad      	sub	sp, #180	; 0xb4
 8018f94:	af06      	add	r7, sp, #24
 8018f96:	60f8      	str	r0, [r7, #12]
 8018f98:	60b9      	str	r1, [r7, #8]
 8018f9a:	607a      	str	r2, [r7, #4]
 8018f9c:	603b      	str	r3, [r7, #0]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	689a      	ldr	r2, [r3, #8]
 8018fa2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018fa6:	4611      	mov	r1, r2
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f7ff ffa4 	bl	8018ef6 <lv_area_copy>

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 8018fae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	f7f8 feb8 	bl	8011d28 <lv_draw_mask_is_any>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8018fbe:	68bb      	ldr	r3, [r7, #8]
 8018fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d104      	bne.n	8018fd2 <lv_draw_sw_img_decoded+0x42>
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	885b      	ldrh	r3, [r3, #2]
 8018fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018fd0:	d001      	beq.n	8018fd6 <lv_draw_sw_img_decoded+0x46>
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	e000      	b.n	8018fd8 <lv_draw_sw_img_decoded+0x48>
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8018fdc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8018fe0:	f003 0301 	and.w	r3, r3, #1
 8018fe4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 8018fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018fec:	211c      	movs	r1, #28
 8018fee:	4618      	mov	r0, r3
 8018ff0:	f009 fc34 	bl	802285c <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 8018ff4:	68bb      	ldr	r3, [r7, #8]
 8018ff6:	7a9b      	ldrb	r3, [r3, #10]
 8018ff8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 8018ffc:	68bb      	ldr	r3, [r7, #8]
 8018ffe:	7adb      	ldrb	r3, [r3, #11]
 8019000:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019004:	b2db      	uxtb	r3, r3
 8019006:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    blend_dsc.blend_area = &blend_area;
 801900a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801900e:	633b      	str	r3, [r7, #48]	; 0x30

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8019010:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8019014:	f083 0301 	eor.w	r3, r3, #1
 8019018:	b2db      	uxtb	r3, r3
 801901a:	2b00      	cmp	r3, #0
 801901c:	d019      	beq.n	8019052 <lv_draw_sw_img_decoded+0xc2>
 801901e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8019022:	f083 0301 	eor.w	r3, r3, #1
 8019026:	b2db      	uxtb	r3, r3
 8019028:	2b00      	cmp	r3, #0
 801902a:	d012      	beq.n	8019052 <lv_draw_sw_img_decoded+0xc2>
 801902c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8019030:	2b04      	cmp	r3, #4
 8019032:	d10e      	bne.n	8019052 <lv_draw_sw_img_decoded+0xc2>
 8019034:	68bb      	ldr	r3, [r7, #8]
 8019036:	7a5b      	ldrb	r3, [r3, #9]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d10a      	bne.n	8019052 <lv_draw_sw_img_decoded+0xc2>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	637b      	str	r3, [r7, #52]	; 0x34

        blend_dsc.blend_area = coords;
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8019044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019048:	4619      	mov	r1, r3
 801904a:	68f8      	ldr	r0, [r7, #12]
 801904c:	f7fe f93c 	bl	80172c8 <lv_draw_sw_blend>
 8019050:	e1c6      	b.n	80193e0 <lv_draw_sw_img_decoded+0x450>
    }
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8019052:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8019056:	f083 0301 	eor.w	r3, r3, #1
 801905a:	b2db      	uxtb	r3, r3
 801905c:	2b00      	cmp	r3, #0
 801905e:	d02f      	beq.n	80190c0 <lv_draw_sw_img_decoded+0x130>
 8019060:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8019064:	f083 0301 	eor.w	r3, r3, #1
 8019068:	b2db      	uxtb	r3, r3
 801906a:	2b00      	cmp	r3, #0
 801906c:	d028      	beq.n	80190c0 <lv_draw_sw_img_decoded+0x130>
 801906e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8019072:	2b0e      	cmp	r3, #14
 8019074:	d124      	bne.n	80190c0 <lv_draw_sw_img_decoded+0x130>
        lv_area_t clipped_coords;
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	689a      	ldr	r2, [r3, #8]
 801907a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801907e:	6879      	ldr	r1, [r7, #4]
 8019080:	4618      	mov	r0, r3
 8019082:	f007 fc97 	bl	80209b4 <_lv_area_intersect>
 8019086:	4603      	mov	r3, r0
 8019088:	f083 0301 	eor.w	r3, r3, #1
 801908c:	b2db      	uxtb	r3, r3
 801908e:	2b00      	cmp	r3, #0
 8019090:	f040 81a6 	bne.w	80193e0 <lv_draw_sw_img_decoded+0x450>

        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8019094:	683b      	ldr	r3, [r7, #0]
 8019096:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = coords;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.src_buf = NULL;
 801909c:	2300      	movs	r3, #0
 801909e:	637b      	str	r3, [r7, #52]	; 0x34
        blend_dsc.color = draw_dsc->recolor;
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	7a1b      	ldrb	r3, [r3, #8]
 80190a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80190a8:	2302      	movs	r3, #2
 80190aa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        blend_dsc.blend_area = coords;
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80190b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80190b6:	4619      	mov	r1, r3
 80190b8:	68f8      	ldr	r0, [r7, #12]
 80190ba:	f7fe f905 	bl	80172c8 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 80190be:	e18f      	b.n	80193e0 <lv_draw_sw_img_decoded+0x450>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	689b      	ldr	r3, [r3, #8]
 80190c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        blend_area.x2 = draw_ctx->clip_area->x2;
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	689b      	ldr	r3, [r3, #8]
 80190d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80190d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        blend_area.y1 = draw_ctx->clip_area->y1;
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	689b      	ldr	r3, [r3, #8]
 80190dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80190e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        blend_area.y2 = draw_ctx->clip_area->y2;
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	689b      	ldr	r3, [r3, #8]
 80190e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80190ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_coord_t src_w = lv_area_get_width(coords);
 80190f0:	6878      	ldr	r0, [r7, #4]
 80190f2:	f7ff ff1f 	bl	8018f34 <lv_area_get_width>
 80190f6:	4603      	mov	r3, r0
 80190f8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t src_h = lv_area_get_height(coords);
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	f7ff ff30 	bl	8018f62 <lv_area_get_height>
 8019102:	4603      	mov	r3, r0
 8019104:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
 8019108:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801910c:	4618      	mov	r0, r3
 801910e:	f7ff ff28 	bl	8018f62 <lv_area_get_height>
 8019112:	4603      	mov	r3, r0
 8019114:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        lv_coord_t blend_w = lv_area_get_width(&blend_area);
 8019118:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801911c:	4618      	mov	r0, r3
 801911e:	f7ff ff09 	bl	8018f34 <lv_area_get_width>
 8019122:	4603      	mov	r3, r0
 8019124:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        uint32_t max_buf_size = MAX_BUF_SIZE;
 8019128:	f7f5 fbf4 	bl	800e914 <_lv_refr_get_disp_refreshing>
 801912c:	4603      	mov	r3, r0
 801912e:	4618      	mov	r0, r3
 8019130:	f006 ff1a 	bl	801ff68 <lv_disp_get_hor_res>
 8019134:	4603      	mov	r3, r0
 8019136:	67bb      	str	r3, [r7, #120]	; 0x78
        uint32_t blend_size = lv_area_get_size(&blend_area);
 8019138:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801913c:	4618      	mov	r0, r3
 801913e:	f007 fbac 	bl	802089a <lv_area_get_size>
 8019142:	6778      	str	r0, [r7, #116]	; 0x74
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
 8019144:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8019148:	673b      	str	r3, [r7, #112]	; 0x70
        if(blend_size <= max_buf_size) {
 801914a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801914c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801914e:	429a      	cmp	r2, r3
 8019150:	d804      	bhi.n	801915c <lv_draw_sw_img_decoded+0x1cc>
            buf_h = blend_h;
 8019152:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8019156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801915a:	e006      	b.n	801916a <lv_draw_sw_img_decoded+0x1da>
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 801915c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8019160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019162:	fbb2 f3f3 	udiv	r3, r2, r3
 8019166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 801916a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801916c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019170:	fb02 f303 	mul.w	r3, r2, r3
 8019174:	66fb      	str	r3, [r7, #108]	; 0x6c

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 8019176:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019178:	f008 ffc6 	bl	8022108 <lv_mem_buf_get>
 801917c:	66b8      	str	r0, [r7, #104]	; 0x68
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 801917e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019180:	f008 ffc2 	bl	8022108 <lv_mem_buf_get>
 8019184:	6678      	str	r0, [r7, #100]	; 0x64
        blend_dsc.mask_buf = mask_buf;
 8019186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019188:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = &blend_area;
 801918a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801918e:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8019190:	2302      	movs	r3, #2
 8019192:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        blend_dsc.src_buf = rgb_buf;
 8019196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019198:	637b      	str	r3, [r7, #52]	; 0x34
        lv_coord_t y_last = blend_area.y2;
 801919a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801919e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 80191a2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80191a6:	b29a      	uxth	r2, r3
 80191a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80191ac:	b29b      	uxth	r3, r3
 80191ae:	4413      	add	r3, r2
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	3b01      	subs	r3, #1
 80191b4:	b29b      	uxth	r3, r3
 80191b6:	b21b      	sxth	r3, r3
 80191b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 80191bc:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80191c0:	2b04      	cmp	r3, #4
 80191c2:	d109      	bne.n	80191d8 <lv_draw_sw_img_decoded+0x248>
 80191c4:	68bb      	ldr	r3, [r7, #8]
 80191c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d104      	bne.n	80191d8 <lv_draw_sw_img_decoded+0x248>
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 80191ce:	68bb      	ldr	r3, [r7, #8]
 80191d0:	885b      	ldrh	r3, [r3, #2]
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 80191d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80191d6:	d001      	beq.n	80191dc <lv_draw_sw_img_decoded+0x24c>
 80191d8:	2302      	movs	r3, #2
 80191da:	e000      	b.n	80191de <lv_draw_sw_img_decoded+0x24e>
 80191dc:	2301      	movs	r3, #1
 80191de:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 80191e2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80191e6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        while(blend_area.y1 <= y_last) {
 80191ea:	e0ec      	b.n	80193c6 <lv_draw_sw_img_decoded+0x436>
            /*Apply transformations if any or separate the channels*/
            lv_area_t transform_area;
            lv_area_copy(&transform_area, &blend_area);
 80191ec:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80191f0:	f107 0320 	add.w	r3, r7, #32
 80191f4:	4611      	mov	r1, r2
 80191f6:	4618      	mov	r0, r3
 80191f8:	f7ff fe7d 	bl	8018ef6 <lv_area_copy>
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019202:	b29b      	uxth	r3, r3
 8019204:	425b      	negs	r3, r3
 8019206:	b29b      	uxth	r3, r3
 8019208:	b219      	sxth	r1, r3
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019210:	b29b      	uxth	r3, r3
 8019212:	425b      	negs	r3, r3
 8019214:	b29b      	uxth	r3, r3
 8019216:	b21a      	sxth	r2, r3
 8019218:	f107 0320 	add.w	r3, r7, #32
 801921c:	4618      	mov	r0, r3
 801921e:	f007 fb93 	bl	8020948 <lv_area_move>
            if(transform) {
 8019222:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8019226:	2b00      	cmp	r3, #0
 8019228:	d018      	beq.n	801925c <lv_draw_sw_img_decoded+0x2cc>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 801922a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801922e:	f107 0120 	add.w	r1, r7, #32
 8019232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019234:	9305      	str	r3, [sp, #20]
 8019236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019238:	9304      	str	r3, [sp, #16]
 801923a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801923e:	9303      	str	r3, [sp, #12]
 8019240:	68bb      	ldr	r3, [r7, #8]
 8019242:	9302      	str	r3, [sp, #8]
 8019244:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8019248:	9301      	str	r3, [sp, #4]
 801924a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801924e:	9300      	str	r3, [sp, #0]
 8019250:	4613      	mov	r3, r2
 8019252:	683a      	ldr	r2, [r7, #0]
 8019254:	68f8      	ldr	r0, [r7, #12]
 8019256:	f7fb f860 	bl	801431a <lv_draw_transform>
 801925a:	e015      	b.n	8019288 <lv_draw_sw_img_decoded+0x2f8>
                                  draw_dsc, cf, rgb_buf, mask_buf);
            }
            else {
                convert_cb(&transform_area, src_buf, src_w, src_h, src_w, draw_dsc, cf, rgb_buf, mask_buf);
 801925c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 8019260:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8019264:	f107 0020 	add.w	r0, r7, #32
 8019268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801926a:	9304      	str	r3, [sp, #16]
 801926c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801926e:	9303      	str	r3, [sp, #12]
 8019270:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8019274:	9302      	str	r3, [sp, #8]
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	9301      	str	r3, [sp, #4]
 801927a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801927e:	9300      	str	r3, [sp, #0]
 8019280:	460b      	mov	r3, r1
 8019282:	6839      	ldr	r1, [r7, #0]
 8019284:	f000 f8af 	bl	80193e6 <convert_cb>
            }

            /*Apply recolor*/
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	7a5b      	ldrb	r3, [r3, #9]
 801928c:	2b02      	cmp	r3, #2
 801928e:	d932      	bls.n	80192f6 <lv_draw_sw_img_decoded+0x366>
                uint16_t premult_v[3];
                lv_opa_t recolor_opa = draw_dsc->recolor_opa;
 8019290:	68bb      	ldr	r3, [r7, #8]
 8019292:	7a5b      	ldrb	r3, [r3, #9]
 8019294:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                lv_color_t recolor = draw_dsc->recolor;
 8019298:	68bb      	ldr	r3, [r7, #8]
 801929a:	7a1b      	ldrb	r3, [r3, #8]
 801929c:	753b      	strb	r3, [r7, #20]
                lv_color_premult(recolor, recolor_opa, premult_v);
 801929e:	f107 0218 	add.w	r2, r7, #24
 80192a2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80192a6:	4619      	mov	r1, r3
 80192a8:	7d38      	ldrb	r0, [r7, #20]
 80192aa:	f7ff fd9d 	bl	8018de8 <lv_color_premult>
                recolor_opa = 255 - recolor_opa;
 80192ae:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80192b2:	43db      	mvns	r3, r3
 80192b4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                uint32_t i;
                for(i = 0; i < buf_size; i++) {
 80192b8:	2300      	movs	r3, #0
 80192ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80192be:	e015      	b.n	80192ec <lv_draw_sw_img_decoded+0x35c>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 80192c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80192c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80192c6:	4413      	add	r3, r2
 80192c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80192ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80192ce:	188c      	adds	r4, r1, r2
 80192d0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80192d4:	f107 0018 	add.w	r0, r7, #24
 80192d8:	7819      	ldrb	r1, [r3, #0]
 80192da:	f7ff fda9 	bl	8018e30 <lv_color_mix_premult>
 80192de:	4603      	mov	r3, r0
 80192e0:	7023      	strb	r3, [r4, #0]
                for(i = 0; i < buf_size; i++) {
 80192e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80192e6:	3301      	adds	r3, #1
 80192e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80192ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80192f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d3e4      	bcc.n	80192c0 <lv_draw_sw_img_decoded+0x330>
                }
            }
#if LV_DRAW_COMPLEX
            /*Apply the masks if any*/
            if(mask_any) {
 80192f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d03e      	beq.n	801937c <lv_draw_sw_img_decoded+0x3ec>
                lv_coord_t y;
                lv_opa_t * mask_buf_tmp = mask_buf;
 80192fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8019304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019308:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801930c:	e030      	b.n	8019370 <lv_draw_sw_img_decoded+0x3e0>
                    lv_draw_mask_res_t mask_res_line;
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 801930e:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 8019312:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8019316:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801931a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801931e:	f7f8 fc05 	bl	8011b2c <lv_draw_mask_apply>
 8019322:	4603      	mov	r3, r0
 8019324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 8019328:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801932c:	2b00      	cmp	r3, #0
 801932e:	d10a      	bne.n	8019346 <lv_draw_sw_img_decoded+0x3b6>
                        lv_memset_00(mask_buf_tmp, blend_w);
 8019330:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8019334:	4619      	mov	r1, r3
 8019336:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801933a:	f009 fa8f 	bl	802285c <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801933e:	2302      	movs	r3, #2
 8019340:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8019344:	e006      	b.n	8019354 <lv_draw_sw_img_decoded+0x3c4>
                    }
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 8019346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801934a:	2b02      	cmp	r3, #2
 801934c:	d102      	bne.n	8019354 <lv_draw_sw_img_decoded+0x3c4>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801934e:	2302      	movs	r3, #2
 8019350:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                    }
                    mask_buf_tmp += blend_w;
 8019354:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8019358:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801935c:	4413      	add	r3, r2
 801935e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8019362:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8019366:	b29b      	uxth	r3, r3
 8019368:	3301      	adds	r3, #1
 801936a:	b29b      	uxth	r3, r3
 801936c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8019370:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8019374:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 8019378:	429a      	cmp	r2, r3
 801937a:	ddc8      	ble.n	801930e <lv_draw_sw_img_decoded+0x37e>
                }
            }
#endif

            /*Blend*/
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801937c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019380:	4619      	mov	r1, r3
 8019382:	68f8      	ldr	r0, [r7, #12]
 8019384:	f7fd ffa0 	bl	80172c8 <lv_draw_sw_blend>

            /*Go the the next lines*/
            blend_area.y1 = blend_area.y2 + 1;
 8019388:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801938c:	b29b      	uxth	r3, r3
 801938e:	3301      	adds	r3, #1
 8019390:	b29b      	uxth	r3, r3
 8019392:	b21b      	sxth	r3, r3
 8019394:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 8019398:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801939c:	b29a      	uxth	r2, r3
 801939e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80193a2:	b29b      	uxth	r3, r3
 80193a4:	4413      	add	r3, r2
 80193a6:	b29b      	uxth	r3, r3
 80193a8:	3b01      	subs	r3, #1
 80193aa:	b29b      	uxth	r3, r3
 80193ac:	b21b      	sxth	r3, r3
 80193ae:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 80193b2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80193b6:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 80193ba:	429a      	cmp	r2, r3
 80193bc:	da03      	bge.n	80193c6 <lv_draw_sw_img_decoded+0x436>
 80193be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80193c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        while(blend_area.y1 <= y_last) {
 80193c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80193ca:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 80193ce:	429a      	cmp	r2, r3
 80193d0:	f6bf af0c 	bge.w	80191ec <lv_draw_sw_img_decoded+0x25c>
        }

        lv_mem_buf_release(mask_buf);
 80193d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80193d6:	f008 ff43 	bl	8022260 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 80193da:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80193dc:	f008 ff40 	bl	8022260 <lv_mem_buf_release>
    }
}
 80193e0:	379c      	adds	r7, #156	; 0x9c
 80193e2:	46bd      	mov	sp, r7
 80193e4:	bd90      	pop	{r4, r7, pc}

080193e6 <convert_cb>:
 **********************/

/* Separate the image channels to RGB and Alpha to match LV_COLOR_DEPTH settings*/
static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 80193e6:	b590      	push	{r4, r7, lr}
 80193e8:	b093      	sub	sp, #76	; 0x4c
 80193ea:	af00      	add	r7, sp, #0
 80193ec:	60f8      	str	r0, [r7, #12]
 80193ee:	60b9      	str	r1, [r7, #8]
 80193f0:	4611      	mov	r1, r2
 80193f2:	461a      	mov	r2, r3
 80193f4:	460b      	mov	r3, r1
 80193f6:	80fb      	strh	r3, [r7, #6]
 80193f8:	4613      	mov	r3, r2
 80193fa:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(draw_dsc);
    LV_UNUSED(src_h);
    LV_UNUSED(src_w);

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	647b      	str	r3, [r7, #68]	; 0x44
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8019400:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8019404:	2b04      	cmp	r3, #4
 8019406:	d003      	beq.n	8019410 <convert_cb+0x2a>
 8019408:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801940c:	2b06      	cmp	r3, #6
 801940e:	d169      	bne.n	80194e4 <convert_cb+0xfe>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 8019410:	68f8      	ldr	r0, [r7, #12]
 8019412:	f007 fa42 	bl	802089a <lv_area_get_size>
 8019416:	6278      	str	r0, [r7, #36]	; 0x24
        lv_memset_ff(abuf, px_cnt);
 8019418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801941a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801941c:	f009 fa9f 	bl	802295e <lv_memset_ff>

        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8019420:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019424:	68fa      	ldr	r2, [r7, #12]
 8019426:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801942a:	fb02 f303 	mul.w	r3, r2, r3
 801942e:	461a      	mov	r2, r3
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019436:	4413      	add	r3, r2
 8019438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801943a:	4413      	add	r3, r2
 801943c:	647b      	str	r3, [r7, #68]	; 0x44
        uint32_t dest_w = lv_area_get_width(dest_area);
 801943e:	68f8      	ldr	r0, [r7, #12]
 8019440:	f7ff fd78 	bl	8018f34 <lv_area_get_width>
 8019444:	4603      	mov	r3, r0
 8019446:	623b      	str	r3, [r7, #32]
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 8019448:	6a3b      	ldr	r3, [r7, #32]
 801944a:	61fb      	str	r3, [r7, #28]

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 801944c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8019450:	837b      	strh	r3, [r7, #26]
        lv_color_t * cbuf_tmp = cbuf;
 8019452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019454:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	885b      	ldrh	r3, [r3, #2]
 801945a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801945e:	e014      	b.n	801948a <convert_cb+0xa4>
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 8019460:	69fa      	ldr	r2, [r7, #28]
 8019462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019464:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019466:	f008 ff53 	bl	8022310 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 801946a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801946e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019470:	4413      	add	r3, r2
 8019472:	647b      	str	r3, [r7, #68]	; 0x44
            cbuf_tmp += dest_w;
 8019474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019476:	6a3b      	ldr	r3, [r7, #32]
 8019478:	4413      	add	r3, r2
 801947a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801947c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8019480:	b29b      	uxth	r3, r3
 8019482:	3301      	adds	r3, #1
 8019484:	b29b      	uxth	r3, r3
 8019486:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019490:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8019494:	429a      	cmp	r2, r3
 8019496:	dde3      	ble.n	8019460 <convert_cb+0x7a>
        }

        /*Make "holes" for with Chroma keying*/
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8019498:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801949c:	2b06      	cmp	r3, #6
 801949e:	f040 810f 	bne.w	80196c0 <convert_cb+0x2da>
            uint32_t i;
            lv_color_t chk = LV_COLOR_CHROMA_KEY;
 80194a2:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80194a6:	f7ff fd12 	bl	8018ece <lv_color_hex>
 80194aa:	4603      	mov	r3, r0
 80194ac:	743b      	strb	r3, [r7, #16]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
            uint8_t * cbuf_uint = (uint8_t *)cbuf;
 80194ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80194b0:	617b      	str	r3, [r7, #20]
            uint8_t chk_v = chk.full;
 80194b2:	7c3b      	ldrb	r3, [r7, #16]
 80194b4:	74fb      	strb	r3, [r7, #19]
            uint16_t chk_v = chk.full;
#elif LV_COLOR_DEPTH == 32
            uint32_t * cbuf_uint = (uint32_t *)cbuf;
            uint32_t chk_v = chk.full;
#endif
            for(i = 0; i < px_cnt; i++) {
 80194b6:	2300      	movs	r3, #0
 80194b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80194ba:	e00e      	b.n	80194da <convert_cb+0xf4>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 80194bc:	697a      	ldr	r2, [r7, #20]
 80194be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194c0:	4413      	add	r3, r2
 80194c2:	781b      	ldrb	r3, [r3, #0]
 80194c4:	7cfa      	ldrb	r2, [r7, #19]
 80194c6:	429a      	cmp	r2, r3
 80194c8:	d104      	bne.n	80194d4 <convert_cb+0xee>
 80194ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80194cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ce:	4413      	add	r3, r2
 80194d0:	2200      	movs	r2, #0
 80194d2:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < px_cnt; i++) {
 80194d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d6:	3301      	adds	r3, #1
 80194d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80194da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194de:	429a      	cmp	r2, r3
 80194e0:	d3ec      	bcc.n	80194bc <convert_cb+0xd6>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80194e2:	e0ed      	b.n	80196c0 <convert_cb+0x2da>
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 80194e4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80194e8:	2b05      	cmp	r3, #5
 80194ea:	d16a      	bne.n	80195c2 <convert_cb+0x1dc>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80194ec:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80194f0:	68fa      	ldr	r2, [r7, #12]
 80194f2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80194f6:	fb02 f303 	mul.w	r3, r2, r3
 80194fa:	68fa      	ldr	r2, [r7, #12]
 80194fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019500:	4413      	add	r3, r2
 8019502:	005b      	lsls	r3, r3, #1
 8019504:	461a      	mov	r2, r3
 8019506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019508:	4413      	add	r3, r2
 801950a:	647b      	str	r3, [r7, #68]	; 0x44

        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 801950c:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8019510:	68f8      	ldr	r0, [r7, #12]
 8019512:	f7ff fd0f 	bl	8018f34 <lv_area_get_width>
 8019516:	4603      	mov	r3, r0
 8019518:	b29b      	uxth	r3, r3
 801951a:	1ae3      	subs	r3, r4, r3
 801951c:	b29b      	uxth	r3, r3
 801951e:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8019520:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8019522:	005b      	lsls	r3, r3, #1
 8019524:	b29b      	uxth	r3, r3
 8019526:	85fb      	strh	r3, [r7, #46]	; 0x2e

        lv_coord_t dest_h = lv_area_get_height(dest_area);
 8019528:	68f8      	ldr	r0, [r7, #12]
 801952a:	f7ff fd1a 	bl	8018f62 <lv_area_get_height>
 801952e:	4603      	mov	r3, r0
 8019530:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 8019532:	68f8      	ldr	r0, [r7, #12]
 8019534:	f7ff fcfe 	bl	8018f34 <lv_area_get_width>
 8019538:	4603      	mov	r3, r0
 801953a:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(y = 0; y < dest_h; y++) {
 801953c:	2300      	movs	r3, #0
 801953e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019542:	e037      	b.n	80195b4 <convert_cb+0x1ce>
            for(x = 0; x < dest_w; x++) {
 8019544:	2300      	movs	r3, #0
 8019546:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801954a:	e017      	b.n	801957c <convert_cb+0x196>
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801954c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019550:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019552:	4413      	add	r3, r2
 8019554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019556:	7852      	ldrb	r2, [r2, #1]
 8019558:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                cbuf[x].full = *src_tmp8;
 801955a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801955e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019560:	4413      	add	r3, r2
 8019562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019564:	7812      	ldrb	r2, [r2, #0]
 8019566:	701a      	strb	r2, [r3, #0]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
#elif LV_COLOR_DEPTH == 32
                cbuf[x] = *((lv_color_t *) src_tmp8);
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 8019568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801956a:	3302      	adds	r3, #2
 801956c:	647b      	str	r3, [r7, #68]	; 0x44
            for(x = 0; x < dest_w; x++) {
 801956e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019572:	b29b      	uxth	r3, r3
 8019574:	3301      	adds	r3, #1
 8019576:	b29b      	uxth	r3, r3
 8019578:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801957c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8019580:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019584:	429a      	cmp	r2, r3
 8019586:	dbe1      	blt.n	801954c <convert_cb+0x166>

            }
            cbuf += dest_w;
 8019588:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801958c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801958e:	4413      	add	r3, r2
 8019590:	667b      	str	r3, [r7, #100]	; 0x64
            abuf += dest_w;
 8019592:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019598:	4413      	add	r3, r2
 801959a:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_new_line_step_byte;
 801959c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80195a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80195a2:	4413      	add	r3, r2
 80195a4:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 80195a6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80195aa:	b29b      	uxth	r3, r3
 80195ac:	3301      	adds	r3, #1
 80195ae:	b29b      	uxth	r3, r3
 80195b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80195b4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80195b8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80195bc:	429a      	cmp	r2, r3
 80195be:	dbc1      	blt.n	8019544 <convert_cb+0x15e>
            lv_memcpy(abuf, src_tmp8, dest_w);
            abuf += dest_w;
            src_tmp8 += src_stride;
        }
    }
}
 80195c0:	e07f      	b.n	80196c2 <convert_cb+0x2dc>
    else if(cf == LV_IMG_CF_RGB565A8) {
 80195c2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80195c6:	2b14      	cmp	r3, #20
 80195c8:	d17b      	bne.n	80196c2 <convert_cb+0x2dc>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 80195ca:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80195ce:	68fa      	ldr	r2, [r7, #12]
 80195d0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80195d4:	fb02 f303 	mul.w	r3, r2, r3
 80195d8:	461a      	mov	r2, r3
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80195e0:	4413      	add	r3, r2
 80195e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80195e4:	4413      	add	r3, r2
 80195e6:	647b      	str	r3, [r7, #68]	; 0x44
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80195e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80195ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t dest_h = lv_area_get_height(dest_area);
 80195ee:	68f8      	ldr	r0, [r7, #12]
 80195f0:	f7ff fcb7 	bl	8018f62 <lv_area_get_height>
 80195f4:	4603      	mov	r3, r0
 80195f6:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 80195f8:	68f8      	ldr	r0, [r7, #12]
 80195fa:	f7ff fc9b 	bl	8018f34 <lv_area_get_width>
 80195fe:	4603      	mov	r3, r0
 8019600:	867b      	strh	r3, [r7, #50]	; 0x32
        for(y = 0; y < dest_h; y++) {
 8019602:	2300      	movs	r3, #0
 8019604:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019608:	e017      	b.n	801963a <convert_cb+0x254>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 801960a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801960e:	461a      	mov	r2, r3
 8019610:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019612:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8019614:	f008 fe7c 	bl	8022310 <lv_memcpy>
            cbuf += dest_w;
 8019618:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801961c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801961e:	4413      	add	r3, r2
 8019620:	667b      	str	r3, [r7, #100]	; 0x64
            src_tmp8 += src_stride_byte;
 8019622:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019628:	4413      	add	r3, r2
 801962a:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801962c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8019630:	b29b      	uxth	r3, r3
 8019632:	3301      	adds	r3, #1
 8019634:	b29b      	uxth	r3, r3
 8019636:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801963a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801963e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8019642:	429a      	cmp	r2, r3
 8019644:	dbe1      	blt.n	801960a <convert_cb+0x224>
        src_tmp8 = (const uint8_t *)src_buf;
 8019646:	68bb      	ldr	r3, [r7, #8]
 8019648:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 801964a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801964e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8019652:	fb02 f303 	mul.w	r3, r2, r3
 8019656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019658:	4413      	add	r3, r2
 801965a:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 801965c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019660:	68fa      	ldr	r2, [r7, #12]
 8019662:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019666:	fb02 f303 	mul.w	r3, r2, r3
 801966a:	68fa      	ldr	r2, [r7, #12]
 801966c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019670:	4413      	add	r3, r2
 8019672:	461a      	mov	r2, r3
 8019674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019676:	4413      	add	r3, r2
 8019678:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801967a:	2300      	movs	r3, #0
 801967c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019680:	e017      	b.n	80196b2 <convert_cb+0x2cc>
            lv_memcpy(abuf, src_tmp8, dest_w);
 8019682:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8019686:	461a      	mov	r2, r3
 8019688:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801968a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801968c:	f008 fe40 	bl	8022310 <lv_memcpy>
            abuf += dest_w;
 8019690:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8019694:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019696:	4413      	add	r3, r2
 8019698:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_stride;
 801969a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801969e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80196a0:	4413      	add	r3, r2
 80196a2:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 80196a4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80196a8:	b29b      	uxth	r3, r3
 80196aa:	3301      	adds	r3, #1
 80196ac:	b29b      	uxth	r3, r3
 80196ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80196b2:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80196b6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80196ba:	429a      	cmp	r2, r3
 80196bc:	dbe1      	blt.n	8019682 <convert_cb+0x29c>
}
 80196be:	e000      	b.n	80196c2 <convert_cb+0x2dc>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80196c0:	bf00      	nop
}
 80196c2:	bf00      	nop
 80196c4:	374c      	adds	r7, #76	; 0x4c
 80196c6:	46bd      	mov	sp, r7
 80196c8:	bd90      	pop	{r4, r7, pc}

080196ca <lv_area_get_width>:
{
 80196ca:	b480      	push	{r7}
 80196cc:	b083      	sub	sp, #12
 80196ce:	af00      	add	r7, sp, #0
 80196d0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80196d8:	b29a      	uxth	r2, r3
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80196e0:	b29b      	uxth	r3, r3
 80196e2:	1ad3      	subs	r3, r2, r3
 80196e4:	b29b      	uxth	r3, r3
 80196e6:	3301      	adds	r3, #1
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	b21b      	sxth	r3, r3
}
 80196ec:	4618      	mov	r0, r3
 80196ee:	370c      	adds	r7, #12
 80196f0:	46bd      	mov	sp, r7
 80196f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f6:	4770      	bx	lr

080196f8 <lv_area_get_height>:
{
 80196f8:	b480      	push	{r7}
 80196fa:	b083      	sub	sp, #12
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019706:	b29a      	uxth	r2, r3
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801970e:	b29b      	uxth	r3, r3
 8019710:	1ad3      	subs	r3, r2, r3
 8019712:	b29b      	uxth	r3, r3
 8019714:	3301      	adds	r3, #1
 8019716:	b29b      	uxth	r3, r3
 8019718:	b21b      	sxth	r3, r3
}
 801971a:	4618      	mov	r0, r3
 801971c:	370c      	adds	r7, #12
 801971e:	46bd      	mov	sp, r7
 8019720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019724:	4770      	bx	lr

08019726 <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 8019726:	b580      	push	{r7, lr}
 8019728:	b08a      	sub	sp, #40	; 0x28
 801972a:	af00      	add	r7, sp, #0
 801972c:	60f8      	str	r0, [r7, #12]
 801972e:	60b9      	str	r1, [r7, #8]
 8019730:	4613      	mov	r3, r2
 8019732:	71fb      	strb	r3, [r7, #7]
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8019734:	79fb      	ldrb	r3, [r7, #7]
 8019736:	f003 0301 	and.w	r3, r3, #1
 801973a:	2b00      	cmp	r3, #0
 801973c:	d001      	beq.n	8019742 <lv_draw_sw_layer_create+0x1c>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 801973e:	2300      	movs	r3, #0
 8019740:	e0df      	b.n	8019902 <lv_draw_sw_layer_create+0x1dc>
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 8019742:	68bb      	ldr	r3, [r7, #8]
 8019744:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8019746:	79fb      	ldrb	r3, [r7, #7]
 8019748:	f003 0301 	and.w	r3, r3, #1
 801974c:	2b00      	cmp	r3, #0
 801974e:	d001      	beq.n	8019754 <lv_draw_sw_layer_create+0x2e>
 8019750:	2302      	movs	r3, #2
 8019752:	e000      	b.n	8019756 <lv_draw_sw_layer_create+0x30>
 8019754:	2301      	movs	r3, #1
 8019756:	623b      	str	r3, [r7, #32]
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8019758:	79fb      	ldrb	r3, [r7, #7]
 801975a:	f003 0302 	and.w	r3, r3, #2
 801975e:	2b00      	cmp	r3, #0
 8019760:	d074      	beq.n	801984c <lv_draw_sw_layer_create+0x126>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8019762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019764:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8019766:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 801976a:	f361 031e 	bfi	r3, r1, #0, #31
 801976e:	6293      	str	r3, [r2, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8019770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019772:	4618      	mov	r0, r3
 8019774:	f007 f891 	bl	802089a <lv_area_get_size>
 8019778:	4602      	mov	r2, r0
 801977a:	6a3b      	ldr	r3, [r7, #32]
 801977c:	fb02 f303 	mul.w	r3, r2, r3
 8019780:	61bb      	str	r3, [r7, #24]
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8019782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019786:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801978a:	461a      	mov	r2, r3
 801978c:	69bb      	ldr	r3, [r7, #24]
 801978e:	4293      	cmp	r3, r2
 8019790:	d207      	bcs.n	80197a2 <lv_draw_sw_layer_create+0x7c>
 8019792:	69bb      	ldr	r3, [r7, #24]
 8019794:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801979a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801979c:	f361 031e 	bfi	r3, r1, #0, #31
 80197a0:	6293      	str	r3, [r2, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 80197a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197a6:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80197aa:	4618      	mov	r0, r3
 80197ac:	f008 fc22 	bl	8021ff4 <lv_mem_alloc>
 80197b0:	4602      	mov	r2, r0
 80197b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b4:	615a      	str	r2, [r3, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 80197b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b8:	695b      	ldr	r3, [r3, #20]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d116      	bne.n	80197ec <lv_draw_sw_layer_create+0xc6>
            LV_LOG_WARN("Cannot allocate %"LV_PRIu32" bytes for layer buffer. Allocating %"LV_PRIu32" bytes instead. (Reduced performance)",
                        (uint32_t)layer_sw_ctx->buf_size_bytes, (uint32_t)LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE * px_size);
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 80197be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80197c2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80197c6:	f361 031e 	bfi	r3, r1, #0, #31
 80197ca:	6293      	str	r3, [r2, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 80197cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197d0:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80197d4:	4618      	mov	r0, r3
 80197d6:	f008 fc0d 	bl	8021ff4 <lv_mem_alloc>
 80197da:	4602      	mov	r2, r0
 80197dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197de:	615a      	str	r2, [r3, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 80197e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e2:	695b      	ldr	r3, [r3, #20]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d101      	bne.n	80197ec <lv_draw_sw_layer_create+0xc6>
                return NULL;
 80197e8:	2300      	movs	r3, #0
 80197ea:	e08a      	b.n	8019902 <lv_draw_sw_layer_create+0x1dc>
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 80197ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197f0:	3308      	adds	r3, #8
 80197f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80197f6:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 80197fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019802:	81da      	strh	r2, [r3, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
 8019804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019806:	3308      	adds	r3, #8
 8019808:	4618      	mov	r0, r3
 801980a:	f7ff ff5e 	bl	80196ca <lv_area_get_width>
 801980e:	4603      	mov	r3, r0
 8019810:	82fb      	strh	r3, [r7, #22]
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8019812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019816:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801981a:	461a      	mov	r2, r3
 801981c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019820:	fb92 f3f3 	sdiv	r3, r2, r3
 8019824:	2b00      	cmp	r3, #0
 8019826:	da00      	bge.n	801982a <lv_draw_sw_layer_create+0x104>
 8019828:	3301      	adds	r3, #1
 801982a:	105b      	asrs	r3, r3, #1
 801982c:	b21a      	sxth	r2, r3
 801982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019830:	821a      	strh	r2, [r3, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8019832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019836:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801983a:	461a      	mov	r2, r3
 801983c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019840:	fb92 f3f3 	sdiv	r3, r2, r3
 8019844:	b21a      	sxth	r2, r3
 8019846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019848:	825a      	strh	r2, [r3, #18]
 801984a:	e059      	b.n	8019900 <lv_draw_sw_layer_create+0x1da>
    }
    else {
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 801984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019850:	3308      	adds	r3, #8
 8019852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019856:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 801985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801985c:	4618      	mov	r0, r3
 801985e:	f007 f81c 	bl	802089a <lv_area_get_size>
 8019862:	4603      	mov	r3, r0
 8019864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019868:	6a3a      	ldr	r2, [r7, #32]
 801986a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801986e:	fb03 f202 	mul.w	r2, r3, r2
 8019872:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8019876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019878:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801987a:	f362 031e 	bfi	r3, r2, #0, #31
 801987e:	628b      	str	r3, [r1, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8019880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019884:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8019888:	4618      	mov	r0, r3
 801988a:	f008 fbb3 	bl	8021ff4 <lv_mem_alloc>
 801988e:	4602      	mov	r2, r0
 8019890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019892:	615a      	str	r2, [r3, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8019894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019896:	695a      	ldr	r2, [r3, #20]
 8019898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801989c:	f3c3 031e 	ubfx	r3, r3, #0, #31
 80198a0:	4619      	mov	r1, r3
 80198a2:	4610      	mov	r0, r2
 80198a4:	f008 ffda 	bl	802285c <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 80198a8:	79fb      	ldrb	r3, [r7, #7]
 80198aa:	f003 0301 	and.w	r3, r3, #1
 80198ae:	b2d9      	uxtb	r1, r3
 80198b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198b2:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 80198b6:	f361 13c7 	bfi	r3, r1, #7, #1
 80198ba:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 80198be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198c0:	695b      	ldr	r3, [r3, #20]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d101      	bne.n	80198ca <lv_draw_sw_layer_create+0x1a4>
            return NULL;
 80198c6:	2300      	movs	r3, #0
 80198c8:	e01b      	b.n	8019902 <lv_draw_sw_layer_create+0x1dc>
        }

        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 80198ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198cc:	695a      	ldr	r2, [r3, #20]
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	601a      	str	r2, [r3, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 80198d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198d4:	f103 0208 	add.w	r2, r3, #8
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 80198dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198de:	f103 0208 	add.w	r2, r3, #8
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	609a      	str	r2, [r3, #8]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 80198e6:	f7f5 f815 	bl	800e914 <_lv_refr_get_disp_refreshing>
 80198ea:	61f8      	str	r0, [r7, #28]
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 80198ec:	69fb      	ldr	r3, [r7, #28]
 80198ee:	681a      	ldr	r2, [r3, #0]
 80198f0:	79fb      	ldrb	r3, [r7, #7]
 80198f2:	f003 0301 	and.w	r3, r3, #1
 80198f6:	b2d9      	uxtb	r1, r3
 80198f8:	7c13      	ldrb	r3, [r2, #16]
 80198fa:	f361 1386 	bfi	r3, r1, #6, #1
 80198fe:	7413      	strb	r3, [r2, #16]
    }

    return layer_ctx;
 8019900:	68bb      	ldr	r3, [r7, #8]
}
 8019902:	4618      	mov	r0, r3
 8019904:	3728      	adds	r7, #40	; 0x28
 8019906:	46bd      	mov	sp, r7
 8019908:	bd80      	pop	{r7, pc}

0801990a <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 801990a:	b580      	push	{r7, lr}
 801990c:	b086      	sub	sp, #24
 801990e:	af00      	add	r7, sp, #0
 8019910:	60f8      	str	r0, [r7, #12]
 8019912:	60b9      	str	r1, [r7, #8]
 8019914:	4613      	mov	r3, r2
 8019916:	71fb      	strb	r3, [r7, #7]

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 8019918:	68bb      	ldr	r3, [r7, #8]
 801991a:	617b      	str	r3, [r7, #20]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801991c:	f7f4 fffa 	bl	800e914 <_lv_refr_get_disp_refreshing>
 8019920:	6138      	str	r0, [r7, #16]
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8019922:	79fb      	ldrb	r3, [r7, #7]
 8019924:	f003 0301 	and.w	r3, r3, #1
 8019928:	2b00      	cmp	r3, #0
 801992a:	d017      	beq.n	801995c <lv_draw_sw_layer_adjust+0x52>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	695a      	ldr	r2, [r3, #20]
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019934:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8019938:	4619      	mov	r1, r3
 801993a:	4610      	mov	r0, r2
 801993c:	f008 ff8e 	bl	802285c <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 8019940:	697a      	ldr	r2, [r7, #20]
 8019942:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8019946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801994a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 801994e:	693b      	ldr	r3, [r7, #16]
 8019950:	681a      	ldr	r2, [r3, #0]
 8019952:	7c13      	ldrb	r3, [r2, #16]
 8019954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019958:	7413      	strb	r3, [r2, #16]
 801995a:	e00c      	b.n	8019976 <lv_draw_sw_layer_adjust+0x6c>
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 801995c:	697a      	ldr	r2, [r7, #20]
 801995e:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 8019962:	f36f 13c7 	bfc	r3, #7, #1
 8019966:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 801996a:	693b      	ldr	r3, [r7, #16]
 801996c:	681a      	ldr	r2, [r3, #0]
 801996e:	7c13      	ldrb	r3, [r2, #16]
 8019970:	f36f 1386 	bfc	r3, #6, #1
 8019974:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 8019976:	68bb      	ldr	r3, [r7, #8]
 8019978:	695a      	ldr	r2, [r3, #20]
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 801997e:	68bb      	ldr	r3, [r7, #8]
 8019980:	f103 0208 	add.w	r2, r3, #8
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 8019988:	68bb      	ldr	r3, [r7, #8]
 801998a:	f103 0208 	add.w	r2, r3, #8
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	609a      	str	r2, [r3, #8]
}
 8019992:	bf00      	nop
 8019994:	3718      	adds	r7, #24
 8019996:	46bd      	mov	sp, r7
 8019998:	bd80      	pop	{r7, pc}

0801999a <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 801999a:	b580      	push	{r7, lr}
 801999c:	b08a      	sub	sp, #40	; 0x28
 801999e:	af00      	add	r7, sp, #0
 80199a0:	60f8      	str	r0, [r7, #12]
 80199a2:	60b9      	str	r1, [r7, #8]
 80199a4:	607a      	str	r2, [r7, #4]
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 80199a6:	68bb      	ldr	r3, [r7, #8]
 80199a8:	627b      	str	r3, [r7, #36]	; 0x24

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	61fb      	str	r3, [r7, #28]
    img.header.always_zero = 0;
 80199b0:	7d3b      	ldrb	r3, [r7, #20]
 80199b2:	f36f 1347 	bfc	r3, #5, #3
 80199b6:	753b      	strb	r3, [r7, #20]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	685b      	ldr	r3, [r3, #4]
 80199bc:	4618      	mov	r0, r3
 80199be:	f7ff fe84 	bl	80196ca <lv_area_get_width>
 80199c2:	4603      	mov	r3, r0
 80199c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80199c8:	b29a      	uxth	r2, r3
 80199ca:	697b      	ldr	r3, [r7, #20]
 80199cc:	f362 2394 	bfi	r3, r2, #10, #11
 80199d0:	617b      	str	r3, [r7, #20]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	685b      	ldr	r3, [r3, #4]
 80199d6:	4618      	mov	r0, r3
 80199d8:	f7ff fe8e 	bl	80196f8 <lv_area_get_height>
 80199dc:	4603      	mov	r3, r0
 80199de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80199e2:	b29a      	uxth	r2, r3
 80199e4:	8afb      	ldrh	r3, [r7, #22]
 80199e6:	f362 134f 	bfi	r3, r2, #5, #11
 80199ea:	82fb      	strh	r3, [r7, #22]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 80199ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80199f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80199f6:	b2db      	uxtb	r3, r3
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d001      	beq.n	8019a00 <lv_draw_sw_layer_blend+0x66>
 80199fc:	2205      	movs	r2, #5
 80199fe:	e000      	b.n	8019a02 <lv_draw_sw_layer_blend+0x68>
 8019a00:	2204      	movs	r2, #4
 8019a02:	7d3b      	ldrb	r3, [r7, #20]
 8019a04:	f362 0304 	bfi	r3, r2, #0, #5
 8019a08:	753b      	strb	r3, [r7, #20]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 8019a0a:	68bb      	ldr	r3, [r7, #8]
 8019a0c:	6a1a      	ldr	r2, [r3, #32]
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8019a12:	68bb      	ldr	r3, [r7, #8]
 8019a14:	69da      	ldr	r2, [r3, #28]
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	699a      	ldr	r2, [r3, #24]
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8019a22:	f7f4 ff77 	bl	800e914 <_lv_refr_get_disp_refreshing>
 8019a26:	6238      	str	r0, [r7, #32]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8019a28:	6a3b      	ldr	r3, [r7, #32]
 8019a2a:	681a      	ldr	r2, [r3, #0]
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8019a32:	7c13      	ldrb	r3, [r2, #16]
 8019a34:	f361 1386 	bfi	r3, r1, #6, #1
 8019a38:	7413      	strb	r3, [r2, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8019a3a:	68bb      	ldr	r3, [r7, #8]
 8019a3c:	f103 0208 	add.w	r2, r3, #8
 8019a40:	f107 0314 	add.w	r3, r7, #20
 8019a44:	6879      	ldr	r1, [r7, #4]
 8019a46:	68f8      	ldr	r0, [r7, #12]
 8019a48:	f7f6 fcd2 	bl	80103f0 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 8019a4c:	68f8      	ldr	r0, [r7, #12]
 8019a4e:	f7f6 fc25 	bl	801029c <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 8019a52:	f107 0314 	add.w	r3, r7, #20
 8019a56:	4618      	mov	r0, r3
 8019a58:	f7fa fd92 	bl	8014580 <lv_img_cache_invalidate_src>
}
 8019a5c:	bf00      	nop
 8019a5e:	3728      	adds	r7, #40	; 0x28
 8019a60:	46bd      	mov	sp, r7
 8019a62:	bd80      	pop	{r7, pc}

08019a64 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 8019a64:	b580      	push	{r7, lr}
 8019a66:	b082      	sub	sp, #8
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	6078      	str	r0, [r7, #4]
 8019a6c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 8019a6e:	683b      	ldr	r3, [r7, #0]
 8019a70:	695b      	ldr	r3, [r3, #20]
 8019a72:	4618      	mov	r0, r3
 8019a74:	f008 faee 	bl	8022054 <lv_mem_free>
}
 8019a78:	bf00      	nop
 8019a7a:	3708      	adds	r7, #8
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bd80      	pop	{r7, pc}

08019a80 <lv_area_copy>:
{
 8019a80:	b480      	push	{r7}
 8019a82:	b083      	sub	sp, #12
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8019a94:	683b      	ldr	r3, [r7, #0]
 8019a96:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8019a9e:	683b      	ldr	r3, [r7, #0]
 8019aa0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	80da      	strh	r2, [r3, #6]
}
 8019ab2:	bf00      	nop
 8019ab4:	370c      	adds	r7, #12
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019abc:	4770      	bx	lr

08019abe <lv_area_get_width>:
{
 8019abe:	b480      	push	{r7}
 8019ac0:	b083      	sub	sp, #12
 8019ac2:	af00      	add	r7, sp, #0
 8019ac4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019acc:	b29a      	uxth	r2, r3
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	1ad3      	subs	r3, r2, r3
 8019ad8:	b29b      	uxth	r3, r3
 8019ada:	3301      	adds	r3, #1
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	b21b      	sxth	r3, r3
}
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	370c      	adds	r7, #12
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aea:	4770      	bx	lr

08019aec <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 8019aec:	b590      	push	{r4, r7, lr}
 8019aee:	b09d      	sub	sp, #116	; 0x74
 8019af0:	af02      	add	r7, sp, #8
 8019af2:	60f8      	str	r0, [r7, #12]
 8019af4:	60b9      	str	r1, [r7, #8]
 8019af6:	607a      	str	r2, [r7, #4]
 8019af8:	603b      	str	r3, [r7, #0]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 8019afa:	68bb      	ldr	r3, [r7, #8]
 8019afc:	6818      	ldr	r0, [r3, #0]
 8019afe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8019b02:	2300      	movs	r3, #0
 8019b04:	683a      	ldr	r2, [r7, #0]
 8019b06:	f005 fcfc 	bl	801f502 <lv_font_get_glyph_dsc>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(g_ret == false) {
 8019b10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b14:	f083 0301 	eor.w	r3, r3, #1
 8019b18:	b2db      	uxtb	r3, r3
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d05c      	beq.n	8019bd8 <lv_draw_sw_letter+0xec>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	2b1f      	cmp	r3, #31
 8019b22:	f240 80cf 	bls.w	8019cc4 <lv_draw_sw_letter+0x1d8>
 8019b26:	683b      	ldr	r3, [r7, #0]
 8019b28:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8019b2c:	4293      	cmp	r3, r2
 8019b2e:	f000 80c9 	beq.w	8019cc4 <lv_draw_sw_letter+0x1d8>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 8019b32:	683b      	ldr	r3, [r7, #0]
 8019b34:	f242 020c 	movw	r2, #8204	; 0x200c
 8019b38:	4293      	cmp	r3, r2
 8019b3a:	f000 80c3 	beq.w	8019cc4 <lv_draw_sw_letter+0x1d8>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b44:	b29a      	uxth	r2, r3
 8019b46:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8019b4a:	b29b      	uxth	r3, r3
 8019b4c:	4413      	add	r3, r2
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019b5a:	b29a      	uxth	r2, r3
 8019b5c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019b60:	b29b      	uxth	r3, r3
 8019b62:	4413      	add	r3, r2
 8019b64:	b29b      	uxth	r3, r3
 8019b66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 8019b6a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8019b6e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8019b72:	4413      	add	r3, r2
 8019b74:	b29b      	uxth	r3, r3
 8019b76:	b21c      	sxth	r4, r3
 8019b78:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8019b7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019b80:	4413      	add	r3, r2
 8019b82:	b29b      	uxth	r3, r3
 8019b84:	b21b      	sxth	r3, r3
 8019b86:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8019b8a:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 8019b8e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8019b92:	9300      	str	r3, [sp, #0]
 8019b94:	4623      	mov	r3, r4
 8019b96:	f006 fe49 	bl	802082c <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 8019b9a:	f107 0310 	add.w	r3, r7, #16
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f7fa fb5a 	bl	8014258 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8019ba4:	2302      	movs	r3, #2
 8019ba6:	74fb      	strb	r3, [r7, #19]
            glyph_dsc.outline_opa = LV_OPA_MIN;
 8019ba8:	2302      	movs	r3, #2
 8019baa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 8019bae:	2302      	movs	r3, #2
 8019bb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8019bb4:	2302      	movs	r3, #2
 8019bb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            glyph_dsc.border_color = dsc->color;
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	7b1b      	ldrb	r3, [r3, #12]
 8019bbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            glyph_dsc.border_width = 1;
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	857b      	strh	r3, [r7, #42]	; 0x2a
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	68db      	ldr	r3, [r3, #12]
 8019bca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019bce:	f107 0110 	add.w	r1, r7, #16
 8019bd2:	68f8      	ldr	r0, [r7, #12]
 8019bd4:	4798      	blx	r3
#endif
        }
        return;
 8019bd6:	e075      	b.n	8019cc4 <lv_draw_sw_letter+0x1d8>
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8019bd8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d073      	beq.n	8019cc8 <lv_draw_sw_letter+0x1dc>
 8019be0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d06f      	beq.n	8019cc8 <lv_draw_sw_letter+0x1dc>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bee:	b29a      	uxth	r2, r3
 8019bf0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8019bf4:	b29b      	uxth	r3, r3
 8019bf6:	4413      	add	r3, r2
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	b21b      	sxth	r3, r3
 8019bfc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019c06:	b29a      	uxth	r2, r3
 8019c08:	68bb      	ldr	r3, [r7, #8]
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019c10:	b299      	uxth	r1, r3
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8019c1a:	b29b      	uxth	r3, r3
 8019c1c:	1acb      	subs	r3, r1, r3
 8019c1e:	b29b      	uxth	r3, r3
 8019c20:	4413      	add	r3, r2
 8019c22:	b29a      	uxth	r2, r3
 8019c24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8019c28:	1ad3      	subs	r3, r2, r3
 8019c2a:	b29a      	uxth	r2, r3
 8019c2c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8019c30:	b29b      	uxth	r3, r3
 8019c32:	1ad3      	subs	r3, r2, r3
 8019c34:	b29b      	uxth	r3, r3
 8019c36:	b21b      	sxth	r3, r3
 8019c38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8019c3c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8019c40:	461a      	mov	r2, r3
 8019c42:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8019c46:	4413      	add	r3, r2
 8019c48:	68fa      	ldr	r2, [r7, #12]
 8019c4a:	6892      	ldr	r2, [r2, #8]
 8019c4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019c50:	4293      	cmp	r3, r2
 8019c52:	db3b      	blt.n	8019ccc <lv_draw_sw_letter+0x1e0>
       gpos.x > draw_ctx->clip_area->x2 ||
 8019c54:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	689b      	ldr	r3, [r3, #8]
 8019c5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8019c60:	429a      	cmp	r2, r3
 8019c62:	dc33      	bgt.n	8019ccc <lv_draw_sw_letter+0x1e0>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8019c64:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8019c68:	461a      	mov	r2, r3
 8019c6a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8019c6e:	4413      	add	r3, r2
 8019c70:	68fa      	ldr	r2, [r7, #12]
 8019c72:	6892      	ldr	r2, [r2, #8]
 8019c74:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 8019c78:	4293      	cmp	r3, r2
 8019c7a:	db27      	blt.n	8019ccc <lv_draw_sw_letter+0x1e0>
       gpos.y > draw_ctx->clip_area->y2)  {
 8019c7c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	689b      	ldr	r3, [r3, #8]
 8019c84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	dc1f      	bgt.n	8019ccc <lv_draw_sw_letter+0x1e0>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 8019c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019c8e:	6839      	ldr	r1, [r7, #0]
 8019c90:	4618      	mov	r0, r3
 8019c92:	f005 fc23 	bl	801f4dc <lv_font_get_glyph_bitmap>
 8019c96:	6638      	str	r0, [r7, #96]	; 0x60
    if(map_p == NULL) {
 8019c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d018      	beq.n	8019cd0 <lv_draw_sw_letter+0x1e4>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 8019c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ca0:	7b1b      	ldrb	r3, [r3, #12]
 8019ca2:	f003 0303 	and.w	r3, r3, #3
 8019ca6:	b2db      	uxtb	r3, r3
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d112      	bne.n	8019cd2 <lv_draw_sw_letter+0x1e6>
#else
        LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
 8019cac:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8019cb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019cb6:	9300      	str	r3, [sp, #0]
 8019cb8:	460b      	mov	r3, r1
 8019cba:	68b9      	ldr	r1, [r7, #8]
 8019cbc:	68f8      	ldr	r0, [r7, #12]
 8019cbe:	f000 f80b 	bl	8019cd8 <draw_letter_normal>
 8019cc2:	e006      	b.n	8019cd2 <lv_draw_sw_letter+0x1e6>
        return;
 8019cc4:	bf00      	nop
 8019cc6:	e004      	b.n	8019cd2 <lv_draw_sw_letter+0x1e6>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8019cc8:	bf00      	nop
 8019cca:	e002      	b.n	8019cd2 <lv_draw_sw_letter+0x1e6>
        return;
 8019ccc:	bf00      	nop
 8019cce:	e000      	b.n	8019cd2 <lv_draw_sw_letter+0x1e6>
        return;
 8019cd0:	bf00      	nop
    }
}
 8019cd2:	376c      	adds	r7, #108	; 0x6c
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	bd90      	pop	{r4, r7, pc}

08019cd8 <draw_letter_normal>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                                     const lv_point_t * pos, lv_font_glyph_dsc_t * g, const uint8_t * map_p)
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b0aa      	sub	sp, #168	; 0xa8
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	60f8      	str	r0, [r7, #12]
 8019ce0:	60b9      	str	r1, [r7, #8]
 8019ce2:	607a      	str	r2, [r7, #4]
 8019ce4:	603b      	str	r3, [r7, #0]

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 8019ce6:	683b      	ldr	r3, [r7, #0]
 8019ce8:	7b9b      	ldrb	r3, [r3, #14]
 8019cea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019cee:	b2db      	uxtb	r3, r3
 8019cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    lv_opa_t opa = dsc->opa;
 8019cf4:	68bb      	ldr	r3, [r7, #8]
 8019cf6:	7e1b      	ldrb	r3, [r3, #24]
 8019cf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 8019cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019d00:	2b03      	cmp	r3, #3
 8019d02:	d102      	bne.n	8019d0a <draw_letter_normal+0x32>
 8019d04:	2304      	movs	r3, #4
 8019d06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 8019d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019d0e:	3b01      	subs	r3, #1
 8019d10:	2b07      	cmp	r3, #7
 8019d12:	f200 8287 	bhi.w	801a224 <draw_letter_normal+0x54c>
 8019d16:	a201      	add	r2, pc, #4	; (adr r2, 8019d1c <draw_letter_normal+0x44>)
 8019d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d1c:	08019d3d 	.word	0x08019d3d
 8019d20:	08019d51 	.word	0x08019d51
 8019d24:	0801a225 	.word	0x0801a225
 8019d28:	08019d65 	.word	0x08019d65
 8019d2c:	0801a225 	.word	0x0801a225
 8019d30:	0801a225 	.word	0x0801a225
 8019d34:	0801a225 	.word	0x0801a225
 8019d38:	08019d79 	.word	0x08019d79
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8019d3c:	4b6a      	ldr	r3, [pc, #424]	; (8019ee8 <draw_letter_normal+0x210>)
 8019d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0x80;
 8019d42:	2380      	movs	r3, #128	; 0x80
 8019d44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 2;
 8019d48:	2302      	movs	r3, #2
 8019d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019d4e:	e01e      	b.n	8019d8e <draw_letter_normal+0xb6>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 8019d50:	4b66      	ldr	r3, [pc, #408]	; (8019eec <draw_letter_normal+0x214>)
 8019d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xC0;
 8019d56:	23c0      	movs	r3, #192	; 0xc0
 8019d58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 4;
 8019d5c:	2304      	movs	r3, #4
 8019d5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019d62:	e014      	b.n	8019d8e <draw_letter_normal+0xb6>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8019d64:	4b62      	ldr	r3, [pc, #392]	; (8019ef0 <draw_letter_normal+0x218>)
 8019d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xF0;
 8019d6a:	23f0      	movs	r3, #240	; 0xf0
 8019d6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 16;
 8019d70:	2310      	movs	r3, #16
 8019d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 8019d76:	e00a      	b.n	8019d8e <draw_letter_normal+0xb6>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 8019d78:	4b5e      	ldr	r3, [pc, #376]	; (8019ef4 <draw_letter_normal+0x21c>)
 8019d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xFF;
 8019d7e:	23ff      	movs	r3, #255	; 0xff
 8019d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 256;
 8019d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;       /*No opa table, pixel value will be used directly*/
 8019d8c:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 8019d8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019d92:	2bfc      	cmp	r3, #252	; 0xfc
 8019d94:	d842      	bhi.n	8019e1c <draw_letter_normal+0x144>
        if(prev_opa != opa || prev_bpp != bpp) {
 8019d96:	4b58      	ldr	r3, [pc, #352]	; (8019ef8 <draw_letter_normal+0x220>)
 8019d98:	781b      	ldrb	r3, [r3, #0]
 8019d9a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8019d9e:	429a      	cmp	r2, r3
 8019da0:	d105      	bne.n	8019dae <draw_letter_normal+0xd6>
 8019da2:	4b56      	ldr	r3, [pc, #344]	; (8019efc <draw_letter_normal+0x224>)
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019daa:	429a      	cmp	r2, r3
 8019dac:	d02b      	beq.n	8019e06 <draw_letter_normal+0x12e>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 8019dae:	2300      	movs	r3, #0
 8019db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019db4:	e021      	b.n	8019dfa <draw_letter_normal+0x122>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 8019db6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019dbe:	4413      	add	r3, r2
 8019dc0:	781b      	ldrb	r3, [r3, #0]
 8019dc2:	2bff      	cmp	r3, #255	; 0xff
 8019dc4:	d00d      	beq.n	8019de2 <draw_letter_normal+0x10a>
 8019dc6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019dce:	4413      	add	r3, r2
 8019dd0:	781b      	ldrb	r3, [r3, #0]
 8019dd2:	461a      	mov	r2, r3
 8019dd4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019dd8:	fb02 f303 	mul.w	r3, r2, r3
 8019ddc:	121b      	asrs	r3, r3, #8
 8019dde:	b2db      	uxtb	r3, r3
 8019de0:	e001      	b.n	8019de6 <draw_letter_normal+0x10e>
 8019de2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019de6:	4946      	ldr	r1, [pc, #280]	; (8019f00 <draw_letter_normal+0x228>)
 8019de8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019dec:	440a      	add	r2, r1
 8019dee:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 8019df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019df4:	3301      	adds	r3, #1
 8019df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019dfa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e02:	429a      	cmp	r2, r3
 8019e04:	d3d7      	bcc.n	8019db6 <draw_letter_normal+0xde>
            }
        }
        bpp_opa_table_p = opa_table;
 8019e06:	4b3e      	ldr	r3, [pc, #248]	; (8019f00 <draw_letter_normal+0x228>)
 8019e08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        prev_opa = opa;
 8019e0c:	4a3a      	ldr	r2, [pc, #232]	; (8019ef8 <draw_letter_normal+0x220>)
 8019e0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8019e12:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 8019e14:	4a39      	ldr	r2, [pc, #228]	; (8019efc <draw_letter_normal+0x224>)
 8019e16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e1a:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	88db      	ldrh	r3, [r3, #6]
 8019e20:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t box_h = g->box_h;
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	891b      	ldrh	r3, [r3, #8]
 8019e26:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8019e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019e2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019e2e:	fb02 f303 	mul.w	r3, r2, r3
 8019e32:	673b      	str	r3, [r7, #112]	; 0x70

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	689b      	ldr	r3, [r3, #8]
 8019e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e42:	429a      	cmp	r2, r3
 8019e44:	da09      	bge.n	8019e5a <draw_letter_normal+0x182>
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	689b      	ldr	r3, [r3, #8]
 8019e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e4e:	461a      	mov	r2, r3
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e56:	1ad3      	subs	r3, r2, r3
 8019e58:	e000      	b.n	8019e5c <draw_letter_normal+0x184>
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e64:	461a      	mov	r2, r3
 8019e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019e68:	4413      	add	r3, r2
 8019e6a:	68fa      	ldr	r2, [r7, #12]
 8019e6c:	6892      	ldr	r2, [r2, #8]
 8019e6e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019e72:	4293      	cmp	r3, r2
 8019e74:	dd0a      	ble.n	8019e8c <draw_letter_normal+0x1b4>
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	689b      	ldr	r3, [r3, #8]
 8019e7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019e7e:	461a      	mov	r2, r3
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e86:	1ad3      	subs	r3, r2, r3
 8019e88:	3301      	adds	r3, #1
 8019e8a:	e000      	b.n	8019e8e <draw_letter_normal+0x1b6>
 8019e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019e8e:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	689b      	ldr	r3, [r3, #8]
 8019e9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019e9e:	429a      	cmp	r2, r3
 8019ea0:	da09      	bge.n	8019eb6 <draw_letter_normal+0x1de>
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	689b      	ldr	r3, [r3, #8]
 8019ea6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019eaa:	461a      	mov	r2, r3
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019eb2:	1ad3      	subs	r3, r2, r3
 8019eb4:	e000      	b.n	8019eb8 <draw_letter_normal+0x1e0>
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ec4:	4413      	add	r3, r2
 8019ec6:	68fa      	ldr	r2, [r7, #12]
 8019ec8:	6892      	ldr	r2, [r2, #8]
 8019eca:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8019ece:	4293      	cmp	r3, r2
 8019ed0:	dd18      	ble.n	8019f04 <draw_letter_normal+0x22c>
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	689b      	ldr	r3, [r3, #8]
 8019ed6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8019eda:	461a      	mov	r2, r3
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019ee2:	1ad3      	subs	r3, r2, r3
 8019ee4:	3301      	adds	r3, #1
 8019ee6:	e00e      	b.n	8019f06 <draw_letter_normal+0x22e>
 8019ee8:	08026a64 	.word	0x08026a64
 8019eec:	08026a68 	.word	0x08026a68
 8019ef0:	08026a6c 	.word	0x08026a6c
 8019ef4:	08026a7c 	.word	0x08026a7c
 8019ef8:	2000071d 	.word	0x2000071d
 8019efc:	20000720 	.word	0x20000720
 8019f00:	20000724 	.word	0x20000724
 8019f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019f06:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8019f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019f0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019f0c:	fb02 f303 	mul.w	r3, r2, r3
 8019f10:	4619      	mov	r1, r3
 8019f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8019f18:	fb02 f303 	mul.w	r3, r2, r3
 8019f1c:	440b      	add	r3, r1
 8019f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    map_p += bit_ofs >> 3;
 8019f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019f22:	08db      	lsrs	r3, r3, #3
 8019f24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8019f28:	4413      	add	r3, r2
 8019f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 8019f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019f30:	f003 0307 	and.w	r3, r3, #7
 8019f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8019f38:	f107 0320 	add.w	r3, r7, #32
 8019f3c:	211c      	movs	r1, #28
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f008 fc8c 	bl	802285c <lv_memset_00>
    blend_dsc.color = dsc->color;
 8019f44:	68bb      	ldr	r3, [r7, #8]
 8019f46:	7b1b      	ldrb	r3, [r3, #12]
 8019f48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    blend_dsc.opa = dsc->opa;
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	7e1b      	ldrb	r3, [r3, #24]
 8019f50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    blend_dsc.blend_mode = dsc->blend_mode;
 8019f54:	68bb      	ldr	r3, [r7, #8]
 8019f56:	7f1b      	ldrb	r3, [r3, #28]
 8019f58:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8019f5c:	b2db      	uxtb	r3, r3
 8019f5e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8019f62:	f7f4 fcd7 	bl	800e914 <_lv_refr_get_disp_refreshing>
 8019f66:	4603      	mov	r3, r0
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f005 fffd 	bl	801ff68 <lv_disp_get_hor_res>
 8019f6e:	4603      	mov	r3, r0
 8019f70:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8019f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019f76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019f78:	fb03 f202 	mul.w	r2, r3, r2
 8019f7c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8019f80:	4293      	cmp	r3, r2
 8019f82:	bfa8      	it	ge
 8019f84:	4613      	movge	r3, r2
 8019f86:	657b      	str	r3, [r7, #84]	; 0x54
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8019f88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019f8a:	f008 f8bd 	bl	8022108 <lv_mem_buf_get>
 8019f8e:	6538      	str	r0, [r7, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 8019f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 8019f94:	2300      	movs	r3, #0
 8019f96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019fa0:	b29a      	uxth	r2, r3
 8019fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019fa4:	b29b      	uxth	r3, r3
 8019fa6:	4413      	add	r3, r2
 8019fa8:	b29b      	uxth	r3, r3
 8019faa:	b21b      	sxth	r3, r3
 8019fac:	833b      	strh	r3, [r7, #24]
    fill_area.x2 = col_end  + pos->x - 1;
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019fb4:	b29a      	uxth	r2, r3
 8019fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	4413      	add	r3, r2
 8019fbc:	b29b      	uxth	r3, r3
 8019fbe:	3b01      	subs	r3, #1
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	b21b      	sxth	r3, r3
 8019fc4:	83bb      	strh	r3, [r7, #28]
    fill_area.y1 = row_start + pos->y;
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019fcc:	b29a      	uxth	r2, r3
 8019fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019fd0:	b29b      	uxth	r3, r3
 8019fd2:	4413      	add	r3, r2
 8019fd4:	b29b      	uxth	r3, r3
 8019fd6:	b21b      	sxth	r3, r3
 8019fd8:	837b      	strh	r3, [r7, #26]
    fill_area.y2 = fill_area.y1;
 8019fda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019fde:	83fb      	strh	r3, [r7, #30]
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
 8019fe0:	f107 0318 	add.w	r3, r7, #24
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f7ff fd6a 	bl	8019abe <lv_area_get_width>
 8019fea:	4603      	mov	r3, r0
 8019fec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
 8019ff0:	f107 0218 	add.w	r2, r7, #24
 8019ff4:	f107 0310 	add.w	r3, r7, #16
 8019ff8:	4611      	mov	r1, r2
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	f7ff fd40 	bl	8019a80 <lv_area_copy>
    mask_area.y2 = mask_area.y1 + row_end;
 801a000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a004:	b29a      	uxth	r2, r3
 801a006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a008:	b29b      	uxth	r3, r3
 801a00a:	4413      	add	r3, r2
 801a00c:	b29b      	uxth	r3, r3
 801a00e:	b21b      	sxth	r3, r3
 801a010:	82fb      	strh	r3, [r7, #22]
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 801a012:	f107 0310 	add.w	r3, r7, #16
 801a016:	4618      	mov	r0, r3
 801a018:	f7f7 fe86 	bl	8011d28 <lv_draw_mask_is_any>
 801a01c:	4603      	mov	r3, r0
 801a01e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
#endif
    blend_dsc.blend_area = &fill_area;
 801a022:	f107 0318 	add.w	r3, r7, #24
 801a026:	623b      	str	r3, [r7, #32]
    blend_dsc.mask_area = &fill_area;
 801a028:	f107 0318 	add.w	r3, r7, #24
 801a02c:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t col_bit_max = 8 - bpp;
 801a02e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a032:	f1c3 0308 	rsb	r3, r3, #8
 801a036:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 801a038:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a03c:	441a      	add	r2, r3
 801a03e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a040:	1ad3      	subs	r3, r2, r3
 801a042:	461a      	mov	r2, r3
 801a044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a048:	fb02 f303 	mul.w	r3, r2, r3
 801a04c:	647b      	str	r3, [r7, #68]	; 0x44

    for(row = row_start ; row < row_end; row++) {
 801a04e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a054:	e0c3      	b.n	801a1de <draw_letter_normal+0x506>
#if LV_DRAW_COMPLEX
        int32_t mask_p_start = mask_p;
 801a056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a05a:	643b      	str	r3, [r7, #64]	; 0x40
#endif
        bitmask = bitmask_init >> col_bit;
 801a05c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801a060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a064:	fa22 f303 	lsr.w	r3, r2, r3
 801a068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        for(col = col_start; col < col_end; col++) {
 801a06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a06e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a072:	e04f      	b.n	801a114 <draw_letter_normal+0x43c>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 801a074:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a078:	781b      	ldrb	r3, [r3, #0]
 801a07a:	461a      	mov	r2, r3
 801a07c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a080:	401a      	ands	r2, r3
 801a082:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a088:	1acb      	subs	r3, r1, r3
 801a08a:	fa22 f303 	lsr.w	r3, r2, r3
 801a08e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(letter_px) {
 801a092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a096:	2b00      	cmp	r3, #0
 801a098:	d00b      	beq.n	801a0b2 <draw_letter_normal+0x3da>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 801a09a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801a09e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801a0a2:	441a      	add	r2, r3
 801a0a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a0a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a0aa:	440b      	add	r3, r1
 801a0ac:	7812      	ldrb	r2, [r2, #0]
 801a0ae:	701a      	strb	r2, [r3, #0]
 801a0b0:	e005      	b.n	801a0be <draw_letter_normal+0x3e6>
            }
            else {
                mask_buf[mask_p] = 0;
 801a0b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a0b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a0b8:	4413      	add	r3, r2
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 801a0be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801a0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a0c4:	429a      	cmp	r2, r3
 801a0c6:	d20f      	bcs.n	801a0e8 <draw_letter_normal+0x410>
                col_bit += bpp;
 801a0c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801a0cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a0d0:	4413      	add	r3, r2
 801a0d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask >> bpp;
 801a0d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801a0da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a0de:	fa22 f303 	lsr.w	r3, r2, r3
 801a0e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801a0e6:	e00b      	b.n	801a100 <draw_letter_normal+0x428>
            }
            else {
                col_bit = 0;
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask_init;
 801a0ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a0f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                map_p++;
 801a0f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a0fa:	3301      	adds	r3, #1
 801a0fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            }

            /*Next mask byte*/
            mask_p++;
 801a100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a104:	3301      	adds	r3, #1
 801a106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        for(col = col_start; col < col_end; col++) {
 801a10a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a10e:	3301      	adds	r3, #1
 801a110:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a114:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a11a:	429a      	cmp	r2, r3
 801a11c:	dbaa      	blt.n	801a074 <draw_letter_normal+0x39c>
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 801a11e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801a122:	2b00      	cmp	r3, #0
 801a124:	d01a      	beq.n	801a15c <draw_letter_normal+0x484>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 801a126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a128:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a12a:	18d0      	adds	r0, r2, r3
 801a12c:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801a130:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801a134:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801a138:	f7f7 fcf8 	bl	8011b2c <lv_draw_mask_apply>
 801a13c:	4603      	mov	r3, r0
 801a13e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                                    fill_w);
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801a142:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a146:	2b00      	cmp	r3, #0
 801a148:	d108      	bne.n	801a15c <draw_letter_normal+0x484>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 801a14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a14c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a14e:	4413      	add	r3, r2
 801a150:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801a154:	4611      	mov	r1, r2
 801a156:	4618      	mov	r0, r3
 801a158:	f008 fb80 	bl	802285c <lv_memset_00>
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 801a15c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a160:	1ad3      	subs	r3, r2, r3
 801a162:	461a      	mov	r2, r3
 801a164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a168:	4413      	add	r3, r2
 801a16a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a16c:	429a      	cmp	r2, r3
 801a16e:	d907      	bls.n	801a180 <draw_letter_normal+0x4a8>
            fill_area.y2 ++;
 801a170:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a174:	b29b      	uxth	r3, r3
 801a176:	3301      	adds	r3, #1
 801a178:	b29b      	uxth	r3, r3
 801a17a:	b21b      	sxth	r3, r3
 801a17c:	83fb      	strh	r3, [r7, #30]
 801a17e:	e015      	b.n	801a1ac <draw_letter_normal+0x4d4>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801a180:	2302      	movs	r3, #2
 801a182:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a186:	f107 0320 	add.w	r3, r7, #32
 801a18a:	4619      	mov	r1, r3
 801a18c:	68f8      	ldr	r0, [r7, #12]
 801a18e:	f7fd f89b 	bl	80172c8 <lv_draw_sw_blend>

            fill_area.y1 = fill_area.y2 + 1;
 801a192:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a196:	b29b      	uxth	r3, r3
 801a198:	3301      	adds	r3, #1
 801a19a:	b29b      	uxth	r3, r3
 801a19c:	b21b      	sxth	r3, r3
 801a19e:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = fill_area.y1;
 801a1a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801a1a4:	83fb      	strh	r3, [r7, #30]
            mask_p = 0;
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }

        col_bit += col_bit_row_ofs;
 801a1ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801a1b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a1b2:	4413      	add	r3, r2
 801a1b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        map_p += (col_bit >> 3);
 801a1b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a1bc:	08db      	lsrs	r3, r3, #3
 801a1be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801a1c2:	4413      	add	r3, r2
 801a1c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 801a1c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a1cc:	f003 0307 	and.w	r3, r3, #7
 801a1d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
 801a1d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a1d8:	3301      	adds	r3, #1
 801a1da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a1de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a1e4:	429a      	cmp	r2, r3
 801a1e6:	f6ff af36 	blt.w	801a056 <draw_letter_normal+0x37e>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 801a1ea:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801a1ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	d012      	beq.n	801a21c <draw_letter_normal+0x544>
        fill_area.y2--;
 801a1f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a1fa:	b29b      	uxth	r3, r3
 801a1fc:	3b01      	subs	r3, #1
 801a1fe:	b29b      	uxth	r3, r3
 801a200:	b21b      	sxth	r3, r3
 801a202:	83fb      	strh	r3, [r7, #30]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801a204:	2302      	movs	r3, #2
 801a206:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a20a:	f107 0320 	add.w	r3, r7, #32
 801a20e:	4619      	mov	r1, r3
 801a210:	68f8      	ldr	r0, [r7, #12]
 801a212:	f7fd f859 	bl	80172c8 <lv_draw_sw_blend>
        mask_p = 0;
 801a216:	2300      	movs	r3, #0
 801a218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    lv_mem_buf_release(mask_buf);
 801a21c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801a21e:	f008 f81f 	bl	8022260 <lv_mem_buf_release>
 801a222:	e000      	b.n	801a226 <draw_letter_normal+0x54e>
            return; /*Invalid bpp. Can't render the letter*/
 801a224:	bf00      	nop
}
 801a226:	37a8      	adds	r7, #168	; 0xa8
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}

0801a22c <lv_area_get_width>:
{
 801a22c:	b480      	push	{r7}
 801a22e:	b083      	sub	sp, #12
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a23a:	b29a      	uxth	r2, r3
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a242:	b29b      	uxth	r3, r3
 801a244:	1ad3      	subs	r3, r2, r3
 801a246:	b29b      	uxth	r3, r3
 801a248:	3301      	adds	r3, #1
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	b21b      	sxth	r3, r3
}
 801a24e:	4618      	mov	r0, r3
 801a250:	370c      	adds	r7, #12
 801a252:	46bd      	mov	sp, r7
 801a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a258:	4770      	bx	lr

0801a25a <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 801a25a:	b580      	push	{r7, lr}
 801a25c:	b098      	sub	sp, #96	; 0x60
 801a25e:	af00      	add	r7, sp, #0
 801a260:	60f8      	str	r0, [r7, #12]
 801a262:	60b9      	str	r1, [r7, #8]
 801a264:	607a      	str	r2, [r7, #4]
 801a266:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 801a268:	68bb      	ldr	r3, [r7, #8]
 801a26a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	f000 8172 	beq.w	801a558 <lv_draw_sw_line+0x2fe>
    if(dsc->opa <= LV_OPA_MIN) return;
 801a274:	68bb      	ldr	r3, [r7, #8]
 801a276:	7a1b      	ldrb	r3, [r3, #8]
 801a278:	2b02      	cmp	r3, #2
 801a27a:	f240 816f 	bls.w	801a55c <lv_draw_sw_line+0x302>

    if(point1->x == point2->x && point1->y == point2->y) return;
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a284:	683b      	ldr	r3, [r7, #0]
 801a286:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a28a:	429a      	cmp	r2, r3
 801a28c:	d108      	bne.n	801a2a0 <lv_draw_sw_line+0x46>
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a29a:	429a      	cmp	r2, r3
 801a29c:	f000 8160 	beq.w	801a560 <lv_draw_sw_line+0x306>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 801a2a0:	683b      	ldr	r3, [r7, #0]
 801a2a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2ac:	4293      	cmp	r3, r2
 801a2ae:	bfa8      	it	ge
 801a2b0:	4613      	movge	r3, r2
 801a2b2:	b21b      	sxth	r3, r3
 801a2b4:	b29a      	uxth	r2, r3
 801a2b6:	68bb      	ldr	r3, [r7, #8]
 801a2b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	da00      	bge.n	801a2c2 <lv_draw_sw_line+0x68>
 801a2c0:	3301      	adds	r3, #1
 801a2c2:	105b      	asrs	r3, r3, #1
 801a2c4:	b21b      	sxth	r3, r3
 801a2c6:	b29b      	uxth	r3, r3
 801a2c8:	1ad3      	subs	r3, r2, r3
 801a2ca:	b29b      	uxth	r3, r3
 801a2cc:	b21b      	sxth	r3, r3
 801a2ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2de:	4293      	cmp	r3, r2
 801a2e0:	bfb8      	it	lt
 801a2e2:	4613      	movlt	r3, r2
 801a2e4:	b21b      	sxth	r3, r3
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	68bb      	ldr	r3, [r7, #8]
 801a2ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	da00      	bge.n	801a2f4 <lv_draw_sw_line+0x9a>
 801a2f2:	3301      	adds	r3, #1
 801a2f4:	105b      	asrs	r3, r3, #1
 801a2f6:	b21b      	sxth	r3, r3
 801a2f8:	b29b      	uxth	r3, r3
 801a2fa:	4413      	add	r3, r2
 801a2fc:	b29b      	uxth	r3, r3
 801a2fe:	b21b      	sxth	r3, r3
 801a300:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a310:	4293      	cmp	r3, r2
 801a312:	bfa8      	it	ge
 801a314:	4613      	movge	r3, r2
 801a316:	b21b      	sxth	r3, r3
 801a318:	b29a      	uxth	r2, r3
 801a31a:	68bb      	ldr	r3, [r7, #8]
 801a31c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a320:	2b00      	cmp	r3, #0
 801a322:	da00      	bge.n	801a326 <lv_draw_sw_line+0xcc>
 801a324:	3301      	adds	r3, #1
 801a326:	105b      	asrs	r3, r3, #1
 801a328:	b21b      	sxth	r3, r3
 801a32a:	b29b      	uxth	r3, r3
 801a32c:	1ad3      	subs	r3, r2, r3
 801a32e:	b29b      	uxth	r3, r3
 801a330:	b21b      	sxth	r3, r3
 801a332:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a342:	4293      	cmp	r3, r2
 801a344:	bfb8      	it	lt
 801a346:	4613      	movlt	r3, r2
 801a348:	b21b      	sxth	r3, r3
 801a34a:	b29a      	uxth	r2, r3
 801a34c:	68bb      	ldr	r3, [r7, #8]
 801a34e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a352:	2b00      	cmp	r3, #0
 801a354:	da00      	bge.n	801a358 <lv_draw_sw_line+0xfe>
 801a356:	3301      	adds	r3, #1
 801a358:	105b      	asrs	r3, r3, #1
 801a35a:	b21b      	sxth	r3, r3
 801a35c:	b29b      	uxth	r3, r3
 801a35e:	4413      	add	r3, r2
 801a360:	b29b      	uxth	r3, r3
 801a362:	b21b      	sxth	r3, r3
 801a364:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	689a      	ldr	r2, [r3, #8]
 801a36c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801a370:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a374:	4618      	mov	r0, r3
 801a376:	f006 fb1d 	bl	80209b4 <_lv_area_intersect>
 801a37a:	4603      	mov	r3, r0
 801a37c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(!is_common) return;
 801a380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a384:	f083 0301 	eor.w	r3, r3, #1
 801a388:	b2db      	uxtb	r3, r3
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	f040 80ea 	bne.w	801a564 <lv_draw_sw_line+0x30a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	689b      	ldr	r3, [r3, #8]
 801a394:	65bb      	str	r3, [r7, #88]	; 0x58
    draw_ctx->clip_area = &clip_line;
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a39c:	609a      	str	r2, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a3a4:	683b      	ldr	r3, [r7, #0]
 801a3a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	d106      	bne.n	801a3bc <lv_draw_sw_line+0x162>
 801a3ae:	683b      	ldr	r3, [r7, #0]
 801a3b0:	687a      	ldr	r2, [r7, #4]
 801a3b2:	68b9      	ldr	r1, [r7, #8]
 801a3b4:	68f8      	ldr	r0, [r7, #12]
 801a3b6:	f000 f8d9 	bl	801a56c <draw_line_hor>
 801a3ba:	e014      	b.n	801a3e6 <lv_draw_sw_line+0x18c>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3c2:	683b      	ldr	r3, [r7, #0]
 801a3c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3c8:	429a      	cmp	r2, r3
 801a3ca:	d106      	bne.n	801a3da <lv_draw_sw_line+0x180>
 801a3cc:	683b      	ldr	r3, [r7, #0]
 801a3ce:	687a      	ldr	r2, [r7, #4]
 801a3d0:	68b9      	ldr	r1, [r7, #8]
 801a3d2:	68f8      	ldr	r0, [r7, #12]
 801a3d4:	f000 fa2b 	bl	801a82e <draw_line_ver>
 801a3d8:	e005      	b.n	801a3e6 <lv_draw_sw_line+0x18c>
    else draw_line_skew(draw_ctx, dsc, point1, point2);
 801a3da:	683b      	ldr	r3, [r7, #0]
 801a3dc:	687a      	ldr	r2, [r7, #4]
 801a3de:	68b9      	ldr	r1, [r7, #8]
 801a3e0:	68f8      	ldr	r0, [r7, #12]
 801a3e2:	f000 fb55 	bl	801aa90 <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 801a3e6:	68bb      	ldr	r3, [r7, #8]
 801a3e8:	7a5b      	ldrb	r3, [r3, #9]
 801a3ea:	f003 0308 	and.w	r3, r3, #8
 801a3ee:	b2db      	uxtb	r3, r3
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d107      	bne.n	801a404 <lv_draw_sw_line+0x1aa>
 801a3f4:	68bb      	ldr	r3, [r7, #8]
 801a3f6:	7a5b      	ldrb	r3, [r3, #9]
 801a3f8:	f003 0304 	and.w	r3, r3, #4
 801a3fc:	b2db      	uxtb	r3, r3
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	f000 80a6 	beq.w	801a550 <lv_draw_sw_line+0x2f6>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 801a404:	f107 0310 	add.w	r3, r7, #16
 801a408:	4618      	mov	r0, r3
 801a40a:	f7f9 ff25 	bl	8014258 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	781b      	ldrb	r3, [r3, #0]
 801a412:	753b      	strb	r3, [r7, #20]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801a414:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a418:	823b      	strh	r3, [r7, #16]
        cir_dsc.bg_opa = dsc->opa;
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	7a1b      	ldrb	r3, [r3, #8]
 801a41e:	74fb      	strb	r3, [r7, #19]

        int32_t r = (dsc->width >> 1);
 801a420:	68bb      	ldr	r3, [r7, #8]
 801a422:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a426:	105b      	asrs	r3, r3, #1
 801a428:	b21b      	sxth	r3, r3
 801a42a:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 801a42c:	68bb      	ldr	r3, [r7, #8]
 801a42e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a432:	b29b      	uxth	r3, r3
 801a434:	f003 0301 	and.w	r3, r3, #1
 801a438:	2b00      	cmp	r3, #0
 801a43a:	bf0c      	ite	eq
 801a43c:	2301      	moveq	r3, #1
 801a43e:	2300      	movne	r3, #0
 801a440:	b2db      	uxtb	r3, r3
 801a442:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t cir_area;

        if(dsc->round_start) {
 801a444:	68bb      	ldr	r3, [r7, #8]
 801a446:	7a5b      	ldrb	r3, [r3, #9]
 801a448:	f003 0304 	and.w	r3, r3, #4
 801a44c:	b2db      	uxtb	r3, r3
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d03b      	beq.n	801a4ca <lv_draw_sw_line+0x270>
            cir_area.x1 = point1->x - r;
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a458:	b29a      	uxth	r2, r3
 801a45a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a45c:	b29b      	uxth	r3, r3
 801a45e:	1ad3      	subs	r3, r2, r3
 801a460:	b29b      	uxth	r3, r3
 801a462:	b21b      	sxth	r3, r3
 801a464:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point1->y - r;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a46e:	b29a      	uxth	r2, r3
 801a470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a472:	b29b      	uxth	r3, r3
 801a474:	1ad3      	subs	r3, r2, r3
 801a476:	b29b      	uxth	r3, r3
 801a478:	b21b      	sxth	r3, r3
 801a47a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point1->x + r - r_corr;
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a484:	b29a      	uxth	r2, r3
 801a486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a488:	b29b      	uxth	r3, r3
 801a48a:	4413      	add	r3, r2
 801a48c:	b29a      	uxth	r2, r3
 801a48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a490:	b29b      	uxth	r3, r3
 801a492:	1ad3      	subs	r3, r2, r3
 801a494:	b29b      	uxth	r3, r3
 801a496:	b21b      	sxth	r3, r3
 801a498:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point1->y + r - r_corr ;
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a4a2:	b29a      	uxth	r2, r3
 801a4a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4a6:	b29b      	uxth	r3, r3
 801a4a8:	4413      	add	r3, r2
 801a4aa:	b29a      	uxth	r2, r3
 801a4ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a4ae:	b29b      	uxth	r3, r3
 801a4b0:	1ad3      	subs	r3, r2, r3
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	b21b      	sxth	r3, r3
 801a4b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 801a4ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a4be:	f107 0310 	add.w	r3, r7, #16
 801a4c2:	4619      	mov	r1, r3
 801a4c4:	68f8      	ldr	r0, [r7, #12]
 801a4c6:	f7f9 ff0b 	bl	80142e0 <lv_draw_rect>
        }

        if(dsc->round_end) {
 801a4ca:	68bb      	ldr	r3, [r7, #8]
 801a4cc:	7a5b      	ldrb	r3, [r3, #9]
 801a4ce:	f003 0308 	and.w	r3, r3, #8
 801a4d2:	b2db      	uxtb	r3, r3
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d03b      	beq.n	801a550 <lv_draw_sw_line+0x2f6>
            cir_area.x1 = point2->x - r;
 801a4d8:	683b      	ldr	r3, [r7, #0]
 801a4da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a4de:	b29a      	uxth	r2, r3
 801a4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4e2:	b29b      	uxth	r3, r3
 801a4e4:	1ad3      	subs	r3, r2, r3
 801a4e6:	b29b      	uxth	r3, r3
 801a4e8:	b21b      	sxth	r3, r3
 801a4ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point2->y - r;
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4f8:	b29b      	uxth	r3, r3
 801a4fa:	1ad3      	subs	r3, r2, r3
 801a4fc:	b29b      	uxth	r3, r3
 801a4fe:	b21b      	sxth	r3, r3
 801a500:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point2->x + r - r_corr;
 801a504:	683b      	ldr	r3, [r7, #0]
 801a506:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a50a:	b29a      	uxth	r2, r3
 801a50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a50e:	b29b      	uxth	r3, r3
 801a510:	4413      	add	r3, r2
 801a512:	b29a      	uxth	r2, r3
 801a514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a516:	b29b      	uxth	r3, r3
 801a518:	1ad3      	subs	r3, r2, r3
 801a51a:	b29b      	uxth	r3, r3
 801a51c:	b21b      	sxth	r3, r3
 801a51e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point2->y + r - r_corr ;
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a528:	b29a      	uxth	r2, r3
 801a52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a52c:	b29b      	uxth	r3, r3
 801a52e:	4413      	add	r3, r2
 801a530:	b29a      	uxth	r2, r3
 801a532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a534:	b29b      	uxth	r3, r3
 801a536:	1ad3      	subs	r3, r2, r3
 801a538:	b29b      	uxth	r3, r3
 801a53a:	b21b      	sxth	r3, r3
 801a53c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 801a540:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a544:	f107 0310 	add.w	r3, r7, #16
 801a548:	4619      	mov	r1, r3
 801a54a:	68f8      	ldr	r0, [r7, #12]
 801a54c:	f7f9 fec8 	bl	80142e0 <lv_draw_rect>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a554:	609a      	str	r2, [r3, #8]
 801a556:	e006      	b.n	801a566 <lv_draw_sw_line+0x30c>
    if(dsc->width == 0) return;
 801a558:	bf00      	nop
 801a55a:	e004      	b.n	801a566 <lv_draw_sw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 801a55c:	bf00      	nop
 801a55e:	e002      	b.n	801a566 <lv_draw_sw_line+0x30c>
    if(point1->x == point2->x && point1->y == point2->y) return;
 801a560:	bf00      	nop
 801a562:	e000      	b.n	801a566 <lv_draw_sw_line+0x30c>
    if(!is_common) return;
 801a564:	bf00      	nop
}
 801a566:	3760      	adds	r7, #96	; 0x60
 801a568:	46bd      	mov	sp, r7
 801a56a:	bd80      	pop	{r7, pc}

0801a56c <draw_line_hor>:
 **********************/


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801a56c:	b580      	push	{r7, lr}
 801a56e:	b098      	sub	sp, #96	; 0x60
 801a570:	af00      	add	r7, sp, #0
 801a572:	60f8      	str	r0, [r7, #12]
 801a574:	60b9      	str	r1, [r7, #8]
 801a576:	607a      	str	r2, [r7, #4]
 801a578:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801a57a:	68bb      	ldr	r3, [r7, #8]
 801a57c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a580:	3b01      	subs	r3, #1
 801a582:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 801a584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a586:	105b      	asrs	r3, r3, #1
 801a588:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801a58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a58c:	f003 0301 	and.w	r3, r3, #1
 801a590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a592:	4413      	add	r3, r2
 801a594:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 801a596:	683b      	ldr	r3, [r7, #0]
 801a598:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5a2:	4293      	cmp	r3, r2
 801a5a4:	bfa8      	it	ge
 801a5a6:	4613      	movge	r3, r2
 801a5a8:	b21b      	sxth	r3, r3
 801a5aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5b8:	4293      	cmp	r3, r2
 801a5ba:	bfb8      	it	lt
 801a5bc:	4613      	movlt	r3, r2
 801a5be:	b21b      	sxth	r3, r3
 801a5c0:	b29b      	uxth	r3, r3
 801a5c2:	3b01      	subs	r3, #1
 801a5c4:	b29b      	uxth	r3, r3
 801a5c6:	b21b      	sxth	r3, r3
 801a5c8:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.y1 = point1->y - w_half1;
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a5d0:	b29a      	uxth	r2, r3
 801a5d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5d4:	b29b      	uxth	r3, r3
 801a5d6:	1ad3      	subs	r3, r2, r3
 801a5d8:	b29b      	uxth	r3, r3
 801a5da:	b21b      	sxth	r3, r3
 801a5dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    blend_area.y2 = point1->y + w_half0;
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a5e4:	b29a      	uxth	r2, r3
 801a5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5e8:	b29b      	uxth	r3, r3
 801a5ea:	4413      	add	r3, r2
 801a5ec:	b29b      	uxth	r3, r3
 801a5ee:	b21b      	sxth	r3, r3
 801a5f0:	867b      	strh	r3, [r7, #50]	; 0x32

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	689a      	ldr	r2, [r3, #8]
 801a5f6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801a5fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a5fe:	4618      	mov	r0, r3
 801a600:	f006 f9d8 	bl	80209b4 <_lv_area_intersect>
 801a604:	4603      	mov	r3, r0
 801a606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 801a60a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a60e:	f083 0301 	eor.w	r3, r3, #1
 801a612:	b2db      	uxtb	r3, r3
 801a614:	2b00      	cmp	r3, #0
 801a616:	f040 8106 	bne.w	801a826 <draw_line_hor+0x2ba>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801a61a:	68bb      	ldr	r3, [r7, #8]
 801a61c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d006      	beq.n	801a632 <draw_line_hor+0xc6>
 801a624:	68bb      	ldr	r3, [r7, #8]
 801a626:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d001      	beq.n	801a632 <draw_line_hor+0xc6>
 801a62e:	2301      	movs	r3, #1
 801a630:	e000      	b.n	801a634 <draw_line_hor+0xc8>
 801a632:	2300      	movs	r3, #0
 801a634:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801a638:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a63c:	f003 0301 	and.w	r3, r3, #1
 801a640:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 801a644:	2301      	movs	r3, #1
 801a646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 801a64a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a64e:	4618      	mov	r0, r3
 801a650:	f7f7 fb6a 	bl	8011d28 <lv_draw_mask_is_any>
 801a654:	4603      	mov	r3, r0
 801a656:	2b00      	cmp	r3, #0
 801a658:	d003      	beq.n	801a662 <draw_line_hor+0xf6>
 801a65a:	2300      	movs	r3, #0
 801a65c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801a660:	e006      	b.n	801a670 <draw_line_hor+0x104>
    else if(dashed) simple_mode = false;
 801a662:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a666:	2b00      	cmp	r3, #0
 801a668:	d002      	beq.n	801a670 <draw_line_hor+0x104>
 801a66a:	2300      	movs	r3, #0
 801a66c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801a670:	f107 0310 	add.w	r3, r7, #16
 801a674:	211c      	movs	r1, #28
 801a676:	4618      	mov	r0, r3
 801a678:	f008 f8f0 	bl	802285c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801a67c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a680:	613b      	str	r3, [r7, #16]
    blend_dsc.color = dsc->color;
 801a682:	68bb      	ldr	r3, [r7, #8]
 801a684:	781b      	ldrb	r3, [r3, #0]
 801a686:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = dsc->opa;
 801a688:	68bb      	ldr	r3, [r7, #8]
 801a68a:	7a1b      	ldrb	r3, [r3, #8]
 801a68c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801a690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a694:	2b00      	cmp	r3, #0
 801a696:	d006      	beq.n	801a6a6 <draw_line_hor+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a698:	f107 0310 	add.w	r3, r7, #16
 801a69c:	4619      	mov	r1, r3
 801a69e:	68f8      	ldr	r0, [r7, #12]
 801a6a0:	f7fc fe12 	bl	80172c8 <lv_draw_sw_blend>
 801a6a4:	e0c0      	b.n	801a828 <draw_line_hor+0x2bc>
    }
#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {

        int32_t blend_area_w = lv_area_get_width(&blend_area);
 801a6a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	f7ff fdbe 	bl	801a22c <lv_area_get_width>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 801a6b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a6b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801a6b8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a6bc:	867b      	strh	r3, [r7, #50]	; 0x32

        lv_coord_t dash_start = 0;
 801a6be:	2300      	movs	r3, #0
 801a6c0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801a6c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d011      	beq.n	801a6f0 <draw_line_hor+0x184>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 801a6cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801a6d0:	461a      	mov	r2, r3
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a6d8:	4619      	mov	r1, r3
 801a6da:	68bb      	ldr	r3, [r7, #8]
 801a6dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a6e0:	440b      	add	r3, r1
 801a6e2:	fb92 f1f3 	sdiv	r1, r2, r3
 801a6e6:	fb01 f303 	mul.w	r3, r1, r3
 801a6ea:	1ad3      	subs	r3, r2, r3
 801a6ec:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 801a6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f007 fd08 	bl	8022108 <lv_mem_buf_get>
 801a6f8:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6fc:	61fb      	str	r3, [r7, #28]
        blend_dsc.mask_area = &blend_area;
 801a6fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a702:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 801a704:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a708:	65bb      	str	r3, [r7, #88]	; 0x58
 801a70a:	e082      	b.n	801a812 <draw_line_hor+0x2a6>
            lv_memset_ff(mask_buf, blend_area_w);
 801a70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a70e:	4619      	mov	r1, r3
 801a710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a712:	f008 f924 	bl	802295e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 801a716:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801a71a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a71c:	b21a      	sxth	r2, r3
 801a71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a720:	b21b      	sxth	r3, r3
 801a722:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a724:	f7f7 fa02 	bl	8011b2c <lv_draw_mask_apply>
 801a728:	4603      	mov	r3, r0
 801a72a:	f887 3020 	strb.w	r3, [r7, #32]

            if(dashed) {
 801a72e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a732:	2b00      	cmp	r3, #0
 801a734:	d056      	beq.n	801a7e4 <draw_line_hor+0x278>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 801a736:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d052      	beq.n	801a7e4 <draw_line_hor+0x278>
                    lv_coord_t dash_cnt = dash_start;
 801a73e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801a742:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    lv_coord_t i;
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801a746:	2300      	movs	r3, #0
 801a748:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801a74c:	e042      	b.n	801a7d4 <draw_line_hor+0x268>
                        if(dash_cnt <= dsc->dash_width) {
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a754:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801a758:	429a      	cmp	r2, r3
 801a75a:	dc17      	bgt.n	801a78c <draw_line_hor+0x220>
                            int16_t diff = dsc->dash_width - dash_cnt;
 801a75c:	68bb      	ldr	r3, [r7, #8]
 801a75e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a762:	b29a      	uxth	r2, r3
 801a764:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801a768:	1ad3      	subs	r3, r2, r3
 801a76a:	b29b      	uxth	r3, r3
 801a76c:	86fb      	strh	r3, [r7, #54]	; 0x36
                            i += diff;
 801a76e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801a772:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a774:	4413      	add	r3, r2
 801a776:	b29b      	uxth	r3, r3
 801a778:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                            dash_cnt += diff;
 801a77c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 801a780:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a782:	4413      	add	r3, r2
 801a784:	b29b      	uxth	r3, r3
 801a786:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a78a:	e015      	b.n	801a7b8 <draw_line_hor+0x24c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801a78c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a796:	4619      	mov	r1, r3
 801a798:	68bb      	ldr	r3, [r7, #8]
 801a79a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a79e:	440b      	add	r3, r1
 801a7a0:	429a      	cmp	r2, r3
 801a7a2:	db03      	blt.n	801a7ac <draw_line_hor+0x240>
                            dash_cnt = 0;
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a7aa:	e005      	b.n	801a7b8 <draw_line_hor+0x24c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 801a7ac:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a7b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a7b2:	4413      	add	r3, r2
 801a7b4:	2200      	movs	r2, #0
 801a7b6:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801a7b8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a7bc:	b29b      	uxth	r3, r3
 801a7be:	3301      	adds	r3, #1
 801a7c0:	b29b      	uxth	r3, r3
 801a7c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801a7c6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801a7ca:	b29b      	uxth	r3, r3
 801a7cc:	3301      	adds	r3, #1
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801a7d4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801a7d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a7da:	429a      	cmp	r2, r3
 801a7dc:	dcb7      	bgt.n	801a74e <draw_line_hor+0x1e2>
                        }
                    }

                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801a7de:	2302      	movs	r3, #2
 801a7e0:	f887 3020 	strb.w	r3, [r7, #32]
                }
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a7e4:	f107 0310 	add.w	r3, r7, #16
 801a7e8:	4619      	mov	r1, r3
 801a7ea:	68f8      	ldr	r0, [r7, #12]
 801a7ec:	f7fc fd6c 	bl	80172c8 <lv_draw_sw_blend>

            blend_area.y1++;
 801a7f0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801a7f4:	b29b      	uxth	r3, r3
 801a7f6:	3301      	adds	r3, #1
 801a7f8:	b29b      	uxth	r3, r3
 801a7fa:	b21b      	sxth	r3, r3
 801a7fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
            blend_area.y2++;
 801a7fe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a802:	b29b      	uxth	r3, r3
 801a804:	3301      	adds	r3, #1
 801a806:	b29b      	uxth	r3, r3
 801a808:	b21b      	sxth	r3, r3
 801a80a:	867b      	strh	r3, [r7, #50]	; 0x32
        for(h = blend_area.y1; h <= y2; h++) {
 801a80c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a80e:	3301      	adds	r3, #1
 801a810:	65bb      	str	r3, [r7, #88]	; 0x58
 801a812:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801a816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a818:	429a      	cmp	r2, r3
 801a81a:	f77f af77 	ble.w	801a70c <draw_line_hor+0x1a0>
        }
        lv_mem_buf_release(mask_buf);
 801a81e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a820:	f007 fd1e 	bl	8022260 <lv_mem_buf_release>
 801a824:	e000      	b.n	801a828 <draw_line_hor+0x2bc>
    if(!is_common) return;
 801a826:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801a828:	3760      	adds	r7, #96	; 0x60
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bd80      	pop	{r7, pc}

0801a82e <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801a82e:	b580      	push	{r7, lr}
 801a830:	b098      	sub	sp, #96	; 0x60
 801a832:	af00      	add	r7, sp, #0
 801a834:	60f8      	str	r0, [r7, #12]
 801a836:	60b9      	str	r1, [r7, #8]
 801a838:	607a      	str	r2, [r7, #4]
 801a83a:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a842:	3b01      	subs	r3, #1
 801a844:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 801a846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a848:	105b      	asrs	r3, r3, #1
 801a84a:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801a84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a84e:	f003 0301 	and.w	r3, r3, #1
 801a852:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a854:	4413      	add	r3, r2
 801a856:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = point1->x - w_half1;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a85e:	b29a      	uxth	r2, r3
 801a860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a862:	b29b      	uxth	r3, r3
 801a864:	1ad3      	subs	r3, r2, r3
 801a866:	b29b      	uxth	r3, r3
 801a868:	b21b      	sxth	r3, r3
 801a86a:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.x2 = point1->x + w_half0;
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a872:	b29a      	uxth	r2, r3
 801a874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a876:	b29b      	uxth	r3, r3
 801a878:	4413      	add	r3, r2
 801a87a:	b29b      	uxth	r3, r3
 801a87c:	b21b      	sxth	r3, r3
 801a87e:	86bb      	strh	r3, [r7, #52]	; 0x34
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 801a880:	683b      	ldr	r3, [r7, #0]
 801a882:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a88c:	4293      	cmp	r3, r2
 801a88e:	bfa8      	it	ge
 801a890:	4613      	movge	r3, r2
 801a892:	b21b      	sxth	r3, r3
 801a894:	867b      	strh	r3, [r7, #50]	; 0x32
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 801a896:	683b      	ldr	r3, [r7, #0]
 801a898:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a8a2:	4293      	cmp	r3, r2
 801a8a4:	bfb8      	it	lt
 801a8a6:	4613      	movlt	r3, r2
 801a8a8:	b21b      	sxth	r3, r3
 801a8aa:	b29b      	uxth	r3, r3
 801a8ac:	3b01      	subs	r3, #1
 801a8ae:	b29b      	uxth	r3, r3
 801a8b0:	b21b      	sxth	r3, r3
 801a8b2:	86fb      	strh	r3, [r7, #54]	; 0x36

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	689a      	ldr	r2, [r3, #8]
 801a8b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a8bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f006 f877 	bl	80209b4 <_lv_area_intersect>
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 801a8cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a8d0:	f083 0301 	eor.w	r3, r3, #1
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	f040 80d6 	bne.w	801aa88 <draw_line_ver+0x25a>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801a8dc:	68bb      	ldr	r3, [r7, #8]
 801a8de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d006      	beq.n	801a8f4 <draw_line_ver+0xc6>
 801a8e6:	68bb      	ldr	r3, [r7, #8]
 801a8e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d001      	beq.n	801a8f4 <draw_line_ver+0xc6>
 801a8f0:	2301      	movs	r3, #1
 801a8f2:	e000      	b.n	801a8f6 <draw_line_ver+0xc8>
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801a8fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a8fe:	f003 0301 	and.w	r3, r3, #1
 801a902:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 801a906:	2301      	movs	r3, #1
 801a908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 801a90c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a910:	4618      	mov	r0, r3
 801a912:	f7f7 fa09 	bl	8011d28 <lv_draw_mask_is_any>
 801a916:	4603      	mov	r3, r0
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d003      	beq.n	801a924 <draw_line_ver+0xf6>
 801a91c:	2300      	movs	r3, #0
 801a91e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801a922:	e006      	b.n	801a932 <draw_line_ver+0x104>
    else if(dashed) simple_mode = false;
 801a924:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d002      	beq.n	801a932 <draw_line_ver+0x104>
 801a92c:	2300      	movs	r3, #0
 801a92e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801a932:	f107 0314 	add.w	r3, r7, #20
 801a936:	211c      	movs	r1, #28
 801a938:	4618      	mov	r0, r3
 801a93a:	f007 ff8f 	bl	802285c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801a93e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a942:	617b      	str	r3, [r7, #20]
    blend_dsc.color = dsc->color;
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	781b      	ldrb	r3, [r3, #0]
 801a948:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->opa;
 801a94a:	68bb      	ldr	r3, [r7, #8]
 801a94c:	7a1b      	ldrb	r3, [r3, #8]
 801a94e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801a952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a956:	2b00      	cmp	r3, #0
 801a958:	d006      	beq.n	801a968 <draw_line_ver+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801a95a:	f107 0314 	add.w	r3, r7, #20
 801a95e:	4619      	mov	r1, r3
 801a960:	68f8      	ldr	r0, [r7, #12]
 801a962:	f7fc fcb1 	bl	80172c8 <lv_draw_sw_blend>
 801a966:	e090      	b.n	801aa8a <draw_line_ver+0x25c>
    }

#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {
        int32_t draw_area_w = lv_area_get_width(&blend_area);
 801a968:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a96c:	4618      	mov	r0, r3
 801a96e:	f7ff fc5d 	bl	801a22c <lv_area_get_width>
 801a972:	4603      	mov	r3, r0
 801a974:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 801a976:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801a978:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801a97a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a97e:	86fb      	strh	r3, [r7, #54]	; 0x36

        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 801a980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a982:	4618      	mov	r0, r3
 801a984:	f007 fbc0 	bl	8022108 <lv_mem_buf_get>
 801a988:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a98c:	623b      	str	r3, [r7, #32]
        blend_dsc.mask_area = &blend_area;
 801a98e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a992:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_coord_t dash_start = 0;
 801a994:	2300      	movs	r3, #0
 801a996:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801a99a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d011      	beq.n	801a9c6 <draw_line_ver+0x198>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 801a9a2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a9a6:	461a      	mov	r2, r3
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a9ae:	4619      	mov	r1, r3
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a9b6:	440b      	add	r3, r1
 801a9b8:	fb92 f1f3 	sdiv	r1, r2, r3
 801a9bc:	fb01 f303 	mul.w	r3, r1, r3
 801a9c0:	1ad3      	subs	r3, r2, r3
 801a9c2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_coord_t dash_cnt = dash_start;
 801a9c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801a9ca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 801a9ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801a9d2:	657b      	str	r3, [r7, #84]	; 0x54
 801a9d4:	e04f      	b.n	801aa76 <draw_line_ver+0x248>
            lv_memset_ff(mask_buf, draw_area_w);
 801a9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9d8:	4619      	mov	r1, r3
 801a9da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a9dc:	f007 ffbf 	bl	802295e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 801a9e0:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801a9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a9e6:	b21a      	sxth	r2, r3
 801a9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9ea:	b21b      	sxth	r3, r3
 801a9ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a9ee:	f7f7 f89d 	bl	8011b2c <lv_draw_mask_apply>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if(dashed) {
 801a9f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d023      	beq.n	801aa48 <draw_line_ver+0x21a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 801aa00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d018      	beq.n	801aa3a <draw_line_ver+0x20c>
                    if(dash_cnt > dsc->dash_width) {
 801aa08:	68bb      	ldr	r3, [r7, #8]
 801aa0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aa0e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801aa12:	429a      	cmp	r2, r3
 801aa14:	dd02      	ble.n	801aa1c <draw_line_ver+0x1ee>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 801aa16:	2300      	movs	r3, #0
 801aa18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801aa1c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aa26:	4619      	mov	r1, r3
 801aa28:	68bb      	ldr	r3, [r7, #8]
 801aa2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aa2e:	440b      	add	r3, r1
 801aa30:	429a      	cmp	r2, r3
 801aa32:	db02      	blt.n	801aa3a <draw_line_ver+0x20c>
                        dash_cnt = 0;
 801aa34:	2300      	movs	r3, #0
 801aa36:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    }
                }
                dash_cnt ++;
 801aa3a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801aa3e:	b29b      	uxth	r3, r3
 801aa40:	3301      	adds	r3, #1
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801aa48:	f107 0314 	add.w	r3, r7, #20
 801aa4c:	4619      	mov	r1, r3
 801aa4e:	68f8      	ldr	r0, [r7, #12]
 801aa50:	f7fc fc3a 	bl	80172c8 <lv_draw_sw_blend>

            blend_area.y1++;
 801aa54:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801aa58:	b29b      	uxth	r3, r3
 801aa5a:	3301      	adds	r3, #1
 801aa5c:	b29b      	uxth	r3, r3
 801aa5e:	b21b      	sxth	r3, r3
 801aa60:	867b      	strh	r3, [r7, #50]	; 0x32
            blend_area.y2++;
 801aa62:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801aa66:	b29b      	uxth	r3, r3
 801aa68:	3301      	adds	r3, #1
 801aa6a:	b29b      	uxth	r3, r3
 801aa6c:	b21b      	sxth	r3, r3
 801aa6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(h = blend_area.y1; h <= y2; h++) {
 801aa70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aa72:	3301      	adds	r3, #1
 801aa74:	657b      	str	r3, [r7, #84]	; 0x54
 801aa76:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801aa7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801aa7c:	429a      	cmp	r2, r3
 801aa7e:	ddaa      	ble.n	801a9d6 <draw_line_ver+0x1a8>
        }
        lv_mem_buf_release(mask_buf);
 801aa80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801aa82:	f007 fbed 	bl	8022260 <lv_mem_buf_release>
 801aa86:	e000      	b.n	801aa8a <draw_line_ver+0x25c>
    if(!is_common) return;
 801aa88:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801aa8a:	3760      	adds	r7, #96	; 0x60
 801aa8c:	46bd      	mov	sp, r7
 801aa8e:	bd80      	pop	{r7, pc}

0801aa90 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                 const lv_point_t * point1, const lv_point_t * point2)
{
 801aa90:	b5b0      	push	{r4, r5, r7, lr}
 801aa92:	b0ce      	sub	sp, #312	; 0x138
 801aa94:	af02      	add	r7, sp, #8
 801aa96:	f507 7498 	add.w	r4, r7, #304	; 0x130
 801aa9a:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 801aa9e:	6020      	str	r0, [r4, #0]
 801aaa0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 801aaa4:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 801aaa8:	6001      	str	r1, [r0, #0]
 801aaaa:	f507 7198 	add.w	r1, r7, #304	; 0x130
 801aaae:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 801aab2:	600a      	str	r2, [r1, #0]
 801aab4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801aab8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 801aabc:	6013      	str	r3, [r2, #0]
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 801aabe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801aacc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aada:	429a      	cmp	r2, r3
 801aadc:	da24      	bge.n	801ab28 <draw_line_skew+0x98>
        p1.y = point1->y;
 801aade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aaec:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point2->y;
 801aaf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aaf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aafe:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point1->x;
 801ab02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ab06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab10:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point2->x;
 801ab14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ab18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab22:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 801ab26:	e023      	b.n	801ab70 <draw_line_skew+0xe0>
    }
    else {
        p1.y = point2->y;
 801ab28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ab2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ab36:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point1->y;
 801ab3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ab3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ab48:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point2->x;
 801ab4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ab50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab5a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point1->x;
 801ab5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ab62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab6c:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    }

    int32_t xdiff = p2.x - p1.x;
 801ab70:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ab74:	461a      	mov	r2, r3
 801ab76:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ab7a:	1ad3      	subs	r3, r2, r3
 801ab7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 801ab80:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ab84:	461a      	mov	r2, r3
 801ab86:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ab8a:	1ad3      	subs	r3, r2, r3
 801ab8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 801ab90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ab94:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801ab98:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801ab9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	bfb8      	it	lt
 801aba4:	425b      	neglt	r3, r3
 801aba6:	429a      	cmp	r2, r3
 801aba8:	bfcc      	ite	gt
 801abaa:	2301      	movgt	r3, #1
 801abac:	2300      	movle	r3, #0
 801abae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 801abb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801abb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801abc0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 801abc4:	2300      	movs	r3, #0
 801abc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 801abca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d00f      	beq.n	801abf2 <draw_line_skew+0x162>
 801abd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	bfb8      	it	lt
 801abda:	425b      	neglt	r3, r3
 801abdc:	015a      	lsls	r2, r3, #5
 801abde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	bfb8      	it	lt
 801abe6:	425b      	neglt	r3, r3
 801abe8:	fb92 f3f3 	sdiv	r3, r2, r3
 801abec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801abf0:	e00e      	b.n	801ac10 <draw_line_skew+0x180>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 801abf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	bfb8      	it	lt
 801abfa:	425b      	neglt	r3, r3
 801abfc:	015a      	lsls	r2, r3, #5
 801abfe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	bfb8      	it	lt
 801ac06:	425b      	neglt	r3, r3
 801ac08:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 801ac10:	4a7f      	ldr	r2, [pc, #508]	; (801ae10 <draw_line_skew+0x380>)
 801ac12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ac16:	4413      	add	r3, r2
 801ac18:	781b      	ldrb	r3, [r3, #0]
 801ac1a:	461a      	mov	r2, r3
 801ac1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac20:	fb02 f303 	mul.w	r3, r2, r3
 801ac24:	333f      	adds	r3, #63	; 0x3f
 801ac26:	11db      	asrs	r3, r3, #7
 801ac28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 801ac2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac30:	105b      	asrs	r3, r3, #1
 801ac32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801ac36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac3a:	f003 0301 	and.w	r3, r3, #1
 801ac3e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801ac42:	4413      	add	r3, r2
 801ac44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 801ac48:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801ac4c:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ac50:	4293      	cmp	r3, r2
 801ac52:	bfa8      	it	ge
 801ac54:	4613      	movge	r3, r2
 801ac56:	b21b      	sxth	r3, r3
 801ac58:	b29a      	uxth	r2, r3
 801ac5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac5e:	b29b      	uxth	r3, r3
 801ac60:	1ad3      	subs	r3, r2, r3
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	b21b      	sxth	r3, r3
 801ac66:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 801ac6a:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801ac6e:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ac72:	4293      	cmp	r3, r2
 801ac74:	bfb8      	it	lt
 801ac76:	4613      	movlt	r3, r2
 801ac78:	b21b      	sxth	r3, r3
 801ac7a:	b29a      	uxth	r2, r3
 801ac7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac80:	b29b      	uxth	r3, r3
 801ac82:	4413      	add	r3, r2
 801ac84:	b29b      	uxth	r3, r3
 801ac86:	b21b      	sxth	r3, r3
 801ac88:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 801ac8c:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 801ac90:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ac94:	4293      	cmp	r3, r2
 801ac96:	bfa8      	it	ge
 801ac98:	4613      	movge	r3, r2
 801ac9a:	b21b      	sxth	r3, r3
 801ac9c:	b29a      	uxth	r2, r3
 801ac9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aca2:	b29b      	uxth	r3, r3
 801aca4:	1ad3      	subs	r3, r2, r3
 801aca6:	b29b      	uxth	r3, r3
 801aca8:	b21b      	sxth	r3, r3
 801acaa:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 801acae:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 801acb2:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801acb6:	4293      	cmp	r3, r2
 801acb8:	bfb8      	it	lt
 801acba:	4613      	movlt	r3, r2
 801acbc:	b21b      	sxth	r3, r3
 801acbe:	b29a      	uxth	r2, r3
 801acc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acc4:	b29b      	uxth	r3, r3
 801acc6:	4413      	add	r3, r2
 801acc8:	b29b      	uxth	r3, r3
 801acca:	b21b      	sxth	r3, r3
 801accc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801acd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801acd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	689a      	ldr	r2, [r3, #8]
 801acdc:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801ace0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ace4:	4618      	mov	r0, r3
 801ace6:	f005 fe65 	bl	80209b4 <_lv_area_intersect>
 801acea:	4603      	mov	r3, r0
 801acec:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 801acf0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801acf4:	f083 0301 	eor.w	r3, r3, #1
 801acf8:	b2db      	uxtb	r3, r3
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	f040 8276 	bne.w	801b1ec <draw_line_skew+0x75c>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 801ad00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	f000 8085 	beq.w	801ae14 <draw_line_skew+0x384>
        if(xdiff > 0) {
 801ad0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	dd3e      	ble.n	801ad90 <draw_line_skew+0x300>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801ad12:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ad16:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ad1a:	b29a      	uxth	r2, r3
 801ad1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ad20:	b29b      	uxth	r3, r3
 801ad22:	1ad3      	subs	r3, r2, r3
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	b21c      	sxth	r4, r3
 801ad28:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ad2c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ad30:	b29a      	uxth	r2, r3
 801ad32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ad36:	b29b      	uxth	r3, r3
 801ad38:	1ad3      	subs	r3, r2, r3
 801ad3a:	b29b      	uxth	r3, r3
 801ad3c:	b21b      	sxth	r3, r3
 801ad3e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ad42:	2200      	movs	r2, #0
 801ad44:	9201      	str	r2, [sp, #4]
 801ad46:	9300      	str	r3, [sp, #0]
 801ad48:	462b      	mov	r3, r5
 801ad4a:	4622      	mov	r2, r4
 801ad4c:	f7f7 f84a 	bl	8011de4 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801ad50:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ad54:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ad58:	b29a      	uxth	r2, r3
 801ad5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	4413      	add	r3, r2
 801ad62:	b29b      	uxth	r3, r3
 801ad64:	b21c      	sxth	r4, r3
 801ad66:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ad6a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ad6e:	b29a      	uxth	r2, r3
 801ad70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ad74:	b29b      	uxth	r3, r3
 801ad76:	4413      	add	r3, r2
 801ad78:	b29b      	uxth	r3, r3
 801ad7a:	b21b      	sxth	r3, r3
 801ad7c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801ad80:	2201      	movs	r2, #1
 801ad82:	9201      	str	r2, [sp, #4]
 801ad84:	9300      	str	r3, [sp, #0]
 801ad86:	462b      	mov	r3, r5
 801ad88:	4622      	mov	r2, r4
 801ad8a:	f7f7 f82b 	bl	8011de4 <lv_draw_mask_line_points_init>
 801ad8e:	e07f      	b.n	801ae90 <draw_line_skew+0x400>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801ad90:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ad94:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ad98:	b29a      	uxth	r2, r3
 801ad9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ad9e:	b29b      	uxth	r3, r3
 801ada0:	4413      	add	r3, r2
 801ada2:	b29b      	uxth	r3, r3
 801ada4:	b21c      	sxth	r4, r3
 801ada6:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801adaa:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801adae:	b29a      	uxth	r2, r3
 801adb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801adb4:	b29b      	uxth	r3, r3
 801adb6:	4413      	add	r3, r2
 801adb8:	b29b      	uxth	r3, r3
 801adba:	b21b      	sxth	r3, r3
 801adbc:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801adc0:	2200      	movs	r2, #0
 801adc2:	9201      	str	r2, [sp, #4]
 801adc4:	9300      	str	r3, [sp, #0]
 801adc6:	462b      	mov	r3, r5
 801adc8:	4622      	mov	r2, r4
 801adca:	f7f7 f80b 	bl	8011de4 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801adce:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801add2:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801add6:	b29a      	uxth	r2, r3
 801add8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801addc:	b29b      	uxth	r3, r3
 801adde:	1ad3      	subs	r3, r2, r3
 801ade0:	b29b      	uxth	r3, r3
 801ade2:	b21c      	sxth	r4, r3
 801ade4:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ade8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801adec:	b29a      	uxth	r2, r3
 801adee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801adf2:	b29b      	uxth	r3, r3
 801adf4:	1ad3      	subs	r3, r2, r3
 801adf6:	b29b      	uxth	r3, r3
 801adf8:	b21b      	sxth	r3, r3
 801adfa:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801adfe:	2201      	movs	r2, #1
 801ae00:	9201      	str	r2, [sp, #4]
 801ae02:	9300      	str	r3, [sp, #0]
 801ae04:	462b      	mov	r3, r5
 801ae06:	4622      	mov	r2, r4
 801ae08:	f7f6 ffec 	bl	8011de4 <lv_draw_mask_line_points_init>
 801ae0c:	e040      	b.n	801ae90 <draw_line_skew+0x400>
 801ae0e:	bf00      	nop
 801ae10:	08026b7c 	.word	0x08026b7c
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 801ae14:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ae18:	b29a      	uxth	r2, r3
 801ae1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ae1e:	b29b      	uxth	r3, r3
 801ae20:	4413      	add	r3, r2
 801ae22:	b29b      	uxth	r3, r3
 801ae24:	b219      	sxth	r1, r3
 801ae26:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801ae2a:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ae2e:	b29a      	uxth	r2, r3
 801ae30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ae34:	b29b      	uxth	r3, r3
 801ae36:	4413      	add	r3, r2
 801ae38:	b29b      	uxth	r3, r3
 801ae3a:	b21a      	sxth	r2, r3
 801ae3c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ae40:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ae44:	2500      	movs	r5, #0
 801ae46:	9501      	str	r5, [sp, #4]
 801ae48:	9300      	str	r3, [sp, #0]
 801ae4a:	4613      	mov	r3, r2
 801ae4c:	4622      	mov	r2, r4
 801ae4e:	f7f6 ffc9 	bl	8011de4 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 801ae52:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ae56:	b29a      	uxth	r2, r3
 801ae58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ae5c:	b29b      	uxth	r3, r3
 801ae5e:	1ad3      	subs	r3, r2, r3
 801ae60:	b29b      	uxth	r3, r3
 801ae62:	b219      	sxth	r1, r3
 801ae64:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801ae68:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ae6c:	b29a      	uxth	r2, r3
 801ae6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ae72:	b29b      	uxth	r3, r3
 801ae74:	1ad3      	subs	r3, r2, r3
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	b21a      	sxth	r2, r3
 801ae7a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ae7e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801ae82:	2501      	movs	r5, #1
 801ae84:	9501      	str	r5, [sp, #4]
 801ae86:	9300      	str	r3, [sp, #0]
 801ae88:	4613      	mov	r3, r2
 801ae8a:	4622      	mov	r2, r4
 801ae8c:	f7f6 ffaa 	bl	8011de4 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 801ae90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ae94:	2100      	movs	r1, #0
 801ae96:	4618      	mov	r0, r3
 801ae98:	f7f6 fe16 	bl	8011ac8 <lv_draw_mask_add>
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 801aea2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801aea6:	2100      	movs	r1, #0
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f7f6 fe0d 	bl	8011ac8 <lv_draw_mask_add>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 801aeb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aeb8:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 801aebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aec0:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 801aec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801aec8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	7a5b      	ldrb	r3, [r3, #9]
 801aed0:	f003 0310 	and.w	r3, r3, #16
 801aed4:	b2db      	uxtb	r3, r3
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d14f      	bne.n	801af7a <draw_line_skew+0x4ea>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 801aeda:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801aede:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801aee2:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801aee6:	b29a      	uxth	r2, r3
 801aee8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801aeec:	b29b      	uxth	r3, r3
 801aeee:	1ad3      	subs	r3, r2, r3
 801aef0:	b29b      	uxth	r3, r3
 801aef2:	b21d      	sxth	r5, r3
 801aef4:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801aef8:	b29a      	uxth	r2, r3
 801aefa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801aefe:	b29b      	uxth	r3, r3
 801af00:	4413      	add	r3, r2
 801af02:	b29b      	uxth	r3, r3
 801af04:	b21b      	sxth	r3, r3
 801af06:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801af0a:	2203      	movs	r2, #3
 801af0c:	9201      	str	r2, [sp, #4]
 801af0e:	9300      	str	r3, [sp, #0]
 801af10:	462b      	mov	r3, r5
 801af12:	4622      	mov	r2, r4
 801af14:	f7f6 ff66 	bl	8011de4 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 801af18:	f9b7 10e4 	ldrsh.w	r1, [r7, #228]	; 0xe4
 801af1c:	f9b7 40e6 	ldrsh.w	r4, [r7, #230]	; 0xe6
 801af20:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801af24:	b29a      	uxth	r2, r3
 801af26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801af2a:	b29b      	uxth	r3, r3
 801af2c:	1ad3      	subs	r3, r2, r3
 801af2e:	b29b      	uxth	r3, r3
 801af30:	b21d      	sxth	r5, r3
 801af32:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801af36:	b29a      	uxth	r2, r3
 801af38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	4413      	add	r3, r2
 801af40:	b29b      	uxth	r3, r3
 801af42:	b21b      	sxth	r3, r3
 801af44:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801af48:	2202      	movs	r2, #2
 801af4a:	9201      	str	r2, [sp, #4]
 801af4c:	9300      	str	r3, [sp, #0]
 801af4e:	462b      	mov	r3, r5
 801af50:	4622      	mov	r2, r4
 801af52:	f7f6 ff47 	bl	8011de4 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 801af56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801af5a:	2100      	movs	r1, #0
 801af5c:	4618      	mov	r0, r3
 801af5e:	f7f6 fdb3 	bl	8011ac8 <lv_draw_mask_add>
 801af62:	4603      	mov	r3, r0
 801af64:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 801af68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af6c:	2100      	movs	r1, #0
 801af6e:	4618      	mov	r0, r3
 801af70:	f7f6 fdaa 	bl	8011ac8 <lv_draw_mask_add>
 801af74:	4603      	mov	r3, r0
 801af76:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    /*The real draw area is around the line.
     *It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);
 801af7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801af7e:	4618      	mov	r0, r3
 801af80:	f7ff f954 	bl	801a22c <lv_area_get_width>
 801af84:	4603      	mov	r3, r0
 801af86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 801af8a:	f7f3 fcc3 	bl	800e914 <_lv_refr_get_disp_refreshing>
 801af8e:	4603      	mov	r3, r0
 801af90:	4618      	mov	r0, r3
 801af92:	f004 ffe9 	bl	801ff68 <lv_disp_get_hor_res>
 801af96:	4603      	mov	r3, r0
 801af98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 801af9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801afa0:	4618      	mov	r0, r3
 801afa2:	f005 fc7a 	bl	802089a <lv_area_get_size>
 801afa6:	4602      	mov	r2, r0
 801afa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801afac:	4293      	cmp	r3, r2
 801afae:	d906      	bls.n	801afbe <draw_line_skew+0x52e>
 801afb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801afb4:	4618      	mov	r0, r3
 801afb6:	f005 fc70 	bl	802089a <lv_area_get_size>
 801afba:	4603      	mov	r3, r0
 801afbc:	e001      	b.n	801afc2 <draw_line_skew+0x532>
 801afbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801afc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 801afc6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801afca:	f007 f89d 	bl	8022108 <lv_mem_buf_get>
 801afce:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

    lv_coord_t y2 = blend_area.y2;
 801afd2:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 801afd6:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    blend_area.y2 = blend_area.y1;
 801afda:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801afde:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    uint32_t mask_p = 0;
 801afe2:	2300      	movs	r3, #0
 801afe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    lv_memset_ff(mask_buf, mask_buf_size);
 801afe8:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801afec:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801aff0:	f007 fcb5 	bl	802295e <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801aff4:	f107 0310 	add.w	r3, r7, #16
 801aff8:	211c      	movs	r1, #28
 801affa:	4618      	mov	r0, r3
 801affc:	f007 fc2e 	bl	802285c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801b000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b004:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b008:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801b00c:	601a      	str	r2, [r3, #0]
    blend_dsc.color = dsc->color;
 801b00e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b012:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b016:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801b01a:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 801b01e:	6812      	ldr	r2, [r2, #0]
 801b020:	7812      	ldrb	r2, [r2, #0]
 801b022:	721a      	strb	r2, [r3, #8]
    blend_dsc.opa = dsc->opa;
 801b024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b028:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	7a1a      	ldrb	r2, [r3, #8]
 801b030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b034:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b038:	761a      	strb	r2, [r3, #24]
    blend_dsc.mask_buf = mask_buf;
 801b03a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b03e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b042:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801b046:	60da      	str	r2, [r3, #12]
    blend_dsc.mask_area = &blend_area;
 801b048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b04c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b050:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801b054:	615a      	str	r2, [r3, #20]

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 801b056:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801b05a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801b05e:	e06a      	b.n	801b136 <draw_line_skew+0x6a6>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 801b060:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801b064:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b068:	18d0      	adds	r0, r2, r3
 801b06a:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 801b06e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b072:	b21a      	sxth	r2, r3
 801b074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b078:	b21b      	sxth	r3, r3
 801b07a:	f7f6 fd57 	bl	8011b2c <lv_draw_mask_apply>
 801b07e:	4603      	mov	r3, r0
 801b080:	461a      	mov	r2, r3
 801b082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b086:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b08a:	741a      	strb	r2, [r3, #16]
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801b08c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b090:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b094:	7c1b      	ldrb	r3, [r3, #16]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d10a      	bne.n	801b0b0 <draw_line_skew+0x620>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 801b09a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801b09e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b0a2:	4413      	add	r3, r2
 801b0a4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801b0a8:	4611      	mov	r1, r2
 801b0aa:	4618      	mov	r0, r3
 801b0ac:	f007 fbd6 	bl	802285c <lv_memset_00>
        }

        mask_p += draw_area_w;
 801b0b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b0b4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801b0b8:	4413      	add	r3, r2
 801b0ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 801b0be:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801b0c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b0c6:	4413      	add	r3, r2
 801b0c8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801b0cc:	429a      	cmp	r2, r3
 801b0ce:	d908      	bls.n	801b0e2 <draw_line_skew+0x652>
            blend_area.y2 ++;
 801b0d0:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801b0d4:	b29b      	uxth	r3, r3
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	b29b      	uxth	r3, r3
 801b0da:	b21b      	sxth	r3, r3
 801b0dc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 801b0e0:	e024      	b.n	801b12c <draw_line_skew+0x69c>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b0e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b0e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b0ea:	2202      	movs	r2, #2
 801b0ec:	741a      	strb	r2, [r3, #16]
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b0ee:	f107 0210 	add.w	r2, r7, #16
 801b0f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b0f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801b0fa:	4611      	mov	r1, r2
 801b0fc:	6818      	ldr	r0, [r3, #0]
 801b0fe:	f7fc f8e3 	bl	80172c8 <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 801b102:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801b106:	b29b      	uxth	r3, r3
 801b108:	3301      	adds	r3, #1
 801b10a:	b29b      	uxth	r3, r3
 801b10c:	b21b      	sxth	r3, r3
 801b10e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
            blend_area.y2 = blend_area.y1;
 801b112:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801b116:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
            mask_p = 0;
 801b11a:	2300      	movs	r3, #0
 801b11c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            lv_memset_ff(mask_buf, mask_buf_size);
 801b120:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801b124:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801b128:	f007 fc19 	bl	802295e <lv_memset_ff>
    for(h = blend_area.y1; h <= y2; h++) {
 801b12c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b130:	3301      	adds	r3, #1
 801b132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801b136:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 801b13a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801b13e:	429a      	cmp	r2, r3
 801b140:	dd8e      	ble.n	801b060 <draw_line_skew+0x5d0>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 801b142:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
 801b146:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801b14a:	429a      	cmp	r2, r3
 801b14c:	d017      	beq.n	801b17e <draw_line_skew+0x6ee>
        blend_area.y2--;
 801b14e:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801b152:	b29b      	uxth	r3, r3
 801b154:	3b01      	subs	r3, #1
 801b156:	b29b      	uxth	r3, r3
 801b158:	b21b      	sxth	r3, r3
 801b15a:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b15e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b162:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801b166:	2202      	movs	r2, #2
 801b168:	741a      	strb	r2, [r3, #16]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b16a:	f107 0210 	add.w	r2, r7, #16
 801b16e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801b172:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801b176:	4611      	mov	r1, r2
 801b178:	6818      	ldr	r0, [r3, #0]
 801b17a:	f7fc f8a5 	bl	80172c8 <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 801b17e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801b182:	f007 f86d 	bl	8022260 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 801b186:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b18a:	4618      	mov	r0, r3
 801b18c:	f7f6 fd62 	bl	8011c54 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 801b190:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b194:	4618      	mov	r0, r3
 801b196:	f7f6 fd5d 	bl	8011c54 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 801b19a:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801b19e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b1a2:	d004      	beq.n	801b1ae <draw_line_skew+0x71e>
 801b1a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f7f6 fd53 	bl	8011c54 <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 801b1ae:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b1b6:	d004      	beq.n	801b1c2 <draw_line_skew+0x732>
 801b1b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b1bc:	4618      	mov	r0, r3
 801b1be:	f7f6 fd49 	bl	8011c54 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 801b1c2:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	f7f6 fcf4 	bl	8011bb4 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 801b1cc:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7f6 fcef 	bl	8011bb4 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 801b1d6:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801b1da:	4618      	mov	r0, r3
 801b1dc:	f7f6 fcea 	bl	8011bb4 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 801b1e0:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	f7f6 fce5 	bl	8011bb4 <lv_draw_mask_remove_id>
 801b1ea:	e000      	b.n	801b1ee <draw_line_skew+0x75e>
    if(is_common == false) return;
 801b1ec:	bf00      	nop
    LV_UNUSED(point2);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw skewed line with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801b1ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	bdb0      	pop	{r4, r5, r7, pc}
 801b1f6:	bf00      	nop

0801b1f8 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 801b1f8:	b590      	push	{r4, r7, lr}
 801b1fa:	b09b      	sub	sp, #108	; 0x6c
 801b1fc:	af02      	add	r7, sp, #8
 801b1fe:	60f8      	str	r0, [r7, #12]
 801b200:	60b9      	str	r1, [r7, #8]
 801b202:	607a      	str	r2, [r7, #4]
 801b204:	807b      	strh	r3, [r7, #2]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 801b206:	887b      	ldrh	r3, [r7, #2]
 801b208:	2b02      	cmp	r3, #2
 801b20a:	f240 82a9 	bls.w	801b760 <lv_draw_sw_polygon+0x568>
    if(points == NULL) return;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	2b00      	cmp	r3, #0
 801b212:	f000 82a7 	beq.w	801b764 <lv_draw_sw_polygon+0x56c>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 801b216:	887b      	ldrh	r3, [r7, #2]
 801b218:	009b      	lsls	r3, r3, #2
 801b21a:	4618      	mov	r0, r3
 801b21c:	f006 ff74 	bl	8022108 <lv_mem_buf_get>
 801b220:	63b8      	str	r0, [r7, #56]	; 0x38
    if(p == NULL) return;
 801b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b224:	2b00      	cmp	r3, #0
 801b226:	f000 829f 	beq.w	801b768 <lv_draw_sw_polygon+0x570>
    uint16_t i;
    uint16_t pcnt = 0;
 801b22a:	2300      	movs	r3, #0
 801b22c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    p[0] = points[0];
 801b230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	6013      	str	r3, [r2, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 801b238:	2300      	movs	r3, #0
 801b23a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b23e:	e039      	b.n	801b2b4 <lv_draw_sw_polygon+0xbc>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 801b240:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b244:	009b      	lsls	r3, r3, #2
 801b246:	687a      	ldr	r2, [r7, #4]
 801b248:	4413      	add	r3, r2
 801b24a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b24e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b252:	3301      	adds	r3, #1
 801b254:	009b      	lsls	r3, r3, #2
 801b256:	6879      	ldr	r1, [r7, #4]
 801b258:	440b      	add	r3, r1
 801b25a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b25e:	429a      	cmp	r2, r3
 801b260:	d110      	bne.n	801b284 <lv_draw_sw_polygon+0x8c>
 801b262:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b266:	009b      	lsls	r3, r3, #2
 801b268:	687a      	ldr	r2, [r7, #4]
 801b26a:	4413      	add	r3, r2
 801b26c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b270:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b274:	3301      	adds	r3, #1
 801b276:	009b      	lsls	r3, r3, #2
 801b278:	6879      	ldr	r1, [r7, #4]
 801b27a:	440b      	add	r3, r1
 801b27c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b280:	429a      	cmp	r2, r3
 801b282:	d012      	beq.n	801b2aa <lv_draw_sw_polygon+0xb2>
            p[pcnt] = points[i];
 801b284:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	687a      	ldr	r2, [r7, #4]
 801b28c:	18d1      	adds	r1, r2, r3
 801b28e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b292:	009b      	lsls	r3, r3, #2
 801b294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b296:	4413      	add	r3, r2
 801b298:	461a      	mov	r2, r3
 801b29a:	460b      	mov	r3, r1
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	6013      	str	r3, [r2, #0]
            pcnt++;
 801b2a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b2a4:	3301      	adds	r3, #1
 801b2a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    for(i = 0; i < point_cnt - 1; i++) {
 801b2aa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b2ae:	3301      	adds	r3, #1
 801b2b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b2b4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b2b8:	887b      	ldrh	r3, [r7, #2]
 801b2ba:	3b01      	subs	r3, #1
 801b2bc:	429a      	cmp	r2, r3
 801b2be:	dbbf      	blt.n	801b240 <lv_draw_sw_polygon+0x48>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b2c6:	8879      	ldrh	r1, [r7, #2]
 801b2c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b2cc:	440b      	add	r3, r1
 801b2ce:	009b      	lsls	r3, r3, #2
 801b2d0:	6879      	ldr	r1, [r7, #4]
 801b2d2:	440b      	add	r3, r1
 801b2d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b2d8:	429a      	cmp	r2, r3
 801b2da:	d10d      	bne.n	801b2f8 <lv_draw_sw_polygon+0x100>
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b2e2:	8879      	ldrh	r1, [r7, #2]
 801b2e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b2e8:	440b      	add	r3, r1
 801b2ea:	009b      	lsls	r3, r3, #2
 801b2ec:	6879      	ldr	r1, [r7, #4]
 801b2ee:	440b      	add	r3, r1
 801b2f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b2f4:	429a      	cmp	r2, r3
 801b2f6:	d014      	beq.n	801b322 <lv_draw_sw_polygon+0x12a>
        p[pcnt] = points[point_cnt - 1];
 801b2f8:	887a      	ldrh	r2, [r7, #2]
 801b2fa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b2fe:	4413      	add	r3, r2
 801b300:	009b      	lsls	r3, r3, #2
 801b302:	687a      	ldr	r2, [r7, #4]
 801b304:	18d1      	adds	r1, r2, r3
 801b306:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b30a:	009b      	lsls	r3, r3, #2
 801b30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b30e:	4413      	add	r3, r2
 801b310:	461a      	mov	r2, r3
 801b312:	460b      	mov	r3, r1
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	6013      	str	r3, [r2, #0]
        pcnt++;
 801b318:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b31c:	3301      	adds	r3, #1
 801b31e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    point_cnt = pcnt;
 801b322:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801b326:	807b      	strh	r3, [r7, #2]
    if(point_cnt < 3) {
 801b328:	887b      	ldrh	r3, [r7, #2]
 801b32a:	2b02      	cmp	r3, #2
 801b32c:	d803      	bhi.n	801b336 <lv_draw_sw_polygon+0x13e>
        lv_mem_buf_release(p);
 801b32e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b330:	f006 ff96 	bl	8022260 <lv_mem_buf_release>
        return;
 801b334:	e219      	b.n	801b76a <lv_draw_sw_polygon+0x572>
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 801b336:	4a9a      	ldr	r2, [pc, #616]	; (801b5a0 <lv_draw_sw_polygon+0x3a8>)
 801b338:	f107 031c 	add.w	r3, r7, #28
 801b33c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b340:	e883 0003 	stmia.w	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 801b344:	2300      	movs	r3, #0
 801b346:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b34a:	e03c      	b.n	801b3c6 <lv_draw_sw_polygon+0x1ce>
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 801b34c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b350:	009b      	lsls	r3, r3, #2
 801b352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b354:	4413      	add	r3, r2
 801b356:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b35a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801b35e:	4293      	cmp	r3, r2
 801b360:	bfa8      	it	ge
 801b362:	4613      	movge	r3, r2
 801b364:	b21b      	sxth	r3, r3
 801b366:	83bb      	strh	r3, [r7, #28]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 801b368:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b36c:	009b      	lsls	r3, r3, #2
 801b36e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b370:	4413      	add	r3, r2
 801b372:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b376:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b37a:	4293      	cmp	r3, r2
 801b37c:	bfa8      	it	ge
 801b37e:	4613      	movge	r3, r2
 801b380:	b21b      	sxth	r3, r3
 801b382:	83fb      	strh	r3, [r7, #30]
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 801b384:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b388:	009b      	lsls	r3, r3, #2
 801b38a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b38c:	4413      	add	r3, r2
 801b38e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b392:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b396:	4293      	cmp	r3, r2
 801b398:	bfb8      	it	lt
 801b39a:	4613      	movlt	r3, r2
 801b39c:	b21b      	sxth	r3, r3
 801b39e:	843b      	strh	r3, [r7, #32]
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 801b3a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b3a4:	009b      	lsls	r3, r3, #2
 801b3a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3a8:	4413      	add	r3, r2
 801b3aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b3ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b3b2:	4293      	cmp	r3, r2
 801b3b4:	bfb8      	it	lt
 801b3b6:	4613      	movlt	r3, r2
 801b3b8:	b21b      	sxth	r3, r3
 801b3ba:	847b      	strh	r3, [r7, #34]	; 0x22
    for(i = 0; i < point_cnt; i++) {
 801b3bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b3c0:	3301      	adds	r3, #1
 801b3c2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b3c6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b3ca:	887b      	ldrh	r3, [r7, #2]
 801b3cc:	429a      	cmp	r2, r3
 801b3ce:	d3bd      	bcc.n	801b34c <lv_draw_sw_polygon+0x154>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	689a      	ldr	r2, [r3, #8]
 801b3d4:	f107 011c 	add.w	r1, r7, #28
 801b3d8:	f107 0314 	add.w	r3, r7, #20
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f005 fae9 	bl	80209b4 <_lv_area_intersect>
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(!is_common) {
 801b3e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b3ec:	f083 0301 	eor.w	r3, r3, #1
 801b3f0:	b2db      	uxtb	r3, r3
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d003      	beq.n	801b3fe <lv_draw_sw_polygon+0x206>
        lv_mem_buf_release(p);
 801b3f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b3f8:	f006 ff32 	bl	8022260 <lv_mem_buf_release>
        return;
 801b3fc:	e1b5      	b.n	801b76a <lv_draw_sw_polygon+0x572>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	689b      	ldr	r3, [r3, #8]
 801b402:	633b      	str	r3, [r7, #48]	; 0x30
    draw_ctx->clip_area = &clip_area;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	f107 0214 	add.w	r2, r7, #20
 801b40a:	609a      	str	r2, [r3, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 801b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b40e:	885b      	ldrh	r3, [r3, #2]
 801b410:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    int16_t y_min_i = 0;
 801b414:	2300      	movs	r3, #0
 801b416:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    for(i = 1; i < point_cnt; i++) {
 801b41a:	2301      	movs	r3, #1
 801b41c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b420:	e01b      	b.n	801b45a <lv_draw_sw_polygon+0x262>
        if(p[i].y < y_min) {
 801b422:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b426:	009b      	lsls	r3, r3, #2
 801b428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b42a:	4413      	add	r3, r2
 801b42c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b430:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801b434:	429a      	cmp	r2, r3
 801b436:	dd0b      	ble.n	801b450 <lv_draw_sw_polygon+0x258>
            y_min = p[i].y;
 801b438:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b43c:	009b      	lsls	r3, r3, #2
 801b43e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b440:	4413      	add	r3, r2
 801b442:	885b      	ldrh	r3, [r3, #2]
 801b444:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            y_min_i = i;
 801b448:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b44c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    for(i = 1; i < point_cnt; i++) {
 801b450:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801b454:	3301      	adds	r3, #1
 801b456:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801b45a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801b45e:	887b      	ldrh	r3, [r7, #2]
 801b460:	429a      	cmp	r2, r3
 801b462:	d3de      	bcc.n	801b422 <lv_draw_sw_polygon+0x22a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 801b464:	887b      	ldrh	r3, [r7, #2]
 801b466:	222c      	movs	r2, #44	; 0x2c
 801b468:	fb02 f303 	mul.w	r3, r2, r3
 801b46c:	4618      	mov	r0, r3
 801b46e:	f006 fe4b 	bl	8022108 <lv_mem_buf_get>
 801b472:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_draw_mask_line_param_t * mp_next = mp;
 801b474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b476:	657b      	str	r3, [r7, #84]	; 0x54

    int32_t i_prev_left = y_min_i;
 801b478:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b47c:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t i_prev_right = y_min_i;
 801b47e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b482:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t i_next_left;
    int32_t i_next_right;
    uint32_t mask_cnt = 0;
 801b484:	2300      	movs	r3, #0
 801b486:	643b      	str	r3, [r7, #64]	; 0x40

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
 801b488:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b48c:	3b01      	subs	r3, #1
 801b48e:	64bb      	str	r3, [r7, #72]	; 0x48
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801b490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b492:	2b00      	cmp	r3, #0
 801b494:	da03      	bge.n	801b49e <lv_draw_sw_polygon+0x2a6>
 801b496:	887b      	ldrh	r3, [r7, #2]
 801b498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b49a:	4413      	add	r3, r2
 801b49c:	64bb      	str	r3, [r7, #72]	; 0x48

    i_next_right = y_min_i + 1;
 801b49e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b4a2:	3301      	adds	r3, #1
 801b4a4:	647b      	str	r3, [r7, #68]	; 0x44
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 801b4a6:	887b      	ldrh	r3, [r7, #2]
 801b4a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b4aa:	429a      	cmp	r2, r3
 801b4ac:	db01      	blt.n	801b4b2 <lv_draw_sw_polygon+0x2ba>
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	647b      	str	r3, [r7, #68]	; 0x44
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 801b4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b4b4:	009b      	lsls	r3, r3, #2
 801b4b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4b8:	4413      	add	r3, r2
 801b4ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4be:	b29a      	uxth	r2, r3
 801b4c0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b4c4:	009b      	lsls	r3, r3, #2
 801b4c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b4c8:	440b      	add	r3, r1
 801b4ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4ce:	b29b      	uxth	r3, r3
 801b4d0:	1ad3      	subs	r3, r2, r3
 801b4d2:	b29b      	uxth	r3, r3
 801b4d4:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 801b4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b4d8:	009b      	lsls	r3, r3, #2
 801b4da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b4dc:	4413      	add	r3, r2
 801b4de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4e2:	b29a      	uxth	r2, r3
 801b4e4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b4e8:	009b      	lsls	r3, r3, #2
 801b4ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b4ec:	440b      	add	r3, r1
 801b4ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4f2:	b29b      	uxth	r3, r3
 801b4f4:	1ad3      	subs	r3, r2, r3
 801b4f6:	b29b      	uxth	r3, r3
 801b4f8:	853b      	strh	r3, [r7, #40]	; 0x28
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 801b4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b4fc:	009b      	lsls	r3, r3, #2
 801b4fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b500:	4413      	add	r3, r2
 801b502:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b506:	b29a      	uxth	r2, r3
 801b508:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b50c:	009b      	lsls	r3, r3, #2
 801b50e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b510:	440b      	add	r3, r1
 801b512:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b516:	b29b      	uxth	r3, r3
 801b518:	1ad3      	subs	r3, r2, r3
 801b51a:	b29b      	uxth	r3, r3
 801b51c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 801b51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b520:	009b      	lsls	r3, r3, #2
 801b522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b524:	4413      	add	r3, r2
 801b526:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b52a:	b29a      	uxth	r2, r3
 801b52c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b530:	009b      	lsls	r3, r3, #2
 801b532:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b534:	440b      	add	r3, r1
 801b536:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b53a:	b29b      	uxth	r3, r3
 801b53c:	1ad3      	subs	r3, r2, r3
 801b53e:	b29b      	uxth	r3, r3
 801b540:	84bb      	strh	r3, [r7, #36]	; 0x24

    bool inv = false;
 801b542:	2300      	movs	r3, #0
 801b544:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(dyl * dxr < dyr * dxl) inv = true;
 801b548:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b54c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 801b550:	fb03 f202 	mul.w	r2, r3, r2
 801b554:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b558:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 801b55c:	fb01 f303 	mul.w	r3, r1, r3
 801b560:	429a      	cmp	r2, r3
 801b562:	da02      	bge.n	801b56a <lv_draw_sw_polygon+0x372>
 801b564:	2301      	movs	r3, #1
 801b566:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    do {
        if(!inv) {
 801b56a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801b56e:	f083 0301 	eor.w	r3, r3, #1
 801b572:	b2db      	uxtb	r3, r3
 801b574:	2b00      	cmp	r3, #0
 801b576:	d015      	beq.n	801b5a4 <lv_draw_sw_polygon+0x3ac>
            i_next_left = i_prev_left - 1;
 801b578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b57a:	3b01      	subs	r3, #1
 801b57c:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801b57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b580:	2b00      	cmp	r3, #0
 801b582:	da03      	bge.n	801b58c <lv_draw_sw_polygon+0x394>
 801b584:	887b      	ldrh	r3, [r7, #2]
 801b586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b588:	4413      	add	r3, r2
 801b58a:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right + 1;
 801b58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b58e:	3301      	adds	r3, #1
 801b590:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 801b592:	887b      	ldrh	r3, [r7, #2]
 801b594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b596:	429a      	cmp	r2, r3
 801b598:	db17      	blt.n	801b5ca <lv_draw_sw_polygon+0x3d2>
 801b59a:	2300      	movs	r3, #0
 801b59c:	647b      	str	r3, [r7, #68]	; 0x44
 801b59e:	e014      	b.n	801b5ca <lv_draw_sw_polygon+0x3d2>
 801b5a0:	080269fc 	.word	0x080269fc
        }
        else {
            i_next_left = i_prev_left + 1;
 801b5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5a6:	3301      	adds	r3, #1
 801b5a8:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 801b5aa:	887b      	ldrh	r3, [r7, #2]
 801b5ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	db01      	blt.n	801b5b6 <lv_draw_sw_polygon+0x3be>
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right - 1;
 801b5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b5b8:	3b01      	subs	r3, #1
 801b5ba:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 801b5bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	da03      	bge.n	801b5ca <lv_draw_sw_polygon+0x3d2>
 801b5c2:	887b      	ldrh	r3, [r7, #2]
 801b5c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b5c6:	4413      	add	r3, r2
 801b5c8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
 801b5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b5cc:	009b      	lsls	r3, r3, #2
 801b5ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b5d0:	4413      	add	r3, r2
 801b5d2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5d8:	009b      	lsls	r3, r3, #2
 801b5da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b5dc:	440b      	add	r3, r1
 801b5de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b5e2:	429a      	cmp	r2, r3
 801b5e4:	db47      	blt.n	801b676 <lv_draw_sw_polygon+0x47e>
            if(p[i_next_left].y != p[i_prev_left].y &&
 801b5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b5e8:	009b      	lsls	r3, r3, #2
 801b5ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b5ec:	4413      	add	r3, r2
 801b5ee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5f4:	009b      	lsls	r3, r3, #2
 801b5f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b5f8:	440b      	add	r3, r1
 801b5fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b5fe:	429a      	cmp	r2, r3
 801b600:	d034      	beq.n	801b66c <lv_draw_sw_polygon+0x474>
               p[i_next_left].x != p[i_prev_left].x) {
 801b602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b604:	009b      	lsls	r3, r3, #2
 801b606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b608:	4413      	add	r3, r2
 801b60a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b60e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b610:	009b      	lsls	r3, r3, #2
 801b612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b614:	440b      	add	r3, r1
 801b616:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_left].y != p[i_prev_left].y &&
 801b61a:	429a      	cmp	r2, r3
 801b61c:	d026      	beq.n	801b66c <lv_draw_sw_polygon+0x474>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b620:	009b      	lsls	r3, r3, #2
 801b622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b624:	4413      	add	r3, r2
 801b626:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b62a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b62c:	009b      	lsls	r3, r3, #2
 801b62e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b630:	4413      	add	r3, r2
 801b632:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_left].x, p[i_next_left].y,
 801b636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b638:	009b      	lsls	r3, r3, #2
 801b63a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b63c:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b63e:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_left].x, p[i_next_left].y,
 801b642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b644:	009b      	lsls	r3, r3, #2
 801b646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b648:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801b64a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b64e:	2201      	movs	r2, #1
 801b650:	9201      	str	r2, [sp, #4]
 801b652:	9300      	str	r3, [sp, #0]
 801b654:	4623      	mov	r3, r4
 801b656:	4602      	mov	r2, r0
 801b658:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b65a:	f7f6 fbc3 	bl	8011de4 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
 801b65e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b660:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b662:	f7f6 fa31 	bl	8011ac8 <lv_draw_mask_add>
                mp_next++;
 801b666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b668:	332c      	adds	r3, #44	; 0x2c
 801b66a:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801b66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b66e:	3301      	adds	r3, #1
 801b670:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_left = i_next_left;
 801b672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b674:	653b      	str	r3, [r7, #80]	; 0x50
        }

        if(mask_cnt == point_cnt) break;
 801b676:	887b      	ldrh	r3, [r7, #2]
 801b678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b67a:	429a      	cmp	r2, r3
 801b67c:	d05b      	beq.n	801b736 <lv_draw_sw_polygon+0x53e>

        if(p[i_next_right].y >= p[i_prev_right].y) {
 801b67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b680:	009b      	lsls	r3, r3, #2
 801b682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b684:	4413      	add	r3, r2
 801b686:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b68c:	009b      	lsls	r3, r3, #2
 801b68e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b690:	440b      	add	r3, r1
 801b692:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b696:	429a      	cmp	r2, r3
 801b698:	db47      	blt.n	801b72a <lv_draw_sw_polygon+0x532>
            if(p[i_next_right].y != p[i_prev_right].y &&
 801b69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b69c:	009b      	lsls	r3, r3, #2
 801b69e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b6a0:	4413      	add	r3, r2
 801b6a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b6a8:	009b      	lsls	r3, r3, #2
 801b6aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b6ac:	440b      	add	r3, r1
 801b6ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b6b2:	429a      	cmp	r2, r3
 801b6b4:	d034      	beq.n	801b720 <lv_draw_sw_polygon+0x528>
               p[i_next_right].x != p[i_prev_right].x) {
 801b6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b6b8:	009b      	lsls	r3, r3, #2
 801b6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b6bc:	4413      	add	r3, r2
 801b6be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b6c4:	009b      	lsls	r3, r3, #2
 801b6c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b6c8:	440b      	add	r3, r1
 801b6ca:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_right].y != p[i_prev_right].y &&
 801b6ce:	429a      	cmp	r2, r3
 801b6d0:	d026      	beq.n	801b720 <lv_draw_sw_polygon+0x528>

                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b6d4:	009b      	lsls	r3, r3, #2
 801b6d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b6d8:	4413      	add	r3, r2
 801b6da:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b6de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b6e0:	009b      	lsls	r3, r3, #2
 801b6e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b6e4:	4413      	add	r3, r2
 801b6e6:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_right].x, p[i_next_right].y,
 801b6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b6ec:	009b      	lsls	r3, r3, #2
 801b6ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b6f0:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b6f2:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_right].x, p[i_next_right].y,
 801b6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b6f8:	009b      	lsls	r3, r3, #2
 801b6fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b6fc:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801b6fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b702:	2200      	movs	r2, #0
 801b704:	9201      	str	r2, [sp, #4]
 801b706:	9300      	str	r3, [sp, #0]
 801b708:	4623      	mov	r3, r4
 801b70a:	4602      	mov	r2, r0
 801b70c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b70e:	f7f6 fb69 	bl	8011de4 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
 801b712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b714:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b716:	f7f6 f9d7 	bl	8011ac8 <lv_draw_mask_add>
                mp_next++;
 801b71a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b71c:	332c      	adds	r3, #44	; 0x2c
 801b71e:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801b720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b722:	3301      	adds	r3, #1
 801b724:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_right = i_next_right;
 801b726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b728:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

    } while(mask_cnt < point_cnt);
 801b72a:	887b      	ldrh	r3, [r7, #2]
 801b72c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b72e:	429a      	cmp	r2, r3
 801b730:	f4ff af1b 	bcc.w	801b56a <lv_draw_sw_polygon+0x372>
 801b734:	e000      	b.n	801b738 <lv_draw_sw_polygon+0x540>
        if(mask_cnt == point_cnt) break;
 801b736:	bf00      	nop

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 801b738:	f107 031c 	add.w	r3, r7, #28
 801b73c:	461a      	mov	r2, r3
 801b73e:	68b9      	ldr	r1, [r7, #8]
 801b740:	68f8      	ldr	r0, [r7, #12]
 801b742:	f7f8 fdcd 	bl	80142e0 <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 801b746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b748:	f7f6 fa5c 	bl	8011c04 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 801b74c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b74e:	f006 fd87 	bl	8022260 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 801b752:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b754:	f006 fd84 	bl	8022260 <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b75c:	609a      	str	r2, [r3, #8]
 801b75e:	e004      	b.n	801b76a <lv_draw_sw_polygon+0x572>
    if(point_cnt < 3) return;
 801b760:	bf00      	nop
 801b762:	e002      	b.n	801b76a <lv_draw_sw_polygon+0x572>
    if(points == NULL) return;
 801b764:	bf00      	nop
 801b766:	e000      	b.n	801b76a <lv_draw_sw_polygon+0x572>
    if(p == NULL) return;
 801b768:	bf00      	nop
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801b76a:	3764      	adds	r7, #100	; 0x64
 801b76c:	46bd      	mov	sp, r7
 801b76e:	bd90      	pop	{r4, r7, pc}

0801b770 <lv_area_copy>:
{
 801b770:	b480      	push	{r7}
 801b772:	b083      	sub	sp, #12
 801b774:	af00      	add	r7, sp, #0
 801b776:	6078      	str	r0, [r7, #4]
 801b778:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801b77a:	683b      	ldr	r3, [r7, #0]
 801b77c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 801b784:	683b      	ldr	r3, [r7, #0]
 801b786:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	80da      	strh	r2, [r3, #6]
}
 801b7a2:	bf00      	nop
 801b7a4:	370c      	adds	r7, #12
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ac:	4770      	bx	lr

0801b7ae <lv_area_get_width>:
{
 801b7ae:	b480      	push	{r7}
 801b7b0:	b083      	sub	sp, #12
 801b7b2:	af00      	add	r7, sp, #0
 801b7b4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b7bc:	b29a      	uxth	r2, r3
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b7c4:	b29b      	uxth	r3, r3
 801b7c6:	1ad3      	subs	r3, r2, r3
 801b7c8:	b29b      	uxth	r3, r3
 801b7ca:	3301      	adds	r3, #1
 801b7cc:	b29b      	uxth	r3, r3
 801b7ce:	b21b      	sxth	r3, r3
}
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	370c      	adds	r7, #12
 801b7d4:	46bd      	mov	sp, r7
 801b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7da:	4770      	bx	lr

0801b7dc <lv_area_get_height>:
{
 801b7dc:	b480      	push	{r7}
 801b7de:	b083      	sub	sp, #12
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b7ea:	b29a      	uxth	r2, r3
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b7f2:	b29b      	uxth	r3, r3
 801b7f4:	1ad3      	subs	r3, r2, r3
 801b7f6:	b29b      	uxth	r3, r3
 801b7f8:	3301      	adds	r3, #1
 801b7fa:	b29b      	uxth	r3, r3
 801b7fc:	b21b      	sxth	r3, r3
}
 801b7fe:	4618      	mov	r0, r3
 801b800:	370c      	adds	r7, #12
 801b802:	46bd      	mov	sp, r7
 801b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b808:	4770      	bx	lr

0801b80a <lv_draw_sw_rect>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b80a:	b580      	push	{r7, lr}
 801b80c:	b084      	sub	sp, #16
 801b80e:	af00      	add	r7, sp, #0
 801b810:	60f8      	str	r0, [r7, #12]
 801b812:	60b9      	str	r1, [r7, #8]
 801b814:	607a      	str	r2, [r7, #4]
#if LV_DRAW_COMPLEX
    draw_shadow(draw_ctx, dsc, coords);
 801b816:	687a      	ldr	r2, [r7, #4]
 801b818:	68b9      	ldr	r1, [r7, #8]
 801b81a:	68f8      	ldr	r0, [r7, #12]
 801b81c:	f000 fdd1 	bl	801c3c2 <draw_shadow>
#endif

    draw_bg(draw_ctx, dsc, coords);
 801b820:	687a      	ldr	r2, [r7, #4]
 801b822:	68b9      	ldr	r1, [r7, #8]
 801b824:	68f8      	ldr	r0, [r7, #12]
 801b826:	f000 f827 	bl	801b878 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801b82a:	687a      	ldr	r2, [r7, #4]
 801b82c:	68b9      	ldr	r1, [r7, #8]
 801b82e:	68f8      	ldr	r0, [r7, #12]
 801b830:	f000 fb1b 	bl	801be6a <draw_bg_img>

    draw_border(draw_ctx, dsc, coords);
 801b834:	687a      	ldr	r2, [r7, #4]
 801b836:	68b9      	ldr	r1, [r7, #8]
 801b838:	68f8      	ldr	r0, [r7, #12]
 801b83a:	f000 fcd2 	bl	801c1e2 <draw_border>

    draw_outline(draw_ctx, dsc, coords);
 801b83e:	687a      	ldr	r2, [r7, #4]
 801b840:	68b9      	ldr	r1, [r7, #8]
 801b842:	68f8      	ldr	r0, [r7, #12]
 801b844:	f002 fb61 	bl	801df0a <draw_outline>

    LV_ASSERT_MEM_INTEGRITY();
}
 801b848:	bf00      	nop
 801b84a:	3710      	adds	r7, #16
 801b84c:	46bd      	mov	sp, r7
 801b84e:	bd80      	pop	{r7, pc}

0801b850 <lv_draw_sw_bg>:

void lv_draw_sw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b850:	b580      	push	{r7, lr}
 801b852:	b084      	sub	sp, #16
 801b854:	af00      	add	r7, sp, #0
 801b856:	60f8      	str	r0, [r7, #12]
 801b858:	60b9      	str	r1, [r7, #8]
 801b85a:	607a      	str	r2, [r7, #4]
#if LV_COLOR_SCREEN_TRANSP && LV_COLOR_DEPTH == 32
    lv_memset_00(draw_ctx->buf, lv_area_get_size(draw_ctx->buf_area) * sizeof(lv_color_t));
#endif

    draw_bg(draw_ctx, dsc, coords);
 801b85c:	687a      	ldr	r2, [r7, #4]
 801b85e:	68b9      	ldr	r1, [r7, #8]
 801b860:	68f8      	ldr	r0, [r7, #12]
 801b862:	f000 f809 	bl	801b878 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801b866:	687a      	ldr	r2, [r7, #4]
 801b868:	68b9      	ldr	r1, [r7, #8]
 801b86a:	68f8      	ldr	r0, [r7, #12]
 801b86c:	f000 fafd 	bl	801be6a <draw_bg_img>
}
 801b870:	bf00      	nop
 801b872:	3710      	adds	r7, #16
 801b874:	46bd      	mov	sp, r7
 801b876:	bd80      	pop	{r7, pc}

0801b878 <draw_bg>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void draw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801b878:	b580      	push	{r7, lr}
 801b87a:	b0a6      	sub	sp, #152	; 0x98
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	60f8      	str	r0, [r7, #12]
 801b880:	60b9      	str	r1, [r7, #8]
 801b882:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801b884:	68bb      	ldr	r3, [r7, #8]
 801b886:	78db      	ldrb	r3, [r3, #3]
 801b888:	2b02      	cmp	r3, #2
 801b88a:	f240 82e8 	bls.w	801be5e <draw_bg+0x5e6>

    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 801b88e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b892:	6879      	ldr	r1, [r7, #4]
 801b894:	4618      	mov	r0, r3
 801b896:	f7ff ff6b 	bl	801b770 <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 801b89a:	68bb      	ldr	r3, [r7, #8]
 801b89c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801b8a0:	2b01      	cmp	r3, #1
 801b8a2:	dd4f      	ble.n	801b944 <draw_bg+0xcc>
 801b8a4:	68bb      	ldr	r3, [r7, #8]
 801b8a6:	7f1b      	ldrb	r3, [r3, #28]
 801b8a8:	2bfc      	cmp	r3, #252	; 0xfc
 801b8aa:	d94b      	bls.n	801b944 <draw_bg+0xcc>
 801b8ac:	68bb      	ldr	r3, [r7, #8]
 801b8ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d046      	beq.n	801b944 <draw_bg+0xcc>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 801b8b6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801b8ba:	b29a      	uxth	r2, r3
 801b8bc:	68bb      	ldr	r3, [r7, #8]
 801b8be:	7f5b      	ldrb	r3, [r3, #29]
 801b8c0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b8c4:	b2db      	uxtb	r3, r3
 801b8c6:	109b      	asrs	r3, r3, #2
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	f003 0301 	and.w	r3, r3, #1
 801b8ce:	b29b      	uxth	r3, r3
 801b8d0:	4413      	add	r3, r2
 801b8d2:	b29b      	uxth	r3, r3
 801b8d4:	b21b      	sxth	r3, r3
 801b8d6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 801b8da:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801b8de:	b29a      	uxth	r2, r3
 801b8e0:	68bb      	ldr	r3, [r7, #8]
 801b8e2:	7f5b      	ldrb	r3, [r3, #29]
 801b8e4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b8e8:	b2db      	uxtb	r3, r3
 801b8ea:	105b      	asrs	r3, r3, #1
 801b8ec:	b29b      	uxth	r3, r3
 801b8ee:	f003 0301 	and.w	r3, r3, #1
 801b8f2:	b29b      	uxth	r3, r3
 801b8f4:	4413      	add	r3, r2
 801b8f6:	b29b      	uxth	r3, r3
 801b8f8:	b21b      	sxth	r3, r3
 801b8fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 801b8fe:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801b902:	b29a      	uxth	r2, r3
 801b904:	68bb      	ldr	r3, [r7, #8]
 801b906:	7f5b      	ldrb	r3, [r3, #29]
 801b908:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b90c:	b2db      	uxtb	r3, r3
 801b90e:	10db      	asrs	r3, r3, #3
 801b910:	b29b      	uxth	r3, r3
 801b912:	f003 0301 	and.w	r3, r3, #1
 801b916:	b29b      	uxth	r3, r3
 801b918:	1ad3      	subs	r3, r2, r3
 801b91a:	b29b      	uxth	r3, r3
 801b91c:	b21b      	sxth	r3, r3
 801b91e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 801b922:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801b926:	b29a      	uxth	r2, r3
 801b928:	68bb      	ldr	r3, [r7, #8]
 801b92a:	7f5b      	ldrb	r3, [r3, #29]
 801b92c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801b930:	b2db      	uxtb	r3, r3
 801b932:	b29b      	uxth	r3, r3
 801b934:	f003 0301 	and.w	r3, r3, #1
 801b938:	b29b      	uxth	r3, r3
 801b93a:	1ad3      	subs	r3, r2, r3
 801b93c:	b29b      	uxth	r3, r3
 801b93e:	b21b      	sxth	r3, r3
 801b940:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    }

    lv_area_t clipped_coords;
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	689a      	ldr	r2, [r3, #8]
 801b948:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801b94c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b950:	4618      	mov	r0, r3
 801b952:	f005 f82f 	bl	80209b4 <_lv_area_intersect>
 801b956:	4603      	mov	r3, r0
 801b958:	f083 0301 	eor.w	r3, r3, #1
 801b95c:	b2db      	uxtb	r3, r3
 801b95e:	2b00      	cmp	r3, #0
 801b960:	f040 827f 	bne.w	801be62 <draw_bg+0x5ea>

    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 801b964:	68bb      	ldr	r3, [r7, #8]
 801b966:	7a9b      	ldrb	r3, [r3, #10]
 801b968:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801b96c:	b2db      	uxtb	r3, r3
 801b96e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 801b972:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b976:	2b00      	cmp	r3, #0
 801b978:	d104      	bne.n	801b984 <draw_bg+0x10c>
 801b97a:	68bb      	ldr	r3, [r7, #8]
 801b97c:	791b      	ldrb	r3, [r3, #4]
 801b97e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b982:	e003      	b.n	801b98c <draw_bg+0x114>
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	795b      	ldrb	r3, [r3, #5]
 801b988:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 801b98c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801b990:	68bb      	ldr	r3, [r7, #8]
 801b992:	79db      	ldrb	r3, [r3, #7]
 801b994:	429a      	cmp	r2, r3
 801b996:	d102      	bne.n	801b99e <draw_bg+0x126>
 801b998:	2300      	movs	r3, #0
 801b99a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 801b99e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	f7f6 f9c0 	bl	8011d28 <lv_draw_mask_is_any>
 801b9a8:	4603      	mov	r3, r0
 801b9aa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 801b9ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	601a      	str	r2, [r3, #0]
 801b9b6:	605a      	str	r2, [r3, #4]
 801b9b8:	609a      	str	r2, [r3, #8]
 801b9ba:	60da      	str	r2, [r3, #12]
 801b9bc:	611a      	str	r2, [r3, #16]
 801b9be:	615a      	str	r2, [r3, #20]
 801b9c0:	619a      	str	r2, [r3, #24]
    blend_dsc.blend_mode = dsc->blend_mode;
 801b9c2:	68bb      	ldr	r3, [r7, #8]
 801b9c4:	789b      	ldrb	r3, [r3, #2]
 801b9c6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    blend_dsc.color = bg_color;
 801b9ca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b9ce:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    /*Most simple case: just a plain rectangle*/
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 801b9d2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801b9d6:	f083 0301 	eor.w	r3, r3, #1
 801b9da:	b2db      	uxtb	r3, r3
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d016      	beq.n	801ba0e <draw_bg+0x196>
 801b9e0:	68bb      	ldr	r3, [r7, #8]
 801b9e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d111      	bne.n	801ba0e <draw_bg+0x196>
 801b9ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d10d      	bne.n	801ba0e <draw_bg+0x196>
        blend_dsc.blend_area = &bg_coords;
 801b9f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b9f6:	63bb      	str	r3, [r7, #56]	; 0x38
        blend_dsc.opa = dsc->bg_opa;
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	78db      	ldrb	r3, [r3, #3]
 801b9fc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ba00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba04:	4619      	mov	r1, r3
 801ba06:	68f8      	ldr	r0, [r7, #12]
 801ba08:	f7fb fc5e 	bl	80172c8 <lv_draw_sw_blend>
        return;
 801ba0c:	e22a      	b.n	801be64 <draw_bg+0x5ec>

    /*Complex case: there is gradient, mask, or radius*/
#if LV_DRAW_COMPLEX == 0
    LV_LOG_WARN("Can't draw complex rectangle because LV_DRAW_COMPLEX = 0");
#else
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 801ba0e:	68bb      	ldr	r3, [r7, #8]
 801ba10:	78db      	ldrb	r3, [r3, #3]
 801ba12:	2bfc      	cmp	r3, #252	; 0xfc
 801ba14:	d802      	bhi.n	801ba1c <draw_bg+0x1a4>
 801ba16:	68bb      	ldr	r3, [r7, #8]
 801ba18:	78db      	ldrb	r3, [r3, #3]
 801ba1a:	e000      	b.n	801ba1e <draw_bg+0x1a6>
 801ba1c:	23ff      	movs	r3, #255	; 0xff
 801ba1e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius. Can't be larger than the half of the shortest side */
    lv_coord_t coords_bg_w = lv_area_get_width(&bg_coords);
 801ba22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ba26:	4618      	mov	r0, r3
 801ba28:	f7ff fec1 	bl	801b7ae <lv_area_get_width>
 801ba2c:	4603      	mov	r3, r0
 801ba2e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    lv_coord_t coords_bg_h = lv_area_get_height(&bg_coords);
 801ba32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ba36:	4618      	mov	r0, r3
 801ba38:	f7ff fed0 	bl	801b7dc <lv_area_get_height>
 801ba3c:	4603      	mov	r3, r0
 801ba3e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 801ba42:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801ba46:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801ba4a:	4293      	cmp	r3, r2
 801ba4c:	bfa8      	it	ge
 801ba4e:	4613      	movge	r3, r2
 801ba50:	b21b      	sxth	r3, r3
 801ba52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 801ba56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ba5a:	105b      	asrs	r3, r3, #1
 801ba5c:	68ba      	ldr	r2, [r7, #8]
 801ba5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801ba62:	4293      	cmp	r3, r2
 801ba64:	bfa8      	it	ge
 801ba66:	4613      	movge	r3, r2
 801ba68:	67fb      	str	r3, [r7, #124]	; 0x7c

    /*Add a radius mask if there is radius*/
    int32_t clipped_w = lv_area_get_width(&clipped_coords);
 801ba6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ba6e:	4618      	mov	r0, r3
 801ba70:	f7ff fe9d 	bl	801b7ae <lv_area_get_width>
 801ba74:	4603      	mov	r3, r0
 801ba76:	67bb      	str	r3, [r7, #120]	; 0x78
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801ba78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba7c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    lv_opa_t * mask_buf = NULL;
 801ba80:	2300      	movs	r3, #0
 801ba82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0 || mask_any) {
 801ba86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	dc03      	bgt.n	801ba94 <draw_bg+0x21c>
 801ba8c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d017      	beq.n	801bac4 <draw_bg+0x24c>
        mask_buf = lv_mem_buf_get(clipped_w);
 801ba94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ba96:	4618      	mov	r0, r3
 801ba98:	f006 fb36 	bl	8022108 <lv_mem_buf_get>
 801ba9c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 801baa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801baa2:	b21a      	sxth	r2, r3
 801baa4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801baa8:	f107 0020 	add.w	r0, r7, #32
 801baac:	2300      	movs	r3, #0
 801baae:	f7f6 fbd7 	bl	8012260 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801bab2:	f107 0320 	add.w	r3, r7, #32
 801bab6:	2100      	movs	r1, #0
 801bab8:	4618      	mov	r0, r3
 801baba:	f7f6 f805 	bl	8011ac8 <lv_draw_mask_add>
 801babe:	4603      	mov	r3, r0
 801bac0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    }

    int32_t h;

    lv_area_t blend_area;
    blend_area.x1 = clipped_coords.x1;
 801bac4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801bac8:	833b      	strh	r3, [r7, #24]
    blend_area.x2 = clipped_coords.x2;
 801baca:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801bace:	83bb      	strh	r3, [r7, #28]

    blend_dsc.mask_buf = mask_buf;
 801bad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bad4:	647b      	str	r3, [r7, #68]	; 0x44
    blend_dsc.blend_area = &blend_area;
 801bad6:	f107 0318 	add.w	r3, r7, #24
 801bada:	63bb      	str	r3, [r7, #56]	; 0x38
    blend_dsc.mask_area = &blend_area;
 801badc:	f107 0318 	add.w	r3, r7, #24
 801bae0:	64fb      	str	r3, [r7, #76]	; 0x4c
    blend_dsc.opa = LV_OPA_COVER;
 801bae2:	23ff      	movs	r3, #255	; 0xff
 801bae4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50


    /*Get gradient if appropriate*/
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 801bae8:	68bb      	ldr	r3, [r7, #8]
 801baea:	3305      	adds	r3, #5
 801baec:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801baf0:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801baf4:	4618      	mov	r0, r3
 801baf6:	f7fc fff7 	bl	8018ae8 <lv_gradient_get>
 801bafa:	6778      	str	r0, [r7, #116]	; 0x74
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 801bafc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d00d      	beq.n	801bb1e <draw_bg+0x2a6>
 801bb02:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bb06:	2b02      	cmp	r3, #2
 801bb08:	d109      	bne.n	801bb1e <draw_bg+0x2a6>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 801bb0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bb0c:	689a      	ldr	r2, [r3, #8]
 801bb0e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801bb12:	4619      	mov	r1, r3
 801bb14:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801bb18:	1acb      	subs	r3, r1, r3
 801bb1a:	4413      	add	r3, r2
 801bb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
#endif
#endif

    /*There is another mask too. Draw line by line. */
    if(mask_any) {
 801bb1e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d04c      	beq.n	801bbc0 <draw_bg+0x348>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801bb26:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801bb2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bb2e:	e03f      	b.n	801bbb0 <draw_bg+0x338>
            blend_area.y1 = h;
 801bb30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb34:	b21b      	sxth	r3, r3
 801bb36:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801bb38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb3c:	b21b      	sxth	r3, r3
 801bb3e:	83fb      	strh	r3, [r7, #30]

            /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
             * It saves calculating the final opa in lv_draw_sw_blend*/
            lv_memset(mask_buf, opa, clipped_w);
 801bb40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bb42:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bb46:	4619      	mov	r1, r3
 801bb48:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bb4c:	f006 fdf8 	bl	8022740 <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801bb50:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801bb54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb58:	b21a      	sxth	r2, r3
 801bb5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bb5c:	b21b      	sxth	r3, r3
 801bb5e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bb62:	f7f5 ffe3 	bl	8011b2c <lv_draw_mask_apply>
 801bb66:	4603      	mov	r3, r0
 801bb68:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801bb6c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801bb70:	2b01      	cmp	r3, #1
 801bb72:	d102      	bne.n	801bb7a <draw_bg+0x302>
 801bb74:	2302      	movs	r3, #2
 801bb76:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801bb7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bb7e:	2b01      	cmp	r3, #1
 801bb80:	d10b      	bne.n	801bb9a <draw_bg+0x322>
 801bb82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bb84:	689b      	ldr	r3, [r3, #8]
 801bb86:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801bb8a:	4611      	mov	r1, r2
 801bb8c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801bb90:	1a52      	subs	r2, r2, r1
 801bb92:	4413      	add	r3, r2
 801bb94:	781b      	ldrb	r3, [r3, #0]
 801bb96:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bb9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb9e:	4619      	mov	r1, r3
 801bba0:	68f8      	ldr	r0, [r7, #12]
 801bba2:	f7fb fb91 	bl	80172c8 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801bba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bbaa:	3301      	adds	r3, #1
 801bbac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bbb0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801bbb4:	461a      	mov	r2, r3
 801bbb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bbba:	4293      	cmp	r3, r2
 801bbbc:	ddb8      	ble.n	801bb30 <draw_bg+0x2b8>
        }
        goto bg_clean_up;
 801bbbe:	e130      	b.n	801be22 <draw_bg+0x5aa>
    }


    /* Draw the top of the rectangle line by line and mirror it to the bottom. */
    for(h = 0; h < rout; h++) {
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bbc6:	e084      	b.n	801bcd2 <draw_bg+0x45a>
        lv_coord_t top_y = bg_coords.y1 + h;
 801bbc8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801bbcc:	b29a      	uxth	r2, r3
 801bbce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bbd2:	b29b      	uxth	r3, r3
 801bbd4:	4413      	add	r3, r2
 801bbd6:	b29b      	uxth	r3, r3
 801bbd8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t bottom_y = bg_coords.y2 - h;
 801bbdc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bbe0:	b29a      	uxth	r2, r3
 801bbe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bbe6:	b29b      	uxth	r3, r3
 801bbe8:	1ad3      	subs	r3, r2, r3
 801bbea:	b29b      	uxth	r3, r3
 801bbec:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801bbf0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801bbf4:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801bbf8:	429a      	cmp	r2, r3
 801bbfa:	da05      	bge.n	801bc08 <draw_bg+0x390>
 801bbfc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801bc00:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801bc04:	429a      	cmp	r2, r3
 801bc06:	dc5e      	bgt.n	801bcc6 <draw_bg+0x44e>

        /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
         * It saves calculating the final opa in lv_draw_sw_blend*/
        lv_memset(mask_buf, opa, clipped_w);
 801bc08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bc0a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bc0e:	4619      	mov	r1, r3
 801bc10:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bc14:	f006 fd94 	bl	8022740 <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 801bc18:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801bc1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bc1e:	b21b      	sxth	r3, r3
 801bc20:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801bc24:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bc28:	f7f5 ff80 	bl	8011b2c <lv_draw_mask_apply>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801bc32:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801bc36:	2b01      	cmp	r3, #1
 801bc38:	d102      	bne.n	801bc40 <draw_bg+0x3c8>
 801bc3a:	2302      	movs	r3, #2
 801bc3c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(top_y >= clipped_coords.y1) {
 801bc40:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801bc44:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	db1a      	blt.n	801bc82 <draw_bg+0x40a>
            blend_area.y1 = top_y;
 801bc4c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801bc50:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = top_y;
 801bc52:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801bc56:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  top_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 801bc58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bc5c:	2b01      	cmp	r3, #1
 801bc5e:	d10a      	bne.n	801bc76 <draw_bg+0x3fe>
 801bc60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bc62:	689b      	ldr	r3, [r3, #8]
 801bc64:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801bc68:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801bc6c:	1a52      	subs	r2, r2, r1
 801bc6e:	4413      	add	r3, r2
 801bc70:	781b      	ldrb	r3, [r3, #0]
 801bc72:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bc76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc7a:	4619      	mov	r1, r3
 801bc7c:	68f8      	ldr	r0, [r7, #12]
 801bc7e:	f7fb fb23 	bl	80172c8 <lv_draw_sw_blend>
        }

        if(bottom_y <= clipped_coords.y2) {
 801bc82:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801bc86:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801bc8a:	429a      	cmp	r2, r3
 801bc8c:	dc1c      	bgt.n	801bcc8 <draw_bg+0x450>
            blend_area.y1 = bottom_y;
 801bc8e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801bc92:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = bottom_y;
 801bc94:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801bc98:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  bottom_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 801bc9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bc9e:	2b01      	cmp	r3, #1
 801bca0:	d10a      	bne.n	801bcb8 <draw_bg+0x440>
 801bca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bca4:	689b      	ldr	r3, [r3, #8]
 801bca6:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801bcaa:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801bcae:	1a52      	subs	r2, r2, r1
 801bcb0:	4413      	add	r3, r2
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bcb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bcbc:	4619      	mov	r1, r3
 801bcbe:	68f8      	ldr	r0, [r7, #12]
 801bcc0:	f7fb fb02 	bl	80172c8 <lv_draw_sw_blend>
 801bcc4:	e000      	b.n	801bcc8 <draw_bg+0x450>
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801bcc6:	bf00      	nop
    for(h = 0; h < rout; h++) {
 801bcc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bccc:	3301      	adds	r3, #1
 801bcce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bcd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801bcd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bcd8:	429a      	cmp	r2, r3
 801bcda:	f6ff af75 	blt.w	801bbc8 <draw_bg+0x350>

    /* Draw the center of the rectangle.*/

    /*If no other masks and no gradient, the center is a simple rectangle*/
    lv_area_t center_coords;
    center_coords.x1 = bg_coords.x1;
 801bcde:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801bce2:	823b      	strh	r3, [r7, #16]
    center_coords.x2 = bg_coords.x2;
 801bce4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801bce8:	82bb      	strh	r3, [r7, #20]
    center_coords.y1 = bg_coords.y1 + rout;
 801bcea:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801bcee:	b29a      	uxth	r2, r3
 801bcf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bcf2:	b29b      	uxth	r3, r3
 801bcf4:	4413      	add	r3, r2
 801bcf6:	b29b      	uxth	r3, r3
 801bcf8:	b21b      	sxth	r3, r3
 801bcfa:	827b      	strh	r3, [r7, #18]
    center_coords.y2 = bg_coords.y2 - rout;
 801bcfc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bd00:	b29a      	uxth	r2, r3
 801bd02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bd04:	b29b      	uxth	r3, r3
 801bd06:	1ad3      	subs	r3, r2, r3
 801bd08:	b29b      	uxth	r3, r3
 801bd0a:	b21b      	sxth	r3, r3
 801bd0c:	82fb      	strh	r3, [r7, #22]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 801bd0e:	f107 0310 	add.w	r3, r7, #16
 801bd12:	4618      	mov	r0, r3
 801bd14:	f7f6 f808 	bl	8011d28 <lv_draw_mask_is_any>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 801bd1e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801bd22:	f083 0301 	eor.w	r3, r3, #1
 801bd26:	b2db      	uxtb	r3, r3
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d022      	beq.n	801bd72 <draw_bg+0x4fa>
 801bd2c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d11e      	bne.n	801bd72 <draw_bg+0x4fa>
        blend_area.y1 = bg_coords.y1 + rout;
 801bd34:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801bd38:	b29a      	uxth	r2, r3
 801bd3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bd3c:	b29b      	uxth	r3, r3
 801bd3e:	4413      	add	r3, r2
 801bd40:	b29b      	uxth	r3, r3
 801bd42:	b21b      	sxth	r3, r3
 801bd44:	837b      	strh	r3, [r7, #26]
        blend_area.y2 = bg_coords.y2 - rout;
 801bd46:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bd4a:	b29a      	uxth	r2, r3
 801bd4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bd4e:	b29b      	uxth	r3, r3
 801bd50:	1ad3      	subs	r3, r2, r3
 801bd52:	b29b      	uxth	r3, r3
 801bd54:	b21b      	sxth	r3, r3
 801bd56:	83fb      	strh	r3, [r7, #30]
        blend_dsc.opa = opa;
 801bd58:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bd5c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_buf = NULL;
 801bd60:	2300      	movs	r3, #0
 801bd62:	647b      	str	r3, [r7, #68]	; 0x44
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801bd64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bd68:	4619      	mov	r1, r3
 801bd6a:	68f8      	ldr	r0, [r7, #12]
 801bd6c:	f7fb faac 	bl	80172c8 <lv_draw_sw_blend>
 801bd70:	e057      	b.n	801be22 <draw_bg+0x5aa>
    }
    /*With gradient and/or mask draw line by line*/
    else {
        blend_dsc.opa = opa;
 801bd72:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bd76:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801bd7a:	2301      	movs	r3, #1
 801bd7c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        int32_t h_end = bg_coords.y2 - rout;
 801bd80:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bd84:	461a      	mov	r2, r3
 801bd86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bd88:	1ad3      	subs	r3, r2, r3
 801bd8a:	66fb      	str	r3, [r7, #108]	; 0x6c
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801bd8c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801bd90:	461a      	mov	r2, r3
 801bd92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bd94:	4413      	add	r3, r2
 801bd96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bd9a:	e03c      	b.n	801be16 <draw_bg+0x59e>
            /*If there is no other mask do not apply mask as in the center there is no radius to mask*/
            if(mask_any_center) {
 801bd9c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d015      	beq.n	801bdd0 <draw_bg+0x558>
                lv_memset(mask_buf, opa, clipped_w);
 801bda4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bda6:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801bdaa:	4619      	mov	r1, r3
 801bdac:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bdb0:	f006 fcc6 	bl	8022740 <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801bdb4:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801bdb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bdbc:	b21a      	sxth	r2, r3
 801bdbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bdc0:	b21b      	sxth	r3, r3
 801bdc2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801bdc6:	f7f5 feb1 	bl	8011b2c <lv_draw_mask_apply>
 801bdca:	4603      	mov	r3, r0
 801bdcc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            blend_area.y1 = h;
 801bdd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bdd4:	b21b      	sxth	r3, r3
 801bdd6:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801bdd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bddc:	b21b      	sxth	r3, r3
 801bdde:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801bde0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801bde4:	2b01      	cmp	r3, #1
 801bde6:	d10b      	bne.n	801be00 <draw_bg+0x588>
 801bde8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bdea:	689b      	ldr	r3, [r3, #8]
 801bdec:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801bdf0:	4611      	mov	r1, r2
 801bdf2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801bdf6:	1a52      	subs	r2, r2, r1
 801bdf8:	4413      	add	r3, r2
 801bdfa:	781b      	ldrb	r3, [r3, #0]
 801bdfc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801be00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801be04:	4619      	mov	r1, r3
 801be06:	68f8      	ldr	r0, [r7, #12]
 801be08:	f7fb fa5e 	bl	80172c8 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801be0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801be10:	3301      	adds	r3, #1
 801be12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801be16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801be1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801be1c:	429a      	cmp	r2, r3
 801be1e:	ddbd      	ble.n	801bd9c <draw_bg+0x524>
        }
    }


bg_clean_up:
 801be20:	bf00      	nop
    if(mask_buf) lv_mem_buf_release(mask_buf);
 801be22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801be26:	2b00      	cmp	r3, #0
 801be28:	d003      	beq.n	801be32 <draw_bg+0x5ba>
 801be2a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801be2e:	f006 fa17 	bl	8022260 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 801be32:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801be36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801be3a:	d009      	beq.n	801be50 <draw_bg+0x5d8>
        lv_draw_mask_remove_id(mask_rout_id);
 801be3c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801be40:	4618      	mov	r0, r3
 801be42:	f7f5 feb7 	bl	8011bb4 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 801be46:	f107 0320 	add.w	r3, r7, #32
 801be4a:	4618      	mov	r0, r3
 801be4c:	f7f5 ff02 	bl	8011c54 <lv_draw_mask_free_param>
    }
    if(grad) {
 801be50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be52:	2b00      	cmp	r3, #0
 801be54:	d006      	beq.n	801be64 <draw_bg+0x5ec>
        lv_gradient_cleanup(grad);
 801be56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801be58:	f7fc ffb4 	bl	8018dc4 <lv_gradient_cleanup>
 801be5c:	e002      	b.n	801be64 <draw_bg+0x5ec>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801be5e:	bf00      	nop
 801be60:	e000      	b.n	801be64 <draw_bg+0x5ec>
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801be62:	bf00      	nop
    }

#endif
}
 801be64:	3798      	adds	r7, #152	; 0x98
 801be66:	46bd      	mov	sp, r7
 801be68:	bd80      	pop	{r7, pc}

0801be6a <draw_bg_img>:

static void draw_bg_img(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801be6a:	b590      	push	{r4, r7, lr}
 801be6c:	b0a3      	sub	sp, #140	; 0x8c
 801be6e:	af04      	add	r7, sp, #16
 801be70:	60f8      	str	r0, [r7, #12]
 801be72:	60b9      	str	r1, [r7, #8]
 801be74:	607a      	str	r2, [r7, #4]
    if(dsc->bg_img_src == NULL) return;
 801be76:	68bb      	ldr	r3, [r7, #8]
 801be78:	68db      	ldr	r3, [r3, #12]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	f000 81a9 	beq.w	801c1d2 <draw_bg_img+0x368>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801be80:	68bb      	ldr	r3, [r7, #8]
 801be82:	7d5b      	ldrb	r3, [r3, #21]
 801be84:	2b02      	cmp	r3, #2
 801be86:	f240 81a6 	bls.w	801c1d6 <draw_bg_img+0x36c>

    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	689a      	ldr	r2, [r3, #8]
 801be8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801be92:	6879      	ldr	r1, [r7, #4]
 801be94:	4618      	mov	r0, r3
 801be96:	f004 fd8d 	bl	80209b4 <_lv_area_intersect>
 801be9a:	4603      	mov	r3, r0
 801be9c:	f083 0301 	eor.w	r3, r3, #1
 801bea0:	b2db      	uxtb	r3, r3
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	f040 8199 	bne.w	801c1da <draw_bg_img+0x370>
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	689b      	ldr	r3, [r3, #8]
 801beac:	677b      	str	r3, [r7, #116]	; 0x74
    draw_ctx->clip_area = &clip_area;
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801beb4:	609a      	str	r2, [r3, #8]

    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 801beb6:	68bb      	ldr	r3, [r7, #8]
 801beb8:	68db      	ldr	r3, [r3, #12]
 801beba:	4618      	mov	r0, r3
 801bebc:	f7f4 fb5f 	bl	801057e <lv_img_src_get_type>
 801bec0:	4603      	mov	r3, r0
 801bec2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(src_type == LV_IMG_SRC_SYMBOL) {
 801bec6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801beca:	2b02      	cmp	r3, #2
 801becc:	d17f      	bne.n	801bfce <draw_bg_img+0x164>
        lv_point_t size;
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	68d9      	ldr	r1, [r3, #12]
 801bed2:	68bb      	ldr	r3, [r7, #8]
 801bed4:	691a      	ldr	r2, [r3, #16]
 801bed6:	f107 0064 	add.w	r0, r7, #100	; 0x64
 801beda:	2300      	movs	r3, #0
 801bedc:	9302      	str	r3, [sp, #8]
 801bede:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801bee2:	9301      	str	r3, [sp, #4]
 801bee4:	2300      	movs	r3, #0
 801bee6:	9300      	str	r3, [sp, #0]
 801bee8:	2300      	movs	r3, #0
 801beea:	f008 faf5 	bl	80244d8 <lv_txt_get_size>
        lv_area_t a;
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bef4:	b29c      	uxth	r4, r3
 801bef6:	6878      	ldr	r0, [r7, #4]
 801bef8:	f7ff fc59 	bl	801b7ae <lv_area_get_width>
 801befc:	4603      	mov	r3, r0
 801befe:	2b00      	cmp	r3, #0
 801bf00:	da00      	bge.n	801bf04 <draw_bg_img+0x9a>
 801bf02:	3301      	adds	r3, #1
 801bf04:	105b      	asrs	r3, r3, #1
 801bf06:	b21b      	sxth	r3, r3
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	4423      	add	r3, r4
 801bf0c:	b29a      	uxth	r2, r3
 801bf0e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	da00      	bge.n	801bf18 <draw_bg_img+0xae>
 801bf16:	3301      	adds	r3, #1
 801bf18:	105b      	asrs	r3, r3, #1
 801bf1a:	b21b      	sxth	r3, r3
 801bf1c:	b29b      	uxth	r3, r3
 801bf1e:	1ad3      	subs	r3, r2, r3
 801bf20:	b29b      	uxth	r3, r3
 801bf22:	b21b      	sxth	r3, r3
 801bf24:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        a.x2 = a.x1 + size.x - 1;
 801bf28:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801bf2c:	b29a      	uxth	r2, r3
 801bf2e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	4413      	add	r3, r2
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	3b01      	subs	r3, #1
 801bf3a:	b29b      	uxth	r3, r3
 801bf3c:	b21b      	sxth	r3, r3
 801bf3e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bf48:	b29c      	uxth	r4, r3
 801bf4a:	6878      	ldr	r0, [r7, #4]
 801bf4c:	f7ff fc46 	bl	801b7dc <lv_area_get_height>
 801bf50:	4603      	mov	r3, r0
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	da00      	bge.n	801bf58 <draw_bg_img+0xee>
 801bf56:	3301      	adds	r3, #1
 801bf58:	105b      	asrs	r3, r3, #1
 801bf5a:	b21b      	sxth	r3, r3
 801bf5c:	b29b      	uxth	r3, r3
 801bf5e:	4423      	add	r3, r4
 801bf60:	b29a      	uxth	r2, r3
 801bf62:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	da00      	bge.n	801bf6c <draw_bg_img+0x102>
 801bf6a:	3301      	adds	r3, #1
 801bf6c:	105b      	asrs	r3, r3, #1
 801bf6e:	b21b      	sxth	r3, r3
 801bf70:	b29b      	uxth	r3, r3
 801bf72:	1ad3      	subs	r3, r2, r3
 801bf74:	b29b      	uxth	r3, r3
 801bf76:	b21b      	sxth	r3, r3
 801bf78:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        a.y2 = a.y1 + size.y - 1;
 801bf7c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801bf80:	b29a      	uxth	r2, r3
 801bf82:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801bf86:	b29b      	uxth	r3, r3
 801bf88:	4413      	add	r3, r2
 801bf8a:	b29b      	uxth	r3, r3
 801bf8c:	3b01      	subs	r3, #1
 801bf8e:	b29b      	uxth	r3, r3
 801bf90:	b21b      	sxth	r3, r3
 801bf92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        lv_draw_label_dsc_t label_draw_dsc;
        lv_draw_label_dsc_init(&label_draw_dsc);
 801bf96:	f107 0314 	add.w	r3, r7, #20
 801bf9a:	4618      	mov	r0, r3
 801bf9c:	f7f4 fd9e 	bl	8010adc <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 801bfa0:	68bb      	ldr	r3, [r7, #8]
 801bfa2:	691b      	ldr	r3, [r3, #16]
 801bfa4:	617b      	str	r3, [r7, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 801bfa6:	68bb      	ldr	r3, [r7, #8]
 801bfa8:	7d1b      	ldrb	r3, [r3, #20]
 801bfaa:	f887 3020 	strb.w	r3, [r7, #32]
        label_draw_dsc.opa = dsc->bg_img_opa;
 801bfae:	68bb      	ldr	r3, [r7, #8]
 801bfb0:	7d5b      	ldrb	r3, [r3, #21]
 801bfb2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 801bfb6:	68bb      	ldr	r3, [r7, #8]
 801bfb8:	68db      	ldr	r3, [r3, #12]
 801bfba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801bfbe:	f107 0114 	add.w	r1, r7, #20
 801bfc2:	2000      	movs	r0, #0
 801bfc4:	9000      	str	r0, [sp, #0]
 801bfc6:	68f8      	ldr	r0, [r7, #12]
 801bfc8:	f7f4 fdb4 	bl	8010b34 <lv_draw_label>
 801bfcc:	e0fd      	b.n	801c1ca <draw_bg_img+0x360>
    }
    else {
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 801bfce:	68bb      	ldr	r3, [r7, #8]
 801bfd0:	68db      	ldr	r3, [r3, #12]
 801bfd2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801bfd6:	4611      	mov	r1, r2
 801bfd8:	4618      	mov	r0, r3
 801bfda:	f7f8 fb49 	bl	8014670 <lv_img_decoder_get_info>
 801bfde:	4603      	mov	r3, r0
 801bfe0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if(res == LV_RES_OK) {
 801bfe4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801bfe8:	2b01      	cmp	r3, #1
 801bfea:	f040 80ee 	bne.w	801c1ca <draw_bg_img+0x360>
            lv_draw_img_dsc_t img_dsc;
            lv_draw_img_dsc_init(&img_dsc);
 801bfee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801bff2:	4618      	mov	r0, r3
 801bff4:	f7f4 f9df 	bl	80103b6 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	789b      	ldrb	r3, [r3, #2]
 801bffc:	f003 030f 	and.w	r3, r3, #15
 801c000:	b2da      	uxtb	r2, r3
 801c002:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801c006:	f362 0303 	bfi	r3, r2, #0, #4
 801c00a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            img_dsc.recolor = dsc->bg_img_recolor;
 801c00e:	68bb      	ldr	r3, [r7, #8]
 801c010:	7d1b      	ldrb	r3, [r3, #20]
 801c012:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 801c016:	68bb      	ldr	r3, [r7, #8]
 801c018:	7d9b      	ldrb	r3, [r3, #22]
 801c01a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            img_dsc.opa = dsc->bg_img_opa;
 801c01e:	68bb      	ldr	r3, [r7, #8]
 801c020:	7d5b      	ldrb	r3, [r3, #21]
 801c022:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

            /*Center align*/
            if(dsc->bg_img_tiled == false) {
 801c026:	68bb      	ldr	r3, [r7, #8]
 801c028:	7ddb      	ldrb	r3, [r3, #23]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d163      	bne.n	801c0f6 <draw_bg_img+0x28c>
                lv_area_t area;
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c034:	b29c      	uxth	r4, r3
 801c036:	6878      	ldr	r0, [r7, #4]
 801c038:	f7ff fbb9 	bl	801b7ae <lv_area_get_width>
 801c03c:	4603      	mov	r3, r0
 801c03e:	2b00      	cmp	r3, #0
 801c040:	da00      	bge.n	801c044 <draw_bg_img+0x1da>
 801c042:	3301      	adds	r3, #1
 801c044:	105b      	asrs	r3, r3, #1
 801c046:	b21b      	sxth	r3, r3
 801c048:	b29b      	uxth	r3, r3
 801c04a:	4423      	add	r3, r4
 801c04c:	b29a      	uxth	r2, r3
 801c04e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c050:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801c054:	b29b      	uxth	r3, r3
 801c056:	2b00      	cmp	r3, #0
 801c058:	da00      	bge.n	801c05c <draw_bg_img+0x1f2>
 801c05a:	3301      	adds	r3, #1
 801c05c:	105b      	asrs	r3, r3, #1
 801c05e:	425b      	negs	r3, r3
 801c060:	b29b      	uxth	r3, r3
 801c062:	4413      	add	r3, r2
 801c064:	b29b      	uxth	r3, r3
 801c066:	b21b      	sxth	r3, r3
 801c068:	87bb      	strh	r3, [r7, #60]	; 0x3c
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c070:	b29c      	uxth	r4, r3
 801c072:	6878      	ldr	r0, [r7, #4]
 801c074:	f7ff fbb2 	bl	801b7dc <lv_area_get_height>
 801c078:	4603      	mov	r3, r0
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	da00      	bge.n	801c080 <draw_bg_img+0x216>
 801c07e:	3301      	adds	r3, #1
 801c080:	105b      	asrs	r3, r3, #1
 801c082:	b21b      	sxth	r3, r3
 801c084:	b29b      	uxth	r3, r3
 801c086:	4423      	add	r3, r4
 801c088:	b29a      	uxth	r2, r3
 801c08a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801c08e:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801c092:	b29b      	uxth	r3, r3
 801c094:	2b00      	cmp	r3, #0
 801c096:	da00      	bge.n	801c09a <draw_bg_img+0x230>
 801c098:	3301      	adds	r3, #1
 801c09a:	105b      	asrs	r3, r3, #1
 801c09c:	425b      	negs	r3, r3
 801c09e:	b29b      	uxth	r3, r3
 801c0a0:	4413      	add	r3, r2
 801c0a2:	b29b      	uxth	r3, r3
 801c0a4:	b21b      	sxth	r3, r3
 801c0a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
                area.x2 = area.x1 + header.w - 1;
 801c0a8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801c0ac:	b29b      	uxth	r3, r3
 801c0ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c0b0:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801c0b4:	b292      	uxth	r2, r2
 801c0b6:	4413      	add	r3, r2
 801c0b8:	b29b      	uxth	r3, r3
 801c0ba:	3b01      	subs	r3, #1
 801c0bc:	b29b      	uxth	r3, r3
 801c0be:	b21b      	sxth	r3, r3
 801c0c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                area.y2 = area.y1 + header.h - 1;
 801c0c4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c0c8:	b29b      	uxth	r3, r3
 801c0ca:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801c0ce:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801c0d2:	b292      	uxth	r2, r2
 801c0d4:	4413      	add	r3, r2
 801c0d6:	b29b      	uxth	r3, r3
 801c0d8:	3b01      	subs	r3, #1
 801c0da:	b29b      	uxth	r3, r3
 801c0dc:	b21b      	sxth	r3, r3
 801c0de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801c0e2:	68bb      	ldr	r3, [r7, #8]
 801c0e4:	68db      	ldr	r3, [r3, #12]
 801c0e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801c0ea:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801c0ee:	68f8      	ldr	r0, [r7, #12]
 801c0f0:	f7f4 f97e 	bl	80103f0 <lv_draw_img>
 801c0f4:	e069      	b.n	801c1ca <draw_bg_img+0x360>
            }
            else {
                lv_area_t area;
                area.y1 = coords->y1;
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c0fc:	86fb      	strh	r3, [r7, #54]	; 0x36
                area.y2 = area.y1 + header.h - 1;
 801c0fe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c102:	b29b      	uxth	r3, r3
 801c104:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801c108:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801c10c:	b292      	uxth	r2, r2
 801c10e:	4413      	add	r3, r2
 801c110:	b29b      	uxth	r3, r3
 801c112:	3b01      	subs	r3, #1
 801c114:	b29b      	uxth	r3, r3
 801c116:	b21b      	sxth	r3, r3
 801c118:	877b      	strh	r3, [r7, #58]	; 0x3a

                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801c11a:	e04f      	b.n	801c1bc <draw_bg_img+0x352>

                    area.x1 = coords->x1;
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c122:	86bb      	strh	r3, [r7, #52]	; 0x34
                    area.x2 = area.x1 + header.w - 1;
 801c124:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c128:	b29b      	uxth	r3, r3
 801c12a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c12c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801c130:	b292      	uxth	r2, r2
 801c132:	4413      	add	r3, r2
 801c134:	b29b      	uxth	r3, r3
 801c136:	3b01      	subs	r3, #1
 801c138:	b29b      	uxth	r3, r3
 801c13a:	b21b      	sxth	r3, r3
 801c13c:	873b      	strh	r3, [r7, #56]	; 0x38
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801c13e:	e01e      	b.n	801c17e <draw_bg_img+0x314>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801c140:	68bb      	ldr	r3, [r7, #8]
 801c142:	68db      	ldr	r3, [r3, #12]
 801c144:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801c148:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801c14c:	68f8      	ldr	r0, [r7, #12]
 801c14e:	f7f4 f94f 	bl	80103f0 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801c152:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c156:	b29b      	uxth	r3, r3
 801c158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c15a:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801c15e:	b292      	uxth	r2, r2
 801c160:	4413      	add	r3, r2
 801c162:	b29b      	uxth	r3, r3
 801c164:	b21b      	sxth	r3, r3
 801c166:	86bb      	strh	r3, [r7, #52]	; 0x34
 801c168:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801c16c:	b29b      	uxth	r3, r3
 801c16e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c170:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801c174:	b292      	uxth	r2, r2
 801c176:	4413      	add	r3, r2
 801c178:	b29b      	uxth	r3, r3
 801c17a:	b21b      	sxth	r3, r3
 801c17c:	873b      	strh	r3, [r7, #56]	; 0x38
 801c17e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c188:	429a      	cmp	r2, r3
 801c18a:	ddd9      	ble.n	801c140 <draw_bg_img+0x2d6>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801c18c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c190:	b29b      	uxth	r3, r3
 801c192:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801c196:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801c19a:	b292      	uxth	r2, r2
 801c19c:	4413      	add	r3, r2
 801c19e:	b29b      	uxth	r3, r3
 801c1a0:	b21b      	sxth	r3, r3
 801c1a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 801c1a4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801c1a8:	b29b      	uxth	r3, r3
 801c1aa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801c1ae:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801c1b2:	b292      	uxth	r2, r2
 801c1b4:	4413      	add	r3, r2
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	b21b      	sxth	r3, r3
 801c1ba:	877b      	strh	r3, [r7, #58]	; 0x3a
 801c1bc:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c1c6:	429a      	cmp	r2, r3
 801c1c8:	dda8      	ble.n	801c11c <draw_bg_img+0x2b2>
        else {
            LV_LOG_WARN("Couldn't read the background image");
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c1ce:	609a      	str	r2, [r3, #8]
 801c1d0:	e004      	b.n	801c1dc <draw_bg_img+0x372>
    if(dsc->bg_img_src == NULL) return;
 801c1d2:	bf00      	nop
 801c1d4:	e002      	b.n	801c1dc <draw_bg_img+0x372>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801c1d6:	bf00      	nop
 801c1d8:	e000      	b.n	801c1dc <draw_bg_img+0x372>
        return;
 801c1da:	bf00      	nop
}
 801c1dc:	377c      	adds	r7, #124	; 0x7c
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bd90      	pop	{r4, r7, pc}

0801c1e2 <draw_border>:

static void draw_border(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801c1e2:	b580      	push	{r7, lr}
 801c1e4:	b090      	sub	sp, #64	; 0x40
 801c1e6:	af04      	add	r7, sp, #16
 801c1e8:	60f8      	str	r0, [r7, #12]
 801c1ea:	60b9      	str	r1, [r7, #8]
 801c1ec:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801c1ee:	68bb      	ldr	r3, [r7, #8]
 801c1f0:	7f1b      	ldrb	r3, [r3, #28]
 801c1f2:	2b02      	cmp	r3, #2
 801c1f4:	f240 80db 	bls.w	801c3ae <draw_border+0x1cc>
    if(dsc->border_width == 0) return;
 801c1f8:	68bb      	ldr	r3, [r7, #8]
 801c1fa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	f000 80d7 	beq.w	801c3b2 <draw_border+0x1d0>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801c204:	68bb      	ldr	r3, [r7, #8]
 801c206:	7f5b      	ldrb	r3, [r3, #29]
 801c208:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	2b00      	cmp	r3, #0
 801c210:	f000 80d1 	beq.w	801c3b6 <draw_border+0x1d4>
    if(dsc->border_post) return;
 801c214:	68bb      	ldr	r3, [r7, #8]
 801c216:	7f5b      	ldrb	r3, [r3, #29]
 801c218:	f003 0301 	and.w	r3, r3, #1
 801c21c:	b2db      	uxtb	r3, r3
 801c21e:	2b00      	cmp	r3, #0
 801c220:	f040 80cb 	bne.w	801c3ba <draw_border+0x1d8>

    int32_t coords_w = lv_area_get_width(coords);
 801c224:	6878      	ldr	r0, [r7, #4]
 801c226:	f7ff fac2 	bl	801b7ae <lv_area_get_width>
 801c22a:	4603      	mov	r3, r0
 801c22c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t coords_h = lv_area_get_height(coords);
 801c22e:	6878      	ldr	r0, [r7, #4]
 801c230:	f7ff fad4 	bl	801b7dc <lv_area_get_height>
 801c234:	4603      	mov	r3, r0
 801c236:	623b      	str	r3, [r7, #32]
    int32_t rout = dsc->radius;
 801c238:	68bb      	ldr	r3, [r7, #8]
 801c23a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c23e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t short_side = LV_MIN(coords_w, coords_h);
 801c240:	6a3a      	ldr	r2, [r7, #32]
 801c242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c244:	4293      	cmp	r3, r2
 801c246:	bfa8      	it	ge
 801c248:	4613      	movge	r3, r2
 801c24a:	61fb      	str	r3, [r7, #28]
    if(rout > short_side >> 1) rout = short_side >> 1;
 801c24c:	69fb      	ldr	r3, [r7, #28]
 801c24e:	105b      	asrs	r3, r3, #1
 801c250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c252:	429a      	cmp	r2, r3
 801c254:	dd02      	ble.n	801c25c <draw_border+0x7a>
 801c256:	69fb      	ldr	r3, [r7, #28]
 801c258:	105b      	asrs	r3, r3, #1
 801c25a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801c25c:	f107 0314 	add.w	r3, r7, #20
 801c260:	6879      	ldr	r1, [r7, #4]
 801c262:	4618      	mov	r0, r3
 801c264:	f7ff fa84 	bl	801b770 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801c268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c26c:	b29a      	uxth	r2, r3
 801c26e:	68bb      	ldr	r3, [r7, #8]
 801c270:	7f5b      	ldrb	r3, [r3, #29]
 801c272:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c276:	b2db      	uxtb	r3, r3
 801c278:	f003 0304 	and.w	r3, r3, #4
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d004      	beq.n	801c28a <draw_border+0xa8>
 801c280:	68bb      	ldr	r3, [r7, #8]
 801c282:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c286:	b29b      	uxth	r3, r3
 801c288:	e009      	b.n	801c29e <draw_border+0xbc>
 801c28a:	68bb      	ldr	r3, [r7, #8]
 801c28c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c290:	b299      	uxth	r1, r3
 801c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c294:	b29b      	uxth	r3, r3
 801c296:	440b      	add	r3, r1
 801c298:	b29b      	uxth	r3, r3
 801c29a:	425b      	negs	r3, r3
 801c29c:	b29b      	uxth	r3, r3
 801c29e:	4413      	add	r3, r2
 801c2a0:	b29b      	uxth	r3, r3
 801c2a2:	b21b      	sxth	r3, r3
 801c2a4:	82bb      	strh	r3, [r7, #20]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 801c2a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801c2aa:	b29a      	uxth	r2, r3
 801c2ac:	68bb      	ldr	r3, [r7, #8]
 801c2ae:	7f5b      	ldrb	r3, [r3, #29]
 801c2b0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c2b4:	b2db      	uxtb	r3, r3
 801c2b6:	f003 0308 	and.w	r3, r3, #8
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d004      	beq.n	801c2c8 <draw_border+0xe6>
 801c2be:	68bb      	ldr	r3, [r7, #8]
 801c2c0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c2c4:	b29b      	uxth	r3, r3
 801c2c6:	e009      	b.n	801c2dc <draw_border+0xfa>
 801c2c8:	68bb      	ldr	r3, [r7, #8]
 801c2ca:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c2ce:	b299      	uxth	r1, r3
 801c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2d2:	b29b      	uxth	r3, r3
 801c2d4:	440b      	add	r3, r1
 801c2d6:	b29b      	uxth	r3, r3
 801c2d8:	425b      	negs	r3, r3
 801c2da:	b29b      	uxth	r3, r3
 801c2dc:	1ad3      	subs	r3, r2, r3
 801c2de:	b29b      	uxth	r3, r3
 801c2e0:	b21b      	sxth	r3, r3
 801c2e2:	833b      	strh	r3, [r7, #24]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 801c2e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c2e8:	b29a      	uxth	r2, r3
 801c2ea:	68bb      	ldr	r3, [r7, #8]
 801c2ec:	7f5b      	ldrb	r3, [r3, #29]
 801c2ee:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c2f2:	b2db      	uxtb	r3, r3
 801c2f4:	f003 0302 	and.w	r3, r3, #2
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d004      	beq.n	801c306 <draw_border+0x124>
 801c2fc:	68bb      	ldr	r3, [r7, #8]
 801c2fe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c302:	b29b      	uxth	r3, r3
 801c304:	e009      	b.n	801c31a <draw_border+0x138>
 801c306:	68bb      	ldr	r3, [r7, #8]
 801c308:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c30c:	b299      	uxth	r1, r3
 801c30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c310:	b29b      	uxth	r3, r3
 801c312:	440b      	add	r3, r1
 801c314:	b29b      	uxth	r3, r3
 801c316:	425b      	negs	r3, r3
 801c318:	b29b      	uxth	r3, r3
 801c31a:	4413      	add	r3, r2
 801c31c:	b29b      	uxth	r3, r3
 801c31e:	b21b      	sxth	r3, r3
 801c320:	82fb      	strh	r3, [r7, #22]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 801c322:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c326:	b29a      	uxth	r2, r3
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	7f5b      	ldrb	r3, [r3, #29]
 801c32c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801c330:	b2db      	uxtb	r3, r3
 801c332:	f003 0301 	and.w	r3, r3, #1
 801c336:	2b00      	cmp	r3, #0
 801c338:	d004      	beq.n	801c344 <draw_border+0x162>
 801c33a:	68bb      	ldr	r3, [r7, #8]
 801c33c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c340:	b29b      	uxth	r3, r3
 801c342:	e009      	b.n	801c358 <draw_border+0x176>
 801c344:	68bb      	ldr	r3, [r7, #8]
 801c346:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c34a:	b299      	uxth	r1, r3
 801c34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c34e:	b29b      	uxth	r3, r3
 801c350:	440b      	add	r3, r1
 801c352:	b29b      	uxth	r3, r3
 801c354:	425b      	negs	r3, r3
 801c356:	b29b      	uxth	r3, r3
 801c358:	1ad3      	subs	r3, r2, r3
 801c35a:	b29b      	uxth	r3, r3
 801c35c:	b21b      	sxth	r3, r3
 801c35e:	837b      	strh	r3, [r7, #26]

    lv_coord_t rin = rout - dsc->border_width;
 801c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c362:	b29a      	uxth	r2, r3
 801c364:	68bb      	ldr	r3, [r7, #8]
 801c366:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801c36a:	b29b      	uxth	r3, r3
 801c36c:	1ad3      	subs	r3, r2, r3
 801c36e:	b29b      	uxth	r3, r3
 801c370:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(rin < 0) rin = 0;
 801c372:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801c376:	2b00      	cmp	r3, #0
 801c378:	da01      	bge.n	801c37e <draw_border+0x19c>
 801c37a:	2300      	movs	r3, #0
 801c37c:	857b      	strh	r3, [r7, #42]	; 0x2a

    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 801c37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c380:	b218      	sxth	r0, r3
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	7f1b      	ldrb	r3, [r3, #28]
 801c386:	68ba      	ldr	r2, [r7, #8]
 801c388:	7892      	ldrb	r2, [r2, #2]
 801c38a:	f107 0114 	add.w	r1, r7, #20
 801c38e:	9203      	str	r2, [sp, #12]
 801c390:	9302      	str	r3, [sp, #8]
 801c392:	68bb      	ldr	r3, [r7, #8]
 801c394:	7e1b      	ldrb	r3, [r3, #24]
 801c396:	f88d 3004 	strb.w	r3, [sp, #4]
 801c39a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801c39e:	9300      	str	r3, [sp, #0]
 801c3a0:	4603      	mov	r3, r0
 801c3a2:	460a      	mov	r2, r1
 801c3a4:	6879      	ldr	r1, [r7, #4]
 801c3a6:	68f8      	ldr	r0, [r7, #12]
 801c3a8:	f001 fe78 	bl	801e09c <draw_border_generic>
 801c3ac:	e006      	b.n	801c3bc <draw_border+0x1da>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801c3ae:	bf00      	nop
 801c3b0:	e004      	b.n	801c3bc <draw_border+0x1da>
    if(dsc->border_width == 0) return;
 801c3b2:	bf00      	nop
 801c3b4:	e002      	b.n	801c3bc <draw_border+0x1da>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801c3b6:	bf00      	nop
 801c3b8:	e000      	b.n	801c3bc <draw_border+0x1da>
    if(dsc->border_post) return;
 801c3ba:	bf00      	nop

}
 801c3bc:	3730      	adds	r7, #48	; 0x30
 801c3be:	46bd      	mov	sp, r7
 801c3c0:	bd80      	pop	{r7, pc}

0801c3c2 <draw_shadow>:

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc,
                                              const lv_area_t * coords)
{
 801c3c2:	b590      	push	{r4, r7, lr}
 801c3c4:	b0b3      	sub	sp, #204	; 0xcc
 801c3c6:	af00      	add	r7, sp, #0
 801c3c8:	60f8      	str	r0, [r7, #12]
 801c3ca:	60b9      	str	r1, [r7, #8]
 801c3cc:	607a      	str	r2, [r7, #4]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 801c3ce:	68bb      	ldr	r3, [r7, #8]
 801c3d0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	f001 82ab 	beq.w	801d930 <draw_shadow+0x156e>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801c3da:	68bb      	ldr	r3, [r7, #8]
 801c3dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c3e0:	2b02      	cmp	r3, #2
 801c3e2:	f241 82a7 	bls.w	801d934 <draw_shadow+0x1572>

    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801c3e6:	68bb      	ldr	r3, [r7, #8]
 801c3e8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c3ec:	2b01      	cmp	r3, #1
 801c3ee:	d10f      	bne.n	801c410 <draw_shadow+0x4e>
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	dc0a      	bgt.n	801c410 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801c3fa:	68bb      	ldr	r3, [r7, #8]
 801c3fc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801c400:	2b00      	cmp	r3, #0
 801c402:	d105      	bne.n	801c410 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801c404:	68bb      	ldr	r3, [r7, #8]
 801c406:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	f001 8294 	beq.w	801d938 <draw_shadow+0x1576>
        return;
    }

    /*Calculate the rectangle which is blurred to get the shadow in `shadow_area`*/
    lv_area_t core_area;
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c416:	b29a      	uxth	r2, r3
 801c418:	68bb      	ldr	r3, [r7, #8]
 801c41a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801c41e:	b29b      	uxth	r3, r3
 801c420:	4413      	add	r3, r2
 801c422:	b29a      	uxth	r2, r3
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c42a:	b29b      	uxth	r3, r3
 801c42c:	1ad3      	subs	r3, r2, r3
 801c42e:	b29b      	uxth	r3, r3
 801c430:	b21b      	sxth	r3, r3
 801c432:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c43c:	b29a      	uxth	r2, r3
 801c43e:	68bb      	ldr	r3, [r7, #8]
 801c440:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801c444:	b29b      	uxth	r3, r3
 801c446:	4413      	add	r3, r2
 801c448:	b29a      	uxth	r2, r3
 801c44a:	68bb      	ldr	r3, [r7, #8]
 801c44c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c450:	b29b      	uxth	r3, r3
 801c452:	4413      	add	r3, r2
 801c454:	b29b      	uxth	r3, r3
 801c456:	b21b      	sxth	r3, r3
 801c458:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c462:	b29a      	uxth	r2, r3
 801c464:	68bb      	ldr	r3, [r7, #8]
 801c466:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c46a:	b29b      	uxth	r3, r3
 801c46c:	4413      	add	r3, r2
 801c46e:	b29a      	uxth	r2, r3
 801c470:	68bb      	ldr	r3, [r7, #8]
 801c472:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c476:	b29b      	uxth	r3, r3
 801c478:	1ad3      	subs	r3, r2, r3
 801c47a:	b29b      	uxth	r3, r3
 801c47c:	b21b      	sxth	r3, r3
 801c47e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c488:	b29a      	uxth	r2, r3
 801c48a:	68bb      	ldr	r3, [r7, #8]
 801c48c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801c490:	b29b      	uxth	r3, r3
 801c492:	4413      	add	r3, r2
 801c494:	b29a      	uxth	r2, r3
 801c496:	68bb      	ldr	r3, [r7, #8]
 801c498:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801c49c:	b29b      	uxth	r3, r3
 801c49e:	4413      	add	r3, r2
 801c4a0:	b29b      	uxth	r3, r3
 801c4a2:	b21b      	sxth	r3, r3
 801c4a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    /*Calculate the bounding box of the shadow*/
    lv_area_t shadow_area;
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 801c4a8:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801c4ac:	b29a      	uxth	r2, r3
 801c4ae:	68bb      	ldr	r3, [r7, #8]
 801c4b0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	da00      	bge.n	801c4ba <draw_shadow+0xf8>
 801c4b8:	3301      	adds	r3, #1
 801c4ba:	105b      	asrs	r3, r3, #1
 801c4bc:	b21b      	sxth	r3, r3
 801c4be:	b29b      	uxth	r3, r3
 801c4c0:	1ad3      	subs	r3, r2, r3
 801c4c2:	b29b      	uxth	r3, r3
 801c4c4:	3b01      	subs	r3, #1
 801c4c6:	b29b      	uxth	r3, r3
 801c4c8:	b21b      	sxth	r3, r3
 801c4ca:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 801c4ce:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801c4d2:	b29a      	uxth	r2, r3
 801c4d4:	68bb      	ldr	r3, [r7, #8]
 801c4d6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	da00      	bge.n	801c4e0 <draw_shadow+0x11e>
 801c4de:	3301      	adds	r3, #1
 801c4e0:	105b      	asrs	r3, r3, #1
 801c4e2:	b21b      	sxth	r3, r3
 801c4e4:	b29b      	uxth	r3, r3
 801c4e6:	4413      	add	r3, r2
 801c4e8:	b29b      	uxth	r3, r3
 801c4ea:	3301      	adds	r3, #1
 801c4ec:	b29b      	uxth	r3, r3
 801c4ee:	b21b      	sxth	r3, r3
 801c4f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 801c4f4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801c4f8:	b29a      	uxth	r2, r3
 801c4fa:	68bb      	ldr	r3, [r7, #8]
 801c4fc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c500:	2b00      	cmp	r3, #0
 801c502:	da00      	bge.n	801c506 <draw_shadow+0x144>
 801c504:	3301      	adds	r3, #1
 801c506:	105b      	asrs	r3, r3, #1
 801c508:	b21b      	sxth	r3, r3
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	1ad3      	subs	r3, r2, r3
 801c50e:	b29b      	uxth	r3, r3
 801c510:	3b01      	subs	r3, #1
 801c512:	b29b      	uxth	r3, r3
 801c514:	b21b      	sxth	r3, r3
 801c516:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 801c51a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801c51e:	b29a      	uxth	r2, r3
 801c520:	68bb      	ldr	r3, [r7, #8]
 801c522:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c526:	2b00      	cmp	r3, #0
 801c528:	da00      	bge.n	801c52c <draw_shadow+0x16a>
 801c52a:	3301      	adds	r3, #1
 801c52c:	105b      	asrs	r3, r3, #1
 801c52e:	b21b      	sxth	r3, r3
 801c530:	b29b      	uxth	r3, r3
 801c532:	4413      	add	r3, r2
 801c534:	b29b      	uxth	r3, r3
 801c536:	3301      	adds	r3, #1
 801c538:	b29b      	uxth	r3, r3
 801c53a:	b21b      	sxth	r3, r3
 801c53c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_opa_t opa = dsc->shadow_opa;
 801c540:	68bb      	ldr	r3, [r7, #8]
 801c542:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c546:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801c54a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801c54e:	2bfd      	cmp	r3, #253	; 0xfd
 801c550:	d902      	bls.n	801c558 <draw_shadow+0x196>
 801c552:	23ff      	movs	r3, #255	; 0xff
 801c554:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `shadow_area`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	689a      	ldr	r2, [r3, #8]
 801c55c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801c560:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c564:	4618      	mov	r0, r3
 801c566:	f004 fa25 	bl	80209b4 <_lv_area_intersect>
 801c56a:	4603      	mov	r3, r0
 801c56c:	f083 0301 	eor.w	r3, r3, #1
 801c570:	b2db      	uxtb	r3, r3
 801c572:	2b00      	cmp	r3, #0
 801c574:	f041 81e2 	bne.w	801d93c <draw_shadow+0x157a>

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_area;
    lv_area_copy(&bg_area, coords);
 801c578:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c57c:	6879      	ldr	r1, [r7, #4]
 801c57e:	4618      	mov	r0, r3
 801c580:	f7ff f8f6 	bl	801b770 <lv_area_copy>
    lv_area_increase(&bg_area, -1, -1);
 801c584:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c58c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c590:	4618      	mov	r0, r3
 801c592:	f004 f9a3 	bl	80208dc <lv_area_increase>

    /*Get the clamped radius*/
    int32_t r_bg = dsc->radius;
 801c596:	68bb      	ldr	r3, [r7, #8]
 801c598:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c59c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    lv_coord_t short_side = LV_MIN(lv_area_get_width(&bg_area), lv_area_get_height(&bg_area));
 801c5a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c5a4:	4618      	mov	r0, r3
 801c5a6:	f7ff f902 	bl	801b7ae <lv_area_get_width>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	461c      	mov	r4, r3
 801c5ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c5b2:	4618      	mov	r0, r3
 801c5b4:	f7ff f912 	bl	801b7dc <lv_area_get_height>
 801c5b8:	4603      	mov	r3, r0
 801c5ba:	429c      	cmp	r4, r3
 801c5bc:	da06      	bge.n	801c5cc <draw_shadow+0x20a>
 801c5be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7ff f8f3 	bl	801b7ae <lv_area_get_width>
 801c5c8:	4603      	mov	r3, r0
 801c5ca:	e005      	b.n	801c5d8 <draw_shadow+0x216>
 801c5cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	f7ff f903 	bl	801b7dc <lv_area_get_height>
 801c5d6:	4603      	mov	r3, r0
 801c5d8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 801c5dc:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c5e0:	105b      	asrs	r3, r3, #1
 801c5e2:	b21b      	sxth	r3, r3
 801c5e4:	461a      	mov	r2, r3
 801c5e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c5ea:	4293      	cmp	r3, r2
 801c5ec:	dd05      	ble.n	801c5fa <draw_shadow+0x238>
 801c5ee:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c5f2:	105b      	asrs	r3, r3, #1
 801c5f4:	b21b      	sxth	r3, r3
 801c5f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /*Get the clamped radius*/
    int32_t r_sh = dsc->radius;
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    short_side = LV_MIN(lv_area_get_width(&core_area), lv_area_get_height(&core_area));
 801c604:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c608:	4618      	mov	r0, r3
 801c60a:	f7ff f8d0 	bl	801b7ae <lv_area_get_width>
 801c60e:	4603      	mov	r3, r0
 801c610:	461c      	mov	r4, r3
 801c612:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c616:	4618      	mov	r0, r3
 801c618:	f7ff f8e0 	bl	801b7dc <lv_area_get_height>
 801c61c:	4603      	mov	r3, r0
 801c61e:	429c      	cmp	r4, r3
 801c620:	da06      	bge.n	801c630 <draw_shadow+0x26e>
 801c622:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c626:	4618      	mov	r0, r3
 801c628:	f7ff f8c1 	bl	801b7ae <lv_area_get_width>
 801c62c:	4603      	mov	r3, r0
 801c62e:	e005      	b.n	801c63c <draw_shadow+0x27a>
 801c630:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c634:	4618      	mov	r0, r3
 801c636:	f7ff f8d1 	bl	801b7dc <lv_area_get_height>
 801c63a:	4603      	mov	r3, r0
 801c63c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 801c640:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c644:	105b      	asrs	r3, r3, #1
 801c646:	b21b      	sxth	r3, r3
 801c648:	461a      	mov	r2, r3
 801c64a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c64e:	4293      	cmp	r3, r2
 801c650:	dd05      	ble.n	801c65e <draw_shadow+0x29c>
 801c652:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801c656:	105b      	asrs	r3, r3, #1
 801c658:	b21b      	sxth	r3, r3
 801c65a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


    /*Get how many pixels are affected by the blur on the corners*/
    int32_t corner_size = dsc->shadow_width  + r_sh;
 801c65e:	68bb      	ldr	r3, [r7, #8]
 801c660:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801c664:	461a      	mov	r2, r3
 801c666:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c66a:	4413      	add	r3, r2
 801c66c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 801c670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c674:	fb03 f303 	mul.w	r3, r3, r3
 801c678:	005b      	lsls	r3, r3, #1
 801c67a:	4618      	mov	r0, r3
 801c67c:	f005 fd44 	bl	8022108 <lv_mem_buf_get>
 801c680:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 801c68a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c68e:	b21b      	sxth	r3, r3
 801c690:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801c694:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801c698:	f001 f954 	bl	801d944 <shadow_draw_corner_buf>
#endif

    /*Skip a lot of masking if the background will cover the shadow that would be masked out*/
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 801c69c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	f7f5 fb41 	bl	8011d28 <lv_draw_mask_is_any>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool simple = true;
 801c6ac:	2301      	movs	r3, #1
 801c6ae:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 801c6b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d107      	bne.n	801c6ca <draw_shadow+0x308>
 801c6ba:	68bb      	ldr	r3, [r7, #8]
 801c6bc:	78db      	ldrb	r3, [r3, #3]
 801c6be:	2bff      	cmp	r3, #255	; 0xff
 801c6c0:	d103      	bne.n	801c6ca <draw_shadow+0x308>
 801c6c2:	68bb      	ldr	r3, [r7, #8]
 801c6c4:	789b      	ldrb	r3, [r3, #2]
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d002      	beq.n	801c6d0 <draw_shadow+0x30e>
 801c6ca:	2300      	movs	r3, #0
 801c6cc:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

    /*Create a radius mask to clip remove shadow on the bg area*/

    lv_draw_mask_radius_param_t mask_rout_param;
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801c6d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c6d4:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    if(!simple) {
 801c6d8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c6dc:	f083 0301 	eor.w	r3, r3, #1
 801c6e0:	b2db      	uxtb	r3, r3
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d012      	beq.n	801c70c <draw_shadow+0x34a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 801c6e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c6ea:	b21a      	sxth	r2, r3
 801c6ec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c6f0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801c6f4:	2301      	movs	r3, #1
 801c6f6:	f7f5 fdb3 	bl	8012260 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801c6fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c6fe:	2100      	movs	r1, #0
 801c700:	4618      	mov	r0, r3
 801c702:	f7f5 f9e1 	bl	8011ac8 <lv_draw_mask_add>
 801c706:	4603      	mov	r3, r0
 801c708:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    }
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 801c70c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c710:	4618      	mov	r0, r3
 801c712:	f7ff f84c 	bl	801b7ae <lv_area_get_width>
 801c716:	4603      	mov	r3, r0
 801c718:	4618      	mov	r0, r3
 801c71a:	f005 fcf5 	bl	8022108 <lv_mem_buf_get>
 801c71e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_opa_t * sh_buf_tmp;
    lv_coord_t y;
    bool simple_sub;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801c722:	f107 0314 	add.w	r3, r7, #20
 801c726:	211c      	movs	r1, #28
 801c728:	4618      	mov	r0, r3
 801c72a:	f006 f897 	bl	802285c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801c72e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c732:	617b      	str	r3, [r7, #20]
    blend_dsc.mask_area = &blend_area;
 801c734:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c738:	62bb      	str	r3, [r7, #40]	; 0x28
    blend_dsc.mask_buf = mask_buf;
 801c73a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c73e:	623b      	str	r3, [r7, #32]
    blend_dsc.color = dsc->shadow_color;
 801c740:	68bb      	ldr	r3, [r7, #8]
 801c742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801c746:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->shadow_opa;
 801c748:	68bb      	ldr	r3, [r7, #8]
 801c74a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c74e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    blend_dsc.blend_mode = dsc->blend_mode;
 801c752:	68bb      	ldr	r3, [r7, #8]
 801c754:	789b      	ldrb	r3, [r3, #2]
 801c756:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 801c75a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801c75e:	b29c      	uxth	r4, r3
 801c760:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c764:	4618      	mov	r0, r3
 801c766:	f7ff f822 	bl	801b7ae <lv_area_get_width>
 801c76a:	4603      	mov	r3, r0
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	da00      	bge.n	801c772 <draw_shadow+0x3b0>
 801c770:	3301      	adds	r3, #1
 801c772:	105b      	asrs	r3, r3, #1
 801c774:	b21b      	sxth	r3, r3
 801c776:	b29b      	uxth	r3, r3
 801c778:	4423      	add	r3, r4
 801c77a:	b29b      	uxth	r3, r3
 801c77c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 801c780:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c784:	b29c      	uxth	r4, r3
 801c786:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c78a:	4618      	mov	r0, r3
 801c78c:	f7ff f826 	bl	801b7dc <lv_area_get_height>
 801c790:	4603      	mov	r3, r0
 801c792:	2b00      	cmp	r3, #0
 801c794:	da00      	bge.n	801c798 <draw_shadow+0x3d6>
 801c796:	3301      	adds	r3, #1
 801c798:	105b      	asrs	r3, r3, #1
 801c79a:	b21b      	sxth	r3, r3
 801c79c:	b29b      	uxth	r3, r3
 801c79e:	4423      	add	r3, r4
 801c7a0:	b29b      	uxth	r3, r3
 801c7a2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    /*Draw the corners if they are on the current clip area and not fully covered by the bg*/

    /*Top right corner*/
    blend_area.x2 = shadow_area.x2;
 801c7a6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c7aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801c7ac:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c7b0:	b29a      	uxth	r2, r3
 801c7b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c7b6:	b29b      	uxth	r3, r3
 801c7b8:	1ad3      	subs	r3, r2, r3
 801c7ba:	b29b      	uxth	r3, r3
 801c7bc:	3301      	adds	r3, #1
 801c7be:	b29b      	uxth	r3, r3
 801c7c0:	b21b      	sxth	r3, r3
 801c7c2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y1;
 801c7c4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c7c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801c7ca:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c7ce:	b29a      	uxth	r2, r3
 801c7d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c7d4:	b29b      	uxth	r3, r3
 801c7d6:	4413      	add	r3, r2
 801c7d8:	b29b      	uxth	r3, r3
 801c7da:	3b01      	subs	r3, #1
 801c7dc:	b29b      	uxth	r3, r3
 801c7de:	b21b      	sxth	r3, r3
 801c7e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other top corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801c7e2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801c7e6:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801c7ea:	4293      	cmp	r3, r2
 801c7ec:	bfb8      	it	lt
 801c7ee:	4613      	movlt	r3, r2
 801c7f0:	b21b      	sxth	r3, r3
 801c7f2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801c7f4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c7f8:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801c7fc:	4293      	cmp	r3, r2
 801c7fe:	bfa8      	it	ge
 801c800:	4613      	movge	r3, r2
 801c802:	b21b      	sxth	r3, r3
 801c804:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	689a      	ldr	r2, [r3, #8]
 801c80a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c80e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c812:	4618      	mov	r0, r3
 801c814:	f004 f8ce 	bl	80209b4 <_lv_area_intersect>
 801c818:	4603      	mov	r3, r0
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	f000 80b3 	beq.w	801c986 <draw_shadow+0x5c4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801c820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c824:	b21a      	sxth	r2, r3
 801c826:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c82a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c82e:	4618      	mov	r0, r3
 801c830:	f004 faa4 	bl	8020d7c <_lv_area_is_in>
 801c834:	4603      	mov	r3, r0
 801c836:	f083 0301 	eor.w	r3, r3, #1
 801c83a:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	f000 80a2 	beq.w	801c986 <draw_shadow+0x5c4>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801c842:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c846:	4618      	mov	r0, r3
 801c848:	f7fe ffb1 	bl	801b7ae <lv_area_get_width>
 801c84c:	4603      	mov	r3, r0
 801c84e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        sh_buf_tmp = sh_buf;
 801c852:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 801c85a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c85e:	461a      	mov	r2, r3
 801c860:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801c864:	1ad3      	subs	r3, r2, r3
 801c866:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801c86a:	fb02 f303 	mul.w	r3, r2, r3
 801c86e:	461a      	mov	r2, r3
 801c870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c874:	4413      	add	r3, r2
 801c876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801c87a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c87e:	461a      	mov	r2, r3
 801c880:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c884:	4619      	mov	r1, r3
 801c886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c88a:	1acb      	subs	r3, r1, r3
 801c88c:	3301      	adds	r3, #1
 801c88e:	1ad3      	subs	r3, r2, r3
 801c890:	461a      	mov	r2, r3
 801c892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c896:	4413      	add	r3, r2
 801c898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801c89c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d010      	beq.n	801c8c6 <draw_shadow+0x504>
 801c8a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c8a8:	b21a      	sxth	r2, r3
 801c8aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c8ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	f004 fb00 	bl	8020eb8 <_lv_area_is_out>
 801c8b8:	4603      	mov	r3, r0
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d003      	beq.n	801c8c6 <draw_shadow+0x504>
 801c8be:	2301      	movs	r3, #1
 801c8c0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801c8c4:	e003      	b.n	801c8ce <draw_shadow+0x50c>
        else simple_sub = simple;
 801c8c6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801c8ca:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        if(w > 0) {
 801c8ce:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	dd57      	ble.n	801c986 <draw_shadow+0x5c4>
            blend_dsc.mask_buf = mask_buf;
 801c8d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c8da:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801c8dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801c8e0:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801c8e2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801c8e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801c8e8:	2302      	movs	r3, #2
 801c8ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801c8ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801c8f0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c8f4:	e041      	b.n	801c97a <draw_shadow+0x5b8>
                blend_area.y1 = y;
 801c8f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c8fa:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801c8fc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c900:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801c902:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801c906:	f083 0301 	eor.w	r3, r3, #1
 801c90a:	b2db      	uxtb	r3, r3
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d01d      	beq.n	801c94c <draw_shadow+0x58a>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801c910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c914:	461a      	mov	r2, r3
 801c916:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801c91a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c91e:	f005 fcf7 	bl	8022310 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801c922:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801c926:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801c92a:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c92e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801c932:	f7f5 f8fb 	bl	8011b2c <lv_draw_mask_apply>
 801c936:	4603      	mov	r3, r0
 801c938:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c93c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c940:	2b01      	cmp	r3, #1
 801c942:	d106      	bne.n	801c952 <draw_shadow+0x590>
 801c944:	2302      	movs	r3, #2
 801c946:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801c94a:	e002      	b.n	801c952 <draw_shadow+0x590>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801c94c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c950:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c952:	f107 0314 	add.w	r3, r7, #20
 801c956:	4619      	mov	r1, r3
 801c958:	68f8      	ldr	r0, [r7, #12]
 801c95a:	f7fa fcb5 	bl	80172c8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801c95e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c966:	4413      	add	r3, r2
 801c968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801c96c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801c970:	b29b      	uxth	r3, r3
 801c972:	3301      	adds	r3, #1
 801c974:	b29b      	uxth	r3, r3
 801c976:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c97a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c97e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801c982:	429a      	cmp	r2, r3
 801c984:	ddb7      	ble.n	801c8f6 <draw_shadow+0x534>
        }
    }

    /*Bottom right corner.
     *Almost the same as top right just read the lines of `sh_buf` from then end*/
    blend_area.x2 = shadow_area.x2;
 801c986:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c98a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801c98c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801c990:	b29a      	uxth	r2, r3
 801c992:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c996:	b29b      	uxth	r3, r3
 801c998:	1ad3      	subs	r3, r2, r3
 801c99a:	b29b      	uxth	r3, r3
 801c99c:	3301      	adds	r3, #1
 801c99e:	b29b      	uxth	r3, r3
 801c9a0:	b21b      	sxth	r3, r3
 801c9a2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801c9a4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801c9a8:	b29a      	uxth	r2, r3
 801c9aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c9ae:	b29b      	uxth	r3, r3
 801c9b0:	1ad3      	subs	r3, r2, r3
 801c9b2:	b29b      	uxth	r3, r3
 801c9b4:	3301      	adds	r3, #1
 801c9b6:	b29b      	uxth	r3, r3
 801c9b8:	b21b      	sxth	r3, r3
 801c9ba:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801c9bc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801c9c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801c9c2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801c9c6:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801c9ca:	4293      	cmp	r3, r2
 801c9cc:	bfb8      	it	lt
 801c9ce:	4613      	movlt	r3, r2
 801c9d0:	b21b      	sxth	r3, r3
 801c9d2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801c9d4:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801c9d8:	3301      	adds	r3, #1
 801c9da:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801c9de:	4293      	cmp	r3, r2
 801c9e0:	bfb8      	it	lt
 801c9e2:	4613      	movlt	r3, r2
 801c9e4:	b21b      	sxth	r3, r3
 801c9e6:	877b      	strh	r3, [r7, #58]	; 0x3a

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	689a      	ldr	r2, [r3, #8]
 801c9ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801c9f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c9f4:	4618      	mov	r0, r3
 801c9f6:	f003 ffdd 	bl	80209b4 <_lv_area_intersect>
 801c9fa:	4603      	mov	r3, r0
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	f000 80b3 	beq.w	801cb68 <draw_shadow+0x7a6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801ca02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ca06:	b21a      	sxth	r2, r3
 801ca08:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ca0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ca10:	4618      	mov	r0, r3
 801ca12:	f004 f9b3 	bl	8020d7c <_lv_area_is_in>
 801ca16:	4603      	mov	r3, r0
 801ca18:	f083 0301 	eor.w	r3, r3, #1
 801ca1c:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	f000 80a2 	beq.w	801cb68 <draw_shadow+0x7a6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801ca24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ca28:	4618      	mov	r0, r3
 801ca2a:	f7fe fec0 	bl	801b7ae <lv_area_get_width>
 801ca2e:	4603      	mov	r3, r0
 801ca30:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        sh_buf_tmp = sh_buf;
 801ca34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ca38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801ca3c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801ca40:	461a      	mov	r2, r3
 801ca42:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801ca46:	1ad3      	subs	r3, r2, r3
 801ca48:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ca4c:	fb02 f303 	mul.w	r3, r2, r3
 801ca50:	461a      	mov	r2, r3
 801ca52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ca56:	4413      	add	r3, r2
 801ca58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801ca5c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ca60:	461a      	mov	r2, r3
 801ca62:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ca66:	4619      	mov	r1, r3
 801ca68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ca6c:	1acb      	subs	r3, r1, r3
 801ca6e:	3301      	adds	r3, #1
 801ca70:	1ad3      	subs	r3, r2, r3
 801ca72:	461a      	mov	r2, r3
 801ca74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ca78:	4413      	add	r3, r2
 801ca7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801ca7e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d010      	beq.n	801caa8 <draw_shadow+0x6e6>
 801ca86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ca8a:	b21a      	sxth	r2, r3
 801ca8c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ca90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ca94:	4618      	mov	r0, r3
 801ca96:	f004 fa0f 	bl	8020eb8 <_lv_area_is_out>
 801ca9a:	4603      	mov	r3, r0
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d003      	beq.n	801caa8 <draw_shadow+0x6e6>
 801caa0:	2301      	movs	r3, #1
 801caa2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801caa6:	e003      	b.n	801cab0 <draw_shadow+0x6ee>
        else simple_sub = simple;
 801caa8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801caac:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801cab0:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	dd57      	ble.n	801cb68 <draw_shadow+0x7a6>
            blend_dsc.mask_buf = mask_buf;
 801cab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cabc:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801cabe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801cac2:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801cac4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801cac8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801caca:	2302      	movs	r3, #2
 801cacc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801cad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801cad2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cad6:	e041      	b.n	801cb5c <draw_shadow+0x79a>
                blend_area.y1 = y;
 801cad8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cadc:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801cade:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cae2:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801cae4:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801cae8:	f083 0301 	eor.w	r3, r3, #1
 801caec:	b2db      	uxtb	r3, r3
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d01d      	beq.n	801cb2e <draw_shadow+0x76c>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801caf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801caf6:	461a      	mov	r2, r3
 801caf8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801cafc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cb00:	f005 fc06 	bl	8022310 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801cb04:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801cb08:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801cb0c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cb10:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cb14:	f7f5 f80a 	bl	8011b2c <lv_draw_mask_apply>
 801cb18:	4603      	mov	r3, r0
 801cb1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801cb1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cb22:	2b01      	cmp	r3, #1
 801cb24:	d106      	bne.n	801cb34 <draw_shadow+0x772>
 801cb26:	2302      	movs	r3, #2
 801cb28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801cb2c:	e002      	b.n	801cb34 <draw_shadow+0x772>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801cb2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cb32:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cb34:	f107 0314 	add.w	r3, r7, #20
 801cb38:	4619      	mov	r1, r3
 801cb3a:	68f8      	ldr	r0, [r7, #12]
 801cb3c:	f7fa fbc4 	bl	80172c8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801cb40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cb44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cb48:	4413      	add	r3, r2
 801cb4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801cb4e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cb52:	b29b      	uxth	r3, r3
 801cb54:	3b01      	subs	r3, #1
 801cb56:	b29b      	uxth	r3, r3
 801cb58:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cb5c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801cb60:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cb64:	429a      	cmp	r2, r3
 801cb66:	dab7      	bge.n	801cad8 <draw_shadow+0x716>
            }
        }
    }

    /*Top side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801cb68:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801cb6c:	b29a      	uxth	r2, r3
 801cb6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cb72:	b29b      	uxth	r3, r3
 801cb74:	4413      	add	r3, r2
 801cb76:	b29b      	uxth	r3, r3
 801cb78:	b21b      	sxth	r3, r3
 801cb7a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801cb7c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cb80:	b29a      	uxth	r2, r3
 801cb82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cb86:	b29b      	uxth	r3, r3
 801cb88:	1ad3      	subs	r3, r2, r3
 801cb8a:	b29b      	uxth	r3, r3
 801cb8c:	b21b      	sxth	r3, r3
 801cb8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801cb90:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801cb94:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801cb96:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801cb9a:	b29a      	uxth	r2, r3
 801cb9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cba0:	b29b      	uxth	r3, r3
 801cba2:	4413      	add	r3, r2
 801cba4:	b29b      	uxth	r3, r3
 801cba6:	3b01      	subs	r3, #1
 801cba8:	b29b      	uxth	r3, r3
 801cbaa:	b21b      	sxth	r3, r3
 801cbac:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801cbae:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801cbb2:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801cbb6:	4293      	cmp	r3, r2
 801cbb8:	bfa8      	it	ge
 801cbba:	4613      	movge	r3, r2
 801cbbc:	b21b      	sxth	r3, r3
 801cbbe:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cbc0:	68fb      	ldr	r3, [r7, #12]
 801cbc2:	689a      	ldr	r2, [r3, #8]
 801cbc4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801cbc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cbcc:	4618      	mov	r0, r3
 801cbce:	f003 fef1 	bl	80209b4 <_lv_area_intersect>
 801cbd2:	4603      	mov	r3, r0
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	f000 80c2 	beq.w	801cd5e <draw_shadow+0x99c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801cbda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cbde:	b21a      	sxth	r2, r3
 801cbe0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cbe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f004 f8c7 	bl	8020d7c <_lv_area_is_in>
 801cbee:	4603      	mov	r3, r0
 801cbf0:	f083 0301 	eor.w	r3, r3, #1
 801cbf4:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	f000 80b1 	beq.w	801cd5e <draw_shadow+0x99c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801cbfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cc00:	4618      	mov	r0, r3
 801cc02:	f7fe fdd4 	bl	801b7ae <lv_area_get_width>
 801cc06:	4603      	mov	r3, r0
 801cc08:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        sh_buf_tmp = sh_buf;
 801cc0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801cc10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801cc14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801cc18:	461a      	mov	r2, r3
 801cc1a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801cc1e:	1ad3      	subs	r3, r2, r3
 801cc20:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801cc24:	fb02 f303 	mul.w	r3, r2, r3
 801cc28:	461a      	mov	r2, r3
 801cc2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cc2e:	4413      	add	r3, r2
 801cc30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801cc34:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d010      	beq.n	801cc5e <draw_shadow+0x89c>
 801cc3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cc40:	b21a      	sxth	r2, r3
 801cc42:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cc46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	f004 f934 	bl	8020eb8 <_lv_area_is_out>
 801cc50:	4603      	mov	r3, r0
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d003      	beq.n	801cc5e <draw_shadow+0x89c>
 801cc56:	2301      	movs	r3, #1
 801cc58:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801cc5c:	e003      	b.n	801cc66 <draw_shadow+0x8a4>
        else simple_sub = simple;
 801cc5e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801cc62:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801cc66:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	dd77      	ble.n	801cd5e <draw_shadow+0x99c>
            if(!simple_sub) {
 801cc6e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801cc72:	f083 0301 	eor.w	r3, r3, #1
 801cc76:	b2db      	uxtb	r3, r3
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d003      	beq.n	801cc84 <draw_shadow+0x8c2>
                blend_dsc.mask_buf = mask_buf;
 801cc7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cc80:	623b      	str	r3, [r7, #32]
 801cc82:	e001      	b.n	801cc88 <draw_shadow+0x8c6>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801cc84:	2300      	movs	r3, #0
 801cc86:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801cc88:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801cc8c:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801cc8e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801cc92:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801cc94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801cc96:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cc9a:	e05a      	b.n	801cd52 <draw_shadow+0x990>
                blend_area.y1 = y;
 801cc9c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cca0:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801cca2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cca6:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801cca8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ccac:	f083 0301 	eor.w	r3, r3, #1
 801ccb0:	b2db      	uxtb	r3, r3
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d024      	beq.n	801cd00 <draw_shadow+0x93e>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801ccb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801ccc0:	4619      	mov	r1, r3
 801ccc2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ccc6:	f005 fd3b 	bl	8022740 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ccca:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ccce:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ccd2:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ccd6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ccda:	f7f4 ff27 	bl	8011b2c <lv_draw_mask_apply>
 801ccde:	4603      	mov	r3, r0
 801cce0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801cce4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cce8:	2b01      	cmp	r3, #1
 801ccea:	d102      	bne.n	801ccf2 <draw_shadow+0x930>
 801ccec:	2302      	movs	r3, #2
 801ccee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ccf2:	f107 0314 	add.w	r3, r7, #20
 801ccf6:	4619      	mov	r1, r3
 801ccf8:	68f8      	ldr	r0, [r7, #12]
 801ccfa:	f7fa fae5 	bl	80172c8 <lv_draw_sw_blend>
 801ccfe:	e01a      	b.n	801cd36 <draw_shadow+0x974>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801cd00:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801cd04:	2bff      	cmp	r3, #255	; 0xff
 801cd06:	d103      	bne.n	801cd10 <draw_shadow+0x94e>
 801cd08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cd0c:	781b      	ldrb	r3, [r3, #0]
 801cd0e:	e00a      	b.n	801cd26 <draw_shadow+0x964>
 801cd10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cd14:	781b      	ldrb	r3, [r3, #0]
 801cd16:	461a      	mov	r2, r3
 801cd18:	68bb      	ldr	r3, [r7, #8]
 801cd1a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cd1e:	fb02 f303 	mul.w	r3, r2, r3
 801cd22:	121b      	asrs	r3, r3, #8
 801cd24:	b2db      	uxtb	r3, r3
 801cd26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cd2a:	f107 0314 	add.w	r3, r7, #20
 801cd2e:	4619      	mov	r1, r3
 801cd30:	68f8      	ldr	r0, [r7, #12]
 801cd32:	f7fa fac9 	bl	80172c8 <lv_draw_sw_blend>
                }
                sh_buf_tmp += corner_size;
 801cd36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cd3e:	4413      	add	r3, r2
 801cd40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801cd44:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cd48:	b29b      	uxth	r3, r3
 801cd4a:	3301      	adds	r3, #1
 801cd4c:	b29b      	uxth	r3, r3
 801cd4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cd52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cd56:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cd5a:	429a      	cmp	r2, r3
 801cd5c:	dd9e      	ble.n	801cc9c <draw_shadow+0x8da>
            }
        }
    }
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801cd5e:	68bb      	ldr	r3, [r7, #8]
 801cd60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cd64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Bottom side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801cd68:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801cd6c:	b29a      	uxth	r2, r3
 801cd6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd72:	b29b      	uxth	r3, r3
 801cd74:	4413      	add	r3, r2
 801cd76:	b29b      	uxth	r3, r3
 801cd78:	b21b      	sxth	r3, r3
 801cd7a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801cd7c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cd80:	b29a      	uxth	r2, r3
 801cd82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd86:	b29b      	uxth	r3, r3
 801cd88:	1ad3      	subs	r3, r2, r3
 801cd8a:	b29b      	uxth	r3, r3
 801cd8c:	b21b      	sxth	r3, r3
 801cd8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801cd90:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cd94:	b29a      	uxth	r2, r3
 801cd96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cd9a:	b29b      	uxth	r3, r3
 801cd9c:	1ad3      	subs	r3, r2, r3
 801cd9e:	b29b      	uxth	r3, r3
 801cda0:	3301      	adds	r3, #1
 801cda2:	b29b      	uxth	r3, r3
 801cda4:	b21b      	sxth	r3, r3
 801cda6:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801cda8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cdac:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801cdae:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801cdb2:	3301      	adds	r3, #1
 801cdb4:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801cdb8:	4293      	cmp	r3, r2
 801cdba:	bfb8      	it	lt
 801cdbc:	4613      	movlt	r3, r2
 801cdbe:	b21b      	sxth	r3, r3
 801cdc0:	877b      	strh	r3, [r7, #58]	; 0x3a


    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cdc2:	68fb      	ldr	r3, [r7, #12]
 801cdc4:	689a      	ldr	r2, [r3, #8]
 801cdc6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801cdca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cdce:	4618      	mov	r0, r3
 801cdd0:	f003 fdf0 	bl	80209b4 <_lv_area_intersect>
 801cdd4:	4603      	mov	r3, r0
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	f000 80dc 	beq.w	801cf94 <draw_shadow+0xbd2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801cddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cde0:	b21a      	sxth	r2, r3
 801cde2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cde6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cdea:	4618      	mov	r0, r3
 801cdec:	f003 ffc6 	bl	8020d7c <_lv_area_is_in>
 801cdf0:	4603      	mov	r3, r0
 801cdf2:	f083 0301 	eor.w	r3, r3, #1
 801cdf6:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	f000 80cb 	beq.w	801cf94 <draw_shadow+0xbd2>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801cdfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce02:	4618      	mov	r0, r3
 801ce04:	f7fe fcd3 	bl	801b7ae <lv_area_get_width>
 801ce08:	4603      	mov	r3, r0
 801ce0a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        sh_buf_tmp = sh_buf;
 801ce0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ce12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801ce16:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801ce1a:	461a      	mov	r2, r3
 801ce1c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801ce20:	1ad3      	subs	r3, r2, r3
 801ce22:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ce26:	fb02 f303 	mul.w	r3, r2, r3
 801ce2a:	461a      	mov	r2, r3
 801ce2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ce30:	4413      	add	r3, r2
 801ce32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        if(w > 0) {
 801ce36:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	f340 80aa 	ble.w	801cf94 <draw_shadow+0xbd2>
            /*Do not mask if out of the bg*/
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801ce40:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d010      	beq.n	801ce6a <draw_shadow+0xaa8>
 801ce48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ce4c:	b21a      	sxth	r2, r3
 801ce4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ce52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ce56:	4618      	mov	r0, r3
 801ce58:	f004 f82e 	bl	8020eb8 <_lv_area_is_out>
 801ce5c:	4603      	mov	r3, r0
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d003      	beq.n	801ce6a <draw_shadow+0xaa8>
 801ce62:	2301      	movs	r3, #1
 801ce64:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801ce68:	e003      	b.n	801ce72 <draw_shadow+0xab0>
            else simple_sub = simple;
 801ce6a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ce6e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

            if(!simple_sub) {
 801ce72:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ce76:	f083 0301 	eor.w	r3, r3, #1
 801ce7a:	b2db      	uxtb	r3, r3
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d003      	beq.n	801ce88 <draw_shadow+0xac6>
                blend_dsc.mask_buf = mask_buf;
 801ce80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ce84:	623b      	str	r3, [r7, #32]
 801ce86:	e001      	b.n	801ce8c <draw_shadow+0xaca>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801ce88:	2300      	movs	r3, #0
 801ce8a:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801ce8c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ce90:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801ce92:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ce96:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801ce98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ce9a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ce9e:	e073      	b.n	801cf88 <draw_shadow+0xbc6>
                blend_area.y1 = y;
 801cea0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801cea4:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801cea6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801ceaa:	87fb      	strh	r3, [r7, #62]	; 0x3e

                /*Do not mask if out of the bg*/
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801ceac:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d010      	beq.n	801ced6 <draw_shadow+0xb14>
 801ceb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ceb8:	b21a      	sxth	r2, r3
 801ceba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801cebe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cec2:	4618      	mov	r0, r3
 801cec4:	f003 fff8 	bl	8020eb8 <_lv_area_is_out>
 801cec8:	4603      	mov	r3, r0
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d003      	beq.n	801ced6 <draw_shadow+0xb14>
 801cece:	2301      	movs	r3, #1
 801ced0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801ced4:	e003      	b.n	801cede <draw_shadow+0xb1c>
                else simple_sub = simple;
 801ced6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ceda:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

                if(!simple_sub) {
 801cede:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801cee2:	f083 0301 	eor.w	r3, r3, #1
 801cee6:	b2db      	uxtb	r3, r3
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d024      	beq.n	801cf36 <draw_shadow+0xb74>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801ceec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cef0:	781b      	ldrb	r3, [r3, #0]
 801cef2:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801cef6:	4619      	mov	r1, r3
 801cef8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cefc:	f005 fc20 	bl	8022740 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801cf00:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801cf04:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801cf08:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cf0c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801cf10:	f7f4 fe0c 	bl	8011b2c <lv_draw_mask_apply>
 801cf14:	4603      	mov	r3, r0
 801cf16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801cf1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cf1e:	2b01      	cmp	r3, #1
 801cf20:	d102      	bne.n	801cf28 <draw_shadow+0xb66>
 801cf22:	2302      	movs	r3, #2
 801cf24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cf28:	f107 0314 	add.w	r3, r7, #20
 801cf2c:	4619      	mov	r1, r3
 801cf2e:	68f8      	ldr	r0, [r7, #12]
 801cf30:	f7fa f9ca 	bl	80172c8 <lv_draw_sw_blend>
 801cf34:	e01a      	b.n	801cf6c <draw_shadow+0xbaa>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801cf36:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801cf3a:	2bff      	cmp	r3, #255	; 0xff
 801cf3c:	d103      	bne.n	801cf46 <draw_shadow+0xb84>
 801cf3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cf42:	781b      	ldrb	r3, [r3, #0]
 801cf44:	e00a      	b.n	801cf5c <draw_shadow+0xb9a>
 801cf46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801cf4a:	781b      	ldrb	r3, [r3, #0]
 801cf4c:	461a      	mov	r2, r3
 801cf4e:	68bb      	ldr	r3, [r7, #8]
 801cf50:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cf54:	fb02 f303 	mul.w	r3, r2, r3
 801cf58:	121b      	asrs	r3, r3, #8
 801cf5a:	b2db      	uxtb	r3, r3
 801cf5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cf60:	f107 0314 	add.w	r3, r7, #20
 801cf64:	4619      	mov	r1, r3
 801cf66:	68f8      	ldr	r0, [r7, #12]
 801cf68:	f7fa f9ae 	bl	80172c8 <lv_draw_sw_blend>

                }
                sh_buf_tmp += corner_size;
 801cf6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cf70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801cf74:	4413      	add	r3, r2
 801cf76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801cf7a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801cf7e:	b29b      	uxth	r3, r3
 801cf80:	3b01      	subs	r3, #1
 801cf82:	b29b      	uxth	r3, r3
 801cf84:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801cf88:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801cf8c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801cf90:	429a      	cmp	r2, r3
 801cf92:	da85      	bge.n	801cea0 <draw_shadow+0xade>
            }
        }
    }

    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801cf94:	68bb      	ldr	r3, [r7, #8]
 801cf96:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801cf9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Right side*/
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801cf9e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cfa2:	b29a      	uxth	r2, r3
 801cfa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cfa8:	b29b      	uxth	r3, r3
 801cfaa:	1ad3      	subs	r3, r2, r3
 801cfac:	b29b      	uxth	r3, r3
 801cfae:	3301      	adds	r3, #1
 801cfb0:	b29b      	uxth	r3, r3
 801cfb2:	b21b      	sxth	r3, r3
 801cfb4:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2;
 801cfb6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801cfba:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801cfbc:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801cfc0:	b29a      	uxth	r2, r3
 801cfc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cfc6:	b29b      	uxth	r3, r3
 801cfc8:	4413      	add	r3, r2
 801cfca:	b29b      	uxth	r3, r3
 801cfcc:	b21b      	sxth	r3, r3
 801cfce:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801cfd0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801cfd4:	b29a      	uxth	r2, r3
 801cfd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801cfda:	b29b      	uxth	r3, r3
 801cfdc:	1ad3      	subs	r3, r2, r3
 801cfde:	b29b      	uxth	r3, r3
 801cfe0:	b21b      	sxth	r3, r3
 801cfe2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801cfe4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801cfe8:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801cfec:	429a      	cmp	r2, r3
 801cfee:	db02      	blt.n	801cff6 <draw_shadow+0xc34>
 801cff0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801cff4:	e004      	b.n	801d000 <draw_shadow+0xc3e>
 801cff6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801cffa:	3301      	adds	r3, #1
 801cffc:	b29b      	uxth	r3, r3
 801cffe:	b21b      	sxth	r3, r3
 801d000:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801d002:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d006:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d00a:	4293      	cmp	r3, r2
 801d00c:	bfb8      	it	lt
 801d00e:	4613      	movlt	r3, r2
 801d010:	b21b      	sxth	r3, r3
 801d012:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801d014:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d018:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801d01c:	4293      	cmp	r3, r2
 801d01e:	bfb8      	it	lt
 801d020:	4613      	movlt	r3, r2
 801d022:	b21b      	sxth	r3, r3
 801d024:	873b      	strh	r3, [r7, #56]	; 0x38

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	689a      	ldr	r2, [r3, #8]
 801d02a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d02e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d032:	4618      	mov	r0, r3
 801d034:	f003 fcbe 	bl	80209b4 <_lv_area_intersect>
 801d038:	4603      	mov	r3, r0
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	f000 80ac 	beq.w	801d198 <draw_shadow+0xdd6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d044:	b21a      	sxth	r2, r3
 801d046:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d04a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d04e:	4618      	mov	r0, r3
 801d050:	f003 fe94 	bl	8020d7c <_lv_area_is_in>
 801d054:	4603      	mov	r3, r0
 801d056:	f083 0301 	eor.w	r3, r3, #1
 801d05a:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	f000 809b 	beq.w	801d198 <draw_shadow+0xdd6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d066:	4618      	mov	r0, r3
 801d068:	f7fe fba1 	bl	801b7ae <lv_area_get_width>
 801d06c:	4603      	mov	r3, r0
 801d06e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        sh_buf_tmp = sh_buf;
 801d072:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d076:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801d07a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d07e:	3b01      	subs	r3, #1
 801d080:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d084:	fb02 f303 	mul.w	r3, r2, r3
 801d088:	461a      	mov	r2, r3
 801d08a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d08e:	4413      	add	r3, r2
 801d090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801d094:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d098:	461a      	mov	r2, r3
 801d09a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801d09e:	4619      	mov	r1, r3
 801d0a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d0a4:	1acb      	subs	r3, r1, r3
 801d0a6:	3301      	adds	r3, #1
 801d0a8:	1ad3      	subs	r3, r2, r3
 801d0aa:	461a      	mov	r2, r3
 801d0ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d0b0:	4413      	add	r3, r2
 801d0b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d0b6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d010      	beq.n	801d0e0 <draw_shadow+0xd1e>
 801d0be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d0c2:	b21a      	sxth	r2, r3
 801d0c4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d0c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	f003 fef3 	bl	8020eb8 <_lv_area_is_out>
 801d0d2:	4603      	mov	r3, r0
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d003      	beq.n	801d0e0 <draw_shadow+0xd1e>
 801d0d8:	2301      	movs	r3, #1
 801d0da:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d0de:	e003      	b.n	801d0e8 <draw_shadow+0xd26>
        else simple_sub = simple;
 801d0e0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d0e4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801d0e8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d002      	beq.n	801d0f6 <draw_shadow+0xd34>
 801d0f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d0f4:	e001      	b.n	801d0fa <draw_shadow+0xd38>
 801d0f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d0fa:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801d0fc:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801d100:	2b00      	cmp	r3, #0
 801d102:	dd49      	ble.n	801d198 <draw_shadow+0xdd6>
            blend_area.x1 = clip_area_sub.x1;
 801d104:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d108:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d10a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d10e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d110:	2302      	movs	r3, #2
 801d112:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d116:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d118:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d11c:	e036      	b.n	801d18c <draw_shadow+0xdca>
                blend_area.y1 = y;
 801d11e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d122:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d124:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d128:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d12a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d12e:	f083 0301 	eor.w	r3, r3, #1
 801d132:	b2db      	uxtb	r3, r3
 801d134:	2b00      	cmp	r3, #0
 801d136:	d01c      	beq.n	801d172 <draw_shadow+0xdb0>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801d138:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801d13c:	461a      	mov	r2, r3
 801d13e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d142:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d146:	f005 f8e3 	bl	8022310 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d14a:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d14e:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801d152:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d156:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d15a:	f7f4 fce7 	bl	8011b2c <lv_draw_mask_apply>
 801d15e:	4603      	mov	r3, r0
 801d160:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d164:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d168:	2b01      	cmp	r3, #1
 801d16a:	d102      	bne.n	801d172 <draw_shadow+0xdb0>
 801d16c:	2302      	movs	r3, #2
 801d16e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d172:	f107 0314 	add.w	r3, r7, #20
 801d176:	4619      	mov	r1, r3
 801d178:	68f8      	ldr	r0, [r7, #12]
 801d17a:	f7fa f8a5 	bl	80172c8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d17e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d182:	b29b      	uxth	r3, r3
 801d184:	3301      	adds	r3, #1
 801d186:	b29b      	uxth	r3, r3
 801d188:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d18c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d190:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d194:	429a      	cmp	r2, r3
 801d196:	ddc2      	ble.n	801d11e <draw_shadow+0xd5c>
            }
        }
    }

    /*Mirror the shadow corner buffer horizontally*/
    sh_buf_tmp = sh_buf ;
 801d198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d19c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801d1a0:	2300      	movs	r3, #0
 801d1a2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d1a6:	e047      	b.n	801d238 <draw_shadow+0xe76>
        int32_t x;
        lv_opa_t * start = sh_buf_tmp;
 801d1a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d1ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 801d1b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d1b4:	3b01      	subs	r3, #1
 801d1b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d1ba:	4413      	add	r3, r2
 801d1bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d1c6:	e01e      	b.n	801d206 <draw_shadow+0xe44>
            lv_opa_t tmp = *start;
 801d1c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d1cc:	781b      	ldrb	r3, [r3, #0]
 801d1ce:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
            *start = *end;
 801d1d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d1d6:	781a      	ldrb	r2, [r3, #0]
 801d1d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d1dc:	701a      	strb	r2, [r3, #0]
            *end = tmp;
 801d1de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d1e2:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 801d1e6:	701a      	strb	r2, [r3, #0]

            start++;
 801d1e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d1ec:	3301      	adds	r3, #1
 801d1ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            end--;
 801d1f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801d1f6:	3b01      	subs	r3, #1
 801d1f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801d1fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d200:	3301      	adds	r3, #1
 801d202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801d206:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	da00      	bge.n	801d210 <draw_shadow+0xe4e>
 801d20e:	3301      	adds	r3, #1
 801d210:	105b      	asrs	r3, r3, #1
 801d212:	461a      	mov	r2, r3
 801d214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d218:	4293      	cmp	r3, r2
 801d21a:	dbd5      	blt.n	801d1c8 <draw_shadow+0xe06>
        }
        sh_buf_tmp += corner_size;
 801d21c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d220:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d224:	4413      	add	r3, r2
 801d226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801d22a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d22e:	b29b      	uxth	r3, r3
 801d230:	3301      	adds	r3, #1
 801d232:	b29b      	uxth	r3, r3
 801d234:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d238:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d23c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d240:	429a      	cmp	r2, r3
 801d242:	dcb1      	bgt.n	801d1a8 <draw_shadow+0xde6>
    }

    /*Left side*/
    blend_area.x1 = shadow_area.x1;
 801d244:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d248:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801d24a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d24e:	b29a      	uxth	r2, r3
 801d250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d254:	b29b      	uxth	r3, r3
 801d256:	4413      	add	r3, r2
 801d258:	b29b      	uxth	r3, r3
 801d25a:	3b01      	subs	r3, #1
 801d25c:	b29b      	uxth	r3, r3
 801d25e:	b21b      	sxth	r3, r3
 801d260:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801d262:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d266:	b29a      	uxth	r2, r3
 801d268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d26c:	b29b      	uxth	r3, r3
 801d26e:	4413      	add	r3, r2
 801d270:	b29b      	uxth	r3, r3
 801d272:	b21b      	sxth	r3, r3
 801d274:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801d276:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d27a:	b29a      	uxth	r2, r3
 801d27c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d280:	b29b      	uxth	r3, r3
 801d282:	1ad3      	subs	r3, r2, r3
 801d284:	b29b      	uxth	r3, r3
 801d286:	b21b      	sxth	r3, r3
 801d288:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801d28a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d28e:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d292:	429a      	cmp	r2, r3
 801d294:	db02      	blt.n	801d29c <draw_shadow+0xeda>
 801d296:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d29a:	e004      	b.n	801d2a6 <draw_shadow+0xee4>
 801d29c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801d2a0:	3301      	adds	r3, #1
 801d2a2:	b29b      	uxth	r3, r3
 801d2a4:	b21b      	sxth	r3, r3
 801d2a6:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801d2a8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d2ac:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d2b0:	4293      	cmp	r3, r2
 801d2b2:	bfb8      	it	lt
 801d2b4:	4613      	movlt	r3, r2
 801d2b6:	b21b      	sxth	r3, r3
 801d2b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d2ba:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d2be:	3b01      	subs	r3, #1
 801d2c0:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d2c4:	4293      	cmp	r3, r2
 801d2c6:	bfa8      	it	ge
 801d2c8:	4613      	movge	r3, r2
 801d2ca:	b21b      	sxth	r3, r3
 801d2cc:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	689a      	ldr	r2, [r3, #8]
 801d2d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d2d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f003 fb6a 	bl	80209b4 <_lv_area_intersect>
 801d2e0:	4603      	mov	r3, r0
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	f000 80a7 	beq.w	801d436 <draw_shadow+0x1074>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d2e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d2ec:	b21a      	sxth	r2, r3
 801d2ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d2f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f003 fd40 	bl	8020d7c <_lv_area_is_in>
 801d2fc:	4603      	mov	r3, r0
 801d2fe:	f083 0301 	eor.w	r3, r3, #1
 801d302:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d304:	2b00      	cmp	r3, #0
 801d306:	f000 8096 	beq.w	801d436 <draw_shadow+0x1074>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d30a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d30e:	4618      	mov	r0, r3
 801d310:	f7fe fa4d 	bl	801b7ae <lv_area_get_width>
 801d314:	4603      	mov	r3, r0
 801d316:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        sh_buf_tmp = sh_buf;
 801d31a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d31e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801d322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d326:	3b01      	subs	r3, #1
 801d328:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d32c:	fb02 f303 	mul.w	r3, r2, r3
 801d330:	461a      	mov	r2, r3
 801d332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d336:	4413      	add	r3, r2
 801d338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d33c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d340:	461a      	mov	r2, r3
 801d342:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d346:	1ad3      	subs	r3, r2, r3
 801d348:	461a      	mov	r2, r3
 801d34a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d34e:	4413      	add	r3, r2
 801d350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d354:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d010      	beq.n	801d37e <draw_shadow+0xfbc>
 801d35c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d360:	b21a      	sxth	r2, r3
 801d362:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d36a:	4618      	mov	r0, r3
 801d36c:	f003 fda4 	bl	8020eb8 <_lv_area_is_out>
 801d370:	4603      	mov	r3, r0
 801d372:	2b00      	cmp	r3, #0
 801d374:	d003      	beq.n	801d37e <draw_shadow+0xfbc>
 801d376:	2301      	movs	r3, #1
 801d378:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d37c:	e003      	b.n	801d386 <draw_shadow+0xfc4>
        else simple_sub = simple;
 801d37e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d382:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801d386:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d002      	beq.n	801d394 <draw_shadow+0xfd2>
 801d38e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d392:	e001      	b.n	801d398 <draw_shadow+0xfd6>
 801d394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d398:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801d39a:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	dd49      	ble.n	801d436 <draw_shadow+0x1074>
            blend_area.x1 = clip_area_sub.x1;
 801d3a2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d3a6:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d3a8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d3ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d3ae:	2302      	movs	r3, #2
 801d3b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d3b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d3b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d3ba:	e036      	b.n	801d42a <draw_shadow+0x1068>
                blend_area.y1 = y;
 801d3bc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d3c0:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d3c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d3c6:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d3c8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d3cc:	f083 0301 	eor.w	r3, r3, #1
 801d3d0:	b2db      	uxtb	r3, r3
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d01c      	beq.n	801d410 <draw_shadow+0x104e>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801d3d6:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d3da:	461a      	mov	r2, r3
 801d3dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d3e0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d3e4:	f004 ff94 	bl	8022310 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d3e8:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d3ec:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801d3f0:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d3f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d3f8:	f7f4 fb98 	bl	8011b2c <lv_draw_mask_apply>
 801d3fc:	4603      	mov	r3, r0
 801d3fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d402:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d406:	2b01      	cmp	r3, #1
 801d408:	d102      	bne.n	801d410 <draw_shadow+0x104e>
 801d40a:	2302      	movs	r3, #2
 801d40c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d410:	f107 0314 	add.w	r3, r7, #20
 801d414:	4619      	mov	r1, r3
 801d416:	68f8      	ldr	r0, [r7, #12]
 801d418:	f7f9 ff56 	bl	80172c8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d41c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d420:	b29b      	uxth	r3, r3
 801d422:	3301      	adds	r3, #1
 801d424:	b29b      	uxth	r3, r3
 801d426:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d42a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d42e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d432:	429a      	cmp	r2, r3
 801d434:	ddc2      	ble.n	801d3bc <draw_shadow+0xffa>
            }
        }
    }

    /*Top left corner*/
    blend_area.x1 = shadow_area.x1;
 801d436:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d43a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801d43c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d440:	b29a      	uxth	r2, r3
 801d442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d446:	b29b      	uxth	r3, r3
 801d448:	4413      	add	r3, r2
 801d44a:	b29b      	uxth	r3, r3
 801d44c:	3b01      	subs	r3, #1
 801d44e:	b29b      	uxth	r3, r3
 801d450:	b21b      	sxth	r3, r3
 801d452:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801d454:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d458:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801d45a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d45e:	b29a      	uxth	r2, r3
 801d460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d464:	b29b      	uxth	r3, r3
 801d466:	4413      	add	r3, r2
 801d468:	b29b      	uxth	r3, r3
 801d46a:	3b01      	subs	r3, #1
 801d46c:	b29b      	uxth	r3, r3
 801d46e:	b21b      	sxth	r3, r3
 801d470:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d472:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d476:	3b01      	subs	r3, #1
 801d478:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d47c:	4293      	cmp	r3, r2
 801d47e:	bfa8      	it	ge
 801d480:	4613      	movge	r3, r2
 801d482:	b21b      	sxth	r3, r3
 801d484:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801d486:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d48a:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801d48e:	4293      	cmp	r3, r2
 801d490:	bfa8      	it	ge
 801d492:	4613      	movge	r3, r2
 801d494:	b21b      	sxth	r3, r3
 801d496:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	689a      	ldr	r2, [r3, #8]
 801d49c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d4a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f003 fa85 	bl	80209b4 <_lv_area_intersect>
 801d4aa:	4603      	mov	r3, r0
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	f000 80ae 	beq.w	801d60e <draw_shadow+0x124c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d4b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d4b6:	b21a      	sxth	r2, r3
 801d4b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d4bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d4c0:	4618      	mov	r0, r3
 801d4c2:	f003 fc5b 	bl	8020d7c <_lv_area_is_in>
 801d4c6:	4603      	mov	r3, r0
 801d4c8:	f083 0301 	eor.w	r3, r3, #1
 801d4cc:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	f000 809d 	beq.w	801d60e <draw_shadow+0x124c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d4d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d4d8:	4618      	mov	r0, r3
 801d4da:	f7fe f968 	bl	801b7ae <lv_area_get_width>
 801d4de:	4603      	mov	r3, r0
 801d4e0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        sh_buf_tmp = sh_buf;
 801d4e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d4e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801d4ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d4f0:	461a      	mov	r2, r3
 801d4f2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801d4f6:	1ad3      	subs	r3, r2, r3
 801d4f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d4fc:	fb02 f303 	mul.w	r3, r2, r3
 801d500:	461a      	mov	r2, r3
 801d502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d506:	4413      	add	r3, r2
 801d508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d50c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d510:	461a      	mov	r2, r3
 801d512:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d516:	1ad3      	subs	r3, r2, r3
 801d518:	461a      	mov	r2, r3
 801d51a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d51e:	4413      	add	r3, r2
 801d520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d524:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d010      	beq.n	801d54e <draw_shadow+0x118c>
 801d52c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d530:	b21a      	sxth	r2, r3
 801d532:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d53a:	4618      	mov	r0, r3
 801d53c:	f003 fcbc 	bl	8020eb8 <_lv_area_is_out>
 801d540:	4603      	mov	r3, r0
 801d542:	2b00      	cmp	r3, #0
 801d544:	d003      	beq.n	801d54e <draw_shadow+0x118c>
 801d546:	2301      	movs	r3, #1
 801d548:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d54c:	e003      	b.n	801d556 <draw_shadow+0x1194>
        else simple_sub = simple;
 801d54e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d552:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801d556:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d55a:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801d55c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d560:	2b00      	cmp	r3, #0
 801d562:	dd54      	ble.n	801d60e <draw_shadow+0x124c>
            blend_area.x1 = clip_area_sub.x1;
 801d564:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d568:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d56a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d56e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d570:	2302      	movs	r3, #2
 801d572:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d576:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d578:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d57c:	e041      	b.n	801d602 <draw_shadow+0x1240>
                blend_area.y1 = y;
 801d57e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d582:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d584:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d588:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d58a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d58e:	f083 0301 	eor.w	r3, r3, #1
 801d592:	b2db      	uxtb	r3, r3
 801d594:	2b00      	cmp	r3, #0
 801d596:	d01d      	beq.n	801d5d4 <draw_shadow+0x1212>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801d598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d59c:	461a      	mov	r2, r3
 801d59e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d5a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d5a6:	f004 feb3 	bl	8022310 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d5aa:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d5ae:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801d5b2:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d5b6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d5ba:	f7f4 fab7 	bl	8011b2c <lv_draw_mask_apply>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d5c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d5c8:	2b01      	cmp	r3, #1
 801d5ca:	d106      	bne.n	801d5da <draw_shadow+0x1218>
 801d5cc:	2302      	movs	r3, #2
 801d5ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801d5d2:	e002      	b.n	801d5da <draw_shadow+0x1218>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801d5d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d5d8:	623b      	str	r3, [r7, #32]
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d5da:	f107 0314 	add.w	r3, r7, #20
 801d5de:	4619      	mov	r1, r3
 801d5e0:	68f8      	ldr	r0, [r7, #12]
 801d5e2:	f7f9 fe71 	bl	80172c8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801d5e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d5ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d5ee:	4413      	add	r3, r2
 801d5f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d5f4:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d5f8:	b29b      	uxth	r3, r3
 801d5fa:	3301      	adds	r3, #1
 801d5fc:	b29b      	uxth	r3, r3
 801d5fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d602:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d606:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d60a:	429a      	cmp	r2, r3
 801d60c:	ddb7      	ble.n	801d57e <draw_shadow+0x11bc>
        }
    }

    /*Bottom left corner.
     *Almost the same as bottom right just read the lines of `sh_buf` from then end*/
    blend_area.x1 = shadow_area.x1 ;
 801d60e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d612:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801d614:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d618:	b29a      	uxth	r2, r3
 801d61a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d61e:	b29b      	uxth	r3, r3
 801d620:	4413      	add	r3, r2
 801d622:	b29b      	uxth	r3, r3
 801d624:	3b01      	subs	r3, #1
 801d626:	b29b      	uxth	r3, r3
 801d628:	b21b      	sxth	r3, r3
 801d62a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801d62c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d630:	b29a      	uxth	r2, r3
 801d632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d636:	b29b      	uxth	r3, r3
 801d638:	1ad3      	subs	r3, r2, r3
 801d63a:	b29b      	uxth	r3, r3
 801d63c:	3301      	adds	r3, #1
 801d63e:	b29b      	uxth	r3, r3
 801d640:	b21b      	sxth	r3, r3
 801d642:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801d644:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d648:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801d64a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801d64e:	3301      	adds	r3, #1
 801d650:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801d654:	4293      	cmp	r3, r2
 801d656:	bfb8      	it	lt
 801d658:	4613      	movlt	r3, r2
 801d65a:	b21b      	sxth	r3, r3
 801d65c:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801d65e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801d662:	3b01      	subs	r3, #1
 801d664:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801d668:	4293      	cmp	r3, r2
 801d66a:	bfa8      	it	ge
 801d66c:	4613      	movge	r3, r2
 801d66e:	b21b      	sxth	r3, r3
 801d670:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	689a      	ldr	r2, [r3, #8]
 801d676:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d67a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d67e:	4618      	mov	r0, r3
 801d680:	f003 f998 	bl	80209b4 <_lv_area_intersect>
 801d684:	4603      	mov	r3, r0
 801d686:	2b00      	cmp	r3, #0
 801d688:	f000 80ae 	beq.w	801d7e8 <draw_shadow+0x1426>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d68c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d690:	b21a      	sxth	r2, r3
 801d692:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d69a:	4618      	mov	r0, r3
 801d69c:	f003 fb6e 	bl	8020d7c <_lv_area_is_in>
 801d6a0:	4603      	mov	r3, r0
 801d6a2:	f083 0301 	eor.w	r3, r3, #1
 801d6a6:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	f000 809d 	beq.w	801d7e8 <draw_shadow+0x1426>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d6ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f7fe f87b 	bl	801b7ae <lv_area_get_width>
 801d6b8:	4603      	mov	r3, r0
 801d6ba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        sh_buf_tmp = sh_buf;
 801d6be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d6c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801d6c6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801d6ca:	461a      	mov	r2, r3
 801d6cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d6d0:	1ad3      	subs	r3, r2, r3
 801d6d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d6d6:	fb02 f303 	mul.w	r3, r2, r3
 801d6da:	461a      	mov	r2, r3
 801d6dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d6e0:	4413      	add	r3, r2
 801d6e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801d6e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d6ea:	461a      	mov	r2, r3
 801d6ec:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801d6f0:	1ad3      	subs	r3, r2, r3
 801d6f2:	461a      	mov	r2, r3
 801d6f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d6f8:	4413      	add	r3, r2
 801d6fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801d6fe:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d702:	2b00      	cmp	r3, #0
 801d704:	d010      	beq.n	801d728 <draw_shadow+0x1366>
 801d706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d70a:	b21a      	sxth	r2, r3
 801d70c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d710:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d714:	4618      	mov	r0, r3
 801d716:	f003 fbcf 	bl	8020eb8 <_lv_area_is_out>
 801d71a:	4603      	mov	r3, r0
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d003      	beq.n	801d728 <draw_shadow+0x1366>
 801d720:	2301      	movs	r3, #1
 801d722:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801d726:	e003      	b.n	801d730 <draw_shadow+0x136e>
        else simple_sub = simple;
 801d728:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d72c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801d730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d734:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801d736:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	dd54      	ble.n	801d7e8 <draw_shadow+0x1426>
            blend_area.x1 = clip_area_sub.x1;
 801d73e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d742:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d744:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d748:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801d74a:	2302      	movs	r3, #2
 801d74c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801d750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d752:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d756:	e041      	b.n	801d7dc <draw_shadow+0x141a>
                blend_area.y1 = y;
 801d758:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d75c:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d75e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d762:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801d764:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801d768:	f083 0301 	eor.w	r3, r3, #1
 801d76c:	b2db      	uxtb	r3, r3
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d01d      	beq.n	801d7ae <draw_shadow+0x13ec>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801d772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d776:	461a      	mov	r2, r3
 801d778:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801d77c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d780:	f004 fdc6 	bl	8022310 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d784:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d788:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801d78c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d790:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d794:	f7f4 f9ca 	bl	8011b2c <lv_draw_mask_apply>
 801d798:	4603      	mov	r3, r0
 801d79a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d79e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d7a2:	2b01      	cmp	r3, #1
 801d7a4:	d106      	bne.n	801d7b4 <draw_shadow+0x13f2>
 801d7a6:	2302      	movs	r3, #2
 801d7a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801d7ac:	e002      	b.n	801d7b4 <draw_shadow+0x13f2>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801d7ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d7b2:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d7b4:	f107 0314 	add.w	r3, r7, #20
 801d7b8:	4619      	mov	r1, r3
 801d7ba:	68f8      	ldr	r0, [r7, #12]
 801d7bc:	f7f9 fd84 	bl	80172c8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801d7c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d7c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801d7c8:	4413      	add	r3, r2
 801d7ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801d7ce:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d7d2:	b29b      	uxth	r3, r3
 801d7d4:	3b01      	subs	r3, #1
 801d7d6:	b29b      	uxth	r3, r3
 801d7d8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d7dc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d7e0:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d7e4:	429a      	cmp	r2, r3
 801d7e6:	dab7      	bge.n	801d758 <draw_shadow+0x1396>
            }
        }
    }

    /*Draw the center rectangle.*/
    blend_area.x1 = shadow_area.x1 + corner_size ;
 801d7e8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801d7ec:	b29a      	uxth	r2, r3
 801d7ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d7f2:	b29b      	uxth	r3, r3
 801d7f4:	4413      	add	r3, r2
 801d7f6:	b29b      	uxth	r3, r3
 801d7f8:	b21b      	sxth	r3, r3
 801d7fa:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801d7fc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801d800:	b29a      	uxth	r2, r3
 801d802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d806:	b29b      	uxth	r3, r3
 801d808:	1ad3      	subs	r3, r2, r3
 801d80a:	b29b      	uxth	r3, r3
 801d80c:	b21b      	sxth	r3, r3
 801d80e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801d810:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801d814:	b29a      	uxth	r2, r3
 801d816:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d81a:	b29b      	uxth	r3, r3
 801d81c:	4413      	add	r3, r2
 801d81e:	b29b      	uxth	r3, r3
 801d820:	b21b      	sxth	r3, r3
 801d822:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801d824:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801d828:	b29a      	uxth	r2, r3
 801d82a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d82e:	b29b      	uxth	r3, r3
 801d830:	1ad3      	subs	r3, r2, r3
 801d832:	b29b      	uxth	r3, r3
 801d834:	b21b      	sxth	r3, r3
 801d836:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_dsc.mask_buf = mask_buf;
 801d838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d83c:	623b      	str	r3, [r7, #32]

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	689a      	ldr	r2, [r3, #8]
 801d842:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801d846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d84a:	4618      	mov	r0, r3
 801d84c:	f003 f8b2 	bl	80209b4 <_lv_area_intersect>
 801d850:	4603      	mov	r3, r0
 801d852:	2b00      	cmp	r3, #0
 801d854:	d052      	beq.n	801d8fc <draw_shadow+0x153a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801d856:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801d85a:	b21a      	sxth	r2, r3
 801d85c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801d860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d864:	4618      	mov	r0, r3
 801d866:	f003 fa89 	bl	8020d7c <_lv_area_is_in>
 801d86a:	4603      	mov	r3, r0
 801d86c:	f083 0301 	eor.w	r3, r3, #1
 801d870:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801d872:	2b00      	cmp	r3, #0
 801d874:	d042      	beq.n	801d8fc <draw_shadow+0x153a>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801d876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d87a:	4618      	mov	r0, r3
 801d87c:	f7fd ff97 	bl	801b7ae <lv_area_get_width>
 801d880:	4603      	mov	r3, r0
 801d882:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        if(w > 0) {
 801d886:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	dd36      	ble.n	801d8fc <draw_shadow+0x153a>
            blend_area.x1 = clip_area_sub.x1;
 801d88e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d892:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801d894:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d898:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d89a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801d89c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d8a0:	e026      	b.n	801d8f0 <draw_shadow+0x152e>
                blend_area.y1 = y;
 801d8a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d8a6:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801d8a8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d8ac:	87fb      	strh	r3, [r7, #62]	; 0x3e

                lv_memset_ff(mask_buf, w);
 801d8ae:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d8b2:	4619      	mov	r1, r3
 801d8b4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d8b8:	f005 f851 	bl	802295e <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801d8bc:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801d8c0:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801d8c4:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d8c8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d8cc:	f7f4 f92e 	bl	8011b2c <lv_draw_mask_apply>
 801d8d0:	4603      	mov	r3, r0
 801d8d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d8d6:	f107 0314 	add.w	r3, r7, #20
 801d8da:	4619      	mov	r1, r3
 801d8dc:	68f8      	ldr	r0, [r7, #12]
 801d8de:	f7f9 fcf3 	bl	80172c8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801d8e2:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801d8e6:	b29b      	uxth	r3, r3
 801d8e8:	3301      	adds	r3, #1
 801d8ea:	b29b      	uxth	r3, r3
 801d8ec:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801d8f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d8f4:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801d8f8:	429a      	cmp	r2, r3
 801d8fa:	ddd2      	ble.n	801d8a2 <draw_shadow+0x14e0>
            }
        }
    }

    if(!simple) {
 801d8fc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801d900:	f083 0301 	eor.w	r3, r3, #1
 801d904:	b2db      	uxtb	r3, r3
 801d906:	2b00      	cmp	r3, #0
 801d908:	d009      	beq.n	801d91e <draw_shadow+0x155c>
        lv_draw_mask_free_param(&mask_rout_param);
 801d90a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d90e:	4618      	mov	r0, r3
 801d910:	f7f4 f9a0 	bl	8011c54 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 801d914:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 801d918:	4618      	mov	r0, r3
 801d91a:	f7f4 f94b 	bl	8011bb4 <lv_draw_mask_remove_id>
    }
    lv_mem_buf_release(sh_buf);
 801d91e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801d922:	f004 fc9d 	bl	8022260 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 801d926:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801d92a:	f004 fc99 	bl	8022260 <lv_mem_buf_release>
 801d92e:	e006      	b.n	801d93e <draw_shadow+0x157c>
    if(dsc->shadow_width == 0) return;
 801d930:	bf00      	nop
 801d932:	e004      	b.n	801d93e <draw_shadow+0x157c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801d934:	bf00      	nop
 801d936:	e002      	b.n	801d93e <draw_shadow+0x157c>
        return;
 801d938:	bf00      	nop
 801d93a:	e000      	b.n	801d93e <draw_shadow+0x157c>
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801d93c:	bf00      	nop
}
 801d93e:	37cc      	adds	r7, #204	; 0xcc
 801d940:	46bd      	mov	sp, r7
 801d942:	bd90      	pop	{r4, r7, pc}

0801d944 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 801d944:	b590      	push	{r4, r7, lr}
 801d946:	b09d      	sub	sp, #116	; 0x74
 801d948:	af02      	add	r7, sp, #8
 801d94a:	60f8      	str	r0, [r7, #12]
 801d94c:	60b9      	str	r1, [r7, #8]
 801d94e:	4611      	mov	r1, r2
 801d950:	461a      	mov	r2, r3
 801d952:	460b      	mov	r3, r1
 801d954:	80fb      	strh	r3, [r7, #6]
 801d956:	4613      	mov	r3, r2
 801d958:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 801d95a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d95e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 801d960:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d966:	4413      	add	r3, r2
 801d968:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 801d96a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d96e:	68f9      	ldr	r1, [r7, #12]
 801d970:	4618      	mov	r0, r3
 801d972:	f7fd fefd 	bl	801b770 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 801d976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	da00      	bge.n	801d980 <shadow_draw_corner_buf+0x3c>
 801d97e:	3301      	adds	r3, #1
 801d980:	105b      	asrs	r3, r3, #1
 801d982:	b21b      	sxth	r3, r3
 801d984:	b29a      	uxth	r2, r3
 801d986:	88bb      	ldrh	r3, [r7, #4]
 801d988:	4413      	add	r3, r2
 801d98a:	b29a      	uxth	r2, r3
 801d98c:	88fb      	ldrh	r3, [r7, #6]
 801d98e:	f003 0301 	and.w	r3, r3, #1
 801d992:	2b00      	cmp	r3, #0
 801d994:	bf0c      	ite	eq
 801d996:	2301      	moveq	r3, #1
 801d998:	2300      	movne	r3, #0
 801d99a:	b2db      	uxtb	r3, r3
 801d99c:	b29b      	uxth	r3, r3
 801d99e:	1ad3      	subs	r3, r2, r3
 801d9a0:	b29b      	uxth	r3, r3
 801d9a2:	3b01      	subs	r3, #1
 801d9a4:	b29b      	uxth	r3, r3
 801d9a6:	b21b      	sxth	r3, r3
 801d9a8:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y1 = sw / 2 + 1;
 801d9aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	da00      	bge.n	801d9b4 <shadow_draw_corner_buf+0x70>
 801d9b2:	3301      	adds	r3, #1
 801d9b4:	105b      	asrs	r3, r3, #1
 801d9b6:	b21b      	sxth	r3, r3
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	3301      	adds	r3, #1
 801d9bc:	b29b      	uxth	r3, r3
 801d9be:	b21b      	sxth	r3, r3
 801d9c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 801d9c2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801d9c6:	b29c      	uxth	r4, r3
 801d9c8:	68f8      	ldr	r0, [r7, #12]
 801d9ca:	f7fd fef0 	bl	801b7ae <lv_area_get_width>
 801d9ce:	4603      	mov	r3, r0
 801d9d0:	b29b      	uxth	r3, r3
 801d9d2:	1ae3      	subs	r3, r4, r3
 801d9d4:	b29b      	uxth	r3, r3
 801d9d6:	b21b      	sxth	r3, r3
 801d9d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 801d9da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801d9de:	b29c      	uxth	r4, r3
 801d9e0:	68f8      	ldr	r0, [r7, #12]
 801d9e2:	f7fd fefb 	bl	801b7dc <lv_area_get_height>
 801d9e6:	4603      	mov	r3, r0
 801d9e8:	b29b      	uxth	r3, r3
 801d9ea:	4423      	add	r3, r4
 801d9ec:	b29b      	uxth	r3, r3
 801d9ee:	b21b      	sxth	r3, r3
 801d9f0:	867b      	strh	r3, [r7, #50]	; 0x32

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 801d9f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801d9f6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801d9fa:	f107 0014 	add.w	r0, r7, #20
 801d9fe:	2300      	movs	r3, #0
 801da00:	f7f4 fc2e 	bl	8012260 <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 801da04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801da06:	2b01      	cmp	r3, #1
 801da08:	d102      	bne.n	801da10 <shadow_draw_corner_buf+0xcc>
 801da0a:	2301      	movs	r3, #1
 801da0c:	80fb      	strh	r3, [r7, #6]
 801da0e:	e002      	b.n	801da16 <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 801da10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801da12:	105b      	asrs	r3, r3, #1
 801da14:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 801da16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801da18:	4618      	mov	r0, r3
 801da1a:	f004 fb75 	bl	8022108 <lv_mem_buf_get>
 801da1e:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 801da20:	68bb      	ldr	r3, [r7, #8]
 801da22:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801da24:	2300      	movs	r3, #0
 801da26:	667b      	str	r3, [r7, #100]	; 0x64
 801da28:	e062      	b.n	801daf0 <shadow_draw_corner_buf+0x1ac>
        lv_memset_ff(mask_line, size);
 801da2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801da2c:	4619      	mov	r1, r3
 801da2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801da30:	f004 ff95 	bl	802295e <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 801da34:	697c      	ldr	r4, [r7, #20]
 801da36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801da38:	b21a      	sxth	r2, r3
 801da3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801da3c:	b219      	sxth	r1, r3
 801da3e:	f107 0314 	add.w	r3, r7, #20
 801da42:	9300      	str	r3, [sp, #0]
 801da44:	460b      	mov	r3, r1
 801da46:	2100      	movs	r1, #0
 801da48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801da4a:	47a0      	blx	r4
 801da4c:	4603      	mov	r3, r0
 801da4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801da52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801da56:	2b00      	cmp	r3, #0
 801da58:	d106      	bne.n	801da68 <shadow_draw_corner_buf+0x124>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 801da5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801da5c:	005b      	lsls	r3, r3, #1
 801da5e:	4619      	mov	r1, r3
 801da60:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801da62:	f004 fefb 	bl	802285c <lv_memset_00>
 801da66:	e03b      	b.n	801dae0 <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 801da68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da6a:	781b      	ldrb	r3, [r3, #0]
 801da6c:	019a      	lsls	r2, r3, #6
 801da6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801da72:	fb92 f3f3 	sdiv	r3, r2, r3
 801da76:	b29a      	uxth	r2, r3
 801da78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da7a:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801da7c:	2301      	movs	r3, #1
 801da7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801da80:	e02a      	b.n	801dad8 <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 801da82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801da84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801da86:	4413      	add	r3, r2
 801da88:	781a      	ldrb	r2, [r3, #0]
 801da8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801da8c:	3b01      	subs	r3, #1
 801da8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801da90:	440b      	add	r3, r1
 801da92:	781b      	ldrb	r3, [r3, #0]
 801da94:	429a      	cmp	r2, r3
 801da96:	d10d      	bne.n	801dab4 <shadow_draw_corner_buf+0x170>
 801da98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801da9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801da9e:	4413      	add	r3, r2
 801daa0:	005b      	lsls	r3, r3, #1
 801daa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801daa4:	441a      	add	r2, r3
 801daa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801daa8:	005b      	lsls	r3, r3, #1
 801daaa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801daac:	440b      	add	r3, r1
 801daae:	8812      	ldrh	r2, [r2, #0]
 801dab0:	801a      	strh	r2, [r3, #0]
 801dab2:	e00e      	b.n	801dad2 <shadow_draw_corner_buf+0x18e>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801dab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dab8:	4413      	add	r3, r2
 801daba:	781b      	ldrb	r3, [r3, #0]
 801dabc:	019a      	lsls	r2, r3, #6
 801dabe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dac2:	fb92 f1f3 	sdiv	r1, r2, r3
 801dac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dac8:	005b      	lsls	r3, r3, #1
 801daca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801dacc:	4413      	add	r3, r2
 801dace:	b28a      	uxth	r2, r1
 801dad0:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801dad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dad4:	3301      	adds	r3, #1
 801dad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801dad8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801dada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dadc:	429a      	cmp	r2, r3
 801dade:	dbd0      	blt.n	801da82 <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 801dae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dae2:	005b      	lsls	r3, r3, #1
 801dae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801dae6:	4413      	add	r3, r2
 801dae8:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801daea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801daec:	3301      	adds	r3, #1
 801daee:	667b      	str	r3, [r7, #100]	; 0x64
 801daf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801daf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801daf4:	429a      	cmp	r2, r3
 801daf6:	db98      	blt.n	801da2a <shadow_draw_corner_buf+0xe6>
    }
    lv_mem_buf_release(mask_line);
 801daf8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801dafa:	f004 fbb1 	bl	8022260 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_param);
 801dafe:	f107 0314 	add.w	r3, r7, #20
 801db02:	4618      	mov	r0, r3
 801db04:	f7f4 f8a6 	bl	8011c54 <lv_draw_mask_free_param>

    if(sw == 1) {
 801db08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801db0c:	2b01      	cmp	r3, #1
 801db0e:	d11a      	bne.n	801db46 <shadow_draw_corner_buf+0x202>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801db10:	68bb      	ldr	r3, [r7, #8]
 801db12:	63bb      	str	r3, [r7, #56]	; 0x38
        for(i = 0; i < size * size; i++) {
 801db14:	2300      	movs	r3, #0
 801db16:	65bb      	str	r3, [r7, #88]	; 0x58
 801db18:	e00e      	b.n	801db38 <shadow_draw_corner_buf+0x1f4>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 801db1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801db1c:	005b      	lsls	r3, r3, #1
 801db1e:	68ba      	ldr	r2, [r7, #8]
 801db20:	4413      	add	r3, r2
 801db22:	881b      	ldrh	r3, [r3, #0]
 801db24:	099b      	lsrs	r3, r3, #6
 801db26:	b299      	uxth	r1, r3
 801db28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801db2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801db2c:	4413      	add	r3, r2
 801db2e:	b2ca      	uxtb	r2, r1
 801db30:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 801db32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801db34:	3301      	adds	r3, #1
 801db36:	65bb      	str	r3, [r7, #88]	; 0x58
 801db38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db3a:	fb03 f303 	mul.w	r3, r3, r3
 801db3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801db40:	429a      	cmp	r2, r3
 801db42:	dbea      	blt.n	801db1a <shadow_draw_corner_buf+0x1d6>
        }
        return;
 801db44:	e070      	b.n	801dc28 <shadow_draw_corner_buf+0x2e4>
    }

    shadow_blur_corner(size, sw, sh_buf);
 801db46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db48:	b21b      	sxth	r3, r3
 801db4a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801db4e:	68ba      	ldr	r2, [r7, #8]
 801db50:	4618      	mov	r0, r3
 801db52:	f000 f86c 	bl	801dc2e <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 801db56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db58:	b29b      	uxth	r3, r3
 801db5a:	f003 0301 	and.w	r3, r3, #1
 801db5e:	b29a      	uxth	r2, r3
 801db60:	88fb      	ldrh	r3, [r7, #6]
 801db62:	4413      	add	r3, r2
 801db64:	b29b      	uxth	r3, r3
 801db66:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 801db68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801db6c:	2b01      	cmp	r3, #1
 801db6e:	dd43      	ble.n	801dbf8 <shadow_draw_corner_buf+0x2b4>
        uint32_t i;
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 801db70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801db74:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801db78:	fb92 f3f3 	sdiv	r3, r2, r3
 801db7c:	643b      	str	r3, [r7, #64]	; 0x40
        for(i = 0; i < (uint32_t)size * size; i++) {
 801db7e:	2300      	movs	r3, #0
 801db80:	657b      	str	r3, [r7, #84]	; 0x54
 801db82:	e02a      	b.n	801dbda <shadow_draw_corner_buf+0x296>
            if(sh_buf[i] == 0) continue;
 801db84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db86:	005b      	lsls	r3, r3, #1
 801db88:	68ba      	ldr	r2, [r7, #8]
 801db8a:	4413      	add	r3, r2
 801db8c:	881b      	ldrh	r3, [r3, #0]
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d01f      	beq.n	801dbd2 <shadow_draw_corner_buf+0x28e>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 801db92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db94:	005b      	lsls	r3, r3, #1
 801db96:	68ba      	ldr	r2, [r7, #8]
 801db98:	4413      	add	r3, r2
 801db9a:	881b      	ldrh	r3, [r3, #0]
 801db9c:	2bff      	cmp	r3, #255	; 0xff
 801db9e:	d107      	bne.n	801dbb0 <shadow_draw_corner_buf+0x26c>
 801dba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dba2:	005b      	lsls	r3, r3, #1
 801dba4:	68ba      	ldr	r2, [r7, #8]
 801dba6:	4413      	add	r3, r2
 801dba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dbaa:	b292      	uxth	r2, r2
 801dbac:	801a      	strh	r2, [r3, #0]
 801dbae:	e011      	b.n	801dbd4 <shadow_draw_corner_buf+0x290>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801dbb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbb2:	005b      	lsls	r3, r3, #1
 801dbb4:	68ba      	ldr	r2, [r7, #8]
 801dbb6:	4413      	add	r3, r2
 801dbb8:	881b      	ldrh	r3, [r3, #0]
 801dbba:	019a      	lsls	r2, r3, #6
 801dbbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dbc0:	fb92 f1f3 	sdiv	r1, r2, r3
 801dbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbc6:	005b      	lsls	r3, r3, #1
 801dbc8:	68ba      	ldr	r2, [r7, #8]
 801dbca:	4413      	add	r3, r2
 801dbcc:	b28a      	uxth	r2, r1
 801dbce:	801a      	strh	r2, [r3, #0]
 801dbd0:	e000      	b.n	801dbd4 <shadow_draw_corner_buf+0x290>
            if(sh_buf[i] == 0) continue;
 801dbd2:	bf00      	nop
        for(i = 0; i < (uint32_t)size * size; i++) {
 801dbd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbd6:	3301      	adds	r3, #1
 801dbd8:	657b      	str	r3, [r7, #84]	; 0x54
 801dbda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dbdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dbde:	fb02 f303 	mul.w	r3, r2, r3
 801dbe2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801dbe4:	429a      	cmp	r2, r3
 801dbe6:	d3cd      	bcc.n	801db84 <shadow_draw_corner_buf+0x240>
        }

        shadow_blur_corner(size, sw, sh_buf);
 801dbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dbea:	b21b      	sxth	r3, r3
 801dbec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801dbf0:	68ba      	ldr	r2, [r7, #8]
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	f000 f81b 	bl	801dc2e <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801dbf8:	68bb      	ldr	r3, [r7, #8]
 801dbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    for(x = 0; x < size * size; x++) {
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	653b      	str	r3, [r7, #80]	; 0x50
 801dc00:	e00c      	b.n	801dc1c <shadow_draw_corner_buf+0x2d8>
        res_buf[x] = sh_buf[x];
 801dc02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc04:	005b      	lsls	r3, r3, #1
 801dc06:	68ba      	ldr	r2, [r7, #8]
 801dc08:	4413      	add	r3, r2
 801dc0a:	8819      	ldrh	r1, [r3, #0]
 801dc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dc10:	4413      	add	r3, r2
 801dc12:	b2ca      	uxtb	r2, r1
 801dc14:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 801dc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc18:	3301      	adds	r3, #1
 801dc1a:	653b      	str	r3, [r7, #80]	; 0x50
 801dc1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc1e:	fb03 f303 	mul.w	r3, r3, r3
 801dc22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dc24:	429a      	cmp	r2, r3
 801dc26:	dbec      	blt.n	801dc02 <shadow_draw_corner_buf+0x2be>
    }
#endif

}
 801dc28:	376c      	adds	r7, #108	; 0x6c
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	bd90      	pop	{r4, r7, pc}

0801dc2e <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 801dc2e:	b580      	push	{r7, lr}
 801dc30:	b092      	sub	sp, #72	; 0x48
 801dc32:	af00      	add	r7, sp, #0
 801dc34:	4603      	mov	r3, r0
 801dc36:	603a      	str	r2, [r7, #0]
 801dc38:	80fb      	strh	r3, [r7, #6]
 801dc3a:	460b      	mov	r3, r1
 801dc3c:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 801dc3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dc42:	105b      	asrs	r3, r3, #1
 801dc44:	b21b      	sxth	r3, r3
 801dc46:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t s_right = (sw >> 1);
 801dc48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dc4c:	105b      	asrs	r3, r3, #1
 801dc4e:	b21b      	sxth	r3, r3
 801dc50:	61bb      	str	r3, [r7, #24]
    if((sw & 1) == 0) s_left--;
 801dc52:	88bb      	ldrh	r3, [r7, #4]
 801dc54:	f003 0301 	and.w	r3, r3, #1
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d102      	bne.n	801dc62 <shadow_blur_corner+0x34>
 801dc5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc5e:	3b01      	subs	r3, #1
 801dc60:	647b      	str	r3, [r7, #68]	; 0x44

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 801dc62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc66:	005b      	lsls	r3, r3, #1
 801dc68:	4618      	mov	r0, r3
 801dc6a:	f004 fa4d 	bl	8022108 <lv_mem_buf_get>
 801dc6e:	6178      	str	r0, [r7, #20]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 801dc70:	683b      	ldr	r3, [r7, #0]
 801dc72:	63bb      	str	r3, [r7, #56]	; 0x38

    for(y = 0; y < size; y++) {
 801dc74:	2300      	movs	r3, #0
 801dc76:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc78:	e05f      	b.n	801dd3a <shadow_blur_corner+0x10c>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 801dc7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801dc7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801dc82:	4413      	add	r3, r2
 801dc84:	005b      	lsls	r3, r3, #1
 801dc86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dc88:	4413      	add	r3, r2
 801dc8a:	881b      	ldrh	r3, [r3, #0]
 801dc8c:	461a      	mov	r2, r3
 801dc8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dc92:	fb02 f303 	mul.w	r3, r2, r3
 801dc96:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801dc98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc9c:	3b01      	subs	r3, #1
 801dc9e:	643b      	str	r3, [r7, #64]	; 0x40
 801dca0:	e037      	b.n	801dd12 <shadow_blur_corner+0xe4>
            sh_ups_blur_buf[x] = v;
 801dca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dca4:	005b      	lsls	r3, r3, #1
 801dca6:	697a      	ldr	r2, [r7, #20]
 801dca8:	4413      	add	r3, r2
 801dcaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dcac:	b292      	uxth	r2, r2
 801dcae:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 801dcb0:	2300      	movs	r3, #0
 801dcb2:	633b      	str	r3, [r7, #48]	; 0x30
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 801dcb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dcb6:	69bb      	ldr	r3, [r7, #24]
 801dcb8:	441a      	add	r2, r3
 801dcba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dcbe:	429a      	cmp	r2, r3
 801dcc0:	da07      	bge.n	801dcd2 <shadow_blur_corner+0xa4>
 801dcc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dcc4:	69bb      	ldr	r3, [r7, #24]
 801dcc6:	4413      	add	r3, r2
 801dcc8:	005b      	lsls	r3, r3, #1
 801dcca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dccc:	4413      	add	r3, r2
 801dcce:	881b      	ldrh	r3, [r3, #0]
 801dcd0:	633b      	str	r3, [r7, #48]	; 0x30
            v -= right_val;
 801dcd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcd6:	1ad3      	subs	r3, r2, r3
 801dcd8:	637b      	str	r3, [r7, #52]	; 0x34

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 801dcda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dcdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcde:	1ad3      	subs	r3, r2, r3
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	dc03      	bgt.n	801dcec <shadow_blur_corner+0xbe>
 801dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dce6:	881b      	ldrh	r3, [r3, #0]
 801dce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dcea:	e00b      	b.n	801dd04 <shadow_blur_corner+0xd6>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 801dcec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dcee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcf0:	1ad3      	subs	r3, r2, r3
 801dcf2:	461a      	mov	r2, r3
 801dcf4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801dcf8:	4413      	add	r3, r2
 801dcfa:	005b      	lsls	r3, r3, #1
 801dcfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dcfe:	4413      	add	r3, r2
 801dd00:	881b      	ldrh	r3, [r3, #0]
 801dd02:	62fb      	str	r3, [r7, #44]	; 0x2c
            v += left_val;
 801dd04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd08:	4413      	add	r3, r2
 801dd0a:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801dd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dd0e:	3b01      	subs	r3, #1
 801dd10:	643b      	str	r3, [r7, #64]	; 0x40
 801dd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	dac4      	bge.n	801dca2 <shadow_blur_corner+0x74>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 801dd18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dd1c:	005b      	lsls	r3, r3, #1
 801dd1e:	461a      	mov	r2, r3
 801dd20:	6979      	ldr	r1, [r7, #20]
 801dd22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801dd24:	f004 faf4 	bl	8022310 <lv_memcpy>
        sh_ups_tmp_buf += size;
 801dd28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dd2c:	005b      	lsls	r3, r3, #1
 801dd2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dd30:	4413      	add	r3, r2
 801dd32:	63bb      	str	r3, [r7, #56]	; 0x38
    for(y = 0; y < size; y++) {
 801dd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd36:	3301      	adds	r3, #1
 801dd38:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dd3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dd3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dd40:	429a      	cmp	r2, r3
 801dd42:	db9a      	blt.n	801dc7a <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
 801dd44:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801dd48:	613b      	str	r3, [r7, #16]
    uint32_t max_v_div = max_v / sw;
 801dd4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dd4e:	693a      	ldr	r2, [r7, #16]
 801dd50:	fbb2 f3f3 	udiv	r3, r2, r3
 801dd54:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (uint32_t)size * size; i++) {
 801dd56:	2300      	movs	r3, #0
 801dd58:	62bb      	str	r3, [r7, #40]	; 0x28
 801dd5a:	e02c      	b.n	801ddb6 <shadow_blur_corner+0x188>
        if(sh_ups_buf[i] == 0) continue;
 801dd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd5e:	005b      	lsls	r3, r3, #1
 801dd60:	683a      	ldr	r2, [r7, #0]
 801dd62:	4413      	add	r3, r2
 801dd64:	881b      	ldrh	r3, [r3, #0]
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	d021      	beq.n	801ddae <shadow_blur_corner+0x180>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 801dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd6c:	005b      	lsls	r3, r3, #1
 801dd6e:	683a      	ldr	r2, [r7, #0]
 801dd70:	4413      	add	r3, r2
 801dd72:	881b      	ldrh	r3, [r3, #0]
 801dd74:	461a      	mov	r2, r3
 801dd76:	693b      	ldr	r3, [r7, #16]
 801dd78:	4293      	cmp	r3, r2
 801dd7a:	d107      	bne.n	801dd8c <shadow_blur_corner+0x15e>
 801dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd7e:	005b      	lsls	r3, r3, #1
 801dd80:	683a      	ldr	r2, [r7, #0]
 801dd82:	4413      	add	r3, r2
 801dd84:	68fa      	ldr	r2, [r7, #12]
 801dd86:	b292      	uxth	r2, r2
 801dd88:	801a      	strh	r2, [r3, #0]
 801dd8a:	e011      	b.n	801ddb0 <shadow_blur_corner+0x182>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 801dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd8e:	005b      	lsls	r3, r3, #1
 801dd90:	683a      	ldr	r2, [r7, #0]
 801dd92:	4413      	add	r3, r2
 801dd94:	881b      	ldrh	r3, [r3, #0]
 801dd96:	461a      	mov	r2, r3
 801dd98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dd9c:	fb92 f1f3 	sdiv	r1, r2, r3
 801dda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dda2:	005b      	lsls	r3, r3, #1
 801dda4:	683a      	ldr	r2, [r7, #0]
 801dda6:	4413      	add	r3, r2
 801dda8:	b28a      	uxth	r2, r1
 801ddaa:	801a      	strh	r2, [r3, #0]
 801ddac:	e000      	b.n	801ddb0 <shadow_blur_corner+0x182>
        if(sh_ups_buf[i] == 0) continue;
 801ddae:	bf00      	nop
    for(i = 0; i < (uint32_t)size * size; i++) {
 801ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddb2:	3301      	adds	r3, #1
 801ddb4:	62bb      	str	r3, [r7, #40]	; 0x28
 801ddb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ddba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ddbe:	fb02 f303 	mul.w	r3, r2, r3
 801ddc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ddc4:	429a      	cmp	r2, r3
 801ddc6:	d3c9      	bcc.n	801dd5c <shadow_blur_corner+0x12e>
    }

    for(x = 0; x < size; x++) {
 801ddc8:	2300      	movs	r3, #0
 801ddca:	643b      	str	r3, [r7, #64]	; 0x40
 801ddcc:	e090      	b.n	801def0 <shadow_blur_corner+0x2c2>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801ddce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ddd0:	005b      	lsls	r3, r3, #1
 801ddd2:	683a      	ldr	r2, [r7, #0]
 801ddd4:	4413      	add	r3, r2
 801ddd6:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t v = sh_ups_tmp_buf[0] * sw;
 801ddd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ddda:	881b      	ldrh	r3, [r3, #0]
 801dddc:	461a      	mov	r2, r3
 801ddde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dde2:	fb02 f303 	mul.w	r3, r2, r3
 801dde6:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801dde8:	2300      	movs	r3, #0
 801ddea:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddec:	e05b      	b.n	801dea6 <shadow_blur_corner+0x278>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 801ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	db03      	blt.n	801ddfc <shadow_blur_corner+0x1ce>
 801ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddf6:	119b      	asrs	r3, r3, #6
 801ddf8:	b299      	uxth	r1, r3
 801ddfa:	e000      	b.n	801ddfe <shadow_blur_corner+0x1d0>
 801ddfc:	2100      	movs	r1, #0
 801ddfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de00:	005b      	lsls	r3, r3, #1
 801de02:	697a      	ldr	r2, [r7, #20]
 801de04:	4413      	add	r3, r2
 801de06:	460a      	mov	r2, r1
 801de08:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 801de0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801de0c:	69bb      	ldr	r3, [r7, #24]
 801de0e:	1ad3      	subs	r3, r2, r3
 801de10:	2b00      	cmp	r3, #0
 801de12:	dc03      	bgt.n	801de1c <shadow_blur_corner+0x1ee>
 801de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de16:	881b      	ldrh	r3, [r3, #0]
 801de18:	623b      	str	r3, [r7, #32]
 801de1a:	e00d      	b.n	801de38 <shadow_blur_corner+0x20a>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 801de1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801de1e:	69bb      	ldr	r3, [r7, #24]
 801de20:	1ad3      	subs	r3, r2, r3
 801de22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801de26:	fb03 f202 	mul.w	r2, r3, r2
 801de2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de2c:	4413      	add	r3, r2
 801de2e:	005b      	lsls	r3, r3, #1
 801de30:	683a      	ldr	r2, [r7, #0]
 801de32:	4413      	add	r3, r2
 801de34:	881b      	ldrh	r3, [r3, #0]
 801de36:	623b      	str	r3, [r7, #32]
            v -= top_val;
 801de38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801de3a:	6a3b      	ldr	r3, [r7, #32]
 801de3c:	1ad3      	subs	r3, r2, r3
 801de3e:	627b      	str	r3, [r7, #36]	; 0x24

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 801de40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801de42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801de44:	4413      	add	r3, r2
 801de46:	1c5a      	adds	r2, r3, #1
 801de48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801de4c:	429a      	cmp	r2, r3
 801de4e:	da0f      	bge.n	801de70 <shadow_blur_corner+0x242>
 801de50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801de52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801de54:	4413      	add	r3, r2
 801de56:	3301      	adds	r3, #1
 801de58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801de5c:	fb03 f202 	mul.w	r2, r3, r2
 801de60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de62:	4413      	add	r3, r2
 801de64:	005b      	lsls	r3, r3, #1
 801de66:	683a      	ldr	r2, [r7, #0]
 801de68:	4413      	add	r3, r2
 801de6a:	881b      	ldrh	r3, [r3, #0]
 801de6c:	61fb      	str	r3, [r7, #28]
 801de6e:	e00d      	b.n	801de8c <shadow_blur_corner+0x25e>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 801de70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801de74:	3b01      	subs	r3, #1
 801de76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801de7a:	fb03 f202 	mul.w	r2, r3, r2
 801de7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de80:	4413      	add	r3, r2
 801de82:	005b      	lsls	r3, r3, #1
 801de84:	683a      	ldr	r2, [r7, #0]
 801de86:	4413      	add	r3, r2
 801de88:	881b      	ldrh	r3, [r3, #0]
 801de8a:	61fb      	str	r3, [r7, #28]
            v += bottom_val;
 801de8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801de8e:	69fb      	ldr	r3, [r7, #28]
 801de90:	4413      	add	r3, r2
 801de92:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801de94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de96:	3301      	adds	r3, #1
 801de98:	63fb      	str	r3, [r7, #60]	; 0x3c
 801de9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801de9e:	005b      	lsls	r3, r3, #1
 801dea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dea2:	4413      	add	r3, r2
 801dea4:	63bb      	str	r3, [r7, #56]	; 0x38
 801dea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801deaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801deac:	429a      	cmp	r2, r3
 801deae:	db9e      	blt.n	801ddee <shadow_blur_corner+0x1c0>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801deb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801deb2:	005b      	lsls	r3, r3, #1
 801deb4:	683a      	ldr	r2, [r7, #0]
 801deb6:	4413      	add	r3, r2
 801deb8:	63bb      	str	r3, [r7, #56]	; 0x38
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801deba:	2300      	movs	r3, #0
 801debc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801debe:	e00f      	b.n	801dee0 <shadow_blur_corner+0x2b2>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 801dec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dec2:	005b      	lsls	r3, r3, #1
 801dec4:	697a      	ldr	r2, [r7, #20]
 801dec6:	4413      	add	r3, r2
 801dec8:	881a      	ldrh	r2, [r3, #0]
 801deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801decc:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801dece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ded0:	3301      	adds	r3, #1
 801ded2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ded4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801ded8:	005b      	lsls	r3, r3, #1
 801deda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dedc:	4413      	add	r3, r2
 801dede:	63bb      	str	r3, [r7, #56]	; 0x38
 801dee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dee6:	429a      	cmp	r2, r3
 801dee8:	dbea      	blt.n	801dec0 <shadow_blur_corner+0x292>
    for(x = 0; x < size; x++) {
 801deea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801deec:	3301      	adds	r3, #1
 801deee:	643b      	str	r3, [r7, #64]	; 0x40
 801def0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801def4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801def6:	429a      	cmp	r2, r3
 801def8:	f6ff af69 	blt.w	801ddce <shadow_blur_corner+0x1a0>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 801defc:	6978      	ldr	r0, [r7, #20]
 801defe:	f004 f9af 	bl	8022260 <lv_mem_buf_release>
}
 801df02:	bf00      	nop
 801df04:	3748      	adds	r7, #72	; 0x48
 801df06:	46bd      	mov	sp, r7
 801df08:	bd80      	pop	{r7, pc}

0801df0a <draw_outline>:
#endif

static void draw_outline(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801df0a:	b5b0      	push	{r4, r5, r7, lr}
 801df0c:	b092      	sub	sp, #72	; 0x48
 801df0e:	af04      	add	r7, sp, #16
 801df10:	60f8      	str	r0, [r7, #12]
 801df12:	60b9      	str	r1, [r7, #8]
 801df14:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801df16:	68bb      	ldr	r3, [r7, #8]
 801df18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801df1c:	2b02      	cmp	r3, #2
 801df1e:	f240 80b7 	bls.w	801e090 <draw_outline+0x186>
    if(dsc->outline_width == 0) return;
 801df22:	68bb      	ldr	r3, [r7, #8]
 801df24:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801df28:	2b00      	cmp	r3, #0
 801df2a:	f000 80b3 	beq.w	801e094 <draw_outline+0x18a>

    lv_opa_t opa = dsc->outline_opa;
 801df2e:	68bb      	ldr	r3, [r7, #8]
 801df30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801df34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801df38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801df3c:	2bfd      	cmp	r3, #253	; 0xfd
 801df3e:	d902      	bls.n	801df46 <draw_outline+0x3c>
 801df40:	23ff      	movs	r3, #255	; 0xff
 801df42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801df46:	f107 0318 	add.w	r3, r7, #24
 801df4a:	6879      	ldr	r1, [r7, #4]
 801df4c:	4618      	mov	r0, r3
 801df4e:	f7fd fc0f 	bl	801b770 <lv_area_copy>

    /*Bring the outline closer to make sure there is no color bleeding with pad=0*/
    lv_coord_t pad = dsc->outline_pad - 1;
 801df52:	68bb      	ldr	r3, [r7, #8]
 801df54:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801df58:	b29b      	uxth	r3, r3
 801df5a:	3b01      	subs	r3, #1
 801df5c:	b29b      	uxth	r3, r3
 801df5e:	863b      	strh	r3, [r7, #48]	; 0x30
    area_inner.x1 -= pad;
 801df60:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801df64:	b29a      	uxth	r2, r3
 801df66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801df68:	1ad3      	subs	r3, r2, r3
 801df6a:	b29b      	uxth	r3, r3
 801df6c:	b21b      	sxth	r3, r3
 801df6e:	833b      	strh	r3, [r7, #24]
    area_inner.y1 -= pad;
 801df70:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801df74:	b29a      	uxth	r2, r3
 801df76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801df78:	1ad3      	subs	r3, r2, r3
 801df7a:	b29b      	uxth	r3, r3
 801df7c:	b21b      	sxth	r3, r3
 801df7e:	837b      	strh	r3, [r7, #26]
    area_inner.x2 += pad;
 801df80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801df84:	b29a      	uxth	r2, r3
 801df86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801df88:	4413      	add	r3, r2
 801df8a:	b29b      	uxth	r3, r3
 801df8c:	b21b      	sxth	r3, r3
 801df8e:	83bb      	strh	r3, [r7, #28]
    area_inner.y2 += pad;
 801df90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801df94:	b29a      	uxth	r2, r3
 801df96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801df98:	4413      	add	r3, r2
 801df9a:	b29b      	uxth	r3, r3
 801df9c:	b21b      	sxth	r3, r3
 801df9e:	83fb      	strh	r3, [r7, #30]

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 801dfa0:	f107 0218 	add.w	r2, r7, #24
 801dfa4:	f107 0310 	add.w	r3, r7, #16
 801dfa8:	4611      	mov	r1, r2
 801dfaa:	4618      	mov	r0, r3
 801dfac:	f7fd fbe0 	bl	801b770 <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 801dfb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801dfb4:	b29a      	uxth	r2, r3
 801dfb6:	68bb      	ldr	r3, [r7, #8]
 801dfb8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dfbc:	b29b      	uxth	r3, r3
 801dfbe:	1ad3      	subs	r3, r2, r3
 801dfc0:	b29b      	uxth	r3, r3
 801dfc2:	b21b      	sxth	r3, r3
 801dfc4:	823b      	strh	r3, [r7, #16]
    area_outer.x2 += dsc->outline_width;
 801dfc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801dfca:	b29a      	uxth	r2, r3
 801dfcc:	68bb      	ldr	r3, [r7, #8]
 801dfce:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dfd2:	b29b      	uxth	r3, r3
 801dfd4:	4413      	add	r3, r2
 801dfd6:	b29b      	uxth	r3, r3
 801dfd8:	b21b      	sxth	r3, r3
 801dfda:	82bb      	strh	r3, [r7, #20]
    area_outer.y1 -= dsc->outline_width;
 801dfdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801dfe0:	b29a      	uxth	r2, r3
 801dfe2:	68bb      	ldr	r3, [r7, #8]
 801dfe4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dfe8:	b29b      	uxth	r3, r3
 801dfea:	1ad3      	subs	r3, r2, r3
 801dfec:	b29b      	uxth	r3, r3
 801dfee:	b21b      	sxth	r3, r3
 801dff0:	827b      	strh	r3, [r7, #18]
    area_outer.y2 += dsc->outline_width;
 801dff2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801dff6:	b29a      	uxth	r2, r3
 801dff8:	68bb      	ldr	r3, [r7, #8]
 801dffa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801dffe:	b29b      	uxth	r3, r3
 801e000:	4413      	add	r3, r2
 801e002:	b29b      	uxth	r3, r3
 801e004:	b21b      	sxth	r3, r3
 801e006:	82fb      	strh	r3, [r7, #22]


    int32_t inner_w = lv_area_get_width(&area_inner);
 801e008:	f107 0318 	add.w	r3, r7, #24
 801e00c:	4618      	mov	r0, r3
 801e00e:	f7fd fbce 	bl	801b7ae <lv_area_get_width>
 801e012:	4603      	mov	r3, r0
 801e014:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t inner_h = lv_area_get_height(&area_inner);
 801e016:	f107 0318 	add.w	r3, r7, #24
 801e01a:	4618      	mov	r0, r3
 801e01c:	f7fd fbde 	bl	801b7dc <lv_area_get_height>
 801e020:	4603      	mov	r3, r0
 801e022:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t rin = dsc->radius;
 801e024:	68bb      	ldr	r3, [r7, #8]
 801e026:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e02a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t short_side = LV_MIN(inner_w, inner_h);
 801e02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e030:	4293      	cmp	r3, r2
 801e032:	bfa8      	it	ge
 801e034:	4613      	movge	r3, r2
 801e036:	627b      	str	r3, [r7, #36]	; 0x24
    if(rin > short_side >> 1) rin = short_side >> 1;
 801e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e03a:	105b      	asrs	r3, r3, #1
 801e03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e03e:	429a      	cmp	r2, r3
 801e040:	dd02      	ble.n	801e048 <draw_outline+0x13e>
 801e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e044:	105b      	asrs	r3, r3, #1
 801e046:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t rout = rin + dsc->outline_width;
 801e048:	68bb      	ldr	r3, [r7, #8]
 801e04a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801e04e:	b29a      	uxth	r2, r3
 801e050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e052:	b29b      	uxth	r3, r3
 801e054:	4413      	add	r3, r2
 801e056:	b29b      	uxth	r3, r3
 801e058:	847b      	strh	r3, [r7, #34]	; 0x22

    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 801e05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e05c:	b21b      	sxth	r3, r3
 801e05e:	68ba      	ldr	r2, [r7, #8]
 801e060:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801e064:	68b9      	ldr	r1, [r7, #8]
 801e066:	7889      	ldrb	r1, [r1, #2]
 801e068:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 801e06c:	f107 0418 	add.w	r4, r7, #24
 801e070:	f107 0010 	add.w	r0, r7, #16
 801e074:	9103      	str	r1, [sp, #12]
 801e076:	9202      	str	r2, [sp, #8]
 801e078:	68ba      	ldr	r2, [r7, #8]
 801e07a:	7f92      	ldrb	r2, [r2, #30]
 801e07c:	f88d 2004 	strb.w	r2, [sp, #4]
 801e080:	9300      	str	r3, [sp, #0]
 801e082:	462b      	mov	r3, r5
 801e084:	4622      	mov	r2, r4
 801e086:	4601      	mov	r1, r0
 801e088:	68f8      	ldr	r0, [r7, #12]
 801e08a:	f000 f807 	bl	801e09c <draw_border_generic>
 801e08e:	e002      	b.n	801e096 <draw_outline+0x18c>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801e090:	bf00      	nop
 801e092:	e000      	b.n	801e096 <draw_outline+0x18c>
    if(dsc->outline_width == 0) return;
 801e094:	bf00      	nop
                        dsc->blend_mode);
}
 801e096:	3738      	adds	r7, #56	; 0x38
 801e098:	46bd      	mov	sp, r7
 801e09a:	bdb0      	pop	{r4, r5, r7, pc}

0801e09c <draw_border_generic>:

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b0a8      	sub	sp, #160	; 0xa0
 801e0a0:	af02      	add	r7, sp, #8
 801e0a2:	60f8      	str	r0, [r7, #12]
 801e0a4:	60b9      	str	r1, [r7, #8]
 801e0a6:	607a      	str	r2, [r7, #4]
 801e0a8:	807b      	strh	r3, [r7, #2]
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 801e0aa:	68b8      	ldr	r0, [r7, #8]
 801e0ac:	f7f3 fe3c 	bl	8011d28 <lv_draw_mask_is_any>
 801e0b0:	4603      	mov	r3, r0
 801e0b2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 801e0b6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801e0ba:	f083 0301 	eor.w	r3, r3, #1
 801e0be:	b2db      	uxtb	r3, r3
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	d012      	beq.n	801e0ea <draw_border_generic+0x4e>
 801e0c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d10e      	bne.n	801e0ea <draw_border_generic+0x4e>
 801e0cc:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d10a      	bne.n	801e0ea <draw_border_generic+0x4e>
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 801e0d4:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801e0d8:	9300      	str	r3, [sp, #0]
 801e0da:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801e0de:	687a      	ldr	r2, [r7, #4]
 801e0e0:	68b9      	ldr	r1, [r7, #8]
 801e0e2:	68f8      	ldr	r0, [r7, #12]
 801e0e4:	f000 fbb0 	bl	801e848 <draw_border_simple>
        return;
 801e0e8:	e3ab      	b.n	801e842 <draw_border_generic+0x7a6>
    }

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `coords`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	689a      	ldr	r2, [r3, #8]
 801e0ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e0f2:	68b9      	ldr	r1, [r7, #8]
 801e0f4:	4618      	mov	r0, r3
 801e0f6:	f002 fc5d 	bl	80209b4 <_lv_area_intersect>
 801e0fa:	4603      	mov	r3, r0
 801e0fc:	f083 0301 	eor.w	r3, r3, #1
 801e100:	b2db      	uxtb	r3, r3
 801e102:	2b00      	cmp	r3, #0
 801e104:	f040 839c 	bne.w	801e840 <draw_border_generic+0x7a4>
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 801e108:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e10c:	4618      	mov	r0, r3
 801e10e:	f7fd fb4e 	bl	801b7ae <lv_area_get_width>
 801e112:	4603      	mov	r3, r0
 801e114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801e118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e11c:	211c      	movs	r1, #28
 801e11e:	4618      	mov	r0, r3
 801e120:	f004 fb9c 	bl	802285c <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 801e124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e128:	4618      	mov	r0, r3
 801e12a:	f003 ffed 	bl	8022108 <lv_mem_buf_get>
 801e12e:	4603      	mov	r3, r0
 801e130:	663b      	str	r3, [r7, #96]	; 0x60


    /*Create mask for the outer area*/
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801e132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e136:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0) {
 801e13a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	dd10      	ble.n	801e164 <draw_border_generic+0xc8>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 801e142:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801e146:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801e14a:	2300      	movs	r3, #0
 801e14c:	68b9      	ldr	r1, [r7, #8]
 801e14e:	f7f4 f887 	bl	8012260 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801e152:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e156:	2100      	movs	r1, #0
 801e158:	4618      	mov	r0, r3
 801e15a:	f7f3 fcb5 	bl	8011ac8 <lv_draw_mask_add>
 801e15e:	4603      	mov	r3, r0
 801e160:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    }

    /*Create mask for the inner mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 801e164:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	; 0xa0
 801e168:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801e16c:	2301      	movs	r3, #1
 801e16e:	6879      	ldr	r1, [r7, #4]
 801e170:	f7f4 f876 	bl	8012260 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 801e174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e178:	2100      	movs	r1, #0
 801e17a:	4618      	mov	r0, r3
 801e17c:	f7f3 fca4 	bl	8011ac8 <lv_draw_mask_add>
 801e180:	4603      	mov	r3, r0
 801e182:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t h;
    lv_area_t blend_area;
    blend_dsc.blend_area = &blend_area;
 801e186:	f107 031c 	add.w	r3, r7, #28
 801e18a:	657b      	str	r3, [r7, #84]	; 0x54
    blend_dsc.mask_area = &blend_area;
 801e18c:	f107 031c 	add.w	r3, r7, #28
 801e190:	66bb      	str	r3, [r7, #104]	; 0x68
    blend_dsc.color = color;
 801e192:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801e196:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    blend_dsc.opa = opa;
 801e19a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801e19e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    blend_dsc.blend_mode = blend_mode;
 801e1a2:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 801e1a6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

    /*Calculate the x and y coordinates where the straight parts area*/
    lv_area_t core_area;
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e1b0:	461a      	mov	r2, r3
 801e1b2:	68bb      	ldr	r3, [r7, #8]
 801e1b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e1b8:	4619      	mov	r1, r3
 801e1ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e1be:	440b      	add	r3, r1
 801e1c0:	4293      	cmp	r3, r2
 801e1c2:	bfb8      	it	lt
 801e1c4:	4613      	movlt	r3, r2
 801e1c6:	b21b      	sxth	r3, r3
 801e1c8:	82bb      	strh	r3, [r7, #20]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e1d0:	461a      	mov	r2, r3
 801e1d2:	68bb      	ldr	r3, [r7, #8]
 801e1d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e1d8:	4619      	mov	r1, r3
 801e1da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e1de:	1acb      	subs	r3, r1, r3
 801e1e0:	4293      	cmp	r3, r2
 801e1e2:	bfa8      	it	ge
 801e1e4:	4613      	movge	r3, r2
 801e1e6:	b21b      	sxth	r3, r3
 801e1e8:	833b      	strh	r3, [r7, #24]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e1f0:	461a      	mov	r2, r3
 801e1f2:	68bb      	ldr	r3, [r7, #8]
 801e1f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e1f8:	4619      	mov	r1, r3
 801e1fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e1fe:	440b      	add	r3, r1
 801e200:	4293      	cmp	r3, r2
 801e202:	bfb8      	it	lt
 801e204:	4613      	movlt	r3, r2
 801e206:	b21b      	sxth	r3, r3
 801e208:	82fb      	strh	r3, [r7, #22]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e210:	461a      	mov	r2, r3
 801e212:	68bb      	ldr	r3, [r7, #8]
 801e214:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e218:	4619      	mov	r1, r3
 801e21a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e21e:	1acb      	subs	r3, r1, r3
 801e220:	4293      	cmp	r3, r2
 801e222:	bfa8      	it	ge
 801e224:	4613      	movge	r3, r2
 801e226:	b21b      	sxth	r3, r3
 801e228:	837b      	strh	r3, [r7, #26]
    lv_coord_t core_w = lv_area_get_width(&core_area);
 801e22a:	f107 0314 	add.w	r3, r7, #20
 801e22e:	4618      	mov	r0, r3
 801e230:	f7fd fabd 	bl	801b7ae <lv_area_get_width>
 801e234:	4603      	mov	r3, r0
 801e236:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801e23a:	68bb      	ldr	r3, [r7, #8]
 801e23c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e246:	429a      	cmp	r2, r3
 801e248:	bfd4      	ite	le
 801e24a:	2301      	movle	r3, #1
 801e24c:	2300      	movgt	r3, #0
 801e24e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801e252:	68bb      	ldr	r3, [r7, #8]
 801e254:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e25e:	429a      	cmp	r2, r3
 801e260:	bfac      	ite	ge
 801e262:	2301      	movge	r3, #1
 801e264:	2300      	movlt	r3, #0
 801e266:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

    /*If there is other masks, need to draw line by line*/
    if(mask_any) {
 801e26a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d077      	beq.n	801e362 <draw_border_generic+0x2c6>
        blend_area.x1 = draw_area.x1;
 801e272:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e276:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801e278:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e27c:	843b      	strh	r3, [r7, #32]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801e27e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e286:	e045      	b.n	801e314 <draw_border_generic+0x278>
            if(!top_side && h < core_area.y1) continue;
 801e288:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e28c:	f083 0301 	eor.w	r3, r3, #1
 801e290:	b2db      	uxtb	r3, r3
 801e292:	2b00      	cmp	r3, #0
 801e294:	d006      	beq.n	801e2a4 <draw_border_generic+0x208>
 801e296:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e29a:	461a      	mov	r2, r3
 801e29c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2a0:	4293      	cmp	r3, r2
 801e2a2:	db31      	blt.n	801e308 <draw_border_generic+0x26c>
            if(!bottom_side && h > core_area.y2) break;
 801e2a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e2a8:	f083 0301 	eor.w	r3, r3, #1
 801e2ac:	b2db      	uxtb	r3, r3
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d006      	beq.n	801e2c0 <draw_border_generic+0x224>
 801e2b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e2b6:	461a      	mov	r2, r3
 801e2b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2bc:	4293      	cmp	r3, r2
 801e2be:	dc31      	bgt.n	801e324 <draw_border_generic+0x288>

            blend_area.y1 = h;
 801e2c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2c4:	b21b      	sxth	r3, r3
 801e2c6:	83fb      	strh	r3, [r7, #30]
            blend_area.y2 = h;
 801e2c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2cc:	b21b      	sxth	r3, r3
 801e2ce:	847b      	strh	r3, [r7, #34]	; 0x22

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801e2d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e2d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801e2d6:	4611      	mov	r1, r2
 801e2d8:	4618      	mov	r0, r3
 801e2da:	f004 fb40 	bl	802295e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 801e2de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e2e0:	f9b7 1070 	ldrsh.w	r1, [r7, #112]	; 0x70
 801e2e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e2e8:	b21a      	sxth	r2, r3
 801e2ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e2ee:	b21b      	sxth	r3, r3
 801e2f0:	f7f3 fc1c 	bl	8011b2c <lv_draw_mask_apply>
 801e2f4:	4603      	mov	r3, r0
 801e2f6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e2fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e2fe:	4619      	mov	r1, r3
 801e300:	68f8      	ldr	r0, [r7, #12]
 801e302:	f7f8 ffe1 	bl	80172c8 <lv_draw_sw_blend>
 801e306:	e000      	b.n	801e30a <draw_border_generic+0x26e>
            if(!top_side && h < core_area.y1) continue;
 801e308:	bf00      	nop
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801e30a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e30e:	3301      	adds	r3, #1
 801e310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e314:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e318:	461a      	mov	r2, r3
 801e31a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e31e:	4293      	cmp	r3, r2
 801e320:	ddb2      	ble.n	801e288 <draw_border_generic+0x1ec>
 801e322:	e000      	b.n	801e326 <draw_border_generic+0x28a>
            if(!bottom_side && h > core_area.y2) break;
 801e324:	bf00      	nop
        }

        lv_draw_mask_free_param(&mask_rin_param);
 801e326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e32a:	4618      	mov	r0, r3
 801e32c:	f7f3 fc92 	bl	8011c54 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 801e330:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e334:	4618      	mov	r0, r3
 801e336:	f7f3 fc3d 	bl	8011bb4 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 801e33a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e33e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e342:	d009      	beq.n	801e358 <draw_border_generic+0x2bc>
            lv_draw_mask_free_param(&mask_rout_param);
 801e344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e348:	4618      	mov	r0, r3
 801e34a:	f7f3 fc83 	bl	8011c54 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 801e34e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e352:	4618      	mov	r0, r3
 801e354:	f7f3 fc2e 	bl	8011bb4 <lv_draw_mask_remove_id>
        }
        lv_mem_buf_release(blend_dsc.mask_buf);
 801e358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e35a:	4618      	mov	r0, r3
 801e35c:	f003 ff80 	bl	8022260 <lv_mem_buf_release>
        return;
 801e360:	e26f      	b.n	801e842 <draw_border_generic+0x7a6>
    }

    /*No masks*/
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801e362:	68bb      	ldr	r3, [r7, #8]
 801e364:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e36e:	429a      	cmp	r2, r3
 801e370:	bfd4      	ite	le
 801e372:	2301      	movle	r3, #1
 801e374:	2300      	movgt	r3, #0
 801e376:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801e37a:	68bb      	ldr	r3, [r7, #8]
 801e37c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e386:	429a      	cmp	r2, r3
 801e388:	bfac      	ite	ge
 801e38a:	2301      	movge	r3, #1
 801e38c:	2300      	movlt	r3, #0
 801e38e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    bool split_hor = true;
 801e392:	2301      	movs	r3, #1
 801e394:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    if(left_side && right_side && top_side && bottom_side &&
 801e398:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d012      	beq.n	801e3c6 <draw_border_generic+0x32a>
 801e3a0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d00e      	beq.n	801e3c6 <draw_border_generic+0x32a>
 801e3a8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d00a      	beq.n	801e3c6 <draw_border_generic+0x32a>
 801e3b0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d006      	beq.n	801e3c6 <draw_border_generic+0x32a>
 801e3b8:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801e3bc:	2b31      	cmp	r3, #49	; 0x31
 801e3be:	dc02      	bgt.n	801e3c6 <draw_border_generic+0x32a>
       core_w < SPLIT_LIMIT) {
        split_hor = false;
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801e3c6:	2301      	movs	r3, #1
 801e3c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    /*Draw the straight lines first if they are long enough*/
    if(top_side && split_hor) {
 801e3cc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d01b      	beq.n	801e40c <draw_border_generic+0x370>
 801e3d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d017      	beq.n	801e40c <draw_border_generic+0x370>
        blend_area.x1 = core_area.x1;
 801e3dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e3e0:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801e3e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e3e6:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = outer_area->y1;
 801e3e8:	68bb      	ldr	r3, [r7, #8]
 801e3ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e3ee:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = inner_area->y1 - 1;
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e3f6:	b29b      	uxth	r3, r3
 801e3f8:	3b01      	subs	r3, #1
 801e3fa:	b29b      	uxth	r3, r3
 801e3fc:	b21b      	sxth	r3, r3
 801e3fe:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e404:	4619      	mov	r1, r3
 801e406:	68f8      	ldr	r0, [r7, #12]
 801e408:	f7f8 ff5e 	bl	80172c8 <lv_draw_sw_blend>
    }

    if(bottom_side && split_hor) {
 801e40c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e410:	2b00      	cmp	r3, #0
 801e412:	d01b      	beq.n	801e44c <draw_border_generic+0x3b0>
 801e414:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d017      	beq.n	801e44c <draw_border_generic+0x3b0>
        blend_area.x1 = core_area.x1;
 801e41c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e420:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 801e422:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e426:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = inner_area->y2 + 1;
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e42e:	b29b      	uxth	r3, r3
 801e430:	3301      	adds	r3, #1
 801e432:	b29b      	uxth	r3, r3
 801e434:	b21b      	sxth	r3, r3
 801e436:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = outer_area->y2;
 801e438:	68bb      	ldr	r3, [r7, #8]
 801e43a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e43e:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e444:	4619      	mov	r1, r3
 801e446:	68f8      	ldr	r0, [r7, #12]
 801e448:	f7f8 ff3e 	bl	80172c8 <lv_draw_sw_blend>
    }

    if(left_side) {
 801e44c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e450:	2b00      	cmp	r3, #0
 801e452:	d017      	beq.n	801e484 <draw_border_generic+0x3e8>
        blend_area.x1 = outer_area->x1;
 801e454:	68bb      	ldr	r3, [r7, #8]
 801e456:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e45a:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = inner_area->x1 - 1;
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e462:	b29b      	uxth	r3, r3
 801e464:	3b01      	subs	r3, #1
 801e466:	b29b      	uxth	r3, r3
 801e468:	b21b      	sxth	r3, r3
 801e46a:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801e46c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e470:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801e472:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e476:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e478:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e47c:	4619      	mov	r1, r3
 801e47e:	68f8      	ldr	r0, [r7, #12]
 801e480:	f7f8 ff22 	bl	80172c8 <lv_draw_sw_blend>
    }

    if(right_side) {
 801e484:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d017      	beq.n	801e4bc <draw_border_generic+0x420>
        blend_area.x1 = inner_area->x2 + 1;
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e492:	b29b      	uxth	r3, r3
 801e494:	3301      	adds	r3, #1
 801e496:	b29b      	uxth	r3, r3
 801e498:	b21b      	sxth	r3, r3
 801e49a:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = outer_area->x2;
 801e49c:	68bb      	ldr	r3, [r7, #8]
 801e49e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e4a2:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 801e4a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e4a8:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 801e4aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e4ae:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e4b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e4b4:	4619      	mov	r1, r3
 801e4b6:	68f8      	ldr	r0, [r7, #12]
 801e4b8:	f7f8 ff06 	bl	80172c8 <lv_draw_sw_blend>

    /*Draw the corners*/
    lv_coord_t blend_w;

    /*Left and right corner together if they are close to each other*/
    if(!split_hor) {
 801e4bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801e4c0:	f083 0301 	eor.w	r3, r3, #1
 801e4c4:	b2db      	uxtb	r3, r3
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	f000 8081 	beq.w	801e5ce <draw_border_generic+0x532>
        /*Calculate the top corner and mirror it to the bottom*/
        blend_area.x1 = draw_area.x1;
 801e4cc:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e4d0:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801e4d2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e4d6:	843b      	strh	r3, [r7, #32]
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e4de:	461a      	mov	r2, r3
 801e4e0:	68bb      	ldr	r3, [r7, #8]
 801e4e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e4e6:	1ad2      	subs	r2, r2, r3
 801e4e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e4ec:	4293      	cmp	r3, r2
 801e4ee:	bfb8      	it	lt
 801e4f0:	4613      	movlt	r3, r2
 801e4f2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        for(h = 0; h < max_h; h++) {
 801e4f6:	2300      	movs	r3, #0
 801e4f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e4fc:	e060      	b.n	801e5c0 <draw_border_generic+0x524>
            lv_coord_t top_y = outer_area->y1 + h;
 801e4fe:	68bb      	ldr	r3, [r7, #8]
 801e500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e504:	b29a      	uxth	r2, r3
 801e506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e50a:	b29b      	uxth	r3, r3
 801e50c:	4413      	add	r3, r2
 801e50e:	b29b      	uxth	r3, r3
 801e510:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            lv_coord_t bottom_y = outer_area->y2 - h;
 801e514:	68bb      	ldr	r3, [r7, #8]
 801e516:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e51a:	b29a      	uxth	r2, r3
 801e51c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e520:	b29b      	uxth	r3, r3
 801e522:	1ad3      	subs	r3, r2, r3
 801e524:	b29b      	uxth	r3, r3
 801e526:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801e52a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e52e:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e532:	429a      	cmp	r2, r3
 801e534:	da05      	bge.n	801e542 <draw_border_generic+0x4a6>
 801e536:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e53a:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801e53e:	429a      	cmp	r2, r3
 801e540:	dc38      	bgt.n	801e5b4 <draw_border_generic+0x518>

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801e542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e544:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801e548:	4611      	mov	r1, r2
 801e54a:	4618      	mov	r0, r3
 801e54c:	f004 fa07 	bl	802295e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 801e550:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e552:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e556:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e55a:	b21b      	sxth	r3, r3
 801e55c:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e560:	f7f3 fae4 	bl	8011b2c <lv_draw_mask_apply>
 801e564:	4603      	mov	r3, r0
 801e566:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if(top_y >= draw_area.y1) {
 801e56a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e56e:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 801e572:	429a      	cmp	r2, r3
 801e574:	db0b      	blt.n	801e58e <draw_border_generic+0x4f2>
                blend_area.y1 = top_y;
 801e576:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801e57a:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = top_y;
 801e57c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801e580:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e582:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e586:	4619      	mov	r1, r3
 801e588:	68f8      	ldr	r0, [r7, #12]
 801e58a:	f7f8 fe9d 	bl	80172c8 <lv_draw_sw_blend>
            }

            if(bottom_y <= draw_area.y2) {
 801e58e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e592:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 801e596:	429a      	cmp	r2, r3
 801e598:	dc0d      	bgt.n	801e5b6 <draw_border_generic+0x51a>
                blend_area.y1 = bottom_y;
 801e59a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801e59e:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = bottom_y;
 801e5a0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801e5a4:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e5a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e5aa:	4619      	mov	r1, r3
 801e5ac:	68f8      	ldr	r0, [r7, #12]
 801e5ae:	f7f8 fe8b 	bl	80172c8 <lv_draw_sw_blend>
 801e5b2:	e000      	b.n	801e5b6 <draw_border_generic+0x51a>
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801e5b4:	bf00      	nop
        for(h = 0; h < max_h; h++) {
 801e5b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e5ba:	3301      	adds	r3, #1
 801e5bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e5c0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801e5c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801e5c8:	429a      	cmp	r2, r3
 801e5ca:	db98      	blt.n	801e4fe <draw_border_generic+0x462>
 801e5cc:	e11f      	b.n	801e80e <draw_border_generic+0x772>
            }
        }
    }
    else {
        /*Left corners*/
        blend_area.x1 = draw_area.x1;
 801e5ce:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e5d2:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 801e5d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e5d8:	3b01      	subs	r3, #1
 801e5da:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 801e5de:	4293      	cmp	r3, r2
 801e5e0:	bfa8      	it	ge
 801e5e2:	4613      	movge	r3, r2
 801e5e4:	b21b      	sxth	r3, r3
 801e5e6:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801e5e8:	f107 031c 	add.w	r3, r7, #28
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	f7fd f8de 	bl	801b7ae <lv_area_get_width>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(blend_w > 0) {
 801e5f8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	dd76      	ble.n	801e6ee <draw_border_generic+0x652>
            if(left_side || top_side) {
 801e600:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e604:	2b00      	cmp	r3, #0
 801e606:	d103      	bne.n	801e610 <draw_border_generic+0x574>
 801e608:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	d032      	beq.n	801e676 <draw_border_generic+0x5da>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e610:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e614:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e618:	e026      	b.n	801e668 <draw_border_generic+0x5cc>
                    blend_area.y1 = h;
 801e61a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e61e:	b21b      	sxth	r3, r3
 801e620:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e626:	b21b      	sxth	r3, r3
 801e628:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e62a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e62c:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e630:	4611      	mov	r1, r2
 801e632:	4618      	mov	r0, r3
 801e634:	f004 f993 	bl	802295e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e638:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e63a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e63e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e642:	b21a      	sxth	r2, r3
 801e644:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e648:	f7f3 fa70 	bl	8011b2c <lv_draw_mask_apply>
 801e64c:	4603      	mov	r3, r0
 801e64e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e652:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e656:	4619      	mov	r1, r3
 801e658:	68f8      	ldr	r0, [r7, #12]
 801e65a:	f7f8 fe35 	bl	80172c8 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e65e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e662:	3301      	adds	r3, #1
 801e664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e668:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e66c:	461a      	mov	r2, r3
 801e66e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e672:	4293      	cmp	r3, r2
 801e674:	dbd1      	blt.n	801e61a <draw_border_generic+0x57e>
                }
            }

            if(left_side || bottom_side) {
 801e676:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d103      	bne.n	801e686 <draw_border_generic+0x5ea>
 801e67e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e682:	2b00      	cmp	r3, #0
 801e684:	d033      	beq.n	801e6ee <draw_border_generic+0x652>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e686:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e68a:	3301      	adds	r3, #1
 801e68c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e690:	e026      	b.n	801e6e0 <draw_border_generic+0x644>
                    blend_area.y1 = h;
 801e692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e696:	b21b      	sxth	r3, r3
 801e698:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e69a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e69e:	b21b      	sxth	r3, r3
 801e6a0:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e6a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e6a4:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e6a8:	4611      	mov	r1, r2
 801e6aa:	4618      	mov	r0, r3
 801e6ac:	f004 f957 	bl	802295e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e6b0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e6b2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e6b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e6ba:	b21a      	sxth	r2, r3
 801e6bc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e6c0:	f7f3 fa34 	bl	8011b2c <lv_draw_mask_apply>
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e6ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e6ce:	4619      	mov	r1, r3
 801e6d0:	68f8      	ldr	r0, [r7, #12]
 801e6d2:	f7f8 fdf9 	bl	80172c8 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e6d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e6da:	3301      	adds	r3, #1
 801e6dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e6e0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e6e4:	461a      	mov	r2, r3
 801e6e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e6ea:	4293      	cmp	r3, r2
 801e6ec:	ddd1      	ble.n	801e692 <draw_border_generic+0x5f6>
                }
            }
        }

        /*Right corners*/
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 801e6ee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e6f2:	3301      	adds	r3, #1
 801e6f4:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 801e6f8:	4293      	cmp	r3, r2
 801e6fa:	bfb8      	it	lt
 801e6fc:	4613      	movlt	r3, r2
 801e6fe:	b21b      	sxth	r3, r3
 801e700:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 801e702:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e706:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 801e708:	f107 031c 	add.w	r3, r7, #28
 801e70c:	4618      	mov	r0, r3
 801e70e:	f7fd f84e 	bl	801b7ae <lv_area_get_width>
 801e712:	4603      	mov	r3, r0
 801e714:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if(blend_w > 0) {
 801e718:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	dd76      	ble.n	801e80e <draw_border_generic+0x772>
            if(right_side || top_side) {
 801e720:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e724:	2b00      	cmp	r3, #0
 801e726:	d103      	bne.n	801e730 <draw_border_generic+0x694>
 801e728:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d032      	beq.n	801e796 <draw_border_generic+0x6fa>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e730:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e738:	e026      	b.n	801e788 <draw_border_generic+0x6ec>
                    blend_area.y1 = h;
 801e73a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e73e:	b21b      	sxth	r3, r3
 801e740:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e746:	b21b      	sxth	r3, r3
 801e748:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e74a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e74c:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e750:	4611      	mov	r1, r2
 801e752:	4618      	mov	r0, r3
 801e754:	f004 f903 	bl	802295e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e758:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e75a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e75e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e762:	b21a      	sxth	r2, r3
 801e764:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e768:	f7f3 f9e0 	bl	8011b2c <lv_draw_mask_apply>
 801e76c:	4603      	mov	r3, r0
 801e76e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e772:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e776:	4619      	mov	r1, r3
 801e778:	68f8      	ldr	r0, [r7, #12]
 801e77a:	f7f8 fda5 	bl	80172c8 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801e77e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e782:	3301      	adds	r3, #1
 801e784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e788:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e78c:	461a      	mov	r2, r3
 801e78e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e792:	4293      	cmp	r3, r2
 801e794:	dbd1      	blt.n	801e73a <draw_border_generic+0x69e>
                }
            }

            if(right_side || bottom_side) {
 801e796:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d103      	bne.n	801e7a6 <draw_border_generic+0x70a>
 801e79e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d033      	beq.n	801e80e <draw_border_generic+0x772>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e7a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e7aa:	3301      	adds	r3, #1
 801e7ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e7b0:	e026      	b.n	801e800 <draw_border_generic+0x764>
                    blend_area.y1 = h;
 801e7b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e7b6:	b21b      	sxth	r3, r3
 801e7b8:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 801e7ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e7be:	b21b      	sxth	r3, r3
 801e7c0:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 801e7c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e7c4:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 801e7c8:	4611      	mov	r1, r2
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	f004 f8c7 	bl	802295e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801e7d0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801e7d2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 801e7d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e7da:	b21a      	sxth	r2, r3
 801e7dc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801e7e0:	f7f3 f9a4 	bl	8011b2c <lv_draw_mask_apply>
 801e7e4:	4603      	mov	r3, r0
 801e7e6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e7ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e7ee:	4619      	mov	r1, r3
 801e7f0:	68f8      	ldr	r0, [r7, #12]
 801e7f2:	f7f8 fd69 	bl	80172c8 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 801e7f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e7fa:	3301      	adds	r3, #1
 801e7fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e800:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e804:	461a      	mov	r2, r3
 801e806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e80a:	4293      	cmp	r3, r2
 801e80c:	ddd1      	ble.n	801e7b2 <draw_border_generic+0x716>
                }
            }
        }
    }

    lv_draw_mask_free_param(&mask_rin_param);
 801e80e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e812:	4618      	mov	r0, r3
 801e814:	f7f3 fa1e 	bl	8011c54 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 801e818:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801e81c:	4618      	mov	r0, r3
 801e81e:	f7f3 f9c9 	bl	8011bb4 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 801e822:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801e826:	4618      	mov	r0, r3
 801e828:	f7f3 fa14 	bl	8011c54 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 801e82c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801e830:	4618      	mov	r0, r3
 801e832:	f7f3 f9bf 	bl	8011bb4 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 801e836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e838:	4618      	mov	r0, r3
 801e83a:	f003 fd11 	bl	8022260 <lv_mem_buf_release>
 801e83e:	e000      	b.n	801e842 <draw_border_generic+0x7a6>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801e840:	bf00      	nop
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
        return;
    }

#endif /*LV_DRAW_COMPLEX*/
}
 801e842:	3798      	adds	r7, #152	; 0x98
 801e844:	46bd      	mov	sp, r7
 801e846:	bd80      	pop	{r7, pc}

0801e848 <draw_border_simple>:
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 801e848:	b580      	push	{r7, lr}
 801e84a:	b08e      	sub	sp, #56	; 0x38
 801e84c:	af00      	add	r7, sp, #0
 801e84e:	60f8      	str	r0, [r7, #12]
 801e850:	60b9      	str	r1, [r7, #8]
 801e852:	607a      	str	r2, [r7, #4]
 801e854:	703b      	strb	r3, [r7, #0]
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 801e856:	f107 0310 	add.w	r3, r7, #16
 801e85a:	211c      	movs	r1, #28
 801e85c:	4618      	mov	r0, r3
 801e85e:	f003 fffd 	bl	802285c <lv_memset_00>
    blend_dsc.blend_area = &a;
 801e862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e866:	613b      	str	r3, [r7, #16]
    blend_dsc.color = color;
 801e868:	783b      	ldrb	r3, [r7, #0]
 801e86a:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = opa;
 801e86c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801e870:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 801e874:	68bb      	ldr	r3, [r7, #8]
 801e876:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e880:	429a      	cmp	r2, r3
 801e882:	bfd4      	ite	le
 801e884:	2301      	movle	r3, #1
 801e886:	2300      	movgt	r3, #0
 801e888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 801e88c:	68bb      	ldr	r3, [r7, #8]
 801e88e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e898:	429a      	cmp	r2, r3
 801e89a:	bfac      	ite	ge
 801e89c:	2301      	movge	r3, #1
 801e89e:	2300      	movlt	r3, #0
 801e8a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801e8a4:	68bb      	ldr	r3, [r7, #8]
 801e8a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e8b0:	429a      	cmp	r2, r3
 801e8b2:	bfd4      	ite	le
 801e8b4:	2301      	movle	r3, #1
 801e8b6:	2300      	movgt	r3, #0
 801e8b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801e8bc:	68bb      	ldr	r3, [r7, #8]
 801e8be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e8c8:	429a      	cmp	r2, r3
 801e8ca:	bfac      	ite	ge
 801e8cc:	2301      	movge	r3, #1
 801e8ce:	2300      	movlt	r3, #0
 801e8d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34


    /*Top*/
    a.x1 = outer_area->x1;
 801e8d4:	68bb      	ldr	r3, [r7, #8]
 801e8d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e8da:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801e8dc:	68bb      	ldr	r3, [r7, #8]
 801e8de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e8e2:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = outer_area->y1;
 801e8e4:	68bb      	ldr	r3, [r7, #8]
 801e8e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e8ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = inner_area->y1 - 1;
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e8f2:	b29b      	uxth	r3, r3
 801e8f4:	3b01      	subs	r3, #1
 801e8f6:	b29b      	uxth	r3, r3
 801e8f8:	b21b      	sxth	r3, r3
 801e8fa:	867b      	strh	r3, [r7, #50]	; 0x32
    if(top_side) {
 801e8fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801e900:	2b00      	cmp	r3, #0
 801e902:	d005      	beq.n	801e910 <draw_border_simple+0xc8>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e904:	f107 0310 	add.w	r3, r7, #16
 801e908:	4619      	mov	r1, r3
 801e90a:	68f8      	ldr	r0, [r7, #12]
 801e90c:	f7f8 fcdc 	bl	80172c8 <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e916:	b29b      	uxth	r3, r3
 801e918:	3301      	adds	r3, #1
 801e91a:	b29b      	uxth	r3, r3
 801e91c:	b21b      	sxth	r3, r3
 801e91e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = outer_area->y2;
 801e920:	68bb      	ldr	r3, [r7, #8]
 801e922:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e926:	867b      	strh	r3, [r7, #50]	; 0x32
    if(bottom_side) {
 801e928:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d005      	beq.n	801e93c <draw_border_simple+0xf4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e930:	f107 0310 	add.w	r3, r7, #16
 801e934:	4619      	mov	r1, r3
 801e936:	68f8      	ldr	r0, [r7, #12]
 801e938:	f7f8 fcc6 	bl	80172c8 <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
 801e93c:	68bb      	ldr	r3, [r7, #8]
 801e93e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e942:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = inner_area->x1 - 1;
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e94a:	b29b      	uxth	r3, r3
 801e94c:	3b01      	subs	r3, #1
 801e94e:	b29b      	uxth	r3, r3
 801e950:	b21b      	sxth	r3, r3
 801e952:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 801e954:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801e958:	2b00      	cmp	r3, #0
 801e95a:	d003      	beq.n	801e964 <draw_border_simple+0x11c>
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e962:	e002      	b.n	801e96a <draw_border_simple+0x122>
 801e964:	68bb      	ldr	r3, [r7, #8]
 801e966:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e96a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 801e96c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801e970:	2b00      	cmp	r3, #0
 801e972:	d003      	beq.n	801e97c <draw_border_simple+0x134>
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e97a:	e002      	b.n	801e982 <draw_border_simple+0x13a>
 801e97c:	68bb      	ldr	r3, [r7, #8]
 801e97e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e982:	867b      	strh	r3, [r7, #50]	; 0x32
    if(left_side) {
 801e984:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d005      	beq.n	801e998 <draw_border_simple+0x150>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e98c:	f107 0310 	add.w	r3, r7, #16
 801e990:	4619      	mov	r1, r3
 801e992:	68f8      	ldr	r0, [r7, #12]
 801e994:	f7f8 fc98 	bl	80172c8 <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e99e:	b29b      	uxth	r3, r3
 801e9a0:	3301      	adds	r3, #1
 801e9a2:	b29b      	uxth	r3, r3
 801e9a4:	b21b      	sxth	r3, r3
 801e9a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 801e9a8:	68bb      	ldr	r3, [r7, #8]
 801e9aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e9ae:	863b      	strh	r3, [r7, #48]	; 0x30
    if(right_side) {
 801e9b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d005      	beq.n	801e9c4 <draw_border_simple+0x17c>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e9b8:	f107 0310 	add.w	r3, r7, #16
 801e9bc:	4619      	mov	r1, r3
 801e9be:	68f8      	ldr	r0, [r7, #12]
 801e9c0:	f7f8 fc82 	bl	80172c8 <lv_draw_sw_blend>
    }
}
 801e9c4:	bf00      	nop
 801e9c6:	3738      	adds	r7, #56	; 0x38
 801e9c8:	46bd      	mov	sp, r7
 801e9ca:	bd80      	pop	{r7, pc}

0801e9cc <lv_color_mix>:
{
 801e9cc:	b480      	push	{r7}
 801e9ce:	b085      	sub	sp, #20
 801e9d0:	af00      	add	r7, sp, #0
 801e9d2:	7138      	strb	r0, [r7, #4]
 801e9d4:	7039      	strb	r1, [r7, #0]
 801e9d6:	4613      	mov	r3, r2
 801e9d8:	70fb      	strb	r3, [r7, #3]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 801e9da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	da01      	bge.n	801e9e6 <lv_color_mix+0x1a>
 801e9e2:	793b      	ldrb	r3, [r7, #4]
 801e9e4:	e000      	b.n	801e9e8 <lv_color_mix+0x1c>
 801e9e6:	783b      	ldrb	r3, [r7, #0]
 801e9e8:	733b      	strb	r3, [r7, #12]
    return ret;
 801e9ea:	7b3b      	ldrb	r3, [r7, #12]
}
 801e9ec:	4618      	mov	r0, r3
 801e9ee:	3714      	adds	r7, #20
 801e9f0:	46bd      	mov	sp, r7
 801e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9f6:	4770      	bx	lr

0801e9f8 <lv_area_get_width>:
{
 801e9f8:	b480      	push	{r7}
 801e9fa:	b083      	sub	sp, #12
 801e9fc:	af00      	add	r7, sp, #0
 801e9fe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ea06:	b29a      	uxth	r2, r3
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ea0e:	b29b      	uxth	r3, r3
 801ea10:	1ad3      	subs	r3, r2, r3
 801ea12:	b29b      	uxth	r3, r3
 801ea14:	3301      	adds	r3, #1
 801ea16:	b29b      	uxth	r3, r3
 801ea18:	b21b      	sxth	r3, r3
}
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	370c      	adds	r7, #12
 801ea1e:	46bd      	mov	sp, r7
 801ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea24:	4770      	bx	lr

0801ea26 <lv_area_get_height>:
{
 801ea26:	b480      	push	{r7}
 801ea28:	b083      	sub	sp, #12
 801ea2a:	af00      	add	r7, sp, #0
 801ea2c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ea34:	b29a      	uxth	r2, r3
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ea3c:	b29b      	uxth	r3, r3
 801ea3e:	1ad3      	subs	r3, r2, r3
 801ea40:	b29b      	uxth	r3, r3
 801ea42:	3301      	adds	r3, #1
 801ea44:	b29b      	uxth	r3, r3
 801ea46:	b21b      	sxth	r3, r3
}
 801ea48:	4618      	mov	r0, r3
 801ea4a:	370c      	adds	r7, #12
 801ea4c:	46bd      	mov	sp, r7
 801ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea52:	4770      	bx	lr

0801ea54 <lv_draw_sw_transform>:
 **********************/

void lv_draw_sw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf,
                          lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                          const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801ea54:	b590      	push	{r4, r7, lr}
 801ea56:	b0ab      	sub	sp, #172	; 0xac
 801ea58:	af08      	add	r7, sp, #32
 801ea5a:	60f8      	str	r0, [r7, #12]
 801ea5c:	60b9      	str	r1, [r7, #8]
 801ea5e:	607a      	str	r2, [r7, #4]
 801ea60:	807b      	strh	r3, [r7, #2]
    LV_UNUSED(draw_ctx);

    point_transform_dsc_t tr_dsc;
    tr_dsc.angle = -draw_dsc->angle;
 801ea62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ea66:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ea6a:	425b      	negs	r3, r3
 801ea6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 801ea6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ea72:	885b      	ldrh	r3, [r3, #2]
 801ea74:	461a      	mov	r2, r3
 801ea76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801ea7a:	fb93 f3f2 	sdiv	r3, r3, r2
 801ea7e:	63bb      	str	r3, [r7, #56]	; 0x38
    tr_dsc.pivot = draw_dsc->pivot;
 801ea80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ea84:	685b      	ldr	r3, [r3, #4]
 801ea86:	64bb      	str	r3, [r7, #72]	; 0x48

    int32_t angle_low = tr_dsc.angle / 10;
 801ea88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea8a:	4aaf      	ldr	r2, [pc, #700]	; (801ed48 <lv_draw_sw_transform+0x2f4>)
 801ea8c:	fb82 1203 	smull	r1, r2, r2, r3
 801ea90:	1092      	asrs	r2, r2, #2
 801ea92:	17db      	asrs	r3, r3, #31
 801ea94:	1ad3      	subs	r3, r2, r3
 801ea96:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t angle_high = angle_low + 1;
 801ea98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ea9a:	3301      	adds	r3, #1
 801ea9c:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 801ea9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801eaa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801eaa2:	f06f 0109 	mvn.w	r1, #9
 801eaa6:	fb01 f303 	mul.w	r3, r1, r3
 801eaaa:	4413      	add	r3, r2
 801eaac:	673b      	str	r3, [r7, #112]	; 0x70

    int32_t s1 = lv_trigo_sin(angle_low);
 801eaae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801eab0:	b21b      	sxth	r3, r3
 801eab2:	4618      	mov	r0, r3
 801eab4:	f003 f984 	bl	8021dc0 <lv_trigo_sin>
 801eab8:	4603      	mov	r3, r0
 801eaba:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t s2 = lv_trigo_sin(angle_high);
 801eabc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801eabe:	b21b      	sxth	r3, r3
 801eac0:	4618      	mov	r0, r3
 801eac2:	f003 f97d 	bl	8021dc0 <lv_trigo_sin>
 801eac6:	4603      	mov	r3, r0
 801eac8:	66bb      	str	r3, [r7, #104]	; 0x68

    int32_t c1 = lv_trigo_sin(angle_low + 90);
 801eaca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801eacc:	b29b      	uxth	r3, r3
 801eace:	335a      	adds	r3, #90	; 0x5a
 801ead0:	b29b      	uxth	r3, r3
 801ead2:	b21b      	sxth	r3, r3
 801ead4:	4618      	mov	r0, r3
 801ead6:	f003 f973 	bl	8021dc0 <lv_trigo_sin>
 801eada:	4603      	mov	r3, r0
 801eadc:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 801eade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801eae0:	b29b      	uxth	r3, r3
 801eae2:	335a      	adds	r3, #90	; 0x5a
 801eae4:	b29b      	uxth	r3, r3
 801eae6:	b21b      	sxth	r3, r3
 801eae8:	4618      	mov	r0, r3
 801eaea:	f003 f969 	bl	8021dc0 <lv_trigo_sin>
 801eaee:	4603      	mov	r3, r0
 801eaf0:	663b      	str	r3, [r7, #96]	; 0x60

    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801eaf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eaf4:	f1c3 030a 	rsb	r3, r3, #10
 801eaf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801eafa:	fb03 f202 	mul.w	r2, r3, r2
 801eafe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eb00:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801eb02:	fb01 f303 	mul.w	r3, r1, r3
 801eb06:	4413      	add	r3, r2
 801eb08:	4a8f      	ldr	r2, [pc, #572]	; (801ed48 <lv_draw_sw_transform+0x2f4>)
 801eb0a:	fb82 1203 	smull	r1, r2, r2, r3
 801eb0e:	1092      	asrs	r2, r2, #2
 801eb10:	17db      	asrs	r3, r3, #31
 801eb12:	1ad3      	subs	r3, r2, r3
 801eb14:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801eb16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eb18:	f1c3 030a 	rsb	r3, r3, #10
 801eb1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801eb1e:	fb03 f202 	mul.w	r2, r3, r2
 801eb22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801eb24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801eb26:	fb01 f303 	mul.w	r3, r1, r3
 801eb2a:	4413      	add	r3, r2
 801eb2c:	4a86      	ldr	r2, [pc, #536]	; (801ed48 <lv_draw_sw_transform+0x2f4>)
 801eb2e:	fb82 1203 	smull	r1, r2, r2, r3
 801eb32:	1092      	asrs	r2, r2, #2
 801eb34:	17db      	asrs	r3, r3, #31
 801eb36:	1ad3      	subs	r3, r2, r3
 801eb38:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 801eb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eb3c:	115b      	asrs	r3, r3, #5
 801eb3e:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 801eb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb42:	115b      	asrs	r3, r3, #5
 801eb44:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 801eb46:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801eb4a:	021b      	lsls	r3, r3, #8
 801eb4c:	643b      	str	r3, [r7, #64]	; 0x40
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 801eb4e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801eb52:	021b      	lsls	r3, r3, #8
 801eb54:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t dest_w = lv_area_get_width(dest_area);
 801eb56:	68b8      	ldr	r0, [r7, #8]
 801eb58:	f7ff ff4e 	bl	801e9f8 <lv_area_get_width>
 801eb5c:	4603      	mov	r3, r0
 801eb5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_coord_t dest_h = lv_area_get_height(dest_area);
 801eb62:	68b8      	ldr	r0, [r7, #8]
 801eb64:	f7ff ff5f 	bl	801ea26 <lv_area_get_height>
 801eb68:	4603      	mov	r3, r0
 801eb6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_coord_t y;
    for(y = 0; y < dest_h; y++) {
 801eb6e:	2300      	movs	r3, #0
 801eb70:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801eb74:	e0db      	b.n	801ed2e <lv_draw_sw_transform+0x2da>
        int32_t xs1_ups, ys1_ups, xs2_ups, ys2_ups;

        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 801eb76:	68bb      	ldr	r3, [r7, #8]
 801eb78:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb7c:	461c      	mov	r4, r3
 801eb7e:	68bb      	ldr	r3, [r7, #8]
 801eb80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801eb84:	461a      	mov	r2, r3
 801eb86:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801eb8a:	441a      	add	r2, r3
 801eb8c:	f107 011c 	add.w	r1, r7, #28
 801eb90:	f107 0020 	add.w	r0, r7, #32
 801eb94:	f107 0318 	add.w	r3, r7, #24
 801eb98:	9300      	str	r3, [sp, #0]
 801eb9a:	460b      	mov	r3, r1
 801eb9c:	4621      	mov	r1, r4
 801eb9e:	f000 fbff 	bl	801f3a0 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 801eba2:	68bb      	ldr	r3, [r7, #8]
 801eba4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eba8:	461c      	mov	r4, r3
 801ebaa:	68bb      	ldr	r3, [r7, #8]
 801ebac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ebb0:	461a      	mov	r2, r3
 801ebb2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ebb6:	441a      	add	r2, r3
 801ebb8:	f107 0114 	add.w	r1, r7, #20
 801ebbc:	f107 0020 	add.w	r0, r7, #32
 801ebc0:	f107 0310 	add.w	r3, r7, #16
 801ebc4:	9300      	str	r3, [sp, #0]
 801ebc6:	460b      	mov	r3, r1
 801ebc8:	4621      	mov	r1, r4
 801ebca:	f000 fbe9 	bl	801f3a0 <transform_point_upscaled>

        int32_t xs_diff = xs2_ups - xs1_ups;
 801ebce:	697a      	ldr	r2, [r7, #20]
 801ebd0:	69fb      	ldr	r3, [r7, #28]
 801ebd2:	1ad3      	subs	r3, r2, r3
 801ebd4:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_diff = ys2_ups - ys1_ups;
 801ebd6:	693a      	ldr	r2, [r7, #16]
 801ebd8:	69bb      	ldr	r3, [r7, #24]
 801ebda:	1ad3      	subs	r3, r2, r3
 801ebdc:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t xs_step_256 = 0;
 801ebde:	2300      	movs	r3, #0
 801ebe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ys_step_256 = 0;
 801ebe4:	2300      	movs	r3, #0
 801ebe6:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(dest_w > 1) {
 801ebe8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ebec:	2b01      	cmp	r3, #1
 801ebee:	dd10      	ble.n	801ec12 <lv_draw_sw_transform+0x1be>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 801ebf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ebf2:	021a      	lsls	r2, r3, #8
 801ebf4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ebf8:	3b01      	subs	r3, #1
 801ebfa:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 801ec02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ec04:	021a      	lsls	r2, r3, #8
 801ec06:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ec0a:	3b01      	subs	r3, #1
 801ec0c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec10:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        int32_t xs_ups = xs1_ups + 0x80;
 801ec12:	69fb      	ldr	r3, [r7, #28]
 801ec14:	3380      	adds	r3, #128	; 0x80
 801ec16:	653b      	str	r3, [r7, #80]	; 0x50
        int32_t ys_ups = ys1_ups + 0x80;
 801ec18:	69bb      	ldr	r3, [r7, #24]
 801ec1a:	3380      	adds	r3, #128	; 0x80
 801ec1c:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(draw_dsc->antialias == 0) {
 801ec1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ec22:	7c1b      	ldrb	r3, [r3, #16]
 801ec24:	f003 0301 	and.w	r3, r3, #1
 801ec28:	b2db      	uxtb	r3, r3
 801ec2a:	2b00      	cmp	r3, #0
 801ec2c:	d148      	bne.n	801ecc0 <lv_draw_sw_transform+0x26c>
            switch(cf) {
 801ec2e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801ec32:	2b06      	cmp	r3, #6
 801ec34:	d023      	beq.n	801ec7e <lv_draw_sw_transform+0x22a>
 801ec36:	2b06      	cmp	r3, #6
 801ec38:	dc63      	bgt.n	801ed02 <lv_draw_sw_transform+0x2ae>
 801ec3a:	2b04      	cmp	r3, #4
 801ec3c:	d01f      	beq.n	801ec7e <lv_draw_sw_transform+0x22a>
 801ec3e:	2b05      	cmp	r3, #5
 801ec40:	d15f      	bne.n	801ed02 <lv_draw_sw_transform+0x2ae>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    argb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf);
 801ec42:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ec46:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801ec4a:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801ec4e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801ec52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ec56:	9206      	str	r2, [sp, #24]
 801ec58:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ec5c:	9205      	str	r2, [sp, #20]
 801ec5e:	9304      	str	r3, [sp, #16]
 801ec60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ec62:	9303      	str	r3, [sp, #12]
 801ec64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ec68:	9302      	str	r3, [sp, #8]
 801ec6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ec6c:	9301      	str	r3, [sp, #4]
 801ec6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ec70:	9300      	str	r3, [sp, #0]
 801ec72:	4623      	mov	r3, r4
 801ec74:	4602      	mov	r2, r0
 801ec76:	6878      	ldr	r0, [r7, #4]
 801ec78:	f000 f8ee 	bl	801ee58 <argb_no_aa>
                    break;
 801ec7c:	e042      	b.n	801ed04 <lv_draw_sw_transform+0x2b0>
                case LV_IMG_CF_TRUE_COLOR:
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    rgb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801ec7e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ec82:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801ec86:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801ec8a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801ec8e:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801ec92:	9207      	str	r2, [sp, #28]
 801ec94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ec98:	9206      	str	r2, [sp, #24]
 801ec9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ec9e:	9205      	str	r2, [sp, #20]
 801eca0:	9304      	str	r3, [sp, #16]
 801eca2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801eca4:	9303      	str	r3, [sp, #12]
 801eca6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ecaa:	9302      	str	r3, [sp, #8]
 801ecac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ecae:	9301      	str	r3, [sp, #4]
 801ecb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ecb2:	9300      	str	r3, [sp, #0]
 801ecb4:	4623      	mov	r3, r4
 801ecb6:	4602      	mov	r2, r0
 801ecb8:	6878      	ldr	r0, [r7, #4]
 801ecba:	f000 f847 	bl	801ed4c <rgb_no_aa>
                    break;
 801ecbe:	e021      	b.n	801ed04 <lv_draw_sw_transform+0x2b0>
                default:
                    break;
            }
        }
        else {
            argb_and_rgb_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 801ecc0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ecc4:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 801ecc8:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 801eccc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801ecd0:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801ecd4:	9207      	str	r2, [sp, #28]
 801ecd6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ecda:	9206      	str	r2, [sp, #24]
 801ecdc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ece0:	9205      	str	r2, [sp, #20]
 801ece2:	9304      	str	r3, [sp, #16]
 801ece4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ece6:	9303      	str	r3, [sp, #12]
 801ece8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ecec:	9302      	str	r3, [sp, #8]
 801ecee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ecf0:	9301      	str	r3, [sp, #4]
 801ecf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ecf4:	9300      	str	r3, [sp, #0]
 801ecf6:	4623      	mov	r3, r4
 801ecf8:	4602      	mov	r2, r0
 801ecfa:	6878      	ldr	r0, [r7, #4]
 801ecfc:	f000 f91d 	bl	801ef3a <argb_and_rgb_aa>
 801ed00:	e000      	b.n	801ed04 <lv_draw_sw_transform+0x2b0>
                    break;
 801ed02:	bf00      	nop
        }

        cbuf += dest_w;
 801ed04:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ed08:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ed0c:	4413      	add	r3, r2
 801ed0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        abuf += dest_w;
 801ed12:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801ed16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801ed1a:	4413      	add	r3, r2
 801ed1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for(y = 0; y < dest_h; y++) {
 801ed20:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ed24:	b29b      	uxth	r3, r3
 801ed26:	3301      	adds	r3, #1
 801ed28:	b29b      	uxth	r3, r3
 801ed2a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801ed2e:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801ed32:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801ed36:	429a      	cmp	r2, r3
 801ed38:	f6ff af1d 	blt.w	801eb76 <lv_draw_sw_transform+0x122>
    }
}
 801ed3c:	bf00      	nop
 801ed3e:	bf00      	nop
 801ed40:	378c      	adds	r7, #140	; 0x8c
 801ed42:	46bd      	mov	sp, r7
 801ed44:	bd90      	pop	{r4, r7, pc}
 801ed46:	bf00      	nop
 801ed48:	66666667 	.word	0x66666667

0801ed4c <rgb_no_aa>:
 **********************/

static void rgb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                      int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                      int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801ed4c:	b580      	push	{r7, lr}
 801ed4e:	b08c      	sub	sp, #48	; 0x30
 801ed50:	af00      	add	r7, sp, #0
 801ed52:	60f8      	str	r0, [r7, #12]
 801ed54:	4608      	mov	r0, r1
 801ed56:	4611      	mov	r1, r2
 801ed58:	461a      	mov	r2, r3
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	817b      	strh	r3, [r7, #10]
 801ed5e:	460b      	mov	r3, r1
 801ed60:	813b      	strh	r3, [r7, #8]
 801ed62:	4613      	mov	r3, r2
 801ed64:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ed68:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t ys_ups_start = ys_ups;
 801ed6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ed6c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801ed6e:	f7ef fdd1 	bl	800e914 <_lv_refr_get_disp_refreshing>
 801ed72:	6238      	str	r0, [r7, #32]
    lv_color_t ck = d->driver->color_chroma_key;
 801ed74:	6a3b      	ldr	r3, [r7, #32]
 801ed76:	681b      	ldr	r3, [r3, #0]
 801ed78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ed7c:	743b      	strb	r3, [r7, #16]

    lv_memset_ff(abuf, x_end);
 801ed7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ed80:	4619      	mov	r1, r3
 801ed82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ed84:	f003 fdeb 	bl	802295e <lv_memset_ff>

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801ed88:	2300      	movs	r3, #0
 801ed8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ed8c:	e05a      	b.n	801ee44 <rgb_no_aa+0xf8>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801ed8e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ed92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ed94:	fb02 f303 	mul.w	r3, r2, r3
 801ed98:	121b      	asrs	r3, r3, #8
 801ed9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ed9c:	4413      	add	r3, r2
 801ed9e:	63bb      	str	r3, [r7, #56]	; 0x38
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801eda0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801eda4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eda6:	fb02 f303 	mul.w	r3, r2, r3
 801edaa:	121b      	asrs	r3, r3, #8
 801edac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801edae:	4413      	add	r3, r2
 801edb0:	63fb      	str	r3, [r7, #60]	; 0x3c

        int32_t xs_int = xs_ups >> 8;
 801edb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801edb4:	121b      	asrs	r3, r3, #8
 801edb6:	61fb      	str	r3, [r7, #28]
        int32_t ys_int = ys_ups >> 8;
 801edb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801edba:	121b      	asrs	r3, r3, #8
 801edbc:	61bb      	str	r3, [r7, #24]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801edbe:	69fb      	ldr	r3, [r7, #28]
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	db0c      	blt.n	801edde <rgb_no_aa+0x92>
 801edc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801edc8:	69fa      	ldr	r2, [r7, #28]
 801edca:	429a      	cmp	r2, r3
 801edcc:	da07      	bge.n	801edde <rgb_no_aa+0x92>
 801edce:	69bb      	ldr	r3, [r7, #24]
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	db04      	blt.n	801edde <rgb_no_aa+0x92>
 801edd4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801edd8:	69ba      	ldr	r2, [r7, #24]
 801edda:	429a      	cmp	r2, r3
 801eddc:	db06      	blt.n	801edec <rgb_no_aa+0xa0>
            abuf[x] = 0x00;
 801edde:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ede2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ede4:	4413      	add	r3, r2
 801ede6:	2200      	movs	r2, #0
 801ede8:	701a      	strb	r2, [r3, #0]
 801edea:	e013      	b.n	801ee14 <rgb_no_aa+0xc8>
        }
        else {

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            const uint8_t * src_tmp = src;
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	617b      	str	r3, [r7, #20]
            src_tmp += ys_int * src_stride + xs_int;
 801edf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801edf4:	69ba      	ldr	r2, [r7, #24]
 801edf6:	fb03 f202 	mul.w	r2, r3, r2
 801edfa:	69fb      	ldr	r3, [r7, #28]
 801edfc:	4413      	add	r3, r2
 801edfe:	461a      	mov	r2, r3
 801ee00:	697b      	ldr	r3, [r7, #20]
 801ee02:	4413      	add	r3, r2
 801ee04:	617b      	str	r3, [r7, #20]
            cbuf[x].full = src_tmp[0];
 801ee06:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ee0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ee0c:	4413      	add	r3, r2
 801ee0e:	697a      	ldr	r2, [r7, #20]
 801ee10:	7812      	ldrb	r2, [r2, #0]
 801ee12:	701a      	strb	r2, [r3, #0]
            const uint8_t * src_tmp = src;
            src_tmp += (ys_int * src_stride * sizeof(lv_color_t)) + xs_int * sizeof(lv_color_t);
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
        }
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 801ee14:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ee18:	2b06      	cmp	r3, #6
 801ee1a:	d10d      	bne.n	801ee38 <rgb_no_aa+0xec>
 801ee1c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ee20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ee22:	4413      	add	r3, r2
 801ee24:	781a      	ldrb	r2, [r3, #0]
 801ee26:	7c3b      	ldrb	r3, [r7, #16]
 801ee28:	429a      	cmp	r2, r3
 801ee2a:	d105      	bne.n	801ee38 <rgb_no_aa+0xec>
            abuf[x] = 0x00;
 801ee2c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ee30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ee32:	4413      	add	r3, r2
 801ee34:	2200      	movs	r2, #0
 801ee36:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801ee38:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ee3c:	b29b      	uxth	r3, r3
 801ee3e:	3301      	adds	r3, #1
 801ee40:	b29b      	uxth	r3, r3
 801ee42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ee44:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801ee48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ee4a:	429a      	cmp	r2, r3
 801ee4c:	dc9f      	bgt.n	801ed8e <rgb_no_aa+0x42>
        }
    }
}
 801ee4e:	bf00      	nop
 801ee50:	bf00      	nop
 801ee52:	3730      	adds	r7, #48	; 0x30
 801ee54:	46bd      	mov	sp, r7
 801ee56:	bd80      	pop	{r7, pc}

0801ee58 <argb_no_aa>:

static void argb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                       int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                       int32_t x_end, lv_color_t * cbuf, uint8_t * abuf)
{
 801ee58:	b480      	push	{r7}
 801ee5a:	b08b      	sub	sp, #44	; 0x2c
 801ee5c:	af00      	add	r7, sp, #0
 801ee5e:	60f8      	str	r0, [r7, #12]
 801ee60:	4608      	mov	r0, r1
 801ee62:	4611      	mov	r1, r2
 801ee64:	461a      	mov	r2, r3
 801ee66:	4603      	mov	r3, r0
 801ee68:	817b      	strh	r3, [r7, #10]
 801ee6a:	460b      	mov	r3, r1
 801ee6c:	813b      	strh	r3, [r7, #8]
 801ee6e:	4613      	mov	r3, r2
 801ee70:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee74:	623b      	str	r3, [r7, #32]
    int32_t ys_ups_start = ys_ups;
 801ee76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ee78:	61fb      	str	r3, [r7, #28]

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801ee7a:	2300      	movs	r3, #0
 801ee7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ee7e:	e050      	b.n	801ef22 <argb_no_aa+0xca>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801ee80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ee84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ee86:	fb02 f303 	mul.w	r3, r2, r3
 801ee8a:	121b      	asrs	r3, r3, #8
 801ee8c:	6a3a      	ldr	r2, [r7, #32]
 801ee8e:	4413      	add	r3, r2
 801ee90:	633b      	str	r3, [r7, #48]	; 0x30
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801ee92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ee96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ee98:	fb02 f303 	mul.w	r3, r2, r3
 801ee9c:	121b      	asrs	r3, r3, #8
 801ee9e:	69fa      	ldr	r2, [r7, #28]
 801eea0:	4413      	add	r3, r2
 801eea2:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t xs_int = xs_ups >> 8;
 801eea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eea6:	121b      	asrs	r3, r3, #8
 801eea8:	61bb      	str	r3, [r7, #24]
        int32_t ys_int = ys_ups >> 8;
 801eeaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eeac:	121b      	asrs	r3, r3, #8
 801eeae:	617b      	str	r3, [r7, #20]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801eeb0:	69bb      	ldr	r3, [r7, #24]
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	db0c      	blt.n	801eed0 <argb_no_aa+0x78>
 801eeb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801eeba:	69ba      	ldr	r2, [r7, #24]
 801eebc:	429a      	cmp	r2, r3
 801eebe:	da07      	bge.n	801eed0 <argb_no_aa+0x78>
 801eec0:	697b      	ldr	r3, [r7, #20]
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	db04      	blt.n	801eed0 <argb_no_aa+0x78>
 801eec6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801eeca:	697a      	ldr	r2, [r7, #20]
 801eecc:	429a      	cmp	r2, r3
 801eece:	db06      	blt.n	801eede <argb_no_aa+0x86>
            abuf[x] = 0;
 801eed0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801eed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801eed6:	4413      	add	r3, r2
 801eed8:	2200      	movs	r2, #0
 801eeda:	701a      	strb	r2, [r3, #0]
 801eedc:	e01b      	b.n	801ef16 <argb_no_aa+0xbe>
        }
        else {
            const uint8_t * src_tmp = src;
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	613b      	str	r3, [r7, #16]
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801eee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801eee6:	697a      	ldr	r2, [r7, #20]
 801eee8:	fb03 f202 	mul.w	r2, r3, r2
 801eeec:	69bb      	ldr	r3, [r7, #24]
 801eeee:	4413      	add	r3, r2
 801eef0:	005b      	lsls	r3, r3, #1
 801eef2:	461a      	mov	r2, r3
 801eef4:	693b      	ldr	r3, [r7, #16]
 801eef6:	4413      	add	r3, r2
 801eef8:	613b      	str	r3, [r7, #16]

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801eefa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801eefe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef00:	4413      	add	r3, r2
 801ef02:	693a      	ldr	r2, [r7, #16]
 801ef04:	7812      	ldrb	r2, [r2, #0]
 801ef06:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 16
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801ef08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ef0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ef0e:	4413      	add	r3, r2
 801ef10:	693a      	ldr	r2, [r7, #16]
 801ef12:	7852      	ldrb	r2, [r2, #1]
 801ef14:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 801ef16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ef1a:	b29b      	uxth	r3, r3
 801ef1c:	3301      	adds	r3, #1
 801ef1e:	b29b      	uxth	r3, r3
 801ef20:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ef22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ef26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ef28:	429a      	cmp	r2, r3
 801ef2a:	dca9      	bgt.n	801ee80 <argb_no_aa+0x28>
        }
    }
}
 801ef2c:	bf00      	nop
 801ef2e:	bf00      	nop
 801ef30:	372c      	adds	r7, #44	; 0x2c
 801ef32:	46bd      	mov	sp, r7
 801ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef38:	4770      	bx	lr

0801ef3a <argb_and_rgb_aa>:


static void argb_and_rgb_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                            int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                            int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 801ef3a:	b590      	push	{r4, r7, lr}
 801ef3c:	b09b      	sub	sp, #108	; 0x6c
 801ef3e:	af00      	add	r7, sp, #0
 801ef40:	60f8      	str	r0, [r7, #12]
 801ef42:	4608      	mov	r0, r1
 801ef44:	4611      	mov	r1, r2
 801ef46:	461a      	mov	r2, r3
 801ef48:	4603      	mov	r3, r0
 801ef4a:	817b      	strh	r3, [r7, #10]
 801ef4c:	460b      	mov	r3, r1
 801ef4e:	813b      	strh	r3, [r7, #8]
 801ef50:	4613      	mov	r3, r2
 801ef52:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 801ef54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ef56:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t ys_ups_start = ys_ups;
 801ef58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ef5a:	643b      	str	r3, [r7, #64]	; 0x40
    bool has_alpha;
    int32_t px_size;
    lv_color_t ck = {0};
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	f887 3020 	strb.w	r3, [r7, #32]
    switch(cf) {
 801ef62:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801ef66:	2b06      	cmp	r3, #6
 801ef68:	d013      	beq.n	801ef92 <argb_and_rgb_aa+0x58>
 801ef6a:	2b06      	cmp	r3, #6
 801ef6c:	f300 8214 	bgt.w	801f398 <argb_and_rgb_aa+0x45e>
 801ef70:	2b04      	cmp	r3, #4
 801ef72:	d002      	beq.n	801ef7a <argb_and_rgb_aa+0x40>
 801ef74:	2b05      	cmp	r3, #5
 801ef76:	d006      	beq.n	801ef86 <argb_and_rgb_aa+0x4c>
            has_alpha = true;
            px_size = sizeof(lv_color_t);
            break;
#endif
        default:
            return;
 801ef78:	e20e      	b.n	801f398 <argb_and_rgb_aa+0x45e>
            has_alpha = false;
 801ef7a:	2300      	movs	r3, #0
 801ef7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = sizeof(lv_color_t);
 801ef80:	2301      	movs	r3, #1
 801ef82:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801ef84:	e014      	b.n	801efb0 <argb_and_rgb_aa+0x76>
            has_alpha = true;
 801ef86:	2301      	movs	r3, #1
 801ef88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 801ef8c:	2302      	movs	r3, #2
 801ef8e:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 801ef90:	e00e      	b.n	801efb0 <argb_and_rgb_aa+0x76>
                has_alpha = true;
 801ef92:	2301      	movs	r3, #1
 801ef94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                px_size = sizeof(lv_color_t);
 801ef98:	2301      	movs	r3, #1
 801ef9a:	663b      	str	r3, [r7, #96]	; 0x60
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801ef9c:	f7ef fcba 	bl	800e914 <_lv_refr_get_disp_refreshing>
 801efa0:	63f8      	str	r0, [r7, #60]	; 0x3c
                ck = d->driver->color_chroma_key;
 801efa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801efa4:	681b      	ldr	r3, [r3, #0]
 801efa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801efaa:	f887 3020 	strb.w	r3, [r7, #32]
                break;
 801efae:	bf00      	nop
    }

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 801efb0:	2300      	movs	r3, #0
 801efb2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801efb6:	e1e7      	b.n	801f388 <argb_and_rgb_aa+0x44e>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801efb8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801efbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801efc0:	fb02 f303 	mul.w	r3, r2, r3
 801efc4:	121b      	asrs	r3, r3, #8
 801efc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801efc8:	4413      	add	r3, r2
 801efca:	67bb      	str	r3, [r7, #120]	; 0x78
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801efcc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801efd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801efd4:	fb02 f303 	mul.w	r3, r2, r3
 801efd8:	121b      	asrs	r3, r3, #8
 801efda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801efdc:	4413      	add	r3, r2
 801efde:	67fb      	str	r3, [r7, #124]	; 0x7c

        int32_t xs_int = xs_ups >> 8;
 801efe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801efe2:	121b      	asrs	r3, r3, #8
 801efe4:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t ys_int = ys_ups >> 8;
 801efe6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801efe8:	121b      	asrs	r3, r3, #8
 801efea:	637b      	str	r3, [r7, #52]	; 0x34

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801efec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801efee:	2b00      	cmp	r3, #0
 801eff0:	db0c      	blt.n	801f00c <argb_and_rgb_aa+0xd2>
 801eff2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801eff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801eff8:	429a      	cmp	r2, r3
 801effa:	da07      	bge.n	801f00c <argb_and_rgb_aa+0xd2>
 801effc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801effe:	2b00      	cmp	r3, #0
 801f000:	db04      	blt.n	801f00c <argb_and_rgb_aa+0xd2>
 801f002:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f008:	429a      	cmp	r2, r3
 801f00a:	db07      	blt.n	801f01c <argb_and_rgb_aa+0xe2>
            abuf[x] = 0x00;
 801f00c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f010:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f014:	4413      	add	r3, r2
 801f016:	2200      	movs	r2, #0
 801f018:	701a      	strb	r2, [r3, #0]
            continue;
 801f01a:	e1ae      	b.n	801f37a <argb_and_rgb_aa+0x440>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 801f01c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f01e:	b2db      	uxtb	r3, r3
 801f020:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_fract = ys_ups & 0xFF;
 801f022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801f024:	b2db      	uxtb	r3, r3
 801f026:	657b      	str	r3, [r7, #84]	; 0x54

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 801f028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f02a:	2b7f      	cmp	r3, #127	; 0x7f
 801f02c:	dc08      	bgt.n	801f040 <argb_and_rgb_aa+0x106>
            x_next = -1;
 801f02e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f032:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (0x7F - xs_fract) * 2;
 801f034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f036:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801f03a:	005b      	lsls	r3, r3, #1
 801f03c:	65bb      	str	r3, [r7, #88]	; 0x58
 801f03e:	e005      	b.n	801f04c <argb_and_rgb_aa+0x112>
        }
        else {
            x_next = 1;
 801f040:	2301      	movs	r3, #1
 801f042:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (xs_fract - 0x80) * 2;
 801f044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f046:	3b80      	subs	r3, #128	; 0x80
 801f048:	005b      	lsls	r3, r3, #1
 801f04a:	65bb      	str	r3, [r7, #88]	; 0x58
        }
        if(ys_fract < 0x80) {
 801f04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f04e:	2b7f      	cmp	r3, #127	; 0x7f
 801f050:	dc08      	bgt.n	801f064 <argb_and_rgb_aa+0x12a>
            y_next = -1;
 801f052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f056:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (0x7F - ys_fract) * 2;
 801f058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f05a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801f05e:	005b      	lsls	r3, r3, #1
 801f060:	657b      	str	r3, [r7, #84]	; 0x54
 801f062:	e005      	b.n	801f070 <argb_and_rgb_aa+0x136>
        }
        else {
            y_next = 1;
 801f064:	2301      	movs	r3, #1
 801f066:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (ys_fract - 0x80) * 2;
 801f068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f06a:	3b80      	subs	r3, #128	; 0x80
 801f06c:	005b      	lsls	r3, r3, #1
 801f06e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        const uint8_t * src_tmp = src;
 801f070:	68fb      	ldr	r3, [r7, #12]
 801f072:	633b      	str	r3, [r7, #48]	; 0x30
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 801f074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f07a:	fb02 f303 	mul.w	r3, r2, r3
 801f07e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f080:	fb03 f202 	mul.w	r2, r3, r2
 801f084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f086:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801f088:	fb01 f303 	mul.w	r3, r1, r3
 801f08c:	4413      	add	r3, r2
 801f08e:	461a      	mov	r2, r3
 801f090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f092:	4413      	add	r3, r2
 801f094:	633b      	str	r3, [r7, #48]	; 0x30


        if(xs_int + x_next >= 0 &&
 801f096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f09a:	4413      	add	r3, r2
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	f2c0 80fe 	blt.w	801f29e <argb_and_rgb_aa+0x364>
           xs_int + x_next <= src_w - 1 &&
 801f0a2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801f0a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801f0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0aa:	440b      	add	r3, r1
        if(xs_int + x_next >= 0 &&
 801f0ac:	429a      	cmp	r2, r3
 801f0ae:	f340 80f6 	ble.w	801f29e <argb_and_rgb_aa+0x364>
           ys_int + y_next >= 0 &&
 801f0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f0b6:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 801f0b8:	2b00      	cmp	r3, #0
 801f0ba:	f2c0 80f0 	blt.w	801f29e <argb_and_rgb_aa+0x364>
           ys_int + y_next <= src_h - 1) {
 801f0be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801f0c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f0c6:	440b      	add	r3, r1
           ys_int + y_next >= 0 &&
 801f0c8:	429a      	cmp	r2, r3
 801f0ca:	f340 80e8 	ble.w	801f29e <argb_and_rgb_aa+0x364>

            const uint8_t * px_base = src_tmp;
 801f0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 801f0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f0d6:	fb02 f303 	mul.w	r3, r2, r3
 801f0da:	461a      	mov	r2, r3
 801f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0de:	4413      	add	r3, r2
 801f0e0:	62bb      	str	r3, [r7, #40]	; 0x28
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 801f0e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f0e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f0e8:	fb02 f303 	mul.w	r3, r2, r3
 801f0ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f0ee:	fb02 f303 	mul.w	r3, r2, r3
 801f0f2:	461a      	mov	r2, r3
 801f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0f6:	4413      	add	r3, r2
 801f0f8:	627b      	str	r3, [r7, #36]	; 0x24
            lv_color_t c_base;
            lv_color_t c_ver;
            lv_color_t c_hor;

            if(has_alpha) {
 801f0fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	f000 808e 	beq.w	801f220 <argb_and_rgb_aa+0x2e6>
                lv_opa_t a_base;
                lv_opa_t a_ver;
                lv_opa_t a_hor;
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801f104:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801f108:	2b05      	cmp	r3, #5
 801f10a:	d10c      	bne.n	801f126 <argb_and_rgb_aa+0x1ec>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f10e:	785b      	ldrb	r3, [r3, #1]
 801f110:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f116:	785b      	ldrb	r3, [r3, #1]
 801f118:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801f11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f11e:	785b      	ldrb	r3, [r3, #1]
 801f120:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801f124:	e030      	b.n	801f188 <argb_and_rgb_aa+0x24e>
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
                }
#endif
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801f126:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801f12a:	2b06      	cmp	r3, #6
 801f12c:	d123      	bne.n	801f176 <argb_and_rgb_aa+0x23c>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f130:	781a      	ldrb	r2, [r3, #0]
 801f132:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f136:	429a      	cmp	r2, r3
 801f138:	d00b      	beq.n	801f152 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f13c:	781a      	ldrb	r2, [r3, #0]
 801f13e:	f897 3020 	ldrb.w	r3, [r7, #32]
                    if(((lv_color_t *)px_base)->full == ck.full ||
 801f142:	429a      	cmp	r2, r3
 801f144:	d005      	beq.n	801f152 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_hor)->full == ck.full) {
 801f146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f148:	781a      	ldrb	r2, [r3, #0]
 801f14a:	f897 3020 	ldrb.w	r3, [r7, #32]
                       ((lv_color_t *)px_ver)->full == ck.full ||
 801f14e:	429a      	cmp	r2, r3
 801f150:	d107      	bne.n	801f162 <argb_and_rgb_aa+0x228>
                        abuf[x] = 0x00;
 801f152:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f156:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f15a:	4413      	add	r3, r2
 801f15c:	2200      	movs	r2, #0
 801f15e:	701a      	strb	r2, [r3, #0]
                        continue;
 801f160:	e10b      	b.n	801f37a <argb_and_rgb_aa+0x440>
                    }
                    else {
                        a_base = 0xff;
 801f162:	23ff      	movs	r3, #255	; 0xff
 801f164:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                        a_ver = 0xff;
 801f168:	23ff      	movs	r3, #255	; 0xff
 801f16a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                        a_hor = 0xff;
 801f16e:	23ff      	movs	r3, #255	; 0xff
 801f170:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 801f174:	e008      	b.n	801f188 <argb_and_rgb_aa+0x24e>
                    }
                }
                else {
                    a_base = 0xff;
 801f176:	23ff      	movs	r3, #255	; 0xff
 801f178:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = 0xff;
 801f17c:	23ff      	movs	r3, #255	; 0xff
 801f17e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = 0xff;
 801f182:	23ff      	movs	r3, #255	; 0xff
 801f184:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                }

                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 801f188:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801f18c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801f190:	429a      	cmp	r2, r3
 801f192:	d00f      	beq.n	801f1b4 <argb_and_rgb_aa+0x27a>
 801f194:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801f198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f19a:	fb03 f202 	mul.w	r2, r3, r2
 801f19e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801f1a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f1a4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801f1a8:	fb01 f303 	mul.w	r3, r1, r3
 801f1ac:	4413      	add	r3, r2
 801f1ae:	121b      	asrs	r3, r3, #8
 801f1b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 801f1b4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 801f1b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801f1bc:	429a      	cmp	r2, r3
 801f1be:	d00f      	beq.n	801f1e0 <argb_and_rgb_aa+0x2a6>
 801f1c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801f1c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f1c6:	fb03 f202 	mul.w	r2, r3, r2
 801f1ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801f1ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801f1d0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801f1d4:	fb01 f303 	mul.w	r3, r1, r3
 801f1d8:	4413      	add	r3, r2
 801f1da:	121b      	asrs	r3, r3, #8
 801f1dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                abuf[x] = (a_ver + a_hor) >> 1;
 801f1e0:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 801f1e4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 801f1e8:	4413      	add	r3, r2
 801f1ea:	1059      	asrs	r1, r3, #1
 801f1ec:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f1f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f1f4:	4413      	add	r3, r2
 801f1f6:	b2ca      	uxtb	r2, r1
 801f1f8:	701a      	strb	r2, [r3, #0]

                if(abuf[x] == 0x00) continue;
 801f1fa:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f1fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f202:	4413      	add	r3, r2
 801f204:	781b      	ldrb	r3, [r3, #0]
 801f206:	2b00      	cmp	r3, #0
 801f208:	f000 80b6 	beq.w	801f378 <argb_and_rgb_aa+0x43e>

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
                c_base.full = px_base[0];
 801f20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f20e:	781b      	ldrb	r3, [r3, #0]
 801f210:	773b      	strb	r3, [r7, #28]
                c_ver.full = px_ver[0];
 801f212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f214:	781b      	ldrb	r3, [r3, #0]
 801f216:	763b      	strb	r3, [r7, #24]
                c_hor.full = px_hor[0];
 801f218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f21a:	781b      	ldrb	r3, [r3, #0]
 801f21c:	753b      	strb	r3, [r7, #20]
 801f21e:	e00f      	b.n	801f240 <argb_and_rgb_aa+0x306>
                c_hor.full = *((uint32_t *)px_hor);
#endif
            }
            /*No alpha channel -> RGB*/
            else {
                c_base = *((const lv_color_t *) px_base);
 801f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f222:	781b      	ldrb	r3, [r3, #0]
 801f224:	773b      	strb	r3, [r7, #28]
                c_hor = *((const lv_color_t *) px_hor);
 801f226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f228:	781b      	ldrb	r3, [r3, #0]
 801f22a:	753b      	strb	r3, [r7, #20]
                c_ver = *((const lv_color_t *) px_ver);
 801f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f22e:	781b      	ldrb	r3, [r3, #0]
 801f230:	763b      	strb	r3, [r7, #24]
                abuf[x] = 0xff;
 801f232:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f236:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f23a:	4413      	add	r3, r2
 801f23c:	22ff      	movs	r2, #255	; 0xff
 801f23e:	701a      	strb	r2, [r3, #0]
            }

            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 801f240:	7f3a      	ldrb	r2, [r7, #28]
 801f242:	7e3b      	ldrb	r3, [r7, #24]
 801f244:	429a      	cmp	r2, r3
 801f246:	d10b      	bne.n	801f260 <argb_and_rgb_aa+0x326>
 801f248:	7f3a      	ldrb	r2, [r7, #28]
 801f24a:	7d3b      	ldrb	r3, [r7, #20]
 801f24c:	429a      	cmp	r2, r3
 801f24e:	d107      	bne.n	801f260 <argb_and_rgb_aa+0x326>
                cbuf[x] = c_base;
 801f250:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f254:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f258:	4413      	add	r3, r2
 801f25a:	7f3a      	ldrb	r2, [r7, #28]
 801f25c:	701a      	strb	r2, [r3, #0]
           ys_int + y_next <= src_h - 1) {
 801f25e:	e08c      	b.n	801f37a <argb_and_rgb_aa+0x440>
            }
            else {
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 801f260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f262:	b2db      	uxtb	r3, r3
 801f264:	461a      	mov	r2, r3
 801f266:	7f39      	ldrb	r1, [r7, #28]
 801f268:	7e38      	ldrb	r0, [r7, #24]
 801f26a:	f7ff fbaf 	bl	801e9cc <lv_color_mix>
 801f26e:	4603      	mov	r3, r0
 801f270:	763b      	strb	r3, [r7, #24]
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 801f272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f274:	b2db      	uxtb	r3, r3
 801f276:	461a      	mov	r2, r3
 801f278:	7f39      	ldrb	r1, [r7, #28]
 801f27a:	7d38      	ldrb	r0, [r7, #20]
 801f27c:	f7ff fba6 	bl	801e9cc <lv_color_mix>
 801f280:	4603      	mov	r3, r0
 801f282:	753b      	strb	r3, [r7, #20]
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 801f284:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f288:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f28c:	18d4      	adds	r4, r2, r3
 801f28e:	227f      	movs	r2, #127	; 0x7f
 801f290:	7e39      	ldrb	r1, [r7, #24]
 801f292:	7d38      	ldrb	r0, [r7, #20]
 801f294:	f7ff fb9a 	bl	801e9cc <lv_color_mix>
 801f298:	4603      	mov	r3, r0
 801f29a:	7023      	strb	r3, [r4, #0]
           ys_int + y_next <= src_h - 1) {
 801f29c:	e06d      	b.n	801f37a <argb_and_rgb_aa+0x440>
            }
        }
        /*Partially out of the image*/
        else {
#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 801f29e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f2a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f2a6:	4413      	add	r3, r2
 801f2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f2aa:	7812      	ldrb	r2, [r2, #0]
 801f2ac:	701a      	strb	r2, [r3, #0]
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            lv_opa_t a;
            switch(cf) {
 801f2ae:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 801f2b2:	2b05      	cmp	r3, #5
 801f2b4:	d002      	beq.n	801f2bc <argb_and_rgb_aa+0x382>
 801f2b6:	2b06      	cmp	r3, #6
 801f2b8:	d005      	beq.n	801f2c6 <argb_and_rgb_aa+0x38c>
 801f2ba:	e014      	b.n	801f2e6 <argb_and_rgb_aa+0x3ac>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801f2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2be:	785b      	ldrb	r3, [r3, #1]
 801f2c0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801f2c4:	e012      	b.n	801f2ec <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 801f2c6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f2ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801f2ce:	4413      	add	r3, r2
 801f2d0:	781a      	ldrb	r2, [r3, #0]
 801f2d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f2d6:	429a      	cmp	r2, r3
 801f2d8:	d101      	bne.n	801f2de <argb_and_rgb_aa+0x3a4>
 801f2da:	2300      	movs	r3, #0
 801f2dc:	e000      	b.n	801f2e0 <argb_and_rgb_aa+0x3a6>
 801f2de:	23ff      	movs	r3, #255	; 0xff
 801f2e0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 801f2e4:	e002      	b.n	801f2ec <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_RGB565A8:
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
                    break;
#endif
                default:
                    a = 0xff;
 801f2e6:	23ff      	movs	r3, #255	; 0xff
 801f2e8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801f2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d102      	bne.n	801f2f8 <argb_and_rgb_aa+0x3be>
 801f2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	db08      	blt.n	801f30a <argb_and_rgb_aa+0x3d0>
 801f2f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801f2fc:	3b01      	subs	r3, #1
 801f2fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f300:	429a      	cmp	r2, r3
 801f302:	d112      	bne.n	801f32a <argb_and_rgb_aa+0x3f0>
 801f304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f306:	2b00      	cmp	r3, #0
 801f308:	dd0f      	ble.n	801f32a <argb_and_rgb_aa+0x3f0>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 801f30a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801f30e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f310:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f314:	fb02 f303 	mul.w	r3, r2, r3
 801f318:	1219      	asrs	r1, r3, #8
 801f31a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f31e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f322:	4413      	add	r3, r2
 801f324:	b2ca      	uxtb	r2, r1
 801f326:	701a      	strb	r2, [r3, #0]
 801f328:	e027      	b.n	801f37a <argb_and_rgb_aa+0x440>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 801f32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d102      	bne.n	801f336 <argb_and_rgb_aa+0x3fc>
 801f330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f332:	2b00      	cmp	r3, #0
 801f334:	db08      	blt.n	801f348 <argb_and_rgb_aa+0x40e>
 801f336:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f33a:	3b01      	subs	r3, #1
 801f33c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f33e:	429a      	cmp	r2, r3
 801f340:	d112      	bne.n	801f368 <argb_and_rgb_aa+0x42e>
 801f342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f344:	2b00      	cmp	r3, #0
 801f346:	dd0f      	ble.n	801f368 <argb_and_rgb_aa+0x42e>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 801f348:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801f34c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f34e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f352:	fb02 f303 	mul.w	r3, r2, r3
 801f356:	1219      	asrs	r1, r3, #8
 801f358:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f35c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f360:	4413      	add	r3, r2
 801f362:	b2ca      	uxtb	r2, r1
 801f364:	701a      	strb	r2, [r3, #0]
 801f366:	e008      	b.n	801f37a <argb_and_rgb_aa+0x440>
            }
            else {
                abuf[x] = 0x00;
 801f368:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f36c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801f370:	4413      	add	r3, r2
 801f372:	2200      	movs	r2, #0
 801f374:	701a      	strb	r2, [r3, #0]
 801f376:	e000      	b.n	801f37a <argb_and_rgb_aa+0x440>
                if(abuf[x] == 0x00) continue;
 801f378:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 801f37a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f37e:	b29b      	uxth	r3, r3
 801f380:	3301      	adds	r3, #1
 801f382:	b29b      	uxth	r3, r3
 801f384:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801f388:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801f38c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801f390:	429a      	cmp	r2, r3
 801f392:	f73f ae11 	bgt.w	801efb8 <argb_and_rgb_aa+0x7e>
 801f396:	e000      	b.n	801f39a <argb_and_rgb_aa+0x460>
            return;
 801f398:	bf00      	nop
            }
        }
    }
}
 801f39a:	376c      	adds	r7, #108	; 0x6c
 801f39c:	46bd      	mov	sp, r7
 801f39e:	bd90      	pop	{r4, r7, pc}

0801f3a0 <transform_point_upscaled>:

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 801f3a0:	b480      	push	{r7}
 801f3a2:	b085      	sub	sp, #20
 801f3a4:	af00      	add	r7, sp, #0
 801f3a6:	60f8      	str	r0, [r7, #12]
 801f3a8:	60b9      	str	r1, [r7, #8]
 801f3aa:	607a      	str	r2, [r7, #4]
 801f3ac:	603b      	str	r3, [r7, #0]
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 801f3ae:	68fb      	ldr	r3, [r7, #12]
 801f3b0:	69db      	ldr	r3, [r3, #28]
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d10d      	bne.n	801f3d2 <transform_point_upscaled+0x32>
 801f3b6:	68fb      	ldr	r3, [r7, #12]
 801f3b8:	699b      	ldr	r3, [r3, #24]
 801f3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f3be:	d108      	bne.n	801f3d2 <transform_point_upscaled+0x32>
        *xout = xin * 256;
 801f3c0:	68bb      	ldr	r3, [r7, #8]
 801f3c2:	021a      	lsls	r2, r3, #8
 801f3c4:	683b      	ldr	r3, [r7, #0]
 801f3c6:	601a      	str	r2, [r3, #0]
        *yout = yin * 256;
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	021a      	lsls	r2, r3, #8
 801f3cc:	69bb      	ldr	r3, [r7, #24]
 801f3ce:	601a      	str	r2, [r3, #0]
        return;
 801f3d0:	e078      	b.n	801f4c4 <transform_point_upscaled+0x124>
    }

    xin -= t->pivot.x;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801f3d8:	461a      	mov	r2, r3
 801f3da:	68bb      	ldr	r3, [r7, #8]
 801f3dc:	1a9b      	subs	r3, r3, r2
 801f3de:	60bb      	str	r3, [r7, #8]
    yin -= t->pivot.y;
 801f3e0:	68fb      	ldr	r3, [r7, #12]
 801f3e2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801f3e6:	461a      	mov	r2, r3
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	1a9b      	subs	r3, r3, r2
 801f3ec:	607b      	str	r3, [r7, #4]

    if(t->angle == 0) {
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	69db      	ldr	r3, [r3, #28]
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d114      	bne.n	801f420 <transform_point_upscaled+0x80>
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	699b      	ldr	r3, [r3, #24]
 801f3fa:	68ba      	ldr	r2, [r7, #8]
 801f3fc:	fb03 f202 	mul.w	r2, r3, r2
 801f400:	68fb      	ldr	r3, [r7, #12]
 801f402:	6a1b      	ldr	r3, [r3, #32]
 801f404:	441a      	add	r2, r3
 801f406:	683b      	ldr	r3, [r7, #0]
 801f408:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	699b      	ldr	r3, [r3, #24]
 801f40e:	687a      	ldr	r2, [r7, #4]
 801f410:	fb03 f202 	mul.w	r2, r3, r2
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f418:	441a      	add	r2, r3
 801f41a:	69bb      	ldr	r3, [r7, #24]
 801f41c:	601a      	str	r2, [r3, #0]
 801f41e:	e051      	b.n	801f4c4 <transform_point_upscaled+0x124>
    }
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 801f420:	68fb      	ldr	r3, [r7, #12]
 801f422:	699b      	ldr	r3, [r3, #24]
 801f424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f428:	d122      	bne.n	801f470 <transform_point_upscaled+0xd0>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 801f42a:	68fb      	ldr	r3, [r7, #12]
 801f42c:	695b      	ldr	r3, [r3, #20]
 801f42e:	68ba      	ldr	r2, [r7, #8]
 801f430:	fb03 f202 	mul.w	r2, r3, r2
 801f434:	68fb      	ldr	r3, [r7, #12]
 801f436:	691b      	ldr	r3, [r3, #16]
 801f438:	6879      	ldr	r1, [r7, #4]
 801f43a:	fb01 f303 	mul.w	r3, r1, r3
 801f43e:	1ad3      	subs	r3, r2, r3
 801f440:	109a      	asrs	r2, r3, #2
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	6a1b      	ldr	r3, [r3, #32]
 801f446:	441a      	add	r2, r3
 801f448:	683b      	ldr	r3, [r7, #0]
 801f44a:	601a      	str	r2, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 801f44c:	68fb      	ldr	r3, [r7, #12]
 801f44e:	691b      	ldr	r3, [r3, #16]
 801f450:	68ba      	ldr	r2, [r7, #8]
 801f452:	fb03 f202 	mul.w	r2, r3, r2
 801f456:	68fb      	ldr	r3, [r7, #12]
 801f458:	695b      	ldr	r3, [r3, #20]
 801f45a:	6879      	ldr	r1, [r7, #4]
 801f45c:	fb01 f303 	mul.w	r3, r1, r3
 801f460:	4413      	add	r3, r2
 801f462:	109a      	asrs	r2, r3, #2
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f468:	441a      	add	r2, r3
 801f46a:	69bb      	ldr	r3, [r7, #24]
 801f46c:	601a      	str	r2, [r3, #0]
 801f46e:	e029      	b.n	801f4c4 <transform_point_upscaled+0x124>
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 801f470:	68fb      	ldr	r3, [r7, #12]
 801f472:	695b      	ldr	r3, [r3, #20]
 801f474:	68ba      	ldr	r2, [r7, #8]
 801f476:	fb03 f202 	mul.w	r2, r3, r2
 801f47a:	68fb      	ldr	r3, [r7, #12]
 801f47c:	691b      	ldr	r3, [r3, #16]
 801f47e:	6879      	ldr	r1, [r7, #4]
 801f480:	fb01 f303 	mul.w	r3, r1, r3
 801f484:	1ad3      	subs	r3, r2, r3
 801f486:	68fa      	ldr	r2, [r7, #12]
 801f488:	6992      	ldr	r2, [r2, #24]
 801f48a:	fb02 f303 	mul.w	r3, r2, r3
 801f48e:	129a      	asrs	r2, r3, #10
 801f490:	68fb      	ldr	r3, [r7, #12]
 801f492:	6a1b      	ldr	r3, [r3, #32]
 801f494:	441a      	add	r2, r3
 801f496:	683b      	ldr	r3, [r7, #0]
 801f498:	601a      	str	r2, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 801f49a:	68fb      	ldr	r3, [r7, #12]
 801f49c:	691b      	ldr	r3, [r3, #16]
 801f49e:	68ba      	ldr	r2, [r7, #8]
 801f4a0:	fb03 f202 	mul.w	r2, r3, r2
 801f4a4:	68fb      	ldr	r3, [r7, #12]
 801f4a6:	695b      	ldr	r3, [r3, #20]
 801f4a8:	6879      	ldr	r1, [r7, #4]
 801f4aa:	fb01 f303 	mul.w	r3, r1, r3
 801f4ae:	4413      	add	r3, r2
 801f4b0:	68fa      	ldr	r2, [r7, #12]
 801f4b2:	6992      	ldr	r2, [r2, #24]
 801f4b4:	fb02 f303 	mul.w	r3, r2, r3
 801f4b8:	129a      	asrs	r2, r3, #10
 801f4ba:	68fb      	ldr	r3, [r7, #12]
 801f4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4be:	441a      	add	r2, r3
 801f4c0:	69bb      	ldr	r3, [r7, #24]
 801f4c2:	601a      	str	r2, [r3, #0]
    }
}
 801f4c4:	3714      	adds	r7, #20
 801f4c6:	46bd      	mov	sp, r7
 801f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4cc:	4770      	bx	lr

0801f4ce <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 801f4ce:	b480      	push	{r7}
 801f4d0:	af00      	add	r7, sp, #0
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 801f4d2:	bf00      	nop
 801f4d4:	46bd      	mov	sp, r7
 801f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4da:	4770      	bx	lr

0801f4dc <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 801f4dc:	b580      	push	{r7, lr}
 801f4de:	b082      	sub	sp, #8
 801f4e0:	af00      	add	r7, sp, #0
 801f4e2:	6078      	str	r0, [r7, #4]
 801f4e4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_NULL(font_p);
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	d100      	bne.n	801f4ee <lv_font_get_glyph_bitmap+0x12>
 801f4ec:	e7fe      	b.n	801f4ec <lv_font_get_glyph_bitmap+0x10>
    return font_p->get_glyph_bitmap(font_p, letter);
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	685b      	ldr	r3, [r3, #4]
 801f4f2:	6839      	ldr	r1, [r7, #0]
 801f4f4:	6878      	ldr	r0, [r7, #4]
 801f4f6:	4798      	blx	r3
 801f4f8:	4603      	mov	r3, r0
}
 801f4fa:	4618      	mov	r0, r3
 801f4fc:	3708      	adds	r7, #8
 801f4fe:	46bd      	mov	sp, r7
 801f500:	bd80      	pop	{r7, pc}

0801f502 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 801f502:	b590      	push	{r4, r7, lr}
 801f504:	b089      	sub	sp, #36	; 0x24
 801f506:	af00      	add	r7, sp, #0
 801f508:	60f8      	str	r0, [r7, #12]
 801f50a:	60b9      	str	r1, [r7, #8]
 801f50c:	607a      	str	r2, [r7, #4]
 801f50e:	603b      	str	r3, [r7, #0]

    LV_ASSERT_NULL(font_p);
 801f510:	68fb      	ldr	r3, [r7, #12]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d100      	bne.n	801f518 <lv_font_get_glyph_dsc+0x16>
 801f516:	e7fe      	b.n	801f516 <lv_font_get_glyph_dsc+0x14>
    LV_ASSERT_NULL(dsc_out);
 801f518:	68bb      	ldr	r3, [r7, #8]
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d100      	bne.n	801f520 <lv_font_get_glyph_dsc+0x1e>
 801f51e:	e7fe      	b.n	801f51e <lv_font_get_glyph_dsc+0x1c>

#if LV_USE_FONT_PLACEHOLDER
    const lv_font_t * placeholder_font = NULL;
 801f520:	2300      	movs	r3, #0
 801f522:	61fb      	str	r3, [r7, #28]
#endif

    const lv_font_t * f = font_p;
 801f524:	68fb      	ldr	r3, [r7, #12]
 801f526:	61bb      	str	r3, [r7, #24]

    dsc_out->resolved_font = NULL;
 801f528:	68bb      	ldr	r3, [r7, #8]
 801f52a:	2200      	movs	r2, #0
 801f52c:	601a      	str	r2, [r3, #0]

    while(f) {
 801f52e:	e01f      	b.n	801f570 <lv_font_get_glyph_dsc+0x6e>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 801f530:	69bb      	ldr	r3, [r7, #24]
 801f532:	681c      	ldr	r4, [r3, #0]
 801f534:	683b      	ldr	r3, [r7, #0]
 801f536:	687a      	ldr	r2, [r7, #4]
 801f538:	68b9      	ldr	r1, [r7, #8]
 801f53a:	69b8      	ldr	r0, [r7, #24]
 801f53c:	47a0      	blx	r4
 801f53e:	4603      	mov	r3, r0
 801f540:	75fb      	strb	r3, [r7, #23]
        if(found) {
 801f542:	7dfb      	ldrb	r3, [r7, #23]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d010      	beq.n	801f56a <lv_font_get_glyph_dsc+0x68>
            if(!dsc_out->is_placeholder) {
 801f548:	68bb      	ldr	r3, [r7, #8]
 801f54a:	7b9b      	ldrb	r3, [r3, #14]
 801f54c:	f003 0310 	and.w	r3, r3, #16
 801f550:	b2db      	uxtb	r3, r3
 801f552:	2b00      	cmp	r3, #0
 801f554:	d104      	bne.n	801f560 <lv_font_get_glyph_dsc+0x5e>
                dsc_out->resolved_font = f;
 801f556:	68bb      	ldr	r3, [r7, #8]
 801f558:	69ba      	ldr	r2, [r7, #24]
 801f55a:	601a      	str	r2, [r3, #0]
                return true;
 801f55c:	2301      	movs	r3, #1
 801f55e:	e059      	b.n	801f614 <lv_font_get_glyph_dsc+0x112>
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 801f560:	69fb      	ldr	r3, [r7, #28]
 801f562:	2b00      	cmp	r3, #0
 801f564:	d101      	bne.n	801f56a <lv_font_get_glyph_dsc+0x68>
                placeholder_font = f;
 801f566:	69bb      	ldr	r3, [r7, #24]
 801f568:	61fb      	str	r3, [r7, #28]
            }
#endif
        }
        f = f->fallback;
 801f56a:	69bb      	ldr	r3, [r7, #24]
 801f56c:	695b      	ldr	r3, [r3, #20]
 801f56e:	61bb      	str	r3, [r7, #24]
    while(f) {
 801f570:	69bb      	ldr	r3, [r7, #24]
 801f572:	2b00      	cmp	r3, #0
 801f574:	d1dc      	bne.n	801f530 <lv_font_get_glyph_dsc+0x2e>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 801f576:	69fb      	ldr	r3, [r7, #28]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d00b      	beq.n	801f594 <lv_font_get_glyph_dsc+0x92>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 801f57c:	69fb      	ldr	r3, [r7, #28]
 801f57e:	681c      	ldr	r4, [r3, #0]
 801f580:	683b      	ldr	r3, [r7, #0]
 801f582:	687a      	ldr	r2, [r7, #4]
 801f584:	68b9      	ldr	r1, [r7, #8]
 801f586:	69f8      	ldr	r0, [r7, #28]
 801f588:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 801f58a:	68bb      	ldr	r3, [r7, #8]
 801f58c:	69fa      	ldr	r2, [r7, #28]
 801f58e:	601a      	str	r2, [r3, #0]
        return true;
 801f590:	2301      	movs	r3, #1
 801f592:	e03f      	b.n	801f614 <lv_font_get_glyph_dsc+0x112>
    }
#endif

    if(letter < 0x20 ||
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	2b1f      	cmp	r3, #31
 801f598:	d909      	bls.n	801f5ae <lv_font_get_glyph_dsc+0xac>
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801f5a0:	4293      	cmp	r3, r2
 801f5a2:	d004      	beq.n	801f5ae <lv_font_get_glyph_dsc+0xac>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	f242 020c 	movw	r2, #8204	; 0x200c
 801f5aa:	4293      	cmp	r3, r2
 801f5ac:	d106      	bne.n	801f5bc <lv_font_get_glyph_dsc+0xba>
       letter == 0x200c) { /*ZERO WIDTH NON-JOINER*/
        dsc_out->box_w = 0;
 801f5ae:	68bb      	ldr	r3, [r7, #8]
 801f5b0:	2200      	movs	r2, #0
 801f5b2:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = 0;
 801f5b4:	68bb      	ldr	r3, [r7, #8]
 801f5b6:	2200      	movs	r2, #0
 801f5b8:	809a      	strh	r2, [r3, #4]
 801f5ba:	e010      	b.n	801f5de <lv_font_get_glyph_dsc+0xdc>
    }
    else {
#if LV_USE_FONT_PLACEHOLDER
        dsc_out->box_w = font_p->line_height / 2;
 801f5bc:	68fb      	ldr	r3, [r7, #12]
 801f5be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	da00      	bge.n	801f5c8 <lv_font_get_glyph_dsc+0xc6>
 801f5c6:	3301      	adds	r3, #1
 801f5c8:	105b      	asrs	r3, r3, #1
 801f5ca:	b21b      	sxth	r3, r3
 801f5cc:	b29a      	uxth	r2, r3
 801f5ce:	68bb      	ldr	r3, [r7, #8]
 801f5d0:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 801f5d2:	68bb      	ldr	r3, [r7, #8]
 801f5d4:	88db      	ldrh	r3, [r3, #6]
 801f5d6:	3302      	adds	r3, #2
 801f5d8:	b29a      	uxth	r2, r3
 801f5da:	68bb      	ldr	r3, [r7, #8]
 801f5dc:	809a      	strh	r2, [r3, #4]
        dsc_out->box_w = 0;
        dsc_out->adv_w = 0;
#endif
    }

    dsc_out->resolved_font = NULL;
 801f5de:	68bb      	ldr	r3, [r7, #8]
 801f5e0:	2200      	movs	r2, #0
 801f5e2:	601a      	str	r2, [r3, #0]
    dsc_out->box_h = font_p->line_height;
 801f5e4:	68fb      	ldr	r3, [r7, #12]
 801f5e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f5ea:	b29a      	uxth	r2, r3
 801f5ec:	68bb      	ldr	r3, [r7, #8]
 801f5ee:	811a      	strh	r2, [r3, #8]
    dsc_out->ofs_x = 0;
 801f5f0:	68bb      	ldr	r3, [r7, #8]
 801f5f2:	2200      	movs	r2, #0
 801f5f4:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = 0;
 801f5f6:	68bb      	ldr	r3, [r7, #8]
 801f5f8:	2200      	movs	r2, #0
 801f5fa:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = 1;
 801f5fc:	68ba      	ldr	r2, [r7, #8]
 801f5fe:	7b93      	ldrb	r3, [r2, #14]
 801f600:	2101      	movs	r1, #1
 801f602:	f361 0303 	bfi	r3, r1, #0, #4
 801f606:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = true;
 801f608:	68ba      	ldr	r2, [r7, #8]
 801f60a:	7b93      	ldrb	r3, [r2, #14]
 801f60c:	f043 0310 	orr.w	r3, r3, #16
 801f610:	7393      	strb	r3, [r2, #14]

    return false;
 801f612:	2300      	movs	r3, #0
}
 801f614:	4618      	mov	r0, r3
 801f616:	3724      	adds	r7, #36	; 0x24
 801f618:	46bd      	mov	sp, r7
 801f61a:	bd90      	pop	{r4, r7, pc}

0801f61c <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 801f61c:	b580      	push	{r7, lr}
 801f61e:	b088      	sub	sp, #32
 801f620:	af00      	add	r7, sp, #0
 801f622:	60f8      	str	r0, [r7, #12]
 801f624:	60b9      	str	r1, [r7, #8]
 801f626:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(font);
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	d100      	bne.n	801f630 <lv_font_get_glyph_width+0x14>
 801f62e:	e7fe      	b.n	801f62e <lv_font_get_glyph_width+0x12>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 801f630:	f107 0110 	add.w	r1, r7, #16
 801f634:	687b      	ldr	r3, [r7, #4]
 801f636:	68ba      	ldr	r2, [r7, #8]
 801f638:	68f8      	ldr	r0, [r7, #12]
 801f63a:	f7ff ff62 	bl	801f502 <lv_font_get_glyph_dsc>
    return g.adv_w;
 801f63e:	8abb      	ldrh	r3, [r7, #20]
}
 801f640:	4618      	mov	r0, r3
 801f642:	3720      	adds	r7, #32
 801f644:	46bd      	mov	sp, r7
 801f646:	bd80      	pop	{r7, pc}

0801f648 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter a unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 801f648:	b580      	push	{r7, lr}
 801f64a:	b086      	sub	sp, #24
 801f64c:	af00      	add	r7, sp, #0
 801f64e:	6078      	str	r0, [r7, #4]
 801f650:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 801f652:	683b      	ldr	r3, [r7, #0]
 801f654:	2b09      	cmp	r3, #9
 801f656:	d101      	bne.n	801f65c <lv_font_get_bitmap_fmt_txt+0x14>
 801f658:	2320      	movs	r3, #32
 801f65a:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	691b      	ldr	r3, [r3, #16]
 801f660:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801f662:	6839      	ldr	r1, [r7, #0]
 801f664:	6878      	ldr	r0, [r7, #4]
 801f666:	f000 f8b9 	bl	801f7dc <get_glyph_dsc_id>
 801f66a:	6138      	str	r0, [r7, #16]
    if(!gid) return NULL;
 801f66c:	693b      	ldr	r3, [r7, #16]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d101      	bne.n	801f676 <lv_font_get_bitmap_fmt_txt+0x2e>
 801f672:	2300      	movs	r3, #0
 801f674:	e015      	b.n	801f6a2 <lv_font_get_bitmap_fmt_txt+0x5a>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801f676:	697b      	ldr	r3, [r7, #20]
 801f678:	685a      	ldr	r2, [r3, #4]
 801f67a:	693b      	ldr	r3, [r7, #16]
 801f67c:	00db      	lsls	r3, r3, #3
 801f67e:	4413      	add	r3, r2
 801f680:	60fb      	str	r3, [r7, #12]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 801f682:	697b      	ldr	r3, [r7, #20]
 801f684:	7cdb      	ldrb	r3, [r3, #19]
 801f686:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801f68a:	b2db      	uxtb	r3, r3
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d107      	bne.n	801f6a0 <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801f690:	697b      	ldr	r3, [r7, #20]
 801f692:	681b      	ldr	r3, [r3, #0]
 801f694:	68fa      	ldr	r2, [r7, #12]
 801f696:	6812      	ldr	r2, [r2, #0]
 801f698:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801f69c:	4413      	add	r3, r2
 801f69e:	e000      	b.n	801f6a2 <lv_font_get_bitmap_fmt_txt+0x5a>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
                   (uint8_t)fdsc->bpp, prefilter);
        return LV_GC_ROOT(_lv_font_decompr_buf);
#else /*!LV_USE_FONT_COMPRESSED*/
        LV_LOG_WARN("Compressed fonts is used but LV_USE_FONT_COMPRESSED is not enabled in lv_conf.h");
        return NULL;
 801f6a0:	2300      	movs	r3, #0
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 801f6a2:	4618      	mov	r0, r3
 801f6a4:	3718      	adds	r7, #24
 801f6a6:	46bd      	mov	sp, r7
 801f6a8:	bd80      	pop	{r7, pc}

0801f6aa <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 801f6aa:	b580      	push	{r7, lr}
 801f6ac:	b08c      	sub	sp, #48	; 0x30
 801f6ae:	af00      	add	r7, sp, #0
 801f6b0:	60f8      	str	r0, [r7, #12]
 801f6b2:	60b9      	str	r1, [r7, #8]
 801f6b4:	607a      	str	r2, [r7, #4]
 801f6b6:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	2b09      	cmp	r3, #9
 801f6c2:	d104      	bne.n	801f6ce <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 801f6c4:	2320      	movs	r3, #32
 801f6c6:	607b      	str	r3, [r7, #4]
        is_tab = true;
 801f6c8:	2301      	movs	r3, #1
 801f6ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f6ce:	68fb      	ldr	r3, [r7, #12]
 801f6d0:	691b      	ldr	r3, [r3, #16]
 801f6d2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801f6d4:	6879      	ldr	r1, [r7, #4]
 801f6d6:	68f8      	ldr	r0, [r7, #12]
 801f6d8:	f000 f880 	bl	801f7dc <get_glyph_dsc_id>
 801f6dc:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 801f6de:	6a3b      	ldr	r3, [r7, #32]
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d101      	bne.n	801f6e8 <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	e06d      	b.n	801f7c4 <lv_font_get_glyph_dsc_fmt_txt+0x11a>

    int8_t kvalue = 0;
 801f6e8:	2300      	movs	r3, #0
 801f6ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 801f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6f0:	68db      	ldr	r3, [r3, #12]
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d00f      	beq.n	801f716 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 801f6f6:	6839      	ldr	r1, [r7, #0]
 801f6f8:	68f8      	ldr	r0, [r7, #12]
 801f6fa:	f000 f86f 	bl	801f7dc <get_glyph_dsc_id>
 801f6fe:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 801f700:	69fb      	ldr	r3, [r7, #28]
 801f702:	2b00      	cmp	r3, #0
 801f704:	d007      	beq.n	801f716 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 801f706:	69fa      	ldr	r2, [r7, #28]
 801f708:	6a39      	ldr	r1, [r7, #32]
 801f70a:	68f8      	ldr	r0, [r7, #12]
 801f70c:	f000 f9aa 	bl	801fa64 <get_kern_value>
 801f710:	4603      	mov	r3, r0
 801f712:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f718:	685a      	ldr	r2, [r3, #4]
 801f71a:	6a3b      	ldr	r3, [r7, #32]
 801f71c:	00db      	lsls	r3, r3, #3
 801f71e:	4413      	add	r3, r2
 801f720:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801f722:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801f726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f728:	8a12      	ldrh	r2, [r2, #16]
 801f72a:	fb02 f303 	mul.w	r3, r2, r3
 801f72e:	111b      	asrs	r3, r3, #4
 801f730:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 801f732:	69bb      	ldr	r3, [r7, #24]
 801f734:	885b      	ldrh	r3, [r3, #2]
 801f736:	f3c3 130b 	ubfx	r3, r3, #4, #12
 801f73a:	b29b      	uxth	r3, r3
 801f73c:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 801f73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f742:	2b00      	cmp	r3, #0
 801f744:	d002      	beq.n	801f74c <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 801f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f748:	005b      	lsls	r3, r3, #1
 801f74a:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 801f74c:	697b      	ldr	r3, [r7, #20]
 801f74e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f750:	4413      	add	r3, r2
 801f752:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801f754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f756:	3308      	adds	r3, #8
 801f758:	091b      	lsrs	r3, r3, #4
 801f75a:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 801f75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f75e:	b29a      	uxth	r2, r3
 801f760:	68bb      	ldr	r3, [r7, #8]
 801f762:	809a      	strh	r2, [r3, #4]
    dsc_out->box_h = gdsc->box_h;
 801f764:	69bb      	ldr	r3, [r7, #24]
 801f766:	795b      	ldrb	r3, [r3, #5]
 801f768:	b29a      	uxth	r2, r3
 801f76a:	68bb      	ldr	r3, [r7, #8]
 801f76c:	811a      	strh	r2, [r3, #8]
    dsc_out->box_w = gdsc->box_w;
 801f76e:	69bb      	ldr	r3, [r7, #24]
 801f770:	791b      	ldrb	r3, [r3, #4]
 801f772:	b29a      	uxth	r2, r3
 801f774:	68bb      	ldr	r3, [r7, #8]
 801f776:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 801f778:	69bb      	ldr	r3, [r7, #24]
 801f77a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 801f77e:	b21a      	sxth	r2, r3
 801f780:	68bb      	ldr	r3, [r7, #8]
 801f782:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 801f784:	69bb      	ldr	r3, [r7, #24]
 801f786:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801f78a:	b21a      	sxth	r2, r3
 801f78c:	68bb      	ldr	r3, [r7, #8]
 801f78e:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f792:	7cdb      	ldrb	r3, [r3, #19]
 801f794:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801f798:	b2d9      	uxtb	r1, r3
 801f79a:	68ba      	ldr	r2, [r7, #8]
 801f79c:	7b93      	ldrb	r3, [r2, #14]
 801f79e:	f361 0303 	bfi	r3, r1, #0, #4
 801f7a2:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = false;
 801f7a4:	68ba      	ldr	r2, [r7, #8]
 801f7a6:	7b93      	ldrb	r3, [r2, #14]
 801f7a8:	f36f 1304 	bfc	r3, #4, #1
 801f7ac:	7393      	strb	r3, [r2, #14]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 801f7ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	d005      	beq.n	801f7c2 <lv_font_get_glyph_dsc_fmt_txt+0x118>
 801f7b6:	68bb      	ldr	r3, [r7, #8]
 801f7b8:	88db      	ldrh	r3, [r3, #6]
 801f7ba:	005b      	lsls	r3, r3, #1
 801f7bc:	b29a      	uxth	r2, r3
 801f7be:	68bb      	ldr	r3, [r7, #8]
 801f7c0:	80da      	strh	r2, [r3, #6]

    return true;
 801f7c2:	2301      	movs	r3, #1
}
 801f7c4:	4618      	mov	r0, r3
 801f7c6:	3730      	adds	r7, #48	; 0x30
 801f7c8:	46bd      	mov	sp, r7
 801f7ca:	bd80      	pop	{r7, pc}

0801f7cc <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 801f7cc:	b480      	push	{r7}
 801f7ce:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
    }
#endif
}
 801f7d0:	bf00      	nop
 801f7d2:	46bd      	mov	sp, r7
 801f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7d8:	4770      	bx	lr
	...

0801f7dc <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 801f7dc:	b590      	push	{r4, r7, lr}
 801f7de:	b091      	sub	sp, #68	; 0x44
 801f7e0:	af02      	add	r7, sp, #8
 801f7e2:	6078      	str	r0, [r7, #4]
 801f7e4:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 801f7e6:	683b      	ldr	r3, [r7, #0]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d101      	bne.n	801f7f0 <get_glyph_dsc_id+0x14>
 801f7ec:	2300      	movs	r3, #0
 801f7ee:	e133      	b.n	801fa58 <get_glyph_dsc_id+0x27c>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	691b      	ldr	r3, [r3, #16]
 801f7f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801f7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7f8:	695b      	ldr	r3, [r3, #20]
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	d009      	beq.n	801f812 <get_glyph_dsc_id+0x36>
 801f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f800:	695b      	ldr	r3, [r3, #20]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	683a      	ldr	r2, [r7, #0]
 801f806:	429a      	cmp	r2, r3
 801f808:	d103      	bne.n	801f812 <get_glyph_dsc_id+0x36>
 801f80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f80c:	695b      	ldr	r3, [r3, #20]
 801f80e:	685b      	ldr	r3, [r3, #4]
 801f810:	e122      	b.n	801fa58 <get_glyph_dsc_id+0x27c>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 801f812:	2300      	movs	r3, #0
 801f814:	86fb      	strh	r3, [r7, #54]	; 0x36
 801f816:	e108      	b.n	801fa2a <get_glyph_dsc_id+0x24e>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801f818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f81a:	6899      	ldr	r1, [r3, #8]
 801f81c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f81e:	4613      	mov	r3, r2
 801f820:	009b      	lsls	r3, r3, #2
 801f822:	4413      	add	r3, r2
 801f824:	009b      	lsls	r3, r3, #2
 801f826:	440b      	add	r3, r1
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	683a      	ldr	r2, [r7, #0]
 801f82c:	1ad3      	subs	r3, r2, r3
 801f82e:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801f830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f832:	6899      	ldr	r1, [r3, #8]
 801f834:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f836:	4613      	mov	r3, r2
 801f838:	009b      	lsls	r3, r3, #2
 801f83a:	4413      	add	r3, r2
 801f83c:	009b      	lsls	r3, r3, #2
 801f83e:	440b      	add	r3, r1
 801f840:	889b      	ldrh	r3, [r3, #4]
 801f842:	461a      	mov	r2, r3
 801f844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f846:	4293      	cmp	r3, r2
 801f848:	d903      	bls.n	801f852 <get_glyph_dsc_id+0x76>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801f84a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801f84c:	3301      	adds	r3, #1
 801f84e:	86fb      	strh	r3, [r7, #54]	; 0x36
 801f850:	e0eb      	b.n	801fa2a <get_glyph_dsc_id+0x24e>
        uint32_t glyph_id = 0;
 801f852:	2300      	movs	r3, #0
 801f854:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801f856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f858:	6899      	ldr	r1, [r3, #8]
 801f85a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f85c:	4613      	mov	r3, r2
 801f85e:	009b      	lsls	r3, r3, #2
 801f860:	4413      	add	r3, r2
 801f862:	009b      	lsls	r3, r3, #2
 801f864:	440b      	add	r3, r1
 801f866:	7c9b      	ldrb	r3, [r3, #18]
 801f868:	2b02      	cmp	r3, #2
 801f86a:	d10d      	bne.n	801f888 <get_glyph_dsc_id+0xac>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801f86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f86e:	6899      	ldr	r1, [r3, #8]
 801f870:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f872:	4613      	mov	r3, r2
 801f874:	009b      	lsls	r3, r3, #2
 801f876:	4413      	add	r3, r2
 801f878:	009b      	lsls	r3, r3, #2
 801f87a:	440b      	add	r3, r1
 801f87c:	88db      	ldrh	r3, [r3, #6]
 801f87e:	461a      	mov	r2, r3
 801f880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f882:	4413      	add	r3, r2
 801f884:	633b      	str	r3, [r7, #48]	; 0x30
 801f886:	e0c2      	b.n	801fa0e <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801f888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f88a:	6899      	ldr	r1, [r3, #8]
 801f88c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f88e:	4613      	mov	r3, r2
 801f890:	009b      	lsls	r3, r3, #2
 801f892:	4413      	add	r3, r2
 801f894:	009b      	lsls	r3, r3, #2
 801f896:	440b      	add	r3, r1
 801f898:	7c9b      	ldrb	r3, [r3, #18]
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d11a      	bne.n	801f8d4 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 801f89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f8a0:	6899      	ldr	r1, [r3, #8]
 801f8a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f8a4:	4613      	mov	r3, r2
 801f8a6:	009b      	lsls	r3, r3, #2
 801f8a8:	4413      	add	r3, r2
 801f8aa:	009b      	lsls	r3, r3, #2
 801f8ac:	440b      	add	r3, r1
 801f8ae:	68db      	ldr	r3, [r3, #12]
 801f8b0:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801f8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f8b4:	6899      	ldr	r1, [r3, #8]
 801f8b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f8b8:	4613      	mov	r3, r2
 801f8ba:	009b      	lsls	r3, r3, #2
 801f8bc:	4413      	add	r3, r2
 801f8be:	009b      	lsls	r3, r3, #2
 801f8c0:	440b      	add	r3, r1
 801f8c2:	88db      	ldrh	r3, [r3, #6]
 801f8c4:	4619      	mov	r1, r3
 801f8c6:	693a      	ldr	r2, [r7, #16]
 801f8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8ca:	4413      	add	r3, r2
 801f8cc:	781b      	ldrb	r3, [r3, #0]
 801f8ce:	440b      	add	r3, r1
 801f8d0:	633b      	str	r3, [r7, #48]	; 0x30
 801f8d2:	e09c      	b.n	801fa0e <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801f8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f8d6:	6899      	ldr	r1, [r3, #8]
 801f8d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f8da:	4613      	mov	r3, r2
 801f8dc:	009b      	lsls	r3, r3, #2
 801f8de:	4413      	add	r3, r2
 801f8e0:	009b      	lsls	r3, r3, #2
 801f8e2:	440b      	add	r3, r1
 801f8e4:	7c9b      	ldrb	r3, [r3, #18]
 801f8e6:	2b03      	cmp	r3, #3
 801f8e8:	d13c      	bne.n	801f964 <get_glyph_dsc_id+0x188>
            uint16_t key = rcp;
 801f8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8ec:	b29b      	uxth	r3, r3
 801f8ee:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801f8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f8f2:	6899      	ldr	r1, [r3, #8]
 801f8f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f8f6:	4613      	mov	r3, r2
 801f8f8:	009b      	lsls	r3, r3, #2
 801f8fa:	4413      	add	r3, r2
 801f8fc:	009b      	lsls	r3, r3, #2
 801f8fe:	440b      	add	r3, r1
 801f900:	689c      	ldr	r4, [r3, #8]
 801f902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f904:	6899      	ldr	r1, [r3, #8]
 801f906:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f908:	4613      	mov	r3, r2
 801f90a:	009b      	lsls	r3, r3, #2
 801f90c:	4413      	add	r3, r2
 801f90e:	009b      	lsls	r3, r3, #2
 801f910:	440b      	add	r3, r1
 801f912:	8a1b      	ldrh	r3, [r3, #16]
 801f914:	461a      	mov	r2, r3
 801f916:	f107 000e 	add.w	r0, r7, #14
 801f91a:	4b51      	ldr	r3, [pc, #324]	; (801fa60 <get_glyph_dsc_id+0x284>)
 801f91c:	9300      	str	r3, [sp, #0]
 801f91e:	2302      	movs	r3, #2
 801f920:	4621      	mov	r1, r4
 801f922:	f005 fb0d 	bl	8024f40 <_lv_utils_bsearch>
 801f926:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801f928:	69bb      	ldr	r3, [r7, #24]
 801f92a:	2b00      	cmp	r3, #0
 801f92c:	d06f      	beq.n	801fa0e <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801f92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f930:	6899      	ldr	r1, [r3, #8]
 801f932:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f934:	4613      	mov	r3, r2
 801f936:	009b      	lsls	r3, r3, #2
 801f938:	4413      	add	r3, r2
 801f93a:	009b      	lsls	r3, r3, #2
 801f93c:	440b      	add	r3, r1
 801f93e:	689b      	ldr	r3, [r3, #8]
 801f940:	69ba      	ldr	r2, [r7, #24]
 801f942:	1ad3      	subs	r3, r2, r3
 801f944:	105b      	asrs	r3, r3, #1
 801f946:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801f948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f94a:	6899      	ldr	r1, [r3, #8]
 801f94c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f94e:	4613      	mov	r3, r2
 801f950:	009b      	lsls	r3, r3, #2
 801f952:	4413      	add	r3, r2
 801f954:	009b      	lsls	r3, r3, #2
 801f956:	440b      	add	r3, r1
 801f958:	88db      	ldrh	r3, [r3, #6]
 801f95a:	461a      	mov	r2, r3
 801f95c:	697b      	ldr	r3, [r7, #20]
 801f95e:	4413      	add	r3, r2
 801f960:	633b      	str	r3, [r7, #48]	; 0x30
 801f962:	e054      	b.n	801fa0e <get_glyph_dsc_id+0x232>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 801f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f966:	6899      	ldr	r1, [r3, #8]
 801f968:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f96a:	4613      	mov	r3, r2
 801f96c:	009b      	lsls	r3, r3, #2
 801f96e:	4413      	add	r3, r2
 801f970:	009b      	lsls	r3, r3, #2
 801f972:	440b      	add	r3, r1
 801f974:	7c9b      	ldrb	r3, [r3, #18]
 801f976:	2b01      	cmp	r3, #1
 801f978:	d149      	bne.n	801fa0e <get_glyph_dsc_id+0x232>
            uint16_t key = rcp;
 801f97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f97c:	b29b      	uxth	r3, r3
 801f97e:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f982:	6899      	ldr	r1, [r3, #8]
 801f984:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f986:	4613      	mov	r3, r2
 801f988:	009b      	lsls	r3, r3, #2
 801f98a:	4413      	add	r3, r2
 801f98c:	009b      	lsls	r3, r3, #2
 801f98e:	440b      	add	r3, r1
 801f990:	689c      	ldr	r4, [r3, #8]
 801f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f994:	6899      	ldr	r1, [r3, #8]
 801f996:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f998:	4613      	mov	r3, r2
 801f99a:	009b      	lsls	r3, r3, #2
 801f99c:	4413      	add	r3, r2
 801f99e:	009b      	lsls	r3, r3, #2
 801f9a0:	440b      	add	r3, r1
 801f9a2:	8a1b      	ldrh	r3, [r3, #16]
 801f9a4:	461a      	mov	r2, r3
 801f9a6:	f107 000c 	add.w	r0, r7, #12
 801f9aa:	4b2d      	ldr	r3, [pc, #180]	; (801fa60 <get_glyph_dsc_id+0x284>)
 801f9ac:	9300      	str	r3, [sp, #0]
 801f9ae:	2302      	movs	r3, #2
 801f9b0:	4621      	mov	r1, r4
 801f9b2:	f005 fac5 	bl	8024f40 <_lv_utils_bsearch>
 801f9b6:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 801f9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d027      	beq.n	801fa0e <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9c0:	6899      	ldr	r1, [r3, #8]
 801f9c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f9c4:	4613      	mov	r3, r2
 801f9c6:	009b      	lsls	r3, r3, #2
 801f9c8:	4413      	add	r3, r2
 801f9ca:	009b      	lsls	r3, r3, #2
 801f9cc:	440b      	add	r3, r1
 801f9ce:	689b      	ldr	r3, [r3, #8]
 801f9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f9d2:	1ad3      	subs	r3, r2, r3
 801f9d4:	105b      	asrs	r3, r3, #1
 801f9d6:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 801f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9da:	6899      	ldr	r1, [r3, #8]
 801f9dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f9de:	4613      	mov	r3, r2
 801f9e0:	009b      	lsls	r3, r3, #2
 801f9e2:	4413      	add	r3, r2
 801f9e4:	009b      	lsls	r3, r3, #2
 801f9e6:	440b      	add	r3, r1
 801f9e8:	68db      	ldr	r3, [r3, #12]
 801f9ea:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801f9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9ee:	6899      	ldr	r1, [r3, #8]
 801f9f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801f9f2:	4613      	mov	r3, r2
 801f9f4:	009b      	lsls	r3, r3, #2
 801f9f6:	4413      	add	r3, r2
 801f9f8:	009b      	lsls	r3, r3, #2
 801f9fa:	440b      	add	r3, r1
 801f9fc:	88db      	ldrh	r3, [r3, #6]
 801f9fe:	4619      	mov	r1, r3
 801fa00:	6a3b      	ldr	r3, [r7, #32]
 801fa02:	005b      	lsls	r3, r3, #1
 801fa04:	69fa      	ldr	r2, [r7, #28]
 801fa06:	4413      	add	r3, r2
 801fa08:	881b      	ldrh	r3, [r3, #0]
 801fa0a:	440b      	add	r3, r1
 801fa0c:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        if(fdsc->cache) {
 801fa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa10:	695b      	ldr	r3, [r3, #20]
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d007      	beq.n	801fa26 <get_glyph_dsc_id+0x24a>
            fdsc->cache->last_letter = letter;
 801fa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa18:	695b      	ldr	r3, [r3, #20]
 801fa1a:	683a      	ldr	r2, [r7, #0]
 801fa1c:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 801fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa20:	695b      	ldr	r3, [r3, #20]
 801fa22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fa24:	605a      	str	r2, [r3, #4]
        }
        return glyph_id;
 801fa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa28:	e016      	b.n	801fa58 <get_glyph_dsc_id+0x27c>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801fa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa2c:	8a5b      	ldrh	r3, [r3, #18]
 801fa2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801fa32:	b29b      	uxth	r3, r3
 801fa34:	461a      	mov	r2, r3
 801fa36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801fa38:	4293      	cmp	r3, r2
 801fa3a:	f4ff aeed 	bcc.w	801f818 <get_glyph_dsc_id+0x3c>
    }

    if(fdsc->cache) {
 801fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa40:	695b      	ldr	r3, [r3, #20]
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d007      	beq.n	801fa56 <get_glyph_dsc_id+0x27a>
        fdsc->cache->last_letter = letter;
 801fa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa48:	695b      	ldr	r3, [r3, #20]
 801fa4a:	683a      	ldr	r2, [r7, #0]
 801fa4c:	601a      	str	r2, [r3, #0]
        fdsc->cache->last_glyph_id = 0;
 801fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa50:	695b      	ldr	r3, [r3, #20]
 801fa52:	2200      	movs	r2, #0
 801fa54:	605a      	str	r2, [r3, #4]
    }
    return 0;
 801fa56:	2300      	movs	r3, #0

}
 801fa58:	4618      	mov	r0, r3
 801fa5a:	373c      	adds	r7, #60	; 0x3c
 801fa5c:	46bd      	mov	sp, r7
 801fa5e:	bd90      	pop	{r4, r7, pc}
 801fa60:	0801fc45 	.word	0x0801fc45

0801fa64 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 801fa64:	b580      	push	{r7, lr}
 801fa66:	b094      	sub	sp, #80	; 0x50
 801fa68:	af02      	add	r7, sp, #8
 801fa6a:	60f8      	str	r0, [r7, #12]
 801fa6c:	60b9      	str	r1, [r7, #8]
 801fa6e:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801fa70:	68fb      	ldr	r3, [r7, #12]
 801fa72:	691b      	ldr	r3, [r3, #16]
 801fa74:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 801fa76:	2300      	movs	r3, #0
 801fa78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 801fa7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fa7e:	7cdb      	ldrb	r3, [r3, #19]
 801fa80:	f003 0320 	and.w	r3, r3, #32
 801fa84:	b2db      	uxtb	r3, r3
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	d160      	bne.n	801fb4c <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 801fa8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fa8c:	68db      	ldr	r3, [r3, #12]
 801fa8e:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 801fa90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa92:	7adb      	ldrb	r3, [r3, #11]
 801fa94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801fa98:	b2db      	uxtb	r3, r3
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	d129      	bne.n	801faf2 <get_kern_value+0x8e>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
 801fa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801faa0:	681b      	ldr	r3, [r3, #0]
 801faa2:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	b29b      	uxth	r3, r3
 801faa8:	021b      	lsls	r3, r3, #8
 801faaa:	b29a      	uxth	r2, r3
 801faac:	68bb      	ldr	r3, [r7, #8]
 801faae:	b29b      	uxth	r3, r3
 801fab0:	4413      	add	r3, r2
 801fab2:	b29b      	uxth	r3, r3
 801fab4:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801fab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fab8:	689b      	ldr	r3, [r3, #8]
 801faba:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801fabe:	461a      	mov	r2, r3
 801fac0:	f107 001a 	add.w	r0, r7, #26
 801fac4:	4b39      	ldr	r3, [pc, #228]	; (801fbac <get_kern_value+0x148>)
 801fac6:	9300      	str	r3, [sp, #0]
 801fac8:	2302      	movs	r3, #2
 801faca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801facc:	f005 fa38 	bl	8024f40 <_lv_utils_bsearch>
 801fad0:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801fad2:	6a3b      	ldr	r3, [r7, #32]
 801fad4:	2b00      	cmp	r3, #0
 801fad6:	d063      	beq.n	801fba0 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801fad8:	6a3a      	ldr	r2, [r7, #32]
 801fada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fadc:	1ad3      	subs	r3, r2, r3
 801fade:	105b      	asrs	r3, r3, #1
 801fae0:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 801fae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fae4:	685a      	ldr	r2, [r3, #4]
 801fae6:	69fb      	ldr	r3, [r7, #28]
 801fae8:	4413      	add	r3, r2
 801faea:	781b      	ldrb	r3, [r3, #0]
 801faec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801faf0:	e056      	b.n	801fba0 <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 801faf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801faf4:	7adb      	ldrb	r3, [r3, #11]
 801faf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801fafa:	b2db      	uxtb	r3, r3
 801fafc:	2b40      	cmp	r3, #64	; 0x40
 801fafe:	d14f      	bne.n	801fba0 <get_kern_value+0x13c>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint32_t * g_ids = kdsc->glyph_ids;
 801fb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	041a      	lsls	r2, r3, #16
 801fb0a:	68bb      	ldr	r3, [r7, #8]
 801fb0c:	4413      	add	r3, r2
 801fb0e:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801fb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb12:	689b      	ldr	r3, [r3, #8]
 801fb14:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801fb18:	461a      	mov	r2, r3
 801fb1a:	f107 0014 	add.w	r0, r7, #20
 801fb1e:	4b24      	ldr	r3, [pc, #144]	; (801fbb0 <get_kern_value+0x14c>)
 801fb20:	9300      	str	r3, [sp, #0]
 801fb22:	2304      	movs	r3, #4
 801fb24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fb26:	f005 fa0b 	bl	8024f40 <_lv_utils_bsearch>
 801fb2a:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801fb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d036      	beq.n	801fba0 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 801fb32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb36:	1ad3      	subs	r3, r2, r3
 801fb38:	109b      	asrs	r3, r3, #2
 801fb3a:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 801fb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb3e:	685a      	ldr	r2, [r3, #4]
 801fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb42:	4413      	add	r3, r2
 801fb44:	781b      	ldrb	r3, [r3, #0]
 801fb46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801fb4a:	e029      	b.n	801fba0 <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 801fb4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb4e:	68db      	ldr	r3, [r3, #12]
 801fb50:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 801fb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fb54:	685a      	ldr	r2, [r3, #4]
 801fb56:	68bb      	ldr	r3, [r7, #8]
 801fb58:	4413      	add	r3, r2
 801fb5a:	781b      	ldrb	r3, [r3, #0]
 801fb5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801fb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fb62:	689a      	ldr	r2, [r3, #8]
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	4413      	add	r3, r2
 801fb68:	781b      	ldrb	r3, [r3, #0]
 801fb6a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 801fb6e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	d014      	beq.n	801fba0 <get_kern_value+0x13c>
 801fb76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d010      	beq.n	801fba0 <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 801fb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fb80:	681b      	ldr	r3, [r3, #0]
 801fb82:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801fb86:	3a01      	subs	r2, #1
 801fb88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801fb8a:	7b49      	ldrb	r1, [r1, #13]
 801fb8c:	fb02 f101 	mul.w	r1, r2, r1
 801fb90:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801fb94:	3a01      	subs	r2, #1
 801fb96:	440a      	add	r2, r1
 801fb98:	4413      	add	r3, r2
 801fb9a:	781b      	ldrb	r3, [r3, #0]
 801fb9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 801fba0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801fba4:	4618      	mov	r0, r3
 801fba6:	3748      	adds	r7, #72	; 0x48
 801fba8:	46bd      	mov	sp, r7
 801fbaa:	bd80      	pop	{r7, pc}
 801fbac:	0801fbb5 	.word	0x0801fbb5
 801fbb0:	0801fbfd 	.word	0x0801fbfd

0801fbb4 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 801fbb4:	b480      	push	{r7}
 801fbb6:	b085      	sub	sp, #20
 801fbb8:	af00      	add	r7, sp, #0
 801fbba:	6078      	str	r0, [r7, #4]
 801fbbc:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 801fbc2:	683b      	ldr	r3, [r7, #0]
 801fbc4:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	781a      	ldrb	r2, [r3, #0]
 801fbca:	68bb      	ldr	r3, [r7, #8]
 801fbcc:	781b      	ldrb	r3, [r3, #0]
 801fbce:	429a      	cmp	r2, r3
 801fbd0:	d006      	beq.n	801fbe0 <kern_pair_8_compare+0x2c>
 801fbd2:	68fb      	ldr	r3, [r7, #12]
 801fbd4:	781b      	ldrb	r3, [r3, #0]
 801fbd6:	461a      	mov	r2, r3
 801fbd8:	68bb      	ldr	r3, [r7, #8]
 801fbda:	781b      	ldrb	r3, [r3, #0]
 801fbdc:	1ad3      	subs	r3, r2, r3
 801fbde:	e007      	b.n	801fbf0 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 801fbe0:	68fb      	ldr	r3, [r7, #12]
 801fbe2:	3301      	adds	r3, #1
 801fbe4:	781b      	ldrb	r3, [r3, #0]
 801fbe6:	461a      	mov	r2, r3
 801fbe8:	68bb      	ldr	r3, [r7, #8]
 801fbea:	3301      	adds	r3, #1
 801fbec:	781b      	ldrb	r3, [r3, #0]
 801fbee:	1ad3      	subs	r3, r2, r3

}
 801fbf0:	4618      	mov	r0, r3
 801fbf2:	3714      	adds	r7, #20
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbfa:	4770      	bx	lr

0801fbfc <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 801fbfc:	b480      	push	{r7}
 801fbfe:	b085      	sub	sp, #20
 801fc00:	af00      	add	r7, sp, #0
 801fc02:	6078      	str	r0, [r7, #4]
 801fc04:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 801fc0a:	683b      	ldr	r3, [r7, #0]
 801fc0c:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801fc0e:	68fb      	ldr	r3, [r7, #12]
 801fc10:	881a      	ldrh	r2, [r3, #0]
 801fc12:	68bb      	ldr	r3, [r7, #8]
 801fc14:	881b      	ldrh	r3, [r3, #0]
 801fc16:	429a      	cmp	r2, r3
 801fc18:	d006      	beq.n	801fc28 <kern_pair_16_compare+0x2c>
 801fc1a:	68fb      	ldr	r3, [r7, #12]
 801fc1c:	881b      	ldrh	r3, [r3, #0]
 801fc1e:	461a      	mov	r2, r3
 801fc20:	68bb      	ldr	r3, [r7, #8]
 801fc22:	881b      	ldrh	r3, [r3, #0]
 801fc24:	1ad3      	subs	r3, r2, r3
 801fc26:	e007      	b.n	801fc38 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 801fc28:	68fb      	ldr	r3, [r7, #12]
 801fc2a:	3302      	adds	r3, #2
 801fc2c:	881b      	ldrh	r3, [r3, #0]
 801fc2e:	461a      	mov	r2, r3
 801fc30:	68bb      	ldr	r3, [r7, #8]
 801fc32:	3302      	adds	r3, #2
 801fc34:	881b      	ldrh	r3, [r3, #0]
 801fc36:	1ad3      	subs	r3, r2, r3
}
 801fc38:	4618      	mov	r0, r3
 801fc3a:	3714      	adds	r7, #20
 801fc3c:	46bd      	mov	sp, r7
 801fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc42:	4770      	bx	lr

0801fc44 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 801fc44:	b480      	push	{r7}
 801fc46:	b083      	sub	sp, #12
 801fc48:	af00      	add	r7, sp, #0
 801fc4a:	6078      	str	r0, [r7, #4]
 801fc4c:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	881b      	ldrh	r3, [r3, #0]
 801fc52:	461a      	mov	r2, r3
 801fc54:	683b      	ldr	r3, [r7, #0]
 801fc56:	881b      	ldrh	r3, [r3, #0]
 801fc58:	1ad3      	subs	r3, r2, r3
}
 801fc5a:	4618      	mov	r0, r3
 801fc5c:	370c      	adds	r7, #12
 801fc5e:	46bd      	mov	sp, r7
 801fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc64:	4770      	bx	lr

0801fc66 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801fc66:	b480      	push	{r7}
 801fc68:	b083      	sub	sp, #12
 801fc6a:	af00      	add	r7, sp, #0
 801fc6c:	4603      	mov	r3, r0
 801fc6e:	71fb      	strb	r3, [r7, #7]
 801fc70:	460b      	mov	r3, r1
 801fc72:	71bb      	strb	r3, [r7, #6]
 801fc74:	4613      	mov	r3, r2
 801fc76:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801fc78:	797b      	ldrb	r3, [r7, #5]
 801fc7a:	09db      	lsrs	r3, r3, #7
 801fc7c:	b2da      	uxtb	r2, r3
 801fc7e:	79bb      	ldrb	r3, [r7, #6]
 801fc80:	09db      	lsrs	r3, r3, #7
 801fc82:	b2db      	uxtb	r3, r3
 801fc84:	4313      	orrs	r3, r2
 801fc86:	b2da      	uxtb	r2, r3
 801fc88:	79fb      	ldrb	r3, [r7, #7]
 801fc8a:	09db      	lsrs	r3, r3, #7
 801fc8c:	b2db      	uxtb	r3, r3
 801fc8e:	4313      	orrs	r3, r2
 801fc90:	b2db      	uxtb	r3, r3
}
 801fc92:	4618      	mov	r0, r3
 801fc94:	370c      	adds	r7, #12
 801fc96:	46bd      	mov	sp, r7
 801fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc9c:	4770      	bx	lr

0801fc9e <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 801fc9e:	b580      	push	{r7, lr}
 801fca0:	b082      	sub	sp, #8
 801fca2:	af00      	add	r7, sp, #0
 801fca4:	6078      	str	r0, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    lv_color_t r;
    r.full = c | 0xFF000000;
    return r;
#else /*LV_COLOR_DEPTH == 8*/
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	0c1b      	lsrs	r3, r3, #16
 801fcaa:	b2d8      	uxtb	r0, r3
 801fcac:	687b      	ldr	r3, [r7, #4]
 801fcae:	0a1b      	lsrs	r3, r3, #8
 801fcb0:	b2db      	uxtb	r3, r3
 801fcb2:	687a      	ldr	r2, [r7, #4]
 801fcb4:	b2d2      	uxtb	r2, r2
 801fcb6:	4619      	mov	r1, r3
 801fcb8:	f7ff ffd5 	bl	801fc66 <lv_color_make>
 801fcbc:	4603      	mov	r3, r0
#endif
}
 801fcbe:	4618      	mov	r0, r3
 801fcc0:	3708      	adds	r7, #8
 801fcc2:	46bd      	mov	sp, r7
 801fcc4:	bd80      	pop	{r7, pc}

0801fcc6 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 801fcc6:	b580      	push	{r7, lr}
 801fcc8:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 801fcca:	22ff      	movs	r2, #255	; 0xff
 801fccc:	21ff      	movs	r1, #255	; 0xff
 801fcce:	20ff      	movs	r0, #255	; 0xff
 801fcd0:	f7ff ffc9 	bl	801fc66 <lv_color_make>
 801fcd4:	4603      	mov	r3, r0
}
 801fcd6:	4618      	mov	r0, r3
 801fcd8:	bd80      	pop	{r7, pc}
	...

0801fcdc <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 801fcdc:	b580      	push	{r7, lr}
 801fcde:	b082      	sub	sp, #8
 801fce0:	af00      	add	r7, sp, #0
 801fce2:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 801fce4:	4a04      	ldr	r2, [pc, #16]	; (801fcf8 <lv_obj_remove_style_all+0x1c>)
 801fce6:	2100      	movs	r1, #0
 801fce8:	6878      	ldr	r0, [r7, #4]
 801fcea:	f7ec fd65 	bl	800c7b8 <lv_obj_remove_style>
}
 801fcee:	bf00      	nop
 801fcf0:	3708      	adds	r7, #8
 801fcf2:	46bd      	mov	sp, r7
 801fcf4:	bd80      	pop	{r7, pc}
 801fcf6:	bf00      	nop
 801fcf8:	000fffff 	.word	0x000fffff

0801fcfc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801fcfc:	b590      	push	{r4, r7, lr}
 801fcfe:	b083      	sub	sp, #12
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	6078      	str	r0, [r7, #4]
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 801fd04:	2150      	movs	r1, #80	; 0x50
 801fd06:	6878      	ldr	r0, [r7, #4]
 801fd08:	f002 fda8 	bl	802285c <lv_memset_00>

    driver->hor_res          = 320;
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801fd12:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = 240;
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	22f0      	movs	r2, #240	; 0xf0
 801fd18:	805a      	strh	r2, [r3, #2]
    driver->physical_hor_res = -1;
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fd20:	809a      	strh	r2, [r3, #4]
    driver->physical_ver_res = -1;
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fd28:	80da      	strh	r2, [r3, #6]
    driver->offset_x         = 0;
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	2200      	movs	r2, #0
 801fd2e:	811a      	strh	r2, [r3, #8]
    driver->offset_y         = 0;
 801fd30:	687b      	ldr	r3, [r7, #4]
 801fd32:	2200      	movs	r2, #0
 801fd34:	815a      	strh	r2, [r3, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801fd36:	687a      	ldr	r2, [r7, #4]
 801fd38:	7c13      	ldrb	r3, [r2, #16]
 801fd3a:	f36f 03c3 	bfc	r3, #3, #1
 801fd3e:	7413      	strb	r3, [r2, #16]
    driver->screen_transp    = 0;
 801fd40:	687a      	ldr	r2, [r7, #4]
 801fd42:	7c13      	ldrb	r3, [r2, #16]
 801fd44:	f36f 1386 	bfc	r3, #6, #1
 801fd48:	7413      	strb	r3, [r2, #16]
    driver->dpi              = LV_DPI_DEF;
 801fd4a:	687a      	ldr	r2, [r7, #4]
 801fd4c:	6913      	ldr	r3, [r2, #16]
 801fd4e:	2182      	movs	r1, #130	; 0x82
 801fd50:	f361 13d0 	bfi	r3, r1, #7, #10
 801fd54:	6113      	str	r3, [r2, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 801fd56:	687c      	ldr	r4, [r7, #4]
 801fd58:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 801fd5c:	f7ff ff9f 	bl	801fc9e <lv_color_hex>
 801fd60:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	4a06      	ldr	r2, [pc, #24]	; (801fd80 <lv_disp_drv_init+0x84>)
 801fd68:	641a      	str	r2, [r3, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	4a04      	ldr	r2, [pc, #16]	; (801fd80 <lv_disp_drv_init+0x84>)
 801fd6e:	645a      	str	r2, [r3, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	2254      	movs	r2, #84	; 0x54
 801fd74:	649a      	str	r2, [r3, #72]	; 0x48
#endif

}
 801fd76:	bf00      	nop
 801fd78:	370c      	adds	r7, #12
 801fd7a:	46bd      	mov	sp, r7
 801fd7c:	bd90      	pop	{r4, r7, pc}
 801fd7e:	bf00      	nop
 801fd80:	08015599 	.word	0x08015599

0801fd84 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801fd84:	b580      	push	{r7, lr}
 801fd86:	b084      	sub	sp, #16
 801fd88:	af00      	add	r7, sp, #0
 801fd8a:	60f8      	str	r0, [r7, #12]
 801fd8c:	60b9      	str	r1, [r7, #8]
 801fd8e:	607a      	str	r2, [r7, #4]
 801fd90:	603b      	str	r3, [r7, #0]
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 801fd92:	211c      	movs	r1, #28
 801fd94:	68f8      	ldr	r0, [r7, #12]
 801fd96:	f002 fd61 	bl	802285c <lv_memset_00>

    draw_buf->buf1    = buf1;
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	68ba      	ldr	r2, [r7, #8]
 801fd9e:	601a      	str	r2, [r3, #0]
    draw_buf->buf2    = buf2;
 801fda0:	68fb      	ldr	r3, [r7, #12]
 801fda2:	687a      	ldr	r2, [r7, #4]
 801fda4:	605a      	str	r2, [r3, #4]
    draw_buf->buf_act = draw_buf->buf1;
 801fda6:	68fb      	ldr	r3, [r7, #12]
 801fda8:	681a      	ldr	r2, [r3, #0]
 801fdaa:	68fb      	ldr	r3, [r7, #12]
 801fdac:	609a      	str	r2, [r3, #8]
    draw_buf->size    = size_in_px_cnt;
 801fdae:	68fb      	ldr	r3, [r7, #12]
 801fdb0:	683a      	ldr	r2, [r7, #0]
 801fdb2:	60da      	str	r2, [r3, #12]
}
 801fdb4:	bf00      	nop
 801fdb6:	3710      	adds	r7, #16
 801fdb8:	46bd      	mov	sp, r7
 801fdba:	bd80      	pop	{r7, pc}

0801fdbc <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 801fdbc:	b590      	push	{r4, r7, lr}
 801fdbe:	b087      	sub	sp, #28
 801fdc0:	af00      	add	r7, sp, #0
 801fdc2:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801fdc4:	485f      	ldr	r0, [pc, #380]	; (801ff44 <lv_disp_drv_register+0x188>)
 801fdc6:	f001 fe91 	bl	8021aec <_lv_ll_ins_head>
 801fdca:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(disp);
 801fdcc:	697b      	ldr	r3, [r7, #20]
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d100      	bne.n	801fdd4 <lv_disp_drv_register+0x18>
 801fdd2:	e7fe      	b.n	801fdd2 <lv_disp_drv_register+0x16>
    if(!disp) {
 801fdd4:	697b      	ldr	r3, [r7, #20]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d101      	bne.n	801fdde <lv_disp_drv_register+0x22>
        return NULL;
 801fdda:	2300      	movs	r3, #0
 801fddc:	e0ae      	b.n	801ff3c <lv_disp_drv_register+0x180>
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	d116      	bne.n	801fe14 <lv_disp_drv_register+0x58>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fdea:	4618      	mov	r0, r3
 801fdec:	f002 f902 	bl	8021ff4 <lv_mem_alloc>
 801fdf0:	6138      	str	r0, [r7, #16]
        LV_ASSERT_MALLOC(draw_ctx);
 801fdf2:	693b      	ldr	r3, [r7, #16]
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	d100      	bne.n	801fdfa <lv_disp_drv_register+0x3e>
 801fdf8:	e7fe      	b.n	801fdf8 <lv_disp_drv_register+0x3c>
        if(draw_ctx == NULL) return NULL;
 801fdfa:	693b      	ldr	r3, [r7, #16]
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	d101      	bne.n	801fe04 <lv_disp_drv_register+0x48>
 801fe00:	2300      	movs	r3, #0
 801fe02:	e09b      	b.n	801ff3c <lv_disp_drv_register+0x180>
        driver->draw_ctx_init(driver, draw_ctx);
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fe08:	6939      	ldr	r1, [r7, #16]
 801fe0a:	6878      	ldr	r0, [r7, #4]
 801fe0c:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	693a      	ldr	r2, [r7, #16]
 801fe12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 801fe14:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801fe18:	6978      	ldr	r0, [r7, #20]
 801fe1a:	f002 fd1f 	bl	802285c <lv_memset_00>

    disp->driver = driver;
 801fe1e:	697b      	ldr	r3, [r7, #20]
 801fe20:	687a      	ldr	r2, [r7, #4]
 801fe22:	601a      	str	r2, [r3, #0]

    disp->inv_en_cnt = 1;
 801fe24:	697b      	ldr	r3, [r7, #20]
 801fe26:	2201      	movs	r2, #1
 801fe28:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

    lv_disp_t * disp_def_tmp = disp_def;
 801fe2c:	4b46      	ldr	r3, [pc, #280]	; (801ff48 <lv_disp_drv_register+0x18c>)
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	60fb      	str	r3, [r7, #12]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801fe32:	4a45      	ldr	r2, [pc, #276]	; (801ff48 <lv_disp_drv_register+0x18c>)
 801fe34:	697b      	ldr	r3, [r7, #20]
 801fe36:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 801fe38:	697a      	ldr	r2, [r7, #20]
 801fe3a:	211e      	movs	r1, #30
 801fe3c:	4843      	ldr	r0, [pc, #268]	; (801ff4c <lv_disp_drv_register+0x190>)
 801fe3e:	f003 fbd1 	bl	80235e4 <lv_timer_create>
 801fe42:	4602      	mov	r2, r0
 801fe44:	697b      	ldr	r3, [r7, #20]
 801fe46:	605a      	str	r2, [r3, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 801fe48:	697b      	ldr	r3, [r7, #20]
 801fe4a:	685b      	ldr	r3, [r3, #4]
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	d100      	bne.n	801fe52 <lv_disp_drv_register+0x96>
 801fe50:	e7fe      	b.n	801fe50 <lv_disp_drv_register+0x94>
    if(disp->refr_timer == NULL) {
 801fe52:	697b      	ldr	r3, [r7, #20]
 801fe54:	685b      	ldr	r3, [r3, #4]
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	d104      	bne.n	801fe64 <lv_disp_drv_register+0xa8>
        lv_mem_free(disp);
 801fe5a:	6978      	ldr	r0, [r7, #20]
 801fe5c:	f002 f8fa 	bl	8022054 <lv_mem_free>
        return NULL;
 801fe60:	2300      	movs	r3, #0
 801fe62:	e06b      	b.n	801ff3c <lv_disp_drv_register+0x180>
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	7c1b      	ldrb	r3, [r3, #16]
 801fe68:	f003 0302 	and.w	r3, r3, #2
 801fe6c:	b2db      	uxtb	r3, r3
 801fe6e:	2b00      	cmp	r3, #0
 801fe70:	d012      	beq.n	801fe98 <lv_disp_drv_register+0xdc>
 801fe72:	687b      	ldr	r3, [r7, #4]
 801fe74:	68db      	ldr	r3, [r3, #12]
 801fe76:	68da      	ldr	r2, [r3, #12]
 801fe78:	687b      	ldr	r3, [r7, #4]
 801fe7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fe7e:	4619      	mov	r1, r3
 801fe80:	687b      	ldr	r3, [r7, #4]
 801fe82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fe86:	fb01 f303 	mul.w	r3, r1, r3
 801fe8a:	429a      	cmp	r2, r3
 801fe8c:	d204      	bcs.n	801fe98 <lv_disp_drv_register+0xdc>
        driver->full_refresh = 0;
 801fe8e:	687a      	ldr	r2, [r7, #4]
 801fe90:	7c13      	ldrb	r3, [r2, #16]
 801fe92:	f36f 0341 	bfc	r3, #1, #1
 801fe96:	7413      	strb	r3, [r2, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 801fe98:	697c      	ldr	r4, [r7, #20]
 801fe9a:	f7ff ff14 	bl	801fcc6 <lv_color_white>
 801fe9e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801fea2:	697b      	ldr	r3, [r7, #20]
 801fea4:	22ff      	movs	r2, #255	; 0xff
 801fea6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 801feaa:	2000      	movs	r0, #0
 801feac:	f7e6 f86a 	bl	8005f84 <lv_obj_create>
 801feb0:	4602      	mov	r2, r0
 801feb2:	697b      	ldr	r3, [r7, #20]
 801feb4:	611a      	str	r2, [r3, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 801feb6:	2000      	movs	r0, #0
 801feb8:	f7e6 f864 	bl	8005f84 <lv_obj_create>
 801febc:	4602      	mov	r2, r0
 801febe:	697b      	ldr	r3, [r7, #20]
 801fec0:	61da      	str	r2, [r3, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 801fec2:	2000      	movs	r0, #0
 801fec4:	f7e6 f85e 	bl	8005f84 <lv_obj_create>
 801fec8:	4602      	mov	r2, r0
 801feca:	697b      	ldr	r3, [r7, #20]
 801fecc:	621a      	str	r2, [r3, #32]
    lv_obj_remove_style_all(disp->top_layer);
 801fece:	697b      	ldr	r3, [r7, #20]
 801fed0:	69db      	ldr	r3, [r3, #28]
 801fed2:	4618      	mov	r0, r3
 801fed4:	f7ff ff02 	bl	801fcdc <lv_obj_remove_style_all>
    lv_obj_remove_style_all(disp->sys_layer);
 801fed8:	697b      	ldr	r3, [r7, #20]
 801feda:	6a1b      	ldr	r3, [r3, #32]
 801fedc:	4618      	mov	r0, r3
 801fede:	f7ff fefd 	bl	801fcdc <lv_obj_remove_style_all>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 801fee2:	697b      	ldr	r3, [r7, #20]
 801fee4:	69db      	ldr	r3, [r3, #28]
 801fee6:	2102      	movs	r1, #2
 801fee8:	4618      	mov	r0, r3
 801feea:	f7e6 f85f 	bl	8005fac <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 801feee:	697b      	ldr	r3, [r7, #20]
 801fef0:	6a1b      	ldr	r3, [r3, #32]
 801fef2:	2102      	movs	r1, #2
 801fef4:	4618      	mov	r0, r3
 801fef6:	f7e6 f859 	bl	8005fac <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 801fefa:	697b      	ldr	r3, [r7, #20]
 801fefc:	69db      	ldr	r3, [r3, #28]
 801fefe:	2100      	movs	r1, #0
 801ff00:	4618      	mov	r0, r3
 801ff02:	f7ea fb64 	bl	800a5ce <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 801ff06:	697b      	ldr	r3, [r7, #20]
 801ff08:	6a1b      	ldr	r3, [r3, #32]
 801ff0a:	2100      	movs	r1, #0
 801ff0c:	4618      	mov	r0, r3
 801ff0e:	f7ea fb5e 	bl	800a5ce <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 801ff12:	697b      	ldr	r3, [r7, #20]
 801ff14:	691b      	ldr	r3, [r3, #16]
 801ff16:	4618      	mov	r0, r3
 801ff18:	f7e9 fcd5 	bl	80098c6 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801ff1c:	4a0a      	ldr	r2, [pc, #40]	; (801ff48 <lv_disp_drv_register+0x18c>)
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	6013      	str	r3, [r2, #0]
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 801ff22:	4b09      	ldr	r3, [pc, #36]	; (801ff48 <lv_disp_drv_register+0x18c>)
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d102      	bne.n	801ff30 <lv_disp_drv_register+0x174>
 801ff2a:	4a07      	ldr	r2, [pc, #28]	; (801ff48 <lv_disp_drv_register+0x18c>)
 801ff2c:	697b      	ldr	r3, [r7, #20]
 801ff2e:	6013      	str	r3, [r2, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 801ff30:	697b      	ldr	r3, [r7, #20]
 801ff32:	685b      	ldr	r3, [r3, #4]
 801ff34:	4618      	mov	r0, r3
 801ff36:	f003 fbc1 	bl	80236bc <lv_timer_ready>

    return disp;
 801ff3a:	697b      	ldr	r3, [r7, #20]
}
 801ff3c:	4618      	mov	r0, r3
 801ff3e:	371c      	adds	r7, #28
 801ff40:	46bd      	mov	sp, r7
 801ff42:	bd90      	pop	{r4, r7, pc}
 801ff44:	20000858 	.word	0x20000858
 801ff48:	2000082c 	.word	0x2000082c
 801ff4c:	0800e92d 	.word	0x0800e92d

0801ff50 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 801ff50:	b480      	push	{r7}
 801ff52:	af00      	add	r7, sp, #0
    return disp_def;
 801ff54:	4b03      	ldr	r3, [pc, #12]	; (801ff64 <lv_disp_get_default+0x14>)
 801ff56:	681b      	ldr	r3, [r3, #0]
}
 801ff58:	4618      	mov	r0, r3
 801ff5a:	46bd      	mov	sp, r7
 801ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff60:	4770      	bx	lr
 801ff62:	bf00      	nop
 801ff64:	2000082c 	.word	0x2000082c

0801ff68 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801ff68:	b580      	push	{r7, lr}
 801ff6a:	b082      	sub	sp, #8
 801ff6c:	af00      	add	r7, sp, #0
 801ff6e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d102      	bne.n	801ff7c <lv_disp_get_hor_res+0x14>
 801ff76:	f7ff ffeb 	bl	801ff50 <lv_disp_get_default>
 801ff7a:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d101      	bne.n	801ff86 <lv_disp_get_hor_res+0x1e>
        return 0;
 801ff82:	2300      	movs	r3, #0
 801ff84:	e012      	b.n	801ffac <lv_disp_get_hor_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801ff86:	687b      	ldr	r3, [r7, #4]
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	7c1b      	ldrb	r3, [r3, #16]
 801ff8c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ff90:	b2db      	uxtb	r3, r3
 801ff92:	2b01      	cmp	r3, #1
 801ff94:	d001      	beq.n	801ff9a <lv_disp_get_hor_res+0x32>
 801ff96:	2b03      	cmp	r3, #3
 801ff98:	d104      	bne.n	801ffa4 <lv_disp_get_hor_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ffa2:	e003      	b.n	801ffac <lv_disp_get_hor_res+0x44>
            default:
                return disp->driver->hor_res;
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	681b      	ldr	r3, [r3, #0]
 801ffa8:	f9b3 3000 	ldrsh.w	r3, [r3]
        }
    }
}
 801ffac:	4618      	mov	r0, r3
 801ffae:	3708      	adds	r7, #8
 801ffb0:	46bd      	mov	sp, r7
 801ffb2:	bd80      	pop	{r7, pc}

0801ffb4 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801ffb4:	b580      	push	{r7, lr}
 801ffb6:	b082      	sub	sp, #8
 801ffb8:	af00      	add	r7, sp, #0
 801ffba:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d102      	bne.n	801ffc8 <lv_disp_get_ver_res+0x14>
 801ffc2:	f7ff ffc5 	bl	801ff50 <lv_disp_get_default>
 801ffc6:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d101      	bne.n	801ffd2 <lv_disp_get_ver_res+0x1e>
        return 0;
 801ffce:	2300      	movs	r3, #0
 801ffd0:	e012      	b.n	801fff8 <lv_disp_get_ver_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	7c1b      	ldrb	r3, [r3, #16]
 801ffd8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ffdc:	b2db      	uxtb	r3, r3
 801ffde:	2b01      	cmp	r3, #1
 801ffe0:	d001      	beq.n	801ffe6 <lv_disp_get_ver_res+0x32>
 801ffe2:	2b03      	cmp	r3, #3
 801ffe4:	d104      	bne.n	801fff0 <lv_disp_get_ver_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	681b      	ldr	r3, [r3, #0]
 801ffea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ffee:	e003      	b.n	801fff8 <lv_disp_get_ver_res+0x44>
            default:
                return disp->driver->ver_res;
 801fff0:	687b      	ldr	r3, [r7, #4]
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        }
    }
}
 801fff8:	4618      	mov	r0, r3
 801fffa:	3708      	adds	r7, #8
 801fffc:	46bd      	mov	sp, r7
 801fffe:	bd80      	pop	{r7, pc}

08020000 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 8020000:	b580      	push	{r7, lr}
 8020002:	b082      	sub	sp, #8
 8020004:	af00      	add	r7, sp, #0
 8020006:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d102      	bne.n	8020014 <lv_disp_get_dpi+0x14>
 802000e:	f7ff ff9f 	bl	801ff50 <lv_disp_get_default>
 8020012:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	2b00      	cmp	r3, #0
 8020018:	d101      	bne.n	802001e <lv_disp_get_dpi+0x1e>
 802001a:	2382      	movs	r3, #130	; 0x82
 802001c:	e006      	b.n	802002c <lv_disp_get_dpi+0x2c>
    return disp->driver->dpi;
 802001e:	687b      	ldr	r3, [r7, #4]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	691b      	ldr	r3, [r3, #16]
 8020024:	f3c3 13c9 	ubfx	r3, r3, #7, #10
 8020028:	b29b      	uxth	r3, r3
 802002a:	b21b      	sxth	r3, r3
}
 802002c:	4618      	mov	r0, r3
 802002e:	3708      	adds	r7, #8
 8020030:	46bd      	mov	sp, r7
 8020032:	bd80      	pop	{r7, pc}

08020034 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 8020034:	b480      	push	{r7}
 8020036:	b083      	sub	sp, #12
 8020038:	af00      	add	r7, sp, #0
 802003a:	6078      	str	r0, [r7, #4]
    disp_drv->draw_buf->flushing = 0;
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	68db      	ldr	r3, [r3, #12]
 8020040:	2200      	movs	r2, #0
 8020042:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	68db      	ldr	r3, [r3, #12]
 8020048:	2200      	movs	r2, #0
 802004a:	615a      	str	r2, [r3, #20]
}
 802004c:	bf00      	nop
 802004e:	370c      	adds	r7, #12
 8020050:	46bd      	mov	sp, r7
 8020052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020056:	4770      	bx	lr

08020058 <lv_disp_get_draw_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
 8020058:	b480      	push	{r7}
 802005a:	b083      	sub	sp, #12
 802005c:	af00      	add	r7, sp, #0
 802005e:	6078      	str	r0, [r7, #4]
    return disp->driver->draw_buf;
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	681b      	ldr	r3, [r3, #0]
 8020064:	68db      	ldr	r3, [r3, #12]
}
 8020066:	4618      	mov	r0, r3
 8020068:	370c      	adds	r7, #12
 802006a:	46bd      	mov	sp, r7
 802006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020070:	4770      	bx	lr
	...

08020074 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8020074:	b580      	push	{r7, lr}
 8020076:	b082      	sub	sp, #8
 8020078:	af00      	add	r7, sp, #0
 802007a:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	2b00      	cmp	r3, #0
 8020080:	d104      	bne.n	802008c <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8020082:	4807      	ldr	r0, [pc, #28]	; (80200a0 <lv_indev_get_next+0x2c>)
 8020084:	f001 fdf7 	bl	8021c76 <_lv_ll_get_head>
 8020088:	4603      	mov	r3, r0
 802008a:	e004      	b.n	8020096 <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 802008c:	6879      	ldr	r1, [r7, #4]
 802008e:	4804      	ldr	r0, [pc, #16]	; (80200a0 <lv_indev_get_next+0x2c>)
 8020090:	f001 fe13 	bl	8021cba <_lv_ll_get_next>
 8020094:	4603      	mov	r3, r0
}
 8020096:	4618      	mov	r0, r3
 8020098:	3708      	adds	r7, #8
 802009a:	46bd      	mov	sp, r7
 802009c:	bd80      	pop	{r7, pc}
 802009e:	bf00      	nop
 80200a0:	20000864 	.word	0x20000864

080200a4 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 80200a4:	b480      	push	{r7}
 80200a6:	b083      	sub	sp, #12
 80200a8:	af00      	add	r7, sp, #0
 80200aa:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 80200ac:	4b07      	ldr	r3, [pc, #28]	; (80200cc <lv_tick_inc+0x28>)
 80200ae:	2200      	movs	r2, #0
 80200b0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 80200b2:	4b07      	ldr	r3, [pc, #28]	; (80200d0 <lv_tick_inc+0x2c>)
 80200b4:	681a      	ldr	r2, [r3, #0]
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	4413      	add	r3, r2
 80200ba:	4a05      	ldr	r2, [pc, #20]	; (80200d0 <lv_tick_inc+0x2c>)
 80200bc:	6013      	str	r3, [r2, #0]
}
 80200be:	bf00      	nop
 80200c0:	370c      	adds	r7, #12
 80200c2:	46bd      	mov	sp, r7
 80200c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200c8:	4770      	bx	lr
 80200ca:	bf00      	nop
 80200cc:	20000834 	.word	0x20000834
 80200d0:	20000830 	.word	0x20000830

080200d4 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 80200d4:	b480      	push	{r7}
 80200d6:	b083      	sub	sp, #12
 80200d8:	af00      	add	r7, sp, #0
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 80200da:	4b09      	ldr	r3, [pc, #36]	; (8020100 <lv_tick_get+0x2c>)
 80200dc:	2201      	movs	r2, #1
 80200de:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 80200e0:	4b08      	ldr	r3, [pc, #32]	; (8020104 <lv_tick_get+0x30>)
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 80200e6:	4b06      	ldr	r3, [pc, #24]	; (8020100 <lv_tick_get+0x2c>)
 80200e8:	781b      	ldrb	r3, [r3, #0]
 80200ea:	b2db      	uxtb	r3, r3
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d0f4      	beq.n	80200da <lv_tick_get+0x6>

    return result;
 80200f0:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 80200f2:	4618      	mov	r0, r3
 80200f4:	370c      	adds	r7, #12
 80200f6:	46bd      	mov	sp, r7
 80200f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200fc:	4770      	bx	lr
 80200fe:	bf00      	nop
 8020100:	20000834 	.word	0x20000834
 8020104:	20000830 	.word	0x20000830

08020108 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8020108:	b580      	push	{r7, lr}
 802010a:	b084      	sub	sp, #16
 802010c:	af00      	add	r7, sp, #0
 802010e:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 8020110:	f7ff ffe0 	bl	80200d4 <lv_tick_get>
 8020114:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 8020116:	68fa      	ldr	r2, [r7, #12]
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	429a      	cmp	r2, r3
 802011c:	d304      	bcc.n	8020128 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 802011e:	68fa      	ldr	r2, [r7, #12]
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	1ad3      	subs	r3, r2, r3
 8020124:	607b      	str	r3, [r7, #4]
 8020126:	e006      	b.n	8020136 <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	425b      	negs	r3, r3
 802012c:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 802012e:	687a      	ldr	r2, [r7, #4]
 8020130:	68fb      	ldr	r3, [r7, #12]
 8020132:	4413      	add	r3, r2
 8020134:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 8020136:	687b      	ldr	r3, [r7, #4]
}
 8020138:	4618      	mov	r0, r3
 802013a:	3710      	adds	r7, #16
 802013c:	46bd      	mov	sp, r7
 802013e:	bd80      	pop	{r7, pc}

08020140 <_lv_anim_core_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_anim_core_init(void)
{
 8020140:	b580      	push	{r7, lr}
 8020142:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8020144:	2144      	movs	r1, #68	; 0x44
 8020146:	4809      	ldr	r0, [pc, #36]	; (802016c <_lv_anim_core_init+0x2c>)
 8020148:	f001 fcb7 	bl	8021aba <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 802014c:	2200      	movs	r2, #0
 802014e:	211e      	movs	r1, #30
 8020150:	4807      	ldr	r0, [pc, #28]	; (8020170 <_lv_anim_core_init+0x30>)
 8020152:	f003 fa47 	bl	80235e4 <lv_timer_create>
 8020156:	4603      	mov	r3, r0
 8020158:	4a06      	ldr	r2, [pc, #24]	; (8020174 <_lv_anim_core_init+0x34>)
 802015a:	6013      	str	r3, [r2, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 802015c:	f000 fb1a 	bl	8020794 <anim_mark_list_change>
    anim_list_changed = false;
 8020160:	4b05      	ldr	r3, [pc, #20]	; (8020178 <_lv_anim_core_init+0x38>)
 8020162:	2200      	movs	r2, #0
 8020164:	701a      	strb	r2, [r3, #0]
}
 8020166:	bf00      	nop
 8020168:	bd80      	pop	{r7, pc}
 802016a:	bf00      	nop
 802016c:	2000087c 	.word	0x2000087c
 8020170:	080204e9 	.word	0x080204e9
 8020174:	20000840 	.word	0x20000840
 8020178:	2000083c 	.word	0x2000083c

0802017c <lv_anim_init>:

void lv_anim_init(lv_anim_t * a)
{
 802017c:	b580      	push	{r7, lr}
 802017e:	b082      	sub	sp, #8
 8020180:	af00      	add	r7, sp, #0
 8020182:	6078      	str	r0, [r7, #4]
    lv_memset_00(a, sizeof(lv_anim_t));
 8020184:	2144      	movs	r1, #68	; 0x44
 8020186:	6878      	ldr	r0, [r7, #4]
 8020188:	f002 fb68 	bl	802285c <lv_memset_00>
    a->time = 500;
 802018c:	687b      	ldr	r3, [r7, #4]
 802018e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8020192:	62da      	str	r2, [r3, #44]	; 0x2c
    a->start_value = 0;
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	2200      	movs	r2, #0
 8020198:	621a      	str	r2, [r3, #32]
    a->end_value = 100;
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	2264      	movs	r2, #100	; 0x64
 802019e:	629a      	str	r2, [r3, #40]	; 0x28
    a->repeat_cnt = 1;
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	2201      	movs	r2, #1
 80201a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	4a06      	ldr	r2, [pc, #24]	; (80201c4 <lv_anim_init+0x48>)
 80201ac:	61da      	str	r2, [r3, #28]
    a->early_apply = 1;
 80201ae:	687a      	ldr	r2, [r7, #4]
 80201b0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80201b4:	f043 0301 	orr.w	r3, r3, #1
 80201b8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 80201bc:	bf00      	nop
 80201be:	3708      	adds	r7, #8
 80201c0:	46bd      	mov	sp, r7
 80201c2:	bd80      	pop	{r7, pc}
 80201c4:	080203cf 	.word	0x080203cf

080201c8 <lv_anim_start>:

lv_anim_t * lv_anim_start(const lv_anim_t * a)
{
 80201c8:	b580      	push	{r7, lr}
 80201ca:	b084      	sub	sp, #16
 80201cc:	af00      	add	r7, sp, #0
 80201ce:	6078      	str	r0, [r7, #4]
    TRACE_ANIM("begin");

    /*Do not let two animations for the same 'var' with the same 'exec_cb'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	685b      	ldr	r3, [r3, #4]
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d007      	beq.n	80201e8 <lv_anim_start+0x20>
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	681a      	ldr	r2, [r3, #0]
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	685b      	ldr	r3, [r3, #4]
 80201e0:	4619      	mov	r1, r3
 80201e2:	4610      	mov	r0, r2
 80201e4:	f000 f868 	bl	80202b8 <lv_anim_del>

    /*If the list is empty the anim timer was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 80201e8:	4830      	ldr	r0, [pc, #192]	; (80202ac <lv_anim_start+0xe4>)
 80201ea:	f001 fd8f 	bl	8021d0c <_lv_ll_is_empty>
 80201ee:	4603      	mov	r3, r0
 80201f0:	2b00      	cmp	r3, #0
 80201f2:	d004      	beq.n	80201fe <lv_anim_start+0x36>
        last_timer_run = lv_tick_get();
 80201f4:	f7ff ff6e 	bl	80200d4 <lv_tick_get>
 80201f8:	4603      	mov	r3, r0
 80201fa:	4a2d      	ldr	r2, [pc, #180]	; (80202b0 <lv_anim_start+0xe8>)
 80201fc:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 80201fe:	482b      	ldr	r0, [pc, #172]	; (80202ac <lv_anim_start+0xe4>)
 8020200:	f001 fc74 	bl	8021aec <_lv_ll_ins_head>
 8020204:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(new_anim);
 8020206:	68fb      	ldr	r3, [r7, #12]
 8020208:	2b00      	cmp	r3, #0
 802020a:	d100      	bne.n	802020e <lv_anim_start+0x46>
 802020c:	e7fe      	b.n	802020c <lv_anim_start+0x44>
    if(new_anim == NULL) return NULL;
 802020e:	68fb      	ldr	r3, [r7, #12]
 8020210:	2b00      	cmp	r3, #0
 8020212:	d101      	bne.n	8020218 <lv_anim_start+0x50>
 8020214:	2300      	movs	r3, #0
 8020216:	e045      	b.n	80202a4 <lv_anim_start+0xdc>

    /*Initialize the animation descriptor*/
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8020218:	2244      	movs	r2, #68	; 0x44
 802021a:	6879      	ldr	r1, [r7, #4]
 802021c:	68f8      	ldr	r0, [r7, #12]
 802021e:	f002 f877 	bl	8022310 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8020222:	687b      	ldr	r3, [r7, #4]
 8020224:	681b      	ldr	r3, [r3, #0]
 8020226:	687a      	ldr	r2, [r7, #4]
 8020228:	429a      	cmp	r2, r3
 802022a:	d102      	bne.n	8020232 <lv_anim_start+0x6a>
 802022c:	68fb      	ldr	r3, [r7, #12]
 802022e:	68fa      	ldr	r2, [r7, #12]
 8020230:	601a      	str	r2, [r3, #0]
    new_anim->run_round = anim_run_round;
 8020232:	4b20      	ldr	r3, [pc, #128]	; (80202b4 <lv_anim_start+0xec>)
 8020234:	7819      	ldrb	r1, [r3, #0]
 8020236:	68fa      	ldr	r2, [r7, #12]
 8020238:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 802023c:	f361 0382 	bfi	r3, r1, #2, #1
 8020240:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

    /*Set the start value*/
    if(new_anim->early_apply) {
 8020244:	68fb      	ldr	r3, [r7, #12]
 8020246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802024a:	f003 0301 	and.w	r3, r3, #1
 802024e:	b2db      	uxtb	r3, r3
 8020250:	2b00      	cmp	r3, #0
 8020252:	d024      	beq.n	802029e <lv_anim_start+0xd6>
        if(new_anim->get_value_cb) {
 8020254:	68fb      	ldr	r3, [r7, #12]
 8020256:	695b      	ldr	r3, [r3, #20]
 8020258:	2b00      	cmp	r3, #0
 802025a:	d010      	beq.n	802027e <lv_anim_start+0xb6>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 802025c:	68fb      	ldr	r3, [r7, #12]
 802025e:	695b      	ldr	r3, [r3, #20]
 8020260:	68f8      	ldr	r0, [r7, #12]
 8020262:	4798      	blx	r3
 8020264:	60b8      	str	r0, [r7, #8]
            new_anim->start_value += v_ofs;
 8020266:	68fb      	ldr	r3, [r7, #12]
 8020268:	6a1a      	ldr	r2, [r3, #32]
 802026a:	68bb      	ldr	r3, [r7, #8]
 802026c:	441a      	add	r2, r3
 802026e:	68fb      	ldr	r3, [r7, #12]
 8020270:	621a      	str	r2, [r3, #32]
            new_anim->end_value += v_ofs;
 8020272:	68fb      	ldr	r3, [r7, #12]
 8020274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020276:	68bb      	ldr	r3, [r7, #8]
 8020278:	441a      	add	r2, r3
 802027a:	68fb      	ldr	r3, [r7, #12]
 802027c:	629a      	str	r2, [r3, #40]	; 0x28
        }

        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 802027e:	68fb      	ldr	r3, [r7, #12]
 8020280:	685b      	ldr	r3, [r3, #4]
 8020282:	2b00      	cmp	r3, #0
 8020284:	d00b      	beq.n	802029e <lv_anim_start+0xd6>
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	2b00      	cmp	r3, #0
 802028c:	d007      	beq.n	802029e <lv_anim_start+0xd6>
 802028e:	68fb      	ldr	r3, [r7, #12]
 8020290:	685b      	ldr	r3, [r3, #4]
 8020292:	68fa      	ldr	r2, [r7, #12]
 8020294:	6810      	ldr	r0, [r2, #0]
 8020296:	68fa      	ldr	r2, [r7, #12]
 8020298:	6a12      	ldr	r2, [r2, #32]
 802029a:	4611      	mov	r1, r2
 802029c:	4798      	blx	r3
    }

    /*Creating an animation changed the linked list.
     *It's important if it happens in a ready callback. (see `anim_timer`)*/
    anim_mark_list_change();
 802029e:	f000 fa79 	bl	8020794 <anim_mark_list_change>

    TRACE_ANIM("finished");
    return new_anim;
 80202a2:	68fb      	ldr	r3, [r7, #12]
}
 80202a4:	4618      	mov	r0, r3
 80202a6:	3710      	adds	r7, #16
 80202a8:	46bd      	mov	sp, r7
 80202aa:	bd80      	pop	{r7, pc}
 80202ac:	2000087c 	.word	0x2000087c
 80202b0:	20000838 	.word	0x20000838
 80202b4:	2000083d 	.word	0x2000083d

080202b8 <lv_anim_del>:

    return playtime;
}

bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 80202b8:	b580      	push	{r7, lr}
 80202ba:	b086      	sub	sp, #24
 80202bc:	af00      	add	r7, sp, #0
 80202be:	6078      	str	r0, [r7, #4]
 80202c0:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 80202c2:	2300      	movs	r3, #0
 80202c4:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80202c6:	481b      	ldr	r0, [pc, #108]	; (8020334 <lv_anim_del+0x7c>)
 80202c8:	f001 fcd5 	bl	8021c76 <_lv_ll_get_head>
 80202cc:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 80202ce:	e029      	b.n	8020324 <lv_anim_del+0x6c>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80202d0:	6979      	ldr	r1, [r7, #20]
 80202d2:	4818      	ldr	r0, [pc, #96]	; (8020334 <lv_anim_del+0x7c>)
 80202d4:	f001 fcf1 	bl	8021cba <_lv_ll_get_next>
 80202d8:	60f8      	str	r0, [r7, #12]

        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80202da:	697b      	ldr	r3, [r7, #20]
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	687a      	ldr	r2, [r7, #4]
 80202e0:	429a      	cmp	r2, r3
 80202e2:	d002      	beq.n	80202ea <lv_anim_del+0x32>
 80202e4:	687b      	ldr	r3, [r7, #4]
 80202e6:	2b00      	cmp	r3, #0
 80202e8:	d11a      	bne.n	8020320 <lv_anim_del+0x68>
 80202ea:	697b      	ldr	r3, [r7, #20]
 80202ec:	685b      	ldr	r3, [r3, #4]
 80202ee:	683a      	ldr	r2, [r7, #0]
 80202f0:	429a      	cmp	r2, r3
 80202f2:	d002      	beq.n	80202fa <lv_anim_del+0x42>
 80202f4:	683b      	ldr	r3, [r7, #0]
 80202f6:	2b00      	cmp	r3, #0
 80202f8:	d112      	bne.n	8020320 <lv_anim_del+0x68>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80202fa:	6979      	ldr	r1, [r7, #20]
 80202fc:	480d      	ldr	r0, [pc, #52]	; (8020334 <lv_anim_del+0x7c>)
 80202fe:	f001 fc5d 	bl	8021bbc <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8020302:	697b      	ldr	r3, [r7, #20]
 8020304:	691b      	ldr	r3, [r3, #16]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d003      	beq.n	8020312 <lv_anim_del+0x5a>
 802030a:	697b      	ldr	r3, [r7, #20]
 802030c:	691b      	ldr	r3, [r3, #16]
 802030e:	6978      	ldr	r0, [r7, #20]
 8020310:	4798      	blx	r3
            lv_mem_free(a);
 8020312:	6978      	ldr	r0, [r7, #20]
 8020314:	f001 fe9e 	bl	8022054 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 8020318:	f000 fa3c 	bl	8020794 <anim_mark_list_change>
                                       the linked list*/
            del = true;
 802031c:	2301      	movs	r3, #1
 802031e:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 8020320:	68fb      	ldr	r3, [r7, #12]
 8020322:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 8020324:	697b      	ldr	r3, [r7, #20]
 8020326:	2b00      	cmp	r3, #0
 8020328:	d1d2      	bne.n	80202d0 <lv_anim_del+0x18>
    }

    return del;
 802032a:	7cfb      	ldrb	r3, [r7, #19]
}
 802032c:	4618      	mov	r0, r3
 802032e:	3718      	adds	r7, #24
 8020330:	46bd      	mov	sp, r7
 8020332:	bd80      	pop	{r7, pc}
 8020334:	2000087c 	.word	0x2000087c

08020338 <lv_anim_get>:
    _lv_ll_clear(&LV_GC_ROOT(_lv_anim_ll));
    anim_mark_list_change();
}

lv_anim_t * lv_anim_get(void * var, lv_anim_exec_xcb_t exec_cb)
{
 8020338:	b580      	push	{r7, lr}
 802033a:	b084      	sub	sp, #16
 802033c:	af00      	add	r7, sp, #0
 802033e:	6078      	str	r0, [r7, #4]
 8020340:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8020342:	4810      	ldr	r0, [pc, #64]	; (8020384 <lv_anim_get+0x4c>)
 8020344:	f001 fc97 	bl	8021c76 <_lv_ll_get_head>
 8020348:	60f8      	str	r0, [r7, #12]
 802034a:	e013      	b.n	8020374 <lv_anim_get+0x3c>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	681b      	ldr	r3, [r3, #0]
 8020350:	687a      	ldr	r2, [r7, #4]
 8020352:	429a      	cmp	r2, r3
 8020354:	d109      	bne.n	802036a <lv_anim_get+0x32>
 8020356:	68fb      	ldr	r3, [r7, #12]
 8020358:	685b      	ldr	r3, [r3, #4]
 802035a:	683a      	ldr	r2, [r7, #0]
 802035c:	429a      	cmp	r2, r3
 802035e:	d002      	beq.n	8020366 <lv_anim_get+0x2e>
 8020360:	683b      	ldr	r3, [r7, #0]
 8020362:	2b00      	cmp	r3, #0
 8020364:	d101      	bne.n	802036a <lv_anim_get+0x32>
            return a;
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	e008      	b.n	802037c <lv_anim_get+0x44>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 802036a:	68f9      	ldr	r1, [r7, #12]
 802036c:	4805      	ldr	r0, [pc, #20]	; (8020384 <lv_anim_get+0x4c>)
 802036e:	f001 fca4 	bl	8021cba <_lv_ll_get_next>
 8020372:	60f8      	str	r0, [r7, #12]
 8020374:	68fb      	ldr	r3, [r7, #12]
 8020376:	2b00      	cmp	r3, #0
 8020378:	d1e8      	bne.n	802034c <lv_anim_get+0x14>
        }
    }

    return NULL;
 802037a:	2300      	movs	r3, #0
}
 802037c:	4618      	mov	r0, r3
 802037e:	3710      	adds	r7, #16
 8020380:	46bd      	mov	sp, r7
 8020382:	bd80      	pop	{r7, pc}
 8020384:	2000087c 	.word	0x2000087c

08020388 <lv_anim_speed_to_time>:

    return cnt;
}

uint32_t lv_anim_speed_to_time(uint32_t speed, int32_t start, int32_t end)
{
 8020388:	b480      	push	{r7}
 802038a:	b087      	sub	sp, #28
 802038c:	af00      	add	r7, sp, #0
 802038e:	60f8      	str	r0, [r7, #12]
 8020390:	60b9      	str	r1, [r7, #8]
 8020392:	607a      	str	r2, [r7, #4]
    uint32_t d    = LV_ABS(start - end);
 8020394:	68ba      	ldr	r2, [r7, #8]
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	1ad3      	subs	r3, r2, r3
 802039a:	2b00      	cmp	r3, #0
 802039c:	bfb8      	it	lt
 802039e:	425b      	neglt	r3, r3
 80203a0:	613b      	str	r3, [r7, #16]
    uint32_t time = (d * 1000) / speed;
 80203a2:	693b      	ldr	r3, [r7, #16]
 80203a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80203a8:	fb03 f202 	mul.w	r2, r3, r2
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80203b2:	617b      	str	r3, [r7, #20]

    if(time == 0) {
 80203b4:	697b      	ldr	r3, [r7, #20]
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	d102      	bne.n	80203c0 <lv_anim_speed_to_time+0x38>
        time++;
 80203ba:	697b      	ldr	r3, [r7, #20]
 80203bc:	3301      	adds	r3, #1
 80203be:	617b      	str	r3, [r7, #20]
    }

    return time;
 80203c0:	697b      	ldr	r3, [r7, #20]
}
 80203c2:	4618      	mov	r0, r3
 80203c4:	371c      	adds	r7, #28
 80203c6:	46bd      	mov	sp, r7
 80203c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203cc:	4770      	bx	lr

080203ce <lv_anim_path_linear>:
{
    anim_timer(NULL);
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
 80203ce:	b580      	push	{r7, lr}
 80203d0:	b086      	sub	sp, #24
 80203d2:	af02      	add	r7, sp, #8
 80203d4:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80203de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80203e2:	9300      	str	r3, [sp, #0]
 80203e4:	2300      	movs	r3, #0
 80203e6:	2100      	movs	r1, #0
 80203e8:	f001 fdac 	bl	8021f44 <lv_map>
 80203ec:	60f8      	str	r0, [r7, #12]

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	6a1b      	ldr	r3, [r3, #32]
 80203f6:	1ad2      	subs	r2, r2, r3
 80203f8:	68fb      	ldr	r3, [r7, #12]
 80203fa:	fb02 f303 	mul.w	r3, r2, r3
 80203fe:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 8020400:	68bb      	ldr	r3, [r7, #8]
 8020402:	129b      	asrs	r3, r3, #10
 8020404:	60bb      	str	r3, [r7, #8]
    new_value += a->start_value;
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	6a1b      	ldr	r3, [r3, #32]
 802040a:	68ba      	ldr	r2, [r7, #8]
 802040c:	4413      	add	r3, r2
 802040e:	60bb      	str	r3, [r7, #8]

    return new_value;
 8020410:	68bb      	ldr	r3, [r7, #8]
}
 8020412:	4618      	mov	r0, r3
 8020414:	3710      	adds	r7, #16
 8020416:	46bd      	mov	sp, r7
 8020418:	bd80      	pop	{r7, pc}

0802041a <lv_anim_path_ease_out>:

    return new_value;
}

int32_t lv_anim_path_ease_out(const lv_anim_t * a)
{
 802041a:	b580      	push	{r7, lr}
 802041c:	b088      	sub	sp, #32
 802041e:	af02      	add	r7, sp, #8
 8020420:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802042e:	9300      	str	r3, [sp, #0]
 8020430:	2300      	movs	r3, #0
 8020432:	2100      	movs	r1, #0
 8020434:	f001 fd86 	bl	8021f44 <lv_map>
 8020438:	4603      	mov	r3, r0
 802043a:	617b      	str	r3, [r7, #20]
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 802043c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020440:	9300      	str	r3, [sp, #0]
 8020442:	f240 33b6 	movw	r3, #950	; 0x3b6
 8020446:	f44f 7261 	mov.w	r2, #900	; 0x384
 802044a:	2100      	movs	r1, #0
 802044c:	6978      	ldr	r0, [r7, #20]
 802044e:	f001 fd27 	bl	8021ea0 <lv_bezier3>
 8020452:	4603      	mov	r3, r0
 8020454:	613b      	str	r3, [r7, #16]

    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	6a1b      	ldr	r3, [r3, #32]
 802045e:	1ad2      	subs	r2, r2, r3
 8020460:	693b      	ldr	r3, [r7, #16]
 8020462:	fb02 f303 	mul.w	r3, r2, r3
 8020466:	60fb      	str	r3, [r7, #12]
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 8020468:	68fb      	ldr	r3, [r7, #12]
 802046a:	129b      	asrs	r3, r3, #10
 802046c:	60fb      	str	r3, [r7, #12]
    new_value += a->start_value;
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	6a1b      	ldr	r3, [r3, #32]
 8020472:	68fa      	ldr	r2, [r7, #12]
 8020474:	4413      	add	r3, r2
 8020476:	60fb      	str	r3, [r7, #12]

    return new_value;
 8020478:	68fb      	ldr	r3, [r7, #12]
}
 802047a:	4618      	mov	r0, r3
 802047c:	3718      	adds	r7, #24
 802047e:	46bd      	mov	sp, r7
 8020480:	bd80      	pop	{r7, pc}

08020482 <lv_anim_path_ease_in_out>:

int32_t lv_anim_path_ease_in_out(const lv_anim_t * a)
{
 8020482:	b580      	push	{r7, lr}
 8020484:	b088      	sub	sp, #32
 8020486:	af02      	add	r7, sp, #8
 8020488:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 802048e:	687b      	ldr	r3, [r7, #4]
 8020490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020496:	9300      	str	r3, [sp, #0]
 8020498:	2300      	movs	r3, #0
 802049a:	2100      	movs	r1, #0
 802049c:	f001 fd52 	bl	8021f44 <lv_map>
 80204a0:	4603      	mov	r3, r0
 80204a2:	617b      	str	r3, [r7, #20]
    int32_t step = lv_bezier3(t, 0, 50, 952, LV_BEZIER_VAL_MAX);
 80204a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80204a8:	9300      	str	r3, [sp, #0]
 80204aa:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 80204ae:	2232      	movs	r2, #50	; 0x32
 80204b0:	2100      	movs	r1, #0
 80204b2:	6978      	ldr	r0, [r7, #20]
 80204b4:	f001 fcf4 	bl	8021ea0 <lv_bezier3>
 80204b8:	4603      	mov	r3, r0
 80204ba:	613b      	str	r3, [r7, #16]

    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	6a1b      	ldr	r3, [r3, #32]
 80204c4:	1ad2      	subs	r2, r2, r3
 80204c6:	693b      	ldr	r3, [r7, #16]
 80204c8:	fb02 f303 	mul.w	r3, r2, r3
 80204cc:	60fb      	str	r3, [r7, #12]
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 80204ce:	68fb      	ldr	r3, [r7, #12]
 80204d0:	129b      	asrs	r3, r3, #10
 80204d2:	60fb      	str	r3, [r7, #12]
    new_value += a->start_value;
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	6a1b      	ldr	r3, [r3, #32]
 80204d8:	68fa      	ldr	r2, [r7, #12]
 80204da:	4413      	add	r3, r2
 80204dc:	60fb      	str	r3, [r7, #12]

    return new_value;
 80204de:	68fb      	ldr	r3, [r7, #12]
}
 80204e0:	4618      	mov	r0, r3
 80204e2:	3718      	adds	r7, #24
 80204e4:	46bd      	mov	sp, r7
 80204e6:	bd80      	pop	{r7, pc}

080204e8 <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 80204e8:	b580      	push	{r7, lr}
 80204ea:	b088      	sub	sp, #32
 80204ec:	af00      	add	r7, sp, #0
 80204ee:	6078      	str	r0, [r7, #4]
    LV_UNUSED(param);

    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80204f0:	4b5d      	ldr	r3, [pc, #372]	; (8020668 <anim_timer+0x180>)
 80204f2:	681b      	ldr	r3, [r3, #0]
 80204f4:	4618      	mov	r0, r3
 80204f6:	f7ff fe07 	bl	8020108 <lv_tick_elaps>
 80204fa:	61b8      	str	r0, [r7, #24]

    /*Flip the run round*/
    anim_run_round = anim_run_round ? false : true;
 80204fc:	4b5b      	ldr	r3, [pc, #364]	; (802066c <anim_timer+0x184>)
 80204fe:	781b      	ldrb	r3, [r3, #0]
 8020500:	f083 0301 	eor.w	r3, r3, #1
 8020504:	b2da      	uxtb	r2, r3
 8020506:	4b59      	ldr	r3, [pc, #356]	; (802066c <anim_timer+0x184>)
 8020508:	701a      	strb	r2, [r3, #0]

    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 802050a:	4859      	ldr	r0, [pc, #356]	; (8020670 <anim_timer+0x188>)
 802050c:	f001 fbb3 	bl	8021c76 <_lv_ll_get_head>
 8020510:	61f8      	str	r0, [r7, #28]

    while(a != NULL) {
 8020512:	e09c      	b.n	802064e <anim_timer+0x166>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8020514:	4b57      	ldr	r3, [pc, #348]	; (8020674 <anim_timer+0x18c>)
 8020516:	2200      	movs	r2, #0
 8020518:	701a      	strb	r2, [r3, #0]

        if(a->run_round != anim_run_round) {
 802051a:	69fb      	ldr	r3, [r7, #28]
 802051c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020520:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8020524:	b2da      	uxtb	r2, r3
 8020526:	4b51      	ldr	r3, [pc, #324]	; (802066c <anim_timer+0x184>)
 8020528:	781b      	ldrb	r3, [r3, #0]
 802052a:	429a      	cmp	r2, r3
 802052c:	f000 8081 	beq.w	8020632 <anim_timer+0x14a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8020530:	4b4e      	ldr	r3, [pc, #312]	; (802066c <anim_timer+0x184>)
 8020532:	7819      	ldrb	r1, [r3, #0]
 8020534:	69fa      	ldr	r2, [r7, #28]
 8020536:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 802053a:	f361 0382 	bfi	r3, r1, #2, #1
 802053e:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 8020542:	69fb      	ldr	r3, [r7, #28]
 8020544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020546:	461a      	mov	r2, r3
 8020548:	69bb      	ldr	r3, [r7, #24]
 802054a:	4413      	add	r3, r2
 802054c:	617b      	str	r3, [r7, #20]
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 802054e:	69fb      	ldr	r3, [r7, #28]
 8020550:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020554:	f003 0308 	and.w	r3, r3, #8
 8020558:	b2db      	uxtb	r3, r3
 802055a:	2b00      	cmp	r3, #0
 802055c:	d132      	bne.n	80205c4 <anim_timer+0xdc>
 802055e:	69fb      	ldr	r3, [r7, #28]
 8020560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020562:	2b00      	cmp	r3, #0
 8020564:	dc2e      	bgt.n	80205c4 <anim_timer+0xdc>
 8020566:	697b      	ldr	r3, [r7, #20]
 8020568:	2b00      	cmp	r3, #0
 802056a:	db2b      	blt.n	80205c4 <anim_timer+0xdc>
                if(a->early_apply == 0 && a->get_value_cb) {
 802056c:	69fb      	ldr	r3, [r7, #28]
 802056e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020572:	f003 0301 	and.w	r3, r3, #1
 8020576:	b2db      	uxtb	r3, r3
 8020578:	2b00      	cmp	r3, #0
 802057a:	d114      	bne.n	80205a6 <anim_timer+0xbe>
 802057c:	69fb      	ldr	r3, [r7, #28]
 802057e:	695b      	ldr	r3, [r3, #20]
 8020580:	2b00      	cmp	r3, #0
 8020582:	d010      	beq.n	80205a6 <anim_timer+0xbe>
                    int32_t v_ofs = a->get_value_cb(a);
 8020584:	69fb      	ldr	r3, [r7, #28]
 8020586:	695b      	ldr	r3, [r3, #20]
 8020588:	69f8      	ldr	r0, [r7, #28]
 802058a:	4798      	blx	r3
 802058c:	6138      	str	r0, [r7, #16]
                    a->start_value += v_ofs;
 802058e:	69fb      	ldr	r3, [r7, #28]
 8020590:	6a1a      	ldr	r2, [r3, #32]
 8020592:	693b      	ldr	r3, [r7, #16]
 8020594:	441a      	add	r2, r3
 8020596:	69fb      	ldr	r3, [r7, #28]
 8020598:	621a      	str	r2, [r3, #32]
                    a->end_value += v_ofs;
 802059a:	69fb      	ldr	r3, [r7, #28]
 802059c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802059e:	693b      	ldr	r3, [r7, #16]
 80205a0:	441a      	add	r2, r3
 80205a2:	69fb      	ldr	r3, [r7, #28]
 80205a4:	629a      	str	r2, [r3, #40]	; 0x28
                }
                if(a->start_cb) a->start_cb(a);
 80205a6:	69fb      	ldr	r3, [r7, #28]
 80205a8:	689b      	ldr	r3, [r3, #8]
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d003      	beq.n	80205b6 <anim_timer+0xce>
 80205ae:	69fb      	ldr	r3, [r7, #28]
 80205b0:	689b      	ldr	r3, [r3, #8]
 80205b2:	69f8      	ldr	r0, [r7, #28]
 80205b4:	4798      	blx	r3
                a->start_cb_called = 1;
 80205b6:	69fa      	ldr	r2, [r7, #28]
 80205b8:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80205bc:	f043 0308 	orr.w	r3, r3, #8
 80205c0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
            a->act_time += elaps;
 80205c4:	69fb      	ldr	r3, [r7, #28]
 80205c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205c8:	461a      	mov	r2, r3
 80205ca:	69bb      	ldr	r3, [r7, #24]
 80205cc:	4413      	add	r3, r2
 80205ce:	461a      	mov	r2, r3
 80205d0:	69fb      	ldr	r3, [r7, #28]
 80205d2:	631a      	str	r2, [r3, #48]	; 0x30
            if(a->act_time >= 0) {
 80205d4:	69fb      	ldr	r3, [r7, #28]
 80205d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205d8:	2b00      	cmp	r3, #0
 80205da:	db2a      	blt.n	8020632 <anim_timer+0x14a>
                if(a->act_time > a->time) a->act_time = a->time;
 80205dc:	69fb      	ldr	r3, [r7, #28]
 80205de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80205e0:	69fb      	ldr	r3, [r7, #28]
 80205e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80205e4:	429a      	cmp	r2, r3
 80205e6:	dd03      	ble.n	80205f0 <anim_timer+0x108>
 80205e8:	69fb      	ldr	r3, [r7, #28]
 80205ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80205ec:	69fb      	ldr	r3, [r7, #28]
 80205ee:	631a      	str	r2, [r3, #48]	; 0x30

                int32_t new_value;
                new_value = a->path_cb(a);
 80205f0:	69fb      	ldr	r3, [r7, #28]
 80205f2:	69db      	ldr	r3, [r3, #28]
 80205f4:	69f8      	ldr	r0, [r7, #28]
 80205f6:	4798      	blx	r3
 80205f8:	60f8      	str	r0, [r7, #12]

                if(new_value != a->current_value) {
 80205fa:	69fb      	ldr	r3, [r7, #28]
 80205fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205fe:	68fa      	ldr	r2, [r7, #12]
 8020600:	429a      	cmp	r2, r3
 8020602:	d00d      	beq.n	8020620 <anim_timer+0x138>
                    a->current_value = new_value;
 8020604:	69fb      	ldr	r3, [r7, #28]
 8020606:	68fa      	ldr	r2, [r7, #12]
 8020608:	625a      	str	r2, [r3, #36]	; 0x24
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 802060a:	69fb      	ldr	r3, [r7, #28]
 802060c:	685b      	ldr	r3, [r3, #4]
 802060e:	2b00      	cmp	r3, #0
 8020610:	d006      	beq.n	8020620 <anim_timer+0x138>
 8020612:	69fb      	ldr	r3, [r7, #28]
 8020614:	685b      	ldr	r3, [r3, #4]
 8020616:	69fa      	ldr	r2, [r7, #28]
 8020618:	6812      	ldr	r2, [r2, #0]
 802061a:	68f9      	ldr	r1, [r7, #12]
 802061c:	4610      	mov	r0, r2
 802061e:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 8020620:	69fb      	ldr	r3, [r7, #28]
 8020622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020624:	69fb      	ldr	r3, [r7, #28]
 8020626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020628:	429a      	cmp	r2, r3
 802062a:	db02      	blt.n	8020632 <anim_timer+0x14a>
                    anim_ready_handler(a);
 802062c:	69f8      	ldr	r0, [r7, #28]
 802062e:	f000 f823 	bl	8020678 <anim_ready_handler>
            }
        }

        /*If the linked list changed due to anim. delete then it's not safe to continue
         *the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 8020632:	4b10      	ldr	r3, [pc, #64]	; (8020674 <anim_timer+0x18c>)
 8020634:	781b      	ldrb	r3, [r3, #0]
 8020636:	2b00      	cmp	r3, #0
 8020638:	d004      	beq.n	8020644 <anim_timer+0x15c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 802063a:	480d      	ldr	r0, [pc, #52]	; (8020670 <anim_timer+0x188>)
 802063c:	f001 fb1b 	bl	8021c76 <_lv_ll_get_head>
 8020640:	61f8      	str	r0, [r7, #28]
 8020642:	e004      	b.n	802064e <anim_timer+0x166>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8020644:	69f9      	ldr	r1, [r7, #28]
 8020646:	480a      	ldr	r0, [pc, #40]	; (8020670 <anim_timer+0x188>)
 8020648:	f001 fb37 	bl	8021cba <_lv_ll_get_next>
 802064c:	61f8      	str	r0, [r7, #28]
    while(a != NULL) {
 802064e:	69fb      	ldr	r3, [r7, #28]
 8020650:	2b00      	cmp	r3, #0
 8020652:	f47f af5f 	bne.w	8020514 <anim_timer+0x2c>
    }

    last_timer_run = lv_tick_get();
 8020656:	f7ff fd3d 	bl	80200d4 <lv_tick_get>
 802065a:	4603      	mov	r3, r0
 802065c:	4a02      	ldr	r2, [pc, #8]	; (8020668 <anim_timer+0x180>)
 802065e:	6013      	str	r3, [r2, #0]
}
 8020660:	bf00      	nop
 8020662:	3720      	adds	r7, #32
 8020664:	46bd      	mov	sp, r7
 8020666:	bd80      	pop	{r7, pc}
 8020668:	20000838 	.word	0x20000838
 802066c:	2000083d 	.word	0x2000083d
 8020670:	2000087c 	.word	0x2000087c
 8020674:	2000083c 	.word	0x2000083c

08020678 <anim_ready_handler>:
 * Called when an animation is ready to do the necessary thinks
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 */
static void anim_ready_handler(lv_anim_t * a)
{
 8020678:	b580      	push	{r7, lr}
 802067a:	b084      	sub	sp, #16
 802067c:	af00      	add	r7, sp, #0
 802067e:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8020680:	687b      	ldr	r3, [r7, #4]
 8020682:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020686:	f003 0302 	and.w	r3, r3, #2
 802068a:	b2db      	uxtb	r3, r3
 802068c:	2b00      	cmp	r3, #0
 802068e:	d113      	bne.n	80206b8 <anim_ready_handler+0x40>
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8020696:	2b00      	cmp	r3, #0
 8020698:	d00e      	beq.n	80206b8 <anim_ready_handler+0x40>
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80206a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80206a4:	4293      	cmp	r3, r2
 80206a6:	d007      	beq.n	80206b8 <anim_ready_handler+0x40>
        a->repeat_cnt--;
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80206ae:	3b01      	subs	r3, #1
 80206b0:	b29a      	uxth	r2, r3
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready*/
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d125      	bne.n	802070e <anim_ready_handler+0x96>
 80206c2:	687b      	ldr	r3, [r7, #4]
 80206c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	d007      	beq.n	80206da <anim_ready_handler+0x62>
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80206d0:	f003 0302 	and.w	r3, r3, #2
 80206d4:	b2db      	uxtb	r3, r3
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	d019      	beq.n	802070e <anim_ready_handler+0x96>

        /*Delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80206da:	6879      	ldr	r1, [r7, #4]
 80206dc:	482c      	ldr	r0, [pc, #176]	; (8020790 <anim_ready_handler+0x118>)
 80206de:	f001 fa6d 	bl	8021bbc <_lv_ll_remove>
        /*Flag that the list has changed*/
        anim_mark_list_change();
 80206e2:	f000 f857 	bl	8020794 <anim_mark_list_change>

        /*Call the callback function at the end*/
        if(a->ready_cb != NULL) a->ready_cb(a);
 80206e6:	687b      	ldr	r3, [r7, #4]
 80206e8:	68db      	ldr	r3, [r3, #12]
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	d003      	beq.n	80206f6 <anim_ready_handler+0x7e>
 80206ee:	687b      	ldr	r3, [r7, #4]
 80206f0:	68db      	ldr	r3, [r3, #12]
 80206f2:	6878      	ldr	r0, [r7, #4]
 80206f4:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	691b      	ldr	r3, [r3, #16]
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d003      	beq.n	8020706 <anim_ready_handler+0x8e>
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	691b      	ldr	r3, [r3, #16]
 8020702:	6878      	ldr	r0, [r7, #4]
 8020704:	4798      	blx	r3
        lv_mem_free(a);
 8020706:	6878      	ldr	r0, [r7, #4]
 8020708:	f001 fca4 	bl	8022054 <lv_mem_free>
            tmp = a->time;
            a->time = a->playback_time;
            a->playback_time = tmp;
        }
    }
}
 802070c:	e03c      	b.n	8020788 <anim_ready_handler+0x110>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 802070e:	687b      	ldr	r3, [r7, #4]
 8020710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020712:	425a      	negs	r2, r3
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	631a      	str	r2, [r3, #48]	; 0x30
        if(a->playback_time != 0) {
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802071c:	2b00      	cmp	r3, #0
 802071e:	d033      	beq.n	8020788 <anim_ready_handler+0x110>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020726:	f003 0302 	and.w	r3, r3, #2
 802072a:	b2db      	uxtb	r3, r3
 802072c:	2b00      	cmp	r3, #0
 802072e:	d104      	bne.n	802073a <anim_ready_handler+0xc2>
 8020730:	687b      	ldr	r3, [r7, #4]
 8020732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020734:	425a      	negs	r2, r3
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	631a      	str	r2, [r3, #48]	; 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020740:	f003 0302 	and.w	r3, r3, #2
 8020744:	b2db      	uxtb	r3, r3
 8020746:	2b00      	cmp	r3, #0
 8020748:	bf0c      	ite	eq
 802074a:	2301      	moveq	r3, #1
 802074c:	2300      	movne	r3, #0
 802074e:	b2d9      	uxtb	r1, r3
 8020750:	687a      	ldr	r2, [r7, #4]
 8020752:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8020756:	f361 0341 	bfi	r3, r1, #1, #1
 802075a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            int32_t tmp    = a->start_value;
 802075e:	687b      	ldr	r3, [r7, #4]
 8020760:	6a1b      	ldr	r3, [r3, #32]
 8020762:	60fb      	str	r3, [r7, #12]
            a->start_value = a->end_value;
 8020764:	687b      	ldr	r3, [r7, #4]
 8020766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020768:	687b      	ldr	r3, [r7, #4]
 802076a:	621a      	str	r2, [r3, #32]
            a->end_value   = tmp;
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	68fa      	ldr	r2, [r7, #12]
 8020770:	629a      	str	r2, [r3, #40]	; 0x28
            tmp = a->time;
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020776:	60fb      	str	r3, [r7, #12]
            a->time = a->playback_time;
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802077c:	461a      	mov	r2, r3
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	62da      	str	r2, [r3, #44]	; 0x2c
            a->playback_time = tmp;
 8020782:	68fa      	ldr	r2, [r7, #12]
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	639a      	str	r2, [r3, #56]	; 0x38
}
 8020788:	bf00      	nop
 802078a:	3710      	adds	r7, #16
 802078c:	46bd      	mov	sp, r7
 802078e:	bd80      	pop	{r7, pc}
 8020790:	2000087c 	.word	0x2000087c

08020794 <anim_mark_list_change>:

static void anim_mark_list_change(void)
{
 8020794:	b580      	push	{r7, lr}
 8020796:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 8020798:	4b0a      	ldr	r3, [pc, #40]	; (80207c4 <anim_mark_list_change+0x30>)
 802079a:	2201      	movs	r2, #1
 802079c:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 802079e:	480a      	ldr	r0, [pc, #40]	; (80207c8 <anim_mark_list_change+0x34>)
 80207a0:	f001 fa69 	bl	8021c76 <_lv_ll_get_head>
 80207a4:	4603      	mov	r3, r0
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d105      	bne.n	80207b6 <anim_mark_list_change+0x22>
        lv_timer_pause(_lv_anim_tmr);
 80207aa:	4b08      	ldr	r3, [pc, #32]	; (80207cc <anim_mark_list_change+0x38>)
 80207ac:	681b      	ldr	r3, [r3, #0]
 80207ae:	4618      	mov	r0, r3
 80207b0:	f002 ff66 	bl	8023680 <lv_timer_pause>
    else
        lv_timer_resume(_lv_anim_tmr);
}
 80207b4:	e004      	b.n	80207c0 <anim_mark_list_change+0x2c>
        lv_timer_resume(_lv_anim_tmr);
 80207b6:	4b05      	ldr	r3, [pc, #20]	; (80207cc <anim_mark_list_change+0x38>)
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	4618      	mov	r0, r3
 80207bc:	f002 ff6f 	bl	802369e <lv_timer_resume>
}
 80207c0:	bf00      	nop
 80207c2:	bd80      	pop	{r7, pc}
 80207c4:	2000083c 	.word	0x2000083c
 80207c8:	2000087c 	.word	0x2000087c
 80207cc:	20000840 	.word	0x20000840

080207d0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80207d0:	b480      	push	{r7}
 80207d2:	b083      	sub	sp, #12
 80207d4:	af00      	add	r7, sp, #0
 80207d6:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80207de:	b29a      	uxth	r2, r3
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80207e6:	b29b      	uxth	r3, r3
 80207e8:	1ad3      	subs	r3, r2, r3
 80207ea:	b29b      	uxth	r3, r3
 80207ec:	3301      	adds	r3, #1
 80207ee:	b29b      	uxth	r3, r3
 80207f0:	b21b      	sxth	r3, r3
}
 80207f2:	4618      	mov	r0, r3
 80207f4:	370c      	adds	r7, #12
 80207f6:	46bd      	mov	sp, r7
 80207f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207fc:	4770      	bx	lr

080207fe <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80207fe:	b480      	push	{r7}
 8020800:	b083      	sub	sp, #12
 8020802:	af00      	add	r7, sp, #0
 8020804:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020806:	687b      	ldr	r3, [r7, #4]
 8020808:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802080c:	b29a      	uxth	r2, r3
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020814:	b29b      	uxth	r3, r3
 8020816:	1ad3      	subs	r3, r2, r3
 8020818:	b29b      	uxth	r3, r3
 802081a:	3301      	adds	r3, #1
 802081c:	b29b      	uxth	r3, r3
 802081e:	b21b      	sxth	r3, r3
}
 8020820:	4618      	mov	r0, r3
 8020822:	370c      	adds	r7, #12
 8020824:	46bd      	mov	sp, r7
 8020826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802082a:	4770      	bx	lr

0802082c <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 802082c:	b480      	push	{r7}
 802082e:	b085      	sub	sp, #20
 8020830:	af00      	add	r7, sp, #0
 8020832:	60f8      	str	r0, [r7, #12]
 8020834:	4608      	mov	r0, r1
 8020836:	4611      	mov	r1, r2
 8020838:	461a      	mov	r2, r3
 802083a:	4603      	mov	r3, r0
 802083c:	817b      	strh	r3, [r7, #10]
 802083e:	460b      	mov	r3, r1
 8020840:	813b      	strh	r3, [r7, #8]
 8020842:	4613      	mov	r3, r2
 8020844:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 8020846:	68fb      	ldr	r3, [r7, #12]
 8020848:	897a      	ldrh	r2, [r7, #10]
 802084a:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 802084c:	68fb      	ldr	r3, [r7, #12]
 802084e:	893a      	ldrh	r2, [r7, #8]
 8020850:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 8020852:	68fb      	ldr	r3, [r7, #12]
 8020854:	88fa      	ldrh	r2, [r7, #6]
 8020856:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 8020858:	68fb      	ldr	r3, [r7, #12]
 802085a:	8b3a      	ldrh	r2, [r7, #24]
 802085c:	80da      	strh	r2, [r3, #6]
}
 802085e:	bf00      	nop
 8020860:	3714      	adds	r7, #20
 8020862:	46bd      	mov	sp, r7
 8020864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020868:	4770      	bx	lr

0802086a <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 802086a:	b480      	push	{r7}
 802086c:	b083      	sub	sp, #12
 802086e:	af00      	add	r7, sp, #0
 8020870:	6078      	str	r0, [r7, #4]
 8020872:	460b      	mov	r3, r1
 8020874:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 8020876:	687b      	ldr	r3, [r7, #4]
 8020878:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802087c:	b29a      	uxth	r2, r3
 802087e:	887b      	ldrh	r3, [r7, #2]
 8020880:	4413      	add	r3, r2
 8020882:	b29b      	uxth	r3, r3
 8020884:	3b01      	subs	r3, #1
 8020886:	b29b      	uxth	r3, r3
 8020888:	b21a      	sxth	r2, r3
 802088a:	687b      	ldr	r3, [r7, #4]
 802088c:	80da      	strh	r2, [r3, #6]
}
 802088e:	bf00      	nop
 8020890:	370c      	adds	r7, #12
 8020892:	46bd      	mov	sp, r7
 8020894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020898:	4770      	bx	lr

0802089a <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 802089a:	b480      	push	{r7}
 802089c:	b085      	sub	sp, #20
 802089e:	af00      	add	r7, sp, #0
 80208a0:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80208a8:	461a      	mov	r2, r3
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80208b0:	1ad3      	subs	r3, r2, r3
 80208b2:	3301      	adds	r3, #1
 80208b4:	461a      	mov	r2, r3
 80208b6:	687b      	ldr	r3, [r7, #4]
 80208b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80208bc:	4619      	mov	r1, r3
 80208be:	687b      	ldr	r3, [r7, #4]
 80208c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80208c4:	1acb      	subs	r3, r1, r3
 80208c6:	3301      	adds	r3, #1
 80208c8:	fb02 f303 	mul.w	r3, r2, r3
 80208cc:	60fb      	str	r3, [r7, #12]

    return size;
 80208ce:	68fb      	ldr	r3, [r7, #12]
}
 80208d0:	4618      	mov	r0, r3
 80208d2:	3714      	adds	r7, #20
 80208d4:	46bd      	mov	sp, r7
 80208d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208da:	4770      	bx	lr

080208dc <lv_area_increase>:

void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra)
{
 80208dc:	b480      	push	{r7}
 80208de:	b083      	sub	sp, #12
 80208e0:	af00      	add	r7, sp, #0
 80208e2:	6078      	str	r0, [r7, #4]
 80208e4:	460b      	mov	r3, r1
 80208e6:	807b      	strh	r3, [r7, #2]
 80208e8:	4613      	mov	r3, r2
 80208ea:	803b      	strh	r3, [r7, #0]
    area->x1 -= w_extra;
 80208ec:	687b      	ldr	r3, [r7, #4]
 80208ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80208f2:	b29a      	uxth	r2, r3
 80208f4:	887b      	ldrh	r3, [r7, #2]
 80208f6:	1ad3      	subs	r3, r2, r3
 80208f8:	b29b      	uxth	r3, r3
 80208fa:	b21a      	sxth	r2, r3
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	801a      	strh	r2, [r3, #0]
    area->x2 += w_extra;
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020906:	b29a      	uxth	r2, r3
 8020908:	887b      	ldrh	r3, [r7, #2]
 802090a:	4413      	add	r3, r2
 802090c:	b29b      	uxth	r3, r3
 802090e:	b21a      	sxth	r2, r3
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	809a      	strh	r2, [r3, #4]
    area->y1 -= h_extra;
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802091a:	b29a      	uxth	r2, r3
 802091c:	883b      	ldrh	r3, [r7, #0]
 802091e:	1ad3      	subs	r3, r2, r3
 8020920:	b29b      	uxth	r3, r3
 8020922:	b21a      	sxth	r2, r3
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	805a      	strh	r2, [r3, #2]
    area->y2 += h_extra;
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802092e:	b29a      	uxth	r2, r3
 8020930:	883b      	ldrh	r3, [r7, #0]
 8020932:	4413      	add	r3, r2
 8020934:	b29b      	uxth	r3, r3
 8020936:	b21a      	sxth	r2, r3
 8020938:	687b      	ldr	r3, [r7, #4]
 802093a:	80da      	strh	r2, [r3, #6]
}
 802093c:	bf00      	nop
 802093e:	370c      	adds	r7, #12
 8020940:	46bd      	mov	sp, r7
 8020942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020946:	4770      	bx	lr

08020948 <lv_area_move>:

void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8020948:	b480      	push	{r7}
 802094a:	b083      	sub	sp, #12
 802094c:	af00      	add	r7, sp, #0
 802094e:	6078      	str	r0, [r7, #4]
 8020950:	460b      	mov	r3, r1
 8020952:	807b      	strh	r3, [r7, #2]
 8020954:	4613      	mov	r3, r2
 8020956:	803b      	strh	r3, [r7, #0]
    area->x1 += x_ofs;
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802095e:	b29a      	uxth	r2, r3
 8020960:	887b      	ldrh	r3, [r7, #2]
 8020962:	4413      	add	r3, r2
 8020964:	b29b      	uxth	r3, r3
 8020966:	b21a      	sxth	r2, r3
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	801a      	strh	r2, [r3, #0]
    area->x2 += x_ofs;
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020972:	b29a      	uxth	r2, r3
 8020974:	887b      	ldrh	r3, [r7, #2]
 8020976:	4413      	add	r3, r2
 8020978:	b29b      	uxth	r3, r3
 802097a:	b21a      	sxth	r2, r3
 802097c:	687b      	ldr	r3, [r7, #4]
 802097e:	809a      	strh	r2, [r3, #4]
    area->y1 += y_ofs;
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020986:	b29a      	uxth	r2, r3
 8020988:	883b      	ldrh	r3, [r7, #0]
 802098a:	4413      	add	r3, r2
 802098c:	b29b      	uxth	r3, r3
 802098e:	b21a      	sxth	r2, r3
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	805a      	strh	r2, [r3, #2]
    area->y2 += y_ofs;
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802099a:	b29a      	uxth	r2, r3
 802099c:	883b      	ldrh	r3, [r7, #0]
 802099e:	4413      	add	r3, r2
 80209a0:	b29b      	uxth	r3, r3
 80209a2:	b21a      	sxth	r2, r3
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	80da      	strh	r2, [r3, #6]
}
 80209a8:	bf00      	nop
 80209aa:	370c      	adds	r7, #12
 80209ac:	46bd      	mov	sp, r7
 80209ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209b2:	4770      	bx	lr

080209b4 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 80209b4:	b480      	push	{r7}
 80209b6:	b087      	sub	sp, #28
 80209b8:	af00      	add	r7, sp, #0
 80209ba:	60f8      	str	r0, [r7, #12]
 80209bc:	60b9      	str	r1, [r7, #8]
 80209be:	607a      	str	r2, [r7, #4]
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80209c6:	68bb      	ldr	r3, [r7, #8]
 80209c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80209cc:	4293      	cmp	r3, r2
 80209ce:	bfb8      	it	lt
 80209d0:	4613      	movlt	r3, r2
 80209d2:	b21a      	sxth	r2, r3
 80209d4:	68fb      	ldr	r3, [r7, #12]
 80209d6:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80209de:	68bb      	ldr	r3, [r7, #8]
 80209e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80209e4:	4293      	cmp	r3, r2
 80209e6:	bfb8      	it	lt
 80209e8:	4613      	movlt	r3, r2
 80209ea:	b21a      	sxth	r2, r3
 80209ec:	68fb      	ldr	r3, [r7, #12]
 80209ee:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80209f6:	68bb      	ldr	r3, [r7, #8]
 80209f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80209fc:	4293      	cmp	r3, r2
 80209fe:	bfa8      	it	ge
 8020a00:	4613      	movge	r3, r2
 8020a02:	b21a      	sxth	r2, r3
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020a0e:	68bb      	ldr	r3, [r7, #8]
 8020a10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020a14:	4293      	cmp	r3, r2
 8020a16:	bfa8      	it	ge
 8020a18:	4613      	movge	r3, r2
 8020a1a:	b21a      	sxth	r2, r3
 8020a1c:	68fb      	ldr	r3, [r7, #12]
 8020a1e:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 8020a20:	2301      	movs	r3, #1
 8020a22:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8020a24:	68fb      	ldr	r3, [r7, #12]
 8020a26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020a30:	429a      	cmp	r2, r3
 8020a32:	dc07      	bgt.n	8020a44 <_lv_area_intersect+0x90>
 8020a34:	68fb      	ldr	r3, [r7, #12]
 8020a36:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020a3a:	68fb      	ldr	r3, [r7, #12]
 8020a3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020a40:	429a      	cmp	r2, r3
 8020a42:	dd01      	ble.n	8020a48 <_lv_area_intersect+0x94>
        union_ok = false;
 8020a44:	2300      	movs	r3, #0
 8020a46:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 8020a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8020a4a:	4618      	mov	r0, r3
 8020a4c:	371c      	adds	r7, #28
 8020a4e:	46bd      	mov	sp, r7
 8020a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a54:	4770      	bx	lr

08020a56 <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8020a56:	b480      	push	{r7}
 8020a58:	b085      	sub	sp, #20
 8020a5a:	af00      	add	r7, sp, #0
 8020a5c:	60f8      	str	r0, [r7, #12]
 8020a5e:	60b9      	str	r1, [r7, #8]
 8020a60:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020a68:	68bb      	ldr	r3, [r7, #8]
 8020a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020a6e:	4293      	cmp	r3, r2
 8020a70:	bfa8      	it	ge
 8020a72:	4613      	movge	r3, r2
 8020a74:	b21a      	sxth	r2, r3
 8020a76:	68fb      	ldr	r3, [r7, #12]
 8020a78:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020a80:	68bb      	ldr	r3, [r7, #8]
 8020a82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020a86:	4293      	cmp	r3, r2
 8020a88:	bfa8      	it	ge
 8020a8a:	4613      	movge	r3, r2
 8020a8c:	b21a      	sxth	r2, r3
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020a98:	68bb      	ldr	r3, [r7, #8]
 8020a9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020a9e:	4293      	cmp	r3, r2
 8020aa0:	bfb8      	it	lt
 8020aa2:	4613      	movlt	r3, r2
 8020aa4:	b21a      	sxth	r2, r3
 8020aa6:	68fb      	ldr	r3, [r7, #12]
 8020aa8:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020ab0:	68bb      	ldr	r3, [r7, #8]
 8020ab2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020ab6:	4293      	cmp	r3, r2
 8020ab8:	bfb8      	it	lt
 8020aba:	4613      	movlt	r3, r2
 8020abc:	b21a      	sxth	r2, r3
 8020abe:	68fb      	ldr	r3, [r7, #12]
 8020ac0:	80da      	strh	r2, [r3, #6]
}
 8020ac2:	bf00      	nop
 8020ac4:	3714      	adds	r7, #20
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020acc:	4770      	bx	lr

08020ace <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 8020ace:	b580      	push	{r7, lr}
 8020ad0:	b088      	sub	sp, #32
 8020ad2:	af00      	add	r7, sp, #0
 8020ad4:	60f8      	str	r0, [r7, #12]
 8020ad6:	60b9      	str	r1, [r7, #8]
 8020ad8:	4613      	mov	r3, r2
 8020ada:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 8020adc:	2300      	movs	r3, #0
 8020ade:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8020ae0:	68bb      	ldr	r3, [r7, #8]
 8020ae2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020ae6:	68fb      	ldr	r3, [r7, #12]
 8020ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020aec:	429a      	cmp	r2, r3
 8020aee:	db19      	blt.n	8020b24 <_lv_area_is_point_on+0x56>
 8020af0:	68bb      	ldr	r3, [r7, #8]
 8020af2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020af6:	68fb      	ldr	r3, [r7, #12]
 8020af8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020afc:	429a      	cmp	r2, r3
 8020afe:	dc11      	bgt.n	8020b24 <_lv_area_is_point_on+0x56>
 8020b00:	68bb      	ldr	r3, [r7, #8]
 8020b02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020b06:	68fb      	ldr	r3, [r7, #12]
 8020b08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020b0c:	429a      	cmp	r2, r3
 8020b0e:	db09      	blt.n	8020b24 <_lv_area_is_point_on+0x56>
 8020b10:	68bb      	ldr	r3, [r7, #8]
 8020b12:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020b16:	68fb      	ldr	r3, [r7, #12]
 8020b18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020b1c:	429a      	cmp	r2, r3
 8020b1e:	dc01      	bgt.n	8020b24 <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 8020b20:	2301      	movs	r3, #1
 8020b22:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 8020b24:	7ffb      	ldrb	r3, [r7, #31]
 8020b26:	f083 0301 	eor.w	r3, r3, #1
 8020b2a:	b2db      	uxtb	r3, r3
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	d001      	beq.n	8020b34 <_lv_area_is_point_on+0x66>
        return false;
 8020b30:	2300      	movs	r3, #0
 8020b32:	e0f1      	b.n	8020d18 <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 8020b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	dc01      	bgt.n	8020b40 <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 8020b3c:	2301      	movs	r3, #1
 8020b3e:	e0eb      	b.n	8020d18 <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8020b40:	68f8      	ldr	r0, [r7, #12]
 8020b42:	f7ff fe45 	bl	80207d0 <lv_area_get_width>
 8020b46:	4603      	mov	r3, r0
 8020b48:	2b00      	cmp	r3, #0
 8020b4a:	da00      	bge.n	8020b4e <_lv_area_is_point_on+0x80>
 8020b4c:	3301      	adds	r3, #1
 8020b4e:	105b      	asrs	r3, r3, #1
 8020b50:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8020b52:	68f8      	ldr	r0, [r7, #12]
 8020b54:	f7ff fe53 	bl	80207fe <lv_area_get_height>
 8020b58:	4603      	mov	r3, r0
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	da00      	bge.n	8020b60 <_lv_area_is_point_on+0x92>
 8020b5e:	3301      	adds	r3, #1
 8020b60:	105b      	asrs	r3, r3, #1
 8020b62:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MIN(w, h);
 8020b64:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8020b6c:	4293      	cmp	r3, r2
 8020b6e:	bfa8      	it	ge
 8020b70:	4613      	movge	r3, r2
 8020b72:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 8020b74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020b78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020b7c:	429a      	cmp	r2, r3
 8020b7e:	dd01      	ble.n	8020b84 <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 8020b80:	8b3b      	ldrh	r3, [r7, #24]
 8020b82:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 8020b84:	68fb      	ldr	r3, [r7, #12]
 8020b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020b8a:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020b92:	b29a      	uxth	r2, r3
 8020b94:	88fb      	ldrh	r3, [r7, #6]
 8020b96:	4413      	add	r3, r2
 8020b98:	b29b      	uxth	r3, r3
 8020b9a:	b21b      	sxth	r3, r3
 8020b9c:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 8020b9e:	68fb      	ldr	r3, [r7, #12]
 8020ba0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ba4:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 8020ba6:	68fb      	ldr	r3, [r7, #12]
 8020ba8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020bac:	b29a      	uxth	r2, r3
 8020bae:	88fb      	ldrh	r3, [r7, #6]
 8020bb0:	4413      	add	r3, r2
 8020bb2:	b29b      	uxth	r3, r3
 8020bb4:	b21b      	sxth	r3, r3
 8020bb6:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020bb8:	f107 0310 	add.w	r3, r7, #16
 8020bbc:	2200      	movs	r2, #0
 8020bbe:	68b9      	ldr	r1, [r7, #8]
 8020bc0:	4618      	mov	r0, r3
 8020bc2:	f7ff ff84 	bl	8020ace <_lv_area_is_point_on>
 8020bc6:	4603      	mov	r3, r0
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	d017      	beq.n	8020bfc <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 8020bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020bd0:	b29a      	uxth	r2, r3
 8020bd2:	88fb      	ldrh	r3, [r7, #6]
 8020bd4:	4413      	add	r3, r2
 8020bd6:	b29b      	uxth	r3, r3
 8020bd8:	b21b      	sxth	r3, r3
 8020bda:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 8020bdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020be0:	b29a      	uxth	r2, r3
 8020be2:	88fb      	ldrh	r3, [r7, #6]
 8020be4:	4413      	add	r3, r2
 8020be6:	b29b      	uxth	r3, r3
 8020be8:	b21b      	sxth	r3, r3
 8020bea:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 8020bec:	f107 0310 	add.w	r3, r7, #16
 8020bf0:	68b9      	ldr	r1, [r7, #8]
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	f000 fb30 	bl	8021258 <lv_point_within_circle>
 8020bf8:	4603      	mov	r3, r0
 8020bfa:	e08d      	b.n	8020d18 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 8020bfc:	68fb      	ldr	r3, [r7, #12]
 8020bfe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020c02:	b29a      	uxth	r2, r3
 8020c04:	88fb      	ldrh	r3, [r7, #6]
 8020c06:	1ad3      	subs	r3, r2, r3
 8020c08:	b29b      	uxth	r3, r3
 8020c0a:	b21b      	sxth	r3, r3
 8020c0c:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 8020c0e:	68fb      	ldr	r3, [r7, #12]
 8020c10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020c14:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020c16:	f107 0310 	add.w	r3, r7, #16
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	68b9      	ldr	r1, [r7, #8]
 8020c1e:	4618      	mov	r0, r3
 8020c20:	f7ff ff55 	bl	8020ace <_lv_area_is_point_on>
 8020c24:	4603      	mov	r3, r0
 8020c26:	2b00      	cmp	r3, #0
 8020c28:	d017      	beq.n	8020c5a <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 8020c2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020c2e:	b29a      	uxth	r2, r3
 8020c30:	88fb      	ldrh	r3, [r7, #6]
 8020c32:	4413      	add	r3, r2
 8020c34:	b29b      	uxth	r3, r3
 8020c36:	b21b      	sxth	r3, r3
 8020c38:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 8020c3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020c3e:	b29a      	uxth	r2, r3
 8020c40:	88fb      	ldrh	r3, [r7, #6]
 8020c42:	1ad3      	subs	r3, r2, r3
 8020c44:	b29b      	uxth	r3, r3
 8020c46:	b21b      	sxth	r3, r3
 8020c48:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 8020c4a:	f107 0310 	add.w	r3, r7, #16
 8020c4e:	68b9      	ldr	r1, [r7, #8]
 8020c50:	4618      	mov	r0, r3
 8020c52:	f000 fb01 	bl	8021258 <lv_point_within_circle>
 8020c56:	4603      	mov	r3, r0
 8020c58:	e05e      	b.n	8020d18 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 8020c5a:	68fb      	ldr	r3, [r7, #12]
 8020c5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020c60:	b29a      	uxth	r2, r3
 8020c62:	88fb      	ldrh	r3, [r7, #6]
 8020c64:	1ad3      	subs	r3, r2, r3
 8020c66:	b29b      	uxth	r3, r3
 8020c68:	b21b      	sxth	r3, r3
 8020c6a:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020c72:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020c74:	f107 0310 	add.w	r3, r7, #16
 8020c78:	2200      	movs	r2, #0
 8020c7a:	68b9      	ldr	r1, [r7, #8]
 8020c7c:	4618      	mov	r0, r3
 8020c7e:	f7ff ff26 	bl	8020ace <_lv_area_is_point_on>
 8020c82:	4603      	mov	r3, r0
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d017      	beq.n	8020cb8 <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 8020c88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8020c8c:	b29a      	uxth	r2, r3
 8020c8e:	88fb      	ldrh	r3, [r7, #6]
 8020c90:	1ad3      	subs	r3, r2, r3
 8020c92:	b29b      	uxth	r3, r3
 8020c94:	b21b      	sxth	r3, r3
 8020c96:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 8020c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020c9c:	b29a      	uxth	r2, r3
 8020c9e:	88fb      	ldrh	r3, [r7, #6]
 8020ca0:	1ad3      	subs	r3, r2, r3
 8020ca2:	b29b      	uxth	r3, r3
 8020ca4:	b21b      	sxth	r3, r3
 8020ca6:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 8020ca8:	f107 0310 	add.w	r3, r7, #16
 8020cac:	68b9      	ldr	r1, [r7, #8]
 8020cae:	4618      	mov	r0, r3
 8020cb0:	f000 fad2 	bl	8021258 <lv_point_within_circle>
 8020cb4:	4603      	mov	r3, r0
 8020cb6:	e02f      	b.n	8020d18 <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 8020cb8:	68fb      	ldr	r3, [r7, #12]
 8020cba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020cbe:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 8020cc0:	68fb      	ldr	r3, [r7, #12]
 8020cc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020cc6:	b29a      	uxth	r2, r3
 8020cc8:	88fb      	ldrh	r3, [r7, #6]
 8020cca:	4413      	add	r3, r2
 8020ccc:	b29b      	uxth	r3, r3
 8020cce:	b21b      	sxth	r3, r3
 8020cd0:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020cd2:	f107 0310 	add.w	r3, r7, #16
 8020cd6:	2200      	movs	r2, #0
 8020cd8:	68b9      	ldr	r1, [r7, #8]
 8020cda:	4618      	mov	r0, r3
 8020cdc:	f7ff fef7 	bl	8020ace <_lv_area_is_point_on>
 8020ce0:	4603      	mov	r3, r0
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d017      	beq.n	8020d16 <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 8020ce6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8020cea:	b29a      	uxth	r2, r3
 8020cec:	88fb      	ldrh	r3, [r7, #6]
 8020cee:	1ad3      	subs	r3, r2, r3
 8020cf0:	b29b      	uxth	r3, r3
 8020cf2:	b21b      	sxth	r3, r3
 8020cf4:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 8020cf6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020cfa:	b29a      	uxth	r2, r3
 8020cfc:	88fb      	ldrh	r3, [r7, #6]
 8020cfe:	4413      	add	r3, r2
 8020d00:	b29b      	uxth	r3, r3
 8020d02:	b21b      	sxth	r3, r3
 8020d04:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 8020d06:	f107 0310 	add.w	r3, r7, #16
 8020d0a:	68b9      	ldr	r1, [r7, #8]
 8020d0c:	4618      	mov	r0, r3
 8020d0e:	f000 faa3 	bl	8021258 <lv_point_within_circle>
 8020d12:	4603      	mov	r3, r0
 8020d14:	e000      	b.n	8020d18 <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 8020d16:	2301      	movs	r3, #1
}
 8020d18:	4618      	mov	r0, r3
 8020d1a:	3720      	adds	r7, #32
 8020d1c:	46bd      	mov	sp, r7
 8020d1e:	bd80      	pop	{r7, pc}

08020d20 <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8020d20:	b480      	push	{r7}
 8020d22:	b083      	sub	sp, #12
 8020d24:	af00      	add	r7, sp, #0
 8020d26:	6078      	str	r0, [r7, #4]
 8020d28:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020d30:	683b      	ldr	r3, [r7, #0]
 8020d32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020d36:	429a      	cmp	r2, r3
 8020d38:	dc19      	bgt.n	8020d6e <_lv_area_is_on+0x4e>
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d46:	429a      	cmp	r2, r3
 8020d48:	db11      	blt.n	8020d6e <_lv_area_is_on+0x4e>
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020d50:	683b      	ldr	r3, [r7, #0]
 8020d52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020d56:	429a      	cmp	r2, r3
 8020d58:	dc09      	bgt.n	8020d6e <_lv_area_is_on+0x4e>
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020d60:	683b      	ldr	r3, [r7, #0]
 8020d62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020d66:	429a      	cmp	r2, r3
 8020d68:	db01      	blt.n	8020d6e <_lv_area_is_on+0x4e>
        return true;
 8020d6a:	2301      	movs	r3, #1
 8020d6c:	e000      	b.n	8020d70 <_lv_area_is_on+0x50>
    }
    else {
        return false;
 8020d6e:	2300      	movs	r3, #0
    }
}
 8020d70:	4618      	mov	r0, r3
 8020d72:	370c      	adds	r7, #12
 8020d74:	46bd      	mov	sp, r7
 8020d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d7a:	4770      	bx	lr

08020d7c <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 8020d7c:	b580      	push	{r7, lr}
 8020d7e:	b086      	sub	sp, #24
 8020d80:	af00      	add	r7, sp, #0
 8020d82:	60f8      	str	r0, [r7, #12]
 8020d84:	60b9      	str	r1, [r7, #8]
 8020d86:	4613      	mov	r3, r2
 8020d88:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 8020d8a:	2300      	movs	r3, #0
 8020d8c:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8020d8e:	68fb      	ldr	r3, [r7, #12]
 8020d90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020d94:	68bb      	ldr	r3, [r7, #8]
 8020d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d9a:	429a      	cmp	r2, r3
 8020d9c:	db19      	blt.n	8020dd2 <_lv_area_is_in+0x56>
 8020d9e:	68fb      	ldr	r3, [r7, #12]
 8020da0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020da4:	68bb      	ldr	r3, [r7, #8]
 8020da6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020daa:	429a      	cmp	r2, r3
 8020dac:	db11      	blt.n	8020dd2 <_lv_area_is_in+0x56>
 8020dae:	68fb      	ldr	r3, [r7, #12]
 8020db0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020db4:	68bb      	ldr	r3, [r7, #8]
 8020db6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020dba:	429a      	cmp	r2, r3
 8020dbc:	dc09      	bgt.n	8020dd2 <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 8020dbe:	68fb      	ldr	r3, [r7, #12]
 8020dc0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020dc4:	68bb      	ldr	r3, [r7, #8]
 8020dc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8020dca:	429a      	cmp	r2, r3
 8020dcc:	dc01      	bgt.n	8020dd2 <_lv_area_is_in+0x56>
        is_in = true;
 8020dce:	2301      	movs	r3, #1
 8020dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 8020dd2:	7dfb      	ldrb	r3, [r7, #23]
 8020dd4:	f083 0301 	eor.w	r3, r3, #1
 8020dd8:	b2db      	uxtb	r3, r3
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	d001      	beq.n	8020de2 <_lv_area_is_in+0x66>
 8020dde:	2300      	movs	r3, #0
 8020de0:	e066      	b.n	8020eb0 <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 8020de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d101      	bne.n	8020dee <_lv_area_is_in+0x72>
 8020dea:	2301      	movs	r3, #1
 8020dec:	e060      	b.n	8020eb0 <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 8020dee:	68fb      	ldr	r3, [r7, #12]
 8020df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020df4:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 8020df6:	68fb      	ldr	r3, [r7, #12]
 8020df8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020dfc:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020dfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020e02:	f107 0310 	add.w	r3, r7, #16
 8020e06:	4619      	mov	r1, r3
 8020e08:	68b8      	ldr	r0, [r7, #8]
 8020e0a:	f7ff fe60 	bl	8020ace <_lv_area_is_point_on>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	f083 0301 	eor.w	r3, r3, #1
 8020e14:	b2db      	uxtb	r3, r3
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d001      	beq.n	8020e1e <_lv_area_is_in+0xa2>
 8020e1a:	2300      	movs	r3, #0
 8020e1c:	e048      	b.n	8020eb0 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 8020e1e:	68fb      	ldr	r3, [r7, #12]
 8020e20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020e24:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 8020e26:	68fb      	ldr	r3, [r7, #12]
 8020e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020e2c:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020e2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020e32:	f107 0310 	add.w	r3, r7, #16
 8020e36:	4619      	mov	r1, r3
 8020e38:	68b8      	ldr	r0, [r7, #8]
 8020e3a:	f7ff fe48 	bl	8020ace <_lv_area_is_point_on>
 8020e3e:	4603      	mov	r3, r0
 8020e40:	f083 0301 	eor.w	r3, r3, #1
 8020e44:	b2db      	uxtb	r3, r3
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	d001      	beq.n	8020e4e <_lv_area_is_in+0xd2>
 8020e4a:	2300      	movs	r3, #0
 8020e4c:	e030      	b.n	8020eb0 <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 8020e4e:	68fb      	ldr	r3, [r7, #12]
 8020e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020e54:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 8020e56:	68fb      	ldr	r3, [r7, #12]
 8020e58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020e5c:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020e5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020e62:	f107 0310 	add.w	r3, r7, #16
 8020e66:	4619      	mov	r1, r3
 8020e68:	68b8      	ldr	r0, [r7, #8]
 8020e6a:	f7ff fe30 	bl	8020ace <_lv_area_is_point_on>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	f083 0301 	eor.w	r3, r3, #1
 8020e74:	b2db      	uxtb	r3, r3
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	d001      	beq.n	8020e7e <_lv_area_is_in+0x102>
 8020e7a:	2300      	movs	r3, #0
 8020e7c:	e018      	b.n	8020eb0 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 8020e7e:	68fb      	ldr	r3, [r7, #12]
 8020e80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020e84:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 8020e86:	68fb      	ldr	r3, [r7, #12]
 8020e88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020e8c:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020e8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020e92:	f107 0310 	add.w	r3, r7, #16
 8020e96:	4619      	mov	r1, r3
 8020e98:	68b8      	ldr	r0, [r7, #8]
 8020e9a:	f7ff fe18 	bl	8020ace <_lv_area_is_point_on>
 8020e9e:	4603      	mov	r3, r0
 8020ea0:	f083 0301 	eor.w	r3, r3, #1
 8020ea4:	b2db      	uxtb	r3, r3
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d001      	beq.n	8020eae <_lv_area_is_in+0x132>
 8020eaa:	2300      	movs	r3, #0
 8020eac:	e000      	b.n	8020eb0 <_lv_area_is_in+0x134>

    return true;
 8020eae:	2301      	movs	r3, #1
}
 8020eb0:	4618      	mov	r0, r3
 8020eb2:	3718      	adds	r7, #24
 8020eb4:	46bd      	mov	sp, r7
 8020eb6:	bd80      	pop	{r7, pc}

08020eb8 <_lv_area_is_out>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `aout_p` is fully outside `aholder_p`
 */
bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 8020eb8:	b580      	push	{r7, lr}
 8020eba:	b086      	sub	sp, #24
 8020ebc:	af00      	add	r7, sp, #0
 8020ebe:	60f8      	str	r0, [r7, #12]
 8020ec0:	60b9      	str	r1, [r7, #8]
 8020ec2:	4613      	mov	r3, r2
 8020ec4:	80fb      	strh	r3, [r7, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8020ec6:	68fb      	ldr	r3, [r7, #12]
 8020ec8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020ecc:	68bb      	ldr	r3, [r7, #8]
 8020ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ed2:	429a      	cmp	r2, r3
 8020ed4:	db17      	blt.n	8020f06 <_lv_area_is_out+0x4e>
 8020ed6:	68fb      	ldr	r3, [r7, #12]
 8020ed8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020edc:	68bb      	ldr	r3, [r7, #8]
 8020ede:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ee2:	429a      	cmp	r2, r3
 8020ee4:	db0f      	blt.n	8020f06 <_lv_area_is_out+0x4e>
 8020ee6:	68fb      	ldr	r3, [r7, #12]
 8020ee8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020eec:	68bb      	ldr	r3, [r7, #8]
 8020eee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020ef2:	429a      	cmp	r2, r3
 8020ef4:	dc07      	bgt.n	8020f06 <_lv_area_is_out+0x4e>
       aout_p->y1 > aholder_p->y2) {
 8020ef6:	68fb      	ldr	r3, [r7, #12]
 8020ef8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020efc:	68bb      	ldr	r3, [r7, #8]
 8020efe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8020f02:	429a      	cmp	r2, r3
 8020f04:	dd01      	ble.n	8020f0a <_lv_area_is_out+0x52>
        return true;
 8020f06:	2301      	movs	r3, #1
 8020f08:	e05a      	b.n	8020fc0 <_lv_area_is_out+0x108>
    }

    if(radius == 0) return false;
 8020f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d101      	bne.n	8020f16 <_lv_area_is_out+0x5e>
 8020f12:	2300      	movs	r3, #0
 8020f14:	e054      	b.n	8020fc0 <_lv_area_is_out+0x108>

    /*Check if the corner points are outside the radius or not*/
    lv_point_t p;

    p.x = aout_p->x1;
 8020f16:	68fb      	ldr	r3, [r7, #12]
 8020f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f1c:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020f24:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020f26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020f2a:	f107 0314 	add.w	r3, r7, #20
 8020f2e:	4619      	mov	r1, r3
 8020f30:	68b8      	ldr	r0, [r7, #8]
 8020f32:	f7ff fdcc 	bl	8020ace <_lv_area_is_point_on>
 8020f36:	4603      	mov	r3, r0
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d001      	beq.n	8020f40 <_lv_area_is_out+0x88>
 8020f3c:	2300      	movs	r3, #0
 8020f3e:	e03f      	b.n	8020fc0 <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 8020f40:	68fb      	ldr	r3, [r7, #12]
 8020f42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020f46:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 8020f48:	68fb      	ldr	r3, [r7, #12]
 8020f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020f4e:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020f50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020f54:	f107 0314 	add.w	r3, r7, #20
 8020f58:	4619      	mov	r1, r3
 8020f5a:	68b8      	ldr	r0, [r7, #8]
 8020f5c:	f7ff fdb7 	bl	8020ace <_lv_area_is_point_on>
 8020f60:	4603      	mov	r3, r0
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	d001      	beq.n	8020f6a <_lv_area_is_out+0xb2>
 8020f66:	2300      	movs	r3, #0
 8020f68:	e02a      	b.n	8020fc0 <_lv_area_is_out+0x108>

    p.x = aout_p->x1;
 8020f6a:	68fb      	ldr	r3, [r7, #12]
 8020f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f70:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020f78:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020f7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020f7e:	f107 0314 	add.w	r3, r7, #20
 8020f82:	4619      	mov	r1, r3
 8020f84:	68b8      	ldr	r0, [r7, #8]
 8020f86:	f7ff fda2 	bl	8020ace <_lv_area_is_point_on>
 8020f8a:	4603      	mov	r3, r0
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	d001      	beq.n	8020f94 <_lv_area_is_out+0xdc>
 8020f90:	2300      	movs	r3, #0
 8020f92:	e015      	b.n	8020fc0 <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 8020f94:	68fb      	ldr	r3, [r7, #12]
 8020f96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020f9a:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020fa2:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020fa4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020fa8:	f107 0314 	add.w	r3, r7, #20
 8020fac:	4619      	mov	r1, r3
 8020fae:	68b8      	ldr	r0, [r7, #8]
 8020fb0:	f7ff fd8d 	bl	8020ace <_lv_area_is_point_on>
 8020fb4:	4603      	mov	r3, r0
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d001      	beq.n	8020fbe <_lv_area_is_out+0x106>
 8020fba:	2300      	movs	r3, #0
 8020fbc:	e000      	b.n	8020fc0 <_lv_area_is_out+0x108>

    return true;
 8020fbe:	2301      	movs	r3, #1
}
 8020fc0:	4618      	mov	r0, r3
 8020fc2:	3718      	adds	r7, #24
 8020fc4:	46bd      	mov	sp, r7
 8020fc6:	bd80      	pop	{r7, pc}

08020fc8 <lv_point_transform>:
    to_align->y2 = to_align->y1 + h - 1;
}

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot)
{
 8020fc8:	b580      	push	{r7, lr}
 8020fca:	b08e      	sub	sp, #56	; 0x38
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	60f8      	str	r0, [r7, #12]
 8020fd0:	60b9      	str	r1, [r7, #8]
 8020fd2:	607a      	str	r2, [r7, #4]
 8020fd4:	603b      	str	r3, [r7, #0]
    if(angle == 0 && zoom == 256) {
 8020fd6:	68bb      	ldr	r3, [r7, #8]
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d104      	bne.n	8020fe6 <lv_point_transform+0x1e>
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020fe2:	f000 812c 	beq.w	802123e <lv_point_transform+0x276>
        return;
    }

    p->x -= pivot->x;
 8020fe6:	68fb      	ldr	r3, [r7, #12]
 8020fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020fec:	b29a      	uxth	r2, r3
 8020fee:	683b      	ldr	r3, [r7, #0]
 8020ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ff4:	b29b      	uxth	r3, r3
 8020ff6:	1ad3      	subs	r3, r2, r3
 8020ff8:	b29b      	uxth	r3, r3
 8020ffa:	b21a      	sxth	r2, r3
 8020ffc:	68fb      	ldr	r3, [r7, #12]
 8020ffe:	801a      	strh	r2, [r3, #0]
    p->y -= pivot->y;
 8021000:	68fb      	ldr	r3, [r7, #12]
 8021002:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021006:	b29a      	uxth	r2, r3
 8021008:	683b      	ldr	r3, [r7, #0]
 802100a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802100e:	b29b      	uxth	r3, r3
 8021010:	1ad3      	subs	r3, r2, r3
 8021012:	b29b      	uxth	r3, r3
 8021014:	b21a      	sxth	r2, r3
 8021016:	68fb      	ldr	r3, [r7, #12]
 8021018:	805a      	strh	r2, [r3, #2]

    if(angle == 0) {
 802101a:	68bb      	ldr	r3, [r7, #8]
 802101c:	2b00      	cmp	r3, #0
 802101e:	d124      	bne.n	802106a <lv_point_transform+0xa2>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8021020:	68fb      	ldr	r3, [r7, #12]
 8021022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021026:	461a      	mov	r2, r3
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	fb02 f303 	mul.w	r3, r2, r3
 802102e:	121b      	asrs	r3, r3, #8
 8021030:	b29a      	uxth	r2, r3
 8021032:	683b      	ldr	r3, [r7, #0]
 8021034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021038:	b29b      	uxth	r3, r3
 802103a:	4413      	add	r3, r2
 802103c:	b29b      	uxth	r3, r3
 802103e:	b21a      	sxth	r2, r3
 8021040:	68fb      	ldr	r3, [r7, #12]
 8021042:	801a      	strh	r2, [r3, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8021044:	68fb      	ldr	r3, [r7, #12]
 8021046:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802104a:	461a      	mov	r2, r3
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	fb02 f303 	mul.w	r3, r2, r3
 8021052:	121b      	asrs	r3, r3, #8
 8021054:	b29a      	uxth	r2, r3
 8021056:	683b      	ldr	r3, [r7, #0]
 8021058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802105c:	b29b      	uxth	r3, r3
 802105e:	4413      	add	r3, r2
 8021060:	b29b      	uxth	r3, r3
 8021062:	b21a      	sxth	r2, r3
 8021064:	68fb      	ldr	r3, [r7, #12]
 8021066:	805a      	strh	r2, [r3, #2]
        return;
 8021068:	e0ea      	b.n	8021240 <lv_point_transform+0x278>
    }

    static int32_t angle_prev = INT32_MIN;
    static int32_t sinma;
    static int32_t cosma;
    if(angle_prev != angle) {
 802106a:	4b77      	ldr	r3, [pc, #476]	; (8021248 <lv_point_transform+0x280>)
 802106c:	681b      	ldr	r3, [r3, #0]
 802106e:	68ba      	ldr	r2, [r7, #8]
 8021070:	429a      	cmp	r2, r3
 8021072:	d078      	beq.n	8021166 <lv_point_transform+0x19e>
        int32_t angle_limited = angle;
 8021074:	68bb      	ldr	r3, [r7, #8]
 8021076:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited > 3600) angle_limited -= 3600;
 8021078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802107a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 802107e:	dd03      	ble.n	8021088 <lv_point_transform+0xc0>
 8021080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021082:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8021086:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited < 0) angle_limited += 3600;
 8021088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802108a:	2b00      	cmp	r3, #0
 802108c:	da03      	bge.n	8021096 <lv_point_transform+0xce>
 802108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021090:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8021094:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t angle_low = angle_limited / 10;
 8021096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021098:	4a6c      	ldr	r2, [pc, #432]	; (802124c <lv_point_transform+0x284>)
 802109a:	fb82 1203 	smull	r1, r2, r2, r3
 802109e:	1092      	asrs	r2, r2, #2
 80210a0:	17db      	asrs	r3, r3, #31
 80210a2:	1ad3      	subs	r3, r2, r3
 80210a4:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t angle_high = angle_low + 1;
 80210a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210a8:	3301      	adds	r3, #1
 80210aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 80210ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210ae:	f06f 0209 	mvn.w	r2, #9
 80210b2:	fb02 f303 	mul.w	r3, r2, r3
 80210b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80210b8:	4413      	add	r3, r2
 80210ba:	62bb      	str	r3, [r7, #40]	; 0x28

        int32_t s1 = lv_trigo_sin(angle_low);
 80210bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210be:	b21b      	sxth	r3, r3
 80210c0:	4618      	mov	r0, r3
 80210c2:	f000 fe7d 	bl	8021dc0 <lv_trigo_sin>
 80210c6:	4603      	mov	r3, r0
 80210c8:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t s2 = lv_trigo_sin(angle_high);
 80210ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210cc:	b21b      	sxth	r3, r3
 80210ce:	4618      	mov	r0, r3
 80210d0:	f000 fe76 	bl	8021dc0 <lv_trigo_sin>
 80210d4:	4603      	mov	r3, r0
 80210d6:	623b      	str	r3, [r7, #32]

        int32_t c1 = lv_trigo_sin(angle_low + 90);
 80210d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210da:	b29b      	uxth	r3, r3
 80210dc:	335a      	adds	r3, #90	; 0x5a
 80210de:	b29b      	uxth	r3, r3
 80210e0:	b21b      	sxth	r3, r3
 80210e2:	4618      	mov	r0, r3
 80210e4:	f000 fe6c 	bl	8021dc0 <lv_trigo_sin>
 80210e8:	4603      	mov	r3, r0
 80210ea:	61fb      	str	r3, [r7, #28]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 80210ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210ee:	b29b      	uxth	r3, r3
 80210f0:	335a      	adds	r3, #90	; 0x5a
 80210f2:	b29b      	uxth	r3, r3
 80210f4:	b21b      	sxth	r3, r3
 80210f6:	4618      	mov	r0, r3
 80210f8:	f000 fe62 	bl	8021dc0 <lv_trigo_sin>
 80210fc:	4603      	mov	r3, r0
 80210fe:	61bb      	str	r3, [r7, #24]

        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8021100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021102:	f1c3 030a 	rsb	r3, r3, #10
 8021106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021108:	fb03 f202 	mul.w	r2, r3, r2
 802110c:	6a3b      	ldr	r3, [r7, #32]
 802110e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021110:	fb01 f303 	mul.w	r3, r1, r3
 8021114:	4413      	add	r3, r2
 8021116:	4a4d      	ldr	r2, [pc, #308]	; (802124c <lv_point_transform+0x284>)
 8021118:	fb82 1203 	smull	r1, r2, r2, r3
 802111c:	1092      	asrs	r2, r2, #2
 802111e:	17db      	asrs	r3, r3, #31
 8021120:	1ad3      	subs	r3, r2, r3
 8021122:	4a4b      	ldr	r2, [pc, #300]	; (8021250 <lv_point_transform+0x288>)
 8021124:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8021126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021128:	f1c3 030a 	rsb	r3, r3, #10
 802112c:	69fa      	ldr	r2, [r7, #28]
 802112e:	fb03 f202 	mul.w	r2, r3, r2
 8021132:	69bb      	ldr	r3, [r7, #24]
 8021134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021136:	fb01 f303 	mul.w	r3, r1, r3
 802113a:	4413      	add	r3, r2
 802113c:	4a43      	ldr	r2, [pc, #268]	; (802124c <lv_point_transform+0x284>)
 802113e:	fb82 1203 	smull	r1, r2, r2, r3
 8021142:	1092      	asrs	r2, r2, #2
 8021144:	17db      	asrs	r3, r3, #31
 8021146:	1ad3      	subs	r3, r2, r3
 8021148:	4a42      	ldr	r2, [pc, #264]	; (8021254 <lv_point_transform+0x28c>)
 802114a:	6013      	str	r3, [r2, #0]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 802114c:	4b40      	ldr	r3, [pc, #256]	; (8021250 <lv_point_transform+0x288>)
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	115b      	asrs	r3, r3, #5
 8021152:	4a3f      	ldr	r2, [pc, #252]	; (8021250 <lv_point_transform+0x288>)
 8021154:	6013      	str	r3, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8021156:	4b3f      	ldr	r3, [pc, #252]	; (8021254 <lv_point_transform+0x28c>)
 8021158:	681b      	ldr	r3, [r3, #0]
 802115a:	115b      	asrs	r3, r3, #5
 802115c:	4a3d      	ldr	r2, [pc, #244]	; (8021254 <lv_point_transform+0x28c>)
 802115e:	6013      	str	r3, [r2, #0]
        angle_prev = angle;
 8021160:	4a39      	ldr	r2, [pc, #228]	; (8021248 <lv_point_transform+0x280>)
 8021162:	68bb      	ldr	r3, [r7, #8]
 8021164:	6013      	str	r3, [r2, #0]
    }
    int32_t x = p->x;
 8021166:	68fb      	ldr	r3, [r7, #12]
 8021168:	f9b3 3000 	ldrsh.w	r3, [r3]
 802116c:	617b      	str	r3, [r7, #20]
    int32_t y = p->y;
 802116e:	68fb      	ldr	r3, [r7, #12]
 8021170:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021174:	613b      	str	r3, [r7, #16]
    if(zoom == 256) {
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802117c:	d12c      	bne.n	80211d8 <lv_point_transform+0x210>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 802117e:	4b35      	ldr	r3, [pc, #212]	; (8021254 <lv_point_transform+0x28c>)
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	697a      	ldr	r2, [r7, #20]
 8021184:	fb03 f202 	mul.w	r2, r3, r2
 8021188:	4b31      	ldr	r3, [pc, #196]	; (8021250 <lv_point_transform+0x288>)
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	6939      	ldr	r1, [r7, #16]
 802118e:	fb01 f303 	mul.w	r3, r1, r3
 8021192:	1ad3      	subs	r3, r2, r3
 8021194:	129b      	asrs	r3, r3, #10
 8021196:	b29a      	uxth	r2, r3
 8021198:	683b      	ldr	r3, [r7, #0]
 802119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802119e:	b29b      	uxth	r3, r3
 80211a0:	4413      	add	r3, r2
 80211a2:	b29b      	uxth	r3, r3
 80211a4:	b21a      	sxth	r2, r3
 80211a6:	68fb      	ldr	r3, [r7, #12]
 80211a8:	801a      	strh	r2, [r3, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80211aa:	4b29      	ldr	r3, [pc, #164]	; (8021250 <lv_point_transform+0x288>)
 80211ac:	681b      	ldr	r3, [r3, #0]
 80211ae:	697a      	ldr	r2, [r7, #20]
 80211b0:	fb03 f202 	mul.w	r2, r3, r2
 80211b4:	4b27      	ldr	r3, [pc, #156]	; (8021254 <lv_point_transform+0x28c>)
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	6939      	ldr	r1, [r7, #16]
 80211ba:	fb01 f303 	mul.w	r3, r1, r3
 80211be:	4413      	add	r3, r2
 80211c0:	129b      	asrs	r3, r3, #10
 80211c2:	b29a      	uxth	r2, r3
 80211c4:	683b      	ldr	r3, [r7, #0]
 80211c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80211ca:	b29b      	uxth	r3, r3
 80211cc:	4413      	add	r3, r2
 80211ce:	b29b      	uxth	r3, r3
 80211d0:	b21a      	sxth	r2, r3
 80211d2:	68fb      	ldr	r3, [r7, #12]
 80211d4:	805a      	strh	r2, [r3, #2]
 80211d6:	e033      	b.n	8021240 <lv_point_transform+0x278>
    }
    else {
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 80211d8:	4b1e      	ldr	r3, [pc, #120]	; (8021254 <lv_point_transform+0x28c>)
 80211da:	681b      	ldr	r3, [r3, #0]
 80211dc:	697a      	ldr	r2, [r7, #20]
 80211de:	fb03 f202 	mul.w	r2, r3, r2
 80211e2:	4b1b      	ldr	r3, [pc, #108]	; (8021250 <lv_point_transform+0x288>)
 80211e4:	681b      	ldr	r3, [r3, #0]
 80211e6:	6939      	ldr	r1, [r7, #16]
 80211e8:	fb01 f303 	mul.w	r3, r1, r3
 80211ec:	1ad3      	subs	r3, r2, r3
 80211ee:	687a      	ldr	r2, [r7, #4]
 80211f0:	fb02 f303 	mul.w	r3, r2, r3
 80211f4:	149b      	asrs	r3, r3, #18
 80211f6:	b29a      	uxth	r2, r3
 80211f8:	683b      	ldr	r3, [r7, #0]
 80211fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80211fe:	b29b      	uxth	r3, r3
 8021200:	4413      	add	r3, r2
 8021202:	b29b      	uxth	r3, r3
 8021204:	b21a      	sxth	r2, r3
 8021206:	68fb      	ldr	r3, [r7, #12]
 8021208:	801a      	strh	r2, [r3, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 802120a:	4b11      	ldr	r3, [pc, #68]	; (8021250 <lv_point_transform+0x288>)
 802120c:	681b      	ldr	r3, [r3, #0]
 802120e:	697a      	ldr	r2, [r7, #20]
 8021210:	fb03 f202 	mul.w	r2, r3, r2
 8021214:	4b0f      	ldr	r3, [pc, #60]	; (8021254 <lv_point_transform+0x28c>)
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	6939      	ldr	r1, [r7, #16]
 802121a:	fb01 f303 	mul.w	r3, r1, r3
 802121e:	4413      	add	r3, r2
 8021220:	687a      	ldr	r2, [r7, #4]
 8021222:	fb02 f303 	mul.w	r3, r2, r3
 8021226:	149b      	asrs	r3, r3, #18
 8021228:	b29a      	uxth	r2, r3
 802122a:	683b      	ldr	r3, [r7, #0]
 802122c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021230:	b29b      	uxth	r3, r3
 8021232:	4413      	add	r3, r2
 8021234:	b29b      	uxth	r3, r3
 8021236:	b21a      	sxth	r2, r3
 8021238:	68fb      	ldr	r3, [r7, #12]
 802123a:	805a      	strh	r2, [r3, #2]
 802123c:	e000      	b.n	8021240 <lv_point_transform+0x278>
        return;
 802123e:	bf00      	nop
    }
}
 8021240:	3738      	adds	r7, #56	; 0x38
 8021242:	46bd      	mov	sp, r7
 8021244:	bd80      	pop	{r7, pc}
 8021246:	bf00      	nop
 8021248:	20000010 	.word	0x20000010
 802124c:	66666667 	.word	0x66666667
 8021250:	20000844 	.word	0x20000844
 8021254:	20000848 	.word	0x20000848

08021258 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 8021258:	b480      	push	{r7}
 802125a:	b089      	sub	sp, #36	; 0x24
 802125c:	af00      	add	r7, sp, #0
 802125e:	6078      	str	r0, [r7, #4]
 8021260:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8021268:	461a      	mov	r2, r3
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021270:	1ad3      	subs	r3, r2, r3
 8021272:	2b00      	cmp	r3, #0
 8021274:	da00      	bge.n	8021278 <lv_point_within_circle+0x20>
 8021276:	3301      	adds	r3, #1
 8021278:	105b      	asrs	r3, r3, #1
 802127a:	83fb      	strh	r3, [r7, #30]

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021282:	b29a      	uxth	r2, r3
 8021284:	8bfb      	ldrh	r3, [r7, #30]
 8021286:	4413      	add	r3, r2
 8021288:	b29b      	uxth	r3, r3
 802128a:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 802128c:	687b      	ldr	r3, [r7, #4]
 802128e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021292:	b29a      	uxth	r2, r3
 8021294:	8bfb      	ldrh	r3, [r7, #30]
 8021296:	4413      	add	r3, r2
 8021298:	b29b      	uxth	r3, r3
 802129a:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 802129c:	683b      	ldr	r3, [r7, #0]
 802129e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80212a2:	b29a      	uxth	r2, r3
 80212a4:	8bbb      	ldrh	r3, [r7, #28]
 80212a6:	1ad3      	subs	r3, r2, r3
 80212a8:	b29b      	uxth	r3, r3
 80212aa:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 80212ac:	683b      	ldr	r3, [r7, #0]
 80212ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80212b2:	b29a      	uxth	r2, r3
 80212b4:	8b7b      	ldrh	r3, [r7, #26]
 80212b6:	1ad3      	subs	r3, r2, r3
 80212b8:	b29b      	uxth	r3, r3
 80212ba:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 80212bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80212c0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80212c4:	fb02 f303 	mul.w	r3, r2, r3
 80212c8:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 80212ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80212ce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80212d2:	fb03 f202 	mul.w	r2, r3, r2
 80212d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80212da:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80212de:	fb01 f303 	mul.w	r3, r1, r3
 80212e2:	4413      	add	r3, r2
 80212e4:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 80212e6:	68fa      	ldr	r2, [r7, #12]
 80212e8:	693b      	ldr	r3, [r7, #16]
 80212ea:	429a      	cmp	r2, r3
 80212ec:	d801      	bhi.n	80212f2 <lv_point_within_circle+0x9a>
        return true;
 80212ee:	2301      	movs	r3, #1
 80212f0:	e000      	b.n	80212f4 <lv_point_within_circle+0x9c>
    else
        return false;
 80212f2:	2300      	movs	r3, #0
}
 80212f4:	4618      	mov	r0, r3
 80212f6:	3724      	adds	r7, #36	; 0x24
 80212f8:	46bd      	mov	sp, r7
 80212fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212fe:	4770      	bx	lr

08021300 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8021300:	b480      	push	{r7}
 8021302:	b083      	sub	sp, #12
 8021304:	af00      	add	r7, sp, #0
 8021306:	4603      	mov	r3, r0
 8021308:	71fb      	strb	r3, [r7, #7]
 802130a:	460b      	mov	r3, r1
 802130c:	71bb      	strb	r3, [r7, #6]
 802130e:	4613      	mov	r3, r2
 8021310:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8021312:	797b      	ldrb	r3, [r7, #5]
 8021314:	09db      	lsrs	r3, r3, #7
 8021316:	b2da      	uxtb	r2, r3
 8021318:	79bb      	ldrb	r3, [r7, #6]
 802131a:	09db      	lsrs	r3, r3, #7
 802131c:	b2db      	uxtb	r3, r3
 802131e:	4313      	orrs	r3, r2
 8021320:	b2da      	uxtb	r2, r3
 8021322:	79fb      	ldrb	r3, [r7, #7]
 8021324:	09db      	lsrs	r3, r3, #7
 8021326:	b2db      	uxtb	r3, r3
 8021328:	4313      	orrs	r3, r2
 802132a:	b2db      	uxtb	r3, r3
}
 802132c:	4618      	mov	r0, r3
 802132e:	370c      	adds	r7, #12
 8021330:	46bd      	mov	sp, r7
 8021332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021336:	4770      	bx	lr

08021338 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8021338:	b580      	push	{r7, lr}
 802133a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 802133c:	2200      	movs	r2, #0
 802133e:	2100      	movs	r1, #0
 8021340:	2000      	movs	r0, #0
 8021342:	f7ff ffdd 	bl	8021300 <lv_color_make>
 8021346:	4603      	mov	r3, r0
}
 8021348:	4618      	mov	r0, r3
 802134a:	bd80      	pop	{r7, pc}

0802134c <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 802134c:	b480      	push	{r7}
 802134e:	b085      	sub	sp, #20
 8021350:	af00      	add	r7, sp, #0
 8021352:	60f8      	str	r0, [r7, #12]
 8021354:	7239      	strb	r1, [r7, #8]
 8021356:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num--;
    }
#else
    while(px_num > 16) {
 8021358:	e062      	b.n	8021420 <lv_color_fill+0xd4>
        *buf = color;
 802135a:	68fb      	ldr	r3, [r7, #12]
 802135c:	7a3a      	ldrb	r2, [r7, #8]
 802135e:	701a      	strb	r2, [r3, #0]
        buf++;
 8021360:	68fb      	ldr	r3, [r7, #12]
 8021362:	3301      	adds	r3, #1
 8021364:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021366:	68fb      	ldr	r3, [r7, #12]
 8021368:	7a3a      	ldrb	r2, [r7, #8]
 802136a:	701a      	strb	r2, [r3, #0]
        buf++;
 802136c:	68fb      	ldr	r3, [r7, #12]
 802136e:	3301      	adds	r3, #1
 8021370:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021372:	68fb      	ldr	r3, [r7, #12]
 8021374:	7a3a      	ldrb	r2, [r7, #8]
 8021376:	701a      	strb	r2, [r3, #0]
        buf++;
 8021378:	68fb      	ldr	r3, [r7, #12]
 802137a:	3301      	adds	r3, #1
 802137c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802137e:	68fb      	ldr	r3, [r7, #12]
 8021380:	7a3a      	ldrb	r2, [r7, #8]
 8021382:	701a      	strb	r2, [r3, #0]
        buf++;
 8021384:	68fb      	ldr	r3, [r7, #12]
 8021386:	3301      	adds	r3, #1
 8021388:	60fb      	str	r3, [r7, #12]

        *buf = color;
 802138a:	68fb      	ldr	r3, [r7, #12]
 802138c:	7a3a      	ldrb	r2, [r7, #8]
 802138e:	701a      	strb	r2, [r3, #0]
        buf++;
 8021390:	68fb      	ldr	r3, [r7, #12]
 8021392:	3301      	adds	r3, #1
 8021394:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021396:	68fb      	ldr	r3, [r7, #12]
 8021398:	7a3a      	ldrb	r2, [r7, #8]
 802139a:	701a      	strb	r2, [r3, #0]
        buf++;
 802139c:	68fb      	ldr	r3, [r7, #12]
 802139e:	3301      	adds	r3, #1
 80213a0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80213a2:	68fb      	ldr	r3, [r7, #12]
 80213a4:	7a3a      	ldrb	r2, [r7, #8]
 80213a6:	701a      	strb	r2, [r3, #0]
        buf++;
 80213a8:	68fb      	ldr	r3, [r7, #12]
 80213aa:	3301      	adds	r3, #1
 80213ac:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80213ae:	68fb      	ldr	r3, [r7, #12]
 80213b0:	7a3a      	ldrb	r2, [r7, #8]
 80213b2:	701a      	strb	r2, [r3, #0]
        buf++;
 80213b4:	68fb      	ldr	r3, [r7, #12]
 80213b6:	3301      	adds	r3, #1
 80213b8:	60fb      	str	r3, [r7, #12]

        *buf = color;
 80213ba:	68fb      	ldr	r3, [r7, #12]
 80213bc:	7a3a      	ldrb	r2, [r7, #8]
 80213be:	701a      	strb	r2, [r3, #0]
        buf++;
 80213c0:	68fb      	ldr	r3, [r7, #12]
 80213c2:	3301      	adds	r3, #1
 80213c4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80213c6:	68fb      	ldr	r3, [r7, #12]
 80213c8:	7a3a      	ldrb	r2, [r7, #8]
 80213ca:	701a      	strb	r2, [r3, #0]
        buf++;
 80213cc:	68fb      	ldr	r3, [r7, #12]
 80213ce:	3301      	adds	r3, #1
 80213d0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80213d2:	68fb      	ldr	r3, [r7, #12]
 80213d4:	7a3a      	ldrb	r2, [r7, #8]
 80213d6:	701a      	strb	r2, [r3, #0]
        buf++;
 80213d8:	68fb      	ldr	r3, [r7, #12]
 80213da:	3301      	adds	r3, #1
 80213dc:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80213de:	68fb      	ldr	r3, [r7, #12]
 80213e0:	7a3a      	ldrb	r2, [r7, #8]
 80213e2:	701a      	strb	r2, [r3, #0]
        buf++;
 80213e4:	68fb      	ldr	r3, [r7, #12]
 80213e6:	3301      	adds	r3, #1
 80213e8:	60fb      	str	r3, [r7, #12]

        *buf = color;
 80213ea:	68fb      	ldr	r3, [r7, #12]
 80213ec:	7a3a      	ldrb	r2, [r7, #8]
 80213ee:	701a      	strb	r2, [r3, #0]
        buf++;
 80213f0:	68fb      	ldr	r3, [r7, #12]
 80213f2:	3301      	adds	r3, #1
 80213f4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80213f6:	68fb      	ldr	r3, [r7, #12]
 80213f8:	7a3a      	ldrb	r2, [r7, #8]
 80213fa:	701a      	strb	r2, [r3, #0]
        buf++;
 80213fc:	68fb      	ldr	r3, [r7, #12]
 80213fe:	3301      	adds	r3, #1
 8021400:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8021402:	68fb      	ldr	r3, [r7, #12]
 8021404:	7a3a      	ldrb	r2, [r7, #8]
 8021406:	701a      	strb	r2, [r3, #0]
        buf++;
 8021408:	68fb      	ldr	r3, [r7, #12]
 802140a:	3301      	adds	r3, #1
 802140c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802140e:	68fb      	ldr	r3, [r7, #12]
 8021410:	7a3a      	ldrb	r2, [r7, #8]
 8021412:	701a      	strb	r2, [r3, #0]
        buf++;
 8021414:	68fb      	ldr	r3, [r7, #12]
 8021416:	3301      	adds	r3, #1
 8021418:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	3b10      	subs	r3, #16
 802141e:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	2b10      	cmp	r3, #16
 8021424:	d899      	bhi.n	802135a <lv_color_fill+0xe>
    }
    while(px_num) {
 8021426:	e008      	b.n	802143a <lv_color_fill+0xee>
        *buf = color;
 8021428:	68fb      	ldr	r3, [r7, #12]
 802142a:	7a3a      	ldrb	r2, [r7, #8]
 802142c:	701a      	strb	r2, [r3, #0]
        buf++;
 802142e:	68fb      	ldr	r3, [r7, #12]
 8021430:	3301      	adds	r3, #1
 8021432:	60fb      	str	r3, [r7, #12]
        px_num--;
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	3b01      	subs	r3, #1
 8021438:	607b      	str	r3, [r7, #4]
    while(px_num) {
 802143a:	687b      	ldr	r3, [r7, #4]
 802143c:	2b00      	cmp	r3, #0
 802143e:	d1f3      	bne.n	8021428 <lv_color_fill+0xdc>
    }
#endif
}
 8021440:	bf00      	nop
 8021442:	bf00      	nop
 8021444:	3714      	adds	r7, #20
 8021446:	46bd      	mov	sp, r7
 8021448:	f85d 7b04 	ldr.w	r7, [sp], #4
 802144c:	4770      	bx	lr
	...

08021450 <lv_palette_main>:
    color32.full = lv_color_to32(color);
    return lv_color_rgb_to_hsv(color32.ch.red, color32.ch.green, color32.ch.blue);
}

lv_color_t lv_palette_main(lv_palette_t p)
{
 8021450:	b580      	push	{r7, lr}
 8021452:	b082      	sub	sp, #8
 8021454:	af00      	add	r7, sp, #0
 8021456:	4603      	mov	r3, r0
 8021458:	71fb      	strb	r3, [r7, #7]
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 802145a:	79fb      	ldrb	r3, [r7, #7]
 802145c:	2b12      	cmp	r3, #18
 802145e:	d903      	bls.n	8021468 <lv_palette_main+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
 8021460:	f7ff ff6a 	bl	8021338 <lv_color_black>
 8021464:	4603      	mov	r3, r0
 8021466:	e002      	b.n	802146e <lv_palette_main+0x1e>
    }

    return colors[p];
 8021468:	79fb      	ldrb	r3, [r7, #7]
 802146a:	4a03      	ldr	r2, [pc, #12]	; (8021478 <lv_palette_main+0x28>)
 802146c:	5cd3      	ldrb	r3, [r2, r3]

}
 802146e:	4618      	mov	r0, r3
 8021470:	3708      	adds	r7, #8
 8021472:	46bd      	mov	sp, r7
 8021474:	bd80      	pop	{r7, pc}
 8021476:	bf00      	nop
 8021478:	0802dbb4 	.word	0x0802dbb4

0802147c <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 802147c:	b580      	push	{r7, lr}
 802147e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 8021480:	2104      	movs	r1, #4
 8021482:	4802      	ldr	r0, [pc, #8]	; (802148c <_lv_fs_init+0x10>)
 8021484:	f000 fb19 	bl	8021aba <_lv_ll_init>
}
 8021488:	bf00      	nop
 802148a:	bd80      	pop	{r7, pc}
 802148c:	20000870 	.word	0x20000870

08021490 <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 8021490:	b580      	push	{r7, lr}
 8021492:	b088      	sub	sp, #32
 8021494:	af00      	add	r7, sp, #0
 8021496:	60f8      	str	r0, [r7, #12]
 8021498:	60b9      	str	r1, [r7, #8]
 802149a:	4613      	mov	r3, r2
 802149c:	71fb      	strb	r3, [r7, #7]
    if(path == NULL) {
 802149e:	68bb      	ldr	r3, [r7, #8]
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d101      	bne.n	80214a8 <lv_fs_open+0x18>
        LV_LOG_WARN("Can't open file: path is NULL");
        return LV_FS_RES_INV_PARAM;
 80214a4:	230b      	movs	r3, #11
 80214a6:	e05c      	b.n	8021562 <lv_fs_open+0xd2>
    }

    char letter = path[0];
 80214a8:	68bb      	ldr	r3, [r7, #8]
 80214aa:	781b      	ldrb	r3, [r3, #0]
 80214ac:	77fb      	strb	r3, [r7, #31]
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 80214ae:	7ffb      	ldrb	r3, [r7, #31]
 80214b0:	4618      	mov	r0, r3
 80214b2:	f000 fa9b 	bl	80219ec <lv_fs_get_drv>
 80214b6:	61b8      	str	r0, [r7, #24]

    if(drv == NULL) {
 80214b8:	69bb      	ldr	r3, [r7, #24]
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	d101      	bne.n	80214c2 <lv_fs_open+0x32>
        LV_LOG_WARN("Can't open file (%s): unknown driver letter", path);
        return LV_FS_RES_NOT_EX;
 80214be:	2303      	movs	r3, #3
 80214c0:	e04f      	b.n	8021562 <lv_fs_open+0xd2>
    }

    if(drv->ready_cb) {
 80214c2:	69bb      	ldr	r3, [r7, #24]
 80214c4:	685b      	ldr	r3, [r3, #4]
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	d00b      	beq.n	80214e2 <lv_fs_open+0x52>
        if(drv->ready_cb(drv) == false) {
 80214ca:	69bb      	ldr	r3, [r7, #24]
 80214cc:	685b      	ldr	r3, [r3, #4]
 80214ce:	69b8      	ldr	r0, [r7, #24]
 80214d0:	4798      	blx	r3
 80214d2:	4603      	mov	r3, r0
 80214d4:	f083 0301 	eor.w	r3, r3, #1
 80214d8:	b2db      	uxtb	r3, r3
 80214da:	2b00      	cmp	r3, #0
 80214dc:	d001      	beq.n	80214e2 <lv_fs_open+0x52>
            LV_LOG_WARN("Can't open file (%s): driver not ready", path);
            return LV_FS_RES_HW_ERR;
 80214de:	2301      	movs	r3, #1
 80214e0:	e03f      	b.n	8021562 <lv_fs_open+0xd2>
        }
    }

    if(drv->open_cb == NULL) {
 80214e2:	69bb      	ldr	r3, [r7, #24]
 80214e4:	689b      	ldr	r3, [r3, #8]
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d101      	bne.n	80214ee <lv_fs_open+0x5e>
        LV_LOG_WARN("Can't open file (%s): open function not exists", path);
        return LV_FS_RES_NOT_IMP;
 80214ea:	2309      	movs	r3, #9
 80214ec:	e039      	b.n	8021562 <lv_fs_open+0xd2>
    }

    const char * real_path = lv_fs_get_real_path(path);
 80214ee:	68b8      	ldr	r0, [r7, #8]
 80214f0:	f000 face 	bl	8021a90 <lv_fs_get_real_path>
 80214f4:	6178      	str	r0, [r7, #20]
    void * file_d = drv->open_cb(drv, real_path, mode);
 80214f6:	69bb      	ldr	r3, [r7, #24]
 80214f8:	689b      	ldr	r3, [r3, #8]
 80214fa:	79fa      	ldrb	r2, [r7, #7]
 80214fc:	6979      	ldr	r1, [r7, #20]
 80214fe:	69b8      	ldr	r0, [r7, #24]
 8021500:	4798      	blx	r3
 8021502:	6138      	str	r0, [r7, #16]

    if(file_d == NULL || file_d == (void *)(-1)) {
 8021504:	693b      	ldr	r3, [r7, #16]
 8021506:	2b00      	cmp	r3, #0
 8021508:	d003      	beq.n	8021512 <lv_fs_open+0x82>
 802150a:	693b      	ldr	r3, [r7, #16]
 802150c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021510:	d101      	bne.n	8021516 <lv_fs_open+0x86>
        return LV_FS_RES_UNKNOWN;
 8021512:	230c      	movs	r3, #12
 8021514:	e025      	b.n	8021562 <lv_fs_open+0xd2>
    }

    file_p->drv = drv;
 8021516:	68fb      	ldr	r3, [r7, #12]
 8021518:	69ba      	ldr	r2, [r7, #24]
 802151a:	605a      	str	r2, [r3, #4]
    file_p->file_d = file_d;
 802151c:	68fb      	ldr	r3, [r7, #12]
 802151e:	693a      	ldr	r2, [r7, #16]
 8021520:	601a      	str	r2, [r3, #0]

    if(drv->cache_size) {
 8021522:	69bb      	ldr	r3, [r7, #24]
 8021524:	885b      	ldrh	r3, [r3, #2]
 8021526:	2b00      	cmp	r3, #0
 8021528:	d01a      	beq.n	8021560 <lv_fs_open+0xd0>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 802152a:	2010      	movs	r0, #16
 802152c:	f000 fd62 	bl	8021ff4 <lv_mem_alloc>
 8021530:	4602      	mov	r2, r0
 8021532:	68fb      	ldr	r3, [r7, #12]
 8021534:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8021536:	68fb      	ldr	r3, [r7, #12]
 8021538:	689b      	ldr	r3, [r3, #8]
 802153a:	2b00      	cmp	r3, #0
 802153c:	d100      	bne.n	8021540 <lv_fs_open+0xb0>
 802153e:	e7fe      	b.n	802153e <lv_fs_open+0xae>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 8021540:	68fb      	ldr	r3, [r7, #12]
 8021542:	689b      	ldr	r3, [r3, #8]
 8021544:	2110      	movs	r1, #16
 8021546:	4618      	mov	r0, r3
 8021548:	f001 f988 	bl	802285c <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 802154c:	68fb      	ldr	r3, [r7, #12]
 802154e:	689b      	ldr	r3, [r3, #8]
 8021550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021554:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	689b      	ldr	r3, [r3, #8]
 802155a:	f06f 0201 	mvn.w	r2, #1
 802155e:	605a      	str	r2, [r3, #4]
    }

    return LV_FS_RES_OK;
 8021560:	2300      	movs	r3, #0
}
 8021562:	4618      	mov	r0, r3
 8021564:	3720      	adds	r7, #32
 8021566:	46bd      	mov	sp, r7
 8021568:	bd80      	pop	{r7, pc}

0802156a <lv_fs_close>:

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 802156a:	b580      	push	{r7, lr}
 802156c:	b084      	sub	sp, #16
 802156e:	af00      	add	r7, sp, #0
 8021570:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	685b      	ldr	r3, [r3, #4]
 8021576:	2b00      	cmp	r3, #0
 8021578:	d101      	bne.n	802157e <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 802157a:	230b      	movs	r3, #11
 802157c:	e034      	b.n	80215e8 <lv_fs_close+0x7e>
    }

    if(file_p->drv->close_cb == NULL) {
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	685b      	ldr	r3, [r3, #4]
 8021582:	68db      	ldr	r3, [r3, #12]
 8021584:	2b00      	cmp	r3, #0
 8021586:	d101      	bne.n	802158c <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 8021588:	2309      	movs	r3, #9
 802158a:	e02d      	b.n	80215e8 <lv_fs_close+0x7e>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	685b      	ldr	r3, [r3, #4]
 8021590:	68db      	ldr	r3, [r3, #12]
 8021592:	687a      	ldr	r2, [r7, #4]
 8021594:	6850      	ldr	r0, [r2, #4]
 8021596:	687a      	ldr	r2, [r7, #4]
 8021598:	6812      	ldr	r2, [r2, #0]
 802159a:	4611      	mov	r1, r2
 802159c:	4798      	blx	r3
 802159e:	4603      	mov	r3, r0
 80215a0:	73fb      	strb	r3, [r7, #15]

    if(file_p->drv->cache_size && file_p->cache) {
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	685b      	ldr	r3, [r3, #4]
 80215a6:	885b      	ldrh	r3, [r3, #2]
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	d013      	beq.n	80215d4 <lv_fs_close+0x6a>
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	689b      	ldr	r3, [r3, #8]
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	d00f      	beq.n	80215d4 <lv_fs_close+0x6a>
        if(file_p->cache->buffer) {
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	689b      	ldr	r3, [r3, #8]
 80215b8:	68db      	ldr	r3, [r3, #12]
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d005      	beq.n	80215ca <lv_fs_close+0x60>
            lv_mem_free(file_p->cache->buffer);
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	689b      	ldr	r3, [r3, #8]
 80215c2:	68db      	ldr	r3, [r3, #12]
 80215c4:	4618      	mov	r0, r3
 80215c6:	f000 fd45 	bl	8022054 <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	689b      	ldr	r3, [r3, #8]
 80215ce:	4618      	mov	r0, r3
 80215d0:	f000 fd40 	bl	8022054 <lv_mem_free>
    }

    file_p->file_d = NULL;
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	2200      	movs	r2, #0
 80215d8:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	2200      	movs	r2, #0
 80215de:	605a      	str	r2, [r3, #4]
    file_p->cache  = NULL;
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	2200      	movs	r2, #0
 80215e4:	609a      	str	r2, [r3, #8]

    return res;
 80215e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80215e8:	4618      	mov	r0, r3
 80215ea:	3710      	adds	r7, #16
 80215ec:	46bd      	mov	sp, r7
 80215ee:	bd80      	pop	{r7, pc}

080215f0 <lv_fs_read_cached>:

static lv_fs_res_t lv_fs_read_cached(lv_fs_file_t * file_p, char * buf, uint32_t btr, uint32_t * br)
{
 80215f0:	b5b0      	push	{r4, r5, r7, lr}
 80215f2:	b090      	sub	sp, #64	; 0x40
 80215f4:	af02      	add	r7, sp, #8
 80215f6:	60f8      	str	r0, [r7, #12]
 80215f8:	60b9      	str	r1, [r7, #8]
 80215fa:	607a      	str	r2, [r7, #4]
 80215fc:	603b      	str	r3, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 80215fe:	2300      	movs	r3, #0
 8021600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t file_position = file_p->cache->file_position;
 8021604:	68fb      	ldr	r3, [r7, #12]
 8021606:	689b      	ldr	r3, [r3, #8]
 8021608:	689b      	ldr	r3, [r3, #8]
 802160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t start = file_p->cache->start;
 802160c:	68fb      	ldr	r3, [r7, #12]
 802160e:	689b      	ldr	r3, [r3, #8]
 8021610:	681b      	ldr	r3, [r3, #0]
 8021612:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t end = file_p->cache->end;
 8021614:	68fb      	ldr	r3, [r7, #12]
 8021616:	689b      	ldr	r3, [r3, #8]
 8021618:	685b      	ldr	r3, [r3, #4]
 802161a:	627b      	str	r3, [r7, #36]	; 0x24
    char * buffer = file_p->cache->buffer;
 802161c:	68fb      	ldr	r3, [r7, #12]
 802161e:	689b      	ldr	r3, [r3, #8]
 8021620:	68db      	ldr	r3, [r3, #12]
 8021622:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t buffer_size = file_p->drv->cache_size;
 8021624:	68fb      	ldr	r3, [r7, #12]
 8021626:	685b      	ldr	r3, [r3, #4]
 8021628:	885b      	ldrh	r3, [r3, #2]
 802162a:	847b      	strh	r3, [r7, #34]	; 0x22

    if(start <= file_position && file_position < end) {
 802162c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021630:	429a      	cmp	r2, r3
 8021632:	f200 8082 	bhi.w	802173a <lv_fs_read_cached+0x14a>
 8021636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802163a:	429a      	cmp	r2, r3
 802163c:	d27d      	bcs.n	802173a <lv_fs_read_cached+0x14a>
        /* Data can be read from cache buffer */
        uint16_t buffer_offset = file_position - start;
 802163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021640:	b29a      	uxth	r2, r3
 8021642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021644:	b29b      	uxth	r3, r3
 8021646:	1ad3      	subs	r3, r2, r3
 8021648:	843b      	strh	r3, [r7, #32]
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 802164a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802164e:	1ad2      	subs	r2, r2, r3
 8021650:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021652:	8c3b      	ldrh	r3, [r7, #32]
 8021654:	1acb      	subs	r3, r1, r3
 8021656:	4293      	cmp	r3, r2
 8021658:	bf28      	it	cs
 802165a:	4613      	movcs	r3, r2
 802165c:	61fb      	str	r3, [r7, #28]

        if(btr <= buffer_remaining_length) {
 802165e:	687a      	ldr	r2, [r7, #4]
 8021660:	69fb      	ldr	r3, [r7, #28]
 8021662:	429a      	cmp	r2, r3
 8021664:	d80b      	bhi.n	802167e <lv_fs_read_cached+0x8e>
            /*Data is in cache buffer, and buffer end not reached, no need to read from FS*/
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8021666:	8c3b      	ldrh	r3, [r7, #32]
 8021668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802166a:	4413      	add	r3, r2
 802166c:	687a      	ldr	r2, [r7, #4]
 802166e:	4619      	mov	r1, r3
 8021670:	68b8      	ldr	r0, [r7, #8]
 8021672:	f000 fe4d 	bl	8022310 <lv_memcpy>
            *br = btr;
 8021676:	683b      	ldr	r3, [r7, #0]
 8021678:	687a      	ldr	r2, [r7, #4]
 802167a:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 802167c:	e0b3      	b.n	80217e6 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*First part of data is in cache buffer, but we need to read rest of data from FS*/
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 802167e:	8c3b      	ldrh	r3, [r7, #32]
 8021680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021682:	4413      	add	r3, r2
 8021684:	69fa      	ldr	r2, [r7, #28]
 8021686:	4619      	mov	r1, r3
 8021688:	68b8      	ldr	r0, [r7, #8]
 802168a:	f000 fe41 	bl	8022310 <lv_memcpy>

            uint32_t bytes_read_to_buffer = 0;
 802168e:	2300      	movs	r3, #0
 8021690:	617b      	str	r3, [r7, #20]
            if(btr > buffer_size) {
 8021692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021694:	687a      	ldr	r2, [r7, #4]
 8021696:	429a      	cmp	r2, r3
 8021698:	d916      	bls.n	80216c8 <lv_fs_read_cached+0xd8>
                /*If remaining data chuck is bigger than buffer size, then do not use cache, instead read it directly from FS*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 802169a:	68fb      	ldr	r3, [r7, #12]
 802169c:	685b      	ldr	r3, [r3, #4]
 802169e:	691c      	ldr	r4, [r3, #16]
 80216a0:	68fb      	ldr	r3, [r7, #12]
 80216a2:	6858      	ldr	r0, [r3, #4]
 80216a4:	68fb      	ldr	r3, [r7, #12]
 80216a6:	6819      	ldr	r1, [r3, #0]
 80216a8:	68ba      	ldr	r2, [r7, #8]
 80216aa:	69fb      	ldr	r3, [r7, #28]
 80216ac:	18d5      	adds	r5, r2, r3
 80216ae:	687a      	ldr	r2, [r7, #4]
 80216b0:	69fb      	ldr	r3, [r7, #28]
 80216b2:	1ad2      	subs	r2, r2, r3
 80216b4:	f107 0314 	add.w	r3, r7, #20
 80216b8:	9300      	str	r3, [sp, #0]
 80216ba:	4613      	mov	r3, r2
 80216bc:	462a      	mov	r2, r5
 80216be:	47a0      	blx	r4
 80216c0:	4603      	mov	r3, r0
 80216c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80216c6:	e02e      	b.n	8021726 <lv_fs_read_cached+0x136>
                                           btr - buffer_remaining_length, &bytes_read_to_buffer);
            }
            else {
                /*If remaining data chunk is smaller than buffer size, then read into cache buffer*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 80216c8:	68fb      	ldr	r3, [r7, #12]
 80216ca:	685b      	ldr	r3, [r3, #4]
 80216cc:	691c      	ldr	r4, [r3, #16]
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	6858      	ldr	r0, [r3, #4]
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	6819      	ldr	r1, [r3, #0]
 80216d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80216d8:	f107 0314 	add.w	r3, r7, #20
 80216dc:	9300      	str	r3, [sp, #0]
 80216de:	4613      	mov	r3, r2
 80216e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80216e2:	47a0      	blx	r4
 80216e4:	4603      	mov	r3, r0
 80216e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                file_p->cache->start = file_p->cache->end;
 80216ea:	68fb      	ldr	r3, [r7, #12]
 80216ec:	689a      	ldr	r2, [r3, #8]
 80216ee:	68fb      	ldr	r3, [r7, #12]
 80216f0:	689b      	ldr	r3, [r3, #8]
 80216f2:	6852      	ldr	r2, [r2, #4]
 80216f4:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 80216f6:	68fb      	ldr	r3, [r7, #12]
 80216f8:	689b      	ldr	r3, [r3, #8]
 80216fa:	6819      	ldr	r1, [r3, #0]
 80216fc:	697a      	ldr	r2, [r7, #20]
 80216fe:	68fb      	ldr	r3, [r7, #12]
 8021700:	689b      	ldr	r3, [r3, #8]
 8021702:	440a      	add	r2, r1
 8021704:	605a      	str	r2, [r3, #4]

                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8021706:	687a      	ldr	r2, [r7, #4]
 8021708:	69fb      	ldr	r3, [r7, #28]
 802170a:	1ad2      	subs	r2, r2, r3
 802170c:	697b      	ldr	r3, [r7, #20]
 802170e:	4293      	cmp	r3, r2
 8021710:	bf28      	it	cs
 8021712:	4613      	movcs	r3, r2
 8021714:	837b      	strh	r3, [r7, #26]
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 8021716:	68ba      	ldr	r2, [r7, #8]
 8021718:	69fb      	ldr	r3, [r7, #28]
 802171a:	4413      	add	r3, r2
 802171c:	8b7a      	ldrh	r2, [r7, #26]
 802171e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021720:	4618      	mov	r0, r3
 8021722:	f000 fdf5 	bl	8022310 <lv_memcpy>
            }
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8021726:	697a      	ldr	r2, [r7, #20]
 8021728:	69fb      	ldr	r3, [r7, #28]
 802172a:	441a      	add	r2, r3
 802172c:	687b      	ldr	r3, [r7, #4]
 802172e:	429a      	cmp	r2, r3
 8021730:	bf28      	it	cs
 8021732:	461a      	movcs	r2, r3
 8021734:	683b      	ldr	r3, [r7, #0]
 8021736:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 8021738:	e055      	b.n	80217e6 <lv_fs_read_cached+0x1f6>
        }
    }
    else {
        /*Data is not in cache buffer*/
        if(btr > buffer_size) {
 802173a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802173c:	687a      	ldr	r2, [r7, #4]
 802173e:	429a      	cmp	r2, r3
 8021740:	d90f      	bls.n	8021762 <lv_fs_read_cached+0x172>
            /*If bigger data is requested, then do not use cache, instead read it directly*/
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 8021742:	68fb      	ldr	r3, [r7, #12]
 8021744:	685b      	ldr	r3, [r3, #4]
 8021746:	691c      	ldr	r4, [r3, #16]
 8021748:	68fb      	ldr	r3, [r7, #12]
 802174a:	6858      	ldr	r0, [r3, #4]
 802174c:	68fb      	ldr	r3, [r7, #12]
 802174e:	6819      	ldr	r1, [r3, #0]
 8021750:	683b      	ldr	r3, [r7, #0]
 8021752:	9300      	str	r3, [sp, #0]
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	68ba      	ldr	r2, [r7, #8]
 8021758:	47a0      	blx	r4
 802175a:	4603      	mov	r3, r0
 802175c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8021760:	e041      	b.n	80217e6 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*If small data is requested, then read from FS into cache buffer*/
            if(buffer == NULL) {
 8021762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021764:	2b00      	cmp	r3, #0
 8021766:	d111      	bne.n	802178c <lv_fs_read_cached+0x19c>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8021768:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802176a:	68fb      	ldr	r3, [r7, #12]
 802176c:	689c      	ldr	r4, [r3, #8]
 802176e:	4610      	mov	r0, r2
 8021770:	f000 fc40 	bl	8021ff4 <lv_mem_alloc>
 8021774:	4603      	mov	r3, r0
 8021776:	60e3      	str	r3, [r4, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8021778:	68fb      	ldr	r3, [r7, #12]
 802177a:	689b      	ldr	r3, [r3, #8]
 802177c:	68db      	ldr	r3, [r3, #12]
 802177e:	2b00      	cmp	r3, #0
 8021780:	d100      	bne.n	8021784 <lv_fs_read_cached+0x194>
 8021782:	e7fe      	b.n	8021782 <lv_fs_read_cached+0x192>
                buffer = file_p->cache->buffer;
 8021784:	68fb      	ldr	r3, [r7, #12]
 8021786:	689b      	ldr	r3, [r3, #8]
 8021788:	68db      	ldr	r3, [r3, #12]
 802178a:	633b      	str	r3, [r7, #48]	; 0x30
            }

            uint32_t bytes_read_to_buffer = 0;
 802178c:	2300      	movs	r3, #0
 802178e:	613b      	str	r3, [r7, #16]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8021790:	68fb      	ldr	r3, [r7, #12]
 8021792:	685b      	ldr	r3, [r3, #4]
 8021794:	691c      	ldr	r4, [r3, #16]
 8021796:	68fb      	ldr	r3, [r7, #12]
 8021798:	6858      	ldr	r0, [r3, #4]
 802179a:	68fb      	ldr	r3, [r7, #12]
 802179c:	6819      	ldr	r1, [r3, #0]
 802179e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80217a0:	f107 0310 	add.w	r3, r7, #16
 80217a4:	9300      	str	r3, [sp, #0]
 80217a6:	4613      	mov	r3, r2
 80217a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80217aa:	47a0      	blx	r4
 80217ac:	4603      	mov	r3, r0
 80217ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            file_p->cache->start = file_position;
 80217b2:	68fb      	ldr	r3, [r7, #12]
 80217b4:	689b      	ldr	r3, [r3, #8]
 80217b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80217b8:	601a      	str	r2, [r3, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 80217ba:	68fb      	ldr	r3, [r7, #12]
 80217bc:	689b      	ldr	r3, [r3, #8]
 80217be:	6819      	ldr	r1, [r3, #0]
 80217c0:	693a      	ldr	r2, [r7, #16]
 80217c2:	68fb      	ldr	r3, [r7, #12]
 80217c4:	689b      	ldr	r3, [r3, #8]
 80217c6:	440a      	add	r2, r1
 80217c8:	605a      	str	r2, [r3, #4]

            *br = LV_MIN(btr, bytes_read_to_buffer);
 80217ca:	693a      	ldr	r2, [r7, #16]
 80217cc:	687b      	ldr	r3, [r7, #4]
 80217ce:	429a      	cmp	r2, r3
 80217d0:	bf28      	it	cs
 80217d2:	461a      	movcs	r2, r3
 80217d4:	683b      	ldr	r3, [r7, #0]
 80217d6:	601a      	str	r2, [r3, #0]
            lv_memcpy(buf, buffer, *br);
 80217d8:	683b      	ldr	r3, [r7, #0]
 80217da:	681b      	ldr	r3, [r3, #0]
 80217dc:	461a      	mov	r2, r3
 80217de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80217e0:	68b8      	ldr	r0, [r7, #8]
 80217e2:	f000 fd95 	bl	8022310 <lv_memcpy>

        }
    }

    if(res == LV_FS_RES_OK) {
 80217e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	d108      	bne.n	8021800 <lv_fs_read_cached+0x210>
        file_p->cache->file_position += *br;
 80217ee:	68fb      	ldr	r3, [r7, #12]
 80217f0:	689b      	ldr	r3, [r3, #8]
 80217f2:	6899      	ldr	r1, [r3, #8]
 80217f4:	683b      	ldr	r3, [r7, #0]
 80217f6:	681a      	ldr	r2, [r3, #0]
 80217f8:	68fb      	ldr	r3, [r7, #12]
 80217fa:	689b      	ldr	r3, [r3, #8]
 80217fc:	440a      	add	r2, r1
 80217fe:	609a      	str	r2, [r3, #8]
    }

    return res;
 8021800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8021804:	4618      	mov	r0, r3
 8021806:	3738      	adds	r7, #56	; 0x38
 8021808:	46bd      	mov	sp, r7
 802180a:	bdb0      	pop	{r4, r5, r7, pc}

0802180c <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 802180c:	b590      	push	{r4, r7, lr}
 802180e:	b089      	sub	sp, #36	; 0x24
 8021810:	af02      	add	r7, sp, #8
 8021812:	60f8      	str	r0, [r7, #12]
 8021814:	60b9      	str	r1, [r7, #8]
 8021816:	607a      	str	r2, [r7, #4]
 8021818:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 802181a:	683b      	ldr	r3, [r7, #0]
 802181c:	2b00      	cmp	r3, #0
 802181e:	d002      	beq.n	8021826 <lv_fs_read+0x1a>
 8021820:	683b      	ldr	r3, [r7, #0]
 8021822:	2200      	movs	r2, #0
 8021824:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	685b      	ldr	r3, [r3, #4]
 802182a:	2b00      	cmp	r3, #0
 802182c:	d101      	bne.n	8021832 <lv_fs_read+0x26>
 802182e:	230b      	movs	r3, #11
 8021830:	e02d      	b.n	802188e <lv_fs_read+0x82>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8021832:	68fb      	ldr	r3, [r7, #12]
 8021834:	685b      	ldr	r3, [r3, #4]
 8021836:	691b      	ldr	r3, [r3, #16]
 8021838:	2b00      	cmp	r3, #0
 802183a:	d101      	bne.n	8021840 <lv_fs_read+0x34>
 802183c:	2309      	movs	r3, #9
 802183e:	e026      	b.n	802188e <lv_fs_read+0x82>

    uint32_t br_tmp = 0;
 8021840:	2300      	movs	r3, #0
 8021842:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 8021844:	68fb      	ldr	r3, [r7, #12]
 8021846:	685b      	ldr	r3, [r3, #4]
 8021848:	885b      	ldrh	r3, [r3, #2]
 802184a:	2b00      	cmp	r3, #0
 802184c:	d009      	beq.n	8021862 <lv_fs_read+0x56>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 802184e:	f107 0310 	add.w	r3, r7, #16
 8021852:	687a      	ldr	r2, [r7, #4]
 8021854:	68b9      	ldr	r1, [r7, #8]
 8021856:	68f8      	ldr	r0, [r7, #12]
 8021858:	f7ff feca 	bl	80215f0 <lv_fs_read_cached>
 802185c:	4603      	mov	r3, r0
 802185e:	75fb      	strb	r3, [r7, #23]
 8021860:	e00e      	b.n	8021880 <lv_fs_read+0x74>
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8021862:	68fb      	ldr	r3, [r7, #12]
 8021864:	685b      	ldr	r3, [r3, #4]
 8021866:	691c      	ldr	r4, [r3, #16]
 8021868:	68fb      	ldr	r3, [r7, #12]
 802186a:	6858      	ldr	r0, [r3, #4]
 802186c:	68fb      	ldr	r3, [r7, #12]
 802186e:	6819      	ldr	r1, [r3, #0]
 8021870:	f107 0310 	add.w	r3, r7, #16
 8021874:	9300      	str	r3, [sp, #0]
 8021876:	687b      	ldr	r3, [r7, #4]
 8021878:	68ba      	ldr	r2, [r7, #8]
 802187a:	47a0      	blx	r4
 802187c:	4603      	mov	r3, r0
 802187e:	75fb      	strb	r3, [r7, #23]
    }

    if(br != NULL) *br = br_tmp;
 8021880:	683b      	ldr	r3, [r7, #0]
 8021882:	2b00      	cmp	r3, #0
 8021884:	d002      	beq.n	802188c <lv_fs_read+0x80>
 8021886:	693a      	ldr	r2, [r7, #16]
 8021888:	683b      	ldr	r3, [r7, #0]
 802188a:	601a      	str	r2, [r3, #0]

    return res;
 802188c:	7dfb      	ldrb	r3, [r7, #23]
}
 802188e:	4618      	mov	r0, r3
 8021890:	371c      	adds	r7, #28
 8021892:	46bd      	mov	sp, r7
 8021894:	bd90      	pop	{r4, r7, pc}

08021896 <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 8021896:	b590      	push	{r4, r7, lr}
 8021898:	b087      	sub	sp, #28
 802189a:	af00      	add	r7, sp, #0
 802189c:	60f8      	str	r0, [r7, #12]
 802189e:	60b9      	str	r1, [r7, #8]
 80218a0:	4613      	mov	r3, r2
 80218a2:	71fb      	strb	r3, [r7, #7]
    if(file_p->drv == NULL) {
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	685b      	ldr	r3, [r3, #4]
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	d101      	bne.n	80218b0 <lv_fs_seek+0x1a>
        return LV_FS_RES_INV_PARAM;
 80218ac:	230b      	movs	r3, #11
 80218ae:	e098      	b.n	80219e2 <lv_fs_seek+0x14c>
    }

    if(file_p->drv->seek_cb == NULL) {
 80218b0:	68fb      	ldr	r3, [r7, #12]
 80218b2:	685b      	ldr	r3, [r3, #4]
 80218b4:	699b      	ldr	r3, [r3, #24]
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	d101      	bne.n	80218be <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 80218ba:	2309      	movs	r3, #9
 80218bc:	e091      	b.n	80219e2 <lv_fs_seek+0x14c>
    }

    lv_fs_res_t res = LV_FS_RES_OK;
 80218be:	2300      	movs	r3, #0
 80218c0:	75fb      	strb	r3, [r7, #23]
    if(file_p->drv->cache_size) {
 80218c2:	68fb      	ldr	r3, [r7, #12]
 80218c4:	685b      	ldr	r3, [r3, #4]
 80218c6:	885b      	ldrh	r3, [r3, #2]
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d077      	beq.n	80219bc <lv_fs_seek+0x126>
        switch(whence) {
 80218cc:	79fb      	ldrb	r3, [r7, #7]
 80218ce:	2b02      	cmp	r3, #2
 80218d0:	d051      	beq.n	8021976 <lv_fs_seek+0xe0>
 80218d2:	2b02      	cmp	r3, #2
 80218d4:	f300 8084 	bgt.w	80219e0 <lv_fs_seek+0x14a>
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d002      	beq.n	80218e2 <lv_fs_seek+0x4c>
 80218dc:	2b01      	cmp	r3, #1
 80218de:	d023      	beq.n	8021928 <lv_fs_seek+0x92>
 80218e0:	e07e      	b.n	80219e0 <lv_fs_seek+0x14a>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 80218e2:	68fb      	ldr	r3, [r7, #12]
 80218e4:	689b      	ldr	r3, [r3, #8]
 80218e6:	68ba      	ldr	r2, [r7, #8]
 80218e8:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 80218ea:	68fb      	ldr	r3, [r7, #12]
 80218ec:	689b      	ldr	r3, [r3, #8]
 80218ee:	689a      	ldr	r2, [r3, #8]
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	689b      	ldr	r3, [r3, #8]
 80218f4:	681b      	ldr	r3, [r3, #0]
 80218f6:	429a      	cmp	r2, r3
 80218f8:	d307      	bcc.n	802190a <lv_fs_seek+0x74>
 80218fa:	68fb      	ldr	r3, [r7, #12]
 80218fc:	689b      	ldr	r3, [r3, #8]
 80218fe:	689a      	ldr	r2, [r3, #8]
 8021900:	68fb      	ldr	r3, [r7, #12]
 8021902:	689b      	ldr	r3, [r3, #8]
 8021904:	685b      	ldr	r3, [r3, #4]
 8021906:	429a      	cmp	r2, r3
 8021908:	d965      	bls.n	80219d6 <lv_fs_seek+0x140>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 802190a:	68fb      	ldr	r3, [r7, #12]
 802190c:	685b      	ldr	r3, [r3, #4]
 802190e:	699c      	ldr	r4, [r3, #24]
 8021910:	68fb      	ldr	r3, [r7, #12]
 8021912:	6858      	ldr	r0, [r3, #4]
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	6819      	ldr	r1, [r3, #0]
 8021918:	68fb      	ldr	r3, [r7, #12]
 802191a:	689b      	ldr	r3, [r3, #8]
 802191c:	689a      	ldr	r2, [r3, #8]
 802191e:	2300      	movs	r3, #0
 8021920:	47a0      	blx	r4
 8021922:	4603      	mov	r3, r0
 8021924:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 8021926:	e056      	b.n	80219d6 <lv_fs_seek+0x140>
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 8021928:	68fb      	ldr	r3, [r7, #12]
 802192a:	689b      	ldr	r3, [r3, #8]
 802192c:	6899      	ldr	r1, [r3, #8]
 802192e:	68fb      	ldr	r3, [r7, #12]
 8021930:	689b      	ldr	r3, [r3, #8]
 8021932:	68ba      	ldr	r2, [r7, #8]
 8021934:	440a      	add	r2, r1
 8021936:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8021938:	68fb      	ldr	r3, [r7, #12]
 802193a:	689b      	ldr	r3, [r3, #8]
 802193c:	689a      	ldr	r2, [r3, #8]
 802193e:	68fb      	ldr	r3, [r7, #12]
 8021940:	689b      	ldr	r3, [r3, #8]
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	429a      	cmp	r2, r3
 8021946:	d307      	bcc.n	8021958 <lv_fs_seek+0xc2>
 8021948:	68fb      	ldr	r3, [r7, #12]
 802194a:	689b      	ldr	r3, [r3, #8]
 802194c:	689a      	ldr	r2, [r3, #8]
 802194e:	68fb      	ldr	r3, [r7, #12]
 8021950:	689b      	ldr	r3, [r3, #8]
 8021952:	685b      	ldr	r3, [r3, #4]
 8021954:	429a      	cmp	r2, r3
 8021956:	d940      	bls.n	80219da <lv_fs_seek+0x144>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8021958:	68fb      	ldr	r3, [r7, #12]
 802195a:	685b      	ldr	r3, [r3, #4]
 802195c:	699c      	ldr	r4, [r3, #24]
 802195e:	68fb      	ldr	r3, [r7, #12]
 8021960:	6858      	ldr	r0, [r3, #4]
 8021962:	68fb      	ldr	r3, [r7, #12]
 8021964:	6819      	ldr	r1, [r3, #0]
 8021966:	68fb      	ldr	r3, [r7, #12]
 8021968:	689b      	ldr	r3, [r3, #8]
 802196a:	689a      	ldr	r2, [r3, #8]
 802196c:	2300      	movs	r3, #0
 802196e:	47a0      	blx	r4
 8021970:	4603      	mov	r3, r0
 8021972:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 8021974:	e031      	b.n	80219da <lv_fs_seek+0x144>
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8021976:	68fb      	ldr	r3, [r7, #12]
 8021978:	685b      	ldr	r3, [r3, #4]
 802197a:	699c      	ldr	r4, [r3, #24]
 802197c:	68fb      	ldr	r3, [r7, #12]
 802197e:	6858      	ldr	r0, [r3, #4]
 8021980:	68fb      	ldr	r3, [r7, #12]
 8021982:	6819      	ldr	r1, [r3, #0]
 8021984:	79fb      	ldrb	r3, [r7, #7]
 8021986:	68ba      	ldr	r2, [r7, #8]
 8021988:	47a0      	blx	r4
 802198a:	4603      	mov	r3, r0
 802198c:	75fb      	strb	r3, [r7, #23]
                    if(res == LV_FS_RES_OK) {
 802198e:	7dfb      	ldrb	r3, [r7, #23]
 8021990:	2b00      	cmp	r3, #0
 8021992:	d124      	bne.n	80219de <lv_fs_seek+0x148>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8021994:	68fb      	ldr	r3, [r7, #12]
 8021996:	685b      	ldr	r3, [r3, #4]
 8021998:	69db      	ldr	r3, [r3, #28]
 802199a:	68fa      	ldr	r2, [r7, #12]
 802199c:	6850      	ldr	r0, [r2, #4]
 802199e:	68fa      	ldr	r2, [r7, #12]
 80219a0:	6811      	ldr	r1, [r2, #0]
 80219a2:	f107 0210 	add.w	r2, r7, #16
 80219a6:	4798      	blx	r3
 80219a8:	4603      	mov	r3, r0
 80219aa:	75fb      	strb	r3, [r7, #23]

                        if(res == LV_FS_RES_OK) {
 80219ac:	7dfb      	ldrb	r3, [r7, #23]
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	d115      	bne.n	80219de <lv_fs_seek+0x148>
                            file_p->cache->file_position = tmp_position;
 80219b2:	68fb      	ldr	r3, [r7, #12]
 80219b4:	689b      	ldr	r3, [r3, #8]
 80219b6:	693a      	ldr	r2, [r7, #16]
 80219b8:	609a      	str	r2, [r3, #8]
                        }
                    }
                    break;
 80219ba:	e010      	b.n	80219de <lv_fs_seek+0x148>
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	685b      	ldr	r3, [r3, #4]
 80219c0:	699c      	ldr	r4, [r3, #24]
 80219c2:	68fb      	ldr	r3, [r7, #12]
 80219c4:	6858      	ldr	r0, [r3, #4]
 80219c6:	68fb      	ldr	r3, [r7, #12]
 80219c8:	6819      	ldr	r1, [r3, #0]
 80219ca:	79fb      	ldrb	r3, [r7, #7]
 80219cc:	68ba      	ldr	r2, [r7, #8]
 80219ce:	47a0      	blx	r4
 80219d0:	4603      	mov	r3, r0
 80219d2:	75fb      	strb	r3, [r7, #23]
 80219d4:	e004      	b.n	80219e0 <lv_fs_seek+0x14a>
                    break;
 80219d6:	bf00      	nop
 80219d8:	e002      	b.n	80219e0 <lv_fs_seek+0x14a>
                    break;
 80219da:	bf00      	nop
 80219dc:	e000      	b.n	80219e0 <lv_fs_seek+0x14a>
                    break;
 80219de:	bf00      	nop
    }

    return res;
 80219e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80219e2:	4618      	mov	r0, r3
 80219e4:	371c      	adds	r7, #28
 80219e6:	46bd      	mov	sp, r7
 80219e8:	bd90      	pop	{r4, r7, pc}
	...

080219ec <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 80219ec:	b580      	push	{r7, lr}
 80219ee:	b084      	sub	sp, #16
 80219f0:	af00      	add	r7, sp, #0
 80219f2:	4603      	mov	r3, r0
 80219f4:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 80219f6:	480d      	ldr	r0, [pc, #52]	; (8021a2c <lv_fs_get_drv+0x40>)
 80219f8:	f000 f93d 	bl	8021c76 <_lv_ll_get_head>
 80219fc:	60f8      	str	r0, [r7, #12]
 80219fe:	e00d      	b.n	8021a1c <lv_fs_get_drv+0x30>
        if((*drv)->letter == letter) {
 8021a00:	68fb      	ldr	r3, [r7, #12]
 8021a02:	681b      	ldr	r3, [r3, #0]
 8021a04:	781b      	ldrb	r3, [r3, #0]
 8021a06:	79fa      	ldrb	r2, [r7, #7]
 8021a08:	429a      	cmp	r2, r3
 8021a0a:	d102      	bne.n	8021a12 <lv_fs_get_drv+0x26>
            return *drv;
 8021a0c:	68fb      	ldr	r3, [r7, #12]
 8021a0e:	681b      	ldr	r3, [r3, #0]
 8021a10:	e008      	b.n	8021a24 <lv_fs_get_drv+0x38>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8021a12:	68f9      	ldr	r1, [r7, #12]
 8021a14:	4805      	ldr	r0, [pc, #20]	; (8021a2c <lv_fs_get_drv+0x40>)
 8021a16:	f000 f950 	bl	8021cba <_lv_ll_get_next>
 8021a1a:	60f8      	str	r0, [r7, #12]
 8021a1c:	68fb      	ldr	r3, [r7, #12]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d1ee      	bne.n	8021a00 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 8021a22:	2300      	movs	r3, #0
}
 8021a24:	4618      	mov	r0, r3
 8021a26:	3710      	adds	r7, #16
 8021a28:	46bd      	mov	sp, r7
 8021a2a:	bd80      	pop	{r7, pc}
 8021a2c:	20000870 	.word	0x20000870

08021a30 <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 8021a30:	b580      	push	{r7, lr}
 8021a32:	b084      	sub	sp, #16
 8021a34:	af00      	add	r7, sp, #0
 8021a36:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 8021a38:	6878      	ldr	r0, [r7, #4]
 8021a3a:	f7de fc07 	bl	800024c <strlen>
 8021a3e:	60f8      	str	r0, [r7, #12]
 8021a40:	e01b      	b.n	8021a7a <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 8021a42:	687a      	ldr	r2, [r7, #4]
 8021a44:	68fb      	ldr	r3, [r7, #12]
 8021a46:	4413      	add	r3, r2
 8021a48:	781b      	ldrb	r3, [r3, #0]
 8021a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8021a4c:	d104      	bne.n	8021a58 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 8021a4e:	68fb      	ldr	r3, [r7, #12]
 8021a50:	3301      	adds	r3, #1
 8021a52:	687a      	ldr	r2, [r7, #4]
 8021a54:	4413      	add	r3, r2
 8021a56:	e014      	b.n	8021a82 <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 8021a58:	687a      	ldr	r2, [r7, #4]
 8021a5a:	68fb      	ldr	r3, [r7, #12]
 8021a5c:	4413      	add	r3, r2
 8021a5e:	781b      	ldrb	r3, [r3, #0]
 8021a60:	2b2f      	cmp	r3, #47	; 0x2f
 8021a62:	d005      	beq.n	8021a70 <lv_fs_get_ext+0x40>
 8021a64:	687a      	ldr	r2, [r7, #4]
 8021a66:	68fb      	ldr	r3, [r7, #12]
 8021a68:	4413      	add	r3, r2
 8021a6a:	781b      	ldrb	r3, [r3, #0]
 8021a6c:	2b5c      	cmp	r3, #92	; 0x5c
 8021a6e:	d101      	bne.n	8021a74 <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 8021a70:	4b06      	ldr	r3, [pc, #24]	; (8021a8c <lv_fs_get_ext+0x5c>)
 8021a72:	e006      	b.n	8021a82 <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 8021a74:	68fb      	ldr	r3, [r7, #12]
 8021a76:	3b01      	subs	r3, #1
 8021a78:	60fb      	str	r3, [r7, #12]
 8021a7a:	68fb      	ldr	r3, [r7, #12]
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d1e0      	bne.n	8021a42 <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
 8021a80:	4b02      	ldr	r3, [pc, #8]	; (8021a8c <lv_fs_get_ext+0x5c>)
}
 8021a82:	4618      	mov	r0, r3
 8021a84:	3710      	adds	r7, #16
 8021a86:	46bd      	mov	sp, r7
 8021a88:	bd80      	pop	{r7, pc}
 8021a8a:	bf00      	nop
 8021a8c:	08026a04 	.word	0x08026a04

08021a90 <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 8021a90:	b480      	push	{r7}
 8021a92:	b083      	sub	sp, #12
 8021a94:	af00      	add	r7, sp, #0
 8021a96:	6078      	str	r0, [r7, #4]
    path++; /*Ignore the driver letter*/
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	3301      	adds	r3, #1
 8021a9c:	607b      	str	r3, [r7, #4]
    if(*path == ':') path++;
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	781b      	ldrb	r3, [r3, #0]
 8021aa2:	2b3a      	cmp	r3, #58	; 0x3a
 8021aa4:	d102      	bne.n	8021aac <lv_fs_get_real_path+0x1c>
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	3301      	adds	r3, #1
 8021aaa:	607b      	str	r3, [r7, #4]

    return path;
 8021aac:	687b      	ldr	r3, [r7, #4]
}
 8021aae:	4618      	mov	r0, r3
 8021ab0:	370c      	adds	r7, #12
 8021ab2:	46bd      	mov	sp, r7
 8021ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ab8:	4770      	bx	lr

08021aba <_lv_ll_init>:
 * Initialize linked list
 * @param ll_p pointer to lv_ll_t variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 8021aba:	b480      	push	{r7}
 8021abc:	b083      	sub	sp, #12
 8021abe:	af00      	add	r7, sp, #0
 8021ac0:	6078      	str	r0, [r7, #4]
 8021ac2:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 8021ac4:	687b      	ldr	r3, [r7, #4]
 8021ac6:	2200      	movs	r2, #0
 8021ac8:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	2200      	movs	r2, #0
 8021ace:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 8021ad0:	683b      	ldr	r3, [r7, #0]
 8021ad2:	3303      	adds	r3, #3
 8021ad4:	f023 0303 	bic.w	r3, r3, #3
 8021ad8:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 8021ada:	687b      	ldr	r3, [r7, #4]
 8021adc:	683a      	ldr	r2, [r7, #0]
 8021ade:	601a      	str	r2, [r3, #0]
}
 8021ae0:	bf00      	nop
 8021ae2:	370c      	adds	r7, #12
 8021ae4:	46bd      	mov	sp, r7
 8021ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021aea:	4770      	bx	lr

08021aec <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 8021aec:	b580      	push	{r7, lr}
 8021aee:	b084      	sub	sp, #16
 8021af0:	af00      	add	r7, sp, #0
 8021af2:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	681b      	ldr	r3, [r3, #0]
 8021af8:	3308      	adds	r3, #8
 8021afa:	4618      	mov	r0, r3
 8021afc:	f000 fa7a 	bl	8021ff4 <lv_mem_alloc>
 8021b00:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8021b02:	68fb      	ldr	r3, [r7, #12]
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d020      	beq.n	8021b4a <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8021b08:	2200      	movs	r2, #0
 8021b0a:	68f9      	ldr	r1, [r7, #12]
 8021b0c:	6878      	ldr	r0, [r7, #4]
 8021b0e:	f000 f917 	bl	8021d40 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	685b      	ldr	r3, [r3, #4]
 8021b16:	461a      	mov	r2, r3
 8021b18:	68f9      	ldr	r1, [r7, #12]
 8021b1a:	6878      	ldr	r0, [r7, #4]
 8021b1c:	f000 f92f 	bl	8021d7e <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	685b      	ldr	r3, [r3, #4]
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d006      	beq.n	8021b36 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	685b      	ldr	r3, [r3, #4]
 8021b2c:	68fa      	ldr	r2, [r7, #12]
 8021b2e:	4619      	mov	r1, r3
 8021b30:	6878      	ldr	r0, [r7, #4]
 8021b32:	f000 f905 	bl	8021d40 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8021b36:	687b      	ldr	r3, [r7, #4]
 8021b38:	68fa      	ldr	r2, [r7, #12]
 8021b3a:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	689b      	ldr	r3, [r3, #8]
 8021b40:	2b00      	cmp	r3, #0
 8021b42:	d102      	bne.n	8021b4a <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	68fa      	ldr	r2, [r7, #12]
 8021b48:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 8021b4a:	68fb      	ldr	r3, [r7, #12]
}
 8021b4c:	4618      	mov	r0, r3
 8021b4e:	3710      	adds	r7, #16
 8021b50:	46bd      	mov	sp, r7
 8021b52:	bd80      	pop	{r7, pc}

08021b54 <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 8021b54:	b580      	push	{r7, lr}
 8021b56:	b084      	sub	sp, #16
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	681b      	ldr	r3, [r3, #0]
 8021b60:	3308      	adds	r3, #8
 8021b62:	4618      	mov	r0, r3
 8021b64:	f000 fa46 	bl	8021ff4 <lv_mem_alloc>
 8021b68:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8021b6a:	68fb      	ldr	r3, [r7, #12]
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d020      	beq.n	8021bb2 <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8021b70:	2200      	movs	r2, #0
 8021b72:	68f9      	ldr	r1, [r7, #12]
 8021b74:	6878      	ldr	r0, [r7, #4]
 8021b76:	f000 f902 	bl	8021d7e <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	689b      	ldr	r3, [r3, #8]
 8021b7e:	461a      	mov	r2, r3
 8021b80:	68f9      	ldr	r1, [r7, #12]
 8021b82:	6878      	ldr	r0, [r7, #4]
 8021b84:	f000 f8dc 	bl	8021d40 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	689b      	ldr	r3, [r3, #8]
 8021b8c:	2b00      	cmp	r3, #0
 8021b8e:	d006      	beq.n	8021b9e <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	689b      	ldr	r3, [r3, #8]
 8021b94:	68fa      	ldr	r2, [r7, #12]
 8021b96:	4619      	mov	r1, r3
 8021b98:	6878      	ldr	r0, [r7, #4]
 8021b9a:	f000 f8f0 	bl	8021d7e <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	68fa      	ldr	r2, [r7, #12]
 8021ba2:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	685b      	ldr	r3, [r3, #4]
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d102      	bne.n	8021bb2 <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	68fa      	ldr	r2, [r7, #12]
 8021bb0:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 8021bb2:	68fb      	ldr	r3, [r7, #12]
}
 8021bb4:	4618      	mov	r0, r3
 8021bb6:	3710      	adds	r7, #16
 8021bb8:	46bd      	mov	sp, r7
 8021bba:	bd80      	pop	{r7, pc}

08021bbc <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 8021bbc:	b580      	push	{r7, lr}
 8021bbe:	b084      	sub	sp, #16
 8021bc0:	af00      	add	r7, sp, #0
 8021bc2:	6078      	str	r0, [r7, #4]
 8021bc4:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return;
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	d050      	beq.n	8021c6e <_lv_ll_remove+0xb2>

    if(_lv_ll_get_head(ll_p) == node_p) {
 8021bcc:	6878      	ldr	r0, [r7, #4]
 8021bce:	f000 f852 	bl	8021c76 <_lv_ll_get_head>
 8021bd2:	4602      	mov	r2, r0
 8021bd4:	683b      	ldr	r3, [r7, #0]
 8021bd6:	4293      	cmp	r3, r2
 8021bd8:	d116      	bne.n	8021c08 <_lv_ll_remove+0x4c>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8021bda:	6839      	ldr	r1, [r7, #0]
 8021bdc:	6878      	ldr	r0, [r7, #4]
 8021bde:	f000 f86c 	bl	8021cba <_lv_ll_get_next>
 8021be2:	4602      	mov	r2, r0
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	685b      	ldr	r3, [r3, #4]
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	d103      	bne.n	8021bf8 <_lv_ll_remove+0x3c>
            ll_p->tail = NULL;
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	2200      	movs	r2, #0
 8021bf4:	609a      	str	r2, [r3, #8]
 8021bf6:	e03b      	b.n	8021c70 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_prev(ll_p, ll_p->head, NULL);
 8021bf8:	687b      	ldr	r3, [r7, #4]
 8021bfa:	685b      	ldr	r3, [r3, #4]
 8021bfc:	2200      	movs	r2, #0
 8021bfe:	4619      	mov	r1, r3
 8021c00:	6878      	ldr	r0, [r7, #4]
 8021c02:	f000 f89d 	bl	8021d40 <node_set_prev>
 8021c06:	e033      	b.n	8021c70 <_lv_ll_remove+0xb4>
        }
    }
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8021c08:	6878      	ldr	r0, [r7, #4]
 8021c0a:	f000 f845 	bl	8021c98 <_lv_ll_get_tail>
 8021c0e:	4602      	mov	r2, r0
 8021c10:	683b      	ldr	r3, [r7, #0]
 8021c12:	4293      	cmp	r3, r2
 8021c14:	d116      	bne.n	8021c44 <_lv_ll_remove+0x88>
        /*The new tail will be the node before 'n_act'*/
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8021c16:	6839      	ldr	r1, [r7, #0]
 8021c18:	6878      	ldr	r0, [r7, #4]
 8021c1a:	f000 f863 	bl	8021ce4 <_lv_ll_get_prev>
 8021c1e:	4602      	mov	r2, r0
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	689b      	ldr	r3, [r3, #8]
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d103      	bne.n	8021c34 <_lv_ll_remove+0x78>
            ll_p->head = NULL;
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	2200      	movs	r2, #0
 8021c30:	605a      	str	r2, [r3, #4]
 8021c32:	e01d      	b.n	8021c70 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_next(ll_p, ll_p->tail, NULL);
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	689b      	ldr	r3, [r3, #8]
 8021c38:	2200      	movs	r2, #0
 8021c3a:	4619      	mov	r1, r3
 8021c3c:	6878      	ldr	r0, [r7, #4]
 8021c3e:	f000 f89e 	bl	8021d7e <node_set_next>
 8021c42:	e015      	b.n	8021c70 <_lv_ll_remove+0xb4>
        }
    }
    else {
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 8021c44:	6839      	ldr	r1, [r7, #0]
 8021c46:	6878      	ldr	r0, [r7, #4]
 8021c48:	f000 f84c 	bl	8021ce4 <_lv_ll_get_prev>
 8021c4c:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 8021c4e:	6839      	ldr	r1, [r7, #0]
 8021c50:	6878      	ldr	r0, [r7, #4]
 8021c52:	f000 f832 	bl	8021cba <_lv_ll_get_next>
 8021c56:	60b8      	str	r0, [r7, #8]

        node_set_next(ll_p, n_prev, n_next);
 8021c58:	68ba      	ldr	r2, [r7, #8]
 8021c5a:	68f9      	ldr	r1, [r7, #12]
 8021c5c:	6878      	ldr	r0, [r7, #4]
 8021c5e:	f000 f88e 	bl	8021d7e <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8021c62:	68fa      	ldr	r2, [r7, #12]
 8021c64:	68b9      	ldr	r1, [r7, #8]
 8021c66:	6878      	ldr	r0, [r7, #4]
 8021c68:	f000 f86a 	bl	8021d40 <node_set_prev>
 8021c6c:	e000      	b.n	8021c70 <_lv_ll_remove+0xb4>
    if(ll_p == NULL) return;
 8021c6e:	bf00      	nop
    }
}
 8021c70:	3710      	adds	r7, #16
 8021c72:	46bd      	mov	sp, r7
 8021c74:	bd80      	pop	{r7, pc}

08021c76 <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 8021c76:	b480      	push	{r7}
 8021c78:	b083      	sub	sp, #12
 8021c7a:	af00      	add	r7, sp, #0
 8021c7c:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 8021c7e:	687b      	ldr	r3, [r7, #4]
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d101      	bne.n	8021c88 <_lv_ll_get_head+0x12>
 8021c84:	2300      	movs	r3, #0
 8021c86:	e001      	b.n	8021c8c <_lv_ll_get_head+0x16>
    return ll_p->head;
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	685b      	ldr	r3, [r3, #4]
}
 8021c8c:	4618      	mov	r0, r3
 8021c8e:	370c      	adds	r7, #12
 8021c90:	46bd      	mov	sp, r7
 8021c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c96:	4770      	bx	lr

08021c98 <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the tail of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 8021c98:	b480      	push	{r7}
 8021c9a:	b083      	sub	sp, #12
 8021c9c:	af00      	add	r7, sp, #0
 8021c9e:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	2b00      	cmp	r3, #0
 8021ca4:	d101      	bne.n	8021caa <_lv_ll_get_tail+0x12>
 8021ca6:	2300      	movs	r3, #0
 8021ca8:	e001      	b.n	8021cae <_lv_ll_get_tail+0x16>
    return ll_p->tail;
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	689b      	ldr	r3, [r3, #8]
}
 8021cae:	4618      	mov	r0, r3
 8021cb0:	370c      	adds	r7, #12
 8021cb2:	46bd      	mov	sp, r7
 8021cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cb8:	4770      	bx	lr

08021cba <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 8021cba:	b480      	push	{r7}
 8021cbc:	b085      	sub	sp, #20
 8021cbe:	af00      	add	r7, sp, #0
 8021cc0:	6078      	str	r0, [r7, #4]
 8021cc2:	6039      	str	r1, [r7, #0]
    /*Pointer to the next node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 8021cc4:	683b      	ldr	r3, [r7, #0]
 8021cc6:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8021cc8:	687b      	ldr	r3, [r7, #4]
 8021cca:	681b      	ldr	r3, [r3, #0]
 8021ccc:	3304      	adds	r3, #4
 8021cce:	68fa      	ldr	r2, [r7, #12]
 8021cd0:	4413      	add	r3, r2
 8021cd2:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8021cd4:	68fb      	ldr	r3, [r7, #12]
 8021cd6:	681b      	ldr	r3, [r3, #0]
}
 8021cd8:	4618      	mov	r0, r3
 8021cda:	3714      	adds	r7, #20
 8021cdc:	46bd      	mov	sp, r7
 8021cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ce2:	4770      	bx	lr

08021ce4 <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 8021ce4:	b480      	push	{r7}
 8021ce6:	b085      	sub	sp, #20
 8021ce8:	af00      	add	r7, sp, #0
 8021cea:	6078      	str	r0, [r7, #4]
 8021cec:	6039      	str	r1, [r7, #0]
    /*Pointer to the prev. node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 8021cee:	683b      	ldr	r3, [r7, #0]
 8021cf0:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	681b      	ldr	r3, [r3, #0]
 8021cf6:	68fa      	ldr	r2, [r7, #12]
 8021cf8:	4413      	add	r3, r2
 8021cfa:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8021cfc:	68fb      	ldr	r3, [r7, #12]
 8021cfe:	681b      	ldr	r3, [r3, #0]
}
 8021d00:	4618      	mov	r0, r3
 8021d02:	3714      	adds	r7, #20
 8021d04:	46bd      	mov	sp, r7
 8021d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d0a:	4770      	bx	lr

08021d0c <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 8021d0c:	b480      	push	{r7}
 8021d0e:	b083      	sub	sp, #12
 8021d10:	af00      	add	r7, sp, #0
 8021d12:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d101      	bne.n	8021d1e <_lv_ll_is_empty+0x12>
 8021d1a:	2301      	movs	r3, #1
 8021d1c:	e00a      	b.n	8021d34 <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	685b      	ldr	r3, [r3, #4]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d105      	bne.n	8021d32 <_lv_ll_is_empty+0x26>
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	689b      	ldr	r3, [r3, #8]
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d101      	bne.n	8021d32 <_lv_ll_is_empty+0x26>
 8021d2e:	2301      	movs	r3, #1
 8021d30:	e000      	b.n	8021d34 <_lv_ll_is_empty+0x28>

    return false;
 8021d32:	2300      	movs	r3, #0
}
 8021d34:	4618      	mov	r0, r3
 8021d36:	370c      	adds	r7, #12
 8021d38:	46bd      	mov	sp, r7
 8021d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d3e:	4770      	bx	lr

08021d40 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 8021d40:	b480      	push	{r7}
 8021d42:	b089      	sub	sp, #36	; 0x24
 8021d44:	af00      	add	r7, sp, #0
 8021d46:	60f8      	str	r0, [r7, #12]
 8021d48:	60b9      	str	r1, [r7, #8]
 8021d4a:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8021d4c:	68bb      	ldr	r3, [r7, #8]
 8021d4e:	2b00      	cmp	r3, #0
 8021d50:	d00f      	beq.n	8021d72 <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *)act;
 8021d52:	68bb      	ldr	r3, [r7, #8]
 8021d54:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 8021d56:	68fb      	ldr	r3, [r7, #12]
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	69fa      	ldr	r2, [r7, #28]
 8021d5c:	4413      	add	r3, r2
 8021d5e:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 8021d60:	69fb      	ldr	r3, [r7, #28]
 8021d62:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 8021d64:	1d3b      	adds	r3, r7, #4
 8021d66:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 8021d68:	697b      	ldr	r3, [r7, #20]
 8021d6a:	681a      	ldr	r2, [r3, #0]
 8021d6c:	69bb      	ldr	r3, [r7, #24]
 8021d6e:	601a      	str	r2, [r3, #0]
 8021d70:	e000      	b.n	8021d74 <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8021d72:	bf00      	nop
}
 8021d74:	3724      	adds	r7, #36	; 0x24
 8021d76:	46bd      	mov	sp, r7
 8021d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d7c:	4770      	bx	lr

08021d7e <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 8021d7e:	b480      	push	{r7}
 8021d80:	b089      	sub	sp, #36	; 0x24
 8021d82:	af00      	add	r7, sp, #0
 8021d84:	60f8      	str	r0, [r7, #12]
 8021d86:	60b9      	str	r1, [r7, #8]
 8021d88:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8021d8a:	68bb      	ldr	r3, [r7, #8]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d010      	beq.n	8021db2 <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *)act;
 8021d90:	68bb      	ldr	r3, [r7, #8]
 8021d92:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 8021d94:	68fb      	ldr	r3, [r7, #12]
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	3304      	adds	r3, #4
 8021d9a:	69fa      	ldr	r2, [r7, #28]
 8021d9c:	4413      	add	r3, r2
 8021d9e:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 8021da0:	69fb      	ldr	r3, [r7, #28]
 8021da2:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 8021da4:	1d3b      	adds	r3, r7, #4
 8021da6:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 8021da8:	697b      	ldr	r3, [r7, #20]
 8021daa:	681a      	ldr	r2, [r3, #0]
 8021dac:	69bb      	ldr	r3, [r7, #24]
 8021dae:	601a      	str	r2, [r3, #0]
 8021db0:	e000      	b.n	8021db4 <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8021db2:	bf00      	nop
}
 8021db4:	3724      	adds	r7, #36	; 0x24
 8021db6:	46bd      	mov	sp, r7
 8021db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dbc:	4770      	bx	lr
	...

08021dc0 <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
 8021dc0:	b480      	push	{r7}
 8021dc2:	b085      	sub	sp, #20
 8021dc4:	af00      	add	r7, sp, #0
 8021dc6:	4603      	mov	r3, r0
 8021dc8:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 8021dca:	2300      	movs	r3, #0
 8021dcc:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 8021dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021dd2:	4a31      	ldr	r2, [pc, #196]	; (8021e98 <lv_trigo_sin+0xd8>)
 8021dd4:	fb82 1203 	smull	r1, r2, r2, r3
 8021dd8:	441a      	add	r2, r3
 8021dda:	1211      	asrs	r1, r2, #8
 8021ddc:	17da      	asrs	r2, r3, #31
 8021dde:	1a8a      	subs	r2, r1, r2
 8021de0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8021de4:	fb01 f202 	mul.w	r2, r1, r2
 8021de8:	1a9b      	subs	r3, r3, r2
 8021dea:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 8021dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	da04      	bge.n	8021dfe <lv_trigo_sin+0x3e>
 8021df4:	88fb      	ldrh	r3, [r7, #6]
 8021df6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8021dfa:	b29b      	uxth	r3, r3
 8021dfc:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 8021dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e02:	2b59      	cmp	r3, #89	; 0x59
 8021e04:	dc06      	bgt.n	8021e14 <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 8021e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e0a:	4a24      	ldr	r2, [pc, #144]	; (8021e9c <lv_trigo_sin+0xdc>)
 8021e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021e10:	81fb      	strh	r3, [r7, #14]
 8021e12:	e038      	b.n	8021e86 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 8021e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e18:	2b59      	cmp	r3, #89	; 0x59
 8021e1a:	dd0f      	ble.n	8021e3c <lv_trigo_sin+0x7c>
 8021e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e20:	2bb3      	cmp	r3, #179	; 0xb3
 8021e22:	dc0b      	bgt.n	8021e3c <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 8021e24:	88fb      	ldrh	r3, [r7, #6]
 8021e26:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8021e2a:	b29b      	uxth	r3, r3
 8021e2c:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 8021e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e32:	4a1a      	ldr	r2, [pc, #104]	; (8021e9c <lv_trigo_sin+0xdc>)
 8021e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021e38:	81fb      	strh	r3, [r7, #14]
 8021e3a:	e024      	b.n	8021e86 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 8021e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e40:	2bb3      	cmp	r3, #179	; 0xb3
 8021e42:	dd12      	ble.n	8021e6a <lv_trigo_sin+0xaa>
 8021e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e48:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8021e4c:	da0d      	bge.n	8021e6a <lv_trigo_sin+0xaa>
        angle = angle - 180;
 8021e4e:	88fb      	ldrh	r3, [r7, #6]
 8021e50:	3bb4      	subs	r3, #180	; 0xb4
 8021e52:	b29b      	uxth	r3, r3
 8021e54:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8021e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e5a:	4a10      	ldr	r2, [pc, #64]	; (8021e9c <lv_trigo_sin+0xdc>)
 8021e5c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8021e60:	b29b      	uxth	r3, r3
 8021e62:	425b      	negs	r3, r3
 8021e64:	b29b      	uxth	r3, r3
 8021e66:	81fb      	strh	r3, [r7, #14]
 8021e68:	e00d      	b.n	8021e86 <lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8021e6a:	88fb      	ldrh	r3, [r7, #6]
 8021e6c:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8021e70:	b29b      	uxth	r3, r3
 8021e72:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8021e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021e78:	4a08      	ldr	r2, [pc, #32]	; (8021e9c <lv_trigo_sin+0xdc>)
 8021e7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8021e7e:	b29b      	uxth	r3, r3
 8021e80:	425b      	negs	r3, r3
 8021e82:	b29b      	uxth	r3, r3
 8021e84:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8021e86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8021e8a:	4618      	mov	r0, r3
 8021e8c:	3714      	adds	r7, #20
 8021e8e:	46bd      	mov	sp, r7
 8021e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e94:	4770      	bx	lr
 8021e96:	bf00      	nop
 8021e98:	b60b60b7 	.word	0xb60b60b7
 8021e9c:	0802dbc8 	.word	0x0802dbc8

08021ea0 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8021ea0:	b480      	push	{r7}
 8021ea2:	b08f      	sub	sp, #60	; 0x3c
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	60f8      	str	r0, [r7, #12]
 8021ea8:	60b9      	str	r1, [r7, #8]
 8021eaa:	607a      	str	r2, [r7, #4]
 8021eac:	603b      	str	r3, [r7, #0]
    uint32_t t_rem  = 1024 - t;
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8021eb4:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8021eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021eb8:	fb03 f303 	mul.w	r3, r3, r3
 8021ebc:	0a9b      	lsrs	r3, r3, #10
 8021ebe:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8021ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021ec4:	fb02 f303 	mul.w	r3, r2, r3
 8021ec8:	0a9b      	lsrs	r3, r3, #10
 8021eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t t2     = (t * t) >> 10;
 8021ecc:	68fb      	ldr	r3, [r7, #12]
 8021ece:	fb03 f303 	mul.w	r3, r3, r3
 8021ed2:	0a9b      	lsrs	r3, r3, #10
 8021ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t t3     = (t2 * t) >> 10;
 8021ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ed8:	68fa      	ldr	r2, [r7, #12]
 8021eda:	fb02 f303 	mul.w	r3, r2, r3
 8021ede:	0a9b      	lsrs	r3, r3, #10
 8021ee0:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t v1 = (t_rem3 * u0) >> 10;
 8021ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ee4:	68ba      	ldr	r2, [r7, #8]
 8021ee6:	fb02 f303 	mul.w	r3, r2, r3
 8021eea:	0a9b      	lsrs	r3, r3, #10
 8021eec:	623b      	str	r3, [r7, #32]
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8021eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ef0:	68fa      	ldr	r2, [r7, #12]
 8021ef2:	fb02 f303 	mul.w	r3, r2, r3
 8021ef6:	687a      	ldr	r2, [r7, #4]
 8021ef8:	fb03 f202 	mul.w	r2, r3, r2
 8021efc:	4613      	mov	r3, r2
 8021efe:	005b      	lsls	r3, r3, #1
 8021f00:	4413      	add	r3, r2
 8021f02:	0d1b      	lsrs	r3, r3, #20
 8021f04:	61fb      	str	r3, [r7, #28]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8021f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021f0a:	fb02 f303 	mul.w	r3, r2, r3
 8021f0e:	683a      	ldr	r2, [r7, #0]
 8021f10:	fb03 f202 	mul.w	r2, r3, r2
 8021f14:	4613      	mov	r3, r2
 8021f16:	005b      	lsls	r3, r3, #1
 8021f18:	4413      	add	r3, r2
 8021f1a:	0d1b      	lsrs	r3, r3, #20
 8021f1c:	61bb      	str	r3, [r7, #24]
    uint32_t v4 = (t3 * u3) >> 10;
 8021f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021f22:	fb02 f303 	mul.w	r3, r2, r3
 8021f26:	0a9b      	lsrs	r3, r3, #10
 8021f28:	617b      	str	r3, [r7, #20]

    return v1 + v2 + v3 + v4;
 8021f2a:	6a3a      	ldr	r2, [r7, #32]
 8021f2c:	69fb      	ldr	r3, [r7, #28]
 8021f2e:	441a      	add	r2, r3
 8021f30:	69bb      	ldr	r3, [r7, #24]
 8021f32:	441a      	add	r2, r3
 8021f34:	697b      	ldr	r3, [r7, #20]
 8021f36:	4413      	add	r3, r2
}
 8021f38:	4618      	mov	r0, r3
 8021f3a:	373c      	adds	r7, #60	; 0x3c
 8021f3c:	46bd      	mov	sp, r7
 8021f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f42:	4770      	bx	lr

08021f44 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8021f44:	b480      	push	{r7}
 8021f46:	b087      	sub	sp, #28
 8021f48:	af00      	add	r7, sp, #0
 8021f4a:	60f8      	str	r0, [r7, #12]
 8021f4c:	60b9      	str	r1, [r7, #8]
 8021f4e:	607a      	str	r2, [r7, #4]
 8021f50:	603b      	str	r3, [r7, #0]
    if(max_in >= min_in && x >= max_in) return max_out;
 8021f52:	687a      	ldr	r2, [r7, #4]
 8021f54:	68bb      	ldr	r3, [r7, #8]
 8021f56:	429a      	cmp	r2, r3
 8021f58:	db05      	blt.n	8021f66 <lv_map+0x22>
 8021f5a:	68fa      	ldr	r2, [r7, #12]
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	429a      	cmp	r2, r3
 8021f60:	db01      	blt.n	8021f66 <lv_map+0x22>
 8021f62:	6a3b      	ldr	r3, [r7, #32]
 8021f64:	e030      	b.n	8021fc8 <lv_map+0x84>
    if(max_in >= min_in && x <= min_in) return min_out;
 8021f66:	687a      	ldr	r2, [r7, #4]
 8021f68:	68bb      	ldr	r3, [r7, #8]
 8021f6a:	429a      	cmp	r2, r3
 8021f6c:	db05      	blt.n	8021f7a <lv_map+0x36>
 8021f6e:	68fa      	ldr	r2, [r7, #12]
 8021f70:	68bb      	ldr	r3, [r7, #8]
 8021f72:	429a      	cmp	r2, r3
 8021f74:	dc01      	bgt.n	8021f7a <lv_map+0x36>
 8021f76:	683b      	ldr	r3, [r7, #0]
 8021f78:	e026      	b.n	8021fc8 <lv_map+0x84>

    if(max_in <= min_in && x <= max_in) return max_out;
 8021f7a:	687a      	ldr	r2, [r7, #4]
 8021f7c:	68bb      	ldr	r3, [r7, #8]
 8021f7e:	429a      	cmp	r2, r3
 8021f80:	dc05      	bgt.n	8021f8e <lv_map+0x4a>
 8021f82:	68fa      	ldr	r2, [r7, #12]
 8021f84:	687b      	ldr	r3, [r7, #4]
 8021f86:	429a      	cmp	r2, r3
 8021f88:	dc01      	bgt.n	8021f8e <lv_map+0x4a>
 8021f8a:	6a3b      	ldr	r3, [r7, #32]
 8021f8c:	e01c      	b.n	8021fc8 <lv_map+0x84>
    if(max_in <= min_in && x >= min_in) return min_out;
 8021f8e:	687a      	ldr	r2, [r7, #4]
 8021f90:	68bb      	ldr	r3, [r7, #8]
 8021f92:	429a      	cmp	r2, r3
 8021f94:	dc05      	bgt.n	8021fa2 <lv_map+0x5e>
 8021f96:	68fa      	ldr	r2, [r7, #12]
 8021f98:	68bb      	ldr	r3, [r7, #8]
 8021f9a:	429a      	cmp	r2, r3
 8021f9c:	db01      	blt.n	8021fa2 <lv_map+0x5e>
 8021f9e:	683b      	ldr	r3, [r7, #0]
 8021fa0:	e012      	b.n	8021fc8 <lv_map+0x84>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 8021fa2:	687a      	ldr	r2, [r7, #4]
 8021fa4:	68bb      	ldr	r3, [r7, #8]
 8021fa6:	1ad3      	subs	r3, r2, r3
 8021fa8:	617b      	str	r3, [r7, #20]
    int32_t delta_out = max_out - min_out;
 8021faa:	6a3a      	ldr	r2, [r7, #32]
 8021fac:	683b      	ldr	r3, [r7, #0]
 8021fae:	1ad3      	subs	r3, r2, r3
 8021fb0:	613b      	str	r3, [r7, #16]

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021fb2:	68fa      	ldr	r2, [r7, #12]
 8021fb4:	68bb      	ldr	r3, [r7, #8]
 8021fb6:	1ad3      	subs	r3, r2, r3
 8021fb8:	693a      	ldr	r2, [r7, #16]
 8021fba:	fb03 f202 	mul.w	r2, r3, r2
 8021fbe:	697b      	ldr	r3, [r7, #20]
 8021fc0:	fb92 f2f3 	sdiv	r2, r2, r3
 8021fc4:	683b      	ldr	r3, [r7, #0]
 8021fc6:	4413      	add	r3, r2
}
 8021fc8:	4618      	mov	r0, r3
 8021fca:	371c      	adds	r7, #28
 8021fcc:	46bd      	mov	sp, r7
 8021fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fd2:	4770      	bx	lr

08021fd4 <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8021fd4:	b580      	push	{r7, lr}
 8021fd6:	af00      	add	r7, sp, #0
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8021fd8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8021fdc:	4803      	ldr	r0, [pc, #12]	; (8021fec <lv_mem_init+0x18>)
 8021fde:	f002 f950 	bl	8024282 <lv_tlsf_create_with_pool>
 8021fe2:	4603      	mov	r3, r0
 8021fe4:	4a02      	ldr	r2, [pc, #8]	; (8021ff0 <lv_mem_init+0x1c>)
 8021fe6:	6013      	str	r3, [r2, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 8021fe8:	bf00      	nop
 8021fea:	bd80      	pop	{r7, pc}
 8021fec:	20000a64 	.word	0x20000a64
 8021ff0:	20000a58 	.word	0x20000a58

08021ff4 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8021ff4:	b580      	push	{r7, lr}
 8021ff6:	b084      	sub	sp, #16
 8021ff8:	af00      	add	r7, sp, #0
 8021ffa:	6078      	str	r0, [r7, #4]
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	d101      	bne.n	8022006 <lv_mem_alloc+0x12>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 8022002:	4b10      	ldr	r3, [pc, #64]	; (8022044 <lv_mem_alloc+0x50>)
 8022004:	e019      	b.n	802203a <lv_mem_alloc+0x46>
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8022006:	4b10      	ldr	r3, [pc, #64]	; (8022048 <lv_mem_alloc+0x54>)
 8022008:	681b      	ldr	r3, [r3, #0]
 802200a:	6879      	ldr	r1, [r7, #4]
 802200c:	4618      	mov	r0, r3
 802200e:	f002 f955 	bl	80242bc <lv_tlsf_malloc>
 8022012:	60f8      	str	r0, [r7, #12]
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 8022014:	68fb      	ldr	r3, [r7, #12]
 8022016:	2b00      	cmp	r3, #0
 8022018:	d00e      	beq.n	8022038 <lv_mem_alloc+0x44>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 802201a:	4b0c      	ldr	r3, [pc, #48]	; (802204c <lv_mem_alloc+0x58>)
 802201c:	681a      	ldr	r2, [r3, #0]
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	4413      	add	r3, r2
 8022022:	4a0a      	ldr	r2, [pc, #40]	; (802204c <lv_mem_alloc+0x58>)
 8022024:	6013      	str	r3, [r2, #0]
        max_used = LV_MAX(cur_used, max_used);
 8022026:	4b0a      	ldr	r3, [pc, #40]	; (8022050 <lv_mem_alloc+0x5c>)
 8022028:	681a      	ldr	r2, [r3, #0]
 802202a:	4b08      	ldr	r3, [pc, #32]	; (802204c <lv_mem_alloc+0x58>)
 802202c:	681b      	ldr	r3, [r3, #0]
 802202e:	4293      	cmp	r3, r2
 8022030:	bf38      	it	cc
 8022032:	4613      	movcc	r3, r2
 8022034:	4a06      	ldr	r2, [pc, #24]	; (8022050 <lv_mem_alloc+0x5c>)
 8022036:	6013      	str	r3, [r2, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
 8022038:	68fb      	ldr	r3, [r7, #12]
}
 802203a:	4618      	mov	r0, r3
 802203c:	3710      	adds	r7, #16
 802203e:	46bd      	mov	sp, r7
 8022040:	bd80      	pop	{r7, pc}
 8022042:	bf00      	nop
 8022044:	20000014 	.word	0x20000014
 8022048:	20000a58 	.word	0x20000a58
 802204c:	20000a5c 	.word	0x20000a5c
 8022050:	20000a60 	.word	0x20000a60

08022054 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 8022054:	b580      	push	{r7, lr}
 8022056:	b084      	sub	sp, #16
 8022058:	af00      	add	r7, sp, #0
 802205a:	6078      	str	r0, [r7, #4]
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 802205c:	687b      	ldr	r3, [r7, #4]
 802205e:	4a11      	ldr	r2, [pc, #68]	; (80220a4 <lv_mem_free+0x50>)
 8022060:	4293      	cmp	r3, r2
 8022062:	d019      	beq.n	8022098 <lv_mem_free+0x44>
    if(data == NULL) return;
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	2b00      	cmp	r3, #0
 8022068:	d018      	beq.n	802209c <lv_mem_free+0x48>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 802206a:	4b0f      	ldr	r3, [pc, #60]	; (80220a8 <lv_mem_free+0x54>)
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	6879      	ldr	r1, [r7, #4]
 8022070:	4618      	mov	r0, r3
 8022072:	f002 f93e 	bl	80242f2 <lv_tlsf_free>
 8022076:	60f8      	str	r0, [r7, #12]
    if(cur_used > size) cur_used -= size;
 8022078:	4b0c      	ldr	r3, [pc, #48]	; (80220ac <lv_mem_free+0x58>)
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	68fa      	ldr	r2, [r7, #12]
 802207e:	429a      	cmp	r2, r3
 8022080:	d206      	bcs.n	8022090 <lv_mem_free+0x3c>
 8022082:	4b0a      	ldr	r3, [pc, #40]	; (80220ac <lv_mem_free+0x58>)
 8022084:	681a      	ldr	r2, [r3, #0]
 8022086:	68fb      	ldr	r3, [r7, #12]
 8022088:	1ad3      	subs	r3, r2, r3
 802208a:	4a08      	ldr	r2, [pc, #32]	; (80220ac <lv_mem_free+0x58>)
 802208c:	6013      	str	r3, [r2, #0]
 802208e:	e006      	b.n	802209e <lv_mem_free+0x4a>
    else cur_used = 0;
 8022090:	4b06      	ldr	r3, [pc, #24]	; (80220ac <lv_mem_free+0x58>)
 8022092:	2200      	movs	r2, #0
 8022094:	601a      	str	r2, [r3, #0]
 8022096:	e002      	b.n	802209e <lv_mem_free+0x4a>
    if(data == &zero_mem) return;
 8022098:	bf00      	nop
 802209a:	e000      	b.n	802209e <lv_mem_free+0x4a>
    if(data == NULL) return;
 802209c:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 802209e:	3710      	adds	r7, #16
 80220a0:	46bd      	mov	sp, r7
 80220a2:	bd80      	pop	{r7, pc}
 80220a4:	20000014 	.word	0x20000014
 80220a8:	20000a58 	.word	0x20000a58
 80220ac:	20000a5c 	.word	0x20000a5c

080220b0 <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 80220b0:	b580      	push	{r7, lr}
 80220b2:	b084      	sub	sp, #16
 80220b4:	af00      	add	r7, sp, #0
 80220b6:	6078      	str	r0, [r7, #4]
 80220b8:	6039      	str	r1, [r7, #0]
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 80220ba:	683b      	ldr	r3, [r7, #0]
 80220bc:	2b00      	cmp	r3, #0
 80220be:	d104      	bne.n	80220ca <lv_mem_realloc+0x1a>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
 80220c0:	6878      	ldr	r0, [r7, #4]
 80220c2:	f7ff ffc7 	bl	8022054 <lv_mem_free>
        return &zero_mem;
 80220c6:	4b0e      	ldr	r3, [pc, #56]	; (8022100 <lv_mem_realloc+0x50>)
 80220c8:	e016      	b.n	80220f8 <lv_mem_realloc+0x48>
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80220ca:	687b      	ldr	r3, [r7, #4]
 80220cc:	4a0c      	ldr	r2, [pc, #48]	; (8022100 <lv_mem_realloc+0x50>)
 80220ce:	4293      	cmp	r3, r2
 80220d0:	d104      	bne.n	80220dc <lv_mem_realloc+0x2c>
 80220d2:	6838      	ldr	r0, [r7, #0]
 80220d4:	f7ff ff8e 	bl	8021ff4 <lv_mem_alloc>
 80220d8:	4603      	mov	r3, r0
 80220da:	e00d      	b.n	80220f8 <lv_mem_realloc+0x48>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 80220dc:	4b09      	ldr	r3, [pc, #36]	; (8022104 <lv_mem_realloc+0x54>)
 80220de:	681b      	ldr	r3, [r3, #0]
 80220e0:	683a      	ldr	r2, [r7, #0]
 80220e2:	6879      	ldr	r1, [r7, #4]
 80220e4:	4618      	mov	r0, r3
 80220e6:	f002 f934 	bl	8024352 <lv_tlsf_realloc>
 80220ea:	60f8      	str	r0, [r7, #12]
#else
    void * new_p = LV_MEM_CUSTOM_REALLOC(data_p, new_size);
#endif
    if(new_p == NULL) {
 80220ec:	68fb      	ldr	r3, [r7, #12]
 80220ee:	2b00      	cmp	r3, #0
 80220f0:	d101      	bne.n	80220f6 <lv_mem_realloc+0x46>
        LV_LOG_ERROR("couldn't allocate memory");
        return NULL;
 80220f2:	2300      	movs	r3, #0
 80220f4:	e000      	b.n	80220f8 <lv_mem_realloc+0x48>
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
 80220f6:	68fb      	ldr	r3, [r7, #12]
}
 80220f8:	4618      	mov	r0, r3
 80220fa:	3710      	adds	r7, #16
 80220fc:	46bd      	mov	sp, r7
 80220fe:	bd80      	pop	{r7, pc}
 8022100:	20000014 	.word	0x20000014
 8022104:	20000a58 	.word	0x20000a58

08022108 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 8022108:	b580      	push	{r7, lr}
 802210a:	b084      	sub	sp, #16
 802210c:	af00      	add	r7, sp, #0
 802210e:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 8022110:	687b      	ldr	r3, [r7, #4]
 8022112:	2b00      	cmp	r3, #0
 8022114:	d101      	bne.n	802211a <lv_mem_buf_get+0x12>
 8022116:	2300      	movs	r3, #0
 8022118:	e09c      	b.n	8022254 <lv_mem_buf_get+0x14c>

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 802211a:	23ff      	movs	r3, #255	; 0xff
 802211c:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802211e:	2300      	movs	r3, #0
 8022120:	73bb      	strb	r3, [r7, #14]
 8022122:	e041      	b.n	80221a8 <lv_mem_buf_get+0xa0>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8022124:	7bbb      	ldrb	r3, [r7, #14]
 8022126:	4a4d      	ldr	r2, [pc, #308]	; (802225c <lv_mem_buf_get+0x154>)
 8022128:	00db      	lsls	r3, r3, #3
 802212a:	4413      	add	r3, r2
 802212c:	799b      	ldrb	r3, [r3, #6]
 802212e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8022132:	b2db      	uxtb	r3, r3
 8022134:	2b00      	cmp	r3, #0
 8022136:	d134      	bne.n	80221a2 <lv_mem_buf_get+0x9a>
 8022138:	7bbb      	ldrb	r3, [r7, #14]
 802213a:	4a48      	ldr	r2, [pc, #288]	; (802225c <lv_mem_buf_get+0x154>)
 802213c:	00db      	lsls	r3, r3, #3
 802213e:	4413      	add	r3, r2
 8022140:	889b      	ldrh	r3, [r3, #4]
 8022142:	461a      	mov	r2, r3
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	4293      	cmp	r3, r2
 8022148:	d82b      	bhi.n	80221a2 <lv_mem_buf_get+0x9a>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 802214a:	7bbb      	ldrb	r3, [r7, #14]
 802214c:	4a43      	ldr	r2, [pc, #268]	; (802225c <lv_mem_buf_get+0x154>)
 802214e:	00db      	lsls	r3, r3, #3
 8022150:	4413      	add	r3, r2
 8022152:	889b      	ldrh	r3, [r3, #4]
 8022154:	461a      	mov	r2, r3
 8022156:	687b      	ldr	r3, [r7, #4]
 8022158:	4293      	cmp	r3, r2
 802215a:	d10c      	bne.n	8022176 <lv_mem_buf_get+0x6e>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 802215c:	7bbb      	ldrb	r3, [r7, #14]
 802215e:	4a3f      	ldr	r2, [pc, #252]	; (802225c <lv_mem_buf_get+0x154>)
 8022160:	00db      	lsls	r3, r3, #3
 8022162:	4413      	add	r3, r2
 8022164:	799a      	ldrb	r2, [r3, #6]
 8022166:	f042 0201 	orr.w	r2, r2, #1
 802216a:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 802216c:	7bbb      	ldrb	r3, [r7, #14]
 802216e:	4a3b      	ldr	r2, [pc, #236]	; (802225c <lv_mem_buf_get+0x154>)
 8022170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8022174:	e06e      	b.n	8022254 <lv_mem_buf_get+0x14c>
            }
            else if(i_guess < 0) {
 8022176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802217a:	2b00      	cmp	r3, #0
 802217c:	da02      	bge.n	8022184 <lv_mem_buf_get+0x7c>
                i_guess = i;
 802217e:	7bbb      	ldrb	r3, [r7, #14]
 8022180:	73fb      	strb	r3, [r7, #15]
 8022182:	e00e      	b.n	80221a2 <lv_mem_buf_get+0x9a>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8022184:	7bbb      	ldrb	r3, [r7, #14]
 8022186:	4a35      	ldr	r2, [pc, #212]	; (802225c <lv_mem_buf_get+0x154>)
 8022188:	00db      	lsls	r3, r3, #3
 802218a:	4413      	add	r3, r2
 802218c:	889a      	ldrh	r2, [r3, #4]
 802218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022192:	4932      	ldr	r1, [pc, #200]	; (802225c <lv_mem_buf_get+0x154>)
 8022194:	00db      	lsls	r3, r3, #3
 8022196:	440b      	add	r3, r1
 8022198:	889b      	ldrh	r3, [r3, #4]
 802219a:	429a      	cmp	r2, r3
 802219c:	d201      	bcs.n	80221a2 <lv_mem_buf_get+0x9a>
                i_guess = i;
 802219e:	7bbb      	ldrb	r3, [r7, #14]
 80221a0:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80221a2:	7bbb      	ldrb	r3, [r7, #14]
 80221a4:	3301      	adds	r3, #1
 80221a6:	73bb      	strb	r3, [r7, #14]
 80221a8:	7bbb      	ldrb	r3, [r7, #14]
 80221aa:	2b0f      	cmp	r3, #15
 80221ac:	d9ba      	bls.n	8022124 <lv_mem_buf_get+0x1c>
            }
        }
    }

    if(i_guess >= 0) {
 80221ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80221b2:	2b00      	cmp	r3, #0
 80221b4:	db0e      	blt.n	80221d4 <lv_mem_buf_get+0xcc>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 80221b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80221ba:	4a28      	ldr	r2, [pc, #160]	; (802225c <lv_mem_buf_get+0x154>)
 80221bc:	00db      	lsls	r3, r3, #3
 80221be:	4413      	add	r3, r2
 80221c0:	799a      	ldrb	r2, [r3, #6]
 80221c2:	f042 0201 	orr.w	r2, r2, #1
 80221c6:	719a      	strb	r2, [r3, #6]
        MEM_TRACE("returning already allocated buffer (buffer id: %d, address: %p)", i_guess,
                  LV_GC_ROOT(lv_mem_buf[i_guess]).p);
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 80221c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80221cc:	4a23      	ldr	r2, [pc, #140]	; (802225c <lv_mem_buf_get+0x154>)
 80221ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80221d2:	e03f      	b.n	8022254 <lv_mem_buf_get+0x14c>
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80221d4:	2300      	movs	r3, #0
 80221d6:	737b      	strb	r3, [r7, #13]
 80221d8:	e038      	b.n	802224c <lv_mem_buf_get+0x144>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 80221da:	7b7b      	ldrb	r3, [r7, #13]
 80221dc:	4a1f      	ldr	r2, [pc, #124]	; (802225c <lv_mem_buf_get+0x154>)
 80221de:	00db      	lsls	r3, r3, #3
 80221e0:	4413      	add	r3, r2
 80221e2:	799b      	ldrb	r3, [r3, #6]
 80221e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80221e8:	b2db      	uxtb	r3, r3
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d12b      	bne.n	8022246 <lv_mem_buf_get+0x13e>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 80221ee:	7b7b      	ldrb	r3, [r7, #13]
 80221f0:	4a1a      	ldr	r2, [pc, #104]	; (802225c <lv_mem_buf_get+0x154>)
 80221f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80221f6:	6879      	ldr	r1, [r7, #4]
 80221f8:	4618      	mov	r0, r3
 80221fa:	f7ff ff59 	bl	80220b0 <lv_mem_realloc>
 80221fe:	60b8      	str	r0, [r7, #8]
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8022200:	68bb      	ldr	r3, [r7, #8]
 8022202:	2b00      	cmp	r3, #0
 8022204:	d100      	bne.n	8022208 <lv_mem_buf_get+0x100>
 8022206:	e7fe      	b.n	8022206 <lv_mem_buf_get+0xfe>
            if(buf == NULL) return NULL;
 8022208:	68bb      	ldr	r3, [r7, #8]
 802220a:	2b00      	cmp	r3, #0
 802220c:	d101      	bne.n	8022212 <lv_mem_buf_get+0x10a>
 802220e:	2300      	movs	r3, #0
 8022210:	e020      	b.n	8022254 <lv_mem_buf_get+0x14c>

            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8022212:	7b7b      	ldrb	r3, [r7, #13]
 8022214:	4a11      	ldr	r2, [pc, #68]	; (802225c <lv_mem_buf_get+0x154>)
 8022216:	00db      	lsls	r3, r3, #3
 8022218:	4413      	add	r3, r2
 802221a:	799a      	ldrb	r2, [r3, #6]
 802221c:	f042 0201 	orr.w	r2, r2, #1
 8022220:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8022222:	7b7b      	ldrb	r3, [r7, #13]
 8022224:	687a      	ldr	r2, [r7, #4]
 8022226:	b291      	uxth	r1, r2
 8022228:	4a0c      	ldr	r2, [pc, #48]	; (802225c <lv_mem_buf_get+0x154>)
 802222a:	00db      	lsls	r3, r3, #3
 802222c:	4413      	add	r3, r2
 802222e:	460a      	mov	r2, r1
 8022230:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8022232:	7b7b      	ldrb	r3, [r7, #13]
 8022234:	4909      	ldr	r1, [pc, #36]	; (802225c <lv_mem_buf_get+0x154>)
 8022236:	68ba      	ldr	r2, [r7, #8]
 8022238:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            MEM_TRACE("allocated (buffer id: %d, address: %p)", i, LV_GC_ROOT(lv_mem_buf[i]).p);
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 802223c:	7b7b      	ldrb	r3, [r7, #13]
 802223e:	4a07      	ldr	r2, [pc, #28]	; (802225c <lv_mem_buf_get+0x154>)
 8022240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8022244:	e006      	b.n	8022254 <lv_mem_buf_get+0x14c>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8022246:	7b7b      	ldrb	r3, [r7, #13]
 8022248:	3301      	adds	r3, #1
 802224a:	737b      	strb	r3, [r7, #13]
 802224c:	7b7b      	ldrb	r3, [r7, #13]
 802224e:	2b0f      	cmp	r3, #15
 8022250:	d9c3      	bls.n	80221da <lv_mem_buf_get+0xd2>
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8022252:	e7fe      	b.n	8022252 <lv_mem_buf_get+0x14a>
    return NULL;
}
 8022254:	4618      	mov	r0, r3
 8022256:	3710      	adds	r7, #16
 8022258:	46bd      	mov	sp, r7
 802225a:	bd80      	pop	{r7, pc}
 802225c:	200008e0 	.word	0x200008e0

08022260 <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 8022260:	b480      	push	{r7}
 8022262:	b085      	sub	sp, #20
 8022264:	af00      	add	r7, sp, #0
 8022266:	6078      	str	r0, [r7, #4]
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8022268:	2300      	movs	r3, #0
 802226a:	73fb      	strb	r3, [r7, #15]
 802226c:	e012      	b.n	8022294 <lv_mem_buf_release+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 802226e:	7bfb      	ldrb	r3, [r7, #15]
 8022270:	4a0c      	ldr	r2, [pc, #48]	; (80222a4 <lv_mem_buf_release+0x44>)
 8022272:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8022276:	687a      	ldr	r2, [r7, #4]
 8022278:	429a      	cmp	r2, r3
 802227a:	d108      	bne.n	802228e <lv_mem_buf_release+0x2e>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 802227c:	7bfb      	ldrb	r3, [r7, #15]
 802227e:	4a09      	ldr	r2, [pc, #36]	; (80222a4 <lv_mem_buf_release+0x44>)
 8022280:	00db      	lsls	r3, r3, #3
 8022282:	4413      	add	r3, r2
 8022284:	799a      	ldrb	r2, [r3, #6]
 8022286:	f36f 0200 	bfc	r2, #0, #1
 802228a:	719a      	strb	r2, [r3, #6]
            return;
 802228c:	e005      	b.n	802229a <lv_mem_buf_release+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802228e:	7bfb      	ldrb	r3, [r7, #15]
 8022290:	3301      	adds	r3, #1
 8022292:	73fb      	strb	r3, [r7, #15]
 8022294:	7bfb      	ldrb	r3, [r7, #15]
 8022296:	2b0f      	cmp	r3, #15
 8022298:	d9e9      	bls.n	802226e <lv_mem_buf_release+0xe>
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 802229a:	3714      	adds	r7, #20
 802229c:	46bd      	mov	sp, r7
 802229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222a2:	4770      	bx	lr
 80222a4:	200008e0 	.word	0x200008e0

080222a8 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 80222a8:	b580      	push	{r7, lr}
 80222aa:	b082      	sub	sp, #8
 80222ac:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80222ae:	2300      	movs	r3, #0
 80222b0:	71fb      	strb	r3, [r7, #7]
 80222b2:	e022      	b.n	80222fa <lv_mem_buf_free_all+0x52>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 80222b4:	79fb      	ldrb	r3, [r7, #7]
 80222b6:	4a15      	ldr	r2, [pc, #84]	; (802230c <lv_mem_buf_free_all+0x64>)
 80222b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80222bc:	2b00      	cmp	r3, #0
 80222be:	d019      	beq.n	80222f4 <lv_mem_buf_free_all+0x4c>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 80222c0:	79fb      	ldrb	r3, [r7, #7]
 80222c2:	4a12      	ldr	r2, [pc, #72]	; (802230c <lv_mem_buf_free_all+0x64>)
 80222c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80222c8:	4618      	mov	r0, r3
 80222ca:	f7ff fec3 	bl	8022054 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 80222ce:	79fb      	ldrb	r3, [r7, #7]
 80222d0:	4a0e      	ldr	r2, [pc, #56]	; (802230c <lv_mem_buf_free_all+0x64>)
 80222d2:	2100      	movs	r1, #0
 80222d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80222d8:	79fb      	ldrb	r3, [r7, #7]
 80222da:	4a0c      	ldr	r2, [pc, #48]	; (802230c <lv_mem_buf_free_all+0x64>)
 80222dc:	00db      	lsls	r3, r3, #3
 80222de:	4413      	add	r3, r2
 80222e0:	799a      	ldrb	r2, [r3, #6]
 80222e2:	f36f 0200 	bfc	r2, #0, #1
 80222e6:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 80222e8:	79fb      	ldrb	r3, [r7, #7]
 80222ea:	4a08      	ldr	r2, [pc, #32]	; (802230c <lv_mem_buf_free_all+0x64>)
 80222ec:	00db      	lsls	r3, r3, #3
 80222ee:	4413      	add	r3, r2
 80222f0:	2200      	movs	r2, #0
 80222f2:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80222f4:	79fb      	ldrb	r3, [r7, #7]
 80222f6:	3301      	adds	r3, #1
 80222f8:	71fb      	strb	r3, [r7, #7]
 80222fa:	79fb      	ldrb	r3, [r7, #7]
 80222fc:	2b0f      	cmp	r3, #15
 80222fe:	d9d9      	bls.n	80222b4 <lv_mem_buf_free_all+0xc>
        }
    }
}
 8022300:	bf00      	nop
 8022302:	bf00      	nop
 8022304:	3708      	adds	r7, #8
 8022306:	46bd      	mov	sp, r7
 8022308:	bd80      	pop	{r7, pc}
 802230a:	bf00      	nop
 802230c:	200008e0 	.word	0x200008e0

08022310 <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 8022310:	b480      	push	{r7}
 8022312:	b08b      	sub	sp, #44	; 0x2c
 8022314:	af00      	add	r7, sp, #0
 8022316:	60f8      	str	r0, [r7, #12]
 8022318:	60b9      	str	r1, [r7, #8]
 802231a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 802231c:	68fb      	ldr	r3, [r7, #12]
 802231e:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 8022320:	68bb      	ldr	r3, [r7, #8]
 8022322:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8022324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022326:	f003 0303 	and.w	r3, r3, #3
 802232a:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 802232c:	6a3b      	ldr	r3, [r7, #32]
 802232e:	f003 0303 	and.w	r3, r3, #3
 8022332:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 8022334:	693a      	ldr	r2, [r7, #16]
 8022336:	69fb      	ldr	r3, [r7, #28]
 8022338:	429a      	cmp	r2, r3
 802233a:	f000 815b 	beq.w	80225f4 <lv_memcpy+0x2e4>
        while(len > 32) {
 802233e:	e142      	b.n	80225c6 <lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 8022340:	6a3b      	ldr	r3, [r7, #32]
 8022342:	781a      	ldrb	r2, [r3, #0]
 8022344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022346:	701a      	strb	r2, [r3, #0]
 8022348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802234a:	3301      	adds	r3, #1
 802234c:	627b      	str	r3, [r7, #36]	; 0x24
 802234e:	6a3b      	ldr	r3, [r7, #32]
 8022350:	3301      	adds	r3, #1
 8022352:	623b      	str	r3, [r7, #32]
 8022354:	6a3b      	ldr	r3, [r7, #32]
 8022356:	781a      	ldrb	r2, [r3, #0]
 8022358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802235a:	701a      	strb	r2, [r3, #0]
 802235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802235e:	3301      	adds	r3, #1
 8022360:	627b      	str	r3, [r7, #36]	; 0x24
 8022362:	6a3b      	ldr	r3, [r7, #32]
 8022364:	3301      	adds	r3, #1
 8022366:	623b      	str	r3, [r7, #32]
 8022368:	6a3b      	ldr	r3, [r7, #32]
 802236a:	781a      	ldrb	r2, [r3, #0]
 802236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802236e:	701a      	strb	r2, [r3, #0]
 8022370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022372:	3301      	adds	r3, #1
 8022374:	627b      	str	r3, [r7, #36]	; 0x24
 8022376:	6a3b      	ldr	r3, [r7, #32]
 8022378:	3301      	adds	r3, #1
 802237a:	623b      	str	r3, [r7, #32]
 802237c:	6a3b      	ldr	r3, [r7, #32]
 802237e:	781a      	ldrb	r2, [r3, #0]
 8022380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022382:	701a      	strb	r2, [r3, #0]
 8022384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022386:	3301      	adds	r3, #1
 8022388:	627b      	str	r3, [r7, #36]	; 0x24
 802238a:	6a3b      	ldr	r3, [r7, #32]
 802238c:	3301      	adds	r3, #1
 802238e:	623b      	str	r3, [r7, #32]
 8022390:	6a3b      	ldr	r3, [r7, #32]
 8022392:	781a      	ldrb	r2, [r3, #0]
 8022394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022396:	701a      	strb	r2, [r3, #0]
 8022398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802239a:	3301      	adds	r3, #1
 802239c:	627b      	str	r3, [r7, #36]	; 0x24
 802239e:	6a3b      	ldr	r3, [r7, #32]
 80223a0:	3301      	adds	r3, #1
 80223a2:	623b      	str	r3, [r7, #32]
 80223a4:	6a3b      	ldr	r3, [r7, #32]
 80223a6:	781a      	ldrb	r2, [r3, #0]
 80223a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223aa:	701a      	strb	r2, [r3, #0]
 80223ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223ae:	3301      	adds	r3, #1
 80223b0:	627b      	str	r3, [r7, #36]	; 0x24
 80223b2:	6a3b      	ldr	r3, [r7, #32]
 80223b4:	3301      	adds	r3, #1
 80223b6:	623b      	str	r3, [r7, #32]
 80223b8:	6a3b      	ldr	r3, [r7, #32]
 80223ba:	781a      	ldrb	r2, [r3, #0]
 80223bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223be:	701a      	strb	r2, [r3, #0]
 80223c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223c2:	3301      	adds	r3, #1
 80223c4:	627b      	str	r3, [r7, #36]	; 0x24
 80223c6:	6a3b      	ldr	r3, [r7, #32]
 80223c8:	3301      	adds	r3, #1
 80223ca:	623b      	str	r3, [r7, #32]
 80223cc:	6a3b      	ldr	r3, [r7, #32]
 80223ce:	781a      	ldrb	r2, [r3, #0]
 80223d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223d2:	701a      	strb	r2, [r3, #0]
 80223d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223d6:	3301      	adds	r3, #1
 80223d8:	627b      	str	r3, [r7, #36]	; 0x24
 80223da:	6a3b      	ldr	r3, [r7, #32]
 80223dc:	3301      	adds	r3, #1
 80223de:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 80223e0:	6a3b      	ldr	r3, [r7, #32]
 80223e2:	781a      	ldrb	r2, [r3, #0]
 80223e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223e6:	701a      	strb	r2, [r3, #0]
 80223e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223ea:	3301      	adds	r3, #1
 80223ec:	627b      	str	r3, [r7, #36]	; 0x24
 80223ee:	6a3b      	ldr	r3, [r7, #32]
 80223f0:	3301      	adds	r3, #1
 80223f2:	623b      	str	r3, [r7, #32]
 80223f4:	6a3b      	ldr	r3, [r7, #32]
 80223f6:	781a      	ldrb	r2, [r3, #0]
 80223f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223fa:	701a      	strb	r2, [r3, #0]
 80223fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223fe:	3301      	adds	r3, #1
 8022400:	627b      	str	r3, [r7, #36]	; 0x24
 8022402:	6a3b      	ldr	r3, [r7, #32]
 8022404:	3301      	adds	r3, #1
 8022406:	623b      	str	r3, [r7, #32]
 8022408:	6a3b      	ldr	r3, [r7, #32]
 802240a:	781a      	ldrb	r2, [r3, #0]
 802240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802240e:	701a      	strb	r2, [r3, #0]
 8022410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022412:	3301      	adds	r3, #1
 8022414:	627b      	str	r3, [r7, #36]	; 0x24
 8022416:	6a3b      	ldr	r3, [r7, #32]
 8022418:	3301      	adds	r3, #1
 802241a:	623b      	str	r3, [r7, #32]
 802241c:	6a3b      	ldr	r3, [r7, #32]
 802241e:	781a      	ldrb	r2, [r3, #0]
 8022420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022422:	701a      	strb	r2, [r3, #0]
 8022424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022426:	3301      	adds	r3, #1
 8022428:	627b      	str	r3, [r7, #36]	; 0x24
 802242a:	6a3b      	ldr	r3, [r7, #32]
 802242c:	3301      	adds	r3, #1
 802242e:	623b      	str	r3, [r7, #32]
 8022430:	6a3b      	ldr	r3, [r7, #32]
 8022432:	781a      	ldrb	r2, [r3, #0]
 8022434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022436:	701a      	strb	r2, [r3, #0]
 8022438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802243a:	3301      	adds	r3, #1
 802243c:	627b      	str	r3, [r7, #36]	; 0x24
 802243e:	6a3b      	ldr	r3, [r7, #32]
 8022440:	3301      	adds	r3, #1
 8022442:	623b      	str	r3, [r7, #32]
 8022444:	6a3b      	ldr	r3, [r7, #32]
 8022446:	781a      	ldrb	r2, [r3, #0]
 8022448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802244a:	701a      	strb	r2, [r3, #0]
 802244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802244e:	3301      	adds	r3, #1
 8022450:	627b      	str	r3, [r7, #36]	; 0x24
 8022452:	6a3b      	ldr	r3, [r7, #32]
 8022454:	3301      	adds	r3, #1
 8022456:	623b      	str	r3, [r7, #32]
 8022458:	6a3b      	ldr	r3, [r7, #32]
 802245a:	781a      	ldrb	r2, [r3, #0]
 802245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802245e:	701a      	strb	r2, [r3, #0]
 8022460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022462:	3301      	adds	r3, #1
 8022464:	627b      	str	r3, [r7, #36]	; 0x24
 8022466:	6a3b      	ldr	r3, [r7, #32]
 8022468:	3301      	adds	r3, #1
 802246a:	623b      	str	r3, [r7, #32]
 802246c:	6a3b      	ldr	r3, [r7, #32]
 802246e:	781a      	ldrb	r2, [r3, #0]
 8022470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022472:	701a      	strb	r2, [r3, #0]
 8022474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022476:	3301      	adds	r3, #1
 8022478:	627b      	str	r3, [r7, #36]	; 0x24
 802247a:	6a3b      	ldr	r3, [r7, #32]
 802247c:	3301      	adds	r3, #1
 802247e:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8022480:	6a3b      	ldr	r3, [r7, #32]
 8022482:	781a      	ldrb	r2, [r3, #0]
 8022484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022486:	701a      	strb	r2, [r3, #0]
 8022488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802248a:	3301      	adds	r3, #1
 802248c:	627b      	str	r3, [r7, #36]	; 0x24
 802248e:	6a3b      	ldr	r3, [r7, #32]
 8022490:	3301      	adds	r3, #1
 8022492:	623b      	str	r3, [r7, #32]
 8022494:	6a3b      	ldr	r3, [r7, #32]
 8022496:	781a      	ldrb	r2, [r3, #0]
 8022498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802249a:	701a      	strb	r2, [r3, #0]
 802249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802249e:	3301      	adds	r3, #1
 80224a0:	627b      	str	r3, [r7, #36]	; 0x24
 80224a2:	6a3b      	ldr	r3, [r7, #32]
 80224a4:	3301      	adds	r3, #1
 80224a6:	623b      	str	r3, [r7, #32]
 80224a8:	6a3b      	ldr	r3, [r7, #32]
 80224aa:	781a      	ldrb	r2, [r3, #0]
 80224ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ae:	701a      	strb	r2, [r3, #0]
 80224b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224b2:	3301      	adds	r3, #1
 80224b4:	627b      	str	r3, [r7, #36]	; 0x24
 80224b6:	6a3b      	ldr	r3, [r7, #32]
 80224b8:	3301      	adds	r3, #1
 80224ba:	623b      	str	r3, [r7, #32]
 80224bc:	6a3b      	ldr	r3, [r7, #32]
 80224be:	781a      	ldrb	r2, [r3, #0]
 80224c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224c2:	701a      	strb	r2, [r3, #0]
 80224c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224c6:	3301      	adds	r3, #1
 80224c8:	627b      	str	r3, [r7, #36]	; 0x24
 80224ca:	6a3b      	ldr	r3, [r7, #32]
 80224cc:	3301      	adds	r3, #1
 80224ce:	623b      	str	r3, [r7, #32]
 80224d0:	6a3b      	ldr	r3, [r7, #32]
 80224d2:	781a      	ldrb	r2, [r3, #0]
 80224d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224d6:	701a      	strb	r2, [r3, #0]
 80224d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224da:	3301      	adds	r3, #1
 80224dc:	627b      	str	r3, [r7, #36]	; 0x24
 80224de:	6a3b      	ldr	r3, [r7, #32]
 80224e0:	3301      	adds	r3, #1
 80224e2:	623b      	str	r3, [r7, #32]
 80224e4:	6a3b      	ldr	r3, [r7, #32]
 80224e6:	781a      	ldrb	r2, [r3, #0]
 80224e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ea:	701a      	strb	r2, [r3, #0]
 80224ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ee:	3301      	adds	r3, #1
 80224f0:	627b      	str	r3, [r7, #36]	; 0x24
 80224f2:	6a3b      	ldr	r3, [r7, #32]
 80224f4:	3301      	adds	r3, #1
 80224f6:	623b      	str	r3, [r7, #32]
 80224f8:	6a3b      	ldr	r3, [r7, #32]
 80224fa:	781a      	ldrb	r2, [r3, #0]
 80224fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224fe:	701a      	strb	r2, [r3, #0]
 8022500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022502:	3301      	adds	r3, #1
 8022504:	627b      	str	r3, [r7, #36]	; 0x24
 8022506:	6a3b      	ldr	r3, [r7, #32]
 8022508:	3301      	adds	r3, #1
 802250a:	623b      	str	r3, [r7, #32]
 802250c:	6a3b      	ldr	r3, [r7, #32]
 802250e:	781a      	ldrb	r2, [r3, #0]
 8022510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022512:	701a      	strb	r2, [r3, #0]
 8022514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022516:	3301      	adds	r3, #1
 8022518:	627b      	str	r3, [r7, #36]	; 0x24
 802251a:	6a3b      	ldr	r3, [r7, #32]
 802251c:	3301      	adds	r3, #1
 802251e:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8022520:	6a3b      	ldr	r3, [r7, #32]
 8022522:	781a      	ldrb	r2, [r3, #0]
 8022524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022526:	701a      	strb	r2, [r3, #0]
 8022528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802252a:	3301      	adds	r3, #1
 802252c:	627b      	str	r3, [r7, #36]	; 0x24
 802252e:	6a3b      	ldr	r3, [r7, #32]
 8022530:	3301      	adds	r3, #1
 8022532:	623b      	str	r3, [r7, #32]
 8022534:	6a3b      	ldr	r3, [r7, #32]
 8022536:	781a      	ldrb	r2, [r3, #0]
 8022538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802253a:	701a      	strb	r2, [r3, #0]
 802253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802253e:	3301      	adds	r3, #1
 8022540:	627b      	str	r3, [r7, #36]	; 0x24
 8022542:	6a3b      	ldr	r3, [r7, #32]
 8022544:	3301      	adds	r3, #1
 8022546:	623b      	str	r3, [r7, #32]
 8022548:	6a3b      	ldr	r3, [r7, #32]
 802254a:	781a      	ldrb	r2, [r3, #0]
 802254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802254e:	701a      	strb	r2, [r3, #0]
 8022550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022552:	3301      	adds	r3, #1
 8022554:	627b      	str	r3, [r7, #36]	; 0x24
 8022556:	6a3b      	ldr	r3, [r7, #32]
 8022558:	3301      	adds	r3, #1
 802255a:	623b      	str	r3, [r7, #32]
 802255c:	6a3b      	ldr	r3, [r7, #32]
 802255e:	781a      	ldrb	r2, [r3, #0]
 8022560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022562:	701a      	strb	r2, [r3, #0]
 8022564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022566:	3301      	adds	r3, #1
 8022568:	627b      	str	r3, [r7, #36]	; 0x24
 802256a:	6a3b      	ldr	r3, [r7, #32]
 802256c:	3301      	adds	r3, #1
 802256e:	623b      	str	r3, [r7, #32]
 8022570:	6a3b      	ldr	r3, [r7, #32]
 8022572:	781a      	ldrb	r2, [r3, #0]
 8022574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022576:	701a      	strb	r2, [r3, #0]
 8022578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802257a:	3301      	adds	r3, #1
 802257c:	627b      	str	r3, [r7, #36]	; 0x24
 802257e:	6a3b      	ldr	r3, [r7, #32]
 8022580:	3301      	adds	r3, #1
 8022582:	623b      	str	r3, [r7, #32]
 8022584:	6a3b      	ldr	r3, [r7, #32]
 8022586:	781a      	ldrb	r2, [r3, #0]
 8022588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802258a:	701a      	strb	r2, [r3, #0]
 802258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802258e:	3301      	adds	r3, #1
 8022590:	627b      	str	r3, [r7, #36]	; 0x24
 8022592:	6a3b      	ldr	r3, [r7, #32]
 8022594:	3301      	adds	r3, #1
 8022596:	623b      	str	r3, [r7, #32]
 8022598:	6a3b      	ldr	r3, [r7, #32]
 802259a:	781a      	ldrb	r2, [r3, #0]
 802259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802259e:	701a      	strb	r2, [r3, #0]
 80225a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225a2:	3301      	adds	r3, #1
 80225a4:	627b      	str	r3, [r7, #36]	; 0x24
 80225a6:	6a3b      	ldr	r3, [r7, #32]
 80225a8:	3301      	adds	r3, #1
 80225aa:	623b      	str	r3, [r7, #32]
 80225ac:	6a3b      	ldr	r3, [r7, #32]
 80225ae:	781a      	ldrb	r2, [r3, #0]
 80225b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225b2:	701a      	strb	r2, [r3, #0]
 80225b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225b6:	3301      	adds	r3, #1
 80225b8:	627b      	str	r3, [r7, #36]	; 0x24
 80225ba:	6a3b      	ldr	r3, [r7, #32]
 80225bc:	3301      	adds	r3, #1
 80225be:	623b      	str	r3, [r7, #32]
            len -= 32;
 80225c0:	687b      	ldr	r3, [r7, #4]
 80225c2:	3b20      	subs	r3, #32
 80225c4:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	2b20      	cmp	r3, #32
 80225ca:	f63f aeb9 	bhi.w	8022340 <lv_memcpy+0x30>
        }
        while(len) {
 80225ce:	e00c      	b.n	80225ea <lv_memcpy+0x2da>
            COPY8
 80225d0:	6a3b      	ldr	r3, [r7, #32]
 80225d2:	781a      	ldrb	r2, [r3, #0]
 80225d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225d6:	701a      	strb	r2, [r3, #0]
 80225d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225da:	3301      	adds	r3, #1
 80225dc:	627b      	str	r3, [r7, #36]	; 0x24
 80225de:	6a3b      	ldr	r3, [r7, #32]
 80225e0:	3301      	adds	r3, #1
 80225e2:	623b      	str	r3, [r7, #32]
            len--;
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	3b01      	subs	r3, #1
 80225e8:	607b      	str	r3, [r7, #4]
        while(len) {
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	d1ef      	bne.n	80225d0 <lv_memcpy+0x2c0>
        }
        return dst;
 80225f0:	68fb      	ldr	r3, [r7, #12]
 80225f2:	e09f      	b.n	8022734 <lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 80225f4:	69fb      	ldr	r3, [r7, #28]
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	d01a      	beq.n	8022630 <lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 80225fa:	69fb      	ldr	r3, [r7, #28]
 80225fc:	f1c3 0304 	rsb	r3, r3, #4
 8022600:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 8022602:	e00f      	b.n	8022624 <lv_memcpy+0x314>
            COPY8;
 8022604:	6a3b      	ldr	r3, [r7, #32]
 8022606:	781a      	ldrb	r2, [r3, #0]
 8022608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802260a:	701a      	strb	r2, [r3, #0]
 802260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802260e:	3301      	adds	r3, #1
 8022610:	627b      	str	r3, [r7, #36]	; 0x24
 8022612:	6a3b      	ldr	r3, [r7, #32]
 8022614:	3301      	adds	r3, #1
 8022616:	623b      	str	r3, [r7, #32]
            d_align--;
 8022618:	69fb      	ldr	r3, [r7, #28]
 802261a:	3b01      	subs	r3, #1
 802261c:	61fb      	str	r3, [r7, #28]
            len--;
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	3b01      	subs	r3, #1
 8022622:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 8022624:	69fb      	ldr	r3, [r7, #28]
 8022626:	2b00      	cmp	r3, #0
 8022628:	d002      	beq.n	8022630 <lv_memcpy+0x320>
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	2b00      	cmp	r3, #0
 802262e:	d1e9      	bne.n	8022604 <lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 8022630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022632:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 8022634:	6a3b      	ldr	r3, [r7, #32]
 8022636:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 8022638:	e052      	b.n	80226e0 <lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 802263a:	697b      	ldr	r3, [r7, #20]
 802263c:	681a      	ldr	r2, [r3, #0]
 802263e:	69bb      	ldr	r3, [r7, #24]
 8022640:	601a      	str	r2, [r3, #0]
 8022642:	69bb      	ldr	r3, [r7, #24]
 8022644:	3304      	adds	r3, #4
 8022646:	61bb      	str	r3, [r7, #24]
 8022648:	697b      	ldr	r3, [r7, #20]
 802264a:	3304      	adds	r3, #4
 802264c:	617b      	str	r3, [r7, #20]
 802264e:	697b      	ldr	r3, [r7, #20]
 8022650:	681a      	ldr	r2, [r3, #0]
 8022652:	69bb      	ldr	r3, [r7, #24]
 8022654:	601a      	str	r2, [r3, #0]
 8022656:	69bb      	ldr	r3, [r7, #24]
 8022658:	3304      	adds	r3, #4
 802265a:	61bb      	str	r3, [r7, #24]
 802265c:	697b      	ldr	r3, [r7, #20]
 802265e:	3304      	adds	r3, #4
 8022660:	617b      	str	r3, [r7, #20]
 8022662:	697b      	ldr	r3, [r7, #20]
 8022664:	681a      	ldr	r2, [r3, #0]
 8022666:	69bb      	ldr	r3, [r7, #24]
 8022668:	601a      	str	r2, [r3, #0]
 802266a:	69bb      	ldr	r3, [r7, #24]
 802266c:	3304      	adds	r3, #4
 802266e:	61bb      	str	r3, [r7, #24]
 8022670:	697b      	ldr	r3, [r7, #20]
 8022672:	3304      	adds	r3, #4
 8022674:	617b      	str	r3, [r7, #20]
 8022676:	697b      	ldr	r3, [r7, #20]
 8022678:	681a      	ldr	r2, [r3, #0]
 802267a:	69bb      	ldr	r3, [r7, #24]
 802267c:	601a      	str	r2, [r3, #0]
 802267e:	69bb      	ldr	r3, [r7, #24]
 8022680:	3304      	adds	r3, #4
 8022682:	61bb      	str	r3, [r7, #24]
 8022684:	697b      	ldr	r3, [r7, #20]
 8022686:	3304      	adds	r3, #4
 8022688:	617b      	str	r3, [r7, #20]
 802268a:	697b      	ldr	r3, [r7, #20]
 802268c:	681a      	ldr	r2, [r3, #0]
 802268e:	69bb      	ldr	r3, [r7, #24]
 8022690:	601a      	str	r2, [r3, #0]
 8022692:	69bb      	ldr	r3, [r7, #24]
 8022694:	3304      	adds	r3, #4
 8022696:	61bb      	str	r3, [r7, #24]
 8022698:	697b      	ldr	r3, [r7, #20]
 802269a:	3304      	adds	r3, #4
 802269c:	617b      	str	r3, [r7, #20]
 802269e:	697b      	ldr	r3, [r7, #20]
 80226a0:	681a      	ldr	r2, [r3, #0]
 80226a2:	69bb      	ldr	r3, [r7, #24]
 80226a4:	601a      	str	r2, [r3, #0]
 80226a6:	69bb      	ldr	r3, [r7, #24]
 80226a8:	3304      	adds	r3, #4
 80226aa:	61bb      	str	r3, [r7, #24]
 80226ac:	697b      	ldr	r3, [r7, #20]
 80226ae:	3304      	adds	r3, #4
 80226b0:	617b      	str	r3, [r7, #20]
 80226b2:	697b      	ldr	r3, [r7, #20]
 80226b4:	681a      	ldr	r2, [r3, #0]
 80226b6:	69bb      	ldr	r3, [r7, #24]
 80226b8:	601a      	str	r2, [r3, #0]
 80226ba:	69bb      	ldr	r3, [r7, #24]
 80226bc:	3304      	adds	r3, #4
 80226be:	61bb      	str	r3, [r7, #24]
 80226c0:	697b      	ldr	r3, [r7, #20]
 80226c2:	3304      	adds	r3, #4
 80226c4:	617b      	str	r3, [r7, #20]
 80226c6:	697b      	ldr	r3, [r7, #20]
 80226c8:	681a      	ldr	r2, [r3, #0]
 80226ca:	69bb      	ldr	r3, [r7, #24]
 80226cc:	601a      	str	r2, [r3, #0]
 80226ce:	69bb      	ldr	r3, [r7, #24]
 80226d0:	3304      	adds	r3, #4
 80226d2:	61bb      	str	r3, [r7, #24]
 80226d4:	697b      	ldr	r3, [r7, #20]
 80226d6:	3304      	adds	r3, #4
 80226d8:	617b      	str	r3, [r7, #20]
        len -= 32;
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	3b20      	subs	r3, #32
 80226de:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	2b20      	cmp	r3, #32
 80226e4:	d8a9      	bhi.n	802263a <lv_memcpy+0x32a>
    }

    while(len > 4) {
 80226e6:	e00c      	b.n	8022702 <lv_memcpy+0x3f2>
        COPY32;
 80226e8:	697b      	ldr	r3, [r7, #20]
 80226ea:	681a      	ldr	r2, [r3, #0]
 80226ec:	69bb      	ldr	r3, [r7, #24]
 80226ee:	601a      	str	r2, [r3, #0]
 80226f0:	69bb      	ldr	r3, [r7, #24]
 80226f2:	3304      	adds	r3, #4
 80226f4:	61bb      	str	r3, [r7, #24]
 80226f6:	697b      	ldr	r3, [r7, #20]
 80226f8:	3304      	adds	r3, #4
 80226fa:	617b      	str	r3, [r7, #20]
        len -= 4;
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	3b04      	subs	r3, #4
 8022700:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	2b04      	cmp	r3, #4
 8022706:	d8ef      	bhi.n	80226e8 <lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 8022708:	69bb      	ldr	r3, [r7, #24]
 802270a:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 802270c:	697b      	ldr	r3, [r7, #20]
 802270e:	623b      	str	r3, [r7, #32]
    while(len) {
 8022710:	e00c      	b.n	802272c <lv_memcpy+0x41c>
        COPY8
 8022712:	6a3b      	ldr	r3, [r7, #32]
 8022714:	781a      	ldrb	r2, [r3, #0]
 8022716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022718:	701a      	strb	r2, [r3, #0]
 802271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802271c:	3301      	adds	r3, #1
 802271e:	627b      	str	r3, [r7, #36]	; 0x24
 8022720:	6a3b      	ldr	r3, [r7, #32]
 8022722:	3301      	adds	r3, #1
 8022724:	623b      	str	r3, [r7, #32]
        len--;
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	3b01      	subs	r3, #1
 802272a:	607b      	str	r3, [r7, #4]
    while(len) {
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	2b00      	cmp	r3, #0
 8022730:	d1ef      	bne.n	8022712 <lv_memcpy+0x402>
    }

    return dst;
 8022732:	68fb      	ldr	r3, [r7, #12]
}
 8022734:	4618      	mov	r0, r3
 8022736:	372c      	adds	r7, #44	; 0x2c
 8022738:	46bd      	mov	sp, r7
 802273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802273e:	4770      	bx	lr

08022740 <lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset(void * dst, uint8_t v, size_t len)
{
 8022740:	b480      	push	{r7}
 8022742:	b089      	sub	sp, #36	; 0x24
 8022744:	af00      	add	r7, sp, #0
 8022746:	60f8      	str	r0, [r7, #12]
 8022748:	460b      	mov	r3, r1
 802274a:	607a      	str	r2, [r7, #4]
 802274c:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *)dst;
 802274e:	68fb      	ldr	r3, [r7, #12]
 8022750:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8022752:	69fb      	ldr	r3, [r7, #28]
 8022754:	f003 0303 	and.w	r3, r3, #3
 8022758:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 802275a:	69bb      	ldr	r3, [r7, #24]
 802275c:	2b00      	cmp	r3, #0
 802275e:	d016      	beq.n	802278e <lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 8022760:	69bb      	ldr	r3, [r7, #24]
 8022762:	f1c3 0304 	rsb	r3, r3, #4
 8022766:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 8022768:	e00b      	b.n	8022782 <lv_memset+0x42>
            SET8(v);
 802276a:	69fb      	ldr	r3, [r7, #28]
 802276c:	7afa      	ldrb	r2, [r7, #11]
 802276e:	701a      	strb	r2, [r3, #0]
 8022770:	69fb      	ldr	r3, [r7, #28]
 8022772:	3301      	adds	r3, #1
 8022774:	61fb      	str	r3, [r7, #28]
            len--;
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	3b01      	subs	r3, #1
 802277a:	607b      	str	r3, [r7, #4]
            d_align--;
 802277c:	69bb      	ldr	r3, [r7, #24]
 802277e:	3b01      	subs	r3, #1
 8022780:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 8022782:	69bb      	ldr	r3, [r7, #24]
 8022784:	2b00      	cmp	r3, #0
 8022786:	d002      	beq.n	802278e <lv_memset+0x4e>
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	2b00      	cmp	r3, #0
 802278c:	d1ed      	bne.n	802276a <lv_memset+0x2a>
        }
    }

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 802278e:	7afa      	ldrb	r2, [r7, #11]
 8022790:	7afb      	ldrb	r3, [r7, #11]
 8022792:	021b      	lsls	r3, r3, #8
 8022794:	441a      	add	r2, r3
 8022796:	7afb      	ldrb	r3, [r7, #11]
 8022798:	041b      	lsls	r3, r3, #16
 802279a:	441a      	add	r2, r3
 802279c:	7afb      	ldrb	r3, [r7, #11]
 802279e:	061b      	lsls	r3, r3, #24
 80227a0:	4413      	add	r3, r2
 80227a2:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 80227a4:	69fb      	ldr	r3, [r7, #28]
 80227a6:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 80227a8:	e032      	b.n	8022810 <lv_memset+0xd0>
        REPEAT8(SET32(v32));
 80227aa:	697b      	ldr	r3, [r7, #20]
 80227ac:	693a      	ldr	r2, [r7, #16]
 80227ae:	601a      	str	r2, [r3, #0]
 80227b0:	697b      	ldr	r3, [r7, #20]
 80227b2:	3304      	adds	r3, #4
 80227b4:	617b      	str	r3, [r7, #20]
 80227b6:	697b      	ldr	r3, [r7, #20]
 80227b8:	693a      	ldr	r2, [r7, #16]
 80227ba:	601a      	str	r2, [r3, #0]
 80227bc:	697b      	ldr	r3, [r7, #20]
 80227be:	3304      	adds	r3, #4
 80227c0:	617b      	str	r3, [r7, #20]
 80227c2:	697b      	ldr	r3, [r7, #20]
 80227c4:	693a      	ldr	r2, [r7, #16]
 80227c6:	601a      	str	r2, [r3, #0]
 80227c8:	697b      	ldr	r3, [r7, #20]
 80227ca:	3304      	adds	r3, #4
 80227cc:	617b      	str	r3, [r7, #20]
 80227ce:	697b      	ldr	r3, [r7, #20]
 80227d0:	693a      	ldr	r2, [r7, #16]
 80227d2:	601a      	str	r2, [r3, #0]
 80227d4:	697b      	ldr	r3, [r7, #20]
 80227d6:	3304      	adds	r3, #4
 80227d8:	617b      	str	r3, [r7, #20]
 80227da:	697b      	ldr	r3, [r7, #20]
 80227dc:	693a      	ldr	r2, [r7, #16]
 80227de:	601a      	str	r2, [r3, #0]
 80227e0:	697b      	ldr	r3, [r7, #20]
 80227e2:	3304      	adds	r3, #4
 80227e4:	617b      	str	r3, [r7, #20]
 80227e6:	697b      	ldr	r3, [r7, #20]
 80227e8:	693a      	ldr	r2, [r7, #16]
 80227ea:	601a      	str	r2, [r3, #0]
 80227ec:	697b      	ldr	r3, [r7, #20]
 80227ee:	3304      	adds	r3, #4
 80227f0:	617b      	str	r3, [r7, #20]
 80227f2:	697b      	ldr	r3, [r7, #20]
 80227f4:	693a      	ldr	r2, [r7, #16]
 80227f6:	601a      	str	r2, [r3, #0]
 80227f8:	697b      	ldr	r3, [r7, #20]
 80227fa:	3304      	adds	r3, #4
 80227fc:	617b      	str	r3, [r7, #20]
 80227fe:	697b      	ldr	r3, [r7, #20]
 8022800:	693a      	ldr	r2, [r7, #16]
 8022802:	601a      	str	r2, [r3, #0]
 8022804:	697b      	ldr	r3, [r7, #20]
 8022806:	3304      	adds	r3, #4
 8022808:	617b      	str	r3, [r7, #20]
        len -= 32;
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	3b20      	subs	r3, #32
 802280e:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	2b20      	cmp	r3, #32
 8022814:	d8c9      	bhi.n	80227aa <lv_memset+0x6a>
    }

    while(len > 4) {
 8022816:	e008      	b.n	802282a <lv_memset+0xea>
        SET32(v32);
 8022818:	697b      	ldr	r3, [r7, #20]
 802281a:	693a      	ldr	r2, [r7, #16]
 802281c:	601a      	str	r2, [r3, #0]
 802281e:	697b      	ldr	r3, [r7, #20]
 8022820:	3304      	adds	r3, #4
 8022822:	617b      	str	r3, [r7, #20]
        len -= 4;
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	3b04      	subs	r3, #4
 8022828:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 802282a:	687b      	ldr	r3, [r7, #4]
 802282c:	2b04      	cmp	r3, #4
 802282e:	d8f3      	bhi.n	8022818 <lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 8022830:	697b      	ldr	r3, [r7, #20]
 8022832:	61fb      	str	r3, [r7, #28]
    while(len) {
 8022834:	e008      	b.n	8022848 <lv_memset+0x108>
        SET8(v);
 8022836:	69fb      	ldr	r3, [r7, #28]
 8022838:	7afa      	ldrb	r2, [r7, #11]
 802283a:	701a      	strb	r2, [r3, #0]
 802283c:	69fb      	ldr	r3, [r7, #28]
 802283e:	3301      	adds	r3, #1
 8022840:	61fb      	str	r3, [r7, #28]
        len--;
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	3b01      	subs	r3, #1
 8022846:	607b      	str	r3, [r7, #4]
    while(len) {
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	2b00      	cmp	r3, #0
 802284c:	d1f3      	bne.n	8022836 <lv_memset+0xf6>
    }
}
 802284e:	bf00      	nop
 8022850:	bf00      	nop
 8022852:	3724      	adds	r7, #36	; 0x24
 8022854:	46bd      	mov	sp, r7
 8022856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802285a:	4770      	bx	lr

0802285c <lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_00(void * dst, size_t len)
{
 802285c:	b480      	push	{r7}
 802285e:	b087      	sub	sp, #28
 8022860:	af00      	add	r7, sp, #0
 8022862:	6078      	str	r0, [r7, #4]
 8022864:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 802286a:	697b      	ldr	r3, [r7, #20]
 802286c:	f003 0303 	and.w	r3, r3, #3
 8022870:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 8022872:	693b      	ldr	r3, [r7, #16]
 8022874:	2b00      	cmp	r3, #0
 8022876:	d016      	beq.n	80228a6 <lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 8022878:	693b      	ldr	r3, [r7, #16]
 802287a:	f1c3 0304 	rsb	r3, r3, #4
 802287e:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 8022880:	e00b      	b.n	802289a <lv_memset_00+0x3e>
            SET8(0);
 8022882:	697b      	ldr	r3, [r7, #20]
 8022884:	2200      	movs	r2, #0
 8022886:	701a      	strb	r2, [r3, #0]
 8022888:	697b      	ldr	r3, [r7, #20]
 802288a:	3301      	adds	r3, #1
 802288c:	617b      	str	r3, [r7, #20]
            len--;
 802288e:	683b      	ldr	r3, [r7, #0]
 8022890:	3b01      	subs	r3, #1
 8022892:	603b      	str	r3, [r7, #0]
            d_align--;
 8022894:	693b      	ldr	r3, [r7, #16]
 8022896:	3b01      	subs	r3, #1
 8022898:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802289a:	693b      	ldr	r3, [r7, #16]
 802289c:	2b00      	cmp	r3, #0
 802289e:	d002      	beq.n	80228a6 <lv_memset_00+0x4a>
 80228a0:	683b      	ldr	r3, [r7, #0]
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	d1ed      	bne.n	8022882 <lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80228a6:	697b      	ldr	r3, [r7, #20]
 80228a8:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 80228aa:	e032      	b.n	8022912 <lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 80228ac:	68fb      	ldr	r3, [r7, #12]
 80228ae:	2200      	movs	r2, #0
 80228b0:	601a      	str	r2, [r3, #0]
 80228b2:	68fb      	ldr	r3, [r7, #12]
 80228b4:	3304      	adds	r3, #4
 80228b6:	60fb      	str	r3, [r7, #12]
 80228b8:	68fb      	ldr	r3, [r7, #12]
 80228ba:	2200      	movs	r2, #0
 80228bc:	601a      	str	r2, [r3, #0]
 80228be:	68fb      	ldr	r3, [r7, #12]
 80228c0:	3304      	adds	r3, #4
 80228c2:	60fb      	str	r3, [r7, #12]
 80228c4:	68fb      	ldr	r3, [r7, #12]
 80228c6:	2200      	movs	r2, #0
 80228c8:	601a      	str	r2, [r3, #0]
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	3304      	adds	r3, #4
 80228ce:	60fb      	str	r3, [r7, #12]
 80228d0:	68fb      	ldr	r3, [r7, #12]
 80228d2:	2200      	movs	r2, #0
 80228d4:	601a      	str	r2, [r3, #0]
 80228d6:	68fb      	ldr	r3, [r7, #12]
 80228d8:	3304      	adds	r3, #4
 80228da:	60fb      	str	r3, [r7, #12]
 80228dc:	68fb      	ldr	r3, [r7, #12]
 80228de:	2200      	movs	r2, #0
 80228e0:	601a      	str	r2, [r3, #0]
 80228e2:	68fb      	ldr	r3, [r7, #12]
 80228e4:	3304      	adds	r3, #4
 80228e6:	60fb      	str	r3, [r7, #12]
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	2200      	movs	r2, #0
 80228ec:	601a      	str	r2, [r3, #0]
 80228ee:	68fb      	ldr	r3, [r7, #12]
 80228f0:	3304      	adds	r3, #4
 80228f2:	60fb      	str	r3, [r7, #12]
 80228f4:	68fb      	ldr	r3, [r7, #12]
 80228f6:	2200      	movs	r2, #0
 80228f8:	601a      	str	r2, [r3, #0]
 80228fa:	68fb      	ldr	r3, [r7, #12]
 80228fc:	3304      	adds	r3, #4
 80228fe:	60fb      	str	r3, [r7, #12]
 8022900:	68fb      	ldr	r3, [r7, #12]
 8022902:	2200      	movs	r2, #0
 8022904:	601a      	str	r2, [r3, #0]
 8022906:	68fb      	ldr	r3, [r7, #12]
 8022908:	3304      	adds	r3, #4
 802290a:	60fb      	str	r3, [r7, #12]
        len -= 32;
 802290c:	683b      	ldr	r3, [r7, #0]
 802290e:	3b20      	subs	r3, #32
 8022910:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 8022912:	683b      	ldr	r3, [r7, #0]
 8022914:	2b20      	cmp	r3, #32
 8022916:	d8c9      	bhi.n	80228ac <lv_memset_00+0x50>
    }

    while(len > 4) {
 8022918:	e008      	b.n	802292c <lv_memset_00+0xd0>
        SET32(0);
 802291a:	68fb      	ldr	r3, [r7, #12]
 802291c:	2200      	movs	r2, #0
 802291e:	601a      	str	r2, [r3, #0]
 8022920:	68fb      	ldr	r3, [r7, #12]
 8022922:	3304      	adds	r3, #4
 8022924:	60fb      	str	r3, [r7, #12]
        len -= 4;
 8022926:	683b      	ldr	r3, [r7, #0]
 8022928:	3b04      	subs	r3, #4
 802292a:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 802292c:	683b      	ldr	r3, [r7, #0]
 802292e:	2b04      	cmp	r3, #4
 8022930:	d8f3      	bhi.n	802291a <lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 8022932:	68fb      	ldr	r3, [r7, #12]
 8022934:	617b      	str	r3, [r7, #20]
    while(len) {
 8022936:	e008      	b.n	802294a <lv_memset_00+0xee>
        SET8(0);
 8022938:	697b      	ldr	r3, [r7, #20]
 802293a:	2200      	movs	r2, #0
 802293c:	701a      	strb	r2, [r3, #0]
 802293e:	697b      	ldr	r3, [r7, #20]
 8022940:	3301      	adds	r3, #1
 8022942:	617b      	str	r3, [r7, #20]
        len--;
 8022944:	683b      	ldr	r3, [r7, #0]
 8022946:	3b01      	subs	r3, #1
 8022948:	603b      	str	r3, [r7, #0]
    while(len) {
 802294a:	683b      	ldr	r3, [r7, #0]
 802294c:	2b00      	cmp	r3, #0
 802294e:	d1f3      	bne.n	8022938 <lv_memset_00+0xdc>
    }
}
 8022950:	bf00      	nop
 8022952:	bf00      	nop
 8022954:	371c      	adds	r7, #28
 8022956:	46bd      	mov	sp, r7
 8022958:	f85d 7b04 	ldr.w	r7, [sp], #4
 802295c:	4770      	bx	lr

0802295e <lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_ff(void * dst, size_t len)
{
 802295e:	b480      	push	{r7}
 8022960:	b087      	sub	sp, #28
 8022962:	af00      	add	r7, sp, #0
 8022964:	6078      	str	r0, [r7, #4]
 8022966:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 802296c:	697b      	ldr	r3, [r7, #20]
 802296e:	f003 0303 	and.w	r3, r3, #3
 8022972:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 8022974:	693b      	ldr	r3, [r7, #16]
 8022976:	2b00      	cmp	r3, #0
 8022978:	d016      	beq.n	80229a8 <lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 802297a:	693b      	ldr	r3, [r7, #16]
 802297c:	f1c3 0304 	rsb	r3, r3, #4
 8022980:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 8022982:	e00b      	b.n	802299c <lv_memset_ff+0x3e>
            SET8(0xFF);
 8022984:	697b      	ldr	r3, [r7, #20]
 8022986:	22ff      	movs	r2, #255	; 0xff
 8022988:	701a      	strb	r2, [r3, #0]
 802298a:	697b      	ldr	r3, [r7, #20]
 802298c:	3301      	adds	r3, #1
 802298e:	617b      	str	r3, [r7, #20]
            len--;
 8022990:	683b      	ldr	r3, [r7, #0]
 8022992:	3b01      	subs	r3, #1
 8022994:	603b      	str	r3, [r7, #0]
            d_align--;
 8022996:	693b      	ldr	r3, [r7, #16]
 8022998:	3b01      	subs	r3, #1
 802299a:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802299c:	693b      	ldr	r3, [r7, #16]
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d002      	beq.n	80229a8 <lv_memset_ff+0x4a>
 80229a2:	683b      	ldr	r3, [r7, #0]
 80229a4:	2b00      	cmp	r3, #0
 80229a6:	d1ed      	bne.n	8022984 <lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80229a8:	697b      	ldr	r3, [r7, #20]
 80229aa:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 80229ac:	e03a      	b.n	8022a24 <lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 80229ae:	68fb      	ldr	r3, [r7, #12]
 80229b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80229b4:	601a      	str	r2, [r3, #0]
 80229b6:	68fb      	ldr	r3, [r7, #12]
 80229b8:	3304      	adds	r3, #4
 80229ba:	60fb      	str	r3, [r7, #12]
 80229bc:	68fb      	ldr	r3, [r7, #12]
 80229be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80229c2:	601a      	str	r2, [r3, #0]
 80229c4:	68fb      	ldr	r3, [r7, #12]
 80229c6:	3304      	adds	r3, #4
 80229c8:	60fb      	str	r3, [r7, #12]
 80229ca:	68fb      	ldr	r3, [r7, #12]
 80229cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80229d0:	601a      	str	r2, [r3, #0]
 80229d2:	68fb      	ldr	r3, [r7, #12]
 80229d4:	3304      	adds	r3, #4
 80229d6:	60fb      	str	r3, [r7, #12]
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80229de:	601a      	str	r2, [r3, #0]
 80229e0:	68fb      	ldr	r3, [r7, #12]
 80229e2:	3304      	adds	r3, #4
 80229e4:	60fb      	str	r3, [r7, #12]
 80229e6:	68fb      	ldr	r3, [r7, #12]
 80229e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80229ec:	601a      	str	r2, [r3, #0]
 80229ee:	68fb      	ldr	r3, [r7, #12]
 80229f0:	3304      	adds	r3, #4
 80229f2:	60fb      	str	r3, [r7, #12]
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80229fa:	601a      	str	r2, [r3, #0]
 80229fc:	68fb      	ldr	r3, [r7, #12]
 80229fe:	3304      	adds	r3, #4
 8022a00:	60fb      	str	r3, [r7, #12]
 8022a02:	68fb      	ldr	r3, [r7, #12]
 8022a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022a08:	601a      	str	r2, [r3, #0]
 8022a0a:	68fb      	ldr	r3, [r7, #12]
 8022a0c:	3304      	adds	r3, #4
 8022a0e:	60fb      	str	r3, [r7, #12]
 8022a10:	68fb      	ldr	r3, [r7, #12]
 8022a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022a16:	601a      	str	r2, [r3, #0]
 8022a18:	68fb      	ldr	r3, [r7, #12]
 8022a1a:	3304      	adds	r3, #4
 8022a1c:	60fb      	str	r3, [r7, #12]
        len -= 32;
 8022a1e:	683b      	ldr	r3, [r7, #0]
 8022a20:	3b20      	subs	r3, #32
 8022a22:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 8022a24:	683b      	ldr	r3, [r7, #0]
 8022a26:	2b20      	cmp	r3, #32
 8022a28:	d8c1      	bhi.n	80229ae <lv_memset_ff+0x50>
    }

    while(len > 4) {
 8022a2a:	e009      	b.n	8022a40 <lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 8022a2c:	68fb      	ldr	r3, [r7, #12]
 8022a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022a32:	601a      	str	r2, [r3, #0]
 8022a34:	68fb      	ldr	r3, [r7, #12]
 8022a36:	3304      	adds	r3, #4
 8022a38:	60fb      	str	r3, [r7, #12]
        len -= 4;
 8022a3a:	683b      	ldr	r3, [r7, #0]
 8022a3c:	3b04      	subs	r3, #4
 8022a3e:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 8022a40:	683b      	ldr	r3, [r7, #0]
 8022a42:	2b04      	cmp	r3, #4
 8022a44:	d8f2      	bhi.n	8022a2c <lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 8022a46:	68fb      	ldr	r3, [r7, #12]
 8022a48:	617b      	str	r3, [r7, #20]
    while(len) {
 8022a4a:	e008      	b.n	8022a5e <lv_memset_ff+0x100>
        SET8(0xFF);
 8022a4c:	697b      	ldr	r3, [r7, #20]
 8022a4e:	22ff      	movs	r2, #255	; 0xff
 8022a50:	701a      	strb	r2, [r3, #0]
 8022a52:	697b      	ldr	r3, [r7, #20]
 8022a54:	3301      	adds	r3, #1
 8022a56:	617b      	str	r3, [r7, #20]
        len--;
 8022a58:	683b      	ldr	r3, [r7, #0]
 8022a5a:	3b01      	subs	r3, #1
 8022a5c:	603b      	str	r3, [r7, #0]
    while(len) {
 8022a5e:	683b      	ldr	r3, [r7, #0]
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	d1f3      	bne.n	8022a4c <lv_memset_ff+0xee>
    }
}
 8022a64:	bf00      	nop
 8022a66:	bf00      	nop
 8022a68:	371c      	adds	r7, #28
 8022a6a:	46bd      	mov	sp, r7
 8022a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a70:	4770      	bx	lr

08022a72 <lv_color_make>:
{
 8022a72:	b480      	push	{r7}
 8022a74:	b083      	sub	sp, #12
 8022a76:	af00      	add	r7, sp, #0
 8022a78:	4603      	mov	r3, r0
 8022a7a:	71fb      	strb	r3, [r7, #7]
 8022a7c:	460b      	mov	r3, r1
 8022a7e:	71bb      	strb	r3, [r7, #6]
 8022a80:	4613      	mov	r3, r2
 8022a82:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8022a84:	797b      	ldrb	r3, [r7, #5]
 8022a86:	09db      	lsrs	r3, r3, #7
 8022a88:	b2da      	uxtb	r2, r3
 8022a8a:	79bb      	ldrb	r3, [r7, #6]
 8022a8c:	09db      	lsrs	r3, r3, #7
 8022a8e:	b2db      	uxtb	r3, r3
 8022a90:	4313      	orrs	r3, r2
 8022a92:	b2da      	uxtb	r2, r3
 8022a94:	79fb      	ldrb	r3, [r7, #7]
 8022a96:	09db      	lsrs	r3, r3, #7
 8022a98:	b2db      	uxtb	r3, r3
 8022a9a:	4313      	orrs	r3, r2
 8022a9c:	b2db      	uxtb	r3, r3
}
 8022a9e:	4618      	mov	r0, r3
 8022aa0:	370c      	adds	r7, #12
 8022aa2:	46bd      	mov	sp, r7
 8022aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aa8:	4770      	bx	lr

08022aaa <lv_color_white>:
{
 8022aaa:	b580      	push	{r7, lr}
 8022aac:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8022aae:	22ff      	movs	r2, #255	; 0xff
 8022ab0:	21ff      	movs	r1, #255	; 0xff
 8022ab2:	20ff      	movs	r0, #255	; 0xff
 8022ab4:	f7ff ffdd 	bl	8022a72 <lv_color_make>
 8022ab8:	4603      	mov	r3, r0
}
 8022aba:	4618      	mov	r0, r3
 8022abc:	bd80      	pop	{r7, pc}

08022abe <lv_color_black>:
{
 8022abe:	b580      	push	{r7, lr}
 8022ac0:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8022ac2:	2200      	movs	r2, #0
 8022ac4:	2100      	movs	r1, #0
 8022ac6:	2000      	movs	r0, #0
 8022ac8:	f7ff ffd3 	bl	8022a72 <lv_color_make>
 8022acc:	4603      	mov	r3, r0
}
 8022ace:	4618      	mov	r0, r3
 8022ad0:	bd80      	pop	{r7, pc}

08022ad2 <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8022ad2:	b580      	push	{r7, lr}
 8022ad4:	b08c      	sub	sp, #48	; 0x30
 8022ad6:	af00      	add	r7, sp, #0
 8022ad8:	60f8      	str	r0, [r7, #12]
 8022ada:	460b      	mov	r3, r1
 8022adc:	607a      	str	r2, [r7, #4]
 8022ade:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022ae0:	68fb      	ldr	r3, [r7, #12]
 8022ae2:	891b      	ldrh	r3, [r3, #8]
 8022ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022ae8:	4293      	cmp	r3, r2
 8022aea:	d137      	bne.n	8022b5c <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8022aec:	2300      	movs	r3, #0
 8022aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022af0:	e02c      	b.n	8022b4c <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 8022af2:	68fb      	ldr	r3, [r7, #12]
 8022af4:	685a      	ldr	r2, [r3, #4]
 8022af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022af8:	00db      	lsls	r3, r3, #3
 8022afa:	4413      	add	r3, r2
 8022afc:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8022afe:	697b      	ldr	r3, [r7, #20]
 8022b00:	881b      	ldrh	r3, [r3, #0]
 8022b02:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022b06:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8022b08:	8a7a      	ldrh	r2, [r7, #18]
 8022b0a:	897b      	ldrh	r3, [r7, #10]
 8022b0c:	429a      	cmp	r2, r3
 8022b0e:	d11a      	bne.n	8022b46 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8022b10:	697b      	ldr	r3, [r7, #20]
 8022b12:	881b      	ldrh	r3, [r3, #0]
 8022b14:	b21b      	sxth	r3, r3
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	da01      	bge.n	8022b1e <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 8022b1a:	2302      	movs	r3, #2
 8022b1c:	e098      	b.n	8022c50 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8022b1e:	697b      	ldr	r3, [r7, #20]
 8022b20:	881b      	ldrh	r3, [r3, #0]
 8022b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022b26:	2b00      	cmp	r3, #0
 8022b28:	d007      	beq.n	8022b3a <lv_style_get_prop_inlined+0x68>
 8022b2a:	8a7b      	ldrh	r3, [r7, #18]
 8022b2c:	4618      	mov	r0, r3
 8022b2e:	f000 f9cd 	bl	8022ecc <lv_style_prop_get_default>
 8022b32:	4602      	mov	r2, r0
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	601a      	str	r2, [r3, #0]
 8022b38:	e003      	b.n	8022b42 <lv_style_get_prop_inlined+0x70>
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	697a      	ldr	r2, [r7, #20]
 8022b3e:	6852      	ldr	r2, [r2, #4]
 8022b40:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 8022b42:	2301      	movs	r3, #1
 8022b44:	e084      	b.n	8022c50 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8022b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b48:	3301      	adds	r3, #1
 8022b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022b4c:	68fb      	ldr	r3, [r7, #12]
 8022b4e:	7adb      	ldrb	r3, [r3, #11]
 8022b50:	461a      	mov	r2, r3
 8022b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b54:	4293      	cmp	r3, r2
 8022b56:	d3cc      	bcc.n	8022af2 <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 8022b58:	2300      	movs	r3, #0
 8022b5a:	e079      	b.n	8022c50 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8022b5c:	68fb      	ldr	r3, [r7, #12]
 8022b5e:	7adb      	ldrb	r3, [r3, #11]
 8022b60:	2b00      	cmp	r3, #0
 8022b62:	d101      	bne.n	8022b68 <lv_style_get_prop_inlined+0x96>
 8022b64:	2300      	movs	r3, #0
 8022b66:	e073      	b.n	8022c50 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 8022b68:	68fb      	ldr	r3, [r7, #12]
 8022b6a:	7adb      	ldrb	r3, [r3, #11]
 8022b6c:	2b01      	cmp	r3, #1
 8022b6e:	d948      	bls.n	8022c02 <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022b70:	68fb      	ldr	r3, [r7, #12]
 8022b72:	685a      	ldr	r2, [r3, #4]
 8022b74:	68fb      	ldr	r3, [r7, #12]
 8022b76:	7adb      	ldrb	r3, [r3, #11]
 8022b78:	009b      	lsls	r3, r3, #2
 8022b7a:	4413      	add	r3, r2
 8022b7c:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 8022b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b80:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8022b82:	2300      	movs	r3, #0
 8022b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8022b86:	e035      	b.n	8022bf4 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8022b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b8a:	005b      	lsls	r3, r3, #1
 8022b8c:	6a3a      	ldr	r2, [r7, #32]
 8022b8e:	4413      	add	r3, r2
 8022b90:	881b      	ldrh	r3, [r3, #0]
 8022b92:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022b96:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 8022b98:	8bfa      	ldrh	r2, [r7, #30]
 8022b9a:	897b      	ldrh	r3, [r7, #10]
 8022b9c:	429a      	cmp	r2, r3
 8022b9e:	d126      	bne.n	8022bee <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8022ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ba2:	005b      	lsls	r3, r3, #1
 8022ba4:	6a3a      	ldr	r2, [r7, #32]
 8022ba6:	4413      	add	r3, r2
 8022ba8:	881b      	ldrh	r3, [r3, #0]
 8022baa:	b21b      	sxth	r3, r3
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	da01      	bge.n	8022bb4 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8022bb0:	2302      	movs	r3, #2
 8022bb2:	e04d      	b.n	8022c50 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8022bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bb6:	005b      	lsls	r3, r3, #1
 8022bb8:	6a3a      	ldr	r2, [r7, #32]
 8022bba:	4413      	add	r3, r2
 8022bbc:	881b      	ldrh	r3, [r3, #0]
 8022bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022bc2:	2b00      	cmp	r3, #0
 8022bc4:	d007      	beq.n	8022bd6 <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8022bc6:	8bfb      	ldrh	r3, [r7, #30]
 8022bc8:	4618      	mov	r0, r3
 8022bca:	f000 f97f 	bl	8022ecc <lv_style_prop_get_default>
 8022bce:	4602      	mov	r2, r0
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	601a      	str	r2, [r3, #0]
 8022bd4:	e009      	b.n	8022bea <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8022bd6:	68fb      	ldr	r3, [r7, #12]
 8022bd8:	685b      	ldr	r3, [r3, #4]
 8022bda:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 8022bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bde:	009b      	lsls	r3, r3, #2
 8022be0:	69ba      	ldr	r2, [r7, #24]
 8022be2:	441a      	add	r2, r3
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	6812      	ldr	r2, [r2, #0]
 8022be8:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 8022bea:	2301      	movs	r3, #1
 8022bec:	e030      	b.n	8022c50 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8022bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bf0:	3301      	adds	r3, #1
 8022bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8022bf4:	68fb      	ldr	r3, [r7, #12]
 8022bf6:	7adb      	ldrb	r3, [r3, #11]
 8022bf8:	461a      	mov	r2, r3
 8022bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bfc:	4293      	cmp	r3, r2
 8022bfe:	d3c3      	bcc.n	8022b88 <lv_style_get_prop_inlined+0xb6>
 8022c00:	e025      	b.n	8022c4e <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8022c02:	68fb      	ldr	r3, [r7, #12]
 8022c04:	891b      	ldrh	r3, [r3, #8]
 8022c06:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022c0a:	897b      	ldrh	r3, [r7, #10]
 8022c0c:	429a      	cmp	r2, r3
 8022c0e:	d11e      	bne.n	8022c4e <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	891b      	ldrh	r3, [r3, #8]
 8022c14:	b21b      	sxth	r3, r3
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	da01      	bge.n	8022c1e <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 8022c1a:	2302      	movs	r3, #2
 8022c1c:	e018      	b.n	8022c50 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8022c1e:	68fb      	ldr	r3, [r7, #12]
 8022c20:	891b      	ldrh	r3, [r3, #8]
 8022c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	d00b      	beq.n	8022c42 <lv_style_get_prop_inlined+0x170>
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	891b      	ldrh	r3, [r3, #8]
 8022c2e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022c32:	b29b      	uxth	r3, r3
 8022c34:	4618      	mov	r0, r3
 8022c36:	f000 f949 	bl	8022ecc <lv_style_prop_get_default>
 8022c3a:	4602      	mov	r2, r0
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	601a      	str	r2, [r3, #0]
 8022c40:	e003      	b.n	8022c4a <lv_style_get_prop_inlined+0x178>
 8022c42:	687b      	ldr	r3, [r7, #4]
 8022c44:	68fa      	ldr	r2, [r7, #12]
 8022c46:	6852      	ldr	r2, [r2, #4]
 8022c48:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 8022c4a:	2301      	movs	r3, #1
 8022c4c:	e000      	b.n	8022c50 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 8022c4e:	2300      	movs	r3, #0
}
 8022c50:	4618      	mov	r0, r3
 8022c52:	3730      	adds	r7, #48	; 0x30
 8022c54:	46bd      	mov	sp, r7
 8022c56:	bd80      	pop	{r7, pc}

08022c58 <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
 8022c58:	b580      	push	{r7, lr}
 8022c5a:	b082      	sub	sp, #8
 8022c5c:	af00      	add	r7, sp, #0
 8022c5e:	6078      	str	r0, [r7, #4]
#if LV_USE_ASSERT_STYLE
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
 8022c60:	687b      	ldr	r3, [r7, #4]
 8022c62:	681b      	ldr	r3, [r3, #0]
 8022c64:	4a06      	ldr	r2, [pc, #24]	; (8022c80 <lv_style_init+0x28>)
 8022c66:	4293      	cmp	r3, r2
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8022c68:	210c      	movs	r1, #12
 8022c6a:	6878      	ldr	r0, [r7, #4]
 8022c6c:	f7ff fdf6 	bl	802285c <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	4a03      	ldr	r2, [pc, #12]	; (8022c80 <lv_style_init+0x28>)
 8022c74:	601a      	str	r2, [r3, #0]
#endif
}
 8022c76:	bf00      	nop
 8022c78:	3708      	adds	r7, #8
 8022c7a:	46bd      	mov	sp, r7
 8022c7c:	bd80      	pop	{r7, pc}
 8022c7e:	bf00      	nop
 8022c80:	aabbccdd 	.word	0xaabbccdd

08022c84 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
 8022c84:	b580      	push	{r7, lr}
 8022c86:	b082      	sub	sp, #8
 8022c88:	af00      	add	r7, sp, #0
 8022c8a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	d100      	bne.n	8022c94 <lv_style_reset+0x10>
 8022c92:	e7fe      	b.n	8022c92 <lv_style_reset+0xe>
 8022c94:	687b      	ldr	r3, [r7, #4]
 8022c96:	681b      	ldr	r3, [r3, #0]
 8022c98:	4a0f      	ldr	r2, [pc, #60]	; (8022cd8 <lv_style_reset+0x54>)
 8022c9a:	4293      	cmp	r3, r2
 8022c9c:	d000      	beq.n	8022ca0 <lv_style_reset+0x1c>
 8022c9e:	e7fe      	b.n	8022c9e <lv_style_reset+0x1a>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	891b      	ldrh	r3, [r3, #8]
 8022ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022ca8:	4293      	cmp	r3, r2
 8022caa:	d010      	beq.n	8022cce <lv_style_reset+0x4a>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8022cac:	687b      	ldr	r3, [r7, #4]
 8022cae:	7adb      	ldrb	r3, [r3, #11]
 8022cb0:	2b01      	cmp	r3, #1
 8022cb2:	d904      	bls.n	8022cbe <lv_style_reset+0x3a>
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	685b      	ldr	r3, [r3, #4]
 8022cb8:	4618      	mov	r0, r3
 8022cba:	f7ff f9cb 	bl	8022054 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8022cbe:	210c      	movs	r1, #12
 8022cc0:	6878      	ldr	r0, [r7, #4]
 8022cc2:	f7ff fdcb 	bl	802285c <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	4a03      	ldr	r2, [pc, #12]	; (8022cd8 <lv_style_reset+0x54>)
 8022cca:	601a      	str	r2, [r3, #0]
 8022ccc:	e000      	b.n	8022cd0 <lv_style_reset+0x4c>
        return;
 8022cce:	bf00      	nop
#endif
}
 8022cd0:	3708      	adds	r7, #8
 8022cd2:	46bd      	mov	sp, r7
 8022cd4:	bd80      	pop	{r7, pc}
 8022cd6:	bf00      	nop
 8022cd8:	aabbccdd 	.word	0xaabbccdd

08022cdc <lv_style_remove_prop>:
{
    return last_custom_prop_id - _LV_STYLE_LAST_BUILT_IN_PROP;
}

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8022cdc:	b580      	push	{r7, lr}
 8022cde:	b08c      	sub	sp, #48	; 0x30
 8022ce0:	af00      	add	r7, sp, #0
 8022ce2:	6078      	str	r0, [r7, #4]
 8022ce4:	460b      	mov	r3, r1
 8022ce6:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	2b00      	cmp	r3, #0
 8022cec:	d100      	bne.n	8022cf0 <lv_style_remove_prop+0x14>
 8022cee:	e7fe      	b.n	8022cee <lv_style_remove_prop+0x12>
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	681b      	ldr	r3, [r3, #0]
 8022cf4:	4a61      	ldr	r2, [pc, #388]	; (8022e7c <lv_style_remove_prop+0x1a0>)
 8022cf6:	4293      	cmp	r3, r2
 8022cf8:	d000      	beq.n	8022cfc <lv_style_remove_prop+0x20>
 8022cfa:	e7fe      	b.n	8022cfa <lv_style_remove_prop+0x1e>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	891b      	ldrh	r3, [r3, #8]
 8022d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022d04:	4293      	cmp	r3, r2
 8022d06:	d101      	bne.n	8022d0c <lv_style_remove_prop+0x30>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
 8022d08:	2300      	movs	r3, #0
 8022d0a:	e0b2      	b.n	8022e72 <lv_style_remove_prop+0x196>
    }

    if(style->prop_cnt == 0)  return false;
 8022d0c:	687b      	ldr	r3, [r7, #4]
 8022d0e:	7adb      	ldrb	r3, [r3, #11]
 8022d10:	2b00      	cmp	r3, #0
 8022d12:	d101      	bne.n	8022d18 <lv_style_remove_prop+0x3c>
 8022d14:	2300      	movs	r3, #0
 8022d16:	e0ac      	b.n	8022e72 <lv_style_remove_prop+0x196>

    if(style->prop_cnt == 1) {
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	7adb      	ldrb	r3, [r3, #11]
 8022d1c:	2b01      	cmp	r3, #1
 8022d1e:	d110      	bne.n	8022d42 <lv_style_remove_prop+0x66>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	891b      	ldrh	r3, [r3, #8]
 8022d24:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022d28:	887b      	ldrh	r3, [r7, #2]
 8022d2a:	429a      	cmp	r2, r3
 8022d2c:	d107      	bne.n	8022d3e <lv_style_remove_prop+0x62>
            style->prop1 = LV_STYLE_PROP_INV;
 8022d2e:	687b      	ldr	r3, [r7, #4]
 8022d30:	2200      	movs	r2, #0
 8022d32:	811a      	strh	r2, [r3, #8]
            style->prop_cnt = 0;
 8022d34:	687b      	ldr	r3, [r7, #4]
 8022d36:	2200      	movs	r2, #0
 8022d38:	72da      	strb	r2, [r3, #11]
            return true;
 8022d3a:	2301      	movs	r3, #1
 8022d3c:	e099      	b.n	8022e72 <lv_style_remove_prop+0x196>
        }
        return false;
 8022d3e:	2300      	movs	r3, #0
 8022d40:	e097      	b.n	8022e72 <lv_style_remove_prop+0x196>
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022d42:	687b      	ldr	r3, [r7, #4]
 8022d44:	685a      	ldr	r2, [r3, #4]
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	7adb      	ldrb	r3, [r3, #11]
 8022d4a:	009b      	lsls	r3, r3, #2
 8022d4c:	4413      	add	r3, r2
 8022d4e:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t * old_props = (uint16_t *)tmp;
 8022d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d52:	623b      	str	r3, [r7, #32]
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
 8022d54:	2300      	movs	r3, #0
 8022d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022d58:	e083      	b.n	8022e62 <lv_style_remove_prop+0x186>
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8022d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d5c:	005b      	lsls	r3, r3, #1
 8022d5e:	6a3a      	ldr	r2, [r7, #32]
 8022d60:	4413      	add	r3, r2
 8022d62:	881b      	ldrh	r3, [r3, #0]
 8022d64:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8022d68:	887b      	ldrh	r3, [r7, #2]
 8022d6a:	429a      	cmp	r2, r3
 8022d6c:	d176      	bne.n	8022e5c <lv_style_remove_prop+0x180>
            lv_style_value_t * old_values = (lv_style_value_t *)style->v_p.values_and_props;
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	685b      	ldr	r3, [r3, #4]
 8022d72:	61fb      	str	r3, [r7, #28]

            if(style->prop_cnt == 2) {
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	7adb      	ldrb	r3, [r3, #11]
 8022d78:	2b02      	cmp	r3, #2
 8022d7a:	d119      	bne.n	8022db0 <lv_style_remove_prop+0xd4>
                style->prop_cnt = 1;
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	2201      	movs	r2, #1
 8022d80:	72da      	strb	r2, [r3, #11]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8022d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	d102      	bne.n	8022d8e <lv_style_remove_prop+0xb2>
 8022d88:	6a3b      	ldr	r3, [r7, #32]
 8022d8a:	885b      	ldrh	r3, [r3, #2]
 8022d8c:	e001      	b.n	8022d92 <lv_style_remove_prop+0xb6>
 8022d8e:	6a3b      	ldr	r3, [r7, #32]
 8022d90:	881b      	ldrh	r3, [r3, #0]
 8022d92:	687a      	ldr	r2, [r7, #4]
 8022d94:	8113      	strh	r3, [r2, #8]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8022d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	d104      	bne.n	8022da6 <lv_style_remove_prop+0xca>
 8022d9c:	687b      	ldr	r3, [r7, #4]
 8022d9e:	69fa      	ldr	r2, [r7, #28]
 8022da0:	6852      	ldr	r2, [r2, #4]
 8022da2:	605a      	str	r2, [r3, #4]
 8022da4:	e055      	b.n	8022e52 <lv_style_remove_prop+0x176>
 8022da6:	687b      	ldr	r3, [r7, #4]
 8022da8:	69fa      	ldr	r2, [r7, #28]
 8022daa:	6812      	ldr	r2, [r2, #0]
 8022dac:	605a      	str	r2, [r3, #4]
 8022dae:	e050      	b.n	8022e52 <lv_style_remove_prop+0x176>
            }
            else {
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8022db0:	687b      	ldr	r3, [r7, #4]
 8022db2:	7adb      	ldrb	r3, [r3, #11]
 8022db4:	3b01      	subs	r3, #1
 8022db6:	461a      	mov	r2, r3
 8022db8:	4613      	mov	r3, r2
 8022dba:	005b      	lsls	r3, r3, #1
 8022dbc:	4413      	add	r3, r2
 8022dbe:	005b      	lsls	r3, r3, #1
 8022dc0:	61bb      	str	r3, [r7, #24]
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8022dc2:	69b8      	ldr	r0, [r7, #24]
 8022dc4:	f7ff f916 	bl	8021ff4 <lv_mem_alloc>
 8022dc8:	6178      	str	r0, [r7, #20]
                if(new_values_and_props == NULL) return false;
 8022dca:	697b      	ldr	r3, [r7, #20]
 8022dcc:	2b00      	cmp	r3, #0
 8022dce:	d101      	bne.n	8022dd4 <lv_style_remove_prop+0xf8>
 8022dd0:	2300      	movs	r3, #0
 8022dd2:	e04e      	b.n	8022e72 <lv_style_remove_prop+0x196>
                style->v_p.values_and_props = new_values_and_props;
 8022dd4:	687b      	ldr	r3, [r7, #4]
 8022dd6:	697a      	ldr	r2, [r7, #20]
 8022dd8:	605a      	str	r2, [r3, #4]
                style->prop_cnt--;
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	7adb      	ldrb	r3, [r3, #11]
 8022dde:	3b01      	subs	r3, #1
 8022de0:	b2da      	uxtb	r2, r3
 8022de2:	687b      	ldr	r3, [r7, #4]
 8022de4:	72da      	strb	r2, [r3, #11]

                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022de6:	687b      	ldr	r3, [r7, #4]
 8022de8:	7adb      	ldrb	r3, [r3, #11]
 8022dea:	009b      	lsls	r3, r3, #2
 8022dec:	697a      	ldr	r2, [r7, #20]
 8022dee:	4413      	add	r3, r2
 8022df0:	627b      	str	r3, [r7, #36]	; 0x24
                uint16_t * new_props = (uint16_t *)tmp;
 8022df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022df4:	613b      	str	r3, [r7, #16]
                lv_style_value_t * new_values = (lv_style_value_t *)new_values_and_props;
 8022df6:	697b      	ldr	r3, [r7, #20]
 8022df8:	60fb      	str	r3, [r7, #12]

                uint32_t j;
                for(i = j = 0; j <= style->prop_cnt;
 8022dfa:	2300      	movs	r3, #0
 8022dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8022dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022e02:	e020      	b.n	8022e46 <lv_style_remove_prop+0x16a>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
                    if(old_props[j] != prop) {
 8022e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e06:	005b      	lsls	r3, r3, #1
 8022e08:	6a3a      	ldr	r2, [r7, #32]
 8022e0a:	4413      	add	r3, r2
 8022e0c:	881b      	ldrh	r3, [r3, #0]
 8022e0e:	887a      	ldrh	r2, [r7, #2]
 8022e10:	429a      	cmp	r2, r3
 8022e12:	d015      	beq.n	8022e40 <lv_style_remove_prop+0x164>
                        new_values[i] = old_values[j];
 8022e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e16:	009b      	lsls	r3, r3, #2
 8022e18:	69fa      	ldr	r2, [r7, #28]
 8022e1a:	441a      	add	r2, r3
 8022e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e1e:	009b      	lsls	r3, r3, #2
 8022e20:	68f9      	ldr	r1, [r7, #12]
 8022e22:	440b      	add	r3, r1
 8022e24:	6812      	ldr	r2, [r2, #0]
 8022e26:	601a      	str	r2, [r3, #0]
                        new_props[i++] = old_props[j];
 8022e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e2a:	005b      	lsls	r3, r3, #1
 8022e2c:	6a3a      	ldr	r2, [r7, #32]
 8022e2e:	441a      	add	r2, r3
 8022e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e32:	1c59      	adds	r1, r3, #1
 8022e34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8022e36:	005b      	lsls	r3, r3, #1
 8022e38:	6939      	ldr	r1, [r7, #16]
 8022e3a:	440b      	add	r3, r1
 8022e3c:	8812      	ldrh	r2, [r2, #0]
 8022e3e:	801a      	strh	r2, [r3, #0]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8022e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e42:	3301      	adds	r3, #1
 8022e44:	62bb      	str	r3, [r7, #40]	; 0x28
                for(i = j = 0; j <= style->prop_cnt;
 8022e46:	687b      	ldr	r3, [r7, #4]
 8022e48:	7adb      	ldrb	r3, [r3, #11]
 8022e4a:	461a      	mov	r2, r3
 8022e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e4e:	4293      	cmp	r3, r2
 8022e50:	d9d8      	bls.n	8022e04 <lv_style_remove_prop+0x128>
                    }
                }
            }

            lv_mem_free(old_values);
 8022e52:	69f8      	ldr	r0, [r7, #28]
 8022e54:	f7ff f8fe 	bl	8022054 <lv_mem_free>
            return true;
 8022e58:	2301      	movs	r3, #1
 8022e5a:	e00a      	b.n	8022e72 <lv_style_remove_prop+0x196>
    for(i = 0; i < style->prop_cnt; i++) {
 8022e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e5e:	3301      	adds	r3, #1
 8022e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022e62:	687b      	ldr	r3, [r7, #4]
 8022e64:	7adb      	ldrb	r3, [r3, #11]
 8022e66:	461a      	mov	r2, r3
 8022e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e6a:	4293      	cmp	r3, r2
 8022e6c:	f4ff af75 	bcc.w	8022d5a <lv_style_remove_prop+0x7e>
        }
    }

    return false;
 8022e70:	2300      	movs	r3, #0
}
 8022e72:	4618      	mov	r0, r3
 8022e74:	3730      	adds	r7, #48	; 0x30
 8022e76:	46bd      	mov	sp, r7
 8022e78:	bd80      	pop	{r7, pc}
 8022e7a:	bf00      	nop
 8022e7c:	aabbccdd 	.word	0xaabbccdd

08022e80 <lv_style_set_prop>:

void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
{
 8022e80:	b580      	push	{r7, lr}
 8022e82:	b084      	sub	sp, #16
 8022e84:	af00      	add	r7, sp, #0
 8022e86:	60f8      	str	r0, [r7, #12]
 8022e88:	460b      	mov	r3, r1
 8022e8a:	607a      	str	r2, [r7, #4]
 8022e8c:	817b      	strh	r3, [r7, #10]
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 8022e8e:	8979      	ldrh	r1, [r7, #10]
 8022e90:	4b04      	ldr	r3, [pc, #16]	; (8022ea4 <lv_style_set_prop+0x24>)
 8022e92:	687a      	ldr	r2, [r7, #4]
 8022e94:	68f8      	ldr	r0, [r7, #12]
 8022e96:	f000 f9a5 	bl	80231e4 <lv_style_set_prop_internal>
}
 8022e9a:	bf00      	nop
 8022e9c:	3710      	adds	r7, #16
 8022e9e:	46bd      	mov	sp, r7
 8022ea0:	bd80      	pop	{r7, pc}
 8022ea2:	bf00      	nop
 8022ea4:	080231bd 	.word	0x080231bd

08022ea8 <lv_style_get_prop>:
{
    lv_style_set_prop_internal(style, prop | meta, null_style_value, lv_style_set_prop_meta_helper);
}

lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 8022ea8:	b580      	push	{r7, lr}
 8022eaa:	b084      	sub	sp, #16
 8022eac:	af00      	add	r7, sp, #0
 8022eae:	60f8      	str	r0, [r7, #12]
 8022eb0:	460b      	mov	r3, r1
 8022eb2:	607a      	str	r2, [r7, #4]
 8022eb4:	817b      	strh	r3, [r7, #10]
    return lv_style_get_prop_inlined(style, prop, value);
 8022eb6:	897b      	ldrh	r3, [r7, #10]
 8022eb8:	687a      	ldr	r2, [r7, #4]
 8022eba:	4619      	mov	r1, r3
 8022ebc:	68f8      	ldr	r0, [r7, #12]
 8022ebe:	f7ff fe08 	bl	8022ad2 <lv_style_get_prop_inlined>
 8022ec2:	4603      	mov	r3, r0
}
 8022ec4:	4618      	mov	r0, r3
 8022ec6:	3710      	adds	r7, #16
 8022ec8:	46bd      	mov	sp, r7
 8022eca:	bd80      	pop	{r7, pc}

08022ecc <lv_style_prop_get_default>:
    LV_UNUSED(user_data);
#endif
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
 8022ecc:	b580      	push	{r7, lr}
 8022ece:	b084      	sub	sp, #16
 8022ed0:	af00      	add	r7, sp, #0
 8022ed2:	4603      	mov	r3, r0
 8022ed4:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value;
    switch(prop) {
 8022ed6:	88fb      	ldrh	r3, [r7, #6]
 8022ed8:	3b03      	subs	r3, #3
 8022eda:	2b69      	cmp	r3, #105	; 0x69
 8022edc:	f200 80f4 	bhi.w	80230c8 <lv_style_prop_get_default+0x1fc>
 8022ee0:	a201      	add	r2, pc, #4	; (adr r2, 8022ee8 <lv_style_prop_get_default+0x1c>)
 8022ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022ee6:	bf00      	nop
 8022ee8:	080230c1 	.word	0x080230c1
 8022eec:	080230c9 	.word	0x080230c9
 8022ef0:	080230c9 	.word	0x080230c9
 8022ef4:	080230c1 	.word	0x080230c1
 8022ef8:	080230c9 	.word	0x080230c9
 8022efc:	080230c9 	.word	0x080230c9
 8022f00:	080230c9 	.word	0x080230c9
 8022f04:	080230c9 	.word	0x080230c9
 8022f08:	080230c9 	.word	0x080230c9
 8022f0c:	080230c9 	.word	0x080230c9
 8022f10:	080230c9 	.word	0x080230c9
 8022f14:	080230c9 	.word	0x080230c9
 8022f18:	080230c9 	.word	0x080230c9
 8022f1c:	080230c9 	.word	0x080230c9
 8022f20:	080230c9 	.word	0x080230c9
 8022f24:	080230c9 	.word	0x080230c9
 8022f28:	080230c9 	.word	0x080230c9
 8022f2c:	080230c9 	.word	0x080230c9
 8022f30:	080230c9 	.word	0x080230c9
 8022f34:	080230c9 	.word	0x080230c9
 8022f38:	080230c9 	.word	0x080230c9
 8022f3c:	080230c9 	.word	0x080230c9
 8022f40:	080230c9 	.word	0x080230c9
 8022f44:	080230c9 	.word	0x080230c9
 8022f48:	080230c9 	.word	0x080230c9
 8022f4c:	080230c9 	.word	0x080230c9
 8022f50:	080230c9 	.word	0x080230c9
 8022f54:	080230c9 	.word	0x080230c9
 8022f58:	080230c9 	.word	0x080230c9
 8022f5c:	08023099 	.word	0x08023099
 8022f60:	080230c9 	.word	0x080230c9
 8022f64:	080230a1 	.word	0x080230a1
 8022f68:	080230c9 	.word	0x080230c9
 8022f6c:	080230c9 	.word	0x080230c9
 8022f70:	080230af 	.word	0x080230af
 8022f74:	080230c9 	.word	0x080230c9
 8022f78:	080230c9 	.word	0x080230c9
 8022f7c:	080230c9 	.word	0x080230c9
 8022f80:	080230a9 	.word	0x080230a9
 8022f84:	080230c9 	.word	0x080230c9
 8022f88:	080230c9 	.word	0x080230c9
 8022f8c:	080230c9 	.word	0x080230c9
 8022f90:	080230c9 	.word	0x080230c9
 8022f94:	080230c9 	.word	0x080230c9
 8022f98:	080230c9 	.word	0x080230c9
 8022f9c:	080230a1 	.word	0x080230a1
 8022fa0:	080230a9 	.word	0x080230a9
 8022fa4:	080230c9 	.word	0x080230c9
 8022fa8:	080230b5 	.word	0x080230b5
 8022fac:	080230c9 	.word	0x080230c9
 8022fb0:	080230c9 	.word	0x080230c9
 8022fb4:	080230a1 	.word	0x080230a1
 8022fb8:	080230a9 	.word	0x080230a9
 8022fbc:	080230c9 	.word	0x080230c9
 8022fc0:	080230c9 	.word	0x080230c9
 8022fc4:	080230c9 	.word	0x080230c9
 8022fc8:	080230c9 	.word	0x080230c9
 8022fcc:	080230c9 	.word	0x080230c9
 8022fd0:	080230c9 	.word	0x080230c9
 8022fd4:	080230c9 	.word	0x080230c9
 8022fd8:	080230c9 	.word	0x080230c9
 8022fdc:	080230c9 	.word	0x080230c9
 8022fe0:	080230c9 	.word	0x080230c9
 8022fe4:	080230c9 	.word	0x080230c9
 8022fe8:	080230c9 	.word	0x080230c9
 8022fec:	080230a1 	.word	0x080230a1
 8022ff0:	080230a9 	.word	0x080230a9
 8022ff4:	080230a9 	.word	0x080230a9
 8022ff8:	080230a1 	.word	0x080230a1
 8022ffc:	080230c9 	.word	0x080230c9
 8023000:	080230c9 	.word	0x080230c9
 8023004:	080230c9 	.word	0x080230c9
 8023008:	080230c9 	.word	0x080230c9
 802300c:	080230c9 	.word	0x080230c9
 8023010:	080230a1 	.word	0x080230a1
 8023014:	080230a9 	.word	0x080230a9
 8023018:	080230c9 	.word	0x080230c9
 802301c:	080230c9 	.word	0x080230c9
 8023020:	080230c9 	.word	0x080230c9
 8023024:	080230a1 	.word	0x080230a1
 8023028:	080230a9 	.word	0x080230a9
 802302c:	080230c9 	.word	0x080230c9
 8023030:	080230a1 	.word	0x080230a1
 8023034:	080230a9 	.word	0x080230a9
 8023038:	080230bb 	.word	0x080230bb
 802303c:	080230c9 	.word	0x080230c9
 8023040:	080230c9 	.word	0x080230c9
 8023044:	080230c9 	.word	0x080230c9
 8023048:	080230c9 	.word	0x080230c9
 802304c:	080230c9 	.word	0x080230c9
 8023050:	080230c9 	.word	0x080230c9
 8023054:	080230c9 	.word	0x080230c9
 8023058:	080230c9 	.word	0x080230c9
 802305c:	080230a9 	.word	0x080230a9
 8023060:	080230c9 	.word	0x080230c9
 8023064:	080230c9 	.word	0x080230c9
 8023068:	080230c9 	.word	0x080230c9
 802306c:	080230c9 	.word	0x080230c9
 8023070:	080230c9 	.word	0x080230c9
 8023074:	080230c9 	.word	0x080230c9
 8023078:	080230c9 	.word	0x080230c9
 802307c:	080230c9 	.word	0x080230c9
 8023080:	080230c9 	.word	0x080230c9
 8023084:	080230c9 	.word	0x080230c9
 8023088:	080230c9 	.word	0x080230c9
 802308c:	08023091 	.word	0x08023091
        case LV_STYLE_TRANSFORM_ZOOM:
            value.num = LV_IMG_ZOOM_NONE;
 8023090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023094:	60fb      	str	r3, [r7, #12]
            break;
 8023096:	e01c      	b.n	80230d2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_COLOR:
            value.color = lv_color_white();
 8023098:	f7ff fd07 	bl	8022aaa <lv_color_white>
 802309c:	7338      	strb	r0, [r7, #12]
            break;
 802309e:	e018      	b.n	80230d2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_OUTLINE_COLOR:
        case LV_STYLE_ARC_COLOR:
        case LV_STYLE_LINE_COLOR:
        case LV_STYLE_TEXT_COLOR:
        case LV_STYLE_IMG_RECOLOR:
            value.color = lv_color_black();
 80230a0:	f7ff fd0d 	bl	8022abe <lv_color_black>
 80230a4:	7338      	strb	r0, [r7, #12]
            break;
 80230a6:	e014      	b.n	80230d2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 80230a8:	23ff      	movs	r3, #255	; 0xff
 80230aa:	60fb      	str	r3, [r7, #12]
            break;
 80230ac:	e011      	b.n	80230d2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_GRAD_STOP:
            value.num = 255;
 80230ae:	23ff      	movs	r3, #255	; 0xff
 80230b0:	60fb      	str	r3, [r7, #12]
            break;
 80230b2:	e00e      	b.n	80230d2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BORDER_SIDE:
            value.num = LV_BORDER_SIDE_FULL;
 80230b4:	230f      	movs	r3, #15
 80230b6:	60fb      	str	r3, [r7, #12]
            break;
 80230b8:	e00b      	b.n	80230d2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_TEXT_FONT:
            value.ptr = LV_FONT_DEFAULT;
 80230ba:	4b08      	ldr	r3, [pc, #32]	; (80230dc <lv_style_prop_get_default+0x210>)
 80230bc:	60fb      	str	r3, [r7, #12]
            break;
 80230be:	e008      	b.n	80230d2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
 80230c0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80230c4:	60fb      	str	r3, [r7, #12]
            break;
 80230c6:	e004      	b.n	80230d2 <lv_style_prop_get_default+0x206>
        default:
            value.ptr = NULL;
 80230c8:	2300      	movs	r3, #0
 80230ca:	60fb      	str	r3, [r7, #12]
            value.num = 0;
 80230cc:	2300      	movs	r3, #0
 80230ce:	60fb      	str	r3, [r7, #12]
            break;
 80230d0:	bf00      	nop
    }

    return value;
 80230d2:	68fb      	ldr	r3, [r7, #12]
}
 80230d4:	4618      	mov	r0, r3
 80230d6:	3710      	adds	r7, #16
 80230d8:	46bd      	mov	sp, r7
 80230da:	bd80      	pop	{r7, pc}
 80230dc:	0802db98 	.word	0x0802db98

080230e0 <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
 80230e0:	b480      	push	{r7}
 80230e2:	b083      	sub	sp, #12
 80230e4:	af00      	add	r7, sp, #0
 80230e6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 80230e8:	687b      	ldr	r3, [r7, #4]
 80230ea:	2b00      	cmp	r3, #0
 80230ec:	d100      	bne.n	80230f0 <lv_style_is_empty+0x10>
 80230ee:	e7fe      	b.n	80230ee <lv_style_is_empty+0xe>
 80230f0:	687b      	ldr	r3, [r7, #4]
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	4a08      	ldr	r2, [pc, #32]	; (8023118 <lv_style_is_empty+0x38>)
 80230f6:	4293      	cmp	r3, r2
 80230f8:	d000      	beq.n	80230fc <lv_style_is_empty+0x1c>
 80230fa:	e7fe      	b.n	80230fa <lv_style_is_empty+0x1a>

    return style->prop_cnt == 0 ? true : false;
 80230fc:	687b      	ldr	r3, [r7, #4]
 80230fe:	7adb      	ldrb	r3, [r3, #11]
 8023100:	2b00      	cmp	r3, #0
 8023102:	bf0c      	ite	eq
 8023104:	2301      	moveq	r3, #1
 8023106:	2300      	movne	r3, #0
 8023108:	b2db      	uxtb	r3, r3
}
 802310a:	4618      	mov	r0, r3
 802310c:	370c      	adds	r7, #12
 802310e:	46bd      	mov	sp, r7
 8023110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023114:	4770      	bx	lr
 8023116:	bf00      	nop
 8023118:	aabbccdd 	.word	0xaabbccdd

0802311c <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
 802311c:	b480      	push	{r7}
 802311e:	b085      	sub	sp, #20
 8023120:	af00      	add	r7, sp, #0
 8023122:	4603      	mov	r3, r0
 8023124:	80fb      	strh	r3, [r7, #6]
    uint16_t group = (prop & 0x1FF) >> 4;
 8023126:	88fb      	ldrh	r3, [r7, #6]
 8023128:	111b      	asrs	r3, r3, #4
 802312a:	b29b      	uxth	r3, r3
 802312c:	f003 031f 	and.w	r3, r3, #31
 8023130:	81fb      	strh	r3, [r7, #14]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8023132:	89fb      	ldrh	r3, [r7, #14]
 8023134:	2b07      	cmp	r3, #7
 8023136:	d901      	bls.n	802313c <_lv_style_get_prop_group+0x20>
 8023138:	2307      	movs	r3, #7
 802313a:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)group;
 802313c:	89fb      	ldrh	r3, [r7, #14]
 802313e:	b2db      	uxtb	r3, r3
}
 8023140:	4618      	mov	r0, r3
 8023142:	3714      	adds	r7, #20
 8023144:	46bd      	mov	sp, r7
 8023146:	f85d 7b04 	ldr.w	r7, [sp], #4
 802314a:	4770      	bx	lr

0802314c <_lv_style_prop_lookup_flags>:

uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop)
{
 802314c:	b480      	push	{r7}
 802314e:	b083      	sub	sp, #12
 8023150:	af00      	add	r7, sp, #0
 8023152:	4603      	mov	r3, r0
 8023154:	80fb      	strh	r3, [r7, #6]
    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    extern uint32_t _lv_style_custom_prop_flag_lookup_table_size;
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8023156:	88fb      	ldrh	r3, [r7, #6]
 8023158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802315c:	4293      	cmp	r3, r2
 802315e:	d101      	bne.n	8023164 <_lv_style_prop_lookup_flags+0x18>
 8023160:	231f      	movs	r3, #31
 8023162:	e01e      	b.n	80231a2 <_lv_style_prop_lookup_flags+0x56>
    if(prop == LV_STYLE_PROP_INV) return 0;
 8023164:	88fb      	ldrh	r3, [r7, #6]
 8023166:	2b00      	cmp	r3, #0
 8023168:	d101      	bne.n	802316e <_lv_style_prop_lookup_flags+0x22>
 802316a:	2300      	movs	r3, #0
 802316c:	e019      	b.n	80231a2 <_lv_style_prop_lookup_flags+0x56>

    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 802316e:	88fb      	ldrh	r3, [r7, #6]
 8023170:	2b6f      	cmp	r3, #111	; 0x6f
 8023172:	d803      	bhi.n	802317c <_lv_style_prop_lookup_flags+0x30>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 8023174:	88fb      	ldrh	r3, [r7, #6]
 8023176:	4a0e      	ldr	r2, [pc, #56]	; (80231b0 <_lv_style_prop_lookup_flags+0x64>)
 8023178:	5cd3      	ldrb	r3, [r2, r3]
 802317a:	e012      	b.n	80231a2 <_lv_style_prop_lookup_flags+0x56>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 802317c:	88fb      	ldrh	r3, [r7, #6]
 802317e:	3b70      	subs	r3, #112	; 0x70
 8023180:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8023182:	4b0c      	ldr	r3, [pc, #48]	; (80231b4 <_lv_style_prop_lookup_flags+0x68>)
 8023184:	681b      	ldr	r3, [r3, #0]
 8023186:	2b00      	cmp	r3, #0
 8023188:	d00a      	beq.n	80231a0 <_lv_style_prop_lookup_flags+0x54>
 802318a:	88fa      	ldrh	r2, [r7, #6]
 802318c:	4b0a      	ldr	r3, [pc, #40]	; (80231b8 <_lv_style_prop_lookup_flags+0x6c>)
 802318e:	681b      	ldr	r3, [r3, #0]
 8023190:	429a      	cmp	r2, r3
 8023192:	d205      	bcs.n	80231a0 <_lv_style_prop_lookup_flags+0x54>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 8023194:	4b07      	ldr	r3, [pc, #28]	; (80231b4 <_lv_style_prop_lookup_flags+0x68>)
 8023196:	681a      	ldr	r2, [r3, #0]
 8023198:	88fb      	ldrh	r3, [r7, #6]
 802319a:	4413      	add	r3, r2
 802319c:	781b      	ldrb	r3, [r3, #0]
 802319e:	e000      	b.n	80231a2 <_lv_style_prop_lookup_flags+0x56>
    return 0;
 80231a0:	2300      	movs	r3, #0
}
 80231a2:	4618      	mov	r0, r3
 80231a4:	370c      	adds	r7, #12
 80231a6:	46bd      	mov	sp, r7
 80231a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231ac:	4770      	bx	lr
 80231ae:	bf00      	nop
 80231b0:	0802dc80 	.word	0x0802dc80
 80231b4:	20000a54 	.word	0x20000a54
 80231b8:	2000ca64 	.word	0x2000ca64

080231bc <lv_style_set_prop_helper>:
 *   STATIC FUNCTIONS
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
 80231bc:	b480      	push	{r7}
 80231be:	b085      	sub	sp, #20
 80231c0:	af00      	add	r7, sp, #0
 80231c2:	60b9      	str	r1, [r7, #8]
 80231c4:	607a      	str	r2, [r7, #4]
 80231c6:	603b      	str	r3, [r7, #0]
 80231c8:	4603      	mov	r3, r0
 80231ca:	81fb      	strh	r3, [r7, #14]
    *prop_storage = prop;
 80231cc:	687b      	ldr	r3, [r7, #4]
 80231ce:	89fa      	ldrh	r2, [r7, #14]
 80231d0:	801a      	strh	r2, [r3, #0]
    *value_storage = value;
 80231d2:	683b      	ldr	r3, [r7, #0]
 80231d4:	68ba      	ldr	r2, [r7, #8]
 80231d6:	601a      	str	r2, [r3, #0]
}
 80231d8:	bf00      	nop
 80231da:	3714      	adds	r7, #20
 80231dc:	46bd      	mov	sp, r7
 80231de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231e2:	4770      	bx	lr

080231e4 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 80231e4:	b590      	push	{r4, r7, lr}
 80231e6:	b095      	sub	sp, #84	; 0x54
 80231e8:	af00      	add	r7, sp, #0
 80231ea:	60f8      	str	r0, [r7, #12]
 80231ec:	607a      	str	r2, [r7, #4]
 80231ee:	603b      	str	r3, [r7, #0]
 80231f0:	460b      	mov	r3, r1
 80231f2:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);
 80231f4:	68fb      	ldr	r3, [r7, #12]
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	d100      	bne.n	80231fc <lv_style_set_prop_internal+0x18>
 80231fa:	e7fe      	b.n	80231fa <lv_style_set_prop_internal+0x16>
 80231fc:	68fb      	ldr	r3, [r7, #12]
 80231fe:	681b      	ldr	r3, [r3, #0]
 8023200:	4a8b      	ldr	r2, [pc, #556]	; (8023430 <lv_style_set_prop_internal+0x24c>)
 8023202:	4293      	cmp	r3, r2
 8023204:	d000      	beq.n	8023208 <lv_style_set_prop_internal+0x24>
 8023206:	e7fe      	b.n	8023206 <lv_style_set_prop_internal+0x22>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8023208:	68fb      	ldr	r3, [r7, #12]
 802320a:	891b      	ldrh	r3, [r3, #8]
 802320c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023210:	4293      	cmp	r3, r2
 8023212:	f000 8104 	beq.w	802341e <lv_style_set_prop_internal+0x23a>
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8023216:	897b      	ldrh	r3, [r7, #10]
 8023218:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802321c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    if(style->prop_cnt > 1) {
 8023220:	68fb      	ldr	r3, [r7, #12]
 8023222:	7adb      	ldrb	r3, [r3, #11]
 8023224:	2b01      	cmp	r3, #1
 8023226:	f240 808d 	bls.w	8023344 <lv_style_set_prop_internal+0x160>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802322a:	68fb      	ldr	r3, [r7, #12]
 802322c:	685a      	ldr	r2, [r3, #4]
 802322e:	68fb      	ldr	r3, [r7, #12]
 8023230:	7adb      	ldrb	r3, [r3, #11]
 8023232:	009b      	lsls	r3, r3, #2
 8023234:	4413      	add	r3, r2
 8023236:	633b      	str	r3, [r7, #48]	; 0x30
        uint16_t * props = (uint16_t *)tmp;
 8023238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802323a:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 802323c:	68fb      	ldr	r3, [r7, #12]
 802323e:	7adb      	ldrb	r3, [r3, #11]
 8023240:	3b01      	subs	r3, #1
 8023242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023244:	e01e      	b.n	8023284 <lv_style_set_prop_internal+0xa0>
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8023246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023248:	005b      	lsls	r3, r3, #1
 802324a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802324c:	4413      	add	r3, r2
 802324e:	881b      	ldrh	r3, [r3, #0]
 8023250:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8023254:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8023258:	429a      	cmp	r2, r3
 802325a:	d110      	bne.n	802327e <lv_style_set_prop_internal+0x9a>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 802325c:	68fb      	ldr	r3, [r7, #12]
 802325e:	685b      	ldr	r3, [r3, #4]
 8023260:	61fb      	str	r3, [r7, #28]
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8023262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023264:	005b      	lsls	r3, r3, #1
 8023266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023268:	18d1      	adds	r1, r2, r3
 802326a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802326c:	009b      	lsls	r3, r3, #2
 802326e:	69fa      	ldr	r2, [r7, #28]
 8023270:	4413      	add	r3, r2
 8023272:	8978      	ldrh	r0, [r7, #10]
 8023274:	683c      	ldr	r4, [r7, #0]
 8023276:	460a      	mov	r2, r1
 8023278:	6879      	ldr	r1, [r7, #4]
 802327a:	47a0      	blx	r4
                return;
 802327c:	e0d4      	b.n	8023428 <lv_style_set_prop_internal+0x244>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 802327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023280:	3b01      	subs	r3, #1
 8023282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023286:	2b00      	cmp	r3, #0
 8023288:	dadd      	bge.n	8023246 <lv_style_set_prop_internal+0x62>
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 802328a:	68fb      	ldr	r3, [r7, #12]
 802328c:	7adb      	ldrb	r3, [r3, #11]
 802328e:	3301      	adds	r3, #1
 8023290:	461a      	mov	r2, r3
 8023292:	4613      	mov	r3, r2
 8023294:	005b      	lsls	r3, r3, #1
 8023296:	4413      	add	r3, r2
 8023298:	005b      	lsls	r3, r3, #1
 802329a:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 802329c:	68fb      	ldr	r3, [r7, #12]
 802329e:	685b      	ldr	r3, [r3, #4]
 80232a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80232a2:	4618      	mov	r0, r3
 80232a4:	f7fe ff04 	bl	80220b0 <lv_mem_realloc>
 80232a8:	6278      	str	r0, [r7, #36]	; 0x24
        if(values_and_props == NULL) return;
 80232aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	f000 80b8 	beq.w	8023422 <lv_style_set_prop_internal+0x23e>
        style->v_p.values_and_props = values_and_props;
 80232b2:	68fb      	ldr	r3, [r7, #12]
 80232b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80232b6:	605a      	str	r2, [r3, #4]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80232b8:	68fb      	ldr	r3, [r7, #12]
 80232ba:	7adb      	ldrb	r3, [r3, #11]
 80232bc:	009b      	lsls	r3, r3, #2
 80232be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80232c0:	4413      	add	r3, r2
 80232c2:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 80232c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80232c8:	68fb      	ldr	r3, [r7, #12]
 80232ca:	7adb      	ldrb	r3, [r3, #11]
 80232cc:	3b01      	subs	r3, #1
 80232ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80232d0:	e00d      	b.n	80232ee <lv_style_set_prop_internal+0x10a>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 80232d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80232d4:	005b      	lsls	r3, r3, #1
 80232d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80232d8:	441a      	add	r2, r3
 80232da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80232dc:	3302      	adds	r3, #2
 80232de:	005b      	lsls	r3, r3, #1
 80232e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80232e2:	440b      	add	r3, r1
 80232e4:	8812      	ldrh	r2, [r2, #0]
 80232e6:	801a      	strh	r2, [r3, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80232e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80232ea:	3b01      	subs	r3, #1
 80232ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80232ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80232f0:	2b00      	cmp	r3, #0
 80232f2:	daee      	bge.n	80232d2 <lv_style_set_prop_internal+0xee>
        }
        style->prop_cnt++;
 80232f4:	68fb      	ldr	r3, [r7, #12]
 80232f6:	7adb      	ldrb	r3, [r3, #11]
 80232f8:	3301      	adds	r3, #1
 80232fa:	b2da      	uxtb	r2, r3
 80232fc:	68fb      	ldr	r3, [r7, #12]
 80232fe:	72da      	strb	r2, [r3, #11]

        /*Go to the new position wit the props*/
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8023300:	68fb      	ldr	r3, [r7, #12]
 8023302:	7adb      	ldrb	r3, [r3, #11]
 8023304:	009b      	lsls	r3, r3, #2
 8023306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023308:	4413      	add	r3, r2
 802330a:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 802330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802330e:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 8023310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023312:	623b      	str	r3, [r7, #32]

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8023314:	68fb      	ldr	r3, [r7, #12]
 8023316:	7adb      	ldrb	r3, [r3, #11]
 8023318:	461a      	mov	r2, r3
 802331a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802331e:	4413      	add	r3, r2
 8023320:	005b      	lsls	r3, r3, #1
 8023322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023324:	18d1      	adds	r1, r2, r3
 8023326:	68fb      	ldr	r3, [r7, #12]
 8023328:	7adb      	ldrb	r3, [r3, #11]
 802332a:	461a      	mov	r2, r3
 802332c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8023330:	4413      	add	r3, r2
 8023332:	009b      	lsls	r3, r3, #2
 8023334:	6a3a      	ldr	r2, [r7, #32]
 8023336:	4413      	add	r3, r2
 8023338:	8978      	ldrh	r0, [r7, #10]
 802333a:	683c      	ldr	r4, [r7, #0]
 802333c:	460a      	mov	r2, r1
 802333e:	6879      	ldr	r1, [r7, #4]
 8023340:	47a0      	blx	r4
 8023342:	e057      	b.n	80233f4 <lv_style_set_prop_internal+0x210>
    }
    else if(style->prop_cnt == 1) {
 8023344:	68fb      	ldr	r3, [r7, #12]
 8023346:	7adb      	ldrb	r3, [r3, #11]
 8023348:	2b01      	cmp	r3, #1
 802334a:	d147      	bne.n	80233dc <lv_style_set_prop_internal+0x1f8>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 802334c:	68fb      	ldr	r3, [r7, #12]
 802334e:	891b      	ldrh	r3, [r3, #8]
 8023350:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8023354:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8023358:	429a      	cmp	r2, r3
 802335a:	d109      	bne.n	8023370 <lv_style_set_prop_internal+0x18c>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 802335c:	68fb      	ldr	r3, [r7, #12]
 802335e:	f103 0208 	add.w	r2, r3, #8
 8023362:	68fb      	ldr	r3, [r7, #12]
 8023364:	3304      	adds	r3, #4
 8023366:	8978      	ldrh	r0, [r7, #10]
 8023368:	683c      	ldr	r4, [r7, #0]
 802336a:	6879      	ldr	r1, [r7, #4]
 802336c:	47a0      	blx	r4
            return;
 802336e:	e05b      	b.n	8023428 <lv_style_set_prop_internal+0x244>
        }
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8023370:	68fb      	ldr	r3, [r7, #12]
 8023372:	7adb      	ldrb	r3, [r3, #11]
 8023374:	3301      	adds	r3, #1
 8023376:	461a      	mov	r2, r3
 8023378:	4613      	mov	r3, r2
 802337a:	005b      	lsls	r3, r3, #1
 802337c:	4413      	add	r3, r2
 802337e:	005b      	lsls	r3, r3, #1
 8023380:	647b      	str	r3, [r7, #68]	; 0x44
        uint8_t * values_and_props = lv_mem_alloc(size);
 8023382:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8023384:	f7fe fe36 	bl	8021ff4 <lv_mem_alloc>
 8023388:	6438      	str	r0, [r7, #64]	; 0x40
        if(values_and_props == NULL) return;
 802338a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802338c:	2b00      	cmp	r3, #0
 802338e:	d04a      	beq.n	8023426 <lv_style_set_prop_internal+0x242>
        lv_style_value_t value_tmp = style->v_p.value1;
 8023390:	68fb      	ldr	r3, [r7, #12]
 8023392:	685b      	ldr	r3, [r3, #4]
 8023394:	617b      	str	r3, [r7, #20]
        style->v_p.values_and_props = values_and_props;
 8023396:	68fb      	ldr	r3, [r7, #12]
 8023398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802339a:	605a      	str	r2, [r3, #4]
        style->prop_cnt++;
 802339c:	68fb      	ldr	r3, [r7, #12]
 802339e:	7adb      	ldrb	r3, [r3, #11]
 80233a0:	3301      	adds	r3, #1
 80233a2:	b2da      	uxtb	r2, r3
 80233a4:	68fb      	ldr	r3, [r7, #12]
 80233a6:	72da      	strb	r2, [r3, #11]

        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80233a8:	68fb      	ldr	r3, [r7, #12]
 80233aa:	7adb      	ldrb	r3, [r3, #11]
 80233ac:	009b      	lsls	r3, r3, #2
 80233ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80233b0:	4413      	add	r3, r2
 80233b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint16_t * props = (uint16_t *)tmp;
 80233b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80233b6:	63bb      	str	r3, [r7, #56]	; 0x38
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 80233b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80233ba:	637b      	str	r3, [r7, #52]	; 0x34
        props[0] = style->prop1;
 80233bc:	68fb      	ldr	r3, [r7, #12]
 80233be:	891a      	ldrh	r2, [r3, #8]
 80233c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233c2:	801a      	strh	r2, [r3, #0]
        values[0] = value_tmp;
 80233c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80233c6:	697a      	ldr	r2, [r7, #20]
 80233c8:	601a      	str	r2, [r3, #0]
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 80233ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233cc:	1c9a      	adds	r2, r3, #2
 80233ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80233d0:	3304      	adds	r3, #4
 80233d2:	8978      	ldrh	r0, [r7, #10]
 80233d4:	683c      	ldr	r4, [r7, #0]
 80233d6:	6879      	ldr	r1, [r7, #4]
 80233d8:	47a0      	blx	r4
 80233da:	e00b      	b.n	80233f4 <lv_style_set_prop_internal+0x210>
    }
    else {
        style->prop_cnt = 1;
 80233dc:	68fb      	ldr	r3, [r7, #12]
 80233de:	2201      	movs	r2, #1
 80233e0:	72da      	strb	r2, [r3, #11]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 80233e2:	68fb      	ldr	r3, [r7, #12]
 80233e4:	f103 0208 	add.w	r2, r3, #8
 80233e8:	68fb      	ldr	r3, [r7, #12]
 80233ea:	3304      	adds	r3, #4
 80233ec:	8978      	ldrh	r0, [r7, #10]
 80233ee:	683c      	ldr	r4, [r7, #0]
 80233f0:	6879      	ldr	r1, [r7, #4]
 80233f2:	47a0      	blx	r4
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 80233f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80233f8:	4618      	mov	r0, r3
 80233fa:	f7ff fe8f 	bl	802311c <_lv_style_get_prop_group>
 80233fe:	4603      	mov	r3, r0
 8023400:	76fb      	strb	r3, [r7, #27]
    style->has_group |= 1 << group;
 8023402:	68fb      	ldr	r3, [r7, #12]
 8023404:	7a9b      	ldrb	r3, [r3, #10]
 8023406:	b25a      	sxtb	r2, r3
 8023408:	7efb      	ldrb	r3, [r7, #27]
 802340a:	2101      	movs	r1, #1
 802340c:	fa01 f303 	lsl.w	r3, r1, r3
 8023410:	b25b      	sxtb	r3, r3
 8023412:	4313      	orrs	r3, r2
 8023414:	b25b      	sxtb	r3, r3
 8023416:	b2da      	uxtb	r2, r3
 8023418:	68fb      	ldr	r3, [r7, #12]
 802341a:	729a      	strb	r2, [r3, #10]
 802341c:	e004      	b.n	8023428 <lv_style_set_prop_internal+0x244>
        return;
 802341e:	bf00      	nop
 8023420:	e002      	b.n	8023428 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8023422:	bf00      	nop
 8023424:	e000      	b.n	8023428 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8023426:	bf00      	nop
}
 8023428:	3754      	adds	r7, #84	; 0x54
 802342a:	46bd      	mov	sp, r7
 802342c:	bd90      	pop	{r4, r7, pc}
 802342e:	bf00      	nop
 8023430:	aabbccdd 	.word	0xaabbccdd

08023434 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8023434:	b580      	push	{r7, lr}
 8023436:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8023438:	2118      	movs	r1, #24
 802343a:	4804      	ldr	r0, [pc, #16]	; (802344c <_lv_timer_core_init+0x18>)
 802343c:	f7fe fb3d 	bl	8021aba <_lv_ll_init>

    /*Initially enable the lv_timer handling*/
    lv_timer_enable(true);
 8023440:	2001      	movs	r0, #1
 8023442:	f000 f94d 	bl	80236e0 <lv_timer_enable>
}
 8023446:	bf00      	nop
 8023448:	bd80      	pop	{r7, pc}
 802344a:	bf00      	nop
 802344c:	2000084c 	.word	0x2000084c

08023450 <lv_timer_handler>:
/**
 * Call it periodically to handle lv_timers.
 * @return the time after which it must be called again
 */
LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler(void)
{
 8023450:	b580      	push	{r7, lr}
 8023452:	b086      	sub	sp, #24
 8023454:	af00      	add	r7, sp, #0
    TIMER_TRACE("begin");

    /*Avoid concurrent running of the timer handler*/
    static bool already_running = false;
    if(already_running) {
 8023456:	4b59      	ldr	r3, [pc, #356]	; (80235bc <lv_timer_handler+0x16c>)
 8023458:	781b      	ldrb	r3, [r3, #0]
 802345a:	2b00      	cmp	r3, #0
 802345c:	d001      	beq.n	8023462 <lv_timer_handler+0x12>
        TIMER_TRACE("already running, concurrent calls are not allow, returning");
        return 1;
 802345e:	2301      	movs	r3, #1
 8023460:	e0a7      	b.n	80235b2 <lv_timer_handler+0x162>
    }
    already_running = true;
 8023462:	4b56      	ldr	r3, [pc, #344]	; (80235bc <lv_timer_handler+0x16c>)
 8023464:	2201      	movs	r2, #1
 8023466:	701a      	strb	r2, [r3, #0]

    if(lv_timer_run == false) {
 8023468:	4b55      	ldr	r3, [pc, #340]	; (80235c0 <lv_timer_handler+0x170>)
 802346a:	781b      	ldrb	r3, [r3, #0]
 802346c:	f083 0301 	eor.w	r3, r3, #1
 8023470:	b2db      	uxtb	r3, r3
 8023472:	2b00      	cmp	r3, #0
 8023474:	d004      	beq.n	8023480 <lv_timer_handler+0x30>
        already_running = false; /*Release mutex*/
 8023476:	4b51      	ldr	r3, [pc, #324]	; (80235bc <lv_timer_handler+0x16c>)
 8023478:	2200      	movs	r2, #0
 802347a:	701a      	strb	r2, [r3, #0]
        return 1;
 802347c:	2301      	movs	r3, #1
 802347e:	e098      	b.n	80235b2 <lv_timer_handler+0x162>
    }

    static uint32_t idle_period_start = 0;
    static uint32_t busy_time         = 0;

    uint32_t handler_start = lv_tick_get();
 8023480:	f7fc fe28 	bl	80200d4 <lv_tick_get>
 8023484:	60f8      	str	r0, [r7, #12]

    if(handler_start == 0) {
 8023486:	68fb      	ldr	r3, [r7, #12]
 8023488:	2b00      	cmp	r3, #0
 802348a:	d10b      	bne.n	80234a4 <lv_timer_handler+0x54>
        static uint32_t run_cnt = 0;
        run_cnt++;
 802348c:	4b4d      	ldr	r3, [pc, #308]	; (80235c4 <lv_timer_handler+0x174>)
 802348e:	681b      	ldr	r3, [r3, #0]
 8023490:	3301      	adds	r3, #1
 8023492:	4a4c      	ldr	r2, [pc, #304]	; (80235c4 <lv_timer_handler+0x174>)
 8023494:	6013      	str	r3, [r2, #0]
        if(run_cnt > 100) {
 8023496:	4b4b      	ldr	r3, [pc, #300]	; (80235c4 <lv_timer_handler+0x174>)
 8023498:	681b      	ldr	r3, [r3, #0]
 802349a:	2b64      	cmp	r3, #100	; 0x64
 802349c:	d902      	bls.n	80234a4 <lv_timer_handler+0x54>
            run_cnt = 0;
 802349e:	4b49      	ldr	r3, [pc, #292]	; (80235c4 <lv_timer_handler+0x174>)
 80234a0:	2200      	movs	r2, #0
 80234a2:	601a      	str	r2, [r3, #0]
    }

    /*Run all timer from the list*/
    lv_timer_t * next;
    do {
        timer_deleted             = false;
 80234a4:	4b48      	ldr	r3, [pc, #288]	; (80235c8 <lv_timer_handler+0x178>)
 80234a6:	2200      	movs	r2, #0
 80234a8:	701a      	strb	r2, [r3, #0]
        timer_created             = false;
 80234aa:	4b48      	ldr	r3, [pc, #288]	; (80235cc <lv_timer_handler+0x17c>)
 80234ac:	2200      	movs	r2, #0
 80234ae:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 80234b0:	4847      	ldr	r0, [pc, #284]	; (80235d0 <lv_timer_handler+0x180>)
 80234b2:	f7fe fbe0 	bl	8021c76 <_lv_ll_get_head>
 80234b6:	4603      	mov	r3, r0
 80234b8:	4a46      	ldr	r2, [pc, #280]	; (80235d4 <lv_timer_handler+0x184>)
 80234ba:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 80234bc:	e019      	b.n	80234f2 <lv_timer_handler+0xa2>
            /*The timer might be deleted if it runs only once ('repeat_count = 1')
             *So get next element until the current is surely valid*/
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 80234be:	4b45      	ldr	r3, [pc, #276]	; (80235d4 <lv_timer_handler+0x184>)
 80234c0:	681b      	ldr	r3, [r3, #0]
 80234c2:	4619      	mov	r1, r3
 80234c4:	4842      	ldr	r0, [pc, #264]	; (80235d0 <lv_timer_handler+0x180>)
 80234c6:	f7fe fbf8 	bl	8021cba <_lv_ll_get_next>
 80234ca:	6178      	str	r0, [r7, #20]

            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 80234cc:	4b41      	ldr	r3, [pc, #260]	; (80235d4 <lv_timer_handler+0x184>)
 80234ce:	681b      	ldr	r3, [r3, #0]
 80234d0:	4618      	mov	r0, r3
 80234d2:	f000 f915 	bl	8023700 <lv_timer_exec>
 80234d6:	4603      	mov	r3, r0
 80234d8:	2b00      	cmp	r3, #0
 80234da:	d007      	beq.n	80234ec <lv_timer_handler+0x9c>
                /*If a timer was created or deleted then this or the next item might be corrupted*/
                if(timer_created || timer_deleted) {
 80234dc:	4b3b      	ldr	r3, [pc, #236]	; (80235cc <lv_timer_handler+0x17c>)
 80234de:	781b      	ldrb	r3, [r3, #0]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d10a      	bne.n	80234fa <lv_timer_handler+0xaa>
 80234e4:	4b38      	ldr	r3, [pc, #224]	; (80235c8 <lv_timer_handler+0x178>)
 80234e6:	781b      	ldrb	r3, [r3, #0]
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d106      	bne.n	80234fa <lv_timer_handler+0xaa>
                    TIMER_TRACE("Start from the first timer again because a timer was created or deleted");
                    break;
                }
            }

            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 80234ec:	4a39      	ldr	r2, [pc, #228]	; (80235d4 <lv_timer_handler+0x184>)
 80234ee:	697b      	ldr	r3, [r7, #20]
 80234f0:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 80234f2:	4b38      	ldr	r3, [pc, #224]	; (80235d4 <lv_timer_handler+0x184>)
 80234f4:	681b      	ldr	r3, [r3, #0]
 80234f6:	2b00      	cmp	r3, #0
 80234f8:	d1e1      	bne.n	80234be <lv_timer_handler+0x6e>
        }
    } while(LV_GC_ROOT(_lv_timer_act));
 80234fa:	4b36      	ldr	r3, [pc, #216]	; (80235d4 <lv_timer_handler+0x184>)
 80234fc:	681b      	ldr	r3, [r3, #0]
 80234fe:	2b00      	cmp	r3, #0
 8023500:	d1d0      	bne.n	80234a4 <lv_timer_handler+0x54>

    uint32_t time_till_next = LV_NO_TIMER_READY;
 8023502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023506:	613b      	str	r3, [r7, #16]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8023508:	4831      	ldr	r0, [pc, #196]	; (80235d0 <lv_timer_handler+0x180>)
 802350a:	f7fe fbb4 	bl	8021c76 <_lv_ll_get_head>
 802350e:	6178      	str	r0, [r7, #20]
    while(next) {
 8023510:	e015      	b.n	802353e <lv_timer_handler+0xee>
        if(!next->paused) {
 8023512:	697b      	ldr	r3, [r7, #20]
 8023514:	7d1b      	ldrb	r3, [r3, #20]
 8023516:	f003 0301 	and.w	r3, r3, #1
 802351a:	b2db      	uxtb	r3, r3
 802351c:	2b00      	cmp	r3, #0
 802351e:	d109      	bne.n	8023534 <lv_timer_handler+0xe4>
            uint32_t delay = lv_timer_time_remaining(next);
 8023520:	6978      	ldr	r0, [r7, #20]
 8023522:	f000 f935 	bl	8023790 <lv_timer_time_remaining>
 8023526:	6078      	str	r0, [r7, #4]
            if(delay < time_till_next)
 8023528:	687a      	ldr	r2, [r7, #4]
 802352a:	693b      	ldr	r3, [r7, #16]
 802352c:	429a      	cmp	r2, r3
 802352e:	d201      	bcs.n	8023534 <lv_timer_handler+0xe4>
                time_till_next = delay;
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	613b      	str	r3, [r7, #16]
        }

        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8023534:	6979      	ldr	r1, [r7, #20]
 8023536:	4826      	ldr	r0, [pc, #152]	; (80235d0 <lv_timer_handler+0x180>)
 8023538:	f7fe fbbf 	bl	8021cba <_lv_ll_get_next>
 802353c:	6178      	str	r0, [r7, #20]
    while(next) {
 802353e:	697b      	ldr	r3, [r7, #20]
 8023540:	2b00      	cmp	r3, #0
 8023542:	d1e6      	bne.n	8023512 <lv_timer_handler+0xc2>
    }

    busy_time += lv_tick_elaps(handler_start);
 8023544:	68f8      	ldr	r0, [r7, #12]
 8023546:	f7fc fddf 	bl	8020108 <lv_tick_elaps>
 802354a:	4602      	mov	r2, r0
 802354c:	4b22      	ldr	r3, [pc, #136]	; (80235d8 <lv_timer_handler+0x188>)
 802354e:	681b      	ldr	r3, [r3, #0]
 8023550:	4413      	add	r3, r2
 8023552:	4a21      	ldr	r2, [pc, #132]	; (80235d8 <lv_timer_handler+0x188>)
 8023554:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8023556:	4b21      	ldr	r3, [pc, #132]	; (80235dc <lv_timer_handler+0x18c>)
 8023558:	681b      	ldr	r3, [r3, #0]
 802355a:	4618      	mov	r0, r3
 802355c:	f7fc fdd4 	bl	8020108 <lv_tick_elaps>
 8023560:	60b8      	str	r0, [r7, #8]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8023562:	68bb      	ldr	r3, [r7, #8]
 8023564:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8023568:	d31f      	bcc.n	80235aa <lv_timer_handler+0x15a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 802356a:	4b1b      	ldr	r3, [pc, #108]	; (80235d8 <lv_timer_handler+0x188>)
 802356c:	681b      	ldr	r3, [r3, #0]
 802356e:	2264      	movs	r2, #100	; 0x64
 8023570:	fb03 f202 	mul.w	r2, r3, r2
 8023574:	68bb      	ldr	r3, [r7, #8]
 8023576:	fbb2 f3f3 	udiv	r3, r2, r3
 802357a:	b2da      	uxtb	r2, r3
 802357c:	4b18      	ldr	r3, [pc, #96]	; (80235e0 <lv_timer_handler+0x190>)
 802357e:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8023580:	4b17      	ldr	r3, [pc, #92]	; (80235e0 <lv_timer_handler+0x190>)
 8023582:	781b      	ldrb	r3, [r3, #0]
 8023584:	2b64      	cmp	r3, #100	; 0x64
 8023586:	d805      	bhi.n	8023594 <lv_timer_handler+0x144>
 8023588:	4b15      	ldr	r3, [pc, #84]	; (80235e0 <lv_timer_handler+0x190>)
 802358a:	781b      	ldrb	r3, [r3, #0]
 802358c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8023590:	b2db      	uxtb	r3, r3
 8023592:	e000      	b.n	8023596 <lv_timer_handler+0x146>
 8023594:	2300      	movs	r3, #0
 8023596:	4a12      	ldr	r2, [pc, #72]	; (80235e0 <lv_timer_handler+0x190>)
 8023598:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 802359a:	4b0f      	ldr	r3, [pc, #60]	; (80235d8 <lv_timer_handler+0x188>)
 802359c:	2200      	movs	r2, #0
 802359e:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 80235a0:	f7fc fd98 	bl	80200d4 <lv_tick_get>
 80235a4:	4603      	mov	r3, r0
 80235a6:	4a0d      	ldr	r2, [pc, #52]	; (80235dc <lv_timer_handler+0x18c>)
 80235a8:	6013      	str	r3, [r2, #0]
    }

    already_running = false; /*Release the mutex*/
 80235aa:	4b04      	ldr	r3, [pc, #16]	; (80235bc <lv_timer_handler+0x16c>)
 80235ac:	2200      	movs	r2, #0
 80235ae:	701a      	strb	r2, [r3, #0]

    TIMER_TRACE("finished (%d ms until the next timer call)", time_till_next);
    return time_till_next;
 80235b0:	693b      	ldr	r3, [r7, #16]
}
 80235b2:	4618      	mov	r0, r3
 80235b4:	3718      	adds	r7, #24
 80235b6:	46bd      	mov	sp, r7
 80235b8:	bd80      	pop	{r7, pc}
 80235ba:	bf00      	nop
 80235bc:	2000ca6c 	.word	0x2000ca6c
 80235c0:	2000ca68 	.word	0x2000ca68
 80235c4:	2000ca70 	.word	0x2000ca70
 80235c8:	2000ca6a 	.word	0x2000ca6a
 80235cc:	2000ca6b 	.word	0x2000ca6b
 80235d0:	2000084c 	.word	0x2000084c
 80235d4:	200008dc 	.word	0x200008dc
 80235d8:	2000ca74 	.word	0x2000ca74
 80235dc:	2000ca78 	.word	0x2000ca78
 80235e0:	2000ca69 	.word	0x2000ca69

080235e4 <lv_timer_create>:
 * @param period call period in ms unit
 * @param user_data custom parameter
 * @return pointer to the new timer
 */
lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * user_data)
{
 80235e4:	b580      	push	{r7, lr}
 80235e6:	b086      	sub	sp, #24
 80235e8:	af00      	add	r7, sp, #0
 80235ea:	60f8      	str	r0, [r7, #12]
 80235ec:	60b9      	str	r1, [r7, #8]
 80235ee:	607a      	str	r2, [r7, #4]
    lv_timer_t * new_timer = NULL;
 80235f0:	2300      	movs	r3, #0
 80235f2:	617b      	str	r3, [r7, #20]

    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 80235f4:	4815      	ldr	r0, [pc, #84]	; (802364c <lv_timer_create+0x68>)
 80235f6:	f7fe fa79 	bl	8021aec <_lv_ll_ins_head>
 80235fa:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(new_timer);
 80235fc:	697b      	ldr	r3, [r7, #20]
 80235fe:	2b00      	cmp	r3, #0
 8023600:	d100      	bne.n	8023604 <lv_timer_create+0x20>
 8023602:	e7fe      	b.n	8023602 <lv_timer_create+0x1e>
    if(new_timer == NULL) return NULL;
 8023604:	697b      	ldr	r3, [r7, #20]
 8023606:	2b00      	cmp	r3, #0
 8023608:	d101      	bne.n	802360e <lv_timer_create+0x2a>
 802360a:	2300      	movs	r3, #0
 802360c:	e01a      	b.n	8023644 <lv_timer_create+0x60>

    new_timer->period = period;
 802360e:	697b      	ldr	r3, [r7, #20]
 8023610:	68ba      	ldr	r2, [r7, #8]
 8023612:	601a      	str	r2, [r3, #0]
    new_timer->timer_cb = timer_xcb;
 8023614:	697b      	ldr	r3, [r7, #20]
 8023616:	68fa      	ldr	r2, [r7, #12]
 8023618:	609a      	str	r2, [r3, #8]
    new_timer->repeat_count = -1;
 802361a:	697b      	ldr	r3, [r7, #20]
 802361c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023620:	611a      	str	r2, [r3, #16]
    new_timer->paused = 0;
 8023622:	697a      	ldr	r2, [r7, #20]
 8023624:	7d13      	ldrb	r3, [r2, #20]
 8023626:	f36f 0300 	bfc	r3, #0, #1
 802362a:	7513      	strb	r3, [r2, #20]
    new_timer->last_run = lv_tick_get();
 802362c:	f7fc fd52 	bl	80200d4 <lv_tick_get>
 8023630:	4602      	mov	r2, r0
 8023632:	697b      	ldr	r3, [r7, #20]
 8023634:	605a      	str	r2, [r3, #4]
    new_timer->user_data = user_data;
 8023636:	697b      	ldr	r3, [r7, #20]
 8023638:	687a      	ldr	r2, [r7, #4]
 802363a:	60da      	str	r2, [r3, #12]

    timer_created = true;
 802363c:	4b04      	ldr	r3, [pc, #16]	; (8023650 <lv_timer_create+0x6c>)
 802363e:	2201      	movs	r2, #1
 8023640:	701a      	strb	r2, [r3, #0]

    return new_timer;
 8023642:	697b      	ldr	r3, [r7, #20]
}
 8023644:	4618      	mov	r0, r3
 8023646:	3718      	adds	r7, #24
 8023648:	46bd      	mov	sp, r7
 802364a:	bd80      	pop	{r7, pc}
 802364c:	2000084c 	.word	0x2000084c
 8023650:	2000ca6b 	.word	0x2000ca6b

08023654 <lv_timer_del>:
/**
 * Delete a lv_timer
 * @param timer pointer to timer created by timer
 */
void lv_timer_del(lv_timer_t * timer)
{
 8023654:	b580      	push	{r7, lr}
 8023656:	b082      	sub	sp, #8
 8023658:	af00      	add	r7, sp, #0
 802365a:	6078      	str	r0, [r7, #4]
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 802365c:	6879      	ldr	r1, [r7, #4]
 802365e:	4806      	ldr	r0, [pc, #24]	; (8023678 <lv_timer_del+0x24>)
 8023660:	f7fe faac 	bl	8021bbc <_lv_ll_remove>
    timer_deleted = true;
 8023664:	4b05      	ldr	r3, [pc, #20]	; (802367c <lv_timer_del+0x28>)
 8023666:	2201      	movs	r2, #1
 8023668:	701a      	strb	r2, [r3, #0]

    lv_mem_free(timer);
 802366a:	6878      	ldr	r0, [r7, #4]
 802366c:	f7fe fcf2 	bl	8022054 <lv_mem_free>
}
 8023670:	bf00      	nop
 8023672:	3708      	adds	r7, #8
 8023674:	46bd      	mov	sp, r7
 8023676:	bd80      	pop	{r7, pc}
 8023678:	2000084c 	.word	0x2000084c
 802367c:	2000ca6a 	.word	0x2000ca6a

08023680 <lv_timer_pause>:
/**
 * Pause/resume a timer.
 * @param timer pointer to an lv_timer
 */
void lv_timer_pause(lv_timer_t * timer)
{
 8023680:	b480      	push	{r7}
 8023682:	b083      	sub	sp, #12
 8023684:	af00      	add	r7, sp, #0
 8023686:	6078      	str	r0, [r7, #4]
    timer->paused = true;
 8023688:	687a      	ldr	r2, [r7, #4]
 802368a:	7d13      	ldrb	r3, [r2, #20]
 802368c:	f043 0301 	orr.w	r3, r3, #1
 8023690:	7513      	strb	r3, [r2, #20]
}
 8023692:	bf00      	nop
 8023694:	370c      	adds	r7, #12
 8023696:	46bd      	mov	sp, r7
 8023698:	f85d 7b04 	ldr.w	r7, [sp], #4
 802369c:	4770      	bx	lr

0802369e <lv_timer_resume>:

void lv_timer_resume(lv_timer_t * timer)
{
 802369e:	b480      	push	{r7}
 80236a0:	b083      	sub	sp, #12
 80236a2:	af00      	add	r7, sp, #0
 80236a4:	6078      	str	r0, [r7, #4]
    timer->paused = false;
 80236a6:	687a      	ldr	r2, [r7, #4]
 80236a8:	7d13      	ldrb	r3, [r2, #20]
 80236aa:	f36f 0300 	bfc	r3, #0, #1
 80236ae:	7513      	strb	r3, [r2, #20]
}
 80236b0:	bf00      	nop
 80236b2:	370c      	adds	r7, #12
 80236b4:	46bd      	mov	sp, r7
 80236b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236ba:	4770      	bx	lr

080236bc <lv_timer_ready>:
/**
 * Make a lv_timer ready. It will not wait its period.
 * @param timer pointer to a lv_timer.
 */
void lv_timer_ready(lv_timer_t * timer)
{
 80236bc:	b580      	push	{r7, lr}
 80236be:	b082      	sub	sp, #8
 80236c0:	af00      	add	r7, sp, #0
 80236c2:	6078      	str	r0, [r7, #4]
    timer->last_run = lv_tick_get() - timer->period - 1;
 80236c4:	f7fc fd06 	bl	80200d4 <lv_tick_get>
 80236c8:	4602      	mov	r2, r0
 80236ca:	687b      	ldr	r3, [r7, #4]
 80236cc:	681b      	ldr	r3, [r3, #0]
 80236ce:	1ad3      	subs	r3, r2, r3
 80236d0:	1e5a      	subs	r2, r3, #1
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	605a      	str	r2, [r3, #4]
}
 80236d6:	bf00      	nop
 80236d8:	3708      	adds	r7, #8
 80236da:	46bd      	mov	sp, r7
 80236dc:	bd80      	pop	{r7, pc}
	...

080236e0 <lv_timer_enable>:
/**
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
 80236e0:	b480      	push	{r7}
 80236e2:	b083      	sub	sp, #12
 80236e4:	af00      	add	r7, sp, #0
 80236e6:	4603      	mov	r3, r0
 80236e8:	71fb      	strb	r3, [r7, #7]
    lv_timer_run = en;
 80236ea:	4a04      	ldr	r2, [pc, #16]	; (80236fc <lv_timer_enable+0x1c>)
 80236ec:	79fb      	ldrb	r3, [r7, #7]
 80236ee:	7013      	strb	r3, [r2, #0]
}
 80236f0:	bf00      	nop
 80236f2:	370c      	adds	r7, #12
 80236f4:	46bd      	mov	sp, r7
 80236f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236fa:	4770      	bx	lr
 80236fc:	2000ca68 	.word	0x2000ca68

08023700 <lv_timer_exec>:
 * Execute timer if its remaining time is zero
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
 8023700:	b580      	push	{r7, lr}
 8023702:	b084      	sub	sp, #16
 8023704:	af00      	add	r7, sp, #0
 8023706:	6078      	str	r0, [r7, #4]
    if(timer->paused) return false;
 8023708:	687b      	ldr	r3, [r7, #4]
 802370a:	7d1b      	ldrb	r3, [r3, #20]
 802370c:	f003 0301 	and.w	r3, r3, #1
 8023710:	b2db      	uxtb	r3, r3
 8023712:	2b00      	cmp	r3, #0
 8023714:	d001      	beq.n	802371a <lv_timer_exec+0x1a>
 8023716:	2300      	movs	r3, #0
 8023718:	e034      	b.n	8023784 <lv_timer_exec+0x84>

    bool exec = false;
 802371a:	2300      	movs	r3, #0
 802371c:	73fb      	strb	r3, [r7, #15]
    if(lv_timer_time_remaining(timer) == 0) {
 802371e:	6878      	ldr	r0, [r7, #4]
 8023720:	f000 f836 	bl	8023790 <lv_timer_time_remaining>
 8023724:	4603      	mov	r3, r0
 8023726:	2b00      	cmp	r3, #0
 8023728:	d11d      	bne.n	8023766 <lv_timer_exec+0x66>
        /* Decrement the repeat count before executing the timer_cb.
         * If any timer is deleted `if(timer->repeat_count == 0)` is not executed below
         * but at least the repeat count is zero and the timer can be deleted in the next round*/
        int32_t original_repeat_count = timer->repeat_count;
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	691b      	ldr	r3, [r3, #16]
 802372e:	60bb      	str	r3, [r7, #8]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8023730:	687b      	ldr	r3, [r7, #4]
 8023732:	691b      	ldr	r3, [r3, #16]
 8023734:	2b00      	cmp	r3, #0
 8023736:	dd04      	ble.n	8023742 <lv_timer_exec+0x42>
 8023738:	687b      	ldr	r3, [r7, #4]
 802373a:	691b      	ldr	r3, [r3, #16]
 802373c:	1e5a      	subs	r2, r3, #1
 802373e:	687b      	ldr	r3, [r7, #4]
 8023740:	611a      	str	r2, [r3, #16]
        timer->last_run = lv_tick_get();
 8023742:	f7fc fcc7 	bl	80200d4 <lv_tick_get>
 8023746:	4602      	mov	r2, r0
 8023748:	687b      	ldr	r3, [r7, #4]
 802374a:	605a      	str	r2, [r3, #4]
        TIMER_TRACE("calling timer callback: %p", *((void **)&timer->timer_cb));
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	689b      	ldr	r3, [r3, #8]
 8023750:	2b00      	cmp	r3, #0
 8023752:	d006      	beq.n	8023762 <lv_timer_exec+0x62>
 8023754:	68bb      	ldr	r3, [r7, #8]
 8023756:	2b00      	cmp	r3, #0
 8023758:	d003      	beq.n	8023762 <lv_timer_exec+0x62>
 802375a:	687b      	ldr	r3, [r7, #4]
 802375c:	689b      	ldr	r3, [r3, #8]
 802375e:	6878      	ldr	r0, [r7, #4]
 8023760:	4798      	blx	r3
        TIMER_TRACE("timer callback %p finished", *((void **)&timer->timer_cb));
        LV_ASSERT_MEM_INTEGRITY();
        exec = true;
 8023762:	2301      	movs	r3, #1
 8023764:	73fb      	strb	r3, [r7, #15]
    }

    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8023766:	4b09      	ldr	r3, [pc, #36]	; (802378c <lv_timer_exec+0x8c>)
 8023768:	781b      	ldrb	r3, [r3, #0]
 802376a:	f083 0301 	eor.w	r3, r3, #1
 802376e:	b2db      	uxtb	r3, r3
 8023770:	2b00      	cmp	r3, #0
 8023772:	d006      	beq.n	8023782 <lv_timer_exec+0x82>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	691b      	ldr	r3, [r3, #16]
 8023778:	2b00      	cmp	r3, #0
 802377a:	d102      	bne.n	8023782 <lv_timer_exec+0x82>
            TIMER_TRACE("deleting timer with %p callback because the repeat count is over", *((void **)&timer->timer_cb));
            lv_timer_del(timer);
 802377c:	6878      	ldr	r0, [r7, #4]
 802377e:	f7ff ff69 	bl	8023654 <lv_timer_del>
        }
    }

    return exec;
 8023782:	7bfb      	ldrb	r3, [r7, #15]
}
 8023784:	4618      	mov	r0, r3
 8023786:	3710      	adds	r7, #16
 8023788:	46bd      	mov	sp, r7
 802378a:	bd80      	pop	{r7, pc}
 802378c:	2000ca6a 	.word	0x2000ca6a

08023790 <lv_timer_time_remaining>:
 * Find out how much time remains before a timer must be run.
 * @param timer pointer to lv_timer
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
 8023790:	b580      	push	{r7, lr}
 8023792:	b084      	sub	sp, #16
 8023794:	af00      	add	r7, sp, #0
 8023796:	6078      	str	r0, [r7, #4]
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	685b      	ldr	r3, [r3, #4]
 802379c:	4618      	mov	r0, r3
 802379e:	f7fc fcb3 	bl	8020108 <lv_tick_elaps>
 80237a2:	60f8      	str	r0, [r7, #12]
    if(elp >= timer->period)
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	68fa      	ldr	r2, [r7, #12]
 80237aa:	429a      	cmp	r2, r3
 80237ac:	d301      	bcc.n	80237b2 <lv_timer_time_remaining+0x22>
        return 0;
 80237ae:	2300      	movs	r3, #0
 80237b0:	e003      	b.n	80237ba <lv_timer_time_remaining+0x2a>
    return timer->period - elp;
 80237b2:	687b      	ldr	r3, [r7, #4]
 80237b4:	681a      	ldr	r2, [r3, #0]
 80237b6:	68fb      	ldr	r3, [r7, #12]
 80237b8:	1ad3      	subs	r3, r2, r3
}
 80237ba:	4618      	mov	r0, r3
 80237bc:	3710      	adds	r7, #16
 80237be:	46bd      	mov	sp, r7
 80237c0:	bd80      	pop	{r7, pc}

080237c2 <tlsf_ffs>:
}

#else

tlsf_decl int tlsf_ffs(unsigned int word)
{
 80237c2:	b480      	push	{r7}
 80237c4:	b083      	sub	sp, #12
 80237c6:	af00      	add	r7, sp, #0
 80237c8:	6078      	str	r0, [r7, #4]
    return __builtin_ffs(word) - 1;
 80237ca:	687b      	ldr	r3, [r7, #4]
 80237cc:	fa93 f2a3 	rbit	r2, r3
 80237d0:	fab2 f282 	clz	r2, r2
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	d101      	bne.n	80237dc <tlsf_ffs+0x1a>
 80237d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80237dc:	1c53      	adds	r3, r2, #1
 80237de:	3b01      	subs	r3, #1
}
 80237e0:	4618      	mov	r0, r3
 80237e2:	370c      	adds	r7, #12
 80237e4:	46bd      	mov	sp, r7
 80237e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237ea:	4770      	bx	lr

080237ec <tlsf_fls>:

#endif

tlsf_decl int tlsf_fls(unsigned int word)
{
 80237ec:	b480      	push	{r7}
 80237ee:	b085      	sub	sp, #20
 80237f0:	af00      	add	r7, sp, #0
 80237f2:	6078      	str	r0, [r7, #4]
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	2b00      	cmp	r3, #0
 80237f8:	d005      	beq.n	8023806 <tlsf_fls+0x1a>
 80237fa:	687b      	ldr	r3, [r7, #4]
 80237fc:	fab3 f383 	clz	r3, r3
 8023800:	f1c3 0320 	rsb	r3, r3, #32
 8023804:	e000      	b.n	8023808 <tlsf_fls+0x1c>
 8023806:	2300      	movs	r3, #0
 8023808:	60fb      	str	r3, [r7, #12]
    return bit - 1;
 802380a:	68fb      	ldr	r3, [r7, #12]
 802380c:	3b01      	subs	r3, #1
}
 802380e:	4618      	mov	r0, r3
 8023810:	3714      	adds	r7, #20
 8023812:	46bd      	mov	sp, r7
 8023814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023818:	4770      	bx	lr

0802381a <block_size>:
/*
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
 802381a:	b480      	push	{r7}
 802381c:	b083      	sub	sp, #12
 802381e:	af00      	add	r7, sp, #0
 8023820:	6078      	str	r0, [r7, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023822:	687b      	ldr	r3, [r7, #4]
 8023824:	685a      	ldr	r2, [r3, #4]
 8023826:	2101      	movs	r1, #1
 8023828:	2302      	movs	r3, #2
 802382a:	430b      	orrs	r3, r1
 802382c:	43db      	mvns	r3, r3
 802382e:	4013      	ands	r3, r2
}
 8023830:	4618      	mov	r0, r3
 8023832:	370c      	adds	r7, #12
 8023834:	46bd      	mov	sp, r7
 8023836:	f85d 7b04 	ldr.w	r7, [sp], #4
 802383a:	4770      	bx	lr

0802383c <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
 802383c:	b480      	push	{r7}
 802383e:	b085      	sub	sp, #20
 8023840:	af00      	add	r7, sp, #0
 8023842:	6078      	str	r0, [r7, #4]
 8023844:	6039      	str	r1, [r7, #0]
    const size_t oldsize = block->size;
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	685b      	ldr	r3, [r3, #4]
 802384a:	60fb      	str	r3, [r7, #12]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 802384c:	2201      	movs	r2, #1
 802384e:	2302      	movs	r3, #2
 8023850:	431a      	orrs	r2, r3
 8023852:	68fb      	ldr	r3, [r7, #12]
 8023854:	401a      	ands	r2, r3
 8023856:	683b      	ldr	r3, [r7, #0]
 8023858:	431a      	orrs	r2, r3
 802385a:	687b      	ldr	r3, [r7, #4]
 802385c:	605a      	str	r2, [r3, #4]
}
 802385e:	bf00      	nop
 8023860:	3714      	adds	r7, #20
 8023862:	46bd      	mov	sp, r7
 8023864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023868:	4770      	bx	lr

0802386a <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 802386a:	b580      	push	{r7, lr}
 802386c:	b082      	sub	sp, #8
 802386e:	af00      	add	r7, sp, #0
 8023870:	6078      	str	r0, [r7, #4]
    return block_size(block) == 0;
 8023872:	6878      	ldr	r0, [r7, #4]
 8023874:	f7ff ffd1 	bl	802381a <block_size>
 8023878:	4603      	mov	r3, r0
 802387a:	2b00      	cmp	r3, #0
 802387c:	bf0c      	ite	eq
 802387e:	2301      	moveq	r3, #1
 8023880:	2300      	movne	r3, #0
 8023882:	b2db      	uxtb	r3, r3
}
 8023884:	4618      	mov	r0, r3
 8023886:	3708      	adds	r7, #8
 8023888:	46bd      	mov	sp, r7
 802388a:	bd80      	pop	{r7, pc}

0802388c <block_is_free>:

static int block_is_free(const block_header_t * block)
{
 802388c:	b480      	push	{r7}
 802388e:	b083      	sub	sp, #12
 8023890:	af00      	add	r7, sp, #0
 8023892:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	685b      	ldr	r3, [r3, #4]
 8023898:	2201      	movs	r2, #1
 802389a:	4013      	ands	r3, r2
}
 802389c:	4618      	mov	r0, r3
 802389e:	370c      	adds	r7, #12
 80238a0:	46bd      	mov	sp, r7
 80238a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238a6:	4770      	bx	lr

080238a8 <block_set_free>:

static void block_set_free(block_header_t * block)
{
 80238a8:	b480      	push	{r7}
 80238aa:	b083      	sub	sp, #12
 80238ac:	af00      	add	r7, sp, #0
 80238ae:	6078      	str	r0, [r7, #4]
    block->size |= block_header_free_bit;
 80238b0:	687b      	ldr	r3, [r7, #4]
 80238b2:	685b      	ldr	r3, [r3, #4]
 80238b4:	2201      	movs	r2, #1
 80238b6:	431a      	orrs	r2, r3
 80238b8:	687b      	ldr	r3, [r7, #4]
 80238ba:	605a      	str	r2, [r3, #4]
}
 80238bc:	bf00      	nop
 80238be:	370c      	adds	r7, #12
 80238c0:	46bd      	mov	sp, r7
 80238c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238c6:	4770      	bx	lr

080238c8 <block_set_used>:

static void block_set_used(block_header_t * block)
{
 80238c8:	b480      	push	{r7}
 80238ca:	b083      	sub	sp, #12
 80238cc:	af00      	add	r7, sp, #0
 80238ce:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_free_bit;
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	685a      	ldr	r2, [r3, #4]
 80238d4:	2301      	movs	r3, #1
 80238d6:	43db      	mvns	r3, r3
 80238d8:	401a      	ands	r2, r3
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	605a      	str	r2, [r3, #4]
}
 80238de:	bf00      	nop
 80238e0:	370c      	adds	r7, #12
 80238e2:	46bd      	mov	sp, r7
 80238e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238e8:	4770      	bx	lr

080238ea <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
 80238ea:	b480      	push	{r7}
 80238ec:	b083      	sub	sp, #12
 80238ee:	af00      	add	r7, sp, #0
 80238f0:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 80238f2:	687b      	ldr	r3, [r7, #4]
 80238f4:	685b      	ldr	r3, [r3, #4]
 80238f6:	2202      	movs	r2, #2
 80238f8:	4013      	ands	r3, r2
}
 80238fa:	4618      	mov	r0, r3
 80238fc:	370c      	adds	r7, #12
 80238fe:	46bd      	mov	sp, r7
 8023900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023904:	4770      	bx	lr

08023906 <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
 8023906:	b480      	push	{r7}
 8023908:	b083      	sub	sp, #12
 802390a:	af00      	add	r7, sp, #0
 802390c:	6078      	str	r0, [r7, #4]
    block->size |= block_header_prev_free_bit;
 802390e:	687b      	ldr	r3, [r7, #4]
 8023910:	685b      	ldr	r3, [r3, #4]
 8023912:	2202      	movs	r2, #2
 8023914:	431a      	orrs	r2, r3
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	605a      	str	r2, [r3, #4]
}
 802391a:	bf00      	nop
 802391c:	370c      	adds	r7, #12
 802391e:	46bd      	mov	sp, r7
 8023920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023924:	4770      	bx	lr

08023926 <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
 8023926:	b480      	push	{r7}
 8023928:	b083      	sub	sp, #12
 802392a:	af00      	add	r7, sp, #0
 802392c:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_prev_free_bit;
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	685a      	ldr	r2, [r3, #4]
 8023932:	2302      	movs	r3, #2
 8023934:	43db      	mvns	r3, r3
 8023936:	401a      	ands	r2, r3
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	605a      	str	r2, [r3, #4]
}
 802393c:	bf00      	nop
 802393e:	370c      	adds	r7, #12
 8023940:	46bd      	mov	sp, r7
 8023942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023946:	4770      	bx	lr

08023948 <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
 8023948:	b480      	push	{r7}
 802394a:	b083      	sub	sp, #12
 802394c:	af00      	add	r7, sp, #0
 802394e:	6078      	str	r0, [r7, #4]
    return tlsf_cast(block_header_t *,
 8023950:	2308      	movs	r3, #8
 8023952:	425b      	negs	r3, r3
 8023954:	687a      	ldr	r2, [r7, #4]
 8023956:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 8023958:	4618      	mov	r0, r3
 802395a:	370c      	adds	r7, #12
 802395c:	46bd      	mov	sp, r7
 802395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023962:	4770      	bx	lr

08023964 <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
 8023964:	b480      	push	{r7}
 8023966:	b083      	sub	sp, #12
 8023968:	af00      	add	r7, sp, #0
 802396a:	6078      	str	r0, [r7, #4]
    return tlsf_cast(void *,
 802396c:	2208      	movs	r2, #8
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 8023972:	4618      	mov	r0, r3
 8023974:	370c      	adds	r7, #12
 8023976:	46bd      	mov	sp, r7
 8023978:	f85d 7b04 	ldr.w	r7, [sp], #4
 802397c:	4770      	bx	lr

0802397e <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
 802397e:	b480      	push	{r7}
 8023980:	b083      	sub	sp, #12
 8023982:	af00      	add	r7, sp, #0
 8023984:	6078      	str	r0, [r7, #4]
 8023986:	6039      	str	r1, [r7, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023988:	687a      	ldr	r2, [r7, #4]
 802398a:	683b      	ldr	r3, [r7, #0]
 802398c:	4413      	add	r3, r2
}
 802398e:	4618      	mov	r0, r3
 8023990:	370c      	adds	r7, #12
 8023992:	46bd      	mov	sp, r7
 8023994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023998:	4770      	bx	lr

0802399a <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 802399a:	b580      	push	{r7, lr}
 802399c:	b082      	sub	sp, #8
 802399e:	af00      	add	r7, sp, #0
 80239a0:	6078      	str	r0, [r7, #4]
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 80239a2:	6878      	ldr	r0, [r7, #4]
 80239a4:	f7ff ffa1 	bl	80238ea <block_is_prev_free>
 80239a8:	4603      	mov	r3, r0
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d100      	bne.n	80239b0 <block_prev+0x16>
 80239ae:	e7fe      	b.n	80239ae <block_prev+0x14>
    return block->prev_phys_block;
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	681b      	ldr	r3, [r3, #0]
}
 80239b4:	4618      	mov	r0, r3
 80239b6:	3708      	adds	r7, #8
 80239b8:	46bd      	mov	sp, r7
 80239ba:	bd80      	pop	{r7, pc}

080239bc <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 80239bc:	b590      	push	{r4, r7, lr}
 80239be:	b085      	sub	sp, #20
 80239c0:	af00      	add	r7, sp, #0
 80239c2:	6078      	str	r0, [r7, #4]
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80239c4:	6878      	ldr	r0, [r7, #4]
 80239c6:	f7ff ffcd 	bl	8023964 <block_to_ptr>
 80239ca:	4604      	mov	r4, r0
                                            block_size(block) - block_header_overhead);
 80239cc:	6878      	ldr	r0, [r7, #4]
 80239ce:	f7ff ff24 	bl	802381a <block_size>
 80239d2:	4603      	mov	r3, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80239d4:	2204      	movs	r2, #4
 80239d6:	1a9b      	subs	r3, r3, r2
 80239d8:	4619      	mov	r1, r3
 80239da:	4620      	mov	r0, r4
 80239dc:	f7ff ffcf 	bl	802397e <offset_to_block>
 80239e0:	60f8      	str	r0, [r7, #12]
    tlsf_assert(!block_is_last(block));
 80239e2:	6878      	ldr	r0, [r7, #4]
 80239e4:	f7ff ff41 	bl	802386a <block_is_last>
 80239e8:	4603      	mov	r3, r0
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d000      	beq.n	80239f0 <block_next+0x34>
 80239ee:	e7fe      	b.n	80239ee <block_next+0x32>
    return next;
 80239f0:	68fb      	ldr	r3, [r7, #12]
}
 80239f2:	4618      	mov	r0, r3
 80239f4:	3714      	adds	r7, #20
 80239f6:	46bd      	mov	sp, r7
 80239f8:	bd90      	pop	{r4, r7, pc}

080239fa <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 80239fa:	b580      	push	{r7, lr}
 80239fc:	b084      	sub	sp, #16
 80239fe:	af00      	add	r7, sp, #0
 8023a00:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 8023a02:	6878      	ldr	r0, [r7, #4]
 8023a04:	f7ff ffda 	bl	80239bc <block_next>
 8023a08:	60f8      	str	r0, [r7, #12]
    next->prev_phys_block = block;
 8023a0a:	68fb      	ldr	r3, [r7, #12]
 8023a0c:	687a      	ldr	r2, [r7, #4]
 8023a0e:	601a      	str	r2, [r3, #0]
    return next;
 8023a10:	68fb      	ldr	r3, [r7, #12]
}
 8023a12:	4618      	mov	r0, r3
 8023a14:	3710      	adds	r7, #16
 8023a16:	46bd      	mov	sp, r7
 8023a18:	bd80      	pop	{r7, pc}

08023a1a <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 8023a1a:	b580      	push	{r7, lr}
 8023a1c:	b084      	sub	sp, #16
 8023a1e:	af00      	add	r7, sp, #0
 8023a20:	6078      	str	r0, [r7, #4]
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 8023a22:	6878      	ldr	r0, [r7, #4]
 8023a24:	f7ff ffe9 	bl	80239fa <block_link_next>
 8023a28:	60f8      	str	r0, [r7, #12]
    block_set_prev_free(next);
 8023a2a:	68f8      	ldr	r0, [r7, #12]
 8023a2c:	f7ff ff6b 	bl	8023906 <block_set_prev_free>
    block_set_free(block);
 8023a30:	6878      	ldr	r0, [r7, #4]
 8023a32:	f7ff ff39 	bl	80238a8 <block_set_free>
}
 8023a36:	bf00      	nop
 8023a38:	3710      	adds	r7, #16
 8023a3a:	46bd      	mov	sp, r7
 8023a3c:	bd80      	pop	{r7, pc}

08023a3e <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 8023a3e:	b580      	push	{r7, lr}
 8023a40:	b084      	sub	sp, #16
 8023a42:	af00      	add	r7, sp, #0
 8023a44:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 8023a46:	6878      	ldr	r0, [r7, #4]
 8023a48:	f7ff ffb8 	bl	80239bc <block_next>
 8023a4c:	60f8      	str	r0, [r7, #12]
    block_set_prev_used(next);
 8023a4e:	68f8      	ldr	r0, [r7, #12]
 8023a50:	f7ff ff69 	bl	8023926 <block_set_prev_used>
    block_set_used(block);
 8023a54:	6878      	ldr	r0, [r7, #4]
 8023a56:	f7ff ff37 	bl	80238c8 <block_set_used>
}
 8023a5a:	bf00      	nop
 8023a5c:	3710      	adds	r7, #16
 8023a5e:	46bd      	mov	sp, r7
 8023a60:	bd80      	pop	{r7, pc}

08023a62 <align_up>:

static size_t align_up(size_t x, size_t align)
{
 8023a62:	b480      	push	{r7}
 8023a64:	b083      	sub	sp, #12
 8023a66:	af00      	add	r7, sp, #0
 8023a68:	6078      	str	r0, [r7, #4]
 8023a6a:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8023a6c:	683b      	ldr	r3, [r7, #0]
 8023a6e:	1e5a      	subs	r2, r3, #1
 8023a70:	683b      	ldr	r3, [r7, #0]
 8023a72:	4013      	ands	r3, r2
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	d000      	beq.n	8023a7a <align_up+0x18>
 8023a78:	e7fe      	b.n	8023a78 <align_up+0x16>
    return (x + (align - 1)) & ~(align - 1);
 8023a7a:	683a      	ldr	r2, [r7, #0]
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	4413      	add	r3, r2
 8023a80:	1e5a      	subs	r2, r3, #1
 8023a82:	683b      	ldr	r3, [r7, #0]
 8023a84:	425b      	negs	r3, r3
 8023a86:	4013      	ands	r3, r2
}
 8023a88:	4618      	mov	r0, r3
 8023a8a:	370c      	adds	r7, #12
 8023a8c:	46bd      	mov	sp, r7
 8023a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a92:	4770      	bx	lr

08023a94 <align_down>:

static size_t align_down(size_t x, size_t align)
{
 8023a94:	b480      	push	{r7}
 8023a96:	b083      	sub	sp, #12
 8023a98:	af00      	add	r7, sp, #0
 8023a9a:	6078      	str	r0, [r7, #4]
 8023a9c:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8023a9e:	683b      	ldr	r3, [r7, #0]
 8023aa0:	1e5a      	subs	r2, r3, #1
 8023aa2:	683b      	ldr	r3, [r7, #0]
 8023aa4:	4013      	ands	r3, r2
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	d000      	beq.n	8023aac <align_down+0x18>
 8023aaa:	e7fe      	b.n	8023aaa <align_down+0x16>
    return x - (x & (align - 1));
 8023aac:	683b      	ldr	r3, [r7, #0]
 8023aae:	425a      	negs	r2, r3
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	4013      	ands	r3, r2
}
 8023ab4:	4618      	mov	r0, r3
 8023ab6:	370c      	adds	r7, #12
 8023ab8:	46bd      	mov	sp, r7
 8023aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023abe:	4770      	bx	lr

08023ac0 <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
 8023ac0:	b480      	push	{r7}
 8023ac2:	b085      	sub	sp, #20
 8023ac4:	af00      	add	r7, sp, #0
 8023ac6:	6078      	str	r0, [r7, #4]
 8023ac8:	6039      	str	r1, [r7, #0]
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8023aca:	687a      	ldr	r2, [r7, #4]
 8023acc:	683b      	ldr	r3, [r7, #0]
 8023ace:	4413      	add	r3, r2
 8023ad0:	1e5a      	subs	r2, r3, #1
 8023ad2:	683b      	ldr	r3, [r7, #0]
 8023ad4:	425b      	negs	r3, r3
 8023ad6:	4013      	ands	r3, r2
    const tlsfptr_t aligned =
 8023ad8:	60fb      	str	r3, [r7, #12]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8023ada:	683b      	ldr	r3, [r7, #0]
 8023adc:	1e5a      	subs	r2, r3, #1
 8023ade:	683b      	ldr	r3, [r7, #0]
 8023ae0:	4013      	ands	r3, r2
 8023ae2:	2b00      	cmp	r3, #0
 8023ae4:	d000      	beq.n	8023ae8 <align_ptr+0x28>
 8023ae6:	e7fe      	b.n	8023ae6 <align_ptr+0x26>
    return tlsf_cast(void *, aligned);
 8023ae8:	68fb      	ldr	r3, [r7, #12]
}
 8023aea:	4618      	mov	r0, r3
 8023aec:	3714      	adds	r7, #20
 8023aee:	46bd      	mov	sp, r7
 8023af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023af4:	4770      	bx	lr

08023af6 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 8023af6:	b580      	push	{r7, lr}
 8023af8:	b084      	sub	sp, #16
 8023afa:	af00      	add	r7, sp, #0
 8023afc:	6078      	str	r0, [r7, #4]
 8023afe:	6039      	str	r1, [r7, #0]
    size_t adjust = 0;
 8023b00:	2300      	movs	r3, #0
 8023b02:	60fb      	str	r3, [r7, #12]
    if(size) {
 8023b04:	687b      	ldr	r3, [r7, #4]
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	d00f      	beq.n	8023b2a <adjust_request_size+0x34>
        const size_t aligned = align_up(size, align);
 8023b0a:	6839      	ldr	r1, [r7, #0]
 8023b0c:	6878      	ldr	r0, [r7, #4]
 8023b0e:	f7ff ffa8 	bl	8023a62 <align_up>
 8023b12:	60b8      	str	r0, [r7, #8]

        /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
        if(aligned < block_size_max) {
 8023b14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023b18:	68bb      	ldr	r3, [r7, #8]
 8023b1a:	4293      	cmp	r3, r2
 8023b1c:	d205      	bcs.n	8023b2a <adjust_request_size+0x34>
            adjust = tlsf_max(aligned, block_size_min);
 8023b1e:	220c      	movs	r2, #12
 8023b20:	68bb      	ldr	r3, [r7, #8]
 8023b22:	4293      	cmp	r3, r2
 8023b24:	bf38      	it	cc
 8023b26:	4613      	movcc	r3, r2
 8023b28:	60fb      	str	r3, [r7, #12]
        }
    }
    return adjust;
 8023b2a:	68fb      	ldr	r3, [r7, #12]
}
 8023b2c:	4618      	mov	r0, r3
 8023b2e:	3710      	adds	r7, #16
 8023b30:	46bd      	mov	sp, r7
 8023b32:	bd80      	pop	{r7, pc}

08023b34 <mapping_insert>:
** TLSF utility functions. In most cases, these are direct translations of
** the documentation found in the white paper.
*/

static void mapping_insert(size_t size, int * fli, int * sli)
{
 8023b34:	b580      	push	{r7, lr}
 8023b36:	b086      	sub	sp, #24
 8023b38:	af00      	add	r7, sp, #0
 8023b3a:	60f8      	str	r0, [r7, #12]
 8023b3c:	60b9      	str	r1, [r7, #8]
 8023b3e:	607a      	str	r2, [r7, #4]
    int fl, sl;
    if(size < SMALL_BLOCK_SIZE) {
 8023b40:	68fb      	ldr	r3, [r7, #12]
 8023b42:	2b7f      	cmp	r3, #127	; 0x7f
 8023b44:	d808      	bhi.n	8023b58 <mapping_insert+0x24>
        /* Store small blocks in first list. */
        fl = 0;
 8023b46:	2300      	movs	r3, #0
 8023b48:	617b      	str	r3, [r7, #20]
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8023b4a:	68fb      	ldr	r3, [r7, #12]
 8023b4c:	2b00      	cmp	r3, #0
 8023b4e:	da00      	bge.n	8023b52 <mapping_insert+0x1e>
 8023b50:	3303      	adds	r3, #3
 8023b52:	109b      	asrs	r3, r3, #2
 8023b54:	613b      	str	r3, [r7, #16]
 8023b56:	e00e      	b.n	8023b76 <mapping_insert+0x42>
    }
    else {
        fl = tlsf_fls_sizet(size);
 8023b58:	68f8      	ldr	r0, [r7, #12]
 8023b5a:	f7ff fe47 	bl	80237ec <tlsf_fls>
 8023b5e:	6178      	str	r0, [r7, #20]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8023b60:	697b      	ldr	r3, [r7, #20]
 8023b62:	3b05      	subs	r3, #5
 8023b64:	68fa      	ldr	r2, [r7, #12]
 8023b66:	fa22 f303 	lsr.w	r3, r2, r3
 8023b6a:	f083 0320 	eor.w	r3, r3, #32
 8023b6e:	613b      	str	r3, [r7, #16]
        fl -= (FL_INDEX_SHIFT - 1);
 8023b70:	697b      	ldr	r3, [r7, #20]
 8023b72:	3b06      	subs	r3, #6
 8023b74:	617b      	str	r3, [r7, #20]
    }
    *fli = fl;
 8023b76:	68bb      	ldr	r3, [r7, #8]
 8023b78:	697a      	ldr	r2, [r7, #20]
 8023b7a:	601a      	str	r2, [r3, #0]
    *sli = sl;
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	693a      	ldr	r2, [r7, #16]
 8023b80:	601a      	str	r2, [r3, #0]
}
 8023b82:	bf00      	nop
 8023b84:	3718      	adds	r7, #24
 8023b86:	46bd      	mov	sp, r7
 8023b88:	bd80      	pop	{r7, pc}

08023b8a <mapping_search>:

/* This version rounds up to the next block size (for allocations) */
static void mapping_search(size_t size, int * fli, int * sli)
{
 8023b8a:	b580      	push	{r7, lr}
 8023b8c:	b086      	sub	sp, #24
 8023b8e:	af00      	add	r7, sp, #0
 8023b90:	60f8      	str	r0, [r7, #12]
 8023b92:	60b9      	str	r1, [r7, #8]
 8023b94:	607a      	str	r2, [r7, #4]
    if(size >= SMALL_BLOCK_SIZE) {
 8023b96:	68fb      	ldr	r3, [r7, #12]
 8023b98:	2b7f      	cmp	r3, #127	; 0x7f
 8023b9a:	d90d      	bls.n	8023bb8 <mapping_search+0x2e>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8023b9c:	68f8      	ldr	r0, [r7, #12]
 8023b9e:	f7ff fe25 	bl	80237ec <tlsf_fls>
 8023ba2:	4603      	mov	r3, r0
 8023ba4:	3b05      	subs	r3, #5
 8023ba6:	2201      	movs	r2, #1
 8023ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8023bac:	3b01      	subs	r3, #1
 8023bae:	617b      	str	r3, [r7, #20]
        size += round;
 8023bb0:	68fa      	ldr	r2, [r7, #12]
 8023bb2:	697b      	ldr	r3, [r7, #20]
 8023bb4:	4413      	add	r3, r2
 8023bb6:	60fb      	str	r3, [r7, #12]
    }
    mapping_insert(size, fli, sli);
 8023bb8:	687a      	ldr	r2, [r7, #4]
 8023bba:	68b9      	ldr	r1, [r7, #8]
 8023bbc:	68f8      	ldr	r0, [r7, #12]
 8023bbe:	f7ff ffb9 	bl	8023b34 <mapping_insert>
}
 8023bc2:	bf00      	nop
 8023bc4:	3718      	adds	r7, #24
 8023bc6:	46bd      	mov	sp, r7
 8023bc8:	bd80      	pop	{r7, pc}

08023bca <search_suitable_block>:

static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
{
 8023bca:	b580      	push	{r7, lr}
 8023bcc:	b088      	sub	sp, #32
 8023bce:	af00      	add	r7, sp, #0
 8023bd0:	60f8      	str	r0, [r7, #12]
 8023bd2:	60b9      	str	r1, [r7, #8]
 8023bd4:	607a      	str	r2, [r7, #4]
    int fl = *fli;
 8023bd6:	68bb      	ldr	r3, [r7, #8]
 8023bd8:	681b      	ldr	r3, [r3, #0]
 8023bda:	61fb      	str	r3, [r7, #28]
    int sl = *sli;
 8023bdc:	687b      	ldr	r3, [r7, #4]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	617b      	str	r3, [r7, #20]

    /*
    ** First, search for a block in the list associated with the given
    ** fl/sl index.
    */
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8023be2:	68fa      	ldr	r2, [r7, #12]
 8023be4:	69fb      	ldr	r3, [r7, #28]
 8023be6:	3304      	adds	r3, #4
 8023be8:	009b      	lsls	r3, r3, #2
 8023bea:	4413      	add	r3, r2
 8023bec:	685a      	ldr	r2, [r3, #4]
 8023bee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023bf2:	697b      	ldr	r3, [r7, #20]
 8023bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8023bf8:	4013      	ands	r3, r2
 8023bfa:	61bb      	str	r3, [r7, #24]
    if(!sl_map) {
 8023bfc:	69bb      	ldr	r3, [r7, #24]
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d11c      	bne.n	8023c3c <search_suitable_block+0x72>
        /* No block exists. Search in the next largest first-level list. */
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8023c02:	68fb      	ldr	r3, [r7, #12]
 8023c04:	691a      	ldr	r2, [r3, #16]
 8023c06:	69fb      	ldr	r3, [r7, #28]
 8023c08:	3301      	adds	r3, #1
 8023c0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8023c12:	4013      	ands	r3, r2
 8023c14:	613b      	str	r3, [r7, #16]
        if(!fl_map) {
 8023c16:	693b      	ldr	r3, [r7, #16]
 8023c18:	2b00      	cmp	r3, #0
 8023c1a:	d101      	bne.n	8023c20 <search_suitable_block+0x56>
            /* No free blocks available, memory has been exhausted. */
            return 0;
 8023c1c:	2300      	movs	r3, #0
 8023c1e:	e021      	b.n	8023c64 <search_suitable_block+0x9a>
        }

        fl = tlsf_ffs(fl_map);
 8023c20:	6938      	ldr	r0, [r7, #16]
 8023c22:	f7ff fdce 	bl	80237c2 <tlsf_ffs>
 8023c26:	61f8      	str	r0, [r7, #28]
        *fli = fl;
 8023c28:	68bb      	ldr	r3, [r7, #8]
 8023c2a:	69fa      	ldr	r2, [r7, #28]
 8023c2c:	601a      	str	r2, [r3, #0]
        sl_map = control->sl_bitmap[fl];
 8023c2e:	68fa      	ldr	r2, [r7, #12]
 8023c30:	69fb      	ldr	r3, [r7, #28]
 8023c32:	3304      	adds	r3, #4
 8023c34:	009b      	lsls	r3, r3, #2
 8023c36:	4413      	add	r3, r2
 8023c38:	685b      	ldr	r3, [r3, #4]
 8023c3a:	61bb      	str	r3, [r7, #24]
    }
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8023c3c:	69bb      	ldr	r3, [r7, #24]
 8023c3e:	2b00      	cmp	r3, #0
 8023c40:	d100      	bne.n	8023c44 <search_suitable_block+0x7a>
 8023c42:	e7fe      	b.n	8023c42 <search_suitable_block+0x78>
    sl = tlsf_ffs(sl_map);
 8023c44:	69b8      	ldr	r0, [r7, #24]
 8023c46:	f7ff fdbc 	bl	80237c2 <tlsf_ffs>
 8023c4a:	6178      	str	r0, [r7, #20]
    *sli = sl;
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	697a      	ldr	r2, [r7, #20]
 8023c50:	601a      	str	r2, [r3, #0]

    /* Return the first block in the free list. */
    return control->blocks[fl][sl];
 8023c52:	68fa      	ldr	r2, [r7, #12]
 8023c54:	69fb      	ldr	r3, [r7, #28]
 8023c56:	0159      	lsls	r1, r3, #5
 8023c58:	697b      	ldr	r3, [r7, #20]
 8023c5a:	440b      	add	r3, r1
 8023c5c:	330e      	adds	r3, #14
 8023c5e:	009b      	lsls	r3, r3, #2
 8023c60:	4413      	add	r3, r2
 8023c62:	685b      	ldr	r3, [r3, #4]
}
 8023c64:	4618      	mov	r0, r3
 8023c66:	3720      	adds	r7, #32
 8023c68:	46bd      	mov	sp, r7
 8023c6a:	bd80      	pop	{r7, pc}

08023c6c <remove_free_block>:

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8023c6c:	b480      	push	{r7}
 8023c6e:	b087      	sub	sp, #28
 8023c70:	af00      	add	r7, sp, #0
 8023c72:	60f8      	str	r0, [r7, #12]
 8023c74:	60b9      	str	r1, [r7, #8]
 8023c76:	607a      	str	r2, [r7, #4]
 8023c78:	603b      	str	r3, [r7, #0]
    block_header_t * prev = block->prev_free;
 8023c7a:	68bb      	ldr	r3, [r7, #8]
 8023c7c:	68db      	ldr	r3, [r3, #12]
 8023c7e:	617b      	str	r3, [r7, #20]
    block_header_t * next = block->next_free;
 8023c80:	68bb      	ldr	r3, [r7, #8]
 8023c82:	689b      	ldr	r3, [r3, #8]
 8023c84:	613b      	str	r3, [r7, #16]
    tlsf_assert(prev && "prev_free field can not be null");
 8023c86:	697b      	ldr	r3, [r7, #20]
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	d100      	bne.n	8023c8e <remove_free_block+0x22>
 8023c8c:	e7fe      	b.n	8023c8c <remove_free_block+0x20>
    tlsf_assert(next && "next_free field can not be null");
 8023c8e:	693b      	ldr	r3, [r7, #16]
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	d100      	bne.n	8023c96 <remove_free_block+0x2a>
 8023c94:	e7fe      	b.n	8023c94 <remove_free_block+0x28>
    next->prev_free = prev;
 8023c96:	693b      	ldr	r3, [r7, #16]
 8023c98:	697a      	ldr	r2, [r7, #20]
 8023c9a:	60da      	str	r2, [r3, #12]
    prev->next_free = next;
 8023c9c:	697b      	ldr	r3, [r7, #20]
 8023c9e:	693a      	ldr	r2, [r7, #16]
 8023ca0:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 8023ca2:	68fa      	ldr	r2, [r7, #12]
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	0159      	lsls	r1, r3, #5
 8023ca8:	683b      	ldr	r3, [r7, #0]
 8023caa:	440b      	add	r3, r1
 8023cac:	330e      	adds	r3, #14
 8023cae:	009b      	lsls	r3, r3, #2
 8023cb0:	4413      	add	r3, r2
 8023cb2:	685b      	ldr	r3, [r3, #4]
 8023cb4:	68ba      	ldr	r2, [r7, #8]
 8023cb6:	429a      	cmp	r2, r3
 8023cb8:	d131      	bne.n	8023d1e <remove_free_block+0xb2>
        control->blocks[fl][sl] = next;
 8023cba:	68fa      	ldr	r2, [r7, #12]
 8023cbc:	687b      	ldr	r3, [r7, #4]
 8023cbe:	0159      	lsls	r1, r3, #5
 8023cc0:	683b      	ldr	r3, [r7, #0]
 8023cc2:	440b      	add	r3, r1
 8023cc4:	330e      	adds	r3, #14
 8023cc6:	009b      	lsls	r3, r3, #2
 8023cc8:	4413      	add	r3, r2
 8023cca:	693a      	ldr	r2, [r7, #16]
 8023ccc:	605a      	str	r2, [r3, #4]

        /* If the new head is null, clear the bitmap. */
        if(next == &control->block_null) {
 8023cce:	68fb      	ldr	r3, [r7, #12]
 8023cd0:	693a      	ldr	r2, [r7, #16]
 8023cd2:	429a      	cmp	r2, r3
 8023cd4:	d123      	bne.n	8023d1e <remove_free_block+0xb2>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8023cd6:	68fa      	ldr	r2, [r7, #12]
 8023cd8:	687b      	ldr	r3, [r7, #4]
 8023cda:	3304      	adds	r3, #4
 8023cdc:	009b      	lsls	r3, r3, #2
 8023cde:	4413      	add	r3, r2
 8023ce0:	685a      	ldr	r2, [r3, #4]
 8023ce2:	2101      	movs	r1, #1
 8023ce4:	683b      	ldr	r3, [r7, #0]
 8023ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8023cea:	43db      	mvns	r3, r3
 8023cec:	401a      	ands	r2, r3
 8023cee:	68f9      	ldr	r1, [r7, #12]
 8023cf0:	687b      	ldr	r3, [r7, #4]
 8023cf2:	3304      	adds	r3, #4
 8023cf4:	009b      	lsls	r3, r3, #2
 8023cf6:	440b      	add	r3, r1
 8023cf8:	605a      	str	r2, [r3, #4]

            /* If the second bitmap is now empty, clear the fl bitmap. */
            if(!control->sl_bitmap[fl]) {
 8023cfa:	68fa      	ldr	r2, [r7, #12]
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	3304      	adds	r3, #4
 8023d00:	009b      	lsls	r3, r3, #2
 8023d02:	4413      	add	r3, r2
 8023d04:	685b      	ldr	r3, [r3, #4]
 8023d06:	2b00      	cmp	r3, #0
 8023d08:	d109      	bne.n	8023d1e <remove_free_block+0xb2>
                control->fl_bitmap &= ~(1U << fl);
 8023d0a:	68fb      	ldr	r3, [r7, #12]
 8023d0c:	691a      	ldr	r2, [r3, #16]
 8023d0e:	2101      	movs	r1, #1
 8023d10:	687b      	ldr	r3, [r7, #4]
 8023d12:	fa01 f303 	lsl.w	r3, r1, r3
 8023d16:	43db      	mvns	r3, r3
 8023d18:	401a      	ands	r2, r3
 8023d1a:	68fb      	ldr	r3, [r7, #12]
 8023d1c:	611a      	str	r2, [r3, #16]
            }
        }
    }
}
 8023d1e:	bf00      	nop
 8023d20:	371c      	adds	r7, #28
 8023d22:	46bd      	mov	sp, r7
 8023d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d28:	4770      	bx	lr

08023d2a <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8023d2a:	b590      	push	{r4, r7, lr}
 8023d2c:	b087      	sub	sp, #28
 8023d2e:	af00      	add	r7, sp, #0
 8023d30:	60f8      	str	r0, [r7, #12]
 8023d32:	60b9      	str	r1, [r7, #8]
 8023d34:	607a      	str	r2, [r7, #4]
 8023d36:	603b      	str	r3, [r7, #0]
    block_header_t * current = control->blocks[fl][sl];
 8023d38:	68fa      	ldr	r2, [r7, #12]
 8023d3a:	687b      	ldr	r3, [r7, #4]
 8023d3c:	0159      	lsls	r1, r3, #5
 8023d3e:	683b      	ldr	r3, [r7, #0]
 8023d40:	440b      	add	r3, r1
 8023d42:	330e      	adds	r3, #14
 8023d44:	009b      	lsls	r3, r3, #2
 8023d46:	4413      	add	r3, r2
 8023d48:	685b      	ldr	r3, [r3, #4]
 8023d4a:	617b      	str	r3, [r7, #20]
    tlsf_assert(current && "free list cannot have a null entry");
 8023d4c:	697b      	ldr	r3, [r7, #20]
 8023d4e:	2b00      	cmp	r3, #0
 8023d50:	d100      	bne.n	8023d54 <insert_free_block+0x2a>
 8023d52:	e7fe      	b.n	8023d52 <insert_free_block+0x28>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 8023d54:	68bb      	ldr	r3, [r7, #8]
 8023d56:	2b00      	cmp	r3, #0
 8023d58:	d100      	bne.n	8023d5c <insert_free_block+0x32>
 8023d5a:	e7fe      	b.n	8023d5a <insert_free_block+0x30>
    block->next_free = current;
 8023d5c:	68bb      	ldr	r3, [r7, #8]
 8023d5e:	697a      	ldr	r2, [r7, #20]
 8023d60:	609a      	str	r2, [r3, #8]
    block->prev_free = &control->block_null;
 8023d62:	68fa      	ldr	r2, [r7, #12]
 8023d64:	68bb      	ldr	r3, [r7, #8]
 8023d66:	60da      	str	r2, [r3, #12]
    current->prev_free = block;
 8023d68:	697b      	ldr	r3, [r7, #20]
 8023d6a:	68ba      	ldr	r2, [r7, #8]
 8023d6c:	60da      	str	r2, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8023d6e:	68b8      	ldr	r0, [r7, #8]
 8023d70:	f7ff fdf8 	bl	8023964 <block_to_ptr>
 8023d74:	4604      	mov	r4, r0
 8023d76:	68b8      	ldr	r0, [r7, #8]
 8023d78:	f7ff fdf4 	bl	8023964 <block_to_ptr>
 8023d7c:	4603      	mov	r3, r0
 8023d7e:	2104      	movs	r1, #4
 8023d80:	4618      	mov	r0, r3
 8023d82:	f7ff fe9d 	bl	8023ac0 <align_ptr>
 8023d86:	4603      	mov	r3, r0
 8023d88:	429c      	cmp	r4, r3
 8023d8a:	d000      	beq.n	8023d8e <insert_free_block+0x64>
 8023d8c:	e7fe      	b.n	8023d8c <insert_free_block+0x62>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 8023d8e:	68fa      	ldr	r2, [r7, #12]
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	0159      	lsls	r1, r3, #5
 8023d94:	683b      	ldr	r3, [r7, #0]
 8023d96:	440b      	add	r3, r1
 8023d98:	330e      	adds	r3, #14
 8023d9a:	009b      	lsls	r3, r3, #2
 8023d9c:	4413      	add	r3, r2
 8023d9e:	68ba      	ldr	r2, [r7, #8]
 8023da0:	605a      	str	r2, [r3, #4]
    control->fl_bitmap |= (1U << fl);
 8023da2:	68fb      	ldr	r3, [r7, #12]
 8023da4:	691a      	ldr	r2, [r3, #16]
 8023da6:	2101      	movs	r1, #1
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	fa01 f303 	lsl.w	r3, r1, r3
 8023dae:	431a      	orrs	r2, r3
 8023db0:	68fb      	ldr	r3, [r7, #12]
 8023db2:	611a      	str	r2, [r3, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8023db4:	68fa      	ldr	r2, [r7, #12]
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	3304      	adds	r3, #4
 8023dba:	009b      	lsls	r3, r3, #2
 8023dbc:	4413      	add	r3, r2
 8023dbe:	685a      	ldr	r2, [r3, #4]
 8023dc0:	2101      	movs	r1, #1
 8023dc2:	683b      	ldr	r3, [r7, #0]
 8023dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8023dc8:	431a      	orrs	r2, r3
 8023dca:	68f9      	ldr	r1, [r7, #12]
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	3304      	adds	r3, #4
 8023dd0:	009b      	lsls	r3, r3, #2
 8023dd2:	440b      	add	r3, r1
 8023dd4:	605a      	str	r2, [r3, #4]
}
 8023dd6:	bf00      	nop
 8023dd8:	371c      	adds	r7, #28
 8023dda:	46bd      	mov	sp, r7
 8023ddc:	bd90      	pop	{r4, r7, pc}

08023dde <block_remove>:

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 8023dde:	b580      	push	{r7, lr}
 8023de0:	b084      	sub	sp, #16
 8023de2:	af00      	add	r7, sp, #0
 8023de4:	6078      	str	r0, [r7, #4]
 8023de6:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8023de8:	6838      	ldr	r0, [r7, #0]
 8023dea:	f7ff fd16 	bl	802381a <block_size>
 8023dee:	f107 0208 	add.w	r2, r7, #8
 8023df2:	f107 030c 	add.w	r3, r7, #12
 8023df6:	4619      	mov	r1, r3
 8023df8:	f7ff fe9c 	bl	8023b34 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8023dfc:	68fa      	ldr	r2, [r7, #12]
 8023dfe:	68bb      	ldr	r3, [r7, #8]
 8023e00:	6839      	ldr	r1, [r7, #0]
 8023e02:	6878      	ldr	r0, [r7, #4]
 8023e04:	f7ff ff32 	bl	8023c6c <remove_free_block>
}
 8023e08:	bf00      	nop
 8023e0a:	3710      	adds	r7, #16
 8023e0c:	46bd      	mov	sp, r7
 8023e0e:	bd80      	pop	{r7, pc}

08023e10 <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 8023e10:	b580      	push	{r7, lr}
 8023e12:	b084      	sub	sp, #16
 8023e14:	af00      	add	r7, sp, #0
 8023e16:	6078      	str	r0, [r7, #4]
 8023e18:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8023e1a:	6838      	ldr	r0, [r7, #0]
 8023e1c:	f7ff fcfd 	bl	802381a <block_size>
 8023e20:	f107 0208 	add.w	r2, r7, #8
 8023e24:	f107 030c 	add.w	r3, r7, #12
 8023e28:	4619      	mov	r1, r3
 8023e2a:	f7ff fe83 	bl	8023b34 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 8023e2e:	68fa      	ldr	r2, [r7, #12]
 8023e30:	68bb      	ldr	r3, [r7, #8]
 8023e32:	6839      	ldr	r1, [r7, #0]
 8023e34:	6878      	ldr	r0, [r7, #4]
 8023e36:	f7ff ff78 	bl	8023d2a <insert_free_block>
}
 8023e3a:	bf00      	nop
 8023e3c:	3710      	adds	r7, #16
 8023e3e:	46bd      	mov	sp, r7
 8023e40:	bd80      	pop	{r7, pc}

08023e42 <block_can_split>:

static int block_can_split(block_header_t * block, size_t size)
{
 8023e42:	b580      	push	{r7, lr}
 8023e44:	b082      	sub	sp, #8
 8023e46:	af00      	add	r7, sp, #0
 8023e48:	6078      	str	r0, [r7, #4]
 8023e4a:	6039      	str	r1, [r7, #0]
    return block_size(block) >= sizeof(block_header_t) + size;
 8023e4c:	6878      	ldr	r0, [r7, #4]
 8023e4e:	f7ff fce4 	bl	802381a <block_size>
 8023e52:	4602      	mov	r2, r0
 8023e54:	683b      	ldr	r3, [r7, #0]
 8023e56:	3310      	adds	r3, #16
 8023e58:	429a      	cmp	r2, r3
 8023e5a:	bf2c      	ite	cs
 8023e5c:	2301      	movcs	r3, #1
 8023e5e:	2300      	movcc	r3, #0
 8023e60:	b2db      	uxtb	r3, r3
}
 8023e62:	4618      	mov	r0, r3
 8023e64:	3708      	adds	r7, #8
 8023e66:	46bd      	mov	sp, r7
 8023e68:	bd80      	pop	{r7, pc}

08023e6a <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8023e6a:	b590      	push	{r4, r7, lr}
 8023e6c:	b085      	sub	sp, #20
 8023e6e:	af00      	add	r7, sp, #0
 8023e70:	6078      	str	r0, [r7, #4]
 8023e72:	6039      	str	r1, [r7, #0]
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 8023e74:	6878      	ldr	r0, [r7, #4]
 8023e76:	f7ff fd75 	bl	8023964 <block_to_ptr>
 8023e7a:	4602      	mov	r2, r0
 8023e7c:	2104      	movs	r1, #4
 8023e7e:	683b      	ldr	r3, [r7, #0]
 8023e80:	1a5b      	subs	r3, r3, r1
 8023e82:	4619      	mov	r1, r3
 8023e84:	4610      	mov	r0, r2
 8023e86:	f7ff fd7a 	bl	802397e <offset_to_block>
 8023e8a:	60f8      	str	r0, [r7, #12]

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8023e8c:	6878      	ldr	r0, [r7, #4]
 8023e8e:	f7ff fcc4 	bl	802381a <block_size>
 8023e92:	4602      	mov	r2, r0
 8023e94:	2104      	movs	r1, #4
 8023e96:	683b      	ldr	r3, [r7, #0]
 8023e98:	440b      	add	r3, r1
 8023e9a:	1ad3      	subs	r3, r2, r3
 8023e9c:	60bb      	str	r3, [r7, #8]

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8023e9e:	68f8      	ldr	r0, [r7, #12]
 8023ea0:	f7ff fd60 	bl	8023964 <block_to_ptr>
 8023ea4:	4604      	mov	r4, r0
 8023ea6:	68f8      	ldr	r0, [r7, #12]
 8023ea8:	f7ff fd5c 	bl	8023964 <block_to_ptr>
 8023eac:	4603      	mov	r3, r0
 8023eae:	2104      	movs	r1, #4
 8023eb0:	4618      	mov	r0, r3
 8023eb2:	f7ff fe05 	bl	8023ac0 <align_ptr>
 8023eb6:	4603      	mov	r3, r0
 8023eb8:	429c      	cmp	r4, r3
 8023eba:	d000      	beq.n	8023ebe <block_split+0x54>
 8023ebc:	e7fe      	b.n	8023ebc <block_split+0x52>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8023ebe:	6878      	ldr	r0, [r7, #4]
 8023ec0:	f7ff fcab 	bl	802381a <block_size>
 8023ec4:	4601      	mov	r1, r0
 8023ec6:	68ba      	ldr	r2, [r7, #8]
 8023ec8:	683b      	ldr	r3, [r7, #0]
 8023eca:	4413      	add	r3, r2
 8023ecc:	2204      	movs	r2, #4
 8023ece:	4413      	add	r3, r2
 8023ed0:	4299      	cmp	r1, r3
 8023ed2:	d000      	beq.n	8023ed6 <block_split+0x6c>
 8023ed4:	e7fe      	b.n	8023ed4 <block_split+0x6a>
    block_set_size(remaining, remain_size);
 8023ed6:	68b9      	ldr	r1, [r7, #8]
 8023ed8:	68f8      	ldr	r0, [r7, #12]
 8023eda:	f7ff fcaf 	bl	802383c <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8023ede:	68f8      	ldr	r0, [r7, #12]
 8023ee0:	f7ff fc9b 	bl	802381a <block_size>
 8023ee4:	4603      	mov	r3, r0
 8023ee6:	220c      	movs	r2, #12
 8023ee8:	4293      	cmp	r3, r2
 8023eea:	d200      	bcs.n	8023eee <block_split+0x84>
 8023eec:	e7fe      	b.n	8023eec <block_split+0x82>

    block_set_size(block, size);
 8023eee:	6839      	ldr	r1, [r7, #0]
 8023ef0:	6878      	ldr	r0, [r7, #4]
 8023ef2:	f7ff fca3 	bl	802383c <block_set_size>
    block_mark_as_free(remaining);
 8023ef6:	68f8      	ldr	r0, [r7, #12]
 8023ef8:	f7ff fd8f 	bl	8023a1a <block_mark_as_free>

    return remaining;
 8023efc:	68fb      	ldr	r3, [r7, #12]
}
 8023efe:	4618      	mov	r0, r3
 8023f00:	3714      	adds	r7, #20
 8023f02:	46bd      	mov	sp, r7
 8023f04:	bd90      	pop	{r4, r7, pc}

08023f06 <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 8023f06:	b580      	push	{r7, lr}
 8023f08:	b082      	sub	sp, #8
 8023f0a:	af00      	add	r7, sp, #0
 8023f0c:	6078      	str	r0, [r7, #4]
 8023f0e:	6039      	str	r1, [r7, #0]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8023f10:	6878      	ldr	r0, [r7, #4]
 8023f12:	f7ff fcaa 	bl	802386a <block_is_last>
 8023f16:	4603      	mov	r3, r0
 8023f18:	2b00      	cmp	r3, #0
 8023f1a:	d000      	beq.n	8023f1e <block_absorb+0x18>
 8023f1c:	e7fe      	b.n	8023f1c <block_absorb+0x16>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 8023f1e:	6838      	ldr	r0, [r7, #0]
 8023f20:	f7ff fc7b 	bl	802381a <block_size>
 8023f24:	4603      	mov	r3, r0
 8023f26:	2204      	movs	r2, #4
 8023f28:	441a      	add	r2, r3
 8023f2a:	687b      	ldr	r3, [r7, #4]
 8023f2c:	685b      	ldr	r3, [r3, #4]
 8023f2e:	441a      	add	r2, r3
 8023f30:	687b      	ldr	r3, [r7, #4]
 8023f32:	605a      	str	r2, [r3, #4]
    block_link_next(prev);
 8023f34:	6878      	ldr	r0, [r7, #4]
 8023f36:	f7ff fd60 	bl	80239fa <block_link_next>
    return prev;
 8023f3a:	687b      	ldr	r3, [r7, #4]
}
 8023f3c:	4618      	mov	r0, r3
 8023f3e:	3708      	adds	r7, #8
 8023f40:	46bd      	mov	sp, r7
 8023f42:	bd80      	pop	{r7, pc}

08023f44 <block_merge_prev>:

/* Merge a just-freed block with an adjacent previous free block. */
static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
{
 8023f44:	b580      	push	{r7, lr}
 8023f46:	b084      	sub	sp, #16
 8023f48:	af00      	add	r7, sp, #0
 8023f4a:	6078      	str	r0, [r7, #4]
 8023f4c:	6039      	str	r1, [r7, #0]
    if(block_is_prev_free(block)) {
 8023f4e:	6838      	ldr	r0, [r7, #0]
 8023f50:	f7ff fccb 	bl	80238ea <block_is_prev_free>
 8023f54:	4603      	mov	r3, r0
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	d017      	beq.n	8023f8a <block_merge_prev+0x46>
        block_header_t * prev = block_prev(block);
 8023f5a:	6838      	ldr	r0, [r7, #0]
 8023f5c:	f7ff fd1d 	bl	802399a <block_prev>
 8023f60:	60f8      	str	r0, [r7, #12]
        tlsf_assert(prev && "prev physical block can't be null");
 8023f62:	68fb      	ldr	r3, [r7, #12]
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	d100      	bne.n	8023f6a <block_merge_prev+0x26>
 8023f68:	e7fe      	b.n	8023f68 <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8023f6a:	68f8      	ldr	r0, [r7, #12]
 8023f6c:	f7ff fc8e 	bl	802388c <block_is_free>
 8023f70:	4603      	mov	r3, r0
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d100      	bne.n	8023f78 <block_merge_prev+0x34>
 8023f76:	e7fe      	b.n	8023f76 <block_merge_prev+0x32>
        block_remove(control, prev);
 8023f78:	68f9      	ldr	r1, [r7, #12]
 8023f7a:	6878      	ldr	r0, [r7, #4]
 8023f7c:	f7ff ff2f 	bl	8023dde <block_remove>
        block = block_absorb(prev, block);
 8023f80:	6839      	ldr	r1, [r7, #0]
 8023f82:	68f8      	ldr	r0, [r7, #12]
 8023f84:	f7ff ffbf 	bl	8023f06 <block_absorb>
 8023f88:	6038      	str	r0, [r7, #0]
    }

    return block;
 8023f8a:	683b      	ldr	r3, [r7, #0]
}
 8023f8c:	4618      	mov	r0, r3
 8023f8e:	3710      	adds	r7, #16
 8023f90:	46bd      	mov	sp, r7
 8023f92:	bd80      	pop	{r7, pc}

08023f94 <block_merge_next>:

/* Merge a just-freed block with an adjacent free block. */
static block_header_t * block_merge_next(control_t * control, block_header_t * block)
{
 8023f94:	b580      	push	{r7, lr}
 8023f96:	b084      	sub	sp, #16
 8023f98:	af00      	add	r7, sp, #0
 8023f9a:	6078      	str	r0, [r7, #4]
 8023f9c:	6039      	str	r1, [r7, #0]
    block_header_t * next = block_next(block);
 8023f9e:	6838      	ldr	r0, [r7, #0]
 8023fa0:	f7ff fd0c 	bl	80239bc <block_next>
 8023fa4:	60f8      	str	r0, [r7, #12]
    tlsf_assert(next && "next physical block can't be null");
 8023fa6:	68fb      	ldr	r3, [r7, #12]
 8023fa8:	2b00      	cmp	r3, #0
 8023faa:	d100      	bne.n	8023fae <block_merge_next+0x1a>
 8023fac:	e7fe      	b.n	8023fac <block_merge_next+0x18>

    if(block_is_free(next)) {
 8023fae:	68f8      	ldr	r0, [r7, #12]
 8023fb0:	f7ff fc6c 	bl	802388c <block_is_free>
 8023fb4:	4603      	mov	r3, r0
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	d00f      	beq.n	8023fda <block_merge_next+0x46>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8023fba:	6838      	ldr	r0, [r7, #0]
 8023fbc:	f7ff fc55 	bl	802386a <block_is_last>
 8023fc0:	4603      	mov	r3, r0
 8023fc2:	2b00      	cmp	r3, #0
 8023fc4:	d000      	beq.n	8023fc8 <block_merge_next+0x34>
 8023fc6:	e7fe      	b.n	8023fc6 <block_merge_next+0x32>
        block_remove(control, next);
 8023fc8:	68f9      	ldr	r1, [r7, #12]
 8023fca:	6878      	ldr	r0, [r7, #4]
 8023fcc:	f7ff ff07 	bl	8023dde <block_remove>
        block = block_absorb(block, next);
 8023fd0:	68f9      	ldr	r1, [r7, #12]
 8023fd2:	6838      	ldr	r0, [r7, #0]
 8023fd4:	f7ff ff97 	bl	8023f06 <block_absorb>
 8023fd8:	6038      	str	r0, [r7, #0]
    }

    return block;
 8023fda:	683b      	ldr	r3, [r7, #0]
}
 8023fdc:	4618      	mov	r0, r3
 8023fde:	3710      	adds	r7, #16
 8023fe0:	46bd      	mov	sp, r7
 8023fe2:	bd80      	pop	{r7, pc}

08023fe4 <block_trim_free>:

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
 8023fe4:	b580      	push	{r7, lr}
 8023fe6:	b086      	sub	sp, #24
 8023fe8:	af00      	add	r7, sp, #0
 8023fea:	60f8      	str	r0, [r7, #12]
 8023fec:	60b9      	str	r1, [r7, #8]
 8023fee:	607a      	str	r2, [r7, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 8023ff0:	68b8      	ldr	r0, [r7, #8]
 8023ff2:	f7ff fc4b 	bl	802388c <block_is_free>
 8023ff6:	4603      	mov	r3, r0
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	d100      	bne.n	8023ffe <block_trim_free+0x1a>
 8023ffc:	e7fe      	b.n	8023ffc <block_trim_free+0x18>
    if(block_can_split(block, size)) {
 8023ffe:	6879      	ldr	r1, [r7, #4]
 8024000:	68b8      	ldr	r0, [r7, #8]
 8024002:	f7ff ff1e 	bl	8023e42 <block_can_split>
 8024006:	4603      	mov	r3, r0
 8024008:	2b00      	cmp	r3, #0
 802400a:	d00e      	beq.n	802402a <block_trim_free+0x46>
        block_header_t * remaining_block = block_split(block, size);
 802400c:	6879      	ldr	r1, [r7, #4]
 802400e:	68b8      	ldr	r0, [r7, #8]
 8024010:	f7ff ff2b 	bl	8023e6a <block_split>
 8024014:	6178      	str	r0, [r7, #20]
        block_link_next(block);
 8024016:	68b8      	ldr	r0, [r7, #8]
 8024018:	f7ff fcef 	bl	80239fa <block_link_next>
        block_set_prev_free(remaining_block);
 802401c:	6978      	ldr	r0, [r7, #20]
 802401e:	f7ff fc72 	bl	8023906 <block_set_prev_free>
        block_insert(control, remaining_block);
 8024022:	6979      	ldr	r1, [r7, #20]
 8024024:	68f8      	ldr	r0, [r7, #12]
 8024026:	f7ff fef3 	bl	8023e10 <block_insert>
    }
}
 802402a:	bf00      	nop
 802402c:	3718      	adds	r7, #24
 802402e:	46bd      	mov	sp, r7
 8024030:	bd80      	pop	{r7, pc}

08024032 <block_trim_used>:

/* Trim any trailing block space off the end of a used block, return to pool. */
static void block_trim_used(control_t * control, block_header_t * block, size_t size)
{
 8024032:	b580      	push	{r7, lr}
 8024034:	b086      	sub	sp, #24
 8024036:	af00      	add	r7, sp, #0
 8024038:	60f8      	str	r0, [r7, #12]
 802403a:	60b9      	str	r1, [r7, #8]
 802403c:	607a      	str	r2, [r7, #4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 802403e:	68b8      	ldr	r0, [r7, #8]
 8024040:	f7ff fc24 	bl	802388c <block_is_free>
 8024044:	4603      	mov	r3, r0
 8024046:	2b00      	cmp	r3, #0
 8024048:	d000      	beq.n	802404c <block_trim_used+0x1a>
 802404a:	e7fe      	b.n	802404a <block_trim_used+0x18>
    if(block_can_split(block, size)) {
 802404c:	6879      	ldr	r1, [r7, #4]
 802404e:	68b8      	ldr	r0, [r7, #8]
 8024050:	f7ff fef7 	bl	8023e42 <block_can_split>
 8024054:	4603      	mov	r3, r0
 8024056:	2b00      	cmp	r3, #0
 8024058:	d010      	beq.n	802407c <block_trim_used+0x4a>
        /* If the next block is free, we must coalesce. */
        block_header_t * remaining_block = block_split(block, size);
 802405a:	6879      	ldr	r1, [r7, #4]
 802405c:	68b8      	ldr	r0, [r7, #8]
 802405e:	f7ff ff04 	bl	8023e6a <block_split>
 8024062:	6178      	str	r0, [r7, #20]
        block_set_prev_used(remaining_block);
 8024064:	6978      	ldr	r0, [r7, #20]
 8024066:	f7ff fc5e 	bl	8023926 <block_set_prev_used>

        remaining_block = block_merge_next(control, remaining_block);
 802406a:	6979      	ldr	r1, [r7, #20]
 802406c:	68f8      	ldr	r0, [r7, #12]
 802406e:	f7ff ff91 	bl	8023f94 <block_merge_next>
 8024072:	6178      	str	r0, [r7, #20]
        block_insert(control, remaining_block);
 8024074:	6979      	ldr	r1, [r7, #20]
 8024076:	68f8      	ldr	r0, [r7, #12]
 8024078:	f7ff feca 	bl	8023e10 <block_insert>
    }
}
 802407c:	bf00      	nop
 802407e:	3718      	adds	r7, #24
 8024080:	46bd      	mov	sp, r7
 8024082:	bd80      	pop	{r7, pc}

08024084 <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 8024084:	b580      	push	{r7, lr}
 8024086:	b086      	sub	sp, #24
 8024088:	af00      	add	r7, sp, #0
 802408a:	6078      	str	r0, [r7, #4]
 802408c:	6039      	str	r1, [r7, #0]
    int fl = 0, sl = 0;
 802408e:	2300      	movs	r3, #0
 8024090:	613b      	str	r3, [r7, #16]
 8024092:	2300      	movs	r3, #0
 8024094:	60fb      	str	r3, [r7, #12]
    block_header_t * block = 0;
 8024096:	2300      	movs	r3, #0
 8024098:	617b      	str	r3, [r7, #20]

    if(size) {
 802409a:	683b      	ldr	r3, [r7, #0]
 802409c:	2b00      	cmp	r3, #0
 802409e:	d013      	beq.n	80240c8 <block_locate_free+0x44>
        mapping_search(size, &fl, &sl);
 80240a0:	f107 020c 	add.w	r2, r7, #12
 80240a4:	f107 0310 	add.w	r3, r7, #16
 80240a8:	4619      	mov	r1, r3
 80240aa:	6838      	ldr	r0, [r7, #0]
 80240ac:	f7ff fd6d 	bl	8023b8a <mapping_search>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 80240b0:	693b      	ldr	r3, [r7, #16]
 80240b2:	2b09      	cmp	r3, #9
 80240b4:	dc08      	bgt.n	80240c8 <block_locate_free+0x44>
            block = search_suitable_block(control, &fl, &sl);
 80240b6:	f107 020c 	add.w	r2, r7, #12
 80240ba:	f107 0310 	add.w	r3, r7, #16
 80240be:	4619      	mov	r1, r3
 80240c0:	6878      	ldr	r0, [r7, #4]
 80240c2:	f7ff fd82 	bl	8023bca <search_suitable_block>
 80240c6:	6178      	str	r0, [r7, #20]
        }
    }

    if(block) {
 80240c8:	697b      	ldr	r3, [r7, #20]
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	d00d      	beq.n	80240ea <block_locate_free+0x66>
        tlsf_assert(block_size(block) >= size);
 80240ce:	6978      	ldr	r0, [r7, #20]
 80240d0:	f7ff fba3 	bl	802381a <block_size>
 80240d4:	4602      	mov	r2, r0
 80240d6:	683b      	ldr	r3, [r7, #0]
 80240d8:	4293      	cmp	r3, r2
 80240da:	d900      	bls.n	80240de <block_locate_free+0x5a>
 80240dc:	e7fe      	b.n	80240dc <block_locate_free+0x58>
        remove_free_block(control, block, fl, sl);
 80240de:	693a      	ldr	r2, [r7, #16]
 80240e0:	68fb      	ldr	r3, [r7, #12]
 80240e2:	6979      	ldr	r1, [r7, #20]
 80240e4:	6878      	ldr	r0, [r7, #4]
 80240e6:	f7ff fdc1 	bl	8023c6c <remove_free_block>
    }

    return block;
 80240ea:	697b      	ldr	r3, [r7, #20]
}
 80240ec:	4618      	mov	r0, r3
 80240ee:	3718      	adds	r7, #24
 80240f0:	46bd      	mov	sp, r7
 80240f2:	bd80      	pop	{r7, pc}

080240f4 <block_prepare_used>:

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 80240f4:	b580      	push	{r7, lr}
 80240f6:	b086      	sub	sp, #24
 80240f8:	af00      	add	r7, sp, #0
 80240fa:	60f8      	str	r0, [r7, #12]
 80240fc:	60b9      	str	r1, [r7, #8]
 80240fe:	607a      	str	r2, [r7, #4]
    void * p = 0;
 8024100:	2300      	movs	r3, #0
 8024102:	617b      	str	r3, [r7, #20]
    if(block) {
 8024104:	68bb      	ldr	r3, [r7, #8]
 8024106:	2b00      	cmp	r3, #0
 8024108:	d00f      	beq.n	802412a <block_prepare_used+0x36>
        tlsf_assert(size && "size must be non-zero");
 802410a:	687b      	ldr	r3, [r7, #4]
 802410c:	2b00      	cmp	r3, #0
 802410e:	d100      	bne.n	8024112 <block_prepare_used+0x1e>
 8024110:	e7fe      	b.n	8024110 <block_prepare_used+0x1c>
        block_trim_free(control, block, size);
 8024112:	687a      	ldr	r2, [r7, #4]
 8024114:	68b9      	ldr	r1, [r7, #8]
 8024116:	68f8      	ldr	r0, [r7, #12]
 8024118:	f7ff ff64 	bl	8023fe4 <block_trim_free>
        block_mark_as_used(block);
 802411c:	68b8      	ldr	r0, [r7, #8]
 802411e:	f7ff fc8e 	bl	8023a3e <block_mark_as_used>
        p = block_to_ptr(block);
 8024122:	68b8      	ldr	r0, [r7, #8]
 8024124:	f7ff fc1e 	bl	8023964 <block_to_ptr>
 8024128:	6178      	str	r0, [r7, #20]
    }
    return p;
 802412a:	697b      	ldr	r3, [r7, #20]
}
 802412c:	4618      	mov	r0, r3
 802412e:	3718      	adds	r7, #24
 8024130:	46bd      	mov	sp, r7
 8024132:	bd80      	pop	{r7, pc}

08024134 <control_constructor>:

/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
 8024134:	b480      	push	{r7}
 8024136:	b085      	sub	sp, #20
 8024138:	af00      	add	r7, sp, #0
 802413a:	6078      	str	r0, [r7, #4]
    int i, j;

    control->block_null.next_free = &control->block_null;
 802413c:	687a      	ldr	r2, [r7, #4]
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	609a      	str	r2, [r3, #8]
    control->block_null.prev_free = &control->block_null;
 8024142:	687a      	ldr	r2, [r7, #4]
 8024144:	687b      	ldr	r3, [r7, #4]
 8024146:	60da      	str	r2, [r3, #12]

    control->fl_bitmap = 0;
 8024148:	687b      	ldr	r3, [r7, #4]
 802414a:	2200      	movs	r2, #0
 802414c:	611a      	str	r2, [r3, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 802414e:	2300      	movs	r3, #0
 8024150:	60fb      	str	r3, [r7, #12]
 8024152:	e01c      	b.n	802418e <control_constructor+0x5a>
        control->sl_bitmap[i] = 0;
 8024154:	687a      	ldr	r2, [r7, #4]
 8024156:	68fb      	ldr	r3, [r7, #12]
 8024158:	3304      	adds	r3, #4
 802415a:	009b      	lsls	r3, r3, #2
 802415c:	4413      	add	r3, r2
 802415e:	2200      	movs	r2, #0
 8024160:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8024162:	2300      	movs	r3, #0
 8024164:	60bb      	str	r3, [r7, #8]
 8024166:	e00c      	b.n	8024182 <control_constructor+0x4e>
            control->blocks[i][j] = &control->block_null;
 8024168:	687a      	ldr	r2, [r7, #4]
 802416a:	6879      	ldr	r1, [r7, #4]
 802416c:	68fb      	ldr	r3, [r7, #12]
 802416e:	0158      	lsls	r0, r3, #5
 8024170:	68bb      	ldr	r3, [r7, #8]
 8024172:	4403      	add	r3, r0
 8024174:	330e      	adds	r3, #14
 8024176:	009b      	lsls	r3, r3, #2
 8024178:	440b      	add	r3, r1
 802417a:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 802417c:	68bb      	ldr	r3, [r7, #8]
 802417e:	3301      	adds	r3, #1
 8024180:	60bb      	str	r3, [r7, #8]
 8024182:	68bb      	ldr	r3, [r7, #8]
 8024184:	2b1f      	cmp	r3, #31
 8024186:	ddef      	ble.n	8024168 <control_constructor+0x34>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8024188:	68fb      	ldr	r3, [r7, #12]
 802418a:	3301      	adds	r3, #1
 802418c:	60fb      	str	r3, [r7, #12]
 802418e:	68fb      	ldr	r3, [r7, #12]
 8024190:	2b09      	cmp	r3, #9
 8024192:	dddf      	ble.n	8024154 <control_constructor+0x20>
        }
    }
}
 8024194:	bf00      	nop
 8024196:	bf00      	nop
 8024198:	3714      	adds	r7, #20
 802419a:	46bd      	mov	sp, r7
 802419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241a0:	4770      	bx	lr

080241a2 <lv_tlsf_size>:
/*
** Size of the TLSF structures in a given memory block passed to
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
 80241a2:	b480      	push	{r7}
 80241a4:	af00      	add	r7, sp, #0
    return sizeof(control_t);
 80241a6:	f240 533c 	movw	r3, #1340	; 0x53c
}
 80241aa:	4618      	mov	r0, r3
 80241ac:	46bd      	mov	sp, r7
 80241ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241b2:	4770      	bx	lr

080241b4 <lv_tlsf_pool_overhead>:
** Overhead of the TLSF structures in a given memory block passed to
** lv_tlsf_add_pool, equal to the overhead of a free block and the
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
 80241b4:	b480      	push	{r7}
 80241b6:	af00      	add	r7, sp, #0
    return 2 * block_header_overhead;
 80241b8:	2304      	movs	r3, #4
 80241ba:	005b      	lsls	r3, r3, #1
}
 80241bc:	4618      	mov	r0, r3
 80241be:	46bd      	mov	sp, r7
 80241c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241c4:	4770      	bx	lr

080241c6 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 80241c6:	b580      	push	{r7, lr}
 80241c8:	b088      	sub	sp, #32
 80241ca:	af00      	add	r7, sp, #0
 80241cc:	60f8      	str	r0, [r7, #12]
 80241ce:	60b9      	str	r1, [r7, #8]
 80241d0:	607a      	str	r2, [r7, #4]
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 80241d2:	f7ff ffef 	bl	80241b4 <lv_tlsf_pool_overhead>
 80241d6:	61f8      	str	r0, [r7, #28]
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 80241d8:	687a      	ldr	r2, [r7, #4]
 80241da:	69fb      	ldr	r3, [r7, #28]
 80241dc:	1ad3      	subs	r3, r2, r3
 80241de:	2104      	movs	r1, #4
 80241e0:	4618      	mov	r0, r3
 80241e2:	f7ff fc57 	bl	8023a94 <align_down>
 80241e6:	61b8      	str	r0, [r7, #24]

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 80241e8:	68bb      	ldr	r3, [r7, #8]
 80241ea:	f003 0303 	and.w	r3, r3, #3
 80241ee:	2b00      	cmp	r3, #0
 80241f0:	d001      	beq.n	80241f6 <lv_tlsf_add_pool+0x30>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 80241f2:	2300      	movs	r3, #0
 80241f4:	e02e      	b.n	8024254 <lv_tlsf_add_pool+0x8e>
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 80241f6:	220c      	movs	r2, #12
 80241f8:	69bb      	ldr	r3, [r7, #24]
 80241fa:	4293      	cmp	r3, r2
 80241fc:	d304      	bcc.n	8024208 <lv_tlsf_add_pool+0x42>
 80241fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8024202:	69bb      	ldr	r3, [r7, #24]
 8024204:	4293      	cmp	r3, r2
 8024206:	d901      	bls.n	802420c <lv_tlsf_add_pool+0x46>
#else
        printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
               (unsigned int)(pool_overhead + block_size_min),
               (unsigned int)(pool_overhead + block_size_max));
#endif
        return 0;
 8024208:	2300      	movs	r3, #0
 802420a:	e023      	b.n	8024254 <lv_tlsf_add_pool+0x8e>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 802420c:	2304      	movs	r3, #4
 802420e:	425b      	negs	r3, r3
 8024210:	4619      	mov	r1, r3
 8024212:	68b8      	ldr	r0, [r7, #8]
 8024214:	f7ff fbb3 	bl	802397e <offset_to_block>
 8024218:	6178      	str	r0, [r7, #20]
    block_set_size(block, pool_bytes);
 802421a:	69b9      	ldr	r1, [r7, #24]
 802421c:	6978      	ldr	r0, [r7, #20]
 802421e:	f7ff fb0d 	bl	802383c <block_set_size>
    block_set_free(block);
 8024222:	6978      	ldr	r0, [r7, #20]
 8024224:	f7ff fb40 	bl	80238a8 <block_set_free>
    block_set_prev_used(block);
 8024228:	6978      	ldr	r0, [r7, #20]
 802422a:	f7ff fb7c 	bl	8023926 <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 802422e:	6979      	ldr	r1, [r7, #20]
 8024230:	68f8      	ldr	r0, [r7, #12]
 8024232:	f7ff fded 	bl	8023e10 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8024236:	6978      	ldr	r0, [r7, #20]
 8024238:	f7ff fbdf 	bl	80239fa <block_link_next>
 802423c:	6138      	str	r0, [r7, #16]
    block_set_size(next, 0);
 802423e:	2100      	movs	r1, #0
 8024240:	6938      	ldr	r0, [r7, #16]
 8024242:	f7ff fafb 	bl	802383c <block_set_size>
    block_set_used(next);
 8024246:	6938      	ldr	r0, [r7, #16]
 8024248:	f7ff fb3e 	bl	80238c8 <block_set_used>
    block_set_prev_free(next);
 802424c:	6938      	ldr	r0, [r7, #16]
 802424e:	f7ff fb5a 	bl	8023906 <block_set_prev_free>

    return mem;
 8024252:	68bb      	ldr	r3, [r7, #8]
}
 8024254:	4618      	mov	r0, r3
 8024256:	3720      	adds	r7, #32
 8024258:	46bd      	mov	sp, r7
 802425a:	bd80      	pop	{r7, pc}

0802425c <lv_tlsf_create>:
    return rv;
}
#endif

lv_tlsf_t lv_tlsf_create(void * mem)
{
 802425c:	b580      	push	{r7, lr}
 802425e:	b082      	sub	sp, #8
 8024260:	af00      	add	r7, sp, #0
 8024262:	6078      	str	r0, [r7, #4]
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	f003 0303 	and.w	r3, r3, #3
 802426a:	2b00      	cmp	r3, #0
 802426c:	d001      	beq.n	8024272 <lv_tlsf_create+0x16>
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 802426e:	2300      	movs	r3, #0
 8024270:	e003      	b.n	802427a <lv_tlsf_create+0x1e>
    }

    control_constructor(tlsf_cast(control_t *, mem));
 8024272:	6878      	ldr	r0, [r7, #4]
 8024274:	f7ff ff5e 	bl	8024134 <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 8024278:	687b      	ldr	r3, [r7, #4]
}
 802427a:	4618      	mov	r0, r3
 802427c:	3708      	adds	r7, #8
 802427e:	46bd      	mov	sp, r7
 8024280:	bd80      	pop	{r7, pc}

08024282 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8024282:	b590      	push	{r4, r7, lr}
 8024284:	b085      	sub	sp, #20
 8024286:	af00      	add	r7, sp, #0
 8024288:	6078      	str	r0, [r7, #4]
 802428a:	6039      	str	r1, [r7, #0]
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 802428c:	6878      	ldr	r0, [r7, #4]
 802428e:	f7ff ffe5 	bl	802425c <lv_tlsf_create>
 8024292:	60f8      	str	r0, [r7, #12]
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8024294:	f7ff ff85 	bl	80241a2 <lv_tlsf_size>
 8024298:	4602      	mov	r2, r0
 802429a:	687b      	ldr	r3, [r7, #4]
 802429c:	189c      	adds	r4, r3, r2
 802429e:	f7ff ff80 	bl	80241a2 <lv_tlsf_size>
 80242a2:	4602      	mov	r2, r0
 80242a4:	683b      	ldr	r3, [r7, #0]
 80242a6:	1a9b      	subs	r3, r3, r2
 80242a8:	461a      	mov	r2, r3
 80242aa:	4621      	mov	r1, r4
 80242ac:	68f8      	ldr	r0, [r7, #12]
 80242ae:	f7ff ff8a 	bl	80241c6 <lv_tlsf_add_pool>
    return tlsf;
 80242b2:	68fb      	ldr	r3, [r7, #12]
}
 80242b4:	4618      	mov	r0, r3
 80242b6:	3714      	adds	r7, #20
 80242b8:	46bd      	mov	sp, r7
 80242ba:	bd90      	pop	{r4, r7, pc}

080242bc <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 80242bc:	b580      	push	{r7, lr}
 80242be:	b086      	sub	sp, #24
 80242c0:	af00      	add	r7, sp, #0
 80242c2:	6078      	str	r0, [r7, #4]
 80242c4:	6039      	str	r1, [r7, #0]
    control_t * control = tlsf_cast(control_t *, tlsf);
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	617b      	str	r3, [r7, #20]
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80242ca:	2104      	movs	r1, #4
 80242cc:	6838      	ldr	r0, [r7, #0]
 80242ce:	f7ff fc12 	bl	8023af6 <adjust_request_size>
 80242d2:	6138      	str	r0, [r7, #16]
    block_header_t * block = block_locate_free(control, adjust);
 80242d4:	6939      	ldr	r1, [r7, #16]
 80242d6:	6978      	ldr	r0, [r7, #20]
 80242d8:	f7ff fed4 	bl	8024084 <block_locate_free>
 80242dc:	60f8      	str	r0, [r7, #12]
    return block_prepare_used(control, block, adjust);
 80242de:	693a      	ldr	r2, [r7, #16]
 80242e0:	68f9      	ldr	r1, [r7, #12]
 80242e2:	6978      	ldr	r0, [r7, #20]
 80242e4:	f7ff ff06 	bl	80240f4 <block_prepare_used>
 80242e8:	4603      	mov	r3, r0
}
 80242ea:	4618      	mov	r0, r3
 80242ec:	3718      	adds	r7, #24
 80242ee:	46bd      	mov	sp, r7
 80242f0:	bd80      	pop	{r7, pc}

080242f2 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 80242f2:	b580      	push	{r7, lr}
 80242f4:	b086      	sub	sp, #24
 80242f6:	af00      	add	r7, sp, #0
 80242f8:	6078      	str	r0, [r7, #4]
 80242fa:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 80242fc:	2300      	movs	r3, #0
 80242fe:	617b      	str	r3, [r7, #20]
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8024300:	683b      	ldr	r3, [r7, #0]
 8024302:	2b00      	cmp	r3, #0
 8024304:	d020      	beq.n	8024348 <lv_tlsf_free+0x56>
        control_t * control = tlsf_cast(control_t *, tlsf);
 8024306:	687b      	ldr	r3, [r7, #4]
 8024308:	613b      	str	r3, [r7, #16]
        block_header_t * block = block_from_ptr(ptr);
 802430a:	6838      	ldr	r0, [r7, #0]
 802430c:	f7ff fb1c 	bl	8023948 <block_from_ptr>
 8024310:	60f8      	str	r0, [r7, #12]
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8024312:	68f8      	ldr	r0, [r7, #12]
 8024314:	f7ff faba 	bl	802388c <block_is_free>
 8024318:	4603      	mov	r3, r0
 802431a:	2b00      	cmp	r3, #0
 802431c:	d000      	beq.n	8024320 <lv_tlsf_free+0x2e>
 802431e:	e7fe      	b.n	802431e <lv_tlsf_free+0x2c>
        size = block->size;
 8024320:	68fb      	ldr	r3, [r7, #12]
 8024322:	685b      	ldr	r3, [r3, #4]
 8024324:	617b      	str	r3, [r7, #20]
        block_mark_as_free(block);
 8024326:	68f8      	ldr	r0, [r7, #12]
 8024328:	f7ff fb77 	bl	8023a1a <block_mark_as_free>
        block = block_merge_prev(control, block);
 802432c:	68f9      	ldr	r1, [r7, #12]
 802432e:	6938      	ldr	r0, [r7, #16]
 8024330:	f7ff fe08 	bl	8023f44 <block_merge_prev>
 8024334:	60f8      	str	r0, [r7, #12]
        block = block_merge_next(control, block);
 8024336:	68f9      	ldr	r1, [r7, #12]
 8024338:	6938      	ldr	r0, [r7, #16]
 802433a:	f7ff fe2b 	bl	8023f94 <block_merge_next>
 802433e:	60f8      	str	r0, [r7, #12]
        block_insert(control, block);
 8024340:	68f9      	ldr	r1, [r7, #12]
 8024342:	6938      	ldr	r0, [r7, #16]
 8024344:	f7ff fd64 	bl	8023e10 <block_insert>
    }

    return size;
 8024348:	697b      	ldr	r3, [r7, #20]
}
 802434a:	4618      	mov	r0, r3
 802434c:	3718      	adds	r7, #24
 802434e:	46bd      	mov	sp, r7
 8024350:	bd80      	pop	{r7, pc}

08024352 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8024352:	b580      	push	{r7, lr}
 8024354:	b08c      	sub	sp, #48	; 0x30
 8024356:	af00      	add	r7, sp, #0
 8024358:	60f8      	str	r0, [r7, #12]
 802435a:	60b9      	str	r1, [r7, #8]
 802435c:	607a      	str	r2, [r7, #4]
    control_t * control = tlsf_cast(control_t *, tlsf);
 802435e:	68fb      	ldr	r3, [r7, #12]
 8024360:	62bb      	str	r3, [r7, #40]	; 0x28
    void * p = 0;
 8024362:	2300      	movs	r3, #0
 8024364:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8024366:	68bb      	ldr	r3, [r7, #8]
 8024368:	2b00      	cmp	r3, #0
 802436a:	d007      	beq.n	802437c <lv_tlsf_realloc+0x2a>
 802436c:	687b      	ldr	r3, [r7, #4]
 802436e:	2b00      	cmp	r3, #0
 8024370:	d104      	bne.n	802437c <lv_tlsf_realloc+0x2a>
        lv_tlsf_free(tlsf, ptr);
 8024372:	68b9      	ldr	r1, [r7, #8]
 8024374:	68f8      	ldr	r0, [r7, #12]
 8024376:	f7ff ffbc 	bl	80242f2 <lv_tlsf_free>
 802437a:	e06a      	b.n	8024452 <lv_tlsf_realloc+0x100>
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 802437c:	68bb      	ldr	r3, [r7, #8]
 802437e:	2b00      	cmp	r3, #0
 8024380:	d105      	bne.n	802438e <lv_tlsf_realloc+0x3c>
        p = lv_tlsf_malloc(tlsf, size);
 8024382:	6879      	ldr	r1, [r7, #4]
 8024384:	68f8      	ldr	r0, [r7, #12]
 8024386:	f7ff ff99 	bl	80242bc <lv_tlsf_malloc>
 802438a:	62f8      	str	r0, [r7, #44]	; 0x2c
 802438c:	e061      	b.n	8024452 <lv_tlsf_realloc+0x100>
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 802438e:	68b8      	ldr	r0, [r7, #8]
 8024390:	f7ff fada 	bl	8023948 <block_from_ptr>
 8024394:	6278      	str	r0, [r7, #36]	; 0x24
        block_header_t * next = block_next(block);
 8024396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024398:	f7ff fb10 	bl	80239bc <block_next>
 802439c:	6238      	str	r0, [r7, #32]

        const size_t cursize = block_size(block);
 802439e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80243a0:	f7ff fa3b 	bl	802381a <block_size>
 80243a4:	61f8      	str	r0, [r7, #28]
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 80243a6:	6a38      	ldr	r0, [r7, #32]
 80243a8:	f7ff fa37 	bl	802381a <block_size>
 80243ac:	4602      	mov	r2, r0
 80243ae:	69fb      	ldr	r3, [r7, #28]
 80243b0:	4413      	add	r3, r2
 80243b2:	2204      	movs	r2, #4
 80243b4:	4413      	add	r3, r2
 80243b6:	61bb      	str	r3, [r7, #24]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80243b8:	2104      	movs	r1, #4
 80243ba:	6878      	ldr	r0, [r7, #4]
 80243bc:	f7ff fb9b 	bl	8023af6 <adjust_request_size>
 80243c0:	6178      	str	r0, [r7, #20]
        if(size > cursize && adjust == 0) {
 80243c2:	687a      	ldr	r2, [r7, #4]
 80243c4:	69fb      	ldr	r3, [r7, #28]
 80243c6:	429a      	cmp	r2, r3
 80243c8:	d904      	bls.n	80243d4 <lv_tlsf_realloc+0x82>
 80243ca:	697b      	ldr	r3, [r7, #20]
 80243cc:	2b00      	cmp	r3, #0
 80243ce:	d101      	bne.n	80243d4 <lv_tlsf_realloc+0x82>
            /* The request is probably too large, fail */
            return NULL;
 80243d0:	2300      	movs	r3, #0
 80243d2:	e03f      	b.n	8024454 <lv_tlsf_realloc+0x102>
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80243d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80243d6:	f7ff fa59 	bl	802388c <block_is_free>
 80243da:	4603      	mov	r3, r0
 80243dc:	2b00      	cmp	r3, #0
 80243de:	d000      	beq.n	80243e2 <lv_tlsf_realloc+0x90>
 80243e0:	e7fe      	b.n	80243e0 <lv_tlsf_realloc+0x8e>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80243e2:	697a      	ldr	r2, [r7, #20]
 80243e4:	69fb      	ldr	r3, [r7, #28]
 80243e6:	429a      	cmp	r2, r3
 80243e8:	d921      	bls.n	802442e <lv_tlsf_realloc+0xdc>
 80243ea:	6a38      	ldr	r0, [r7, #32]
 80243ec:	f7ff fa4e 	bl	802388c <block_is_free>
 80243f0:	4603      	mov	r3, r0
 80243f2:	2b00      	cmp	r3, #0
 80243f4:	d003      	beq.n	80243fe <lv_tlsf_realloc+0xac>
 80243f6:	697a      	ldr	r2, [r7, #20]
 80243f8:	69bb      	ldr	r3, [r7, #24]
 80243fa:	429a      	cmp	r2, r3
 80243fc:	d917      	bls.n	802442e <lv_tlsf_realloc+0xdc>
            p = lv_tlsf_malloc(tlsf, size);
 80243fe:	6879      	ldr	r1, [r7, #4]
 8024400:	68f8      	ldr	r0, [r7, #12]
 8024402:	f7ff ff5b 	bl	80242bc <lv_tlsf_malloc>
 8024406:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(p) {
 8024408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802440a:	2b00      	cmp	r3, #0
 802440c:	d021      	beq.n	8024452 <lv_tlsf_realloc+0x100>
                const size_t minsize = tlsf_min(cursize, size);
 802440e:	687a      	ldr	r2, [r7, #4]
 8024410:	69fb      	ldr	r3, [r7, #28]
 8024412:	4293      	cmp	r3, r2
 8024414:	bf28      	it	cs
 8024416:	4613      	movcs	r3, r2
 8024418:	613b      	str	r3, [r7, #16]
                lv_memcpy(p, ptr, minsize);
 802441a:	693a      	ldr	r2, [r7, #16]
 802441c:	68b9      	ldr	r1, [r7, #8]
 802441e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8024420:	f7fd ff76 	bl	8022310 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 8024424:	68b9      	ldr	r1, [r7, #8]
 8024426:	68f8      	ldr	r0, [r7, #12]
 8024428:	f7ff ff63 	bl	80242f2 <lv_tlsf_free>
            if(p) {
 802442c:	e011      	b.n	8024452 <lv_tlsf_realloc+0x100>
            }
        }
        else {
            /* Do we need to expand to the next block? */
            if(adjust > cursize) {
 802442e:	697a      	ldr	r2, [r7, #20]
 8024430:	69fb      	ldr	r3, [r7, #28]
 8024432:	429a      	cmp	r2, r3
 8024434:	d906      	bls.n	8024444 <lv_tlsf_realloc+0xf2>
                block_merge_next(control, block);
 8024436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802443a:	f7ff fdab 	bl	8023f94 <block_merge_next>
                block_mark_as_used(block);
 802443e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024440:	f7ff fafd 	bl	8023a3e <block_mark_as_used>
            }

            /* Trim the resulting block and return the original pointer. */
            block_trim_used(control, block, adjust);
 8024444:	697a      	ldr	r2, [r7, #20]
 8024446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802444a:	f7ff fdf2 	bl	8024032 <block_trim_used>
            p = ptr;
 802444e:	68bb      	ldr	r3, [r7, #8]
 8024450:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    return p;
 8024452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8024454:	4618      	mov	r0, r3
 8024456:	3730      	adds	r7, #48	; 0x30
 8024458:	46bd      	mov	sp, r7
 802445a:	bd80      	pop	{r7, pc}

0802445c <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 802445c:	b480      	push	{r7}
 802445e:	b083      	sub	sp, #12
 8024460:	af00      	add	r7, sp, #0
 8024462:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 802446a:	4618      	mov	r0, r3
 802446c:	370c      	adds	r7, #12
 802446e:	46bd      	mov	sp, r7
 8024470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024474:	4770      	bx	lr
	...

08024478 <_lv_txt_is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool _lv_txt_is_break_char(uint32_t letter)
{
 8024478:	b480      	push	{r7}
 802447a:	b085      	sub	sp, #20
 802447c:	af00      	add	r7, sp, #0
 802447e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 8024480:	2300      	movs	r3, #0
 8024482:	73bb      	strb	r3, [r7, #14]

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8024484:	687b      	ldr	r3, [r7, #4]
 8024486:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 802448a:	d306      	bcc.n	802449a <_lv_txt_is_break_char+0x22>
 802448c:	687b      	ldr	r3, [r7, #4]
 802448e:	f649 72a5 	movw	r2, #40869	; 0x9fa5
 8024492:	4293      	cmp	r3, r2
 8024494:	d801      	bhi.n	802449a <_lv_txt_is_break_char+0x22>
        return true;
 8024496:	2301      	movs	r3, #1
 8024498:	e015      	b.n	80244c6 <_lv_txt_is_break_char+0x4e>
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 802449a:	2300      	movs	r3, #0
 802449c:	73fb      	strb	r3, [r7, #15]
 802449e:	e00c      	b.n	80244ba <_lv_txt_is_break_char+0x42>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 80244a0:	7bfb      	ldrb	r3, [r7, #15]
 80244a2:	4a0c      	ldr	r2, [pc, #48]	; (80244d4 <_lv_txt_is_break_char+0x5c>)
 80244a4:	5cd3      	ldrb	r3, [r2, r3]
 80244a6:	461a      	mov	r2, r3
 80244a8:	687b      	ldr	r3, [r7, #4]
 80244aa:	4293      	cmp	r3, r2
 80244ac:	d102      	bne.n	80244b4 <_lv_txt_is_break_char+0x3c>
            ret = true; /*If match then it is break char*/
 80244ae:	2301      	movs	r3, #1
 80244b0:	73bb      	strb	r3, [r7, #14]
            break;
 80244b2:	e007      	b.n	80244c4 <_lv_txt_is_break_char+0x4c>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80244b4:	7bfb      	ldrb	r3, [r7, #15]
 80244b6:	3301      	adds	r3, #1
 80244b8:	73fb      	strb	r3, [r7, #15]
 80244ba:	7bfb      	ldrb	r3, [r7, #15]
 80244bc:	4a05      	ldr	r2, [pc, #20]	; (80244d4 <_lv_txt_is_break_char+0x5c>)
 80244be:	5cd3      	ldrb	r3, [r2, r3]
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	d1ed      	bne.n	80244a0 <_lv_txt_is_break_char+0x28>
        }
    }

    return ret;
 80244c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80244c6:	4618      	mov	r0, r3
 80244c8:	3714      	adds	r7, #20
 80244ca:	46bd      	mov	sp, r7
 80244cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244d0:	4770      	bx	lr
 80244d2:	bf00      	nop
 80244d4:	08026a08 	.word	0x08026a08

080244d8 <lv_txt_get_size>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_text_flag_t flag)
{
 80244d8:	b580      	push	{r7, lr}
 80244da:	b08a      	sub	sp, #40	; 0x28
 80244dc:	af02      	add	r7, sp, #8
 80244de:	60f8      	str	r0, [r7, #12]
 80244e0:	60b9      	str	r1, [r7, #8]
 80244e2:	607a      	str	r2, [r7, #4]
 80244e4:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 80244e6:	68fb      	ldr	r3, [r7, #12]
 80244e8:	2200      	movs	r2, #0
 80244ea:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 80244ec:	68fb      	ldr	r3, [r7, #12]
 80244ee:	2200      	movs	r2, #0
 80244f0:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 80244f2:	68bb      	ldr	r3, [r7, #8]
 80244f4:	2b00      	cmp	r3, #0
 80244f6:	f000 80a2 	beq.w	802463e <lv_txt_get_size+0x166>
    if(font == NULL) return;
 80244fa:	687b      	ldr	r3, [r7, #4]
 80244fc:	2b00      	cmp	r3, #0
 80244fe:	f000 80a0 	beq.w	8024642 <lv_txt_get_size+0x16a>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8024502:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8024506:	f003 0302 	and.w	r3, r3, #2
 802450a:	2b00      	cmp	r3, #0
 802450c:	d002      	beq.n	8024514 <lv_txt_get_size+0x3c>
 802450e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8024512:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 8024514:	2300      	movs	r3, #0
 8024516:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 8024518:	2300      	movs	r3, #0
 802451a:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 802451c:	6878      	ldr	r0, [r7, #4]
 802451e:	f7ff ff9d 	bl	802445c <lv_font_get_line_height>
 8024522:	4603      	mov	r3, r0
 8024524:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 8024526:	e051      	b.n	80245cc <lv_txt_get_size+0xf4>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8024528:	68ba      	ldr	r2, [r7, #8]
 802452a:	69fb      	ldr	r3, [r7, #28]
 802452c:	18d0      	adds	r0, r2, r3
 802452e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8024532:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8024536:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 802453a:	9301      	str	r3, [sp, #4]
 802453c:	2300      	movs	r3, #0
 802453e:	9300      	str	r3, [sp, #0]
 8024540:	460b      	mov	r3, r1
 8024542:	6879      	ldr	r1, [r7, #4]
 8024544:	f000 f964 	bl	8024810 <_lv_txt_get_next_line>
 8024548:	4602      	mov	r2, r0
 802454a:	69bb      	ldr	r3, [r7, #24]
 802454c:	4413      	add	r3, r2
 802454e:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8024550:	68fb      	ldr	r3, [r7, #12]
 8024552:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024556:	461a      	mov	r2, r3
 8024558:	8afb      	ldrh	r3, [r7, #22]
 802455a:	441a      	add	r2, r3
 802455c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8024560:	4413      	add	r3, r2
 8024562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024566:	d26e      	bcs.n	8024646 <lv_txt_get_size+0x16e>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 8024568:	68fb      	ldr	r3, [r7, #12]
 802456a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802456e:	b29a      	uxth	r2, r3
 8024570:	8afb      	ldrh	r3, [r7, #22]
 8024572:	4413      	add	r3, r2
 8024574:	b29b      	uxth	r3, r3
 8024576:	b21a      	sxth	r2, r3
 8024578:	68fb      	ldr	r3, [r7, #12]
 802457a:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 802457c:	68fb      	ldr	r3, [r7, #12]
 802457e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024582:	b29a      	uxth	r2, r3
 8024584:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8024586:	4413      	add	r3, r2
 8024588:	b29b      	uxth	r3, r3
 802458a:	b21a      	sxth	r2, r3
 802458c:	68fb      	ldr	r3, [r7, #12]
 802458e:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8024590:	68ba      	ldr	r2, [r7, #8]
 8024592:	69fb      	ldr	r3, [r7, #28]
 8024594:	18d0      	adds	r0, r2, r3
 8024596:	69ba      	ldr	r2, [r7, #24]
 8024598:	69fb      	ldr	r3, [r7, #28]
 802459a:	1ad1      	subs	r1, r2, r3
 802459c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80245a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80245a4:	9300      	str	r3, [sp, #0]
 80245a6:	4613      	mov	r3, r2
 80245a8:	687a      	ldr	r2, [r7, #4]
 80245aa:	f000 fa0f 	bl	80249cc <lv_txt_get_width>
 80245ae:	4603      	mov	r3, r0
 80245b0:	82bb      	strh	r3, [r7, #20]
                                                      flag);

        size_res->x = LV_MAX(act_line_length, size_res->x);
 80245b2:	68fb      	ldr	r3, [r7, #12]
 80245b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80245b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80245bc:	4293      	cmp	r3, r2
 80245be:	bfb8      	it	lt
 80245c0:	4613      	movlt	r3, r2
 80245c2:	b21a      	sxth	r2, r3
 80245c4:	68fb      	ldr	r3, [r7, #12]
 80245c6:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 80245c8:	69bb      	ldr	r3, [r7, #24]
 80245ca:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 80245cc:	68ba      	ldr	r2, [r7, #8]
 80245ce:	69fb      	ldr	r3, [r7, #28]
 80245d0:	4413      	add	r3, r2
 80245d2:	781b      	ldrb	r3, [r3, #0]
 80245d4:	2b00      	cmp	r3, #0
 80245d6:	d1a7      	bne.n	8024528 <lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80245d8:	69fb      	ldr	r3, [r7, #28]
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d01a      	beq.n	8024614 <lv_txt_get_size+0x13c>
 80245de:	69fb      	ldr	r3, [r7, #28]
 80245e0:	3b01      	subs	r3, #1
 80245e2:	68ba      	ldr	r2, [r7, #8]
 80245e4:	4413      	add	r3, r2
 80245e6:	781b      	ldrb	r3, [r3, #0]
 80245e8:	2b0a      	cmp	r3, #10
 80245ea:	d006      	beq.n	80245fa <lv_txt_get_size+0x122>
 80245ec:	69fb      	ldr	r3, [r7, #28]
 80245ee:	3b01      	subs	r3, #1
 80245f0:	68ba      	ldr	r2, [r7, #8]
 80245f2:	4413      	add	r3, r2
 80245f4:	781b      	ldrb	r3, [r3, #0]
 80245f6:	2b0d      	cmp	r3, #13
 80245f8:	d10c      	bne.n	8024614 <lv_txt_get_size+0x13c>
        size_res->y += letter_height + line_space;
 80245fa:	68fb      	ldr	r3, [r7, #12]
 80245fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024600:	b29a      	uxth	r2, r3
 8024602:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8024604:	8afb      	ldrh	r3, [r7, #22]
 8024606:	440b      	add	r3, r1
 8024608:	b29b      	uxth	r3, r3
 802460a:	4413      	add	r3, r2
 802460c:	b29b      	uxth	r3, r3
 802460e:	b21a      	sxth	r2, r3
 8024610:	68fb      	ldr	r3, [r7, #12]
 8024612:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 8024614:	68fb      	ldr	r3, [r7, #12]
 8024616:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802461a:	2b00      	cmp	r3, #0
 802461c:	d104      	bne.n	8024628 <lv_txt_get_size+0x150>
        size_res->y = letter_height;
 802461e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024622:	68fb      	ldr	r3, [r7, #12]
 8024624:	805a      	strh	r2, [r3, #2]
 8024626:	e00f      	b.n	8024648 <lv_txt_get_size+0x170>
    else
        size_res->y -= line_space;
 8024628:	68fb      	ldr	r3, [r7, #12]
 802462a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802462e:	b29a      	uxth	r2, r3
 8024630:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8024632:	1ad3      	subs	r3, r2, r3
 8024634:	b29b      	uxth	r3, r3
 8024636:	b21a      	sxth	r2, r3
 8024638:	68fb      	ldr	r3, [r7, #12]
 802463a:	805a      	strh	r2, [r3, #2]
 802463c:	e004      	b.n	8024648 <lv_txt_get_size+0x170>
    if(text == NULL) return;
 802463e:	bf00      	nop
 8024640:	e002      	b.n	8024648 <lv_txt_get_size+0x170>
    if(font == NULL) return;
 8024642:	bf00      	nop
 8024644:	e000      	b.n	8024648 <lv_txt_get_size+0x170>
            return;
 8024646:	bf00      	nop
}
 8024648:	3720      	adds	r7, #32
 802464a:	46bd      	mov	sp, r7
 802464c:	bd80      	pop	{r7, pc}
	...

08024650 <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_text_flag_t flag, uint32_t * word_w_ptr, lv_text_cmd_state_t * cmd_state, bool force)
{
 8024650:	b580      	push	{r7, lr}
 8024652:	b08e      	sub	sp, #56	; 0x38
 8024654:	af00      	add	r7, sp, #0
 8024656:	60f8      	str	r0, [r7, #12]
 8024658:	60b9      	str	r1, [r7, #8]
 802465a:	4611      	mov	r1, r2
 802465c:	461a      	mov	r2, r3
 802465e:	460b      	mov	r3, r1
 8024660:	80fb      	strh	r3, [r7, #6]
 8024662:	4613      	mov	r3, r2
 8024664:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 8024666:	68fb      	ldr	r3, [r7, #12]
 8024668:	2b00      	cmp	r3, #0
 802466a:	d003      	beq.n	8024674 <lv_txt_get_next_word+0x24>
 802466c:	68fb      	ldr	r3, [r7, #12]
 802466e:	781b      	ldrb	r3, [r3, #0]
 8024670:	2b00      	cmp	r3, #0
 8024672:	d101      	bne.n	8024678 <lv_txt_get_next_word+0x28>
 8024674:	2300      	movs	r3, #0
 8024676:	e0c4      	b.n	8024802 <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 8024678:	68bb      	ldr	r3, [r7, #8]
 802467a:	2b00      	cmp	r3, #0
 802467c:	d101      	bne.n	8024682 <lv_txt_get_next_word+0x32>
 802467e:	2300      	movs	r3, #0
 8024680:	e0bf      	b.n	8024802 <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8024682:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8024686:	f003 0302 	and.w	r3, r3, #2
 802468a:	2b00      	cmp	r3, #0
 802468c:	d002      	beq.n	8024694 <lv_txt_get_next_word+0x44>
 802468e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8024692:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8024694:	2300      	movs	r3, #0
 8024696:	637b      	str	r3, [r7, #52]	; 0x34
 8024698:	2300      	movs	r3, #0
 802469a:	617b      	str	r3, [r7, #20]
 802469c:	2300      	movs	r3, #0
 802469e:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /*Letter at i*/
 80246a0:	2300      	movs	r3, #0
 80246a2:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /*Letter at i_next*/
 80246a4:	2300      	movs	r3, #0
 80246a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 80246a8:	2300      	movs	r3, #0
 80246aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 80246ac:	2300      	movs	r3, #0
 80246ae:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 80246b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80246b4:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /*Number of characters up to the long word break point*/
 80246b6:	2300      	movs	r3, #0
 80246b8:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 80246ba:	4b54      	ldr	r3, [pc, #336]	; (802480c <lv_txt_get_next_word+0x1bc>)
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	f107 0214 	add.w	r2, r7, #20
 80246c2:	4611      	mov	r1, r2
 80246c4:	68f8      	ldr	r0, [r7, #12]
 80246c6:	4798      	blx	r3
 80246c8:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 80246ca:	697b      	ldr	r3, [r7, #20]
 80246cc:	613b      	str	r3, [r7, #16]

    /*Obtain the full word, regardless if it fits or not in max_width*/
    while(txt[i] != '\0') {
 80246ce:	e074      	b.n	80247ba <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80246d0:	4b4e      	ldr	r3, [pc, #312]	; (802480c <lv_txt_get_next_word+0x1bc>)
 80246d2:	681b      	ldr	r3, [r3, #0]
 80246d4:	f107 0210 	add.w	r2, r7, #16
 80246d8:	4611      	mov	r1, r2
 80246da:	68f8      	ldr	r0, [r7, #12]
 80246dc:	4798      	blx	r3
 80246de:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 80246e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246e2:	3301      	adds	r3, #1
 80246e4:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80246e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80246ea:	f003 0301 	and.w	r3, r3, #1
 80246ee:	2b00      	cmp	r3, #0
 80246f0:	d00d      	beq.n	802470e <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 80246f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80246f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80246f6:	f000 f9cd 	bl	8024a94 <_lv_txt_is_cmd>
 80246fa:	4603      	mov	r3, r0
 80246fc:	2b00      	cmp	r3, #0
 80246fe:	d006      	beq.n	802470e <lv_txt_get_next_word+0xbe>
                i = i_next;
 8024700:	697b      	ldr	r3, [r7, #20]
 8024702:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 8024704:	693b      	ldr	r3, [r7, #16]
 8024706:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 8024708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802470a:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter if it is part of a command*/
 802470c:	e055      	b.n	80247ba <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 802470e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024712:	68b8      	ldr	r0, [r7, #8]
 8024714:	f7fa ff82 	bl	801f61c <lv_font_get_glyph_width>
 8024718:	4603      	mov	r3, r0
 802471a:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 802471c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 802471e:	8b7b      	ldrh	r3, [r7, #26]
 8024720:	4413      	add	r3, r2
 8024722:	b29b      	uxth	r3, r3
 8024724:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 8024726:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 802472a:	2b00      	cmp	r3, #0
 802472c:	dd04      	ble.n	8024738 <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 802472e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8024730:	88fb      	ldrh	r3, [r7, #6]
 8024732:	4413      	add	r3, r2
 8024734:	b29b      	uxth	r3, r3
 8024736:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /*Test if this character fits within max_width*/
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8024738:	6a3b      	ldr	r3, [r7, #32]
 802473a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802473e:	d10d      	bne.n	802475c <lv_txt_get_next_word+0x10c>
 8024740:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8024744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8024748:	1ad2      	subs	r2, r2, r3
 802474a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 802474e:	429a      	cmp	r2, r3
 8024750:	dd04      	ble.n	802475c <lv_txt_get_next_word+0x10c>
            break_index = i;
 8024752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024754:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 8024756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024758:	3b01      	subs	r3, #1
 802475a:	61fb      	str	r3, [r7, #28]
            /*break_index is now pointing at the character that doesn't fit*/
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 802475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802475e:	2b0a      	cmp	r3, #10
 8024760:	d008      	beq.n	8024774 <lv_txt_get_next_word+0x124>
 8024762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024764:	2b0d      	cmp	r3, #13
 8024766:	d005      	beq.n	8024774 <lv_txt_get_next_word+0x124>
 8024768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802476a:	f7ff fe85 	bl	8024478 <_lv_txt_is_break_char>
 802476e:	4603      	mov	r3, r0
 8024770:	2b00      	cmp	r3, #0
 8024772:	d011      	beq.n	8024798 <lv_txt_get_next_word+0x148>
            /*Update the output width on the first character if it fits.
             *Must do this here in case first letter is a break character.*/
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8024774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024776:	2b00      	cmp	r3, #0
 8024778:	d10a      	bne.n	8024790 <lv_txt_get_next_word+0x140>
 802477a:	6a3b      	ldr	r3, [r7, #32]
 802477c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8024780:	d106      	bne.n	8024790 <lv_txt_get_next_word+0x140>
 8024782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8024784:	2b00      	cmp	r3, #0
 8024786:	d003      	beq.n	8024790 <lv_txt_get_next_word+0x140>
 8024788:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 802478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802478e:	601a      	str	r2, [r3, #0]
            word_len--;
 8024790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024792:	3b01      	subs	r3, #1
 8024794:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8024796:	e016      	b.n	80247c6 <lv_txt_get_next_word+0x176>
        }

        /*Update the output width*/
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8024798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802479a:	2b00      	cmp	r3, #0
 802479c:	d007      	beq.n	80247ae <lv_txt_get_next_word+0x15e>
 802479e:	6a3b      	ldr	r3, [r7, #32]
 80247a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80247a4:	d103      	bne.n	80247ae <lv_txt_get_next_word+0x15e>
 80247a6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80247aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80247ac:	601a      	str	r2, [r3, #0]

        i = i_next;
 80247ae:	697b      	ldr	r3, [r7, #20]
 80247b0:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 80247b2:	693b      	ldr	r3, [r7, #16]
 80247b4:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 80247b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247b8:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 80247ba:	68fa      	ldr	r2, [r7, #12]
 80247bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247be:	4413      	add	r3, r2
 80247c0:	781b      	ldrb	r3, [r3, #0]
 80247c2:	2b00      	cmp	r3, #0
 80247c4:	d184      	bne.n	80246d0 <lv_txt_get_next_word+0x80>
    }

    /*Entire Word fits in the provided space*/
    if(break_index == NO_BREAK_FOUND) {
 80247c6:	6a3b      	ldr	r3, [r7, #32]
 80247c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80247cc:	d10c      	bne.n	80247e8 <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 80247ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	d005      	beq.n	80247e0 <lv_txt_get_next_word+0x190>
 80247d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80247d6:	2b0d      	cmp	r3, #13
 80247d8:	d104      	bne.n	80247e4 <lv_txt_get_next_word+0x194>
 80247da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247dc:	2b0a      	cmp	r3, #10
 80247de:	d101      	bne.n	80247e4 <lv_txt_get_next_word+0x194>
 80247e0:	697b      	ldr	r3, [r7, #20]
 80247e2:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 80247e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247e6:	e00c      	b.n	8024802 <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 80247e8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80247ec:	2b00      	cmp	r3, #0
 80247ee:	d001      	beq.n	80247f4 <lv_txt_get_next_word+0x1a4>
 80247f0:	6a3b      	ldr	r3, [r7, #32]
 80247f2:	e006      	b.n	8024802 <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 80247f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80247f6:	2b00      	cmp	r3, #0
 80247f8:	d002      	beq.n	8024800 <lv_txt_get_next_word+0x1b0>
 80247fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80247fc:	2200      	movs	r2, #0
 80247fe:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 8024800:	2300      	movs	r3, #0
#endif
}
 8024802:	4618      	mov	r0, r3
 8024804:	3738      	adds	r7, #56	; 0x38
 8024806:	46bd      	mov	sp, r7
 8024808:	bd80      	pop	{r7, pc}
 802480a:	bf00      	nop
 802480c:	2000001c 	.word	0x2000001c

08024810 <_lv_txt_get_next_line>:

uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width,
                               lv_coord_t * used_width, lv_text_flag_t flag)
{
 8024810:	b580      	push	{r7, lr}
 8024812:	b090      	sub	sp, #64	; 0x40
 8024814:	af04      	add	r7, sp, #16
 8024816:	60f8      	str	r0, [r7, #12]
 8024818:	60b9      	str	r1, [r7, #8]
 802481a:	4611      	mov	r1, r2
 802481c:	461a      	mov	r2, r3
 802481e:	460b      	mov	r3, r1
 8024820:	80fb      	strh	r3, [r7, #6]
 8024822:	4613      	mov	r3, r2
 8024824:	80bb      	strh	r3, [r7, #4]
    if(used_width) *used_width = 0;
 8024826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024828:	2b00      	cmp	r3, #0
 802482a:	d002      	beq.n	8024832 <_lv_txt_get_next_line+0x22>
 802482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802482e:	2200      	movs	r2, #0
 8024830:	801a      	strh	r2, [r3, #0]

    if(txt == NULL) return 0;
 8024832:	68fb      	ldr	r3, [r7, #12]
 8024834:	2b00      	cmp	r3, #0
 8024836:	d101      	bne.n	802483c <_lv_txt_get_next_line+0x2c>
 8024838:	2300      	movs	r3, #0
 802483a:	e0c1      	b.n	80249c0 <_lv_txt_get_next_line+0x1b0>
    if(txt[0] == '\0') return 0;
 802483c:	68fb      	ldr	r3, [r7, #12]
 802483e:	781b      	ldrb	r3, [r3, #0]
 8024840:	2b00      	cmp	r3, #0
 8024842:	d101      	bne.n	8024848 <_lv_txt_get_next_line+0x38>
 8024844:	2300      	movs	r3, #0
 8024846:	e0bb      	b.n	80249c0 <_lv_txt_get_next_line+0x1b0>
    if(font == NULL) return 0;
 8024848:	68bb      	ldr	r3, [r7, #8]
 802484a:	2b00      	cmp	r3, #0
 802484c:	d101      	bne.n	8024852 <_lv_txt_get_next_line+0x42>
 802484e:	2300      	movs	r3, #0
 8024850:	e0b6      	b.n	80249c0 <_lv_txt_get_next_line+0x1b0>

    lv_coord_t line_w = 0;
 8024852:	2300      	movs	r3, #0
 8024854:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /*If max_width doesn't mater simply find the new line character
     *without thinking about word wrapping*/
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8024856:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802485a:	f003 0302 	and.w	r3, r3, #2
 802485e:	2b00      	cmp	r3, #0
 8024860:	d105      	bne.n	802486e <_lv_txt_get_next_line+0x5e>
 8024862:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8024866:	f003 0304 	and.w	r3, r3, #4
 802486a:	2b00      	cmp	r3, #0
 802486c:	d029      	beq.n	80248c2 <_lv_txt_get_next_line+0xb2>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 802486e:	2300      	movs	r3, #0
 8024870:	62bb      	str	r3, [r7, #40]	; 0x28
 8024872:	e002      	b.n	802487a <_lv_txt_get_next_line+0x6a>
 8024874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024876:	3301      	adds	r3, #1
 8024878:	62bb      	str	r3, [r7, #40]	; 0x28
 802487a:	68fa      	ldr	r2, [r7, #12]
 802487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802487e:	4413      	add	r3, r2
 8024880:	781b      	ldrb	r3, [r3, #0]
 8024882:	2b0a      	cmp	r3, #10
 8024884:	d00b      	beq.n	802489e <_lv_txt_get_next_line+0x8e>
 8024886:	68fa      	ldr	r2, [r7, #12]
 8024888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802488a:	4413      	add	r3, r2
 802488c:	781b      	ldrb	r3, [r3, #0]
 802488e:	2b0d      	cmp	r3, #13
 8024890:	d005      	beq.n	802489e <_lv_txt_get_next_line+0x8e>
 8024892:	68fa      	ldr	r2, [r7, #12]
 8024894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024896:	4413      	add	r3, r2
 8024898:	781b      	ldrb	r3, [r3, #0]
 802489a:	2b00      	cmp	r3, #0
 802489c:	d1ea      	bne.n	8024874 <_lv_txt_get_next_line+0x64>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 802489e:	68fa      	ldr	r2, [r7, #12]
 80248a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248a2:	4413      	add	r3, r2
 80248a4:	781b      	ldrb	r3, [r3, #0]
 80248a6:	2b00      	cmp	r3, #0
 80248a8:	d002      	beq.n	80248b0 <_lv_txt_get_next_line+0xa0>
 80248aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248ac:	3301      	adds	r3, #1
 80248ae:	62bb      	str	r3, [r7, #40]	; 0x28
        if(used_width) *used_width = -1;
 80248b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80248b2:	2b00      	cmp	r3, #0
 80248b4:	d003      	beq.n	80248be <_lv_txt_get_next_line+0xae>
 80248b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80248b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80248bc:	801a      	strh	r2, [r3, #0]
        return i;
 80248be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248c0:	e07e      	b.n	80249c0 <_lv_txt_get_next_line+0x1b0>
    }

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80248c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80248c6:	f003 0302 	and.w	r3, r3, #2
 80248ca:	2b00      	cmp	r3, #0
 80248cc:	d002      	beq.n	80248d4 <_lv_txt_get_next_line+0xc4>
 80248ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80248d2:	80bb      	strh	r3, [r7, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80248d4:	2300      	movs	r3, #0
 80248d6:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80248d8:	2300      	movs	r3, #0
 80248da:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 80248dc:	e048      	b.n	8024970 <_lv_txt_get_next_line+0x160>
        uint32_t word_w = 0;
 80248de:	2300      	movs	r3, #0
 80248e0:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 80248e2:	69bb      	ldr	r3, [r7, #24]
 80248e4:	68fa      	ldr	r2, [r7, #12]
 80248e6:	18d0      	adds	r0, r2, r3
 80248e8:	69bb      	ldr	r3, [r7, #24]
 80248ea:	2b00      	cmp	r3, #0
 80248ec:	bf0c      	ite	eq
 80248ee:	2301      	moveq	r3, #1
 80248f0:	2300      	movne	r3, #0
 80248f2:	b2db      	uxtb	r3, r3
 80248f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80248f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80248fc:	9303      	str	r3, [sp, #12]
 80248fe:	f107 031f 	add.w	r3, r7, #31
 8024902:	9302      	str	r3, [sp, #8]
 8024904:	f107 0314 	add.w	r3, r7, #20
 8024908:	9301      	str	r3, [sp, #4]
 802490a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802490e:	9300      	str	r3, [sp, #0]
 8024910:	460b      	mov	r3, r1
 8024912:	68b9      	ldr	r1, [r7, #8]
 8024914:	f7ff fe9c 	bl	8024650 <lv_txt_get_next_word>
 8024918:	6278      	str	r0, [r7, #36]	; 0x24
        max_width -= word_w;
 802491a:	88ba      	ldrh	r2, [r7, #4]
 802491c:	697b      	ldr	r3, [r7, #20]
 802491e:	b29b      	uxth	r3, r3
 8024920:	1ad3      	subs	r3, r2, r3
 8024922:	b29b      	uxth	r3, r3
 8024924:	80bb      	strh	r3, [r7, #4]
        line_w += word_w;
 8024926:	697b      	ldr	r3, [r7, #20]
 8024928:	b29a      	uxth	r2, r3
 802492a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802492c:	4413      	add	r3, r2
 802492e:	b29b      	uxth	r3, r3
 8024930:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(advance == 0) {
 8024932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024934:	2b00      	cmp	r3, #0
 8024936:	d026      	beq.n	8024986 <_lv_txt_get_next_line+0x176>
            break;
        }

        i += advance;
 8024938:	69ba      	ldr	r2, [r7, #24]
 802493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802493c:	4413      	add	r3, r2
 802493e:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	781b      	ldrb	r3, [r3, #0]
 8024944:	2b0a      	cmp	r3, #10
 8024946:	d01e      	beq.n	8024986 <_lv_txt_get_next_line+0x176>
 8024948:	68fb      	ldr	r3, [r7, #12]
 802494a:	781b      	ldrb	r3, [r3, #0]
 802494c:	2b0d      	cmp	r3, #13
 802494e:	d01a      	beq.n	8024986 <_lv_txt_get_next_line+0x176>

        if(txt[i] == '\n' || txt[i] == '\r') {
 8024950:	69bb      	ldr	r3, [r7, #24]
 8024952:	68fa      	ldr	r2, [r7, #12]
 8024954:	4413      	add	r3, r2
 8024956:	781b      	ldrb	r3, [r3, #0]
 8024958:	2b0a      	cmp	r3, #10
 802495a:	d005      	beq.n	8024968 <_lv_txt_get_next_line+0x158>
 802495c:	69bb      	ldr	r3, [r7, #24]
 802495e:	68fa      	ldr	r2, [r7, #12]
 8024960:	4413      	add	r3, r2
 8024962:	781b      	ldrb	r3, [r3, #0]
 8024964:	2b0d      	cmp	r3, #13
 8024966:	d103      	bne.n	8024970 <_lv_txt_get_next_line+0x160>
            i++;  /*Include the following newline in the current line*/
 8024968:	69bb      	ldr	r3, [r7, #24]
 802496a:	3301      	adds	r3, #1
 802496c:	61bb      	str	r3, [r7, #24]
            break;
 802496e:	e00b      	b.n	8024988 <_lv_txt_get_next_line+0x178>
    while(txt[i] != '\0' && max_width > 0) {
 8024970:	69bb      	ldr	r3, [r7, #24]
 8024972:	68fa      	ldr	r2, [r7, #12]
 8024974:	4413      	add	r3, r2
 8024976:	781b      	ldrb	r3, [r3, #0]
 8024978:	2b00      	cmp	r3, #0
 802497a:	d005      	beq.n	8024988 <_lv_txt_get_next_line+0x178>
 802497c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8024980:	2b00      	cmp	r3, #0
 8024982:	dcac      	bgt.n	80248de <_lv_txt_get_next_line+0xce>
 8024984:	e000      	b.n	8024988 <_lv_txt_get_next_line+0x178>
            break;
 8024986:	bf00      	nop
        }

    }

    /*Always step at least one to avoid infinite loops*/
    if(i == 0) {
 8024988:	69bb      	ldr	r3, [r7, #24]
 802498a:	2b00      	cmp	r3, #0
 802498c:	d111      	bne.n	80249b2 <_lv_txt_get_next_line+0x1a2>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 802498e:	4b0e      	ldr	r3, [pc, #56]	; (80249c8 <_lv_txt_get_next_line+0x1b8>)
 8024990:	681b      	ldr	r3, [r3, #0]
 8024992:	f107 0218 	add.w	r2, r7, #24
 8024996:	4611      	mov	r1, r2
 8024998:	68f8      	ldr	r0, [r7, #12]
 802499a:	4798      	blx	r3
 802499c:	6238      	str	r0, [r7, #32]
        if(used_width != NULL) {
 802499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80249a0:	2b00      	cmp	r3, #0
 80249a2:	d006      	beq.n	80249b2 <_lv_txt_get_next_line+0x1a2>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 80249a4:	2200      	movs	r2, #0
 80249a6:	6a39      	ldr	r1, [r7, #32]
 80249a8:	68b8      	ldr	r0, [r7, #8]
 80249aa:	f7fa fe37 	bl	801f61c <lv_font_get_glyph_width>
 80249ae:	4603      	mov	r3, r0
 80249b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(used_width != NULL) {
 80249b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80249b4:	2b00      	cmp	r3, #0
 80249b6:	d002      	beq.n	80249be <_lv_txt_get_next_line+0x1ae>
        *used_width = line_w;
 80249b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80249ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80249bc:	801a      	strh	r2, [r3, #0]
    }

    return i;
 80249be:	69bb      	ldr	r3, [r7, #24]
}
 80249c0:	4618      	mov	r0, r3
 80249c2:	3730      	adds	r7, #48	; 0x30
 80249c4:	46bd      	mov	sp, r7
 80249c6:	bd80      	pop	{r7, pc}
 80249c8:	2000001c 	.word	0x2000001c

080249cc <lv_txt_get_width>:

lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_text_flag_t flag)
{
 80249cc:	b580      	push	{r7, lr}
 80249ce:	b08a      	sub	sp, #40	; 0x28
 80249d0:	af00      	add	r7, sp, #0
 80249d2:	60f8      	str	r0, [r7, #12]
 80249d4:	60b9      	str	r1, [r7, #8]
 80249d6:	607a      	str	r2, [r7, #4]
 80249d8:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 80249da:	68fb      	ldr	r3, [r7, #12]
 80249dc:	2b00      	cmp	r3, #0
 80249de:	d101      	bne.n	80249e4 <lv_txt_get_width+0x18>
 80249e0:	2300      	movs	r3, #0
 80249e2:	e053      	b.n	8024a8c <lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 80249e4:	687b      	ldr	r3, [r7, #4]
 80249e6:	2b00      	cmp	r3, #0
 80249e8:	d101      	bne.n	80249ee <lv_txt_get_width+0x22>
 80249ea:	2300      	movs	r3, #0
 80249ec:	e04e      	b.n	8024a8c <lv_txt_get_width+0xc0>
    if(txt[0] == '\0') return 0;
 80249ee:	68fb      	ldr	r3, [r7, #12]
 80249f0:	781b      	ldrb	r3, [r3, #0]
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d101      	bne.n	80249fa <lv_txt_get_width+0x2e>
 80249f6:	2300      	movs	r3, #0
 80249f8:	e048      	b.n	8024a8c <lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 80249fa:	2300      	movs	r3, #0
 80249fc:	623b      	str	r3, [r7, #32]
    lv_coord_t width             = 0;
 80249fe:	2300      	movs	r3, #0
 8024a00:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8024a02:	2300      	movs	r3, #0
 8024a04:	77fb      	strb	r3, [r7, #31]

    if(length != 0) {
 8024a06:	68bb      	ldr	r3, [r7, #8]
 8024a08:	2b00      	cmp	r3, #0
 8024a0a:	d03d      	beq.n	8024a88 <lv_txt_get_width+0xbc>
        while(i < length) {
 8024a0c:	e02f      	b.n	8024a6e <lv_txt_get_width+0xa2>
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8024a0e:	f107 0320 	add.w	r3, r7, #32
 8024a12:	f107 0214 	add.w	r2, r7, #20
 8024a16:	f107 0118 	add.w	r1, r7, #24
 8024a1a:	68f8      	ldr	r0, [r7, #12]
 8024a1c:	f000 f874 	bl	8024b08 <_lv_txt_encoded_letter_next_2>

            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8024a20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8024a24:	f003 0301 	and.w	r3, r3, #1
 8024a28:	2b00      	cmp	r3, #0
 8024a2a:	d00a      	beq.n	8024a42 <lv_txt_get_width+0x76>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8024a2c:	69ba      	ldr	r2, [r7, #24]
 8024a2e:	f107 031f 	add.w	r3, r7, #31
 8024a32:	4611      	mov	r1, r2
 8024a34:	4618      	mov	r0, r3
 8024a36:	f000 f82d 	bl	8024a94 <_lv_txt_is_cmd>
 8024a3a:	4603      	mov	r3, r0
 8024a3c:	2b00      	cmp	r3, #0
 8024a3e:	d000      	beq.n	8024a42 <lv_txt_get_width+0x76>
 8024a40:	e015      	b.n	8024a6e <lv_txt_get_width+0xa2>
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8024a42:	69bb      	ldr	r3, [r7, #24]
 8024a44:	697a      	ldr	r2, [r7, #20]
 8024a46:	4619      	mov	r1, r3
 8024a48:	6878      	ldr	r0, [r7, #4]
 8024a4a:	f7fa fde7 	bl	801f61c <lv_font_get_glyph_width>
 8024a4e:	4603      	mov	r3, r0
 8024a50:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(char_width > 0) {
 8024a52:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8024a56:	2b00      	cmp	r3, #0
 8024a58:	dd09      	ble.n	8024a6e <lv_txt_get_width+0xa2>
                width += char_width;
 8024a5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024a5e:	4413      	add	r3, r2
 8024a60:	b29b      	uxth	r3, r3
 8024a62:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 8024a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024a66:	887b      	ldrh	r3, [r7, #2]
 8024a68:	4413      	add	r3, r2
 8024a6a:	b29b      	uxth	r3, r3
 8024a6c:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 8024a6e:	6a3b      	ldr	r3, [r7, #32]
 8024a70:	68ba      	ldr	r2, [r7, #8]
 8024a72:	429a      	cmp	r2, r3
 8024a74:	d8cb      	bhi.n	8024a0e <lv_txt_get_width+0x42>
            }
        }

        if(width > 0) {
 8024a76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8024a7a:	2b00      	cmp	r3, #0
 8024a7c:	dd04      	ble.n	8024a88 <lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8024a7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024a80:	887b      	ldrh	r3, [r7, #2]
 8024a82:	1ad3      	subs	r3, r2, r3
 8024a84:	b29b      	uxth	r3, r3
 8024a86:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned*/
        }
    }

    return width;
 8024a88:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8024a8c:	4618      	mov	r0, r3
 8024a8e:	3728      	adds	r7, #40	; 0x28
 8024a90:	46bd      	mov	sp, r7
 8024a92:	bd80      	pop	{r7, pc}

08024a94 <_lv_txt_is_cmd>:

bool _lv_txt_is_cmd(lv_text_cmd_state_t * state, uint32_t c)
{
 8024a94:	b480      	push	{r7}
 8024a96:	b085      	sub	sp, #20
 8024a98:	af00      	add	r7, sp, #0
 8024a9a:	6078      	str	r0, [r7, #4]
 8024a9c:	6039      	str	r1, [r7, #0]
    bool ret = false;
 8024a9e:	2300      	movs	r3, #0
 8024aa0:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8024aa2:	2323      	movs	r3, #35	; 0x23
 8024aa4:	461a      	mov	r2, r3
 8024aa6:	683b      	ldr	r3, [r7, #0]
 8024aa8:	4293      	cmp	r3, r2
 8024aaa:	d11a      	bne.n	8024ae2 <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8024aac:	687b      	ldr	r3, [r7, #4]
 8024aae:	781b      	ldrb	r3, [r3, #0]
 8024ab0:	2b00      	cmp	r3, #0
 8024ab2:	d105      	bne.n	8024ac0 <_lv_txt_is_cmd+0x2c>
            *state = LV_TEXT_CMD_STATE_PAR;
 8024ab4:	687b      	ldr	r3, [r7, #4]
 8024ab6:	2201      	movs	r2, #1
 8024ab8:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8024aba:	2301      	movs	r3, #1
 8024abc:	73fb      	strb	r3, [r7, #15]
 8024abe:	e010      	b.n	8024ae2 <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char*/
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	781b      	ldrb	r3, [r3, #0]
 8024ac4:	2b01      	cmp	r3, #1
 8024ac6:	d103      	bne.n	8024ad0 <_lv_txt_is_cmd+0x3c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8024ac8:	687b      	ldr	r3, [r7, #4]
 8024aca:	2200      	movs	r2, #0
 8024acc:	701a      	strb	r2, [r3, #0]
 8024ace:	e008      	b.n	8024ae2 <_lv_txt_is_cmd+0x4e>
        }
        /*Command end*/
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8024ad0:	687b      	ldr	r3, [r7, #4]
 8024ad2:	781b      	ldrb	r3, [r3, #0]
 8024ad4:	2b02      	cmp	r3, #2
 8024ad6:	d104      	bne.n	8024ae2 <_lv_txt_is_cmd+0x4e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8024ad8:	687b      	ldr	r3, [r7, #4]
 8024ada:	2200      	movs	r2, #0
 8024adc:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8024ade:	2301      	movs	r3, #1
 8024ae0:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	781b      	ldrb	r3, [r3, #0]
 8024ae6:	2b01      	cmp	r3, #1
 8024ae8:	d107      	bne.n	8024afa <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 8024aea:	683b      	ldr	r3, [r7, #0]
 8024aec:	2b20      	cmp	r3, #32
 8024aee:	d102      	bne.n	8024af6 <_lv_txt_is_cmd+0x62>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8024af0:	687b      	ldr	r3, [r7, #4]
 8024af2:	2202      	movs	r2, #2
 8024af4:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 8024af6:	2301      	movs	r3, #1
 8024af8:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8024afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8024afc:	4618      	mov	r0, r3
 8024afe:	3714      	adds	r7, #20
 8024b00:	46bd      	mov	sp, r7
 8024b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b06:	4770      	bx	lr

08024b08 <_lv_txt_encoded_letter_next_2>:

    return text;
}

void _lv_txt_encoded_letter_next_2(const char * txt, uint32_t * letter, uint32_t * letter_next, uint32_t * ofs)
{
 8024b08:	b580      	push	{r7, lr}
 8024b0a:	b084      	sub	sp, #16
 8024b0c:	af00      	add	r7, sp, #0
 8024b0e:	60f8      	str	r0, [r7, #12]
 8024b10:	60b9      	str	r1, [r7, #8]
 8024b12:	607a      	str	r2, [r7, #4]
 8024b14:	603b      	str	r3, [r7, #0]
    *letter = _lv_txt_encoded_next(txt, ofs);
 8024b16:	4b0f      	ldr	r3, [pc, #60]	; (8024b54 <_lv_txt_encoded_letter_next_2+0x4c>)
 8024b18:	681b      	ldr	r3, [r3, #0]
 8024b1a:	6839      	ldr	r1, [r7, #0]
 8024b1c:	68f8      	ldr	r0, [r7, #12]
 8024b1e:	4798      	blx	r3
 8024b20:	4602      	mov	r2, r0
 8024b22:	68bb      	ldr	r3, [r7, #8]
 8024b24:	601a      	str	r2, [r3, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8024b26:	68bb      	ldr	r3, [r7, #8]
 8024b28:	681b      	ldr	r3, [r3, #0]
 8024b2a:	2b00      	cmp	r3, #0
 8024b2c:	d00a      	beq.n	8024b44 <_lv_txt_encoded_letter_next_2+0x3c>
 8024b2e:	4b09      	ldr	r3, [pc, #36]	; (8024b54 <_lv_txt_encoded_letter_next_2+0x4c>)
 8024b30:	681b      	ldr	r3, [r3, #0]
 8024b32:	683a      	ldr	r2, [r7, #0]
 8024b34:	6812      	ldr	r2, [r2, #0]
 8024b36:	68f9      	ldr	r1, [r7, #12]
 8024b38:	440a      	add	r2, r1
 8024b3a:	2100      	movs	r1, #0
 8024b3c:	4610      	mov	r0, r2
 8024b3e:	4798      	blx	r3
 8024b40:	4603      	mov	r3, r0
 8024b42:	e000      	b.n	8024b46 <_lv_txt_encoded_letter_next_2+0x3e>
 8024b44:	2300      	movs	r3, #0
 8024b46:	687a      	ldr	r2, [r7, #4]
 8024b48:	6013      	str	r3, [r2, #0]
}
 8024b4a:	bf00      	nop
 8024b4c:	3710      	adds	r7, #16
 8024b4e:	46bd      	mov	sp, r7
 8024b50:	bd80      	pop	{r7, pc}
 8024b52:	bf00      	nop
 8024b54:	2000001c 	.word	0x2000001c

08024b58 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 8024b58:	b480      	push	{r7}
 8024b5a:	b083      	sub	sp, #12
 8024b5c:	af00      	add	r7, sp, #0
 8024b5e:	6078      	str	r0, [r7, #4]
    if(LV_IS_ASCII(str[0]))
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	781b      	ldrb	r3, [r3, #0]
 8024b64:	b25b      	sxtb	r3, r3
 8024b66:	2b00      	cmp	r3, #0
 8024b68:	db01      	blt.n	8024b6e <lv_txt_utf8_size+0x16>
        return 1;
 8024b6a:	2301      	movs	r3, #1
 8024b6c:	e018      	b.n	8024ba0 <lv_txt_utf8_size+0x48>
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	781b      	ldrb	r3, [r3, #0]
 8024b72:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8024b76:	2bc0      	cmp	r3, #192	; 0xc0
 8024b78:	d101      	bne.n	8024b7e <lv_txt_utf8_size+0x26>
        return 2;
 8024b7a:	2302      	movs	r3, #2
 8024b7c:	e010      	b.n	8024ba0 <lv_txt_utf8_size+0x48>
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 8024b7e:	687b      	ldr	r3, [r7, #4]
 8024b80:	781b      	ldrb	r3, [r3, #0]
 8024b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024b86:	2be0      	cmp	r3, #224	; 0xe0
 8024b88:	d101      	bne.n	8024b8e <lv_txt_utf8_size+0x36>
        return 3;
 8024b8a:	2303      	movs	r3, #3
 8024b8c:	e008      	b.n	8024ba0 <lv_txt_utf8_size+0x48>
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	781b      	ldrb	r3, [r3, #0]
 8024b92:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024b96:	2bf0      	cmp	r3, #240	; 0xf0
 8024b98:	d101      	bne.n	8024b9e <lv_txt_utf8_size+0x46>
        return 4;
 8024b9a:	2304      	movs	r3, #4
 8024b9c:	e000      	b.n	8024ba0 <lv_txt_utf8_size+0x48>
    return 0;
 8024b9e:	2300      	movs	r3, #0
}
 8024ba0:	4618      	mov	r0, r3
 8024ba2:	370c      	adds	r7, #12
 8024ba4:	46bd      	mov	sp, r7
 8024ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024baa:	4770      	bx	lr

08024bac <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8024bac:	b480      	push	{r7}
 8024bae:	b085      	sub	sp, #20
 8024bb0:	af00      	add	r7, sp, #0
 8024bb2:	6078      	str	r0, [r7, #4]
 8024bb4:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     */

    uint32_t result = 0;
 8024bb6:	2300      	movs	r3, #0
 8024bb8:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8024bba:	2300      	movs	r3, #0
 8024bbc:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 8024bbe:	683b      	ldr	r3, [r7, #0]
 8024bc0:	2b00      	cmp	r3, #0
 8024bc2:	d102      	bne.n	8024bca <lv_txt_utf8_next+0x1e>
 8024bc4:	f107 0308 	add.w	r3, r7, #8
 8024bc8:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 8024bca:	683b      	ldr	r3, [r7, #0]
 8024bcc:	681b      	ldr	r3, [r3, #0]
 8024bce:	687a      	ldr	r2, [r7, #4]
 8024bd0:	4413      	add	r3, r2
 8024bd2:	781b      	ldrb	r3, [r3, #0]
 8024bd4:	b25b      	sxtb	r3, r3
 8024bd6:	2b00      	cmp	r3, #0
 8024bd8:	db0b      	blt.n	8024bf2 <lv_txt_utf8_next+0x46>
        result = txt[*i];
 8024bda:	683b      	ldr	r3, [r7, #0]
 8024bdc:	681b      	ldr	r3, [r3, #0]
 8024bde:	687a      	ldr	r2, [r7, #4]
 8024be0:	4413      	add	r3, r2
 8024be2:	781b      	ldrb	r3, [r3, #0]
 8024be4:	60fb      	str	r3, [r7, #12]
        (*i)++;
 8024be6:	683b      	ldr	r3, [r7, #0]
 8024be8:	681b      	ldr	r3, [r3, #0]
 8024bea:	1c5a      	adds	r2, r3, #1
 8024bec:	683b      	ldr	r3, [r7, #0]
 8024bee:	601a      	str	r2, [r3, #0]
 8024bf0:	e0ea      	b.n	8024dc8 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 8024bf2:	683b      	ldr	r3, [r7, #0]
 8024bf4:	681b      	ldr	r3, [r3, #0]
 8024bf6:	687a      	ldr	r2, [r7, #4]
 8024bf8:	4413      	add	r3, r2
 8024bfa:	781b      	ldrb	r3, [r3, #0]
 8024bfc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8024c00:	2bc0      	cmp	r3, #192	; 0xc0
 8024c02:	d128      	bne.n	8024c56 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8024c04:	683b      	ldr	r3, [r7, #0]
 8024c06:	681b      	ldr	r3, [r3, #0]
 8024c08:	687a      	ldr	r2, [r7, #4]
 8024c0a:	4413      	add	r3, r2
 8024c0c:	781b      	ldrb	r3, [r3, #0]
 8024c0e:	019b      	lsls	r3, r3, #6
 8024c10:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8024c14:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024c16:	683b      	ldr	r3, [r7, #0]
 8024c18:	681b      	ldr	r3, [r3, #0]
 8024c1a:	1c5a      	adds	r2, r3, #1
 8024c1c:	683b      	ldr	r3, [r7, #0]
 8024c1e:	601a      	str	r2, [r3, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024c20:	683b      	ldr	r3, [r7, #0]
 8024c22:	681b      	ldr	r3, [r3, #0]
 8024c24:	687a      	ldr	r2, [r7, #4]
 8024c26:	4413      	add	r3, r2
 8024c28:	781b      	ldrb	r3, [r3, #0]
 8024c2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024c2e:	2b80      	cmp	r3, #128	; 0x80
 8024c30:	d001      	beq.n	8024c36 <lv_txt_utf8_next+0x8a>
 8024c32:	2300      	movs	r3, #0
 8024c34:	e0c9      	b.n	8024dca <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8024c36:	683b      	ldr	r3, [r7, #0]
 8024c38:	681b      	ldr	r3, [r3, #0]
 8024c3a:	687a      	ldr	r2, [r7, #4]
 8024c3c:	4413      	add	r3, r2
 8024c3e:	781b      	ldrb	r3, [r3, #0]
 8024c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024c44:	68fa      	ldr	r2, [r7, #12]
 8024c46:	4413      	add	r3, r2
 8024c48:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024c4a:	683b      	ldr	r3, [r7, #0]
 8024c4c:	681b      	ldr	r3, [r3, #0]
 8024c4e:	1c5a      	adds	r2, r3, #1
 8024c50:	683b      	ldr	r3, [r7, #0]
 8024c52:	601a      	str	r2, [r3, #0]
 8024c54:	e0b8      	b.n	8024dc8 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 8024c56:	683b      	ldr	r3, [r7, #0]
 8024c58:	681b      	ldr	r3, [r3, #0]
 8024c5a:	687a      	ldr	r2, [r7, #4]
 8024c5c:	4413      	add	r3, r2
 8024c5e:	781b      	ldrb	r3, [r3, #0]
 8024c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024c64:	2be0      	cmp	r3, #224	; 0xe0
 8024c66:	d142      	bne.n	8024cee <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8024c68:	683b      	ldr	r3, [r7, #0]
 8024c6a:	681b      	ldr	r3, [r3, #0]
 8024c6c:	687a      	ldr	r2, [r7, #4]
 8024c6e:	4413      	add	r3, r2
 8024c70:	781b      	ldrb	r3, [r3, #0]
 8024c72:	031b      	lsls	r3, r3, #12
 8024c74:	b29b      	uxth	r3, r3
 8024c76:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024c78:	683b      	ldr	r3, [r7, #0]
 8024c7a:	681b      	ldr	r3, [r3, #0]
 8024c7c:	1c5a      	adds	r2, r3, #1
 8024c7e:	683b      	ldr	r3, [r7, #0]
 8024c80:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024c82:	683b      	ldr	r3, [r7, #0]
 8024c84:	681b      	ldr	r3, [r3, #0]
 8024c86:	687a      	ldr	r2, [r7, #4]
 8024c88:	4413      	add	r3, r2
 8024c8a:	781b      	ldrb	r3, [r3, #0]
 8024c8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024c90:	2b80      	cmp	r3, #128	; 0x80
 8024c92:	d001      	beq.n	8024c98 <lv_txt_utf8_next+0xec>
 8024c94:	2300      	movs	r3, #0
 8024c96:	e098      	b.n	8024dca <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8024c98:	683b      	ldr	r3, [r7, #0]
 8024c9a:	681b      	ldr	r3, [r3, #0]
 8024c9c:	687a      	ldr	r2, [r7, #4]
 8024c9e:	4413      	add	r3, r2
 8024ca0:	781b      	ldrb	r3, [r3, #0]
 8024ca2:	019b      	lsls	r3, r3, #6
 8024ca4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8024ca8:	68fa      	ldr	r2, [r7, #12]
 8024caa:	4413      	add	r3, r2
 8024cac:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024cae:	683b      	ldr	r3, [r7, #0]
 8024cb0:	681b      	ldr	r3, [r3, #0]
 8024cb2:	1c5a      	adds	r2, r3, #1
 8024cb4:	683b      	ldr	r3, [r7, #0]
 8024cb6:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024cb8:	683b      	ldr	r3, [r7, #0]
 8024cba:	681b      	ldr	r3, [r3, #0]
 8024cbc:	687a      	ldr	r2, [r7, #4]
 8024cbe:	4413      	add	r3, r2
 8024cc0:	781b      	ldrb	r3, [r3, #0]
 8024cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024cc6:	2b80      	cmp	r3, #128	; 0x80
 8024cc8:	d001      	beq.n	8024cce <lv_txt_utf8_next+0x122>
 8024cca:	2300      	movs	r3, #0
 8024ccc:	e07d      	b.n	8024dca <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8024cce:	683b      	ldr	r3, [r7, #0]
 8024cd0:	681b      	ldr	r3, [r3, #0]
 8024cd2:	687a      	ldr	r2, [r7, #4]
 8024cd4:	4413      	add	r3, r2
 8024cd6:	781b      	ldrb	r3, [r3, #0]
 8024cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024cdc:	68fa      	ldr	r2, [r7, #12]
 8024cde:	4413      	add	r3, r2
 8024ce0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024ce2:	683b      	ldr	r3, [r7, #0]
 8024ce4:	681b      	ldr	r3, [r3, #0]
 8024ce6:	1c5a      	adds	r2, r3, #1
 8024ce8:	683b      	ldr	r3, [r7, #0]
 8024cea:	601a      	str	r2, [r3, #0]
 8024cec:	e06c      	b.n	8024dc8 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 8024cee:	683b      	ldr	r3, [r7, #0]
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	687a      	ldr	r2, [r7, #4]
 8024cf4:	4413      	add	r3, r2
 8024cf6:	781b      	ldrb	r3, [r3, #0]
 8024cf8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024cfc:	2bf0      	cmp	r3, #240	; 0xf0
 8024cfe:	d15e      	bne.n	8024dbe <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8024d00:	683b      	ldr	r3, [r7, #0]
 8024d02:	681b      	ldr	r3, [r3, #0]
 8024d04:	687a      	ldr	r2, [r7, #4]
 8024d06:	4413      	add	r3, r2
 8024d08:	781b      	ldrb	r3, [r3, #0]
 8024d0a:	049b      	lsls	r3, r3, #18
 8024d0c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8024d10:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024d12:	683b      	ldr	r3, [r7, #0]
 8024d14:	681b      	ldr	r3, [r3, #0]
 8024d16:	1c5a      	adds	r2, r3, #1
 8024d18:	683b      	ldr	r3, [r7, #0]
 8024d1a:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024d1c:	683b      	ldr	r3, [r7, #0]
 8024d1e:	681b      	ldr	r3, [r3, #0]
 8024d20:	687a      	ldr	r2, [r7, #4]
 8024d22:	4413      	add	r3, r2
 8024d24:	781b      	ldrb	r3, [r3, #0]
 8024d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024d2a:	2b80      	cmp	r3, #128	; 0x80
 8024d2c:	d001      	beq.n	8024d32 <lv_txt_utf8_next+0x186>
 8024d2e:	2300      	movs	r3, #0
 8024d30:	e04b      	b.n	8024dca <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8024d32:	683b      	ldr	r3, [r7, #0]
 8024d34:	681b      	ldr	r3, [r3, #0]
 8024d36:	687a      	ldr	r2, [r7, #4]
 8024d38:	4413      	add	r3, r2
 8024d3a:	781b      	ldrb	r3, [r3, #0]
 8024d3c:	031b      	lsls	r3, r3, #12
 8024d3e:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 8024d42:	68fa      	ldr	r2, [r7, #12]
 8024d44:	4413      	add	r3, r2
 8024d46:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024d48:	683b      	ldr	r3, [r7, #0]
 8024d4a:	681b      	ldr	r3, [r3, #0]
 8024d4c:	1c5a      	adds	r2, r3, #1
 8024d4e:	683b      	ldr	r3, [r7, #0]
 8024d50:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024d52:	683b      	ldr	r3, [r7, #0]
 8024d54:	681b      	ldr	r3, [r3, #0]
 8024d56:	687a      	ldr	r2, [r7, #4]
 8024d58:	4413      	add	r3, r2
 8024d5a:	781b      	ldrb	r3, [r3, #0]
 8024d5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024d60:	2b80      	cmp	r3, #128	; 0x80
 8024d62:	d001      	beq.n	8024d68 <lv_txt_utf8_next+0x1bc>
 8024d64:	2300      	movs	r3, #0
 8024d66:	e030      	b.n	8024dca <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8024d68:	683b      	ldr	r3, [r7, #0]
 8024d6a:	681b      	ldr	r3, [r3, #0]
 8024d6c:	687a      	ldr	r2, [r7, #4]
 8024d6e:	4413      	add	r3, r2
 8024d70:	781b      	ldrb	r3, [r3, #0]
 8024d72:	019b      	lsls	r3, r3, #6
 8024d74:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8024d78:	68fa      	ldr	r2, [r7, #12]
 8024d7a:	4413      	add	r3, r2
 8024d7c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024d7e:	683b      	ldr	r3, [r7, #0]
 8024d80:	681b      	ldr	r3, [r3, #0]
 8024d82:	1c5a      	adds	r2, r3, #1
 8024d84:	683b      	ldr	r3, [r7, #0]
 8024d86:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024d88:	683b      	ldr	r3, [r7, #0]
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	687a      	ldr	r2, [r7, #4]
 8024d8e:	4413      	add	r3, r2
 8024d90:	781b      	ldrb	r3, [r3, #0]
 8024d92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8024d96:	2b80      	cmp	r3, #128	; 0x80
 8024d98:	d001      	beq.n	8024d9e <lv_txt_utf8_next+0x1f2>
 8024d9a:	2300      	movs	r3, #0
 8024d9c:	e015      	b.n	8024dca <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 8024d9e:	683b      	ldr	r3, [r7, #0]
 8024da0:	681b      	ldr	r3, [r3, #0]
 8024da2:	687a      	ldr	r2, [r7, #4]
 8024da4:	4413      	add	r3, r2
 8024da6:	781b      	ldrb	r3, [r3, #0]
 8024da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024dac:	68fa      	ldr	r2, [r7, #12]
 8024dae:	4413      	add	r3, r2
 8024db0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8024db2:	683b      	ldr	r3, [r7, #0]
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	1c5a      	adds	r2, r3, #1
 8024db8:	683b      	ldr	r3, [r7, #0]
 8024dba:	601a      	str	r2, [r3, #0]
 8024dbc:	e004      	b.n	8024dc8 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8024dbe:	683b      	ldr	r3, [r7, #0]
 8024dc0:	681b      	ldr	r3, [r3, #0]
 8024dc2:	1c5a      	adds	r2, r3, #1
 8024dc4:	683b      	ldr	r3, [r7, #0]
 8024dc6:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 8024dc8:	68fb      	ldr	r3, [r7, #12]
}
 8024dca:	4618      	mov	r0, r3
 8024dcc:	3714      	adds	r7, #20
 8024dce:	46bd      	mov	sp, r7
 8024dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dd4:	4770      	bx	lr
	...

08024dd8 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8024dd8:	b580      	push	{r7, lr}
 8024dda:	b086      	sub	sp, #24
 8024ddc:	af00      	add	r7, sp, #0
 8024dde:	6078      	str	r0, [r7, #4]
 8024de0:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 8024de2:	2300      	movs	r3, #0
 8024de4:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8024de6:	683b      	ldr	r3, [r7, #0]
 8024de8:	681b      	ldr	r3, [r3, #0]
 8024dea:	1e5a      	subs	r2, r3, #1
 8024dec:	683b      	ldr	r3, [r7, #0]
 8024dee:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8024df0:	7dfb      	ldrb	r3, [r7, #23]
 8024df2:	2b03      	cmp	r3, #3
 8024df4:	d901      	bls.n	8024dfa <lv_txt_utf8_prev+0x22>
 8024df6:	2300      	movs	r3, #0
 8024df8:	e02a      	b.n	8024e50 <lv_txt_utf8_prev+0x78>

        c_size = _lv_txt_encoded_size(&txt[*i]);
 8024dfa:	4b17      	ldr	r3, [pc, #92]	; (8024e58 <lv_txt_utf8_prev+0x80>)
 8024dfc:	681b      	ldr	r3, [r3, #0]
 8024dfe:	683a      	ldr	r2, [r7, #0]
 8024e00:	6812      	ldr	r2, [r2, #0]
 8024e02:	6879      	ldr	r1, [r7, #4]
 8024e04:	440a      	add	r2, r1
 8024e06:	4610      	mov	r0, r2
 8024e08:	4798      	blx	r3
 8024e0a:	4603      	mov	r3, r0
 8024e0c:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 8024e0e:	7dbb      	ldrb	r3, [r7, #22]
 8024e10:	2b00      	cmp	r3, #0
 8024e12:	d10b      	bne.n	8024e2c <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 8024e14:	683b      	ldr	r3, [r7, #0]
 8024e16:	681b      	ldr	r3, [r3, #0]
 8024e18:	2b00      	cmp	r3, #0
 8024e1a:	d005      	beq.n	8024e28 <lv_txt_utf8_prev+0x50>
                (*i)--;
 8024e1c:	683b      	ldr	r3, [r7, #0]
 8024e1e:	681b      	ldr	r3, [r3, #0]
 8024e20:	1e5a      	subs	r2, r3, #1
 8024e22:	683b      	ldr	r3, [r7, #0]
 8024e24:	601a      	str	r2, [r3, #0]
 8024e26:	e001      	b.n	8024e2c <lv_txt_utf8_prev+0x54>
            else
                return 0;
 8024e28:	2300      	movs	r3, #0
 8024e2a:	e011      	b.n	8024e50 <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 8024e2c:	7dfb      	ldrb	r3, [r7, #23]
 8024e2e:	3301      	adds	r3, #1
 8024e30:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 8024e32:	7dbb      	ldrb	r3, [r7, #22]
 8024e34:	2b00      	cmp	r3, #0
 8024e36:	d0db      	beq.n	8024df0 <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 8024e38:	683b      	ldr	r3, [r7, #0]
 8024e3a:	681b      	ldr	r3, [r3, #0]
 8024e3c:	60fb      	str	r3, [r7, #12]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8024e3e:	4b07      	ldr	r3, [pc, #28]	; (8024e5c <lv_txt_utf8_prev+0x84>)
 8024e40:	681b      	ldr	r3, [r3, #0]
 8024e42:	f107 020c 	add.w	r2, r7, #12
 8024e46:	4611      	mov	r1, r2
 8024e48:	6878      	ldr	r0, [r7, #4]
 8024e4a:	4798      	blx	r3
 8024e4c:	6138      	str	r0, [r7, #16]

    return letter;
 8024e4e:	693b      	ldr	r3, [r7, #16]
}
 8024e50:	4618      	mov	r0, r3
 8024e52:	3718      	adds	r7, #24
 8024e54:	46bd      	mov	sp, r7
 8024e56:	bd80      	pop	{r7, pc}
 8024e58:	20000018 	.word	0x20000018
 8024e5c:	2000001c 	.word	0x2000001c

08024e60 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8024e60:	b580      	push	{r7, lr}
 8024e62:	b086      	sub	sp, #24
 8024e64:	af00      	add	r7, sp, #0
 8024e66:	6078      	str	r0, [r7, #4]
 8024e68:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 8024e6a:	2300      	movs	r3, #0
 8024e6c:	613b      	str	r3, [r7, #16]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024e6e:	2300      	movs	r3, #0
 8024e70:	617b      	str	r3, [r7, #20]
 8024e72:	e014      	b.n	8024e9e <lv_txt_utf8_get_byte_id+0x3e>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8024e74:	4b11      	ldr	r3, [pc, #68]	; (8024ebc <lv_txt_utf8_get_byte_id+0x5c>)
 8024e76:	681b      	ldr	r3, [r3, #0]
 8024e78:	6879      	ldr	r1, [r7, #4]
 8024e7a:	693a      	ldr	r2, [r7, #16]
 8024e7c:	440a      	add	r2, r1
 8024e7e:	4610      	mov	r0, r2
 8024e80:	4798      	blx	r3
 8024e82:	4603      	mov	r3, r0
 8024e84:	73fb      	strb	r3, [r7, #15]
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 8024e86:	7bfb      	ldrb	r3, [r7, #15]
 8024e88:	2b00      	cmp	r3, #0
 8024e8a:	d001      	beq.n	8024e90 <lv_txt_utf8_get_byte_id+0x30>
 8024e8c:	7bfb      	ldrb	r3, [r7, #15]
 8024e8e:	e000      	b.n	8024e92 <lv_txt_utf8_get_byte_id+0x32>
 8024e90:	2301      	movs	r3, #1
 8024e92:	693a      	ldr	r2, [r7, #16]
 8024e94:	4413      	add	r3, r2
 8024e96:	613b      	str	r3, [r7, #16]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024e98:	697b      	ldr	r3, [r7, #20]
 8024e9a:	3301      	adds	r3, #1
 8024e9c:	617b      	str	r3, [r7, #20]
 8024e9e:	697a      	ldr	r2, [r7, #20]
 8024ea0:	683b      	ldr	r3, [r7, #0]
 8024ea2:	429a      	cmp	r2, r3
 8024ea4:	d205      	bcs.n	8024eb2 <lv_txt_utf8_get_byte_id+0x52>
 8024ea6:	687a      	ldr	r2, [r7, #4]
 8024ea8:	693b      	ldr	r3, [r7, #16]
 8024eaa:	4413      	add	r3, r2
 8024eac:	781b      	ldrb	r3, [r3, #0]
 8024eae:	2b00      	cmp	r3, #0
 8024eb0:	d1e0      	bne.n	8024e74 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 8024eb2:	693b      	ldr	r3, [r7, #16]
}
 8024eb4:	4618      	mov	r0, r3
 8024eb6:	3718      	adds	r7, #24
 8024eb8:	46bd      	mov	sp, r7
 8024eba:	bd80      	pop	{r7, pc}
 8024ebc:	20000018 	.word	0x20000018

08024ec0 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8024ec0:	b580      	push	{r7, lr}
 8024ec2:	b084      	sub	sp, #16
 8024ec4:	af00      	add	r7, sp, #0
 8024ec6:	6078      	str	r0, [r7, #4]
 8024ec8:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 8024eca:	2300      	movs	r3, #0
 8024ecc:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 8024ece:	2300      	movs	r3, #0
 8024ed0:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 8024ed2:	e009      	b.n	8024ee8 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8024ed4:	4b09      	ldr	r3, [pc, #36]	; (8024efc <lv_txt_utf8_get_char_id+0x3c>)
 8024ed6:	681b      	ldr	r3, [r3, #0]
 8024ed8:	f107 0208 	add.w	r2, r7, #8
 8024edc:	4611      	mov	r1, r2
 8024ede:	6878      	ldr	r0, [r7, #4]
 8024ee0:	4798      	blx	r3
        char_cnt++;
 8024ee2:	68fb      	ldr	r3, [r7, #12]
 8024ee4:	3301      	adds	r3, #1
 8024ee6:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 8024ee8:	68bb      	ldr	r3, [r7, #8]
 8024eea:	683a      	ldr	r2, [r7, #0]
 8024eec:	429a      	cmp	r2, r3
 8024eee:	d8f1      	bhi.n	8024ed4 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 8024ef0:	68fb      	ldr	r3, [r7, #12]
}
 8024ef2:	4618      	mov	r0, r3
 8024ef4:	3710      	adds	r7, #16
 8024ef6:	46bd      	mov	sp, r7
 8024ef8:	bd80      	pop	{r7, pc}
 8024efa:	bf00      	nop
 8024efc:	2000001c 	.word	0x2000001c

08024f00 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8024f00:	b580      	push	{r7, lr}
 8024f02:	b084      	sub	sp, #16
 8024f04:	af00      	add	r7, sp, #0
 8024f06:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8024f08:	2300      	movs	r3, #0
 8024f0a:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 8024f0c:	2300      	movs	r3, #0
 8024f0e:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 8024f10:	e009      	b.n	8024f26 <lv_txt_utf8_get_length+0x26>
        _lv_txt_encoded_next(txt, &i);
 8024f12:	4b0a      	ldr	r3, [pc, #40]	; (8024f3c <lv_txt_utf8_get_length+0x3c>)
 8024f14:	681b      	ldr	r3, [r3, #0]
 8024f16:	f107 0208 	add.w	r2, r7, #8
 8024f1a:	4611      	mov	r1, r2
 8024f1c:	6878      	ldr	r0, [r7, #4]
 8024f1e:	4798      	blx	r3
        len++;
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	3301      	adds	r3, #1
 8024f24:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 8024f26:	68bb      	ldr	r3, [r7, #8]
 8024f28:	687a      	ldr	r2, [r7, #4]
 8024f2a:	4413      	add	r3, r2
 8024f2c:	781b      	ldrb	r3, [r3, #0]
 8024f2e:	2b00      	cmp	r3, #0
 8024f30:	d1ef      	bne.n	8024f12 <lv_txt_utf8_get_length+0x12>
    }

    return len;
 8024f32:	68fb      	ldr	r3, [r7, #12]
}
 8024f34:	4618      	mov	r0, r3
 8024f36:	3710      	adds	r7, #16
 8024f38:	46bd      	mov	sp, r7
 8024f3a:	bd80      	pop	{r7, pc}
 8024f3c:	2000001c 	.word	0x2000001c

08024f40 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8024f40:	b580      	push	{r7, lr}
 8024f42:	b086      	sub	sp, #24
 8024f44:	af00      	add	r7, sp, #0
 8024f46:	60f8      	str	r0, [r7, #12]
 8024f48:	60b9      	str	r1, [r7, #8]
 8024f4a:	607a      	str	r2, [r7, #4]
 8024f4c:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8024f4e:	68bb      	ldr	r3, [r7, #8]
 8024f50:	617b      	str	r3, [r7, #20]
 8024f52:	e02d      	b.n	8024fb0 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 8024f54:	687b      	ldr	r3, [r7, #4]
 8024f56:	085b      	lsrs	r3, r3, #1
 8024f58:	683a      	ldr	r2, [r7, #0]
 8024f5a:	fb02 f303 	mul.w	r3, r2, r3
 8024f5e:	697a      	ldr	r2, [r7, #20]
 8024f60:	4413      	add	r3, r2
 8024f62:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 8024f64:	6a3b      	ldr	r3, [r7, #32]
 8024f66:	6979      	ldr	r1, [r7, #20]
 8024f68:	68f8      	ldr	r0, [r7, #12]
 8024f6a:	4798      	blx	r3
 8024f6c:	6138      	str	r0, [r7, #16]
 8024f6e:	693b      	ldr	r3, [r7, #16]
 8024f70:	2b00      	cmp	r3, #0
 8024f72:	dd12      	ble.n	8024f9a <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 8024f74:	687b      	ldr	r3, [r7, #4]
 8024f76:	085b      	lsrs	r3, r3, #1
 8024f78:	687a      	ldr	r2, [r7, #4]
 8024f7a:	f002 0201 	and.w	r2, r2, #1
 8024f7e:	2a00      	cmp	r2, #0
 8024f80:	bf0c      	ite	eq
 8024f82:	2201      	moveq	r2, #1
 8024f84:	2200      	movne	r2, #0
 8024f86:	b2d2      	uxtb	r2, r2
 8024f88:	1a9b      	subs	r3, r3, r2
 8024f8a:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 8024f8c:	697a      	ldr	r2, [r7, #20]
 8024f8e:	683b      	ldr	r3, [r7, #0]
 8024f90:	4413      	add	r3, r2
 8024f92:	617b      	str	r3, [r7, #20]
 8024f94:	697b      	ldr	r3, [r7, #20]
 8024f96:	60bb      	str	r3, [r7, #8]
 8024f98:	e00a      	b.n	8024fb0 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 8024f9a:	693b      	ldr	r3, [r7, #16]
 8024f9c:	2b00      	cmp	r3, #0
 8024f9e:	da05      	bge.n	8024fac <_lv_utils_bsearch+0x6c>
            n /= 2;
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	085b      	lsrs	r3, r3, #1
 8024fa4:	607b      	str	r3, [r7, #4]
            middle = base;
 8024fa6:	68bb      	ldr	r3, [r7, #8]
 8024fa8:	617b      	str	r3, [r7, #20]
 8024faa:	e001      	b.n	8024fb0 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 8024fac:	697b      	ldr	r3, [r7, #20]
 8024fae:	e003      	b.n	8024fb8 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8024fb0:	687b      	ldr	r3, [r7, #4]
 8024fb2:	2b00      	cmp	r3, #0
 8024fb4:	d1ce      	bne.n	8024f54 <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8024fb6:	2300      	movs	r3, #0
}
 8024fb8:	4618      	mov	r0, r3
 8024fba:	3718      	adds	r7, #24
 8024fbc:	46bd      	mov	sp, r7
 8024fbe:	bd80      	pop	{r7, pc}

08024fc0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8024fc0:	b480      	push	{r7}
 8024fc2:	b083      	sub	sp, #12
 8024fc4:	af00      	add	r7, sp, #0
 8024fc6:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024fc8:	687b      	ldr	r3, [r7, #4]
 8024fca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8024fce:	b29a      	uxth	r2, r3
 8024fd0:	687b      	ldr	r3, [r7, #4]
 8024fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024fd6:	b29b      	uxth	r3, r3
 8024fd8:	1ad3      	subs	r3, r2, r3
 8024fda:	b29b      	uxth	r3, r3
 8024fdc:	3301      	adds	r3, #1
 8024fde:	b29b      	uxth	r3, r3
 8024fe0:	b21b      	sxth	r3, r3
}
 8024fe2:	4618      	mov	r0, r3
 8024fe4:	370c      	adds	r7, #12
 8024fe6:	46bd      	mov	sp, r7
 8024fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fec:	4770      	bx	lr

08024fee <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8024fee:	b480      	push	{r7}
 8024ff0:	b083      	sub	sp, #12
 8024ff2:	af00      	add	r7, sp, #0
 8024ff4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024ff6:	687b      	ldr	r3, [r7, #4]
 8024ff8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8024ffc:	b29a      	uxth	r2, r3
 8024ffe:	687b      	ldr	r3, [r7, #4]
 8025000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8025004:	b29b      	uxth	r3, r3
 8025006:	1ad3      	subs	r3, r2, r3
 8025008:	b29b      	uxth	r3, r3
 802500a:	3301      	adds	r3, #1
 802500c:	b29b      	uxth	r3, r3
 802500e:	b21b      	sxth	r3, r3
}
 8025010:	4618      	mov	r0, r3
 8025012:	370c      	adds	r7, #12
 8025014:	46bd      	mov	sp, r7
 8025016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802501a:	4770      	bx	lr

0802501c <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 802501c:	b480      	push	{r7}
 802501e:	b083      	sub	sp, #12
 8025020:	af00      	add	r7, sp, #0
 8025022:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8025024:	687b      	ldr	r3, [r7, #4]
 8025026:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 802502a:	4618      	mov	r0, r3
 802502c:	370c      	adds	r7, #12
 802502e:	46bd      	mov	sp, r7
 8025030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025034:	4770      	bx	lr

08025036 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8025036:	b480      	push	{r7}
 8025038:	b083      	sub	sp, #12
 802503a:	af00      	add	r7, sp, #0
 802503c:	6078      	str	r0, [r7, #4]
 802503e:	6039      	str	r1, [r7, #0]
    a->var = var;
 8025040:	687b      	ldr	r3, [r7, #4]
 8025042:	683a      	ldr	r2, [r7, #0]
 8025044:	601a      	str	r2, [r3, #0]
}
 8025046:	bf00      	nop
 8025048:	370c      	adds	r7, #12
 802504a:	46bd      	mov	sp, r7
 802504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025050:	4770      	bx	lr

08025052 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8025052:	b480      	push	{r7}
 8025054:	b083      	sub	sp, #12
 8025056:	af00      	add	r7, sp, #0
 8025058:	6078      	str	r0, [r7, #4]
 802505a:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 802505c:	687b      	ldr	r3, [r7, #4]
 802505e:	683a      	ldr	r2, [r7, #0]
 8025060:	605a      	str	r2, [r3, #4]
}
 8025062:	bf00      	nop
 8025064:	370c      	adds	r7, #12
 8025066:	46bd      	mov	sp, r7
 8025068:	f85d 7b04 	ldr.w	r7, [sp], #4
 802506c:	4770      	bx	lr

0802506e <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 802506e:	b480      	push	{r7}
 8025070:	b083      	sub	sp, #12
 8025072:	af00      	add	r7, sp, #0
 8025074:	6078      	str	r0, [r7, #4]
 8025076:	6039      	str	r1, [r7, #0]
    a->time = duration;
 8025078:	683a      	ldr	r2, [r7, #0]
 802507a:	687b      	ldr	r3, [r7, #4]
 802507c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 802507e:	bf00      	nop
 8025080:	370c      	adds	r7, #12
 8025082:	46bd      	mov	sp, r7
 8025084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025088:	4770      	bx	lr

0802508a <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 802508a:	b480      	push	{r7}
 802508c:	b085      	sub	sp, #20
 802508e:	af00      	add	r7, sp, #0
 8025090:	60f8      	str	r0, [r7, #12]
 8025092:	60b9      	str	r1, [r7, #8]
 8025094:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 8025096:	68fb      	ldr	r3, [r7, #12]
 8025098:	68ba      	ldr	r2, [r7, #8]
 802509a:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 802509c:	68fb      	ldr	r3, [r7, #12]
 802509e:	68ba      	ldr	r2, [r7, #8]
 80250a0:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 80250a2:	68fb      	ldr	r3, [r7, #12]
 80250a4:	687a      	ldr	r2, [r7, #4]
 80250a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80250a8:	bf00      	nop
 80250aa:	3714      	adds	r7, #20
 80250ac:	46bd      	mov	sp, r7
 80250ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250b2:	4770      	bx	lr

080250b4 <lv_anim_set_playback_time>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param time      the duration of the playback animation in milliseconds. 0: disable playback
 */
static inline void lv_anim_set_playback_time(lv_anim_t * a, uint32_t time)
{
 80250b4:	b480      	push	{r7}
 80250b6:	b083      	sub	sp, #12
 80250b8:	af00      	add	r7, sp, #0
 80250ba:	6078      	str	r0, [r7, #4]
 80250bc:	6039      	str	r1, [r7, #0]
    a->playback_time = time;
 80250be:	687b      	ldr	r3, [r7, #4]
 80250c0:	683a      	ldr	r2, [r7, #0]
 80250c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80250c4:	bf00      	nop
 80250c6:	370c      	adds	r7, #12
 80250c8:	46bd      	mov	sp, r7
 80250ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250ce:	4770      	bx	lr

080250d0 <lv_anim_set_playback_delay>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before starting the playback animation.
 */
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint32_t delay)
{
 80250d0:	b480      	push	{r7}
 80250d2:	b083      	sub	sp, #12
 80250d4:	af00      	add	r7, sp, #0
 80250d6:	6078      	str	r0, [r7, #4]
 80250d8:	6039      	str	r1, [r7, #0]
    a->playback_delay = delay;
 80250da:	687b      	ldr	r3, [r7, #4]
 80250dc:	683a      	ldr	r2, [r7, #0]
 80250de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80250e0:	bf00      	nop
 80250e2:	370c      	adds	r7, #12
 80250e4:	46bd      	mov	sp, r7
 80250e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250ea:	4770      	bx	lr

080250ec <lv_anim_set_repeat_count>:
 * Make the animation repeat itself.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
 80250ec:	b480      	push	{r7}
 80250ee:	b083      	sub	sp, #12
 80250f0:	af00      	add	r7, sp, #0
 80250f2:	6078      	str	r0, [r7, #4]
 80250f4:	460b      	mov	r3, r1
 80250f6:	807b      	strh	r3, [r7, #2]
    a->repeat_cnt = cnt;
 80250f8:	687b      	ldr	r3, [r7, #4]
 80250fa:	887a      	ldrh	r2, [r7, #2]
 80250fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8025100:	bf00      	nop
 8025102:	370c      	adds	r7, #12
 8025104:	46bd      	mov	sp, r7
 8025106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802510a:	4770      	bx	lr

0802510c <lv_anim_set_repeat_delay>:
 * Set a delay before repeating the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
 802510c:	b480      	push	{r7}
 802510e:	b083      	sub	sp, #12
 8025110:	af00      	add	r7, sp, #0
 8025112:	6078      	str	r0, [r7, #4]
 8025114:	6039      	str	r1, [r7, #0]
    a->repeat_delay = delay;
 8025116:	687b      	ldr	r3, [r7, #4]
 8025118:	683a      	ldr	r2, [r7, #0]
 802511a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 802511c:	bf00      	nop
 802511e:	370c      	adds	r7, #12
 8025120:	46bd      	mov	sp, r7
 8025122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025126:	4770      	bx	lr

08025128 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 8025128:	b480      	push	{r7}
 802512a:	b085      	sub	sp, #20
 802512c:	af00      	add	r7, sp, #0
 802512e:	60f8      	str	r0, [r7, #12]
 8025130:	60b9      	str	r1, [r7, #8]
 8025132:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8025134:	68fb      	ldr	r3, [r7, #12]
 8025136:	781b      	ldrb	r3, [r3, #0]
 8025138:	2b00      	cmp	r3, #0
 802513a:	d102      	bne.n	8025142 <lv_bidi_calculate_align+0x1a>
 802513c:	68fb      	ldr	r3, [r7, #12]
 802513e:	2201      	movs	r2, #1
 8025140:	701a      	strb	r2, [r3, #0]
}
 8025142:	bf00      	nop
 8025144:	3714      	adds	r7, #20
 8025146:	46bd      	mov	sp, r7
 8025148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802514c:	4770      	bx	lr

0802514e <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 802514e:	b580      	push	{r7, lr}
 8025150:	b084      	sub	sp, #16
 8025152:	af00      	add	r7, sp, #0
 8025154:	6078      	str	r0, [r7, #4]
 8025156:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8025158:	2201      	movs	r2, #1
 802515a:	6839      	ldr	r1, [r7, #0]
 802515c:	6878      	ldr	r0, [r7, #4]
 802515e:	f7e7 fcfb 	bl	800cb58 <lv_obj_get_style_prop>
 8025162:	4603      	mov	r3, r0
 8025164:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8025166:	68fb      	ldr	r3, [r7, #12]
 8025168:	b21b      	sxth	r3, r3
}
 802516a:	4618      	mov	r0, r3
 802516c:	3710      	adds	r7, #16
 802516e:	46bd      	mov	sp, r7
 8025170:	bd80      	pop	{r7, pc}

08025172 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8025172:	b580      	push	{r7, lr}
 8025174:	b084      	sub	sp, #16
 8025176:	af00      	add	r7, sp, #0
 8025178:	6078      	str	r0, [r7, #4]
 802517a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802517c:	2210      	movs	r2, #16
 802517e:	6839      	ldr	r1, [r7, #0]
 8025180:	6878      	ldr	r0, [r7, #4]
 8025182:	f7e7 fce9 	bl	800cb58 <lv_obj_get_style_prop>
 8025186:	4603      	mov	r3, r0
 8025188:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 802518a:	68fb      	ldr	r3, [r7, #12]
 802518c:	b21b      	sxth	r3, r3
}
 802518e:	4618      	mov	r0, r3
 8025190:	3710      	adds	r7, #16
 8025192:	46bd      	mov	sp, r7
 8025194:	bd80      	pop	{r7, pc}

08025196 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8025196:	b580      	push	{r7, lr}
 8025198:	b084      	sub	sp, #16
 802519a:	af00      	add	r7, sp, #0
 802519c:	6078      	str	r0, [r7, #4]
 802519e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80251a0:	2212      	movs	r2, #18
 80251a2:	6839      	ldr	r1, [r7, #0]
 80251a4:	6878      	ldr	r0, [r7, #4]
 80251a6:	f7e7 fcd7 	bl	800cb58 <lv_obj_get_style_prop>
 80251aa:	4603      	mov	r3, r0
 80251ac:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80251ae:	68fb      	ldr	r3, [r7, #12]
 80251b0:	b21b      	sxth	r3, r3
}
 80251b2:	4618      	mov	r0, r3
 80251b4:	3710      	adds	r7, #16
 80251b6:	46bd      	mov	sp, r7
 80251b8:	bd80      	pop	{r7, pc}

080251ba <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 80251ba:	b580      	push	{r7, lr}
 80251bc:	b084      	sub	sp, #16
 80251be:	af00      	add	r7, sp, #0
 80251c0:	6078      	str	r0, [r7, #4]
 80251c2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 80251c4:	2220      	movs	r2, #32
 80251c6:	6839      	ldr	r1, [r7, #0]
 80251c8:	6878      	ldr	r0, [r7, #4]
 80251ca:	f7e7 fcc5 	bl	800cb58 <lv_obj_get_style_prop>
 80251ce:	4603      	mov	r3, r0
 80251d0:	60fb      	str	r3, [r7, #12]
    return v.color;
 80251d2:	7b3b      	ldrb	r3, [r7, #12]
}
 80251d4:	4618      	mov	r0, r3
 80251d6:	3710      	adds	r7, #16
 80251d8:	46bd      	mov	sp, r7
 80251da:	bd80      	pop	{r7, pc}

080251dc <lv_obj_get_style_text_color_filtered>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
    return v.color;
}

static inline lv_color_t lv_obj_get_style_text_color_filtered(const struct _lv_obj_t * obj, uint32_t part)
{
 80251dc:	b580      	push	{r7, lr}
 80251de:	b084      	sub	sp, #16
 80251e0:	af00      	add	r7, sp, #0
 80251e2:	6078      	str	r0, [r7, #4]
 80251e4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 80251e6:	2255      	movs	r2, #85	; 0x55
 80251e8:	6839      	ldr	r1, [r7, #0]
 80251ea:	6878      	ldr	r0, [r7, #4]
 80251ec:	f7e7 fcb4 	bl	800cb58 <lv_obj_get_style_prop>
 80251f0:	4603      	mov	r3, r0
 80251f2:	461a      	mov	r2, r3
 80251f4:	6839      	ldr	r1, [r7, #0]
 80251f6:	6878      	ldr	r0, [r7, #4]
 80251f8:	f7e7 fefa 	bl	800cff0 <_lv_obj_style_apply_color_filter>
 80251fc:	4603      	mov	r3, r0
 80251fe:	60fb      	str	r3, [r7, #12]
    return v.color;
 8025200:	7b3b      	ldrb	r3, [r7, #12]
}
 8025202:	4618      	mov	r0, r3
 8025204:	3710      	adds	r7, #16
 8025206:	46bd      	mov	sp, r7
 8025208:	bd80      	pop	{r7, pc}

0802520a <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
 802520a:	b580      	push	{r7, lr}
 802520c:	b084      	sub	sp, #16
 802520e:	af00      	add	r7, sp, #0
 8025210:	6078      	str	r0, [r7, #4]
 8025212:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8025214:	2257      	movs	r2, #87	; 0x57
 8025216:	6839      	ldr	r1, [r7, #0]
 8025218:	6878      	ldr	r0, [r7, #4]
 802521a:	f7e7 fc9d 	bl	800cb58 <lv_obj_get_style_prop>
 802521e:	4603      	mov	r3, r0
 8025220:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 8025222:	68fb      	ldr	r3, [r7, #12]
}
 8025224:	4618      	mov	r0, r3
 8025226:	3710      	adds	r7, #16
 8025228:	46bd      	mov	sp, r7
 802522a:	bd80      	pop	{r7, pc}

0802522c <lv_obj_get_style_text_letter_space>:

static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
{
 802522c:	b580      	push	{r7, lr}
 802522e:	b084      	sub	sp, #16
 8025230:	af00      	add	r7, sp, #0
 8025232:	6078      	str	r0, [r7, #4]
 8025234:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8025236:	2258      	movs	r2, #88	; 0x58
 8025238:	6839      	ldr	r1, [r7, #0]
 802523a:	6878      	ldr	r0, [r7, #4]
 802523c:	f7e7 fc8c 	bl	800cb58 <lv_obj_get_style_prop>
 8025240:	4603      	mov	r3, r0
 8025242:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8025244:	68fb      	ldr	r3, [r7, #12]
 8025246:	b21b      	sxth	r3, r3
}
 8025248:	4618      	mov	r0, r3
 802524a:	3710      	adds	r7, #16
 802524c:	46bd      	mov	sp, r7
 802524e:	bd80      	pop	{r7, pc}

08025250 <lv_obj_get_style_text_line_space>:

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
 8025250:	b580      	push	{r7, lr}
 8025252:	b084      	sub	sp, #16
 8025254:	af00      	add	r7, sp, #0
 8025256:	6078      	str	r0, [r7, #4]
 8025258:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802525a:	2259      	movs	r2, #89	; 0x59
 802525c:	6839      	ldr	r1, [r7, #0]
 802525e:	6878      	ldr	r0, [r7, #4]
 8025260:	f7e7 fc7a 	bl	800cb58 <lv_obj_get_style_prop>
 8025264:	4603      	mov	r3, r0
 8025266:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8025268:	68fb      	ldr	r3, [r7, #12]
 802526a:	b21b      	sxth	r3, r3
}
 802526c:	4618      	mov	r0, r3
 802526e:	3710      	adds	r7, #16
 8025270:	46bd      	mov	sp, r7
 8025272:	bd80      	pop	{r7, pc}

08025274 <lv_obj_get_style_anim>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
    return (lv_opa_t)v.num;
}

static inline const lv_anim_t * lv_obj_get_style_anim(const struct _lv_obj_t * obj, uint32_t part)
{
 8025274:	b580      	push	{r7, lr}
 8025276:	b084      	sub	sp, #16
 8025278:	af00      	add	r7, sp, #0
 802527a:	6078      	str	r0, [r7, #4]
 802527c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 802527e:	2263      	movs	r2, #99	; 0x63
 8025280:	6839      	ldr	r1, [r7, #0]
 8025282:	6878      	ldr	r0, [r7, #4]
 8025284:	f7e7 fc68 	bl	800cb58 <lv_obj_get_style_prop>
 8025288:	4603      	mov	r3, r0
 802528a:	60fb      	str	r3, [r7, #12]
    return (const lv_anim_t *)v.ptr;
 802528c:	68fb      	ldr	r3, [r7, #12]
}
 802528e:	4618      	mov	r0, r3
 8025290:	3710      	adds	r7, #16
 8025292:	46bd      	mov	sp, r7
 8025294:	bd80      	pop	{r7, pc}

08025296 <lv_obj_get_style_anim_speed>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
    return (uint32_t)v.num;
}

static inline uint32_t lv_obj_get_style_anim_speed(const struct _lv_obj_t * obj, uint32_t part)
{
 8025296:	b580      	push	{r7, lr}
 8025298:	b084      	sub	sp, #16
 802529a:	af00      	add	r7, sp, #0
 802529c:	6078      	str	r0, [r7, #4]
 802529e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 80252a0:	2265      	movs	r2, #101	; 0x65
 80252a2:	6839      	ldr	r1, [r7, #0]
 80252a4:	6878      	ldr	r0, [r7, #4]
 80252a6:	f7e7 fc57 	bl	800cb58 <lv_obj_get_style_prop>
 80252aa:	4603      	mov	r3, r0
 80252ac:	60fb      	str	r3, [r7, #12]
    return (uint32_t)v.num;
 80252ae:	68fb      	ldr	r3, [r7, #12]
}
 80252b0:	4618      	mov	r0, r3
 80252b2:	3710      	adds	r7, #16
 80252b4:	46bd      	mov	sp, r7
 80252b6:	bd80      	pop	{r7, pc}

080252b8 <lv_label_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_label_create(lv_obj_t * parent)
{
 80252b8:	b580      	push	{r7, lr}
 80252ba:	b084      	sub	sp, #16
 80252bc:	af00      	add	r7, sp, #0
 80252be:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80252c0:	6879      	ldr	r1, [r7, #4]
 80252c2:	4806      	ldr	r0, [pc, #24]	; (80252dc <lv_label_create+0x24>)
 80252c4:	f7e2 f81e 	bl	8007304 <lv_obj_class_create_obj>
 80252c8:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 80252ca:	68f8      	ldr	r0, [r7, #12]
 80252cc:	f7e2 f8cf 	bl	800746e <lv_obj_class_init_obj>
    return obj;
 80252d0:	68fb      	ldr	r3, [r7, #12]
}
 80252d2:	4618      	mov	r0, r3
 80252d4:	3710      	adds	r7, #16
 80252d6:	46bd      	mov	sp, r7
 80252d8:	bd80      	pop	{r7, pc}
 80252da:	bf00      	nop
 80252dc:	0802dcf0 	.word	0x0802dcf0

080252e0 <lv_label_set_text>:
/*=====================
 * Setter functions
 *====================*/

void lv_label_set_text(lv_obj_t * obj, const char * text)
{
 80252e0:	b590      	push	{r4, r7, lr}
 80252e2:	b085      	sub	sp, #20
 80252e4:	af00      	add	r7, sp, #0
 80252e6:	6078      	str	r0, [r7, #4]
 80252e8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_label_t * label = (lv_label_t *)obj;
 80252ea:	687b      	ldr	r3, [r7, #4]
 80252ec:	60fb      	str	r3, [r7, #12]

    lv_obj_invalidate(obj);
 80252ee:	6878      	ldr	r0, [r7, #4]
 80252f0:	f7e4 fae9 	bl	80098c6 <lv_obj_invalidate>

    /*If text is NULL then just refresh with the current text*/
    if(text == NULL) text = label->text;
 80252f4:	683b      	ldr	r3, [r7, #0]
 80252f6:	2b00      	cmp	r3, #0
 80252f8:	d102      	bne.n	8025300 <lv_label_set_text+0x20>
 80252fa:	68fb      	ldr	r3, [r7, #12]
 80252fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252fe:	603b      	str	r3, [r7, #0]

    if(label->text == text && label->static_txt == 0) {
 8025300:	68fb      	ldr	r3, [r7, #12]
 8025302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025304:	683a      	ldr	r2, [r7, #0]
 8025306:	429a      	cmp	r2, r3
 8025308:	d121      	bne.n	802534e <lv_label_set_text+0x6e>
 802530a:	68fb      	ldr	r3, [r7, #12]
 802530c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025310:	f003 0308 	and.w	r3, r3, #8
 8025314:	b2db      	uxtb	r3, r3
 8025316:	2b00      	cmp	r3, #0
 8025318:	d119      	bne.n	802534e <lv_label_set_text+0x6e>
        LV_ASSERT_MALLOC(label->text);
        if(label->text == NULL) return;

        _lv_txt_ap_proc(label->text, label->text);
#else
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 802531a:	68fb      	ldr	r3, [r7, #12]
 802531c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802531e:	68fb      	ldr	r3, [r7, #12]
 8025320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025322:	4618      	mov	r0, r3
 8025324:	f7da ff92 	bl	800024c <strlen>
 8025328:	4603      	mov	r3, r0
 802532a:	3301      	adds	r3, #1
 802532c:	4619      	mov	r1, r3
 802532e:	4620      	mov	r0, r4
 8025330:	f7fc febe 	bl	80220b0 <lv_mem_realloc>
 8025334:	4602      	mov	r2, r0
 8025336:	68fb      	ldr	r3, [r7, #12]
 8025338:	625a      	str	r2, [r3, #36]	; 0x24
#endif

        LV_ASSERT_MALLOC(label->text);
 802533a:	68fb      	ldr	r3, [r7, #12]
 802533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802533e:	2b00      	cmp	r3, #0
 8025340:	d100      	bne.n	8025344 <lv_label_set_text+0x64>
 8025342:	e7fe      	b.n	8025342 <lv_label_set_text+0x62>
        if(label->text == NULL) return;
 8025344:	68fb      	ldr	r3, [r7, #12]
 8025346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025348:	2b00      	cmp	r3, #0
 802534a:	d136      	bne.n	80253ba <lv_label_set_text+0xda>
 802534c:	e03a      	b.n	80253c4 <lv_label_set_text+0xe4>
    }
    else {
        /*Free the old text*/
        if(label->text != NULL && label->static_txt == 0) {
 802534e:	68fb      	ldr	r3, [r7, #12]
 8025350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025352:	2b00      	cmp	r3, #0
 8025354:	d00f      	beq.n	8025376 <lv_label_set_text+0x96>
 8025356:	68fb      	ldr	r3, [r7, #12]
 8025358:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802535c:	f003 0308 	and.w	r3, r3, #8
 8025360:	b2db      	uxtb	r3, r3
 8025362:	2b00      	cmp	r3, #0
 8025364:	d107      	bne.n	8025376 <lv_label_set_text+0x96>
            lv_mem_free(label->text);
 8025366:	68fb      	ldr	r3, [r7, #12]
 8025368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802536a:	4618      	mov	r0, r3
 802536c:	f7fc fe72 	bl	8022054 <lv_mem_free>
            label->text = NULL;
 8025370:	68fb      	ldr	r3, [r7, #12]
 8025372:	2200      	movs	r2, #0
 8025374:	625a      	str	r2, [r3, #36]	; 0x24
        if(label->text == NULL) return;

        _lv_txt_ap_proc(text, label->text);
#else
        /*Get the size of the text*/
        size_t len = strlen(text) + 1;
 8025376:	6838      	ldr	r0, [r7, #0]
 8025378:	f7da ff68 	bl	800024c <strlen>
 802537c:	4603      	mov	r3, r0
 802537e:	3301      	adds	r3, #1
 8025380:	60bb      	str	r3, [r7, #8]

        /*Allocate space for the new text*/
        label->text = lv_mem_alloc(len);
 8025382:	68b8      	ldr	r0, [r7, #8]
 8025384:	f7fc fe36 	bl	8021ff4 <lv_mem_alloc>
 8025388:	4602      	mov	r2, r0
 802538a:	68fb      	ldr	r3, [r7, #12]
 802538c:	625a      	str	r2, [r3, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 802538e:	68fb      	ldr	r3, [r7, #12]
 8025390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025392:	2b00      	cmp	r3, #0
 8025394:	d100      	bne.n	8025398 <lv_label_set_text+0xb8>
 8025396:	e7fe      	b.n	8025396 <lv_label_set_text+0xb6>
        if(label->text == NULL) return;
 8025398:	68fb      	ldr	r3, [r7, #12]
 802539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802539c:	2b00      	cmp	r3, #0
 802539e:	d010      	beq.n	80253c2 <lv_label_set_text+0xe2>
        strcpy(label->text, text);
 80253a0:	68fb      	ldr	r3, [r7, #12]
 80253a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80253a4:	6839      	ldr	r1, [r7, #0]
 80253a6:	4618      	mov	r0, r3
 80253a8:	f001 fb02 	bl	80269b0 <strcpy>
#endif

        /*Now the text is dynamically allocated*/
        label->static_txt = 0;
 80253ac:	68fa      	ldr	r2, [r7, #12]
 80253ae:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80253b2:	f36f 03c3 	bfc	r3, #3, #1
 80253b6:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    }

    lv_label_refr_text(obj);
 80253ba:	6878      	ldr	r0, [r7, #4]
 80253bc:	f000 fd62 	bl	8025e84 <lv_label_refr_text>
 80253c0:	e000      	b.n	80253c4 <lv_label_set_text+0xe4>
        if(label->text == NULL) return;
 80253c2:	bf00      	nop
}
 80253c4:	3714      	adds	r7, #20
 80253c6:	46bd      	mov	sp, r7
 80253c8:	bd90      	pop	{r4, r7, pc}
	...

080253cc <lv_label_set_long_mode>:

    lv_label_refr_text(obj);
}

void lv_label_set_long_mode(lv_obj_t * obj, lv_label_long_mode_t long_mode)
{
 80253cc:	b580      	push	{r7, lr}
 80253ce:	b084      	sub	sp, #16
 80253d0:	af00      	add	r7, sp, #0
 80253d2:	6078      	str	r0, [r7, #4]
 80253d4:	460b      	mov	r3, r1
 80253d6:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_label_t * label = (lv_label_t *)obj;
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	60fb      	str	r3, [r7, #12]

    /*Delete the old animation (if exists)*/
    lv_anim_del(obj, set_ofs_x_anim);
 80253dc:	4924      	ldr	r1, [pc, #144]	; (8025470 <lv_label_set_long_mode+0xa4>)
 80253de:	6878      	ldr	r0, [r7, #4]
 80253e0:	f7fa ff6a 	bl	80202b8 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 80253e4:	4923      	ldr	r1, [pc, #140]	; (8025474 <lv_label_set_long_mode+0xa8>)
 80253e6:	6878      	ldr	r0, [r7, #4]
 80253e8:	f7fa ff66 	bl	80202b8 <lv_anim_del>
    label->offset.x = 0;
 80253ec:	68fb      	ldr	r3, [r7, #12]
 80253ee:	2200      	movs	r2, #0
 80253f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    label->offset.y = 0;
 80253f4:	68fb      	ldr	r3, [r7, #12]
 80253f6:	2200      	movs	r2, #0
 80253f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 80253fc:	78fb      	ldrb	r3, [r7, #3]
 80253fe:	2b02      	cmp	r3, #2
 8025400:	d005      	beq.n	802540e <lv_label_set_long_mode+0x42>
 8025402:	78fb      	ldrb	r3, [r7, #3]
 8025404:	2b03      	cmp	r3, #3
 8025406:	d002      	beq.n	802540e <lv_label_set_long_mode+0x42>
 8025408:	78fb      	ldrb	r3, [r7, #3]
 802540a:	2b04      	cmp	r3, #4
 802540c:	d107      	bne.n	802541e <lv_label_set_long_mode+0x52>
        label->expand = 1;
 802540e:	68fa      	ldr	r2, [r7, #12]
 8025410:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025414:	f043 0320 	orr.w	r3, r3, #32
 8025418:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 802541c:	e006      	b.n	802542c <lv_label_set_long_mode+0x60>
    else
        label->expand = 0;
 802541e:	68fa      	ldr	r2, [r7, #12]
 8025420:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025424:	f36f 1345 	bfc	r3, #5, #1
 8025428:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48

    /*Restore the character under the dots*/
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 802542c:	68fb      	ldr	r3, [r7, #12]
 802542e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025432:	f003 0307 	and.w	r3, r3, #7
 8025436:	b2db      	uxtb	r3, r3
 8025438:	2b01      	cmp	r3, #1
 802543a:	d107      	bne.n	802544c <lv_label_set_long_mode+0x80>
 802543c:	68fb      	ldr	r3, [r7, #12]
 802543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025444:	d002      	beq.n	802544c <lv_label_set_long_mode+0x80>
        lv_label_revert_dots(obj);
 8025446:	6878      	ldr	r0, [r7, #4]
 8025448:	f001 f978 	bl	802673c <lv_label_revert_dots>
    }

    label->long_mode = long_mode;
 802544c:	78fb      	ldrb	r3, [r7, #3]
 802544e:	f003 0307 	and.w	r3, r3, #7
 8025452:	b2d9      	uxtb	r1, r3
 8025454:	68fa      	ldr	r2, [r7, #12]
 8025456:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 802545a:	f361 0302 	bfi	r3, r1, #0, #3
 802545e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    lv_label_refr_text(obj);
 8025462:	6878      	ldr	r0, [r7, #4]
 8025464:	f000 fd0e 	bl	8025e84 <lv_label_refr_text>
}
 8025468:	bf00      	nop
 802546a:	3710      	adds	r7, #16
 802546c:	46bd      	mov	sp, r7
 802546e:	bd80      	pop	{r7, pc}
 8025470:	080268f1 	.word	0x080268f1
 8025474:	08026917 	.word	0x08026917

08025478 <lv_label_get_text>:
/*=====================
 * Getter functions
 *====================*/

char * lv_label_get_text(const lv_obj_t * obj)
{
 8025478:	b480      	push	{r7}
 802547a:	b085      	sub	sp, #20
 802547c:	af00      	add	r7, sp, #0
 802547e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_label_t * label = (lv_label_t *)obj;
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	60fb      	str	r3, [r7, #12]
    return label->text;
 8025484:	68fb      	ldr	r3, [r7, #12]
 8025486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8025488:	4618      	mov	r0, r3
 802548a:	3714      	adds	r7, #20
 802548c:	46bd      	mov	sp, r7
 802548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025492:	4770      	bx	lr

08025494 <lv_label_get_letter_on>:
    if(mutable_bidi_txt) lv_mem_buf_release(mutable_bidi_txt);
#endif
}

uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
{
 8025494:	b590      	push	{r4, r7, lr}
 8025496:	b09d      	sub	sp, #116	; 0x74
 8025498:	af02      	add	r7, sp, #8
 802549a:	6078      	str	r0, [r7, #4]
 802549c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    LV_ASSERT_NULL(pos_in);
 802549e:	683b      	ldr	r3, [r7, #0]
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d100      	bne.n	80254a6 <lv_label_get_letter_on+0x12>
 80254a4:	e7fe      	b.n	80254a4 <lv_label_get_letter_on+0x10>
    lv_label_t * label = (lv_label_t *)obj;
 80254a6:	687b      	ldr	r3, [r7, #4]
 80254a8:	653b      	str	r3, [r7, #80]	; 0x50

    lv_point_t pos;
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80254aa:	683b      	ldr	r3, [r7, #0]
 80254ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80254b0:	b29c      	uxth	r4, r3
 80254b2:	2100      	movs	r1, #0
 80254b4:	6878      	ldr	r0, [r7, #4]
 80254b6:	f7ff fe6e 	bl	8025196 <lv_obj_get_style_pad_left>
 80254ba:	4603      	mov	r3, r0
 80254bc:	b29b      	uxth	r3, r3
 80254be:	1ae3      	subs	r3, r4, r3
 80254c0:	b29b      	uxth	r3, r3
 80254c2:	b21b      	sxth	r3, r3
 80254c4:	84bb      	strh	r3, [r7, #36]	; 0x24
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80254c6:	683b      	ldr	r3, [r7, #0]
 80254c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80254cc:	b29c      	uxth	r4, r3
 80254ce:	2100      	movs	r1, #0
 80254d0:	6878      	ldr	r0, [r7, #4]
 80254d2:	f7ff fe4e 	bl	8025172 <lv_obj_get_style_pad_top>
 80254d6:	4603      	mov	r3, r0
 80254d8:	b29b      	uxth	r3, r3
 80254da:	1ae3      	subs	r3, r4, r3
 80254dc:	b29b      	uxth	r3, r3
 80254de:	b21b      	sxth	r3, r3
 80254e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 80254e2:	f107 031c 	add.w	r3, r7, #28
 80254e6:	4619      	mov	r1, r3
 80254e8:	6878      	ldr	r0, [r7, #4]
 80254ea:	f7e3 fc93 	bl	8008e14 <lv_obj_get_content_coords>
    const char * txt         = lv_label_get_text(obj);
 80254ee:	6878      	ldr	r0, [r7, #4]
 80254f0:	f7ff ffc2 	bl	8025478 <lv_label_get_text>
 80254f4:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint32_t line_start      = 0;
 80254f6:	2300      	movs	r3, #0
 80254f8:	667b      	str	r3, [r7, #100]	; 0x64
    uint32_t new_line_start  = 0;
 80254fa:	2300      	movs	r3, #0
 80254fc:	663b      	str	r3, [r7, #96]	; 0x60
    lv_coord_t max_w         = lv_area_get_width(&txt_coords);
 80254fe:	f107 031c 	add.w	r3, r7, #28
 8025502:	4618      	mov	r0, r3
 8025504:	f7ff fd5c 	bl	8024fc0 <lv_area_get_width>
 8025508:	4603      	mov	r3, r0
 802550a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802550e:	2100      	movs	r1, #0
 8025510:	6878      	ldr	r0, [r7, #4]
 8025512:	f7ff fe7a 	bl	802520a <lv_obj_get_style_text_font>
 8025516:	6478      	str	r0, [r7, #68]	; 0x44
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8025518:	2100      	movs	r1, #0
 802551a:	6878      	ldr	r0, [r7, #4]
 802551c:	f7ff fe98 	bl	8025250 <lv_obj_get_style_text_line_space>
 8025520:	4603      	mov	r3, r0
 8025522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8025526:	2100      	movs	r1, #0
 8025528:	6878      	ldr	r0, [r7, #4]
 802552a:	f7ff fe7f 	bl	802522c <lv_obj_get_style_text_letter_space>
 802552e:	4603      	mov	r3, r0
 8025530:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 8025534:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8025536:	f7ff fd71 	bl	802501c <lv_font_get_line_height>
 802553a:	4603      	mov	r3, r0
 802553c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t y             = 0;
 802553e:	2300      	movs	r3, #0
 8025540:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 8025544:	2300      	movs	r3, #0
 8025546:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint32_t logical_pos;
    char * bidi_txt;

    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 802554a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802554c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025550:	f003 0310 	and.w	r3, r3, #16
 8025554:	b2db      	uxtb	r3, r3
 8025556:	2b00      	cmp	r3, #0
 8025558:	d005      	beq.n	8025566 <lv_label_get_letter_on+0xd2>
 802555a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802555e:	f043 0301 	orr.w	r3, r3, #1
 8025562:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8025566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025568:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802556c:	f003 0320 	and.w	r3, r3, #32
 8025570:	b2db      	uxtb	r3, r3
 8025572:	2b00      	cmp	r3, #0
 8025574:	d005      	beq.n	8025582 <lv_label_get_letter_on+0xee>
 8025576:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802557a:	f043 0302 	orr.w	r3, r3, #2
 802557e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8025582:	2100      	movs	r1, #0
 8025584:	6878      	ldr	r0, [r7, #4]
 8025586:	f7ff fde2 	bl	802514e <lv_obj_get_style_width>
 802558a:	4603      	mov	r3, r0
 802558c:	461a      	mov	r2, r3
 802558e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8025592:	429a      	cmp	r2, r3
 8025594:	d10d      	bne.n	80255b2 <lv_label_get_letter_on+0x11e>
 8025596:	687b      	ldr	r3, [r7, #4]
 8025598:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802559c:	f003 0304 	and.w	r3, r3, #4
 80255a0:	b2db      	uxtb	r3, r3
 80255a2:	2b00      	cmp	r3, #0
 80255a4:	d105      	bne.n	80255b2 <lv_label_get_letter_on+0x11e>
 80255a6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80255aa:	f043 0304 	orr.w	r3, r3, #4
 80255ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 80255b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80255b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80255b6:	461a      	mov	r2, r3
 80255b8:	2100      	movs	r1, #0
 80255ba:	6878      	ldr	r0, [r7, #4]
 80255bc:	f7e7 ff53 	bl	800d466 <lv_obj_calculate_style_text_align>
 80255c0:	4603      	mov	r3, r0
 80255c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*Search the line of the index letter*/;
    while(txt[line_start] != '\0') {
 80255c6:	e041      	b.n	802564c <lv_label_get_letter_on+0x1b8>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80255c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80255ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80255cc:	18d0      	adds	r0, r2, r3
 80255ce:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 80255d2:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80255d6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80255da:	9301      	str	r3, [sp, #4]
 80255dc:	2300      	movs	r3, #0
 80255de:	9300      	str	r3, [sp, #0]
 80255e0:	460b      	mov	r3, r1
 80255e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80255e4:	f7ff f914 	bl	8024810 <_lv_txt_get_next_line>
 80255e8:	4602      	mov	r2, r0
 80255ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80255ec:	4413      	add	r3, r2
 80255ee:	663b      	str	r3, [r7, #96]	; 0x60

        if(pos.y <= y + letter_height) {
 80255f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80255f4:	4619      	mov	r1, r3
 80255f6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 80255fa:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80255fe:	4413      	add	r3, r2
 8025600:	4299      	cmp	r1, r3
 8025602:	dc16      	bgt.n	8025632 <lv_label_get_letter_on+0x19e>
            /*The line is found (stored in 'line_start')*/
            /*Include the NULL terminator in the last line*/
            uint32_t tmp = new_line_start;
 8025604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025606:	613b      	str	r3, [r7, #16]
            uint32_t letter;
            letter = _lv_txt_encoded_prev(txt, &tmp);
 8025608:	4b7c      	ldr	r3, [pc, #496]	; (80257fc <lv_label_get_letter_on+0x368>)
 802560a:	681b      	ldr	r3, [r3, #0]
 802560c:	f107 0210 	add.w	r2, r7, #16
 8025610:	4611      	mov	r1, r2
 8025612:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025614:	4798      	blx	r3
 8025616:	63b8      	str	r0, [r7, #56]	; 0x38
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 8025618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802561a:	2b0a      	cmp	r3, #10
 802561c:	d01d      	beq.n	802565a <lv_label_get_letter_on+0x1c6>
 802561e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025622:	4413      	add	r3, r2
 8025624:	781b      	ldrb	r3, [r3, #0]
 8025626:	2b00      	cmp	r3, #0
 8025628:	d117      	bne.n	802565a <lv_label_get_letter_on+0x1c6>
 802562a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802562c:	3301      	adds	r3, #1
 802562e:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 8025630:	e013      	b.n	802565a <lv_label_get_letter_on+0x1c6>
        }
        y += letter_height + line_space;
 8025632:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025638:	4413      	add	r3, r2
 802563a:	b29a      	uxth	r2, r3
 802563c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8025640:	4413      	add	r3, r2
 8025642:	b29b      	uxth	r3, r3
 8025644:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        line_start = new_line_start;
 8025648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802564a:	667b      	str	r3, [r7, #100]	; 0x64
    while(txt[line_start] != '\0') {
 802564c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802564e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025650:	4413      	add	r3, r2
 8025652:	781b      	ldrb	r3, [r3, #0]
 8025654:	2b00      	cmp	r3, #0
 8025656:	d1b7      	bne.n	80255c8 <lv_label_get_letter_on+0x134>
 8025658:	e000      	b.n	802565c <lv_label_get_letter_on+0x1c8>
            break;
 802565a:	bf00      	nop
    bidi_txt = lv_mem_buf_get(new_line_start - line_start + 1);
    uint32_t txt_len = new_line_start - line_start;
    if(new_line_start > 0 && txt[new_line_start - 1] == '\0' && txt_len > 0) txt_len--;
    _lv_bidi_process_paragraph(txt + line_start, bidi_txt, txt_len, lv_obj_get_style_base_dir(obj, LV_PART_MAIN), NULL, 0);
#else
    bidi_txt = (char *)txt + line_start;
 802565c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802565e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025660:	4413      	add	r3, r2
 8025662:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 8025664:	2300      	movs	r3, #0
 8025666:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    if(align == LV_TEXT_ALIGN_CENTER) {
 802566a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 802566e:	2b02      	cmp	r3, #2
 8025670:	d12a      	bne.n	80256c8 <lv_label_get_letter_on+0x234>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8025672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025676:	1ad1      	subs	r1, r2, r3
 8025678:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 802567c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8025680:	9300      	str	r3, [sp, #0]
 8025682:	4613      	mov	r3, r2
 8025684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025686:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025688:	f7ff f9a0 	bl	80249cc <lv_txt_get_width>
 802568c:	4603      	mov	r3, r0
 802568e:	863b      	strh	r3, [r7, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8025690:	f107 031c 	add.w	r3, r7, #28
 8025694:	4618      	mov	r0, r3
 8025696:	f7ff fc93 	bl	8024fc0 <lv_area_get_width>
 802569a:	4603      	mov	r3, r0
 802569c:	2b00      	cmp	r3, #0
 802569e:	da00      	bge.n	80256a2 <lv_label_get_letter_on+0x20e>
 80256a0:	3301      	adds	r3, #1
 80256a2:	105b      	asrs	r3, r3, #1
 80256a4:	b21b      	sxth	r3, r3
 80256a6:	461a      	mov	r2, r3
 80256a8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	da00      	bge.n	80256b2 <lv_label_get_letter_on+0x21e>
 80256b0:	3301      	adds	r3, #1
 80256b2:	105b      	asrs	r3, r3, #1
 80256b4:	b21b      	sxth	r3, r3
 80256b6:	1ad3      	subs	r3, r2, r3
 80256b8:	b29a      	uxth	r2, r3
 80256ba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80256be:	4413      	add	r3, r2
 80256c0:	b29b      	uxth	r3, r3
 80256c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80256c6:	e023      	b.n	8025710 <lv_label_get_letter_on+0x27c>
    }
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80256c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80256cc:	2b03      	cmp	r3, #3
 80256ce:	d11f      	bne.n	8025710 <lv_label_get_letter_on+0x27c>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80256d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80256d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80256d4:	1ad1      	subs	r1, r2, r3
 80256d6:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80256da:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80256de:	9300      	str	r3, [sp, #0]
 80256e0:	4613      	mov	r3, r2
 80256e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80256e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80256e6:	f7ff f971 	bl	80249cc <lv_txt_get_width>
 80256ea:	4603      	mov	r3, r0
 80256ec:	867b      	strh	r3, [r7, #50]	; 0x32
        x += lv_area_get_width(&txt_coords) - line_w;
 80256ee:	f107 031c 	add.w	r3, r7, #28
 80256f2:	4618      	mov	r0, r3
 80256f4:	f7ff fc64 	bl	8024fc0 <lv_area_get_width>
 80256f8:	4603      	mov	r3, r0
 80256fa:	461a      	mov	r2, r3
 80256fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8025700:	1ad3      	subs	r3, r2, r3
 8025702:	b29a      	uxth	r2, r3
 8025704:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8025708:	4413      	add	r3, r2
 802570a:	b29b      	uxth	r3, r3
 802570c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    }

    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8025710:	2300      	movs	r3, #0
 8025712:	76fb      	strb	r3, [r7, #27]

    uint32_t i = 0;
 8025714:	2300      	movs	r3, #0
 8025716:	617b      	str	r3, [r7, #20]
    uint32_t i_act = i;
 8025718:	697b      	ldr	r3, [r7, #20]
 802571a:	657b      	str	r3, [r7, #84]	; 0x54

    if(new_line_start > 0) {
 802571c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802571e:	2b00      	cmp	r3, #0
 8025720:	d058      	beq.n	80257d4 <lv_label_get_letter_on+0x340>
        while(i + line_start < new_line_start) {
 8025722:	e051      	b.n	80257c8 <lv_label_get_letter_on+0x334>
            /*Get the current letter and the next letter for kerning*/
            /*Be careful 'i' already points to the next character*/
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8025724:	f107 0314 	add.w	r3, r7, #20
 8025728:	f107 0208 	add.w	r2, r7, #8
 802572c:	f107 010c 	add.w	r1, r7, #12
 8025730:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025732:	f7ff f9e9 	bl	8024b08 <_lv_txt_encoded_letter_next_2>

            /*Handle the recolor command*/
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8025736:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802573a:	f003 0301 	and.w	r3, r3, #1
 802573e:	2b00      	cmp	r3, #0
 8025740:	d00e      	beq.n	8025760 <lv_label_get_letter_on+0x2cc>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 8025742:	697b      	ldr	r3, [r7, #20]
 8025744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025746:	4413      	add	r3, r2
 8025748:	781b      	ldrb	r3, [r3, #0]
 802574a:	461a      	mov	r2, r3
 802574c:	f107 031b 	add.w	r3, r7, #27
 8025750:	4611      	mov	r1, r2
 8025752:	4618      	mov	r0, r3
 8025754:	f7ff f99e 	bl	8024a94 <_lv_txt_is_cmd>
 8025758:	4603      	mov	r3, r0
 802575a:	2b00      	cmp	r3, #0
 802575c:	d000      	beq.n	8025760 <lv_label_get_letter_on+0x2cc>
 802575e:	e033      	b.n	80257c8 <lv_label_get_letter_on+0x334>
                    continue; /*Skip the letter if it is part of a command*/
                }
            }

            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 8025760:	68fb      	ldr	r3, [r7, #12]
 8025762:	68ba      	ldr	r2, [r7, #8]
 8025764:	4619      	mov	r1, r3
 8025766:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8025768:	f7f9 ff58 	bl	801f61c <lv_font_get_glyph_width>
 802576c:	4603      	mov	r3, r0
 802576e:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /*Finish if the x position or the last char of the next line is reached*/
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8025770:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8025774:	4619      	mov	r1, r3
 8025776:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 802577a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 802577e:	4413      	add	r3, r2
 8025780:	4299      	cmp	r1, r3
 8025782:	db0d      	blt.n	80257a0 <lv_label_get_letter_on+0x30c>
 8025784:	697a      	ldr	r2, [r7, #20]
 8025786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025788:	4413      	add	r3, r2
 802578a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802578c:	429a      	cmp	r2, r3
 802578e:	d007      	beq.n	80257a0 <lv_label_get_letter_on+0x30c>
 8025790:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025794:	4413      	add	r3, r2
 8025796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025798:	4413      	add	r3, r2
 802579a:	781b      	ldrb	r3, [r3, #0]
 802579c:	2b00      	cmp	r3, #0
 802579e:	d102      	bne.n	80257a6 <lv_label_get_letter_on+0x312>
                i = i_act;
 80257a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80257a2:	617b      	str	r3, [r7, #20]
 80257a4:	e016      	b.n	80257d4 <lv_label_get_letter_on+0x340>
                break;
            }
            x += gw;
 80257a6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80257aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80257ac:	4413      	add	r3, r2
 80257ae:	b29b      	uxth	r3, r3
 80257b0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            x += letter_space;
 80257b4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80257b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80257bc:	4413      	add	r3, r2
 80257be:	b29b      	uxth	r3, r3
 80257c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            i_act = i;
 80257c4:	697b      	ldr	r3, [r7, #20]
 80257c6:	657b      	str	r3, [r7, #84]	; 0x54
        while(i + line_start < new_line_start) {
 80257c8:	697a      	ldr	r2, [r7, #20]
 80257ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80257cc:	4413      	add	r3, r2
 80257ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80257d0:	429a      	cmp	r2, r3
 80257d2:	d8a7      	bhi.n	8025724 <lv_label_get_letter_on+0x290>
                                               txt_len, lv_obj_get_style_base_dir(obj, LV_PART_MAIN), cid, &is_rtl);
        if(is_rtl) logical_pos++;
    }
    lv_mem_buf_release(bidi_txt);
#else
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 80257d4:	4b0a      	ldr	r3, [pc, #40]	; (8025800 <lv_label_get_letter_on+0x36c>)
 80257d6:	681b      	ldr	r3, [r3, #0]
 80257d8:	697a      	ldr	r2, [r7, #20]
 80257da:	4611      	mov	r1, r2
 80257dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80257de:	4798      	blx	r3
 80257e0:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 80257e2:	4b07      	ldr	r3, [pc, #28]	; (8025800 <lv_label_get_letter_on+0x36c>)
 80257e4:	681b      	ldr	r3, [r3, #0]
 80257e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80257e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80257ea:	4798      	blx	r3
 80257ec:	4602      	mov	r2, r0
 80257ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257f0:	4413      	add	r3, r2
}
 80257f2:	4618      	mov	r0, r3
 80257f4:	376c      	adds	r7, #108	; 0x6c
 80257f6:	46bd      	mov	sp, r7
 80257f8:	bd90      	pop	{r4, r7, pc}
 80257fa:	bf00      	nop
 80257fc:	20000020 	.word	0x20000020
 8025800:	20000028 	.word	0x20000028

08025804 <lv_label_get_text_selection_start>:
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
}

uint32_t lv_label_get_text_selection_start(const lv_obj_t * obj)
{
 8025804:	b480      	push	{r7}
 8025806:	b085      	sub	sp, #20
 8025808:	af00      	add	r7, sp, #0
 802580a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

#if LV_LABEL_TEXT_SELECTION
    lv_label_t * label = (lv_label_t *)obj;
 802580c:	687b      	ldr	r3, [r7, #4]
 802580e:	60fb      	str	r3, [r7, #12]
    return label->sel_start;
 8025810:	68fb      	ldr	r3, [r7, #12]
 8025812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

#else
    LV_UNUSED(obj); /*Unused*/
    return LV_LABEL_TEXT_SELECTION_OFF;
#endif
}
 8025814:	4618      	mov	r0, r3
 8025816:	3714      	adds	r7, #20
 8025818:	46bd      	mov	sp, r7
 802581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802581e:	4770      	bx	lr

08025820 <lv_label_get_text_selection_end>:

uint32_t lv_label_get_text_selection_end(const lv_obj_t * obj)
{
 8025820:	b480      	push	{r7}
 8025822:	b085      	sub	sp, #20
 8025824:	af00      	add	r7, sp, #0
 8025826:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

#if LV_LABEL_TEXT_SELECTION
    lv_label_t * label = (lv_label_t *)obj;
 8025828:	687b      	ldr	r3, [r7, #4]
 802582a:	60fb      	str	r3, [r7, #12]
    return label->sel_end;
 802582c:	68fb      	ldr	r3, [r7, #12]
 802582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#else
    LV_UNUSED(obj); /*Unused*/
    return LV_LABEL_TEXT_SELECTION_OFF;
#endif
}
 8025830:	4618      	mov	r0, r3
 8025832:	3714      	adds	r7, #20
 8025834:	46bd      	mov	sp, r7
 8025836:	f85d 7b04 	ldr.w	r7, [sp], #4
 802583a:	4770      	bx	lr

0802583c <lv_label_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_label_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 802583c:	b580      	push	{r7, lr}
 802583e:	b084      	sub	sp, #16
 8025840:	af00      	add	r7, sp, #0
 8025842:	6078      	str	r0, [r7, #4]
 8025844:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_label_t * label = (lv_label_t *)obj;
 8025846:	683b      	ldr	r3, [r7, #0]
 8025848:	60fb      	str	r3, [r7, #12]

    label->text       = NULL;
 802584a:	68fb      	ldr	r3, [r7, #12]
 802584c:	2200      	movs	r2, #0
 802584e:	625a      	str	r2, [r3, #36]	; 0x24
    label->static_txt = 0;
 8025850:	68fa      	ldr	r2, [r7, #12]
 8025852:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025856:	f36f 03c3 	bfc	r3, #3, #1
 802585a:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->recolor    = 0;
 802585e:	68fa      	ldr	r2, [r7, #12]
 8025860:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8025864:	f36f 1304 	bfc	r3, #4, #1
 8025868:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
 802586c:	68fb      	ldr	r3, [r7, #12]
 802586e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025872:	62da      	str	r2, [r3, #44]	; 0x2c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 8025874:	68fa      	ldr	r2, [r7, #12]
 8025876:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 802587a:	f36f 0302 	bfc	r3, #0, #3
 802587e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->offset.x = 0;
 8025882:	68fb      	ldr	r3, [r7, #12]
 8025884:	2200      	movs	r2, #0
 8025886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    label->offset.y = 0;
 802588a:	68fb      	ldr	r3, [r7, #12]
 802588c:	2200      	movs	r2, #0
 802588e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if LV_LABEL_LONG_TXT_HINT
    label->hint.line_start = -1;
 8025892:	68fb      	ldr	r3, [r7, #12]
 8025894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025898:	631a      	str	r2, [r3, #48]	; 0x30
    label->hint.coord_y    = 0;
 802589a:	68fb      	ldr	r3, [r7, #12]
 802589c:	2200      	movs	r2, #0
 802589e:	639a      	str	r2, [r3, #56]	; 0x38
    label->hint.y          = 0;
 80258a0:	68fb      	ldr	r3, [r7, #12]
 80258a2:	2200      	movs	r2, #0
 80258a4:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if LV_LABEL_TEXT_SELECTION
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 80258a6:	68fb      	ldr	r3, [r7, #12]
 80258a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80258ac:	63da      	str	r2, [r3, #60]	; 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 80258ae:	68fb      	ldr	r3, [r7, #12]
 80258b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80258b4:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    label->dot.tmp_ptr   = NULL;
 80258b6:	68fb      	ldr	r3, [r7, #12]
 80258b8:	2200      	movs	r2, #0
 80258ba:	629a      	str	r2, [r3, #40]	; 0x28
    label->dot_tmp_alloc = 0;
 80258bc:	68fa      	ldr	r2, [r7, #12]
 80258be:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80258c2:	f36f 1386 	bfc	r3, #6, #1
 80258c6:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80258ca:	2102      	movs	r1, #2
 80258cc:	6838      	ldr	r0, [r7, #0]
 80258ce:	f7e0 fb6d 	bl	8005fac <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 80258d2:	2100      	movs	r1, #0
 80258d4:	6838      	ldr	r0, [r7, #0]
 80258d6:	f7ff fd79 	bl	80253cc <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 80258da:	4904      	ldr	r1, [pc, #16]	; (80258ec <lv_label_constructor+0xb0>)
 80258dc:	6838      	ldr	r0, [r7, #0]
 80258de:	f7ff fcff 	bl	80252e0 <lv_label_set_text>


    LV_TRACE_OBJ_CREATE("finished");
}
 80258e2:	bf00      	nop
 80258e4:	3710      	adds	r7, #16
 80258e6:	46bd      	mov	sp, r7
 80258e8:	bd80      	pop	{r7, pc}
 80258ea:	bf00      	nop
 80258ec:	08026a10 	.word	0x08026a10

080258f0 <lv_label_destructor>:

static void lv_label_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80258f0:	b580      	push	{r7, lr}
 80258f2:	b084      	sub	sp, #16
 80258f4:	af00      	add	r7, sp, #0
 80258f6:	6078      	str	r0, [r7, #4]
 80258f8:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    lv_label_t * label = (lv_label_t *)obj;
 80258fa:	683b      	ldr	r3, [r7, #0]
 80258fc:	60fb      	str	r3, [r7, #12]

    lv_label_dot_tmp_free(obj);
 80258fe:	6838      	ldr	r0, [r7, #0]
 8025900:	f000 ffd1 	bl	80268a6 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8025904:	68fb      	ldr	r3, [r7, #12]
 8025906:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802590a:	f003 0308 	and.w	r3, r3, #8
 802590e:	b2db      	uxtb	r3, r3
 8025910:	2b00      	cmp	r3, #0
 8025912:	d104      	bne.n	802591e <lv_label_destructor+0x2e>
 8025914:	68fb      	ldr	r3, [r7, #12]
 8025916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025918:	4618      	mov	r0, r3
 802591a:	f7fc fb9b 	bl	8022054 <lv_mem_free>
    label->text = NULL;
 802591e:	68fb      	ldr	r3, [r7, #12]
 8025920:	2200      	movs	r2, #0
 8025922:	625a      	str	r2, [r3, #36]	; 0x24
}
 8025924:	bf00      	nop
 8025926:	3710      	adds	r7, #16
 8025928:	46bd      	mov	sp, r7
 802592a:	bd80      	pop	{r7, pc}

0802592c <lv_label_event>:

static void lv_label_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 802592c:	b580      	push	{r7, lr}
 802592e:	b090      	sub	sp, #64	; 0x40
 8025930:	af04      	add	r7, sp, #16
 8025932:	6078      	str	r0, [r7, #4]
 8025934:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8025936:	6839      	ldr	r1, [r7, #0]
 8025938:	486a      	ldr	r0, [pc, #424]	; (8025ae4 <lv_label_event+0x1b8>)
 802593a:	f7df fa31 	bl	8004da0 <lv_obj_event_base>
 802593e:	4603      	mov	r3, r0
 8025940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(res != LV_RES_OK) return;
 8025944:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8025948:	2b01      	cmp	r3, #1
 802594a:	f040 80c6 	bne.w	8025ada <lv_label_event+0x1ae>

    lv_event_code_t code = lv_event_get_code(e);
 802594e:	6838      	ldr	r0, [r7, #0]
 8025950:	f7df fa7c 	bl	8004e4c <lv_event_get_code>
 8025954:	4603      	mov	r3, r0
 8025956:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 802595a:	6838      	ldr	r0, [r7, #0]
 802595c:	f7df fa5e 	bl	8004e1c <lv_event_get_target>
 8025960:	6278      	str	r0, [r7, #36]	; 0x24

    if(code == LV_EVENT_STYLE_CHANGED) {
 8025962:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8025966:	2b2a      	cmp	r3, #42	; 0x2a
 8025968:	d106      	bne.n	8025978 <lv_label_event+0x4c>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(obj);
 802596a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802596c:	f000 fee6 	bl	802673c <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8025970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025972:	f000 fa87 	bl	8025e84 <lv_label_refr_text>
 8025976:	e0b1      	b.n	8025adc <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8025978:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 802597c:	2b13      	cmp	r3, #19
 802597e:	d115      	bne.n	80259ac <lv_label_event+0x80>
        /* Italic or other non-typical letters can be drawn of out of the object.
         * It happens if box_w + ofs_x > adw_w in the glyph.
         * To avoid this add some extra draw area.
         * font_h / 4 is an empirical value. */
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8025980:	2100      	movs	r1, #0
 8025982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025984:	f7ff fc41 	bl	802520a <lv_obj_get_style_text_font>
 8025988:	6138      	str	r0, [r7, #16]
        lv_coord_t font_h = lv_font_get_line_height(font);
 802598a:	6938      	ldr	r0, [r7, #16]
 802598c:	f7ff fb46 	bl	802501c <lv_font_get_line_height>
 8025990:	4603      	mov	r3, r0
 8025992:	81fb      	strh	r3, [r7, #14]
        lv_event_set_ext_draw_size(e, font_h / 4);
 8025994:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8025998:	2b00      	cmp	r3, #0
 802599a:	da00      	bge.n	802599e <lv_label_event+0x72>
 802599c:	3303      	adds	r3, #3
 802599e:	109b      	asrs	r3, r3, #2
 80259a0:	b21b      	sxth	r3, r3
 80259a2:	4619      	mov	r1, r3
 80259a4:	6838      	ldr	r0, [r7, #0]
 80259a6:	f7df fb07 	bl	8004fb8 <lv_event_set_ext_draw_size>
 80259aa:	e097      	b.n	8025adc <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80259ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80259b0:	2b29      	cmp	r3, #41	; 0x29
 80259b2:	d106      	bne.n	80259c2 <lv_label_event+0x96>
        lv_label_revert_dots(obj);
 80259b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80259b6:	f000 fec1 	bl	802673c <lv_label_revert_dots>
        lv_label_refr_text(obj);
 80259ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80259bc:	f000 fa62 	bl	8025e84 <lv_label_refr_text>
 80259c0:	e08c      	b.n	8025adc <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80259c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80259c6:	2b2c      	cmp	r3, #44	; 0x2c
 80259c8:	d17f      	bne.n	8025aca <lv_label_event+0x19e>
        lv_point_t size;
        lv_label_t * label = (lv_label_t *)obj;
 80259ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259cc:	623b      	str	r3, [r7, #32]
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80259ce:	2100      	movs	r1, #0
 80259d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80259d2:	f7ff fc1a 	bl	802520a <lv_obj_get_style_text_font>
 80259d6:	61f8      	str	r0, [r7, #28]
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 80259d8:	2100      	movs	r1, #0
 80259da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80259dc:	f7ff fc26 	bl	802522c <lv_obj_get_style_text_letter_space>
 80259e0:	4603      	mov	r3, r0
 80259e2:	837b      	strh	r3, [r7, #26]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80259e4:	2100      	movs	r1, #0
 80259e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80259e8:	f7ff fc32 	bl	8025250 <lv_obj_get_style_text_line_space>
 80259ec:	4603      	mov	r3, r0
 80259ee:	833b      	strh	r3, [r7, #24]
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 80259f0:	2300      	movs	r3, #0
 80259f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80259f6:	6a3b      	ldr	r3, [r7, #32]
 80259f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80259fc:	f003 0310 	and.w	r3, r3, #16
 8025a00:	b2db      	uxtb	r3, r3
 8025a02:	2b00      	cmp	r3, #0
 8025a04:	d005      	beq.n	8025a12 <lv_label_event+0xe6>
 8025a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025a0a:	f043 0301 	orr.w	r3, r3, #1
 8025a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8025a12:	6a3b      	ldr	r3, [r7, #32]
 8025a14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025a18:	f003 0320 	and.w	r3, r3, #32
 8025a1c:	b2db      	uxtb	r3, r3
 8025a1e:	2b00      	cmp	r3, #0
 8025a20:	d005      	beq.n	8025a2e <lv_label_event+0x102>
 8025a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025a26:	f043 0302 	orr.w	r3, r3, #2
 8025a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        lv_coord_t w = lv_obj_get_content_width(obj);
 8025a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025a30:	f7e3 f99a 	bl	8008d68 <lv_obj_get_content_width>
 8025a34:	4603      	mov	r3, r0
 8025a36:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8025a38:	2100      	movs	r1, #0
 8025a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025a3c:	f7ff fb87 	bl	802514e <lv_obj_get_style_width>
 8025a40:	4603      	mov	r3, r0
 8025a42:	461a      	mov	r2, r3
 8025a44:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8025a48:	429a      	cmp	r2, r3
 8025a4a:	d10b      	bne.n	8025a64 <lv_label_event+0x138>
 8025a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8025a52:	f003 0304 	and.w	r3, r3, #4
 8025a56:	b2db      	uxtb	r3, r3
 8025a58:	2b00      	cmp	r3, #0
 8025a5a:	d103      	bne.n	8025a64 <lv_label_event+0x138>
 8025a5c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8025a60:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8025a62:	e004      	b.n	8025a6e <lv_label_event+0x142>
        else w = lv_obj_get_content_width(obj);
 8025a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025a66:	f7e3 f97f 	bl	8008d68 <lv_obj_get_content_width>
 8025a6a:	4603      	mov	r3, r0
 8025a6c:	85bb      	strh	r3, [r7, #44]	; 0x2c

        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8025a6e:	6a3b      	ldr	r3, [r7, #32]
 8025a70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025a72:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8025a76:	f107 0008 	add.w	r0, r7, #8
 8025a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025a7e:	9302      	str	r3, [sp, #8]
 8025a80:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8025a84:	9301      	str	r3, [sp, #4]
 8025a86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8025a8a:	9300      	str	r3, [sp, #0]
 8025a8c:	4613      	mov	r3, r2
 8025a8e:	69fa      	ldr	r2, [r7, #28]
 8025a90:	f7fe fd22 	bl	80244d8 <lv_txt_get_size>

        lv_point_t * self_size = lv_event_get_param(e);
 8025a94:	6838      	ldr	r0, [r7, #0]
 8025a96:	f7df f9e8 	bl	8004e6a <lv_event_get_param>
 8025a9a:	6178      	str	r0, [r7, #20]
        self_size->x = LV_MAX(self_size->x, size.x);
 8025a9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8025aa0:	697b      	ldr	r3, [r7, #20]
 8025aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025aa6:	4293      	cmp	r3, r2
 8025aa8:	bfb8      	it	lt
 8025aaa:	4613      	movlt	r3, r2
 8025aac:	b21a      	sxth	r2, r3
 8025aae:	697b      	ldr	r3, [r7, #20]
 8025ab0:	801a      	strh	r2, [r3, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8025ab2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8025ab6:	697b      	ldr	r3, [r7, #20]
 8025ab8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8025abc:	4293      	cmp	r3, r2
 8025abe:	bfb8      	it	lt
 8025ac0:	4613      	movlt	r3, r2
 8025ac2:	b21a      	sxth	r2, r3
 8025ac4:	697b      	ldr	r3, [r7, #20]
 8025ac6:	805a      	strh	r2, [r3, #2]
 8025ac8:	e008      	b.n	8025adc <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 8025aca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8025ace:	2b15      	cmp	r3, #21
 8025ad0:	d104      	bne.n	8025adc <lv_label_event+0x1b0>
        draw_main(e);
 8025ad2:	6838      	ldr	r0, [r7, #0]
 8025ad4:	f000 f808 	bl	8025ae8 <draw_main>
 8025ad8:	e000      	b.n	8025adc <lv_label_event+0x1b0>
    if(res != LV_RES_OK) return;
 8025ada:	bf00      	nop
    }
}
 8025adc:	3730      	adds	r7, #48	; 0x30
 8025ade:	46bd      	mov	sp, r7
 8025ae0:	bd80      	pop	{r7, pc}
 8025ae2:	bf00      	nop
 8025ae4:	0802dcf0 	.word	0x0802dcf0

08025ae8 <draw_main>:


static void draw_main(lv_event_t * e)
{
 8025ae8:	b5b0      	push	{r4, r5, r7, lr}
 8025aea:	b09c      	sub	sp, #112	; 0x70
 8025aec:	af04      	add	r7, sp, #16
 8025aee:	6078      	str	r0, [r7, #4]
    lv_obj_t * obj = lv_event_get_target(e);
 8025af0:	6878      	ldr	r0, [r7, #4]
 8025af2:	f7df f993 	bl	8004e1c <lv_event_get_target>
 8025af6:	6578      	str	r0, [r7, #84]	; 0x54
    lv_label_t * label = (lv_label_t *)obj;
 8025af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025afa:	653b      	str	r3, [r7, #80]	; 0x50
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8025afc:	6878      	ldr	r0, [r7, #4]
 8025afe:	f7df fa35 	bl	8004f6c <lv_event_get_draw_ctx>
 8025b02:	64f8      	str	r0, [r7, #76]	; 0x4c

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8025b04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025b08:	4619      	mov	r1, r3
 8025b0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025b0c:	f7e3 f982 	bl	8008e14 <lv_obj_get_content_coords>

    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8025b10:	2300      	movs	r3, #0
 8025b12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8025b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025b1c:	f003 0310 	and.w	r3, r3, #16
 8025b20:	b2db      	uxtb	r3, r3
 8025b22:	2b00      	cmp	r3, #0
 8025b24:	d005      	beq.n	8025b32 <draw_main+0x4a>
 8025b26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025b2a:	f043 0301 	orr.w	r3, r3, #1
 8025b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8025b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025b38:	f003 0320 	and.w	r3, r3, #32
 8025b3c:	b2db      	uxtb	r3, r3
 8025b3e:	2b00      	cmp	r3, #0
 8025b40:	d005      	beq.n	8025b4e <draw_main+0x66>
 8025b42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025b46:	f043 0302 	orr.w	r3, r3, #2
 8025b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8025b4e:	2100      	movs	r1, #0
 8025b50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025b52:	f7ff fafc 	bl	802514e <lv_obj_get_style_width>
 8025b56:	4603      	mov	r3, r0
 8025b58:	461a      	mov	r2, r3
 8025b5a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8025b5e:	429a      	cmp	r2, r3
 8025b60:	d10d      	bne.n	8025b7e <draw_main+0x96>
 8025b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025b64:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8025b68:	f003 0304 	and.w	r3, r3, #4
 8025b6c:	b2db      	uxtb	r3, r3
 8025b6e:	2b00      	cmp	r3, #0
 8025b70:	d105      	bne.n	8025b7e <draw_main+0x96>
 8025b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025b76:	f043 0304 	orr.w	r3, r3, #4
 8025b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_label_dsc_t label_draw_dsc;
    lv_draw_label_dsc_init(&label_draw_dsc);
 8025b7e:	f107 0318 	add.w	r3, r7, #24
 8025b82:	4618      	mov	r0, r3
 8025b84:	f7ea ffaa 	bl	8010adc <lv_draw_label_dsc_init>

    label_draw_dsc.ofs_x = label->offset.x;
 8025b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b8a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8025b8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    label_draw_dsc.ofs_y = label->offset.y;
 8025b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b92:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8025b96:	85fb      	strh	r3, [r7, #46]	; 0x2e

    label_draw_dsc.flag = flag;
 8025b98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025b9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8025ba0:	f107 0318 	add.w	r3, r7, #24
 8025ba4:	461a      	mov	r2, r3
 8025ba6:	2100      	movs	r1, #0
 8025ba8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025baa:	f7e2 fa14 	bl	8007fd6 <lv_obj_init_draw_label_dsc>
    lv_bidi_calculate_align(&label_draw_dsc.align, &label_draw_dsc.bidi_dir, label->text);
 8025bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025bb2:	f107 0318 	add.w	r3, r7, #24
 8025bb6:	f103 0119 	add.w	r1, r3, #25
 8025bba:	f107 0318 	add.w	r3, r7, #24
 8025bbe:	331a      	adds	r3, #26
 8025bc0:	4618      	mov	r0, r3
 8025bc2:	f7ff fab1 	bl	8025128 <lv_bidi_calculate_align>

    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8025bc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025bc8:	f7ff fe1c 	bl	8025804 <lv_label_get_text_selection_start>
 8025bcc:	4603      	mov	r3, r0
 8025bce:	61fb      	str	r3, [r7, #28]
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8025bd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025bd2:	f7ff fe25 	bl	8025820 <lv_label_get_text_selection_end>
 8025bd6:	4603      	mov	r3, r0
 8025bd8:	623b      	str	r3, [r7, #32]
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8025bda:	69fb      	ldr	r3, [r7, #28]
 8025bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025be0:	4293      	cmp	r3, r2
 8025be2:	d012      	beq.n	8025c0a <draw_main+0x122>
 8025be4:	6a3b      	ldr	r3, [r7, #32]
 8025be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025bea:	4293      	cmp	r3, r2
 8025bec:	d00d      	beq.n	8025c0a <draw_main+0x122>
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 8025bee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8025bf2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025bf4:	f7ff faf2 	bl	80251dc <lv_obj_get_style_text_color_filtered>
 8025bf8:	f887 0025 	strb.w	r0, [r7, #37]	; 0x25
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 8025bfc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8025c00:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025c02:	f7ff fada 	bl	80251ba <lv_obj_get_style_bg_color>
 8025c06:	f887 0026 	strb.w	r0, [r7, #38]	; 0x26
    }

    /* In SCROLL and SCROLL_CIRCULAR mode the CENTER and RIGHT are pointless, so remove them.
     * (In addition, they will create misalignment in this situation)*/
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8025c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025c0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025c10:	f003 0307 	and.w	r3, r3, #7
 8025c14:	b2db      	uxtb	r3, r3
 8025c16:	2b02      	cmp	r3, #2
 8025c18:	d007      	beq.n	8025c2a <draw_main+0x142>
 8025c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025c1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025c20:	f003 0307 	and.w	r3, r3, #7
 8025c24:	b2db      	uxtb	r3, r3
 8025c26:	2b03      	cmp	r3, #3
 8025c28:	d128      	bne.n	8025c7c <draw_main+0x194>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8025c2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8025c2e:	2b02      	cmp	r3, #2
 8025c30:	d003      	beq.n	8025c3a <draw_main+0x152>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8025c32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8025c36:	2b03      	cmp	r3, #3
 8025c38:	d120      	bne.n	8025c7c <draw_main+0x194>
        lv_point_t size;
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8025c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025c3e:	69bc      	ldr	r4, [r7, #24]
 8025c40:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 8025c44:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8025c48:	f107 000c 	add.w	r0, r7, #12
 8025c4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8025c50:	9202      	str	r2, [sp, #8]
 8025c52:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8025c56:	9201      	str	r2, [sp, #4]
 8025c58:	9300      	str	r3, [sp, #0]
 8025c5a:	462b      	mov	r3, r5
 8025c5c:	4622      	mov	r2, r4
 8025c5e:	f7fe fc3b 	bl	80244d8 <lv_txt_get_size>
                        LV_COORD_MAX, flag);
        if(size.x > lv_area_get_width(&txt_coords)) {
 8025c62:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
 8025c66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025c6a:	4618      	mov	r0, r3
 8025c6c:	f7ff f9a8 	bl	8024fc0 <lv_area_get_width>
 8025c70:	4603      	mov	r3, r0
 8025c72:	429c      	cmp	r4, r3
 8025c74:	dd02      	ble.n	8025c7c <draw_main+0x194>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8025c76:	2301      	movs	r3, #1
 8025c78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }
    }
#if LV_LABEL_LONG_TXT_HINT
    lv_draw_label_hint_t * hint = &label->hint;
 8025c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025c7e:	3330      	adds	r3, #48	; 0x30
 8025c80:	65bb      	str	r3, [r7, #88]	; 0x58
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8025c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025c84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025c88:	f003 0307 	and.w	r3, r3, #7
 8025c8c:	b2db      	uxtb	r3, r3
 8025c8e:	2b03      	cmp	r3, #3
 8025c90:	d008      	beq.n	8025ca4 <draw_main+0x1bc>
 8025c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025c96:	4618      	mov	r0, r3
 8025c98:	f7ff f9a9 	bl	8024fee <lv_area_get_height>
 8025c9c:	4603      	mov	r3, r0
 8025c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025ca2:	da01      	bge.n	8025ca8 <draw_main+0x1c0>
        hint = NULL;
 8025ca4:	2300      	movs	r3, #0
 8025ca6:	65bb      	str	r3, [r7, #88]	; 0x58
    /*Just for compatibility*/
    lv_draw_label_hint_t * hint = NULL;
#endif

    lv_area_t txt_clip;
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8025ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025caa:	689a      	ldr	r2, [r3, #8]
 8025cac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8025cb0:	f107 0310 	add.w	r3, r7, #16
 8025cb4:	4618      	mov	r0, r3
 8025cb6:	f7fa fe7d 	bl	80209b4 <_lv_area_intersect>
 8025cba:	4603      	mov	r3, r0
 8025cbc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if(!is_common) return;
 8025cc0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8025cc4:	f083 0301 	eor.w	r3, r3, #1
 8025cc8:	b2db      	uxtb	r3, r3
 8025cca:	2b00      	cmp	r3, #0
 8025ccc:	f040 80d6 	bne.w	8025e7c <draw_main+0x394>

    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8025cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025cd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025cd6:	f003 0307 	and.w	r3, r3, #7
 8025cda:	b2db      	uxtb	r3, r3
 8025cdc:	2b00      	cmp	r3, #0
 8025cde:	d114      	bne.n	8025d0a <draw_main+0x222>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8025ce0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8025ce2:	f7e4 fd21 	bl	800a728 <lv_obj_get_scroll_top>
 8025ce6:	4603      	mov	r3, r0
 8025ce8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        lv_area_move(&txt_coords, 0, -s);
 8025cec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8025cf0:	425b      	negs	r3, r3
 8025cf2:	b29b      	uxth	r3, r3
 8025cf4:	b21a      	sxth	r2, r3
 8025cf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025cfa:	2100      	movs	r1, #0
 8025cfc:	4618      	mov	r0, r3
 8025cfe:	f7fa fe23 	bl	8020948 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8025d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025d04:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8025d08:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025d10:	f003 0307 	and.w	r3, r3, #7
 8025d14:	b2db      	uxtb	r3, r3
 8025d16:	2b02      	cmp	r3, #2
 8025d18:	d007      	beq.n	8025d2a <draw_main+0x242>
 8025d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025d20:	f003 0307 	and.w	r3, r3, #7
 8025d24:	b2db      	uxtb	r3, r3
 8025d26:	2b03      	cmp	r3, #3
 8025d28:	d116      	bne.n	8025d58 <draw_main+0x270>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8025d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025d2c:	689b      	ldr	r3, [r3, #8]
 8025d2e:	647b      	str	r3, [r7, #68]	; 0x44
        draw_ctx->clip_area = &txt_clip;
 8025d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025d32:	f107 0210 	add.w	r2, r7, #16
 8025d36:	609a      	str	r2, [r3, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025d3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025d40:	f107 0118 	add.w	r1, r7, #24
 8025d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025d46:	9300      	str	r3, [sp, #0]
 8025d48:	4603      	mov	r3, r0
 8025d4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025d4c:	f7ea fef2 	bl	8010b34 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8025d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025d54:	609a      	str	r2, [r3, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025d56:	e00b      	b.n	8025d70 <draw_main+0x288>
    }
    else {
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025d5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025d60:	f107 0118 	add.w	r1, r7, #24
 8025d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025d66:	9300      	str	r3, [sp, #0]
 8025d68:	4603      	mov	r3, r0
 8025d6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025d6c:	f7ea fee2 	bl	8010b34 <lv_draw_label>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8025d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025d72:	689b      	ldr	r3, [r3, #8]
 8025d74:	643b      	str	r3, [r7, #64]	; 0x40
    draw_ctx->clip_area = &txt_clip;
 8025d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025d78:	f107 0210 	add.w	r2, r7, #16
 8025d7c:	609a      	str	r2, [r3, #8]

    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8025d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025d84:	f003 0307 	and.w	r3, r3, #7
 8025d88:	b2db      	uxtb	r3, r3
 8025d8a:	2b03      	cmp	r3, #3
 8025d8c:	d172      	bne.n	8025e74 <draw_main+0x38c>
        lv_point_t size;
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8025d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025d92:	69bc      	ldr	r4, [r7, #24]
 8025d94:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 8025d98:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8025d9c:	f107 0008 	add.w	r0, r7, #8
 8025da0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8025da4:	9202      	str	r2, [sp, #8]
 8025da6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8025daa:	9201      	str	r2, [sp, #4]
 8025dac:	9300      	str	r3, [sp, #0]
 8025dae:	462b      	mov	r3, r5
 8025db0:	4622      	mov	r2, r4
 8025db2:	f7fe fb91 	bl	80244d8 <lv_txt_get_size>
                        LV_COORD_MAX, flag);

        /*Draw the text again on label to the original to make a circular effect */
        if(size.x > lv_area_get_width(&txt_coords)) {
 8025db6:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 8025dba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025dbe:	4618      	mov	r0, r3
 8025dc0:	f7ff f8fe 	bl	8024fc0 <lv_area_get_width>
 8025dc4:	4603      	mov	r3, r0
 8025dc6:	429c      	cmp	r4, r3
 8025dc8:	dd27      	ble.n	8025e1a <draw_main+0x332>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8025dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025dcc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8025dd0:	b29a      	uxth	r2, r3
 8025dd2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8025dd6:	b29b      	uxth	r3, r3
 8025dd8:	4413      	add	r3, r2
 8025dda:	b29c      	uxth	r4, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8025ddc:	69bb      	ldr	r3, [r7, #24]
 8025dde:	2220      	movs	r2, #32
 8025de0:	2120      	movs	r1, #32
 8025de2:	4618      	mov	r0, r3
 8025de4:	f7f9 fc1a 	bl	801f61c <lv_font_get_glyph_width>
 8025de8:	4603      	mov	r3, r0
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8025dea:	461a      	mov	r2, r3
 8025dec:	0052      	lsls	r2, r2, #1
 8025dee:	4413      	add	r3, r2
 8025df0:	b29b      	uxth	r3, r3
 8025df2:	4423      	add	r3, r4
 8025df4:	b29b      	uxth	r3, r3
 8025df6:	b21b      	sxth	r3, r3
 8025df8:	85bb      	strh	r3, [r7, #44]	; 0x2c
            label_draw_dsc.ofs_y = label->offset.y;
 8025dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025dfc:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8025e00:	85fb      	strh	r3, [r7, #46]	; 0x2e

            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025e04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025e06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025e0a:	f107 0118 	add.w	r1, r7, #24
 8025e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025e10:	9300      	str	r3, [sp, #0]
 8025e12:	4603      	mov	r3, r0
 8025e14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025e16:	f7ea fe8d 	bl	8010b34 <lv_draw_label>
        }

        /*Draw the text again below the original to make a circular effect */
        if(size.y > lv_area_get_height(&txt_coords)) {
 8025e1a:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8025e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025e22:	4618      	mov	r0, r3
 8025e24:	f7ff f8e3 	bl	8024fee <lv_area_get_height>
 8025e28:	4603      	mov	r3, r0
 8025e2a:	429c      	cmp	r4, r3
 8025e2c:	dd22      	ble.n	8025e74 <draw_main+0x38c>
            label_draw_dsc.ofs_x = label->offset.x;
 8025e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025e30:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8025e34:	85bb      	strh	r3, [r7, #44]	; 0x2c
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8025e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025e38:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8025e3c:	b29a      	uxth	r2, r3
 8025e3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8025e42:	b29b      	uxth	r3, r3
 8025e44:	4413      	add	r3, r2
 8025e46:	b29c      	uxth	r4, r3
 8025e48:	69bb      	ldr	r3, [r7, #24]
 8025e4a:	4618      	mov	r0, r3
 8025e4c:	f7ff f8e6 	bl	802501c <lv_font_get_line_height>
 8025e50:	4603      	mov	r3, r0
 8025e52:	b29b      	uxth	r3, r3
 8025e54:	4423      	add	r3, r4
 8025e56:	b29b      	uxth	r3, r3
 8025e58:	b21b      	sxth	r3, r3
 8025e5a:	85fb      	strh	r3, [r7, #46]	; 0x2e

            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8025e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025e5e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8025e60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8025e64:	f107 0118 	add.w	r1, r7, #24
 8025e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025e6a:	9300      	str	r3, [sp, #0]
 8025e6c:	4603      	mov	r3, r0
 8025e6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8025e70:	f7ea fe60 	bl	8010b34 <lv_draw_label>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 8025e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8025e78:	609a      	str	r2, [r3, #8]
 8025e7a:	e000      	b.n	8025e7e <draw_main+0x396>
    if(!is_common) return;
 8025e7c:	bf00      	nop
}
 8025e7e:	3760      	adds	r7, #96	; 0x60
 8025e80:	46bd      	mov	sp, r7
 8025e82:	bdb0      	pop	{r4, r5, r7, pc}

08025e84 <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * obj)
{
 8025e84:	b590      	push	{r4, r7, lr}
 8025e86:	b0b7      	sub	sp, #220	; 0xdc
 8025e88:	af04      	add	r7, sp, #16
 8025e8a:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 8025e8c:	687b      	ldr	r3, [r7, #4]
 8025e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(label->text == NULL) return;
 8025e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025e98:	2b00      	cmp	r3, #0
 8025e9a:	f000 8442 	beq.w	8026722 <lv_label_refr_text+0x89e>
#if LV_LABEL_LONG_TXT_HINT
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8025e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025ea6:	631a      	str	r2, [r3, #48]	; 0x30
#endif

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8025ea8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025eac:	4619      	mov	r1, r3
 8025eae:	6878      	ldr	r0, [r7, #4]
 8025eb0:	f7e2 ffb0 	bl	8008e14 <lv_obj_get_content_coords>
    lv_coord_t max_w         = lv_area_get_width(&txt_coords);
 8025eb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025eb8:	4618      	mov	r0, r3
 8025eba:	f7ff f881 	bl	8024fc0 <lv_area_get_width>
 8025ebe:	4603      	mov	r3, r0
 8025ec0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8025ec4:	2100      	movs	r1, #0
 8025ec6:	6878      	ldr	r0, [r7, #4]
 8025ec8:	f7ff f99f 	bl	802520a <lv_obj_get_style_text_font>
 8025ecc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8025ed0:	2100      	movs	r1, #0
 8025ed2:	6878      	ldr	r0, [r7, #4]
 8025ed4:	f7ff f9bc 	bl	8025250 <lv_obj_get_style_text_line_space>
 8025ed8:	4603      	mov	r3, r0
 8025eda:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8025ede:	2100      	movs	r1, #0
 8025ee0:	6878      	ldr	r0, [r7, #4]
 8025ee2:	f7ff f9a3 	bl	802522c <lv_obj_get_style_text_letter_space>
 8025ee6:	4603      	mov	r3, r0
 8025ee8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8025eec:	2300      	movs	r3, #0
 8025eee:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8025ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025ef6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025efa:	f003 0310 	and.w	r3, r3, #16
 8025efe:	b2db      	uxtb	r3, r3
 8025f00:	2b00      	cmp	r3, #0
 8025f02:	d005      	beq.n	8025f10 <lv_label_refr_text+0x8c>
 8025f04:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025f08:	f043 0301 	orr.w	r3, r3, #1
 8025f0c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8025f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025f14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025f18:	f003 0320 	and.w	r3, r3, #32
 8025f1c:	b2db      	uxtb	r3, r3
 8025f1e:	2b00      	cmp	r3, #0
 8025f20:	d005      	beq.n	8025f2e <lv_label_refr_text+0xaa>
 8025f22:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025f26:	f043 0302 	orr.w	r3, r3, #2
 8025f2a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8025f2e:	2100      	movs	r1, #0
 8025f30:	6878      	ldr	r0, [r7, #4]
 8025f32:	f7ff f90c 	bl	802514e <lv_obj_get_style_width>
 8025f36:	4603      	mov	r3, r0
 8025f38:	461a      	mov	r2, r3
 8025f3a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8025f3e:	429a      	cmp	r2, r3
 8025f40:	d10d      	bne.n	8025f5e <lv_label_refr_text+0xda>
 8025f42:	687b      	ldr	r3, [r7, #4]
 8025f44:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8025f48:	f003 0304 	and.w	r3, r3, #4
 8025f4c:	b2db      	uxtb	r3, r3
 8025f4e:	2b00      	cmp	r3, #0
 8025f50:	d105      	bne.n	8025f5e <lv_label_refr_text+0xda>
 8025f52:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025f56:	f043 0304 	orr.w	r3, r3, #4
 8025f5a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8025f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025f62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025f64:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8025f68:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8025f6c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8025f70:	9302      	str	r3, [sp, #8]
 8025f72:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8025f76:	9301      	str	r3, [sp, #4]
 8025f78:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8025f7c:	9300      	str	r3, [sp, #0]
 8025f7e:	4613      	mov	r3, r2
 8025f80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8025f84:	f7fe faa8 	bl	80244d8 <lv_txt_get_size>

    lv_obj_refresh_self_size(obj);
 8025f88:	6878      	ldr	r0, [r7, #4]
 8025f8a:	f7e2 ffce 	bl	8008f2a <lv_obj_refresh_self_size>

    /*In scroll mode start an offset animation*/
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8025f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025f92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8025f96:	f003 0307 	and.w	r3, r3, #7
 8025f9a:	b2db      	uxtb	r3, r3
 8025f9c:	2b02      	cmp	r3, #2
 8025f9e:	f040 815d 	bne.w	802625c <lv_label_refr_text+0x3d8>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8025fa2:	2100      	movs	r1, #0
 8025fa4:	6878      	ldr	r0, [r7, #4]
 8025fa6:	f7ff f976 	bl	8025296 <lv_obj_get_style_anim_speed>
 8025faa:	4603      	mov	r3, r0
 8025fac:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8025fb0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8025fb4:	2b00      	cmp	r3, #0
 8025fb6:	d10f      	bne.n	8025fd8 <lv_label_refr_text+0x154>
 8025fb8:	6878      	ldr	r0, [r7, #4]
 8025fba:	f7e8 f8b3 	bl	800e124 <lv_obj_get_disp>
 8025fbe:	4603      	mov	r3, r0
 8025fc0:	4618      	mov	r0, r3
 8025fc2:	f7fa f81d 	bl	8020000 <lv_disp_get_dpi>
 8025fc6:	4603      	mov	r3, r0
 8025fc8:	4aa1      	ldr	r2, [pc, #644]	; (8026250 <lv_label_refr_text+0x3cc>)
 8025fca:	fb82 1203 	smull	r1, r2, r2, r3
 8025fce:	17db      	asrs	r3, r3, #31
 8025fd0:	1ad3      	subs	r3, r2, r3
 8025fd2:	b21b      	sxth	r3, r3
 8025fd4:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        lv_anim_t a;
        lv_anim_init(&a);
 8025fd8:	f107 0308 	add.w	r3, r7, #8
 8025fdc:	4618      	mov	r0, r3
 8025fde:	f7fa f8cd 	bl	802017c <lv_anim_init>
        lv_anim_set_var(&a, obj);
 8025fe2:	f107 0308 	add.w	r3, r7, #8
 8025fe6:	6879      	ldr	r1, [r7, #4]
 8025fe8:	4618      	mov	r0, r3
 8025fea:	f7ff f824 	bl	8025036 <lv_anim_set_var>
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 8025fee:	f107 0308 	add.w	r3, r7, #8
 8025ff2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8025ff6:	4618      	mov	r0, r3
 8025ff8:	f7ff f878 	bl	80250ec <lv_anim_set_repeat_count>
        lv_anim_set_playback_delay(&a, LV_LABEL_SCROLL_DELAY);
 8025ffc:	f107 0308 	add.w	r3, r7, #8
 8026000:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8026004:	4618      	mov	r0, r3
 8026006:	f7ff f863 	bl	80250d0 <lv_anim_set_playback_delay>
        lv_anim_set_repeat_delay(&a, a.playback_delay);
 802600a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802600c:	f107 0308 	add.w	r3, r7, #8
 8026010:	4611      	mov	r1, r2
 8026012:	4618      	mov	r0, r3
 8026014:	f7ff f87a 	bl	802510c <lv_anim_set_repeat_delay>

        bool hor_anim = false;
 8026018:	2300      	movs	r3, #0
 802601a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if(size.x > lv_area_get_width(&txt_coords)) {
 802601e:	f9b7 4054 	ldrsh.w	r4, [r7, #84]	; 0x54
 8026022:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8026026:	4618      	mov	r0, r3
 8026028:	f7fe ffca 	bl	8024fc0 <lv_area_get_width>
 802602c:	4603      	mov	r3, r0
 802602e:	429c      	cmp	r4, r3
 8026030:	dd76      	ble.n	8026120 <lv_label_refr_text+0x29c>
                end = lv_area_get_width(&txt_coords) - size.x;
            }

            lv_anim_set_values(&a, start, end);
#else
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8026032:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8026036:	4618      	mov	r0, r3
 8026038:	f7fe ffc2 	bl	8024fc0 <lv_area_get_width>
 802603c:	4603      	mov	r3, r0
 802603e:	461a      	mov	r2, r3
 8026040:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8026044:	1ad2      	subs	r2, r2, r3
 8026046:	f107 0308 	add.w	r3, r7, #8
 802604a:	2100      	movs	r1, #0
 802604c:	4618      	mov	r0, r3
 802604e:	f7ff f81c 	bl	802508a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8026052:	f107 0308 	add.w	r3, r7, #8
 8026056:	497f      	ldr	r1, [pc, #508]	; (8026254 <lv_label_refr_text+0x3d0>)
 8026058:	4618      	mov	r0, r3
 802605a:	f7fe fffa 	bl	8025052 <lv_anim_set_exec_cb>
#endif
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 802605e:	f107 0308 	add.w	r3, r7, #8
 8026062:	497c      	ldr	r1, [pc, #496]	; (8026254 <lv_label_refr_text+0x3d0>)
 8026064:	4618      	mov	r0, r3
 8026066:	f7fe fff4 	bl	8025052 <lv_anim_set_exec_cb>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 802606a:	497a      	ldr	r1, [pc, #488]	; (8026254 <lv_label_refr_text+0x3d0>)
 802606c:	6878      	ldr	r0, [r7, #4]
 802606e:	f7fa f963 	bl	8020338 <lv_anim_get>
 8026072:	66f8      	str	r0, [r7, #108]	; 0x6c
            int32_t act_time = 0;
 8026074:	2300      	movs	r3, #0
 8026076:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            bool playback_now = false;
 802607a:	2300      	movs	r3, #0
 802607c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
            if(anim_cur) {
 8026080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026082:	2b00      	cmp	r3, #0
 8026084:	d00f      	beq.n	80260a6 <lv_label_refr_text+0x222>
                act_time = anim_cur->act_time;
 8026086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802608a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                playback_now = anim_cur->playback_now;
 802608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026090:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8026094:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8026098:	b2db      	uxtb	r3, r3
 802609a:	2b00      	cmp	r3, #0
 802609c:	bf14      	ite	ne
 802609e:	2301      	movne	r3, #1
 80260a0:	2300      	moveq	r3, #0
 80260a2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
            }
            if(act_time < a.time) {
 80260a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80260a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80260ac:	429a      	cmp	r2, r3
 80260ae:	da18      	bge.n	80260e2 <lv_label_refr_text+0x25e>
                a.act_time = act_time;      /*To keep the old position*/
 80260b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80260b4:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 80260b6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80260ba:	f36f 0300 	bfc	r3, #0, #1
 80260be:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(playback_now) {
 80260c2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80260c6:	2b00      	cmp	r3, #0
 80260c8:	d00b      	beq.n	80260e2 <lv_label_refr_text+0x25e>
                    a.playback_now = 1;
 80260ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80260ce:	f043 0302 	orr.w	r3, r3, #2
 80260d2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    /*Swap the start and end values*/
                    int32_t tmp;
                    tmp      = a.start_value;
 80260d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80260d8:	66bb      	str	r3, [r7, #104]	; 0x68
                    a.start_value = a.end_value;
 80260da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80260dc:	62bb      	str	r3, [r7, #40]	; 0x28
                    a.end_value   = tmp;
 80260de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80260e0:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 80260e2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80260e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80260e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80260ea:	4618      	mov	r0, r3
 80260ec:	f7fa f94c 	bl	8020388 <lv_anim_speed_to_time>
 80260f0:	4602      	mov	r2, r0
 80260f2:	f107 0308 	add.w	r3, r7, #8
 80260f6:	4611      	mov	r1, r2
 80260f8:	4618      	mov	r0, r3
 80260fa:	f7fe ffb8 	bl	802506e <lv_anim_set_time>
            lv_anim_set_playback_time(&a, a.time);
 80260fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026100:	461a      	mov	r2, r3
 8026102:	f107 0308 	add.w	r3, r7, #8
 8026106:	4611      	mov	r1, r2
 8026108:	4618      	mov	r0, r3
 802610a:	f7fe ffd3 	bl	80250b4 <lv_anim_set_playback_time>
            lv_anim_start(&a);
 802610e:	f107 0308 	add.w	r3, r7, #8
 8026112:	4618      	mov	r0, r3
 8026114:	f7fa f858 	bl	80201c8 <lv_anim_start>
            hor_anim = true;
 8026118:	2301      	movs	r3, #1
 802611a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 802611e:	e008      	b.n	8026132 <lv_label_refr_text+0x2ae>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_x_anim);
 8026120:	494c      	ldr	r1, [pc, #304]	; (8026254 <lv_label_refr_text+0x3d0>)
 8026122:	6878      	ldr	r0, [r7, #4]
 8026124:	f7fa f8c8 	bl	80202b8 <lv_anim_del>
            label->offset.x = 0;
 8026128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802612c:	2200      	movs	r2, #0
 802612e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        }

        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8026132:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 8026136:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802613a:	4618      	mov	r0, r3
 802613c:	f7fe ff57 	bl	8024fee <lv_area_get_height>
 8026140:	4603      	mov	r3, r0
 8026142:	429c      	cmp	r4, r3
 8026144:	dd7a      	ble.n	802623c <lv_label_refr_text+0x3b8>
 8026146:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 802614a:	f083 0301 	eor.w	r3, r3, #1
 802614e:	b2db      	uxtb	r3, r3
 8026150:	2b00      	cmp	r3, #0
 8026152:	d073      	beq.n	802623c <lv_label_refr_text+0x3b8>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8026154:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8026158:	4618      	mov	r0, r3
 802615a:	f7fe ff48 	bl	8024fee <lv_area_get_height>
 802615e:	4603      	mov	r3, r0
 8026160:	461a      	mov	r2, r3
 8026162:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8026166:	1ad4      	subs	r4, r2, r3
 8026168:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802616c:	f7fe ff56 	bl	802501c <lv_font_get_line_height>
 8026170:	4603      	mov	r3, r0
 8026172:	1ae2      	subs	r2, r4, r3
 8026174:	f107 0308 	add.w	r3, r7, #8
 8026178:	2100      	movs	r1, #0
 802617a:	4618      	mov	r0, r3
 802617c:	f7fe ff85 	bl	802508a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_y_anim);
 8026180:	f107 0308 	add.w	r3, r7, #8
 8026184:	4934      	ldr	r1, [pc, #208]	; (8026258 <lv_label_refr_text+0x3d4>)
 8026186:	4618      	mov	r0, r3
 8026188:	f7fe ff63 	bl	8025052 <lv_anim_set_exec_cb>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 802618c:	4932      	ldr	r1, [pc, #200]	; (8026258 <lv_label_refr_text+0x3d4>)
 802618e:	6878      	ldr	r0, [r7, #4]
 8026190:	f7fa f8d2 	bl	8020338 <lv_anim_get>
 8026194:	6678      	str	r0, [r7, #100]	; 0x64
            int32_t act_time = 0;
 8026196:	2300      	movs	r3, #0
 8026198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            bool playback_now = false;
 802619c:	2300      	movs	r3, #0
 802619e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
            if(anim_cur) {
 80261a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80261a4:	2b00      	cmp	r3, #0
 80261a6:	d00f      	beq.n	80261c8 <lv_label_refr_text+0x344>
                act_time = anim_cur->act_time;
 80261a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80261aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                playback_now = anim_cur->playback_now;
 80261b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80261b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80261b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80261ba:	b2db      	uxtb	r3, r3
 80261bc:	2b00      	cmp	r3, #0
 80261be:	bf14      	ite	ne
 80261c0:	2301      	movne	r3, #1
 80261c2:	2300      	moveq	r3, #0
 80261c4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
            }
            if(act_time < a.time) {
 80261c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80261ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80261ce:	429a      	cmp	r2, r3
 80261d0:	da18      	bge.n	8026204 <lv_label_refr_text+0x380>
                a.act_time = act_time;      /*To keep the old position*/
 80261d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80261d6:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 80261d8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80261dc:	f36f 0300 	bfc	r3, #0, #1
 80261e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(playback_now) {
 80261e4:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	d00b      	beq.n	8026204 <lv_label_refr_text+0x380>
                    a.playback_now = 1;
 80261ec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80261f0:	f043 0302 	orr.w	r3, r3, #2
 80261f4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    /*Swap the start and end values*/
                    int32_t tmp;
                    tmp      = a.start_value;
 80261f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261fa:	663b      	str	r3, [r7, #96]	; 0x60
                    a.start_value = a.end_value;
 80261fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261fe:	62bb      	str	r3, [r7, #40]	; 0x28
                    a.end_value   = tmp;
 8026200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026202:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8026204:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8026208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802620a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802620c:	4618      	mov	r0, r3
 802620e:	f7fa f8bb 	bl	8020388 <lv_anim_speed_to_time>
 8026212:	4602      	mov	r2, r0
 8026214:	f107 0308 	add.w	r3, r7, #8
 8026218:	4611      	mov	r1, r2
 802621a:	4618      	mov	r0, r3
 802621c:	f7fe ff27 	bl	802506e <lv_anim_set_time>
            lv_anim_set_playback_time(&a, a.time);
 8026220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026222:	461a      	mov	r2, r3
 8026224:	f107 0308 	add.w	r3, r7, #8
 8026228:	4611      	mov	r1, r2
 802622a:	4618      	mov	r0, r3
 802622c:	f7fe ff42 	bl	80250b4 <lv_anim_set_playback_time>
            lv_anim_start(&a);
 8026230:	f107 0308 	add.w	r3, r7, #8
 8026234:	4618      	mov	r0, r3
 8026236:	f7f9 ffc7 	bl	80201c8 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 802623a:	e26e      	b.n	802671a <lv_label_refr_text+0x896>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_y_anim);
 802623c:	4906      	ldr	r1, [pc, #24]	; (8026258 <lv_label_refr_text+0x3d4>)
 802623e:	6878      	ldr	r0, [r7, #4]
 8026240:	f7fa f83a 	bl	80202b8 <lv_anim_del>
            label->offset.y = 0;
 8026244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026248:	2200      	movs	r2, #0
 802624a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802624e:	e264      	b.n	802671a <lv_label_refr_text+0x896>
 8026250:	55555556 	.word	0x55555556
 8026254:	080268f1 	.word	0x080268f1
 8026258:	08026917 	.word	0x08026917
        }
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 802625c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026260:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8026264:	f003 0307 	and.w	r3, r3, #7
 8026268:	b2db      	uxtb	r3, r3
 802626a:	2b03      	cmp	r3, #3
 802626c:	f040 8109 	bne.w	8026482 <lv_label_refr_text+0x5fe>
        const lv_anim_t * anim_template = lv_obj_get_style_anim(obj, LV_PART_MAIN);
 8026270:	2100      	movs	r1, #0
 8026272:	6878      	ldr	r0, [r7, #4]
 8026274:	f7fe fffe 	bl	8025274 <lv_obj_get_style_anim>
 8026278:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 802627c:	2100      	movs	r1, #0
 802627e:	6878      	ldr	r0, [r7, #4]
 8026280:	f7ff f809 	bl	8025296 <lv_obj_get_style_anim_speed>
 8026284:	4603      	mov	r3, r0
 8026286:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 802628a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 802628e:	2b00      	cmp	r3, #0
 8026290:	d10f      	bne.n	80262b2 <lv_label_refr_text+0x42e>
 8026292:	6878      	ldr	r0, [r7, #4]
 8026294:	f7e7 ff46 	bl	800e124 <lv_obj_get_disp>
 8026298:	4603      	mov	r3, r0
 802629a:	4618      	mov	r0, r3
 802629c:	f7f9 feb0 	bl	8020000 <lv_disp_get_dpi>
 80262a0:	4603      	mov	r3, r0
 80262a2:	4ac2      	ldr	r2, [pc, #776]	; (80265ac <lv_label_refr_text+0x728>)
 80262a4:	fb82 1203 	smull	r1, r2, r2, r3
 80262a8:	17db      	asrs	r3, r3, #31
 80262aa:	1ad3      	subs	r3, r2, r3
 80262ac:	b21b      	sxth	r3, r3
 80262ae:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        lv_anim_t a;
        lv_anim_init(&a);
 80262b2:	f107 0308 	add.w	r3, r7, #8
 80262b6:	4618      	mov	r0, r3
 80262b8:	f7f9 ff60 	bl	802017c <lv_anim_init>
        lv_anim_set_var(&a, obj);
 80262bc:	f107 0308 	add.w	r3, r7, #8
 80262c0:	6879      	ldr	r1, [r7, #4]
 80262c2:	4618      	mov	r0, r3
 80262c4:	f7fe feb7 	bl	8025036 <lv_anim_set_var>
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 80262c8:	f107 0308 	add.w	r3, r7, #8
 80262cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80262d0:	4618      	mov	r0, r3
 80262d2:	f7fe ff0b 	bl	80250ec <lv_anim_set_repeat_count>

        bool hor_anim = false;
 80262d6:	2300      	movs	r3, #0
 80262d8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        if(size.x > lv_area_get_width(&txt_coords)) {
 80262dc:	f9b7 4054 	ldrsh.w	r4, [r7, #84]	; 0x54
 80262e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80262e4:	4618      	mov	r0, r3
 80262e6:	f7fe fe6b 	bl	8024fc0 <lv_area_get_width>
 80262ea:	4603      	mov	r3, r0
 80262ec:	429c      	cmp	r4, r3
 80262ee:	dd55      	ble.n	802639c <lv_label_refr_text+0x518>
                end = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
            }

            lv_anim_set_values(&a, start, end);
#else
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 80262f0:	2220      	movs	r2, #32
 80262f2:	2120      	movs	r1, #32
 80262f4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80262f8:	f7f9 f990 	bl	801f61c <lv_font_get_glyph_width>
 80262fc:	4603      	mov	r3, r0
 80262fe:	461a      	mov	r2, r3
 8026300:	009b      	lsls	r3, r3, #2
 8026302:	1ad3      	subs	r3, r2, r3
 8026304:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8026308:	1a9a      	subs	r2, r3, r2
 802630a:	f107 0308 	add.w	r3, r7, #8
 802630e:	2100      	movs	r1, #0
 8026310:	4618      	mov	r0, r3
 8026312:	f7fe feba 	bl	802508a <lv_anim_set_values>
#endif
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8026316:	f107 0308 	add.w	r3, r7, #8
 802631a:	49a5      	ldr	r1, [pc, #660]	; (80265b0 <lv_label_refr_text+0x72c>)
 802631c:	4618      	mov	r0, r3
 802631e:	f7fe fe98 	bl	8025052 <lv_anim_set_exec_cb>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8026322:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8026326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8026328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802632a:	4618      	mov	r0, r3
 802632c:	f7fa f82c 	bl	8020388 <lv_anim_speed_to_time>
 8026330:	4602      	mov	r2, r0
 8026332:	f107 0308 	add.w	r3, r7, #8
 8026336:	4611      	mov	r1, r2
 8026338:	4618      	mov	r0, r3
 802633a:	f7fe fe98 	bl	802506e <lv_anim_set_time>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 802633e:	499c      	ldr	r1, [pc, #624]	; (80265b0 <lv_label_refr_text+0x72c>)
 8026340:	6878      	ldr	r0, [r7, #4]
 8026342:	f7f9 fff9 	bl	8020338 <lv_anim_get>
 8026346:	67f8      	str	r0, [r7, #124]	; 0x7c
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8026348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802634a:	2b00      	cmp	r3, #0
 802634c:	d002      	beq.n	8026354 <lv_label_refr_text+0x4d0>
 802634e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8026350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026352:	e000      	b.n	8026356 <lv_label_refr_text+0x4d2>
 8026354:	2300      	movs	r3, #0
 8026356:	67bb      	str	r3, [r7, #120]	; 0x78

            /*If a template animation exists, consider it's start delay and repeat delay*/
            if(anim_template) {
 8026358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802635c:	2b00      	cmp	r3, #0
 802635e:	d008      	beq.n	8026372 <lv_label_refr_text+0x4ee>
                a.act_time = anim_template->act_time;
 8026360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026366:	63bb      	str	r3, [r7, #56]	; 0x38
                a.repeat_delay = anim_template->repeat_delay;
 8026368:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802636e:	647b      	str	r3, [r7, #68]	; 0x44
 8026370:	e00b      	b.n	802638a <lv_label_refr_text+0x506>
            }
            else if(act_time < a.time) {
 8026372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8026376:	429a      	cmp	r2, r3
 8026378:	da07      	bge.n	802638a <lv_label_refr_text+0x506>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 802637a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802637c:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 802637e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8026382:	f36f 0300 	bfc	r3, #0, #1
 8026386:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            lv_anim_start(&a);
 802638a:	f107 0308 	add.w	r3, r7, #8
 802638e:	4618      	mov	r0, r3
 8026390:	f7f9 ff1a 	bl	80201c8 <lv_anim_start>
            hor_anim = true;
 8026394:	2301      	movs	r3, #1
 8026396:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 802639a:	e008      	b.n	80263ae <lv_label_refr_text+0x52a>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_x_anim);
 802639c:	4984      	ldr	r1, [pc, #528]	; (80265b0 <lv_label_refr_text+0x72c>)
 802639e:	6878      	ldr	r0, [r7, #4]
 80263a0:	f7f9 ff8a 	bl	80202b8 <lv_anim_del>
            label->offset.x = 0;
 80263a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80263a8:	2200      	movs	r2, #0
 80263aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        }

        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 80263ae:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 80263b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80263b6:	4618      	mov	r0, r3
 80263b8:	f7fe fe19 	bl	8024fee <lv_area_get_height>
 80263bc:	4603      	mov	r3, r0
 80263be:	429c      	cmp	r4, r3
 80263c0:	dd55      	ble.n	802646e <lv_label_refr_text+0x5ea>
 80263c2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80263c6:	f083 0301 	eor.w	r3, r3, #1
 80263ca:	b2db      	uxtb	r3, r3
 80263cc:	2b00      	cmp	r3, #0
 80263ce:	d04e      	beq.n	802646e <lv_label_refr_text+0x5ea>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 80263d0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80263d4:	425c      	negs	r4, r3
 80263d6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80263da:	f7fe fe1f 	bl	802501c <lv_font_get_line_height>
 80263de:	4603      	mov	r3, r0
 80263e0:	1ae2      	subs	r2, r4, r3
 80263e2:	f107 0308 	add.w	r3, r7, #8
 80263e6:	2100      	movs	r1, #0
 80263e8:	4618      	mov	r0, r3
 80263ea:	f7fe fe4e 	bl	802508a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_y_anim);
 80263ee:	f107 0308 	add.w	r3, r7, #8
 80263f2:	4970      	ldr	r1, [pc, #448]	; (80265b4 <lv_label_refr_text+0x730>)
 80263f4:	4618      	mov	r0, r3
 80263f6:	f7fe fe2c 	bl	8025052 <lv_anim_set_exec_cb>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 80263fa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80263fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8026400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026402:	4618      	mov	r0, r3
 8026404:	f7f9 ffc0 	bl	8020388 <lv_anim_speed_to_time>
 8026408:	4602      	mov	r2, r0
 802640a:	f107 0308 	add.w	r3, r7, #8
 802640e:	4611      	mov	r1, r2
 8026410:	4618      	mov	r0, r3
 8026412:	f7fe fe2c 	bl	802506e <lv_anim_set_time>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8026416:	4967      	ldr	r1, [pc, #412]	; (80265b4 <lv_label_refr_text+0x730>)
 8026418:	6878      	ldr	r0, [r7, #4]
 802641a:	f7f9 ff8d 	bl	8020338 <lv_anim_get>
 802641e:	6778      	str	r0, [r7, #116]	; 0x74
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8026420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026422:	2b00      	cmp	r3, #0
 8026424:	d002      	beq.n	802642c <lv_label_refr_text+0x5a8>
 8026426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802642a:	e000      	b.n	802642e <lv_label_refr_text+0x5aa>
 802642c:	2300      	movs	r3, #0
 802642e:	673b      	str	r3, [r7, #112]	; 0x70

            /*If a template animation exists, consider it's start delay and repeat delay*/
            if(anim_template) {
 8026430:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026434:	2b00      	cmp	r3, #0
 8026436:	d008      	beq.n	802644a <lv_label_refr_text+0x5c6>
                a.act_time = anim_template->act_time;
 8026438:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802643e:	63bb      	str	r3, [r7, #56]	; 0x38
                a.repeat_delay = anim_template->repeat_delay;
 8026440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026446:	647b      	str	r3, [r7, #68]	; 0x44
 8026448:	e00b      	b.n	8026462 <lv_label_refr_text+0x5de>
            }
            else if(act_time < a.time) {
 802644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802644c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802644e:	429a      	cmp	r2, r3
 8026450:	da07      	bge.n	8026462 <lv_label_refr_text+0x5de>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8026452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026454:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 8026456:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 802645a:	f36f 0300 	bfc	r3, #0, #1
 802645e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            lv_anim_start(&a);
 8026462:	f107 0308 	add.w	r3, r7, #8
 8026466:	4618      	mov	r0, r3
 8026468:	f7f9 feae 	bl	80201c8 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 802646c:	e155      	b.n	802671a <lv_label_refr_text+0x896>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_y_anim);
 802646e:	4951      	ldr	r1, [pc, #324]	; (80265b4 <lv_label_refr_text+0x730>)
 8026470:	6878      	ldr	r0, [r7, #4]
 8026472:	f7f9 ff21 	bl	80202b8 <lv_anim_del>
            label->offset.y = 0;
 8026476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802647a:	2200      	movs	r2, #0
 802647c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8026480:	e14b      	b.n	802671a <lv_label_refr_text+0x896>
        }
    }
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8026482:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026486:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802648a:	f003 0307 	and.w	r3, r3, #7
 802648e:	b2db      	uxtb	r3, r3
 8026490:	2b01      	cmp	r3, #1
 8026492:	f040 8142 	bne.w	802671a <lv_label_refr_text+0x896>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8026496:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 802649a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802649e:	4618      	mov	r0, r3
 80264a0:	f7fe fda5 	bl	8024fee <lv_area_get_height>
 80264a4:	4603      	mov	r3, r0
 80264a6:	429c      	cmp	r4, r3
 80264a8:	dc05      	bgt.n	80264b6 <lv_label_refr_text+0x632>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80264aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80264ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80264b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80264b4:	e131      	b.n	802671a <lv_label_refr_text+0x896>
        }
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 80264b6:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 80264ba:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80264be:	f7fe fdad 	bl	802501c <lv_font_get_line_height>
 80264c2:	4603      	mov	r3, r0
 80264c4:	429c      	cmp	r4, r3
 80264c6:	dc05      	bgt.n	80264d4 <lv_label_refr_text+0x650>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80264c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80264cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80264d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80264d2:	e122      	b.n	802671a <lv_label_refr_text+0x896>
        }
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 80264d4:	4b38      	ldr	r3, [pc, #224]	; (80265b8 <lv_label_refr_text+0x734>)
 80264d6:	681b      	ldr	r3, [r3, #0]
 80264d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80264dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80264de:	4610      	mov	r0, r2
 80264e0:	4798      	blx	r3
 80264e2:	4603      	mov	r3, r0
 80264e4:	2b03      	cmp	r3, #3
 80264e6:	d805      	bhi.n	80264f4 <lv_label_refr_text+0x670>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80264e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80264ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80264f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80264f2:	e112      	b.n	802671a <lv_label_refr_text+0x896>
        }
        else {
            lv_point_t p;
            lv_coord_t y_overed;
            p.x = lv_area_get_width(&txt_coords) -
 80264f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80264f8:	4618      	mov	r0, r3
 80264fa:	f7fe fd61 	bl	8024fc0 <lv_area_get_width>
 80264fe:	4603      	mov	r3, r0
 8026500:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8026502:	222e      	movs	r2, #46	; 0x2e
 8026504:	212e      	movs	r1, #46	; 0x2e
 8026506:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802650a:	f7f9 f887 	bl	801f61c <lv_font_get_glyph_width>
 802650e:	4603      	mov	r3, r0
 8026510:	461a      	mov	r2, r3
 8026512:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8026516:	4413      	add	r3, r2
            p.x = lv_area_get_width(&txt_coords) -
 8026518:	b29b      	uxth	r3, r3
 802651a:	461a      	mov	r2, r3
 802651c:	009b      	lsls	r3, r3, #2
 802651e:	1ad3      	subs	r3, r2, r3
 8026520:	b29b      	uxth	r3, r3
 8026522:	4423      	add	r3, r4
 8026524:	b29b      	uxth	r3, r3
 8026526:	b21b      	sxth	r3, r3
 8026528:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                  LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_area_get_height(&txt_coords);
 802652c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8026530:	4618      	mov	r0, r3
 8026532:	f7fe fd5c 	bl	8024fee <lv_area_get_height>
 8026536:	4603      	mov	r3, r0
 8026538:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            y_overed = p.y %
 802653c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8026540:	461c      	mov	r4, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8026542:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8026546:	f7fe fd69 	bl	802501c <lv_font_get_line_height>
 802654a:	4603      	mov	r3, r0
 802654c:	461a      	mov	r2, r3
 802654e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8026552:	4413      	add	r3, r2
            y_overed = p.y %
 8026554:	fb94 f2f3 	sdiv	r2, r4, r3
 8026558:	fb02 f303 	mul.w	r3, r2, r3
 802655c:	1ae3      	subs	r3, r4, r3
 802655e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
            if(y_overed >= lv_font_get_line_height(font)) {
 8026562:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8026566:	f7fe fd59 	bl	802501c <lv_font_get_line_height>
 802656a:	4603      	mov	r3, r0
 802656c:	461a      	mov	r2, r3
 802656e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8026572:	4293      	cmp	r3, r2
 8026574:	db22      	blt.n	80265bc <lv_label_refr_text+0x738>
                p.y -= y_overed;
 8026576:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 802657a:	b29a      	uxth	r2, r3
 802657c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8026580:	1ad3      	subs	r3, r2, r3
 8026582:	b29b      	uxth	r3, r3
 8026584:	b21b      	sxth	r3, r3
 8026586:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                p.y += lv_font_get_line_height(font);
 802658a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802658e:	f7fe fd45 	bl	802501c <lv_font_get_line_height>
 8026592:	4603      	mov	r3, r0
 8026594:	4619      	mov	r1, r3
 8026596:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 802659a:	b29a      	uxth	r2, r3
 802659c:	b28b      	uxth	r3, r1
 802659e:	4413      	add	r3, r2
 80265a0:	b29b      	uxth	r3, r3
 80265a2:	b21b      	sxth	r3, r3
 80265a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80265a8:	e01c      	b.n	80265e4 <lv_label_refr_text+0x760>
 80265aa:	bf00      	nop
 80265ac:	55555556 	.word	0x55555556
 80265b0:	080268f1 	.word	0x080268f1
 80265b4:	08026917 	.word	0x08026917
 80265b8:	2000002c 	.word	0x2000002c
            }
            else {
                p.y -= y_overed;
 80265bc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80265c0:	b29a      	uxth	r2, r3
 80265c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80265c6:	1ad3      	subs	r3, r2, r3
 80265c8:	b29b      	uxth	r3, r3
 80265ca:	b21b      	sxth	r3, r3
 80265cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                p.y -= line_space;
 80265d0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80265d4:	b29a      	uxth	r2, r3
 80265d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80265da:	1ad3      	subs	r3, r2, r3
 80265dc:	b29b      	uxth	r3, r3
 80265de:	b21b      	sxth	r3, r3
 80265e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
 80265e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80265e8:	4619      	mov	r1, r3
 80265ea:	6878      	ldr	r0, [r7, #4]
 80265ec:	f7fe ff52 	bl	8025494 <lv_label_get_letter_on>
 80265f0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

            /*Be sure there is space for the dots*/
            size_t txt_len = strlen(label->text);
 80265f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80265f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80265fa:	4618      	mov	r0, r3
 80265fc:	f7d9 fe26 	bl	800024c <strlen>
 8026600:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8026604:	4b49      	ldr	r3, [pc, #292]	; (802672c <lv_label_refr_text+0x8a8>)
 8026606:	681b      	ldr	r3, [r3, #0]
 8026608:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802660c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802660e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8026612:	4610      	mov	r0, r2
 8026614:	4798      	blx	r3
 8026616:	4603      	mov	r3, r0
 8026618:	64fb      	str	r3, [r7, #76]	; 0x4c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 802661a:	e00d      	b.n	8026638 <lv_label_refr_text+0x7b4>
                _lv_txt_encoded_prev(label->text, &byte_id);
 802661c:	4b44      	ldr	r3, [pc, #272]	; (8026730 <lv_label_refr_text+0x8ac>)
 802661e:	681b      	ldr	r3, [r3, #0]
 8026620:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8026624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026626:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802662a:	4610      	mov	r0, r2
 802662c:	4798      	blx	r3
                letter_id--;
 802662e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8026632:	3b01      	subs	r3, #1
 8026634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8026638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802663a:	3303      	adds	r3, #3
 802663c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026640:	429a      	cmp	r2, r3
 8026642:	d3eb      	bcc.n	802661c <lv_label_refr_text+0x798>
            }

            /*Save letters under the dots and replace them with dots*/
            uint32_t byte_id_ori = byte_id;
 8026644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            uint32_t i;
            uint8_t len = 0;
 802664a:	2300      	movs	r3, #0
 802664c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8026650:	2300      	movs	r3, #0
 8026652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8026656:	e026      	b.n	80266a6 <lv_label_refr_text+0x822>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8026658:	4b36      	ldr	r3, [pc, #216]	; (8026734 <lv_label_refr_text+0x8b0>)
 802665a:	681b      	ldr	r3, [r3, #0]
 802665c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8026660:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8026662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8026664:	440a      	add	r2, r1
 8026666:	4610      	mov	r0, r2
 8026668:	4798      	blx	r3
 802666a:	4603      	mov	r3, r0
 802666c:	461a      	mov	r2, r3
 802666e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8026672:	4413      	add	r3, r2
 8026674:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                _lv_txt_encoded_next(label->text, &byte_id);
 8026678:	4b2f      	ldr	r3, [pc, #188]	; (8026738 <lv_label_refr_text+0x8b4>)
 802667a:	681b      	ldr	r3, [r3, #0]
 802667c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8026680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026682:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8026686:	4610      	mov	r0, r2
 8026688:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 802668a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 802668e:	2b03      	cmp	r3, #3
 8026690:	d80d      	bhi.n	80266ae <lv_label_refr_text+0x82a>
 8026692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026694:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026698:	429a      	cmp	r2, r3
 802669a:	d308      	bcc.n	80266ae <lv_label_refr_text+0x82a>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 802669c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80266a0:	3301      	adds	r3, #1
 80266a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80266a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80266aa:	2b03      	cmp	r3, #3
 80266ac:	d9d4      	bls.n	8026658 <lv_label_refr_text+0x7d4>
                    break;
                }
            }

            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 80266ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80266b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80266b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80266b8:	4413      	add	r3, r2
 80266ba:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 80266be:	4619      	mov	r1, r3
 80266c0:	6878      	ldr	r0, [r7, #4]
 80266c2:	f000 f893 	bl	80267ec <lv_label_set_dot_tmp>
 80266c6:	4603      	mov	r3, r0
 80266c8:	2b00      	cmp	r3, #0
 80266ca:	d026      	beq.n	802671a <lv_label_refr_text+0x896>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80266cc:	2300      	movs	r3, #0
 80266ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80266d2:	e00f      	b.n	80266f4 <lv_label_refr_text+0x870>
                    label->text[byte_id_ori + i] = '.';
 80266d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80266d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80266da:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80266de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80266e2:	440b      	add	r3, r1
 80266e4:	4413      	add	r3, r2
 80266e6:	222e      	movs	r2, #46	; 0x2e
 80266e8:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80266ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80266ee:	3301      	adds	r3, #1
 80266f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80266f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80266f8:	2b02      	cmp	r3, #2
 80266fa:	d9eb      	bls.n	80266d4 <lv_label_refr_text+0x850>
                }
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 80266fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026706:	3303      	adds	r3, #3
 8026708:	4413      	add	r3, r2
 802670a:	2200      	movs	r2, #0
 802670c:	701a      	strb	r2, [r3, #0]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 802670e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8026712:	1cda      	adds	r2, r3, #3
 8026714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026718:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    else if(label->long_mode == LV_LABEL_LONG_CLIP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(obj);
 802671a:	6878      	ldr	r0, [r7, #4]
 802671c:	f7e3 f8d3 	bl	80098c6 <lv_obj_invalidate>
 8026720:	e000      	b.n	8026724 <lv_label_refr_text+0x8a0>
    if(label->text == NULL) return;
 8026722:	bf00      	nop
}
 8026724:	37cc      	adds	r7, #204	; 0xcc
 8026726:	46bd      	mov	sp, r7
 8026728:	bd90      	pop	{r4, r7, pc}
 802672a:	bf00      	nop
 802672c:	20000024 	.word	0x20000024
 8026730:	20000020 	.word	0x20000020
 8026734:	20000018 	.word	0x20000018
 8026738:	2000001c 	.word	0x2000001c

0802673c <lv_label_revert_dots>:


static void lv_label_revert_dots(lv_obj_t * obj)
{
 802673c:	b580      	push	{r7, lr}
 802673e:	b088      	sub	sp, #32
 8026740:	af00      	add	r7, sp, #0
 8026742:	6078      	str	r0, [r7, #4]

    lv_label_t * label = (lv_label_t *)obj;
 8026744:	687b      	ldr	r3, [r7, #4]
 8026746:	61bb      	str	r3, [r7, #24]

    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8026748:	69bb      	ldr	r3, [r7, #24]
 802674a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802674e:	f003 0307 	and.w	r3, r3, #7
 8026752:	b2db      	uxtb	r3, r3
 8026754:	2b01      	cmp	r3, #1
 8026756:	d141      	bne.n	80267dc <lv_label_revert_dots+0xa0>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8026758:	69bb      	ldr	r3, [r7, #24]
 802675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802675c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8026760:	d03e      	beq.n	80267e0 <lv_label_revert_dots+0xa4>
    uint32_t letter_i = label->dot_end - LV_LABEL_DOT_NUM;
 8026762:	69bb      	ldr	r3, [r7, #24]
 8026764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026766:	3b03      	subs	r3, #3
 8026768:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 802676a:	4b1f      	ldr	r3, [pc, #124]	; (80267e8 <lv_label_revert_dots+0xac>)
 802676c:	681b      	ldr	r3, [r3, #0]
 802676e:	69ba      	ldr	r2, [r7, #24]
 8026770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026772:	6979      	ldr	r1, [r7, #20]
 8026774:	4610      	mov	r0, r2
 8026776:	4798      	blx	r3
 8026778:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 802677a:	2300      	movs	r3, #0
 802677c:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(obj);
 802677e:	6878      	ldr	r0, [r7, #4]
 8026780:	f000 f878 	bl	8026874 <lv_label_get_dot_tmp>
 8026784:	60f8      	str	r0, [r7, #12]
    while(label->text[byte_i + i] != '\0') {
 8026786:	e00d      	b.n	80267a4 <lv_label_revert_dots+0x68>
        label->text[byte_i + i] = dot_tmp[i];
 8026788:	7ffb      	ldrb	r3, [r7, #31]
 802678a:	68fa      	ldr	r2, [r7, #12]
 802678c:	441a      	add	r2, r3
 802678e:	69bb      	ldr	r3, [r7, #24]
 8026790:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026792:	7ff8      	ldrb	r0, [r7, #31]
 8026794:	693b      	ldr	r3, [r7, #16]
 8026796:	4403      	add	r3, r0
 8026798:	440b      	add	r3, r1
 802679a:	7812      	ldrb	r2, [r2, #0]
 802679c:	701a      	strb	r2, [r3, #0]
        i++;
 802679e:	7ffb      	ldrb	r3, [r7, #31]
 80267a0:	3301      	adds	r3, #1
 80267a2:	77fb      	strb	r3, [r7, #31]
    while(label->text[byte_i + i] != '\0') {
 80267a4:	69bb      	ldr	r3, [r7, #24]
 80267a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80267a8:	7ff9      	ldrb	r1, [r7, #31]
 80267aa:	693b      	ldr	r3, [r7, #16]
 80267ac:	440b      	add	r3, r1
 80267ae:	4413      	add	r3, r2
 80267b0:	781b      	ldrb	r3, [r3, #0]
 80267b2:	2b00      	cmp	r3, #0
 80267b4:	d1e8      	bne.n	8026788 <lv_label_revert_dots+0x4c>
    }
    label->text[byte_i + i] = dot_tmp[i];
 80267b6:	7ffb      	ldrb	r3, [r7, #31]
 80267b8:	68fa      	ldr	r2, [r7, #12]
 80267ba:	441a      	add	r2, r3
 80267bc:	69bb      	ldr	r3, [r7, #24]
 80267be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80267c0:	7ff8      	ldrb	r0, [r7, #31]
 80267c2:	693b      	ldr	r3, [r7, #16]
 80267c4:	4403      	add	r3, r0
 80267c6:	440b      	add	r3, r1
 80267c8:	7812      	ldrb	r2, [r2, #0]
 80267ca:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(obj);
 80267cc:	6878      	ldr	r0, [r7, #4]
 80267ce:	f000 f86a 	bl	80268a6 <lv_label_dot_tmp_free>

    label->dot_end = LV_LABEL_DOT_END_INV;
 80267d2:	69bb      	ldr	r3, [r7, #24]
 80267d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80267d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80267da:	e002      	b.n	80267e2 <lv_label_revert_dots+0xa6>
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 80267dc:	bf00      	nop
 80267de:	e000      	b.n	80267e2 <lv_label_revert_dots+0xa6>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 80267e0:	bf00      	nop
}
 80267e2:	3720      	adds	r7, #32
 80267e4:	46bd      	mov	sp, r7
 80267e6:	bd80      	pop	{r7, pc}
 80267e8:	20000024 	.word	0x20000024

080267ec <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * obj, char * data, uint32_t len)
{
 80267ec:	b580      	push	{r7, lr}
 80267ee:	b086      	sub	sp, #24
 80267f0:	af00      	add	r7, sp, #0
 80267f2:	60f8      	str	r0, [r7, #12]
 80267f4:	60b9      	str	r1, [r7, #8]
 80267f6:	607a      	str	r2, [r7, #4]

    lv_label_t * label = (lv_label_t *)obj;
 80267f8:	68fb      	ldr	r3, [r7, #12]
 80267fa:	617b      	str	r3, [r7, #20]
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 80267fc:	68f8      	ldr	r0, [r7, #12]
 80267fe:	f000 f852 	bl	80268a6 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8026802:	687b      	ldr	r3, [r7, #4]
 8026804:	2b04      	cmp	r3, #4
 8026806:	d922      	bls.n	802684e <lv_label_set_dot_tmp+0x62>
        /*Memory needs to be allocated. Allocates an additional byte
         *for a NULL-terminator so it can be copied.*/
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8026808:	687b      	ldr	r3, [r7, #4]
 802680a:	3301      	adds	r3, #1
 802680c:	4618      	mov	r0, r3
 802680e:	f7fb fbf1 	bl	8021ff4 <lv_mem_alloc>
 8026812:	4602      	mov	r2, r0
 8026814:	697b      	ldr	r3, [r7, #20]
 8026816:	629a      	str	r2, [r3, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 8026818:	697b      	ldr	r3, [r7, #20]
 802681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802681c:	2b00      	cmp	r3, #0
 802681e:	d101      	bne.n	8026824 <lv_label_set_dot_tmp+0x38>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 8026820:	2300      	movs	r3, #0
 8026822:	e023      	b.n	802686c <lv_label_set_dot_tmp+0x80>
        }
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8026824:	697b      	ldr	r3, [r7, #20]
 8026826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026828:	687a      	ldr	r2, [r7, #4]
 802682a:	68b9      	ldr	r1, [r7, #8]
 802682c:	4618      	mov	r0, r3
 802682e:	f7fb fd6f 	bl	8022310 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8026832:	697b      	ldr	r3, [r7, #20]
 8026834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026836:	687b      	ldr	r3, [r7, #4]
 8026838:	4413      	add	r3, r2
 802683a:	2200      	movs	r2, #0
 802683c:	701a      	strb	r2, [r3, #0]
        label->dot_tmp_alloc    = true;
 802683e:	697a      	ldr	r2, [r7, #20]
 8026840:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8026844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026848:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 802684c:	e00d      	b.n	802686a <lv_label_set_dot_tmp+0x7e>
    }
    else {
        /*Characters can be directly stored in object*/
        label->dot_tmp_alloc = false;
 802684e:	697a      	ldr	r2, [r7, #20]
 8026850:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8026854:	f36f 1386 	bfc	r3, #6, #1
 8026858:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 802685c:	697b      	ldr	r3, [r7, #20]
 802685e:	3328      	adds	r3, #40	; 0x28
 8026860:	687a      	ldr	r2, [r7, #4]
 8026862:	68b9      	ldr	r1, [r7, #8]
 8026864:	4618      	mov	r0, r3
 8026866:	f7fb fd53 	bl	8022310 <lv_memcpy>
    }
    return true;
 802686a:	2301      	movs	r3, #1
}
 802686c:	4618      	mov	r0, r3
 802686e:	3718      	adds	r7, #24
 8026870:	46bd      	mov	sp, r7
 8026872:	bd80      	pop	{r7, pc}

08026874 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * obj)
{
 8026874:	b480      	push	{r7}
 8026876:	b085      	sub	sp, #20
 8026878:	af00      	add	r7, sp, #0
 802687a:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 802687c:	687b      	ldr	r3, [r7, #4]
 802687e:	60fb      	str	r3, [r7, #12]
    if(label->dot_tmp_alloc) {
 8026880:	68fb      	ldr	r3, [r7, #12]
 8026882:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8026886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802688a:	b2db      	uxtb	r3, r3
 802688c:	2b00      	cmp	r3, #0
 802688e:	d002      	beq.n	8026896 <lv_label_get_dot_tmp+0x22>
        return label->dot.tmp_ptr;
 8026890:	68fb      	ldr	r3, [r7, #12]
 8026892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026894:	e001      	b.n	802689a <lv_label_get_dot_tmp+0x26>
    }
    else {
        return label->dot.tmp;
 8026896:	68fb      	ldr	r3, [r7, #12]
 8026898:	3328      	adds	r3, #40	; 0x28
    }
}
 802689a:	4618      	mov	r0, r3
 802689c:	3714      	adds	r7, #20
 802689e:	46bd      	mov	sp, r7
 80268a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268a4:	4770      	bx	lr

080268a6 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 80268a6:	b580      	push	{r7, lr}
 80268a8:	b084      	sub	sp, #16
 80268aa:	af00      	add	r7, sp, #0
 80268ac:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 80268ae:	687b      	ldr	r3, [r7, #4]
 80268b0:	60fb      	str	r3, [r7, #12]
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 80268b2:	68fb      	ldr	r3, [r7, #12]
 80268b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80268b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80268bc:	b2db      	uxtb	r3, r3
 80268be:	2b00      	cmp	r3, #0
 80268c0:	d008      	beq.n	80268d4 <lv_label_dot_tmp_free+0x2e>
 80268c2:	68fb      	ldr	r3, [r7, #12]
 80268c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80268c6:	2b00      	cmp	r3, #0
 80268c8:	d004      	beq.n	80268d4 <lv_label_dot_tmp_free+0x2e>
        lv_mem_free(label->dot.tmp_ptr);
 80268ca:	68fb      	ldr	r3, [r7, #12]
 80268cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80268ce:	4618      	mov	r0, r3
 80268d0:	f7fb fbc0 	bl	8022054 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 80268d4:	68fa      	ldr	r2, [r7, #12]
 80268d6:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80268da:	f36f 1386 	bfc	r3, #6, #1
 80268de:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 80268e2:	68fb      	ldr	r3, [r7, #12]
 80268e4:	2200      	movs	r2, #0
 80268e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80268e8:	bf00      	nop
 80268ea:	3710      	adds	r7, #16
 80268ec:	46bd      	mov	sp, r7
 80268ee:	bd80      	pop	{r7, pc}

080268f0 <set_ofs_x_anim>:


static void set_ofs_x_anim(void * obj, int32_t v)
{
 80268f0:	b580      	push	{r7, lr}
 80268f2:	b084      	sub	sp, #16
 80268f4:	af00      	add	r7, sp, #0
 80268f6:	6078      	str	r0, [r7, #4]
 80268f8:	6039      	str	r1, [r7, #0]
    lv_label_t * label = (lv_label_t *)obj;
 80268fa:	687b      	ldr	r3, [r7, #4]
 80268fc:	60fb      	str	r3, [r7, #12]
    label->offset.x    = v;
 80268fe:	683b      	ldr	r3, [r7, #0]
 8026900:	b21a      	sxth	r2, r3
 8026902:	68fb      	ldr	r3, [r7, #12]
 8026904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    lv_obj_invalidate(obj);
 8026908:	6878      	ldr	r0, [r7, #4]
 802690a:	f7e2 ffdc 	bl	80098c6 <lv_obj_invalidate>
}
 802690e:	bf00      	nop
 8026910:	3710      	adds	r7, #16
 8026912:	46bd      	mov	sp, r7
 8026914:	bd80      	pop	{r7, pc}

08026916 <set_ofs_y_anim>:

static void set_ofs_y_anim(void * obj, int32_t v)
{
 8026916:	b580      	push	{r7, lr}
 8026918:	b084      	sub	sp, #16
 802691a:	af00      	add	r7, sp, #0
 802691c:	6078      	str	r0, [r7, #4]
 802691e:	6039      	str	r1, [r7, #0]
    lv_label_t * label = (lv_label_t *)obj;
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	60fb      	str	r3, [r7, #12]
    label->offset.y    = v;
 8026924:	683b      	ldr	r3, [r7, #0]
 8026926:	b21a      	sxth	r2, r3
 8026928:	68fb      	ldr	r3, [r7, #12]
 802692a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    lv_obj_invalidate(obj);
 802692e:	6878      	ldr	r0, [r7, #4]
 8026930:	f7e2 ffc9 	bl	80098c6 <lv_obj_invalidate>
}
 8026934:	bf00      	nop
 8026936:	3710      	adds	r7, #16
 8026938:	46bd      	mov	sp, r7
 802693a:	bd80      	pop	{r7, pc}

0802693c <__libc_init_array>:
 802693c:	b570      	push	{r4, r5, r6, lr}
 802693e:	4d0d      	ldr	r5, [pc, #52]	; (8026974 <__libc_init_array+0x38>)
 8026940:	4c0d      	ldr	r4, [pc, #52]	; (8026978 <__libc_init_array+0x3c>)
 8026942:	1b64      	subs	r4, r4, r5
 8026944:	10a4      	asrs	r4, r4, #2
 8026946:	2600      	movs	r6, #0
 8026948:	42a6      	cmp	r6, r4
 802694a:	d109      	bne.n	8026960 <__libc_init_array+0x24>
 802694c:	4d0b      	ldr	r5, [pc, #44]	; (802697c <__libc_init_array+0x40>)
 802694e:	4c0c      	ldr	r4, [pc, #48]	; (8026980 <__libc_init_array+0x44>)
 8026950:	f000 f836 	bl	80269c0 <_init>
 8026954:	1b64      	subs	r4, r4, r5
 8026956:	10a4      	asrs	r4, r4, #2
 8026958:	2600      	movs	r6, #0
 802695a:	42a6      	cmp	r6, r4
 802695c:	d105      	bne.n	802696a <__libc_init_array+0x2e>
 802695e:	bd70      	pop	{r4, r5, r6, pc}
 8026960:	f855 3b04 	ldr.w	r3, [r5], #4
 8026964:	4798      	blx	r3
 8026966:	3601      	adds	r6, #1
 8026968:	e7ee      	b.n	8026948 <__libc_init_array+0xc>
 802696a:	f855 3b04 	ldr.w	r3, [r5], #4
 802696e:	4798      	blx	r3
 8026970:	3601      	adds	r6, #1
 8026972:	e7f2      	b.n	802695a <__libc_init_array+0x1e>
 8026974:	0802dd14 	.word	0x0802dd14
 8026978:	0802dd14 	.word	0x0802dd14
 802697c:	0802dd14 	.word	0x0802dd14
 8026980:	0802dd18 	.word	0x0802dd18

08026984 <memcpy>:
 8026984:	440a      	add	r2, r1
 8026986:	4291      	cmp	r1, r2
 8026988:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802698c:	d100      	bne.n	8026990 <memcpy+0xc>
 802698e:	4770      	bx	lr
 8026990:	b510      	push	{r4, lr}
 8026992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026996:	f803 4f01 	strb.w	r4, [r3, #1]!
 802699a:	4291      	cmp	r1, r2
 802699c:	d1f9      	bne.n	8026992 <memcpy+0xe>
 802699e:	bd10      	pop	{r4, pc}

080269a0 <memset>:
 80269a0:	4402      	add	r2, r0
 80269a2:	4603      	mov	r3, r0
 80269a4:	4293      	cmp	r3, r2
 80269a6:	d100      	bne.n	80269aa <memset+0xa>
 80269a8:	4770      	bx	lr
 80269aa:	f803 1b01 	strb.w	r1, [r3], #1
 80269ae:	e7f9      	b.n	80269a4 <memset+0x4>

080269b0 <strcpy>:
 80269b0:	4603      	mov	r3, r0
 80269b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80269b6:	f803 2b01 	strb.w	r2, [r3], #1
 80269ba:	2a00      	cmp	r2, #0
 80269bc:	d1f9      	bne.n	80269b2 <strcpy+0x2>
 80269be:	4770      	bx	lr

080269c0 <_init>:
 80269c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269c2:	bf00      	nop
 80269c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269c6:	bc08      	pop	{r3}
 80269c8:	469e      	mov	lr, r3
 80269ca:	4770      	bx	lr

080269cc <_fini>:
 80269cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269ce:	bf00      	nop
 80269d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269d2:	bc08      	pop	{r3}
 80269d4:	469e      	mov	lr, r3
 80269d6:	4770      	bx	lr
